
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000bf3 	.word	0x00000bf3
  10:	00000bf5 	.word	0x00000bf5
  14:	00000bf7 	.word	0x00000bf7
  18:	00000bf9 	.word	0x00000bf9
	...
  2c:	00000bfb 	.word	0x00000bfb
  30:	00000bfd 	.word	0x00000bfd
  34:	00000000 	.word	0x00000000
  38:	00000bff 	.word	0x00000bff
  3c:	00000c01 	.word	0x00000c01
  40:	00000c03 	.word	0x00000c03
  44:	00000c03 	.word	0x00000c03
  48:	00000c03 	.word	0x00000c03
  4c:	00000c03 	.word	0x00000c03
  50:	00000c03 	.word	0x00000c03
  54:	00000c03 	.word	0x00000c03
  58:	00000c03 	.word	0x00000c03
  5c:	00000c03 	.word	0x00000c03
  60:	00000c03 	.word	0x00000c03
  64:	00000c03 	.word	0x00000c03
  68:	00000c03 	.word	0x00000c03
  6c:	00000c03 	.word	0x00000c03
  70:	00000c03 	.word	0x00000c03
  74:	00000c03 	.word	0x00000c03
  78:	00000c03 	.word	0x00000c03
  7c:	00000c03 	.word	0x00000c03
  80:	00000c03 	.word	0x00000c03
  84:	00000c03 	.word	0x00000c03
  88:	00000c03 	.word	0x00000c03
  8c:	00000c03 	.word	0x00000c03
  90:	00000c03 	.word	0x00000c03
  94:	00000c03 	.word	0x00000c03
  98:	00000c03 	.word	0x00000c03
  9c:	00000c03 	.word	0x00000c03
  a0:	00000c03 	.word	0x00000c03
  a4:	00000c03 	.word	0x00000c03
  a8:	00000c03 	.word	0x00000c03
  ac:	00000c03 	.word	0x00000c03
  b0:	00000c03 	.word	0x00000c03
  b4:	00000c03 	.word	0x00000c03
  b8:	00000c03 	.word	0x00000c03
  bc:	00000c03 	.word	0x00000c03
  c0:	00000c03 	.word	0x00000c03
  c4:	00000c03 	.word	0x00000c03
  c8:	00000c03 	.word	0x00000c03
  cc:	00000c03 	.word	0x00000c03
  d0:	00000c03 	.word	0x00000c03
  d4:	00000c03 	.word	0x00000c03
  d8:	00000c03 	.word	0x00000c03
  dc:	00000c03 	.word	0x00000c03
  e0:	00000c03 	.word	0x00000c03
  e4:	00000c03 	.word	0x00000c03
  e8:	00000c03 	.word	0x00000c03
  ec:	00000c03 	.word	0x00000c03
  f0:	00000c03 	.word	0x00000c03
  f4:	00000c03 	.word	0x00000c03
  f8:	00000c03 	.word	0x00000c03
  fc:	00000c03 	.word	0x00000c03
 100:	00000c03 	.word	0x00000c03
 104:	00000c03 	.word	0x00000c03
 108:	00000c03 	.word	0x00000c03
 10c:	00000c03 	.word	0x00000c03
 110:	00000c03 	.word	0x00000c03
 114:	00000c03 	.word	0x00000c03
 118:	00000c03 	.word	0x00000c03
 11c:	00000c03 	.word	0x00000c03
 120:	00000c03 	.word	0x00000c03
 124:	00000c03 	.word	0x00000c03
 128:	00000c03 	.word	0x00000c03
 12c:	00000c03 	.word	0x00000c03
 130:	00000c03 	.word	0x00000c03
 134:	00000c03 	.word	0x00000c03
 138:	00000c03 	.word	0x00000c03
 13c:	00000c03 	.word	0x00000c03
 140:	00000c03 	.word	0x00000c03
 144:	00000c03 	.word	0x00000c03
 148:	00000c03 	.word	0x00000c03
 14c:	00000c03 	.word	0x00000c03
 150:	00000c03 	.word	0x00000c03
 154:	00000c03 	.word	0x00000c03
 158:	00000c03 	.word	0x00000c03
 15c:	00000c03 	.word	0x00000c03
 160:	00000c03 	.word	0x00000c03
 164:	00000c03 	.word	0x00000c03
 168:	00000c03 	.word	0x00000c03
 16c:	00000c03 	.word	0x00000c03
 170:	00000c03 	.word	0x00000c03
 174:	00000c03 	.word	0x00000c03
 178:	00000c03 	.word	0x00000c03
 17c:	00000c03 	.word	0x00000c03
 180:	00000c03 	.word	0x00000c03
 184:	00000c03 	.word	0x00000c03
 188:	00000c03 	.word	0x00000c03
 18c:	00000c03 	.word	0x00000c03
 190:	00000c03 	.word	0x00000c03
 194:	00000c03 	.word	0x00000c03
 198:	00000c03 	.word	0x00000c03
 19c:	00000c03 	.word	0x00000c03
 1a0:	00000c03 	.word	0x00000c03
 1a4:	00000c03 	.word	0x00000c03
 1a8:	00000c03 	.word	0x00000c03
 1ac:	00000c03 	.word	0x00000c03
 1b0:	00000c03 	.word	0x00000c03
 1b4:	00000c03 	.word	0x00000c03
 1b8:	00000c03 	.word	0x00000c03
 1bc:	00000c03 	.word	0x00000c03
 1c0:	00000c03 	.word	0x00000c03
 1c4:	00000c03 	.word	0x00000c03
 1c8:	00000c03 	.word	0x00000c03
 1cc:	00000c03 	.word	0x00000c03
 1d0:	00000c03 	.word	0x00000c03
 1d4:	00000c03 	.word	0x00000c03
 1d8:	00000c03 	.word	0x00000c03
 1dc:	00000c03 	.word	0x00000c03
 1e0:	00000c03 	.word	0x00000c03
 1e4:	00000c03 	.word	0x00000c03
 1e8:	00000c03 	.word	0x00000c03
 1ec:	00000c03 	.word	0x00000c03
 1f0:	00000c03 	.word	0x00000c03
 1f4:	00000c03 	.word	0x00000c03
 1f8:	00000c03 	.word	0x00000c03
 1fc:	00000c03 	.word	0x00000c03
 200:	00000c03 	.word	0x00000c03
 204:	00000c03 	.word	0x00000c03
 208:	00000c03 	.word	0x00000c03
 20c:	00000c03 	.word	0x00000c03
 210:	00000c03 	.word	0x00000c03
 214:	00000c03 	.word	0x00000c03
 218:	00000c03 	.word	0x00000c03
 21c:	00000c03 	.word	0x00000c03
 220:	00000c03 	.word	0x00000c03
 224:	00000c03 	.word	0x00000c03
 228:	00000c03 	.word	0x00000c03
 22c:	00000c03 	.word	0x00000c03
 230:	00000c03 	.word	0x00000c03
 234:	00000c03 	.word	0x00000c03
 238:	00000c03 	.word	0x00000c03
 23c:	00000c03 	.word	0x00000c03
 240:	00000c03 	.word	0x00000c03
 244:	00000c03 	.word	0x00000c03
 248:	00000c03 	.word	0x00000c03
 24c:	00000c03 	.word	0x00000c03
 250:	00000c03 	.word	0x00000c03
 254:	00000c03 	.word	0x00000c03
 258:	00000c03 	.word	0x00000c03
 25c:	00000c03 	.word	0x00000c03
 260:	00000c03 	.word	0x00000c03
 264:	00000c03 	.word	0x00000c03
 268:	00000c03 	.word	0x00000c03
 26c:	00000c03 	.word	0x00000c03
 270:	00000c03 	.word	0x00000c03
 274:	00000c03 	.word	0x00000c03
 278:	00000c03 	.word	0x00000c03
 27c:	00000c03 	.word	0x00000c03
 280:	00000c03 	.word	0x00000c03
 284:	00000c03 	.word	0x00000c03
 288:	00000c03 	.word	0x00000c03
 28c:	00000c03 	.word	0x00000c03
 290:	00000c03 	.word	0x00000c03
 294:	00000c03 	.word	0x00000c03
 298:	00000c03 	.word	0x00000c03
 29c:	00000c03 	.word	0x00000c03
 2a0:	00000c03 	.word	0x00000c03
 2a4:	00000c03 	.word	0x00000c03
 2a8:	00000c03 	.word	0x00000c03
 2ac:	00000c03 	.word	0x00000c03
 2b0:	00000c03 	.word	0x00000c03
 2b4:	00000c03 	.word	0x00000c03
 2b8:	00000c03 	.word	0x00000c03
 2bc:	00000c03 	.word	0x00000c03
 2c0:	00000c03 	.word	0x00000c03
 2c4:	00000c03 	.word	0x00000c03
 2c8:	00000c03 	.word	0x00000c03
 2cc:	00000c03 	.word	0x00000c03
 2d0:	00000c03 	.word	0x00000c03
 2d4:	00000c03 	.word	0x00000c03
 2d8:	00000c03 	.word	0x00000c03
 2dc:	00000c03 	.word	0x00000c03
 2e0:	00000c03 	.word	0x00000c03
 2e4:	00000c03 	.word	0x00000c03
 2e8:	00000c03 	.word	0x00000c03
 2ec:	00000c03 	.word	0x00000c03
 2f0:	00000c03 	.word	0x00000c03
 2f4:	00000c03 	.word	0x00000c03
 2f8:	00000c03 	.word	0x00000c03
 2fc:	00000c03 	.word	0x00000c03
 300:	00000c03 	.word	0x00000c03
 304:	00000c03 	.word	0x00000c03
 308:	00000c03 	.word	0x00000c03
 30c:	00000c03 	.word	0x00000c03

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 faed 	bl	a60 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbac 	bl	be8 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff98f4 	.word	0x1fff98f4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 faf7 	bl	b8c <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This example transmits 2 8 byte data PDUs every 5s using CAN 2 at a bitrate of 100Kbps.
 * In this case only one HTH is used with two message buffers.
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b500      	push	{lr}
     8b2:	b085      	sub	sp, #20
    //local data.
    //Transmision and reception buffers for Spi1Cs3 channels.
    uint8 Control = 0;  //Transmit buffer for control channel.
     8b4:	2300      	movs	r3, #0
     8b6:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 RxDataBuffer = 50; //Receive buffer for data channel.
     8ba:	2332      	movs	r3, #50	; 0x32
     8bc:	f88d 300e 	strb.w	r3, [sp, #14]

    //Transmit message (PDU) 2 (Message ID 0x100) for Can 0 controller.
    uint8 Message2_SDU = 0x01; //Data payload for message.
     8c0:	2301      	movs	r3, #1
     8c2:	f88d 300d 	strb.w	r3, [sp, #13]
    PduInfoType Message2 = {
     8c6:	f10d 030d 	add.w	r3, sp, #13
     8ca:	9300      	str	r3, [sp, #0]
     8cc:	2300      	movs	r3, #0
     8ce:	9301      	str	r3, [sp, #4]
     8d0:	2301      	movs	r3, #1
     8d2:	9302      	str	r3, [sp, #8]
        .SduLength = 1,
        .SduDataPtr = &Message2_SDU,
        .MetaDataPtr = NULL_PTR
    };

    EcuM_Init();    //MCU configuration.
     8d4:	f000 feb2 	bl	163c <EcuM_Init>
    CanIf_SetControllerMode( CanIfFlexCan0 , CAN_CS_STARTED );   //Can 0 controller active in Can Bus.
     8d8:	2101      	movs	r1, #1
     8da:	2001      	movs	r0, #1
     8dc:	f016 fbcd 	bl	1707a <CanIf_SetControllerMode>
    
    
    //Sending a single register read instruction to SBC.
    //Defining control channel.
    Control = 0x74; //Register ID.
     8e0:	2374      	movs	r3, #116	; 0x74
     8e2:	f88d 300f 	strb.w	r3, [sp, #15]
    Control <<= 1;
     8e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
     8ea:	005b      	lsls	r3, r3, #1
     8ec:	b2db      	uxtb	r3, r3
     8ee:	f88d 300f 	strb.w	r3, [sp, #15]
    Control += 1;
     8f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     8f6:	3301      	adds	r3, #1
     8f8:	b2db      	uxtb	r3, r3
     8fa:	f88d 300f 	strb.w	r3, [sp, #15]
    
    //Setup of external buffers.
    Spi_SetupEB( SpiConf_SpiChannel_Spi1Cs3_Control, &Control, NULL, 1 );
     8fe:	f10d 010f 	add.w	r1, sp, #15
     902:	2301      	movs	r3, #1
     904:	2200      	movs	r2, #0
     906:	2000      	movs	r0, #0
     908:	f009 f80e 	bl	9928 <Spi_SetupEB>
    Spi_SetupEB( SpiConf_SpiChannel_Spi1Cs3_Data, NULL , &RxDataBuffer , 1 );
     90c:	f10d 020e 	add.w	r2, sp, #14
     910:	2301      	movs	r3, #1
     912:	2100      	movs	r1, #0
     914:	2001      	movs	r0, #1
     916:	f009 f807 	bl	9928 <Spi_SetupEB>

    Spi_SyncTransmit( SpiConf_SpiSequence_Spi1Cs3_Sequence_W_R );   //Transmiting instruction.
     91a:	2000      	movs	r0, #0
     91c:	f009 f8dc 	bl	9ad8 <Spi_SyncTransmit>
    

    while( 1u ) {
        //Transmit messages every 5s.
        CanIf_Transmit( CanIfTxPDU_2, &Message2 );   //Writing in Can 0 message buffer 1.
     920:	466b      	mov	r3, sp
     922:	4619      	mov	r1, r3
     924:	2002      	movs	r0, #2
     926:	f016 fa81 	bl	16e2c <CanIf_Transmit>

        while( CanIf_Can0_bTxFlag == FALSE ); //Waiting until messages are transmitted.
     92a:	bf00      	nop
     92c:	4b0a      	ldr	r3, [pc, #40]	; (958 <main+0xa8>)
     92e:	781b      	ldrb	r3, [r3, #0]
     930:	f083 0301 	eor.w	r3, r3, #1
     934:	b2db      	uxtb	r3, r3
     936:	2b00      	cmp	r3, #0
     938:	d1f8      	bne.n	92c <main+0x7c>
        CanIf_Can0_bTxFlag = FALSE;  //Clearing transmit flag.
     93a:	4b07      	ldr	r3, [pc, #28]	; (958 <main+0xa8>)
     93c:	2200      	movs	r2, #0
     93e:	701a      	strb	r2, [r3, #0]

        //Changing SDUs.
        Message2_SDU++;
     940:	f89d 300d 	ldrb.w	r3, [sp, #13]
     944:	3301      	adds	r3, #1
     946:	b2db      	uxtb	r3, r3
     948:	f88d 300d 	strb.w	r3, [sp, #13]

        Delay( 5000 );  //Waiting 5s for next transmission.
     94c:	f241 3088 	movw	r0, #5000	; 0x1388
     950:	f000 fe94 	bl	167c <Delay>
        CanIf_Transmit( CanIfTxPDU_2, &Message2 );   //Writing in Can 0 message buffer 1.
     954:	e7e4      	b.n	920 <main+0x70>
     956:	bf00      	nop
     958:	1fff8b30 	.word	0x1fff8b30

0000095c <DevAssert>:
    #error "Unsupported architecture!"
#endif

/* Implement default assert macro */
static inline void DevAssert(volatile boolean x)
{
     95c:	b082      	sub	sp, #8
     95e:	4603      	mov	r3, r0
     960:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     964:	f89d 3007 	ldrb.w	r3, [sp, #7]
     968:	b2db      	uxtb	r3, r3
     96a:	2b00      	cmp	r3, #0
     96c:	d101      	bne.n	972 <DevAssert+0x16>
     96e:	be00      	bkpt	0x0000
     970:	e7fd      	b.n	96e <DevAssert+0x12>
}
     972:	bf00      	nop
     974:	b002      	add	sp, #8
     976:	4770      	bx	lr

00000978 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     978:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     97a:	f3ef 8310 	mrs	r3, PRIMASK
     97e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     980:	4623      	mov	r3, r4
}
     982:	4618      	mov	r0, r3
     984:	f85d 4b04 	ldr.w	r4, [sp], #4
     988:	4770      	bx	lr

0000098a <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     98a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     98c:	f3ef 8310 	mrs	r3, PRIMASK
     990:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     992:	4623      	mov	r3, r4
}
     994:	4618      	mov	r0, r3
     996:	f85d 4b04 	ldr.w	r4, [sp], #4
     99a:	4770      	bx	lr

0000099c <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     99c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     99e:	f3ef 8310 	mrs	r3, PRIMASK
     9a2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9a4:	4623      	mov	r3, r4
}
     9a6:	4618      	mov	r0, r3
     9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
     9ac:	4770      	bx	lr

000009ae <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     9ae:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9b0:	f3ef 8310 	mrs	r3, PRIMASK
     9b4:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9b6:	4623      	mov	r3, r4
}
     9b8:	4618      	mov	r0, r3
     9ba:	f85d 4b04 	ldr.w	r4, [sp], #4
     9be:	4770      	bx	lr

000009c0 <Spi_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Spi_schm_read_msr(void)
{
     9c0:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9c2:	f3ef 8310 	mrs	r3, PRIMASK
     9c6:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9c8:	4623      	mov	r3, r4
}
     9ca:	4618      	mov	r0, r3
     9cc:	f85d 4b04 	ldr.w	r4, [sp], #4
     9d0:	4770      	bx	lr
	...

000009d4 <CDD_UserTxConfirmation_Can_0>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can0 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_0( PduIdType TxPduId, Std_ReturnType result ) {
     9d4:	b082      	sub	sp, #8
     9d6:	4603      	mov	r3, r0
     9d8:	460a      	mov	r2, r1
     9da:	f8ad 3006 	strh.w	r3, [sp, #6]
     9de:	4613      	mov	r3, r2
     9e0:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     9e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
     9e8:	2b00      	cmp	r3, #0
     9ea:	d108      	bne.n	9fe <CDD_UserTxConfirmation_Can_0+0x2a>
        Transmit_count++;
     9ec:	4b05      	ldr	r3, [pc, #20]	; (a04 <CDD_UserTxConfirmation_Can_0+0x30>)
     9ee:	781b      	ldrb	r3, [r3, #0]
     9f0:	3301      	adds	r3, #1
     9f2:	b2da      	uxtb	r2, r3
     9f4:	4b03      	ldr	r3, [pc, #12]	; (a04 <CDD_UserTxConfirmation_Can_0+0x30>)
     9f6:	701a      	strb	r2, [r3, #0]
        CanIf_Can0_bTxFlag = TRUE;
     9f8:	4b03      	ldr	r3, [pc, #12]	; (a08 <CDD_UserTxConfirmation_Can_0+0x34>)
     9fa:	2201      	movs	r2, #1
     9fc:	701a      	strb	r2, [r3, #0]
    }
    
}
     9fe:	bf00      	nop
     a00:	b002      	add	sp, #8
     a02:	4770      	bx	lr
     a04:	1fff98f0 	.word	0x1fff98f0
     a08:	1fff8b30 	.word	0x1fff8b30

00000a0c <CDD_UserRxIndication_Can_0>:
 * @brief Callback function for the reception of a PDU (registered) of interest for the Can0 controller.
 * 
 * @param RxPduId ID (container) of the PDU received.
 * @param PduInfoPtr Pointer to PDU received (message)
 */
void CDD_UserRxIndication_Can_0( PduIdType RxPduId, const PduInfoType* PduInfoPtr ) {
     a0c:	b082      	sub	sp, #8
     a0e:	4603      	mov	r3, r0
     a10:	9100      	str	r1, [sp, #0]
     a12:	f8ad 3006 	strh.w	r3, [sp, #6]
    (void) RxPduId;
    (void) PduInfoPtr;
    
    CanIf_Can0_bRxFlag = TRUE;   //Message received.
     a16:	4b03      	ldr	r3, [pc, #12]	; (a24 <CDD_UserRxIndication_Can_0+0x18>)
     a18:	2201      	movs	r2, #1
     a1a:	701a      	strb	r2, [r3, #0]
}
     a1c:	bf00      	nop
     a1e:	b002      	add	sp, #8
     a20:	4770      	bx	lr
     a22:	bf00      	nop
     a24:	1fff8b31 	.word	0x1fff8b31

00000a28 <CDD_UserTxConfirmation_Can_2>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can2 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_2( PduIdType TxPduId, Std_ReturnType result ) {
     a28:	b082      	sub	sp, #8
     a2a:	4603      	mov	r3, r0
     a2c:	460a      	mov	r2, r1
     a2e:	f8ad 3006 	strh.w	r3, [sp, #6]
     a32:	4613      	mov	r3, r2
     a34:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     a38:	f89d 3005 	ldrb.w	r3, [sp, #5]
     a3c:	2b00      	cmp	r3, #0
     a3e:	d108      	bne.n	a52 <CDD_UserTxConfirmation_Can_2+0x2a>
        Transmit_count++;
     a40:	4b05      	ldr	r3, [pc, #20]	; (a58 <CDD_UserTxConfirmation_Can_2+0x30>)
     a42:	781b      	ldrb	r3, [r3, #0]
     a44:	3301      	adds	r3, #1
     a46:	b2da      	uxtb	r2, r3
     a48:	4b03      	ldr	r3, [pc, #12]	; (a58 <CDD_UserTxConfirmation_Can_2+0x30>)
     a4a:	701a      	strb	r2, [r3, #0]
        CanIf_Can2_bTxFlag = TRUE;
     a4c:	4b03      	ldr	r3, [pc, #12]	; (a5c <CDD_UserTxConfirmation_Can_2+0x34>)
     a4e:	2201      	movs	r2, #1
     a50:	701a      	strb	r2, [r3, #0]

    /*if ( Transmit_count == 2 ) {    //All PDUs were transmitted successfully.
        CanIf_Can2_bTxFlag = TRUE;
        Transmit_count = 0;
    }*/
}
     a52:	bf00      	nop
     a54:	b002      	add	sp, #8
     a56:	4770      	bx	lr
     a58:	1fff98f1 	.word	0x1fff98f1
     a5c:	1fff8b32 	.word	0x1fff8b32

00000a60 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a60:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a62:	2300      	movs	r3, #0
     a64:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a66:	2300      	movs	r3, #0
     a68:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a6a:	2300      	movs	r3, #0
     a6c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a6e:	2300      	movs	r3, #0
     a70:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a72:	4b44      	ldr	r3, [pc, #272]	; (b84 <init_data_bss+0x124>)
     a74:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a76:	4b44      	ldr	r3, [pc, #272]	; (b88 <init_data_bss+0x128>)
     a78:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a7a:	9b05      	ldr	r3, [sp, #20]
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a80:	9b05      	ldr	r3, [sp, #20]
     a82:	3304      	adds	r3, #4
     a84:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a86:	9b05      	ldr	r3, [sp, #20]
     a88:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a8a:	2300      	movs	r3, #0
     a8c:	9309      	str	r3, [sp, #36]	; 0x24
     a8e:	e03d      	b.n	b0c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a92:	4613      	mov	r3, r2
     a94:	005b      	lsls	r3, r3, #1
     a96:	4413      	add	r3, r2
     a98:	009b      	lsls	r3, r3, #2
     a9a:	461a      	mov	r2, r3
     a9c:	9b03      	ldr	r3, [sp, #12]
     a9e:	4413      	add	r3, r2
     aa0:	685b      	ldr	r3, [r3, #4]
     aa2:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aa6:	4613      	mov	r3, r2
     aa8:	005b      	lsls	r3, r3, #1
     aaa:	4413      	add	r3, r2
     aac:	009b      	lsls	r3, r3, #2
     aae:	461a      	mov	r2, r3
     ab0:	9b03      	ldr	r3, [sp, #12]
     ab2:	4413      	add	r3, r2
     ab4:	681b      	ldr	r3, [r3, #0]
     ab6:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aba:	4613      	mov	r3, r2
     abc:	005b      	lsls	r3, r3, #1
     abe:	4413      	add	r3, r2
     ac0:	009b      	lsls	r3, r3, #2
     ac2:	461a      	mov	r2, r3
     ac4:	9b03      	ldr	r3, [sp, #12]
     ac6:	4413      	add	r3, r2
     ac8:	689b      	ldr	r3, [r3, #8]
     aca:	4619      	mov	r1, r3
     acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ace:	4613      	mov	r3, r2
     ad0:	005b      	lsls	r3, r3, #1
     ad2:	4413      	add	r3, r2
     ad4:	009b      	lsls	r3, r3, #2
     ad6:	461a      	mov	r2, r3
     ad8:	9b03      	ldr	r3, [sp, #12]
     ada:	4413      	add	r3, r2
     adc:	685b      	ldr	r3, [r3, #4]
     ade:	1acb      	subs	r3, r1, r3
     ae0:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     ae2:	2300      	movs	r3, #0
     ae4:	9308      	str	r3, [sp, #32]
     ae6:	e00a      	b.n	afe <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     ae8:	9a00      	ldr	r2, [sp, #0]
     aea:	9b08      	ldr	r3, [sp, #32]
     aec:	441a      	add	r2, r3
     aee:	9901      	ldr	r1, [sp, #4]
     af0:	9b08      	ldr	r3, [sp, #32]
     af2:	440b      	add	r3, r1
     af4:	7812      	ldrb	r2, [r2, #0]
     af6:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     af8:	9b08      	ldr	r3, [sp, #32]
     afa:	3301      	adds	r3, #1
     afc:	9308      	str	r3, [sp, #32]
     afe:	9a08      	ldr	r2, [sp, #32]
     b00:	9b06      	ldr	r3, [sp, #24]
     b02:	429a      	cmp	r2, r3
     b04:	d3f0      	bcc.n	ae8 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b08:	3301      	adds	r3, #1
     b0a:	9309      	str	r3, [sp, #36]	; 0x24
     b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b0e:	9b07      	ldr	r3, [sp, #28]
     b10:	429a      	cmp	r2, r3
     b12:	d3bd      	bcc.n	a90 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b14:	9b04      	ldr	r3, [sp, #16]
     b16:	681b      	ldr	r3, [r3, #0]
     b18:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b1a:	9b04      	ldr	r3, [sp, #16]
     b1c:	3304      	adds	r3, #4
     b1e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b20:	9b04      	ldr	r3, [sp, #16]
     b22:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b24:	2300      	movs	r3, #0
     b26:	9309      	str	r3, [sp, #36]	; 0x24
     b28:	e024      	b.n	b74 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b2c:	00db      	lsls	r3, r3, #3
     b2e:	9a02      	ldr	r2, [sp, #8]
     b30:	4413      	add	r3, r2
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b38:	00db      	lsls	r3, r3, #3
     b3a:	9a02      	ldr	r2, [sp, #8]
     b3c:	4413      	add	r3, r2
     b3e:	685b      	ldr	r3, [r3, #4]
     b40:	4619      	mov	r1, r3
     b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b44:	00db      	lsls	r3, r3, #3
     b46:	9a02      	ldr	r2, [sp, #8]
     b48:	4413      	add	r3, r2
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	1acb      	subs	r3, r1, r3
     b4e:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b50:	2300      	movs	r3, #0
     b52:	9308      	str	r3, [sp, #32]
     b54:	e007      	b.n	b66 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b56:	9a01      	ldr	r2, [sp, #4]
     b58:	9b08      	ldr	r3, [sp, #32]
     b5a:	4413      	add	r3, r2
     b5c:	2200      	movs	r2, #0
     b5e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b60:	9b08      	ldr	r3, [sp, #32]
     b62:	3301      	adds	r3, #1
     b64:	9308      	str	r3, [sp, #32]
     b66:	9a08      	ldr	r2, [sp, #32]
     b68:	9b06      	ldr	r3, [sp, #24]
     b6a:	429a      	cmp	r2, r3
     b6c:	d3f3      	bcc.n	b56 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b70:	3301      	adds	r3, #1
     b72:	9309      	str	r3, [sp, #36]	; 0x24
     b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b76:	9b07      	ldr	r3, [sp, #28]
     b78:	429a      	cmp	r2, r3
     b7a:	d3d6      	bcc.n	b2a <init_data_bss+0xca>
        }
    }
}
     b7c:	bf00      	nop
     b7e:	bf00      	nop
     b80:	b00a      	add	sp, #40	; 0x28
     b82:	4770      	bx	lr
     b84:	00019900 	.word	0x00019900
     b88:	0001991c 	.word	0x0001991c

00000b8c <sys_m4_cache_init>:
{
     b8c:	b084      	sub	sp, #16
     b8e:	4603      	mov	r3, r0
     b90:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b94:	2300      	movs	r3, #0
     b96:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d118      	bne.n	bd4 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     ba2:	4b10      	ldr	r3, [pc, #64]	; (be4 <sys_m4_cache_init+0x58>)
     ba4:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     ba8:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     baa:	4b0e      	ldr	r3, [pc, #56]	; (be4 <sys_m4_cache_init+0x58>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	4a0d      	ldr	r2, [pc, #52]	; (be4 <sys_m4_cache_init+0x58>)
     bb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     bb4:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     bb6:	bf00      	nop
     bb8:	4b0a      	ldr	r3, [pc, #40]	; (be4 <sys_m4_cache_init+0x58>)
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bc4:	d0f8      	beq.n	bb8 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     bc6:	4b07      	ldr	r3, [pc, #28]	; (be4 <sys_m4_cache_init+0x58>)
     bc8:	681b      	ldr	r3, [r3, #0]
     bca:	4a06      	ldr	r2, [pc, #24]	; (be4 <sys_m4_cache_init+0x58>)
     bcc:	f043 0301 	orr.w	r3, r3, #1
     bd0:	6013      	str	r3, [r2, #0]
     bd2:	e002      	b.n	bda <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     bd4:	2301      	movs	r3, #1
     bd6:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bda:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bde:	4618      	mov	r0, r3
     be0:	b004      	add	sp, #16
     be2:	4770      	bx	lr
     be4:	e0082000 	.word	0xe0082000

00000be8 <startup_go_to_user_mode>:
}
     be8:	bf00      	nop
     bea:	4770      	bx	lr

00000bec <Sys_GetCoreID>:
    return 0U;
     bec:	2300      	movs	r3, #0
}
     bee:	4618      	mov	r0, r3
     bf0:	4770      	bx	lr

00000bf2 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     bf2:	e7fe      	b.n	bf2 <HardFault_Handler>

00000bf4 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     bf4:	e7fe      	b.n	bf4 <MemManage_Handler>

00000bf6 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     bf6:	e7fe      	b.n	bf6 <BusFault_Handler>

00000bf8 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     bf8:	e7fe      	b.n	bf8 <UsageFault_Handler>

00000bfa <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     bfa:	e7fe      	b.n	bfa <SVC_Handler>

00000bfc <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     bfc:	e7fe      	b.n	bfc <DebugMon_Handler>

00000bfe <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     bfe:	e7fe      	b.n	bfe <PendSV_Handler>

00000c00 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c00:	e7fe      	b.n	c00 <SysTick_Handler>

00000c02 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c02:	e7fe      	b.n	c02 <undefined_handler>

00000c04 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     c04:	b500      	push	{lr}
     c06:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     c08:	4b26      	ldr	r3, [pc, #152]	; (ca4 <_DoInit+0xa0>)
     c0a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     c0c:	22a8      	movs	r2, #168	; 0xa8
     c0e:	2100      	movs	r1, #0
     c10:	9800      	ldr	r0, [sp, #0]
     c12:	f000 fd67 	bl	16e4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     c16:	9b00      	ldr	r3, [sp, #0]
     c18:	2203      	movs	r2, #3
     c1a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     c1c:	9b00      	ldr	r3, [sp, #0]
     c1e:	2203      	movs	r2, #3
     c20:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     c22:	9b00      	ldr	r3, [sp, #0]
     c24:	4a20      	ldr	r2, [pc, #128]	; (ca8 <_DoInit+0xa4>)
     c26:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     c28:	9b00      	ldr	r3, [sp, #0]
     c2a:	4a20      	ldr	r2, [pc, #128]	; (cac <_DoInit+0xa8>)
     c2c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     c2e:	9b00      	ldr	r3, [sp, #0]
     c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
     c34:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     c36:	9b00      	ldr	r3, [sp, #0]
     c38:	2200      	movs	r2, #0
     c3a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     c3c:	9b00      	ldr	r3, [sp, #0]
     c3e:	2200      	movs	r2, #0
     c40:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c42:	9b00      	ldr	r3, [sp, #0]
     c44:	2200      	movs	r2, #0
     c46:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     c48:	9b00      	ldr	r3, [sp, #0]
     c4a:	4a17      	ldr	r2, [pc, #92]	; (ca8 <_DoInit+0xa4>)
     c4c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     c4e:	9b00      	ldr	r3, [sp, #0]
     c50:	4a17      	ldr	r2, [pc, #92]	; (cb0 <_DoInit+0xac>)
     c52:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     c54:	9b00      	ldr	r3, [sp, #0]
     c56:	2210      	movs	r2, #16
     c58:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     c5a:	9b00      	ldr	r3, [sp, #0]
     c5c:	2200      	movs	r2, #0
     c5e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     c60:	9b00      	ldr	r3, [sp, #0]
     c62:	2200      	movs	r2, #0
     c64:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c66:	9b00      	ldr	r3, [sp, #0]
     c68:	2200      	movs	r2, #0
     c6a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c6c:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c70:	2300      	movs	r3, #0
     c72:	9301      	str	r3, [sp, #4]
     c74:	e00c      	b.n	c90 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     c76:	9b01      	ldr	r3, [sp, #4]
     c78:	f1c3 030f 	rsb	r3, r3, #15
     c7c:	4a0d      	ldr	r2, [pc, #52]	; (cb4 <_DoInit+0xb0>)
     c7e:	5cd1      	ldrb	r1, [r2, r3]
     c80:	9a00      	ldr	r2, [sp, #0]
     c82:	9b01      	ldr	r3, [sp, #4]
     c84:	4413      	add	r3, r2
     c86:	460a      	mov	r2, r1
     c88:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c8a:	9b01      	ldr	r3, [sp, #4]
     c8c:	3301      	adds	r3, #1
     c8e:	9301      	str	r3, [sp, #4]
     c90:	9b01      	ldr	r3, [sp, #4]
     c92:	2b0f      	cmp	r3, #15
     c94:	d9ef      	bls.n	c76 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c96:	f3bf 8f5f 	dmb	sy
}
     c9a:	bf00      	nop
     c9c:	b003      	add	sp, #12
     c9e:	f85d fb04 	ldr.w	pc, [sp], #4
     ca2:	bf00      	nop
     ca4:	1fff9910 	.word	0x1fff9910
     ca8:	00017d50 	.word	0x00017d50
     cac:	1fff99b8 	.word	0x1fff99b8
     cb0:	1fff9db8 	.word	0x1fff9db8
     cb4:	000198dc 	.word	0x000198dc

00000cb8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     cb8:	b500      	push	{lr}
     cba:	b08b      	sub	sp, #44	; 0x2c
     cbc:	9003      	str	r0, [sp, #12]
     cbe:	9102      	str	r1, [sp, #8]
     cc0:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     cc2:	2300      	movs	r3, #0
     cc4:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     cc6:	9b03      	ldr	r3, [sp, #12]
     cc8:	68db      	ldr	r3, [r3, #12]
     cca:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     ccc:	9b03      	ldr	r3, [sp, #12]
     cce:	691b      	ldr	r3, [r3, #16]
     cd0:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     cd2:	9a06      	ldr	r2, [sp, #24]
     cd4:	9b07      	ldr	r3, [sp, #28]
     cd6:	429a      	cmp	r2, r3
     cd8:	d905      	bls.n	ce6 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     cda:	9a06      	ldr	r2, [sp, #24]
     cdc:	9b07      	ldr	r3, [sp, #28]
     cde:	1ad3      	subs	r3, r2, r3
     ce0:	3b01      	subs	r3, #1
     ce2:	9309      	str	r3, [sp, #36]	; 0x24
     ce4:	e007      	b.n	cf6 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     ce6:	9b03      	ldr	r3, [sp, #12]
     ce8:	689a      	ldr	r2, [r3, #8]
     cea:	9906      	ldr	r1, [sp, #24]
     cec:	9b07      	ldr	r3, [sp, #28]
     cee:	1acb      	subs	r3, r1, r3
     cf0:	4413      	add	r3, r2
     cf2:	3b01      	subs	r3, #1
     cf4:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     cf6:	9b03      	ldr	r3, [sp, #12]
     cf8:	689a      	ldr	r2, [r3, #8]
     cfa:	9b07      	ldr	r3, [sp, #28]
     cfc:	1ad3      	subs	r3, r2, r3
     cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d00:	4293      	cmp	r3, r2
     d02:	bf28      	it	cs
     d04:	4613      	movcs	r3, r2
     d06:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d0a:	9b01      	ldr	r3, [sp, #4]
     d0c:	4293      	cmp	r3, r2
     d0e:	bf28      	it	cs
     d10:	4613      	movcs	r3, r2
     d12:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d14:	9b03      	ldr	r3, [sp, #12]
     d16:	685a      	ldr	r2, [r3, #4]
     d18:	9b07      	ldr	r3, [sp, #28]
     d1a:	4413      	add	r3, r2
     d1c:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d20:	9902      	ldr	r1, [sp, #8]
     d22:	9805      	ldr	r0, [sp, #20]
     d24:	f000 fcd0 	bl	16c8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     d28:	9a08      	ldr	r2, [sp, #32]
     d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d2c:	4413      	add	r3, r2
     d2e:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     d30:	9a02      	ldr	r2, [sp, #8]
     d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d34:	4413      	add	r3, r2
     d36:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     d38:	9a01      	ldr	r2, [sp, #4]
     d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d3c:	1ad3      	subs	r3, r2, r3
     d3e:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     d40:	9a07      	ldr	r2, [sp, #28]
     d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d44:	4413      	add	r3, r2
     d46:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     d48:	9b03      	ldr	r3, [sp, #12]
     d4a:	689b      	ldr	r3, [r3, #8]
     d4c:	9a07      	ldr	r2, [sp, #28]
     d4e:	429a      	cmp	r2, r3
     d50:	d101      	bne.n	d56 <_WriteBlocking+0x9e>
      WrOff = 0u;
     d52:	2300      	movs	r3, #0
     d54:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d56:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     d5a:	9b03      	ldr	r3, [sp, #12]
     d5c:	9a07      	ldr	r2, [sp, #28]
     d5e:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     d60:	9b01      	ldr	r3, [sp, #4]
     d62:	2b00      	cmp	r3, #0
     d64:	d1b2      	bne.n	ccc <_WriteBlocking+0x14>
  return NumBytesWritten;
     d66:	9b08      	ldr	r3, [sp, #32]
}
     d68:	4618      	mov	r0, r3
     d6a:	b00b      	add	sp, #44	; 0x2c
     d6c:	f85d fb04 	ldr.w	pc, [sp], #4

00000d70 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d70:	b500      	push	{lr}
     d72:	b089      	sub	sp, #36	; 0x24
     d74:	9003      	str	r0, [sp, #12]
     d76:	9102      	str	r1, [sp, #8]
     d78:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     d7a:	9b03      	ldr	r3, [sp, #12]
     d7c:	68db      	ldr	r3, [r3, #12]
     d7e:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     d80:	9b03      	ldr	r3, [sp, #12]
     d82:	689a      	ldr	r2, [r3, #8]
     d84:	9b07      	ldr	r3, [sp, #28]
     d86:	1ad3      	subs	r3, r2, r3
     d88:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     d8a:	9a06      	ldr	r2, [sp, #24]
     d8c:	9b01      	ldr	r3, [sp, #4]
     d8e:	429a      	cmp	r2, r3
     d90:	d911      	bls.n	db6 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d92:	9b03      	ldr	r3, [sp, #12]
     d94:	685a      	ldr	r2, [r3, #4]
     d96:	9b07      	ldr	r3, [sp, #28]
     d98:	4413      	add	r3, r2
     d9a:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     d9c:	9a01      	ldr	r2, [sp, #4]
     d9e:	9902      	ldr	r1, [sp, #8]
     da0:	9804      	ldr	r0, [sp, #16]
     da2:	f000 fc91 	bl	16c8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     da6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     daa:	9a07      	ldr	r2, [sp, #28]
     dac:	9b01      	ldr	r3, [sp, #4]
     dae:	441a      	add	r2, r3
     db0:	9b03      	ldr	r3, [sp, #12]
     db2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     db4:	e01f      	b.n	df6 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     db6:	9b06      	ldr	r3, [sp, #24]
     db8:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     dba:	9b03      	ldr	r3, [sp, #12]
     dbc:	685a      	ldr	r2, [r3, #4]
     dbe:	9b07      	ldr	r3, [sp, #28]
     dc0:	4413      	add	r3, r2
     dc2:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     dc4:	9a05      	ldr	r2, [sp, #20]
     dc6:	9902      	ldr	r1, [sp, #8]
     dc8:	9804      	ldr	r0, [sp, #16]
     dca:	f000 fc7d 	bl	16c8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     dce:	9a01      	ldr	r2, [sp, #4]
     dd0:	9b06      	ldr	r3, [sp, #24]
     dd2:	1ad3      	subs	r3, r2, r3
     dd4:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     dd6:	9b03      	ldr	r3, [sp, #12]
     dd8:	685b      	ldr	r3, [r3, #4]
     dda:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     ddc:	9a02      	ldr	r2, [sp, #8]
     dde:	9b06      	ldr	r3, [sp, #24]
     de0:	4413      	add	r3, r2
     de2:	9a05      	ldr	r2, [sp, #20]
     de4:	4619      	mov	r1, r3
     de6:	9804      	ldr	r0, [sp, #16]
     de8:	f000 fc6e 	bl	16c8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     dec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     df0:	9b03      	ldr	r3, [sp, #12]
     df2:	9a05      	ldr	r2, [sp, #20]
     df4:	60da      	str	r2, [r3, #12]
}
     df6:	bf00      	nop
     df8:	b009      	add	sp, #36	; 0x24
     dfa:	f85d fb04 	ldr.w	pc, [sp], #4

00000dfe <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     dfe:	b086      	sub	sp, #24
     e00:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     e02:	9b01      	ldr	r3, [sp, #4]
     e04:	691b      	ldr	r3, [r3, #16]
     e06:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     e08:	9b01      	ldr	r3, [sp, #4]
     e0a:	68db      	ldr	r3, [r3, #12]
     e0c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     e0e:	9a04      	ldr	r2, [sp, #16]
     e10:	9b03      	ldr	r3, [sp, #12]
     e12:	429a      	cmp	r2, r3
     e14:	d808      	bhi.n	e28 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e16:	9b01      	ldr	r3, [sp, #4]
     e18:	689a      	ldr	r2, [r3, #8]
     e1a:	9b03      	ldr	r3, [sp, #12]
     e1c:	1ad2      	subs	r2, r2, r3
     e1e:	9b04      	ldr	r3, [sp, #16]
     e20:	4413      	add	r3, r2
     e22:	3b01      	subs	r3, #1
     e24:	9305      	str	r3, [sp, #20]
     e26:	e004      	b.n	e32 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     e28:	9a04      	ldr	r2, [sp, #16]
     e2a:	9b03      	ldr	r3, [sp, #12]
     e2c:	1ad3      	subs	r3, r2, r3
     e2e:	3b01      	subs	r3, #1
     e30:	9305      	str	r3, [sp, #20]
  }
  return r;
     e32:	9b05      	ldr	r3, [sp, #20]
}
     e34:	4618      	mov	r0, r3
     e36:	b006      	add	sp, #24
     e38:	4770      	bx	lr
	...

00000e3c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e3c:	b500      	push	{lr}
     e3e:	b089      	sub	sp, #36	; 0x24
     e40:	9003      	str	r0, [sp, #12]
     e42:	9102      	str	r1, [sp, #8]
     e44:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     e46:	9b02      	ldr	r3, [sp, #8]
     e48:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     e4a:	9b03      	ldr	r3, [sp, #12]
     e4c:	1c5a      	adds	r2, r3, #1
     e4e:	4613      	mov	r3, r2
     e50:	005b      	lsls	r3, r3, #1
     e52:	4413      	add	r3, r2
     e54:	00db      	lsls	r3, r3, #3
     e56:	4a20      	ldr	r2, [pc, #128]	; (ed8 <SEGGER_RTT_WriteNoLock+0x9c>)
     e58:	4413      	add	r3, r2
     e5a:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     e5c:	9b05      	ldr	r3, [sp, #20]
     e5e:	695b      	ldr	r3, [r3, #20]
     e60:	2b02      	cmp	r3, #2
     e62:	d029      	beq.n	eb8 <SEGGER_RTT_WriteNoLock+0x7c>
     e64:	2b02      	cmp	r3, #2
     e66:	d82e      	bhi.n	ec6 <SEGGER_RTT_WriteNoLock+0x8a>
     e68:	2b00      	cmp	r3, #0
     e6a:	d002      	beq.n	e72 <SEGGER_RTT_WriteNoLock+0x36>
     e6c:	2b01      	cmp	r3, #1
     e6e:	d013      	beq.n	e98 <SEGGER_RTT_WriteNoLock+0x5c>
     e70:	e029      	b.n	ec6 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e72:	9805      	ldr	r0, [sp, #20]
     e74:	f7ff ffc3 	bl	dfe <_GetAvailWriteSpace>
     e78:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     e7a:	9a04      	ldr	r2, [sp, #16]
     e7c:	9b01      	ldr	r3, [sp, #4]
     e7e:	429a      	cmp	r2, r3
     e80:	d202      	bcs.n	e88 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     e82:	2300      	movs	r3, #0
     e84:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     e86:	e021      	b.n	ecc <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     e88:	9b01      	ldr	r3, [sp, #4]
     e8a:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     e8c:	9a01      	ldr	r2, [sp, #4]
     e8e:	9906      	ldr	r1, [sp, #24]
     e90:	9805      	ldr	r0, [sp, #20]
     e92:	f7ff ff6d 	bl	d70 <_WriteNoCheck>
    break;
     e96:	e019      	b.n	ecc <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e98:	9805      	ldr	r0, [sp, #20]
     e9a:	f7ff ffb0 	bl	dfe <_GetAvailWriteSpace>
     e9e:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     ea0:	9a01      	ldr	r2, [sp, #4]
     ea2:	9b04      	ldr	r3, [sp, #16]
     ea4:	4293      	cmp	r3, r2
     ea6:	bf28      	it	cs
     ea8:	4613      	movcs	r3, r2
     eaa:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     eac:	9a07      	ldr	r2, [sp, #28]
     eae:	9906      	ldr	r1, [sp, #24]
     eb0:	9805      	ldr	r0, [sp, #20]
     eb2:	f7ff ff5d 	bl	d70 <_WriteNoCheck>
    break;
     eb6:	e009      	b.n	ecc <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     eb8:	9a01      	ldr	r2, [sp, #4]
     eba:	9906      	ldr	r1, [sp, #24]
     ebc:	9805      	ldr	r0, [sp, #20]
     ebe:	f7ff fefb 	bl	cb8 <_WriteBlocking>
     ec2:	9007      	str	r0, [sp, #28]
    break;
     ec4:	e002      	b.n	ecc <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     ec6:	2300      	movs	r3, #0
     ec8:	9307      	str	r3, [sp, #28]
    break;
     eca:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     ecc:	9b07      	ldr	r3, [sp, #28]
}
     ece:	4618      	mov	r0, r3
     ed0:	b009      	add	sp, #36	; 0x24
     ed2:	f85d fb04 	ldr.w	pc, [sp], #4
     ed6:	bf00      	nop
     ed8:	1fff9910 	.word	0x1fff9910

00000edc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     edc:	b500      	push	{lr}
     ede:	b089      	sub	sp, #36	; 0x24
     ee0:	9003      	str	r0, [sp, #12]
     ee2:	9102      	str	r1, [sp, #8]
     ee4:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     ee6:	4b0f      	ldr	r3, [pc, #60]	; (f24 <SEGGER_RTT_Write+0x48>)
     ee8:	9307      	str	r3, [sp, #28]
     eea:	9b07      	ldr	r3, [sp, #28]
     eec:	781b      	ldrb	r3, [r3, #0]
     eee:	b2db      	uxtb	r3, r3
     ef0:	2b53      	cmp	r3, #83	; 0x53
     ef2:	d001      	beq.n	ef8 <SEGGER_RTT_Write+0x1c>
     ef4:	f7ff fe86 	bl	c04 <_DoInit>
  SEGGER_RTT_LOCK();
     ef8:	f3ef 8311 	mrs	r3, BASEPRI
     efc:	f04f 0120 	mov.w	r1, #32
     f00:	f381 8811 	msr	BASEPRI, r1
     f04:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     f06:	9a01      	ldr	r2, [sp, #4]
     f08:	9902      	ldr	r1, [sp, #8]
     f0a:	9803      	ldr	r0, [sp, #12]
     f0c:	f7ff ff96 	bl	e3c <SEGGER_RTT_WriteNoLock>
     f10:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     f12:	9b06      	ldr	r3, [sp, #24]
     f14:	f383 8811 	msr	BASEPRI, r3
  return Status;
     f18:	9b05      	ldr	r3, [sp, #20]
}
     f1a:	4618      	mov	r0, r3
     f1c:	b009      	add	sp, #36	; 0x24
     f1e:	f85d fb04 	ldr.w	pc, [sp], #4
     f22:	bf00      	nop
     f24:	1fff9910 	.word	0x1fff9910

00000f28 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     f28:	b508      	push	{r3, lr}
  _DoInit();
     f2a:	f7ff fe6b 	bl	c04 <_DoInit>
}
     f2e:	bf00      	nop
     f30:	bd08      	pop	{r3, pc}

00000f32 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     f32:	b500      	push	{lr}
     f34:	b085      	sub	sp, #20
     f36:	9001      	str	r0, [sp, #4]
     f38:	460b      	mov	r3, r1
     f3a:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     f3e:	9b01      	ldr	r3, [sp, #4]
     f40:	689b      	ldr	r3, [r3, #8]
     f42:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     f44:	9b03      	ldr	r3, [sp, #12]
     f46:	1c5a      	adds	r2, r3, #1
     f48:	9b01      	ldr	r3, [sp, #4]
     f4a:	685b      	ldr	r3, [r3, #4]
     f4c:	429a      	cmp	r2, r3
     f4e:	d80f      	bhi.n	f70 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     f50:	9b01      	ldr	r3, [sp, #4]
     f52:	681a      	ldr	r2, [r3, #0]
     f54:	9b03      	ldr	r3, [sp, #12]
     f56:	4413      	add	r3, r2
     f58:	f89d 2003 	ldrb.w	r2, [sp, #3]
     f5c:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     f5e:	9b03      	ldr	r3, [sp, #12]
     f60:	1c5a      	adds	r2, r3, #1
     f62:	9b01      	ldr	r3, [sp, #4]
     f64:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     f66:	9b01      	ldr	r3, [sp, #4]
     f68:	68db      	ldr	r3, [r3, #12]
     f6a:	1c5a      	adds	r2, r3, #1
     f6c:	9b01      	ldr	r3, [sp, #4]
     f6e:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     f70:	9b01      	ldr	r3, [sp, #4]
     f72:	689a      	ldr	r2, [r3, #8]
     f74:	9b01      	ldr	r3, [sp, #4]
     f76:	685b      	ldr	r3, [r3, #4]
     f78:	429a      	cmp	r2, r3
     f7a:	d115      	bne.n	fa8 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     f7c:	9b01      	ldr	r3, [sp, #4]
     f7e:	6918      	ldr	r0, [r3, #16]
     f80:	9b01      	ldr	r3, [sp, #4]
     f82:	6819      	ldr	r1, [r3, #0]
     f84:	9b01      	ldr	r3, [sp, #4]
     f86:	689b      	ldr	r3, [r3, #8]
     f88:	461a      	mov	r2, r3
     f8a:	f7ff ffa7 	bl	edc <SEGGER_RTT_Write>
     f8e:	4602      	mov	r2, r0
     f90:	9b01      	ldr	r3, [sp, #4]
     f92:	689b      	ldr	r3, [r3, #8]
     f94:	429a      	cmp	r2, r3
     f96:	d004      	beq.n	fa2 <_StoreChar+0x70>
      p->ReturnValue = -1;
     f98:	9b01      	ldr	r3, [sp, #4]
     f9a:	f04f 32ff 	mov.w	r2, #4294967295
     f9e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     fa0:	e002      	b.n	fa8 <_StoreChar+0x76>
      p->Cnt = 0u;
     fa2:	9b01      	ldr	r3, [sp, #4]
     fa4:	2200      	movs	r2, #0
     fa6:	609a      	str	r2, [r3, #8]
}
     fa8:	bf00      	nop
     faa:	b005      	add	sp, #20
     fac:	f85d fb04 	ldr.w	pc, [sp], #4

00000fb0 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     fb0:	b500      	push	{lr}
     fb2:	b08b      	sub	sp, #44	; 0x2c
     fb4:	9003      	str	r0, [sp, #12]
     fb6:	9102      	str	r1, [sp, #8]
     fb8:	9201      	str	r2, [sp, #4]
     fba:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     fbc:	9b02      	ldr	r3, [sp, #8]
     fbe:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     fc0:	2301      	movs	r3, #1
     fc2:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     fc4:	2301      	movs	r3, #1
     fc6:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     fc8:	e007      	b.n	fda <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     fca:	9a08      	ldr	r2, [sp, #32]
     fcc:	9b01      	ldr	r3, [sp, #4]
     fce:	fbb2 f3f3 	udiv	r3, r2, r3
     fd2:	9308      	str	r3, [sp, #32]
    Width++;
     fd4:	9b07      	ldr	r3, [sp, #28]
     fd6:	3301      	adds	r3, #1
     fd8:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     fda:	9a08      	ldr	r2, [sp, #32]
     fdc:	9b01      	ldr	r3, [sp, #4]
     fde:	429a      	cmp	r2, r3
     fe0:	d2f3      	bcs.n	fca <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
     fe2:	9a00      	ldr	r2, [sp, #0]
     fe4:	9b07      	ldr	r3, [sp, #28]
     fe6:	429a      	cmp	r2, r3
     fe8:	d901      	bls.n	fee <_PrintUnsigned+0x3e>
    Width = NumDigits;
     fea:	9b00      	ldr	r3, [sp, #0]
     fec:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
     fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     ff0:	f003 0301 	and.w	r3, r3, #1
     ff4:	2b00      	cmp	r3, #0
     ff6:	d128      	bne.n	104a <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
     ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     ffa:	2b00      	cmp	r3, #0
     ffc:	d025      	beq.n	104a <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
     ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1000:	f003 0302 	and.w	r3, r3, #2
    1004:	2b00      	cmp	r3, #0
    1006:	d006      	beq.n	1016 <_PrintUnsigned+0x66>
    1008:	9b00      	ldr	r3, [sp, #0]
    100a:	2b00      	cmp	r3, #0
    100c:	d103      	bne.n	1016 <_PrintUnsigned+0x66>
        c = '0';
    100e:	2330      	movs	r3, #48	; 0x30
    1010:	f88d 301b 	strb.w	r3, [sp, #27]
    1014:	e002      	b.n	101c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1016:	2320      	movs	r3, #32
    1018:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    101c:	e00c      	b.n	1038 <_PrintUnsigned+0x88>
        FieldWidth--;
    101e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1020:	3b01      	subs	r3, #1
    1022:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1024:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1028:	4619      	mov	r1, r3
    102a:	9803      	ldr	r0, [sp, #12]
    102c:	f7ff ff81 	bl	f32 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1030:	9b03      	ldr	r3, [sp, #12]
    1032:	68db      	ldr	r3, [r3, #12]
    1034:	2b00      	cmp	r3, #0
    1036:	db07      	blt.n	1048 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    103a:	2b00      	cmp	r3, #0
    103c:	d005      	beq.n	104a <_PrintUnsigned+0x9a>
    103e:	9a07      	ldr	r2, [sp, #28]
    1040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1042:	429a      	cmp	r2, r3
    1044:	d3eb      	bcc.n	101e <_PrintUnsigned+0x6e>
    1046:	e000      	b.n	104a <_PrintUnsigned+0x9a>
          break;
    1048:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    104a:	9b03      	ldr	r3, [sp, #12]
    104c:	68db      	ldr	r3, [r3, #12]
    104e:	2b00      	cmp	r3, #0
    1050:	db55      	blt.n	10fe <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1052:	9b00      	ldr	r3, [sp, #0]
    1054:	2b01      	cmp	r3, #1
    1056:	d903      	bls.n	1060 <_PrintUnsigned+0xb0>
        NumDigits--;
    1058:	9b00      	ldr	r3, [sp, #0]
    105a:	3b01      	subs	r3, #1
    105c:	9300      	str	r3, [sp, #0]
    105e:	e009      	b.n	1074 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1060:	9a02      	ldr	r2, [sp, #8]
    1062:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1064:	fbb2 f3f3 	udiv	r3, r2, r3
    1068:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    106a:	9a05      	ldr	r2, [sp, #20]
    106c:	9b01      	ldr	r3, [sp, #4]
    106e:	429a      	cmp	r2, r3
    1070:	d200      	bcs.n	1074 <_PrintUnsigned+0xc4>
          break;
    1072:	e005      	b.n	1080 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1074:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1076:	9a01      	ldr	r2, [sp, #4]
    1078:	fb02 f303 	mul.w	r3, r2, r3
    107c:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    107e:	e7e8      	b.n	1052 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1080:	9a02      	ldr	r2, [sp, #8]
    1082:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1084:	fbb2 f3f3 	udiv	r3, r2, r3
    1088:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    108a:	9b05      	ldr	r3, [sp, #20]
    108c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    108e:	fb02 f303 	mul.w	r3, r2, r3
    1092:	9a02      	ldr	r2, [sp, #8]
    1094:	1ad3      	subs	r3, r2, r3
    1096:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1098:	4a1b      	ldr	r2, [pc, #108]	; (1108 <_PrintUnsigned+0x158>)
    109a:	9b05      	ldr	r3, [sp, #20]
    109c:	4413      	add	r3, r2
    109e:	781b      	ldrb	r3, [r3, #0]
    10a0:	4619      	mov	r1, r3
    10a2:	9803      	ldr	r0, [sp, #12]
    10a4:	f7ff ff45 	bl	f32 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    10a8:	9b03      	ldr	r3, [sp, #12]
    10aa:	68db      	ldr	r3, [r3, #12]
    10ac:	2b00      	cmp	r3, #0
    10ae:	db08      	blt.n	10c2 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    10b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10b2:	9b01      	ldr	r3, [sp, #4]
    10b4:	fbb2 f3f3 	udiv	r3, r2, r3
    10b8:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    10ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10bc:	2b00      	cmp	r3, #0
    10be:	d1df      	bne.n	1080 <_PrintUnsigned+0xd0>
    10c0:	e000      	b.n	10c4 <_PrintUnsigned+0x114>
        break;
    10c2:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    10c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10c6:	f003 0301 	and.w	r3, r3, #1
    10ca:	2b00      	cmp	r3, #0
    10cc:	d017      	beq.n	10fe <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    10ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10d0:	2b00      	cmp	r3, #0
    10d2:	d014      	beq.n	10fe <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10d4:	e00a      	b.n	10ec <_PrintUnsigned+0x13c>
          FieldWidth--;
    10d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10d8:	3b01      	subs	r3, #1
    10da:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    10dc:	2120      	movs	r1, #32
    10de:	9803      	ldr	r0, [sp, #12]
    10e0:	f7ff ff27 	bl	f32 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    10e4:	9b03      	ldr	r3, [sp, #12]
    10e6:	68db      	ldr	r3, [r3, #12]
    10e8:	2b00      	cmp	r3, #0
    10ea:	db07      	blt.n	10fc <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10ee:	2b00      	cmp	r3, #0
    10f0:	d005      	beq.n	10fe <_PrintUnsigned+0x14e>
    10f2:	9a07      	ldr	r2, [sp, #28]
    10f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10f6:	429a      	cmp	r2, r3
    10f8:	d3ed      	bcc.n	10d6 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    10fa:	e000      	b.n	10fe <_PrintUnsigned+0x14e>
            break;
    10fc:	bf00      	nop
}
    10fe:	bf00      	nop
    1100:	b00b      	add	sp, #44	; 0x2c
    1102:	f85d fb04 	ldr.w	pc, [sp], #4
    1106:	bf00      	nop
    1108:	000198f0 	.word	0x000198f0

0000110c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    110c:	b500      	push	{lr}
    110e:	b089      	sub	sp, #36	; 0x24
    1110:	9005      	str	r0, [sp, #20]
    1112:	9104      	str	r1, [sp, #16]
    1114:	9203      	str	r2, [sp, #12]
    1116:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1118:	9b04      	ldr	r3, [sp, #16]
    111a:	2b00      	cmp	r3, #0
    111c:	bfb8      	it	lt
    111e:	425b      	neglt	r3, r3
    1120:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1122:	2301      	movs	r3, #1
    1124:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1126:	e007      	b.n	1138 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1128:	9b03      	ldr	r3, [sp, #12]
    112a:	9a06      	ldr	r2, [sp, #24]
    112c:	fb92 f3f3 	sdiv	r3, r2, r3
    1130:	9306      	str	r3, [sp, #24]
    Width++;
    1132:	9b07      	ldr	r3, [sp, #28]
    1134:	3301      	adds	r3, #1
    1136:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1138:	9b03      	ldr	r3, [sp, #12]
    113a:	9a06      	ldr	r2, [sp, #24]
    113c:	429a      	cmp	r2, r3
    113e:	daf3      	bge.n	1128 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1140:	9a02      	ldr	r2, [sp, #8]
    1142:	9b07      	ldr	r3, [sp, #28]
    1144:	429a      	cmp	r2, r3
    1146:	d901      	bls.n	114c <_PrintInt+0x40>
    Width = NumDigits;
    1148:	9b02      	ldr	r3, [sp, #8]
    114a:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    114c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    114e:	2b00      	cmp	r3, #0
    1150:	d00a      	beq.n	1168 <_PrintInt+0x5c>
    1152:	9b04      	ldr	r3, [sp, #16]
    1154:	2b00      	cmp	r3, #0
    1156:	db04      	blt.n	1162 <_PrintInt+0x56>
    1158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    115a:	f003 0304 	and.w	r3, r3, #4
    115e:	2b00      	cmp	r3, #0
    1160:	d002      	beq.n	1168 <_PrintInt+0x5c>
    FieldWidth--;
    1162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1164:	3b01      	subs	r3, #1
    1166:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    116a:	f003 0302 	and.w	r3, r3, #2
    116e:	2b00      	cmp	r3, #0
    1170:	d002      	beq.n	1178 <_PrintInt+0x6c>
    1172:	9b02      	ldr	r3, [sp, #8]
    1174:	2b00      	cmp	r3, #0
    1176:	d01c      	beq.n	11b2 <_PrintInt+0xa6>
    1178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    117a:	f003 0301 	and.w	r3, r3, #1
    117e:	2b00      	cmp	r3, #0
    1180:	d117      	bne.n	11b2 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1184:	2b00      	cmp	r3, #0
    1186:	d014      	beq.n	11b2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1188:	e00a      	b.n	11a0 <_PrintInt+0x94>
        FieldWidth--;
    118a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    118c:	3b01      	subs	r3, #1
    118e:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1190:	2120      	movs	r1, #32
    1192:	9805      	ldr	r0, [sp, #20]
    1194:	f7ff fecd 	bl	f32 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1198:	9b05      	ldr	r3, [sp, #20]
    119a:	68db      	ldr	r3, [r3, #12]
    119c:	2b00      	cmp	r3, #0
    119e:	db07      	blt.n	11b0 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11a2:	2b00      	cmp	r3, #0
    11a4:	d005      	beq.n	11b2 <_PrintInt+0xa6>
    11a6:	9a07      	ldr	r2, [sp, #28]
    11a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11aa:	429a      	cmp	r2, r3
    11ac:	d3ed      	bcc.n	118a <_PrintInt+0x7e>
    11ae:	e000      	b.n	11b2 <_PrintInt+0xa6>
          break;
    11b0:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    11b2:	9b05      	ldr	r3, [sp, #20]
    11b4:	68db      	ldr	r3, [r3, #12]
    11b6:	2b00      	cmp	r3, #0
    11b8:	db4a      	blt.n	1250 <_PrintInt+0x144>
    if (v < 0) {
    11ba:	9b04      	ldr	r3, [sp, #16]
    11bc:	2b00      	cmp	r3, #0
    11be:	da07      	bge.n	11d0 <_PrintInt+0xc4>
      v = -v;
    11c0:	9b04      	ldr	r3, [sp, #16]
    11c2:	425b      	negs	r3, r3
    11c4:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    11c6:	212d      	movs	r1, #45	; 0x2d
    11c8:	9805      	ldr	r0, [sp, #20]
    11ca:	f7ff feb2 	bl	f32 <_StoreChar>
    11ce:	e008      	b.n	11e2 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    11d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11d2:	f003 0304 	and.w	r3, r3, #4
    11d6:	2b00      	cmp	r3, #0
    11d8:	d003      	beq.n	11e2 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    11da:	212b      	movs	r1, #43	; 0x2b
    11dc:	9805      	ldr	r0, [sp, #20]
    11de:	f7ff fea8 	bl	f32 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    11e2:	9b05      	ldr	r3, [sp, #20]
    11e4:	68db      	ldr	r3, [r3, #12]
    11e6:	2b00      	cmp	r3, #0
    11e8:	db32      	blt.n	1250 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    11ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11ec:	f003 0302 	and.w	r3, r3, #2
    11f0:	2b00      	cmp	r3, #0
    11f2:	d01f      	beq.n	1234 <_PrintInt+0x128>
    11f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11f6:	f003 0301 	and.w	r3, r3, #1
    11fa:	2b00      	cmp	r3, #0
    11fc:	d11a      	bne.n	1234 <_PrintInt+0x128>
    11fe:	9b02      	ldr	r3, [sp, #8]
    1200:	2b00      	cmp	r3, #0
    1202:	d117      	bne.n	1234 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1206:	2b00      	cmp	r3, #0
    1208:	d014      	beq.n	1234 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    120a:	e00a      	b.n	1222 <_PrintInt+0x116>
            FieldWidth--;
    120c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    120e:	3b01      	subs	r3, #1
    1210:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1212:	2130      	movs	r1, #48	; 0x30
    1214:	9805      	ldr	r0, [sp, #20]
    1216:	f7ff fe8c 	bl	f32 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    121a:	9b05      	ldr	r3, [sp, #20]
    121c:	68db      	ldr	r3, [r3, #12]
    121e:	2b00      	cmp	r3, #0
    1220:	db07      	blt.n	1232 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1224:	2b00      	cmp	r3, #0
    1226:	d005      	beq.n	1234 <_PrintInt+0x128>
    1228:	9a07      	ldr	r2, [sp, #28]
    122a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    122c:	429a      	cmp	r2, r3
    122e:	d3ed      	bcc.n	120c <_PrintInt+0x100>
    1230:	e000      	b.n	1234 <_PrintInt+0x128>
              break;
    1232:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1234:	9b05      	ldr	r3, [sp, #20]
    1236:	68db      	ldr	r3, [r3, #12]
    1238:	2b00      	cmp	r3, #0
    123a:	db09      	blt.n	1250 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    123c:	9904      	ldr	r1, [sp, #16]
    123e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1240:	9301      	str	r3, [sp, #4]
    1242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1244:	9300      	str	r3, [sp, #0]
    1246:	9b02      	ldr	r3, [sp, #8]
    1248:	9a03      	ldr	r2, [sp, #12]
    124a:	9805      	ldr	r0, [sp, #20]
    124c:	f7ff feb0 	bl	fb0 <_PrintUnsigned>
      }
    }
  }
}
    1250:	bf00      	nop
    1252:	b009      	add	sp, #36	; 0x24
    1254:	f85d fb04 	ldr.w	pc, [sp], #4

00001258 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1258:	b500      	push	{lr}
    125a:	b0a3      	sub	sp, #140	; 0x8c
    125c:	9005      	str	r0, [sp, #20]
    125e:	9104      	str	r1, [sp, #16]
    1260:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1262:	ab06      	add	r3, sp, #24
    1264:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1266:	2340      	movs	r3, #64	; 0x40
    1268:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    126a:	2300      	movs	r3, #0
    126c:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    126e:	9b05      	ldr	r3, [sp, #20]
    1270:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1272:	2300      	movs	r3, #0
    1274:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1276:	9b04      	ldr	r3, [sp, #16]
    1278:	781b      	ldrb	r3, [r3, #0]
    127a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    127e:	9b04      	ldr	r3, [sp, #16]
    1280:	3301      	adds	r3, #1
    1282:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1284:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1288:	2b00      	cmp	r3, #0
    128a:	f000 819c 	beq.w	15c6 <__BSS_SRAM_SIZE+0x326>
      break;
    }
    if (c == '%') {
    128e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1292:	2b25      	cmp	r3, #37	; 0x25
    1294:	f040 818b 	bne.w	15ae <__BSS_SRAM_SIZE+0x30e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1298:	2300      	movs	r3, #0
    129a:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    129c:	2301      	movs	r3, #1
    129e:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    12a0:	9b04      	ldr	r3, [sp, #16]
    12a2:	781b      	ldrb	r3, [r3, #0]
    12a4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    12a8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12ac:	3b23      	subs	r3, #35	; 0x23
    12ae:	2b0d      	cmp	r3, #13
    12b0:	d83e      	bhi.n	1330 <__BSS_SRAM_SIZE+0x90>
    12b2:	a201      	add	r2, pc, #4	; (adr r2, 12b8 <__BSS_SRAM_SIZE+0x18>)
    12b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12b8:	00001321 	.word	0x00001321
    12bc:	00001331 	.word	0x00001331
    12c0:	00001331 	.word	0x00001331
    12c4:	00001331 	.word	0x00001331
    12c8:	00001331 	.word	0x00001331
    12cc:	00001331 	.word	0x00001331
    12d0:	00001331 	.word	0x00001331
    12d4:	00001331 	.word	0x00001331
    12d8:	00001311 	.word	0x00001311
    12dc:	00001331 	.word	0x00001331
    12e0:	000012f1 	.word	0x000012f1
    12e4:	00001331 	.word	0x00001331
    12e8:	00001331 	.word	0x00001331
    12ec:	00001301 	.word	0x00001301
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    12f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    12f2:	f043 0301 	orr.w	r3, r3, #1
    12f6:	931e      	str	r3, [sp, #120]	; 0x78
    12f8:	9b04      	ldr	r3, [sp, #16]
    12fa:	3301      	adds	r3, #1
    12fc:	9304      	str	r3, [sp, #16]
    12fe:	e01a      	b.n	1336 <__BSS_SRAM_SIZE+0x96>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1300:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1302:	f043 0302 	orr.w	r3, r3, #2
    1306:	931e      	str	r3, [sp, #120]	; 0x78
    1308:	9b04      	ldr	r3, [sp, #16]
    130a:	3301      	adds	r3, #1
    130c:	9304      	str	r3, [sp, #16]
    130e:	e012      	b.n	1336 <__BSS_SRAM_SIZE+0x96>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1310:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1312:	f043 0304 	orr.w	r3, r3, #4
    1316:	931e      	str	r3, [sp, #120]	; 0x78
    1318:	9b04      	ldr	r3, [sp, #16]
    131a:	3301      	adds	r3, #1
    131c:	9304      	str	r3, [sp, #16]
    131e:	e00a      	b.n	1336 <__BSS_SRAM_SIZE+0x96>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1320:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1322:	f043 0308 	orr.w	r3, r3, #8
    1326:	931e      	str	r3, [sp, #120]	; 0x78
    1328:	9b04      	ldr	r3, [sp, #16]
    132a:	3301      	adds	r3, #1
    132c:	9304      	str	r3, [sp, #16]
    132e:	e002      	b.n	1336 <__BSS_SRAM_SIZE+0x96>
        default:  v = 0; break;
    1330:	2300      	movs	r3, #0
    1332:	9320      	str	r3, [sp, #128]	; 0x80
    1334:	bf00      	nop
        }
      } while (v);
    1336:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1338:	2b00      	cmp	r3, #0
    133a:	d1b1      	bne.n	12a0 <__BSS_SRAM_SIZE>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    133c:	2300      	movs	r3, #0
    133e:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1340:	9b04      	ldr	r3, [sp, #16]
    1342:	781b      	ldrb	r3, [r3, #0]
    1344:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1348:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    134c:	2b2f      	cmp	r3, #47	; 0x2f
    134e:	d912      	bls.n	1376 <__BSS_SRAM_SIZE+0xd6>
    1350:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1354:	2b39      	cmp	r3, #57	; 0x39
    1356:	d80e      	bhi.n	1376 <__BSS_SRAM_SIZE+0xd6>
          break;
        }
        sFormat++;
    1358:	9b04      	ldr	r3, [sp, #16]
    135a:	3301      	adds	r3, #1
    135c:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    135e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1360:	4613      	mov	r3, r2
    1362:	009b      	lsls	r3, r3, #2
    1364:	4413      	add	r3, r2
    1366:	005b      	lsls	r3, r3, #1
    1368:	461a      	mov	r2, r3
    136a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    136e:	4413      	add	r3, r2
    1370:	3b30      	subs	r3, #48	; 0x30
    1372:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1374:	e7e4      	b.n	1340 <__BSS_SRAM_SIZE+0xa0>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1376:	2300      	movs	r3, #0
    1378:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    137a:	9b04      	ldr	r3, [sp, #16]
    137c:	781b      	ldrb	r3, [r3, #0]
    137e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1382:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1386:	2b2e      	cmp	r3, #46	; 0x2e
    1388:	d11d      	bne.n	13c6 <__BSS_SRAM_SIZE+0x126>
        sFormat++;
    138a:	9b04      	ldr	r3, [sp, #16]
    138c:	3301      	adds	r3, #1
    138e:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1390:	9b04      	ldr	r3, [sp, #16]
    1392:	781b      	ldrb	r3, [r3, #0]
    1394:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1398:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    139c:	2b2f      	cmp	r3, #47	; 0x2f
    139e:	d912      	bls.n	13c6 <__BSS_SRAM_SIZE+0x126>
    13a0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13a4:	2b39      	cmp	r3, #57	; 0x39
    13a6:	d80e      	bhi.n	13c6 <__BSS_SRAM_SIZE+0x126>
            break;
          }
          sFormat++;
    13a8:	9b04      	ldr	r3, [sp, #16]
    13aa:	3301      	adds	r3, #1
    13ac:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    13ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    13b0:	4613      	mov	r3, r2
    13b2:	009b      	lsls	r3, r3, #2
    13b4:	4413      	add	r3, r2
    13b6:	005b      	lsls	r3, r3, #1
    13b8:	461a      	mov	r2, r3
    13ba:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13be:	4413      	add	r3, r2
    13c0:	3b30      	subs	r3, #48	; 0x30
    13c2:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    13c4:	e7e4      	b.n	1390 <__BSS_SRAM_SIZE+0xf0>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    13c6:	9b04      	ldr	r3, [sp, #16]
    13c8:	781b      	ldrb	r3, [r3, #0]
    13ca:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    13ce:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13d2:	2b6c      	cmp	r3, #108	; 0x6c
    13d4:	d003      	beq.n	13de <__BSS_SRAM_SIZE+0x13e>
    13d6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13da:	2b68      	cmp	r3, #104	; 0x68
    13dc:	d107      	bne.n	13ee <__BSS_SRAM_SIZE+0x14e>
          sFormat++;
    13de:	9b04      	ldr	r3, [sp, #16]
    13e0:	3301      	adds	r3, #1
    13e2:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    13e4:	9b04      	ldr	r3, [sp, #16]
    13e6:	781b      	ldrb	r3, [r3, #0]
    13e8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    13ec:	e7ef      	b.n	13ce <__BSS_SRAM_SIZE+0x12e>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    13ee:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13f2:	2b25      	cmp	r3, #37	; 0x25
    13f4:	f000 80d0 	beq.w	1598 <__BSS_SRAM_SIZE+0x2f8>
    13f8:	2b25      	cmp	r3, #37	; 0x25
    13fa:	f2c0 80d3 	blt.w	15a4 <__BSS_SRAM_SIZE+0x304>
    13fe:	2b78      	cmp	r3, #120	; 0x78
    1400:	f300 80d0 	bgt.w	15a4 <__BSS_SRAM_SIZE+0x304>
    1404:	2b58      	cmp	r3, #88	; 0x58
    1406:	f2c0 80cd 	blt.w	15a4 <__BSS_SRAM_SIZE+0x304>
    140a:	3b58      	subs	r3, #88	; 0x58
    140c:	2b20      	cmp	r3, #32
    140e:	f200 80c9 	bhi.w	15a4 <__BSS_SRAM_SIZE+0x304>
    1412:	a201      	add	r2, pc, #4	; (adr r2, 1418 <__BSS_SRAM_SIZE+0x178>)
    1414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1418:	00001509 	.word	0x00001509
    141c:	000015a5 	.word	0x000015a5
    1420:	000015a5 	.word	0x000015a5
    1424:	000015a5 	.word	0x000015a5
    1428:	000015a5 	.word	0x000015a5
    142c:	000015a5 	.word	0x000015a5
    1430:	000015a5 	.word	0x000015a5
    1434:	000015a5 	.word	0x000015a5
    1438:	000015a5 	.word	0x000015a5
    143c:	000015a5 	.word	0x000015a5
    1440:	000015a5 	.word	0x000015a5
    1444:	0000149d 	.word	0x0000149d
    1448:	000014c1 	.word	0x000014c1
    144c:	000015a5 	.word	0x000015a5
    1450:	000015a5 	.word	0x000015a5
    1454:	000015a5 	.word	0x000015a5
    1458:	000015a5 	.word	0x000015a5
    145c:	000015a5 	.word	0x000015a5
    1460:	000015a5 	.word	0x000015a5
    1464:	000015a5 	.word	0x000015a5
    1468:	000015a5 	.word	0x000015a5
    146c:	000015a5 	.word	0x000015a5
    1470:	000015a5 	.word	0x000015a5
    1474:	000015a5 	.word	0x000015a5
    1478:	00001575 	.word	0x00001575
    147c:	000015a5 	.word	0x000015a5
    1480:	000015a5 	.word	0x000015a5
    1484:	0000152d 	.word	0x0000152d
    1488:	000015a5 	.word	0x000015a5
    148c:	000014e5 	.word	0x000014e5
    1490:	000015a5 	.word	0x000015a5
    1494:	000015a5 	.word	0x000015a5
    1498:	00001509 	.word	0x00001509
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    149c:	9b03      	ldr	r3, [sp, #12]
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	1d19      	adds	r1, r3, #4
    14a2:	9a03      	ldr	r2, [sp, #12]
    14a4:	6011      	str	r1, [r2, #0]
    14a6:	681b      	ldr	r3, [r3, #0]
    14a8:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    14aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    14ac:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    14b0:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    14b4:	ab16      	add	r3, sp, #88	; 0x58
    14b6:	4611      	mov	r1, r2
    14b8:	4618      	mov	r0, r3
    14ba:	f7ff fd3a 	bl	f32 <_StoreChar>
        break;
    14be:	e072      	b.n	15a6 <__BSS_SRAM_SIZE+0x306>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    14c0:	9b03      	ldr	r3, [sp, #12]
    14c2:	681b      	ldr	r3, [r3, #0]
    14c4:	1d19      	adds	r1, r3, #4
    14c6:	9a03      	ldr	r2, [sp, #12]
    14c8:	6011      	str	r1, [r2, #0]
    14ca:	681b      	ldr	r3, [r3, #0]
    14cc:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    14ce:	a816      	add	r0, sp, #88	; 0x58
    14d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14d2:	9301      	str	r3, [sp, #4]
    14d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14d6:	9300      	str	r3, [sp, #0]
    14d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    14da:	220a      	movs	r2, #10
    14dc:	9920      	ldr	r1, [sp, #128]	; 0x80
    14de:	f7ff fe15 	bl	110c <_PrintInt>
        break;
    14e2:	e060      	b.n	15a6 <__BSS_SRAM_SIZE+0x306>
      case 'u':
        v = va_arg(*pParamList, int);
    14e4:	9b03      	ldr	r3, [sp, #12]
    14e6:	681b      	ldr	r3, [r3, #0]
    14e8:	1d19      	adds	r1, r3, #4
    14ea:	9a03      	ldr	r2, [sp, #12]
    14ec:	6011      	str	r1, [r2, #0]
    14ee:	681b      	ldr	r3, [r3, #0]
    14f0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    14f2:	9920      	ldr	r1, [sp, #128]	; 0x80
    14f4:	a816      	add	r0, sp, #88	; 0x58
    14f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14f8:	9301      	str	r3, [sp, #4]
    14fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14fc:	9300      	str	r3, [sp, #0]
    14fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1500:	220a      	movs	r2, #10
    1502:	f7ff fd55 	bl	fb0 <_PrintUnsigned>
        break;
    1506:	e04e      	b.n	15a6 <__BSS_SRAM_SIZE+0x306>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1508:	9b03      	ldr	r3, [sp, #12]
    150a:	681b      	ldr	r3, [r3, #0]
    150c:	1d19      	adds	r1, r3, #4
    150e:	9a03      	ldr	r2, [sp, #12]
    1510:	6011      	str	r1, [r2, #0]
    1512:	681b      	ldr	r3, [r3, #0]
    1514:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1516:	9920      	ldr	r1, [sp, #128]	; 0x80
    1518:	a816      	add	r0, sp, #88	; 0x58
    151a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    151c:	9301      	str	r3, [sp, #4]
    151e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1520:	9300      	str	r3, [sp, #0]
    1522:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1524:	2210      	movs	r2, #16
    1526:	f7ff fd43 	bl	fb0 <_PrintUnsigned>
        break;
    152a:	e03c      	b.n	15a6 <__BSS_SRAM_SIZE+0x306>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    152c:	9b03      	ldr	r3, [sp, #12]
    152e:	681b      	ldr	r3, [r3, #0]
    1530:	1d19      	adds	r1, r3, #4
    1532:	9a03      	ldr	r2, [sp, #12]
    1534:	6011      	str	r1, [r2, #0]
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    153a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    153c:	2b00      	cmp	r3, #0
    153e:	d101      	bne.n	1544 <__BSS_SRAM_SIZE+0x2a4>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1540:	4b2c      	ldr	r3, [pc, #176]	; (15f4 <__BSS_SRAM_SIZE+0x354>)
    1542:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1544:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1546:	781b      	ldrb	r3, [r3, #0]
    1548:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    154c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    154e:	3301      	adds	r3, #1
    1550:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1552:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1556:	2b00      	cmp	r3, #0
    1558:	d00a      	beq.n	1570 <__BSS_SRAM_SIZE+0x2d0>
              break;
            }
           _StoreChar(&BufferDesc, c);
    155a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    155e:	ab16      	add	r3, sp, #88	; 0x58
    1560:	4611      	mov	r1, r2
    1562:	4618      	mov	r0, r3
    1564:	f7ff fce5 	bl	f32 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1568:	9b19      	ldr	r3, [sp, #100]	; 0x64
    156a:	2b00      	cmp	r3, #0
    156c:	daea      	bge.n	1544 <__BSS_SRAM_SIZE+0x2a4>
        }
        break;
    156e:	e01a      	b.n	15a6 <__BSS_SRAM_SIZE+0x306>
              break;
    1570:	bf00      	nop
        break;
    1572:	e018      	b.n	15a6 <__BSS_SRAM_SIZE+0x306>
      case 'p':
        v = va_arg(*pParamList, int);
    1574:	9b03      	ldr	r3, [sp, #12]
    1576:	681b      	ldr	r3, [r3, #0]
    1578:	1d19      	adds	r1, r3, #4
    157a:	9a03      	ldr	r2, [sp, #12]
    157c:	6011      	str	r1, [r2, #0]
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1582:	9920      	ldr	r1, [sp, #128]	; 0x80
    1584:	a816      	add	r0, sp, #88	; 0x58
    1586:	2300      	movs	r3, #0
    1588:	9301      	str	r3, [sp, #4]
    158a:	2308      	movs	r3, #8
    158c:	9300      	str	r3, [sp, #0]
    158e:	2308      	movs	r3, #8
    1590:	2210      	movs	r2, #16
    1592:	f7ff fd0d 	bl	fb0 <_PrintUnsigned>
        break;
    1596:	e006      	b.n	15a6 <__BSS_SRAM_SIZE+0x306>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1598:	ab16      	add	r3, sp, #88	; 0x58
    159a:	2125      	movs	r1, #37	; 0x25
    159c:	4618      	mov	r0, r3
    159e:	f7ff fcc8 	bl	f32 <_StoreChar>
        break;
    15a2:	e000      	b.n	15a6 <__BSS_SRAM_SIZE+0x306>
      default:
        break;
    15a4:	bf00      	nop
      }
      sFormat++;
    15a6:	9b04      	ldr	r3, [sp, #16]
    15a8:	3301      	adds	r3, #1
    15aa:	9304      	str	r3, [sp, #16]
    15ac:	e006      	b.n	15bc <__BSS_SRAM_SIZE+0x31c>
    } else {
      _StoreChar(&BufferDesc, c);
    15ae:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    15b2:	ab16      	add	r3, sp, #88	; 0x58
    15b4:	4611      	mov	r1, r2
    15b6:	4618      	mov	r0, r3
    15b8:	f7ff fcbb 	bl	f32 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    15bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15be:	2b00      	cmp	r3, #0
    15c0:	f6bf ae59 	bge.w	1276 <SEGGER_RTT_vprintf+0x1e>
    15c4:	e000      	b.n	15c8 <__BSS_SRAM_SIZE+0x328>
      break;
    15c6:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    15c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15ca:	2b00      	cmp	r3, #0
    15cc:	dd0c      	ble.n	15e8 <__BSS_SRAM_SIZE+0x348>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    15ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
    15d0:	2b00      	cmp	r3, #0
    15d2:	d005      	beq.n	15e0 <__BSS_SRAM_SIZE+0x340>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    15d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    15d6:	ab06      	add	r3, sp, #24
    15d8:	4619      	mov	r1, r3
    15da:	9805      	ldr	r0, [sp, #20]
    15dc:	f7ff fc7e 	bl	edc <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    15e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    15e4:	4413      	add	r3, r2
    15e6:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    15e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    15ea:	4618      	mov	r0, r3
    15ec:	b023      	add	sp, #140	; 0x8c
    15ee:	f85d fb04 	ldr.w	pc, [sp], #4
    15f2:	bf00      	nop
    15f4:	00017d5c 	.word	0x00017d5c

000015f8 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    15f8:	b40e      	push	{r1, r2, r3}
    15fa:	b500      	push	{lr}
    15fc:	b084      	sub	sp, #16
    15fe:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1600:	ab06      	add	r3, sp, #24
    1602:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1604:	ab02      	add	r3, sp, #8
    1606:	461a      	mov	r2, r3
    1608:	9905      	ldr	r1, [sp, #20]
    160a:	9801      	ldr	r0, [sp, #4]
    160c:	f7ff fe24 	bl	1258 <SEGGER_RTT_vprintf>
    1610:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1612:	9b03      	ldr	r3, [sp, #12]
}
    1614:	4618      	mov	r0, r3
    1616:	b004      	add	sp, #16
    1618:	f85d eb04 	ldr.w	lr, [sp], #4
    161c:	b003      	add	sp, #12
    161e:	4770      	bx	lr

00001620 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    1620:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    1622:	4805      	ldr	r0, [pc, #20]	; (1638 <MCU_clocks+0x18>)
    1624:	f004 fa38 	bl	5a98 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    1628:	2000      	movs	r0, #0
    162a:	f004 fae9 	bl	5c00 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    162e:	2000      	movs	r0, #0
    1630:	f004 fab0 	bl	5b94 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    1634:	bf00      	nop
    1636:	bd08      	pop	{r3, pc}
    1638:	00019154 	.word	0x00019154

0000163c <EcuM_Init>:
/**
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void ) {   
    163c:	b508      	push	{r3, lr}
    MCU_clocks();
    163e:	f7ff ffef 	bl	1620 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    1642:	2000      	movs	r0, #0
    1644:	f000 fbd1 	bl	1dea <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    1648:	2000      	movs	r0, #0
    164a:	f000 fa71 	bl	1b30 <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    164e:	4807      	ldr	r0, [pc, #28]	; (166c <EcuM_Init+0x30>)
    1650:	f004 feba 	bl	63c8 <Port_Init>
    Spi_Init( &Spi_Config );    //Init spi driver and configuration.
    1654:	4806      	ldr	r0, [pc, #24]	; (1670 <EcuM_Init+0x34>)
    1656:	f008 f8b5 	bl	97c4 <Spi_Init>
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );  //Init FlexCan driver
    165a:	4806      	ldr	r0, [pc, #24]	; (1674 <EcuM_Init+0x38>)
    165c:	f008 fdbc 	bl	a1d8 <Can_43_FLEXCAN_Init>
    CanIf_Init( &CanIf_Config );    //Init CanIf driver.
    1660:	4805      	ldr	r0, [pc, #20]	; (1678 <EcuM_Init+0x3c>)
    1662:	f015 fbd9 	bl	16e18 <CanIf_Init>
}
    1666:	bf00      	nop
    1668:	bd08      	pop	{r3, pc}
    166a:	bf00      	nop
    166c:	000197bc 	.word	0x000197bc
    1670:	000198bc 	.word	0x000198bc
    1674:	00018c18 	.word	0x00018c18
    1678:	00018ad0 	.word	0x00018ad0

0000167c <Delay>:
/**
 * @brief This function is a delay in ms using the osif timer.
 * 
 * @param ms Delay in ms.
 */
void Delay( uint32 ms ) {
    167c:	b500      	push	{lr}
    167e:	b087      	sub	sp, #28
    1680:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
    1682:	9b01      	ldr	r3, [sp, #4]
    1684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1688:	fb02 f303 	mul.w	r3, r2, r3
    168c:	2101      	movs	r1, #1
    168e:	4618      	mov	r0, r3
    1690:	f000 fc00 	bl	1e94 <OsIf_MicrosToTicks>
    1694:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
    1696:	2001      	movs	r0, #1
    1698:	f000 fbb0 	bl	1dfc <OsIf_GetCounter>
    169c:	4603      	mov	r3, r0
    169e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
    16a0:	2300      	movs	r3, #0
    16a2:	9305      	str	r3, [sp, #20]

    do {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    16a4:	ab03      	add	r3, sp, #12
    16a6:	2101      	movs	r1, #1
    16a8:	4618      	mov	r0, r3
    16aa:	f000 fbc0 	bl	1e2e <OsIf_GetElapsed>
    16ae:	4602      	mov	r2, r0
    16b0:	9b05      	ldr	r3, [sp, #20]
    16b2:	4413      	add	r3, r2
    16b4:	9305      	str	r3, [sp, #20]
    } while( ElapsedTime < Timeout );
    16b6:	9a05      	ldr	r2, [sp, #20]
    16b8:	9b04      	ldr	r3, [sp, #16]
    16ba:	429a      	cmp	r2, r3
    16bc:	d3f2      	bcc.n	16a4 <Delay+0x28>
    16be:	bf00      	nop
    16c0:	bf00      	nop
    16c2:	b007      	add	sp, #28
    16c4:	f85d fb04 	ldr.w	pc, [sp], #4

000016c8 <memcpy>:
    16c8:	440a      	add	r2, r1
    16ca:	4291      	cmp	r1, r2
    16cc:	f100 33ff 	add.w	r3, r0, #4294967295
    16d0:	d100      	bne.n	16d4 <memcpy+0xc>
    16d2:	4770      	bx	lr
    16d4:	b510      	push	{r4, lr}
    16d6:	f811 4b01 	ldrb.w	r4, [r1], #1
    16da:	f803 4f01 	strb.w	r4, [r3, #1]!
    16de:	4291      	cmp	r1, r2
    16e0:	d1f9      	bne.n	16d6 <memcpy+0xe>
    16e2:	bd10      	pop	{r4, pc}

000016e4 <memset>:
    16e4:	4402      	add	r2, r0
    16e6:	4603      	mov	r3, r0
    16e8:	4293      	cmp	r3, r2
    16ea:	d100      	bne.n	16ee <memset+0xa>
    16ec:	4770      	bx	lr
    16ee:	f803 1b01 	strb.w	r1, [r3], #1
    16f2:	e7f9      	b.n	16e8 <memset+0x4>

000016f4 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    16f4:	b500      	push	{lr}
    16f6:	b087      	sub	sp, #28
    16f8:	9003      	str	r0, [sp, #12]
    16fa:	9102      	str	r1, [sp, #8]
    16fc:	9201      	str	r2, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    sint32 dev_irqNumber = (sint32)eIrqNumber;
    16fe:	9b03      	ldr	r3, [sp, #12]
    1700:	9305      	str	r3, [sp, #20]
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= dev_irqNumber);
    1702:	9b05      	ldr	r3, [sp, #20]
    1704:	43db      	mvns	r3, r3
    1706:	0fdb      	lsrs	r3, r3, #31
    1708:	b2db      	uxtb	r3, r3
    170a:	4618      	mov	r0, r3
    170c:	f7ff f926 	bl	95c <DevAssert>
    DevAssert(dev_irqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1710:	9b05      	ldr	r3, [sp, #20]
    1712:	2b7a      	cmp	r3, #122	; 0x7a
    1714:	bfd4      	ite	le
    1716:	2301      	movle	r3, #1
    1718:	2300      	movgt	r3, #0
    171a:	b2db      	uxtb	r3, r3
    171c:	4618      	mov	r0, r3
    171e:	f7ff f91d 	bl	95c <DevAssert>
#if (MCAL_PLATFORM_ARM == MCAL_ARM_MARCH)
#if defined(S32K3XX) || defined(SAF85) || defined(S32R41)
    DevAssert(S32_SCB->VTOR >= (uint32)__RAM_INTERRUPT_START);
#else
    DevAssert(S32_SCB->VTOR >= (uint32)__INT_SRAM_START);
    1722:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1726:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    172a:	4a14      	ldr	r2, [pc, #80]	; (177c <IntCtrl_Ip_InstallHandlerPrivileged+0x88>)
    172c:	4293      	cmp	r3, r2
    172e:	bf2c      	ite	cs
    1730:	2301      	movcs	r3, #1
    1732:	2300      	movcc	r3, #0
    1734:	b2db      	uxtb	r3, r3
    1736:	4618      	mov	r0, r3
    1738:	f7ff f910 	bl	95c <DevAssert>

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    173c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1740:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1744:	9304      	str	r3, [sp, #16]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1746:	9b01      	ldr	r3, [sp, #4]
    1748:	2b00      	cmp	r3, #0
    174a:	d007      	beq.n	175c <IntCtrl_Ip_InstallHandlerPrivileged+0x68>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    174c:	9b03      	ldr	r3, [sp, #12]
    174e:	3310      	adds	r3, #16
    1750:	009b      	lsls	r3, r3, #2
    1752:	9a04      	ldr	r2, [sp, #16]
    1754:	4413      	add	r3, r2
    1756:	681a      	ldr	r2, [r3, #0]
    1758:	9b01      	ldr	r3, [sp, #4]
    175a:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    175c:	9b03      	ldr	r3, [sp, #12]
    175e:	3310      	adds	r3, #16
    1760:	009b      	lsls	r3, r3, #2
    1762:	9a04      	ldr	r2, [sp, #16]
    1764:	4413      	add	r3, r2
    1766:	9a02      	ldr	r2, [sp, #8]
    1768:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    176a:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    176e:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    1772:	bf00      	nop
    1774:	b007      	add	sp, #28
    1776:	f85d fb04 	ldr.w	pc, [sp], #4
    177a:	bf00      	nop
    177c:	1fff8000 	.word	0x1fff8000

00001780 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1780:	b500      	push	{lr}
    1782:	b083      	sub	sp, #12
    1784:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    1786:	9b01      	ldr	r3, [sp, #4]
    1788:	43db      	mvns	r3, r3
    178a:	0fdb      	lsrs	r3, r3, #31
    178c:	b2db      	uxtb	r3, r3
    178e:	4618      	mov	r0, r3
    1790:	f7ff f8e4 	bl	95c <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1794:	9b01      	ldr	r3, [sp, #4]
    1796:	2b7a      	cmp	r3, #122	; 0x7a
    1798:	bfd4      	ite	le
    179a:	2301      	movle	r3, #1
    179c:	2300      	movgt	r3, #0
    179e:	b2db      	uxtb	r3, r3
    17a0:	4618      	mov	r0, r3
    17a2:	f7ff f8db 	bl	95c <DevAssert>
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    17a6:	9b01      	ldr	r3, [sp, #4]
    17a8:	f003 021f 	and.w	r2, r3, #31
    17ac:	4905      	ldr	r1, [pc, #20]	; (17c4 <IntCtrl_Ip_EnableIrqPrivileged+0x44>)
    17ae:	9b01      	ldr	r3, [sp, #4]
    17b0:	095b      	lsrs	r3, r3, #5
    17b2:	2001      	movs	r0, #1
    17b4:	fa00 f202 	lsl.w	r2, r0, r2
    17b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    17bc:	bf00      	nop
    17be:	b003      	add	sp, #12
    17c0:	f85d fb04 	ldr.w	pc, [sp], #4
    17c4:	e000e100 	.word	0xe000e100

000017c8 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    17c8:	b500      	push	{lr}
    17ca:	b083      	sub	sp, #12
    17cc:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    17ce:	9b01      	ldr	r3, [sp, #4]
    17d0:	43db      	mvns	r3, r3
    17d2:	0fdb      	lsrs	r3, r3, #31
    17d4:	b2db      	uxtb	r3, r3
    17d6:	4618      	mov	r0, r3
    17d8:	f7ff f8c0 	bl	95c <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    17dc:	9b01      	ldr	r3, [sp, #4]
    17de:	2b7a      	cmp	r3, #122	; 0x7a
    17e0:	bfd4      	ite	le
    17e2:	2301      	movle	r3, #1
    17e4:	2300      	movgt	r3, #0
    17e6:	b2db      	uxtb	r3, r3
    17e8:	4618      	mov	r0, r3
    17ea:	f7ff f8b7 	bl	95c <DevAssert>
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    17ee:	9b01      	ldr	r3, [sp, #4]
    17f0:	f003 021f 	and.w	r2, r3, #31
    17f4:	4906      	ldr	r1, [pc, #24]	; (1810 <IntCtrl_Ip_DisableIrqPrivileged+0x48>)
    17f6:	9b01      	ldr	r3, [sp, #4]
    17f8:	095b      	lsrs	r3, r3, #5
    17fa:	2001      	movs	r0, #1
    17fc:	fa00 f202 	lsl.w	r2, r0, r2
    1800:	3320      	adds	r3, #32
    1802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1806:	bf00      	nop
    1808:	b003      	add	sp, #12
    180a:	f85d fb04 	ldr.w	pc, [sp], #4
    180e:	bf00      	nop
    1810:	e000e100 	.word	0xe000e100

00001814 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1814:	b500      	push	{lr}
    1816:	b085      	sub	sp, #20
    1818:	9001      	str	r0, [sp, #4]
    181a:	460b      	mov	r3, r1
    181c:	f88d 3003 	strb.w	r3, [sp, #3]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number and priority - dev_irqNumber is used to avoid compiler warning */
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= (sint32)eIrqNumber);
    1820:	9b01      	ldr	r3, [sp, #4]
    1822:	43db      	mvns	r3, r3
    1824:	0fdb      	lsrs	r3, r3, #31
    1826:	b2db      	uxtb	r3, r3
    1828:	4618      	mov	r0, r3
    182a:	f7ff f897 	bl	95c <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    182e:	9b01      	ldr	r3, [sp, #4]
    1830:	2b7a      	cmp	r3, #122	; 0x7a
    1832:	bfd4      	ite	le
    1834:	2301      	movle	r3, #1
    1836:	2300      	movgt	r3, #0
    1838:	b2db      	uxtb	r3, r3
    183a:	4618      	mov	r0, r3
    183c:	f7ff f88e 	bl	95c <DevAssert>
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    DevAssert(u8Priority < (uint8)(1U << INT_CTRL_IP_NVIC_PRIO_BITS));
    1840:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1844:	2b0f      	cmp	r3, #15
    1846:	bf94      	ite	ls
    1848:	2301      	movls	r3, #1
    184a:	2300      	movhi	r3, #0
    184c:	b2db      	uxtb	r3, r3
    184e:	4618      	mov	r0, r3
    1850:	f7ff f884 	bl	95c <DevAssert>
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1854:	2304      	movs	r3, #4
    1856:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    185a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    185e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1862:	fa02 f103 	lsl.w	r1, r2, r3
    1866:	4a05      	ldr	r2, [pc, #20]	; (187c <IntCtrl_Ip_SetPriorityPrivileged+0x68>)
    1868:	9b01      	ldr	r3, [sp, #4]
    186a:	b2c9      	uxtb	r1, r1
    186c:	4413      	add	r3, r2
    186e:	460a      	mov	r2, r1
    1870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1874:	bf00      	nop
    1876:	b005      	add	sp, #20
    1878:	f85d fb04 	ldr.w	pc, [sp], #4
    187c:	e000e100 	.word	0xe000e100

00001880 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1880:	b500      	push	{lr}
    1882:	b085      	sub	sp, #20
    1884:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number */
    DevAssert(INT_CTRL_IP_IRQ_MIN <= eIrqNumber);
    1886:	9b01      	ldr	r3, [sp, #4]
    1888:	43db      	mvns	r3, r3
    188a:	0fdb      	lsrs	r3, r3, #31
    188c:	b2db      	uxtb	r3, r3
    188e:	4618      	mov	r0, r3
    1890:	f7ff f864 	bl	95c <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1894:	9b01      	ldr	r3, [sp, #4]
    1896:	2b7a      	cmp	r3, #122	; 0x7a
    1898:	bfd4      	ite	le
    189a:	2301      	movle	r3, #1
    189c:	2300      	movgt	r3, #0
    189e:	b2db      	uxtb	r3, r3
    18a0:	4618      	mov	r0, r3
    18a2:	f7ff f85b 	bl	95c <DevAssert>

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    18a6:	2304      	movs	r3, #4
    18a8:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    18ac:	4a09      	ldr	r2, [pc, #36]	; (18d4 <IntCtrl_Ip_GetPriorityPrivileged+0x54>)
    18ae:	9b01      	ldr	r3, [sp, #4]
    18b0:	4413      	add	r3, r2
    18b2:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    18b6:	b2db      	uxtb	r3, r3
    18b8:	461a      	mov	r2, r3
    18ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    18be:	fa42 f303 	asr.w	r3, r2, r3
    18c2:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    18c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    18ca:	4618      	mov	r0, r3
    18cc:	b005      	add	sp, #20
    18ce:	f85d fb04 	ldr.w	pc, [sp], #4
    18d2:	bf00      	nop
    18d4:	e000e100 	.word	0xe000e100

000018d8 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    18d8:	b500      	push	{lr}
    18da:	b083      	sub	sp, #12
    18dc:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number */
    DevAssert(0 <= (sint32)eIrqNumber);
    18de:	9b01      	ldr	r3, [sp, #4]
    18e0:	43db      	mvns	r3, r3
    18e2:	0fdb      	lsrs	r3, r3, #31
    18e4:	b2db      	uxtb	r3, r3
    18e6:	4618      	mov	r0, r3
    18e8:	f7ff f838 	bl	95c <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    18ec:	9b01      	ldr	r3, [sp, #4]
    18ee:	2b7a      	cmp	r3, #122	; 0x7a
    18f0:	bfd4      	ite	le
    18f2:	2301      	movle	r3, #1
    18f4:	2300      	movgt	r3, #0
    18f6:	b2db      	uxtb	r3, r3
    18f8:	4618      	mov	r0, r3
    18fa:	f7ff f82f 	bl	95c <DevAssert>
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    18fe:	9b01      	ldr	r3, [sp, #4]
    1900:	f003 021f 	and.w	r2, r3, #31
    1904:	4906      	ldr	r1, [pc, #24]	; (1920 <IntCtrl_Ip_ClearPendingPrivileged+0x48>)
    1906:	9b01      	ldr	r3, [sp, #4]
    1908:	095b      	lsrs	r3, r3, #5
    190a:	2001      	movs	r0, #1
    190c:	fa00 f202 	lsl.w	r2, r0, r2
    1910:	3360      	adds	r3, #96	; 0x60
    1912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1916:	bf00      	nop
    1918:	b003      	add	sp, #12
    191a:	f85d fb04 	ldr.w	pc, [sp], #4
    191e:	bf00      	nop
    1920:	e000e100 	.word	0xe000e100

00001924 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1924:	b500      	push	{lr}
    1926:	b085      	sub	sp, #20
    1928:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_ENABLE_VTOR_CONFIG == STD_ON)
    S32_SCB->VTOR = pIntCtrlCtrlConfig->u32VectorTableAddress;
#endif

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    192a:	9b01      	ldr	r3, [sp, #4]
    192c:	2b00      	cmp	r3, #0
    192e:	bf14      	ite	ne
    1930:	2301      	movne	r3, #1
    1932:	2300      	moveq	r3, #0
    1934:	b2db      	uxtb	r3, r3
    1936:	4618      	mov	r0, r3
    1938:	f7ff f810 	bl	95c <DevAssert>
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
    193c:	9b01      	ldr	r3, [sp, #4]
    193e:	681b      	ldr	r3, [r3, #0]
    1940:	2b59      	cmp	r3, #89	; 0x59
    1942:	bf94      	ite	ls
    1944:	2301      	movls	r3, #1
    1946:	2300      	movhi	r3, #0
    1948:	b2db      	uxtb	r3, r3
    194a:	4618      	mov	r0, r3
    194c:	f7ff f806 	bl	95c <DevAssert>
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1950:	2300      	movs	r3, #0
    1952:	9303      	str	r3, [sp, #12]
    1954:	e05d      	b.n	1a12 <IntCtrl_Ip_Init+0xee>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1956:	9b01      	ldr	r3, [sp, #4]
    1958:	6859      	ldr	r1, [r3, #4]
    195a:	9a03      	ldr	r2, [sp, #12]
    195c:	4613      	mov	r3, r2
    195e:	005b      	lsls	r3, r3, #1
    1960:	4413      	add	r3, r2
    1962:	009b      	lsls	r3, r3, #2
    1964:	440b      	add	r3, r1
    1966:	681b      	ldr	r3, [r3, #0]
    1968:	4618      	mov	r0, r3
    196a:	f000 f899 	bl	1aa0 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    196e:	9b01      	ldr	r3, [sp, #4]
    1970:	6859      	ldr	r1, [r3, #4]
    1972:	9a03      	ldr	r2, [sp, #12]
    1974:	4613      	mov	r3, r2
    1976:	005b      	lsls	r3, r3, #1
    1978:	4413      	add	r3, r2
    197a:	009b      	lsls	r3, r3, #2
    197c:	440b      	add	r3, r1
    197e:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1980:	9b01      	ldr	r3, [sp, #4]
    1982:	6859      	ldr	r1, [r3, #4]
    1984:	9a03      	ldr	r2, [sp, #12]
    1986:	4613      	mov	r3, r2
    1988:	005b      	lsls	r3, r3, #1
    198a:	4413      	add	r3, r2
    198c:	009b      	lsls	r3, r3, #2
    198e:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1990:	795b      	ldrb	r3, [r3, #5]
    1992:	4619      	mov	r1, r3
    1994:	f000 f869 	bl	1a6a <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1998:	9b01      	ldr	r3, [sp, #4]
    199a:	6859      	ldr	r1, [r3, #4]
    199c:	9a03      	ldr	r2, [sp, #12]
    199e:	4613      	mov	r3, r2
    19a0:	005b      	lsls	r3, r3, #1
    19a2:	4413      	add	r3, r2
    19a4:	009b      	lsls	r3, r3, #2
    19a6:	440b      	add	r3, r1
    19a8:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    19aa:	9b01      	ldr	r3, [sp, #4]
    19ac:	6859      	ldr	r1, [r3, #4]
    19ae:	9a03      	ldr	r2, [sp, #12]
    19b0:	4613      	mov	r3, r2
    19b2:	005b      	lsls	r3, r3, #1
    19b4:	4413      	add	r3, r2
    19b6:	009b      	lsls	r3, r3, #2
    19b8:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19ba:	689b      	ldr	r3, [r3, #8]
    19bc:	2200      	movs	r2, #0
    19be:	4619      	mov	r1, r3
    19c0:	f000 f831 	bl	1a26 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    19c4:	9b01      	ldr	r3, [sp, #4]
    19c6:	6859      	ldr	r1, [r3, #4]
    19c8:	9a03      	ldr	r2, [sp, #12]
    19ca:	4613      	mov	r3, r2
    19cc:	005b      	lsls	r3, r3, #1
    19ce:	4413      	add	r3, r2
    19d0:	009b      	lsls	r3, r3, #2
    19d2:	440b      	add	r3, r1
    19d4:	791b      	ldrb	r3, [r3, #4]
    19d6:	2b00      	cmp	r3, #0
    19d8:	d00c      	beq.n	19f4 <IntCtrl_Ip_Init+0xd0>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    19da:	9b01      	ldr	r3, [sp, #4]
    19dc:	6859      	ldr	r1, [r3, #4]
    19de:	9a03      	ldr	r2, [sp, #12]
    19e0:	4613      	mov	r3, r2
    19e2:	005b      	lsls	r3, r3, #1
    19e4:	4413      	add	r3, r2
    19e6:	009b      	lsls	r3, r3, #2
    19e8:	440b      	add	r3, r1
    19ea:	681b      	ldr	r3, [r3, #0]
    19ec:	4618      	mov	r0, r3
    19ee:	f000 f828 	bl	1a42 <IntCtrl_Ip_EnableIrq>
    19f2:	e00b      	b.n	1a0c <IntCtrl_Ip_Init+0xe8>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    19f4:	9b01      	ldr	r3, [sp, #4]
    19f6:	6859      	ldr	r1, [r3, #4]
    19f8:	9a03      	ldr	r2, [sp, #12]
    19fa:	4613      	mov	r3, r2
    19fc:	005b      	lsls	r3, r3, #1
    19fe:	4413      	add	r3, r2
    1a00:	009b      	lsls	r3, r3, #2
    1a02:	440b      	add	r3, r1
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	4618      	mov	r0, r3
    1a08:	f000 f825 	bl	1a56 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a0c:	9b03      	ldr	r3, [sp, #12]
    1a0e:	3301      	adds	r3, #1
    1a10:	9303      	str	r3, [sp, #12]
    1a12:	9b01      	ldr	r3, [sp, #4]
    1a14:	681b      	ldr	r3, [r3, #0]
    1a16:	9a03      	ldr	r2, [sp, #12]
    1a18:	429a      	cmp	r2, r3
    1a1a:	d39c      	bcc.n	1956 <IntCtrl_Ip_Init+0x32>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1a1c:	2300      	movs	r3, #0
}
    1a1e:	4618      	mov	r0, r3
    1a20:	b005      	add	sp, #20
    1a22:	f85d fb04 	ldr.w	pc, [sp], #4

00001a26 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1a26:	b500      	push	{lr}
    1a28:	b085      	sub	sp, #20
    1a2a:	9003      	str	r0, [sp, #12]
    1a2c:	9102      	str	r1, [sp, #8]
    1a2e:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1a30:	9a01      	ldr	r2, [sp, #4]
    1a32:	9902      	ldr	r1, [sp, #8]
    1a34:	9803      	ldr	r0, [sp, #12]
    1a36:	f7ff fe5d 	bl	16f4 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1a3a:	bf00      	nop
    1a3c:	b005      	add	sp, #20
    1a3e:	f85d fb04 	ldr.w	pc, [sp], #4

00001a42 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1a42:	b500      	push	{lr}
    1a44:	b083      	sub	sp, #12
    1a46:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1a48:	9801      	ldr	r0, [sp, #4]
    1a4a:	f7ff fe99 	bl	1780 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1a4e:	bf00      	nop
    1a50:	b003      	add	sp, #12
    1a52:	f85d fb04 	ldr.w	pc, [sp], #4

00001a56 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1a56:	b500      	push	{lr}
    1a58:	b083      	sub	sp, #12
    1a5a:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1a5c:	9801      	ldr	r0, [sp, #4]
    1a5e:	f7ff feb3 	bl	17c8 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1a62:	bf00      	nop
    1a64:	b003      	add	sp, #12
    1a66:	f85d fb04 	ldr.w	pc, [sp], #4

00001a6a <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1a6a:	b500      	push	{lr}
    1a6c:	b083      	sub	sp, #12
    1a6e:	9001      	str	r0, [sp, #4]
    1a70:	460b      	mov	r3, r1
    1a72:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1a76:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1a7a:	4619      	mov	r1, r3
    1a7c:	9801      	ldr	r0, [sp, #4]
    1a7e:	f7ff fec9 	bl	1814 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1a82:	bf00      	nop
    1a84:	b003      	add	sp, #12
    1a86:	f85d fb04 	ldr.w	pc, [sp], #4

00001a8a <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1a8a:	b500      	push	{lr}
    1a8c:	b083      	sub	sp, #12
    1a8e:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1a90:	9801      	ldr	r0, [sp, #4]
    1a92:	f7ff fef5 	bl	1880 <IntCtrl_Ip_GetPriorityPrivileged>
    1a96:	4603      	mov	r3, r0
}
    1a98:	4618      	mov	r0, r3
    1a9a:	b003      	add	sp, #12
    1a9c:	f85d fb04 	ldr.w	pc, [sp], #4

00001aa0 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1aa0:	b500      	push	{lr}
    1aa2:	b083      	sub	sp, #12
    1aa4:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1aa6:	9801      	ldr	r0, [sp, #4]
    1aa8:	f7ff ff16 	bl	18d8 <IntCtrl_Ip_ClearPendingPrivileged>
}
    1aac:	bf00      	nop
    1aae:	b003      	add	sp, #12
    1ab0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ab4 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1ab4:	b500      	push	{lr}
    1ab6:	b083      	sub	sp, #12
    1ab8:	9001      	str	r0, [sp, #4]
    1aba:	460b      	mov	r3, r1
    1abc:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1ac0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1ac4:	2b00      	cmp	r3, #0
    1ac6:	d003      	beq.n	1ad0 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1ac8:	9801      	ldr	r0, [sp, #4]
    1aca:	f7ff ffba 	bl	1a42 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1ace:	e002      	b.n	1ad6 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1ad0:	9801      	ldr	r0, [sp, #4]
    1ad2:	f7ff ffc0 	bl	1a56 <IntCtrl_Ip_DisableIrq>
}
    1ad6:	bf00      	nop
    1ad8:	b003      	add	sp, #12
    1ada:	f85d fb04 	ldr.w	pc, [sp], #4

00001ade <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1ade:	b500      	push	{lr}
    1ae0:	b083      	sub	sp, #12
    1ae2:	9001      	str	r0, [sp, #4]
    1ae4:	460b      	mov	r3, r1
    1ae6:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1aea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1aee:	4619      	mov	r1, r3
    1af0:	9801      	ldr	r0, [sp, #4]
    1af2:	f7ff ffba 	bl	1a6a <IntCtrl_Ip_SetPriority>
}
    1af6:	bf00      	nop
    1af8:	b003      	add	sp, #12
    1afa:	f85d fb04 	ldr.w	pc, [sp], #4

00001afe <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1afe:	b500      	push	{lr}
    1b00:	b083      	sub	sp, #12
    1b02:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1b04:	9801      	ldr	r0, [sp, #4]
    1b06:	f7ff ffc0 	bl	1a8a <IntCtrl_Ip_GetPriority>
    1b0a:	4603      	mov	r3, r0
}
    1b0c:	4618      	mov	r0, r3
    1b0e:	b003      	add	sp, #12
    1b10:	f85d fb04 	ldr.w	pc, [sp], #4

00001b14 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1b14:	b500      	push	{lr}
    1b16:	b085      	sub	sp, #20
    1b18:	9003      	str	r0, [sp, #12]
    1b1a:	9102      	str	r1, [sp, #8]
    1b1c:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1b1e:	9a01      	ldr	r2, [sp, #4]
    1b20:	9902      	ldr	r1, [sp, #8]
    1b22:	9803      	ldr	r0, [sp, #12]
    1b24:	f7ff ff7f 	bl	1a26 <IntCtrl_Ip_InstallHandler>
}
    1b28:	bf00      	nop
    1b2a:	b005      	add	sp, #20
    1b2c:	f85d fb04 	ldr.w	pc, [sp], #4

00001b30 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1b30:	b500      	push	{lr}
    1b32:	b085      	sub	sp, #20
    1b34:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1b36:	2300      	movs	r3, #0
    1b38:	f88d 300f 	strb.w	r3, [sp, #15]
    (void)pConfig;
#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != pConfig)
    1b3c:	9b01      	ldr	r3, [sp, #4]
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d006      	beq.n	1b50 <Platform_Init+0x20>
    {
        (void)Det_ReportError((uint16)CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INIT_ID, PLATFORM_E_PARAM_POINTER);
    1b42:	2301      	movs	r3, #1
    1b44:	2220      	movs	r2, #32
    1b46:	2100      	movs	r1, #0
    1b48:	20ff      	movs	r0, #255	; 0xff
    1b4a:	f015 f88b 	bl	16c64 <Det_ReportError>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1b4e:	e008      	b.n	1b62 <Platform_Init+0x32>
            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1b50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b54:	4a05      	ldr	r2, [pc, #20]	; (1b6c <Platform_Init+0x3c>)
    1b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	4618      	mov	r0, r3
    1b5e:	f000 f917 	bl	1d90 <Platform_Ipw_Init>
}
    1b62:	bf00      	nop
    1b64:	b005      	add	sp, #20
    1b66:	f85d fb04 	ldr.w	pc, [sp], #4
    1b6a:	bf00      	nop
    1b6c:	00019180 	.word	0x00019180

00001b70 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1b70:	b500      	push	{lr}
    1b72:	b085      	sub	sp, #20
    1b74:	9001      	str	r0, [sp, #4]
    1b76:	460b      	mov	r3, r1
    1b78:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1b7c:	2300      	movs	r3, #0
    1b7e:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1b82:	9b01      	ldr	r3, [sp, #4]
    1b84:	2b7a      	cmp	r3, #122	; 0x7a
    1b86:	dc02      	bgt.n	1b8e <Platform_SetIrq+0x1e>
    1b88:	9b01      	ldr	r3, [sp, #4]
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	da09      	bge.n	1ba2 <Platform_SetIrq+0x32>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1b8e:	2302      	movs	r3, #2
    1b90:	2221      	movs	r2, #33	; 0x21
    1b92:	2100      	movs	r1, #0
    1b94:	20ff      	movs	r0, #255	; 0xff
    1b96:	f015 f865 	bl	16c64 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1b9a:	2301      	movs	r3, #1
    1b9c:	f88d 300f 	strb.w	r3, [sp, #15]
    1ba0:	e005      	b.n	1bae <Platform_SetIrq+0x3e>
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1ba2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1ba6:	4619      	mov	r1, r3
    1ba8:	9801      	ldr	r0, [sp, #4]
    1baa:	f7ff ff83 	bl	1ab4 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1bae:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1bb2:	4618      	mov	r0, r3
    1bb4:	b005      	add	sp, #20
    1bb6:	f85d fb04 	ldr.w	pc, [sp], #4

00001bba <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1bba:	b500      	push	{lr}
    1bbc:	b085      	sub	sp, #20
    1bbe:	9001      	str	r0, [sp, #4]
    1bc0:	460b      	mov	r3, r1
    1bc2:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1bc6:	2300      	movs	r3, #0
    1bc8:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1bcc:	9b01      	ldr	r3, [sp, #4]
    1bce:	2b7a      	cmp	r3, #122	; 0x7a
    1bd0:	dc06      	bgt.n	1be0 <Platform_SetIrqPriority+0x26>
    1bd2:	9b01      	ldr	r3, [sp, #4]
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	db03      	blt.n	1be0 <Platform_SetIrqPriority+0x26>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
    1bd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1bdc:	2b0f      	cmp	r3, #15
    1bde:	d909      	bls.n	1bf4 <Platform_SetIrqPriority+0x3a>
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
        (u8Priority >= (uint8)(1U << INT_CTRL_IP_GIC_PRIO_BITS)))
#endif
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1be0:	2302      	movs	r3, #2
    1be2:	2222      	movs	r2, #34	; 0x22
    1be4:	2100      	movs	r1, #0
    1be6:	20ff      	movs	r0, #255	; 0xff
    1be8:	f015 f83c 	bl	16c64 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1bec:	2301      	movs	r3, #1
    1bee:	f88d 300f 	strb.w	r3, [sp, #15]
    1bf2:	e005      	b.n	1c00 <Platform_SetIrqPriority+0x46>
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1bf4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1bf8:	4619      	mov	r1, r3
    1bfa:	9801      	ldr	r0, [sp, #4]
    1bfc:	f7ff ff6f 	bl	1ade <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1c00:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1c04:	4618      	mov	r0, r3
    1c06:	b005      	add	sp, #20
    1c08:	f85d fb04 	ldr.w	pc, [sp], #4

00001c0c <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1c0c:	b500      	push	{lr}
    1c0e:	b085      	sub	sp, #20
    1c10:	9001      	str	r0, [sp, #4]
    1c12:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c14:	2300      	movs	r3, #0
    1c16:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1c1a:	9b01      	ldr	r3, [sp, #4]
    1c1c:	2b7a      	cmp	r3, #122	; 0x7a
    1c1e:	dc02      	bgt.n	1c26 <Platform_GetIrqPriority+0x1a>
    1c20:	9b01      	ldr	r3, [sp, #4]
    1c22:	2b00      	cmp	r3, #0
    1c24:	da09      	bge.n	1c3a <Platform_GetIrqPriority+0x2e>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1c26:	2302      	movs	r3, #2
    1c28:	2223      	movs	r2, #35	; 0x23
    1c2a:	2100      	movs	r1, #0
    1c2c:	20ff      	movs	r0, #255	; 0xff
    1c2e:	f015 f819 	bl	16c64 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c32:	2301      	movs	r3, #1
    1c34:	f88d 300f 	strb.w	r3, [sp, #15]
    1c38:	e013      	b.n	1c62 <Platform_GetIrqPriority+0x56>
    }
    else if (u8Priority == NULL_PTR)
    1c3a:	9b00      	ldr	r3, [sp, #0]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d109      	bne.n	1c54 <Platform_GetIrqPriority+0x48>
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_POINTER);
    1c40:	2301      	movs	r3, #1
    1c42:	2223      	movs	r2, #35	; 0x23
    1c44:	2100      	movs	r1, #0
    1c46:	20ff      	movs	r0, #255	; 0xff
    1c48:	f015 f80c 	bl	16c64 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c4c:	2301      	movs	r3, #1
    1c4e:	f88d 300f 	strb.w	r3, [sp, #15]
    1c52:	e006      	b.n	1c62 <Platform_GetIrqPriority+0x56>
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1c54:	9801      	ldr	r0, [sp, #4]
    1c56:	f7ff ff52 	bl	1afe <Platform_Ipw_GetIrqPriority>
    1c5a:	4603      	mov	r3, r0
    1c5c:	461a      	mov	r2, r3
    1c5e:	9b00      	ldr	r3, [sp, #0]
    1c60:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1c62:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1c66:	4618      	mov	r0, r3
    1c68:	b005      	add	sp, #20
    1c6a:	f85d fb04 	ldr.w	pc, [sp], #4

00001c6e <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1c6e:	b500      	push	{lr}
    1c70:	b087      	sub	sp, #28
    1c72:	9003      	str	r0, [sp, #12]
    1c74:	9102      	str	r1, [sp, #8]
    1c76:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c78:	2300      	movs	r3, #0
    1c7a:	f88d 3017 	strb.w	r3, [sp, #23]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1c7e:	9b03      	ldr	r3, [sp, #12]
    1c80:	2b7a      	cmp	r3, #122	; 0x7a
    1c82:	dc02      	bgt.n	1c8a <Platform_InstallIrqHandler+0x1c>
    1c84:	9b03      	ldr	r3, [sp, #12]
    1c86:	2b00      	cmp	r3, #0
    1c88:	da09      	bge.n	1c9e <Platform_InstallIrqHandler+0x30>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INSTALL_HANDLER_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1c8a:	2302      	movs	r3, #2
    1c8c:	2224      	movs	r2, #36	; 0x24
    1c8e:	2100      	movs	r1, #0
    1c90:	20ff      	movs	r0, #255	; 0xff
    1c92:	f014 ffe7 	bl	16c64 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c96:	2301      	movs	r3, #1
    1c98:	f88d 3017 	strb.w	r3, [sp, #23]
    1c9c:	e004      	b.n	1ca8 <Platform_InstallIrqHandler+0x3a>
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1c9e:	9a01      	ldr	r2, [sp, #4]
    1ca0:	9902      	ldr	r1, [sp, #8]
    1ca2:	9803      	ldr	r0, [sp, #12]
    1ca4:	f7ff ff36 	bl	1b14 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1ca8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1cac:	4618      	mov	r0, r3
    1cae:	b007      	add	sp, #28
    1cb0:	f85d fb04 	ldr.w	pc, [sp], #4

00001cb4 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1cb4:	b500      	push	{lr}
    1cb6:	b085      	sub	sp, #20
    1cb8:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1cba:	2300      	movs	r3, #0
    1cbc:	9303      	str	r3, [sp, #12]
    1cbe:	e05d      	b.n	1d7c <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1cc0:	9b01      	ldr	r3, [sp, #4]
    1cc2:	6859      	ldr	r1, [r3, #4]
    1cc4:	9a03      	ldr	r2, [sp, #12]
    1cc6:	4613      	mov	r3, r2
    1cc8:	005b      	lsls	r3, r3, #1
    1cca:	4413      	add	r3, r2
    1ccc:	009b      	lsls	r3, r3, #2
    1cce:	440b      	add	r3, r1
    1cd0:	681b      	ldr	r3, [r3, #0]
    1cd2:	4618      	mov	r0, r3
    1cd4:	f7ff fee4 	bl	1aa0 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1cd8:	9b01      	ldr	r3, [sp, #4]
    1cda:	6859      	ldr	r1, [r3, #4]
    1cdc:	9a03      	ldr	r2, [sp, #12]
    1cde:	4613      	mov	r3, r2
    1ce0:	005b      	lsls	r3, r3, #1
    1ce2:	4413      	add	r3, r2
    1ce4:	009b      	lsls	r3, r3, #2
    1ce6:	440b      	add	r3, r1
    1ce8:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1cea:	9b01      	ldr	r3, [sp, #4]
    1cec:	6859      	ldr	r1, [r3, #4]
    1cee:	9a03      	ldr	r2, [sp, #12]
    1cf0:	4613      	mov	r3, r2
    1cf2:	005b      	lsls	r3, r3, #1
    1cf4:	4413      	add	r3, r2
    1cf6:	009b      	lsls	r3, r3, #2
    1cf8:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1cfa:	795b      	ldrb	r3, [r3, #5]
    1cfc:	4619      	mov	r1, r3
    1cfe:	f7ff feb4 	bl	1a6a <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1d02:	9b01      	ldr	r3, [sp, #4]
    1d04:	6859      	ldr	r1, [r3, #4]
    1d06:	9a03      	ldr	r2, [sp, #12]
    1d08:	4613      	mov	r3, r2
    1d0a:	005b      	lsls	r3, r3, #1
    1d0c:	4413      	add	r3, r2
    1d0e:	009b      	lsls	r3, r3, #2
    1d10:	440b      	add	r3, r1
    1d12:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1d14:	9b01      	ldr	r3, [sp, #4]
    1d16:	6859      	ldr	r1, [r3, #4]
    1d18:	9a03      	ldr	r2, [sp, #12]
    1d1a:	4613      	mov	r3, r2
    1d1c:	005b      	lsls	r3, r3, #1
    1d1e:	4413      	add	r3, r2
    1d20:	009b      	lsls	r3, r3, #2
    1d22:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1d24:	689b      	ldr	r3, [r3, #8]
    1d26:	2200      	movs	r2, #0
    1d28:	4619      	mov	r1, r3
    1d2a:	f7ff fe7c 	bl	1a26 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1d2e:	9b01      	ldr	r3, [sp, #4]
    1d30:	6859      	ldr	r1, [r3, #4]
    1d32:	9a03      	ldr	r2, [sp, #12]
    1d34:	4613      	mov	r3, r2
    1d36:	005b      	lsls	r3, r3, #1
    1d38:	4413      	add	r3, r2
    1d3a:	009b      	lsls	r3, r3, #2
    1d3c:	440b      	add	r3, r1
    1d3e:	791b      	ldrb	r3, [r3, #4]
    1d40:	2b00      	cmp	r3, #0
    1d42:	d00c      	beq.n	1d5e <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1d44:	9b01      	ldr	r3, [sp, #4]
    1d46:	6859      	ldr	r1, [r3, #4]
    1d48:	9a03      	ldr	r2, [sp, #12]
    1d4a:	4613      	mov	r3, r2
    1d4c:	005b      	lsls	r3, r3, #1
    1d4e:	4413      	add	r3, r2
    1d50:	009b      	lsls	r3, r3, #2
    1d52:	440b      	add	r3, r1
    1d54:	681b      	ldr	r3, [r3, #0]
    1d56:	4618      	mov	r0, r3
    1d58:	f7ff fe73 	bl	1a42 <IntCtrl_Ip_EnableIrq>
    1d5c:	e00b      	b.n	1d76 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1d5e:	9b01      	ldr	r3, [sp, #4]
    1d60:	6859      	ldr	r1, [r3, #4]
    1d62:	9a03      	ldr	r2, [sp, #12]
    1d64:	4613      	mov	r3, r2
    1d66:	005b      	lsls	r3, r3, #1
    1d68:	4413      	add	r3, r2
    1d6a:	009b      	lsls	r3, r3, #2
    1d6c:	440b      	add	r3, r1
    1d6e:	681b      	ldr	r3, [r3, #0]
    1d70:	4618      	mov	r0, r3
    1d72:	f7ff fe70 	bl	1a56 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1d76:	9b03      	ldr	r3, [sp, #12]
    1d78:	3301      	adds	r3, #1
    1d7a:	9303      	str	r3, [sp, #12]
    1d7c:	9b01      	ldr	r3, [sp, #4]
    1d7e:	681b      	ldr	r3, [r3, #0]
    1d80:	9a03      	ldr	r2, [sp, #12]
    1d82:	429a      	cmp	r2, r3
    1d84:	d39c      	bcc.n	1cc0 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1d86:	2300      	movs	r3, #0
}
    1d88:	4618      	mov	r0, r3
    1d8a:	b005      	add	sp, #20
    1d8c:	f85d fb04 	ldr.w	pc, [sp], #4

00001d90 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1d90:	b500      	push	{lr}
    1d92:	b085      	sub	sp, #20
    1d94:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1d96:	2300      	movs	r3, #0
    1d98:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1d9c:	9b01      	ldr	r3, [sp, #4]
    1d9e:	681b      	ldr	r3, [r3, #0]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d007      	beq.n	1db4 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1da4:	9b01      	ldr	r3, [sp, #4]
    1da6:	681b      	ldr	r3, [r3, #0]
    1da8:	4618      	mov	r0, r3
    1daa:	f7ff ff83 	bl	1cb4 <Platform_Ipw_InitIntCtrl>
    1dae:	4603      	mov	r3, r0
    1db0:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1db4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1db8:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1dba:	bf00      	nop
    1dbc:	b005      	add	sp, #20
    1dbe:	f85d fb04 	ldr.w	pc, [sp], #4

00001dc2 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1dc2:	2300      	movs	r3, #0
}
    1dc4:	4618      	mov	r0, r3
    1dc6:	4770      	bx	lr

00001dc8 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1dc8:	b082      	sub	sp, #8
    1dca:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1dcc:	2301      	movs	r3, #1
}
    1dce:	4618      	mov	r0, r3
    1dd0:	b002      	add	sp, #8
    1dd2:	4770      	bx	lr

00001dd4 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1dd4:	b082      	sub	sp, #8
    1dd6:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1dd8:	bf00      	nop
    1dda:	b002      	add	sp, #8
    1ddc:	4770      	bx	lr

00001dde <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1dde:	b082      	sub	sp, #8
    1de0:	9001      	str	r0, [sp, #4]
    return Micros;
    1de2:	9b01      	ldr	r3, [sp, #4]
}
    1de4:	4618      	mov	r0, r3
    1de6:	b002      	add	sp, #8
    1de8:	4770      	bx	lr

00001dea <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1dea:	b500      	push	{lr}
    1dec:	b083      	sub	sp, #12
    1dee:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1df0:	f000 f86c 	bl	1ecc <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1df4:	bf00      	nop
    1df6:	b003      	add	sp, #12
    1df8:	f85d fb04 	ldr.w	pc, [sp], #4

00001dfc <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1dfc:	b500      	push	{lr}
    1dfe:	b085      	sub	sp, #20
    1e00:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1e02:	2300      	movs	r3, #0
    1e04:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1e06:	9b01      	ldr	r3, [sp, #4]
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d003      	beq.n	1e14 <OsIf_GetCounter+0x18>
    1e0c:	9b01      	ldr	r3, [sp, #4]
    1e0e:	2b01      	cmp	r3, #1
    1e10:	d004      	beq.n	1e1c <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e12:	e007      	b.n	1e24 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1e14:	f7ff ffd5 	bl	1dc2 <OsIf_Timer_Dummy_GetCounter>
    1e18:	9003      	str	r0, [sp, #12]
            break;
    1e1a:	e003      	b.n	1e24 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1e1c:	f000 f872 	bl	1f04 <OsIf_Timer_System_GetCounter>
    1e20:	9003      	str	r0, [sp, #12]
            break;
    1e22:	bf00      	nop
    }

    return Value;
    1e24:	9b03      	ldr	r3, [sp, #12]
}
    1e26:	4618      	mov	r0, r3
    1e28:	b005      	add	sp, #20
    1e2a:	f85d fb04 	ldr.w	pc, [sp], #4

00001e2e <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1e2e:	b500      	push	{lr}
    1e30:	b085      	sub	sp, #20
    1e32:	9001      	str	r0, [sp, #4]
    1e34:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1e36:	2300      	movs	r3, #0
    1e38:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1e3a:	9b00      	ldr	r3, [sp, #0]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d003      	beq.n	1e48 <OsIf_GetElapsed+0x1a>
    1e40:	9b00      	ldr	r3, [sp, #0]
    1e42:	2b01      	cmp	r3, #1
    1e44:	d005      	beq.n	1e52 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e46:	e009      	b.n	1e5c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1e48:	9801      	ldr	r0, [sp, #4]
    1e4a:	f7ff ffbd 	bl	1dc8 <OsIf_Timer_Dummy_GetElapsed>
    1e4e:	9003      	str	r0, [sp, #12]
            break;
    1e50:	e004      	b.n	1e5c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1e52:	9801      	ldr	r0, [sp, #4]
    1e54:	f000 f864 	bl	1f20 <OsIf_Timer_System_GetElapsed>
    1e58:	9003      	str	r0, [sp, #12]
            break;
    1e5a:	bf00      	nop
    }

    return Value;
    1e5c:	9b03      	ldr	r3, [sp, #12]
}
    1e5e:	4618      	mov	r0, r3
    1e60:	b005      	add	sp, #20
    1e62:	f85d fb04 	ldr.w	pc, [sp], #4

00001e66 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1e66:	b500      	push	{lr}
    1e68:	b083      	sub	sp, #12
    1e6a:	9001      	str	r0, [sp, #4]
    1e6c:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1e6e:	9b00      	ldr	r3, [sp, #0]
    1e70:	2b00      	cmp	r3, #0
    1e72:	d003      	beq.n	1e7c <OsIf_SetTimerFrequency+0x16>
    1e74:	9b00      	ldr	r3, [sp, #0]
    1e76:	2b01      	cmp	r3, #1
    1e78:	d004      	beq.n	1e84 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e7a:	e007      	b.n	1e8c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1e7c:	9801      	ldr	r0, [sp, #4]
    1e7e:	f7ff ffa9 	bl	1dd4 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1e82:	e003      	b.n	1e8c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1e84:	9801      	ldr	r0, [sp, #4]
    1e86:	f000 f85b 	bl	1f40 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1e8a:	bf00      	nop
    }
}
    1e8c:	bf00      	nop
    1e8e:	b003      	add	sp, #12
    1e90:	f85d fb04 	ldr.w	pc, [sp], #4

00001e94 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1e94:	b500      	push	{lr}
    1e96:	b085      	sub	sp, #20
    1e98:	9001      	str	r0, [sp, #4]
    1e9a:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1e9c:	2300      	movs	r3, #0
    1e9e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1ea0:	9b00      	ldr	r3, [sp, #0]
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d003      	beq.n	1eae <OsIf_MicrosToTicks+0x1a>
    1ea6:	9b00      	ldr	r3, [sp, #0]
    1ea8:	2b01      	cmp	r3, #1
    1eaa:	d005      	beq.n	1eb8 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1eac:	e009      	b.n	1ec2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1eae:	9801      	ldr	r0, [sp, #4]
    1eb0:	f7ff ff95 	bl	1dde <OsIf_Timer_Dummy_MicrosToTicks>
    1eb4:	9003      	str	r0, [sp, #12]
            break;
    1eb6:	e004      	b.n	1ec2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1eb8:	9801      	ldr	r0, [sp, #4]
    1eba:	f000 f84f 	bl	1f5c <OsIf_Timer_System_MicrosToTicks>
    1ebe:	9003      	str	r0, [sp, #12]
            break;
    1ec0:	bf00      	nop
    }

    return Value;
    1ec2:	9b03      	ldr	r3, [sp, #12]
}
    1ec4:	4618      	mov	r0, r3
    1ec6:	b005      	add	sp, #20
    1ec8:	f85d fb04 	ldr.w	pc, [sp], #4

00001ecc <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1ecc:	b500      	push	{lr}
    1ece:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1ed0:	2300      	movs	r3, #0
    1ed2:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1ed4:	4a09      	ldr	r2, [pc, #36]	; (1efc <OsIf_Timer_System_Init+0x30>)
    1ed6:	9b01      	ldr	r3, [sp, #4]
    1ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1edc:	685a      	ldr	r2, [r3, #4]
    1ede:	4908      	ldr	r1, [pc, #32]	; (1f00 <OsIf_Timer_System_Init+0x34>)
    1ee0:	9b01      	ldr	r3, [sp, #4]
    1ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1ee6:	4a06      	ldr	r2, [pc, #24]	; (1f00 <OsIf_Timer_System_Init+0x34>)
    1ee8:	9b01      	ldr	r3, [sp, #4]
    1eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1eee:	4618      	mov	r0, r3
    1ef0:	f000 f868 	bl	1fc4 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1ef4:	bf00      	nop
    1ef6:	b003      	add	sp, #12
    1ef8:	f85d fb04 	ldr.w	pc, [sp], #4
    1efc:	00019178 	.word	0x00019178
    1f00:	1fff8b34 	.word	0x1fff8b34

00001f04 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1f04:	b500      	push	{lr}
    1f06:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1f08:	2300      	movs	r3, #0
    1f0a:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1f0c:	2300      	movs	r3, #0
    1f0e:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1f10:	f000 f86c 	bl	1fec <OsIf_Timer_System_Internal_GetCounter>
    1f14:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1f16:	9b01      	ldr	r3, [sp, #4]
}
    1f18:	4618      	mov	r0, r3
    1f1a:	b003      	add	sp, #12
    1f1c:	f85d fb04 	ldr.w	pc, [sp], #4

00001f20 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1f20:	b500      	push	{lr}
    1f22:	b085      	sub	sp, #20
    1f24:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1f26:	2300      	movs	r3, #0
    1f28:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1f2a:	2300      	movs	r3, #0
    1f2c:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1f2e:	9801      	ldr	r0, [sp, #4]
    1f30:	f000 f864 	bl	1ffc <OsIf_Timer_System_Internal_GetElapsed>
    1f34:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1f36:	9b03      	ldr	r3, [sp, #12]
}
    1f38:	4618      	mov	r0, r3
    1f3a:	b005      	add	sp, #20
    1f3c:	f85d fb04 	ldr.w	pc, [sp], #4

00001f40 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1f40:	b084      	sub	sp, #16
    1f42:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1f44:	2300      	movs	r3, #0
    1f46:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1f48:	4903      	ldr	r1, [pc, #12]	; (1f58 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1f4a:	9b03      	ldr	r3, [sp, #12]
    1f4c:	9a01      	ldr	r2, [sp, #4]
    1f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1f52:	bf00      	nop
    1f54:	b004      	add	sp, #16
    1f56:	4770      	bx	lr
    1f58:	1fff8b34 	.word	0x1fff8b34

00001f5c <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f5e:	b087      	sub	sp, #28
    1f60:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1f62:	2100      	movs	r1, #0
    1f64:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1f66:	2100      	movs	r1, #0
    1f68:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1f6a:	9901      	ldr	r1, [sp, #4]
    1f6c:	2000      	movs	r0, #0
    1f6e:	460e      	mov	r6, r1
    1f70:	4607      	mov	r7, r0
    1f72:	4812      	ldr	r0, [pc, #72]	; (1fbc <OsIf_Timer_System_MicrosToTicks+0x60>)
    1f74:	9904      	ldr	r1, [sp, #16]
    1f76:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1f7a:	2000      	movs	r0, #0
    1f7c:	460c      	mov	r4, r1
    1f7e:	4605      	mov	r5, r0
    1f80:	fb04 f007 	mul.w	r0, r4, r7
    1f84:	fb06 f105 	mul.w	r1, r6, r5
    1f88:	4401      	add	r1, r0
    1f8a:	fba6 2304 	umull	r2, r3, r6, r4
    1f8e:	4419      	add	r1, r3
    1f90:	460b      	mov	r3, r1
    1f92:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1f96:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1f9e:	4a08      	ldr	r2, [pc, #32]	; (1fc0 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1fa0:	f04f 0300 	mov.w	r3, #0
    1fa4:	f7fe fafe 	bl	5a4 <__aeabi_uldivmod>
    1fa8:	4602      	mov	r2, r0
    1faa:	460b      	mov	r3, r1
    1fac:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1fb0:	9b02      	ldr	r3, [sp, #8]
    1fb2:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1fb4:	9b05      	ldr	r3, [sp, #20]
}
    1fb6:	4618      	mov	r0, r3
    1fb8:	b007      	add	sp, #28
    1fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fbc:	1fff8b34 	.word	0x1fff8b34
    1fc0:	000f4240 	.word	0x000f4240

00001fc4 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1fc4:	b082      	sub	sp, #8
    1fc6:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1fc8:	4b07      	ldr	r3, [pc, #28]	; (1fe8 <OsIf_Timer_System_Internal_Init+0x24>)
    1fca:	2200      	movs	r2, #0
    1fcc:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1fce:	4b06      	ldr	r3, [pc, #24]	; (1fe8 <OsIf_Timer_System_Internal_Init+0x24>)
    1fd0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1fd4:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1fd6:	4b04      	ldr	r3, [pc, #16]	; (1fe8 <OsIf_Timer_System_Internal_Init+0x24>)
    1fd8:	2200      	movs	r2, #0
    1fda:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1fdc:	4b02      	ldr	r3, [pc, #8]	; (1fe8 <OsIf_Timer_System_Internal_Init+0x24>)
    1fde:	2205      	movs	r2, #5
    1fe0:	601a      	str	r2, [r3, #0]
}
    1fe2:	bf00      	nop
    1fe4:	b002      	add	sp, #8
    1fe6:	4770      	bx	lr
    1fe8:	e000e010 	.word	0xe000e010

00001fec <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1fec:	4b02      	ldr	r3, [pc, #8]	; (1ff8 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1fee:	689b      	ldr	r3, [r3, #8]
    1ff0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1ff4:	4618      	mov	r0, r3
    1ff6:	4770      	bx	lr
    1ff8:	e000e010 	.word	0xe000e010

00001ffc <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1ffc:	b084      	sub	sp, #16
    1ffe:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    2000:	4b10      	ldr	r3, [pc, #64]	; (2044 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    2002:	689b      	ldr	r3, [r3, #8]
    2004:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2008:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    200a:	2300      	movs	r3, #0
    200c:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    200e:	9b01      	ldr	r3, [sp, #4]
    2010:	681b      	ldr	r3, [r3, #0]
    2012:	9a02      	ldr	r2, [sp, #8]
    2014:	429a      	cmp	r2, r3
    2016:	d909      	bls.n	202c <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    2018:	9b01      	ldr	r3, [sp, #4]
    201a:	681a      	ldr	r2, [r3, #0]
    201c:	9b02      	ldr	r3, [sp, #8]
    201e:	1ad3      	subs	r3, r2, r3
    2020:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2024:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    2028:	9303      	str	r3, [sp, #12]
    202a:	e004      	b.n	2036 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    202c:	9b01      	ldr	r3, [sp, #4]
    202e:	681a      	ldr	r2, [r3, #0]
    2030:	9b02      	ldr	r3, [sp, #8]
    2032:	1ad3      	subs	r3, r2, r3
    2034:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    2036:	9b01      	ldr	r3, [sp, #4]
    2038:	9a02      	ldr	r2, [sp, #8]
    203a:	601a      	str	r2, [r3, #0]

    return dif;
    203c:	9b03      	ldr	r3, [sp, #12]
}
    203e:	4618      	mov	r0, r3
    2040:	b004      	add	sp, #16
    2042:	4770      	bx	lr
    2044:	e000e010 	.word	0xe000e010

00002048 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2048:	b082      	sub	sp, #8
    204a:	9001      	str	r0, [sp, #4]
    204c:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    204e:	bf00      	nop
    2050:	b002      	add	sp, #8
    2052:	4770      	bx	lr

00002054 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2054:	b500      	push	{lr}
    2056:	b085      	sub	sp, #20
    2058:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    205a:	4b24      	ldr	r3, [pc, #144]	; (20ec <Clock_Ip_UpdateDriverContext+0x98>)
    205c:	2201      	movs	r2, #1
    205e:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2060:	4b23      	ldr	r3, [pc, #140]	; (20f0 <Clock_Ip_UpdateDriverContext+0x9c>)
    2062:	681b      	ldr	r3, [r3, #0]
    2064:	2102      	movs	r1, #2
    2066:	4618      	mov	r0, r3
    2068:	f003 fc32 	bl	58d0 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    206c:	2300      	movs	r3, #0
    206e:	f88d 300f 	strb.w	r3, [sp, #15]
    2072:	e015      	b.n	20a0 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2074:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2078:	9a01      	ldr	r2, [sp, #4]
    207a:	334a      	adds	r3, #74	; 0x4a
    207c:	00db      	lsls	r3, r3, #3
    207e:	4413      	add	r3, r2
    2080:	6858      	ldr	r0, [r3, #4]
    2082:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2086:	9a01      	ldr	r2, [sp, #4]
    2088:	334a      	adds	r3, #74	; 0x4a
    208a:	00db      	lsls	r3, r3, #3
    208c:	4413      	add	r3, r2
    208e:	689b      	ldr	r3, [r3, #8]
    2090:	4619      	mov	r1, r3
    2092:	f001 fadc 	bl	364e <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2096:	f89d 300f 	ldrb.w	r3, [sp, #15]
    209a:	3301      	adds	r3, #1
    209c:	f88d 300f 	strb.w	r3, [sp, #15]
    20a0:	9b01      	ldr	r3, [sp, #4]
    20a2:	7bdb      	ldrb	r3, [r3, #15]
    20a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    20a8:	429a      	cmp	r2, r3
    20aa:	d3e3      	bcc.n	2074 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    20ac:	f000 f824 	bl	20f8 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    20b0:	2301      	movs	r3, #1
    20b2:	f88d 300f 	strb.w	r3, [sp, #15]
    20b6:	e00e      	b.n	20d6 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    20b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    20bc:	9b01      	ldr	r3, [sp, #4]
    20be:	327e      	adds	r2, #126	; 0x7e
    20c0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    20c4:	490b      	ldr	r1, [pc, #44]	; (20f4 <Clock_Ip_UpdateDriverContext+0xa0>)
    20c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    20ca:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    20cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    20d0:	3301      	adds	r3, #1
    20d2:	f88d 300f 	strb.w	r3, [sp, #15]
    20d6:	9b01      	ldr	r3, [sp, #4]
    20d8:	7cdb      	ldrb	r3, [r3, #19]
    20da:	f89d 200f 	ldrb.w	r2, [sp, #15]
    20de:	429a      	cmp	r2, r3
    20e0:	d3ea      	bcc.n	20b8 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    20e2:	bf00      	nop
    20e4:	bf00      	nop
    20e6:	b005      	add	sp, #20
    20e8:	f85d fb04 	ldr.w	pc, [sp], #4
    20ec:	1fff8b10 	.word	0x1fff8b10
    20f0:	1fff8b38 	.word	0x1fff8b38
    20f4:	1fff8b44 	.word	0x1fff8b44

000020f8 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    20f8:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    20fa:	4b23      	ldr	r3, [pc, #140]	; (2188 <Clock_Ip_CallEmptyCallbacks+0x90>)
    20fc:	781b      	ldrb	r3, [r3, #0]
    20fe:	f083 0301 	eor.w	r3, r3, #1
    2102:	b2db      	uxtb	r3, r3
    2104:	2b00      	cmp	r3, #0
    2106:	d03d      	beq.n	2184 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2108:	4b1f      	ldr	r3, [pc, #124]	; (2188 <Clock_Ip_CallEmptyCallbacks+0x90>)
    210a:	2201      	movs	r2, #1
    210c:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    210e:	4b1f      	ldr	r3, [pc, #124]	; (218c <Clock_Ip_CallEmptyCallbacks+0x94>)
    2110:	685b      	ldr	r3, [r3, #4]
    2112:	2100      	movs	r1, #0
    2114:	2000      	movs	r0, #0
    2116:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2118:	4b1c      	ldr	r3, [pc, #112]	; (218c <Clock_Ip_CallEmptyCallbacks+0x94>)
    211a:	689b      	ldr	r3, [r3, #8]
    211c:	2057      	movs	r0, #87	; 0x57
    211e:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2120:	4b1b      	ldr	r3, [pc, #108]	; (2190 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2122:	681b      	ldr	r3, [r3, #0]
    2124:	2000      	movs	r0, #0
    2126:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2128:	4b1a      	ldr	r3, [pc, #104]	; (2194 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    212a:	681b      	ldr	r3, [r3, #0]
    212c:	2000      	movs	r0, #0
    212e:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2130:	4b19      	ldr	r3, [pc, #100]	; (2198 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2132:	681b      	ldr	r3, [r3, #0]
    2134:	2000      	movs	r0, #0
    2136:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2138:	4b18      	ldr	r3, [pc, #96]	; (219c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    213a:	685b      	ldr	r3, [r3, #4]
    213c:	2000      	movs	r0, #0
    213e:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2140:	4b16      	ldr	r3, [pc, #88]	; (219c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2142:	689b      	ldr	r3, [r3, #8]
    2144:	2057      	movs	r0, #87	; 0x57
    2146:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2148:	4b15      	ldr	r3, [pc, #84]	; (21a0 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    214a:	681b      	ldr	r3, [r3, #0]
    214c:	2000      	movs	r0, #0
    214e:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2150:	4b13      	ldr	r3, [pc, #76]	; (21a0 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2152:	685b      	ldr	r3, [r3, #4]
    2154:	2100      	movs	r1, #0
    2156:	2057      	movs	r0, #87	; 0x57
    2158:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    215a:	4b12      	ldr	r3, [pc, #72]	; (21a4 <Clock_Ip_CallEmptyCallbacks+0xac>)
    215c:	681b      	ldr	r3, [r3, #0]
    215e:	2000      	movs	r0, #0
    2160:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2162:	4b11      	ldr	r3, [pc, #68]	; (21a8 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2164:	685b      	ldr	r3, [r3, #4]
    2166:	2000      	movs	r0, #0
    2168:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    216a:	4b0f      	ldr	r3, [pc, #60]	; (21a8 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    216c:	689b      	ldr	r3, [r3, #8]
    216e:	2057      	movs	r0, #87	; 0x57
    2170:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2172:	4b0e      	ldr	r3, [pc, #56]	; (21ac <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2174:	685b      	ldr	r3, [r3, #4]
    2176:	2000      	movs	r0, #0
    2178:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    217a:	4b0d      	ldr	r3, [pc, #52]	; (21b0 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    217c:	681b      	ldr	r3, [r3, #0]
    217e:	2100      	movs	r1, #0
    2180:	2000      	movs	r0, #0
    2182:	4798      	blx	r3
    }
}
    2184:	bf00      	nop
    2186:	bd08      	pop	{r3, pc}
    2188:	1fff8b3c 	.word	0x1fff8b3c
    218c:	00018400 	.word	0x00018400
    2190:	00018314 	.word	0x00018314
    2194:	00018350 	.word	0x00018350
    2198:	00018358 	.word	0x00018358
    219c:	00018380 	.word	0x00018380
    21a0:	0001838c 	.word	0x0001838c
    21a4:	000183c4 	.word	0x000183c4
    21a8:	00018410 	.word	0x00018410
    21ac:	0001843c 	.word	0x0001843c
    21b0:	00018438 	.word	0x00018438

000021b4 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    21b4:	b500      	push	{lr}
    21b6:	b085      	sub	sp, #20
    21b8:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    21ba:	9b01      	ldr	r3, [sp, #4]
    21bc:	7adb      	ldrb	r3, [r3, #11]
    21be:	9303      	str	r3, [sp, #12]
    21c0:	e01f      	b.n	2202 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    21c2:	9b03      	ldr	r3, [sp, #12]
    21c4:	1e5a      	subs	r2, r3, #1
    21c6:	9b01      	ldr	r3, [sp, #4]
    21c8:	320d      	adds	r2, #13
    21ca:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    21ce:	495a      	ldr	r1, [pc, #360]	; (2338 <Clock_Ip_ResetClockConfiguration+0x184>)
    21d0:	4613      	mov	r3, r2
    21d2:	00db      	lsls	r3, r3, #3
    21d4:	4413      	add	r3, r2
    21d6:	440b      	add	r3, r1
    21d8:	3301      	adds	r3, #1
    21da:	781b      	ldrb	r3, [r3, #0]
    21dc:	461a      	mov	r2, r3
    21de:	4b57      	ldr	r3, [pc, #348]	; (233c <Clock_Ip_ResetClockConfiguration+0x188>)
    21e0:	5c9b      	ldrb	r3, [r3, r2]
    21e2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    21e4:	4a56      	ldr	r2, [pc, #344]	; (2340 <Clock_Ip_ResetClockConfiguration+0x18c>)
    21e6:	9b02      	ldr	r3, [sp, #8]
    21e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    21ec:	9a03      	ldr	r2, [sp, #12]
    21ee:	3a01      	subs	r2, #1
    21f0:	320d      	adds	r2, #13
    21f2:	00d2      	lsls	r2, r2, #3
    21f4:	9901      	ldr	r1, [sp, #4]
    21f6:	440a      	add	r2, r1
    21f8:	4610      	mov	r0, r2
    21fa:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    21fc:	9b03      	ldr	r3, [sp, #12]
    21fe:	3b01      	subs	r3, #1
    2200:	9303      	str	r3, [sp, #12]
    2202:	9b03      	ldr	r3, [sp, #12]
    2204:	2b00      	cmp	r3, #0
    2206:	d1dc      	bne.n	21c2 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2208:	9b01      	ldr	r3, [sp, #4]
    220a:	7b9b      	ldrb	r3, [r3, #14]
    220c:	9303      	str	r3, [sp, #12]
    220e:	e026      	b.n	225e <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2210:	9b03      	ldr	r3, [sp, #12]
    2212:	3b01      	subs	r3, #1
    2214:	9a01      	ldr	r2, [sp, #4]
    2216:	3324      	adds	r3, #36	; 0x24
    2218:	011b      	lsls	r3, r3, #4
    221a:	4413      	add	r3, r2
    221c:	3304      	adds	r3, #4
    221e:	681a      	ldr	r2, [r3, #0]
    2220:	4945      	ldr	r1, [pc, #276]	; (2338 <Clock_Ip_ResetClockConfiguration+0x184>)
    2222:	4613      	mov	r3, r2
    2224:	00db      	lsls	r3, r3, #3
    2226:	4413      	add	r3, r2
    2228:	440b      	add	r3, r1
    222a:	3301      	adds	r3, #1
    222c:	781b      	ldrb	r3, [r3, #0]
    222e:	461a      	mov	r2, r3
    2230:	4b44      	ldr	r3, [pc, #272]	; (2344 <Clock_Ip_ResetClockConfiguration+0x190>)
    2232:	5c9b      	ldrb	r3, [r3, r2]
    2234:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2236:	4944      	ldr	r1, [pc, #272]	; (2348 <Clock_Ip_ResetClockConfiguration+0x194>)
    2238:	9a02      	ldr	r2, [sp, #8]
    223a:	4613      	mov	r3, r2
    223c:	005b      	lsls	r3, r3, #1
    223e:	4413      	add	r3, r2
    2240:	009b      	lsls	r3, r3, #2
    2242:	440b      	add	r3, r1
    2244:	681b      	ldr	r3, [r3, #0]
    2246:	9a03      	ldr	r2, [sp, #12]
    2248:	3a01      	subs	r2, #1
    224a:	3224      	adds	r2, #36	; 0x24
    224c:	0112      	lsls	r2, r2, #4
    224e:	9901      	ldr	r1, [sp, #4]
    2250:	440a      	add	r2, r1
    2252:	3204      	adds	r2, #4
    2254:	4610      	mov	r0, r2
    2256:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2258:	9b03      	ldr	r3, [sp, #12]
    225a:	3b01      	subs	r3, #1
    225c:	9303      	str	r3, [sp, #12]
    225e:	9b03      	ldr	r3, [sp, #12]
    2260:	2b00      	cmp	r3, #0
    2262:	d1d5      	bne.n	2210 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2264:	9b01      	ldr	r3, [sp, #4]
    2266:	7a9b      	ldrb	r3, [r3, #10]
    2268:	9303      	str	r3, [sp, #12]
    226a:	e02a      	b.n	22c2 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    226c:	9b03      	ldr	r3, [sp, #12]
    226e:	1e5a      	subs	r2, r3, #1
    2270:	9901      	ldr	r1, [sp, #4]
    2272:	4613      	mov	r3, r2
    2274:	009b      	lsls	r3, r3, #2
    2276:	4413      	add	r3, r2
    2278:	00db      	lsls	r3, r3, #3
    227a:	440b      	add	r3, r1
    227c:	3340      	adds	r3, #64	; 0x40
    227e:	681a      	ldr	r2, [r3, #0]
    2280:	492d      	ldr	r1, [pc, #180]	; (2338 <Clock_Ip_ResetClockConfiguration+0x184>)
    2282:	4613      	mov	r3, r2
    2284:	00db      	lsls	r3, r3, #3
    2286:	4413      	add	r3, r2
    2288:	440b      	add	r3, r1
    228a:	3301      	adds	r3, #1
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	461a      	mov	r2, r3
    2290:	4b2e      	ldr	r3, [pc, #184]	; (234c <Clock_Ip_ResetClockConfiguration+0x198>)
    2292:	5c9b      	ldrb	r3, [r3, r2]
    2294:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2296:	492e      	ldr	r1, [pc, #184]	; (2350 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2298:	9a02      	ldr	r2, [sp, #8]
    229a:	4613      	mov	r3, r2
    229c:	009b      	lsls	r3, r3, #2
    229e:	4413      	add	r3, r2
    22a0:	009b      	lsls	r3, r3, #2
    22a2:	440b      	add	r3, r1
    22a4:	6819      	ldr	r1, [r3, #0]
    22a6:	9b03      	ldr	r3, [sp, #12]
    22a8:	1e5a      	subs	r2, r3, #1
    22aa:	4613      	mov	r3, r2
    22ac:	009b      	lsls	r3, r3, #2
    22ae:	4413      	add	r3, r2
    22b0:	00db      	lsls	r3, r3, #3
    22b2:	3340      	adds	r3, #64	; 0x40
    22b4:	9a01      	ldr	r2, [sp, #4]
    22b6:	4413      	add	r3, r2
    22b8:	4618      	mov	r0, r3
    22ba:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    22bc:	9b03      	ldr	r3, [sp, #12]
    22be:	3b01      	subs	r3, #1
    22c0:	9303      	str	r3, [sp, #12]
    22c2:	9b03      	ldr	r3, [sp, #12]
    22c4:	2b00      	cmp	r3, #0
    22c6:	d1d1      	bne.n	226c <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    22c8:	9b01      	ldr	r3, [sp, #4]
    22ca:	7a5b      	ldrb	r3, [r3, #9]
    22cc:	9303      	str	r3, [sp, #12]
    22ce:	e02b      	b.n	2328 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    22d0:	9b03      	ldr	r3, [sp, #12]
    22d2:	1e5a      	subs	r2, r3, #1
    22d4:	9901      	ldr	r1, [sp, #4]
    22d6:	4613      	mov	r3, r2
    22d8:	009b      	lsls	r3, r3, #2
    22da:	4413      	add	r3, r2
    22dc:	009b      	lsls	r3, r3, #2
    22de:	440b      	add	r3, r1
    22e0:	332c      	adds	r3, #44	; 0x2c
    22e2:	681a      	ldr	r2, [r3, #0]
    22e4:	4914      	ldr	r1, [pc, #80]	; (2338 <Clock_Ip_ResetClockConfiguration+0x184>)
    22e6:	4613      	mov	r3, r2
    22e8:	00db      	lsls	r3, r3, #3
    22ea:	4413      	add	r3, r2
    22ec:	440b      	add	r3, r1
    22ee:	3301      	adds	r3, #1
    22f0:	781b      	ldrb	r3, [r3, #0]
    22f2:	461a      	mov	r2, r3
    22f4:	4b17      	ldr	r3, [pc, #92]	; (2354 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    22f6:	5c9b      	ldrb	r3, [r3, r2]
    22f8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    22fa:	4917      	ldr	r1, [pc, #92]	; (2358 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    22fc:	9a02      	ldr	r2, [sp, #8]
    22fe:	4613      	mov	r3, r2
    2300:	009b      	lsls	r3, r3, #2
    2302:	4413      	add	r3, r2
    2304:	009b      	lsls	r3, r3, #2
    2306:	440b      	add	r3, r1
    2308:	6819      	ldr	r1, [r3, #0]
    230a:	9b03      	ldr	r3, [sp, #12]
    230c:	1e5a      	subs	r2, r3, #1
    230e:	4613      	mov	r3, r2
    2310:	009b      	lsls	r3, r3, #2
    2312:	4413      	add	r3, r2
    2314:	009b      	lsls	r3, r3, #2
    2316:	3328      	adds	r3, #40	; 0x28
    2318:	9a01      	ldr	r2, [sp, #4]
    231a:	4413      	add	r3, r2
    231c:	3304      	adds	r3, #4
    231e:	4618      	mov	r0, r3
    2320:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2322:	9b03      	ldr	r3, [sp, #12]
    2324:	3b01      	subs	r3, #1
    2326:	9303      	str	r3, [sp, #12]
    2328:	9b03      	ldr	r3, [sp, #12]
    232a:	2b00      	cmp	r3, #0
    232c:	d1d0      	bne.n	22d0 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    232e:	bf00      	nop
    2330:	bf00      	nop
    2332:	b005      	add	sp, #20
    2334:	f85d fb04 	ldr.w	pc, [sp], #4
    2338:	00017e04 	.word	0x00017e04
    233c:	00017dd4 	.word	0x00017dd4
    2340:	0001843c 	.word	0x0001843c
    2344:	00017db4 	.word	0x00017db4
    2348:	00018380 	.word	0x00018380
    234c:	00017dc4 	.word	0x00017dc4
    2350:	00018410 	.word	0x00018410
    2354:	00017d84 	.word	0x00017d84
    2358:	00018358 	.word	0x00018358

0000235c <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    235c:	b500      	push	{lr}
    235e:	b085      	sub	sp, #20
    2360:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2362:	2301      	movs	r3, #1
    2364:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2366:	9801      	ldr	r0, [sp, #4]
    2368:	f000 f818 	bl	239c <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    236c:	4b0a      	ldr	r3, [pc, #40]	; (2398 <Clock_Ip_Init+0x3c>)
    236e:	781b      	ldrb	r3, [r3, #0]
    2370:	2b00      	cmp	r3, #0
    2372:	d00a      	beq.n	238a <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2374:	f000 fb74 	bl	2a60 <Clock_Ip_GetPllStatus>
    2378:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    237a:	9b02      	ldr	r3, [sp, #8]
    237c:	2b00      	cmp	r3, #0
    237e:	d106      	bne.n	238e <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2380:	f000 fbf2 	bl	2b68 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2384:	2300      	movs	r3, #0
    2386:	9303      	str	r3, [sp, #12]
    2388:	e001      	b.n	238e <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    238a:	2300      	movs	r3, #0
    238c:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    238e:	9b03      	ldr	r3, [sp, #12]
}
    2390:	4618      	mov	r0, r3
    2392:	b005      	add	sp, #20
    2394:	f85d fb04 	ldr.w	pc, [sp], #4
    2398:	1fff8b40 	.word	0x1fff8b40

0000239c <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    239c:	b510      	push	{r4, lr}
    239e:	b084      	sub	sp, #16
    23a0:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    23a2:	4a9f      	ldr	r2, [pc, #636]	; (2620 <Clock_Ip_InitClock+0x284>)
    23a4:	9b01      	ldr	r3, [sp, #4]
    23a6:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    23a8:	2101      	movs	r1, #1
    23aa:	9801      	ldr	r0, [sp, #4]
    23ac:	f003 fa90 	bl	58d0 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    23b0:	4b9b      	ldr	r3, [pc, #620]	; (2620 <Clock_Ip_InitClock+0x284>)
    23b2:	681b      	ldr	r3, [r3, #0]
    23b4:	2b00      	cmp	r3, #0
    23b6:	d030      	beq.n	241a <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    23b8:	2300      	movs	r3, #0
    23ba:	9303      	str	r3, [sp, #12]
    23bc:	e027      	b.n	240e <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    23be:	9901      	ldr	r1, [sp, #4]
    23c0:	9a03      	ldr	r2, [sp, #12]
    23c2:	4613      	mov	r3, r2
    23c4:	009b      	lsls	r3, r3, #2
    23c6:	4413      	add	r3, r2
    23c8:	009b      	lsls	r3, r3, #2
    23ca:	440b      	add	r3, r1
    23cc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    23d0:	681a      	ldr	r2, [r3, #0]
    23d2:	4994      	ldr	r1, [pc, #592]	; (2624 <Clock_Ip_InitClock+0x288>)
    23d4:	4613      	mov	r3, r2
    23d6:	00db      	lsls	r3, r3, #3
    23d8:	4413      	add	r3, r2
    23da:	440b      	add	r3, r1
    23dc:	3301      	adds	r3, #1
    23de:	781b      	ldrb	r3, [r3, #0]
    23e0:	461a      	mov	r2, r3
    23e2:	4b91      	ldr	r3, [pc, #580]	; (2628 <Clock_Ip_InitClock+0x28c>)
    23e4:	5c9b      	ldrb	r3, [r3, r2]
    23e6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    23e8:	4a90      	ldr	r2, [pc, #576]	; (262c <Clock_Ip_InitClock+0x290>)
    23ea:	9b02      	ldr	r3, [sp, #8]
    23ec:	011b      	lsls	r3, r3, #4
    23ee:	4413      	add	r3, r2
    23f0:	6819      	ldr	r1, [r3, #0]
    23f2:	9a03      	ldr	r2, [sp, #12]
    23f4:	4613      	mov	r3, r2
    23f6:	009b      	lsls	r3, r3, #2
    23f8:	4413      	add	r3, r2
    23fa:	009b      	lsls	r3, r3, #2
    23fc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2400:	9a01      	ldr	r2, [sp, #4]
    2402:	4413      	add	r3, r2
    2404:	4618      	mov	r0, r3
    2406:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2408:	9b03      	ldr	r3, [sp, #12]
    240a:	3301      	adds	r3, #1
    240c:	9303      	str	r3, [sp, #12]
    240e:	9b01      	ldr	r3, [sp, #4]
    2410:	7c9b      	ldrb	r3, [r3, #18]
    2412:	461a      	mov	r2, r3
    2414:	9b03      	ldr	r3, [sp, #12]
    2416:	4293      	cmp	r3, r2
    2418:	d3d1      	bcc.n	23be <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    241a:	9801      	ldr	r0, [sp, #4]
    241c:	f7ff feca 	bl	21b4 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2420:	2300      	movs	r3, #0
    2422:	9303      	str	r3, [sp, #12]
    2424:	e029      	b.n	247a <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2426:	9901      	ldr	r1, [sp, #4]
    2428:	9a03      	ldr	r2, [sp, #12]
    242a:	4613      	mov	r3, r2
    242c:	005b      	lsls	r3, r3, #1
    242e:	4413      	add	r3, r2
    2430:	009b      	lsls	r3, r3, #2
    2432:	440b      	add	r3, r1
    2434:	3314      	adds	r3, #20
    2436:	681a      	ldr	r2, [r3, #0]
    2438:	497a      	ldr	r1, [pc, #488]	; (2624 <Clock_Ip_InitClock+0x288>)
    243a:	4613      	mov	r3, r2
    243c:	00db      	lsls	r3, r3, #3
    243e:	4413      	add	r3, r2
    2440:	440b      	add	r3, r1
    2442:	3301      	adds	r3, #1
    2444:	781b      	ldrb	r3, [r3, #0]
    2446:	461a      	mov	r2, r3
    2448:	4b79      	ldr	r3, [pc, #484]	; (2630 <Clock_Ip_InitClock+0x294>)
    244a:	5c9b      	ldrb	r3, [r3, r2]
    244c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    244e:	4979      	ldr	r1, [pc, #484]	; (2634 <Clock_Ip_InitClock+0x298>)
    2450:	9a02      	ldr	r2, [sp, #8]
    2452:	4613      	mov	r3, r2
    2454:	005b      	lsls	r3, r3, #1
    2456:	4413      	add	r3, r2
    2458:	009b      	lsls	r3, r3, #2
    245a:	440b      	add	r3, r1
    245c:	6819      	ldr	r1, [r3, #0]
    245e:	9a03      	ldr	r2, [sp, #12]
    2460:	4613      	mov	r3, r2
    2462:	005b      	lsls	r3, r3, #1
    2464:	4413      	add	r3, r2
    2466:	009b      	lsls	r3, r3, #2
    2468:	3310      	adds	r3, #16
    246a:	9a01      	ldr	r2, [sp, #4]
    246c:	4413      	add	r3, r2
    246e:	3304      	adds	r3, #4
    2470:	4618      	mov	r0, r3
    2472:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2474:	9b03      	ldr	r3, [sp, #12]
    2476:	3301      	adds	r3, #1
    2478:	9303      	str	r3, [sp, #12]
    247a:	9b01      	ldr	r3, [sp, #4]
    247c:	7a1b      	ldrb	r3, [r3, #8]
    247e:	461a      	mov	r2, r3
    2480:	9b03      	ldr	r3, [sp, #12]
    2482:	4293      	cmp	r3, r2
    2484:	d3cf      	bcc.n	2426 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2486:	2300      	movs	r3, #0
    2488:	9303      	str	r3, [sp, #12]
    248a:	e02a      	b.n	24e2 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    248c:	9901      	ldr	r1, [sp, #4]
    248e:	9a03      	ldr	r2, [sp, #12]
    2490:	4613      	mov	r3, r2
    2492:	009b      	lsls	r3, r3, #2
    2494:	4413      	add	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	440b      	add	r3, r1
    249a:	332c      	adds	r3, #44	; 0x2c
    249c:	681a      	ldr	r2, [r3, #0]
    249e:	4961      	ldr	r1, [pc, #388]	; (2624 <Clock_Ip_InitClock+0x288>)
    24a0:	4613      	mov	r3, r2
    24a2:	00db      	lsls	r3, r3, #3
    24a4:	4413      	add	r3, r2
    24a6:	440b      	add	r3, r1
    24a8:	3301      	adds	r3, #1
    24aa:	781b      	ldrb	r3, [r3, #0]
    24ac:	461a      	mov	r2, r3
    24ae:	4b62      	ldr	r3, [pc, #392]	; (2638 <Clock_Ip_InitClock+0x29c>)
    24b0:	5c9b      	ldrb	r3, [r3, r2]
    24b2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    24b4:	4961      	ldr	r1, [pc, #388]	; (263c <Clock_Ip_InitClock+0x2a0>)
    24b6:	9a02      	ldr	r2, [sp, #8]
    24b8:	4613      	mov	r3, r2
    24ba:	009b      	lsls	r3, r3, #2
    24bc:	4413      	add	r3, r2
    24be:	009b      	lsls	r3, r3, #2
    24c0:	440b      	add	r3, r1
    24c2:	3304      	adds	r3, #4
    24c4:	6819      	ldr	r1, [r3, #0]
    24c6:	9a03      	ldr	r2, [sp, #12]
    24c8:	4613      	mov	r3, r2
    24ca:	009b      	lsls	r3, r3, #2
    24cc:	4413      	add	r3, r2
    24ce:	009b      	lsls	r3, r3, #2
    24d0:	3328      	adds	r3, #40	; 0x28
    24d2:	9a01      	ldr	r2, [sp, #4]
    24d4:	4413      	add	r3, r2
    24d6:	3304      	adds	r3, #4
    24d8:	4618      	mov	r0, r3
    24da:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    24dc:	9b03      	ldr	r3, [sp, #12]
    24de:	3301      	adds	r3, #1
    24e0:	9303      	str	r3, [sp, #12]
    24e2:	9b01      	ldr	r3, [sp, #4]
    24e4:	7a5b      	ldrb	r3, [r3, #9]
    24e6:	461a      	mov	r2, r3
    24e8:	9b03      	ldr	r3, [sp, #12]
    24ea:	4293      	cmp	r3, r2
    24ec:	d3ce      	bcc.n	248c <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    24ee:	9801      	ldr	r0, [sp, #4]
    24f0:	f7ff fdb0 	bl	2054 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    24f4:	2300      	movs	r3, #0
    24f6:	9303      	str	r3, [sp, #12]
    24f8:	e028      	b.n	254c <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    24fa:	9901      	ldr	r1, [sp, #4]
    24fc:	9a03      	ldr	r2, [sp, #12]
    24fe:	4613      	mov	r3, r2
    2500:	009b      	lsls	r3, r3, #2
    2502:	4413      	add	r3, r2
    2504:	009b      	lsls	r3, r3, #2
    2506:	440b      	add	r3, r1
    2508:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    250c:	681a      	ldr	r2, [r3, #0]
    250e:	4945      	ldr	r1, [pc, #276]	; (2624 <Clock_Ip_InitClock+0x288>)
    2510:	4613      	mov	r3, r2
    2512:	00db      	lsls	r3, r3, #3
    2514:	4413      	add	r3, r2
    2516:	440b      	add	r3, r1
    2518:	3301      	adds	r3, #1
    251a:	781b      	ldrb	r3, [r3, #0]
    251c:	461a      	mov	r2, r3
    251e:	4b48      	ldr	r3, [pc, #288]	; (2640 <Clock_Ip_InitClock+0x2a4>)
    2520:	5c9b      	ldrb	r3, [r3, r2]
    2522:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2524:	4a47      	ldr	r2, [pc, #284]	; (2644 <Clock_Ip_InitClock+0x2a8>)
    2526:	9b02      	ldr	r3, [sp, #8]
    2528:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    252c:	9a03      	ldr	r2, [sp, #12]
    252e:	4613      	mov	r3, r2
    2530:	009b      	lsls	r3, r3, #2
    2532:	4413      	add	r3, r2
    2534:	009b      	lsls	r3, r3, #2
    2536:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    253a:	9a01      	ldr	r2, [sp, #4]
    253c:	4413      	add	r3, r2
    253e:	3304      	adds	r3, #4
    2540:	9903      	ldr	r1, [sp, #12]
    2542:	4618      	mov	r0, r3
    2544:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2546:	9b03      	ldr	r3, [sp, #12]
    2548:	3301      	adds	r3, #1
    254a:	9303      	str	r3, [sp, #12]
    254c:	9b01      	ldr	r3, [sp, #4]
    254e:	7c5b      	ldrb	r3, [r3, #17]
    2550:	461a      	mov	r2, r3
    2552:	9b03      	ldr	r3, [sp, #12]
    2554:	4293      	cmp	r3, r2
    2556:	d3d0      	bcc.n	24fa <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2558:	2300      	movs	r3, #0
    255a:	9303      	str	r3, [sp, #12]
    255c:	e026      	b.n	25ac <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    255e:	9901      	ldr	r1, [sp, #4]
    2560:	9a03      	ldr	r2, [sp, #12]
    2562:	4613      	mov	r3, r2
    2564:	005b      	lsls	r3, r3, #1
    2566:	4413      	add	r3, r2
    2568:	009b      	lsls	r3, r3, #2
    256a:	440b      	add	r3, r1
    256c:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2570:	681a      	ldr	r2, [r3, #0]
    2572:	492c      	ldr	r1, [pc, #176]	; (2624 <Clock_Ip_InitClock+0x288>)
    2574:	4613      	mov	r3, r2
    2576:	00db      	lsls	r3, r3, #3
    2578:	4413      	add	r3, r2
    257a:	440b      	add	r3, r1
    257c:	3301      	adds	r3, #1
    257e:	781b      	ldrb	r3, [r3, #0]
    2580:	461a      	mov	r2, r3
    2582:	4b31      	ldr	r3, [pc, #196]	; (2648 <Clock_Ip_InitClock+0x2ac>)
    2584:	5c9b      	ldrb	r3, [r3, r2]
    2586:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2588:	4a30      	ldr	r2, [pc, #192]	; (264c <Clock_Ip_InitClock+0x2b0>)
    258a:	9b02      	ldr	r3, [sp, #8]
    258c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2590:	9a03      	ldr	r2, [sp, #12]
    2592:	4613      	mov	r3, r2
    2594:	005b      	lsls	r3, r3, #1
    2596:	4413      	add	r3, r2
    2598:	009b      	lsls	r3, r3, #2
    259a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    259e:	9a01      	ldr	r2, [sp, #4]
    25a0:	4413      	add	r3, r2
    25a2:	4618      	mov	r0, r3
    25a4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    25a6:	9b03      	ldr	r3, [sp, #12]
    25a8:	3301      	adds	r3, #1
    25aa:	9303      	str	r3, [sp, #12]
    25ac:	9b01      	ldr	r3, [sp, #4]
    25ae:	7b5b      	ldrb	r3, [r3, #13]
    25b0:	461a      	mov	r2, r3
    25b2:	9b03      	ldr	r3, [sp, #12]
    25b4:	4293      	cmp	r3, r2
    25b6:	d3d2      	bcc.n	255e <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    25b8:	2300      	movs	r3, #0
    25ba:	9303      	str	r3, [sp, #12]
    25bc:	e026      	b.n	260c <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    25be:	9901      	ldr	r1, [sp, #4]
    25c0:	9a03      	ldr	r2, [sp, #12]
    25c2:	4613      	mov	r3, r2
    25c4:	005b      	lsls	r3, r3, #1
    25c6:	4413      	add	r3, r2
    25c8:	009b      	lsls	r3, r3, #2
    25ca:	440b      	add	r3, r1
    25cc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    25d0:	681a      	ldr	r2, [r3, #0]
    25d2:	4914      	ldr	r1, [pc, #80]	; (2624 <Clock_Ip_InitClock+0x288>)
    25d4:	4613      	mov	r3, r2
    25d6:	00db      	lsls	r3, r3, #3
    25d8:	4413      	add	r3, r2
    25da:	440b      	add	r3, r1
    25dc:	3301      	adds	r3, #1
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	461a      	mov	r2, r3
    25e2:	4b1b      	ldr	r3, [pc, #108]	; (2650 <Clock_Ip_InitClock+0x2b4>)
    25e4:	5c9b      	ldrb	r3, [r3, r2]
    25e6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    25e8:	4a1a      	ldr	r2, [pc, #104]	; (2654 <Clock_Ip_InitClock+0x2b8>)
    25ea:	9b02      	ldr	r3, [sp, #8]
    25ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    25f0:	9a03      	ldr	r2, [sp, #12]
    25f2:	4613      	mov	r3, r2
    25f4:	005b      	lsls	r3, r3, #1
    25f6:	4413      	add	r3, r2
    25f8:	009b      	lsls	r3, r3, #2
    25fa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    25fe:	9a01      	ldr	r2, [sp, #4]
    2600:	4413      	add	r3, r2
    2602:	4618      	mov	r0, r3
    2604:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2606:	9b03      	ldr	r3, [sp, #12]
    2608:	3301      	adds	r3, #1
    260a:	9303      	str	r3, [sp, #12]
    260c:	9b01      	ldr	r3, [sp, #4]
    260e:	7b1b      	ldrb	r3, [r3, #12]
    2610:	461a      	mov	r2, r3
    2612:	9b03      	ldr	r3, [sp, #12]
    2614:	4293      	cmp	r3, r2
    2616:	d3d2      	bcc.n	25be <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2618:	2300      	movs	r3, #0
    261a:	9303      	str	r3, [sp, #12]
    261c:	e044      	b.n	26a8 <Clock_Ip_InitClock+0x30c>
    261e:	bf00      	nop
    2620:	1fff8b38 	.word	0x1fff8b38
    2624:	00017e04 	.word	0x00017e04
    2628:	00017df4 	.word	0x00017df4
    262c:	00018400 	.word	0x00018400
    2630:	00017d94 	.word	0x00017d94
    2634:	000183c4 	.word	0x000183c4
    2638:	00017d84 	.word	0x00017d84
    263c:	00018358 	.word	0x00018358
    2640:	00017de4 	.word	0x00017de4
    2644:	00018438 	.word	0x00018438
    2648:	00017d74 	.word	0x00017d74
    264c:	00018350 	.word	0x00018350
    2650:	00017d64 	.word	0x00017d64
    2654:	00018314 	.word	0x00018314
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2658:	9901      	ldr	r1, [sp, #4]
    265a:	9a03      	ldr	r2, [sp, #12]
    265c:	4613      	mov	r3, r2
    265e:	005b      	lsls	r3, r3, #1
    2660:	4413      	add	r3, r2
    2662:	009b      	lsls	r3, r3, #2
    2664:	440b      	add	r3, r1
    2666:	f503 730e 	add.w	r3, r3, #568	; 0x238
    266a:	681a      	ldr	r2, [r3, #0]
    266c:	49ac      	ldr	r1, [pc, #688]	; (2920 <Clock_Ip_InitClock+0x584>)
    266e:	4613      	mov	r3, r2
    2670:	00db      	lsls	r3, r3, #3
    2672:	4413      	add	r3, r2
    2674:	440b      	add	r3, r1
    2676:	3301      	adds	r3, #1
    2678:	781b      	ldrb	r3, [r3, #0]
    267a:	461a      	mov	r2, r3
    267c:	4ba9      	ldr	r3, [pc, #676]	; (2924 <Clock_Ip_InitClock+0x588>)
    267e:	5c9b      	ldrb	r3, [r3, r2]
    2680:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2682:	4aa9      	ldr	r2, [pc, #676]	; (2928 <Clock_Ip_InitClock+0x58c>)
    2684:	9b02      	ldr	r3, [sp, #8]
    2686:	00db      	lsls	r3, r3, #3
    2688:	4413      	add	r3, r2
    268a:	6859      	ldr	r1, [r3, #4]
    268c:	9a03      	ldr	r2, [sp, #12]
    268e:	4613      	mov	r3, r2
    2690:	005b      	lsls	r3, r3, #1
    2692:	4413      	add	r3, r2
    2694:	009b      	lsls	r3, r3, #2
    2696:	f503 730e 	add.w	r3, r3, #568	; 0x238
    269a:	9a01      	ldr	r2, [sp, #4]
    269c:	4413      	add	r3, r2
    269e:	4618      	mov	r0, r3
    26a0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    26a2:	9b03      	ldr	r3, [sp, #12]
    26a4:	3301      	adds	r3, #1
    26a6:	9303      	str	r3, [sp, #12]
    26a8:	9b01      	ldr	r3, [sp, #4]
    26aa:	7b5b      	ldrb	r3, [r3, #13]
    26ac:	461a      	mov	r2, r3
    26ae:	9b03      	ldr	r3, [sp, #12]
    26b0:	4293      	cmp	r3, r2
    26b2:	d3d1      	bcc.n	2658 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    26b4:	2300      	movs	r3, #0
    26b6:	9303      	str	r3, [sp, #12]
    26b8:	e029      	b.n	270e <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    26ba:	9901      	ldr	r1, [sp, #4]
    26bc:	9a03      	ldr	r2, [sp, #12]
    26be:	4613      	mov	r3, r2
    26c0:	009b      	lsls	r3, r3, #2
    26c2:	4413      	add	r3, r2
    26c4:	00db      	lsls	r3, r3, #3
    26c6:	440b      	add	r3, r1
    26c8:	3340      	adds	r3, #64	; 0x40
    26ca:	681a      	ldr	r2, [r3, #0]
    26cc:	4994      	ldr	r1, [pc, #592]	; (2920 <Clock_Ip_InitClock+0x584>)
    26ce:	4613      	mov	r3, r2
    26d0:	00db      	lsls	r3, r3, #3
    26d2:	4413      	add	r3, r2
    26d4:	440b      	add	r3, r1
    26d6:	3301      	adds	r3, #1
    26d8:	781b      	ldrb	r3, [r3, #0]
    26da:	461a      	mov	r2, r3
    26dc:	4b93      	ldr	r3, [pc, #588]	; (292c <Clock_Ip_InitClock+0x590>)
    26de:	5c9b      	ldrb	r3, [r3, r2]
    26e0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    26e2:	4993      	ldr	r1, [pc, #588]	; (2930 <Clock_Ip_InitClock+0x594>)
    26e4:	9a02      	ldr	r2, [sp, #8]
    26e6:	4613      	mov	r3, r2
    26e8:	009b      	lsls	r3, r3, #2
    26ea:	4413      	add	r3, r2
    26ec:	009b      	lsls	r3, r3, #2
    26ee:	440b      	add	r3, r1
    26f0:	3304      	adds	r3, #4
    26f2:	6819      	ldr	r1, [r3, #0]
    26f4:	9a03      	ldr	r2, [sp, #12]
    26f6:	4613      	mov	r3, r2
    26f8:	009b      	lsls	r3, r3, #2
    26fa:	4413      	add	r3, r2
    26fc:	00db      	lsls	r3, r3, #3
    26fe:	3340      	adds	r3, #64	; 0x40
    2700:	9a01      	ldr	r2, [sp, #4]
    2702:	4413      	add	r3, r2
    2704:	4618      	mov	r0, r3
    2706:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2708:	9b03      	ldr	r3, [sp, #12]
    270a:	3301      	adds	r3, #1
    270c:	9303      	str	r3, [sp, #12]
    270e:	9b01      	ldr	r3, [sp, #4]
    2710:	7a9b      	ldrb	r3, [r3, #10]
    2712:	461a      	mov	r2, r3
    2714:	9b03      	ldr	r3, [sp, #12]
    2716:	4293      	cmp	r3, r2
    2718:	d3cf      	bcc.n	26ba <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    271a:	2300      	movs	r3, #0
    271c:	9303      	str	r3, [sp, #12]
    271e:	e029      	b.n	2774 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2720:	9901      	ldr	r1, [sp, #4]
    2722:	9a03      	ldr	r2, [sp, #12]
    2724:	4613      	mov	r3, r2
    2726:	009b      	lsls	r3, r3, #2
    2728:	4413      	add	r3, r2
    272a:	009b      	lsls	r3, r3, #2
    272c:	440b      	add	r3, r1
    272e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2732:	681a      	ldr	r2, [r3, #0]
    2734:	497a      	ldr	r1, [pc, #488]	; (2920 <Clock_Ip_InitClock+0x584>)
    2736:	4613      	mov	r3, r2
    2738:	00db      	lsls	r3, r3, #3
    273a:	4413      	add	r3, r2
    273c:	440b      	add	r3, r1
    273e:	3301      	adds	r3, #1
    2740:	781b      	ldrb	r3, [r3, #0]
    2742:	461a      	mov	r2, r3
    2744:	4b7b      	ldr	r3, [pc, #492]	; (2934 <Clock_Ip_InitClock+0x598>)
    2746:	5c9b      	ldrb	r3, [r3, r2]
    2748:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    274a:	4a7b      	ldr	r2, [pc, #492]	; (2938 <Clock_Ip_InitClock+0x59c>)
    274c:	9b02      	ldr	r3, [sp, #8]
    274e:	011b      	lsls	r3, r3, #4
    2750:	4413      	add	r3, r2
    2752:	3304      	adds	r3, #4
    2754:	681c      	ldr	r4, [r3, #0]
    2756:	9a03      	ldr	r2, [sp, #12]
    2758:	4613      	mov	r3, r2
    275a:	009b      	lsls	r3, r3, #2
    275c:	4413      	add	r3, r2
    275e:	009b      	lsls	r3, r3, #2
    2760:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2764:	9a01      	ldr	r2, [sp, #4]
    2766:	4413      	add	r3, r2
    2768:	9903      	ldr	r1, [sp, #12]
    276a:	4618      	mov	r0, r3
    276c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    276e:	9b03      	ldr	r3, [sp, #12]
    2770:	3301      	adds	r3, #1
    2772:	9303      	str	r3, [sp, #12]
    2774:	9b01      	ldr	r3, [sp, #4]
    2776:	7c9b      	ldrb	r3, [r3, #18]
    2778:	461a      	mov	r2, r3
    277a:	9b03      	ldr	r3, [sp, #12]
    277c:	4293      	cmp	r3, r2
    277e:	d3cf      	bcc.n	2720 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2780:	2300      	movs	r3, #0
    2782:	9303      	str	r3, [sp, #12]
    2784:	e02a      	b.n	27dc <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2786:	9901      	ldr	r1, [sp, #4]
    2788:	9a03      	ldr	r2, [sp, #12]
    278a:	4613      	mov	r3, r2
    278c:	009b      	lsls	r3, r3, #2
    278e:	4413      	add	r3, r2
    2790:	009b      	lsls	r3, r3, #2
    2792:	440b      	add	r3, r1
    2794:	332c      	adds	r3, #44	; 0x2c
    2796:	681a      	ldr	r2, [r3, #0]
    2798:	4961      	ldr	r1, [pc, #388]	; (2920 <Clock_Ip_InitClock+0x584>)
    279a:	4613      	mov	r3, r2
    279c:	00db      	lsls	r3, r3, #3
    279e:	4413      	add	r3, r2
    27a0:	440b      	add	r3, r1
    27a2:	3301      	adds	r3, #1
    27a4:	781b      	ldrb	r3, [r3, #0]
    27a6:	461a      	mov	r2, r3
    27a8:	4b64      	ldr	r3, [pc, #400]	; (293c <Clock_Ip_InitClock+0x5a0>)
    27aa:	5c9b      	ldrb	r3, [r3, r2]
    27ac:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    27ae:	4964      	ldr	r1, [pc, #400]	; (2940 <Clock_Ip_InitClock+0x5a4>)
    27b0:	9a02      	ldr	r2, [sp, #8]
    27b2:	4613      	mov	r3, r2
    27b4:	009b      	lsls	r3, r3, #2
    27b6:	4413      	add	r3, r2
    27b8:	009b      	lsls	r3, r3, #2
    27ba:	440b      	add	r3, r1
    27bc:	3308      	adds	r3, #8
    27be:	6819      	ldr	r1, [r3, #0]
    27c0:	9a03      	ldr	r2, [sp, #12]
    27c2:	4613      	mov	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	4413      	add	r3, r2
    27c8:	009b      	lsls	r3, r3, #2
    27ca:	3328      	adds	r3, #40	; 0x28
    27cc:	9a01      	ldr	r2, [sp, #4]
    27ce:	4413      	add	r3, r2
    27d0:	3304      	adds	r3, #4
    27d2:	4618      	mov	r0, r3
    27d4:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    27d6:	9b03      	ldr	r3, [sp, #12]
    27d8:	3301      	adds	r3, #1
    27da:	9303      	str	r3, [sp, #12]
    27dc:	9b01      	ldr	r3, [sp, #4]
    27de:	7a5b      	ldrb	r3, [r3, #9]
    27e0:	461a      	mov	r2, r3
    27e2:	9b03      	ldr	r3, [sp, #12]
    27e4:	4293      	cmp	r3, r2
    27e6:	d3ce      	bcc.n	2786 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    27e8:	2300      	movs	r3, #0
    27ea:	9303      	str	r3, [sp, #12]
    27ec:	e029      	b.n	2842 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    27ee:	9901      	ldr	r1, [sp, #4]
    27f0:	9a03      	ldr	r2, [sp, #12]
    27f2:	4613      	mov	r3, r2
    27f4:	009b      	lsls	r3, r3, #2
    27f6:	4413      	add	r3, r2
    27f8:	00db      	lsls	r3, r3, #3
    27fa:	440b      	add	r3, r1
    27fc:	3340      	adds	r3, #64	; 0x40
    27fe:	681a      	ldr	r2, [r3, #0]
    2800:	4947      	ldr	r1, [pc, #284]	; (2920 <Clock_Ip_InitClock+0x584>)
    2802:	4613      	mov	r3, r2
    2804:	00db      	lsls	r3, r3, #3
    2806:	4413      	add	r3, r2
    2808:	440b      	add	r3, r1
    280a:	3301      	adds	r3, #1
    280c:	781b      	ldrb	r3, [r3, #0]
    280e:	461a      	mov	r2, r3
    2810:	4b46      	ldr	r3, [pc, #280]	; (292c <Clock_Ip_InitClock+0x590>)
    2812:	5c9b      	ldrb	r3, [r3, r2]
    2814:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2816:	4946      	ldr	r1, [pc, #280]	; (2930 <Clock_Ip_InitClock+0x594>)
    2818:	9a02      	ldr	r2, [sp, #8]
    281a:	4613      	mov	r3, r2
    281c:	009b      	lsls	r3, r3, #2
    281e:	4413      	add	r3, r2
    2820:	009b      	lsls	r3, r3, #2
    2822:	440b      	add	r3, r1
    2824:	330c      	adds	r3, #12
    2826:	6819      	ldr	r1, [r3, #0]
    2828:	9a03      	ldr	r2, [sp, #12]
    282a:	4613      	mov	r3, r2
    282c:	009b      	lsls	r3, r3, #2
    282e:	4413      	add	r3, r2
    2830:	00db      	lsls	r3, r3, #3
    2832:	3340      	adds	r3, #64	; 0x40
    2834:	9a01      	ldr	r2, [sp, #4]
    2836:	4413      	add	r3, r2
    2838:	4618      	mov	r0, r3
    283a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    283c:	9b03      	ldr	r3, [sp, #12]
    283e:	3301      	adds	r3, #1
    2840:	9303      	str	r3, [sp, #12]
    2842:	9b01      	ldr	r3, [sp, #4]
    2844:	7a9b      	ldrb	r3, [r3, #10]
    2846:	461a      	mov	r2, r3
    2848:	9b03      	ldr	r3, [sp, #12]
    284a:	4293      	cmp	r3, r2
    284c:	d3cf      	bcc.n	27ee <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    284e:	2300      	movs	r3, #0
    2850:	9303      	str	r3, [sp, #12]
    2852:	e025      	b.n	28a0 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2854:	9a01      	ldr	r2, [sp, #4]
    2856:	9b03      	ldr	r3, [sp, #12]
    2858:	3324      	adds	r3, #36	; 0x24
    285a:	011b      	lsls	r3, r3, #4
    285c:	4413      	add	r3, r2
    285e:	3304      	adds	r3, #4
    2860:	681a      	ldr	r2, [r3, #0]
    2862:	492f      	ldr	r1, [pc, #188]	; (2920 <Clock_Ip_InitClock+0x584>)
    2864:	4613      	mov	r3, r2
    2866:	00db      	lsls	r3, r3, #3
    2868:	4413      	add	r3, r2
    286a:	440b      	add	r3, r1
    286c:	3301      	adds	r3, #1
    286e:	781b      	ldrb	r3, [r3, #0]
    2870:	461a      	mov	r2, r3
    2872:	4b34      	ldr	r3, [pc, #208]	; (2944 <Clock_Ip_InitClock+0x5a8>)
    2874:	5c9b      	ldrb	r3, [r3, r2]
    2876:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2878:	4933      	ldr	r1, [pc, #204]	; (2948 <Clock_Ip_InitClock+0x5ac>)
    287a:	9a02      	ldr	r2, [sp, #8]
    287c:	4613      	mov	r3, r2
    287e:	005b      	lsls	r3, r3, #1
    2880:	4413      	add	r3, r2
    2882:	009b      	lsls	r3, r3, #2
    2884:	440b      	add	r3, r1
    2886:	3304      	adds	r3, #4
    2888:	681b      	ldr	r3, [r3, #0]
    288a:	9a03      	ldr	r2, [sp, #12]
    288c:	3224      	adds	r2, #36	; 0x24
    288e:	0112      	lsls	r2, r2, #4
    2890:	9901      	ldr	r1, [sp, #4]
    2892:	440a      	add	r2, r1
    2894:	3204      	adds	r2, #4
    2896:	4610      	mov	r0, r2
    2898:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    289a:	9b03      	ldr	r3, [sp, #12]
    289c:	3301      	adds	r3, #1
    289e:	9303      	str	r3, [sp, #12]
    28a0:	9b01      	ldr	r3, [sp, #4]
    28a2:	7b9b      	ldrb	r3, [r3, #14]
    28a4:	461a      	mov	r2, r3
    28a6:	9b03      	ldr	r3, [sp, #12]
    28a8:	4293      	cmp	r3, r2
    28aa:	d3d3      	bcc.n	2854 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    28ac:	4b27      	ldr	r3, [pc, #156]	; (294c <Clock_Ip_InitClock+0x5b0>)
    28ae:	2200      	movs	r2, #0
    28b0:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    28b2:	4b26      	ldr	r3, [pc, #152]	; (294c <Clock_Ip_InitClock+0x5b0>)
    28b4:	2200      	movs	r2, #0
    28b6:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    28b8:	4b24      	ldr	r3, [pc, #144]	; (294c <Clock_Ip_InitClock+0x5b0>)
    28ba:	2201      	movs	r2, #1
    28bc:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    28be:	4b23      	ldr	r3, [pc, #140]	; (294c <Clock_Ip_InitClock+0x5b0>)
    28c0:	2200      	movs	r2, #0
    28c2:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    28c4:	f000 fa9c 	bl	2e00 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    28c8:	2300      	movs	r3, #0
    28ca:	9303      	str	r3, [sp, #12]
    28cc:	e04c      	b.n	2968 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    28ce:	9a01      	ldr	r2, [sp, #4]
    28d0:	9b03      	ldr	r3, [sp, #12]
    28d2:	330d      	adds	r3, #13
    28d4:	00db      	lsls	r3, r3, #3
    28d6:	4413      	add	r3, r2
    28d8:	685b      	ldr	r3, [r3, #4]
    28da:	4a1d      	ldr	r2, [pc, #116]	; (2950 <Clock_Ip_InitClock+0x5b4>)
    28dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    28e0:	2b03      	cmp	r3, #3
    28e2:	d03b      	beq.n	295c <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    28e4:	9b01      	ldr	r3, [sp, #4]
    28e6:	9a03      	ldr	r2, [sp, #12]
    28e8:	320d      	adds	r2, #13
    28ea:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    28ee:	490c      	ldr	r1, [pc, #48]	; (2920 <Clock_Ip_InitClock+0x584>)
    28f0:	4613      	mov	r3, r2
    28f2:	00db      	lsls	r3, r3, #3
    28f4:	4413      	add	r3, r2
    28f6:	440b      	add	r3, r1
    28f8:	3301      	adds	r3, #1
    28fa:	781b      	ldrb	r3, [r3, #0]
    28fc:	461a      	mov	r2, r3
    28fe:	4b15      	ldr	r3, [pc, #84]	; (2954 <Clock_Ip_InitClock+0x5b8>)
    2900:	5c9b      	ldrb	r3, [r3, r2]
    2902:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2904:	4a14      	ldr	r2, [pc, #80]	; (2958 <Clock_Ip_InitClock+0x5bc>)
    2906:	9b02      	ldr	r3, [sp, #8]
    2908:	00db      	lsls	r3, r3, #3
    290a:	4413      	add	r3, r2
    290c:	685b      	ldr	r3, [r3, #4]
    290e:	9a03      	ldr	r2, [sp, #12]
    2910:	320d      	adds	r2, #13
    2912:	00d2      	lsls	r2, r2, #3
    2914:	9901      	ldr	r1, [sp, #4]
    2916:	440a      	add	r2, r1
    2918:	4610      	mov	r0, r2
    291a:	4798      	blx	r3
    291c:	e021      	b.n	2962 <Clock_Ip_InitClock+0x5c6>
    291e:	bf00      	nop
    2920:	00017e04 	.word	0x00017e04
    2924:	00017d74 	.word	0x00017d74
    2928:	00018350 	.word	0x00018350
    292c:	00017dc4 	.word	0x00017dc4
    2930:	00018410 	.word	0x00018410
    2934:	00017df4 	.word	0x00017df4
    2938:	00018400 	.word	0x00018400
    293c:	00017d84 	.word	0x00017d84
    2940:	00018358 	.word	0x00018358
    2944:	00017db4 	.word	0x00017db4
    2948:	00018380 	.word	0x00018380
    294c:	1fff8b40 	.word	0x1fff8b40
    2950:	00018250 	.word	0x00018250
    2954:	00017dd4 	.word	0x00017dd4
    2958:	0001843c 	.word	0x0001843c
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    295c:	4b3a      	ldr	r3, [pc, #232]	; (2a48 <Clock_Ip_InitClock+0x6ac>)
    295e:	2201      	movs	r2, #1
    2960:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2962:	9b03      	ldr	r3, [sp, #12]
    2964:	3301      	adds	r3, #1
    2966:	9303      	str	r3, [sp, #12]
    2968:	9b01      	ldr	r3, [sp, #4]
    296a:	7adb      	ldrb	r3, [r3, #11]
    296c:	461a      	mov	r2, r3
    296e:	9b03      	ldr	r3, [sp, #12]
    2970:	4293      	cmp	r3, r2
    2972:	d3ac      	bcc.n	28ce <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2974:	4b34      	ldr	r3, [pc, #208]	; (2a48 <Clock_Ip_InitClock+0x6ac>)
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	f083 0301 	eor.w	r3, r3, #1
    297c:	b2db      	uxtb	r3, r3
    297e:	2b00      	cmp	r3, #0
    2980:	d05e      	beq.n	2a40 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2982:	2300      	movs	r3, #0
    2984:	9303      	str	r3, [sp, #12]
    2986:	e01f      	b.n	29c8 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2988:	9a01      	ldr	r2, [sp, #4]
    298a:	9b03      	ldr	r3, [sp, #12]
    298c:	334e      	adds	r3, #78	; 0x4e
    298e:	00db      	lsls	r3, r3, #3
    2990:	4413      	add	r3, r2
    2992:	685a      	ldr	r2, [r3, #4]
    2994:	492d      	ldr	r1, [pc, #180]	; (2a4c <Clock_Ip_InitClock+0x6b0>)
    2996:	4613      	mov	r3, r2
    2998:	00db      	lsls	r3, r3, #3
    299a:	4413      	add	r3, r2
    299c:	440b      	add	r3, r1
    299e:	3301      	adds	r3, #1
    29a0:	781b      	ldrb	r3, [r3, #0]
    29a2:	461a      	mov	r2, r3
    29a4:	4b2a      	ldr	r3, [pc, #168]	; (2a50 <Clock_Ip_InitClock+0x6b4>)
    29a6:	5c9b      	ldrb	r3, [r3, r2]
    29a8:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    29aa:	4a2a      	ldr	r2, [pc, #168]	; (2a54 <Clock_Ip_InitClock+0x6b8>)
    29ac:	9b02      	ldr	r3, [sp, #8]
    29ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29b2:	9a03      	ldr	r2, [sp, #12]
    29b4:	324e      	adds	r2, #78	; 0x4e
    29b6:	00d2      	lsls	r2, r2, #3
    29b8:	9901      	ldr	r1, [sp, #4]
    29ba:	440a      	add	r2, r1
    29bc:	3204      	adds	r2, #4
    29be:	4610      	mov	r0, r2
    29c0:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29c2:	9b03      	ldr	r3, [sp, #12]
    29c4:	3301      	adds	r3, #1
    29c6:	9303      	str	r3, [sp, #12]
    29c8:	9b01      	ldr	r3, [sp, #4]
    29ca:	7c1b      	ldrb	r3, [r3, #16]
    29cc:	461a      	mov	r2, r3
    29ce:	9b03      	ldr	r3, [sp, #12]
    29d0:	4293      	cmp	r3, r2
    29d2:	d3d9      	bcc.n	2988 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    29d4:	2300      	movs	r3, #0
    29d6:	9303      	str	r3, [sp, #12]
    29d8:	e028      	b.n	2a2c <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    29da:	9901      	ldr	r1, [sp, #4]
    29dc:	9a03      	ldr	r2, [sp, #12]
    29de:	4613      	mov	r3, r2
    29e0:	009b      	lsls	r3, r3, #2
    29e2:	4413      	add	r3, r2
    29e4:	009b      	lsls	r3, r3, #2
    29e6:	440b      	add	r3, r1
    29e8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29ec:	681a      	ldr	r2, [r3, #0]
    29ee:	4917      	ldr	r1, [pc, #92]	; (2a4c <Clock_Ip_InitClock+0x6b0>)
    29f0:	4613      	mov	r3, r2
    29f2:	00db      	lsls	r3, r3, #3
    29f4:	4413      	add	r3, r2
    29f6:	440b      	add	r3, r1
    29f8:	3301      	adds	r3, #1
    29fa:	781b      	ldrb	r3, [r3, #0]
    29fc:	461a      	mov	r2, r3
    29fe:	4b16      	ldr	r3, [pc, #88]	; (2a58 <Clock_Ip_InitClock+0x6bc>)
    2a00:	5c9b      	ldrb	r3, [r3, r2]
    2a02:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2a04:	4a15      	ldr	r2, [pc, #84]	; (2a5c <Clock_Ip_InitClock+0x6c0>)
    2a06:	9b02      	ldr	r3, [sp, #8]
    2a08:	011b      	lsls	r3, r3, #4
    2a0a:	4413      	add	r3, r2
    2a0c:	330c      	adds	r3, #12
    2a0e:	6819      	ldr	r1, [r3, #0]
    2a10:	9a03      	ldr	r2, [sp, #12]
    2a12:	4613      	mov	r3, r2
    2a14:	009b      	lsls	r3, r3, #2
    2a16:	4413      	add	r3, r2
    2a18:	009b      	lsls	r3, r3, #2
    2a1a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a1e:	9a01      	ldr	r2, [sp, #4]
    2a20:	4413      	add	r3, r2
    2a22:	4618      	mov	r0, r3
    2a24:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2a26:	9b03      	ldr	r3, [sp, #12]
    2a28:	3301      	adds	r3, #1
    2a2a:	9303      	str	r3, [sp, #12]
    2a2c:	9b01      	ldr	r3, [sp, #4]
    2a2e:	7c9b      	ldrb	r3, [r3, #18]
    2a30:	461a      	mov	r2, r3
    2a32:	9b03      	ldr	r3, [sp, #12]
    2a34:	4293      	cmp	r3, r2
    2a36:	d3d0      	bcc.n	29da <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2a38:	2104      	movs	r1, #4
    2a3a:	9801      	ldr	r0, [sp, #4]
    2a3c:	f002 ff48 	bl	58d0 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2a40:	bf00      	nop
    2a42:	b004      	add	sp, #16
    2a44:	bd10      	pop	{r4, pc}
    2a46:	bf00      	nop
    2a48:	1fff8b40 	.word	0x1fff8b40
    2a4c:	00017e04 	.word	0x00017e04
    2a50:	00017da4 	.word	0x00017da4
    2a54:	0001838c 	.word	0x0001838c
    2a58:	00017df4 	.word	0x00017df4
    2a5c:	00018400 	.word	0x00018400

00002a60 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2a60:	b500      	push	{lr}
    2a62:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2a64:	2302      	movs	r3, #2
    2a66:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2a68:	2300      	movs	r3, #0
    2a6a:	9304      	str	r3, [sp, #16]
    2a6c:	e02c      	b.n	2ac8 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2a6e:	4a36      	ldr	r2, [pc, #216]	; (2b48 <Clock_Ip_GetPllStatus+0xe8>)
    2a70:	9b04      	ldr	r3, [sp, #16]
    2a72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2a76:	4935      	ldr	r1, [pc, #212]	; (2b4c <Clock_Ip_GetPllStatus+0xec>)
    2a78:	4613      	mov	r3, r2
    2a7a:	00db      	lsls	r3, r3, #3
    2a7c:	4413      	add	r3, r2
    2a7e:	440b      	add	r3, r1
    2a80:	3301      	adds	r3, #1
    2a82:	781b      	ldrb	r3, [r3, #0]
    2a84:	461a      	mov	r2, r3
    2a86:	4b32      	ldr	r3, [pc, #200]	; (2b50 <Clock_Ip_GetPllStatus+0xf0>)
    2a88:	5c9b      	ldrb	r3, [r3, r2]
    2a8a:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2a8c:	4931      	ldr	r1, [pc, #196]	; (2b54 <Clock_Ip_GetPllStatus+0xf4>)
    2a8e:	9a03      	ldr	r2, [sp, #12]
    2a90:	4613      	mov	r3, r2
    2a92:	009b      	lsls	r3, r3, #2
    2a94:	4413      	add	r3, r2
    2a96:	009b      	lsls	r3, r3, #2
    2a98:	440b      	add	r3, r1
    2a9a:	3308      	adds	r3, #8
    2a9c:	681b      	ldr	r3, [r3, #0]
    2a9e:	492a      	ldr	r1, [pc, #168]	; (2b48 <Clock_Ip_GetPllStatus+0xe8>)
    2aa0:	9a04      	ldr	r2, [sp, #16]
    2aa2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2aa6:	4610      	mov	r0, r2
    2aa8:	4798      	blx	r3
    2aaa:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2aac:	9b02      	ldr	r3, [sp, #8]
    2aae:	2b01      	cmp	r3, #1
    2ab0:	d102      	bne.n	2ab8 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2ab2:	2301      	movs	r3, #1
    2ab4:	9305      	str	r3, [sp, #20]
            break;
    2ab6:	e00d      	b.n	2ad4 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2ab8:	9b02      	ldr	r3, [sp, #8]
    2aba:	2b02      	cmp	r3, #2
    2abc:	d101      	bne.n	2ac2 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2abe:	2300      	movs	r3, #0
    2ac0:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2ac2:	9b04      	ldr	r3, [sp, #16]
    2ac4:	3301      	adds	r3, #1
    2ac6:	9304      	str	r3, [sp, #16]
    2ac8:	4b23      	ldr	r3, [pc, #140]	; (2b58 <Clock_Ip_GetPllStatus+0xf8>)
    2aca:	789b      	ldrb	r3, [r3, #2]
    2acc:	461a      	mov	r2, r3
    2ace:	9b04      	ldr	r3, [sp, #16]
    2ad0:	4293      	cmp	r3, r2
    2ad2:	d3cc      	bcc.n	2a6e <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2ad4:	9b05      	ldr	r3, [sp, #20]
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d130      	bne.n	2b3c <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2ada:	2300      	movs	r3, #0
    2adc:	9304      	str	r3, [sp, #16]
    2ade:	e027      	b.n	2b30 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2ae0:	4a1e      	ldr	r2, [pc, #120]	; (2b5c <Clock_Ip_GetPllStatus+0xfc>)
    2ae2:	9b04      	ldr	r3, [sp, #16]
    2ae4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2ae8:	4918      	ldr	r1, [pc, #96]	; (2b4c <Clock_Ip_GetPllStatus+0xec>)
    2aea:	4613      	mov	r3, r2
    2aec:	00db      	lsls	r3, r3, #3
    2aee:	4413      	add	r3, r2
    2af0:	440b      	add	r3, r1
    2af2:	3301      	adds	r3, #1
    2af4:	781b      	ldrb	r3, [r3, #0]
    2af6:	461a      	mov	r2, r3
    2af8:	4b19      	ldr	r3, [pc, #100]	; (2b60 <Clock_Ip_GetPllStatus+0x100>)
    2afa:	5c9b      	ldrb	r3, [r3, r2]
    2afc:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2afe:	4919      	ldr	r1, [pc, #100]	; (2b64 <Clock_Ip_GetPllStatus+0x104>)
    2b00:	9a03      	ldr	r2, [sp, #12]
    2b02:	4613      	mov	r3, r2
    2b04:	005b      	lsls	r3, r3, #1
    2b06:	4413      	add	r3, r2
    2b08:	009b      	lsls	r3, r3, #2
    2b0a:	440b      	add	r3, r1
    2b0c:	3308      	adds	r3, #8
    2b0e:	681b      	ldr	r3, [r3, #0]
    2b10:	4912      	ldr	r1, [pc, #72]	; (2b5c <Clock_Ip_GetPllStatus+0xfc>)
    2b12:	9a04      	ldr	r2, [sp, #16]
    2b14:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2b18:	4610      	mov	r0, r2
    2b1a:	4798      	blx	r3
    2b1c:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2b1e:	9b01      	ldr	r3, [sp, #4]
    2b20:	2b01      	cmp	r3, #1
    2b22:	d102      	bne.n	2b2a <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2b24:	2301      	movs	r3, #1
    2b26:	9305      	str	r3, [sp, #20]
                break;
    2b28:	e008      	b.n	2b3c <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2b2a:	9b04      	ldr	r3, [sp, #16]
    2b2c:	3301      	adds	r3, #1
    2b2e:	9304      	str	r3, [sp, #16]
    2b30:	4b09      	ldr	r3, [pc, #36]	; (2b58 <Clock_Ip_GetPllStatus+0xf8>)
    2b32:	78db      	ldrb	r3, [r3, #3]
    2b34:	461a      	mov	r2, r3
    2b36:	9b04      	ldr	r3, [sp, #16]
    2b38:	4293      	cmp	r3, r2
    2b3a:	d3d1      	bcc.n	2ae0 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2b3c:	9b05      	ldr	r3, [sp, #20]
}
    2b3e:	4618      	mov	r0, r3
    2b40:	b007      	add	sp, #28
    2b42:	f85d fb04 	ldr.w	pc, [sp], #4
    2b46:	bf00      	nop
    2b48:	0001830c 	.word	0x0001830c
    2b4c:	00017e04 	.word	0x00017e04
    2b50:	00017dc4 	.word	0x00017dc4
    2b54:	00018410 	.word	0x00018410
    2b58:	1fff8b40 	.word	0x1fff8b40
    2b5c:	00018310 	.word	0x00018310
    2b60:	00017db4 	.word	0x00017db4
    2b64:	00018380 	.word	0x00018380

00002b68 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2b68:	b500      	push	{lr}
    2b6a:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2b6c:	4b55      	ldr	r3, [pc, #340]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2b6e:	681b      	ldr	r3, [r3, #0]
    2b70:	2b00      	cmp	r3, #0
    2b72:	f000 80a2 	beq.w	2cba <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2b76:	2300      	movs	r3, #0
    2b78:	9301      	str	r3, [sp, #4]
    2b7a:	e02c      	b.n	2bd6 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2b7c:	4b51      	ldr	r3, [pc, #324]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2b7e:	681a      	ldr	r2, [r3, #0]
    2b80:	9b01      	ldr	r3, [sp, #4]
    2b82:	330d      	adds	r3, #13
    2b84:	00db      	lsls	r3, r3, #3
    2b86:	4413      	add	r3, r2
    2b88:	685b      	ldr	r3, [r3, #4]
    2b8a:	4a4f      	ldr	r2, [pc, #316]	; (2cc8 <Clock_Ip_DistributePll+0x160>)
    2b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b90:	2b03      	cmp	r3, #3
    2b92:	d11d      	bne.n	2bd0 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2b94:	4b4b      	ldr	r3, [pc, #300]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2b96:	681b      	ldr	r3, [r3, #0]
    2b98:	9a01      	ldr	r2, [sp, #4]
    2b9a:	320d      	adds	r2, #13
    2b9c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2ba0:	494a      	ldr	r1, [pc, #296]	; (2ccc <Clock_Ip_DistributePll+0x164>)
    2ba2:	4613      	mov	r3, r2
    2ba4:	00db      	lsls	r3, r3, #3
    2ba6:	4413      	add	r3, r2
    2ba8:	440b      	add	r3, r1
    2baa:	3301      	adds	r3, #1
    2bac:	781b      	ldrb	r3, [r3, #0]
    2bae:	461a      	mov	r2, r3
    2bb0:	4b47      	ldr	r3, [pc, #284]	; (2cd0 <Clock_Ip_DistributePll+0x168>)
    2bb2:	5c9b      	ldrb	r3, [r3, r2]
    2bb4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2bb6:	4a47      	ldr	r2, [pc, #284]	; (2cd4 <Clock_Ip_DistributePll+0x16c>)
    2bb8:	9b00      	ldr	r3, [sp, #0]
    2bba:	00db      	lsls	r3, r3, #3
    2bbc:	4413      	add	r3, r2
    2bbe:	685b      	ldr	r3, [r3, #4]
    2bc0:	4a40      	ldr	r2, [pc, #256]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2bc2:	6811      	ldr	r1, [r2, #0]
    2bc4:	9a01      	ldr	r2, [sp, #4]
    2bc6:	320d      	adds	r2, #13
    2bc8:	00d2      	lsls	r2, r2, #3
    2bca:	440a      	add	r2, r1
    2bcc:	4610      	mov	r0, r2
    2bce:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2bd0:	9b01      	ldr	r3, [sp, #4]
    2bd2:	3301      	adds	r3, #1
    2bd4:	9301      	str	r3, [sp, #4]
    2bd6:	4b3b      	ldr	r3, [pc, #236]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2bd8:	681b      	ldr	r3, [r3, #0]
    2bda:	7adb      	ldrb	r3, [r3, #11]
    2bdc:	461a      	mov	r2, r3
    2bde:	9b01      	ldr	r3, [sp, #4]
    2be0:	4293      	cmp	r3, r2
    2be2:	d3cb      	bcc.n	2b7c <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2be4:	4b3c      	ldr	r3, [pc, #240]	; (2cd8 <Clock_Ip_DistributePll+0x170>)
    2be6:	781b      	ldrb	r3, [r3, #0]
    2be8:	2b00      	cmp	r3, #0
    2bea:	d066      	beq.n	2cba <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2bec:	2300      	movs	r3, #0
    2bee:	9301      	str	r3, [sp, #4]
    2bf0:	e021      	b.n	2c36 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2bf2:	4b34      	ldr	r3, [pc, #208]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2bf4:	681a      	ldr	r2, [r3, #0]
    2bf6:	9b01      	ldr	r3, [sp, #4]
    2bf8:	334e      	adds	r3, #78	; 0x4e
    2bfa:	00db      	lsls	r3, r3, #3
    2bfc:	4413      	add	r3, r2
    2bfe:	685a      	ldr	r2, [r3, #4]
    2c00:	4932      	ldr	r1, [pc, #200]	; (2ccc <Clock_Ip_DistributePll+0x164>)
    2c02:	4613      	mov	r3, r2
    2c04:	00db      	lsls	r3, r3, #3
    2c06:	4413      	add	r3, r2
    2c08:	440b      	add	r3, r1
    2c0a:	3301      	adds	r3, #1
    2c0c:	781b      	ldrb	r3, [r3, #0]
    2c0e:	461a      	mov	r2, r3
    2c10:	4b32      	ldr	r3, [pc, #200]	; (2cdc <Clock_Ip_DistributePll+0x174>)
    2c12:	5c9b      	ldrb	r3, [r3, r2]
    2c14:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2c16:	4a32      	ldr	r2, [pc, #200]	; (2ce0 <Clock_Ip_DistributePll+0x178>)
    2c18:	9b00      	ldr	r3, [sp, #0]
    2c1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2c1e:	4a29      	ldr	r2, [pc, #164]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2c20:	6811      	ldr	r1, [r2, #0]
    2c22:	9a01      	ldr	r2, [sp, #4]
    2c24:	324e      	adds	r2, #78	; 0x4e
    2c26:	00d2      	lsls	r2, r2, #3
    2c28:	440a      	add	r2, r1
    2c2a:	3204      	adds	r2, #4
    2c2c:	4610      	mov	r0, r2
    2c2e:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2c30:	9b01      	ldr	r3, [sp, #4]
    2c32:	3301      	adds	r3, #1
    2c34:	9301      	str	r3, [sp, #4]
    2c36:	4b23      	ldr	r3, [pc, #140]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2c38:	681b      	ldr	r3, [r3, #0]
    2c3a:	7c1b      	ldrb	r3, [r3, #16]
    2c3c:	461a      	mov	r2, r3
    2c3e:	9b01      	ldr	r3, [sp, #4]
    2c40:	4293      	cmp	r3, r2
    2c42:	d3d6      	bcc.n	2bf2 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2c44:	2300      	movs	r3, #0
    2c46:	9301      	str	r3, [sp, #4]
    2c48:	e02a      	b.n	2ca0 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2c4a:	4b1e      	ldr	r3, [pc, #120]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2c4c:	6819      	ldr	r1, [r3, #0]
    2c4e:	9a01      	ldr	r2, [sp, #4]
    2c50:	4613      	mov	r3, r2
    2c52:	009b      	lsls	r3, r3, #2
    2c54:	4413      	add	r3, r2
    2c56:	009b      	lsls	r3, r3, #2
    2c58:	440b      	add	r3, r1
    2c5a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2c5e:	681a      	ldr	r2, [r3, #0]
    2c60:	491a      	ldr	r1, [pc, #104]	; (2ccc <Clock_Ip_DistributePll+0x164>)
    2c62:	4613      	mov	r3, r2
    2c64:	00db      	lsls	r3, r3, #3
    2c66:	4413      	add	r3, r2
    2c68:	440b      	add	r3, r1
    2c6a:	3301      	adds	r3, #1
    2c6c:	781b      	ldrb	r3, [r3, #0]
    2c6e:	461a      	mov	r2, r3
    2c70:	4b1c      	ldr	r3, [pc, #112]	; (2ce4 <Clock_Ip_DistributePll+0x17c>)
    2c72:	5c9b      	ldrb	r3, [r3, r2]
    2c74:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2c76:	4a1c      	ldr	r2, [pc, #112]	; (2ce8 <Clock_Ip_DistributePll+0x180>)
    2c78:	9b00      	ldr	r3, [sp, #0]
    2c7a:	011b      	lsls	r3, r3, #4
    2c7c:	4413      	add	r3, r2
    2c7e:	330c      	adds	r3, #12
    2c80:	6819      	ldr	r1, [r3, #0]
    2c82:	4b10      	ldr	r3, [pc, #64]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2c84:	6818      	ldr	r0, [r3, #0]
    2c86:	9a01      	ldr	r2, [sp, #4]
    2c88:	4613      	mov	r3, r2
    2c8a:	009b      	lsls	r3, r3, #2
    2c8c:	4413      	add	r3, r2
    2c8e:	009b      	lsls	r3, r3, #2
    2c90:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2c94:	4403      	add	r3, r0
    2c96:	4618      	mov	r0, r3
    2c98:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2c9a:	9b01      	ldr	r3, [sp, #4]
    2c9c:	3301      	adds	r3, #1
    2c9e:	9301      	str	r3, [sp, #4]
    2ca0:	4b08      	ldr	r3, [pc, #32]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2ca2:	681b      	ldr	r3, [r3, #0]
    2ca4:	7c9b      	ldrb	r3, [r3, #18]
    2ca6:	461a      	mov	r2, r3
    2ca8:	9b01      	ldr	r3, [sp, #4]
    2caa:	4293      	cmp	r3, r2
    2cac:	d3cd      	bcc.n	2c4a <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2cae:	4b05      	ldr	r3, [pc, #20]	; (2cc4 <Clock_Ip_DistributePll+0x15c>)
    2cb0:	681b      	ldr	r3, [r3, #0]
    2cb2:	2104      	movs	r1, #4
    2cb4:	4618      	mov	r0, r3
    2cb6:	f002 fe0b 	bl	58d0 <Clock_Ip_Command>
        }
    }
}
    2cba:	bf00      	nop
    2cbc:	b003      	add	sp, #12
    2cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    2cc2:	bf00      	nop
    2cc4:	1fff8b38 	.word	0x1fff8b38
    2cc8:	00018250 	.word	0x00018250
    2ccc:	00017e04 	.word	0x00017e04
    2cd0:	00017dd4 	.word	0x00017dd4
    2cd4:	0001843c 	.word	0x0001843c
    2cd8:	1fff8b40 	.word	0x1fff8b40
    2cdc:	00017da4 	.word	0x00017da4
    2ce0:	0001838c 	.word	0x0001838c
    2ce4:	00017df4 	.word	0x00017df4
    2ce8:	00018400 	.word	0x00018400

00002cec <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2cec:	b500      	push	{lr}
    2cee:	b085      	sub	sp, #20
    2cf0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2cf2:	490c      	ldr	r1, [pc, #48]	; (2d24 <Clock_Ip_DisableClockMonitor+0x38>)
    2cf4:	9a01      	ldr	r2, [sp, #4]
    2cf6:	4613      	mov	r3, r2
    2cf8:	00db      	lsls	r3, r3, #3
    2cfa:	4413      	add	r3, r2
    2cfc:	440b      	add	r3, r1
    2cfe:	3301      	adds	r3, #1
    2d00:	781b      	ldrb	r3, [r3, #0]
    2d02:	461a      	mov	r2, r3
    2d04:	4b08      	ldr	r3, [pc, #32]	; (2d28 <Clock_Ip_DisableClockMonitor+0x3c>)
    2d06:	5c9b      	ldrb	r3, [r3, r2]
    2d08:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2d0a:	4a08      	ldr	r2, [pc, #32]	; (2d2c <Clock_Ip_DisableClockMonitor+0x40>)
    2d0c:	9b03      	ldr	r3, [sp, #12]
    2d0e:	011b      	lsls	r3, r3, #4
    2d10:	4413      	add	r3, r2
    2d12:	3308      	adds	r3, #8
    2d14:	681b      	ldr	r3, [r3, #0]
    2d16:	9801      	ldr	r0, [sp, #4]
    2d18:	4798      	blx	r3
}
    2d1a:	bf00      	nop
    2d1c:	b005      	add	sp, #20
    2d1e:	f85d fb04 	ldr.w	pc, [sp], #4
    2d22:	bf00      	nop
    2d24:	00017e04 	.word	0x00017e04
    2d28:	00017df4 	.word	0x00017df4
    2d2c:	00018400 	.word	0x00018400

00002d30 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2d30:	b082      	sub	sp, #8
    2d32:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2d34:	4a02      	ldr	r2, [pc, #8]	; (2d40 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2d36:	9b01      	ldr	r3, [sp, #4]
    2d38:	6013      	str	r3, [r2, #0]
}
    2d3a:	bf00      	nop
    2d3c:	b002      	add	sp, #8
    2d3e:	4770      	bx	lr
    2d40:	1fff8b14 	.word	0x1fff8b14

00002d44 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2d44:	b500      	push	{lr}
    2d46:	b085      	sub	sp, #20
    2d48:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2d4a:	490c      	ldr	r1, [pc, #48]	; (2d7c <Clock_Ip_DisableModuleClock+0x38>)
    2d4c:	9a01      	ldr	r2, [sp, #4]
    2d4e:	4613      	mov	r3, r2
    2d50:	00db      	lsls	r3, r3, #3
    2d52:	4413      	add	r3, r2
    2d54:	440b      	add	r3, r1
    2d56:	3301      	adds	r3, #1
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	461a      	mov	r2, r3
    2d5c:	4b08      	ldr	r3, [pc, #32]	; (2d80 <Clock_Ip_DisableModuleClock+0x3c>)
    2d5e:	5c9b      	ldrb	r3, [r3, r2]
    2d60:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2d62:	4a08      	ldr	r2, [pc, #32]	; (2d84 <Clock_Ip_DisableModuleClock+0x40>)
    2d64:	9b03      	ldr	r3, [sp, #12]
    2d66:	00db      	lsls	r3, r3, #3
    2d68:	4413      	add	r3, r2
    2d6a:	685b      	ldr	r3, [r3, #4]
    2d6c:	2101      	movs	r1, #1
    2d6e:	9801      	ldr	r0, [sp, #4]
    2d70:	4798      	blx	r3
}
    2d72:	bf00      	nop
    2d74:	b005      	add	sp, #20
    2d76:	f85d fb04 	ldr.w	pc, [sp], #4
    2d7a:	bf00      	nop
    2d7c:	00017e04 	.word	0x00017e04
    2d80:	00017da4 	.word	0x00017da4
    2d84:	0001838c 	.word	0x0001838c

00002d88 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2d88:	b500      	push	{lr}
    2d8a:	b085      	sub	sp, #20
    2d8c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2d8e:	490c      	ldr	r1, [pc, #48]	; (2dc0 <Clock_Ip_EnableModuleClock+0x38>)
    2d90:	9a01      	ldr	r2, [sp, #4]
    2d92:	4613      	mov	r3, r2
    2d94:	00db      	lsls	r3, r3, #3
    2d96:	4413      	add	r3, r2
    2d98:	440b      	add	r3, r1
    2d9a:	3301      	adds	r3, #1
    2d9c:	781b      	ldrb	r3, [r3, #0]
    2d9e:	461a      	mov	r2, r3
    2da0:	4b08      	ldr	r3, [pc, #32]	; (2dc4 <Clock_Ip_EnableModuleClock+0x3c>)
    2da2:	5c9b      	ldrb	r3, [r3, r2]
    2da4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2da6:	4a08      	ldr	r2, [pc, #32]	; (2dc8 <Clock_Ip_EnableModuleClock+0x40>)
    2da8:	9b03      	ldr	r3, [sp, #12]
    2daa:	00db      	lsls	r3, r3, #3
    2dac:	4413      	add	r3, r2
    2dae:	685b      	ldr	r3, [r3, #4]
    2db0:	2100      	movs	r1, #0
    2db2:	9801      	ldr	r0, [sp, #4]
    2db4:	4798      	blx	r3
}
    2db6:	bf00      	nop
    2db8:	b005      	add	sp, #20
    2dba:	f85d fb04 	ldr.w	pc, [sp], #4
    2dbe:	bf00      	nop
    2dc0:	00017e04 	.word	0x00017e04
    2dc4:	00017da4 	.word	0x00017da4
    2dc8:	0001838c 	.word	0x0001838c

00002dcc <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2dcc:	b500      	push	{lr}
    2dce:	b083      	sub	sp, #12
    2dd0:	9001      	str	r0, [sp, #4]
    2dd2:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2dd4:	4b08      	ldr	r3, [pc, #32]	; (2df8 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2dd6:	2200      	movs	r2, #0
    2dd8:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2dda:	4b08      	ldr	r3, [pc, #32]	; (2dfc <Clock_Ip_PowerModeChangeNotification+0x30>)
    2ddc:	681b      	ldr	r3, [r3, #0]
    2dde:	2102      	movs	r1, #2
    2de0:	4618      	mov	r0, r3
    2de2:	f002 fd75 	bl	58d0 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2de6:	9900      	ldr	r1, [sp, #0]
    2de8:	9801      	ldr	r0, [sp, #4]
    2dea:	f002 fc51 	bl	5690 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2dee:	bf00      	nop
    2df0:	b003      	add	sp, #12
    2df2:	f85d fb04 	ldr.w	pc, [sp], #4
    2df6:	bf00      	nop
    2df8:	1fff8b10 	.word	0x1fff8b10
    2dfc:	1fff8b38 	.word	0x1fff8b38

00002e00 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2e00:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2e02:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2e06:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2e08:	4b06      	ldr	r3, [pc, #24]	; (2e24 <Clock_Ip_SetWaitStates+0x24>)
    2e0a:	785b      	ldrb	r3, [r3, #1]
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	d005      	beq.n	2e1c <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2e10:	9b01      	ldr	r3, [sp, #4]
    2e12:	3b01      	subs	r3, #1
    2e14:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2e16:	9b01      	ldr	r3, [sp, #4]
    2e18:	2b00      	cmp	r3, #0
    2e1a:	d1f9      	bne.n	2e10 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2e1c:	bf00      	nop
    2e1e:	b002      	add	sp, #8
    2e20:	4770      	bx	lr
    2e22:	bf00      	nop
    2e24:	1fff8b40 	.word	0x1fff8b40

00002e28 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2e28:	b500      	push	{lr}
    2e2a:	b083      	sub	sp, #12
    2e2c:	9001      	str	r0, [sp, #4]
    2e2e:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2e30:	4b04      	ldr	r3, [pc, #16]	; (2e44 <Clock_Ip_ReportClockErrors+0x1c>)
    2e32:	681b      	ldr	r3, [r3, #0]
    2e34:	9900      	ldr	r1, [sp, #0]
    2e36:	9801      	ldr	r0, [sp, #4]
    2e38:	4798      	blx	r3
}
    2e3a:	bf00      	nop
    2e3c:	b003      	add	sp, #12
    2e3e:	f85d fb04 	ldr.w	pc, [sp], #4
    2e42:	bf00      	nop
    2e44:	1fff8b14 	.word	0x1fff8b14

00002e48 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2e48:	b500      	push	{lr}
    2e4a:	b085      	sub	sp, #20
    2e4c:	9003      	str	r0, [sp, #12]
    2e4e:	9102      	str	r1, [sp, #8]
    2e50:	9201      	str	r2, [sp, #4]
    2e52:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2e54:	2000      	movs	r0, #0
    2e56:	f7fe ffd1 	bl	1dfc <OsIf_GetCounter>
    2e5a:	4602      	mov	r2, r0
    2e5c:	9b03      	ldr	r3, [sp, #12]
    2e5e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2e60:	9b02      	ldr	r3, [sp, #8]
    2e62:	2200      	movs	r2, #0
    2e64:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2e66:	2100      	movs	r1, #0
    2e68:	9800      	ldr	r0, [sp, #0]
    2e6a:	f7ff f813 	bl	1e94 <OsIf_MicrosToTicks>
    2e6e:	4602      	mov	r2, r0
    2e70:	9b01      	ldr	r3, [sp, #4]
    2e72:	601a      	str	r2, [r3, #0]
}
    2e74:	bf00      	nop
    2e76:	b005      	add	sp, #20
    2e78:	f85d fb04 	ldr.w	pc, [sp], #4

00002e7c <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2e7c:	b500      	push	{lr}
    2e7e:	b087      	sub	sp, #28
    2e80:	9003      	str	r0, [sp, #12]
    2e82:	9102      	str	r1, [sp, #8]
    2e84:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2e86:	2300      	movs	r3, #0
    2e88:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2e8c:	2100      	movs	r1, #0
    2e8e:	9803      	ldr	r0, [sp, #12]
    2e90:	f7fe ffcd 	bl	1e2e <OsIf_GetElapsed>
    2e94:	4602      	mov	r2, r0
    2e96:	9b02      	ldr	r3, [sp, #8]
    2e98:	681b      	ldr	r3, [r3, #0]
    2e9a:	441a      	add	r2, r3
    2e9c:	9b02      	ldr	r3, [sp, #8]
    2e9e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2ea0:	9b02      	ldr	r3, [sp, #8]
    2ea2:	681b      	ldr	r3, [r3, #0]
    2ea4:	9a01      	ldr	r2, [sp, #4]
    2ea6:	429a      	cmp	r2, r3
    2ea8:	d802      	bhi.n	2eb0 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2eaa:	2301      	movs	r3, #1
    2eac:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2eb0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2eb4:	4618      	mov	r0, r3
    2eb6:	b007      	add	sp, #28
    2eb8:	f85d fb04 	ldr.w	pc, [sp], #4

00002ebc <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2ebc:	b082      	sub	sp, #8
    2ebe:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2ec0:	bf00      	nop
    2ec2:	b002      	add	sp, #8
    2ec4:	4770      	bx	lr

00002ec6 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2ec6:	b500      	push	{lr}
    2ec8:	b083      	sub	sp, #12
    2eca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ecc:	9b01      	ldr	r3, [sp, #4]
    2ece:	2b00      	cmp	r3, #0
    2ed0:	d002      	beq.n	2ed8 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2ed2:	9801      	ldr	r0, [sp, #4]
    2ed4:	f000 f8ad 	bl	3032 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ed8:	bf00      	nop
    2eda:	b003      	add	sp, #12
    2edc:	f85d fb04 	ldr.w	pc, [sp], #4

00002ee0 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2ee0:	b500      	push	{lr}
    2ee2:	b083      	sub	sp, #12
    2ee4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ee6:	9b01      	ldr	r3, [sp, #4]
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d002      	beq.n	2ef2 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2eec:	9801      	ldr	r0, [sp, #4]
    2eee:	f000 f8cd 	bl	308c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ef2:	bf00      	nop
    2ef4:	b003      	add	sp, #12
    2ef6:	f85d fb04 	ldr.w	pc, [sp], #4

00002efa <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2efa:	b500      	push	{lr}
    2efc:	b083      	sub	sp, #12
    2efe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f00:	9b01      	ldr	r3, [sp, #4]
    2f02:	2b00      	cmp	r3, #0
    2f04:	d002      	beq.n	2f0c <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2f06:	9801      	ldr	r0, [sp, #4]
    2f08:	f000 f8ee 	bl	30e8 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f0c:	bf00      	nop
    2f0e:	b003      	add	sp, #12
    2f10:	f85d fb04 	ldr.w	pc, [sp], #4

00002f14 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2f14:	b500      	push	{lr}
    2f16:	b083      	sub	sp, #12
    2f18:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f1a:	9b01      	ldr	r3, [sp, #4]
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d002      	beq.n	2f26 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2f20:	9801      	ldr	r0, [sp, #4]
    2f22:	f000 f8f9 	bl	3118 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f26:	bf00      	nop
    2f28:	b003      	add	sp, #12
    2f2a:	f85d fb04 	ldr.w	pc, [sp], #4

00002f2e <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2f2e:	b500      	push	{lr}
    2f30:	b083      	sub	sp, #12
    2f32:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f34:	9b01      	ldr	r3, [sp, #4]
    2f36:	2b00      	cmp	r3, #0
    2f38:	d002      	beq.n	2f40 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2f3a:	9801      	ldr	r0, [sp, #4]
    2f3c:	f000 f904 	bl	3148 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f40:	bf00      	nop
    2f42:	b003      	add	sp, #12
    2f44:	f85d fb04 	ldr.w	pc, [sp], #4

00002f48 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2f48:	b500      	push	{lr}
    2f4a:	b083      	sub	sp, #12
    2f4c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f4e:	9b01      	ldr	r3, [sp, #4]
    2f50:	2b00      	cmp	r3, #0
    2f52:	d002      	beq.n	2f5a <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2f54:	9801      	ldr	r0, [sp, #4]
    2f56:	f000 f90f 	bl	3178 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f5a:	bf00      	nop
    2f5c:	b003      	add	sp, #12
    2f5e:	f85d fb04 	ldr.w	pc, [sp], #4

00002f62 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2f62:	b500      	push	{lr}
    2f64:	b083      	sub	sp, #12
    2f66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f68:	9b01      	ldr	r3, [sp, #4]
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	d002      	beq.n	2f74 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2f6e:	9801      	ldr	r0, [sp, #4]
    2f70:	f000 f91a 	bl	31a8 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f74:	bf00      	nop
    2f76:	b003      	add	sp, #12
    2f78:	f85d fb04 	ldr.w	pc, [sp], #4

00002f7c <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2f7c:	b500      	push	{lr}
    2f7e:	b083      	sub	sp, #12
    2f80:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f82:	9b01      	ldr	r3, [sp, #4]
    2f84:	2b00      	cmp	r3, #0
    2f86:	d002      	beq.n	2f8e <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2f88:	9801      	ldr	r0, [sp, #4]
    2f8a:	f000 f925 	bl	31d8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f8e:	bf00      	nop
    2f90:	b003      	add	sp, #12
    2f92:	f85d fb04 	ldr.w	pc, [sp], #4

00002f96 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2f96:	b500      	push	{lr}
    2f98:	b083      	sub	sp, #12
    2f9a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f9c:	9b01      	ldr	r3, [sp, #4]
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d002      	beq.n	2fa8 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2fa2:	9801      	ldr	r0, [sp, #4]
    2fa4:	f000 f930 	bl	3208 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fa8:	bf00      	nop
    2faa:	b003      	add	sp, #12
    2fac:	f85d fb04 	ldr.w	pc, [sp], #4

00002fb0 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2fb0:	b500      	push	{lr}
    2fb2:	b083      	sub	sp, #12
    2fb4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fb6:	9b01      	ldr	r3, [sp, #4]
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d002      	beq.n	2fc2 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2fbc:	9801      	ldr	r0, [sp, #4]
    2fbe:	f000 f93b 	bl	3238 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fc2:	bf00      	nop
    2fc4:	b003      	add	sp, #12
    2fc6:	f85d fb04 	ldr.w	pc, [sp], #4

00002fca <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2fca:	b500      	push	{lr}
    2fcc:	b083      	sub	sp, #12
    2fce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fd0:	9b01      	ldr	r3, [sp, #4]
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	d002      	beq.n	2fdc <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2fd6:	9801      	ldr	r0, [sp, #4]
    2fd8:	f000 f946 	bl	3268 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fdc:	bf00      	nop
    2fde:	b003      	add	sp, #12
    2fe0:	f85d fb04 	ldr.w	pc, [sp], #4

00002fe4 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2fe4:	b500      	push	{lr}
    2fe6:	b083      	sub	sp, #12
    2fe8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fea:	9b01      	ldr	r3, [sp, #4]
    2fec:	2b00      	cmp	r3, #0
    2fee:	d002      	beq.n	2ff6 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2ff0:	9801      	ldr	r0, [sp, #4]
    2ff2:	f000 f951 	bl	3298 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ff6:	bf00      	nop
    2ff8:	b003      	add	sp, #12
    2ffa:	f85d fb04 	ldr.w	pc, [sp], #4

00002ffe <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2ffe:	b500      	push	{lr}
    3000:	b083      	sub	sp, #12
    3002:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3004:	9b01      	ldr	r3, [sp, #4]
    3006:	2b00      	cmp	r3, #0
    3008:	d002      	beq.n	3010 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    300a:	9801      	ldr	r0, [sp, #4]
    300c:	f000 f95e 	bl	32cc <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3010:	bf00      	nop
    3012:	b003      	add	sp, #12
    3014:	f85d fb04 	ldr.w	pc, [sp], #4

00003018 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    3018:	b500      	push	{lr}
    301a:	b083      	sub	sp, #12
    301c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    301e:	9b01      	ldr	r3, [sp, #4]
    3020:	2b00      	cmp	r3, #0
    3022:	d002      	beq.n	302a <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3024:	9801      	ldr	r0, [sp, #4]
    3026:	f000 f98b 	bl	3340 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    302a:	bf00      	nop
    302c:	b003      	add	sp, #12
    302e:	f85d fb04 	ldr.w	pc, [sp], #4

00003032 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3032:	b086      	sub	sp, #24
    3034:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3036:	9b01      	ldr	r3, [sp, #4]
    3038:	681a      	ldr	r2, [r3, #0]
    303a:	4911      	ldr	r1, [pc, #68]	; (3080 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    303c:	4613      	mov	r3, r2
    303e:	00db      	lsls	r3, r3, #3
    3040:	4413      	add	r3, r2
    3042:	440b      	add	r3, r1
    3044:	781b      	ldrb	r3, [r3, #0]
    3046:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3048:	9b01      	ldr	r3, [sp, #4]
    304a:	685b      	ldr	r3, [r3, #4]
    304c:	4a0d      	ldr	r2, [pc, #52]	; (3084 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    304e:	5cd3      	ldrb	r3, [r2, r3]
    3050:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3052:	4a0d      	ldr	r2, [pc, #52]	; (3088 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3054:	9b05      	ldr	r3, [sp, #20]
    3056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    305a:	681b      	ldr	r3, [r3, #0]
    305c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    305e:	9b03      	ldr	r3, [sp, #12]
    3060:	f023 0307 	bic.w	r3, r3, #7
    3064:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    3066:	9a03      	ldr	r2, [sp, #12]
    3068:	9b04      	ldr	r3, [sp, #16]
    306a:	4313      	orrs	r3, r2
    306c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    306e:	4a06      	ldr	r2, [pc, #24]	; (3088 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3070:	9b05      	ldr	r3, [sp, #20]
    3072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3076:	9a03      	ldr	r2, [sp, #12]
    3078:	601a      	str	r2, [r3, #0]
}
    307a:	bf00      	nop
    307c:	b006      	add	sp, #24
    307e:	4770      	bx	lr
    3080:	00017e04 	.word	0x00017e04
    3084:	000181fc 	.word	0x000181fc
    3088:	00018240 	.word	0x00018240

0000308c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    308c:	b086      	sub	sp, #24
    308e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3090:	9b01      	ldr	r3, [sp, #4]
    3092:	681a      	ldr	r2, [r3, #0]
    3094:	4911      	ldr	r1, [pc, #68]	; (30dc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3096:	4613      	mov	r3, r2
    3098:	00db      	lsls	r3, r3, #3
    309a:	4413      	add	r3, r2
    309c:	440b      	add	r3, r1
    309e:	781b      	ldrb	r3, [r3, #0]
    30a0:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    30a2:	9b01      	ldr	r3, [sp, #4]
    30a4:	685b      	ldr	r3, [r3, #4]
    30a6:	4a0e      	ldr	r2, [pc, #56]	; (30e0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    30a8:	5cd3      	ldrb	r3, [r2, r3]
    30aa:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    30ac:	4a0d      	ldr	r2, [pc, #52]	; (30e4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    30ae:	9b05      	ldr	r3, [sp, #20]
    30b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    30b4:	681b      	ldr	r3, [r3, #0]
    30b6:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    30b8:	9b03      	ldr	r3, [sp, #12]
    30ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    30be:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    30c0:	9b04      	ldr	r3, [sp, #16]
    30c2:	021b      	lsls	r3, r3, #8
    30c4:	9a03      	ldr	r2, [sp, #12]
    30c6:	4313      	orrs	r3, r2
    30c8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    30ca:	4a06      	ldr	r2, [pc, #24]	; (30e4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    30cc:	9b05      	ldr	r3, [sp, #20]
    30ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    30d2:	9a03      	ldr	r2, [sp, #12]
    30d4:	601a      	str	r2, [r3, #0]
}
    30d6:	bf00      	nop
    30d8:	b006      	add	sp, #24
    30da:	4770      	bx	lr
    30dc:	00017e04 	.word	0x00017e04
    30e0:	000181fc 	.word	0x000181fc
    30e4:	00018240 	.word	0x00018240

000030e8 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30e8:	b084      	sub	sp, #16
    30ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    30ec:	4b09      	ldr	r3, [pc, #36]	; (3114 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    30ee:	695b      	ldr	r3, [r3, #20]
    30f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    30f2:	9b03      	ldr	r3, [sp, #12]
    30f4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    30f8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    30fa:	9b01      	ldr	r3, [sp, #4]
    30fc:	685b      	ldr	r3, [r3, #4]
    30fe:	3b01      	subs	r3, #1
    3100:	041b      	lsls	r3, r3, #16
    3102:	9a03      	ldr	r2, [sp, #12]
    3104:	4313      	orrs	r3, r2
    3106:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3108:	4a02      	ldr	r2, [pc, #8]	; (3114 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    310a:	9b03      	ldr	r3, [sp, #12]
    310c:	6153      	str	r3, [r2, #20]
}
    310e:	bf00      	nop
    3110:	b004      	add	sp, #16
    3112:	4770      	bx	lr
    3114:	40064000 	.word	0x40064000

00003118 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3118:	b084      	sub	sp, #16
    311a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    311c:	4b09      	ldr	r3, [pc, #36]	; (3144 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    311e:	695b      	ldr	r3, [r3, #20]
    3120:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3122:	9b03      	ldr	r3, [sp, #12]
    3124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3128:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    312a:	9b01      	ldr	r3, [sp, #4]
    312c:	685b      	ldr	r3, [r3, #4]
    312e:	3b01      	subs	r3, #1
    3130:	011b      	lsls	r3, r3, #4
    3132:	9a03      	ldr	r2, [sp, #12]
    3134:	4313      	orrs	r3, r2
    3136:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3138:	4a02      	ldr	r2, [pc, #8]	; (3144 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    313a:	9b03      	ldr	r3, [sp, #12]
    313c:	6153      	str	r3, [r2, #20]
}
    313e:	bf00      	nop
    3140:	b004      	add	sp, #16
    3142:	4770      	bx	lr
    3144:	40064000 	.word	0x40064000

00003148 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3148:	b084      	sub	sp, #16
    314a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    314c:	4b09      	ldr	r3, [pc, #36]	; (3174 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    314e:	695b      	ldr	r3, [r3, #20]
    3150:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3152:	9b03      	ldr	r3, [sp, #12]
    3154:	f023 030f 	bic.w	r3, r3, #15
    3158:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    315a:	9b01      	ldr	r3, [sp, #4]
    315c:	685b      	ldr	r3, [r3, #4]
    315e:	3b01      	subs	r3, #1
    3160:	9a03      	ldr	r2, [sp, #12]
    3162:	4313      	orrs	r3, r2
    3164:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3166:	4a03      	ldr	r2, [pc, #12]	; (3174 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3168:	9b03      	ldr	r3, [sp, #12]
    316a:	6153      	str	r3, [r2, #20]
}
    316c:	bf00      	nop
    316e:	b004      	add	sp, #16
    3170:	4770      	bx	lr
    3172:	bf00      	nop
    3174:	40064000 	.word	0x40064000

00003178 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3178:	b084      	sub	sp, #16
    317a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    317c:	4b09      	ldr	r3, [pc, #36]	; (31a4 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    317e:	699b      	ldr	r3, [r3, #24]
    3180:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3182:	9b03      	ldr	r3, [sp, #12]
    3184:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3188:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    318a:	9b01      	ldr	r3, [sp, #4]
    318c:	685b      	ldr	r3, [r3, #4]
    318e:	3b01      	subs	r3, #1
    3190:	041b      	lsls	r3, r3, #16
    3192:	9a03      	ldr	r2, [sp, #12]
    3194:	4313      	orrs	r3, r2
    3196:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3198:	4a02      	ldr	r2, [pc, #8]	; (31a4 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    319a:	9b03      	ldr	r3, [sp, #12]
    319c:	6193      	str	r3, [r2, #24]
}
    319e:	bf00      	nop
    31a0:	b004      	add	sp, #16
    31a2:	4770      	bx	lr
    31a4:	40064000 	.word	0x40064000

000031a8 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31a8:	b084      	sub	sp, #16
    31aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    31ac:	4b09      	ldr	r3, [pc, #36]	; (31d4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    31ae:	699b      	ldr	r3, [r3, #24]
    31b0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    31b2:	9b03      	ldr	r3, [sp, #12]
    31b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    31b8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    31ba:	9b01      	ldr	r3, [sp, #4]
    31bc:	685b      	ldr	r3, [r3, #4]
    31be:	3b01      	subs	r3, #1
    31c0:	011b      	lsls	r3, r3, #4
    31c2:	9a03      	ldr	r2, [sp, #12]
    31c4:	4313      	orrs	r3, r2
    31c6:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    31c8:	4a02      	ldr	r2, [pc, #8]	; (31d4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    31ca:	9b03      	ldr	r3, [sp, #12]
    31cc:	6193      	str	r3, [r2, #24]
}
    31ce:	bf00      	nop
    31d0:	b004      	add	sp, #16
    31d2:	4770      	bx	lr
    31d4:	40064000 	.word	0x40064000

000031d8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31d8:	b084      	sub	sp, #16
    31da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    31dc:	4b09      	ldr	r3, [pc, #36]	; (3204 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    31de:	699b      	ldr	r3, [r3, #24]
    31e0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    31e2:	9b03      	ldr	r3, [sp, #12]
    31e4:	f023 030f 	bic.w	r3, r3, #15
    31e8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    31ea:	9b01      	ldr	r3, [sp, #4]
    31ec:	685b      	ldr	r3, [r3, #4]
    31ee:	3b01      	subs	r3, #1
    31f0:	9a03      	ldr	r2, [sp, #12]
    31f2:	4313      	orrs	r3, r2
    31f4:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    31f6:	4a03      	ldr	r2, [pc, #12]	; (3204 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    31f8:	9b03      	ldr	r3, [sp, #12]
    31fa:	6193      	str	r3, [r2, #24]
}
    31fc:	bf00      	nop
    31fe:	b004      	add	sp, #16
    3200:	4770      	bx	lr
    3202:	bf00      	nop
    3204:	40064000 	.word	0x40064000

00003208 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3208:	b084      	sub	sp, #16
    320a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    320c:	4b09      	ldr	r3, [pc, #36]	; (3234 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    320e:	69db      	ldr	r3, [r3, #28]
    3210:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3212:	9b03      	ldr	r3, [sp, #12]
    3214:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3218:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    321a:	9b01      	ldr	r3, [sp, #4]
    321c:	685b      	ldr	r3, [r3, #4]
    321e:	3b01      	subs	r3, #1
    3220:	041b      	lsls	r3, r3, #16
    3222:	9a03      	ldr	r2, [sp, #12]
    3224:	4313      	orrs	r3, r2
    3226:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3228:	4a02      	ldr	r2, [pc, #8]	; (3234 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    322a:	9b03      	ldr	r3, [sp, #12]
    322c:	61d3      	str	r3, [r2, #28]
}
    322e:	bf00      	nop
    3230:	b004      	add	sp, #16
    3232:	4770      	bx	lr
    3234:	40064000 	.word	0x40064000

00003238 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3238:	b084      	sub	sp, #16
    323a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    323c:	4b09      	ldr	r3, [pc, #36]	; (3264 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    323e:	69db      	ldr	r3, [r3, #28]
    3240:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3242:	9b03      	ldr	r3, [sp, #12]
    3244:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3248:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    324a:	9b01      	ldr	r3, [sp, #4]
    324c:	685b      	ldr	r3, [r3, #4]
    324e:	3b01      	subs	r3, #1
    3250:	011b      	lsls	r3, r3, #4
    3252:	9a03      	ldr	r2, [sp, #12]
    3254:	4313      	orrs	r3, r2
    3256:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3258:	4a02      	ldr	r2, [pc, #8]	; (3264 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    325a:	9b03      	ldr	r3, [sp, #12]
    325c:	61d3      	str	r3, [r2, #28]
}
    325e:	bf00      	nop
    3260:	b004      	add	sp, #16
    3262:	4770      	bx	lr
    3264:	40064000 	.word	0x40064000

00003268 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3268:	b084      	sub	sp, #16
    326a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    326c:	4b09      	ldr	r3, [pc, #36]	; (3294 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    326e:	69db      	ldr	r3, [r3, #28]
    3270:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3272:	9b03      	ldr	r3, [sp, #12]
    3274:	f023 030f 	bic.w	r3, r3, #15
    3278:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    327a:	9b01      	ldr	r3, [sp, #4]
    327c:	685b      	ldr	r3, [r3, #4]
    327e:	3b01      	subs	r3, #1
    3280:	9a03      	ldr	r2, [sp, #12]
    3282:	4313      	orrs	r3, r2
    3284:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3286:	4a03      	ldr	r2, [pc, #12]	; (3294 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3288:	9b03      	ldr	r3, [sp, #12]
    328a:	61d3      	str	r3, [r2, #28]
}
    328c:	bf00      	nop
    328e:	b004      	add	sp, #16
    3290:	4770      	bx	lr
    3292:	bf00      	nop
    3294:	40064000 	.word	0x40064000

00003298 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3298:	b084      	sub	sp, #16
    329a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    329c:	4b0a      	ldr	r3, [pc, #40]	; (32c8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    329e:	685b      	ldr	r3, [r3, #4]
    32a0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    32a2:	9b03      	ldr	r3, [sp, #12]
    32a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    32a8:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    32aa:	9b01      	ldr	r3, [sp, #4]
    32ac:	685b      	ldr	r3, [r3, #4]
    32ae:	3b01      	subs	r3, #1
    32b0:	021b      	lsls	r3, r3, #8
    32b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    32b6:	9a03      	ldr	r2, [sp, #12]
    32b8:	4313      	orrs	r3, r2
    32ba:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    32bc:	4a02      	ldr	r2, [pc, #8]	; (32c8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    32be:	9b03      	ldr	r3, [sp, #12]
    32c0:	6053      	str	r3, [r2, #4]
}
    32c2:	bf00      	nop
    32c4:	b004      	add	sp, #16
    32c6:	4770      	bx	lr
    32c8:	40048000 	.word	0x40048000

000032cc <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32cc:	b084      	sub	sp, #16
    32ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    32d0:	4919      	ldr	r1, [pc, #100]	; (3338 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    32d2:	9b01      	ldr	r3, [sp, #4]
    32d4:	681a      	ldr	r2, [r3, #0]
    32d6:	4819      	ldr	r0, [pc, #100]	; (333c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    32d8:	4613      	mov	r3, r2
    32da:	00db      	lsls	r3, r3, #3
    32dc:	4413      	add	r3, r2
    32de:	4403      	add	r3, r0
    32e0:	3305      	adds	r3, #5
    32e2:	781b      	ldrb	r3, [r3, #0]
    32e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    32e8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    32ea:	9b03      	ldr	r3, [sp, #12]
    32ec:	f023 030f 	bic.w	r3, r3, #15
    32f0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    32f2:	9b01      	ldr	r3, [sp, #4]
    32f4:	685b      	ldr	r3, [r3, #4]
    32f6:	3b01      	subs	r3, #1
    32f8:	f003 0307 	and.w	r3, r3, #7
    32fc:	9a03      	ldr	r2, [sp, #12]
    32fe:	4313      	orrs	r3, r2
    3300:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3302:	9b01      	ldr	r3, [sp, #4]
    3304:	7a1b      	ldrb	r3, [r3, #8]
    3306:	3b01      	subs	r3, #1
    3308:	00db      	lsls	r3, r3, #3
    330a:	f003 0308 	and.w	r3, r3, #8
    330e:	9a03      	ldr	r2, [sp, #12]
    3310:	4313      	orrs	r3, r2
    3312:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3314:	4908      	ldr	r1, [pc, #32]	; (3338 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3316:	9b01      	ldr	r3, [sp, #4]
    3318:	681a      	ldr	r2, [r3, #0]
    331a:	4808      	ldr	r0, [pc, #32]	; (333c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    331c:	4613      	mov	r3, r2
    331e:	00db      	lsls	r3, r3, #3
    3320:	4413      	add	r3, r2
    3322:	4403      	add	r3, r0
    3324:	3305      	adds	r3, #5
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	461a      	mov	r2, r3
    332a:	9b03      	ldr	r3, [sp, #12]
    332c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3330:	bf00      	nop
    3332:	b004      	add	sp, #16
    3334:	4770      	bx	lr
    3336:	bf00      	nop
    3338:	40065000 	.word	0x40065000
    333c:	00017e04 	.word	0x00017e04

00003340 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3340:	b084      	sub	sp, #16
    3342:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3344:	4b10      	ldr	r3, [pc, #64]	; (3388 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3348:	4a0f      	ldr	r2, [pc, #60]	; (3388 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    334a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    334e:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3350:	4b0d      	ldr	r3, [pc, #52]	; (3388 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3354:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3356:	9b03      	ldr	r3, [sp, #12]
    3358:	f023 030f 	bic.w	r3, r3, #15
    335c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    335e:	9b01      	ldr	r3, [sp, #4]
    3360:	685b      	ldr	r3, [r3, #4]
    3362:	3b01      	subs	r3, #1
    3364:	005b      	lsls	r3, r3, #1
    3366:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    336a:	9b01      	ldr	r3, [sp, #4]
    336c:	7a1b      	ldrb	r3, [r3, #8]
    336e:	3b01      	subs	r3, #1
    3370:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3374:	4313      	orrs	r3, r2
    3376:	9a03      	ldr	r2, [sp, #12]
    3378:	4313      	orrs	r3, r2
    337a:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    337c:	4a02      	ldr	r2, [pc, #8]	; (3388 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    337e:	9b03      	ldr	r3, [sp, #12]
    3380:	6693      	str	r3, [r2, #104]	; 0x68
}
    3382:	bf00      	nop
    3384:	b004      	add	sp, #16
    3386:	4770      	bx	lr
    3388:	40048000 	.word	0x40048000

0000338c <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    338c:	b082      	sub	sp, #8
    338e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3390:	bf00      	nop
    3392:	b002      	add	sp, #8
    3394:	4770      	bx	lr
	...

00003398 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3398:	b082      	sub	sp, #8
    339a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    339c:	bf00      	nop
    339e:	b002      	add	sp, #8
    33a0:	4770      	bx	lr

000033a2 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    33a2:	b082      	sub	sp, #8
    33a4:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    33a6:	bf00      	nop
    33a8:	b002      	add	sp, #8
    33aa:	4770      	bx	lr

000033ac <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    33ac:	b500      	push	{lr}
    33ae:	b083      	sub	sp, #12
    33b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33b2:	9b01      	ldr	r3, [sp, #4]
    33b4:	2b00      	cmp	r3, #0
    33b6:	d002      	beq.n	33be <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    33b8:	9801      	ldr	r0, [sp, #4]
    33ba:	f000 f86a 	bl	3492 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33be:	bf00      	nop
    33c0:	b003      	add	sp, #12
    33c2:	f85d fb04 	ldr.w	pc, [sp], #4

000033c6 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    33c6:	b500      	push	{lr}
    33c8:	b083      	sub	sp, #12
    33ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33cc:	9b01      	ldr	r3, [sp, #4]
    33ce:	2b00      	cmp	r3, #0
    33d0:	d002      	beq.n	33d8 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    33d2:	9801      	ldr	r0, [sp, #4]
    33d4:	f000 f884 	bl	34e0 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    33d8:	bf00      	nop
    33da:	b003      	add	sp, #12
    33dc:	f85d fb04 	ldr.w	pc, [sp], #4

000033e0 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    33e0:	b500      	push	{lr}
    33e2:	b089      	sub	sp, #36	; 0x24
    33e4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    33e6:	2300      	movs	r3, #0
    33e8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    33ec:	9b01      	ldr	r3, [sp, #4]
    33ee:	2b00      	cmp	r3, #0
    33f0:	d031      	beq.n	3456 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    33f2:	4b1b      	ldr	r3, [pc, #108]	; (3460 <Clock_Ip_CompleteSOSC+0x80>)
    33f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33f8:	f003 0301 	and.w	r3, r3, #1
    33fc:	2b00      	cmp	r3, #0
    33fe:	d02a      	beq.n	3456 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3400:	aa03      	add	r2, sp, #12
    3402:	a904      	add	r1, sp, #16
    3404:	a805      	add	r0, sp, #20
    3406:	f24c 3350 	movw	r3, #50000	; 0xc350
    340a:	f7ff fd1d 	bl	2e48 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    340e:	4b14      	ldr	r3, [pc, #80]	; (3460 <Clock_Ip_CompleteSOSC+0x80>)
    3410:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3414:	0e1b      	lsrs	r3, r3, #24
    3416:	f003 0301 	and.w	r3, r3, #1
    341a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    341c:	9a03      	ldr	r2, [sp, #12]
    341e:	a904      	add	r1, sp, #16
    3420:	ab05      	add	r3, sp, #20
    3422:	4618      	mov	r0, r3
    3424:	f7ff fd2a 	bl	2e7c <Clock_Ip_TimeoutExpired>
    3428:	4603      	mov	r3, r0
    342a:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    342e:	9b06      	ldr	r3, [sp, #24]
    3430:	2b00      	cmp	r3, #0
    3432:	d106      	bne.n	3442 <Clock_Ip_CompleteSOSC+0x62>
    3434:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3438:	f083 0301 	eor.w	r3, r3, #1
    343c:	b2db      	uxtb	r3, r3
    343e:	2b00      	cmp	r3, #0
    3440:	d1e5      	bne.n	340e <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3442:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3446:	2b00      	cmp	r3, #0
    3448:	d005      	beq.n	3456 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    344a:	9b01      	ldr	r3, [sp, #4]
    344c:	681b      	ldr	r3, [r3, #0]
    344e:	4619      	mov	r1, r3
    3450:	2001      	movs	r0, #1
    3452:	f7ff fce9 	bl	2e28 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3456:	bf00      	nop
    3458:	b009      	add	sp, #36	; 0x24
    345a:	f85d fb04 	ldr.w	pc, [sp], #4
    345e:	bf00      	nop
    3460:	40064000 	.word	0x40064000

00003464 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3464:	b500      	push	{lr}
    3466:	b083      	sub	sp, #12
    3468:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    346a:	9801      	ldr	r0, [sp, #4]
    346c:	f000 f8c0 	bl	35f0 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3470:	bf00      	nop
    3472:	b003      	add	sp, #12
    3474:	f85d fb04 	ldr.w	pc, [sp], #4

00003478 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3478:	b500      	push	{lr}
    347a:	b083      	sub	sp, #12
    347c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    347e:	9b01      	ldr	r3, [sp, #4]
    3480:	2b00      	cmp	r3, #0
    3482:	d002      	beq.n	348a <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3484:	9801      	ldr	r0, [sp, #4]
    3486:	f000 f8c3 	bl	3610 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    348a:	bf00      	nop
    348c:	b003      	add	sp, #12
    348e:	f85d fb04 	ldr.w	pc, [sp], #4

00003492 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3492:	b082      	sub	sp, #8
    3494:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3496:	4b11      	ldr	r3, [pc, #68]	; (34dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3498:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    349c:	4a0f      	ldr	r2, [pc, #60]	; (34dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    349e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    34a2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    34a6:	4b0d      	ldr	r3, [pc, #52]	; (34dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    34ac:	4a0b      	ldr	r2, [pc, #44]	; (34dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    34b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    34b6:	4b09      	ldr	r3, [pc, #36]	; (34dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    34bc:	4a07      	ldr	r2, [pc, #28]	; (34dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    34c2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    34c6:	4b05      	ldr	r3, [pc, #20]	; (34dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    34cc:	4a03      	ldr	r2, [pc, #12]	; (34dc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34ce:	f023 0301 	bic.w	r3, r3, #1
    34d2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    34d6:	bf00      	nop
    34d8:	b002      	add	sp, #8
    34da:	4770      	bx	lr
    34dc:	40064000 	.word	0x40064000

000034e0 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    34e0:	b082      	sub	sp, #8
    34e2:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    34e4:	9b01      	ldr	r3, [sp, #4]
    34e6:	891b      	ldrh	r3, [r3, #8]
    34e8:	2b01      	cmp	r3, #1
    34ea:	d174      	bne.n	35d6 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    34ec:	9b01      	ldr	r3, [sp, #4]
    34ee:	7bdb      	ldrb	r3, [r3, #15]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d002      	beq.n	34fa <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    34f4:	2b01      	cmp	r3, #1
    34f6:	d009      	beq.n	350c <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    34f8:	e011      	b.n	351e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    34fa:	4b39      	ldr	r3, [pc, #228]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3500:	4a37      	ldr	r2, [pc, #220]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3502:	f023 0308 	bic.w	r3, r3, #8
    3506:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    350a:	e008      	b.n	351e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    350c:	4b34      	ldr	r3, [pc, #208]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    350e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3512:	4a33      	ldr	r2, [pc, #204]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3514:	f043 0308 	orr.w	r3, r3, #8
    3518:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    351c:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    351e:	4b30      	ldr	r3, [pc, #192]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3520:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3524:	4a2e      	ldr	r2, [pc, #184]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3526:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    352a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    352e:	9b01      	ldr	r3, [sp, #4]
    3530:	685b      	ldr	r3, [r3, #4]
    3532:	4a2c      	ldr	r2, [pc, #176]	; (35e4 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3534:	4293      	cmp	r3, r2
    3536:	d90d      	bls.n	3554 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3538:	9b01      	ldr	r3, [sp, #4]
    353a:	685b      	ldr	r3, [r3, #4]
    353c:	4a2a      	ldr	r2, [pc, #168]	; (35e8 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    353e:	4293      	cmp	r3, r2
    3540:	d208      	bcs.n	3554 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3542:	4b27      	ldr	r3, [pc, #156]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3544:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3548:	4a25      	ldr	r2, [pc, #148]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    354a:	f043 0320 	orr.w	r3, r3, #32
    354e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3552:	e007      	b.n	3564 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3554:	4b22      	ldr	r3, [pc, #136]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3556:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    355a:	4a21      	ldr	r2, [pc, #132]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    355c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3560:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3564:	9b01      	ldr	r3, [sp, #4]
    3566:	7b1b      	ldrb	r3, [r3, #12]
    3568:	2b00      	cmp	r3, #0
    356a:	d108      	bne.n	357e <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    356c:	4b1c      	ldr	r3, [pc, #112]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    356e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3572:	4a1b      	ldr	r2, [pc, #108]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3574:	f043 0304 	orr.w	r3, r3, #4
    3578:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    357c:	e007      	b.n	358e <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    357e:	4b18      	ldr	r3, [pc, #96]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3580:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3584:	4a16      	ldr	r2, [pc, #88]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3586:	f023 0304 	bic.w	r3, r3, #4
    358a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    358e:	9b01      	ldr	r3, [sp, #4]
    3590:	7c1b      	ldrb	r3, [r3, #16]
    3592:	2b02      	cmp	r3, #2
    3594:	d011      	beq.n	35ba <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3596:	2b02      	cmp	r3, #2
    3598:	dc14      	bgt.n	35c4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    359a:	2b00      	cmp	r3, #0
    359c:	d002      	beq.n	35a4 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    359e:	2b01      	cmp	r3, #1
    35a0:	d005      	beq.n	35ae <Clock_Ip_SetSOSC_TrustedCall+0xce>
    35a2:	e00f      	b.n	35c4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    35a4:	4b0e      	ldr	r3, [pc, #56]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35a6:	2201      	movs	r2, #1
    35a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    35ac:	e014      	b.n	35d8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    35ae:	4b0c      	ldr	r3, [pc, #48]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35b0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    35b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    35b8:	e00e      	b.n	35d8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    35ba:	4b09      	ldr	r3, [pc, #36]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35bc:	4a0b      	ldr	r2, [pc, #44]	; (35ec <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    35be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    35c2:	e009      	b.n	35d8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    35c4:	4b06      	ldr	r3, [pc, #24]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35ca:	4a05      	ldr	r2, [pc, #20]	; (35e0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35cc:	f043 0301 	orr.w	r3, r3, #1
    35d0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    35d4:	e000      	b.n	35d8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    35d6:	bf00      	nop
}
    35d8:	bf00      	nop
    35da:	b002      	add	sp, #8
    35dc:	4770      	bx	lr
    35de:	bf00      	nop
    35e0:	40064000 	.word	0x40064000
    35e4:	003d08ff 	.word	0x003d08ff
    35e8:	007a1200 	.word	0x007a1200
    35ec:	00030001 	.word	0x00030001

000035f0 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    35f0:	b082      	sub	sp, #8
    35f2:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    35f4:	4b05      	ldr	r3, [pc, #20]	; (360c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    35f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35fa:	4a04      	ldr	r2, [pc, #16]	; (360c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    35fc:	f023 0301 	bic.w	r3, r3, #1
    3600:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3604:	bf00      	nop
    3606:	b002      	add	sp, #8
    3608:	4770      	bx	lr
    360a:	bf00      	nop
    360c:	40064000 	.word	0x40064000

00003610 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3610:	b082      	sub	sp, #8
    3612:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3614:	9b01      	ldr	r3, [sp, #4]
    3616:	891b      	ldrh	r3, [r3, #8]
    3618:	2b01      	cmp	r3, #1
    361a:	d107      	bne.n	362c <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    361c:	4b05      	ldr	r3, [pc, #20]	; (3634 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    361e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3622:	4a04      	ldr	r2, [pc, #16]	; (3634 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3624:	f043 0301 	orr.w	r3, r3, #1
    3628:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    362c:	bf00      	nop
    362e:	b002      	add	sp, #8
    3630:	4770      	bx	lr
    3632:	bf00      	nop
    3634:	40064000 	.word	0x40064000

00003638 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3638:	b082      	sub	sp, #8
    363a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    363c:	bf00      	nop
    363e:	b002      	add	sp, #8
    3640:	4770      	bx	lr

00003642 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3642:	b082      	sub	sp, #8
    3644:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3646:	2300      	movs	r3, #0
}
    3648:	4618      	mov	r0, r3
    364a:	b002      	add	sp, #8
    364c:	4770      	bx	lr

0000364e <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    364e:	b082      	sub	sp, #8
    3650:	9001      	str	r0, [sp, #4]
    3652:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3654:	bf00      	nop
    3656:	b002      	add	sp, #8
    3658:	4770      	bx	lr
	...

0000365c <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    365c:	b082      	sub	sp, #8
    365e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3660:	bf00      	nop
    3662:	b002      	add	sp, #8
    3664:	4770      	bx	lr

00003666 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3666:	b082      	sub	sp, #8
    3668:	9001      	str	r0, [sp, #4]
    366a:	460b      	mov	r3, r1
    366c:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3670:	bf00      	nop
    3672:	b002      	add	sp, #8
    3674:	4770      	bx	lr

00003676 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3676:	b500      	push	{lr}
    3678:	b083      	sub	sp, #12
    367a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    367c:	9b01      	ldr	r3, [sp, #4]
    367e:	2b00      	cmp	r3, #0
    3680:	d002      	beq.n	3688 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3682:	9801      	ldr	r0, [sp, #4]
    3684:	f000 f8e7 	bl	3856 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3688:	bf00      	nop
    368a:	b003      	add	sp, #12
    368c:	f85d fb04 	ldr.w	pc, [sp], #4

00003690 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3690:	b500      	push	{lr}
    3692:	b085      	sub	sp, #20
    3694:	9001      	str	r0, [sp, #4]
    3696:	460b      	mov	r3, r1
    3698:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    369c:	9b01      	ldr	r3, [sp, #4]
    369e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    36a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    36a4:	2b00      	cmp	r3, #0
    36a6:	d003      	beq.n	36b0 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    36a8:	2300      	movs	r3, #0
    36aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    36ae:	e002      	b.n	36b6 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    36b0:	2301      	movs	r3, #1
    36b2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    36b6:	ab02      	add	r3, sp, #8
    36b8:	4618      	mov	r0, r3
    36ba:	f7ff ffdc 	bl	3676 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    36be:	bf00      	nop
    36c0:	b005      	add	sp, #20
    36c2:	f85d fb04 	ldr.w	pc, [sp], #4

000036c6 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    36c6:	b500      	push	{lr}
    36c8:	b083      	sub	sp, #12
    36ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36cc:	9b01      	ldr	r3, [sp, #4]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d002      	beq.n	36d8 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    36d2:	9801      	ldr	r0, [sp, #4]
    36d4:	f000 f8d6 	bl	3884 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36d8:	bf00      	nop
    36da:	b003      	add	sp, #12
    36dc:	f85d fb04 	ldr.w	pc, [sp], #4

000036e0 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    36e0:	b500      	push	{lr}
    36e2:	b085      	sub	sp, #20
    36e4:	9001      	str	r0, [sp, #4]
    36e6:	460b      	mov	r3, r1
    36e8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    36ec:	9b01      	ldr	r3, [sp, #4]
    36ee:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    36f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    36f4:	2b00      	cmp	r3, #0
    36f6:	d003      	beq.n	3700 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    36f8:	2300      	movs	r3, #0
    36fa:	f8ad 300c 	strh.w	r3, [sp, #12]
    36fe:	e002      	b.n	3706 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3700:	2301      	movs	r3, #1
    3702:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3706:	ab02      	add	r3, sp, #8
    3708:	4618      	mov	r0, r3
    370a:	f7ff ffdc 	bl	36c6 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    370e:	bf00      	nop
    3710:	b005      	add	sp, #20
    3712:	f85d fb04 	ldr.w	pc, [sp], #4

00003716 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3716:	b500      	push	{lr}
    3718:	b083      	sub	sp, #12
    371a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    371c:	9b01      	ldr	r3, [sp, #4]
    371e:	2b00      	cmp	r3, #0
    3720:	d002      	beq.n	3728 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3722:	9801      	ldr	r0, [sp, #4]
    3724:	f000 f8c6 	bl	38b4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3728:	bf00      	nop
    372a:	b003      	add	sp, #12
    372c:	f85d fb04 	ldr.w	pc, [sp], #4

00003730 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3730:	b500      	push	{lr}
    3732:	b085      	sub	sp, #20
    3734:	9001      	str	r0, [sp, #4]
    3736:	460b      	mov	r3, r1
    3738:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    373c:	9b01      	ldr	r3, [sp, #4]
    373e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3740:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3744:	2b00      	cmp	r3, #0
    3746:	d003      	beq.n	3750 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3748:	2300      	movs	r3, #0
    374a:	f8ad 300c 	strh.w	r3, [sp, #12]
    374e:	e002      	b.n	3756 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3750:	2301      	movs	r3, #1
    3752:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3756:	ab02      	add	r3, sp, #8
    3758:	4618      	mov	r0, r3
    375a:	f7ff ffdc 	bl	3716 <Clock_Ip_ClockSetSimClkoutEnable>
}
    375e:	bf00      	nop
    3760:	b005      	add	sp, #20
    3762:	f85d fb04 	ldr.w	pc, [sp], #4

00003766 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3766:	b500      	push	{lr}
    3768:	b083      	sub	sp, #12
    376a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    376c:	9b01      	ldr	r3, [sp, #4]
    376e:	2b00      	cmp	r3, #0
    3770:	d002      	beq.n	3778 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3772:	9801      	ldr	r0, [sp, #4]
    3774:	f000 f8b6 	bl	38e4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3778:	bf00      	nop
    377a:	b003      	add	sp, #12
    377c:	f85d fb04 	ldr.w	pc, [sp], #4

00003780 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3780:	b500      	push	{lr}
    3782:	b085      	sub	sp, #20
    3784:	9001      	str	r0, [sp, #4]
    3786:	460b      	mov	r3, r1
    3788:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    378c:	9b01      	ldr	r3, [sp, #4]
    378e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3790:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3794:	2b00      	cmp	r3, #0
    3796:	d003      	beq.n	37a0 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3798:	2300      	movs	r3, #0
    379a:	f8ad 300c 	strh.w	r3, [sp, #12]
    379e:	e002      	b.n	37a6 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37a0:	2301      	movs	r3, #1
    37a2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    37a6:	ab02      	add	r3, sp, #8
    37a8:	4618      	mov	r0, r3
    37aa:	f7ff ffdc 	bl	3766 <Clock_Ip_ClockSetPccCgcEnable>
}
    37ae:	bf00      	nop
    37b0:	b005      	add	sp, #20
    37b2:	f85d fb04 	ldr.w	pc, [sp], #4

000037b6 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    37b6:	b500      	push	{lr}
    37b8:	b083      	sub	sp, #12
    37ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37bc:	9b01      	ldr	r3, [sp, #4]
    37be:	2b00      	cmp	r3, #0
    37c0:	d002      	beq.n	37c8 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    37c2:	9801      	ldr	r0, [sp, #4]
    37c4:	f000 f8bc 	bl	3940 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37c8:	bf00      	nop
    37ca:	b003      	add	sp, #12
    37cc:	f85d fb04 	ldr.w	pc, [sp], #4

000037d0 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    37d0:	b500      	push	{lr}
    37d2:	b085      	sub	sp, #20
    37d4:	9001      	str	r0, [sp, #4]
    37d6:	460b      	mov	r3, r1
    37d8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37dc:	9b01      	ldr	r3, [sp, #4]
    37de:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    37e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37e4:	2b00      	cmp	r3, #0
    37e6:	d003      	beq.n	37f0 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    37e8:	2300      	movs	r3, #0
    37ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    37ee:	e002      	b.n	37f6 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37f0:	2301      	movs	r3, #1
    37f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    37f6:	ab02      	add	r3, sp, #8
    37f8:	4618      	mov	r0, r3
    37fa:	f7ff ffdc 	bl	37b6 <Clock_Ip_ClockSetSimGate>
}
    37fe:	bf00      	nop
    3800:	b005      	add	sp, #20
    3802:	f85d fb04 	ldr.w	pc, [sp], #4

00003806 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3806:	b500      	push	{lr}
    3808:	b083      	sub	sp, #12
    380a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    380c:	9b01      	ldr	r3, [sp, #4]
    380e:	2b00      	cmp	r3, #0
    3810:	d002      	beq.n	3818 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3812:	9801      	ldr	r0, [sp, #4]
    3814:	f000 f8c0 	bl	3998 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3818:	bf00      	nop
    381a:	b003      	add	sp, #12
    381c:	f85d fb04 	ldr.w	pc, [sp], #4

00003820 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3820:	b500      	push	{lr}
    3822:	b085      	sub	sp, #20
    3824:	9001      	str	r0, [sp, #4]
    3826:	460b      	mov	r3, r1
    3828:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    382c:	9b01      	ldr	r3, [sp, #4]
    382e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3830:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3834:	2b00      	cmp	r3, #0
    3836:	d003      	beq.n	3840 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3838:	2300      	movs	r3, #0
    383a:	f8ad 300c 	strh.w	r3, [sp, #12]
    383e:	e002      	b.n	3846 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3840:	2301      	movs	r3, #1
    3842:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3846:	ab02      	add	r3, sp, #8
    3848:	4618      	mov	r0, r3
    384a:	f7ff ffdc 	bl	3806 <Clock_Ip_ClockSetSimTraceEnable>
}
    384e:	bf00      	nop
    3850:	b005      	add	sp, #20
    3852:	f85d fb04 	ldr.w	pc, [sp], #4

00003856 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3856:	b084      	sub	sp, #16
    3858:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    385a:	4b09      	ldr	r3, [pc, #36]	; (3880 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    385c:	691b      	ldr	r3, [r3, #16]
    385e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3860:	9b03      	ldr	r3, [sp, #12]
    3862:	f023 0301 	bic.w	r3, r3, #1
    3866:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3868:	9b01      	ldr	r3, [sp, #4]
    386a:	889b      	ldrh	r3, [r3, #4]
    386c:	461a      	mov	r2, r3
    386e:	9b03      	ldr	r3, [sp, #12]
    3870:	4313      	orrs	r3, r2
    3872:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3874:	4a02      	ldr	r2, [pc, #8]	; (3880 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3876:	9b03      	ldr	r3, [sp, #12]
    3878:	6113      	str	r3, [r2, #16]
}
    387a:	bf00      	nop
    387c:	b004      	add	sp, #16
    387e:	4770      	bx	lr
    3880:	40048000 	.word	0x40048000

00003884 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3884:	b084      	sub	sp, #16
    3886:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3888:	4b09      	ldr	r3, [pc, #36]	; (38b0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    388a:	691b      	ldr	r3, [r3, #16]
    388c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    388e:	9b03      	ldr	r3, [sp, #12]
    3890:	f023 0302 	bic.w	r3, r3, #2
    3894:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3896:	9b01      	ldr	r3, [sp, #4]
    3898:	889b      	ldrh	r3, [r3, #4]
    389a:	005b      	lsls	r3, r3, #1
    389c:	9a03      	ldr	r2, [sp, #12]
    389e:	4313      	orrs	r3, r2
    38a0:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    38a2:	4a03      	ldr	r2, [pc, #12]	; (38b0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    38a4:	9b03      	ldr	r3, [sp, #12]
    38a6:	6113      	str	r3, [r2, #16]
}
    38a8:	bf00      	nop
    38aa:	b004      	add	sp, #16
    38ac:	4770      	bx	lr
    38ae:	bf00      	nop
    38b0:	40048000 	.word	0x40048000

000038b4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    38b4:	b084      	sub	sp, #16
    38b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    38b8:	4b09      	ldr	r3, [pc, #36]	; (38e0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    38ba:	685b      	ldr	r3, [r3, #4]
    38bc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    38be:	9b03      	ldr	r3, [sp, #12]
    38c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    38c4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    38c6:	9b01      	ldr	r3, [sp, #4]
    38c8:	889b      	ldrh	r3, [r3, #4]
    38ca:	02db      	lsls	r3, r3, #11
    38cc:	9a03      	ldr	r2, [sp, #12]
    38ce:	4313      	orrs	r3, r2
    38d0:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    38d2:	4a03      	ldr	r2, [pc, #12]	; (38e0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    38d4:	9b03      	ldr	r3, [sp, #12]
    38d6:	6053      	str	r3, [r2, #4]
}
    38d8:	bf00      	nop
    38da:	b004      	add	sp, #16
    38dc:	4770      	bx	lr
    38de:	bf00      	nop
    38e0:	40048000 	.word	0x40048000

000038e4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    38e4:	b084      	sub	sp, #16
    38e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    38e8:	4913      	ldr	r1, [pc, #76]	; (3938 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    38ea:	9b01      	ldr	r3, [sp, #4]
    38ec:	681a      	ldr	r2, [r3, #0]
    38ee:	4813      	ldr	r0, [pc, #76]	; (393c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    38f0:	4613      	mov	r3, r2
    38f2:	00db      	lsls	r3, r3, #3
    38f4:	4413      	add	r3, r2
    38f6:	4403      	add	r3, r0
    38f8:	3306      	adds	r3, #6
    38fa:	781b      	ldrb	r3, [r3, #0]
    38fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3900:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3902:	9b03      	ldr	r3, [sp, #12]
    3904:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3908:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    390a:	9b01      	ldr	r3, [sp, #4]
    390c:	889b      	ldrh	r3, [r3, #4]
    390e:	079b      	lsls	r3, r3, #30
    3910:	9a03      	ldr	r2, [sp, #12]
    3912:	4313      	orrs	r3, r2
    3914:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3916:	4908      	ldr	r1, [pc, #32]	; (3938 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3918:	9b01      	ldr	r3, [sp, #4]
    391a:	681a      	ldr	r2, [r3, #0]
    391c:	4807      	ldr	r0, [pc, #28]	; (393c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    391e:	4613      	mov	r3, r2
    3920:	00db      	lsls	r3, r3, #3
    3922:	4413      	add	r3, r2
    3924:	4403      	add	r3, r0
    3926:	3306      	adds	r3, #6
    3928:	781b      	ldrb	r3, [r3, #0]
    392a:	461a      	mov	r2, r3
    392c:	9b03      	ldr	r3, [sp, #12]
    392e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3932:	bf00      	nop
    3934:	b004      	add	sp, #16
    3936:	4770      	bx	lr
    3938:	40065000 	.word	0x40065000
    393c:	00017e04 	.word	0x00017e04

00003940 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3940:	b086      	sub	sp, #24
    3942:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3944:	9b01      	ldr	r3, [sp, #4]
    3946:	889b      	ldrh	r3, [r3, #4]
    3948:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    394a:	9b01      	ldr	r3, [sp, #4]
    394c:	681a      	ldr	r2, [r3, #0]
    394e:	4910      	ldr	r1, [pc, #64]	; (3990 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3950:	4613      	mov	r3, r2
    3952:	00db      	lsls	r3, r3, #3
    3954:	4413      	add	r3, r2
    3956:	440b      	add	r3, r1
    3958:	3306      	adds	r3, #6
    395a:	781b      	ldrb	r3, [r3, #0]
    395c:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    395e:	4b0d      	ldr	r3, [pc, #52]	; (3994 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3962:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3964:	2201      	movs	r2, #1
    3966:	9b04      	ldr	r3, [sp, #16]
    3968:	fa02 f303 	lsl.w	r3, r2, r3
    396c:	43db      	mvns	r3, r3
    396e:	9a03      	ldr	r2, [sp, #12]
    3970:	4013      	ands	r3, r2
    3972:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3974:	9a05      	ldr	r2, [sp, #20]
    3976:	9b04      	ldr	r3, [sp, #16]
    3978:	fa02 f303 	lsl.w	r3, r2, r3
    397c:	9a03      	ldr	r2, [sp, #12]
    397e:	4313      	orrs	r3, r2
    3980:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3982:	4a04      	ldr	r2, [pc, #16]	; (3994 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3984:	9b03      	ldr	r3, [sp, #12]
    3986:	6413      	str	r3, [r2, #64]	; 0x40
}
    3988:	bf00      	nop
    398a:	b006      	add	sp, #24
    398c:	4770      	bx	lr
    398e:	bf00      	nop
    3990:	00017e04 	.word	0x00017e04
    3994:	40048000 	.word	0x40048000

00003998 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3998:	b084      	sub	sp, #16
    399a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    399c:	4b0a      	ldr	r3, [pc, #40]	; (39c8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    399e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    39a0:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    39a2:	9b01      	ldr	r3, [sp, #4]
    39a4:	889b      	ldrh	r3, [r3, #4]
    39a6:	2b01      	cmp	r3, #1
    39a8:	d104      	bne.n	39b4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    39aa:	9b03      	ldr	r3, [sp, #12]
    39ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    39b0:	9303      	str	r3, [sp, #12]
    39b2:	e003      	b.n	39bc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    39b4:	9b03      	ldr	r3, [sp, #12]
    39b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    39ba:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    39bc:	4a02      	ldr	r2, [pc, #8]	; (39c8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    39be:	9b03      	ldr	r3, [sp, #12]
    39c0:	6693      	str	r3, [r2, #104]	; 0x68
}
    39c2:	bf00      	nop
    39c4:	b004      	add	sp, #16
    39c6:	4770      	bx	lr
    39c8:	40048000 	.word	0x40048000

000039cc <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    39cc:	b082      	sub	sp, #8
    39ce:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    39d0:	bf00      	nop
    39d2:	b002      	add	sp, #8
    39d4:	4770      	bx	lr

000039d6 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    39d6:	b082      	sub	sp, #8
    39d8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    39da:	bf00      	nop
    39dc:	b002      	add	sp, #8
    39de:	4770      	bx	lr

000039e0 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    39e0:	b500      	push	{lr}
    39e2:	b083      	sub	sp, #12
    39e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39e6:	9b01      	ldr	r3, [sp, #4]
    39e8:	2b00      	cmp	r3, #0
    39ea:	d002      	beq.n	39f2 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    39ec:	9801      	ldr	r0, [sp, #4]
    39ee:	f000 f8d1 	bl	3b94 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39f2:	bf00      	nop
    39f4:	b003      	add	sp, #12
    39f6:	f85d fb04 	ldr.w	pc, [sp], #4

000039fa <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    39fa:	b500      	push	{lr}
    39fc:	b083      	sub	sp, #12
    39fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a00:	9b01      	ldr	r3, [sp, #4]
    3a02:	2b00      	cmp	r3, #0
    3a04:	d002      	beq.n	3a0c <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3a06:	9801      	ldr	r0, [sp, #4]
    3a08:	f000 f950 	bl	3cac <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a0c:	bf00      	nop
    3a0e:	b003      	add	sp, #12
    3a10:	f85d fb04 	ldr.w	pc, [sp], #4

00003a14 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3a14:	b500      	push	{lr}
    3a16:	b083      	sub	sp, #12
    3a18:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3a1a:	9801      	ldr	r0, [sp, #4]
    3a1c:	f000 f98e 	bl	3d3c <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3a20:	bf00      	nop
    3a22:	b003      	add	sp, #12
    3a24:	f85d fb04 	ldr.w	pc, [sp], #4

00003a28 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3a28:	b500      	push	{lr}
    3a2a:	b083      	sub	sp, #12
    3a2c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a2e:	9b01      	ldr	r3, [sp, #4]
    3a30:	2b00      	cmp	r3, #0
    3a32:	d002      	beq.n	3a3a <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3a34:	9801      	ldr	r0, [sp, #4]
    3a36:	f000 f999 	bl	3d6c <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a3a:	bf00      	nop
    3a3c:	b003      	add	sp, #12
    3a3e:	f85d fb04 	ldr.w	pc, [sp], #4

00003a42 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3a42:	b500      	push	{lr}
    3a44:	b083      	sub	sp, #12
    3a46:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a48:	9b01      	ldr	r3, [sp, #4]
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d002      	beq.n	3a54 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3a4e:	9801      	ldr	r0, [sp, #4]
    3a50:	f000 f9b0 	bl	3db4 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a54:	bf00      	nop
    3a56:	b003      	add	sp, #12
    3a58:	f85d fb04 	ldr.w	pc, [sp], #4

00003a5c <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3a5c:	b500      	push	{lr}
    3a5e:	b083      	sub	sp, #12
    3a60:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3a62:	9801      	ldr	r0, [sp, #4]
    3a64:	f000 f9ba 	bl	3ddc <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3a68:	bf00      	nop
    3a6a:	b003      	add	sp, #12
    3a6c:	f85d fb04 	ldr.w	pc, [sp], #4

00003a70 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3a70:	b500      	push	{lr}
    3a72:	b083      	sub	sp, #12
    3a74:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a76:	9b01      	ldr	r3, [sp, #4]
    3a78:	2b00      	cmp	r3, #0
    3a7a:	d002      	beq.n	3a82 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3a7c:	9801      	ldr	r0, [sp, #4]
    3a7e:	f000 f9bd 	bl	3dfc <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a82:	bf00      	nop
    3a84:	b003      	add	sp, #12
    3a86:	f85d fb04 	ldr.w	pc, [sp], #4

00003a8a <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3a8a:	b500      	push	{lr}
    3a8c:	b083      	sub	sp, #12
    3a8e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a90:	9b01      	ldr	r3, [sp, #4]
    3a92:	2b00      	cmp	r3, #0
    3a94:	d002      	beq.n	3a9c <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3a96:	9801      	ldr	r0, [sp, #4]
    3a98:	f000 f9d4 	bl	3e44 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a9c:	bf00      	nop
    3a9e:	b003      	add	sp, #12
    3aa0:	f85d fb04 	ldr.w	pc, [sp], #4

00003aa4 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3aa4:	b500      	push	{lr}
    3aa6:	b083      	sub	sp, #12
    3aa8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3aaa:	9801      	ldr	r0, [sp, #4]
    3aac:	f000 f9de 	bl	3e6c <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3ab0:	bf00      	nop
    3ab2:	b003      	add	sp, #12
    3ab4:	f85d fb04 	ldr.w	pc, [sp], #4

00003ab8 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3ab8:	b500      	push	{lr}
    3aba:	b089      	sub	sp, #36	; 0x24
    3abc:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3abe:	2300      	movs	r3, #0
    3ac0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3ac4:	4b20      	ldr	r3, [pc, #128]	; (3b48 <SetInputSouceSytemClock+0x90>)
    3ac6:	695b      	ldr	r3, [r3, #20]
    3ac8:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3aca:	9b06      	ldr	r3, [sp, #24]
    3acc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3ad0:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3ad2:	9b01      	ldr	r3, [sp, #4]
    3ad4:	061b      	lsls	r3, r3, #24
    3ad6:	9a06      	ldr	r2, [sp, #24]
    3ad8:	4313      	orrs	r3, r2
    3ada:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3adc:	4a1a      	ldr	r2, [pc, #104]	; (3b48 <SetInputSouceSytemClock+0x90>)
    3ade:	9b06      	ldr	r3, [sp, #24]
    3ae0:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3ae2:	aa02      	add	r2, sp, #8
    3ae4:	a903      	add	r1, sp, #12
    3ae6:	a804      	add	r0, sp, #16
    3ae8:	f24c 3350 	movw	r3, #50000	; 0xc350
    3aec:	f7ff f9ac 	bl	2e48 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3af0:	4b15      	ldr	r3, [pc, #84]	; (3b48 <SetInputSouceSytemClock+0x90>)
    3af2:	691b      	ldr	r3, [r3, #16]
    3af4:	0e1b      	lsrs	r3, r3, #24
    3af6:	f003 030f 	and.w	r3, r3, #15
    3afa:	9a01      	ldr	r2, [sp, #4]
    3afc:	429a      	cmp	r2, r3
    3afe:	bf0c      	ite	eq
    3b00:	2301      	moveq	r3, #1
    3b02:	2300      	movne	r3, #0
    3b04:	b2db      	uxtb	r3, r3
    3b06:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3b08:	9a02      	ldr	r2, [sp, #8]
    3b0a:	a903      	add	r1, sp, #12
    3b0c:	ab04      	add	r3, sp, #16
    3b0e:	4618      	mov	r0, r3
    3b10:	f7ff f9b4 	bl	2e7c <Clock_Ip_TimeoutExpired>
    3b14:	4603      	mov	r3, r0
    3b16:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3b1a:	9b05      	ldr	r3, [sp, #20]
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d106      	bne.n	3b2e <SetInputSouceSytemClock+0x76>
    3b20:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3b24:	f083 0301 	eor.w	r3, r3, #1
    3b28:	b2db      	uxtb	r3, r3
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d1e0      	bne.n	3af0 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3b2e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3b32:	2b00      	cmp	r3, #0
    3b34:	d003      	beq.n	3b3e <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3b36:	2105      	movs	r1, #5
    3b38:	2001      	movs	r0, #1
    3b3a:	f7ff f975 	bl	2e28 <Clock_Ip_ReportClockErrors>
    }
}
    3b3e:	bf00      	nop
    3b40:	b009      	add	sp, #36	; 0x24
    3b42:	f85d fb04 	ldr.w	pc, [sp], #4
    3b46:	bf00      	nop
    3b48:	40064000 	.word	0x40064000

00003b4c <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3b4c:	b500      	push	{lr}
    3b4e:	b083      	sub	sp, #12
    3b50:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b52:	9b01      	ldr	r3, [sp, #4]
    3b54:	2b00      	cmp	r3, #0
    3b56:	d002      	beq.n	3b5e <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3b58:	9801      	ldr	r0, [sp, #4]
    3b5a:	f000 f997 	bl	3e8c <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b5e:	bf00      	nop
    3b60:	b003      	add	sp, #12
    3b62:	f85d fb04 	ldr.w	pc, [sp], #4

00003b66 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3b66:	b500      	push	{lr}
    3b68:	b083      	sub	sp, #12
    3b6a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b6c:	9b01      	ldr	r3, [sp, #4]
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d002      	beq.n	3b78 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3b72:	9801      	ldr	r0, [sp, #4]
    3b74:	f000 fa7e 	bl	4074 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b78:	bf00      	nop
    3b7a:	b003      	add	sp, #12
    3b7c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b80 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3b80:	b500      	push	{lr}
    3b82:	b083      	sub	sp, #12
    3b84:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3b86:	9801      	ldr	r0, [sp, #4]
    3b88:	f000 fab8 	bl	40fc <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b8c:	bf00      	nop
    3b8e:	b003      	add	sp, #12
    3b90:	f85d fb04 	ldr.w	pc, [sp], #4

00003b94 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b94:	b500      	push	{lr}
    3b96:	b08b      	sub	sp, #44	; 0x2c
    3b98:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3b9a:	2300      	movs	r3, #0
    3b9c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3ba0:	9b01      	ldr	r3, [sp, #4]
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d10b      	bne.n	3bbe <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3ba6:	2305      	movs	r3, #5
    3ba8:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3baa:	2301      	movs	r3, #1
    3bac:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3bb0:	2301      	movs	r3, #1
    3bb2:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3bb6:	2301      	movs	r3, #1
    3bb8:	f88d 3010 	strb.w	r3, [sp, #16]
    3bbc:	e00e      	b.n	3bdc <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3bbe:	9b01      	ldr	r3, [sp, #4]
    3bc0:	681b      	ldr	r3, [r3, #0]
    3bc2:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3bc4:	9b01      	ldr	r3, [sp, #4]
    3bc6:	79db      	ldrb	r3, [r3, #7]
    3bc8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3bcc:	9b01      	ldr	r3, [sp, #4]
    3bce:	889b      	ldrh	r3, [r3, #4]
    3bd0:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3bd4:	9b01      	ldr	r3, [sp, #4]
    3bd6:	7a1b      	ldrb	r3, [r3, #8]
    3bd8:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3bdc:	4b32      	ldr	r3, [pc, #200]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3be2:	4a31      	ldr	r2, [pc, #196]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3be4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3be8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3bec:	4b2e      	ldr	r3, [pc, #184]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bf2:	4a2d      	ldr	r2, [pc, #180]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bf4:	f023 0301 	bic.w	r3, r3, #1
    3bf8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3bfc:	4b2a      	ldr	r3, [pc, #168]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c02:	4a29      	ldr	r2, [pc, #164]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c04:	f023 0304 	bic.w	r3, r3, #4
    3c08:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3c0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3c10:	2b01      	cmp	r3, #1
    3c12:	d144      	bne.n	3c9e <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3c14:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3c18:	4a23      	ldr	r2, [pc, #140]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c1a:	f003 0301 	and.w	r3, r3, #1
    3c1e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3c22:	4b21      	ldr	r3, [pc, #132]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c28:	4a1f      	ldr	r2, [pc, #124]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c2a:	f043 0301 	orr.w	r3, r3, #1
    3c2e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3c32:	4b1d      	ldr	r3, [pc, #116]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3c38:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3c3c:	009b      	lsls	r3, r3, #2
    3c3e:	f003 0304 	and.w	r3, r3, #4
    3c42:	4919      	ldr	r1, [pc, #100]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c44:	4313      	orrs	r3, r2
    3c46:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c4a:	aa05      	add	r2, sp, #20
    3c4c:	a906      	add	r1, sp, #24
    3c4e:	a807      	add	r0, sp, #28
    3c50:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c54:	f7ff f8f8 	bl	2e48 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3c58:	4b13      	ldr	r3, [pc, #76]	; (3ca8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c5e:	0e1b      	lsrs	r3, r3, #24
    3c60:	f003 0301 	and.w	r3, r3, #1
    3c64:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c66:	9a05      	ldr	r2, [sp, #20]
    3c68:	a906      	add	r1, sp, #24
    3c6a:	ab07      	add	r3, sp, #28
    3c6c:	4618      	mov	r0, r3
    3c6e:	f7ff f905 	bl	2e7c <Clock_Ip_TimeoutExpired>
    3c72:	4603      	mov	r3, r0
    3c74:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3c78:	9b08      	ldr	r3, [sp, #32]
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	d106      	bne.n	3c8c <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3c7e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3c82:	f083 0301 	eor.w	r3, r3, #1
    3c86:	b2db      	uxtb	r3, r3
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d1e5      	bne.n	3c58 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3c8c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3c90:	2b00      	cmp	r3, #0
    3c92:	d004      	beq.n	3c9e <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3c94:	9b02      	ldr	r3, [sp, #8]
    3c96:	4619      	mov	r1, r3
    3c98:	2001      	movs	r0, #1
    3c9a:	f7ff f8c5 	bl	2e28 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3c9e:	bf00      	nop
    3ca0:	b00b      	add	sp, #44	; 0x2c
    3ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ca6:	bf00      	nop
    3ca8:	40064000 	.word	0x40064000

00003cac <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3cac:	b500      	push	{lr}
    3cae:	b089      	sub	sp, #36	; 0x24
    3cb0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3cb2:	2300      	movs	r3, #0
    3cb4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3cb8:	4b1f      	ldr	r3, [pc, #124]	; (3d38 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3cba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cbe:	4a1e      	ldr	r2, [pc, #120]	; (3d38 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3cc0:	f043 0301 	orr.w	r3, r3, #1
    3cc4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3cc8:	4b1b      	ldr	r3, [pc, #108]	; (3d38 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3cca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cce:	4a1a      	ldr	r2, [pc, #104]	; (3d38 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3cd0:	f043 0304 	orr.w	r3, r3, #4
    3cd4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3cd8:	aa03      	add	r2, sp, #12
    3cda:	a904      	add	r1, sp, #16
    3cdc:	a805      	add	r0, sp, #20
    3cde:	f24c 3350 	movw	r3, #50000	; 0xc350
    3ce2:	f7ff f8b1 	bl	2e48 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3ce6:	4b14      	ldr	r3, [pc, #80]	; (3d38 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cec:	0e1b      	lsrs	r3, r3, #24
    3cee:	f003 0301 	and.w	r3, r3, #1
    3cf2:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3cf4:	9a03      	ldr	r2, [sp, #12]
    3cf6:	a904      	add	r1, sp, #16
    3cf8:	ab05      	add	r3, sp, #20
    3cfa:	4618      	mov	r0, r3
    3cfc:	f7ff f8be 	bl	2e7c <Clock_Ip_TimeoutExpired>
    3d00:	4603      	mov	r3, r0
    3d02:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d06:	9b06      	ldr	r3, [sp, #24]
    3d08:	2b00      	cmp	r3, #0
    3d0a:	d106      	bne.n	3d1a <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3d0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d10:	f083 0301 	eor.w	r3, r3, #1
    3d14:	b2db      	uxtb	r3, r3
    3d16:	2b00      	cmp	r3, #0
    3d18:	d1e5      	bne.n	3ce6 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3d1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d005      	beq.n	3d2e <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d22:	9b01      	ldr	r3, [sp, #4]
    3d24:	681b      	ldr	r3, [r3, #0]
    3d26:	4619      	mov	r1, r3
    3d28:	2001      	movs	r0, #1
    3d2a:	f7ff f87d 	bl	2e28 <Clock_Ip_ReportClockErrors>
    }
}
    3d2e:	bf00      	nop
    3d30:	b009      	add	sp, #36	; 0x24
    3d32:	f85d fb04 	ldr.w	pc, [sp], #4
    3d36:	bf00      	nop
    3d38:	40064000 	.word	0x40064000

00003d3c <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3d3c:	b082      	sub	sp, #8
    3d3e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3d40:	4b09      	ldr	r3, [pc, #36]	; (3d68 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d46:	4a08      	ldr	r2, [pc, #32]	; (3d68 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d48:	f023 0301 	bic.w	r3, r3, #1
    3d4c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d50:	4b05      	ldr	r3, [pc, #20]	; (3d68 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d56:	4a04      	ldr	r2, [pc, #16]	; (3d68 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d58:	f023 0304 	bic.w	r3, r3, #4
    3d5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3d60:	bf00      	nop
    3d62:	b002      	add	sp, #8
    3d64:	4770      	bx	lr
    3d66:	bf00      	nop
    3d68:	40064000 	.word	0x40064000

00003d6c <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d6c:	b082      	sub	sp, #8
    3d6e:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3d70:	4b0f      	ldr	r3, [pc, #60]	; (3db0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d76:	4a0e      	ldr	r2, [pc, #56]	; (3db0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3d7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d80:	4b0b      	ldr	r3, [pc, #44]	; (3db0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d86:	4a0a      	ldr	r2, [pc, #40]	; (3db0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d88:	f023 0304 	bic.w	r3, r3, #4
    3d8c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3d90:	4b07      	ldr	r3, [pc, #28]	; (3db0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d92:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3d96:	9b01      	ldr	r3, [sp, #4]
    3d98:	7a1b      	ldrb	r3, [r3, #8]
    3d9a:	009b      	lsls	r3, r3, #2
    3d9c:	f003 0304 	and.w	r3, r3, #4
    3da0:	4903      	ldr	r1, [pc, #12]	; (3db0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3da2:	4313      	orrs	r3, r2
    3da4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3da8:	bf00      	nop
    3daa:	b002      	add	sp, #8
    3dac:	4770      	bx	lr
    3dae:	bf00      	nop
    3db0:	40064000 	.word	0x40064000

00003db4 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3db4:	b082      	sub	sp, #8
    3db6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3db8:	9b01      	ldr	r3, [sp, #4]
    3dba:	889b      	ldrh	r3, [r3, #4]
    3dbc:	2b01      	cmp	r3, #1
    3dbe:	d107      	bne.n	3dd0 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3dc0:	4b05      	ldr	r3, [pc, #20]	; (3dd8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3dc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dc6:	4a04      	ldr	r2, [pc, #16]	; (3dd8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3dc8:	f043 0304 	orr.w	r3, r3, #4
    3dcc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3dd0:	bf00      	nop
    3dd2:	b002      	add	sp, #8
    3dd4:	4770      	bx	lr
    3dd6:	bf00      	nop
    3dd8:	40064000 	.word	0x40064000

00003ddc <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3ddc:	b082      	sub	sp, #8
    3dde:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3de0:	4b05      	ldr	r3, [pc, #20]	; (3df8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3de2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3de6:	4a04      	ldr	r2, [pc, #16]	; (3df8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3de8:	f023 0304 	bic.w	r3, r3, #4
    3dec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3df0:	bf00      	nop
    3df2:	b002      	add	sp, #8
    3df4:	4770      	bx	lr
    3df6:	bf00      	nop
    3df8:	40064000 	.word	0x40064000

00003dfc <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3dfc:	b082      	sub	sp, #8
    3dfe:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3e00:	4b0f      	ldr	r3, [pc, #60]	; (3e40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e06:	4a0e      	ldr	r2, [pc, #56]	; (3e40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3e10:	4b0b      	ldr	r3, [pc, #44]	; (3e40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e16:	4a0a      	ldr	r2, [pc, #40]	; (3e40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e18:	f023 0302 	bic.w	r3, r3, #2
    3e1c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3e20:	4b07      	ldr	r3, [pc, #28]	; (3e40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3e26:	9b01      	ldr	r3, [sp, #4]
    3e28:	7a5b      	ldrb	r3, [r3, #9]
    3e2a:	005b      	lsls	r3, r3, #1
    3e2c:	f003 0302 	and.w	r3, r3, #2
    3e30:	4903      	ldr	r1, [pc, #12]	; (3e40 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e32:	4313      	orrs	r3, r2
    3e34:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3e38:	bf00      	nop
    3e3a:	b002      	add	sp, #8
    3e3c:	4770      	bx	lr
    3e3e:	bf00      	nop
    3e40:	40064000 	.word	0x40064000

00003e44 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e44:	b082      	sub	sp, #8
    3e46:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3e48:	9b01      	ldr	r3, [sp, #4]
    3e4a:	889b      	ldrh	r3, [r3, #4]
    3e4c:	2b01      	cmp	r3, #1
    3e4e:	d107      	bne.n	3e60 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3e50:	4b05      	ldr	r3, [pc, #20]	; (3e68 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3e52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e56:	4a04      	ldr	r2, [pc, #16]	; (3e68 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3e58:	f043 0302 	orr.w	r3, r3, #2
    3e5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3e60:	bf00      	nop
    3e62:	b002      	add	sp, #8
    3e64:	4770      	bx	lr
    3e66:	bf00      	nop
    3e68:	40064000 	.word	0x40064000

00003e6c <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3e6c:	b082      	sub	sp, #8
    3e6e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3e70:	4b05      	ldr	r3, [pc, #20]	; (3e88 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e76:	4a04      	ldr	r2, [pc, #16]	; (3e88 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3e78:	f023 0302 	bic.w	r3, r3, #2
    3e7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3e80:	bf00      	nop
    3e82:	b002      	add	sp, #8
    3e84:	4770      	bx	lr
    3e86:	bf00      	nop
    3e88:	40064000 	.word	0x40064000

00003e8c <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e8c:	b500      	push	{lr}
    3e8e:	b08b      	sub	sp, #44	; 0x2c
    3e90:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3e92:	9b01      	ldr	r3, [sp, #4]
    3e94:	681a      	ldr	r2, [r3, #0]
    3e96:	4975      	ldr	r1, [pc, #468]	; (406c <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3e98:	4613      	mov	r3, r2
    3e9a:	00db      	lsls	r3, r3, #3
    3e9c:	4413      	add	r3, r2
    3e9e:	440b      	add	r3, r1
    3ea0:	781b      	ldrb	r3, [r3, #0]
    3ea2:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3ea4:	2300      	movs	r3, #0
    3ea6:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3eaa:	2300      	movs	r3, #0
    3eac:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3eb0:	4b6f      	ldr	r3, [pc, #444]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3eb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3eb6:	4a6e      	ldr	r2, [pc, #440]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3eb8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ebc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3ec0:	4b6b      	ldr	r3, [pc, #428]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ec2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d07d      	beq.n	3fca <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3ece:	9b01      	ldr	r3, [sp, #4]
    3ed0:	79db      	ldrb	r3, [r3, #7]
    3ed2:	461a      	mov	r2, r3
    3ed4:	4b66      	ldr	r3, [pc, #408]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ed6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3eda:	f003 0303 	and.w	r3, r3, #3
    3ede:	429a      	cmp	r2, r3
    3ee0:	d10b      	bne.n	3efa <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3ee2:	9b01      	ldr	r3, [sp, #4]
    3ee4:	799b      	ldrb	r3, [r3, #6]
    3ee6:	461a      	mov	r2, r3
    3ee8:	4b61      	ldr	r3, [pc, #388]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3eea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3eee:	08db      	lsrs	r3, r3, #3
    3ef0:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3ef4:	429a      	cmp	r2, r3
    3ef6:	f000 80b4 	beq.w	4062 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3efa:	4b5d      	ldr	r3, [pc, #372]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3efc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f00:	f003 0301 	and.w	r3, r3, #1
    3f04:	2b00      	cmp	r3, #0
    3f06:	d105      	bne.n	3f14 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3f08:	2301      	movs	r3, #1
    3f0a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3f0e:	2000      	movs	r0, #0
    3f10:	f7ff fd66 	bl	39e0 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3f14:	2002      	movs	r0, #2
    3f16:	f7ff fdcf 	bl	3ab8 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3f1a:	4b55      	ldr	r3, [pc, #340]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f1c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f20:	4a53      	ldr	r2, [pc, #332]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f22:	f023 0301 	bic.w	r3, r3, #1
    3f26:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3f2a:	9b01      	ldr	r3, [sp, #4]
    3f2c:	889b      	ldrh	r3, [r3, #4]
    3f2e:	2b01      	cmp	r3, #1
    3f30:	f040 8097 	bne.w	4062 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3f34:	9b01      	ldr	r3, [sp, #4]
    3f36:	79db      	ldrb	r3, [r3, #7]
    3f38:	4a4d      	ldr	r2, [pc, #308]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f3a:	f003 0303 	and.w	r3, r3, #3
    3f3e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3f42:	4b4b      	ldr	r3, [pc, #300]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f44:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3f48:	9b01      	ldr	r3, [sp, #4]
    3f4a:	799b      	ldrb	r3, [r3, #6]
    3f4c:	00db      	lsls	r3, r3, #3
    3f4e:	f003 0308 	and.w	r3, r3, #8
    3f52:	4313      	orrs	r3, r2
    3f54:	4a46      	ldr	r2, [pc, #280]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f56:	f043 0301 	orr.w	r3, r3, #1
    3f5a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f5e:	aa03      	add	r2, sp, #12
    3f60:	a904      	add	r1, sp, #16
    3f62:	a805      	add	r0, sp, #20
    3f64:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f68:	f7fe ff6e 	bl	2e48 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3f6c:	4b40      	ldr	r3, [pc, #256]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f72:	0e1b      	lsrs	r3, r3, #24
    3f74:	f003 0301 	and.w	r3, r3, #1
    3f78:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f7a:	9a03      	ldr	r2, [sp, #12]
    3f7c:	a904      	add	r1, sp, #16
    3f7e:	ab05      	add	r3, sp, #20
    3f80:	4618      	mov	r0, r3
    3f82:	f7fe ff7b 	bl	2e7c <Clock_Ip_TimeoutExpired>
    3f86:	4603      	mov	r3, r0
    3f88:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3f8c:	9b06      	ldr	r3, [sp, #24]
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d106      	bne.n	3fa0 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3f92:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3f96:	f083 0301 	eor.w	r3, r3, #1
    3f9a:	b2db      	uxtb	r3, r3
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	d1e5      	bne.n	3f6c <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3fa0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3fa4:	2b00      	cmp	r3, #0
    3fa6:	d005      	beq.n	3fb4 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3fa8:	9b01      	ldr	r3, [sp, #4]
    3faa:	681b      	ldr	r3, [r3, #0]
    3fac:	4619      	mov	r1, r3
    3fae:	2001      	movs	r0, #1
    3fb0:	f7fe ff3a 	bl	2e28 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3fb4:	2003      	movs	r0, #3
    3fb6:	f7ff fd7f 	bl	3ab8 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3fba:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d04f      	beq.n	4062 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3fc2:	2002      	movs	r0, #2
    3fc4:	f7ff fd26 	bl	3a14 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3fc8:	e04b      	b.n	4062 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3fca:	4b29      	ldr	r3, [pc, #164]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fcc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fd0:	4a27      	ldr	r2, [pc, #156]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fd2:	f023 0301 	bic.w	r3, r3, #1
    3fd6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3fda:	9b01      	ldr	r3, [sp, #4]
    3fdc:	889b      	ldrh	r3, [r3, #4]
    3fde:	2b01      	cmp	r3, #1
    3fe0:	d13f      	bne.n	4062 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3fe2:	9b01      	ldr	r3, [sp, #4]
    3fe4:	79db      	ldrb	r3, [r3, #7]
    3fe6:	4a22      	ldr	r2, [pc, #136]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fe8:	f003 0303 	and.w	r3, r3, #3
    3fec:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3ff0:	4b1f      	ldr	r3, [pc, #124]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ff2:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3ff6:	9b01      	ldr	r3, [sp, #4]
    3ff8:	799b      	ldrb	r3, [r3, #6]
    3ffa:	00db      	lsls	r3, r3, #3
    3ffc:	f003 0308 	and.w	r3, r3, #8
    4000:	4313      	orrs	r3, r2
    4002:	4a1b      	ldr	r2, [pc, #108]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4004:	f043 0301 	orr.w	r3, r3, #1
    4008:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    400c:	aa03      	add	r2, sp, #12
    400e:	a904      	add	r1, sp, #16
    4010:	a805      	add	r0, sp, #20
    4012:	f24c 3350 	movw	r3, #50000	; 0xc350
    4016:	f7fe ff17 	bl	2e48 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    401a:	4b15      	ldr	r3, [pc, #84]	; (4070 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    401c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4020:	0e1b      	lsrs	r3, r3, #24
    4022:	f003 0301 	and.w	r3, r3, #1
    4026:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4028:	9a03      	ldr	r2, [sp, #12]
    402a:	a904      	add	r1, sp, #16
    402c:	ab05      	add	r3, sp, #20
    402e:	4618      	mov	r0, r3
    4030:	f7fe ff24 	bl	2e7c <Clock_Ip_TimeoutExpired>
    4034:	4603      	mov	r3, r0
    4036:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    403a:	9b06      	ldr	r3, [sp, #24]
    403c:	2b00      	cmp	r3, #0
    403e:	d106      	bne.n	404e <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    4040:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4044:	f083 0301 	eor.w	r3, r3, #1
    4048:	b2db      	uxtb	r3, r3
    404a:	2b00      	cmp	r3, #0
    404c:	d1e5      	bne.n	401a <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    404e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4052:	2b00      	cmp	r3, #0
    4054:	d005      	beq.n	4062 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4056:	9b01      	ldr	r3, [sp, #4]
    4058:	681b      	ldr	r3, [r3, #0]
    405a:	4619      	mov	r1, r3
    405c:	2001      	movs	r0, #1
    405e:	f7fe fee3 	bl	2e28 <Clock_Ip_ReportClockErrors>
}
    4062:	bf00      	nop
    4064:	b00b      	add	sp, #44	; 0x2c
    4066:	f85d fb04 	ldr.w	pc, [sp], #4
    406a:	bf00      	nop
    406c:	00017e04 	.word	0x00017e04
    4070:	40064000 	.word	0x40064000

00004074 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4074:	b500      	push	{lr}
    4076:	b089      	sub	sp, #36	; 0x24
    4078:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    407a:	2300      	movs	r3, #0
    407c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4080:	9b01      	ldr	r3, [sp, #4]
    4082:	889b      	ldrh	r3, [r3, #4]
    4084:	2b01      	cmp	r3, #1
    4086:	d132      	bne.n	40ee <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4088:	4b1b      	ldr	r3, [pc, #108]	; (40f8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    408a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    408e:	4a1a      	ldr	r2, [pc, #104]	; (40f8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4090:	f043 0301 	orr.w	r3, r3, #1
    4094:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4098:	aa03      	add	r2, sp, #12
    409a:	a904      	add	r1, sp, #16
    409c:	a805      	add	r0, sp, #20
    409e:	f24c 3350 	movw	r3, #50000	; 0xc350
    40a2:	f7fe fed1 	bl	2e48 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    40a6:	4b14      	ldr	r3, [pc, #80]	; (40f8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    40a8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40ac:	0e1b      	lsrs	r3, r3, #24
    40ae:	f003 0301 	and.w	r3, r3, #1
    40b2:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    40b4:	9a03      	ldr	r2, [sp, #12]
    40b6:	a904      	add	r1, sp, #16
    40b8:	ab05      	add	r3, sp, #20
    40ba:	4618      	mov	r0, r3
    40bc:	f7fe fede 	bl	2e7c <Clock_Ip_TimeoutExpired>
    40c0:	4603      	mov	r3, r0
    40c2:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    40c6:	9b06      	ldr	r3, [sp, #24]
    40c8:	2b00      	cmp	r3, #0
    40ca:	d106      	bne.n	40da <Clock_Ip_EnableFirc_TrustedCall+0x66>
    40cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40d0:	f083 0301 	eor.w	r3, r3, #1
    40d4:	b2db      	uxtb	r3, r3
    40d6:	2b00      	cmp	r3, #0
    40d8:	d1e5      	bne.n	40a6 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    40da:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40de:	2b00      	cmp	r3, #0
    40e0:	d005      	beq.n	40ee <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    40e2:	9b01      	ldr	r3, [sp, #4]
    40e4:	681b      	ldr	r3, [r3, #0]
    40e6:	4619      	mov	r1, r3
    40e8:	2001      	movs	r0, #1
    40ea:	f7fe fe9d 	bl	2e28 <Clock_Ip_ReportClockErrors>
        }
    }
}
    40ee:	bf00      	nop
    40f0:	b009      	add	sp, #36	; 0x24
    40f2:	f85d fb04 	ldr.w	pc, [sp], #4
    40f6:	bf00      	nop
    40f8:	40064000 	.word	0x40064000

000040fc <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    40fc:	b082      	sub	sp, #8
    40fe:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4100:	4b05      	ldr	r3, [pc, #20]	; (4118 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4102:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4106:	4a04      	ldr	r2, [pc, #16]	; (4118 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4108:	f023 0301 	bic.w	r3, r3, #1
    410c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4110:	bf00      	nop
    4112:	b002      	add	sp, #8
    4114:	4770      	bx	lr
    4116:	bf00      	nop
    4118:	40064000 	.word	0x40064000

0000411c <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    411c:	b082      	sub	sp, #8
    411e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4120:	bf00      	nop
    4122:	b002      	add	sp, #8
    4124:	4770      	bx	lr

00004126 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4126:	b082      	sub	sp, #8
    4128:	9001      	str	r0, [sp, #4]
    412a:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    412c:	bf00      	nop
    412e:	b002      	add	sp, #8
    4130:	4770      	bx	lr

00004132 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4132:	b082      	sub	sp, #8
    4134:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4136:	bf00      	nop
    4138:	b002      	add	sp, #8
    413a:	4770      	bx	lr

0000413c <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    413c:	b082      	sub	sp, #8
    413e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4140:	bf00      	nop
    4142:	b002      	add	sp, #8
    4144:	4770      	bx	lr

00004146 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4146:	b082      	sub	sp, #8
    4148:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    414a:	2302      	movs	r3, #2
}
    414c:	4618      	mov	r0, r3
    414e:	b002      	add	sp, #8
    4150:	4770      	bx	lr

00004152 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4152:	b082      	sub	sp, #8
    4154:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4156:	bf00      	nop
    4158:	b002      	add	sp, #8
    415a:	4770      	bx	lr

0000415c <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    415c:	b500      	push	{lr}
    415e:	b083      	sub	sp, #12
    4160:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4162:	9b01      	ldr	r3, [sp, #4]
    4164:	2b00      	cmp	r3, #0
    4166:	d002      	beq.n	416e <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4168:	9801      	ldr	r0, [sp, #4]
    416a:	f000 f870 	bl	424e <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    416e:	bf00      	nop
    4170:	b003      	add	sp, #12
    4172:	f85d fb04 	ldr.w	pc, [sp], #4

00004176 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4176:	b500      	push	{lr}
    4178:	b083      	sub	sp, #12
    417a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    417c:	9b01      	ldr	r3, [sp, #4]
    417e:	2b00      	cmp	r3, #0
    4180:	d002      	beq.n	4188 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4182:	9801      	ldr	r0, [sp, #4]
    4184:	f000 f89a 	bl	42bc <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4188:	bf00      	nop
    418a:	b003      	add	sp, #12
    418c:	f85d fb04 	ldr.w	pc, [sp], #4

00004190 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4190:	b500      	push	{lr}
    4192:	b089      	sub	sp, #36	; 0x24
    4194:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4196:	2301      	movs	r3, #1
    4198:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    419a:	2300      	movs	r3, #0
    419c:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    41a0:	4b1e      	ldr	r3, [pc, #120]	; (421c <Clock_Ip_CompleteSpll+0x8c>)
    41a2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    41a6:	f003 0301 	and.w	r3, r3, #1
    41aa:	2b00      	cmp	r3, #0
    41ac:	d02f      	beq.n	420e <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    41ae:	aa02      	add	r2, sp, #8
    41b0:	a903      	add	r1, sp, #12
    41b2:	a804      	add	r0, sp, #16
    41b4:	f24c 3350 	movw	r3, #50000	; 0xc350
    41b8:	f7fe fe46 	bl	2e48 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    41bc:	4b17      	ldr	r3, [pc, #92]	; (421c <Clock_Ip_CompleteSpll+0x8c>)
    41be:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    41c2:	0e1b      	lsrs	r3, r3, #24
    41c4:	f003 0301 	and.w	r3, r3, #1
    41c8:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    41ca:	9a02      	ldr	r2, [sp, #8]
    41cc:	a903      	add	r1, sp, #12
    41ce:	ab04      	add	r3, sp, #16
    41d0:	4618      	mov	r0, r3
    41d2:	f7fe fe53 	bl	2e7c <Clock_Ip_TimeoutExpired>
    41d6:	4603      	mov	r3, r0
    41d8:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    41dc:	9b05      	ldr	r3, [sp, #20]
    41de:	2b00      	cmp	r3, #0
    41e0:	d106      	bne.n	41f0 <Clock_Ip_CompleteSpll+0x60>
    41e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    41e6:	f083 0301 	eor.w	r3, r3, #1
    41ea:	b2db      	uxtb	r3, r3
    41ec:	2b00      	cmp	r3, #0
    41ee:	d1e5      	bne.n	41bc <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    41f0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    41f4:	f083 0301 	eor.w	r3, r3, #1
    41f8:	b2db      	uxtb	r3, r3
    41fa:	2b00      	cmp	r3, #0
    41fc:	d002      	beq.n	4204 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    41fe:	2302      	movs	r3, #2
    4200:	9307      	str	r3, [sp, #28]
    4202:	e006      	b.n	4212 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4204:	9901      	ldr	r1, [sp, #4]
    4206:	2001      	movs	r0, #1
    4208:	f7fe fe0e 	bl	2e28 <Clock_Ip_ReportClockErrors>
    420c:	e001      	b.n	4212 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    420e:	2300      	movs	r3, #0
    4210:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4212:	9b07      	ldr	r3, [sp, #28]
}
    4214:	4618      	mov	r0, r3
    4216:	b009      	add	sp, #36	; 0x24
    4218:	f85d fb04 	ldr.w	pc, [sp], #4
    421c:	40064000 	.word	0x40064000

00004220 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4220:	b500      	push	{lr}
    4222:	b083      	sub	sp, #12
    4224:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4226:	9801      	ldr	r0, [sp, #4]
    4228:	f000 f886 	bl	4338 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    422c:	bf00      	nop
    422e:	b003      	add	sp, #12
    4230:	f85d fb04 	ldr.w	pc, [sp], #4

00004234 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4234:	b500      	push	{lr}
    4236:	b083      	sub	sp, #12
    4238:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    423a:	9b01      	ldr	r3, [sp, #4]
    423c:	2b00      	cmp	r3, #0
    423e:	d002      	beq.n	4246 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4240:	9801      	ldr	r0, [sp, #4]
    4242:	f000 f891 	bl	4368 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4246:	bf00      	nop
    4248:	b003      	add	sp, #12
    424a:	f85d fb04 	ldr.w	pc, [sp], #4

0000424e <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    424e:	b082      	sub	sp, #8
    4250:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4252:	4b19      	ldr	r3, [pc, #100]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4254:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4258:	4a17      	ldr	r2, [pc, #92]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    425a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    425e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4262:	4b15      	ldr	r3, [pc, #84]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4264:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4268:	4a13      	ldr	r2, [pc, #76]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    426e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4272:	4b11      	ldr	r3, [pc, #68]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4274:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4278:	4a0f      	ldr	r2, [pc, #60]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    427a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    427e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4282:	4b0d      	ldr	r3, [pc, #52]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4284:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4288:	4a0b      	ldr	r2, [pc, #44]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    428a:	f023 0301 	bic.w	r3, r3, #1
    428e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4292:	4b09      	ldr	r3, [pc, #36]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4294:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4298:	4a07      	ldr	r2, [pc, #28]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    429a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    429e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    42a2:	4b05      	ldr	r3, [pc, #20]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42a4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    42a8:	4a03      	ldr	r2, [pc, #12]	; (42b8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    42ae:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    42b2:	bf00      	nop
    42b4:	b002      	add	sp, #8
    42b6:	4770      	bx	lr
    42b8:	40064000 	.word	0x40064000

000042bc <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    42bc:	b082      	sub	sp, #8
    42be:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    42c0:	9b01      	ldr	r3, [sp, #4]
    42c2:	889b      	ldrh	r3, [r3, #4]
    42c4:	2b01      	cmp	r3, #1
    42c6:	d12f      	bne.n	4328 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    42c8:	4b1a      	ldr	r3, [pc, #104]	; (4334 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    42ca:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    42ce:	9b01      	ldr	r3, [sp, #4]
    42d0:	7b5b      	ldrb	r3, [r3, #13]
    42d2:	3b01      	subs	r3, #1
    42d4:	021b      	lsls	r3, r3, #8
    42d6:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    42da:	9b01      	ldr	r3, [sp, #4]
    42dc:	7d1b      	ldrb	r3, [r3, #20]
    42de:	3b10      	subs	r3, #16
    42e0:	041b      	lsls	r3, r3, #16
    42e2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    42e6:	430b      	orrs	r3, r1
    42e8:	4912      	ldr	r1, [pc, #72]	; (4334 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    42ea:	4313      	orrs	r3, r2
    42ec:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    42f0:	9b01      	ldr	r3, [sp, #4]
    42f2:	7fdb      	ldrb	r3, [r3, #31]
    42f4:	2b02      	cmp	r3, #2
    42f6:	d011      	beq.n	431c <Clock_Ip_SetSpll_TrustedCall+0x60>
    42f8:	2b02      	cmp	r3, #2
    42fa:	dc17      	bgt.n	432c <Clock_Ip_SetSpll_TrustedCall+0x70>
    42fc:	2b00      	cmp	r3, #0
    42fe:	d002      	beq.n	4306 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4300:	2b01      	cmp	r3, #1
    4302:	d005      	beq.n	4310 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4304:	e012      	b.n	432c <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4306:	4b0b      	ldr	r3, [pc, #44]	; (4334 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4308:	2200      	movs	r2, #0
    430a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    430e:	e00e      	b.n	432e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4310:	4b08      	ldr	r3, [pc, #32]	; (4334 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4312:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4316:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    431a:	e008      	b.n	432e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    431c:	4b05      	ldr	r3, [pc, #20]	; (4334 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    431e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4322:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4326:	e002      	b.n	432e <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4328:	bf00      	nop
    432a:	e000      	b.n	432e <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    432c:	bf00      	nop
}
    432e:	bf00      	nop
    4330:	b002      	add	sp, #8
    4332:	4770      	bx	lr
    4334:	40064000 	.word	0x40064000

00004338 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4338:	b082      	sub	sp, #8
    433a:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    433c:	4b09      	ldr	r3, [pc, #36]	; (4364 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    433e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4342:	4a08      	ldr	r2, [pc, #32]	; (4364 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4344:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4348:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    434c:	4b05      	ldr	r3, [pc, #20]	; (4364 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    434e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4352:	4a04      	ldr	r2, [pc, #16]	; (4364 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4354:	f023 0301 	bic.w	r3, r3, #1
    4358:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    435c:	bf00      	nop
    435e:	b002      	add	sp, #8
    4360:	4770      	bx	lr
    4362:	bf00      	nop
    4364:	40064000 	.word	0x40064000

00004368 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4368:	b082      	sub	sp, #8
    436a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    436c:	9b01      	ldr	r3, [sp, #4]
    436e:	889b      	ldrh	r3, [r3, #4]
    4370:	2b01      	cmp	r3, #1
    4372:	d107      	bne.n	4384 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4374:	4b05      	ldr	r3, [pc, #20]	; (438c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4376:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    437a:	4a04      	ldr	r2, [pc, #16]	; (438c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    437c:	f043 0301 	orr.w	r3, r3, #1
    4380:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4384:	bf00      	nop
    4386:	b002      	add	sp, #8
    4388:	4770      	bx	lr
    438a:	bf00      	nop
    438c:	40064000 	.word	0x40064000

00004390 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4390:	b082      	sub	sp, #8
    4392:	9001      	str	r0, [sp, #4]
    4394:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4396:	bf00      	nop
    4398:	b002      	add	sp, #8
    439a:	4770      	bx	lr

0000439c <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    439c:	b082      	sub	sp, #8
    439e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    43a0:	bf00      	nop
    43a2:	b002      	add	sp, #8
    43a4:	4770      	bx	lr

000043a6 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    43a6:	b500      	push	{lr}
    43a8:	b083      	sub	sp, #12
    43aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43ac:	9b01      	ldr	r3, [sp, #4]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d002      	beq.n	43b8 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    43b2:	9801      	ldr	r0, [sp, #4]
    43b4:	f000 f8ee 	bl	4594 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43b8:	bf00      	nop
    43ba:	b003      	add	sp, #12
    43bc:	f85d fb04 	ldr.w	pc, [sp], #4

000043c0 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    43c0:	b500      	push	{lr}
    43c2:	b083      	sub	sp, #12
    43c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43c6:	9b01      	ldr	r3, [sp, #4]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d002      	beq.n	43d2 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    43cc:	9801      	ldr	r0, [sp, #4]
    43ce:	f000 f8ff 	bl	45d0 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43d2:	bf00      	nop
    43d4:	b003      	add	sp, #12
    43d6:	f85d fb04 	ldr.w	pc, [sp], #4

000043da <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    43da:	b500      	push	{lr}
    43dc:	b083      	sub	sp, #12
    43de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43e0:	9b01      	ldr	r3, [sp, #4]
    43e2:	2b00      	cmp	r3, #0
    43e4:	d002      	beq.n	43ec <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    43e6:	9801      	ldr	r0, [sp, #4]
    43e8:	f000 f912 	bl	4610 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43ec:	bf00      	nop
    43ee:	b003      	add	sp, #12
    43f0:	f85d fb04 	ldr.w	pc, [sp], #4

000043f4 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    43f4:	b500      	push	{lr}
    43f6:	b083      	sub	sp, #12
    43f8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43fa:	9b01      	ldr	r3, [sp, #4]
    43fc:	2b00      	cmp	r3, #0
    43fe:	d002      	beq.n	4406 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4400:	9801      	ldr	r0, [sp, #4]
    4402:	f000 f925 	bl	4650 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4406:	bf00      	nop
    4408:	b003      	add	sp, #12
    440a:	f85d fb04 	ldr.w	pc, [sp], #4

0000440e <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    440e:	b500      	push	{lr}
    4410:	b083      	sub	sp, #12
    4412:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4414:	9b01      	ldr	r3, [sp, #4]
    4416:	2b00      	cmp	r3, #0
    4418:	d002      	beq.n	4420 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    441a:	9801      	ldr	r0, [sp, #4]
    441c:	f000 f936 	bl	468c <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4420:	bf00      	nop
    4422:	b003      	add	sp, #12
    4424:	f85d fb04 	ldr.w	pc, [sp], #4

00004428 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4428:	b500      	push	{lr}
    442a:	b083      	sub	sp, #12
    442c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    442e:	9b01      	ldr	r3, [sp, #4]
    4430:	2b00      	cmp	r3, #0
    4432:	d002      	beq.n	443a <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4434:	9801      	ldr	r0, [sp, #4]
    4436:	f000 f949 	bl	46cc <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    443a:	bf00      	nop
    443c:	b003      	add	sp, #12
    443e:	f85d fb04 	ldr.w	pc, [sp], #4

00004442 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4442:	b500      	push	{lr}
    4444:	b083      	sub	sp, #12
    4446:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4448:	9b01      	ldr	r3, [sp, #4]
    444a:	2b00      	cmp	r3, #0
    444c:	d002      	beq.n	4454 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    444e:	9801      	ldr	r0, [sp, #4]
    4450:	f000 f958 	bl	4704 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4454:	bf00      	nop
    4456:	b003      	add	sp, #12
    4458:	f85d fb04 	ldr.w	pc, [sp], #4

0000445c <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    445c:	b500      	push	{lr}
    445e:	b083      	sub	sp, #12
    4460:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4462:	9b01      	ldr	r3, [sp, #4]
    4464:	2b00      	cmp	r3, #0
    4466:	d002      	beq.n	446e <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4468:	9801      	ldr	r0, [sp, #4]
    446a:	f000 f969 	bl	4740 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    446e:	bf00      	nop
    4470:	b003      	add	sp, #12
    4472:	f85d fb04 	ldr.w	pc, [sp], #4

00004476 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4476:	b500      	push	{lr}
    4478:	b083      	sub	sp, #12
    447a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    447c:	9b01      	ldr	r3, [sp, #4]
    447e:	2b00      	cmp	r3, #0
    4480:	d002      	beq.n	4488 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4482:	9801      	ldr	r0, [sp, #4]
    4484:	f000 f978 	bl	4778 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4488:	bf00      	nop
    448a:	b003      	add	sp, #12
    448c:	f85d fb04 	ldr.w	pc, [sp], #4

00004490 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4490:	b500      	push	{lr}
    4492:	b083      	sub	sp, #12
    4494:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4496:	9b01      	ldr	r3, [sp, #4]
    4498:	2b00      	cmp	r3, #0
    449a:	d002      	beq.n	44a2 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    449c:	9801      	ldr	r0, [sp, #4]
    449e:	f000 f989 	bl	47b4 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44a2:	bf00      	nop
    44a4:	b003      	add	sp, #12
    44a6:	f85d fb04 	ldr.w	pc, [sp], #4

000044aa <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    44aa:	b500      	push	{lr}
    44ac:	b083      	sub	sp, #12
    44ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44b0:	9b01      	ldr	r3, [sp, #4]
    44b2:	2b00      	cmp	r3, #0
    44b4:	d002      	beq.n	44bc <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    44b6:	9801      	ldr	r0, [sp, #4]
    44b8:	f000 f998 	bl	47ec <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44bc:	bf00      	nop
    44be:	b003      	add	sp, #12
    44c0:	f85d fb04 	ldr.w	pc, [sp], #4

000044c4 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    44c4:	b500      	push	{lr}
    44c6:	b083      	sub	sp, #12
    44c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44ca:	9b01      	ldr	r3, [sp, #4]
    44cc:	2b00      	cmp	r3, #0
    44ce:	d002      	beq.n	44d6 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    44d0:	9801      	ldr	r0, [sp, #4]
    44d2:	f000 f9a9 	bl	4828 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44d6:	bf00      	nop
    44d8:	b003      	add	sp, #12
    44da:	f85d fb04 	ldr.w	pc, [sp], #4

000044de <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    44de:	b500      	push	{lr}
    44e0:	b083      	sub	sp, #12
    44e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44e4:	9b01      	ldr	r3, [sp, #4]
    44e6:	2b00      	cmp	r3, #0
    44e8:	d002      	beq.n	44f0 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    44ea:	9801      	ldr	r0, [sp, #4]
    44ec:	f000 f9e6 	bl	48bc <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44f0:	bf00      	nop
    44f2:	b003      	add	sp, #12
    44f4:	f85d fb04 	ldr.w	pc, [sp], #4

000044f8 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    44f8:	b500      	push	{lr}
    44fa:	b083      	sub	sp, #12
    44fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44fe:	9b01      	ldr	r3, [sp, #4]
    4500:	2b00      	cmp	r3, #0
    4502:	d002      	beq.n	450a <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4504:	9801      	ldr	r0, [sp, #4]
    4506:	f000 fa25 	bl	4954 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    450a:	bf00      	nop
    450c:	b003      	add	sp, #12
    450e:	f85d fb04 	ldr.w	pc, [sp], #4

00004512 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4512:	b500      	push	{lr}
    4514:	b083      	sub	sp, #12
    4516:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4518:	9b01      	ldr	r3, [sp, #4]
    451a:	2b00      	cmp	r3, #0
    451c:	d002      	beq.n	4524 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    451e:	9801      	ldr	r0, [sp, #4]
    4520:	f000 fa2a 	bl	4978 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4524:	bf00      	nop
    4526:	b003      	add	sp, #12
    4528:	f85d fb04 	ldr.w	pc, [sp], #4

0000452c <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    452c:	b500      	push	{lr}
    452e:	b083      	sub	sp, #12
    4530:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4532:	9b01      	ldr	r3, [sp, #4]
    4534:	2b00      	cmp	r3, #0
    4536:	d002      	beq.n	453e <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4538:	9801      	ldr	r0, [sp, #4]
    453a:	f000 fa3b 	bl	49b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    453e:	bf00      	nop
    4540:	b003      	add	sp, #12
    4542:	f85d fb04 	ldr.w	pc, [sp], #4

00004546 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4546:	b500      	push	{lr}
    4548:	b083      	sub	sp, #12
    454a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    454c:	9b01      	ldr	r3, [sp, #4]
    454e:	2b00      	cmp	r3, #0
    4550:	d002      	beq.n	4558 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4552:	9801      	ldr	r0, [sp, #4]
    4554:	f000 fa56 	bl	4a04 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4558:	bf00      	nop
    455a:	b003      	add	sp, #12
    455c:	f85d fb04 	ldr.w	pc, [sp], #4

00004560 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4560:	b500      	push	{lr}
    4562:	b083      	sub	sp, #12
    4564:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4566:	9b01      	ldr	r3, [sp, #4]
    4568:	2b00      	cmp	r3, #0
    456a:	d002      	beq.n	4572 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    456c:	9801      	ldr	r0, [sp, #4]
    456e:	f000 fa79 	bl	4a64 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4572:	bf00      	nop
    4574:	b003      	add	sp, #12
    4576:	f85d fb04 	ldr.w	pc, [sp], #4

0000457a <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    457a:	b500      	push	{lr}
    457c:	b083      	sub	sp, #12
    457e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4580:	9b01      	ldr	r3, [sp, #4]
    4582:	2b00      	cmp	r3, #0
    4584:	d002      	beq.n	458c <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4586:	9801      	ldr	r0, [sp, #4]
    4588:	f000 fa8a 	bl	4aa0 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    458c:	bf00      	nop
    458e:	b003      	add	sp, #12
    4590:	f85d fb04 	ldr.w	pc, [sp], #4

00004594 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4594:	b084      	sub	sp, #16
    4596:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4598:	4b0b      	ldr	r3, [pc, #44]	; (45c8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    459a:	795b      	ldrb	r3, [r3, #5]
    459c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    459e:	4b0b      	ldr	r3, [pc, #44]	; (45cc <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    45a0:	695b      	ldr	r3, [r3, #20]
    45a2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    45a4:	9b02      	ldr	r3, [sp, #8]
    45a6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    45aa:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    45ac:	9b03      	ldr	r3, [sp, #12]
    45ae:	061b      	lsls	r3, r3, #24
    45b0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    45b4:	9a02      	ldr	r2, [sp, #8]
    45b6:	4313      	orrs	r3, r2
    45b8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    45ba:	4a04      	ldr	r2, [pc, #16]	; (45cc <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    45bc:	9b02      	ldr	r3, [sp, #8]
    45be:	6153      	str	r3, [r2, #20]
}
    45c0:	bf00      	nop
    45c2:	b004      	add	sp, #16
    45c4:	4770      	bx	lr
    45c6:	bf00      	nop
    45c8:	0001816c 	.word	0x0001816c
    45cc:	40064000 	.word	0x40064000

000045d0 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45d0:	b084      	sub	sp, #16
    45d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45d4:	9b01      	ldr	r3, [sp, #4]
    45d6:	685b      	ldr	r3, [r3, #4]
    45d8:	4a0b      	ldr	r2, [pc, #44]	; (4608 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    45da:	5cd3      	ldrb	r3, [r2, r3]
    45dc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    45de:	4b0b      	ldr	r3, [pc, #44]	; (460c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    45e0:	695b      	ldr	r3, [r3, #20]
    45e2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    45e4:	9b02      	ldr	r3, [sp, #8]
    45e6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    45ea:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    45ec:	9b03      	ldr	r3, [sp, #12]
    45ee:	061b      	lsls	r3, r3, #24
    45f0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    45f4:	9a02      	ldr	r2, [sp, #8]
    45f6:	4313      	orrs	r3, r2
    45f8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    45fa:	4a04      	ldr	r2, [pc, #16]	; (460c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    45fc:	9b02      	ldr	r3, [sp, #8]
    45fe:	6153      	str	r3, [r2, #20]
}
    4600:	bf00      	nop
    4602:	b004      	add	sp, #16
    4604:	4770      	bx	lr
    4606:	bf00      	nop
    4608:	0001816c 	.word	0x0001816c
    460c:	40064000 	.word	0x40064000

00004610 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4610:	b084      	sub	sp, #16
    4612:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4614:	9b01      	ldr	r3, [sp, #4]
    4616:	685b      	ldr	r3, [r3, #4]
    4618:	4a0b      	ldr	r2, [pc, #44]	; (4648 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    461a:	5cd3      	ldrb	r3, [r2, r3]
    461c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    461e:	4b0b      	ldr	r3, [pc, #44]	; (464c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4620:	699b      	ldr	r3, [r3, #24]
    4622:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4624:	9b02      	ldr	r3, [sp, #8]
    4626:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    462a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    462c:	9b03      	ldr	r3, [sp, #12]
    462e:	061b      	lsls	r3, r3, #24
    4630:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4634:	9a02      	ldr	r2, [sp, #8]
    4636:	4313      	orrs	r3, r2
    4638:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    463a:	4a04      	ldr	r2, [pc, #16]	; (464c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    463c:	9b02      	ldr	r3, [sp, #8]
    463e:	6193      	str	r3, [r2, #24]
}
    4640:	bf00      	nop
    4642:	b004      	add	sp, #16
    4644:	4770      	bx	lr
    4646:	bf00      	nop
    4648:	0001816c 	.word	0x0001816c
    464c:	40064000 	.word	0x40064000

00004650 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4650:	b084      	sub	sp, #16
    4652:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4654:	4b0b      	ldr	r3, [pc, #44]	; (4684 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4656:	795b      	ldrb	r3, [r3, #5]
    4658:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    465a:	4b0b      	ldr	r3, [pc, #44]	; (4688 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    465c:	69db      	ldr	r3, [r3, #28]
    465e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4660:	9b02      	ldr	r3, [sp, #8]
    4662:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4666:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4668:	9b03      	ldr	r3, [sp, #12]
    466a:	061b      	lsls	r3, r3, #24
    466c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4670:	9a02      	ldr	r2, [sp, #8]
    4672:	4313      	orrs	r3, r2
    4674:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4676:	4a04      	ldr	r2, [pc, #16]	; (4688 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4678:	9b02      	ldr	r3, [sp, #8]
    467a:	61d3      	str	r3, [r2, #28]
}
    467c:	bf00      	nop
    467e:	b004      	add	sp, #16
    4680:	4770      	bx	lr
    4682:	bf00      	nop
    4684:	0001816c 	.word	0x0001816c
    4688:	40064000 	.word	0x40064000

0000468c <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    468c:	b084      	sub	sp, #16
    468e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4690:	9b01      	ldr	r3, [sp, #4]
    4692:	685b      	ldr	r3, [r3, #4]
    4694:	4a0b      	ldr	r2, [pc, #44]	; (46c4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4696:	5cd3      	ldrb	r3, [r2, r3]
    4698:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    469a:	4b0b      	ldr	r3, [pc, #44]	; (46c8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    469c:	69db      	ldr	r3, [r3, #28]
    469e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    46a0:	9b02      	ldr	r3, [sp, #8]
    46a2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    46a6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    46a8:	9b03      	ldr	r3, [sp, #12]
    46aa:	061b      	lsls	r3, r3, #24
    46ac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    46b0:	9a02      	ldr	r2, [sp, #8]
    46b2:	4313      	orrs	r3, r2
    46b4:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    46b6:	4a04      	ldr	r2, [pc, #16]	; (46c8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    46b8:	9b02      	ldr	r3, [sp, #8]
    46ba:	61d3      	str	r3, [r2, #28]
}
    46bc:	bf00      	nop
    46be:	b004      	add	sp, #16
    46c0:	4770      	bx	lr
    46c2:	bf00      	nop
    46c4:	0001816c 	.word	0x0001816c
    46c8:	40064000 	.word	0x40064000

000046cc <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46cc:	b084      	sub	sp, #16
    46ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46d0:	4b0a      	ldr	r3, [pc, #40]	; (46fc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    46d2:	7b9b      	ldrb	r3, [r3, #14]
    46d4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    46d6:	4b0a      	ldr	r3, [pc, #40]	; (4700 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    46d8:	691b      	ldr	r3, [r3, #16]
    46da:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    46dc:	9b02      	ldr	r3, [sp, #8]
    46de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    46e2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    46e4:	9b03      	ldr	r3, [sp, #12]
    46e6:	011b      	lsls	r3, r3, #4
    46e8:	9a02      	ldr	r2, [sp, #8]
    46ea:	4313      	orrs	r3, r2
    46ec:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    46ee:	4a04      	ldr	r2, [pc, #16]	; (4700 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    46f0:	9b02      	ldr	r3, [sp, #8]
    46f2:	6113      	str	r3, [r2, #16]
}
    46f4:	bf00      	nop
    46f6:	b004      	add	sp, #16
    46f8:	4770      	bx	lr
    46fa:	bf00      	nop
    46fc:	00018114 	.word	0x00018114
    4700:	40048000 	.word	0x40048000

00004704 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4704:	b084      	sub	sp, #16
    4706:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4708:	9b01      	ldr	r3, [sp, #4]
    470a:	685b      	ldr	r3, [r3, #4]
    470c:	4a0a      	ldr	r2, [pc, #40]	; (4738 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    470e:	5cd3      	ldrb	r3, [r2, r3]
    4710:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4712:	4b0a      	ldr	r3, [pc, #40]	; (473c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4714:	691b      	ldr	r3, [r3, #16]
    4716:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4718:	9b02      	ldr	r3, [sp, #8]
    471a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    471e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4720:	9b03      	ldr	r3, [sp, #12]
    4722:	011b      	lsls	r3, r3, #4
    4724:	9a02      	ldr	r2, [sp, #8]
    4726:	4313      	orrs	r3, r2
    4728:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    472a:	4a04      	ldr	r2, [pc, #16]	; (473c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    472c:	9b02      	ldr	r3, [sp, #8]
    472e:	6113      	str	r3, [r2, #16]
}
    4730:	bf00      	nop
    4732:	b004      	add	sp, #16
    4734:	4770      	bx	lr
    4736:	bf00      	nop
    4738:	00018114 	.word	0x00018114
    473c:	40048000 	.word	0x40048000

00004740 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4740:	b084      	sub	sp, #16
    4742:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4744:	4b0a      	ldr	r3, [pc, #40]	; (4770 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4746:	785b      	ldrb	r3, [r3, #1]
    4748:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    474a:	4b0a      	ldr	r3, [pc, #40]	; (4774 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    474c:	691b      	ldr	r3, [r3, #16]
    474e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4750:	9b02      	ldr	r3, [sp, #8]
    4752:	f023 030c 	bic.w	r3, r3, #12
    4756:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4758:	9b03      	ldr	r3, [sp, #12]
    475a:	009b      	lsls	r3, r3, #2
    475c:	9a02      	ldr	r2, [sp, #8]
    475e:	4313      	orrs	r3, r2
    4760:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4762:	4a04      	ldr	r2, [pc, #16]	; (4774 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4764:	9b02      	ldr	r3, [sp, #8]
    4766:	6113      	str	r3, [r2, #16]
}
    4768:	bf00      	nop
    476a:	b004      	add	sp, #16
    476c:	4770      	bx	lr
    476e:	bf00      	nop
    4770:	000181cc 	.word	0x000181cc
    4774:	40048000 	.word	0x40048000

00004778 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4778:	b084      	sub	sp, #16
    477a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    477c:	9b01      	ldr	r3, [sp, #4]
    477e:	685b      	ldr	r3, [r3, #4]
    4780:	4a0a      	ldr	r2, [pc, #40]	; (47ac <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4782:	5cd3      	ldrb	r3, [r2, r3]
    4784:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4786:	4b0a      	ldr	r3, [pc, #40]	; (47b0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4788:	691b      	ldr	r3, [r3, #16]
    478a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    478c:	9b02      	ldr	r3, [sp, #8]
    478e:	f023 030c 	bic.w	r3, r3, #12
    4792:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4794:	9b03      	ldr	r3, [sp, #12]
    4796:	009b      	lsls	r3, r3, #2
    4798:	9a02      	ldr	r2, [sp, #8]
    479a:	4313      	orrs	r3, r2
    479c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    479e:	4a04      	ldr	r2, [pc, #16]	; (47b0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    47a0:	9b02      	ldr	r3, [sp, #8]
    47a2:	6113      	str	r3, [r2, #16]
}
    47a4:	bf00      	nop
    47a6:	b004      	add	sp, #16
    47a8:	4770      	bx	lr
    47aa:	bf00      	nop
    47ac:	000181cc 	.word	0x000181cc
    47b0:	40048000 	.word	0x40048000

000047b4 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47b4:	b084      	sub	sp, #16
    47b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47b8:	4b0a      	ldr	r3, [pc, #40]	; (47e4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    47ba:	795b      	ldrb	r3, [r3, #5]
    47bc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    47be:	4b0a      	ldr	r3, [pc, #40]	; (47e8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    47c0:	6a1b      	ldr	r3, [r3, #32]
    47c2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    47c4:	9b02      	ldr	r3, [sp, #8]
    47c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    47ca:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    47cc:	9b03      	ldr	r3, [sp, #12]
    47ce:	061b      	lsls	r3, r3, #24
    47d0:	9a02      	ldr	r2, [sp, #8]
    47d2:	4313      	orrs	r3, r2
    47d4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    47d6:	4a04      	ldr	r2, [pc, #16]	; (47e8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    47d8:	9b02      	ldr	r3, [sp, #8]
    47da:	6213      	str	r3, [r2, #32]
}
    47dc:	bf00      	nop
    47de:	b004      	add	sp, #16
    47e0:	4770      	bx	lr
    47e2:	bf00      	nop
    47e4:	0001816c 	.word	0x0001816c
    47e8:	40064000 	.word	0x40064000

000047ec <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47ec:	b084      	sub	sp, #16
    47ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47f0:	9b01      	ldr	r3, [sp, #4]
    47f2:	685b      	ldr	r3, [r3, #4]
    47f4:	4a0a      	ldr	r2, [pc, #40]	; (4820 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    47f6:	5cd3      	ldrb	r3, [r2, r3]
    47f8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    47fa:	4b0a      	ldr	r3, [pc, #40]	; (4824 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    47fc:	6a1b      	ldr	r3, [r3, #32]
    47fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4800:	9b02      	ldr	r3, [sp, #8]
    4802:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4806:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4808:	9b03      	ldr	r3, [sp, #12]
    480a:	061b      	lsls	r3, r3, #24
    480c:	9a02      	ldr	r2, [sp, #8]
    480e:	4313      	orrs	r3, r2
    4810:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4812:	4a04      	ldr	r2, [pc, #16]	; (4824 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4814:	9b02      	ldr	r3, [sp, #8]
    4816:	6213      	str	r3, [r2, #32]
}
    4818:	bf00      	nop
    481a:	b004      	add	sp, #16
    481c:	4770      	bx	lr
    481e:	bf00      	nop
    4820:	0001816c 	.word	0x0001816c
    4824:	40064000 	.word	0x40064000

00004828 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4828:	b086      	sub	sp, #24
    482a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    482c:	4b20      	ldr	r3, [pc, #128]	; (48b0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    482e:	795b      	ldrb	r3, [r3, #5]
    4830:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4832:	9b01      	ldr	r3, [sp, #4]
    4834:	681a      	ldr	r2, [r3, #0]
    4836:	491f      	ldr	r1, [pc, #124]	; (48b4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4838:	4613      	mov	r3, r2
    483a:	00db      	lsls	r3, r3, #3
    483c:	4413      	add	r3, r2
    483e:	440b      	add	r3, r1
    4840:	781b      	ldrb	r3, [r3, #0]
    4842:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4844:	4b1c      	ldr	r3, [pc, #112]	; (48b8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4846:	68db      	ldr	r3, [r3, #12]
    4848:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    484a:	9b03      	ldr	r3, [sp, #12]
    484c:	2b03      	cmp	r3, #3
    484e:	d813      	bhi.n	4878 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4850:	9b03      	ldr	r3, [sp, #12]
    4852:	005b      	lsls	r3, r3, #1
    4854:	3318      	adds	r3, #24
    4856:	2203      	movs	r2, #3
    4858:	fa02 f303 	lsl.w	r3, r2, r3
    485c:	43db      	mvns	r3, r3
    485e:	9a05      	ldr	r2, [sp, #20]
    4860:	4013      	ands	r3, r2
    4862:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4864:	9b03      	ldr	r3, [sp, #12]
    4866:	005b      	lsls	r3, r3, #1
    4868:	3318      	adds	r3, #24
    486a:	9a04      	ldr	r2, [sp, #16]
    486c:	fa02 f303 	lsl.w	r3, r2, r3
    4870:	9a05      	ldr	r2, [sp, #20]
    4872:	4313      	orrs	r3, r2
    4874:	9305      	str	r3, [sp, #20]
    4876:	e014      	b.n	48a2 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4878:	9b03      	ldr	r3, [sp, #12]
    487a:	3b04      	subs	r3, #4
    487c:	005b      	lsls	r3, r3, #1
    487e:	3310      	adds	r3, #16
    4880:	2203      	movs	r2, #3
    4882:	fa02 f303 	lsl.w	r3, r2, r3
    4886:	43db      	mvns	r3, r3
    4888:	9a05      	ldr	r2, [sp, #20]
    488a:	4013      	ands	r3, r2
    488c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    488e:	9b03      	ldr	r3, [sp, #12]
    4890:	3b04      	subs	r3, #4
    4892:	005b      	lsls	r3, r3, #1
    4894:	3310      	adds	r3, #16
    4896:	9a04      	ldr	r2, [sp, #16]
    4898:	fa02 f303 	lsl.w	r3, r2, r3
    489c:	9a05      	ldr	r2, [sp, #20]
    489e:	4313      	orrs	r3, r2
    48a0:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    48a2:	4a05      	ldr	r2, [pc, #20]	; (48b8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    48a4:	9b05      	ldr	r3, [sp, #20]
    48a6:	60d3      	str	r3, [r2, #12]
}
    48a8:	bf00      	nop
    48aa:	b006      	add	sp, #24
    48ac:	4770      	bx	lr
    48ae:	bf00      	nop
    48b0:	00018114 	.word	0x00018114
    48b4:	00017e04 	.word	0x00017e04
    48b8:	40048000 	.word	0x40048000

000048bc <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    48bc:	b086      	sub	sp, #24
    48be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    48c0:	9b01      	ldr	r3, [sp, #4]
    48c2:	685b      	ldr	r3, [r3, #4]
    48c4:	4a20      	ldr	r2, [pc, #128]	; (4948 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    48c6:	5cd3      	ldrb	r3, [r2, r3]
    48c8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    48ca:	9b01      	ldr	r3, [sp, #4]
    48cc:	681a      	ldr	r2, [r3, #0]
    48ce:	491f      	ldr	r1, [pc, #124]	; (494c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    48d0:	4613      	mov	r3, r2
    48d2:	00db      	lsls	r3, r3, #3
    48d4:	4413      	add	r3, r2
    48d6:	440b      	add	r3, r1
    48d8:	781b      	ldrb	r3, [r3, #0]
    48da:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    48dc:	4b1c      	ldr	r3, [pc, #112]	; (4950 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    48de:	68db      	ldr	r3, [r3, #12]
    48e0:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    48e2:	9b03      	ldr	r3, [sp, #12]
    48e4:	2b03      	cmp	r3, #3
    48e6:	d813      	bhi.n	4910 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    48e8:	9b03      	ldr	r3, [sp, #12]
    48ea:	005b      	lsls	r3, r3, #1
    48ec:	3318      	adds	r3, #24
    48ee:	2203      	movs	r2, #3
    48f0:	fa02 f303 	lsl.w	r3, r2, r3
    48f4:	43db      	mvns	r3, r3
    48f6:	9a05      	ldr	r2, [sp, #20]
    48f8:	4013      	ands	r3, r2
    48fa:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    48fc:	9b03      	ldr	r3, [sp, #12]
    48fe:	005b      	lsls	r3, r3, #1
    4900:	3318      	adds	r3, #24
    4902:	9a04      	ldr	r2, [sp, #16]
    4904:	fa02 f303 	lsl.w	r3, r2, r3
    4908:	9a05      	ldr	r2, [sp, #20]
    490a:	4313      	orrs	r3, r2
    490c:	9305      	str	r3, [sp, #20]
    490e:	e014      	b.n	493a <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4910:	9b03      	ldr	r3, [sp, #12]
    4912:	3b04      	subs	r3, #4
    4914:	005b      	lsls	r3, r3, #1
    4916:	3310      	adds	r3, #16
    4918:	2203      	movs	r2, #3
    491a:	fa02 f303 	lsl.w	r3, r2, r3
    491e:	43db      	mvns	r3, r3
    4920:	9a05      	ldr	r2, [sp, #20]
    4922:	4013      	ands	r3, r2
    4924:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4926:	9b03      	ldr	r3, [sp, #12]
    4928:	3b04      	subs	r3, #4
    492a:	005b      	lsls	r3, r3, #1
    492c:	3310      	adds	r3, #16
    492e:	9a04      	ldr	r2, [sp, #16]
    4930:	fa02 f303 	lsl.w	r3, r2, r3
    4934:	9a05      	ldr	r2, [sp, #20]
    4936:	4313      	orrs	r3, r2
    4938:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    493a:	4a05      	ldr	r2, [pc, #20]	; (4950 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    493c:	9b05      	ldr	r3, [sp, #20]
    493e:	60d3      	str	r3, [r2, #12]
}
    4940:	bf00      	nop
    4942:	b006      	add	sp, #24
    4944:	4770      	bx	lr
    4946:	bf00      	nop
    4948:	00018114 	.word	0x00018114
    494c:	00017e04 	.word	0x00017e04
    4950:	40048000 	.word	0x40048000

00004954 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4954:	b084      	sub	sp, #16
    4956:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4958:	4b06      	ldr	r3, [pc, #24]	; (4974 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    495a:	685b      	ldr	r3, [r3, #4]
    495c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    495e:	9b03      	ldr	r3, [sp, #12]
    4960:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4964:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4966:	4a03      	ldr	r2, [pc, #12]	; (4974 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4968:	9b03      	ldr	r3, [sp, #12]
    496a:	6053      	str	r3, [r2, #4]
}
    496c:	bf00      	nop
    496e:	b004      	add	sp, #16
    4970:	4770      	bx	lr
    4972:	bf00      	nop
    4974:	40048000 	.word	0x40048000

00004978 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4978:	b084      	sub	sp, #16
    497a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    497c:	9b01      	ldr	r3, [sp, #4]
    497e:	685b      	ldr	r3, [r3, #4]
    4980:	4a0a      	ldr	r2, [pc, #40]	; (49ac <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4982:	5cd3      	ldrb	r3, [r2, r3]
    4984:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4986:	4b0a      	ldr	r3, [pc, #40]	; (49b0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4988:	685b      	ldr	r3, [r3, #4]
    498a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    498c:	9b02      	ldr	r3, [sp, #8]
    498e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4992:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4994:	9b03      	ldr	r3, [sp, #12]
    4996:	011b      	lsls	r3, r3, #4
    4998:	9a02      	ldr	r2, [sp, #8]
    499a:	4313      	orrs	r3, r2
    499c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    499e:	4a04      	ldr	r2, [pc, #16]	; (49b0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    49a0:	9b02      	ldr	r3, [sp, #8]
    49a2:	6053      	str	r3, [r2, #4]
}
    49a4:	bf00      	nop
    49a6:	b004      	add	sp, #16
    49a8:	4770      	bx	lr
    49aa:	bf00      	nop
    49ac:	00018114 	.word	0x00018114
    49b0:	40048000 	.word	0x40048000

000049b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49b4:	b084      	sub	sp, #16
    49b6:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    49b8:	9b01      	ldr	r3, [sp, #4]
    49ba:	681a      	ldr	r2, [r3, #0]
    49bc:	490f      	ldr	r1, [pc, #60]	; (49fc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    49be:	4613      	mov	r3, r2
    49c0:	00db      	lsls	r3, r3, #3
    49c2:	4413      	add	r3, r2
    49c4:	440b      	add	r3, r1
    49c6:	3304      	adds	r3, #4
    49c8:	781b      	ldrb	r3, [r3, #0]
    49ca:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    49cc:	4a0c      	ldr	r2, [pc, #48]	; (4a00 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    49ce:	9b03      	ldr	r3, [sp, #12]
    49d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    49d4:	490a      	ldr	r1, [pc, #40]	; (4a00 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    49d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    49da:	9b03      	ldr	r3, [sp, #12]
    49dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    49e0:	4a07      	ldr	r2, [pc, #28]	; (4a00 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    49e2:	9b03      	ldr	r3, [sp, #12]
    49e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    49e8:	4905      	ldr	r1, [pc, #20]	; (4a00 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    49ea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    49ee:	9b03      	ldr	r3, [sp, #12]
    49f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    49f4:	bf00      	nop
    49f6:	b004      	add	sp, #16
    49f8:	4770      	bx	lr
    49fa:	bf00      	nop
    49fc:	00017e04 	.word	0x00017e04
    4a00:	40065000 	.word	0x40065000

00004a04 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a04:	b086      	sub	sp, #24
    4a06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4a08:	9b01      	ldr	r3, [sp, #4]
    4a0a:	681a      	ldr	r2, [r3, #0]
    4a0c:	4912      	ldr	r1, [pc, #72]	; (4a58 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4a0e:	4613      	mov	r3, r2
    4a10:	00db      	lsls	r3, r3, #3
    4a12:	4413      	add	r3, r2
    4a14:	440b      	add	r3, r1
    4a16:	3304      	adds	r3, #4
    4a18:	781b      	ldrb	r3, [r3, #0]
    4a1a:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a1c:	9b01      	ldr	r3, [sp, #4]
    4a1e:	685b      	ldr	r3, [r3, #4]
    4a20:	4a0e      	ldr	r2, [pc, #56]	; (4a5c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4a22:	5cd3      	ldrb	r3, [r2, r3]
    4a24:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4a26:	4a0e      	ldr	r2, [pc, #56]	; (4a60 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4a28:	9b05      	ldr	r3, [sp, #20]
    4a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4a2e:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4a30:	9b03      	ldr	r3, [sp, #12]
    4a32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4a36:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4a38:	9b04      	ldr	r3, [sp, #16]
    4a3a:	061b      	lsls	r3, r3, #24
    4a3c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4a40:	9a03      	ldr	r2, [sp, #12]
    4a42:	4313      	orrs	r3, r2
    4a44:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4a46:	4906      	ldr	r1, [pc, #24]	; (4a60 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4a48:	9b05      	ldr	r3, [sp, #20]
    4a4a:	9a03      	ldr	r2, [sp, #12]
    4a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4a50:	bf00      	nop
    4a52:	b006      	add	sp, #24
    4a54:	4770      	bx	lr
    4a56:	bf00      	nop
    4a58:	00017e04 	.word	0x00017e04
    4a5c:	0001819c 	.word	0x0001819c
    4a60:	40065000 	.word	0x40065000

00004a64 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a64:	b084      	sub	sp, #16
    4a66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a68:	4b0b      	ldr	r3, [pc, #44]	; (4a98 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4a6a:	7f1b      	ldrb	r3, [r3, #28]
    4a6c:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4a6e:	4b0b      	ldr	r3, [pc, #44]	; (4a9c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4a70:	685b      	ldr	r3, [r3, #4]
    4a72:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4a74:	9b02      	ldr	r3, [sp, #8]
    4a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4a7a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4a7c:	9b03      	ldr	r3, [sp, #12]
    4a7e:	031b      	lsls	r3, r3, #12
    4a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4a84:	9a02      	ldr	r2, [sp, #8]
    4a86:	4313      	orrs	r3, r2
    4a88:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4a8a:	4a04      	ldr	r2, [pc, #16]	; (4a9c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4a8c:	9b02      	ldr	r3, [sp, #8]
    4a8e:	6053      	str	r3, [r2, #4]
}
    4a90:	bf00      	nop
    4a92:	b004      	add	sp, #16
    4a94:	4770      	bx	lr
    4a96:	bf00      	nop
    4a98:	00018114 	.word	0x00018114
    4a9c:	40048000 	.word	0x40048000

00004aa0 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4aa0:	b084      	sub	sp, #16
    4aa2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4aa4:	9b01      	ldr	r3, [sp, #4]
    4aa6:	685b      	ldr	r3, [r3, #4]
    4aa8:	4a0b      	ldr	r2, [pc, #44]	; (4ad8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4aaa:	5cd3      	ldrb	r3, [r2, r3]
    4aac:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4aae:	4b0b      	ldr	r3, [pc, #44]	; (4adc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4ab0:	685b      	ldr	r3, [r3, #4]
    4ab2:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4ab4:	9b02      	ldr	r3, [sp, #8]
    4ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4aba:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4abc:	9b03      	ldr	r3, [sp, #12]
    4abe:	031b      	lsls	r3, r3, #12
    4ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4ac4:	9a02      	ldr	r2, [sp, #8]
    4ac6:	4313      	orrs	r3, r2
    4ac8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4aca:	4a04      	ldr	r2, [pc, #16]	; (4adc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4acc:	9b02      	ldr	r3, [sp, #8]
    4ace:	6053      	str	r3, [r2, #4]
}
    4ad0:	bf00      	nop
    4ad2:	b004      	add	sp, #16
    4ad4:	4770      	bx	lr
    4ad6:	bf00      	nop
    4ad8:	00018114 	.word	0x00018114
    4adc:	40048000 	.word	0x40048000

00004ae0 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4ae0:	b500      	push	{lr}
    4ae2:	b085      	sub	sp, #20
    4ae4:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4ae6:	2300      	movs	r3, #0
    4ae8:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4aec:	9b01      	ldr	r3, [sp, #4]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d037      	beq.n	4b62 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4af2:	2300      	movs	r3, #0
    4af4:	9303      	str	r3, [sp, #12]
    4af6:	e02b      	b.n	4b50 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4af8:	4b29      	ldr	r3, [pc, #164]	; (4ba0 <DisableSafeClock+0xc0>)
    4afa:	6819      	ldr	r1, [r3, #0]
    4afc:	9a03      	ldr	r2, [sp, #12]
    4afe:	4613      	mov	r3, r2
    4b00:	005b      	lsls	r3, r3, #1
    4b02:	4413      	add	r3, r2
    4b04:	009b      	lsls	r3, r3, #2
    4b06:	440b      	add	r3, r1
    4b08:	3314      	adds	r3, #20
    4b0a:	681b      	ldr	r3, [r3, #0]
    4b0c:	2b05      	cmp	r3, #5
    4b0e:	d11c      	bne.n	4b4a <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4b10:	2301      	movs	r3, #1
    4b12:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4b16:	4b22      	ldr	r3, [pc, #136]	; (4ba0 <DisableSafeClock+0xc0>)
    4b18:	6819      	ldr	r1, [r3, #0]
    4b1a:	9a03      	ldr	r2, [sp, #12]
    4b1c:	4613      	mov	r3, r2
    4b1e:	005b      	lsls	r3, r3, #1
    4b20:	4413      	add	r3, r2
    4b22:	009b      	lsls	r3, r3, #2
    4b24:	440b      	add	r3, r1
    4b26:	3318      	adds	r3, #24
    4b28:	881b      	ldrh	r3, [r3, #0]
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	d118      	bne.n	4b60 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4b2e:	4b1d      	ldr	r3, [pc, #116]	; (4ba4 <DisableSafeClock+0xc4>)
    4b30:	791b      	ldrb	r3, [r3, #4]
    4b32:	4619      	mov	r1, r3
    4b34:	4a1c      	ldr	r2, [pc, #112]	; (4ba8 <DisableSafeClock+0xc8>)
    4b36:	460b      	mov	r3, r1
    4b38:	005b      	lsls	r3, r3, #1
    4b3a:	440b      	add	r3, r1
    4b3c:	009b      	lsls	r3, r3, #2
    4b3e:	4413      	add	r3, r2
    4b40:	3308      	adds	r3, #8
    4b42:	681b      	ldr	r3, [r3, #0]
    4b44:	2005      	movs	r0, #5
    4b46:	4798      	blx	r3
                }
                break;
    4b48:	e00a      	b.n	4b60 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b4a:	9b03      	ldr	r3, [sp, #12]
    4b4c:	3301      	adds	r3, #1
    4b4e:	9303      	str	r3, [sp, #12]
    4b50:	4b13      	ldr	r3, [pc, #76]	; (4ba0 <DisableSafeClock+0xc0>)
    4b52:	681b      	ldr	r3, [r3, #0]
    4b54:	7a1b      	ldrb	r3, [r3, #8]
    4b56:	461a      	mov	r2, r3
    4b58:	9b03      	ldr	r3, [sp, #12]
    4b5a:	4293      	cmp	r3, r2
    4b5c:	d3cc      	bcc.n	4af8 <DisableSafeClock+0x18>
    4b5e:	e000      	b.n	4b62 <DisableSafeClock+0x82>
                break;
    4b60:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4b62:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4b66:	f083 0301 	eor.w	r3, r3, #1
    4b6a:	b2db      	uxtb	r3, r3
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	d013      	beq.n	4b98 <DisableSafeClock+0xb8>
    4b70:	4b0e      	ldr	r3, [pc, #56]	; (4bac <DisableSafeClock+0xcc>)
    4b72:	781b      	ldrb	r3, [r3, #0]
    4b74:	f083 0301 	eor.w	r3, r3, #1
    4b78:	b2db      	uxtb	r3, r3
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	d00c      	beq.n	4b98 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4b7e:	4b09      	ldr	r3, [pc, #36]	; (4ba4 <DisableSafeClock+0xc4>)
    4b80:	791b      	ldrb	r3, [r3, #4]
    4b82:	4619      	mov	r1, r3
    4b84:	4a08      	ldr	r2, [pc, #32]	; (4ba8 <DisableSafeClock+0xc8>)
    4b86:	460b      	mov	r3, r1
    4b88:	005b      	lsls	r3, r3, #1
    4b8a:	440b      	add	r3, r1
    4b8c:	009b      	lsls	r3, r3, #2
    4b8e:	4413      	add	r3, r2
    4b90:	3308      	adds	r3, #8
    4b92:	681b      	ldr	r3, [r3, #0]
    4b94:	2005      	movs	r0, #5
    4b96:	4798      	blx	r3
    }
}
    4b98:	bf00      	nop
    4b9a:	b005      	add	sp, #20
    4b9c:	f85d fb04 	ldr.w	pc, [sp], #4
    4ba0:	1fff8b9c 	.word	0x1fff8b9c
    4ba4:	00017d94 	.word	0x00017d94
    4ba8:	000183c4 	.word	0x000183c4
    4bac:	1fff8b18 	.word	0x1fff8b18

00004bb0 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4bb0:	4b06      	ldr	r3, [pc, #24]	; (4bcc <SetFircToResetValue_TrustedCall+0x1c>)
    4bb2:	2200      	movs	r2, #0
    4bb4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4bb8:	4b04      	ldr	r3, [pc, #16]	; (4bcc <SetFircToResetValue_TrustedCall+0x1c>)
    4bba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4bbe:	4a03      	ldr	r2, [pc, #12]	; (4bcc <SetFircToResetValue_TrustedCall+0x1c>)
    4bc0:	f043 0301 	orr.w	r3, r3, #1
    4bc4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4bc8:	bf00      	nop
    4bca:	4770      	bx	lr
    4bcc:	40064000 	.word	0x40064000

00004bd0 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4bd0:	b084      	sub	sp, #16
    4bd2:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4bd4:	2303      	movs	r3, #3
    4bd6:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4bd8:	2300      	movs	r3, #0
    4bda:	9302      	str	r3, [sp, #8]
    4bdc:	e028      	b.n	4c30 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4bde:	9b01      	ldr	r3, [sp, #4]
    4be0:	9a02      	ldr	r2, [sp, #8]
    4be2:	320d      	adds	r2, #13
    4be4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4be8:	2b28      	cmp	r3, #40	; 0x28
    4bea:	d10b      	bne.n	4c04 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4bec:	9a01      	ldr	r2, [sp, #4]
    4bee:	9b02      	ldr	r3, [sp, #8]
    4bf0:	330d      	adds	r3, #13
    4bf2:	00db      	lsls	r3, r3, #3
    4bf4:	4413      	add	r3, r2
    4bf6:	685b      	ldr	r3, [r3, #4]
    4bf8:	4a2b      	ldr	r2, [pc, #172]	; (4ca8 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4bfa:	5cd3      	ldrb	r3, [r2, r3]
    4bfc:	011b      	lsls	r3, r3, #4
    4bfe:	9a03      	ldr	r2, [sp, #12]
    4c00:	4313      	orrs	r3, r2
    4c02:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4c04:	9b01      	ldr	r3, [sp, #4]
    4c06:	9a02      	ldr	r2, [sp, #8]
    4c08:	320d      	adds	r2, #13
    4c0a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4c0e:	2b29      	cmp	r3, #41	; 0x29
    4c10:	d10b      	bne.n	4c2a <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4c12:	9a01      	ldr	r2, [sp, #4]
    4c14:	9b02      	ldr	r3, [sp, #8]
    4c16:	330d      	adds	r3, #13
    4c18:	00db      	lsls	r3, r3, #3
    4c1a:	4413      	add	r3, r2
    4c1c:	685b      	ldr	r3, [r3, #4]
    4c1e:	4a23      	ldr	r2, [pc, #140]	; (4cac <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4c20:	5cd3      	ldrb	r3, [r2, r3]
    4c22:	009b      	lsls	r3, r3, #2
    4c24:	9a03      	ldr	r2, [sp, #12]
    4c26:	4313      	orrs	r3, r2
    4c28:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4c2a:	9b02      	ldr	r3, [sp, #8]
    4c2c:	3301      	adds	r3, #1
    4c2e:	9302      	str	r3, [sp, #8]
    4c30:	9b01      	ldr	r3, [sp, #4]
    4c32:	7adb      	ldrb	r3, [r3, #11]
    4c34:	461a      	mov	r2, r3
    4c36:	9b02      	ldr	r3, [sp, #8]
    4c38:	4293      	cmp	r3, r2
    4c3a:	d3d0      	bcc.n	4bde <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4c3c:	2300      	movs	r3, #0
    4c3e:	9302      	str	r3, [sp, #8]
    4c40:	e026      	b.n	4c90 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4c42:	9a01      	ldr	r2, [sp, #4]
    4c44:	9b02      	ldr	r3, [sp, #8]
    4c46:	334e      	adds	r3, #78	; 0x4e
    4c48:	00db      	lsls	r3, r3, #3
    4c4a:	4413      	add	r3, r2
    4c4c:	685b      	ldr	r3, [r3, #4]
    4c4e:	2b12      	cmp	r3, #18
    4c50:	d109      	bne.n	4c66 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4c52:	9a01      	ldr	r2, [sp, #4]
    4c54:	9b02      	ldr	r3, [sp, #8]
    4c56:	334e      	adds	r3, #78	; 0x4e
    4c58:	00db      	lsls	r3, r3, #3
    4c5a:	4413      	add	r3, r2
    4c5c:	891b      	ldrh	r3, [r3, #8]
    4c5e:	005b      	lsls	r3, r3, #1
    4c60:	9a03      	ldr	r2, [sp, #12]
    4c62:	4313      	orrs	r3, r2
    4c64:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4c66:	9a01      	ldr	r2, [sp, #4]
    4c68:	9b02      	ldr	r3, [sp, #8]
    4c6a:	334e      	adds	r3, #78	; 0x4e
    4c6c:	00db      	lsls	r3, r3, #3
    4c6e:	4413      	add	r3, r2
    4c70:	685b      	ldr	r3, [r3, #4]
    4c72:	2b13      	cmp	r3, #19
    4c74:	d109      	bne.n	4c8a <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4c76:	9a01      	ldr	r2, [sp, #4]
    4c78:	9b02      	ldr	r3, [sp, #8]
    4c7a:	334e      	adds	r3, #78	; 0x4e
    4c7c:	00db      	lsls	r3, r3, #3
    4c7e:	4413      	add	r3, r2
    4c80:	891b      	ldrh	r3, [r3, #8]
    4c82:	461a      	mov	r2, r3
    4c84:	9b03      	ldr	r3, [sp, #12]
    4c86:	4313      	orrs	r3, r2
    4c88:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4c8a:	9b02      	ldr	r3, [sp, #8]
    4c8c:	3301      	adds	r3, #1
    4c8e:	9302      	str	r3, [sp, #8]
    4c90:	9b01      	ldr	r3, [sp, #4]
    4c92:	7c1b      	ldrb	r3, [r3, #16]
    4c94:	461a      	mov	r2, r3
    4c96:	9b02      	ldr	r3, [sp, #8]
    4c98:	4293      	cmp	r3, r2
    4c9a:	d3d2      	bcc.n	4c42 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4c9c:	4a04      	ldr	r2, [pc, #16]	; (4cb0 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4c9e:	9b03      	ldr	r3, [sp, #12]
    4ca0:	6113      	str	r3, [r2, #16]
}
    4ca2:	bf00      	nop
    4ca4:	b004      	add	sp, #16
    4ca6:	4770      	bx	lr
    4ca8:	00018114 	.word	0x00018114
    4cac:	000181cc 	.word	0x000181cc
    4cb0:	40048000 	.word	0x40048000

00004cb4 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4cb4:	b500      	push	{lr}
    4cb6:	b089      	sub	sp, #36	; 0x24
    4cb8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4cba:	2300      	movs	r3, #0
    4cbc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4cc0:	4a21      	ldr	r2, [pc, #132]	; (4d48 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4cc2:	9b01      	ldr	r3, [sp, #4]
    4cc4:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4cc6:	4b21      	ldr	r3, [pc, #132]	; (4d4c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4cc8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ccc:	f003 0301 	and.w	r3, r3, #1
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d12e      	bne.n	4d32 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4cd4:	4b1e      	ldr	r3, [pc, #120]	; (4d50 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4cd6:	2200      	movs	r2, #0
    4cd8:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4cda:	f7ff ff69 	bl	4bb0 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4cde:	aa03      	add	r2, sp, #12
    4ce0:	a904      	add	r1, sp, #16
    4ce2:	a805      	add	r0, sp, #20
    4ce4:	f24c 3350 	movw	r3, #50000	; 0xc350
    4ce8:	f7fe f8ae 	bl	2e48 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4cec:	4b17      	ldr	r3, [pc, #92]	; (4d4c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4cee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4cf2:	0e1b      	lsrs	r3, r3, #24
    4cf4:	f003 0301 	and.w	r3, r3, #1
    4cf8:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4cfa:	9a03      	ldr	r2, [sp, #12]
    4cfc:	a904      	add	r1, sp, #16
    4cfe:	ab05      	add	r3, sp, #20
    4d00:	4618      	mov	r0, r3
    4d02:	f7fe f8bb 	bl	2e7c <Clock_Ip_TimeoutExpired>
    4d06:	4603      	mov	r3, r0
    4d08:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4d0c:	9b06      	ldr	r3, [sp, #24]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d106      	bne.n	4d20 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4d12:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d16:	f083 0301 	eor.w	r3, r3, #1
    4d1a:	b2db      	uxtb	r3, r3
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d1e5      	bne.n	4cec <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4d20:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d24:	2b00      	cmp	r3, #0
    4d26:	d007      	beq.n	4d38 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4d28:	2105      	movs	r1, #5
    4d2a:	2001      	movs	r0, #1
    4d2c:	f7fe f87c 	bl	2e28 <Clock_Ip_ReportClockErrors>
    4d30:	e002      	b.n	4d38 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4d32:	4b07      	ldr	r3, [pc, #28]	; (4d50 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4d34:	2201      	movs	r2, #1
    4d36:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4d38:	9801      	ldr	r0, [sp, #4]
    4d3a:	f7ff ff49 	bl	4bd0 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4d3e:	bf00      	nop
    4d40:	b009      	add	sp, #36	; 0x24
    4d42:	f85d fb04 	ldr.w	pc, [sp], #4
    4d46:	bf00      	nop
    4d48:	1fff8b9c 	.word	0x1fff8b9c
    4d4c:	40064000 	.word	0x40064000
    4d50:	1fff8b18 	.word	0x1fff8b18

00004d54 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4d54:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4d56:	2300      	movs	r3, #0
    4d58:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4d5a:	4b29      	ldr	r3, [pc, #164]	; (4e00 <getFircConfig+0xac>)
    4d5c:	681b      	ldr	r3, [r3, #0]
    4d5e:	2b00      	cmp	r3, #0
    4d60:	d024      	beq.n	4dac <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4d62:	2300      	movs	r3, #0
    4d64:	9301      	str	r3, [sp, #4]
    4d66:	e01a      	b.n	4d9e <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4d68:	4b25      	ldr	r3, [pc, #148]	; (4e00 <getFircConfig+0xac>)
    4d6a:	6819      	ldr	r1, [r3, #0]
    4d6c:	9a01      	ldr	r2, [sp, #4]
    4d6e:	4613      	mov	r3, r2
    4d70:	005b      	lsls	r3, r3, #1
    4d72:	4413      	add	r3, r2
    4d74:	009b      	lsls	r3, r3, #2
    4d76:	440b      	add	r3, r1
    4d78:	3314      	adds	r3, #20
    4d7a:	681b      	ldr	r3, [r3, #0]
    4d7c:	2b05      	cmp	r3, #5
    4d7e:	d10b      	bne.n	4d98 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4d80:	4b1f      	ldr	r3, [pc, #124]	; (4e00 <getFircConfig+0xac>)
    4d82:	6819      	ldr	r1, [r3, #0]
    4d84:	9a01      	ldr	r2, [sp, #4]
    4d86:	4613      	mov	r3, r2
    4d88:	005b      	lsls	r3, r3, #1
    4d8a:	4413      	add	r3, r2
    4d8c:	009b      	lsls	r3, r3, #2
    4d8e:	3310      	adds	r3, #16
    4d90:	440b      	add	r3, r1
    4d92:	3304      	adds	r3, #4
    4d94:	9300      	str	r3, [sp, #0]
                break;
    4d96:	e009      	b.n	4dac <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4d98:	9b01      	ldr	r3, [sp, #4]
    4d9a:	3301      	adds	r3, #1
    4d9c:	9301      	str	r3, [sp, #4]
    4d9e:	4b18      	ldr	r3, [pc, #96]	; (4e00 <getFircConfig+0xac>)
    4da0:	681b      	ldr	r3, [r3, #0]
    4da2:	7a1b      	ldrb	r3, [r3, #8]
    4da4:	461a      	mov	r2, r3
    4da6:	9b01      	ldr	r3, [sp, #4]
    4da8:	4293      	cmp	r3, r2
    4daa:	d3dd      	bcc.n	4d68 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4dac:	9b00      	ldr	r3, [sp, #0]
    4dae:	2b00      	cmp	r3, #0
    4db0:	d121      	bne.n	4df6 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4db2:	4b14      	ldr	r3, [pc, #80]	; (4e04 <getFircConfig+0xb0>)
    4db4:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4db6:	4b13      	ldr	r3, [pc, #76]	; (4e04 <getFircConfig+0xb0>)
    4db8:	2205      	movs	r2, #5
    4dba:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4dbc:	4b12      	ldr	r3, [pc, #72]	; (4e08 <getFircConfig+0xb4>)
    4dbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4dc2:	b29b      	uxth	r3, r3
    4dc4:	f003 0301 	and.w	r3, r3, #1
    4dc8:	b29a      	uxth	r2, r3
    4dca:	4b0e      	ldr	r3, [pc, #56]	; (4e04 <getFircConfig+0xb0>)
    4dcc:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4dce:	4b0e      	ldr	r3, [pc, #56]	; (4e08 <getFircConfig+0xb4>)
    4dd0:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4dd4:	b2db      	uxtb	r3, r3
    4dd6:	f003 0303 	and.w	r3, r3, #3
    4dda:	b2da      	uxtb	r2, r3
    4ddc:	4b09      	ldr	r3, [pc, #36]	; (4e04 <getFircConfig+0xb0>)
    4dde:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4de0:	4b09      	ldr	r3, [pc, #36]	; (4e08 <getFircConfig+0xb4>)
    4de2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4de6:	b2db      	uxtb	r3, r3
    4de8:	10db      	asrs	r3, r3, #3
    4dea:	b2db      	uxtb	r3, r3
    4dec:	f003 0301 	and.w	r3, r3, #1
    4df0:	b2da      	uxtb	r2, r3
    4df2:	4b04      	ldr	r3, [pc, #16]	; (4e04 <getFircConfig+0xb0>)
    4df4:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4df6:	9b00      	ldr	r3, [sp, #0]
}
    4df8:	4618      	mov	r0, r3
    4dfa:	b002      	add	sp, #8
    4dfc:	4770      	bx	lr
    4dfe:	bf00      	nop
    4e00:	1fff8b9c 	.word	0x1fff8b9c
    4e04:	1fff8c08 	.word	0x1fff8c08
    4e08:	40064000 	.word	0x40064000

00004e0c <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4e0c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4e0e:	2300      	movs	r3, #0
    4e10:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4e12:	4b20      	ldr	r3, [pc, #128]	; (4e94 <getSoscConfig+0x88>)
    4e14:	681b      	ldr	r3, [r3, #0]
    4e16:	2b00      	cmp	r3, #0
    4e18:	d024      	beq.n	4e64 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4e1a:	2300      	movs	r3, #0
    4e1c:	9301      	str	r3, [sp, #4]
    4e1e:	e01a      	b.n	4e56 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4e20:	4b1c      	ldr	r3, [pc, #112]	; (4e94 <getSoscConfig+0x88>)
    4e22:	6819      	ldr	r1, [r3, #0]
    4e24:	9a01      	ldr	r2, [sp, #4]
    4e26:	4613      	mov	r3, r2
    4e28:	009b      	lsls	r3, r3, #2
    4e2a:	4413      	add	r3, r2
    4e2c:	009b      	lsls	r3, r3, #2
    4e2e:	440b      	add	r3, r1
    4e30:	332c      	adds	r3, #44	; 0x2c
    4e32:	681b      	ldr	r3, [r3, #0]
    4e34:	2b08      	cmp	r3, #8
    4e36:	d10b      	bne.n	4e50 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4e38:	4b16      	ldr	r3, [pc, #88]	; (4e94 <getSoscConfig+0x88>)
    4e3a:	6819      	ldr	r1, [r3, #0]
    4e3c:	9a01      	ldr	r2, [sp, #4]
    4e3e:	4613      	mov	r3, r2
    4e40:	009b      	lsls	r3, r3, #2
    4e42:	4413      	add	r3, r2
    4e44:	009b      	lsls	r3, r3, #2
    4e46:	3328      	adds	r3, #40	; 0x28
    4e48:	440b      	add	r3, r1
    4e4a:	3304      	adds	r3, #4
    4e4c:	9300      	str	r3, [sp, #0]
                break;
    4e4e:	e009      	b.n	4e64 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4e50:	9b01      	ldr	r3, [sp, #4]
    4e52:	3301      	adds	r3, #1
    4e54:	9301      	str	r3, [sp, #4]
    4e56:	4b0f      	ldr	r3, [pc, #60]	; (4e94 <getSoscConfig+0x88>)
    4e58:	681b      	ldr	r3, [r3, #0]
    4e5a:	7a5b      	ldrb	r3, [r3, #9]
    4e5c:	461a      	mov	r2, r3
    4e5e:	9b01      	ldr	r3, [sp, #4]
    4e60:	4293      	cmp	r3, r2
    4e62:	d3dd      	bcc.n	4e20 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e64:	9b00      	ldr	r3, [sp, #0]
    4e66:	2b00      	cmp	r3, #0
    4e68:	d110      	bne.n	4e8c <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4e6a:	4b0b      	ldr	r3, [pc, #44]	; (4e98 <getSoscConfig+0x8c>)
    4e6c:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4e6e:	4b0a      	ldr	r3, [pc, #40]	; (4e98 <getSoscConfig+0x8c>)
    4e70:	2208      	movs	r2, #8
    4e72:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4e74:	4b09      	ldr	r3, [pc, #36]	; (4e9c <getSoscConfig+0x90>)
    4e76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4e7a:	b29b      	uxth	r3, r3
    4e7c:	f003 0301 	and.w	r3, r3, #1
    4e80:	b29a      	uxth	r2, r3
    4e82:	4b05      	ldr	r3, [pc, #20]	; (4e98 <getSoscConfig+0x8c>)
    4e84:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4e86:	4b04      	ldr	r3, [pc, #16]	; (4e98 <getSoscConfig+0x8c>)
    4e88:	4a05      	ldr	r2, [pc, #20]	; (4ea0 <getSoscConfig+0x94>)
    4e8a:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4e8c:	9b00      	ldr	r3, [sp, #0]
}
    4e8e:	4618      	mov	r0, r3
    4e90:	b002      	add	sp, #8
    4e92:	4770      	bx	lr
    4e94:	1fff8b9c 	.word	0x1fff8b9c
    4e98:	1fff8c14 	.word	0x1fff8c14
    4e9c:	40064000 	.word	0x40064000
    4ea0:	02625a00 	.word	0x02625a00

00004ea4 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4ea4:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4ea6:	2300      	movs	r3, #0
    4ea8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4eaa:	4b28      	ldr	r3, [pc, #160]	; (4f4c <getSpllConfig+0xa8>)
    4eac:	681b      	ldr	r3, [r3, #0]
    4eae:	2b00      	cmp	r3, #0
    4eb0:	d023      	beq.n	4efa <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4eb2:	2300      	movs	r3, #0
    4eb4:	9301      	str	r3, [sp, #4]
    4eb6:	e019      	b.n	4eec <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4eb8:	4b24      	ldr	r3, [pc, #144]	; (4f4c <getSpllConfig+0xa8>)
    4eba:	6819      	ldr	r1, [r3, #0]
    4ebc:	9a01      	ldr	r2, [sp, #4]
    4ebe:	4613      	mov	r3, r2
    4ec0:	009b      	lsls	r3, r3, #2
    4ec2:	4413      	add	r3, r2
    4ec4:	00db      	lsls	r3, r3, #3
    4ec6:	440b      	add	r3, r1
    4ec8:	3340      	adds	r3, #64	; 0x40
    4eca:	681b      	ldr	r3, [r3, #0]
    4ecc:	2b09      	cmp	r3, #9
    4ece:	d10a      	bne.n	4ee6 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4ed0:	4b1e      	ldr	r3, [pc, #120]	; (4f4c <getSpllConfig+0xa8>)
    4ed2:	6819      	ldr	r1, [r3, #0]
    4ed4:	9a01      	ldr	r2, [sp, #4]
    4ed6:	4613      	mov	r3, r2
    4ed8:	009b      	lsls	r3, r3, #2
    4eda:	4413      	add	r3, r2
    4edc:	00db      	lsls	r3, r3, #3
    4ede:	3340      	adds	r3, #64	; 0x40
    4ee0:	440b      	add	r3, r1
    4ee2:	9300      	str	r3, [sp, #0]
                break;
    4ee4:	e009      	b.n	4efa <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4ee6:	9b01      	ldr	r3, [sp, #4]
    4ee8:	3301      	adds	r3, #1
    4eea:	9301      	str	r3, [sp, #4]
    4eec:	4b17      	ldr	r3, [pc, #92]	; (4f4c <getSpllConfig+0xa8>)
    4eee:	681b      	ldr	r3, [r3, #0]
    4ef0:	7a9b      	ldrb	r3, [r3, #10]
    4ef2:	461a      	mov	r2, r3
    4ef4:	9b01      	ldr	r3, [sp, #4]
    4ef6:	4293      	cmp	r3, r2
    4ef8:	d3de      	bcc.n	4eb8 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4efa:	9b00      	ldr	r3, [sp, #0]
    4efc:	2b00      	cmp	r3, #0
    4efe:	d121      	bne.n	4f44 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4f00:	4b13      	ldr	r3, [pc, #76]	; (4f50 <getSpllConfig+0xac>)
    4f02:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4f04:	4b12      	ldr	r3, [pc, #72]	; (4f50 <getSpllConfig+0xac>)
    4f06:	2209      	movs	r2, #9
    4f08:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4f0a:	4b12      	ldr	r3, [pc, #72]	; (4f54 <getSpllConfig+0xb0>)
    4f0c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4f10:	b29b      	uxth	r3, r3
    4f12:	f003 0301 	and.w	r3, r3, #1
    4f16:	b29a      	uxth	r2, r3
    4f18:	4b0d      	ldr	r3, [pc, #52]	; (4f50 <getSpllConfig+0xac>)
    4f1a:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4f1c:	4b0d      	ldr	r3, [pc, #52]	; (4f54 <getSpllConfig+0xb0>)
    4f1e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4f22:	0a1b      	lsrs	r3, r3, #8
    4f24:	b2db      	uxtb	r3, r3
    4f26:	f003 0307 	and.w	r3, r3, #7
    4f2a:	b2da      	uxtb	r2, r3
    4f2c:	4b08      	ldr	r3, [pc, #32]	; (4f50 <getSpllConfig+0xac>)
    4f2e:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4f30:	4b08      	ldr	r3, [pc, #32]	; (4f54 <getSpllConfig+0xb0>)
    4f32:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4f36:	0c1b      	lsrs	r3, r3, #16
    4f38:	b2db      	uxtb	r3, r3
    4f3a:	f003 031f 	and.w	r3, r3, #31
    4f3e:	b2da      	uxtb	r2, r3
    4f40:	4b03      	ldr	r3, [pc, #12]	; (4f50 <getSpllConfig+0xac>)
    4f42:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4f44:	9b00      	ldr	r3, [sp, #0]
}
    4f46:	4618      	mov	r0, r3
    4f48:	b002      	add	sp, #8
    4f4a:	4770      	bx	lr
    4f4c:	1fff8b9c 	.word	0x1fff8b9c
    4f50:	1fff8c28 	.word	0x1fff8c28
    4f54:	40064000 	.word	0x40064000

00004f58 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4f58:	b086      	sub	sp, #24
    4f5a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4f5c:	2300      	movs	r3, #0
    4f5e:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4f60:	9b01      	ldr	r3, [sp, #4]
    4f62:	2b1b      	cmp	r3, #27
    4f64:	d00f      	beq.n	4f86 <getSelectorConfig+0x2e>
    4f66:	9b01      	ldr	r3, [sp, #4]
    4f68:	2b1b      	cmp	r3, #27
    4f6a:	d80f      	bhi.n	4f8c <getSelectorConfig+0x34>
    4f6c:	9b01      	ldr	r3, [sp, #4]
    4f6e:	2b19      	cmp	r3, #25
    4f70:	d003      	beq.n	4f7a <getSelectorConfig+0x22>
    4f72:	9b01      	ldr	r3, [sp, #4]
    4f74:	2b1a      	cmp	r3, #26
    4f76:	d003      	beq.n	4f80 <getSelectorConfig+0x28>
    4f78:	e008      	b.n	4f8c <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4f7a:	2300      	movs	r3, #0
    4f7c:	9304      	str	r3, [sp, #16]
            break;
    4f7e:	e008      	b.n	4f92 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4f80:	2301      	movs	r3, #1
    4f82:	9304      	str	r3, [sp, #16]
            break;
    4f84:	e005      	b.n	4f92 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4f86:	2302      	movs	r3, #2
    4f88:	9304      	str	r3, [sp, #16]
            break;
    4f8a:	e002      	b.n	4f92 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4f8c:	2300      	movs	r3, #0
    4f8e:	9304      	str	r3, [sp, #16]
            break;
    4f90:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f92:	4b36      	ldr	r3, [pc, #216]	; (506c <getSelectorConfig+0x114>)
    4f94:	681b      	ldr	r3, [r3, #0]
    4f96:	2b00      	cmp	r3, #0
    4f98:	d01d      	beq.n	4fd6 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4f9a:	2300      	movs	r3, #0
    4f9c:	9303      	str	r3, [sp, #12]
    4f9e:	e013      	b.n	4fc8 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4fa0:	4b32      	ldr	r3, [pc, #200]	; (506c <getSelectorConfig+0x114>)
    4fa2:	681b      	ldr	r3, [r3, #0]
    4fa4:	9a03      	ldr	r2, [sp, #12]
    4fa6:	320d      	adds	r2, #13
    4fa8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4fac:	9a01      	ldr	r2, [sp, #4]
    4fae:	429a      	cmp	r2, r3
    4fb0:	d107      	bne.n	4fc2 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4fb2:	4b2e      	ldr	r3, [pc, #184]	; (506c <getSelectorConfig+0x114>)
    4fb4:	681a      	ldr	r2, [r3, #0]
    4fb6:	9b03      	ldr	r3, [sp, #12]
    4fb8:	330d      	adds	r3, #13
    4fba:	00db      	lsls	r3, r3, #3
    4fbc:	4413      	add	r3, r2
    4fbe:	9305      	str	r3, [sp, #20]
                break;
    4fc0:	e009      	b.n	4fd6 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4fc2:	9b03      	ldr	r3, [sp, #12]
    4fc4:	3301      	adds	r3, #1
    4fc6:	9303      	str	r3, [sp, #12]
    4fc8:	4b28      	ldr	r3, [pc, #160]	; (506c <getSelectorConfig+0x114>)
    4fca:	681b      	ldr	r3, [r3, #0]
    4fcc:	7adb      	ldrb	r3, [r3, #11]
    4fce:	461a      	mov	r2, r3
    4fd0:	9b03      	ldr	r3, [sp, #12]
    4fd2:	4293      	cmp	r3, r2
    4fd4:	d3e4      	bcc.n	4fa0 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4fd6:	9b05      	ldr	r3, [sp, #20]
    4fd8:	2b00      	cmp	r3, #0
    4fda:	d140      	bne.n	505e <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4fdc:	9b04      	ldr	r3, [sp, #16]
    4fde:	00db      	lsls	r3, r3, #3
    4fe0:	4a23      	ldr	r2, [pc, #140]	; (5070 <getSelectorConfig+0x118>)
    4fe2:	4413      	add	r3, r2
    4fe4:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4fe6:	4922      	ldr	r1, [pc, #136]	; (5070 <getSelectorConfig+0x118>)
    4fe8:	9b04      	ldr	r3, [sp, #16]
    4fea:	9a01      	ldr	r2, [sp, #4]
    4fec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4ff0:	9b01      	ldr	r3, [sp, #4]
    4ff2:	2b1b      	cmp	r3, #27
    4ff4:	d025      	beq.n	5042 <getSelectorConfig+0xea>
    4ff6:	9b01      	ldr	r3, [sp, #4]
    4ff8:	2b1b      	cmp	r3, #27
    4ffa:	d832      	bhi.n	5062 <getSelectorConfig+0x10a>
    4ffc:	9b01      	ldr	r3, [sp, #4]
    4ffe:	2b19      	cmp	r3, #25
    5000:	d003      	beq.n	500a <getSelectorConfig+0xb2>
    5002:	9b01      	ldr	r3, [sp, #4]
    5004:	2b1a      	cmp	r3, #26
    5006:	d00e      	beq.n	5026 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5008:	e02b      	b.n	5062 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    500a:	4b1a      	ldr	r3, [pc, #104]	; (5074 <getSelectorConfig+0x11c>)
    500c:	695b      	ldr	r3, [r3, #20]
    500e:	0e1b      	lsrs	r3, r3, #24
    5010:	f003 030f 	and.w	r3, r3, #15
    5014:	4a18      	ldr	r2, [pc, #96]	; (5078 <getSelectorConfig+0x120>)
    5016:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    501a:	4915      	ldr	r1, [pc, #84]	; (5070 <getSelectorConfig+0x118>)
    501c:	9b04      	ldr	r3, [sp, #16]
    501e:	00db      	lsls	r3, r3, #3
    5020:	440b      	add	r3, r1
    5022:	605a      	str	r2, [r3, #4]
                break;
    5024:	e01e      	b.n	5064 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    5026:	4b13      	ldr	r3, [pc, #76]	; (5074 <getSelectorConfig+0x11c>)
    5028:	699b      	ldr	r3, [r3, #24]
    502a:	0e1b      	lsrs	r3, r3, #24
    502c:	f003 030f 	and.w	r3, r3, #15
    5030:	4a11      	ldr	r2, [pc, #68]	; (5078 <getSelectorConfig+0x120>)
    5032:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5036:	490e      	ldr	r1, [pc, #56]	; (5070 <getSelectorConfig+0x118>)
    5038:	9b04      	ldr	r3, [sp, #16]
    503a:	00db      	lsls	r3, r3, #3
    503c:	440b      	add	r3, r1
    503e:	605a      	str	r2, [r3, #4]
                break;
    5040:	e010      	b.n	5064 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    5042:	4b0c      	ldr	r3, [pc, #48]	; (5074 <getSelectorConfig+0x11c>)
    5044:	69db      	ldr	r3, [r3, #28]
    5046:	0e1b      	lsrs	r3, r3, #24
    5048:	f003 030f 	and.w	r3, r3, #15
    504c:	4a0a      	ldr	r2, [pc, #40]	; (5078 <getSelectorConfig+0x120>)
    504e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5052:	4907      	ldr	r1, [pc, #28]	; (5070 <getSelectorConfig+0x118>)
    5054:	9b04      	ldr	r3, [sp, #16]
    5056:	00db      	lsls	r3, r3, #3
    5058:	440b      	add	r3, r1
    505a:	605a      	str	r2, [r3, #4]
                break;
    505c:	e002      	b.n	5064 <getSelectorConfig+0x10c>
        }
    }
    505e:	bf00      	nop
    5060:	e000      	b.n	5064 <getSelectorConfig+0x10c>
                break;
    5062:	bf00      	nop

    return ReturnValue;
    5064:	9b05      	ldr	r3, [sp, #20]
}
    5066:	4618      	mov	r0, r3
    5068:	b006      	add	sp, #24
    506a:	4770      	bx	lr
    506c:	1fff8b9c 	.word	0x1fff8b9c
    5070:	1fff8c50 	.word	0x1fff8c50
    5074:	40064000 	.word	0x40064000
    5078:	00018494 	.word	0x00018494

0000507c <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    507c:	b086      	sub	sp, #24
    507e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5080:	2300      	movs	r3, #0
    5082:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5084:	2300      	movs	r3, #0
    5086:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5088:	9b01      	ldr	r3, [sp, #4]
    508a:	2b1f      	cmp	r3, #31
    508c:	d00f      	beq.n	50ae <getCoreDividerConfig+0x32>
    508e:	9b01      	ldr	r3, [sp, #4]
    5090:	2b1f      	cmp	r3, #31
    5092:	d80f      	bhi.n	50b4 <getCoreDividerConfig+0x38>
    5094:	9b01      	ldr	r3, [sp, #4]
    5096:	2b1d      	cmp	r3, #29
    5098:	d003      	beq.n	50a2 <getCoreDividerConfig+0x26>
    509a:	9b01      	ldr	r3, [sp, #4]
    509c:	2b1e      	cmp	r3, #30
    509e:	d003      	beq.n	50a8 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    50a0:	e008      	b.n	50b4 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    50a2:	2300      	movs	r3, #0
    50a4:	9304      	str	r3, [sp, #16]
            break;
    50a6:	e006      	b.n	50b6 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    50a8:	2301      	movs	r3, #1
    50aa:	9304      	str	r3, [sp, #16]
            break;
    50ac:	e003      	b.n	50b6 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    50ae:	2302      	movs	r3, #2
    50b0:	9304      	str	r3, [sp, #16]
            break;
    50b2:	e000      	b.n	50b6 <getCoreDividerConfig+0x3a>
                break;
    50b4:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    50b6:	4b41      	ldr	r3, [pc, #260]	; (51bc <getCoreDividerConfig+0x140>)
    50b8:	681b      	ldr	r3, [r3, #0]
    50ba:	2b00      	cmp	r3, #0
    50bc:	d026      	beq.n	510c <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50be:	2300      	movs	r3, #0
    50c0:	9303      	str	r3, [sp, #12]
    50c2:	e01c      	b.n	50fe <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    50c4:	4b3d      	ldr	r3, [pc, #244]	; (51bc <getCoreDividerConfig+0x140>)
    50c6:	6819      	ldr	r1, [r3, #0]
    50c8:	9a03      	ldr	r2, [sp, #12]
    50ca:	4613      	mov	r3, r2
    50cc:	005b      	lsls	r3, r3, #1
    50ce:	4413      	add	r3, r2
    50d0:	009b      	lsls	r3, r3, #2
    50d2:	440b      	add	r3, r1
    50d4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50d8:	681b      	ldr	r3, [r3, #0]
    50da:	9a01      	ldr	r2, [sp, #4]
    50dc:	429a      	cmp	r2, r3
    50de:	d10b      	bne.n	50f8 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    50e0:	4b36      	ldr	r3, [pc, #216]	; (51bc <getCoreDividerConfig+0x140>)
    50e2:	6819      	ldr	r1, [r3, #0]
    50e4:	9a03      	ldr	r2, [sp, #12]
    50e6:	4613      	mov	r3, r2
    50e8:	005b      	lsls	r3, r3, #1
    50ea:	4413      	add	r3, r2
    50ec:	009b      	lsls	r3, r3, #2
    50ee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50f2:	440b      	add	r3, r1
    50f4:	9305      	str	r3, [sp, #20]
                break;
    50f6:	e009      	b.n	510c <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50f8:	9b03      	ldr	r3, [sp, #12]
    50fa:	3301      	adds	r3, #1
    50fc:	9303      	str	r3, [sp, #12]
    50fe:	4b2f      	ldr	r3, [pc, #188]	; (51bc <getCoreDividerConfig+0x140>)
    5100:	681b      	ldr	r3, [r3, #0]
    5102:	7b1b      	ldrb	r3, [r3, #12]
    5104:	461a      	mov	r2, r3
    5106:	9b03      	ldr	r3, [sp, #12]
    5108:	4293      	cmp	r3, r2
    510a:	d3db      	bcc.n	50c4 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    510c:	9b05      	ldr	r3, [sp, #20]
    510e:	2b00      	cmp	r3, #0
    5110:	d14d      	bne.n	51ae <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5112:	9a04      	ldr	r2, [sp, #16]
    5114:	4613      	mov	r3, r2
    5116:	005b      	lsls	r3, r3, #1
    5118:	4413      	add	r3, r2
    511a:	009b      	lsls	r3, r3, #2
    511c:	4a28      	ldr	r2, [pc, #160]	; (51c0 <getCoreDividerConfig+0x144>)
    511e:	4413      	add	r3, r2
    5120:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5122:	4927      	ldr	r1, [pc, #156]	; (51c0 <getCoreDividerConfig+0x144>)
    5124:	9a04      	ldr	r2, [sp, #16]
    5126:	4613      	mov	r3, r2
    5128:	005b      	lsls	r3, r3, #1
    512a:	4413      	add	r3, r2
    512c:	009b      	lsls	r3, r3, #2
    512e:	440b      	add	r3, r1
    5130:	9a01      	ldr	r2, [sp, #4]
    5132:	601a      	str	r2, [r3, #0]
        switch(Name)
    5134:	9b01      	ldr	r3, [sp, #4]
    5136:	2b1f      	cmp	r3, #31
    5138:	d029      	beq.n	518e <getCoreDividerConfig+0x112>
    513a:	9b01      	ldr	r3, [sp, #4]
    513c:	2b1f      	cmp	r3, #31
    513e:	d838      	bhi.n	51b2 <getCoreDividerConfig+0x136>
    5140:	9b01      	ldr	r3, [sp, #4]
    5142:	2b1d      	cmp	r3, #29
    5144:	d003      	beq.n	514e <getCoreDividerConfig+0xd2>
    5146:	9b01      	ldr	r3, [sp, #4]
    5148:	2b1e      	cmp	r3, #30
    514a:	d010      	beq.n	516e <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    514c:	e031      	b.n	51b2 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    514e:	4b1d      	ldr	r3, [pc, #116]	; (51c4 <getCoreDividerConfig+0x148>)
    5150:	695b      	ldr	r3, [r3, #20]
    5152:	0c1b      	lsrs	r3, r3, #16
    5154:	f003 030f 	and.w	r3, r3, #15
    5158:	1c59      	adds	r1, r3, #1
    515a:	4819      	ldr	r0, [pc, #100]	; (51c0 <getCoreDividerConfig+0x144>)
    515c:	9a04      	ldr	r2, [sp, #16]
    515e:	4613      	mov	r3, r2
    5160:	005b      	lsls	r3, r3, #1
    5162:	4413      	add	r3, r2
    5164:	009b      	lsls	r3, r3, #2
    5166:	4403      	add	r3, r0
    5168:	3304      	adds	r3, #4
    516a:	6019      	str	r1, [r3, #0]
                break;
    516c:	e022      	b.n	51b4 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    516e:	4b15      	ldr	r3, [pc, #84]	; (51c4 <getCoreDividerConfig+0x148>)
    5170:	699b      	ldr	r3, [r3, #24]
    5172:	0c1b      	lsrs	r3, r3, #16
    5174:	f003 030f 	and.w	r3, r3, #15
    5178:	1c59      	adds	r1, r3, #1
    517a:	4811      	ldr	r0, [pc, #68]	; (51c0 <getCoreDividerConfig+0x144>)
    517c:	9a04      	ldr	r2, [sp, #16]
    517e:	4613      	mov	r3, r2
    5180:	005b      	lsls	r3, r3, #1
    5182:	4413      	add	r3, r2
    5184:	009b      	lsls	r3, r3, #2
    5186:	4403      	add	r3, r0
    5188:	3304      	adds	r3, #4
    518a:	6019      	str	r1, [r3, #0]
                break;
    518c:	e012      	b.n	51b4 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    518e:	4b0d      	ldr	r3, [pc, #52]	; (51c4 <getCoreDividerConfig+0x148>)
    5190:	69db      	ldr	r3, [r3, #28]
    5192:	0c1b      	lsrs	r3, r3, #16
    5194:	f003 030f 	and.w	r3, r3, #15
    5198:	1c59      	adds	r1, r3, #1
    519a:	4809      	ldr	r0, [pc, #36]	; (51c0 <getCoreDividerConfig+0x144>)
    519c:	9a04      	ldr	r2, [sp, #16]
    519e:	4613      	mov	r3, r2
    51a0:	005b      	lsls	r3, r3, #1
    51a2:	4413      	add	r3, r2
    51a4:	009b      	lsls	r3, r3, #2
    51a6:	4403      	add	r3, r0
    51a8:	3304      	adds	r3, #4
    51aa:	6019      	str	r1, [r3, #0]
                break;
    51ac:	e002      	b.n	51b4 <getCoreDividerConfig+0x138>
        }
    }
    51ae:	bf00      	nop
    51b0:	e000      	b.n	51b4 <getCoreDividerConfig+0x138>
                break;
    51b2:	bf00      	nop

    return ReturnValue;
    51b4:	9b05      	ldr	r3, [sp, #20]
}
    51b6:	4618      	mov	r0, r3
    51b8:	b006      	add	sp, #24
    51ba:	4770      	bx	lr
    51bc:	1fff8b9c 	.word	0x1fff8b9c
    51c0:	1fff8c68 	.word	0x1fff8c68
    51c4:	40064000 	.word	0x40064000

000051c8 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    51c8:	b086      	sub	sp, #24
    51ca:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    51cc:	2300      	movs	r3, #0
    51ce:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    51d0:	2300      	movs	r3, #0
    51d2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    51d4:	9b01      	ldr	r3, [sp, #4]
    51d6:	2b23      	cmp	r3, #35	; 0x23
    51d8:	d00f      	beq.n	51fa <getBusDividerConfig+0x32>
    51da:	9b01      	ldr	r3, [sp, #4]
    51dc:	2b23      	cmp	r3, #35	; 0x23
    51de:	d80f      	bhi.n	5200 <getBusDividerConfig+0x38>
    51e0:	9b01      	ldr	r3, [sp, #4]
    51e2:	2b21      	cmp	r3, #33	; 0x21
    51e4:	d003      	beq.n	51ee <getBusDividerConfig+0x26>
    51e6:	9b01      	ldr	r3, [sp, #4]
    51e8:	2b22      	cmp	r3, #34	; 0x22
    51ea:	d003      	beq.n	51f4 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    51ec:	e008      	b.n	5200 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    51ee:	2300      	movs	r3, #0
    51f0:	9304      	str	r3, [sp, #16]
            break;
    51f2:	e006      	b.n	5202 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    51f4:	2301      	movs	r3, #1
    51f6:	9304      	str	r3, [sp, #16]
            break;
    51f8:	e003      	b.n	5202 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    51fa:	2302      	movs	r3, #2
    51fc:	9304      	str	r3, [sp, #16]
            break;
    51fe:	e000      	b.n	5202 <getBusDividerConfig+0x3a>
                break;
    5200:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5202:	4b41      	ldr	r3, [pc, #260]	; (5308 <getBusDividerConfig+0x140>)
    5204:	681b      	ldr	r3, [r3, #0]
    5206:	2b00      	cmp	r3, #0
    5208:	d026      	beq.n	5258 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    520a:	2300      	movs	r3, #0
    520c:	9303      	str	r3, [sp, #12]
    520e:	e01c      	b.n	524a <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5210:	4b3d      	ldr	r3, [pc, #244]	; (5308 <getBusDividerConfig+0x140>)
    5212:	6819      	ldr	r1, [r3, #0]
    5214:	9a03      	ldr	r2, [sp, #12]
    5216:	4613      	mov	r3, r2
    5218:	005b      	lsls	r3, r3, #1
    521a:	4413      	add	r3, r2
    521c:	009b      	lsls	r3, r3, #2
    521e:	440b      	add	r3, r1
    5220:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5224:	681b      	ldr	r3, [r3, #0]
    5226:	9a01      	ldr	r2, [sp, #4]
    5228:	429a      	cmp	r2, r3
    522a:	d10b      	bne.n	5244 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    522c:	4b36      	ldr	r3, [pc, #216]	; (5308 <getBusDividerConfig+0x140>)
    522e:	6819      	ldr	r1, [r3, #0]
    5230:	9a03      	ldr	r2, [sp, #12]
    5232:	4613      	mov	r3, r2
    5234:	005b      	lsls	r3, r3, #1
    5236:	4413      	add	r3, r2
    5238:	009b      	lsls	r3, r3, #2
    523a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    523e:	440b      	add	r3, r1
    5240:	9305      	str	r3, [sp, #20]
                break;
    5242:	e009      	b.n	5258 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5244:	9b03      	ldr	r3, [sp, #12]
    5246:	3301      	adds	r3, #1
    5248:	9303      	str	r3, [sp, #12]
    524a:	4b2f      	ldr	r3, [pc, #188]	; (5308 <getBusDividerConfig+0x140>)
    524c:	681b      	ldr	r3, [r3, #0]
    524e:	7b1b      	ldrb	r3, [r3, #12]
    5250:	461a      	mov	r2, r3
    5252:	9b03      	ldr	r3, [sp, #12]
    5254:	4293      	cmp	r3, r2
    5256:	d3db      	bcc.n	5210 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5258:	9b05      	ldr	r3, [sp, #20]
    525a:	2b00      	cmp	r3, #0
    525c:	d14d      	bne.n	52fa <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    525e:	9a04      	ldr	r2, [sp, #16]
    5260:	4613      	mov	r3, r2
    5262:	005b      	lsls	r3, r3, #1
    5264:	4413      	add	r3, r2
    5266:	009b      	lsls	r3, r3, #2
    5268:	4a28      	ldr	r2, [pc, #160]	; (530c <getBusDividerConfig+0x144>)
    526a:	4413      	add	r3, r2
    526c:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    526e:	4927      	ldr	r1, [pc, #156]	; (530c <getBusDividerConfig+0x144>)
    5270:	9a04      	ldr	r2, [sp, #16]
    5272:	4613      	mov	r3, r2
    5274:	005b      	lsls	r3, r3, #1
    5276:	4413      	add	r3, r2
    5278:	009b      	lsls	r3, r3, #2
    527a:	440b      	add	r3, r1
    527c:	9a01      	ldr	r2, [sp, #4]
    527e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5280:	9b01      	ldr	r3, [sp, #4]
    5282:	2b23      	cmp	r3, #35	; 0x23
    5284:	d029      	beq.n	52da <getBusDividerConfig+0x112>
    5286:	9b01      	ldr	r3, [sp, #4]
    5288:	2b23      	cmp	r3, #35	; 0x23
    528a:	d838      	bhi.n	52fe <getBusDividerConfig+0x136>
    528c:	9b01      	ldr	r3, [sp, #4]
    528e:	2b21      	cmp	r3, #33	; 0x21
    5290:	d003      	beq.n	529a <getBusDividerConfig+0xd2>
    5292:	9b01      	ldr	r3, [sp, #4]
    5294:	2b22      	cmp	r3, #34	; 0x22
    5296:	d010      	beq.n	52ba <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5298:	e031      	b.n	52fe <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    529a:	4b1d      	ldr	r3, [pc, #116]	; (5310 <getBusDividerConfig+0x148>)
    529c:	695b      	ldr	r3, [r3, #20]
    529e:	091b      	lsrs	r3, r3, #4
    52a0:	f003 030f 	and.w	r3, r3, #15
    52a4:	1c59      	adds	r1, r3, #1
    52a6:	4819      	ldr	r0, [pc, #100]	; (530c <getBusDividerConfig+0x144>)
    52a8:	9a04      	ldr	r2, [sp, #16]
    52aa:	4613      	mov	r3, r2
    52ac:	005b      	lsls	r3, r3, #1
    52ae:	4413      	add	r3, r2
    52b0:	009b      	lsls	r3, r3, #2
    52b2:	4403      	add	r3, r0
    52b4:	3304      	adds	r3, #4
    52b6:	6019      	str	r1, [r3, #0]
                break;
    52b8:	e022      	b.n	5300 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    52ba:	4b15      	ldr	r3, [pc, #84]	; (5310 <getBusDividerConfig+0x148>)
    52bc:	699b      	ldr	r3, [r3, #24]
    52be:	091b      	lsrs	r3, r3, #4
    52c0:	f003 030f 	and.w	r3, r3, #15
    52c4:	1c59      	adds	r1, r3, #1
    52c6:	4811      	ldr	r0, [pc, #68]	; (530c <getBusDividerConfig+0x144>)
    52c8:	9a04      	ldr	r2, [sp, #16]
    52ca:	4613      	mov	r3, r2
    52cc:	005b      	lsls	r3, r3, #1
    52ce:	4413      	add	r3, r2
    52d0:	009b      	lsls	r3, r3, #2
    52d2:	4403      	add	r3, r0
    52d4:	3304      	adds	r3, #4
    52d6:	6019      	str	r1, [r3, #0]
                break;
    52d8:	e012      	b.n	5300 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    52da:	4b0d      	ldr	r3, [pc, #52]	; (5310 <getBusDividerConfig+0x148>)
    52dc:	69db      	ldr	r3, [r3, #28]
    52de:	091b      	lsrs	r3, r3, #4
    52e0:	f003 030f 	and.w	r3, r3, #15
    52e4:	1c59      	adds	r1, r3, #1
    52e6:	4809      	ldr	r0, [pc, #36]	; (530c <getBusDividerConfig+0x144>)
    52e8:	9a04      	ldr	r2, [sp, #16]
    52ea:	4613      	mov	r3, r2
    52ec:	005b      	lsls	r3, r3, #1
    52ee:	4413      	add	r3, r2
    52f0:	009b      	lsls	r3, r3, #2
    52f2:	4403      	add	r3, r0
    52f4:	3304      	adds	r3, #4
    52f6:	6019      	str	r1, [r3, #0]
                break;
    52f8:	e002      	b.n	5300 <getBusDividerConfig+0x138>
        }
    }
    52fa:	bf00      	nop
    52fc:	e000      	b.n	5300 <getBusDividerConfig+0x138>
                break;
    52fe:	bf00      	nop

    return ReturnValue;
    5300:	9b05      	ldr	r3, [sp, #20]
}
    5302:	4618      	mov	r0, r3
    5304:	b006      	add	sp, #24
    5306:	4770      	bx	lr
    5308:	1fff8b9c 	.word	0x1fff8b9c
    530c:	1fff8c8c 	.word	0x1fff8c8c
    5310:	40064000 	.word	0x40064000

00005314 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5314:	b086      	sub	sp, #24
    5316:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5318:	2300      	movs	r3, #0
    531a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    531c:	2300      	movs	r3, #0
    531e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5320:	9b01      	ldr	r3, [sp, #4]
    5322:	2b27      	cmp	r3, #39	; 0x27
    5324:	d00f      	beq.n	5346 <getSlowDividerConfig+0x32>
    5326:	9b01      	ldr	r3, [sp, #4]
    5328:	2b27      	cmp	r3, #39	; 0x27
    532a:	d80f      	bhi.n	534c <getSlowDividerConfig+0x38>
    532c:	9b01      	ldr	r3, [sp, #4]
    532e:	2b25      	cmp	r3, #37	; 0x25
    5330:	d003      	beq.n	533a <getSlowDividerConfig+0x26>
    5332:	9b01      	ldr	r3, [sp, #4]
    5334:	2b26      	cmp	r3, #38	; 0x26
    5336:	d003      	beq.n	5340 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5338:	e008      	b.n	534c <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    533a:	2300      	movs	r3, #0
    533c:	9304      	str	r3, [sp, #16]
            break;
    533e:	e006      	b.n	534e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5340:	2301      	movs	r3, #1
    5342:	9304      	str	r3, [sp, #16]
            break;
    5344:	e003      	b.n	534e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5346:	2302      	movs	r3, #2
    5348:	9304      	str	r3, [sp, #16]
            break;
    534a:	e000      	b.n	534e <getSlowDividerConfig+0x3a>
                break;
    534c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    534e:	4b40      	ldr	r3, [pc, #256]	; (5450 <getSlowDividerConfig+0x13c>)
    5350:	681b      	ldr	r3, [r3, #0]
    5352:	2b00      	cmp	r3, #0
    5354:	d026      	beq.n	53a4 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5356:	2300      	movs	r3, #0
    5358:	9303      	str	r3, [sp, #12]
    535a:	e01c      	b.n	5396 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    535c:	4b3c      	ldr	r3, [pc, #240]	; (5450 <getSlowDividerConfig+0x13c>)
    535e:	6819      	ldr	r1, [r3, #0]
    5360:	9a03      	ldr	r2, [sp, #12]
    5362:	4613      	mov	r3, r2
    5364:	005b      	lsls	r3, r3, #1
    5366:	4413      	add	r3, r2
    5368:	009b      	lsls	r3, r3, #2
    536a:	440b      	add	r3, r1
    536c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5370:	681b      	ldr	r3, [r3, #0]
    5372:	9a01      	ldr	r2, [sp, #4]
    5374:	429a      	cmp	r2, r3
    5376:	d10b      	bne.n	5390 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5378:	4b35      	ldr	r3, [pc, #212]	; (5450 <getSlowDividerConfig+0x13c>)
    537a:	6819      	ldr	r1, [r3, #0]
    537c:	9a03      	ldr	r2, [sp, #12]
    537e:	4613      	mov	r3, r2
    5380:	005b      	lsls	r3, r3, #1
    5382:	4413      	add	r3, r2
    5384:	009b      	lsls	r3, r3, #2
    5386:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    538a:	440b      	add	r3, r1
    538c:	9305      	str	r3, [sp, #20]
                break;
    538e:	e009      	b.n	53a4 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5390:	9b03      	ldr	r3, [sp, #12]
    5392:	3301      	adds	r3, #1
    5394:	9303      	str	r3, [sp, #12]
    5396:	4b2e      	ldr	r3, [pc, #184]	; (5450 <getSlowDividerConfig+0x13c>)
    5398:	681b      	ldr	r3, [r3, #0]
    539a:	7b1b      	ldrb	r3, [r3, #12]
    539c:	461a      	mov	r2, r3
    539e:	9b03      	ldr	r3, [sp, #12]
    53a0:	4293      	cmp	r3, r2
    53a2:	d3db      	bcc.n	535c <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    53a4:	9b05      	ldr	r3, [sp, #20]
    53a6:	2b00      	cmp	r3, #0
    53a8:	d14a      	bne.n	5440 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    53aa:	9a04      	ldr	r2, [sp, #16]
    53ac:	4613      	mov	r3, r2
    53ae:	005b      	lsls	r3, r3, #1
    53b0:	4413      	add	r3, r2
    53b2:	009b      	lsls	r3, r3, #2
    53b4:	4a27      	ldr	r2, [pc, #156]	; (5454 <getSlowDividerConfig+0x140>)
    53b6:	4413      	add	r3, r2
    53b8:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    53ba:	4926      	ldr	r1, [pc, #152]	; (5454 <getSlowDividerConfig+0x140>)
    53bc:	9a04      	ldr	r2, [sp, #16]
    53be:	4613      	mov	r3, r2
    53c0:	005b      	lsls	r3, r3, #1
    53c2:	4413      	add	r3, r2
    53c4:	009b      	lsls	r3, r3, #2
    53c6:	440b      	add	r3, r1
    53c8:	9a01      	ldr	r2, [sp, #4]
    53ca:	601a      	str	r2, [r3, #0]
        switch(Name)
    53cc:	9b01      	ldr	r3, [sp, #4]
    53ce:	2b27      	cmp	r3, #39	; 0x27
    53d0:	d027      	beq.n	5422 <getSlowDividerConfig+0x10e>
    53d2:	9b01      	ldr	r3, [sp, #4]
    53d4:	2b27      	cmp	r3, #39	; 0x27
    53d6:	d835      	bhi.n	5444 <getSlowDividerConfig+0x130>
    53d8:	9b01      	ldr	r3, [sp, #4]
    53da:	2b25      	cmp	r3, #37	; 0x25
    53dc:	d003      	beq.n	53e6 <getSlowDividerConfig+0xd2>
    53de:	9b01      	ldr	r3, [sp, #4]
    53e0:	2b26      	cmp	r3, #38	; 0x26
    53e2:	d00f      	beq.n	5404 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    53e4:	e02e      	b.n	5444 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    53e6:	4b1c      	ldr	r3, [pc, #112]	; (5458 <getSlowDividerConfig+0x144>)
    53e8:	695b      	ldr	r3, [r3, #20]
    53ea:	f003 030f 	and.w	r3, r3, #15
    53ee:	1c59      	adds	r1, r3, #1
    53f0:	4818      	ldr	r0, [pc, #96]	; (5454 <getSlowDividerConfig+0x140>)
    53f2:	9a04      	ldr	r2, [sp, #16]
    53f4:	4613      	mov	r3, r2
    53f6:	005b      	lsls	r3, r3, #1
    53f8:	4413      	add	r3, r2
    53fa:	009b      	lsls	r3, r3, #2
    53fc:	4403      	add	r3, r0
    53fe:	3304      	adds	r3, #4
    5400:	6019      	str	r1, [r3, #0]
                break;
    5402:	e020      	b.n	5446 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5404:	4b14      	ldr	r3, [pc, #80]	; (5458 <getSlowDividerConfig+0x144>)
    5406:	699b      	ldr	r3, [r3, #24]
    5408:	f003 030f 	and.w	r3, r3, #15
    540c:	1c59      	adds	r1, r3, #1
    540e:	4811      	ldr	r0, [pc, #68]	; (5454 <getSlowDividerConfig+0x140>)
    5410:	9a04      	ldr	r2, [sp, #16]
    5412:	4613      	mov	r3, r2
    5414:	005b      	lsls	r3, r3, #1
    5416:	4413      	add	r3, r2
    5418:	009b      	lsls	r3, r3, #2
    541a:	4403      	add	r3, r0
    541c:	3304      	adds	r3, #4
    541e:	6019      	str	r1, [r3, #0]
                break;
    5420:	e011      	b.n	5446 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5422:	4b0d      	ldr	r3, [pc, #52]	; (5458 <getSlowDividerConfig+0x144>)
    5424:	69db      	ldr	r3, [r3, #28]
    5426:	f003 030f 	and.w	r3, r3, #15
    542a:	1c59      	adds	r1, r3, #1
    542c:	4809      	ldr	r0, [pc, #36]	; (5454 <getSlowDividerConfig+0x140>)
    542e:	9a04      	ldr	r2, [sp, #16]
    5430:	4613      	mov	r3, r2
    5432:	005b      	lsls	r3, r3, #1
    5434:	4413      	add	r3, r2
    5436:	009b      	lsls	r3, r3, #2
    5438:	4403      	add	r3, r0
    543a:	3304      	adds	r3, #4
    543c:	6019      	str	r1, [r3, #0]
                break;
    543e:	e002      	b.n	5446 <getSlowDividerConfig+0x132>
        }
    }
    5440:	bf00      	nop
    5442:	e000      	b.n	5446 <getSlowDividerConfig+0x132>
                break;
    5444:	bf00      	nop

    return ReturnValue;
    5446:	9b05      	ldr	r3, [sp, #20]
}
    5448:	4618      	mov	r0, r3
    544a:	b006      	add	sp, #24
    544c:	4770      	bx	lr
    544e:	bf00      	nop
    5450:	1fff8b9c 	.word	0x1fff8b9c
    5454:	1fff8cb0 	.word	0x1fff8cb0
    5458:	40064000 	.word	0x40064000

0000545c <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    545c:	b500      	push	{lr}
    545e:	b083      	sub	sp, #12
    5460:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5462:	4b64      	ldr	r3, [pc, #400]	; (55f4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5464:	781b      	ldrb	r3, [r3, #0]
    5466:	f083 0301 	eor.w	r3, r3, #1
    546a:	b2db      	uxtb	r3, r3
    546c:	2b00      	cmp	r3, #0
    546e:	d05b      	beq.n	5528 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5470:	4b60      	ldr	r3, [pc, #384]	; (55f4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5472:	2201      	movs	r2, #1
    5474:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5476:	4b60      	ldr	r3, [pc, #384]	; (55f8 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5478:	785b      	ldrb	r3, [r3, #1]
    547a:	461a      	mov	r2, r3
    547c:	4613      	mov	r3, r2
    547e:	009b      	lsls	r3, r3, #2
    5480:	4413      	add	r3, r2
    5482:	009b      	lsls	r3, r3, #2
    5484:	4a5d      	ldr	r2, [pc, #372]	; (55fc <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5486:	4413      	add	r3, r2
    5488:	4a5d      	ldr	r2, [pc, #372]	; (5600 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    548a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    548c:	4b5d      	ldr	r3, [pc, #372]	; (5604 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    548e:	785b      	ldrb	r3, [r3, #1]
    5490:	461a      	mov	r2, r3
    5492:	4613      	mov	r3, r2
    5494:	009b      	lsls	r3, r3, #2
    5496:	4413      	add	r3, r2
    5498:	009b      	lsls	r3, r3, #2
    549a:	4a5b      	ldr	r2, [pc, #364]	; (5608 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    549c:	4413      	add	r3, r2
    549e:	4a5b      	ldr	r2, [pc, #364]	; (560c <Clock_Ip_ClockInitializeObjects+0x1b0>)
    54a0:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    54a2:	4b5b      	ldr	r3, [pc, #364]	; (5610 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    54a4:	791b      	ldrb	r3, [r3, #4]
    54a6:	461a      	mov	r2, r3
    54a8:	4613      	mov	r3, r2
    54aa:	005b      	lsls	r3, r3, #1
    54ac:	4413      	add	r3, r2
    54ae:	009b      	lsls	r3, r3, #2
    54b0:	4a58      	ldr	r2, [pc, #352]	; (5614 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    54b2:	4413      	add	r3, r2
    54b4:	4a58      	ldr	r2, [pc, #352]	; (5618 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    54b6:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    54b8:	4b58      	ldr	r3, [pc, #352]	; (561c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    54ba:	795b      	ldrb	r3, [r3, #5]
    54bc:	00db      	lsls	r3, r3, #3
    54be:	4a58      	ldr	r2, [pc, #352]	; (5620 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    54c0:	4413      	add	r3, r2
    54c2:	4a58      	ldr	r2, [pc, #352]	; (5624 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    54c4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    54c6:	4b55      	ldr	r3, [pc, #340]	; (561c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    54c8:	79db      	ldrb	r3, [r3, #7]
    54ca:	00db      	lsls	r3, r3, #3
    54cc:	4a54      	ldr	r2, [pc, #336]	; (5620 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    54ce:	4413      	add	r3, r2
    54d0:	4a55      	ldr	r2, [pc, #340]	; (5628 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    54d2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    54d4:	4b55      	ldr	r3, [pc, #340]	; (562c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54d6:	799b      	ldrb	r3, [r3, #6]
    54d8:	009b      	lsls	r3, r3, #2
    54da:	4a55      	ldr	r2, [pc, #340]	; (5630 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54dc:	4413      	add	r3, r2
    54de:	4a55      	ldr	r2, [pc, #340]	; (5634 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    54e0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    54e2:	4b52      	ldr	r3, [pc, #328]	; (562c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54e4:	7a1b      	ldrb	r3, [r3, #8]
    54e6:	009b      	lsls	r3, r3, #2
    54e8:	4a51      	ldr	r2, [pc, #324]	; (5630 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54ea:	4413      	add	r3, r2
    54ec:	4a52      	ldr	r2, [pc, #328]	; (5638 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    54ee:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    54f0:	4b4e      	ldr	r3, [pc, #312]	; (562c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54f2:	7a5b      	ldrb	r3, [r3, #9]
    54f4:	009b      	lsls	r3, r3, #2
    54f6:	4a4e      	ldr	r2, [pc, #312]	; (5630 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54f8:	4413      	add	r3, r2
    54fa:	4a50      	ldr	r2, [pc, #320]	; (563c <Clock_Ip_ClockInitializeObjects+0x1e0>)
    54fc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    54fe:	4b4b      	ldr	r3, [pc, #300]	; (562c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5500:	7adb      	ldrb	r3, [r3, #11]
    5502:	009b      	lsls	r3, r3, #2
    5504:	4a4a      	ldr	r2, [pc, #296]	; (5630 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5506:	4413      	add	r3, r2
    5508:	4a4d      	ldr	r2, [pc, #308]	; (5640 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    550a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    550c:	4b47      	ldr	r3, [pc, #284]	; (562c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    550e:	7b1b      	ldrb	r3, [r3, #12]
    5510:	009b      	lsls	r3, r3, #2
    5512:	4a47      	ldr	r2, [pc, #284]	; (5630 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5514:	4413      	add	r3, r2
    5516:	4a4b      	ldr	r2, [pc, #300]	; (5644 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5518:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    551a:	4b44      	ldr	r3, [pc, #272]	; (562c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    551c:	7b9b      	ldrb	r3, [r3, #14]
    551e:	009b      	lsls	r3, r3, #2
    5520:	4a43      	ldr	r2, [pc, #268]	; (5630 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5522:	4413      	add	r3, r2
    5524:	4a48      	ldr	r2, [pc, #288]	; (5648 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5526:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5528:	4b48      	ldr	r3, [pc, #288]	; (564c <Clock_Ip_ClockInitializeObjects+0x1f0>)
    552a:	781b      	ldrb	r3, [r3, #0]
    552c:	2b00      	cmp	r3, #0
    552e:	d002      	beq.n	5536 <Clock_Ip_ClockInitializeObjects+0xda>
    5530:	9b01      	ldr	r3, [sp, #4]
    5532:	2b00      	cmp	r3, #0
    5534:	d003      	beq.n	553e <Clock_Ip_ClockInitializeObjects+0xe2>
    5536:	4b46      	ldr	r3, [pc, #280]	; (5650 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5538:	781b      	ldrb	r3, [r3, #0]
    553a:	2b00      	cmp	r3, #0
    553c:	d056      	beq.n	55ec <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    553e:	f7ff fc09 	bl	4d54 <getFircConfig>
    5542:	4603      	mov	r3, r0
    5544:	4a43      	ldr	r2, [pc, #268]	; (5654 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5546:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5548:	f7ff fc60 	bl	4e0c <getSoscConfig>
    554c:	4603      	mov	r3, r0
    554e:	4a42      	ldr	r2, [pc, #264]	; (5658 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5550:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5552:	f7ff fca7 	bl	4ea4 <getSpllConfig>
    5556:	4603      	mov	r3, r0
    5558:	4a40      	ldr	r2, [pc, #256]	; (565c <Clock_Ip_ClockInitializeObjects+0x200>)
    555a:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    555c:	2019      	movs	r0, #25
    555e:	f7ff fcfb 	bl	4f58 <getSelectorConfig>
    5562:	4603      	mov	r3, r0
    5564:	4a3e      	ldr	r2, [pc, #248]	; (5660 <Clock_Ip_ClockInitializeObjects+0x204>)
    5566:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5568:	201a      	movs	r0, #26
    556a:	f7ff fcf5 	bl	4f58 <getSelectorConfig>
    556e:	4603      	mov	r3, r0
    5570:	4a3c      	ldr	r2, [pc, #240]	; (5664 <Clock_Ip_ClockInitializeObjects+0x208>)
    5572:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5574:	201b      	movs	r0, #27
    5576:	f7ff fcef 	bl	4f58 <getSelectorConfig>
    557a:	4603      	mov	r3, r0
    557c:	4a3a      	ldr	r2, [pc, #232]	; (5668 <Clock_Ip_ClockInitializeObjects+0x20c>)
    557e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5580:	201d      	movs	r0, #29
    5582:	f7ff fd7b 	bl	507c <getCoreDividerConfig>
    5586:	4603      	mov	r3, r0
    5588:	4a38      	ldr	r2, [pc, #224]	; (566c <Clock_Ip_ClockInitializeObjects+0x210>)
    558a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    558c:	201e      	movs	r0, #30
    558e:	f7ff fd75 	bl	507c <getCoreDividerConfig>
    5592:	4603      	mov	r3, r0
    5594:	4a36      	ldr	r2, [pc, #216]	; (5670 <Clock_Ip_ClockInitializeObjects+0x214>)
    5596:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5598:	201f      	movs	r0, #31
    559a:	f7ff fd6f 	bl	507c <getCoreDividerConfig>
    559e:	4603      	mov	r3, r0
    55a0:	4a34      	ldr	r2, [pc, #208]	; (5674 <Clock_Ip_ClockInitializeObjects+0x218>)
    55a2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    55a4:	2021      	movs	r0, #33	; 0x21
    55a6:	f7ff fe0f 	bl	51c8 <getBusDividerConfig>
    55aa:	4603      	mov	r3, r0
    55ac:	4a32      	ldr	r2, [pc, #200]	; (5678 <Clock_Ip_ClockInitializeObjects+0x21c>)
    55ae:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    55b0:	2022      	movs	r0, #34	; 0x22
    55b2:	f7ff fe09 	bl	51c8 <getBusDividerConfig>
    55b6:	4603      	mov	r3, r0
    55b8:	4a30      	ldr	r2, [pc, #192]	; (567c <Clock_Ip_ClockInitializeObjects+0x220>)
    55ba:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    55bc:	2023      	movs	r0, #35	; 0x23
    55be:	f7ff fe03 	bl	51c8 <getBusDividerConfig>
    55c2:	4603      	mov	r3, r0
    55c4:	4a2e      	ldr	r2, [pc, #184]	; (5680 <Clock_Ip_ClockInitializeObjects+0x224>)
    55c6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    55c8:	2025      	movs	r0, #37	; 0x25
    55ca:	f7ff fea3 	bl	5314 <getSlowDividerConfig>
    55ce:	4603      	mov	r3, r0
    55d0:	4a2c      	ldr	r2, [pc, #176]	; (5684 <Clock_Ip_ClockInitializeObjects+0x228>)
    55d2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    55d4:	2026      	movs	r0, #38	; 0x26
    55d6:	f7ff fe9d 	bl	5314 <getSlowDividerConfig>
    55da:	4603      	mov	r3, r0
    55dc:	4a2a      	ldr	r2, [pc, #168]	; (5688 <Clock_Ip_ClockInitializeObjects+0x22c>)
    55de:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    55e0:	2027      	movs	r0, #39	; 0x27
    55e2:	f7ff fe97 	bl	5314 <getSlowDividerConfig>
    55e6:	4603      	mov	r3, r0
    55e8:	4a28      	ldr	r2, [pc, #160]	; (568c <Clock_Ip_ClockInitializeObjects+0x230>)
    55ea:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    55ec:	bf00      	nop
    55ee:	b003      	add	sp, #12
    55f0:	f85d fb04 	ldr.w	pc, [sp], #4
    55f4:	1fff8cd4 	.word	0x1fff8cd4
    55f8:	00017dc4 	.word	0x00017dc4
    55fc:	00018410 	.word	0x00018410
    5600:	1fff8ba0 	.word	0x1fff8ba0
    5604:	00017d84 	.word	0x00017d84
    5608:	00018358 	.word	0x00018358
    560c:	1fff8ba4 	.word	0x1fff8ba4
    5610:	00017d94 	.word	0x00017d94
    5614:	000183c4 	.word	0x000183c4
    5618:	1fff8ba8 	.word	0x1fff8ba8
    561c:	00017dd4 	.word	0x00017dd4
    5620:	0001843c 	.word	0x0001843c
    5624:	1fff8bac 	.word	0x1fff8bac
    5628:	1fff8be8 	.word	0x1fff8be8
    562c:	00017d64 	.word	0x00017d64
    5630:	00018314 	.word	0x00018314
    5634:	1fff8bb0 	.word	0x1fff8bb0
    5638:	1fff8bec 	.word	0x1fff8bec
    563c:	1fff8bb4 	.word	0x1fff8bb4
    5640:	1fff8bf0 	.word	0x1fff8bf0
    5644:	1fff8bb8 	.word	0x1fff8bb8
    5648:	1fff8bf4 	.word	0x1fff8bf4
    564c:	1fff8b19 	.word	0x1fff8b19
    5650:	1fff8b10 	.word	0x1fff8b10
    5654:	1fff8bbc 	.word	0x1fff8bbc
    5658:	1fff8bc0 	.word	0x1fff8bc0
    565c:	1fff8bc4 	.word	0x1fff8bc4
    5660:	1fff8bc8 	.word	0x1fff8bc8
    5664:	1fff8bcc 	.word	0x1fff8bcc
    5668:	1fff8bf8 	.word	0x1fff8bf8
    566c:	1fff8bd0 	.word	0x1fff8bd0
    5670:	1fff8bd4 	.word	0x1fff8bd4
    5674:	1fff8bfc 	.word	0x1fff8bfc
    5678:	1fff8bd8 	.word	0x1fff8bd8
    567c:	1fff8bdc 	.word	0x1fff8bdc
    5680:	1fff8c00 	.word	0x1fff8c00
    5684:	1fff8be0 	.word	0x1fff8be0
    5688:	1fff8be4 	.word	0x1fff8be4
    568c:	1fff8c04 	.word	0x1fff8c04

00005690 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5690:	b500      	push	{lr}
    5692:	b083      	sub	sp, #12
    5694:	9001      	str	r0, [sp, #4]
    5696:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5698:	9b01      	ldr	r3, [sp, #4]
    569a:	2b03      	cmp	r3, #3
    569c:	f000 8090 	beq.w	57c0 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    56a0:	9b01      	ldr	r3, [sp, #4]
    56a2:	2b03      	cmp	r3, #3
    56a4:	f200 80d3 	bhi.w	584e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    56a8:	9b01      	ldr	r3, [sp, #4]
    56aa:	2b00      	cmp	r3, #0
    56ac:	d040      	beq.n	5730 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    56ae:	9b01      	ldr	r3, [sp, #4]
    56b0:	3b01      	subs	r3, #1
    56b2:	2b01      	cmp	r3, #1
    56b4:	f200 80cb 	bhi.w	584e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    56b8:	9b00      	ldr	r3, [sp, #0]
    56ba:	2b00      	cmp	r3, #0
    56bc:	f040 80c9 	bne.w	5852 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    56c0:	4b68      	ldr	r3, [pc, #416]	; (5864 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    56c2:	2200      	movs	r2, #0
    56c4:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    56c6:	4b68      	ldr	r3, [pc, #416]	; (5868 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    56c8:	681b      	ldr	r3, [r3, #0]
    56ca:	685b      	ldr	r3, [r3, #4]
    56cc:	4a67      	ldr	r2, [pc, #412]	; (586c <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    56ce:	6812      	ldr	r2, [r2, #0]
    56d0:	4610      	mov	r0, r2
    56d2:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    56d4:	4b66      	ldr	r3, [pc, #408]	; (5870 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    56d6:	681b      	ldr	r3, [r3, #0]
    56d8:	681b      	ldr	r3, [r3, #0]
    56da:	4a66      	ldr	r2, [pc, #408]	; (5874 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    56dc:	6812      	ldr	r2, [r2, #0]
    56de:	4610      	mov	r0, r2
    56e0:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    56e2:	4b65      	ldr	r3, [pc, #404]	; (5878 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    56e4:	681b      	ldr	r3, [r3, #0]
    56e6:	681b      	ldr	r3, [r3, #0]
    56e8:	4a64      	ldr	r2, [pc, #400]	; (587c <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    56ea:	6812      	ldr	r2, [r2, #0]
    56ec:	4610      	mov	r0, r2
    56ee:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    56f0:	4b63      	ldr	r3, [pc, #396]	; (5880 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    56f2:	681b      	ldr	r3, [r3, #0]
    56f4:	681b      	ldr	r3, [r3, #0]
    56f6:	4a63      	ldr	r2, [pc, #396]	; (5884 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    56f8:	6812      	ldr	r2, [r2, #0]
    56fa:	4610      	mov	r0, r2
    56fc:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    56fe:	4b62      	ldr	r3, [pc, #392]	; (5888 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5700:	681b      	ldr	r3, [r3, #0]
    5702:	691b      	ldr	r3, [r3, #16]
    5704:	4a61      	ldr	r2, [pc, #388]	; (588c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5706:	6812      	ldr	r2, [r2, #0]
    5708:	6812      	ldr	r2, [r2, #0]
    570a:	4610      	mov	r0, r2
    570c:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    570e:	4b60      	ldr	r3, [pc, #384]	; (5890 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5710:	681b      	ldr	r3, [r3, #0]
    5712:	68db      	ldr	r3, [r3, #12]
    5714:	4a5f      	ldr	r2, [pc, #380]	; (5894 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5716:	6812      	ldr	r2, [r2, #0]
    5718:	6812      	ldr	r2, [r2, #0]
    571a:	4610      	mov	r0, r2
    571c:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    571e:	4b5e      	ldr	r3, [pc, #376]	; (5898 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5720:	681b      	ldr	r3, [r3, #0]
    5722:	689b      	ldr	r3, [r3, #8]
    5724:	4a5d      	ldr	r2, [pc, #372]	; (589c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5726:	6812      	ldr	r2, [r2, #0]
    5728:	6812      	ldr	r2, [r2, #0]
    572a:	4610      	mov	r0, r2
    572c:	4798      	blx	r3
            }
        }
        break;
    572e:	e090      	b.n	5852 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5730:	9b00      	ldr	r3, [sp, #0]
    5732:	2b02      	cmp	r3, #2
    5734:	f040 808f 	bne.w	5856 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5738:	4b4a      	ldr	r3, [pc, #296]	; (5864 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    573a:	2201      	movs	r2, #1
    573c:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    573e:	4b56      	ldr	r3, [pc, #344]	; (5898 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5740:	681b      	ldr	r3, [r3, #0]
    5742:	685b      	ldr	r3, [r3, #4]
    5744:	4a55      	ldr	r2, [pc, #340]	; (589c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5746:	6812      	ldr	r2, [r2, #0]
    5748:	4610      	mov	r0, r2
    574a:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    574c:	4b50      	ldr	r3, [pc, #320]	; (5890 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    574e:	681b      	ldr	r3, [r3, #0]
    5750:	691b      	ldr	r3, [r3, #16]
    5752:	4a50      	ldr	r2, [pc, #320]	; (5894 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5754:	6812      	ldr	r2, [r2, #0]
    5756:	4610      	mov	r0, r2
    5758:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    575a:	4b4d      	ldr	r3, [pc, #308]	; (5890 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    575c:	681b      	ldr	r3, [r3, #0]
    575e:	689b      	ldr	r3, [r3, #8]
    5760:	4a4c      	ldr	r2, [pc, #304]	; (5894 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5762:	6812      	ldr	r2, [r2, #0]
    5764:	4610      	mov	r0, r2
    5766:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5768:	4b47      	ldr	r3, [pc, #284]	; (5888 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    576a:	681b      	ldr	r3, [r3, #0]
    576c:	68db      	ldr	r3, [r3, #12]
    576e:	4a47      	ldr	r2, [pc, #284]	; (588c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5770:	6812      	ldr	r2, [r2, #0]
    5772:	4610      	mov	r0, r2
    5774:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5776:	4b44      	ldr	r3, [pc, #272]	; (5888 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	689b      	ldr	r3, [r3, #8]
    577c:	4a43      	ldr	r2, [pc, #268]	; (588c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    577e:	6812      	ldr	r2, [r2, #0]
    5780:	6812      	ldr	r2, [r2, #0]
    5782:	4610      	mov	r0, r2
    5784:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5786:	4b38      	ldr	r3, [pc, #224]	; (5868 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5788:	681b      	ldr	r3, [r3, #0]
    578a:	685b      	ldr	r3, [r3, #4]
    578c:	4a44      	ldr	r2, [pc, #272]	; (58a0 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    578e:	6812      	ldr	r2, [r2, #0]
    5790:	4610      	mov	r0, r2
    5792:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5794:	4b36      	ldr	r3, [pc, #216]	; (5870 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5796:	681b      	ldr	r3, [r3, #0]
    5798:	681b      	ldr	r3, [r3, #0]
    579a:	4a42      	ldr	r2, [pc, #264]	; (58a4 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    579c:	6812      	ldr	r2, [r2, #0]
    579e:	4610      	mov	r0, r2
    57a0:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    57a2:	4b35      	ldr	r3, [pc, #212]	; (5878 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    57a4:	681b      	ldr	r3, [r3, #0]
    57a6:	681b      	ldr	r3, [r3, #0]
    57a8:	4a3f      	ldr	r2, [pc, #252]	; (58a8 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    57aa:	6812      	ldr	r2, [r2, #0]
    57ac:	4610      	mov	r0, r2
    57ae:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    57b0:	4b33      	ldr	r3, [pc, #204]	; (5880 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    57b2:	681b      	ldr	r3, [r3, #0]
    57b4:	681b      	ldr	r3, [r3, #0]
    57b6:	4a3d      	ldr	r2, [pc, #244]	; (58ac <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    57b8:	6812      	ldr	r2, [r2, #0]
    57ba:	4610      	mov	r0, r2
    57bc:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    57be:	e04a      	b.n	5856 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    57c0:	9b00      	ldr	r3, [sp, #0]
    57c2:	2b02      	cmp	r3, #2
    57c4:	d149      	bne.n	585a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    57c6:	4b27      	ldr	r3, [pc, #156]	; (5864 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    57c8:	2201      	movs	r2, #1
    57ca:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    57cc:	4b32      	ldr	r3, [pc, #200]	; (5898 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    57ce:	681b      	ldr	r3, [r3, #0]
    57d0:	685b      	ldr	r3, [r3, #4]
    57d2:	4a32      	ldr	r2, [pc, #200]	; (589c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    57d4:	6812      	ldr	r2, [r2, #0]
    57d6:	4610      	mov	r0, r2
    57d8:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    57da:	4b2d      	ldr	r3, [pc, #180]	; (5890 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    57dc:	681b      	ldr	r3, [r3, #0]
    57de:	691b      	ldr	r3, [r3, #16]
    57e0:	4a2c      	ldr	r2, [pc, #176]	; (5894 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    57e2:	6812      	ldr	r2, [r2, #0]
    57e4:	4610      	mov	r0, r2
    57e6:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    57e8:	4b29      	ldr	r3, [pc, #164]	; (5890 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    57ea:	681b      	ldr	r3, [r3, #0]
    57ec:	689b      	ldr	r3, [r3, #8]
    57ee:	4a29      	ldr	r2, [pc, #164]	; (5894 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    57f0:	6812      	ldr	r2, [r2, #0]
    57f2:	4610      	mov	r0, r2
    57f4:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    57f6:	4b24      	ldr	r3, [pc, #144]	; (5888 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    57f8:	681b      	ldr	r3, [r3, #0]
    57fa:	68db      	ldr	r3, [r3, #12]
    57fc:	4a23      	ldr	r2, [pc, #140]	; (588c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    57fe:	6812      	ldr	r2, [r2, #0]
    5800:	4610      	mov	r0, r2
    5802:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5804:	4b20      	ldr	r3, [pc, #128]	; (5888 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5806:	681b      	ldr	r3, [r3, #0]
    5808:	689b      	ldr	r3, [r3, #8]
    580a:	4a20      	ldr	r2, [pc, #128]	; (588c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    580c:	6812      	ldr	r2, [r2, #0]
    580e:	6812      	ldr	r2, [r2, #0]
    5810:	4610      	mov	r0, r2
    5812:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5814:	4b26      	ldr	r3, [pc, #152]	; (58b0 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5816:	681b      	ldr	r3, [r3, #0]
    5818:	685b      	ldr	r3, [r3, #4]
    581a:	4a26      	ldr	r2, [pc, #152]	; (58b4 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    581c:	6812      	ldr	r2, [r2, #0]
    581e:	4610      	mov	r0, r2
    5820:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5822:	4b25      	ldr	r3, [pc, #148]	; (58b8 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5824:	681b      	ldr	r3, [r3, #0]
    5826:	681b      	ldr	r3, [r3, #0]
    5828:	4a24      	ldr	r2, [pc, #144]	; (58bc <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    582a:	6812      	ldr	r2, [r2, #0]
    582c:	4610      	mov	r0, r2
    582e:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5830:	4b23      	ldr	r3, [pc, #140]	; (58c0 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5832:	681b      	ldr	r3, [r3, #0]
    5834:	681b      	ldr	r3, [r3, #0]
    5836:	4a23      	ldr	r2, [pc, #140]	; (58c4 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5838:	6812      	ldr	r2, [r2, #0]
    583a:	4610      	mov	r0, r2
    583c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    583e:	4b22      	ldr	r3, [pc, #136]	; (58c8 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5840:	681b      	ldr	r3, [r3, #0]
    5842:	681b      	ldr	r3, [r3, #0]
    5844:	4a21      	ldr	r2, [pc, #132]	; (58cc <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5846:	6812      	ldr	r2, [r2, #0]
    5848:	4610      	mov	r0, r2
    584a:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    584c:	e005      	b.n	585a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    584e:	bf00      	nop
    5850:	e004      	b.n	585c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5852:	bf00      	nop
    5854:	e002      	b.n	585c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5856:	bf00      	nop
    5858:	e000      	b.n	585c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    585a:	bf00      	nop
    }

}
    585c:	bf00      	nop
    585e:	b003      	add	sp, #12
    5860:	f85d fb04 	ldr.w	pc, [sp], #4
    5864:	1fff8b19 	.word	0x1fff8b19
    5868:	1fff8bac 	.word	0x1fff8bac
    586c:	1fff8bcc 	.word	0x1fff8bcc
    5870:	1fff8bb0 	.word	0x1fff8bb0
    5874:	1fff8bd4 	.word	0x1fff8bd4
    5878:	1fff8bb4 	.word	0x1fff8bb4
    587c:	1fff8bdc 	.word	0x1fff8bdc
    5880:	1fff8bb8 	.word	0x1fff8bb8
    5884:	1fff8be4 	.word	0x1fff8be4
    5888:	1fff8ba0 	.word	0x1fff8ba0
    588c:	1fff8bc4 	.word	0x1fff8bc4
    5890:	1fff8ba4 	.word	0x1fff8ba4
    5894:	1fff8bc0 	.word	0x1fff8bc0
    5898:	1fff8ba8 	.word	0x1fff8ba8
    589c:	1fff8bbc 	.word	0x1fff8bbc
    58a0:	1fff8bc8 	.word	0x1fff8bc8
    58a4:	1fff8bd0 	.word	0x1fff8bd0
    58a8:	1fff8bd8 	.word	0x1fff8bd8
    58ac:	1fff8be0 	.word	0x1fff8be0
    58b0:	1fff8be8 	.word	0x1fff8be8
    58b4:	1fff8bf8 	.word	0x1fff8bf8
    58b8:	1fff8bec 	.word	0x1fff8bec
    58bc:	1fff8bfc 	.word	0x1fff8bfc
    58c0:	1fff8bf0 	.word	0x1fff8bf0
    58c4:	1fff8c00 	.word	0x1fff8c00
    58c8:	1fff8bf4 	.word	0x1fff8bf4
    58cc:	1fff8c04 	.word	0x1fff8c04

000058d0 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    58d0:	b500      	push	{lr}
    58d2:	b083      	sub	sp, #12
    58d4:	9001      	str	r0, [sp, #4]
    58d6:	9100      	str	r1, [sp, #0]
    switch(Command)
    58d8:	9b00      	ldr	r3, [sp, #0]
    58da:	2b04      	cmp	r3, #4
    58dc:	d010      	beq.n	5900 <Clock_Ip_Command+0x30>
    58de:	9b00      	ldr	r3, [sp, #0]
    58e0:	2b04      	cmp	r3, #4
    58e2:	d811      	bhi.n	5908 <Clock_Ip_Command+0x38>
    58e4:	9b00      	ldr	r3, [sp, #0]
    58e6:	2b01      	cmp	r3, #1
    58e8:	d006      	beq.n	58f8 <Clock_Ip_Command+0x28>
    58ea:	9b00      	ldr	r3, [sp, #0]
    58ec:	2b02      	cmp	r3, #2
    58ee:	d10b      	bne.n	5908 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    58f0:	9801      	ldr	r0, [sp, #4]
    58f2:	f7ff fdb3 	bl	545c <Clock_Ip_ClockInitializeObjects>
            break;
    58f6:	e008      	b.n	590a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    58f8:	9801      	ldr	r0, [sp, #4]
    58fa:	f7ff f9db 	bl	4cb4 <Clock_Ip_SpecificPlatformInitClock>
            break;
    58fe:	e004      	b.n	590a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5900:	9801      	ldr	r0, [sp, #4]
    5902:	f7ff f8ed 	bl	4ae0 <DisableSafeClock>
            break;
    5906:	e000      	b.n	590a <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5908:	bf00      	nop
    }
}
    590a:	bf00      	nop
    590c:	b003      	add	sp, #12
    590e:	f85d fb04 	ldr.w	pc, [sp], #4
    5912:	bf00      	nop

00005914 <Mcu_CheckInit>:
/**
* @brief Mcu_CheckInit - checks for Mcu_Init
* @implements Mcu_CheckInit_Activity
*/
static Std_ReturnType Mcu_CheckInit(const Mcu_ConfigType * ConfigPtr)
{
    5914:	b500      	push	{lr}
    5916:	b085      	sub	sp, #20
    5918:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    591a:	2300      	movs	r3, #0
    591c:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_PRECOMPILE_SUPPORT == STD_OFF)
    if (NULL_PTR == ConfigPtr)
    5920:	9b01      	ldr	r3, [sp, #4]
    5922:	2b00      	cmp	r3, #0
    5924:	d108      	bne.n	5938 <Mcu_CheckInit+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5926:	2301      	movs	r3, #1
    5928:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    592c:	2311      	movs	r3, #17
    592e:	2200      	movs	r2, #0
    5930:	2100      	movs	r1, #0
    5932:	2065      	movs	r0, #101	; 0x65
    5934:	f011 f996 	bl	16c64 <Det_ReportError>

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    }
#endif /* (MCU_PRECOMPILE_SUPPORT == STD_ON) */

    return CheckStatus;
    5938:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    593c:	4618      	mov	r0, r3
    593e:	b005      	add	sp, #20
    5940:	f85d fb04 	ldr.w	pc, [sp], #4

00005944 <Mcu_CheckInitClock>:
/**
* @brief Mcu_CheckInitClock - checks for Mcu_InitClock
* @implements Mcu_CheckInitClock_Activity
*/
static Std_ReturnType Mcu_CheckInitClock(Mcu_ClockType ClockSetting)
{
    5944:	b500      	push	{lr}
    5946:	b085      	sub	sp, #20
    5948:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    594a:	2300      	movs	r3, #0
    594c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ClockSetting >= Mcu_pConfigPtr->NoClkConfigs)
    5950:	4b0a      	ldr	r3, [pc, #40]	; (597c <Mcu_CheckInitClock+0x38>)
    5952:	681b      	ldr	r3, [r3, #0]
    5954:	68db      	ldr	r3, [r3, #12]
    5956:	9a01      	ldr	r2, [sp, #4]
    5958:	429a      	cmp	r2, r3
    595a:	d308      	bcc.n	596e <Mcu_CheckInitClock+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    595c:	2301      	movs	r3, #1
    595e:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INITCLOCK_ID, MCU_E_PARAM_CLOCK);
    5962:	230b      	movs	r3, #11
    5964:	2202      	movs	r2, #2
    5966:	2100      	movs	r1, #0
    5968:	2065      	movs	r0, #101	; 0x65
    596a:	f011 f97b 	bl	16c64 <Det_ReportError>
    }

    return CheckStatus;
    596e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5972:	4618      	mov	r0, r3
    5974:	b005      	add	sp, #20
    5976:	f85d fb04 	ldr.w	pc, [sp], #4
    597a:	bf00      	nop
    597c:	1fff8ce0 	.word	0x1fff8ce0

00005980 <Mcu_CheckSetMode>:
/**
* @brief Mcu_CheckSetMode - checks for Mcu_SetMode
* @implements Mcu_CheckSetMode_Activity
*/
static Std_ReturnType Mcu_CheckSetMode(Power_Ip_ModeType McuMode)
{
    5980:	b500      	push	{lr}
    5982:	b085      	sub	sp, #20
    5984:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5986:	2300      	movs	r3, #0
    5988:	f88d 300f 	strb.w	r3, [sp, #15]

    if (McuMode >= Mcu_pConfigPtr->NoModeConfigs)
    598c:	4b0a      	ldr	r3, [pc, #40]	; (59b8 <Mcu_CheckSetMode+0x38>)
    598e:	681b      	ldr	r3, [r3, #0]
    5990:	689b      	ldr	r3, [r3, #8]
    5992:	9a01      	ldr	r2, [sp, #4]
    5994:	429a      	cmp	r2, r3
    5996:	d308      	bcc.n	59aa <Mcu_CheckSetMode+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5998:	2301      	movs	r3, #1
    599a:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_SETMODE_ID, MCU_E_PARAM_MODE);
    599e:	230c      	movs	r3, #12
    59a0:	2208      	movs	r2, #8
    59a2:	2100      	movs	r1, #0
    59a4:	2065      	movs	r0, #101	; 0x65
    59a6:	f011 f95d 	bl	16c64 <Det_ReportError>
    }

    return CheckStatus;
    59aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    59ae:	4618      	mov	r0, r3
    59b0:	b005      	add	sp, #20
    59b2:	f85d fb04 	ldr.w	pc, [sp], #4
    59b6:	bf00      	nop
    59b8:	1fff8ce0 	.word	0x1fff8ce0

000059bc <Mcu_CheckGetVersionInfo>:
/**
* @brief Mcu_CheckGetVersionInfo - checks for Mcu_GetVersionInfo
* @implements Mcu_CheckGetVersionInfo_Activity
*/
static Std_ReturnType Mcu_CheckGetVersionInfo(const Std_VersionInfoType * VersionInfo)
{
    59bc:	b500      	push	{lr}
    59be:	b085      	sub	sp, #20
    59c0:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    59c2:	2300      	movs	r3, #0
    59c4:	f88d 300f 	strb.w	r3, [sp, #15]

    if (NULL_PTR == VersionInfo)
    59c8:	9b01      	ldr	r3, [sp, #4]
    59ca:	2b00      	cmp	r3, #0
    59cc:	d108      	bne.n	59e0 <Mcu_CheckGetVersionInfo+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    59ce:	2301      	movs	r3, #1
    59d0:	f88d 300f 	strb.w	r3, [sp, #15]

        (void)Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_GETVERSIONINFO_ID, MCU_E_PARAM_POINTER);
    59d4:	2310      	movs	r3, #16
    59d6:	2209      	movs	r2, #9
    59d8:	2100      	movs	r1, #0
    59da:	2065      	movs	r0, #101	; 0x65
    59dc:	f011 f942 	bl	16c64 <Det_ReportError>
    }

    return CheckStatus;
    59e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    59e4:	4618      	mov	r0, r3
    59e6:	b005      	add	sp, #20
    59e8:	f85d fb04 	ldr.w	pc, [sp], #4

000059ec <Mcu_HLDChecksEntry>:
/**
* @brief Mcu_HLDChecksEntry - checks for invalid mode transitions.
* @implements Mcu_HLDChecksEntry_Activity
*/
static Std_ReturnType Mcu_HLDChecksEntry(uint8 McuServiceID)
{
    59ec:	b500      	push	{lr}
    59ee:	b085      	sub	sp, #20
    59f0:	4603      	mov	r3, r0
    59f2:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    59f6:	2300      	movs	r3, #0
    59f8:	f88d 300f 	strb.w	r3, [sp, #15]

    if (MCU_INIT_ID == McuServiceID)
    59fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a00:	2b00      	cmp	r3, #0
    5a02:	d10e      	bne.n	5a22 <Mcu_HLDChecksEntry+0x36>
    {
        if (MCU_UNINIT != Mcu_eStatus) /* If "Mcu_Init" was already called (i.e. driver is initialized). */
    5a04:	4b13      	ldr	r3, [pc, #76]	; (5a54 <Mcu_HLDChecksEntry+0x68>)
    5a06:	681b      	ldr	r3, [r3, #0]
    5a08:	2b03      	cmp	r3, #3
    5a0a:	d01c      	beq.n	5a46 <Mcu_HLDChecksEntry+0x5a>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a0c:	2301      	movs	r3, #1
    5a0e:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_ALREADY_INITIALIZED);
    5a12:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5a16:	2313      	movs	r3, #19
    5a18:	2100      	movs	r1, #0
    5a1a:	2065      	movs	r0, #101	; 0x65
    5a1c:	f011 f922 	bl	16c64 <Det_ReportError>
    5a20:	e011      	b.n	5a46 <Mcu_HLDChecksEntry+0x5a>
        }
    }
    else
    {
        if (MCU_UNINIT == Mcu_eStatus) /* If "Mcu_Init" was not called (i.e driver is uninitialized). */
    5a22:	4b0c      	ldr	r3, [pc, #48]	; (5a54 <Mcu_HLDChecksEntry+0x68>)
    5a24:	681b      	ldr	r3, [r3, #0]
    5a26:	2b03      	cmp	r3, #3
    5a28:	d10a      	bne.n	5a40 <Mcu_HLDChecksEntry+0x54>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a2a:	2301      	movs	r3, #1
    5a2c:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_UNINIT);
    5a30:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5a34:	230f      	movs	r3, #15
    5a36:	2100      	movs	r1, #0
    5a38:	2065      	movs	r0, #101	; 0x65
    5a3a:	f011 f913 	bl	16c64 <Det_ReportError>
    5a3e:	e002      	b.n	5a46 <Mcu_HLDChecksEntry+0x5a>
        }
        else
        {
            Mcu_eStatus = MCU_BUSY;
    5a40:	4b04      	ldr	r3, [pc, #16]	; (5a54 <Mcu_HLDChecksEntry+0x68>)
    5a42:	220a      	movs	r2, #10
    5a44:	601a      	str	r2, [r3, #0]
        }
    }

    return CheckStatus;
    5a46:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a4a:	4618      	mov	r0, r3
    5a4c:	b005      	add	sp, #20
    5a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    5a52:	bf00      	nop
    5a54:	1fff8b1c 	.word	0x1fff8b1c

00005a58 <Mcu_HLDChecksExit>:
* @implements Mcu_HLDChecksExit_Activity
*/
static void Mcu_HLDChecksExit(  Std_ReturnType RetStatus,
                                uint8 McuServiceID
                              )
{
    5a58:	b082      	sub	sp, #8
    5a5a:	4603      	mov	r3, r0
    5a5c:	460a      	mov	r2, r1
    5a5e:	f88d 3007 	strb.w	r3, [sp, #7]
    5a62:	4613      	mov	r3, r2
    5a64:	f88d 3006 	strb.w	r3, [sp, #6]
    if (MCU_INIT_ID == McuServiceID)
    5a68:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5a6c:	2b00      	cmp	r3, #0
    5a6e:	d10b      	bne.n	5a88 <Mcu_HLDChecksExit+0x30>
    {
        if ((Std_ReturnType)E_OK == (Std_ReturnType)RetStatus)
    5a70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a74:	2b00      	cmp	r3, #0
    5a76:	d103      	bne.n	5a80 <Mcu_HLDChecksExit+0x28>
        {
            Mcu_eStatus = MCU_IDLE;
    5a78:	4b06      	ldr	r3, [pc, #24]	; (5a94 <Mcu_HLDChecksExit+0x3c>)
    5a7a:	220c      	movs	r2, #12
    5a7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Mcu_eStatus = MCU_IDLE;
    }
}
    5a7e:	e006      	b.n	5a8e <Mcu_HLDChecksExit+0x36>
            Mcu_eStatus = MCU_UNINIT;
    5a80:	4b04      	ldr	r3, [pc, #16]	; (5a94 <Mcu_HLDChecksExit+0x3c>)
    5a82:	2203      	movs	r2, #3
    5a84:	601a      	str	r2, [r3, #0]
}
    5a86:	e002      	b.n	5a8e <Mcu_HLDChecksExit+0x36>
        Mcu_eStatus = MCU_IDLE;
    5a88:	4b02      	ldr	r3, [pc, #8]	; (5a94 <Mcu_HLDChecksExit+0x3c>)
    5a8a:	220c      	movs	r2, #12
    5a8c:	601a      	str	r2, [r3, #0]
}
    5a8e:	bf00      	nop
    5a90:	b002      	add	sp, #8
    5a92:	4770      	bx	lr
    5a94:	1fff8b1c 	.word	0x1fff8b1c

00005a98 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5a98:	b500      	push	{lr}
    5a9a:	b085      	sub	sp, #20
    5a9c:	9001      	str	r0, [sp, #4]
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType CheckStatus;
#endif /* ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) ) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    CheckStatus = (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INIT_ID);
    5a9e:	2000      	movs	r0, #0
    5aa0:	f7ff ffa4 	bl	59ec <Mcu_HLDChecksEntry>
    5aa4:	4603      	mov	r3, r0
    5aa6:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( (Std_ReturnType)E_OK == CheckStatus )
    5aaa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5aae:	2b00      	cmp	r3, #0
    5ab0:	d150      	bne.n	5b54 <Mcu_Init+0xbc>

#if (MCU_PARAM_CHECK == STD_ON)
        /* When PostBuild is used and #(Variants) > 1, the input parameter 'ConfigPtr' is mandatory
         * to be different than NULL_PTR. */
        /* Check the config. In case of error, return immediately. The "Mcu_CheckInit" function will report DET errors. */
        CheckStatus = Mcu_CheckInit(ConfigPtr);
    5ab2:	9801      	ldr	r0, [sp, #4]
    5ab4:	f7ff ff2e 	bl	5914 <Mcu_CheckInit>
    5ab8:	4603      	mov	r3, r0
    5aba:	f88d 300b 	strb.w	r3, [sp, #11]

        if ((Std_ReturnType)E_OK == CheckStatus)
    5abe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5ac2:	2b00      	cmp	r3, #0
    5ac4:	d13d      	bne.n	5b42 <Mcu_Init+0xaa>

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5ac6:	4a25      	ldr	r2, [pc, #148]	; (5b5c <Mcu_Init+0xc4>)
    5ac8:	9b01      	ldr	r3, [sp, #4]
    5aca:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5acc:	2300      	movs	r3, #0
    5ace:	9303      	str	r3, [sp, #12]
    5ad0:	e010      	b.n	5af4 <Mcu_Init+0x5c>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5ad2:	4b22      	ldr	r3, [pc, #136]	; (5b5c <Mcu_Init+0xc4>)
    5ad4:	681b      	ldr	r3, [r3, #0]
    5ad6:	6919      	ldr	r1, [r3, #16]
    5ad8:	9a03      	ldr	r2, [sp, #12]
    5ada:	4613      	mov	r3, r2
    5adc:	005b      	lsls	r3, r3, #1
    5ade:	4413      	add	r3, r2
    5ae0:	009b      	lsls	r3, r3, #2
    5ae2:	440b      	add	r3, r1
    5ae4:	681b      	ldr	r3, [r3, #0]
    5ae6:	9a03      	ldr	r2, [sp, #12]
    5ae8:	b2d1      	uxtb	r1, r2
    5aea:	4a1d      	ldr	r2, [pc, #116]	; (5b60 <Mcu_Init+0xc8>)
    5aec:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5aee:	9b03      	ldr	r3, [sp, #12]
    5af0:	3301      	adds	r3, #1
    5af2:	9303      	str	r3, [sp, #12]
    5af4:	4b19      	ldr	r3, [pc, #100]	; (5b5c <Mcu_Init+0xc4>)
    5af6:	681b      	ldr	r3, [r3, #0]
    5af8:	689b      	ldr	r3, [r3, #8]
    5afa:	9a03      	ldr	r2, [sp, #12]
    5afc:	429a      	cmp	r2, r3
    5afe:	d3e8      	bcc.n	5ad2 <Mcu_Init+0x3a>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5b00:	2300      	movs	r3, #0
    5b02:	9303      	str	r3, [sp, #12]
    5b04:	e010      	b.n	5b28 <Mcu_Init+0x90>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5b06:	4b15      	ldr	r3, [pc, #84]	; (5b5c <Mcu_Init+0xc4>)
    5b08:	681b      	ldr	r3, [r3, #0]
    5b0a:	6959      	ldr	r1, [r3, #20]
    5b0c:	9a03      	ldr	r2, [sp, #12]
    5b0e:	4613      	mov	r3, r2
    5b10:	01db      	lsls	r3, r3, #7
    5b12:	1a9b      	subs	r3, r3, r2
    5b14:	00db      	lsls	r3, r3, #3
    5b16:	440b      	add	r3, r1
    5b18:	681b      	ldr	r3, [r3, #0]
    5b1a:	9a03      	ldr	r2, [sp, #12]
    5b1c:	b2d1      	uxtb	r1, r2
    5b1e:	4a11      	ldr	r2, [pc, #68]	; (5b64 <Mcu_Init+0xcc>)
    5b20:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5b22:	9b03      	ldr	r3, [sp, #12]
    5b24:	3301      	adds	r3, #1
    5b26:	9303      	str	r3, [sp, #12]
    5b28:	4b0c      	ldr	r3, [pc, #48]	; (5b5c <Mcu_Init+0xc4>)
    5b2a:	681b      	ldr	r3, [r3, #0]
    5b2c:	68db      	ldr	r3, [r3, #12]
    5b2e:	9a03      	ldr	r2, [sp, #12]
    5b30:	429a      	cmp	r2, r3
    5b32:	d3e8      	bcc.n	5b06 <Mcu_Init+0x6e>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5b34:	4b09      	ldr	r3, [pc, #36]	; (5b5c <Mcu_Init+0xc4>)
    5b36:	681b      	ldr	r3, [r3, #0]
    5b38:	699b      	ldr	r3, [r3, #24]
    5b3a:	4618      	mov	r0, r3
    5b3c:	f000 f90c 	bl	5d58 <Mcu_Ipw_Init>
    5b40:	e002      	b.n	5b48 <Mcu_Init+0xb0>
#if (MCU_PARAM_CHECK == STD_ON)
        }
        else
        {
            /* Clean the init pointer in case of an error. */
            Mcu_pConfigPtr = NULL_PTR;
    5b42:	4b06      	ldr	r3, [pc, #24]	; (5b5c <Mcu_Init+0xc4>)
    5b44:	2200      	movs	r2, #0
    5b46:	601a      	str	r2, [r3, #0]
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    5b48:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5b4c:	2100      	movs	r1, #0
    5b4e:	4618      	mov	r0, r3
    5b50:	f7ff ff82 	bl	5a58 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5b54:	bf00      	nop
    5b56:	b005      	add	sp, #20
    5b58:	f85d fb04 	ldr.w	pc, [sp], #4
    5b5c:	1fff8ce0 	.word	0x1fff8ce0
    5b60:	1fff8cdc 	.word	0x1fff8cdc
    5b64:	1fff8cd8 	.word	0x1fff8cd8

00005b68 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5b68:	b500      	push	{lr}
    5b6a:	b085      	sub	sp, #20
    5b6c:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5b6e:	2301      	movs	r3, #1
    5b70:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    /* Check if the driver is initialized. */
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITRAMSECTION_ID) )
    5b74:	2001      	movs	r0, #1
    5b76:	f7ff ff39 	bl	59ec <Mcu_HLDChecksEntry>
    5b7a:	4603      	mov	r3, r0
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	d103      	bne.n	5b88 <Mcu_InitRamSection+0x20>
        /* To avoid compiler warning. */
        MCU_PARAM_UNUSED(RamSection);
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    5b80:	2101      	movs	r1, #1
    5b82:	2000      	movs	r0, #0
    5b84:	f7ff ff68 	bl	5a58 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5b88:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5b8c:	4618      	mov	r0, r3
    5b8e:	b005      	add	sp, #20
    5b90:	f85d fb04 	ldr.w	pc, [sp], #4

00005b94 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5b94:	b500      	push	{lr}
    5b96:	b085      	sub	sp, #20
    5b98:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5b9a:	4a17      	ldr	r2, [pc, #92]	; (5bf8 <Mcu_InitClock+0x64>)
    5b9c:	9b01      	ldr	r3, [sp, #4]
    5b9e:	4413      	add	r3, r2
    5ba0:	781b      	ldrb	r3, [r3, #0]
    5ba2:	f88d 300e 	strb.w	r3, [sp, #14]
    /* Return the success of the clock initalization operation. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType ClockStatus = (Std_ReturnType)E_NOT_OK;
    5ba6:	2301      	movs	r3, #1
    5ba8:	f88d 300f 	strb.w	r3, [sp, #15]
#else
    Std_ReturnType ClockStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITCLOCK_ID) )
    5bac:	2002      	movs	r0, #2
    5bae:	f7ff ff1d 	bl	59ec <Mcu_HLDChecksEntry>
    5bb2:	4603      	mov	r3, r0
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	d119      	bne.n	5bec <Mcu_InitClock+0x58>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
    5bb8:	9801      	ldr	r0, [sp, #4]
    5bba:	f7ff fec3 	bl	5944 <Mcu_CheckInitClock>
    5bbe:	4603      	mov	r3, r0
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	d10f      	bne.n	5be4 <Mcu_InitClock+0x50>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5bc4:	4b0d      	ldr	r3, [pc, #52]	; (5bfc <Mcu_InitClock+0x68>)
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	6959      	ldr	r1, [r3, #20]
    5bca:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5bce:	4613      	mov	r3, r2
    5bd0:	01db      	lsls	r3, r3, #7
    5bd2:	1a9b      	subs	r3, r3, r2
    5bd4:	00db      	lsls	r3, r3, #3
    5bd6:	440b      	add	r3, r1
    5bd8:	4618      	mov	r0, r3
    5bda:	f000 f8c7 	bl	5d6c <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5bde:	2300      	movs	r3, #0
    5be0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_PARAM_CHECK == STD_ON)
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    5be4:	2102      	movs	r1, #2
    5be6:	2000      	movs	r0, #0
    5be8:	f7ff ff36 	bl	5a58 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5bec:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5bf0:	4618      	mov	r0, r3
    5bf2:	b005      	add	sp, #20
    5bf4:	f85d fb04 	ldr.w	pc, [sp], #4
    5bf8:	1fff8cd8 	.word	0x1fff8cd8
    5bfc:	1fff8ce0 	.word	0x1fff8ce0

00005c00 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5c00:	b500      	push	{lr}
    5c02:	b085      	sub	sp, #20
    5c04:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5c06:	4a15      	ldr	r2, [pc, #84]	; (5c5c <Mcu_SetMode+0x5c>)
    5c08:	9b01      	ldr	r3, [sp, #4]
    5c0a:	4413      	add	r3, r2
    5c0c:	781b      	ldrb	r3, [r3, #0]
    5c0e:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_SETMODE_ID) )
    5c12:	2008      	movs	r0, #8
    5c14:	f7ff feea 	bl	59ec <Mcu_HLDChecksEntry>
    5c18:	4603      	mov	r3, r0
    5c1a:	2b00      	cmp	r3, #0
    5c1c:	d11a      	bne.n	5c54 <Mcu_SetMode+0x54>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

#if (MCU_PARAM_CHECK == STD_ON)
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
    5c1e:	9801      	ldr	r0, [sp, #4]
    5c20:	f7ff feae 	bl	5980 <Mcu_CheckSetMode>
    5c24:	4603      	mov	r3, r0
    5c26:	2b00      	cmp	r3, #0
    5c28:	d110      	bne.n	5c4c <Mcu_SetMode+0x4c>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5c2a:	f00e fed3 	bl	149d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5c2e:	4b0c      	ldr	r3, [pc, #48]	; (5c60 <Mcu_SetMode+0x60>)
    5c30:	681b      	ldr	r3, [r3, #0]
    5c32:	6919      	ldr	r1, [r3, #16]
    5c34:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5c38:	4613      	mov	r3, r2
    5c3a:	005b      	lsls	r3, r3, #1
    5c3c:	4413      	add	r3, r2
    5c3e:	009b      	lsls	r3, r3, #2
    5c40:	440b      	add	r3, r1
    5c42:	4618      	mov	r0, r3
    5c44:	f000 f89c 	bl	5d80 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5c48:	f00e fef0 	bl	14a2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    5c4c:	2108      	movs	r1, #8
    5c4e:	2000      	movs	r0, #0
    5c50:	f7ff ff02 	bl	5a58 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5c54:	bf00      	nop
    5c56:	b005      	add	sp, #20
    5c58:	f85d fb04 	ldr.w	pc, [sp], #4
    5c5c:	1fff8cdc 	.word	0x1fff8cdc
    5c60:	1fff8ce0 	.word	0x1fff8ce0

00005c64 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5c64:	b500      	push	{lr}
    5c66:	b083      	sub	sp, #12
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5c68:	2302      	movs	r3, #2
    5c6a:	9301      	str	r3, [sp, #4]
#else
    Mcu_PllStatusType PllStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETPLLSTATUS_ID) )
    5c6c:	2004      	movs	r0, #4
    5c6e:	f7ff febd 	bl	59ec <Mcu_HLDChecksEntry>
    5c72:	4603      	mov	r3, r0
    5c74:	2b00      	cmp	r3, #0
    5c76:	d103      	bne.n	5c80 <Mcu_GetPllStatus+0x1c>
           At this point, the return value can be only MCU_PLL_LOCKED or MCU_PLL_UNLOCKED. */
        PllStatus = Mcu_Ipw_GetPllStatus();
#endif /* (MCU_NO_PLL == STD_OFF) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    5c78:	2104      	movs	r1, #4
    5c7a:	2000      	movs	r0, #0
    5c7c:	f7ff feec 	bl	5a58 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5c80:	9b01      	ldr	r3, [sp, #4]
}
    5c82:	4618      	mov	r0, r3
    5c84:	b003      	add	sp, #12
    5c86:	f85d fb04 	ldr.w	pc, [sp], #4

00005c8a <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5c8a:	b500      	push	{lr}
    5c8c:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_ResetType ResetReason = MCU_RESET_UNDEFINED;
    5c8e:	230e      	movs	r3, #14
    5c90:	9301      	str	r3, [sp, #4]
#else
    Mcu_ResetType ResetReason;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    5c92:	2005      	movs	r0, #5
    5c94:	f7ff feaa 	bl	59ec <Mcu_HLDChecksEntry>
    5c98:	4603      	mov	r3, r0
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d106      	bne.n	5cac <Mcu_GetResetReason+0x22>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5c9e:	f000 f879 	bl	5d94 <Mcu_Ipw_GetResetReason>
    5ca2:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    5ca4:	2105      	movs	r1, #5
    5ca6:	2000      	movs	r0, #0
    5ca8:	f7ff fed6 	bl	5a58 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5cac:	9b01      	ldr	r3, [sp, #4]
}
    5cae:	4618      	mov	r0, r3
    5cb0:	b003      	add	sp, #12
    5cb2:	f85d fb04 	ldr.w	pc, [sp], #4

00005cb6 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5cb6:	b500      	push	{lr}
    5cb8:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_RawResetType RawResetValue = MCU_RAW_RESET_DEFAULT;
    5cba:	f04f 33ff 	mov.w	r3, #4294967295
    5cbe:	9301      	str	r3, [sp, #4]
#else
    Mcu_RawResetType RawResetValue;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    5cc0:	2006      	movs	r0, #6
    5cc2:	f7ff fe93 	bl	59ec <Mcu_HLDChecksEntry>
    5cc6:	4603      	mov	r3, r0
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d106      	bne.n	5cda <Mcu_GetResetRawValue+0x24>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5ccc:	f000 f868 	bl	5da0 <Mcu_Ipw_GetResetRawValue>
    5cd0:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    5cd2:	2106      	movs	r1, #6
    5cd4:	2000      	movs	r0, #0
    5cd6:	f7ff febf 	bl	5a58 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5cda:	9b01      	ldr	r3, [sp, #4]
}
    5cdc:	4618      	mov	r0, r3
    5cde:	b003      	add	sp, #12
    5ce0:	f85d fb04 	ldr.w	pc, [sp], #4

00005ce4 <Mcu_GetVersionInfo>:
* @api
*
* @implements Mcu_GetVersionInfo_Activity
*/
void Mcu_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    5ce4:	b500      	push	{lr}
    5ce6:	b083      	sub	sp, #12
    5ce8:	9001      	str	r0, [sp, #4]
#if (MCU_PARAM_CHECK == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckGetVersionInfo(versioninfo) )
    5cea:	9801      	ldr	r0, [sp, #4]
    5cec:	f7ff fe66 	bl	59bc <Mcu_CheckGetVersionInfo>
    5cf0:	4603      	mov	r3, r0
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	d10e      	bne.n	5d14 <Mcu_GetVersionInfo+0x30>
    {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
        (versioninfo)->vendorID = (uint16)MCU_VENDOR_ID;
    5cf6:	9b01      	ldr	r3, [sp, #4]
    5cf8:	222b      	movs	r2, #43	; 0x2b
    5cfa:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint8)MCU_MODULE_ID;
    5cfc:	9b01      	ldr	r3, [sp, #4]
    5cfe:	2265      	movs	r2, #101	; 0x65
    5d00:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)MCU_SW_MAJOR_VERSION;
    5d02:	9b01      	ldr	r3, [sp, #4]
    5d04:	2202      	movs	r2, #2
    5d06:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)MCU_SW_MINOR_VERSION;
    5d08:	9b01      	ldr	r3, [sp, #4]
    5d0a:	2200      	movs	r2, #0
    5d0c:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)MCU_SW_PATCH_VERSION;
    5d0e:	9b01      	ldr	r3, [sp, #4]
    5d10:	2200      	movs	r2, #0
    5d12:	719a      	strb	r2, [r3, #6]
#if (MCU_PARAM_CHECK == STD_ON)
    }
#endif /* (MCU_PARAM_CHECK == STD_ON) */
}
    5d14:	bf00      	nop
    5d16:	b003      	add	sp, #12
    5d18:	f85d fb04 	ldr.w	pc, [sp], #4

00005d1c <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5d1c:	b500      	push	{lr}
    5d1e:	b083      	sub	sp, #12
    5d20:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    5d22:	201a      	movs	r0, #26
    5d24:	f7ff fe62 	bl	59ec <Mcu_HLDChecksEntry>
    5d28:	4603      	mov	r3, r0
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	d106      	bne.n	5d3c <Mcu_SleepOnExit+0x20>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5d2e:	9801      	ldr	r0, [sp, #4]
    5d30:	f000 f83c 	bl	5dac <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    5d34:	211a      	movs	r1, #26
    5d36:	2000      	movs	r0, #0
    5d38:	f7ff fe8e 	bl	5a58 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5d3c:	bf00      	nop
    5d3e:	b003      	add	sp, #12
    5d40:	f85d fb04 	ldr.w	pc, [sp], #4

00005d44 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5d44:	b082      	sub	sp, #8
    5d46:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5d48:	4b02      	ldr	r3, [pc, #8]	; (5d54 <Mcu_ClkSrcFailureNotification+0x10>)
    5d4a:	681b      	ldr	r3, [r3, #0]
    5d4c:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5d4e:	bf00      	nop
    5d50:	b002      	add	sp, #8
    5d52:	4770      	bx	lr
    5d54:	1fff8ce0 	.word	0x1fff8ce0

00005d58 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5d58:	b500      	push	{lr}
    5d5a:	b083      	sub	sp, #12
    5d5c:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5d5e:	9801      	ldr	r0, [sp, #4]
    5d60:	f000 f882 	bl	5e68 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5d64:	bf00      	nop
    5d66:	b003      	add	sp, #12
    5d68:	f85d fb04 	ldr.w	pc, [sp], #4

00005d6c <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5d6c:	b500      	push	{lr}
    5d6e:	b083      	sub	sp, #12
    5d70:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5d72:	9801      	ldr	r0, [sp, #4]
    5d74:	f7fc fb12 	bl	239c <Clock_Ip_InitClock>
}
    5d78:	bf00      	nop
    5d7a:	b003      	add	sp, #12
    5d7c:	f85d fb04 	ldr.w	pc, [sp], #4

00005d80 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5d80:	b500      	push	{lr}
    5d82:	b083      	sub	sp, #12
    5d84:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5d86:	9801      	ldr	r0, [sp, #4]
    5d88:	f000 f820 	bl	5dcc <Power_Ip_SetMode>
}
    5d8c:	bf00      	nop
    5d8e:	b003      	add	sp, #12
    5d90:	f85d fb04 	ldr.w	pc, [sp], #4

00005d94 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5d94:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5d96:	f000 f84f 	bl	5e38 <Power_Ip_GetResetReason>
    5d9a:	4603      	mov	r3, r0
}
    5d9c:	4618      	mov	r0, r3
    5d9e:	bd08      	pop	{r3, pc}

00005da0 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5da0:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5da2:	f000 f857 	bl	5e54 <Power_Ip_GetResetRawValue>
    5da6:	4603      	mov	r3, r0
}
    5da8:	4618      	mov	r0, r3
    5daa:	bd08      	pop	{r3, pc}

00005dac <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5dac:	b500      	push	{lr}
    5dae:	b083      	sub	sp, #12
    5db0:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5db2:	9b01      	ldr	r3, [sp, #4]
    5db4:	2b00      	cmp	r3, #0
    5db6:	d102      	bne.n	5dbe <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5db8:	f000 f86c 	bl	5e94 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5dbc:	e001      	b.n	5dc2 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5dbe:	f000 f86e 	bl	5e9e <Power_Ip_EnableSleepOnExit>
}
    5dc2:	bf00      	nop
    5dc4:	b003      	add	sp, #12
    5dc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005dcc <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5dcc:	b500      	push	{lr}
    5dce:	b085      	sub	sp, #20
    5dd0:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5dd2:	9b01      	ldr	r3, [sp, #4]
    5dd4:	685b      	ldr	r3, [r3, #4]
    5dd6:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5dd8:	9802      	ldr	r0, [sp, #8]
    5dda:	f000 f9f5 	bl	61c8 <Power_Ip_SMC_ModeCheckEntry>
    5dde:	4603      	mov	r3, r0
    5de0:	2b00      	cmp	r3, #0
    5de2:	d002      	beq.n	5dea <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5de4:	2301      	movs	r3, #1
    5de6:	9303      	str	r3, [sp, #12]
    5de8:	e003      	b.n	5df2 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5dea:	9801      	ldr	r0, [sp, #4]
    5dec:	f000 fa1e 	bl	622c <Power_Ip_SMC_ModeConfig>
    5df0:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5df2:	9b03      	ldr	r3, [sp, #12]
    5df4:	2b01      	cmp	r3, #1
    5df6:	d103      	bne.n	5e00 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5df8:	21ff      	movs	r1, #255	; 0xff
    5dfa:	2003      	movs	r0, #3
    5dfc:	f000 f8f4 	bl	5fe8 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5e00:	bf00      	nop
    5e02:	b005      	add	sp, #20
    5e04:	f85d fb04 	ldr.w	pc, [sp], #4

00005e08 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5e08:	b084      	sub	sp, #16
    5e0a:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5e0c:	230c      	movs	r3, #12
    5e0e:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5e10:	4a08      	ldr	r2, [pc, #32]	; (5e34 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5e12:	9b01      	ldr	r3, [sp, #4]
    5e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e18:	2b0e      	cmp	r3, #14
    5e1a:	d805      	bhi.n	5e28 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5e1c:	4a05      	ldr	r2, [pc, #20]	; (5e34 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5e1e:	9b01      	ldr	r3, [sp, #4]
    5e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e24:	9303      	str	r3, [sp, #12]
    5e26:	e001      	b.n	5e2c <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5e28:	230c      	movs	r3, #12
    5e2a:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5e2c:	9b03      	ldr	r3, [sp, #12]
}
    5e2e:	4618      	mov	r0, r3
    5e30:	b004      	add	sp, #16
    5e32:	4770      	bx	lr
    5e34:	000184b0 	.word	0x000184b0

00005e38 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5e38:	b500      	push	{lr}
    5e3a:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5e3c:	f000 f940 	bl	60c0 <Power_Ip_RCM_GetResetReason>
    5e40:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5e42:	9801      	ldr	r0, [sp, #4]
    5e44:	f7ff ffe0 	bl	5e08 <Power_Ip_ConvertIntergeToResetType>
    5e48:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5e4a:	9b00      	ldr	r3, [sp, #0]
}
    5e4c:	4618      	mov	r0, r3
    5e4e:	b003      	add	sp, #12
    5e50:	f85d fb04 	ldr.w	pc, [sp], #4

00005e54 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5e54:	b500      	push	{lr}
    5e56:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5e58:	f000 f98a 	bl	6170 <Power_Ip_RCM_GetResetRawValue>
    5e5c:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5e5e:	9b01      	ldr	r3, [sp, #4]
}
    5e60:	4618      	mov	r0, r3
    5e62:	b003      	add	sp, #12
    5e64:	f85d fb04 	ldr.w	pc, [sp], #4

00005e68 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5e68:	b500      	push	{lr}
    5e6a:	b083      	sub	sp, #12
    5e6c:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5e6e:	9b01      	ldr	r3, [sp, #4]
    5e70:	681b      	ldr	r3, [r3, #0]
    5e72:	4618      	mov	r0, r3
    5e74:	f000 f90e 	bl	6094 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5e78:	9b01      	ldr	r3, [sp, #4]
    5e7a:	685b      	ldr	r3, [r3, #4]
    5e7c:	4618      	mov	r0, r3
    5e7e:	f000 f86d 	bl	5f5c <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5e82:	9b01      	ldr	r3, [sp, #4]
    5e84:	689b      	ldr	r3, [r3, #8]
    5e86:	4618      	mov	r0, r3
    5e88:	f000 f990 	bl	61ac <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5e8c:	bf00      	nop
    5e8e:	b003      	add	sp, #12
    5e90:	f85d fb04 	ldr.w	pc, [sp], #4

00005e94 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5e94:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5e96:	f000 f811 	bl	5ebc <Power_Ip_CM4_DisableSleepOnExit>
}
    5e9a:	bf00      	nop
    5e9c:	bd08      	pop	{r3, pc}

00005e9e <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5e9e:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5ea0:	f000 f820 	bl	5ee4 <Power_Ip_CM4_EnableSleepOnExit>
}
    5ea4:	bf00      	nop
    5ea6:	bd08      	pop	{r3, pc}

00005ea8 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5ea8:	b082      	sub	sp, #8
    5eaa:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5eac:	4a02      	ldr	r2, [pc, #8]	; (5eb8 <Power_Ip_InstallNotificationsCallback+0x10>)
    5eae:	9b01      	ldr	r3, [sp, #4]
    5eb0:	6013      	str	r3, [r2, #0]
}
    5eb2:	bf00      	nop
    5eb4:	b002      	add	sp, #8
    5eb6:	4770      	bx	lr
    5eb8:	1fff8b20 	.word	0x1fff8b20

00005ebc <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5ebc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5ebe:	2300      	movs	r3, #0
    5ec0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5ec2:	4b07      	ldr	r3, [pc, #28]	; (5ee0 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5ec4:	681b      	ldr	r3, [r3, #0]
    5ec6:	685b      	ldr	r3, [r3, #4]
    5ec8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5eca:	9b01      	ldr	r3, [sp, #4]
    5ecc:	f023 0302 	bic.w	r3, r3, #2
    5ed0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5ed2:	4b03      	ldr	r3, [pc, #12]	; (5ee0 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5ed4:	681b      	ldr	r3, [r3, #0]
    5ed6:	9a01      	ldr	r2, [sp, #4]
    5ed8:	605a      	str	r2, [r3, #4]
}
    5eda:	bf00      	nop
    5edc:	b002      	add	sp, #8
    5ede:	4770      	bx	lr
    5ee0:	1fff8b24 	.word	0x1fff8b24

00005ee4 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5ee4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5ee6:	2300      	movs	r3, #0
    5ee8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5eea:	4b07      	ldr	r3, [pc, #28]	; (5f08 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5eec:	681b      	ldr	r3, [r3, #0]
    5eee:	685b      	ldr	r3, [r3, #4]
    5ef0:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5ef2:	9b01      	ldr	r3, [sp, #4]
    5ef4:	f043 0302 	orr.w	r3, r3, #2
    5ef8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5efa:	4b03      	ldr	r3, [pc, #12]	; (5f08 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5efc:	681b      	ldr	r3, [r3, #0]
    5efe:	9a01      	ldr	r2, [sp, #4]
    5f00:	605a      	str	r2, [r3, #4]
}
    5f02:	bf00      	nop
    5f04:	b002      	add	sp, #8
    5f06:	4770      	bx	lr
    5f08:	1fff8b24 	.word	0x1fff8b24

00005f0c <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5f0c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5f0e:	2300      	movs	r3, #0
    5f10:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5f12:	4b07      	ldr	r3, [pc, #28]	; (5f30 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5f14:	681b      	ldr	r3, [r3, #0]
    5f16:	685b      	ldr	r3, [r3, #4]
    5f18:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5f1a:	9b01      	ldr	r3, [sp, #4]
    5f1c:	f043 0304 	orr.w	r3, r3, #4
    5f20:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5f22:	4b03      	ldr	r3, [pc, #12]	; (5f30 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5f24:	681b      	ldr	r3, [r3, #0]
    5f26:	9a01      	ldr	r2, [sp, #4]
    5f28:	605a      	str	r2, [r3, #4]
}
    5f2a:	bf00      	nop
    5f2c:	b002      	add	sp, #8
    5f2e:	4770      	bx	lr
    5f30:	1fff8b24 	.word	0x1fff8b24

00005f34 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5f34:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5f36:	2300      	movs	r3, #0
    5f38:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5f3a:	4b07      	ldr	r3, [pc, #28]	; (5f58 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5f3c:	681b      	ldr	r3, [r3, #0]
    5f3e:	685b      	ldr	r3, [r3, #4]
    5f40:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5f42:	9b01      	ldr	r3, [sp, #4]
    5f44:	f023 0304 	bic.w	r3, r3, #4
    5f48:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5f4a:	4b03      	ldr	r3, [pc, #12]	; (5f58 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5f4c:	681b      	ldr	r3, [r3, #0]
    5f4e:	9a01      	ldr	r2, [sp, #4]
    5f50:	605a      	str	r2, [r3, #4]
}
    5f52:	bf00      	nop
    5f54:	b002      	add	sp, #8
    5f56:	4770      	bx	lr
    5f58:	1fff8b24 	.word	0x1fff8b24

00005f5c <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5f5c:	b084      	sub	sp, #16
    5f5e:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5f60:	4b20      	ldr	r3, [pc, #128]	; (5fe4 <Power_Ip_PMC_PowerInit+0x88>)
    5f62:	781b      	ldrb	r3, [r3, #0]
    5f64:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5f68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f6c:	f003 030f 	and.w	r3, r3, #15
    5f70:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5f74:	9b01      	ldr	r3, [sp, #4]
    5f76:	781a      	ldrb	r2, [r3, #0]
    5f78:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f7c:	4313      	orrs	r3, r2
    5f7e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5f82:	4a18      	ldr	r2, [pc, #96]	; (5fe4 <Power_Ip_PMC_PowerInit+0x88>)
    5f84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f88:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5f8a:	4b16      	ldr	r3, [pc, #88]	; (5fe4 <Power_Ip_PMC_PowerInit+0x88>)
    5f8c:	785b      	ldrb	r3, [r3, #1]
    5f8e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5f92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f96:	f003 031f 	and.w	r3, r3, #31
    5f9a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5f9e:	9b01      	ldr	r3, [sp, #4]
    5fa0:	785a      	ldrb	r2, [r3, #1]
    5fa2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fa6:	4313      	orrs	r3, r2
    5fa8:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5fac:	4a0d      	ldr	r2, [pc, #52]	; (5fe4 <Power_Ip_PMC_PowerInit+0x88>)
    5fae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fb2:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5fb4:	4b0b      	ldr	r3, [pc, #44]	; (5fe4 <Power_Ip_PMC_PowerInit+0x88>)
    5fb6:	789b      	ldrb	r3, [r3, #2]
    5fb8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5fbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5fc4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5fc8:	9b01      	ldr	r3, [sp, #4]
    5fca:	789a      	ldrb	r2, [r3, #2]
    5fcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fd0:	4313      	orrs	r3, r2
    5fd2:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5fd6:	4a03      	ldr	r2, [pc, #12]	; (5fe4 <Power_Ip_PMC_PowerInit+0x88>)
    5fd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fdc:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5fde:	bf00      	nop
    5fe0:	b004      	add	sp, #16
    5fe2:	4770      	bx	lr
    5fe4:	4007d000 	.word	0x4007d000

00005fe8 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5fe8:	b500      	push	{lr}
    5fea:	b083      	sub	sp, #12
    5fec:	9001      	str	r0, [sp, #4]
    5fee:	460b      	mov	r3, r1
    5ff0:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5ff4:	4b05      	ldr	r3, [pc, #20]	; (600c <Power_Ip_ReportPowerErrors+0x24>)
    5ff6:	681b      	ldr	r3, [r3, #0]
    5ff8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5ffc:	4611      	mov	r1, r2
    5ffe:	9801      	ldr	r0, [sp, #4]
    6000:	4798      	blx	r3
}
    6002:	bf00      	nop
    6004:	b003      	add	sp, #12
    6006:	f85d fb04 	ldr.w	pc, [sp], #4
    600a:	bf00      	nop
    600c:	1fff8b20 	.word	0x1fff8b20

00006010 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6010:	b082      	sub	sp, #8
    6012:	9001      	str	r0, [sp, #4]
    6014:	460b      	mov	r3, r1
    6016:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    601a:	bf00      	nop
    601c:	b002      	add	sp, #8
    601e:	4770      	bx	lr

00006020 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6020:	b500      	push	{lr}
    6022:	b085      	sub	sp, #20
    6024:	9003      	str	r0, [sp, #12]
    6026:	9102      	str	r1, [sp, #8]
    6028:	9201      	str	r2, [sp, #4]
    602a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    602c:	2000      	movs	r0, #0
    602e:	f7fb fee5 	bl	1dfc <OsIf_GetCounter>
    6032:	4602      	mov	r2, r0
    6034:	9b03      	ldr	r3, [sp, #12]
    6036:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6038:	9b02      	ldr	r3, [sp, #8]
    603a:	2200      	movs	r2, #0
    603c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    603e:	2100      	movs	r1, #0
    6040:	9800      	ldr	r0, [sp, #0]
    6042:	f7fb ff27 	bl	1e94 <OsIf_MicrosToTicks>
    6046:	4602      	mov	r2, r0
    6048:	9b01      	ldr	r3, [sp, #4]
    604a:	601a      	str	r2, [r3, #0]
}
    604c:	bf00      	nop
    604e:	b005      	add	sp, #20
    6050:	f85d fb04 	ldr.w	pc, [sp], #4

00006054 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6054:	b500      	push	{lr}
    6056:	b087      	sub	sp, #28
    6058:	9003      	str	r0, [sp, #12]
    605a:	9102      	str	r1, [sp, #8]
    605c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    605e:	2300      	movs	r3, #0
    6060:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6064:	2100      	movs	r1, #0
    6066:	9803      	ldr	r0, [sp, #12]
    6068:	f7fb fee1 	bl	1e2e <OsIf_GetElapsed>
    606c:	4602      	mov	r2, r0
    606e:	9b02      	ldr	r3, [sp, #8]
    6070:	681b      	ldr	r3, [r3, #0]
    6072:	441a      	add	r2, r3
    6074:	9b02      	ldr	r3, [sp, #8]
    6076:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    6078:	9b02      	ldr	r3, [sp, #8]
    607a:	681b      	ldr	r3, [r3, #0]
    607c:	9a01      	ldr	r2, [sp, #4]
    607e:	429a      	cmp	r2, r3
    6080:	d802      	bhi.n	6088 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    6082:	2301      	movs	r3, #1
    6084:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    6088:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    608c:	4618      	mov	r0, r3
    608e:	b007      	add	sp, #28
    6090:	f85d fb04 	ldr.w	pc, [sp], #4

00006094 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6094:	b082      	sub	sp, #8
    6096:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    6098:	9b01      	ldr	r3, [sp, #4]
    609a:	681a      	ldr	r2, [r3, #0]
    609c:	4907      	ldr	r1, [pc, #28]	; (60bc <Power_Ip_RCM_ResetInit+0x28>)
    609e:	f641 7307 	movw	r3, #7943	; 0x1f07
    60a2:	4013      	ands	r3, r2
    60a4:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    60a6:	9b01      	ldr	r3, [sp, #4]
    60a8:	685a      	ldr	r2, [r3, #4]
    60aa:	4904      	ldr	r1, [pc, #16]	; (60bc <Power_Ip_RCM_ResetInit+0x28>)
    60ac:	f642 73ff 	movw	r3, #12287	; 0x2fff
    60b0:	4013      	ands	r3, r2
    60b2:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    60b4:	bf00      	nop
    60b6:	b002      	add	sp, #8
    60b8:	4770      	bx	lr
    60ba:	bf00      	nop
    60bc:	4007f000 	.word	0x4007f000

000060c0 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    60c0:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    60c2:	230c      	movs	r3, #12
    60c4:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    60c6:	2300      	movs	r3, #0
    60c8:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    60ca:	2300      	movs	r3, #0
    60cc:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    60ce:	2300      	movs	r3, #0
    60d0:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    60d2:	4b25      	ldr	r3, [pc, #148]	; (6168 <Power_Ip_RCM_GetResetReason+0xa8>)
    60d4:	699a      	ldr	r2, [r3, #24]
    60d6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    60da:	4013      	ands	r3, r2
    60dc:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    60de:	9b03      	ldr	r3, [sp, #12]
    60e0:	2b00      	cmp	r3, #0
    60e2:	d008      	beq.n	60f6 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    60e4:	4920      	ldr	r1, [pc, #128]	; (6168 <Power_Ip_RCM_GetResetReason+0xa8>)
    60e6:	9a03      	ldr	r2, [sp, #12]
    60e8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    60ec:	4013      	ands	r3, r2
    60ee:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    60f0:	4a1e      	ldr	r2, [pc, #120]	; (616c <Power_Ip_RCM_GetResetReason+0xac>)
    60f2:	9b03      	ldr	r3, [sp, #12]
    60f4:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    60f6:	4b1d      	ldr	r3, [pc, #116]	; (616c <Power_Ip_RCM_GetResetReason+0xac>)
    60f8:	681b      	ldr	r3, [r3, #0]
    60fa:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    60fc:	9a02      	ldr	r2, [sp, #8]
    60fe:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6102:	4013      	ands	r3, r2
    6104:	2b82      	cmp	r3, #130	; 0x82
    6106:	d102      	bne.n	610e <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6108:	2305      	movs	r3, #5
    610a:	9307      	str	r3, [sp, #28]
    610c:	e027      	b.n	615e <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    610e:	2300      	movs	r3, #0
    6110:	9306      	str	r3, [sp, #24]
    6112:	e021      	b.n	6158 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6114:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6118:	9b06      	ldr	r3, [sp, #24]
    611a:	fa22 f303 	lsr.w	r3, r2, r3
    611e:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6120:	9a01      	ldr	r2, [sp, #4]
    6122:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6126:	4013      	ands	r3, r2
    6128:	2b00      	cmp	r3, #0
    612a:	d012      	beq.n	6152 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    612c:	9a01      	ldr	r2, [sp, #4]
    612e:	9b02      	ldr	r3, [sp, #8]
    6130:	4013      	ands	r3, r2
    6132:	2b00      	cmp	r3, #0
    6134:	d00a      	beq.n	614c <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6136:	9b05      	ldr	r3, [sp, #20]
    6138:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    613a:	9b04      	ldr	r3, [sp, #16]
    613c:	3301      	adds	r3, #1
    613e:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6140:	9b04      	ldr	r3, [sp, #16]
    6142:	2b01      	cmp	r3, #1
    6144:	d902      	bls.n	614c <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6146:	230d      	movs	r3, #13
    6148:	9307      	str	r3, [sp, #28]
                        break;
    614a:	e008      	b.n	615e <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    614c:	9b05      	ldr	r3, [sp, #20]
    614e:	3301      	adds	r3, #1
    6150:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6152:	9b06      	ldr	r3, [sp, #24]
    6154:	3301      	adds	r3, #1
    6156:	9306      	str	r3, [sp, #24]
    6158:	9b06      	ldr	r3, [sp, #24]
    615a:	2b1f      	cmp	r3, #31
    615c:	d9da      	bls.n	6114 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    615e:	9b07      	ldr	r3, [sp, #28]
}
    6160:	4618      	mov	r0, r3
    6162:	b008      	add	sp, #32
    6164:	4770      	bx	lr
    6166:	bf00      	nop
    6168:	4007f000 	.word	0x4007f000
    616c:	1fff8ce4 	.word	0x1fff8ce4

00006170 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6170:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6172:	4b0c      	ldr	r3, [pc, #48]	; (61a4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6174:	699a      	ldr	r2, [r3, #24]
    6176:	f642 73ee 	movw	r3, #12270	; 0x2fee
    617a:	4013      	ands	r3, r2
    617c:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    617e:	9b01      	ldr	r3, [sp, #4]
    6180:	2b00      	cmp	r3, #0
    6182:	d008      	beq.n	6196 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6184:	4907      	ldr	r1, [pc, #28]	; (61a4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6186:	9a01      	ldr	r2, [sp, #4]
    6188:	f642 73ee 	movw	r3, #12270	; 0x2fee
    618c:	4013      	ands	r3, r2
    618e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6190:	4a05      	ldr	r2, [pc, #20]	; (61a8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6192:	9b01      	ldr	r3, [sp, #4]
    6194:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    6196:	4b04      	ldr	r3, [pc, #16]	; (61a8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6198:	681b      	ldr	r3, [r3, #0]
    619a:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    619c:	9b00      	ldr	r3, [sp, #0]
}
    619e:	4618      	mov	r0, r3
    61a0:	b002      	add	sp, #8
    61a2:	4770      	bx	lr
    61a4:	4007f000 	.word	0x4007f000
    61a8:	1fff8ce4 	.word	0x1fff8ce4

000061ac <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    61ac:	b082      	sub	sp, #8
    61ae:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    61b0:	9b01      	ldr	r3, [sp, #4]
    61b2:	681b      	ldr	r3, [r3, #0]
    61b4:	4a03      	ldr	r2, [pc, #12]	; (61c4 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    61b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    61ba:	6093      	str	r3, [r2, #8]
}
    61bc:	bf00      	nop
    61be:	b002      	add	sp, #8
    61c0:	4770      	bx	lr
    61c2:	bf00      	nop
    61c4:	4007e000 	.word	0x4007e000

000061c8 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    61c8:	b084      	sub	sp, #16
    61ca:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    61cc:	2301      	movs	r3, #1
    61ce:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    61d0:	4b15      	ldr	r3, [pc, #84]	; (6228 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    61d2:	695b      	ldr	r3, [r3, #20]
    61d4:	b2db      	uxtb	r3, r3
    61d6:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    61d8:	9b01      	ldr	r3, [sp, #4]
    61da:	2b02      	cmp	r3, #2
    61dc:	d012      	beq.n	6204 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    61de:	9b01      	ldr	r3, [sp, #4]
    61e0:	2b02      	cmp	r3, #2
    61e2:	d818      	bhi.n	6216 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    61e4:	9b01      	ldr	r3, [sp, #4]
    61e6:	2b00      	cmp	r3, #0
    61e8:	d003      	beq.n	61f2 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    61ea:	9b01      	ldr	r3, [sp, #4]
    61ec:	2b01      	cmp	r3, #1
    61ee:	d003      	beq.n	61f8 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    61f0:	e011      	b.n	6216 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    61f2:	2300      	movs	r3, #0
    61f4:	9303      	str	r3, [sp, #12]
            break;
    61f6:	e013      	b.n	6220 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    61f8:	9b02      	ldr	r3, [sp, #8]
    61fa:	2b01      	cmp	r3, #1
    61fc:	d10d      	bne.n	621a <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    61fe:	2300      	movs	r3, #0
    6200:	9303      	str	r3, [sp, #12]
            break;
    6202:	e00a      	b.n	621a <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    6204:	9b02      	ldr	r3, [sp, #8]
    6206:	2b01      	cmp	r3, #1
    6208:	d002      	beq.n	6210 <Power_Ip_SMC_ModeCheckEntry+0x48>
    620a:	9b02      	ldr	r3, [sp, #8]
    620c:	2b10      	cmp	r3, #16
    620e:	d106      	bne.n	621e <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    6210:	2300      	movs	r3, #0
    6212:	9303      	str	r3, [sp, #12]
            break;
    6214:	e003      	b.n	621e <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    6216:	bf00      	nop
    6218:	e002      	b.n	6220 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    621a:	bf00      	nop
    621c:	e000      	b.n	6220 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    621e:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6220:	9b03      	ldr	r3, [sp, #12]
}
    6222:	4618      	mov	r0, r3
    6224:	b004      	add	sp, #16
    6226:	4770      	bx	lr
    6228:	4007e000 	.word	0x4007e000

0000622c <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    622c:	b500      	push	{lr}
    622e:	b08b      	sub	sp, #44	; 0x2c
    6230:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    6232:	2300      	movs	r3, #0
    6234:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6236:	2300      	movs	r3, #0
    6238:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    623a:	2300      	movs	r3, #0
    623c:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6240:	9b01      	ldr	r3, [sp, #4]
    6242:	685b      	ldr	r3, [r3, #4]
    6244:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6246:	9b08      	ldr	r3, [sp, #32]
    6248:	2b02      	cmp	r3, #2
    624a:	d076      	beq.n	633a <Power_Ip_SMC_ModeConfig+0x10e>
    624c:	9b08      	ldr	r3, [sp, #32]
    624e:	2b02      	cmp	r3, #2
    6250:	f200 80ab 	bhi.w	63aa <Power_Ip_SMC_ModeConfig+0x17e>
    6254:	9b08      	ldr	r3, [sp, #32]
    6256:	2b00      	cmp	r3, #0
    6258:	d003      	beq.n	6262 <Power_Ip_SMC_ModeConfig+0x36>
    625a:	9b08      	ldr	r3, [sp, #32]
    625c:	2b01      	cmp	r3, #1
    625e:	d034      	beq.n	62ca <Power_Ip_SMC_ModeConfig+0x9e>
    6260:	e0a3      	b.n	63aa <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    6262:	4b58      	ldr	r3, [pc, #352]	; (63c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6264:	68db      	ldr	r3, [r3, #12]
    6266:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6268:	9b06      	ldr	r3, [sp, #24]
    626a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    626e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    6270:	4a54      	ldr	r2, [pc, #336]	; (63c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6272:	9b06      	ldr	r3, [sp, #24]
    6274:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6276:	aa02      	add	r2, sp, #8
    6278:	a903      	add	r1, sp, #12
    627a:	a804      	add	r0, sp, #16
    627c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6280:	f7ff fece 	bl	6020 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6284:	9a02      	ldr	r2, [sp, #8]
    6286:	a903      	add	r1, sp, #12
    6288:	ab04      	add	r3, sp, #16
    628a:	4618      	mov	r0, r3
    628c:	f7ff fee2 	bl	6054 <Power_Ip_TimeoutExpired>
    6290:	4603      	mov	r3, r0
    6292:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    6296:	4b4b      	ldr	r3, [pc, #300]	; (63c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6298:	695b      	ldr	r3, [r3, #20]
    629a:	f003 0301 	and.w	r3, r3, #1
    629e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    62a0:	9b05      	ldr	r3, [sp, #20]
    62a2:	2b01      	cmp	r3, #1
    62a4:	d006      	beq.n	62b4 <Power_Ip_SMC_ModeConfig+0x88>
    62a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    62aa:	f083 0301 	eor.w	r3, r3, #1
    62ae:	b2db      	uxtb	r3, r3
    62b0:	2b00      	cmp	r3, #0
    62b2:	d1e7      	bne.n	6284 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    62b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    62b8:	2b00      	cmp	r3, #0
    62ba:	d079      	beq.n	63b0 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    62bc:	2301      	movs	r3, #1
    62be:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    62c0:	21ff      	movs	r1, #255	; 0xff
    62c2:	2000      	movs	r0, #0
    62c4:	f7ff fe90 	bl	5fe8 <Power_Ip_ReportPowerErrors>
            }

            break;
    62c8:	e072      	b.n	63b0 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    62ca:	4b3e      	ldr	r3, [pc, #248]	; (63c4 <Power_Ip_SMC_ModeConfig+0x198>)
    62cc:	68db      	ldr	r3, [r3, #12]
    62ce:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    62d0:	9b06      	ldr	r3, [sp, #24]
    62d2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    62d6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    62d8:	9b06      	ldr	r3, [sp, #24]
    62da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    62de:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    62e0:	4a38      	ldr	r2, [pc, #224]	; (63c4 <Power_Ip_SMC_ModeConfig+0x198>)
    62e2:	9b06      	ldr	r3, [sp, #24]
    62e4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    62e6:	aa02      	add	r2, sp, #8
    62e8:	a903      	add	r1, sp, #12
    62ea:	a804      	add	r0, sp, #16
    62ec:	f24c 3350 	movw	r3, #50000	; 0xc350
    62f0:	f7ff fe96 	bl	6020 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    62f4:	9a02      	ldr	r2, [sp, #8]
    62f6:	a903      	add	r1, sp, #12
    62f8:	ab04      	add	r3, sp, #16
    62fa:	4618      	mov	r0, r3
    62fc:	f7ff feaa 	bl	6054 <Power_Ip_TimeoutExpired>
    6300:	4603      	mov	r3, r0
    6302:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    6306:	4b2f      	ldr	r3, [pc, #188]	; (63c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6308:	695b      	ldr	r3, [r3, #20]
    630a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    630e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6310:	9b05      	ldr	r3, [sp, #20]
    6312:	2b80      	cmp	r3, #128	; 0x80
    6314:	d006      	beq.n	6324 <Power_Ip_SMC_ModeConfig+0xf8>
    6316:	f89d 301f 	ldrb.w	r3, [sp, #31]
    631a:	f083 0301 	eor.w	r3, r3, #1
    631e:	b2db      	uxtb	r3, r3
    6320:	2b00      	cmp	r3, #0
    6322:	d1e7      	bne.n	62f4 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6324:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6328:	2b00      	cmp	r3, #0
    632a:	d043      	beq.n	63b4 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    632c:	2301      	movs	r3, #1
    632e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6330:	21ff      	movs	r1, #255	; 0xff
    6332:	2000      	movs	r0, #0
    6334:	f7ff fe58 	bl	5fe8 <Power_Ip_ReportPowerErrors>
            }

            break;
    6338:	e03c      	b.n	63b4 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    633a:	4b22      	ldr	r3, [pc, #136]	; (63c4 <Power_Ip_SMC_ModeConfig+0x198>)
    633c:	68db      	ldr	r3, [r3, #12]
    633e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6340:	9b06      	ldr	r3, [sp, #24]
    6342:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6346:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6348:	9b06      	ldr	r3, [sp, #24]
    634a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    634e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6350:	4a1c      	ldr	r2, [pc, #112]	; (63c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6352:	9b06      	ldr	r3, [sp, #24]
    6354:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6356:	aa02      	add	r2, sp, #8
    6358:	a903      	add	r1, sp, #12
    635a:	a804      	add	r0, sp, #16
    635c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6360:	f7ff fe5e 	bl	6020 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6364:	9a02      	ldr	r2, [sp, #8]
    6366:	a903      	add	r1, sp, #12
    6368:	ab04      	add	r3, sp, #16
    636a:	4618      	mov	r0, r3
    636c:	f7ff fe72 	bl	6054 <Power_Ip_TimeoutExpired>
    6370:	4603      	mov	r3, r0
    6372:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    6376:	4b13      	ldr	r3, [pc, #76]	; (63c4 <Power_Ip_SMC_ModeConfig+0x198>)
    6378:	695b      	ldr	r3, [r3, #20]
    637a:	f003 0304 	and.w	r3, r3, #4
    637e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6380:	9b05      	ldr	r3, [sp, #20]
    6382:	2b04      	cmp	r3, #4
    6384:	d006      	beq.n	6394 <Power_Ip_SMC_ModeConfig+0x168>
    6386:	f89d 301f 	ldrb.w	r3, [sp, #31]
    638a:	f083 0301 	eor.w	r3, r3, #1
    638e:	b2db      	uxtb	r3, r3
    6390:	2b00      	cmp	r3, #0
    6392:	d1e7      	bne.n	6364 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6394:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6398:	2b00      	cmp	r3, #0
    639a:	d00d      	beq.n	63b8 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    639c:	2301      	movs	r3, #1
    639e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    63a0:	21ff      	movs	r1, #255	; 0xff
    63a2:	2000      	movs	r0, #0
    63a4:	f7ff fe20 	bl	5fe8 <Power_Ip_ReportPowerErrors>
            }

            break;
    63a8:	e006      	b.n	63b8 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    63aa:	2301      	movs	r3, #1
    63ac:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    63ae:	e004      	b.n	63ba <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    63b0:	bf00      	nop
    63b2:	e002      	b.n	63ba <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    63b4:	bf00      	nop
    63b6:	e000      	b.n	63ba <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    63b8:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    63ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    63bc:	4618      	mov	r0, r3
    63be:	b00b      	add	sp, #44	; 0x2c
    63c0:	f85d fb04 	ldr.w	pc, [sp], #4
    63c4:	4007e000 	.word	0x4007e000

000063c8 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    63c8:	b500      	push	{lr}
    63ca:	b085      	sub	sp, #20
    63cc:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    63ce:	9b01      	ldr	r3, [sp, #4]
    63d0:	9303      	str	r3, [sp, #12]
#endif /* (STD_ON == PORT_PRECOMPILE_SUPPORT) */

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    63d2:	2300      	movs	r3, #0
    63d4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (STD_OFF == PORT_PRECOMPILE_SUPPORT)
    if (NULL_PTR == ConfigPtr)
    63d8:	9b01      	ldr	r3, [sp, #4]
    63da:	2b00      	cmp	r3, #0
    63dc:	d106      	bne.n	63ec <Port_Init+0x24>
#else /*(STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    if (NULL_PTR != ConfigPtr)
#endif /* (STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_INIT_FAILED);
    63de:	230c      	movs	r3, #12
    63e0:	2200      	movs	r2, #0
    63e2:	2100      	movs	r1, #0
    63e4:	207c      	movs	r0, #124	; 0x7c
    63e6:	f010 fc3d 	bl	16c64 <Det_ReportError>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
        }
    }
}
    63ea:	e014      	b.n	6416 <Port_Init+0x4e>
        if ((uint32)1 != pLocalConfigPtr->pau8Port_PartitionList[CoreId])
    63ec:	9b03      	ldr	r3, [sp, #12]
    63ee:	69da      	ldr	r2, [r3, #28]
    63f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    63f4:	4413      	add	r3, r2
    63f6:	781b      	ldrb	r3, [r3, #0]
    63f8:	2b01      	cmp	r3, #1
    63fa:	d006      	beq.n	640a <Port_Init+0x42>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
    63fc:	23f0      	movs	r3, #240	; 0xf0
    63fe:	2200      	movs	r2, #0
    6400:	2100      	movs	r1, #0
    6402:	207c      	movs	r0, #124	; 0x7c
    6404:	f010 fc2e 	bl	16c64 <Det_ReportError>
}
    6408:	e005      	b.n	6416 <Port_Init+0x4e>
            Port_Ipw_Init(pLocalConfigPtr);
    640a:	9803      	ldr	r0, [sp, #12]
    640c:	f000 fc64 	bl	6cd8 <Port_Ipw_Init>
            Port_pConfigPtr = pLocalConfigPtr;
    6410:	4a03      	ldr	r2, [pc, #12]	; (6420 <Port_Init+0x58>)
    6412:	9b03      	ldr	r3, [sp, #12]
    6414:	6013      	str	r3, [r2, #0]
}
    6416:	bf00      	nop
    6418:	b005      	add	sp, #20
    641a:	f85d fb04 	ldr.w	pc, [sp], #4
    641e:	bf00      	nop
    6420:	1fff8ce8 	.word	0x1fff8ce8

00006424 <Port_SetPinDirection>:
void Port_SetPinDirection
(
    Port_PinType Pin,
    Port_PinDirectionType Direction
)
{
    6424:	b500      	push	{lr}
    6426:	b085      	sub	sp, #20
    6428:	9001      	str	r0, [sp, #4]
    642a:	9100      	str	r1, [sp, #0]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    /* Variable used to store current error status */
    Std_ReturnType ErrStatus;

    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    642c:	4b11      	ldr	r3, [pc, #68]	; (6474 <Port_SetPinDirection+0x50>)
    642e:	681b      	ldr	r3, [r3, #0]
    6430:	2b00      	cmp	r3, #0
    6432:	d106      	bne.n	6442 <Port_SetPinDirection+0x1e>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    6434:	230f      	movs	r3, #15
    6436:	2201      	movs	r2, #1
    6438:	2100      	movs	r1, #0
    643a:	207c      	movs	r0, #124	; 0x7c
    643c:	f010 fc12 	bl	16c64 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    6440:	e013      	b.n	646a <Port_SetPinDirection+0x46>
        ErrStatus = Port_Ipw_SetPinDirection(Pin, Direction, Port_pConfigPtr);
    6442:	4b0c      	ldr	r3, [pc, #48]	; (6474 <Port_SetPinDirection+0x50>)
    6444:	681b      	ldr	r3, [r3, #0]
    6446:	461a      	mov	r2, r3
    6448:	9900      	ldr	r1, [sp, #0]
    644a:	9801      	ldr	r0, [sp, #4]
    644c:	f000 fcb2 	bl	6db4 <Port_Ipw_SetPinDirection>
    6450:	4603      	mov	r3, r0
    6452:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_NOT_OK == ErrStatus)
    6456:	f89d 300f 	ldrb.w	r3, [sp, #15]
    645a:	2b01      	cmp	r3, #1
    645c:	d105      	bne.n	646a <Port_SetPinDirection+0x46>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
    645e:	230b      	movs	r3, #11
    6460:	2201      	movs	r2, #1
    6462:	2100      	movs	r1, #0
    6464:	207c      	movs	r0, #124	; 0x7c
    6466:	f010 fbfd 	bl	16c64 <Det_ReportError>
}
    646a:	bf00      	nop
    646c:	b005      	add	sp, #20
    646e:	f85d fb04 	ldr.w	pc, [sp], #4
    6472:	bf00      	nop
    6474:	1fff8ce8 	.word	0x1fff8ce8

00006478 <Port_SetPinMode>:
void Port_SetPinMode
(
    Port_PinType Pin,
    Port_PinModeType Mode
)
{
    6478:	b500      	push	{lr}
    647a:	b085      	sub	sp, #20
    647c:	9001      	str	r0, [sp, #4]
    647e:	460b      	mov	r3, r1
    6480:	f88d 3003 	strb.w	r3, [sp, #3]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 u8PinModeError = (uint8)0U;
    6484:	2300      	movs	r3, #0
    6486:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if port is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    648a:	4b12      	ldr	r3, [pc, #72]	; (64d4 <Port_SetPinMode+0x5c>)
    648c:	681b      	ldr	r3, [r3, #0]
    648e:	2b00      	cmp	r3, #0
    6490:	d106      	bne.n	64a0 <Port_SetPinMode+0x28>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_UNINIT);
    6492:	230f      	movs	r3, #15
    6494:	2204      	movs	r2, #4
    6496:	2100      	movs	r1, #0
    6498:	207c      	movs	r0, #124	; 0x7c
    649a:	f010 fbe3 	bl	16c64 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    649e:	e014      	b.n	64ca <Port_SetPinMode+0x52>
        u8PinModeError = (uint8)Port_Ipw_SetPinMode(Pin, Mode, Port_pConfigPtr);
    64a0:	4b0c      	ldr	r3, [pc, #48]	; (64d4 <Port_SetPinMode+0x5c>)
    64a2:	681a      	ldr	r2, [r3, #0]
    64a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    64a8:	4619      	mov	r1, r3
    64aa:	9801      	ldr	r0, [sp, #4]
    64ac:	f000 fd7a 	bl	6fa4 <Port_Ipw_SetPinMode>
    64b0:	4603      	mov	r3, r0
    64b2:	f88d 300f 	strb.w	r3, [sp, #15]
        if (PORT_E_PARAM_INVALID_MODE == u8PinModeError)
    64b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    64ba:	2b0d      	cmp	r3, #13
    64bc:	d105      	bne.n	64ca <Port_SetPinMode+0x52>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
    64be:	230d      	movs	r3, #13
    64c0:	2204      	movs	r2, #4
    64c2:	2100      	movs	r1, #0
    64c4:	207c      	movs	r0, #124	; 0x7c
    64c6:	f010 fbcd 	bl	16c64 <Det_ReportError>
}
    64ca:	bf00      	nop
    64cc:	b005      	add	sp, #20
    64ce:	f85d fb04 	ldr.w	pc, [sp], #4
    64d2:	bf00      	nop
    64d4:	1fff8ce8 	.word	0x1fff8ce8

000064d8 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    64d8:	b500      	push	{lr}
    64da:	b083      	sub	sp, #12
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    64dc:	2300      	movs	r3, #0
    64de:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    64e2:	4b12      	ldr	r3, [pc, #72]	; (652c <Port_RefreshPortDirection+0x54>)
    64e4:	681b      	ldr	r3, [r3, #0]
    64e6:	2b00      	cmp	r3, #0
    64e8:	d106      	bne.n	64f8 <Port_RefreshPortDirection+0x20>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    64ea:	230f      	movs	r3, #15
    64ec:	2202      	movs	r2, #2
    64ee:	2100      	movs	r1, #0
    64f0:	207c      	movs	r0, #124	; 0x7c
    64f2:	f010 fbb7 	bl	16c64 <Det_ReportError>
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    }
}
    64f6:	e014      	b.n	6522 <Port_RefreshPortDirection+0x4a>
    else if ((uint32)1 != Port_pConfigPtr->pau8Port_PartitionList[CoreId])
    64f8:	4b0c      	ldr	r3, [pc, #48]	; (652c <Port_RefreshPortDirection+0x54>)
    64fa:	681b      	ldr	r3, [r3, #0]
    64fc:	69da      	ldr	r2, [r3, #28]
    64fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6502:	4413      	add	r3, r2
    6504:	781b      	ldrb	r3, [r3, #0]
    6506:	2b01      	cmp	r3, #1
    6508:	d006      	beq.n	6518 <Port_RefreshPortDirection+0x40>
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    650a:	23f0      	movs	r3, #240	; 0xf0
    650c:	2202      	movs	r2, #2
    650e:	2100      	movs	r1, #0
    6510:	207c      	movs	r0, #124	; 0x7c
    6512:	f010 fba7 	bl	16c64 <Det_ReportError>
}
    6516:	e004      	b.n	6522 <Port_RefreshPortDirection+0x4a>
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    6518:	4b04      	ldr	r3, [pc, #16]	; (652c <Port_RefreshPortDirection+0x54>)
    651a:	681b      	ldr	r3, [r3, #0]
    651c:	4618      	mov	r0, r3
    651e:	f000 febf 	bl	72a0 <Port_Ipw_RefreshPortDirection>
}
    6522:	bf00      	nop
    6524:	b003      	add	sp, #12
    6526:	f85d fb04 	ldr.w	pc, [sp], #4
    652a:	bf00      	nop
    652c:	1fff8ce8 	.word	0x1fff8ce8

00006530 <Port_GetVersionInfo>:
*/
void Port_GetVersionInfo
(
    Std_VersionInfoType * versioninfo
)
{
    6530:	b500      	push	{lr}
    6532:	b083      	sub	sp, #12
    6534:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    if (NULL_PTR == versioninfo)
    6536:	9b01      	ldr	r3, [sp, #4]
    6538:	2b00      	cmp	r3, #0
    653a:	d106      	bne.n	654a <Port_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_GETVERSIONINFO_ID, (uint8)PORT_E_PARAM_POINTER);
    653c:	2310      	movs	r3, #16
    653e:	2203      	movs	r2, #3
    6540:	2100      	movs	r1, #0
    6542:	207c      	movs	r0, #124	; 0x7c
    6544:	f010 fb8e 	bl	16c64 <Det_ReportError>
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    }
}
    6548:	e00e      	b.n	6568 <Port_GetVersionInfo+0x38>
        (versioninfo)->vendorID         = (uint16)PORT_VENDOR_ID;
    654a:	9b01      	ldr	r3, [sp, #4]
    654c:	222b      	movs	r2, #43	; 0x2b
    654e:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
    6550:	9b01      	ldr	r3, [sp, #4]
    6552:	227c      	movs	r2, #124	; 0x7c
    6554:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
    6556:	9b01      	ldr	r3, [sp, #4]
    6558:	2202      	movs	r2, #2
    655a:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
    655c:	9b01      	ldr	r3, [sp, #4]
    655e:	2200      	movs	r2, #0
    6560:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    6562:	9b01      	ldr	r3, [sp, #4]
    6564:	2200      	movs	r2, #0
    6566:	719a      	strb	r2, [r3, #6]
}
    6568:	bf00      	nop
    656a:	b003      	add	sp, #12
    656c:	f85d fb04 	ldr.w	pc, [sp], #4

00006570 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6570:	b086      	sub	sp, #24
    6572:	9003      	str	r0, [sp, #12]
    6574:	9102      	str	r1, [sp, #8]
    6576:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    6578:	23ff      	movs	r3, #255	; 0xff
    657a:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    657c:	9b03      	ldr	r3, [sp, #12]
    657e:	4a39      	ldr	r2, [pc, #228]	; (6664 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6580:	4293      	cmp	r3, r2
    6582:	d151      	bne.n	6628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    6584:	9b02      	ldr	r3, [sp, #8]
    6586:	2b10      	cmp	r3, #16
    6588:	d867      	bhi.n	665a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    658a:	a201      	add	r2, pc, #4	; (adr r2, 6590 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6590:	000065d5 	.word	0x000065d5
    6594:	000065e3 	.word	0x000065e3
    6598:	0000665b 	.word	0x0000665b
    659c:	0000665b 	.word	0x0000665b
    65a0:	0000665b 	.word	0x0000665b
    65a4:	0000665b 	.word	0x0000665b
    65a8:	0000665b 	.word	0x0000665b
    65ac:	0000665b 	.word	0x0000665b
    65b0:	0000665b 	.word	0x0000665b
    65b4:	0000665b 	.word	0x0000665b
    65b8:	0000665b 	.word	0x0000665b
    65bc:	0000665b 	.word	0x0000665b
    65c0:	0000665b 	.word	0x0000665b
    65c4:	000065f1 	.word	0x000065f1
    65c8:	000065ff 	.word	0x000065ff
    65cc:	0000660d 	.word	0x0000660d
    65d0:	0000661b 	.word	0x0000661b
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    65d4:	2301      	movs	r3, #1
    65d6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65d8:	9a05      	ldr	r2, [sp, #20]
    65da:	9b01      	ldr	r3, [sp, #4]
    65dc:	4313      	orrs	r3, r2
    65de:	9305      	str	r3, [sp, #20]
                break;
    65e0:	e03c      	b.n	665c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    65e2:	2302      	movs	r3, #2
    65e4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65e6:	9a05      	ldr	r2, [sp, #20]
    65e8:	9b01      	ldr	r3, [sp, #4]
    65ea:	4313      	orrs	r3, r2
    65ec:	9305      	str	r3, [sp, #20]
                break;
    65ee:	e035      	b.n	665c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    65f0:	2304      	movs	r3, #4
    65f2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65f4:	9a05      	ldr	r2, [sp, #20]
    65f6:	9b01      	ldr	r3, [sp, #4]
    65f8:	4313      	orrs	r3, r2
    65fa:	9305      	str	r3, [sp, #20]
                break;
    65fc:	e02e      	b.n	665c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    65fe:	2308      	movs	r3, #8
    6600:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6602:	9a05      	ldr	r2, [sp, #20]
    6604:	9b01      	ldr	r3, [sp, #4]
    6606:	4313      	orrs	r3, r2
    6608:	9305      	str	r3, [sp, #20]
                break;
    660a:	e027      	b.n	665c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    660c:	230e      	movs	r3, #14
    660e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6610:	9a05      	ldr	r2, [sp, #20]
    6612:	9b01      	ldr	r3, [sp, #4]
    6614:	4013      	ands	r3, r2
    6616:	9305      	str	r3, [sp, #20]
                break;
    6618:	e020      	b.n	665c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    661a:	230d      	movs	r3, #13
    661c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    661e:	9a05      	ldr	r2, [sp, #20]
    6620:	9b01      	ldr	r3, [sp, #4]
    6622:	4013      	ands	r3, r2
    6624:	9305      	str	r3, [sp, #20]
                break;
    6626:	e019      	b.n	665c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    6628:	9b03      	ldr	r3, [sp, #12]
    662a:	4a0f      	ldr	r2, [pc, #60]	; (6668 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    662c:	4293      	cmp	r3, r2
    662e:	d115      	bne.n	665c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    6630:	9b02      	ldr	r3, [sp, #8]
    6632:	2b00      	cmp	r3, #0
    6634:	d003      	beq.n	663e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    6636:	9b02      	ldr	r3, [sp, #8]
    6638:	2b01      	cmp	r3, #1
    663a:	d007      	beq.n	664c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    663c:	e00e      	b.n	665c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    663e:	230b      	movs	r3, #11
    6640:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6642:	9a05      	ldr	r2, [sp, #20]
    6644:	9b01      	ldr	r3, [sp, #4]
    6646:	4013      	ands	r3, r2
    6648:	9305      	str	r3, [sp, #20]
                break;
    664a:	e007      	b.n	665c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    664c:	2307      	movs	r3, #7
    664e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6650:	9a05      	ldr	r2, [sp, #20]
    6652:	9b01      	ldr	r3, [sp, #4]
    6654:	4013      	ands	r3, r2
    6656:	9305      	str	r3, [sp, #20]
                break;
    6658:	e000      	b.n	665c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    665a:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    665c:	9b05      	ldr	r3, [sp, #20]
}
    665e:	4618      	mov	r0, r3
    6660:	b006      	add	sp, #24
    6662:	4770      	bx	lr
    6664:	4004a000 	.word	0x4004a000
    6668:	4004b000 	.word	0x4004b000

0000666c <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    666c:	b500      	push	{lr}
    666e:	b089      	sub	sp, #36	; 0x24
    6670:	9003      	str	r0, [sp, #12]
    6672:	9102      	str	r1, [sp, #8]
    6674:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6676:	9b01      	ldr	r3, [sp, #4]
    6678:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    667a:	9b01      	ldr	r3, [sp, #4]
    667c:	2b08      	cmp	r3, #8
    667e:	d121      	bne.n	66c4 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6680:	4b13      	ldr	r3, [pc, #76]	; (66d0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6682:	685b      	ldr	r3, [r3, #4]
    6684:	f003 030f 	and.w	r3, r3, #15
    6688:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    668a:	9a06      	ldr	r2, [sp, #24]
    668c:	9902      	ldr	r1, [sp, #8]
    668e:	9803      	ldr	r0, [sp, #12]
    6690:	f7ff ff6e 	bl	6570 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6694:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6696:	9b05      	ldr	r3, [sp, #20]
    6698:	2bff      	cmp	r3, #255	; 0xff
    669a:	d011      	beq.n	66c0 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    669c:	f00e fc2a 	bl	14ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    66a0:	4b0b      	ldr	r3, [pc, #44]	; (66d0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    66a2:	685b      	ldr	r3, [r3, #4]
    66a4:	4a0a      	ldr	r2, [pc, #40]	; (66d0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    66a6:	f023 030f 	bic.w	r3, r3, #15
    66aa:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    66ac:	4b08      	ldr	r3, [pc, #32]	; (66d0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    66ae:	685a      	ldr	r2, [r3, #4]
    66b0:	9b05      	ldr	r3, [sp, #20]
    66b2:	f003 030f 	and.w	r3, r3, #15
    66b6:	4906      	ldr	r1, [pc, #24]	; (66d0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    66b8:	4313      	orrs	r3, r2
    66ba:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    66bc:	f00e fc46 	bl	14f4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    66c0:	2300      	movs	r3, #0
    66c2:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    66c4:	9b07      	ldr	r3, [sp, #28]
}
    66c6:	4618      	mov	r0, r3
    66c8:	b009      	add	sp, #36	; 0x24
    66ca:	f85d fb04 	ldr.w	pc, [sp], #4
    66ce:	bf00      	nop
    66d0:	40048000 	.word	0x40048000

000066d4 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    66d4:	b500      	push	{lr}
    66d6:	b087      	sub	sp, #28
    66d8:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    66da:	2300      	movs	r3, #0
    66dc:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    66de:	2300      	movs	r3, #0
    66e0:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    66e2:	2300      	movs	r3, #0
    66e4:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    66e6:	9b01      	ldr	r3, [sp, #4]
    66e8:	68db      	ldr	r3, [r3, #12]
    66ea:	2b02      	cmp	r3, #2
    66ec:	d00a      	beq.n	6704 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    66ee:	9b05      	ldr	r3, [sp, #20]
    66f0:	f043 0302 	orr.w	r3, r3, #2
    66f4:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    66f6:	9b01      	ldr	r3, [sp, #4]
    66f8:	68db      	ldr	r3, [r3, #12]
    66fa:	f003 0301 	and.w	r3, r3, #1
    66fe:	9a05      	ldr	r2, [sp, #20]
    6700:	4313      	orrs	r3, r2
    6702:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6704:	9b01      	ldr	r3, [sp, #4]
    6706:	699b      	ldr	r3, [r3, #24]
    6708:	019b      	lsls	r3, r3, #6
    670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    670e:	9a05      	ldr	r2, [sp, #20]
    6710:	4313      	orrs	r3, r2
    6712:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6714:	9b01      	ldr	r3, [sp, #4]
    6716:	6a1b      	ldr	r3, [r3, #32]
    6718:	03db      	lsls	r3, r3, #15
    671a:	b29b      	uxth	r3, r3
    671c:	9a05      	ldr	r2, [sp, #20]
    671e:	4313      	orrs	r3, r2
    6720:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6722:	9b01      	ldr	r3, [sp, #4]
    6724:	7f1b      	ldrb	r3, [r3, #28]
    6726:	2b00      	cmp	r3, #0
    6728:	d001      	beq.n	672e <Port_Ci_Port_Ip_PinInit+0x5a>
    672a:	2310      	movs	r3, #16
    672c:	e000      	b.n	6730 <Port_Ci_Port_Ip_PinInit+0x5c>
    672e:	2300      	movs	r3, #0
    6730:	9a05      	ldr	r2, [sp, #20]
    6732:	4313      	orrs	r3, r2
    6734:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6736:	9b01      	ldr	r3, [sp, #4]
    6738:	691b      	ldr	r3, [r3, #16]
    673a:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    673c:	9b01      	ldr	r3, [sp, #4]
    673e:	6818      	ldr	r0, [r3, #0]
    6740:	9b01      	ldr	r3, [sp, #4]
    6742:	689b      	ldr	r3, [r3, #8]
    6744:	9a04      	ldr	r2, [sp, #16]
    6746:	4619      	mov	r1, r3
    6748:	f7ff ff90 	bl	666c <Port_Ci_Port_Ip_ConfigureInterleave>
    674c:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    674e:	9b03      	ldr	r3, [sp, #12]
    6750:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6752:	9b04      	ldr	r3, [sp, #16]
    6754:	021b      	lsls	r3, r3, #8
    6756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    675a:	9a05      	ldr	r2, [sp, #20]
    675c:	4313      	orrs	r3, r2
    675e:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6760:	f00e fa2e 	bl	14bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6764:	9b01      	ldr	r3, [sp, #4]
    6766:	681b      	ldr	r3, [r3, #0]
    6768:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    676c:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    676e:	9b01      	ldr	r3, [sp, #4]
    6770:	689b      	ldr	r3, [r3, #8]
    6772:	2201      	movs	r2, #1
    6774:	fa02 f303 	lsl.w	r3, r2, r3
    6778:	43db      	mvns	r3, r3
    677a:	9a02      	ldr	r2, [sp, #8]
    677c:	4013      	ands	r3, r2
    677e:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6780:	9b01      	ldr	r3, [sp, #4]
    6782:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6786:	2b00      	cmp	r3, #0
    6788:	d001      	beq.n	678e <Port_Ci_Port_Ip_PinInit+0xba>
    678a:	2201      	movs	r2, #1
    678c:	e000      	b.n	6790 <Port_Ci_Port_Ip_PinInit+0xbc>
    678e:	2200      	movs	r2, #0
    6790:	9b01      	ldr	r3, [sp, #4]
    6792:	689b      	ldr	r3, [r3, #8]
    6794:	fa02 f303 	lsl.w	r3, r2, r3
    6798:	9a02      	ldr	r2, [sp, #8]
    679a:	4313      	orrs	r3, r2
    679c:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    679e:	9b01      	ldr	r3, [sp, #4]
    67a0:	681b      	ldr	r3, [r3, #0]
    67a2:	9a02      	ldr	r2, [sp, #8]
    67a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    67a8:	f00e fa36 	bl	14c18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    67ac:	9b04      	ldr	r3, [sp, #16]
    67ae:	2b01      	cmp	r3, #1
    67b0:	d16d      	bne.n	688e <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    67b2:	9b01      	ldr	r3, [sp, #4]
    67b4:	695b      	ldr	r3, [r3, #20]
    67b6:	2b02      	cmp	r3, #2
    67b8:	d138      	bne.n	682c <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    67ba:	9b01      	ldr	r3, [sp, #4]
    67bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    67c0:	2b01      	cmp	r3, #1
    67c2:	d10f      	bne.n	67e4 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    67c4:	f00e fa4e 	bl	14c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    67c8:	9b01      	ldr	r3, [sp, #4]
    67ca:	685b      	ldr	r3, [r3, #4]
    67cc:	6859      	ldr	r1, [r3, #4]
    67ce:	9b01      	ldr	r3, [sp, #4]
    67d0:	689b      	ldr	r3, [r3, #8]
    67d2:	2201      	movs	r2, #1
    67d4:	409a      	lsls	r2, r3
    67d6:	9b01      	ldr	r3, [sp, #4]
    67d8:	685b      	ldr	r3, [r3, #4]
    67da:	430a      	orrs	r2, r1
    67dc:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    67de:	f00e fa6d 	bl	14cbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    67e2:	e013      	b.n	680c <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    67e4:	9b01      	ldr	r3, [sp, #4]
    67e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    67ea:	2b00      	cmp	r3, #0
    67ec:	d10e      	bne.n	680c <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    67ee:	f00e fa8b 	bl	14d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    67f2:	9b01      	ldr	r3, [sp, #4]
    67f4:	685b      	ldr	r3, [r3, #4]
    67f6:	6899      	ldr	r1, [r3, #8]
    67f8:	9b01      	ldr	r3, [sp, #4]
    67fa:	689b      	ldr	r3, [r3, #8]
    67fc:	2201      	movs	r2, #1
    67fe:	409a      	lsls	r2, r3
    6800:	9b01      	ldr	r3, [sp, #4]
    6802:	685b      	ldr	r3, [r3, #4]
    6804:	430a      	orrs	r2, r1
    6806:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6808:	f00e faaa 	bl	14d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    680c:	f00e face 	bl	14dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6810:	9b01      	ldr	r3, [sp, #4]
    6812:	685b      	ldr	r3, [r3, #4]
    6814:	6959      	ldr	r1, [r3, #20]
    6816:	9b01      	ldr	r3, [sp, #4]
    6818:	689b      	ldr	r3, [r3, #8]
    681a:	2201      	movs	r2, #1
    681c:	409a      	lsls	r2, r3
    681e:	9b01      	ldr	r3, [sp, #4]
    6820:	685b      	ldr	r3, [r3, #4]
    6822:	430a      	orrs	r2, r1
    6824:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6826:	f00e faed 	bl	14e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    682a:	e030      	b.n	688e <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    682c:	f00e fabe 	bl	14dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6830:	9b01      	ldr	r3, [sp, #4]
    6832:	685b      	ldr	r3, [r3, #4]
    6834:	6959      	ldr	r1, [r3, #20]
    6836:	9b01      	ldr	r3, [sp, #4]
    6838:	689b      	ldr	r3, [r3, #8]
    683a:	2201      	movs	r2, #1
    683c:	fa02 f303 	lsl.w	r3, r2, r3
    6840:	43da      	mvns	r2, r3
    6842:	9b01      	ldr	r3, [sp, #4]
    6844:	685b      	ldr	r3, [r3, #4]
    6846:	400a      	ands	r2, r1
    6848:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    684a:	f00e fadb 	bl	14e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    684e:	f00e faff 	bl	14e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6852:	9b01      	ldr	r3, [sp, #4]
    6854:	685b      	ldr	r3, [r3, #4]
    6856:	6999      	ldr	r1, [r3, #24]
    6858:	9b01      	ldr	r3, [sp, #4]
    685a:	689b      	ldr	r3, [r3, #8]
    685c:	2201      	movs	r2, #1
    685e:	fa02 f303 	lsl.w	r3, r2, r3
    6862:	43da      	mvns	r2, r3
    6864:	9b01      	ldr	r3, [sp, #4]
    6866:	685b      	ldr	r3, [r3, #4]
    6868:	400a      	ands	r2, r1
    686a:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    686c:	9b01      	ldr	r3, [sp, #4]
    686e:	695b      	ldr	r3, [r3, #20]
    6870:	2b03      	cmp	r3, #3
    6872:	d10a      	bne.n	688a <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6874:	9b01      	ldr	r3, [sp, #4]
    6876:	685b      	ldr	r3, [r3, #4]
    6878:	6999      	ldr	r1, [r3, #24]
    687a:	9b01      	ldr	r3, [sp, #4]
    687c:	689b      	ldr	r3, [r3, #8]
    687e:	2201      	movs	r2, #1
    6880:	409a      	lsls	r2, r3
    6882:	9b01      	ldr	r3, [sp, #4]
    6884:	685b      	ldr	r3, [r3, #4]
    6886:	430a      	orrs	r2, r1
    6888:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    688a:	f00e fb0d 	bl	14ea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    688e:	9b01      	ldr	r3, [sp, #4]
    6890:	681b      	ldr	r3, [r3, #0]
    6892:	9a01      	ldr	r2, [sp, #4]
    6894:	6892      	ldr	r2, [r2, #8]
    6896:	9905      	ldr	r1, [sp, #20]
    6898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    689c:	bf00      	nop
    689e:	b007      	add	sp, #28
    68a0:	f85d fb04 	ldr.w	pc, [sp], #4

000068a4 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    68a4:	b500      	push	{lr}
    68a6:	b085      	sub	sp, #20
    68a8:	9001      	str	r0, [sp, #4]
    68aa:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    68ac:	2300      	movs	r3, #0
    68ae:	9303      	str	r3, [sp, #12]
    68b0:	e00d      	b.n	68ce <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    68b2:	9a03      	ldr	r2, [sp, #12]
    68b4:	4613      	mov	r3, r2
    68b6:	009b      	lsls	r3, r3, #2
    68b8:	4413      	add	r3, r2
    68ba:	00db      	lsls	r3, r3, #3
    68bc:	461a      	mov	r2, r3
    68be:	9b00      	ldr	r3, [sp, #0]
    68c0:	4413      	add	r3, r2
    68c2:	4618      	mov	r0, r3
    68c4:	f7ff ff06 	bl	66d4 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    68c8:	9b03      	ldr	r3, [sp, #12]
    68ca:	3301      	adds	r3, #1
    68cc:	9303      	str	r3, [sp, #12]
    68ce:	9a03      	ldr	r2, [sp, #12]
    68d0:	9b01      	ldr	r3, [sp, #4]
    68d2:	429a      	cmp	r2, r3
    68d4:	d3ed      	bcc.n	68b2 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    68d6:	2300      	movs	r3, #0
}
    68d8:	4618      	mov	r0, r3
    68da:	b005      	add	sp, #20
    68dc:	f85d fb04 	ldr.w	pc, [sp], #4

000068e0 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    68e0:	b500      	push	{lr}
    68e2:	b087      	sub	sp, #28
    68e4:	9003      	str	r0, [sp, #12]
    68e6:	9102      	str	r1, [sp, #8]
    68e8:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    68ea:	9a01      	ldr	r2, [sp, #4]
    68ec:	9902      	ldr	r1, [sp, #8]
    68ee:	9803      	ldr	r0, [sp, #12]
    68f0:	f7ff febc 	bl	666c <Port_Ci_Port_Ip_ConfigureInterleave>
    68f4:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    68f6:	f00e fb4f 	bl	14f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    68fa:	9b03      	ldr	r3, [sp, #12]
    68fc:	9a02      	ldr	r2, [sp, #8]
    68fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6902:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6904:	9b04      	ldr	r3, [sp, #16]
    6906:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    690a:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    690c:	9b05      	ldr	r3, [sp, #20]
    690e:	021b      	lsls	r3, r3, #8
    6910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6914:	9a04      	ldr	r2, [sp, #16]
    6916:	4313      	orrs	r3, r2
    6918:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    691a:	9b03      	ldr	r3, [sp, #12]
    691c:	9a02      	ldr	r2, [sp, #8]
    691e:	9904      	ldr	r1, [sp, #16]
    6920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6924:	f00e fb64 	bl	14ff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6928:	bf00      	nop
    692a:	b007      	add	sp, #28
    692c:	f85d fb04 	ldr.w	pc, [sp], #4

00006930 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6930:	b500      	push	{lr}
    6932:	b083      	sub	sp, #12
    6934:	9001      	str	r0, [sp, #4]
    6936:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6938:	f00e fb80 	bl	1503c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    693c:	9b01      	ldr	r3, [sp, #4]
    693e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6942:	2101      	movs	r1, #1
    6944:	9b00      	ldr	r3, [sp, #0]
    6946:	fa01 f303 	lsl.w	r3, r1, r3
    694a:	431a      	orrs	r2, r3
    694c:	9b01      	ldr	r3, [sp, #4]
    694e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6952:	f00e fb9f 	bl	15094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6956:	bf00      	nop
    6958:	b003      	add	sp, #12
    695a:	f85d fb04 	ldr.w	pc, [sp], #4

0000695e <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    695e:	b500      	push	{lr}
    6960:	b083      	sub	sp, #12
    6962:	9001      	str	r0, [sp, #4]
    6964:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6966:	f00e fbbb 	bl	150e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    696a:	9b01      	ldr	r3, [sp, #4]
    696c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6970:	2101      	movs	r1, #1
    6972:	9b00      	ldr	r3, [sp, #0]
    6974:	fa01 f303 	lsl.w	r3, r1, r3
    6978:	43db      	mvns	r3, r3
    697a:	401a      	ands	r2, r3
    697c:	9b01      	ldr	r3, [sp, #4]
    697e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6982:	f00e fbd9 	bl	15138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6986:	bf00      	nop
    6988:	b003      	add	sp, #12
    698a:	f85d fb04 	ldr.w	pc, [sp], #4

0000698e <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    698e:	b082      	sub	sp, #8
    6990:	9001      	str	r0, [sp, #4]
    6992:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6994:	9b00      	ldr	r3, [sp, #0]
    6996:	785b      	ldrb	r3, [r3, #1]
    6998:	f003 0201 	and.w	r2, r3, #1
    699c:	9b01      	ldr	r3, [sp, #4]
    699e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    69a2:	9b00      	ldr	r3, [sp, #0]
    69a4:	789b      	ldrb	r3, [r3, #2]
    69a6:	f003 021f 	and.w	r2, r3, #31
    69aa:	9b01      	ldr	r3, [sp, #4]
    69ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    69b0:	bf00      	nop
    69b2:	b002      	add	sp, #8
    69b4:	4770      	bx	lr

000069b6 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    69b6:	b086      	sub	sp, #24
    69b8:	9003      	str	r0, [sp, #12]
    69ba:	9301      	str	r3, [sp, #4]
    69bc:	460b      	mov	r3, r1
    69be:	f8ad 300a 	strh.w	r3, [sp, #10]
    69c2:	4613      	mov	r3, r2
    69c4:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    69c8:	2300      	movs	r3, #0
    69ca:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    69ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69d2:	f043 0301 	orr.w	r3, r3, #1
    69d6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    69da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69de:	f043 0302 	orr.w	r3, r3, #2
    69e2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    69e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69ea:	f043 0310 	orr.w	r3, r3, #16
    69ee:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    69f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    69fa:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    69fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6a06:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6a0a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6a16:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6a1a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6a1e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6a22:	4013      	ands	r3, r2
    6a24:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6a28:	9b01      	ldr	r3, [sp, #4]
    6a2a:	2b00      	cmp	r3, #0
    6a2c:	d003      	beq.n	6a36 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6a2e:	9b01      	ldr	r3, [sp, #4]
    6a30:	2b01      	cmp	r3, #1
    6a32:	d00a      	beq.n	6a4a <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6a34:	e013      	b.n	6a5e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6a36:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a3a:	041a      	lsls	r2, r3, #16
    6a3c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a40:	431a      	orrs	r2, r3
    6a42:	9b03      	ldr	r3, [sp, #12]
    6a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6a48:	e009      	b.n	6a5e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6a4a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a4e:	041a      	lsls	r2, r3, #16
    6a50:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a54:	431a      	orrs	r2, r3
    6a56:	9b03      	ldr	r3, [sp, #12]
    6a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6a5c:	bf00      	nop
    }
}
    6a5e:	bf00      	nop
    6a60:	b006      	add	sp, #24
    6a62:	4770      	bx	lr

00006a64 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6a64:	b500      	push	{lr}
    6a66:	b087      	sub	sp, #28
    6a68:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6a6a:	9b01      	ldr	r3, [sp, #4]
    6a6c:	885b      	ldrh	r3, [r3, #2]
    6a6e:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6a72:	9b01      	ldr	r3, [sp, #4]
    6a74:	689b      	ldr	r3, [r3, #8]
    6a76:	7a1b      	ldrb	r3, [r3, #8]
    6a78:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6a7c:	9b01      	ldr	r3, [sp, #4]
    6a7e:	689b      	ldr	r3, [r3, #8]
    6a80:	681b      	ldr	r3, [r3, #0]
    6a82:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6a84:	9b01      	ldr	r3, [sp, #4]
    6a86:	689b      	ldr	r3, [r3, #8]
    6a88:	685b      	ldr	r3, [r3, #4]
    6a8a:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6a8c:	2300      	movs	r3, #0
    6a8e:	f8ad 3016 	strh.w	r3, [sp, #22]
    6a92:	e111      	b.n	6cb8 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6a94:	9b02      	ldr	r3, [sp, #8]
    6a96:	2b02      	cmp	r3, #2
    6a98:	d169      	bne.n	6b6e <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6a9a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6a9e:	2b01      	cmp	r3, #1
    6aa0:	d11a      	bne.n	6ad8 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6aa2:	9b01      	ldr	r3, [sp, #4]
    6aa4:	685a      	ldr	r2, [r3, #4]
    6aa6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6aaa:	005b      	lsls	r3, r3, #1
    6aac:	4413      	add	r3, r2
    6aae:	881b      	ldrh	r3, [r3, #0]
    6ab0:	f003 021f 	and.w	r2, r3, #31
    6ab4:	9b01      	ldr	r3, [sp, #4]
    6ab6:	6859      	ldr	r1, [r3, #4]
    6ab8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6abc:	005b      	lsls	r3, r3, #1
    6abe:	440b      	add	r3, r1
    6ac0:	881b      	ldrh	r3, [r3, #0]
    6ac2:	095b      	lsrs	r3, r3, #5
    6ac4:	b29b      	uxth	r3, r3
    6ac6:	4619      	mov	r1, r3
    6ac8:	4b81      	ldr	r3, [pc, #516]	; (6cd0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6aca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6ace:	2101      	movs	r1, #1
    6ad0:	fa01 f202 	lsl.w	r2, r1, r2
    6ad4:	605a      	str	r2, [r3, #4]
    6ad6:	e01d      	b.n	6b14 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6ad8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6adc:	2b00      	cmp	r3, #0
    6ade:	d119      	bne.n	6b14 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6ae0:	9b01      	ldr	r3, [sp, #4]
    6ae2:	685a      	ldr	r2, [r3, #4]
    6ae4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ae8:	005b      	lsls	r3, r3, #1
    6aea:	4413      	add	r3, r2
    6aec:	881b      	ldrh	r3, [r3, #0]
    6aee:	f003 021f 	and.w	r2, r3, #31
    6af2:	9b01      	ldr	r3, [sp, #4]
    6af4:	6859      	ldr	r1, [r3, #4]
    6af6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6afa:	005b      	lsls	r3, r3, #1
    6afc:	440b      	add	r3, r1
    6afe:	881b      	ldrh	r3, [r3, #0]
    6b00:	095b      	lsrs	r3, r3, #5
    6b02:	b29b      	uxth	r3, r3
    6b04:	4619      	mov	r1, r3
    6b06:	4b72      	ldr	r3, [pc, #456]	; (6cd0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6b0c:	2101      	movs	r1, #1
    6b0e:	fa01 f202 	lsl.w	r2, r1, r2
    6b12:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6b14:	f00e fb36 	bl	15184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b18:	9b01      	ldr	r3, [sp, #4]
    6b1a:	685a      	ldr	r2, [r3, #4]
    6b1c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b20:	005b      	lsls	r3, r3, #1
    6b22:	4413      	add	r3, r2
    6b24:	881b      	ldrh	r3, [r3, #0]
    6b26:	095b      	lsrs	r3, r3, #5
    6b28:	b29b      	uxth	r3, r3
    6b2a:	461a      	mov	r2, r3
    6b2c:	4b68      	ldr	r3, [pc, #416]	; (6cd0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b32:	6959      	ldr	r1, [r3, #20]
    6b34:	9b01      	ldr	r3, [sp, #4]
    6b36:	685a      	ldr	r2, [r3, #4]
    6b38:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b3c:	005b      	lsls	r3, r3, #1
    6b3e:	4413      	add	r3, r2
    6b40:	881b      	ldrh	r3, [r3, #0]
    6b42:	f003 031f 	and.w	r3, r3, #31
    6b46:	2201      	movs	r2, #1
    6b48:	409a      	lsls	r2, r3
    6b4a:	9b01      	ldr	r3, [sp, #4]
    6b4c:	6858      	ldr	r0, [r3, #4]
    6b4e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b52:	005b      	lsls	r3, r3, #1
    6b54:	4403      	add	r3, r0
    6b56:	881b      	ldrh	r3, [r3, #0]
    6b58:	095b      	lsrs	r3, r3, #5
    6b5a:	b29b      	uxth	r3, r3
    6b5c:	4618      	mov	r0, r3
    6b5e:	4b5c      	ldr	r3, [pc, #368]	; (6cd0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b60:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6b64:	430a      	orrs	r2, r1
    6b66:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6b68:	f00e fb38 	bl	151dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6b6c:	e086      	b.n	6c7c <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6b6e:	f00e fb09 	bl	15184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6b72:	9b01      	ldr	r3, [sp, #4]
    6b74:	685a      	ldr	r2, [r3, #4]
    6b76:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b7a:	005b      	lsls	r3, r3, #1
    6b7c:	4413      	add	r3, r2
    6b7e:	881b      	ldrh	r3, [r3, #0]
    6b80:	095b      	lsrs	r3, r3, #5
    6b82:	b29b      	uxth	r3, r3
    6b84:	461a      	mov	r2, r3
    6b86:	4b52      	ldr	r3, [pc, #328]	; (6cd0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b8c:	6959      	ldr	r1, [r3, #20]
    6b8e:	9b01      	ldr	r3, [sp, #4]
    6b90:	685a      	ldr	r2, [r3, #4]
    6b92:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b96:	005b      	lsls	r3, r3, #1
    6b98:	4413      	add	r3, r2
    6b9a:	881b      	ldrh	r3, [r3, #0]
    6b9c:	f003 031f 	and.w	r3, r3, #31
    6ba0:	2201      	movs	r2, #1
    6ba2:	fa02 f303 	lsl.w	r3, r2, r3
    6ba6:	43da      	mvns	r2, r3
    6ba8:	9b01      	ldr	r3, [sp, #4]
    6baa:	6858      	ldr	r0, [r3, #4]
    6bac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bb0:	005b      	lsls	r3, r3, #1
    6bb2:	4403      	add	r3, r0
    6bb4:	881b      	ldrh	r3, [r3, #0]
    6bb6:	095b      	lsrs	r3, r3, #5
    6bb8:	b29b      	uxth	r3, r3
    6bba:	4618      	mov	r0, r3
    6bbc:	4b44      	ldr	r3, [pc, #272]	; (6cd0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6bc2:	400a      	ands	r2, r1
    6bc4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6bc6:	f00e fb09 	bl	151dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6bca:	f00e fb2d 	bl	15228 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6bce:	9b01      	ldr	r3, [sp, #4]
    6bd0:	685a      	ldr	r2, [r3, #4]
    6bd2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bd6:	005b      	lsls	r3, r3, #1
    6bd8:	4413      	add	r3, r2
    6bda:	881b      	ldrh	r3, [r3, #0]
    6bdc:	095b      	lsrs	r3, r3, #5
    6bde:	b29b      	uxth	r3, r3
    6be0:	461a      	mov	r2, r3
    6be2:	4b3b      	ldr	r3, [pc, #236]	; (6cd0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6be8:	6999      	ldr	r1, [r3, #24]
    6bea:	9b01      	ldr	r3, [sp, #4]
    6bec:	685a      	ldr	r2, [r3, #4]
    6bee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bf2:	005b      	lsls	r3, r3, #1
    6bf4:	4413      	add	r3, r2
    6bf6:	881b      	ldrh	r3, [r3, #0]
    6bf8:	f003 031f 	and.w	r3, r3, #31
    6bfc:	2201      	movs	r2, #1
    6bfe:	fa02 f303 	lsl.w	r3, r2, r3
    6c02:	43da      	mvns	r2, r3
    6c04:	9b01      	ldr	r3, [sp, #4]
    6c06:	6858      	ldr	r0, [r3, #4]
    6c08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c0c:	005b      	lsls	r3, r3, #1
    6c0e:	4403      	add	r3, r0
    6c10:	881b      	ldrh	r3, [r3, #0]
    6c12:	095b      	lsrs	r3, r3, #5
    6c14:	b29b      	uxth	r3, r3
    6c16:	4618      	mov	r0, r3
    6c18:	4b2d      	ldr	r3, [pc, #180]	; (6cd0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c1e:	400a      	ands	r2, r1
    6c20:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6c22:	9b02      	ldr	r3, [sp, #8]
    6c24:	2b03      	cmp	r3, #3
    6c26:	d127      	bne.n	6c78 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6c28:	9b01      	ldr	r3, [sp, #4]
    6c2a:	685a      	ldr	r2, [r3, #4]
    6c2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c30:	005b      	lsls	r3, r3, #1
    6c32:	4413      	add	r3, r2
    6c34:	881b      	ldrh	r3, [r3, #0]
    6c36:	095b      	lsrs	r3, r3, #5
    6c38:	b29b      	uxth	r3, r3
    6c3a:	461a      	mov	r2, r3
    6c3c:	4b24      	ldr	r3, [pc, #144]	; (6cd0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c42:	6999      	ldr	r1, [r3, #24]
    6c44:	9b01      	ldr	r3, [sp, #4]
    6c46:	685a      	ldr	r2, [r3, #4]
    6c48:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c4c:	005b      	lsls	r3, r3, #1
    6c4e:	4413      	add	r3, r2
    6c50:	881b      	ldrh	r3, [r3, #0]
    6c52:	f003 031f 	and.w	r3, r3, #31
    6c56:	2201      	movs	r2, #1
    6c58:	409a      	lsls	r2, r3
    6c5a:	9b01      	ldr	r3, [sp, #4]
    6c5c:	6858      	ldr	r0, [r3, #4]
    6c5e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c62:	005b      	lsls	r3, r3, #1
    6c64:	4403      	add	r3, r0
    6c66:	881b      	ldrh	r3, [r3, #0]
    6c68:	095b      	lsrs	r3, r3, #5
    6c6a:	b29b      	uxth	r3, r3
    6c6c:	4618      	mov	r0, r3
    6c6e:	4b18      	ldr	r3, [pc, #96]	; (6cd0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c74:	430a      	orrs	r2, r1
    6c76:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6c78:	f00e fb02 	bl	15280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6c7c:	9b01      	ldr	r3, [sp, #4]
    6c7e:	685a      	ldr	r2, [r3, #4]
    6c80:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c84:	005b      	lsls	r3, r3, #1
    6c86:	4413      	add	r3, r2
    6c88:	881b      	ldrh	r3, [r3, #0]
    6c8a:	095b      	lsrs	r3, r3, #5
    6c8c:	b29b      	uxth	r3, r3
    6c8e:	461a      	mov	r2, r3
    6c90:	4b10      	ldr	r3, [pc, #64]	; (6cd4 <Port_Ipw_Init_UnusedPins+0x270>)
    6c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c96:	9a01      	ldr	r2, [sp, #4]
    6c98:	6851      	ldr	r1, [r2, #4]
    6c9a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6c9e:	0052      	lsls	r2, r2, #1
    6ca0:	440a      	add	r2, r1
    6ca2:	8812      	ldrh	r2, [r2, #0]
    6ca4:	f002 021f 	and.w	r2, r2, #31
    6ca8:	9903      	ldr	r1, [sp, #12]
    6caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6cae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cb2:	3301      	adds	r3, #1
    6cb4:	f8ad 3016 	strh.w	r3, [sp, #22]
    6cb8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6cbc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6cc0:	429a      	cmp	r2, r3
    6cc2:	f4ff aee7 	bcc.w	6a94 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6cc6:	bf00      	nop
    6cc8:	bf00      	nop
    6cca:	b007      	add	sp, #28
    6ccc:	f85d fb04 	ldr.w	pc, [sp], #4
    6cd0:	00018500 	.word	0x00018500
    6cd4:	000184ec 	.word	0x000184ec

00006cd8 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6cd8:	b500      	push	{lr}
    6cda:	b085      	sub	sp, #20
    6cdc:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6cde:	9b01      	ldr	r3, [sp, #4]
    6ce0:	7c1b      	ldrb	r3, [r3, #16]
    6ce2:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6ce6:	2300      	movs	r3, #0
    6ce8:	f8ad 300e 	strh.w	r3, [sp, #14]
    6cec:	e035      	b.n	6d5a <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6cee:	9b01      	ldr	r3, [sp, #4]
    6cf0:	695a      	ldr	r2, [r3, #20]
    6cf2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cf6:	00db      	lsls	r3, r3, #3
    6cf8:	4413      	add	r3, r2
    6cfa:	781b      	ldrb	r3, [r3, #0]
    6cfc:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6d00:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6d04:	4a29      	ldr	r2, [pc, #164]	; (6dac <Port_Ipw_Init+0xd4>)
    6d06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6d0a:	9b01      	ldr	r3, [sp, #4]
    6d0c:	695a      	ldr	r2, [r3, #20]
    6d0e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d12:	00db      	lsls	r3, r3, #3
    6d14:	4413      	add	r3, r2
    6d16:	4619      	mov	r1, r3
    6d18:	f7ff fe39 	bl	698e <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6d1c:	f00e fc1e 	bl	1555c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6d20:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6d24:	4a21      	ldr	r2, [pc, #132]	; (6dac <Port_Ipw_Init+0xd4>)
    6d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d2a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6d2e:	9b01      	ldr	r3, [sp, #4]
    6d30:	695a      	ldr	r2, [r3, #20]
    6d32:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d36:	00db      	lsls	r3, r3, #3
    6d38:	4413      	add	r3, r2
    6d3a:	685a      	ldr	r2, [r3, #4]
    6d3c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6d40:	481a      	ldr	r0, [pc, #104]	; (6dac <Port_Ipw_Init+0xd4>)
    6d42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6d46:	430a      	orrs	r2, r1
    6d48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6d4c:	f00e fc32 	bl	155b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6d50:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d54:	3301      	adds	r3, #1
    6d56:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d5a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d5e:	b29b      	uxth	r3, r3
    6d60:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d64:	429a      	cmp	r2, r3
    6d66:	d3c2      	bcc.n	6cee <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6d68:	9b01      	ldr	r3, [sp, #4]
    6d6a:	6a1b      	ldr	r3, [r3, #32]
    6d6c:	4619      	mov	r1, r3
    6d6e:	2014      	movs	r0, #20
    6d70:	f7ff fd98 	bl	68a4 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6d74:	9801      	ldr	r0, [sp, #4]
    6d76:	f7ff fe75 	bl	6a64 <Port_Ipw_Init_UnusedPins>
     (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
    )
    /* Port_Ipw_au16GpioDirChangeability is only used by Port_Ci_Port_Ip_SetPinDirection, Port_Ci_Port_Ip_Set2PinsDirection
       and Port_Ci_Port_Ip_SetPinMode functions */
    /* Initialize the Array with Change Direction Flags for GPIO */
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6d7a:	2300      	movs	r3, #0
    6d7c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d80:	e00a      	b.n	6d98 <Port_Ipw_Init+0xc0>
    {
        Port_Ipw_au16GpioDirChangeability[u16PinIndex] = (uint16)0UL;
    6d82:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d86:	4a0a      	ldr	r2, [pc, #40]	; (6db0 <Port_Ipw_Init+0xd8>)
    6d88:	2100      	movs	r1, #0
    6d8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6d8e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d92:	3301      	adds	r3, #1
    6d94:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d98:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d9c:	2b09      	cmp	r3, #9
    6d9e:	d9f0      	bls.n	6d82 <Port_Ipw_Init+0xaa>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6da0:	bf00      	nop
    6da2:	bf00      	nop
    6da4:	b005      	add	sp, #20
    6da6:	f85d fb04 	ldr.w	pc, [sp], #4
    6daa:	bf00      	nop
    6dac:	000184ec 	.word	0x000184ec
    6db0:	1fff8cec 	.word	0x1fff8cec

00006db4 <Port_Ipw_SetPinDirection>:
(
    Port_PinType            PinIndex,
    Port_PinDirectionType   eDirection,
    const Port_ConfigType * pConfigPtr
)
{
    6db4:	b500      	push	{lr}
    6db6:	b087      	sub	sp, #28
    6db8:	9003      	str	r0, [sp, #12]
    6dba:	9102      	str	r1, [sp, #8]
    6dbc:	9201      	str	r2, [sp, #4]
    /* Point to the Port Pin PCR register address */
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    6dbe:	9b01      	ldr	r3, [sp, #4]
    6dc0:	68d9      	ldr	r1, [r3, #12]
    6dc2:	9a03      	ldr	r2, [sp, #12]
    6dc4:	4613      	mov	r3, r2
    6dc6:	009b      	lsls	r3, r3, #2
    6dc8:	4413      	add	r3, r2
    6dca:	009b      	lsls	r3, r3, #2
    6dcc:	440b      	add	r3, r1
    6dce:	881b      	ldrh	r3, [r3, #0]
    6dd0:	f8ad 3014 	strh.w	r3, [sp, #20]
    /* Return value */
    Std_ReturnType PinDirError             = (Std_ReturnType)E_OK;
    6dd4:	2300      	movs	r3, #0
    6dd6:	f88d 3017 	strb.w	r3, [sp, #23]

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    6dda:	2300      	movs	r3, #0
    6ddc:	f88d 3013 	strb.w	r3, [sp, #19]

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    6de0:	9b01      	ldr	r3, [sp, #4]
    6de2:	881b      	ldrh	r3, [r3, #0]
    6de4:	461a      	mov	r2, r3
    6de6:	9b03      	ldr	r3, [sp, #12]
    6de8:	4293      	cmp	r3, r2
    6dea:	d306      	bcc.n	6dfa <Port_Ipw_SetPinDirection+0x46>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_PIN);
    6dec:	230a      	movs	r3, #10
    6dee:	2201      	movs	r2, #1
    6df0:	2100      	movs	r1, #0
    6df2:	207c      	movs	r0, #124	; 0x7c
    6df4:	f00f ff36 	bl	16c64 <Det_ReportError>
    6df8:	e0c9      	b.n	6f8e <Port_Ipw_SetPinDirection+0x1da>
    }
    /* Check port pin validity */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    6dfa:	9b01      	ldr	r3, [sp, #4]
    6dfc:	699a      	ldr	r2, [r3, #24]
    6dfe:	9b03      	ldr	r3, [sp, #12]
    6e00:	009b      	lsls	r3, r3, #2
    6e02:	4413      	add	r3, r2
    6e04:	681a      	ldr	r2, [r3, #0]
    6e06:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6e0a:	2101      	movs	r1, #1
    6e0c:	fa01 f303 	lsl.w	r3, r1, r3
    6e10:	401a      	ands	r2, r3
    6e12:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6e16:	fa22 f303 	lsr.w	r3, r2, r3
    6e1a:	2b01      	cmp	r3, #1
    6e1c:	d006      	beq.n	6e2c <Port_Ipw_SetPinDirection+0x78>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    6e1e:	23f0      	movs	r3, #240	; 0xf0
    6e20:	2201      	movs	r2, #1
    6e22:	2100      	movs	r1, #0
    6e24:	207c      	movs	r0, #124	; 0x7c
    6e26:	f00f ff1d 	bl	16c64 <Det_ReportError>
    6e2a:	e0b0      	b.n	6f8e <Port_Ipw_SetPinDirection+0x1da>
    }
    else
    {
        /* Bit Offset and Table value for change direction flag word */
        uint8 u8PinDescBitOffset       = (uint8)(Pin & PORT_CI_BIT_OFFSET_MASK_U8);
    6e2c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6e30:	b2db      	uxtb	r3, r3
    6e32:	f003 030f 	and.w	r3, r3, #15
    6e36:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Number of block 16 */
        uint16 u16PinChangeDirFlagWord  = Port_Ipw_au16GpioDirChangeability[(uint8)(Pin >> 4)];
    6e3a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6e3e:	091b      	lsrs	r3, r3, #4
    6e40:	b29b      	uxth	r3, r3
    6e42:	b2db      	uxtb	r3, r3
    6e44:	461a      	mov	r2, r3
    6e46:	4b55      	ldr	r3, [pc, #340]	; (6f9c <Port_Ipw_SetPinDirection+0x1e8>)
    6e48:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6e4c:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* Check the Direction changeability option */
        if ((TRUE == pConfigPtr->pUsedPadConfig[PinIndex].bDC) || ((uint16)0 != (u16PinChangeDirFlagWord & (uint16)(1UL << u8PinDescBitOffset))))
    6e50:	9b01      	ldr	r3, [sp, #4]
    6e52:	68d9      	ldr	r1, [r3, #12]
    6e54:	9a03      	ldr	r2, [sp, #12]
    6e56:	4613      	mov	r3, r2
    6e58:	009b      	lsls	r3, r3, #2
    6e5a:	4413      	add	r3, r2
    6e5c:	009b      	lsls	r3, r3, #2
    6e5e:	440b      	add	r3, r1
    6e60:	7c5b      	ldrb	r3, [r3, #17]
    6e62:	2b00      	cmp	r3, #0
    6e64:	d10c      	bne.n	6e80 <Port_Ipw_SetPinDirection+0xcc>
    6e66:	f89d 3012 	ldrb.w	r3, [sp, #18]
    6e6a:	2201      	movs	r2, #1
    6e6c:	fa02 f303 	lsl.w	r3, r2, r3
    6e70:	b29a      	uxth	r2, r3
    6e72:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    6e76:	4013      	ands	r3, r2
    6e78:	b29b      	uxth	r3, r3
    6e7a:	2b00      	cmp	r3, #0
    6e7c:	f000 8082 	beq.w	6f84 <Port_Ipw_SetPinDirection+0x1d0>
        {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
            /* Configures Port Pin as Output */
            if (PORT_PIN_OUT == eDirection)
    6e80:	9b02      	ldr	r3, [sp, #8]
    6e82:	2b02      	cmp	r3, #2
    6e84:	d11d      	bne.n	6ec2 <Port_Ipw_SetPinDirection+0x10e>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6e86:	f00e fbbb 	bl	15600 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR |= (uint32)(1UL << GPIO_CHANNEL_U32(Pin));
    6e8a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6e8e:	095b      	lsrs	r3, r3, #5
    6e90:	b29b      	uxth	r3, r3
    6e92:	461a      	mov	r2, r3
    6e94:	4b42      	ldr	r3, [pc, #264]	; (6fa0 <Port_Ipw_SetPinDirection+0x1ec>)
    6e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e9a:	6959      	ldr	r1, [r3, #20]
    6e9c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ea0:	f003 031f 	and.w	r3, r3, #31
    6ea4:	2201      	movs	r2, #1
    6ea6:	409a      	lsls	r2, r3
    6ea8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6eac:	095b      	lsrs	r3, r3, #5
    6eae:	b29b      	uxth	r3, r3
    6eb0:	4618      	mov	r0, r3
    6eb2:	4b3b      	ldr	r3, [pc, #236]	; (6fa0 <Port_Ipw_SetPinDirection+0x1ec>)
    6eb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6eb8:	430a      	orrs	r2, r1
    6eba:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6ebc:	f00e fbcc 	bl	15658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>
            if (PORT_PIN_OUT == eDirection)
    6ec0:	e064      	b.n	6f8c <Port_Ipw_SetPinDirection+0x1d8>
            }
            /* Configures Port Pin as Input or High-Z*/
            else if ((PORT_PIN_IN == eDirection) || (PORT_PIN_HIGH_Z == eDirection))
    6ec2:	9b02      	ldr	r3, [sp, #8]
    6ec4:	2b01      	cmp	r3, #1
    6ec6:	d002      	beq.n	6ece <Port_Ipw_SetPinDirection+0x11a>
    6ec8:	9b02      	ldr	r3, [sp, #8]
    6eca:	2b03      	cmp	r3, #3
    6ecc:	d15e      	bne.n	6f8c <Port_Ipw_SetPinDirection+0x1d8>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6ece:	f00e fb97 	bl	15600 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6ed2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ed6:	095b      	lsrs	r3, r3, #5
    6ed8:	b29b      	uxth	r3, r3
    6eda:	461a      	mov	r2, r3
    6edc:	4b30      	ldr	r3, [pc, #192]	; (6fa0 <Port_Ipw_SetPinDirection+0x1ec>)
    6ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ee2:	6959      	ldr	r1, [r3, #20]
    6ee4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ee8:	f003 031f 	and.w	r3, r3, #31
    6eec:	2201      	movs	r2, #1
    6eee:	fa02 f303 	lsl.w	r3, r2, r3
    6ef2:	43da      	mvns	r2, r3
    6ef4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ef8:	095b      	lsrs	r3, r3, #5
    6efa:	b29b      	uxth	r3, r3
    6efc:	4618      	mov	r0, r3
    6efe:	4b28      	ldr	r3, [pc, #160]	; (6fa0 <Port_Ipw_SetPinDirection+0x1ec>)
    6f00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f04:	400a      	ands	r2, r1
    6f06:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6f08:	f00e fba6 	bl	15658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17();
    6f0c:	f00e fbca 	bl	156a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6f10:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f14:	095b      	lsrs	r3, r3, #5
    6f16:	b29b      	uxth	r3, r3
    6f18:	461a      	mov	r2, r3
    6f1a:	4b21      	ldr	r3, [pc, #132]	; (6fa0 <Port_Ipw_SetPinDirection+0x1ec>)
    6f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f20:	6999      	ldr	r1, [r3, #24]
    6f22:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f26:	f003 031f 	and.w	r3, r3, #31
    6f2a:	2201      	movs	r2, #1
    6f2c:	fa02 f303 	lsl.w	r3, r2, r3
    6f30:	43da      	mvns	r2, r3
    6f32:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f36:	095b      	lsrs	r3, r3, #5
    6f38:	b29b      	uxth	r3, r3
    6f3a:	4618      	mov	r0, r3
    6f3c:	4b18      	ldr	r3, [pc, #96]	; (6fa0 <Port_Ipw_SetPinDirection+0x1ec>)
    6f3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f42:	400a      	ands	r2, r1
    6f44:	619a      	str	r2, [r3, #24]

                /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                if (PORT_PIN_HIGH_Z == eDirection)
    6f46:	9b02      	ldr	r3, [sp, #8]
    6f48:	2b03      	cmp	r3, #3
    6f4a:	d118      	bne.n	6f7e <Port_Ipw_SetPinDirection+0x1ca>
                {
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR |= ((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6f4c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f50:	095b      	lsrs	r3, r3, #5
    6f52:	b29b      	uxth	r3, r3
    6f54:	461a      	mov	r2, r3
    6f56:	4b12      	ldr	r3, [pc, #72]	; (6fa0 <Port_Ipw_SetPinDirection+0x1ec>)
    6f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f5c:	6999      	ldr	r1, [r3, #24]
    6f5e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f62:	f003 031f 	and.w	r3, r3, #31
    6f66:	2201      	movs	r2, #1
    6f68:	409a      	lsls	r2, r3
    6f6a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f6e:	095b      	lsrs	r3, r3, #5
    6f70:	b29b      	uxth	r3, r3
    6f72:	4618      	mov	r0, r3
    6f74:	4b0a      	ldr	r3, [pc, #40]	; (6fa0 <Port_Ipw_SetPinDirection+0x1ec>)
    6f76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f7a:	430a      	orrs	r2, r1
    6f7c:	619a      	str	r2, [r3, #24]
                }
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17();
    6f7e:	f00e fbbd 	bl	156fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>
            if (PORT_PIN_OUT == eDirection)
    6f82:	e003      	b.n	6f8c <Port_Ipw_SetPinDirection+0x1d8>
#if (STD_ON == PORT_DEV_ERROR_DETECT)
        }
        /* Direction changeability is NOT supported */
        else
        {
            PinDirError = (Std_ReturnType)E_NOT_OK;
    6f84:	2301      	movs	r3, #1
    6f86:	f88d 3017 	strb.w	r3, [sp, #23]
    6f8a:	e000      	b.n	6f8e <Port_Ipw_SetPinDirection+0x1da>
            if (PORT_PIN_OUT == eDirection)
    6f8c:	bf00      	nop
        }
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinDirError;
    6f8e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6f92:	4618      	mov	r0, r3
    6f94:	b007      	add	sp, #28
    6f96:	f85d fb04 	ldr.w	pc, [sp], #4
    6f9a:	bf00      	nop
    6f9c:	1fff8cec 	.word	0x1fff8cec
    6fa0:	00018500 	.word	0x00018500

00006fa4 <Port_Ipw_SetPinMode>:
(
    Port_PinType PinIndex,
    Port_PinModeType PinMode,
    const Port_ConfigType * pConfigPtr
)
{
    6fa4:	b500      	push	{lr}
    6fa6:	b08b      	sub	sp, #44	; 0x2c
    6fa8:	9003      	str	r0, [sp, #12]
    6faa:	460b      	mov	r3, r1
    6fac:	9201      	str	r2, [sp, #4]
    6fae:	f88d 300b 	strb.w	r3, [sp, #11]
    Std_ReturnType PinModeError             = (Std_ReturnType)0UL;
    6fb2:	2300      	movs	r3, #0
    6fb4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint16 PinPad                           = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    6fb8:	9b01      	ldr	r3, [sp, #4]
    6fba:	68d9      	ldr	r1, [r3, #12]
    6fbc:	9a03      	ldr	r2, [sp, #12]
    6fbe:	4613      	mov	r3, r2
    6fc0:	009b      	lsls	r3, r3, #2
    6fc2:	4413      	add	r3, r2
    6fc4:	009b      	lsls	r3, r3, #2
    6fc6:	440b      	add	r3, r1
    6fc8:	881b      	ldrh	r3, [r3, #0]
    6fca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Port_PinModeType PinCfgRegValue         = (Port_PinModeType)PinMode;
    6fce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6fd2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint16 u16PinDescBitOffset;
    /* Variable used to clear and updated PCR register */
    uint32 u32LocalPCR;
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    6fd6:	2300      	movs	r3, #0
    6fd8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    6fdc:	9b01      	ldr	r3, [sp, #4]
    6fde:	881b      	ldrh	r3, [r3, #0]
    6fe0:	461a      	mov	r2, r3
    6fe2:	9b03      	ldr	r3, [sp, #12]
    6fe4:	4293      	cmp	r3, r2
    6fe6:	d306      	bcc.n	6ff6 <Port_Ipw_SetPinMode+0x52>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_PIN);
    6fe8:	230a      	movs	r3, #10
    6fea:	2204      	movs	r2, #4
    6fec:	2100      	movs	r1, #0
    6fee:	207c      	movs	r0, #124	; 0x7c
    6ff0:	f00f fe38 	bl	16c64 <Det_ReportError>
    6ff4:	e0b3      	b.n	715e <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check if this function was called with wrong core */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    6ff6:	9b01      	ldr	r3, [sp, #4]
    6ff8:	699a      	ldr	r2, [r3, #24]
    6ffa:	9b03      	ldr	r3, [sp, #12]
    6ffc:	009b      	lsls	r3, r3, #2
    6ffe:	4413      	add	r3, r2
    7000:	681a      	ldr	r2, [r3, #0]
    7002:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7006:	2101      	movs	r1, #1
    7008:	fa01 f303 	lsl.w	r3, r1, r3
    700c:	401a      	ands	r2, r3
    700e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7012:	fa22 f303 	lsr.w	r3, r2, r3
    7016:	2b01      	cmp	r3, #1
    7018:	d006      	beq.n	7028 <Port_Ipw_SetPinMode+0x84>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_CONFIG);
    701a:	23f0      	movs	r3, #240	; 0xf0
    701c:	2204      	movs	r2, #4
    701e:	2100      	movs	r1, #0
    7020:	207c      	movs	r0, #124	; 0x7c
    7022:	f00f fe1f 	bl	16c64 <Det_ReportError>
    7026:	e09a      	b.n	715e <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check port pin mode Unchangeable */
    else if (FALSE ==  pConfigPtr->pUsedPadConfig[PinIndex].bMC)
    7028:	9b01      	ldr	r3, [sp, #4]
    702a:	68d9      	ldr	r1, [r3, #12]
    702c:	9a03      	ldr	r2, [sp, #12]
    702e:	4613      	mov	r3, r2
    7030:	009b      	lsls	r3, r3, #2
    7032:	4413      	add	r3, r2
    7034:	009b      	lsls	r3, r3, #2
    7036:	440b      	add	r3, r1
    7038:	7c9b      	ldrb	r3, [r3, #18]
    703a:	f083 0301 	eor.w	r3, r3, #1
    703e:	b2db      	uxtb	r3, r3
    7040:	2b00      	cmp	r3, #0
    7042:	d006      	beq.n	7052 <Port_Ipw_SetPinMode+0xae>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_MODE_UNCHANGEABLE);
    7044:	230e      	movs	r3, #14
    7046:	2204      	movs	r2, #4
    7048:	2100      	movs	r1, #0
    704a:	207c      	movs	r0, #124	; 0x7c
    704c:	f00f fe0a 	bl	16c64 <Det_ReportError>
    7050:	e085      	b.n	715e <Port_Ipw_SetPinMode+0x1ba>
    }
    else
    {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

        if (PAD_MODE_OPTIONS_U8 <= PinMode)
    7052:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7056:	2b07      	cmp	r3, #7
    7058:	d903      	bls.n	7062 <Port_Ipw_SetPinMode+0xbe>
        {
            PinModeError = PORT_E_PARAM_INVALID_MODE;
    705a:	230d      	movs	r3, #13
    705c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    7060:	e07d      	b.n	715e <Port_Ipw_SetPinMode+0x1ba>
        }
        else
        {
            Port_PinDirectionType ePadDirection = PORT_PIN_DISABLED;
    7062:	2300      	movs	r3, #0
    7064:	9307      	str	r3, [sp, #28]

            /* Bit offset of Pin index inside the pin description matrix */
            u16PinDescBitOffset = PinPad & PORT_MODE_BIT_OFFSET_MASK_U8;
    7066:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    706a:	f003 030f 	and.w	r3, r3, #15
    706e:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Selected word inside the pin description matrix */
            u16PinDescWord = (uint16)Port_au16PinDescription[(uint8)PinMode][PinPad >> 4U];
    7072:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7076:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    707a:	091b      	lsrs	r3, r3, #4
    707c:	b29b      	uxth	r3, r3
    707e:	4618      	mov	r0, r3
    7080:	493a      	ldr	r1, [pc, #232]	; (716c <Port_Ipw_SetPinMode+0x1c8>)
    7082:	4613      	mov	r3, r2
    7084:	009b      	lsls	r3, r3, #2
    7086:	4413      	add	r3, r2
    7088:	005b      	lsls	r3, r3, #1
    708a:	4403      	add	r3, r0
    708c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7090:	f8ad 3018 	strh.w	r3, [sp, #24]

            /* Check if desired mode is valid for selected pin */
            if ((u16PinDescWord & ((uint16)1UL<<u16PinDescBitOffset)) != (uint16)0U)
    7094:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    7098:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    709c:	fa42 f303 	asr.w	r3, r2, r3
    70a0:	f003 0301 	and.w	r3, r3, #1
    70a4:	2b00      	cmp	r3, #0
    70a6:	d057      	beq.n	7158 <Port_Ipw_SetPinMode+0x1b4>
            {
                switch(PinMode)
    70a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    70ac:	2b01      	cmp	r3, #1
    70ae:	d11f      	bne.n	70f0 <Port_Ipw_SetPinMode+0x14c>
                {
                    case PORT_GPIO_MODE:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                        Port_Ipw_SetGpioDirChangeability(PinPad, TRUE);
    70b0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    70b4:	2101      	movs	r1, #1
    70b6:	4618      	mov	r0, r3
    70b8:	f000 f85c 	bl	7174 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        ePadDirection = pConfigPtr->pUsedPadConfig[PinIndex].ePadDir;
    70bc:	9b01      	ldr	r3, [sp, #4]
    70be:	68d9      	ldr	r1, [r3, #12]
    70c0:	9a03      	ldr	r2, [sp, #12]
    70c2:	4613      	mov	r3, r2
    70c4:	009b      	lsls	r3, r3, #2
    70c6:	4413      	add	r3, r2
    70c8:	009b      	lsls	r3, r3, #2
    70ca:	440b      	add	r3, r1
    70cc:	68db      	ldr	r3, [r3, #12]
    70ce:	9307      	str	r3, [sp, #28]
#if (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL)
                        if ((PORT_PIN_IN != ePadDirection) && (PORT_PIN_HIGH_Z != ePadDirection))
    70d0:	9b07      	ldr	r3, [sp, #28]
    70d2:	2b01      	cmp	r3, #1
    70d4:	d006      	beq.n	70e4 <Port_Ipw_SetPinMode+0x140>
    70d6:	9b07      	ldr	r3, [sp, #28]
    70d8:	2b03      	cmp	r3, #3
    70da:	d003      	beq.n	70e4 <Port_Ipw_SetPinMode+0x140>
                        {
                            Port_Ipw_SetGpioPadOutput(PinIndex, pConfigPtr);
    70dc:	9901      	ldr	r1, [sp, #4]
    70de:	9803      	ldr	r0, [sp, #12]
    70e0:	f000 f896 	bl	7210 <Port_Ipw_SetGpioPadOutput>
                        }
#endif /* (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL) */
                        (void)Port_Ipw_SetPinDirection(PinIndex, ePadDirection, pConfigPtr);
    70e4:	9a01      	ldr	r2, [sp, #4]
    70e6:	9907      	ldr	r1, [sp, #28]
    70e8:	9803      	ldr	r0, [sp, #12]
    70ea:	f7ff fe63 	bl	6db4 <Port_Ipw_SetPinDirection>
                        break;
    70ee:	e006      	b.n	70fe <Port_Ipw_SetPinMode+0x15a>

                    default:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                    /* All the ALT modes except GPIO*/
                        Port_Ipw_SetGpioDirChangeability(PinPad,FALSE);
    70f0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    70f4:	2100      	movs	r1, #0
    70f6:	4618      	mov	r0, r3
    70f8:	f000 f83c 	bl	7174 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        break;
    70fc:	bf00      	nop
                }
                /* Sets the port pin mode */
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27();
    70fe:	f00e fe05 	bl	15d0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>
                u32LocalPCR  = (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)];
    7102:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7106:	095b      	lsrs	r3, r3, #5
    7108:	b29b      	uxth	r3, r3
    710a:	461a      	mov	r2, r3
    710c:	4b18      	ldr	r3, [pc, #96]	; (7170 <Port_Ipw_SetPinMode+0x1cc>)
    710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7112:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7116:	f002 021f 	and.w	r2, r2, #31
    711a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    711e:	9305      	str	r3, [sp, #20]

                u32LocalPCR &= ~(PORT_CI_PCR_ALT_MODE_U32);
    7120:	9b05      	ldr	r3, [sp, #20]
    7122:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    7126:	9305      	str	r3, [sp, #20]
                u32LocalPCR |= ((uint32)PinCfgRegValue << PORT_CI_PCR_ALT_MODE_OFFSET_U32);
    7128:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    712c:	021b      	lsls	r3, r3, #8
    712e:	9a05      	ldr	r2, [sp, #20]
    7130:	4313      	orrs	r3, r2
    7132:	9305      	str	r3, [sp, #20]

                (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)] = u32LocalPCR;
    7134:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7138:	095b      	lsrs	r3, r3, #5
    713a:	b29b      	uxth	r3, r3
    713c:	461a      	mov	r2, r3
    713e:	4b0c      	ldr	r3, [pc, #48]	; (7170 <Port_Ipw_SetPinMode+0x1cc>)
    7140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7144:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7148:	f002 021f 	and.w	r2, r2, #31
    714c:	9905      	ldr	r1, [sp, #20]
    714e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27();
    7152:	f00e fe07 	bl	15d64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>
    7156:	e002      	b.n	715e <Port_Ipw_SetPinMode+0x1ba>
            }
            else
            {
                PinModeError = PORT_E_PARAM_INVALID_MODE;
    7158:	230d      	movs	r3, #13
    715a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinModeError;
    715e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    7162:	4618      	mov	r0, r3
    7164:	b00b      	add	sp, #44	; 0x2c
    7166:	f85d fb04 	ldr.w	pc, [sp], #4
    716a:	bf00      	nop
    716c:	0001918c 	.word	0x0001918c
    7170:	000184ec 	.word	0x000184ec

00007174 <Port_Ipw_SetGpioDirChangeability>:
void Port_Ipw_SetGpioDirChangeability
(
    uint16 PadID,
    boolean bStatus
)
{
    7174:	b500      	push	{lr}
    7176:	b085      	sub	sp, #20
    7178:	4603      	mov	r3, r0
    717a:	460a      	mov	r2, r1
    717c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7180:	4613      	mov	r3, r2
    7182:	f88d 3005 	strb.w	r3, [sp, #5]
    /* Pin description variables */
    uint8 u8PinBitOffset;
    uint16 u16PinDirFlagWord;

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18();
    7186:	f00e fadf 	bl	15748 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>
    /* Bit offset of Pin index inside the pin description matrix */
    u8PinBitOffset      = (uint8)((uint8)PadID & PORT_CI_BIT_OFFSET_MASK_U8);
    718a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    718e:	b2db      	uxtb	r3, r3
    7190:	f003 030f 	and.w	r3, r3, #15
    7194:	f88d 300d 	strb.w	r3, [sp, #13]
    u16PinDirFlagWord   = Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)];
    7198:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    719c:	b2db      	uxtb	r3, r3
    719e:	091b      	lsrs	r3, r3, #4
    71a0:	b2db      	uxtb	r3, r3
    71a2:	461a      	mov	r2, r3
    71a4:	4b19      	ldr	r3, [pc, #100]	; (720c <Port_Ipw_SetGpioDirChangeability+0x98>)
    71a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    71aa:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (TRUE == bStatus)
    71ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    71b2:	2b00      	cmp	r3, #0
    71b4:	d00b      	beq.n	71ce <Port_Ipw_SetGpioDirChangeability+0x5a>
    {
        /* Set the change direction flag */
        u16PinDirFlagWord |= (uint16)(1UL<<u8PinBitOffset);
    71b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    71ba:	2201      	movs	r2, #1
    71bc:	fa02 f303 	lsl.w	r3, r2, r3
    71c0:	b29a      	uxth	r2, r3
    71c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    71c6:	4313      	orrs	r3, r2
    71c8:	f8ad 300e 	strh.w	r3, [sp, #14]
    71cc:	e00c      	b.n	71e8 <Port_Ipw_SetGpioDirChangeability+0x74>
    }
    else
    {
        /* Reset the change direction flag */
        u16PinDirFlagWord &= (uint16)(~((uint16)(1UL<<u8PinBitOffset)));
    71ce:	f89d 300d 	ldrb.w	r3, [sp, #13]
    71d2:	2201      	movs	r2, #1
    71d4:	fa02 f303 	lsl.w	r3, r2, r3
    71d8:	b29b      	uxth	r3, r3
    71da:	43db      	mvns	r3, r3
    71dc:	b29a      	uxth	r2, r3
    71de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    71e2:	4013      	ands	r3, r2
    71e4:	f8ad 300e 	strh.w	r3, [sp, #14]
    }
    Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)] = u16PinDirFlagWord;
    71e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    71ec:	b2db      	uxtb	r3, r3
    71ee:	091b      	lsrs	r3, r3, #4
    71f0:	b2db      	uxtb	r3, r3
    71f2:	4619      	mov	r1, r3
    71f4:	4a05      	ldr	r2, [pc, #20]	; (720c <Port_Ipw_SetGpioDirChangeability+0x98>)
    71f6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    71fa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    /* Exit critical region */
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18();
    71fe:	f00e facf 	bl	157a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>
}
    7202:	bf00      	nop
    7204:	b005      	add	sp, #20
    7206:	f85d fb04 	ldr.w	pc, [sp], #4
    720a:	bf00      	nop
    720c:	1fff8cec 	.word	0x1fff8cec

00007210 <Port_Ipw_SetGpioPadOutput>:
void Port_Ipw_SetGpioPadOutput
(
    Port_PinType            PinIndex,
    const Port_ConfigType * pConfigPtr
)
{
    7210:	b084      	sub	sp, #16
    7212:	9001      	str	r0, [sp, #4]
    7214:	9100      	str	r1, [sp, #0]
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7216:	9b00      	ldr	r3, [sp, #0]
    7218:	68d9      	ldr	r1, [r3, #12]
    721a:	9a01      	ldr	r2, [sp, #4]
    721c:	4613      	mov	r3, r2
    721e:	009b      	lsls	r3, r3, #2
    7220:	4413      	add	r3, r2
    7222:	009b      	lsls	r3, r3, #2
    7224:	440b      	add	r3, r1
    7226:	881b      	ldrh	r3, [r3, #0]
    7228:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint8 u8LocalPDO = pConfigPtr->pUsedPadConfig[PinIndex].u8PDO;
    722c:	9b00      	ldr	r3, [sp, #0]
    722e:	68d9      	ldr	r1, [r3, #12]
    7230:	9a01      	ldr	r2, [sp, #4]
    7232:	4613      	mov	r3, r2
    7234:	009b      	lsls	r3, r3, #2
    7236:	4413      	add	r3, r2
    7238:	009b      	lsls	r3, r3, #2
    723a:	440b      	add	r3, r1
    723c:	7a1b      	ldrb	r3, [r3, #8]
    723e:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Set pin to High value */
    if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    7242:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7246:	2b01      	cmp	r3, #1
    7248:	d110      	bne.n	726c <Port_Ipw_SetGpioPadOutput+0x5c>
    {
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    724a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    724e:	f003 021f 	and.w	r2, r3, #31
    7252:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7256:	095b      	lsrs	r3, r3, #5
    7258:	b29b      	uxth	r3, r3
    725a:	4619      	mov	r1, r3
    725c:	4b0f      	ldr	r3, [pc, #60]	; (729c <Port_Ipw_SetGpioPadOutput+0x8c>)
    725e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7262:	2101      	movs	r1, #1
    7264:	fa01 f202 	lsl.w	r2, r1, r2
    7268:	605a      	str	r2, [r3, #4]
    }
    else
    {
        /* No action to be done */
    }
}
    726a:	e013      	b.n	7294 <Port_Ipw_SetGpioPadOutput+0x84>
    else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    726c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7270:	2b00      	cmp	r3, #0
    7272:	d10f      	bne.n	7294 <Port_Ipw_SetGpioPadOutput+0x84>
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7274:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7278:	f003 021f 	and.w	r2, r3, #31
    727c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7280:	095b      	lsrs	r3, r3, #5
    7282:	b29b      	uxth	r3, r3
    7284:	4619      	mov	r1, r3
    7286:	4b05      	ldr	r3, [pc, #20]	; (729c <Port_Ipw_SetGpioPadOutput+0x8c>)
    7288:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    728c:	2101      	movs	r1, #1
    728e:	fa01 f202 	lsl.w	r2, r1, r2
    7292:	609a      	str	r2, [r3, #8]
}
    7294:	bf00      	nop
    7296:	b004      	add	sp, #16
    7298:	4770      	bx	lr
    729a:	bf00      	nop
    729c:	00018500 	.word	0x00018500

000072a0 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    72a0:	b500      	push	{lr}
    72a2:	b085      	sub	sp, #20
    72a4:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    72a6:	9b01      	ldr	r3, [sp, #4]
    72a8:	881b      	ldrh	r3, [r3, #0]
    72aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    72ae:	2300      	movs	r3, #0
    72b0:	f8ad 300e 	strh.w	r3, [sp, #14]
    72b4:	e0d2      	b.n	745c <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    72b6:	9b01      	ldr	r3, [sp, #4]
    72b8:	68d9      	ldr	r1, [r3, #12]
    72ba:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72be:	4613      	mov	r3, r2
    72c0:	009b      	lsls	r3, r3, #2
    72c2:	4413      	add	r3, r2
    72c4:	009b      	lsls	r3, r3, #2
    72c6:	440b      	add	r3, r1
    72c8:	7c5b      	ldrb	r3, [r3, #17]
    72ca:	f083 0301 	eor.w	r3, r3, #1
    72ce:	b2db      	uxtb	r3, r3
    72d0:	2b00      	cmp	r3, #0
    72d2:	f000 80be 	beq.w	7452 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    72d6:	9b01      	ldr	r3, [sp, #4]
    72d8:	68d9      	ldr	r1, [r3, #12]
    72da:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72de:	4613      	mov	r3, r2
    72e0:	009b      	lsls	r3, r3, #2
    72e2:	4413      	add	r3, r2
    72e4:	009b      	lsls	r3, r3, #2
    72e6:	440b      	add	r3, r1
    72e8:	7c1b      	ldrb	r3, [r3, #16]
    72ea:	2b00      	cmp	r3, #0
    72ec:	f000 80b1 	beq.w	7452 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    72f0:	9b01      	ldr	r3, [sp, #4]
    72f2:	68d9      	ldr	r1, [r3, #12]
    72f4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72f8:	4613      	mov	r3, r2
    72fa:	009b      	lsls	r3, r3, #2
    72fc:	4413      	add	r3, r2
    72fe:	009b      	lsls	r3, r3, #2
    7300:	440b      	add	r3, r1
    7302:	881b      	ldrh	r3, [r3, #0]
    7304:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7308:	9b01      	ldr	r3, [sp, #4]
    730a:	68d9      	ldr	r1, [r3, #12]
    730c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7310:	4613      	mov	r3, r2
    7312:	009b      	lsls	r3, r3, #2
    7314:	4413      	add	r3, r2
    7316:	009b      	lsls	r3, r3, #2
    7318:	440b      	add	r3, r1
    731a:	68db      	ldr	r3, [r3, #12]
    731c:	2b02      	cmp	r3, #2
    731e:	d11d      	bne.n	735c <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7320:	f00e fa64 	bl	157ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7324:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7328:	095b      	lsrs	r3, r3, #5
    732a:	b29b      	uxth	r3, r3
    732c:	461a      	mov	r2, r3
    732e:	4b51      	ldr	r3, [pc, #324]	; (7474 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7334:	6959      	ldr	r1, [r3, #20]
    7336:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    733a:	f003 031f 	and.w	r3, r3, #31
    733e:	2201      	movs	r2, #1
    7340:	409a      	lsls	r2, r3
    7342:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7346:	095b      	lsrs	r3, r3, #5
    7348:	b29b      	uxth	r3, r3
    734a:	4618      	mov	r0, r3
    734c:	4b49      	ldr	r3, [pc, #292]	; (7474 <Port_Ipw_RefreshPortDirection+0x1d4>)
    734e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7352:	430a      	orrs	r2, r1
    7354:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7356:	f00e fa75 	bl	15844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    735a:	e07a      	b.n	7452 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    735c:	9b01      	ldr	r3, [sp, #4]
    735e:	68d9      	ldr	r1, [r3, #12]
    7360:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7364:	4613      	mov	r3, r2
    7366:	009b      	lsls	r3, r3, #2
    7368:	4413      	add	r3, r2
    736a:	009b      	lsls	r3, r3, #2
    736c:	440b      	add	r3, r1
    736e:	68db      	ldr	r3, [r3, #12]
    7370:	2b01      	cmp	r3, #1
    7372:	d00b      	beq.n	738c <Port_Ipw_RefreshPortDirection+0xec>
    7374:	9b01      	ldr	r3, [sp, #4]
    7376:	68d9      	ldr	r1, [r3, #12]
    7378:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    737c:	4613      	mov	r3, r2
    737e:	009b      	lsls	r3, r3, #2
    7380:	4413      	add	r3, r2
    7382:	009b      	lsls	r3, r3, #2
    7384:	440b      	add	r3, r1
    7386:	68db      	ldr	r3, [r3, #12]
    7388:	2b03      	cmp	r3, #3
    738a:	d162      	bne.n	7452 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    738c:	f00e fa2e 	bl	157ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7390:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7394:	095b      	lsrs	r3, r3, #5
    7396:	b29b      	uxth	r3, r3
    7398:	461a      	mov	r2, r3
    739a:	4b36      	ldr	r3, [pc, #216]	; (7474 <Port_Ipw_RefreshPortDirection+0x1d4>)
    739c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    73a0:	6959      	ldr	r1, [r3, #20]
    73a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73a6:	f003 031f 	and.w	r3, r3, #31
    73aa:	2201      	movs	r2, #1
    73ac:	fa02 f303 	lsl.w	r3, r2, r3
    73b0:	43da      	mvns	r2, r3
    73b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73b6:	095b      	lsrs	r3, r3, #5
    73b8:	b29b      	uxth	r3, r3
    73ba:	4618      	mov	r0, r3
    73bc:	4b2d      	ldr	r3, [pc, #180]	; (7474 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    73c2:	400a      	ands	r2, r1
    73c4:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    73c6:	f00e fa3d 	bl	15844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    73ca:	f00e fa61 	bl	15890 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    73ce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73d2:	095b      	lsrs	r3, r3, #5
    73d4:	b29b      	uxth	r3, r3
    73d6:	461a      	mov	r2, r3
    73d8:	4b26      	ldr	r3, [pc, #152]	; (7474 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    73de:	6999      	ldr	r1, [r3, #24]
    73e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73e4:	f003 031f 	and.w	r3, r3, #31
    73e8:	2201      	movs	r2, #1
    73ea:	fa02 f303 	lsl.w	r3, r2, r3
    73ee:	43da      	mvns	r2, r3
    73f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73f4:	095b      	lsrs	r3, r3, #5
    73f6:	b29b      	uxth	r3, r3
    73f8:	4618      	mov	r0, r3
    73fa:	4b1e      	ldr	r3, [pc, #120]	; (7474 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7400:	400a      	ands	r2, r1
    7402:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7404:	9b01      	ldr	r3, [sp, #4]
    7406:	68d9      	ldr	r1, [r3, #12]
    7408:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    740c:	4613      	mov	r3, r2
    740e:	009b      	lsls	r3, r3, #2
    7410:	4413      	add	r3, r2
    7412:	009b      	lsls	r3, r3, #2
    7414:	440b      	add	r3, r1
    7416:	68db      	ldr	r3, [r3, #12]
    7418:	2b03      	cmp	r3, #3
    741a:	d118      	bne.n	744e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    741c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7420:	095b      	lsrs	r3, r3, #5
    7422:	b29b      	uxth	r3, r3
    7424:	461a      	mov	r2, r3
    7426:	4b13      	ldr	r3, [pc, #76]	; (7474 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    742c:	6999      	ldr	r1, [r3, #24]
    742e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7432:	f003 031f 	and.w	r3, r3, #31
    7436:	2201      	movs	r2, #1
    7438:	409a      	lsls	r2, r3
    743a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    743e:	095b      	lsrs	r3, r3, #5
    7440:	b29b      	uxth	r3, r3
    7442:	4618      	mov	r0, r3
    7444:	4b0b      	ldr	r3, [pc, #44]	; (7474 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7446:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    744a:	430a      	orrs	r2, r1
    744c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    744e:	f00e fa4b 	bl	158e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7452:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7456:	3301      	adds	r3, #1
    7458:	f8ad 300e 	strh.w	r3, [sp, #14]
    745c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7460:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7464:	429a      	cmp	r2, r3
    7466:	f4ff af26 	bcc.w	72b6 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    746a:	bf00      	nop
    746c:	bf00      	nop
    746e:	b005      	add	sp, #20
    7470:	f85d fb04 	ldr.w	pc, [sp], #4
    7474:	00018500 	.word	0x00018500

00007478 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7478:	b086      	sub	sp, #24
    747a:	9003      	str	r0, [sp, #12]
    747c:	9102      	str	r1, [sp, #8]
    747e:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    7480:	9b03      	ldr	r3, [sp, #12]
    7482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7486:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    7488:	9b02      	ldr	r3, [sp, #8]
    748a:	43db      	mvns	r3, r3
    748c:	9a05      	ldr	r2, [sp, #20]
    748e:	4013      	ands	r3, r2
    7490:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    7492:	9a05      	ldr	r2, [sp, #20]
    7494:	9b01      	ldr	r3, [sp, #4]
    7496:	4313      	orrs	r3, r2
    7498:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    749a:	9b03      	ldr	r3, [sp, #12]
    749c:	9a05      	ldr	r2, [sp, #20]
    749e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    74a2:	bf00      	nop
    74a4:	b006      	add	sp, #24
    74a6:	4770      	bx	lr

000074a8 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    74a8:	b086      	sub	sp, #24
    74aa:	9003      	str	r0, [sp, #12]
    74ac:	9102      	str	r1, [sp, #8]
    74ae:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    74b0:	9b03      	ldr	r3, [sp, #12]
    74b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    74b4:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    74b6:	9b05      	ldr	r3, [sp, #20]
    74b8:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    74bc:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    74be:	9b02      	ldr	r3, [sp, #8]
    74c0:	015b      	lsls	r3, r3, #5
    74c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
    74c6:	9a05      	ldr	r2, [sp, #20]
    74c8:	4313      	orrs	r3, r2
    74ca:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    74cc:	9b01      	ldr	r3, [sp, #4]
    74ce:	f003 0303 	and.w	r3, r3, #3
    74d2:	9a05      	ldr	r2, [sp, #20]
    74d4:	4313      	orrs	r3, r2
    74d6:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    74d8:	9b03      	ldr	r3, [sp, #12]
    74da:	9a05      	ldr	r2, [sp, #20]
    74dc:	641a      	str	r2, [r3, #64]	; 0x40
}
    74de:	bf00      	nop
    74e0:	b006      	add	sp, #24
    74e2:	4770      	bx	lr

000074e4 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    74e4:	b084      	sub	sp, #16
    74e6:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    74e8:	2300      	movs	r3, #0
    74ea:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    74ec:	9b01      	ldr	r3, [sp, #4]
    74ee:	095b      	lsrs	r3, r3, #5
    74f0:	f003 0303 	and.w	r3, r3, #3
    74f4:	2b03      	cmp	r3, #3
    74f6:	d00c      	beq.n	7512 <Adc_HwAcc_GetClockDivide+0x2e>
    74f8:	2b03      	cmp	r3, #3
    74fa:	d80d      	bhi.n	7518 <Adc_HwAcc_GetClockDivide+0x34>
    74fc:	2b01      	cmp	r3, #1
    74fe:	d002      	beq.n	7506 <Adc_HwAcc_GetClockDivide+0x22>
    7500:	2b02      	cmp	r3, #2
    7502:	d003      	beq.n	750c <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    7504:	e008      	b.n	7518 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    7506:	2301      	movs	r3, #1
    7508:	9303      	str	r3, [sp, #12]
            break;
    750a:	e006      	b.n	751a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    750c:	2302      	movs	r3, #2
    750e:	9303      	str	r3, [sp, #12]
            break;
    7510:	e003      	b.n	751a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    7512:	2303      	movs	r3, #3
    7514:	9303      	str	r3, [sp, #12]
            break;
    7516:	e000      	b.n	751a <Adc_HwAcc_GetClockDivide+0x36>
            break;
    7518:	bf00      	nop
    }
    return ReturnValue;
    751a:	9b03      	ldr	r3, [sp, #12]
}
    751c:	4618      	mov	r0, r3
    751e:	b004      	add	sp, #16
    7520:	4770      	bx	lr

00007522 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    7522:	b084      	sub	sp, #16
    7524:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    7526:	2300      	movs	r3, #0
    7528:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    752a:	9b01      	ldr	r3, [sp, #4]
    752c:	f003 0303 	and.w	r3, r3, #3
    7530:	2b03      	cmp	r3, #3
    7532:	d00c      	beq.n	754e <Adc_HwAcc_GetInputClock+0x2c>
    7534:	2b03      	cmp	r3, #3
    7536:	d80d      	bhi.n	7554 <Adc_HwAcc_GetInputClock+0x32>
    7538:	2b01      	cmp	r3, #1
    753a:	d002      	beq.n	7542 <Adc_HwAcc_GetInputClock+0x20>
    753c:	2b02      	cmp	r3, #2
    753e:	d003      	beq.n	7548 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    7540:	e008      	b.n	7554 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    7542:	2301      	movs	r3, #1
    7544:	9303      	str	r3, [sp, #12]
            break;
    7546:	e006      	b.n	7556 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    7548:	2302      	movs	r3, #2
    754a:	9303      	str	r3, [sp, #12]
            break;
    754c:	e003      	b.n	7556 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    754e:	2303      	movs	r3, #3
    7550:	9303      	str	r3, [sp, #12]
            break;
    7552:	e000      	b.n	7556 <Adc_HwAcc_GetInputClock+0x34>
            break;
    7554:	bf00      	nop
    }
    return ReturnValue;
    7556:	9b03      	ldr	r3, [sp, #12]
}
    7558:	4618      	mov	r0, r3
    755a:	b004      	add	sp, #16
    755c:	4770      	bx	lr

0000755e <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    755e:	b084      	sub	sp, #16
    7560:	9001      	str	r0, [sp, #4]
    7562:	460b      	mov	r3, r1
    7564:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    7568:	f89d 3003 	ldrb.w	r3, [sp, #3]
    756c:	2b00      	cmp	r3, #0
    756e:	d002      	beq.n	7576 <Adc_HwAcc_SetSampleTime+0x18>
    7570:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7574:	e000      	b.n	7578 <Adc_HwAcc_SetSampleTime+0x1a>
    7576:	2301      	movs	r3, #1
    7578:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    757c:	9b01      	ldr	r3, [sp, #4]
    757e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7580:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    7582:	9b02      	ldr	r3, [sp, #8]
    7584:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7588:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    758a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    758e:	9a02      	ldr	r2, [sp, #8]
    7590:	4313      	orrs	r3, r2
    7592:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    7594:	9b01      	ldr	r3, [sp, #4]
    7596:	9a02      	ldr	r2, [sp, #8]
    7598:	645a      	str	r2, [r3, #68]	; 0x44
}
    759a:	bf00      	nop
    759c:	b004      	add	sp, #16
    759e:	4770      	bx	lr

000075a0 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    75a0:	b086      	sub	sp, #24
    75a2:	9003      	str	r0, [sp, #12]
    75a4:	460b      	mov	r3, r1
    75a6:	9201      	str	r2, [sp, #4]
    75a8:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    75ac:	9b03      	ldr	r3, [sp, #12]
    75ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    75b2:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    75b4:	9b05      	ldr	r3, [sp, #20]
    75b6:	f023 0307 	bic.w	r3, r3, #7
    75ba:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    75bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    75c0:	2b00      	cmp	r3, #0
    75c2:	d001      	beq.n	75c8 <Adc_HwAcc_SetAveraging+0x28>
    75c4:	2304      	movs	r3, #4
    75c6:	e000      	b.n	75ca <Adc_HwAcc_SetAveraging+0x2a>
    75c8:	2300      	movs	r3, #0
    75ca:	9a05      	ldr	r2, [sp, #20]
    75cc:	4313      	orrs	r3, r2
    75ce:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    75d0:	9b01      	ldr	r3, [sp, #4]
    75d2:	f003 0303 	and.w	r3, r3, #3
    75d6:	9a05      	ldr	r2, [sp, #20]
    75d8:	4313      	orrs	r3, r2
    75da:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    75dc:	9b03      	ldr	r3, [sp, #12]
    75de:	9a05      	ldr	r2, [sp, #20]
    75e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    75e4:	bf00      	nop
    75e6:	b006      	add	sp, #24
    75e8:	4770      	bx	lr

000075ea <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    75ea:	b084      	sub	sp, #16
    75ec:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    75ee:	2300      	movs	r3, #0
    75f0:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    75f2:	9b01      	ldr	r3, [sp, #4]
    75f4:	f003 0303 	and.w	r3, r3, #3
    75f8:	2b03      	cmp	r3, #3
    75fa:	d00c      	beq.n	7616 <Adc_HwAcc_GetAverageSelect+0x2c>
    75fc:	2b03      	cmp	r3, #3
    75fe:	d80d      	bhi.n	761c <Adc_HwAcc_GetAverageSelect+0x32>
    7600:	2b01      	cmp	r3, #1
    7602:	d002      	beq.n	760a <Adc_HwAcc_GetAverageSelect+0x20>
    7604:	2b02      	cmp	r3, #2
    7606:	d003      	beq.n	7610 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    7608:	e008      	b.n	761c <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    760a:	2301      	movs	r3, #1
    760c:	9303      	str	r3, [sp, #12]
            break;
    760e:	e006      	b.n	761e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    7610:	2302      	movs	r3, #2
    7612:	9303      	str	r3, [sp, #12]
            break;
    7614:	e003      	b.n	761e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    7616:	2303      	movs	r3, #3
    7618:	9303      	str	r3, [sp, #12]
            break;
    761a:	e000      	b.n	761e <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    761c:	bf00      	nop
    }
    return ReturnValue;
    761e:	9b03      	ldr	r3, [sp, #12]
}
    7620:	4618      	mov	r0, r3
    7622:	b004      	add	sp, #16
    7624:	4770      	bx	lr

00007626 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    7626:	b084      	sub	sp, #16
    7628:	9001      	str	r0, [sp, #4]
    762a:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    762c:	9b01      	ldr	r3, [sp, #4]
    762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7632:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    7634:	9b03      	ldr	r3, [sp, #12]
    7636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    763a:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    763c:	9b00      	ldr	r3, [sp, #0]
    763e:	019b      	lsls	r3, r3, #6
    7640:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7644:	9a03      	ldr	r2, [sp, #12]
    7646:	4313      	orrs	r3, r2
    7648:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    764a:	9b01      	ldr	r3, [sp, #4]
    764c:	9a03      	ldr	r2, [sp, #12]
    764e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7652:	bf00      	nop
    7654:	b004      	add	sp, #16
    7656:	4770      	bx	lr

00007658 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    7658:	b084      	sub	sp, #16
    765a:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    765c:	2300      	movs	r3, #0
    765e:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    7660:	9b01      	ldr	r3, [sp, #4]
    7662:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7666:	2b00      	cmp	r3, #0
    7668:	d001      	beq.n	766e <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    766a:	2301      	movs	r3, #1
    766c:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    766e:	9b03      	ldr	r3, [sp, #12]
}
    7670:	4618      	mov	r0, r3
    7672:	b004      	add	sp, #16
    7674:	4770      	bx	lr

00007676 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    7676:	b086      	sub	sp, #24
    7678:	9003      	str	r0, [sp, #12]
    767a:	9201      	str	r2, [sp, #4]
    767c:	461a      	mov	r2, r3
    767e:	460b      	mov	r3, r1
    7680:	f88d 300b 	strb.w	r3, [sp, #11]
    7684:	4613      	mov	r3, r2
    7686:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    768a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    768e:	9b03      	ldr	r3, [sp, #12]
    7690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7694:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    7696:	9b05      	ldr	r3, [sp, #20]
    7698:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    769c:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    769e:	9b01      	ldr	r3, [sp, #4]
    76a0:	f003 031f 	and.w	r3, r3, #31
    76a4:	9a05      	ldr	r2, [sp, #20]
    76a6:	4313      	orrs	r3, r2
    76a8:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    76aa:	f89d 300a 	ldrb.w	r3, [sp, #10]
    76ae:	2b00      	cmp	r3, #0
    76b0:	d001      	beq.n	76b6 <Adc_HwAcc_SetChannel+0x40>
    76b2:	2340      	movs	r3, #64	; 0x40
    76b4:	e000      	b.n	76b8 <Adc_HwAcc_SetChannel+0x42>
    76b6:	2300      	movs	r3, #0
    76b8:	9a05      	ldr	r2, [sp, #20]
    76ba:	4313      	orrs	r3, r2
    76bc:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    76be:	f89d 200b 	ldrb.w	r2, [sp, #11]
    76c2:	9b03      	ldr	r3, [sp, #12]
    76c4:	9905      	ldr	r1, [sp, #20]
    76c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    76ca:	bf00      	nop
    76cc:	b006      	add	sp, #24
    76ce:	4770      	bx	lr

000076d0 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    76d0:	b082      	sub	sp, #8
    76d2:	9001      	str	r0, [sp, #4]
    76d4:	460b      	mov	r3, r1
    76d6:	f8ad 3002 	strh.w	r3, [sp, #2]
    76da:	4613      	mov	r3, r2
    76dc:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    76e0:	f8bd 3000 	ldrh.w	r3, [sp]
    76e4:	b2da      	uxtb	r2, r3
    76e6:	9b01      	ldr	r3, [sp, #4]
    76e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    76ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    76f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
    76f4:	9b01      	ldr	r3, [sp, #4]
    76f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    76fa:	bf00      	nop
    76fc:	b002      	add	sp, #8
    76fe:	4770      	bx	lr

00007700 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    7700:	b082      	sub	sp, #8
    7702:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    7704:	9b01      	ldr	r3, [sp, #4]
    7706:	099b      	lsrs	r3, r3, #6
    7708:	f003 0301 	and.w	r3, r3, #1
    770c:	2b00      	cmp	r3, #0
    770e:	bf14      	ite	ne
    7710:	2301      	movne	r3, #1
    7712:	2300      	moveq	r3, #0
    7714:	b2db      	uxtb	r3, r3
}
    7716:	4618      	mov	r0, r3
    7718:	b002      	add	sp, #8
    771a:	4770      	bx	lr

0000771c <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    771c:	b082      	sub	sp, #8
    771e:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    7720:	9b01      	ldr	r3, [sp, #4]
    7722:	09db      	lsrs	r3, r3, #7
    7724:	f003 0301 	and.w	r3, r3, #1
    7728:	2b00      	cmp	r3, #0
    772a:	bf14      	ite	ne
    772c:	2301      	movne	r3, #1
    772e:	2300      	moveq	r3, #0
    7730:	b2db      	uxtb	r3, r3
}
    7732:	4618      	mov	r0, r3
    7734:	b002      	add	sp, #8
    7736:	4770      	bx	lr

00007738 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    7738:	b084      	sub	sp, #16
    773a:	9001      	str	r0, [sp, #4]
    773c:	460b      	mov	r3, r1
    773e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    7742:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7746:	9b01      	ldr	r3, [sp, #4]
    7748:	3212      	adds	r2, #18
    774a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    774e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    7752:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7756:	f3c3 030b 	ubfx	r3, r3, #0, #12
    775a:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    775e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7762:	4618      	mov	r0, r3
    7764:	b004      	add	sp, #16
    7766:	4770      	bx	lr

00007768 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    7768:	b500      	push	{lr}
    776a:	b085      	sub	sp, #20
    776c:	9003      	str	r0, [sp, #12]
    776e:	9102      	str	r1, [sp, #8]
    7770:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    7772:	f009 fc5b 	bl	1102c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7776:	9b02      	ldr	r3, [sp, #8]
    7778:	7a59      	ldrb	r1, [r3, #9]
    777a:	9b02      	ldr	r3, [sp, #8]
    777c:	68db      	ldr	r3, [r3, #12]
    777e:	461a      	mov	r2, r3
    7780:	9803      	ldr	r0, [sp, #12]
    7782:	f7ff ff0d 	bl	75a0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    7786:	f009 fc7d 	bl	11084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    778a:	f009 fab5 	bl	10cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    778e:	9901      	ldr	r1, [sp, #4]
    7790:	9803      	ldr	r0, [sp, #12]
    7792:	f7ff ff48 	bl	7626 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    7796:	f009 fadb 	bl	10d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    779a:	f008 ffcb 	bl	10734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    779e:	9b02      	ldr	r3, [sp, #8]
    77a0:	7a1b      	ldrb	r3, [r3, #8]
    77a2:	4619      	mov	r1, r3
    77a4:	9803      	ldr	r0, [sp, #12]
    77a6:	f7ff feda 	bl	755e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    77aa:	f008 ffef 	bl	1078c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    77ae:	f008 ff1d 	bl	105ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    77b2:	9b02      	ldr	r3, [sp, #8]
    77b4:	6819      	ldr	r1, [r3, #0]
    77b6:	9b02      	ldr	r3, [sp, #8]
    77b8:	685b      	ldr	r3, [r3, #4]
    77ba:	461a      	mov	r2, r3
    77bc:	9803      	ldr	r0, [sp, #12]
    77be:	f7ff fe73 	bl	74a8 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    77c2:	f008 ff3f 	bl	10644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    77c6:	bf00      	nop
    77c8:	b005      	add	sp, #20
    77ca:	f85d fb04 	ldr.w	pc, [sp], #4

000077ce <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    77ce:	b500      	push	{lr}
    77d0:	b087      	sub	sp, #28
    77d2:	9001      	str	r0, [sp, #4]
    77d4:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    77d6:	4a67      	ldr	r2, [pc, #412]	; (7974 <Adc_Ip_Init+0x1a6>)
    77d8:	9b01      	ldr	r3, [sp, #4]
    77da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77de:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    77e0:	2300      	movs	r3, #0
    77e2:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    77e4:	2300      	movs	r3, #0
    77e6:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    77e8:	9b00      	ldr	r3, [sp, #0]
    77ea:	6819      	ldr	r1, [r3, #0]
    77ec:	9b00      	ldr	r3, [sp, #0]
    77ee:	689b      	ldr	r3, [r3, #8]
    77f0:	461a      	mov	r2, r3
    77f2:	9802      	ldr	r0, [sp, #8]
    77f4:	f7ff fe58 	bl	74a8 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    77f8:	9b00      	ldr	r3, [sp, #0]
    77fa:	7b1b      	ldrb	r3, [r3, #12]
    77fc:	4619      	mov	r1, r3
    77fe:	9802      	ldr	r0, [sp, #8]
    7800:	f7ff fead 	bl	755e <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7804:	9b00      	ldr	r3, [sp, #0]
    7806:	7b59      	ldrb	r1, [r3, #13]
    7808:	9b00      	ldr	r3, [sp, #0]
    780a:	691b      	ldr	r3, [r3, #16]
    780c:	461a      	mov	r2, r3
    780e:	9802      	ldr	r0, [sp, #8]
    7810:	f7ff fec6 	bl	75a0 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    7814:	9b00      	ldr	r3, [sp, #0]
    7816:	695b      	ldr	r3, [r3, #20]
    7818:	4619      	mov	r1, r3
    781a:	9801      	ldr	r0, [sp, #4]
    781c:	f000 f9ea 	bl	7bf4 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    7820:	9b04      	ldr	r3, [sp, #16]
    7822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7826:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    7828:	9b00      	ldr	r3, [sp, #0]
    782a:	699b      	ldr	r3, [r3, #24]
    782c:	019b      	lsls	r3, r3, #6
    782e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7832:	9a05      	ldr	r2, [sp, #20]
    7834:	4313      	orrs	r3, r2
    7836:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    7838:	9b00      	ldr	r3, [sp, #0]
    783a:	7f1b      	ldrb	r3, [r3, #28]
    783c:	2b00      	cmp	r3, #0
    783e:	d004      	beq.n	784a <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    7840:	9b05      	ldr	r3, [sp, #20]
    7842:	f043 0304 	orr.w	r3, r3, #4
    7846:	9305      	str	r3, [sp, #20]
    7848:	e003      	b.n	7852 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    784a:	9b04      	ldr	r3, [sp, #16]
    784c:	f043 0304 	orr.w	r3, r3, #4
    7850:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    7852:	9b04      	ldr	r3, [sp, #16]
    7854:	f043 0303 	orr.w	r3, r3, #3
    7858:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    785a:	9b00      	ldr	r3, [sp, #0]
    785c:	6a1b      	ldr	r3, [r3, #32]
    785e:	f003 0303 	and.w	r3, r3, #3
    7862:	9a05      	ldr	r2, [sp, #20]
    7864:	4313      	orrs	r3, r2
    7866:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    7868:	9b04      	ldr	r3, [sp, #16]
    786a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    786e:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    7870:	9b00      	ldr	r3, [sp, #0]
    7872:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    7876:	2b00      	cmp	r3, #0
    7878:	d001      	beq.n	787e <Adc_Ip_Init+0xb0>
    787a:	2320      	movs	r3, #32
    787c:	e000      	b.n	7880 <Adc_Ip_Init+0xb2>
    787e:	2300      	movs	r3, #0
    7880:	9a05      	ldr	r2, [sp, #20]
    7882:	4313      	orrs	r3, r2
    7884:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    7886:	9b00      	ldr	r3, [sp, #0]
    7888:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    788c:	2b00      	cmp	r3, #0
    788e:	d001      	beq.n	7894 <Adc_Ip_Init+0xc6>
    7890:	2310      	movs	r3, #16
    7892:	e000      	b.n	7896 <Adc_Ip_Init+0xc8>
    7894:	2300      	movs	r3, #0
    7896:	9a05      	ldr	r2, [sp, #20]
    7898:	4313      	orrs	r3, r2
    789a:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    789c:	9b00      	ldr	r3, [sp, #0]
    789e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    78a2:	2b00      	cmp	r3, #0
    78a4:	d001      	beq.n	78aa <Adc_Ip_Init+0xdc>
    78a6:	2308      	movs	r3, #8
    78a8:	e000      	b.n	78ac <Adc_Ip_Init+0xde>
    78aa:	2300      	movs	r3, #0
    78ac:	9a05      	ldr	r2, [sp, #20]
    78ae:	4313      	orrs	r3, r2
    78b0:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    78b2:	9b00      	ldr	r3, [sp, #0]
    78b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    78b6:	461a      	mov	r2, r3
    78b8:	9b02      	ldr	r3, [sp, #8]
    78ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    78be:	9b00      	ldr	r3, [sp, #0]
    78c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    78c2:	461a      	mov	r2, r3
    78c4:	9b02      	ldr	r3, [sp, #8]
    78c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    78ca:	9a05      	ldr	r2, [sp, #20]
    78cc:	9904      	ldr	r1, [sp, #16]
    78ce:	9802      	ldr	r0, [sp, #8]
    78d0:	f7ff fdd2 	bl	7478 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    78d4:	9b00      	ldr	r3, [sp, #0]
    78d6:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    78d8:	9b00      	ldr	r3, [sp, #0]
    78da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    78dc:	461a      	mov	r2, r3
    78de:	9802      	ldr	r0, [sp, #8]
    78e0:	f7ff fef6 	bl	76d0 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    78e4:	9b00      	ldr	r3, [sp, #0]
    78e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    78ea:	4619      	mov	r1, r3
    78ec:	9801      	ldr	r0, [sp, #4]
    78ee:	f000 f955 	bl	7b9c <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    78f2:	9b00      	ldr	r3, [sp, #0]
    78f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    78f6:	2b00      	cmp	r3, #0
    78f8:	d01c      	beq.n	7934 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    78fa:	2300      	movs	r3, #0
    78fc:	f88d 300f 	strb.w	r3, [sp, #15]
    7900:	e011      	b.n	7926 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    7902:	9b00      	ldr	r3, [sp, #0]
    7904:	6b59      	ldr	r1, [r3, #52]	; 0x34
    7906:	f89d 200f 	ldrb.w	r2, [sp, #15]
    790a:	4613      	mov	r3, r2
    790c:	005b      	lsls	r3, r3, #1
    790e:	4413      	add	r3, r2
    7910:	009b      	lsls	r3, r3, #2
    7912:	440b      	add	r3, r1
    7914:	4619      	mov	r1, r3
    7916:	9801      	ldr	r0, [sp, #4]
    7918:	f000 f9c2 	bl	7ca0 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    791c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7920:	3301      	adds	r3, #1
    7922:	f88d 300f 	strb.w	r3, [sp, #15]
    7926:	9b00      	ldr	r3, [sp, #0]
    7928:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    792c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7930:	429a      	cmp	r2, r3
    7932:	d3e6      	bcc.n	7902 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    7934:	9b00      	ldr	r3, [sp, #0]
    7936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7938:	490f      	ldr	r1, [pc, #60]	; (7978 <Adc_Ip_Init+0x1aa>)
    793a:	9b01      	ldr	r3, [sp, #4]
    793c:	204c      	movs	r0, #76	; 0x4c
    793e:	fb00 f303 	mul.w	r3, r0, r3
    7942:	440b      	add	r3, r1
    7944:	3308      	adds	r3, #8
    7946:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    7948:	9b00      	ldr	r3, [sp, #0]
    794a:	685a      	ldr	r2, [r3, #4]
    794c:	490a      	ldr	r1, [pc, #40]	; (7978 <Adc_Ip_Init+0x1aa>)
    794e:	9b01      	ldr	r3, [sp, #4]
    7950:	204c      	movs	r0, #76	; 0x4c
    7952:	fb00 f303 	mul.w	r3, r0, r3
    7956:	440b      	add	r3, r1
    7958:	3304      	adds	r3, #4
    795a:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    795c:	4a06      	ldr	r2, [pc, #24]	; (7978 <Adc_Ip_Init+0x1aa>)
    795e:	9b01      	ldr	r3, [sp, #4]
    7960:	214c      	movs	r1, #76	; 0x4c
    7962:	fb01 f303 	mul.w	r3, r1, r3
    7966:	4413      	add	r3, r2
    7968:	2201      	movs	r2, #1
    796a:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    796c:	bf00      	nop
    796e:	b007      	add	sp, #28
    7970:	f85d fb04 	ldr.w	pc, [sp], #4
    7974:	00018514 	.word	0x00018514
    7978:	1fff8d00 	.word	0x1fff8d00

0000797c <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    797c:	b500      	push	{lr}
    797e:	b0c3      	sub	sp, #268	; 0x10c
    7980:	ab42      	add	r3, sp, #264	; 0x108
    7982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7986:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    7988:	2300      	movs	r3, #0
    798a:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    798c:	2303      	movs	r3, #3
    798e:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    7990:	2300      	movs	r3, #0
    7992:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    7994:	230c      	movs	r3, #12
    7996:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    799a:	2300      	movs	r3, #0
    799c:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    79a0:	2300      	movs	r3, #0
    79a2:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    79a4:	2300      	movs	r3, #0
    79a6:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    79a8:	2300      	movs	r3, #0
    79aa:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    79ac:	2300      	movs	r3, #0
    79ae:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    79b2:	2300      	movs	r3, #0
    79b4:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    79b6:	2300      	movs	r3, #0
    79b8:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    79bc:	2300      	movs	r3, #0
    79be:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    79c2:	2300      	movs	r3, #0
    79c4:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    79c8:	2300      	movs	r3, #0
    79ca:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    79ce:	2300      	movs	r3, #0
    79d0:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    79d4:	2300      	movs	r3, #0
    79d6:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    79da:	2304      	movs	r3, #4
    79dc:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    79e0:	2300      	movs	r3, #0
    79e2:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    79e6:	2310      	movs	r3, #16
    79e8:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    79ec:	2300      	movs	r3, #0
    79ee:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    79f2:	e02b      	b.n	7a4c <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    79f4:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    79f8:	ab42      	add	r3, sp, #264	; 0x108
    79fa:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    79fe:	4613      	mov	r3, r2
    7a00:	005b      	lsls	r3, r3, #1
    7a02:	4413      	add	r3, r2
    7a04:	009b      	lsls	r3, r3, #2
    7a06:	440b      	add	r3, r1
    7a08:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7a0c:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    7a0e:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7a12:	ab42      	add	r3, sp, #264	; 0x108
    7a14:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7a18:	4613      	mov	r3, r2
    7a1a:	005b      	lsls	r3, r3, #1
    7a1c:	4413      	add	r3, r2
    7a1e:	009b      	lsls	r3, r3, #2
    7a20:	440b      	add	r3, r1
    7a22:	3304      	adds	r3, #4
    7a24:	221f      	movs	r2, #31
    7a26:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    7a28:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7a2c:	ab42      	add	r3, sp, #264	; 0x108
    7a2e:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7a32:	4613      	mov	r3, r2
    7a34:	005b      	lsls	r3, r3, #1
    7a36:	4413      	add	r3, r2
    7a38:	009b      	lsls	r3, r3, #2
    7a3a:	440b      	add	r3, r1
    7a3c:	3308      	adds	r3, #8
    7a3e:	2200      	movs	r2, #0
    7a40:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    7a42:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    7a46:	3301      	adds	r3, #1
    7a48:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    7a4c:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    7a50:	2b0f      	cmp	r3, #15
    7a52:	d9cf      	bls.n	79f4 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    7a54:	ab02      	add	r3, sp, #8
    7a56:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    7a58:	2300      	movs	r3, #0
    7a5a:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    7a5c:	aa32      	add	r2, sp, #200	; 0xc8
    7a5e:	ab42      	add	r3, sp, #264	; 0x108
    7a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7a64:	4611      	mov	r1, r2
    7a66:	6818      	ldr	r0, [r3, #0]
    7a68:	f7ff feb1 	bl	77ce <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    7a6c:	4a07      	ldr	r2, [pc, #28]	; (7a8c <Adc_Ip_DeInit+0x110>)
    7a6e:	ab42      	add	r3, sp, #264	; 0x108
    7a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7a74:	681b      	ldr	r3, [r3, #0]
    7a76:	214c      	movs	r1, #76	; 0x4c
    7a78:	fb01 f303 	mul.w	r3, r1, r3
    7a7c:	4413      	add	r3, r2
    7a7e:	2200      	movs	r2, #0
    7a80:	701a      	strb	r2, [r3, #0]
}
    7a82:	bf00      	nop
    7a84:	b043      	add	sp, #268	; 0x10c
    7a86:	f85d fb04 	ldr.w	pc, [sp], #4
    7a8a:	bf00      	nop
    7a8c:	1fff8d00 	.word	0x1fff8d00

00007a90 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    7a90:	b500      	push	{lr}
    7a92:	b087      	sub	sp, #28
    7a94:	9003      	str	r0, [sp, #12]
    7a96:	460b      	mov	r3, r1
    7a98:	9201      	str	r2, [sp, #4]
    7a9a:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7a9e:	4a0a      	ldr	r2, [pc, #40]	; (7ac8 <Adc_Ip_SetAveraging+0x38>)
    7aa0:	9b03      	ldr	r3, [sp, #12]
    7aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aa6:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    7aa8:	f009 fa1c 	bl	10ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    7aac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7ab0:	9a01      	ldr	r2, [sp, #4]
    7ab2:	4619      	mov	r1, r3
    7ab4:	9805      	ldr	r0, [sp, #20]
    7ab6:	f7ff fd73 	bl	75a0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    7aba:	f009 fa3f 	bl	10f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    7abe:	bf00      	nop
    7ac0:	b007      	add	sp, #28
    7ac2:	f85d fb04 	ldr.w	pc, [sp], #4
    7ac6:	bf00      	nop
    7ac8:	00018514 	.word	0x00018514

00007acc <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    7acc:	b500      	push	{lr}
    7ace:	b085      	sub	sp, #20
    7ad0:	9001      	str	r0, [sp, #4]
    7ad2:	460b      	mov	r3, r1
    7ad4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7ad8:	4a09      	ldr	r2, [pc, #36]	; (7b00 <Adc_Ip_SetSampleTime+0x34>)
    7ada:	9b01      	ldr	r3, [sp, #4]
    7adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ae0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    7ae2:	f008 fe79 	bl	107d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    7ae6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7aea:	4619      	mov	r1, r3
    7aec:	9803      	ldr	r0, [sp, #12]
    7aee:	f7ff fd36 	bl	755e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    7af2:	f008 fe9d 	bl	10830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    7af6:	bf00      	nop
    7af8:	b005      	add	sp, #20
    7afa:	f85d fb04 	ldr.w	pc, [sp], #4
    7afe:	bf00      	nop
    7b00:	00018514 	.word	0x00018514

00007b04 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    7b04:	b500      	push	{lr}
    7b06:	b085      	sub	sp, #20
    7b08:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b0a:	4a0a      	ldr	r2, [pc, #40]	; (7b34 <Adc_Ip_EnableDma+0x30>)
    7b0c:	9b01      	ldr	r3, [sp, #4]
    7b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b12:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    7b14:	f009 f994 	bl	10e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    7b18:	9b03      	ldr	r3, [sp, #12]
    7b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7b1e:	f043 0204 	orr.w	r2, r3, #4
    7b22:	9b03      	ldr	r3, [sp, #12]
    7b24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    7b28:	f009 f9b6 	bl	10e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    7b2c:	bf00      	nop
    7b2e:	b005      	add	sp, #20
    7b30:	f85d fb04 	ldr.w	pc, [sp], #4
    7b34:	00018514 	.word	0x00018514

00007b38 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    7b38:	b500      	push	{lr}
    7b3a:	b085      	sub	sp, #20
    7b3c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b3e:	4a0a      	ldr	r2, [pc, #40]	; (7b68 <Adc_Ip_DisableDma+0x30>)
    7b40:	9b01      	ldr	r3, [sp, #4]
    7b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b46:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    7b48:	f009 f832 	bl	10bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    7b4c:	9b03      	ldr	r3, [sp, #12]
    7b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7b52:	f023 0204 	bic.w	r2, r3, #4
    7b56:	9b03      	ldr	r3, [sp, #12]
    7b58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    7b5c:	f009 f854 	bl	10c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    7b60:	bf00      	nop
    7b62:	b005      	add	sp, #20
    7b64:	f85d fb04 	ldr.w	pc, [sp], #4
    7b68:	00018514 	.word	0x00018514

00007b6c <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    7b6c:	b500      	push	{lr}
    7b6e:	b085      	sub	sp, #20
    7b70:	9001      	str	r0, [sp, #4]
    7b72:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b74:	4a08      	ldr	r2, [pc, #32]	; (7b98 <Adc_Ip_SetTriggerMode+0x2c>)
    7b76:	9b01      	ldr	r3, [sp, #4]
    7b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b7c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    7b7e:	f009 f869 	bl	10c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    7b82:	9900      	ldr	r1, [sp, #0]
    7b84:	9803      	ldr	r0, [sp, #12]
    7b86:	f7ff fd4e 	bl	7626 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    7b8a:	f009 f88f 	bl	10cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    7b8e:	bf00      	nop
    7b90:	b005      	add	sp, #20
    7b92:	f85d fb04 	ldr.w	pc, [sp], #4
    7b96:	bf00      	nop
    7b98:	00018514 	.word	0x00018514

00007b9c <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    7b9c:	b500      	push	{lr}
    7b9e:	b085      	sub	sp, #20
    7ba0:	9001      	str	r0, [sp, #4]
    7ba2:	460b      	mov	r3, r1
    7ba4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7ba8:	4a11      	ldr	r2, [pc, #68]	; (7bf0 <Adc_Ip_SetContinuousMode+0x54>)
    7baa:	9b01      	ldr	r3, [sp, #4]
    7bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bb0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    7bb2:	f009 fa8d 	bl	110d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    7bb6:	9b03      	ldr	r3, [sp, #12]
    7bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7bbc:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    7bbe:	9b02      	ldr	r3, [sp, #8]
    7bc0:	f023 0308 	bic.w	r3, r3, #8
    7bc4:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    7bc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7bca:	2b00      	cmp	r3, #0
    7bcc:	d001      	beq.n	7bd2 <Adc_Ip_SetContinuousMode+0x36>
    7bce:	2308      	movs	r3, #8
    7bd0:	e000      	b.n	7bd4 <Adc_Ip_SetContinuousMode+0x38>
    7bd2:	2300      	movs	r3, #0
    7bd4:	9a02      	ldr	r2, [sp, #8]
    7bd6:	4313      	orrs	r3, r2
    7bd8:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    7bda:	9b03      	ldr	r3, [sp, #12]
    7bdc:	9a02      	ldr	r2, [sp, #8]
    7bde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    7be2:	f009 faa1 	bl	11128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    7be6:	bf00      	nop
    7be8:	b005      	add	sp, #20
    7bea:	f85d fb04 	ldr.w	pc, [sp], #4
    7bee:	bf00      	nop
    7bf0:	00018514 	.word	0x00018514

00007bf4 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    7bf4:	b500      	push	{lr}
    7bf6:	b085      	sub	sp, #20
    7bf8:	9001      	str	r0, [sp, #4]
    7bfa:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7bfc:	4a0e      	ldr	r2, [pc, #56]	; (7c38 <Adc_Ip_SetResolution+0x44>)
    7bfe:	9b01      	ldr	r3, [sp, #4]
    7c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c04:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    7c06:	f008 fab3 	bl	10170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    7c0a:	9b03      	ldr	r3, [sp, #12]
    7c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7c0e:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    7c10:	9b02      	ldr	r3, [sp, #8]
    7c12:	f023 030c 	bic.w	r3, r3, #12
    7c16:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    7c18:	9b00      	ldr	r3, [sp, #0]
    7c1a:	009b      	lsls	r3, r3, #2
    7c1c:	f003 030c 	and.w	r3, r3, #12
    7c20:	9a02      	ldr	r2, [sp, #8]
    7c22:	4313      	orrs	r3, r2
    7c24:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    7c26:	9b03      	ldr	r3, [sp, #12]
    7c28:	9a02      	ldr	r2, [sp, #8]
    7c2a:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    7c2c:	f008 facc 	bl	101c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    7c30:	bf00      	nop
    7c32:	b005      	add	sp, #20
    7c34:	f85d fb04 	ldr.w	pc, [sp], #4
    7c38:	00018514 	.word	0x00018514

00007c3c <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    7c3c:	b500      	push	{lr}
    7c3e:	b085      	sub	sp, #20
    7c40:	9001      	str	r0, [sp, #4]
    7c42:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7c44:	4a15      	ldr	r2, [pc, #84]	; (7c9c <Adc_Ip_SetClockMode+0x60>)
    7c46:	9b01      	ldr	r3, [sp, #4]
    7c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c4c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    7c4e:	f008 fc29 	bl	104a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7c52:	9b00      	ldr	r3, [sp, #0]
    7c54:	6819      	ldr	r1, [r3, #0]
    7c56:	9b00      	ldr	r3, [sp, #0]
    7c58:	685b      	ldr	r3, [r3, #4]
    7c5a:	461a      	mov	r2, r3
    7c5c:	9803      	ldr	r0, [sp, #12]
    7c5e:	f7ff fc23 	bl	74a8 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    7c62:	f008 fc4b 	bl	104fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    7c66:	f008 fd13 	bl	10690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7c6a:	9b00      	ldr	r3, [sp, #0]
    7c6c:	7a1b      	ldrb	r3, [r3, #8]
    7c6e:	4619      	mov	r1, r3
    7c70:	9803      	ldr	r0, [sp, #12]
    7c72:	f7ff fc74 	bl	755e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    7c76:	f008 fd37 	bl	106e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    7c7a:	f009 f985 	bl	10f88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7c7e:	9b00      	ldr	r3, [sp, #0]
    7c80:	7a59      	ldrb	r1, [r3, #9]
    7c82:	9b00      	ldr	r3, [sp, #0]
    7c84:	68db      	ldr	r3, [r3, #12]
    7c86:	461a      	mov	r2, r3
    7c88:	9803      	ldr	r0, [sp, #12]
    7c8a:	f7ff fc89 	bl	75a0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    7c8e:	f009 f9a7 	bl	10fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    7c92:	bf00      	nop
    7c94:	b005      	add	sp, #20
    7c96:	f85d fb04 	ldr.w	pc, [sp], #4
    7c9a:	bf00      	nop
    7c9c:	00018514 	.word	0x00018514

00007ca0 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    7ca0:	b510      	push	{r4, lr}
    7ca2:	b084      	sub	sp, #16
    7ca4:	9001      	str	r0, [sp, #4]
    7ca6:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7ca8:	4a13      	ldr	r2, [pc, #76]	; (7cf8 <Adc_Ip_ConfigChannel+0x58>)
    7caa:	9b01      	ldr	r3, [sp, #4]
    7cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cb0:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    7cb2:	9b00      	ldr	r3, [sp, #0]
    7cb4:	685b      	ldr	r3, [r3, #4]
    7cb6:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    7cb8:	f008 ff28 	bl	10b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    7cbc:	9b00      	ldr	r3, [sp, #0]
    7cbe:	7819      	ldrb	r1, [r3, #0]
    7cc0:	9b00      	ldr	r3, [sp, #0]
    7cc2:	7a1b      	ldrb	r3, [r3, #8]
    7cc4:	9a02      	ldr	r2, [sp, #8]
    7cc6:	9803      	ldr	r0, [sp, #12]
    7cc8:	f7ff fcd5 	bl	7676 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    7ccc:	f008 ff4a 	bl	10b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    7cd0:	9b00      	ldr	r3, [sp, #0]
    7cd2:	781b      	ldrb	r3, [r3, #0]
    7cd4:	461c      	mov	r4, r3
    7cd6:	9b00      	ldr	r3, [sp, #0]
    7cd8:	6859      	ldr	r1, [r3, #4]
    7cda:	4808      	ldr	r0, [pc, #32]	; (7cfc <Adc_Ip_ConfigChannel+0x5c>)
    7cdc:	9a01      	ldr	r2, [sp, #4]
    7cde:	4613      	mov	r3, r2
    7ce0:	00db      	lsls	r3, r3, #3
    7ce2:	4413      	add	r3, r2
    7ce4:	005b      	lsls	r3, r3, #1
    7ce6:	4413      	add	r3, r2
    7ce8:	4423      	add	r3, r4
    7cea:	3302      	adds	r3, #2
    7cec:	009b      	lsls	r3, r3, #2
    7cee:	4403      	add	r3, r0
    7cf0:	6059      	str	r1, [r3, #4]
}
    7cf2:	bf00      	nop
    7cf4:	b004      	add	sp, #16
    7cf6:	bd10      	pop	{r4, pc}
    7cf8:	00018514 	.word	0x00018514
    7cfc:	1fff8d00 	.word	0x1fff8d00

00007d00 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    7d00:	b500      	push	{lr}
    7d02:	b089      	sub	sp, #36	; 0x24
    7d04:	9001      	str	r0, [sp, #4]
    7d06:	460b      	mov	r3, r1
    7d08:	f88d 3003 	strb.w	r3, [sp, #3]
    7d0c:	4613      	mov	r3, r2
    7d0e:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7d12:	4a24      	ldr	r2, [pc, #144]	; (7da4 <Adc_Ip_SetDisabledChannel+0xa4>)
    7d14:	9b01      	ldr	r3, [sp, #4]
    7d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d1a:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7d1c:	2300      	movs	r3, #0
    7d1e:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7d20:	2100      	movs	r1, #0
    7d22:	4821      	ldr	r0, [pc, #132]	; (7da8 <Adc_Ip_SetDisabledChannel+0xa8>)
    7d24:	f7fa f8b6 	bl	1e94 <OsIf_MicrosToTicks>
    7d28:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7d2a:	2000      	movs	r0, #0
    7d2c:	f7fa f866 	bl	1dfc <OsIf_GetCounter>
    7d30:	4603      	mov	r3, r0
    7d32:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    7d34:	2300      	movs	r3, #0
    7d36:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    7d38:	f008 fda0 	bl	1087c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    7d3c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7d40:	9b05      	ldr	r3, [sp, #20]
    7d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d46:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7d4a:	f043 011f 	orr.w	r1, r3, #31
    7d4e:	9b05      	ldr	r3, [sp, #20]
    7d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    7d54:	f008 fdbe 	bl	108d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    7d58:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7d5c:	2b00      	cmp	r3, #0
    7d5e:	d01c      	beq.n	7d9a <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7d60:	e008      	b.n	7d74 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    7d62:	ab03      	add	r3, sp, #12
    7d64:	2100      	movs	r1, #0
    7d66:	4618      	mov	r0, r3
    7d68:	f7fa f861 	bl	1e2e <OsIf_GetElapsed>
    7d6c:	4602      	mov	r2, r0
    7d6e:	9b06      	ldr	r3, [sp, #24]
    7d70:	4413      	add	r3, r2
    7d72:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7d74:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7d78:	9b05      	ldr	r3, [sp, #20]
    7d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d7e:	f003 031f 	and.w	r3, r3, #31
    7d82:	2b1f      	cmp	r3, #31
    7d84:	d003      	beq.n	7d8e <Adc_Ip_SetDisabledChannel+0x8e>
    7d86:	9a06      	ldr	r2, [sp, #24]
    7d88:	9b04      	ldr	r3, [sp, #16]
    7d8a:	429a      	cmp	r2, r3
    7d8c:	d3e9      	bcc.n	7d62 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    7d8e:	9a06      	ldr	r2, [sp, #24]
    7d90:	9b04      	ldr	r3, [sp, #16]
    7d92:	429a      	cmp	r2, r3
    7d94:	d301      	bcc.n	7d9a <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    7d96:	2302      	movs	r3, #2
    7d98:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    7d9a:	9b07      	ldr	r3, [sp, #28]
}
    7d9c:	4618      	mov	r0, r3
    7d9e:	b009      	add	sp, #36	; 0x24
    7da0:	f85d fb04 	ldr.w	pc, [sp], #4
    7da4:	00018514 	.word	0x00018514
    7da8:	000186a0 	.word	0x000186a0

00007dac <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    7dac:	b500      	push	{lr}
    7dae:	b087      	sub	sp, #28
    7db0:	9003      	str	r0, [sp, #12]
    7db2:	9102      	str	r1, [sp, #8]
    7db4:	4613      	mov	r3, r2
    7db6:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7dba:	4a0a      	ldr	r2, [pc, #40]	; (7de4 <Adc_Ip_StartConversion+0x38>)
    7dbc:	9b03      	ldr	r3, [sp, #12]
    7dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dc2:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    7dc4:	f008 fdac 	bl	10920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    7dc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7dcc:	9a02      	ldr	r2, [sp, #8]
    7dce:	2100      	movs	r1, #0
    7dd0:	9805      	ldr	r0, [sp, #20]
    7dd2:	f7ff fc50 	bl	7676 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    7dd6:	f008 fdcf 	bl	10978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    7dda:	bf00      	nop
    7ddc:	b007      	add	sp, #28
    7dde:	f85d fb04 	ldr.w	pc, [sp], #4
    7de2:	bf00      	nop
    7de4:	00018514 	.word	0x00018514

00007de8 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    7de8:	b084      	sub	sp, #16
    7dea:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7dec:	4a0b      	ldr	r2, [pc, #44]	; (7e1c <Adc_Ip_GetConvActiveFlag+0x34>)
    7dee:	9b01      	ldr	r3, [sp, #4]
    7df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7df4:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    7df6:	9b03      	ldr	r3, [sp, #12]
    7df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7dfc:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    7dfe:	9b02      	ldr	r3, [sp, #8]
    7e00:	09db      	lsrs	r3, r3, #7
    7e02:	f003 0301 	and.w	r3, r3, #1
    7e06:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    7e08:	9b02      	ldr	r3, [sp, #8]
    7e0a:	2b00      	cmp	r3, #0
    7e0c:	bf14      	ite	ne
    7e0e:	2301      	movne	r3, #1
    7e10:	2300      	moveq	r3, #0
    7e12:	b2db      	uxtb	r3, r3
}
    7e14:	4618      	mov	r0, r3
    7e16:	b004      	add	sp, #16
    7e18:	4770      	bx	lr
    7e1a:	bf00      	nop
    7e1c:	00018514 	.word	0x00018514

00007e20 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    7e20:	b500      	push	{lr}
    7e22:	b085      	sub	sp, #20
    7e24:	9001      	str	r0, [sp, #4]
    7e26:	460b      	mov	r3, r1
    7e28:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7e2c:	4a08      	ldr	r2, [pc, #32]	; (7e50 <Adc_Ip_GetChanInterrupt+0x30>)
    7e2e:	9b01      	ldr	r3, [sp, #4]
    7e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e34:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e3c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    7e3e:	9803      	ldr	r0, [sp, #12]
    7e40:	f7ff fc5e 	bl	7700 <Adc_HwAcc_GetAIEN>
    7e44:	4603      	mov	r3, r0
}
    7e46:	4618      	mov	r0, r3
    7e48:	b005      	add	sp, #20
    7e4a:	f85d fb04 	ldr.w	pc, [sp], #4
    7e4e:	bf00      	nop
    7e50:	00018514 	.word	0x00018514

00007e54 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    7e54:	b500      	push	{lr}
    7e56:	b085      	sub	sp, #20
    7e58:	9001      	str	r0, [sp, #4]
    7e5a:	460b      	mov	r3, r1
    7e5c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7e60:	4a08      	ldr	r2, [pc, #32]	; (7e84 <Adc_Ip_GetConvCompleteFlag+0x30>)
    7e62:	9b01      	ldr	r3, [sp, #4]
    7e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e68:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e70:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    7e72:	9803      	ldr	r0, [sp, #12]
    7e74:	f7ff fc52 	bl	771c <Adc_HwAcc_GetCOCO>
    7e78:	4603      	mov	r3, r0
}
    7e7a:	4618      	mov	r0, r3
    7e7c:	b005      	add	sp, #20
    7e7e:	f85d fb04 	ldr.w	pc, [sp], #4
    7e82:	bf00      	nop
    7e84:	00018514 	.word	0x00018514

00007e88 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    7e88:	b500      	push	{lr}
    7e8a:	b085      	sub	sp, #20
    7e8c:	9001      	str	r0, [sp, #4]
    7e8e:	460b      	mov	r3, r1
    7e90:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7e94:	4a07      	ldr	r2, [pc, #28]	; (7eb4 <Adc_Ip_GetConvData+0x2c>)
    7e96:	9b01      	ldr	r3, [sp, #4]
    7e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e9c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    7e9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7ea2:	4619      	mov	r1, r3
    7ea4:	9803      	ldr	r0, [sp, #12]
    7ea6:	f7ff fc47 	bl	7738 <Adc_HwAcc_GetData>
    7eaa:	4603      	mov	r3, r0
}
    7eac:	4618      	mov	r0, r3
    7eae:	b005      	add	sp, #20
    7eb0:	f85d fb04 	ldr.w	pc, [sp], #4
    7eb4:	00018514 	.word	0x00018514

00007eb8 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    7eb8:	b500      	push	{lr}
    7eba:	b093      	sub	sp, #76	; 0x4c
    7ebc:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7ebe:	4a59      	ldr	r2, [pc, #356]	; (8024 <Adc_Ip_DoCalibration+0x16c>)
    7ec0:	9b01      	ldr	r3, [sp, #4]
    7ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ec6:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7ec8:	2300      	movs	r3, #0
    7eca:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7ecc:	2100      	movs	r1, #0
    7ece:	4856      	ldr	r0, [pc, #344]	; (8028 <Adc_Ip_DoCalibration+0x170>)
    7ed0:	f7f9 ffe0 	bl	1e94 <OsIf_MicrosToTicks>
    7ed4:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7ed6:	2000      	movs	r0, #0
    7ed8:	f7f9 ff90 	bl	1dfc <OsIf_GetCounter>
    7edc:	4603      	mov	r3, r0
    7ede:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    7ee0:	2300      	movs	r3, #0
    7ee2:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    7ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7eea:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    7eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7eee:	089b      	lsrs	r3, r3, #2
    7ef0:	f003 0301 	and.w	r3, r3, #1
    7ef4:	2b00      	cmp	r3, #0
    7ef6:	bf14      	ite	ne
    7ef8:	2301      	movne	r3, #1
    7efa:	2300      	moveq	r3, #0
    7efc:	b2db      	uxtb	r3, r3
    7efe:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    7f02:	980d      	ldr	r0, [sp, #52]	; 0x34
    7f04:	f7ff fb71 	bl	75ea <Adc_HwAcc_GetAverageSelect>
    7f08:	4603      	mov	r3, r0
    7f0a:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    7f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7f10:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    7f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7f14:	b2db      	uxtb	r3, r3
    7f16:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    7f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7f20:	4618      	mov	r0, r3
    7f22:	f7ff fb99 	bl	7658 <Adc_HwAcc_GetTriggerMode>
    7f26:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    7f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7f2c:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    7f2e:	980d      	ldr	r0, [sp, #52]	; 0x34
    7f30:	f7ff fad8 	bl	74e4 <Adc_HwAcc_GetClockDivide>
    7f34:	4603      	mov	r3, r0
    7f36:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    7f38:	980d      	ldr	r0, [sp, #52]	; 0x34
    7f3a:	f7ff faf2 	bl	7522 <Adc_HwAcc_GetInputClock>
    7f3e:	4603      	mov	r3, r0
    7f40:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    7f42:	2301      	movs	r3, #1
    7f44:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    7f48:	2303      	movs	r3, #3
    7f4a:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    7f4c:	230c      	movs	r3, #12
    7f4e:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    7f52:	4a36      	ldr	r2, [pc, #216]	; (802c <Adc_Ip_DoCalibration+0x174>)
    7f54:	9b01      	ldr	r3, [sp, #4]
    7f56:	214c      	movs	r1, #76	; 0x4c
    7f58:	fb01 f303 	mul.w	r3, r1, r3
    7f5c:	4413      	add	r3, r2
    7f5e:	3304      	adds	r3, #4
    7f60:	681b      	ldr	r3, [r3, #0]
    7f62:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    7f64:	9b08      	ldr	r3, [sp, #32]
    7f66:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    7f68:	ab03      	add	r3, sp, #12
    7f6a:	2200      	movs	r2, #0
    7f6c:	4619      	mov	r1, r3
    7f6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7f70:	f7ff fbfa 	bl	7768 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    7f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f76:	2200      	movs	r2, #0
    7f78:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    7f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f7e:	2200      	movs	r2, #0
    7f80:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    7f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f86:	2200      	movs	r2, #0
    7f88:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    7f8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f8e:	2200      	movs	r2, #0
    7f90:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    7f94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f96:	2200      	movs	r2, #0
    7f98:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    7f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f9e:	2200      	movs	r2, #0
    7fa0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    7fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fa6:	2200      	movs	r2, #0
    7fa8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    7fac:	f009 f83e 	bl	1102c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    7fb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7fb6:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    7fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7fbe:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    7fc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7fc6:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    7fc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7fcc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    7fd0:	f009 f858 	bl	11084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    7fd4:	e008      	b.n	7fe8 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    7fd6:	ab0b      	add	r3, sp, #44	; 0x2c
    7fd8:	2100      	movs	r1, #0
    7fda:	4618      	mov	r0, r3
    7fdc:	f7f9 ff27 	bl	1e2e <OsIf_GetElapsed>
    7fe0:	4602      	mov	r2, r0
    7fe2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7fe4:	4413      	add	r3, r2
    7fe6:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    7fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7ff2:	2b00      	cmp	r3, #0
    7ff4:	d003      	beq.n	7ffe <Adc_Ip_DoCalibration+0x146>
    7ff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7ffa:	429a      	cmp	r2, r3
    7ffc:	d3eb      	bcc.n	7fd6 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    7ffe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8002:	429a      	cmp	r2, r3
    8004:	d301      	bcc.n	800a <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8006:	2302      	movs	r3, #2
    8008:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    800a:	ab07      	add	r3, sp, #28
    800c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    800e:	4619      	mov	r1, r3
    8010:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8012:	f7ff fba9 	bl	7768 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    8016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8018:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    801a:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    801c:	4618      	mov	r0, r3
    801e:	b013      	add	sp, #76	; 0x4c
    8020:	f85d fb04 	ldr.w	pc, [sp], #4
    8024:	00018514 	.word	0x00018514
    8028:	000186a0 	.word	0x000186a0
    802c:	1fff8d00 	.word	0x1fff8d00

00008030 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    8030:	b500      	push	{lr}
    8032:	b089      	sub	sp, #36	; 0x24
    8034:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8036:	4a1e      	ldr	r2, [pc, #120]	; (80b0 <Adc_Ip_ClearLatchedTriggers+0x80>)
    8038:	9b01      	ldr	r3, [sp, #4]
    803a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    803e:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8040:	2300      	movs	r3, #0
    8042:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8044:	2100      	movs	r1, #0
    8046:	481b      	ldr	r0, [pc, #108]	; (80b4 <Adc_Ip_ClearLatchedTriggers+0x84>)
    8048:	f7f9 ff24 	bl	1e94 <OsIf_MicrosToTicks>
    804c:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    804e:	2000      	movs	r0, #0
    8050:	f7f9 fed4 	bl	1dfc <OsIf_GetCounter>
    8054:	4603      	mov	r3, r0
    8056:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8058:	2300      	movs	r3, #0
    805a:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    805c:	f008 fa74 	bl	10548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    8060:	9b05      	ldr	r3, [sp, #20]
    8062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8064:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8068:	9b05      	ldr	r3, [sp, #20]
    806a:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    806c:	f008 fa98 	bl	105a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8070:	e008      	b.n	8084 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8072:	ab03      	add	r3, sp, #12
    8074:	2100      	movs	r1, #0
    8076:	4618      	mov	r0, r3
    8078:	f7f9 fed9 	bl	1e2e <OsIf_GetElapsed>
    807c:	4602      	mov	r2, r0
    807e:	9b06      	ldr	r3, [sp, #24]
    8080:	4413      	add	r3, r2
    8082:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8084:	9b05      	ldr	r3, [sp, #20]
    8086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    808a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    808e:	2b00      	cmp	r3, #0
    8090:	d003      	beq.n	809a <Adc_Ip_ClearLatchedTriggers+0x6a>
    8092:	9a06      	ldr	r2, [sp, #24]
    8094:	9b04      	ldr	r3, [sp, #16]
    8096:	429a      	cmp	r2, r3
    8098:	d3eb      	bcc.n	8072 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    809a:	9a06      	ldr	r2, [sp, #24]
    809c:	9b04      	ldr	r3, [sp, #16]
    809e:	429a      	cmp	r2, r3
    80a0:	d301      	bcc.n	80a6 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    80a2:	2302      	movs	r3, #2
    80a4:	9307      	str	r3, [sp, #28]
    }

    return Status;
    80a6:	9b07      	ldr	r3, [sp, #28]
}
    80a8:	4618      	mov	r0, r3
    80aa:	b009      	add	sp, #36	; 0x24
    80ac:	f85d fb04 	ldr.w	pc, [sp], #4
    80b0:	00018514 	.word	0x00018514
    80b4:	000186a0 	.word	0x000186a0

000080b8 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    80b8:	b500      	push	{lr}
    80ba:	b085      	sub	sp, #20
    80bc:	9001      	str	r0, [sp, #4]
    80be:	460b      	mov	r3, r1
    80c0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    80c4:	4a0c      	ldr	r2, [pc, #48]	; (80f8 <Adc_Ip_EnableChannelNotification+0x40>)
    80c6:	9b01      	ldr	r3, [sp, #4]
    80c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80cc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    80ce:	f008 fc79 	bl	109c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    80d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    80d6:	9b03      	ldr	r3, [sp, #12]
    80d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    80dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    80e0:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    80e4:	9b03      	ldr	r3, [sp, #12]
    80e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    80ea:	f008 fc97 	bl	10a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    80ee:	bf00      	nop
    80f0:	b005      	add	sp, #20
    80f2:	f85d fb04 	ldr.w	pc, [sp], #4
    80f6:	bf00      	nop
    80f8:	00018514 	.word	0x00018514

000080fc <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    80fc:	b500      	push	{lr}
    80fe:	b085      	sub	sp, #20
    8100:	9001      	str	r0, [sp, #4]
    8102:	460b      	mov	r3, r1
    8104:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8108:	4a0c      	ldr	r2, [pc, #48]	; (813c <Adc_Ip_DisableChannelNotification+0x40>)
    810a:	9b01      	ldr	r3, [sp, #4]
    810c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8110:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    8112:	f008 fca9 	bl	10a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    8116:	f89d 2003 	ldrb.w	r2, [sp, #3]
    811a:	9b03      	ldr	r3, [sp, #12]
    811c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8120:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8124:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    8128:	9b03      	ldr	r3, [sp, #12]
    812a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    812e:	f008 fcc7 	bl	10ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    8132:	bf00      	nop
    8134:	b005      	add	sp, #20
    8136:	f85d fb04 	ldr.w	pc, [sp], #4
    813a:	bf00      	nop
    813c:	00018514 	.word	0x00018514

00008140 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    8140:	b500      	push	{lr}
    8142:	b085      	sub	sp, #20
    8144:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8146:	4a0a      	ldr	r2, [pc, #40]	; (8170 <Adc_Ip_ClearTrigErrReg+0x30>)
    8148:	9b01      	ldr	r3, [sp, #4]
    814a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    814e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    8150:	f008 fe24 	bl	10d9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    8154:	9b03      	ldr	r3, [sp, #12]
    8156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    815a:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    815e:	9b03      	ldr	r3, [sp, #12]
    8160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    8164:	f008 fe46 	bl	10df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    8168:	bf00      	nop
    816a:	b005      	add	sp, #20
    816c:	f85d fb04 	ldr.w	pc, [sp], #4
    8170:	00018514 	.word	0x00018514

00008174 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    8174:	b084      	sub	sp, #16
    8176:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8178:	4a06      	ldr	r2, [pc, #24]	; (8194 <Adc_Ip_GetTrigErrReg+0x20>)
    817a:	9b01      	ldr	r3, [sp, #4]
    817c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8180:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    8182:	9b03      	ldr	r3, [sp, #12]
    8184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8188:	0e1b      	lsrs	r3, r3, #24
    818a:	f003 030f 	and.w	r3, r3, #15
}
    818e:	4618      	mov	r0, r3
    8190:	b004      	add	sp, #16
    8192:	4770      	bx	lr
    8194:	00018514 	.word	0x00018514

00008198 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8198:	b082      	sub	sp, #8
    819a:	9001      	str	r0, [sp, #4]
    819c:	460b      	mov	r3, r1
    819e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    81a2:	4a06      	ldr	r2, [pc, #24]	; (81bc <Adc_Ip_GetDataAddress+0x24>)
    81a4:	9b01      	ldr	r3, [sp, #4]
    81a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    81aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    81ae:	3312      	adds	r3, #18
    81b0:	009b      	lsls	r3, r3, #2
    81b2:	4413      	add	r3, r2
}
    81b4:	4618      	mov	r0, r3
    81b6:	b002      	add	sp, #8
    81b8:	4770      	bx	lr
    81ba:	bf00      	nop
    81bc:	00018514 	.word	0x00018514

000081c0 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    81c0:	b088      	sub	sp, #32
    81c2:	9003      	str	r0, [sp, #12]
    81c4:	9102      	str	r1, [sp, #8]
    81c6:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    81c8:	4a25      	ldr	r2, [pc, #148]	; (8260 <Adc_Ip_GetChanData+0xa0>)
    81ca:	9b03      	ldr	r3, [sp, #12]
    81cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81d0:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    81d2:	2300      	movs	r3, #0
    81d4:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    81d6:	2300      	movs	r3, #0
    81d8:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    81dc:	2300      	movs	r3, #0
    81de:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    81e2:	2300      	movs	r3, #0
    81e4:	f88d 3019 	strb.w	r3, [sp, #25]
    81e8:	e019      	b.n	821e <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    81ea:	f89d 1019 	ldrb.w	r1, [sp, #25]
    81ee:	481d      	ldr	r0, [pc, #116]	; (8264 <Adc_Ip_GetChanData+0xa4>)
    81f0:	9a03      	ldr	r2, [sp, #12]
    81f2:	4613      	mov	r3, r2
    81f4:	00db      	lsls	r3, r3, #3
    81f6:	4413      	add	r3, r2
    81f8:	005b      	lsls	r3, r3, #1
    81fa:	4413      	add	r3, r2
    81fc:	440b      	add	r3, r1
    81fe:	3302      	adds	r3, #2
    8200:	009b      	lsls	r3, r3, #2
    8202:	4403      	add	r3, r0
    8204:	685b      	ldr	r3, [r3, #4]
    8206:	9a02      	ldr	r2, [sp, #8]
    8208:	429a      	cmp	r2, r3
    820a:	d103      	bne.n	8214 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    820c:	2301      	movs	r3, #1
    820e:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    8212:	e008      	b.n	8226 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8214:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8218:	3301      	adds	r3, #1
    821a:	f88d 3019 	strb.w	r3, [sp, #25]
    821e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8222:	2b0f      	cmp	r3, #15
    8224:	d9e1      	bls.n	81ea <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8226:	f89d 3018 	ldrb.w	r3, [sp, #24]
    822a:	2b00      	cmp	r3, #0
    822c:	d00e      	beq.n	824c <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    822e:	f89d 2019 	ldrb.w	r2, [sp, #25]
    8232:	9b05      	ldr	r3, [sp, #20]
    8234:	3212      	adds	r2, #18
    8236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    823a:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    823e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8242:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8246:	f8ad 301a 	strh.w	r3, [sp, #26]
    824a:	e001      	b.n	8250 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    824c:	2301      	movs	r3, #1
    824e:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8250:	9b01      	ldr	r3, [sp, #4]
    8252:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8256:	801a      	strh	r2, [r3, #0]

    return Status;
    8258:	9b07      	ldr	r3, [sp, #28]
}
    825a:	4618      	mov	r0, r3
    825c:	b008      	add	sp, #32
    825e:	4770      	bx	lr
    8260:	00018514 	.word	0x00018514
    8264:	1fff8d00 	.word	0x1fff8d00

00008268 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8268:	b500      	push	{lr}
    826a:	b085      	sub	sp, #20
    826c:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    826e:	2300      	movs	r3, #0
    8270:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8274:	2300      	movs	r3, #0
    8276:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    827a:	4a32      	ldr	r2, [pc, #200]	; (8344 <Adc_Ip_IRQHandler+0xdc>)
    827c:	9b01      	ldr	r3, [sp, #4]
    827e:	214c      	movs	r1, #76	; 0x4c
    8280:	fb01 f303 	mul.w	r3, r1, r3
    8284:	4413      	add	r3, r2
    8286:	781b      	ldrb	r3, [r3, #0]
    8288:	2b00      	cmp	r3, #0
    828a:	d040      	beq.n	830e <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    828c:	4a2d      	ldr	r2, [pc, #180]	; (8344 <Adc_Ip_IRQHandler+0xdc>)
    828e:	9b01      	ldr	r3, [sp, #4]
    8290:	214c      	movs	r1, #76	; 0x4c
    8292:	fb01 f303 	mul.w	r3, r1, r3
    8296:	4413      	add	r3, r2
    8298:	3308      	adds	r3, #8
    829a:	681b      	ldr	r3, [r3, #0]
    829c:	2b00      	cmp	r3, #0
    829e:	d04d      	beq.n	833c <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    82a0:	2300      	movs	r3, #0
    82a2:	f88d 300f 	strb.w	r3, [sp, #15]
    82a6:	e02d      	b.n	8304 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    82a8:	4a27      	ldr	r2, [pc, #156]	; (8348 <Adc_Ip_IRQHandler+0xe0>)
    82aa:	9b01      	ldr	r3, [sp, #4]
    82ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    82b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    82b8:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    82ba:	9802      	ldr	r0, [sp, #8]
    82bc:	f7ff fa20 	bl	7700 <Adc_HwAcc_GetAIEN>
    82c0:	4603      	mov	r3, r0
    82c2:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    82c6:	9802      	ldr	r0, [sp, #8]
    82c8:	f7ff fa28 	bl	771c <Adc_HwAcc_GetCOCO>
    82cc:	4603      	mov	r3, r0
    82ce:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    82d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    82d6:	2b00      	cmp	r3, #0
    82d8:	d00f      	beq.n	82fa <Adc_Ip_IRQHandler+0x92>
    82da:	f89d 300d 	ldrb.w	r3, [sp, #13]
    82de:	2b00      	cmp	r3, #0
    82e0:	d00b      	beq.n	82fa <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    82e2:	4a18      	ldr	r2, [pc, #96]	; (8344 <Adc_Ip_IRQHandler+0xdc>)
    82e4:	9b01      	ldr	r3, [sp, #4]
    82e6:	214c      	movs	r1, #76	; 0x4c
    82e8:	fb01 f303 	mul.w	r3, r1, r3
    82ec:	4413      	add	r3, r2
    82ee:	3308      	adds	r3, #8
    82f0:	681b      	ldr	r3, [r3, #0]
    82f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    82f6:	4610      	mov	r0, r2
    82f8:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    82fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    82fe:	3301      	adds	r3, #1
    8300:	f88d 300f 	strb.w	r3, [sp, #15]
    8304:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8308:	2b0f      	cmp	r3, #15
    830a:	d9cd      	bls.n	82a8 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    830c:	e016      	b.n	833c <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    830e:	2300      	movs	r3, #0
    8310:	f88d 300f 	strb.w	r3, [sp, #15]
    8314:	e00e      	b.n	8334 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8316:	4a0c      	ldr	r2, [pc, #48]	; (8348 <Adc_Ip_IRQHandler+0xe0>)
    8318:	9b01      	ldr	r3, [sp, #4]
    831a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    831e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8322:	4611      	mov	r1, r2
    8324:	4618      	mov	r0, r3
    8326:	f7ff fa07 	bl	7738 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    832a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    832e:	3301      	adds	r3, #1
    8330:	f88d 300f 	strb.w	r3, [sp, #15]
    8334:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8338:	2b0f      	cmp	r3, #15
    833a:	d9ec      	bls.n	8316 <Adc_Ip_IRQHandler+0xae>
}
    833c:	bf00      	nop
    833e:	b005      	add	sp, #20
    8340:	f85d fb04 	ldr.w	pc, [sp], #4
    8344:	1fff8d00 	.word	0x1fff8d00
    8348:	00018514 	.word	0x00018514

0000834c <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    834c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    834e:	2000      	movs	r0, #0
    8350:	f7ff ff8a 	bl	8268 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8354:	f3bf 8f4f 	dsb	sy
}
    8358:	bf00      	nop
    835a:	bd08      	pop	{r3, pc}

0000835c <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    835c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    835e:	2001      	movs	r0, #1
    8360:	f7ff ff82 	bl	8268 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8364:	f3bf 8f4f 	dsb	sy
}
    8368:	bf00      	nop
    836a:	bd08      	pop	{r3, pc}

0000836c <Lpspi_Ip_ChannelFinished>:
* @param[in]     Instance            Index of the hardware instance.
* @param[in]     ErrorFlag           Save the status of transfer error flags
* @return void
*/
static void Lpspi_Ip_ChannelFinished(uint8 Instance, boolean ErrorFlag)
{
    836c:	b500      	push	{lr}
    836e:	b085      	sub	sp, #20
    8370:	4603      	mov	r3, r0
    8372:	460a      	mov	r2, r1
    8374:	f88d 3007 	strb.w	r3, [sp, #7]
    8378:	4613      	mov	r3, r2
    837a:	f88d 3006 	strb.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    837e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8382:	4a12      	ldr	r2, [pc, #72]	; (83cc <Lpspi_Ip_ChannelFinished+0x60>)
    8384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8388:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_EventType EventState = LPSPI_IP_EVENT_FAULT;
    838a:	2301      	movs	r3, #1
    838c:	9303      	str	r3, [sp, #12]
    
    if(TRUE == ErrorFlag)
    838e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8392:	2b00      	cmp	r3, #0
    8394:	d005      	beq.n	83a2 <Lpspi_Ip_ChannelFinished+0x36>
    {
        State->Status = LPSPI_IP_FAULT;
    8396:	9b02      	ldr	r3, [sp, #8]
    8398:	2203      	movs	r2, #3
    839a:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_FAULT;
    839c:	2301      	movs	r3, #1
    839e:	9303      	str	r3, [sp, #12]
    83a0:	e004      	b.n	83ac <Lpspi_Ip_ChannelFinished+0x40>
    }
    else
    {
        State->Status = LPSPI_IP_IDLE;
    83a2:	9b02      	ldr	r3, [sp, #8]
    83a4:	2201      	movs	r2, #1
    83a6:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_END_TRANSFER;
    83a8:	2300      	movs	r3, #0
    83aa:	9303      	str	r3, [sp, #12]
    }

    if (NULL_PTR != State->Callback)
    83ac:	9b02      	ldr	r3, [sp, #8]
    83ae:	691b      	ldr	r3, [r3, #16]
    83b0:	2b00      	cmp	r3, #0
    83b2:	d006      	beq.n	83c2 <Lpspi_Ip_ChannelFinished+0x56>
    {
        State->Callback(Instance, EventState);
    83b4:	9b02      	ldr	r3, [sp, #8]
    83b6:	691b      	ldr	r3, [r3, #16]
    83b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    83bc:	9903      	ldr	r1, [sp, #12]
    83be:	4610      	mov	r0, r2
    83c0:	4798      	blx	r3
    }
}
    83c2:	bf00      	nop
    83c4:	b005      	add	sp, #20
    83c6:	f85d fb04 	ldr.w	pc, [sp], #4
    83ca:	bf00      	nop
    83cc:	1fff8dd8 	.word	0x1fff8dd8

000083d0 <Lpspi_Ip_TransferProcess>:
*
* @param[in]     Instance      Index of the hardware instance.
* @return void
*/
static void Lpspi_Ip_TransferProcess(uint8 Instance)
{
    83d0:	b510      	push	{r4, lr}
    83d2:	b092      	sub	sp, #72	; 0x48
    83d4:	4603      	mov	r3, r0
    83d6:	f88d 300f 	strb.w	r3, [sp, #15]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    83da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83de:	4aad      	ldr	r2, [pc, #692]	; (8694 <Lpspi_Ip_TransferProcess+0x2c4>)
    83e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83e4:	9310      	str	r3, [sp, #64]	; 0x40
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    83e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83ea:	4aab      	ldr	r2, [pc, #684]	; (8698 <Lpspi_Ip_TransferProcess+0x2c8>)
    83ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83f0:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32 SrStatusRegister;
    uint8 NumberOfWrites = 0u;
    83f2:	2300      	movs	r3, #0
    83f4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    uint8 NumberOfReads = 0u;
    83f8:	2300      	movs	r3, #0
    83fa:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    boolean ErrorFlag = FALSE;
    83fe:	2300      	movs	r3, #0
    8400:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45

    if (LPSPI_IP_BUSY == State->Status)
    8404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8406:	685b      	ldr	r3, [r3, #4]
    8408:	2b02      	cmp	r3, #2
    840a:	f040 821e 	bne.w	884a <Lpspi_Ip_TransferProcess+0x47a>
    {
        /* Read Status and clear all flags. */
        SrStatusRegister = Base->SR;
    840e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8410:	695b      	ldr	r3, [r3, #20]
    8412:	930e      	str	r3, [sp, #56]	; 0x38
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    8414:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8416:	695b      	ldr	r3, [r3, #20]
    8418:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    841c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    841e:	615a      	str	r2, [r3, #20]
        
        if ((SrStatusRegister & (LPSPI_SR_REF_MASK | LPSPI_SR_TEF_MASK)) != 0u)
    8420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8422:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    8426:	2b00      	cmp	r3, #0
    8428:	d003      	beq.n	8432 <Lpspi_Ip_TransferProcess+0x62>
        {
            /* mark error flag */
            ErrorFlag = TRUE;
    842a:	2301      	movs	r3, #1
    842c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    8430:	e1f6      	b.n	8820 <Lpspi_Ip_TransferProcess+0x450>
        }
        else
        {
            /* RECEIVE */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    8432:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8436:	0c1b      	lsrs	r3, r3, #16
    8438:	b2db      	uxtb	r3, r3
    843a:	f003 0307 	and.w	r3, r3, #7
    843e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if (NumberOfReads != 0u)
    8442:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    8446:	2b00      	cmp	r3, #0
    8448:	f000 80cb 	beq.w	85e2 <Lpspi_Ip_TransferProcess+0x212>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    844c:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    8450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8452:	8b1b      	ldrh	r3, [r3, #24]
    8454:	4619      	mov	r1, r3
    8456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8458:	8a9b      	ldrh	r3, [r3, #20]
    845a:	1acb      	subs	r3, r1, r3
    845c:	429a      	cmp	r2, r3
    845e:	dd08      	ble.n	8472 <Lpspi_Ip_TransferProcess+0xa2>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    8460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8462:	8b1b      	ldrh	r3, [r3, #24]
    8464:	b2da      	uxtb	r2, r3
    8466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8468:	8a9b      	ldrh	r3, [r3, #20]
    846a:	b2db      	uxtb	r3, r3
    846c:	1ad3      	subs	r3, r2, r3
    846e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out and
                  CurrentTxFifoSlot was minus 1 when prepare TX channel */
                if (0u == State->RxIndex)
    8472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8474:	8a9b      	ldrh	r3, [r3, #20]
    8476:	2b00      	cmp	r3, #0
    8478:	d107      	bne.n	848a <Lpspi_Ip_TransferProcess+0xba>
                {
                    State->CurrentTxFifoSlot += 1u;
    847a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    847c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8480:	3301      	adds	r3, #1
    8482:	b2da      	uxtb	r2, r3
    8484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    848a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    848e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    8492:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    8496:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    849a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    849e:	4a7d      	ldr	r2, [pc, #500]	; (8694 <Lpspi_Ip_TransferProcess+0x2c4>)
    84a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84a4:	930c      	str	r3, [sp, #48]	; 0x30
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    84a6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    84aa:	4a7b      	ldr	r2, [pc, #492]	; (8698 <Lpspi_Ip_TransferProcess+0x2c8>)
    84ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84b0:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 Data = 0u;
    84b2:	2300      	movs	r3, #0
    84b4:	930a      	str	r3, [sp, #40]	; 0x28
    uint8 Index = 0u;
    84b6:	2300      	movs	r3, #0
    84b8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    if (NULL_PTR != State->RxBuffer)
    84bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84be:	689b      	ldr	r3, [r3, #8]
    84c0:	2b00      	cmp	r3, #0
    84c2:	d069      	beq.n	8598 <Lpspi_Ip_TransferProcess+0x1c8>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    84c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    84c8:	68db      	ldr	r3, [r3, #12]
    84ca:	881b      	ldrh	r3, [r3, #0]
    84cc:	2b08      	cmp	r3, #8
    84ce:	d81e      	bhi.n	850e <Lpspi_Ip_TransferProcess+0x13e>
            for (Index = 0; Index < NumberOfReads; Index++)
    84d0:	2300      	movs	r3, #0
    84d2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    84d6:	e013      	b.n	8500 <Lpspi_Ip_TransferProcess+0x130>
                Data = Base->RDR;
    84d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    84da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    84dc:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    84de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84e0:	689b      	ldr	r3, [r3, #8]
    84e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    84e4:	8a92      	ldrh	r2, [r2, #20]
    84e6:	4611      	mov	r1, r2
    84e8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    84ec:	440a      	add	r2, r1
    84ee:	4413      	add	r3, r2
    84f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    84f2:	b2d2      	uxtb	r2, r2
    84f4:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    84f6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    84fa:	3301      	adds	r3, #1
    84fc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8500:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    8504:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8508:	429a      	cmp	r2, r3
    850a:	d8e5      	bhi.n	84d8 <Lpspi_Ip_TransferProcess+0x108>
    850c:	e055      	b.n	85ba <Lpspi_Ip_TransferProcess+0x1ea>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    850e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8512:	68db      	ldr	r3, [r3, #12]
    8514:	881b      	ldrh	r3, [r3, #0]
    8516:	2b10      	cmp	r3, #16
    8518:	d81f      	bhi.n	855a <Lpspi_Ip_TransferProcess+0x18a>
            for (Index = 0; Index < NumberOfReads; Index++)
    851a:	2300      	movs	r3, #0
    851c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8520:	e014      	b.n	854c <Lpspi_Ip_TransferProcess+0x17c>
                Data = Base->RDR;
    8522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8526:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    8528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    852a:	689a      	ldr	r2, [r3, #8]
    852c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    852e:	8a9b      	ldrh	r3, [r3, #20]
    8530:	4619      	mov	r1, r3
    8532:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8536:	440b      	add	r3, r1
    8538:	005b      	lsls	r3, r3, #1
    853a:	4413      	add	r3, r2
    853c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    853e:	b292      	uxth	r2, r2
    8540:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8542:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8546:	3301      	adds	r3, #1
    8548:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    854c:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    8550:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8554:	429a      	cmp	r2, r3
    8556:	d8e4      	bhi.n	8522 <Lpspi_Ip_TransferProcess+0x152>
    8558:	e02f      	b.n	85ba <Lpspi_Ip_TransferProcess+0x1ea>
            for (Index = 0; Index < NumberOfReads; Index++)
    855a:	2300      	movs	r3, #0
    855c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8560:	e013      	b.n	858a <Lpspi_Ip_TransferProcess+0x1ba>
                Data = Base->RDR;
    8562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8566:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    8568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    856a:	689a      	ldr	r2, [r3, #8]
    856c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    856e:	8a9b      	ldrh	r3, [r3, #20]
    8570:	4619      	mov	r1, r3
    8572:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8576:	440b      	add	r3, r1
    8578:	009b      	lsls	r3, r3, #2
    857a:	4413      	add	r3, r2
    857c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    857e:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8580:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8584:	3301      	adds	r3, #1
    8586:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    858a:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    858e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8592:	429a      	cmp	r2, r3
    8594:	d8e5      	bhi.n	8562 <Lpspi_Ip_TransferProcess+0x192>
    8596:	e010      	b.n	85ba <Lpspi_Ip_TransferProcess+0x1ea>
        for (Index = 0; Index < NumberOfReads; Index++)
    8598:	2300      	movs	r3, #0
    859a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    859e:	e006      	b.n	85ae <Lpspi_Ip_TransferProcess+0x1de>
            (void)Base->RDR;
    85a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    85a4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85a8:	3301      	adds	r3, #1
    85aa:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    85ae:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    85b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85b6:	429a      	cmp	r2, r3
    85b8:	d8f2      	bhi.n	85a0 <Lpspi_Ip_TransferProcess+0x1d0>
    State->RxIndex += NumberOfReads;
    85ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85bc:	8a9a      	ldrh	r2, [r3, #20]
    85be:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    85c2:	b29b      	uxth	r3, r3
    85c4:	4413      	add	r3, r2
    85c6:	b29a      	uxth	r2, r3
    85c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85ca:	829a      	strh	r2, [r3, #20]
}
    85cc:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    85ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85d0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    85d4:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    85d8:	4413      	add	r3, r2
    85da:	b2da      	uxtb	r2, r3
    85dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            to fill TX FIFO. At that time, another interrupt occurred and preemptive current interrupt, and the time to process that interrupt is longer than the time to transfer all frames 
            in TX FIFO. So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from that interrupt and fill TX FIFO until full and exist SPI interrupt function. 
            And if there is a interrupt occurred with higher priority of SPI interrupt and the time to process that interrupt is longer than the time to transfer all frames in TX FIFO. 
            So, RX FIFO can be overflow due to SPI interrupt function is not serviced to read RX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (State->TxDoneFlag != TRUE))
    85e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    85e8:	2b00      	cmp	r3, #0
    85ea:	f000 8119 	beq.w	8820 <Lpspi_Ip_TransferProcess+0x450>
    85ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    85f4:	f083 0301 	eor.w	r3, r3, #1
    85f8:	b2db      	uxtb	r3, r3
    85fa:	2b00      	cmp	r3, #0
    85fc:	f000 8110 	beq.w	8820 <Lpspi_Ip_TransferProcess+0x450>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    8600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8602:	8b5a      	ldrh	r2, [r3, #26]
    8604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8606:	8adb      	ldrh	r3, [r3, #22]
    8608:	429a      	cmp	r2, r3
    860a:	f000 80ca 	beq.w	87a2 <Lpspi_Ip_TransferProcess+0x3d2>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    860e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8614:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    8618:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
    861c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    861e:	8b5b      	ldrh	r3, [r3, #26]
    8620:	4619      	mov	r1, r3
    8622:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8624:	8adb      	ldrh	r3, [r3, #22]
    8626:	1acb      	subs	r3, r1, r3
    8628:	429a      	cmp	r2, r3
    862a:	dd08      	ble.n	863e <Lpspi_Ip_TransferProcess+0x26e>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    862c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    862e:	8b5b      	ldrh	r3, [r3, #26]
    8630:	b2da      	uxtb	r2, r3
    8632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8634:	8adb      	ldrh	r3, [r3, #22]
    8636:	b2db      	uxtb	r3, r3
    8638:	1ad3      	subs	r3, r2, r3
    863a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    863e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8642:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    8646:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    864a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    864e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8652:	4a10      	ldr	r2, [pc, #64]	; (8694 <Lpspi_Ip_TransferProcess+0x2c4>)
    8654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8658:	9308      	str	r3, [sp, #32]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    865a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    865e:	4a0e      	ldr	r2, [pc, #56]	; (8698 <Lpspi_Ip_TransferProcess+0x2c8>)
    8660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8664:	9307      	str	r3, [sp, #28]
    uint32 Data = 0u;
    8666:	2300      	movs	r3, #0
    8668:	9306      	str	r3, [sp, #24]
    uint8 Index = 0u;
    866a:	2300      	movs	r3, #0
    866c:	f88d 3017 	strb.w	r3, [sp, #23]
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    8670:	9b07      	ldr	r3, [sp, #28]
    8672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8674:	68db      	ldr	r3, [r3, #12]
    8676:	685b      	ldr	r3, [r3, #4]
    8678:	9306      	str	r3, [sp, #24]
    if (NULL_PTR != State->TxBuffer)
    867a:	9b07      	ldr	r3, [sp, #28]
    867c:	68db      	ldr	r3, [r3, #12]
    867e:	2b00      	cmp	r3, #0
    8680:	d068      	beq.n	8754 <Lpspi_Ip_TransferProcess+0x384>
        if (State->TxFrameSize < 9u)
    8682:	9b07      	ldr	r3, [sp, #28]
    8684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8686:	2b08      	cmp	r3, #8
    8688:	d822      	bhi.n	86d0 <Lpspi_Ip_TransferProcess+0x300>
            for (Index = 0; Index < NumberOfWrites; Index++)
    868a:	2300      	movs	r3, #0
    868c:	f88d 3017 	strb.w	r3, [sp, #23]
    8690:	e017      	b.n	86c2 <Lpspi_Ip_TransferProcess+0x2f2>
    8692:	bf00      	nop
    8694:	0001851c 	.word	0x0001851c
    8698:	1fff8dd8 	.word	0x1fff8dd8
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    869c:	9b07      	ldr	r3, [sp, #28]
    869e:	68db      	ldr	r3, [r3, #12]
    86a0:	9a07      	ldr	r2, [sp, #28]
    86a2:	8ad2      	ldrh	r2, [r2, #22]
    86a4:	4611      	mov	r1, r2
    86a6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    86aa:	440a      	add	r2, r1
    86ac:	4413      	add	r3, r2
    86ae:	781b      	ldrb	r3, [r3, #0]
    86b0:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    86b2:	9b08      	ldr	r3, [sp, #32]
    86b4:	9a06      	ldr	r2, [sp, #24]
    86b6:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    86b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    86bc:	3301      	adds	r3, #1
    86be:	f88d 3017 	strb.w	r3, [sp, #23]
    86c2:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    86c6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    86ca:	429a      	cmp	r2, r3
    86cc:	d8e6      	bhi.n	869c <Lpspi_Ip_TransferProcess+0x2cc>
    86ce:	e053      	b.n	8778 <Lpspi_Ip_TransferProcess+0x3a8>
        else if (State->TxFrameSize < 17u)
    86d0:	9b07      	ldr	r3, [sp, #28]
    86d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    86d4:	2b10      	cmp	r3, #16
    86d6:	d81e      	bhi.n	8716 <Lpspi_Ip_TransferProcess+0x346>
            for (Index = 0; Index < NumberOfWrites; Index++)
    86d8:	2300      	movs	r3, #0
    86da:	f88d 3017 	strb.w	r3, [sp, #23]
    86de:	e013      	b.n	8708 <Lpspi_Ip_TransferProcess+0x338>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    86e0:	9b07      	ldr	r3, [sp, #28]
    86e2:	68da      	ldr	r2, [r3, #12]
    86e4:	9b07      	ldr	r3, [sp, #28]
    86e6:	8adb      	ldrh	r3, [r3, #22]
    86e8:	4619      	mov	r1, r3
    86ea:	f89d 3017 	ldrb.w	r3, [sp, #23]
    86ee:	440b      	add	r3, r1
    86f0:	005b      	lsls	r3, r3, #1
    86f2:	4413      	add	r3, r2
    86f4:	881b      	ldrh	r3, [r3, #0]
    86f6:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    86f8:	9b08      	ldr	r3, [sp, #32]
    86fa:	9a06      	ldr	r2, [sp, #24]
    86fc:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    86fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8702:	3301      	adds	r3, #1
    8704:	f88d 3017 	strb.w	r3, [sp, #23]
    8708:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    870c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8710:	429a      	cmp	r2, r3
    8712:	d8e5      	bhi.n	86e0 <Lpspi_Ip_TransferProcess+0x310>
    8714:	e030      	b.n	8778 <Lpspi_Ip_TransferProcess+0x3a8>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8716:	2300      	movs	r3, #0
    8718:	f88d 3017 	strb.w	r3, [sp, #23]
    871c:	e013      	b.n	8746 <Lpspi_Ip_TransferProcess+0x376>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    871e:	9b07      	ldr	r3, [sp, #28]
    8720:	68da      	ldr	r2, [r3, #12]
    8722:	9b07      	ldr	r3, [sp, #28]
    8724:	8adb      	ldrh	r3, [r3, #22]
    8726:	4619      	mov	r1, r3
    8728:	f89d 3017 	ldrb.w	r3, [sp, #23]
    872c:	440b      	add	r3, r1
    872e:	009b      	lsls	r3, r3, #2
    8730:	4413      	add	r3, r2
    8732:	681b      	ldr	r3, [r3, #0]
    8734:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    8736:	9b08      	ldr	r3, [sp, #32]
    8738:	9a06      	ldr	r2, [sp, #24]
    873a:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    873c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8740:	3301      	adds	r3, #1
    8742:	f88d 3017 	strb.w	r3, [sp, #23]
    8746:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    874a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    874e:	429a      	cmp	r2, r3
    8750:	d8e5      	bhi.n	871e <Lpspi_Ip_TransferProcess+0x34e>
    8752:	e011      	b.n	8778 <Lpspi_Ip_TransferProcess+0x3a8>
        for (Index = 0; Index < NumberOfWrites; Index++)
    8754:	2300      	movs	r3, #0
    8756:	f88d 3017 	strb.w	r3, [sp, #23]
    875a:	e007      	b.n	876c <Lpspi_Ip_TransferProcess+0x39c>
            Base->TDR = Data;
    875c:	9b08      	ldr	r3, [sp, #32]
    875e:	9a06      	ldr	r2, [sp, #24]
    8760:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    8762:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8766:	3301      	adds	r3, #1
    8768:	f88d 3017 	strb.w	r3, [sp, #23]
    876c:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    8770:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8774:	429a      	cmp	r2, r3
    8776:	d8f1      	bhi.n	875c <Lpspi_Ip_TransferProcess+0x38c>
    State->TxIndex += NumberOfWrites;
    8778:	9b07      	ldr	r3, [sp, #28]
    877a:	8ada      	ldrh	r2, [r3, #22]
    877c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    8780:	b29b      	uxth	r3, r3
    8782:	4413      	add	r3, r2
    8784:	b29a      	uxth	r2, r3
    8786:	9b07      	ldr	r3, [sp, #28]
    8788:	82da      	strh	r2, [r3, #22]
}
    878a:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    878c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    878e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8792:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    8796:	1ad3      	subs	r3, r2, r3
    8798:	b2da      	uxtb	r2, r3
    879a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    879c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    87a0:	e03e      	b.n	8820 <Lpspi_Ip_TransferProcess+0x450>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    87a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    87a8:	2b00      	cmp	r3, #0
    87aa:	d01c      	beq.n	87e6 <Lpspi_Ip_TransferProcess+0x416>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    87ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    87b0:	68db      	ldr	r3, [r3, #12]
    87b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    87b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
    87b6:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    87b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87ba:	2200      	movs	r2, #0
    87bc:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    87be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    87c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87c4:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    87c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87c8:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    87cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87ce:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    87d0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    87d4:	9300      	str	r3, [sp, #0]
    87d6:	4623      	mov	r3, r4
    87d8:	f000 fb7a 	bl	8ed0 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    87dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87de:	2200      	movs	r2, #0
    87e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    87e4:	e01c      	b.n	8820 <Lpspi_Ip_TransferProcess+0x450>
                    }
                    else
                    {
                        State->TxDoneFlag = TRUE;
    87e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87e8:	2201      	movs	r2, #1
    87ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        /* Disable TX interrupt */
                        Base->IER &= ~LPSPI_IER_TDIE_MASK;
    87ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87f0:	699b      	ldr	r3, [r3, #24]
    87f2:	f023 0201 	bic.w	r2, r3, #1
    87f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87f8:	619a      	str	r2, [r3, #24]
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    87fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87fc:	7f1b      	ldrb	r3, [r3, #28]
    87fe:	f083 0301 	eor.w	r3, r3, #1
    8802:	b2db      	uxtb	r3, r3
    8804:	2b00      	cmp	r3, #0
    8806:	d00b      	beq.n	8820 <Lpspi_Ip_TransferProcess+0x450>
    8808:	9b10      	ldr	r3, [sp, #64]	; 0x40
    880a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    880c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8810:	2b00      	cmp	r3, #0
    8812:	d005      	beq.n	8820 <Lpspi_Ip_TransferProcess+0x450>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    8814:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    881c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    881e:	661a      	str	r2, [r3, #96]	; 0x60
                }
            }
        }
        
        /* End of transfer */
        if((State->RxIndex == State->ExpectedFifoReads) || (TRUE == ErrorFlag))
    8820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8822:	8a9a      	ldrh	r2, [r3, #20]
    8824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8826:	8b1b      	ldrh	r3, [r3, #24]
    8828:	429a      	cmp	r2, r3
    882a:	d003      	beq.n	8834 <Lpspi_Ip_TransferProcess+0x464>
    882c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    8830:	2b00      	cmp	r3, #0
    8832:	d00a      	beq.n	884a <Lpspi_Ip_TransferProcess+0x47a>
                Base->TCR |= LPSPI_TCR_RXMSK(1);
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12();
            }
            #endif
            /* Disable interrupts */
            Base->IER = 0u;
    8834:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8836:	2200      	movs	r2, #0
    8838:	619a      	str	r2, [r3, #24]
            Lpspi_Ip_ChannelFinished(Instance, ErrorFlag);
    883a:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    883e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8842:	4611      	mov	r1, r2
    8844:	4618      	mov	r0, r3
    8846:	f7ff fd91 	bl	836c <Lpspi_Ip_ChannelFinished>
        }
    }
}
    884a:	bf00      	nop
    884c:	b012      	add	sp, #72	; 0x48
    884e:	bd10      	pop	{r4, pc}

00008850 <Lpspi_Ip_Init>:
    OsIf_Trusted_Call1param(Lpspi_Ip_SetUserAccess, Instance);
}
#endif /* LPSPI_IP_ENABLE_USER_MODE_SUPPORT */
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_Init(const Lpspi_Ip_ConfigType *PhyUnitConfigPtr)
{
    8850:	b500      	push	{lr}
    8852:	b087      	sub	sp, #28
    8854:	9001      	str	r0, [sp, #4]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    8856:	2300      	movs	r3, #0
    8858:	9305      	str	r3, [sp, #20]
    uint8 Instance = 0u;
    885a:	2300      	movs	r3, #0
    885c:	f88d 3013 	strb.w	r3, [sp, #19]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(PhyUnitConfigPtr != NULL_PTR);
    #endif
    Instance = PhyUnitConfigPtr->Instance;
    8860:	9b01      	ldr	r3, [sp, #4]
    8862:	781b      	ldrb	r3, [r3, #0]
    8864:	f88d 3013 	strb.w	r3, [sp, #19]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8868:	f89d 3013 	ldrb.w	r3, [sp, #19]
    886c:	4a23      	ldr	r2, [pc, #140]	; (88fc <Lpspi_Ip_Init+0xac>)
    886e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8872:	9303      	str	r3, [sp, #12]
    Base = Lpspi_Ip_apxBases[Instance];
    8874:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8878:	4a21      	ldr	r2, [pc, #132]	; (8900 <Lpspi_Ip_Init+0xb0>)
    887a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    887e:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State == NULL_PTR);
    #endif
    Lpspi_Ip_apxStateStructureArray[Instance] = &Lpspi_Ip_axStateStructure[PhyUnitConfigPtr->StateIndex];
    8880:	9b01      	ldr	r3, [sp, #4]
    8882:	7c1b      	ldrb	r3, [r3, #16]
    8884:	461a      	mov	r2, r3
    8886:	f89d 3013 	ldrb.w	r3, [sp, #19]
    888a:	0192      	lsls	r2, r2, #6
    888c:	491d      	ldr	r1, [pc, #116]	; (8904 <Lpspi_Ip_Init+0xb4>)
    888e:	440a      	add	r2, r1
    8890:	491a      	ldr	r1, [pc, #104]	; (88fc <Lpspi_Ip_Init+0xac>)
    8892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8896:	f89d 3013 	ldrb.w	r3, [sp, #19]
    889a:	4a18      	ldr	r2, [pc, #96]	; (88fc <Lpspi_Ip_Init+0xac>)
    889c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88a0:	9303      	str	r3, [sp, #12]
    State->PhyUnitConfig = PhyUnitConfigPtr;
    88a2:	9b03      	ldr	r3, [sp, #12]
    88a4:	9a01      	ldr	r2, [sp, #4]
    88a6:	621a      	str	r2, [r3, #32]
    /* enable in debug mode to ensure CS will be kept when CPU halts at breakpoint */
    Base->CR = PhyUnitConfigPtr->Cr | LPSPI_CR_DBGEN_MASK;
    88a8:	9b01      	ldr	r3, [sp, #4]
    88aa:	685b      	ldr	r3, [r3, #4]
    88ac:	f043 0208 	orr.w	r2, r3, #8
    88b0:	9b02      	ldr	r3, [sp, #8]
    88b2:	611a      	str	r2, [r3, #16]
    Base->CFGR1 = PhyUnitConfigPtr->Cfgr1;
    88b4:	9b01      	ldr	r3, [sp, #4]
    88b6:	689a      	ldr	r2, [r3, #8]
    88b8:	9b02      	ldr	r3, [sp, #8]
    88ba:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set TX WATER. it will be set again in DMA mode */
    Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    88bc:	9b02      	ldr	r3, [sp, #8]
    88be:	2203      	movs	r2, #3
    88c0:	659a      	str	r2, [r3, #88]	; 0x58
    #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    State->ClockMode = LPSPI_IP_NORMAL_CLOCK;
    #endif
    State->KeepCs = FALSE;
    88c2:	9b03      	ldr	r3, [sp, #12]
    88c4:	2200      	movs	r2, #0
    88c6:	771a      	strb	r2, [r3, #28]
    State->FirstCmd = TRUE;
    88c8:	9b03      	ldr	r3, [sp, #12]
    88ca:	2201      	movs	r2, #1
    88cc:	775a      	strb	r2, [r3, #29]
    #if ((STD_ON == LPSPI_IP_DMA_USED) && (STD_ON == LPSPI_IP_ENABLE_DMAFASTTRANSFER_SUPPORT))
    Lpspi_Ip_TxDmaTcdSGInit(Instance);
    Lpspi_Ip_RxDmaTcdSGInit(Instance);
    #endif
    /* set State to idle */
    State->Status = LPSPI_IP_IDLE;
    88ce:	9b03      	ldr	r3, [sp, #12]
    88d0:	2201      	movs	r2, #1
    88d2:	605a      	str	r2, [r3, #4]
    (void)Lpspi_Ip_UpdateTransferMode(Instance, PhyUnitConfigPtr->TransferMode);
    88d4:	9b01      	ldr	r3, [sp, #4]
    88d6:	68da      	ldr	r2, [r3, #12]
    88d8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    88dc:	4611      	mov	r1, r2
    88de:	4618      	mov	r0, r3
    88e0:	f000 fd10 	bl	9304 <Lpspi_Ip_UpdateTransferMode>
    
    /* Enable SPI module */
    Base->CR |= LPSPI_CR_MEN_MASK;
    88e4:	9b02      	ldr	r3, [sp, #8]
    88e6:	691b      	ldr	r3, [r3, #16]
    88e8:	f043 0201 	orr.w	r2, r3, #1
    88ec:	9b02      	ldr	r3, [sp, #8]
    88ee:	611a      	str	r2, [r3, #16]
    return Status;
    88f0:	9b05      	ldr	r3, [sp, #20]
}
    88f2:	4618      	mov	r0, r3
    88f4:	b007      	add	sp, #28
    88f6:	f85d fb04 	ldr.w	pc, [sp], #4
    88fa:	bf00      	nop
    88fc:	1fff8dd8 	.word	0x1fff8dd8
    8900:	0001851c 	.word	0x0001851c
    8904:	1fff8d98 	.word	0x1fff8d98

00008908 <Lpspi_Ip_DeInit>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_DeInit(uint8 Instance)
{
    8908:	b086      	sub	sp, #24
    890a:	4603      	mov	r3, r0
    890c:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    8910:	2300      	movs	r3, #0
    8912:	9305      	str	r3, [sp, #20]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    8914:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8918:	4a11      	ldr	r2, [pc, #68]	; (8960 <Lpspi_Ip_DeInit+0x58>)
    891a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    891e:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8920:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8924:	4a0f      	ldr	r2, [pc, #60]	; (8964 <Lpspi_Ip_DeInit+0x5c>)
    8926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    892a:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_BUSY == State->Status)
    892c:	9b03      	ldr	r3, [sp, #12]
    892e:	685b      	ldr	r3, [r3, #4]
    8930:	2b02      	cmp	r3, #2
    8932:	d102      	bne.n	893a <Lpspi_Ip_DeInit+0x32>
    {
        Status = LPSPI_IP_STATUS_FAIL;
    8934:	2301      	movs	r3, #1
    8936:	9305      	str	r3, [sp, #20]
    8938:	e00e      	b.n	8958 <Lpspi_Ip_DeInit+0x50>
    }
    else
    {
        /* Use reset hardware feature. */
        Base->CR |= LPSPI_CR_RST(1u);
    893a:	9b04      	ldr	r3, [sp, #16]
    893c:	691b      	ldr	r3, [r3, #16]
    893e:	f043 0202 	orr.w	r2, r3, #2
    8942:	9b04      	ldr	r3, [sp, #16]
    8944:	611a      	str	r2, [r3, #16]
        Base->CR = 0;
    8946:	9b04      	ldr	r3, [sp, #16]
    8948:	2200      	movs	r2, #0
    894a:	611a      	str	r2, [r3, #16]

        Lpspi_Ip_apxStateStructureArray[Instance] = NULL_PTR;
    894c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8950:	4a04      	ldr	r2, [pc, #16]	; (8964 <Lpspi_Ip_DeInit+0x5c>)
    8952:	2100      	movs	r1, #0
    8954:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    return Status;
    8958:	9b05      	ldr	r3, [sp, #20]
}
    895a:	4618      	mov	r0, r3
    895c:	b006      	add	sp, #24
    895e:	4770      	bx	lr
    8960:	0001851c 	.word	0x0001851c
    8964:	1fff8dd8 	.word	0x1fff8dd8

00008968 <Lpspi_Ip_SyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            uint32 TimeOut
                                         )
{
    8968:	b510      	push	{r4, lr}
    896a:	b09a      	sub	sp, #104	; 0x68
    896c:	9005      	str	r0, [sp, #20]
    896e:	9104      	str	r1, [sp, #16]
    8970:	9203      	str	r2, [sp, #12]
    8972:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type *Base;
    Lpspi_Ip_StateStructureType *State;
    uint8 NumberOfWrites, NumberOfReads;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    8976:	2300      	movs	r3, #0
    8978:	9318      	str	r3, [sp, #96]	; 0x60
    uint32 TimeoutTicks = OsIf_MicrosToTicks(TimeOut, LPSPI_IP_TIMEOUT_METHOD);
    897a:	2100      	movs	r1, #0
    897c:	981c      	ldr	r0, [sp, #112]	; 0x70
    897e:	f7f9 fa89 	bl	1e94 <OsIf_MicrosToTicks>
    8982:	9015      	str	r0, [sp, #84]	; 0x54
    uint32 CurrentTicks = 0u; /* initialize current counter */
    8984:	2300      	movs	r3, #0
    8986:	9307      	str	r3, [sp, #28]
    uint32 ElapsedTicks = 0u; /* elapsed will give timeout */
    8988:	2300      	movs	r3, #0
    898a:	9317      	str	r3, [sp, #92]	; 0x5c
    uint8 Instance = 0u;
    898c:	2300      	movs	r3, #0
    898e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    uint32 Cfgr1 = 0u;
    8992:	2300      	movs	r3, #0
    8994:	9313      	str	r3, [sp, #76]	; 0x4c
    boolean TxDoneFlag = FALSE;
    8996:	2300      	movs	r3, #0
    8998:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    DevAssert(0u != TimeOut);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    899c:	9b05      	ldr	r3, [sp, #20]
    899e:	781b      	ldrb	r3, [r3, #0]
    89a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    89a4:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    89a8:	4a92      	ldr	r2, [pc, #584]	; (8bf4 <Lpspi_Ip_SyncTransmit+0x28c>)
    89aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89ae:	9312      	str	r3, [sp, #72]	; 0x48
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];    
    89b0:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    89b4:	4a90      	ldr	r2, [pc, #576]	; (8bf8 <Lpspi_Ip_SyncTransmit+0x290>)
    89b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89ba:	9311      	str	r3, [sp, #68]	; 0x44
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08();
    89bc:	f00d fc88 	bl	162d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>
    if (LPSPI_IP_BUSY == State->Status)
    89c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89c2:	685b      	ldr	r3, [r3, #4]
    89c4:	2b02      	cmp	r3, #2
    89c6:	d104      	bne.n	89d2 <Lpspi_Ip_SyncTransmit+0x6a>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    89c8:	f00d fcae 	bl	16328 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        Status = LPSPI_IP_STATUS_FAIL;
    89cc:	2301      	movs	r3, #1
    89ce:	9318      	str	r3, [sp, #96]	; 0x60
    89d0:	e276      	b.n	8ec0 <Lpspi_Ip_SyncTransmit+0x558>
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    89d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89d4:	2202      	movs	r2, #2
    89d6:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    89d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89da:	9a05      	ldr	r2, [sp, #20]
    89dc:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    89de:	f00d fca3 	bl	16328 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        
        /* Disable DMA requests and all interrupts */
        Base->DER = 0u;
    89e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89e4:	2200      	movs	r2, #0
    89e6:	61da      	str	r2, [r3, #28]
        Base->IER = 0u;
    89e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89ea:	2200      	movs	r2, #0
    89ec:	619a      	str	r2, [r3, #24]
        
        /* Update State structure. */
        State->NextTransferConfigAvailable = State->KeepCs;
    89ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89f0:	7f1a      	ldrb	r2, [r3, #28]
    89f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    89f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89fa:	7f5b      	ldrb	r3, [r3, #29]
    89fc:	2b00      	cmp	r3, #0
    89fe:	d030      	beq.n	8a62 <Lpspi_Ip_SyncTransmit+0xfa>
            /* Makes sure that FIFOs will be empty before start new transfer session. 
            There is maybe a frame in RX shifter register (previous transfer is broken and CS did not de-assert).
            So use reset FIFO do not prevent the potential issue. So reset module by software reset bit should be used here */
            /* Reset FIFOs using CR[RST] bit */
            /* store CFGR1 and restore after all registers are reset */
            Cfgr1 = Base->CFGR1;
    8a00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a04:	9313      	str	r3, [sp, #76]	; 0x4c
            Base->CR |= LPSPI_CR_RST_MASK;
    8a06:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a08:	691b      	ldr	r3, [r3, #16]
    8a0a:	f043 0202 	orr.w	r2, r3, #2
    8a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a10:	611a      	str	r2, [r3, #16]
            Base->CR &= ~LPSPI_CR_RST_MASK;
    8a12:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a14:	691b      	ldr	r3, [r3, #16]
    8a16:	f023 0202 	bic.w	r2, r3, #2
    8a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a1c:	611a      	str	r2, [r3, #16]
            /* restore CFGR1 */
            Base->CFGR1 = Cfgr1;
    8a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8a22:	625a      	str	r2, [r3, #36]	; 0x24
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    8a24:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a26:	695b      	ldr	r3, [r3, #20]
    8a28:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    8a2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a2e:	615a      	str	r2, [r3, #20]

            #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
            Base->CCR = ExternalDevice->Ccr[State->ClockMode];
            #else
            Base->CCR = ExternalDevice->Ccr;
    8a30:	9b05      	ldr	r3, [sp, #20]
    8a32:	685a      	ldr	r2, [r3, #4]
    8a34:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a36:	641a      	str	r2, [r3, #64]	; 0x40
            #endif
                /* Reset current FIFO slots are available to fill at beginning of job (HLD).*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    8a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a3a:	2204      	movs	r2, #4
    8a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    8a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a44:	68db      	ldr	r3, [r3, #12]
    8a46:	881a      	ldrh	r2, [r3, #0]
    8a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a4c:	68db      	ldr	r3, [r3, #12]
    8a4e:	7899      	ldrb	r1, [r3, #2]
    8a50:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8a54:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8a58:	9300      	str	r3, [sp, #0]
    8a5a:	460b      	mov	r3, r1
    8a5c:	9904      	ldr	r1, [sp, #16]
    8a5e:	f000 fa37 	bl	8ed0 <Lpspi_TransmitTxInit>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    8a62:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a66:	68db      	ldr	r3, [r3, #12]
    8a68:	881a      	ldrh	r2, [r3, #0]
    8a6a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8a6e:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8a72:	9903      	ldr	r1, [sp, #12]
    8a74:	f000 facc 	bl	9010 <Lpspi_TransmitRxInit>
        /* initialize current counter */
        CurrentTicks = OsIf_GetCounter(LPSPI_IP_TIMEOUT_METHOD);
    8a78:	2000      	movs	r0, #0
    8a7a:	f7f9 f9bf 	bl	1dfc <OsIf_GetCounter>
    8a7e:	4603      	mov	r3, r0
    8a80:	9307      	str	r3, [sp, #28]
        while(State->RxIndex != State->ExpectedFifoReads)
    8a82:	e202      	b.n	8e8a <Lpspi_Ip_SyncTransmit+0x522>
        {
            /* RECEIVE DATA */
            /* The receiving should be performed first because maybe have a last frame in RX FIFO from previous channel
                , it should be read to clear RXFIFO before start a new write to TXFIFO */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    8a84:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8a88:	0c1b      	lsrs	r3, r3, #16
    8a8a:	b2db      	uxtb	r3, r3
    8a8c:	f003 0307 	and.w	r3, r3, #7
    8a90:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            /* Limits to remaining frames. */
            
            if (NumberOfReads != 0u)
    8a94:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8a98:	2b00      	cmp	r3, #0
    8a9a:	f000 80d2 	beq.w	8c42 <Lpspi_Ip_SyncTransmit+0x2da>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    8a9e:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
    8aa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8aa4:	8b1b      	ldrh	r3, [r3, #24]
    8aa6:	4619      	mov	r1, r3
    8aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8aaa:	8a9b      	ldrh	r3, [r3, #20]
    8aac:	1acb      	subs	r3, r1, r3
    8aae:	429a      	cmp	r2, r3
    8ab0:	dd08      	ble.n	8ac4 <Lpspi_Ip_SyncTransmit+0x15c>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    8ab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ab4:	8b1b      	ldrh	r3, [r3, #24]
    8ab6:	b2da      	uxtb	r2, r3
    8ab8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8aba:	8a9b      	ldrh	r3, [r3, #20]
    8abc:	b2db      	uxtb	r3, r3
    8abe:	1ad3      	subs	r3, r2, r3
    8ac0:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out */
                if (0u == State->RxIndex)
    8ac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ac6:	8a9b      	ldrh	r3, [r3, #20]
    8ac8:	2b00      	cmp	r3, #0
    8aca:	d107      	bne.n	8adc <Lpspi_Ip_SyncTransmit+0x174>
                {
                    State->CurrentTxFifoSlot += 1u;
    8acc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8ad2:	3301      	adds	r3, #1
    8ad4:	b2da      	uxtb	r2, r3
    8ad6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    8adc:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8ae0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8ae4:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8ae8:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8aec:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8af0:	4a41      	ldr	r2, [pc, #260]	; (8bf8 <Lpspi_Ip_SyncTransmit+0x290>)
    8af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8af6:	930f      	str	r3, [sp, #60]	; 0x3c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8af8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8afc:	4a3d      	ldr	r2, [pc, #244]	; (8bf4 <Lpspi_Ip_SyncTransmit+0x28c>)
    8afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b02:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 Data = 0u;
    8b04:	2300      	movs	r3, #0
    8b06:	930d      	str	r3, [sp, #52]	; 0x34
    uint8 Index = 0u;
    8b08:	2300      	movs	r3, #0
    8b0a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if (NULL_PTR != State->RxBuffer)
    8b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b10:	689b      	ldr	r3, [r3, #8]
    8b12:	2b00      	cmp	r3, #0
    8b14:	d069      	beq.n	8bea <Lpspi_Ip_SyncTransmit+0x282>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    8b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b1a:	68db      	ldr	r3, [r3, #12]
    8b1c:	881b      	ldrh	r3, [r3, #0]
    8b1e:	2b08      	cmp	r3, #8
    8b20:	d81e      	bhi.n	8b60 <Lpspi_Ip_SyncTransmit+0x1f8>
            for (Index = 0; Index < NumberOfReads; Index++)
    8b22:	2300      	movs	r3, #0
    8b24:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b28:	e013      	b.n	8b52 <Lpspi_Ip_SyncTransmit+0x1ea>
                Data = Base->RDR;
    8b2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8b2e:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    8b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b32:	689b      	ldr	r3, [r3, #8]
    8b34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8b36:	8a92      	ldrh	r2, [r2, #20]
    8b38:	4611      	mov	r1, r2
    8b3a:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    8b3e:	440a      	add	r2, r1
    8b40:	4413      	add	r3, r2
    8b42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8b44:	b2d2      	uxtb	r2, r2
    8b46:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8b48:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b4c:	3301      	adds	r3, #1
    8b4e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b52:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8b56:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b5a:	429a      	cmp	r2, r3
    8b5c:	d8e5      	bhi.n	8b2a <Lpspi_Ip_SyncTransmit+0x1c2>
    8b5e:	e05a      	b.n	8c16 <Lpspi_Ip_SyncTransmit+0x2ae>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    8b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b64:	68db      	ldr	r3, [r3, #12]
    8b66:	881b      	ldrh	r3, [r3, #0]
    8b68:	2b10      	cmp	r3, #16
    8b6a:	d81f      	bhi.n	8bac <Lpspi_Ip_SyncTransmit+0x244>
            for (Index = 0; Index < NumberOfReads; Index++)
    8b6c:	2300      	movs	r3, #0
    8b6e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b72:	e014      	b.n	8b9e <Lpspi_Ip_SyncTransmit+0x236>
                Data = Base->RDR;
    8b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8b78:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    8b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b7c:	689a      	ldr	r2, [r3, #8]
    8b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b80:	8a9b      	ldrh	r3, [r3, #20]
    8b82:	4619      	mov	r1, r3
    8b84:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b88:	440b      	add	r3, r1
    8b8a:	005b      	lsls	r3, r3, #1
    8b8c:	4413      	add	r3, r2
    8b8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8b90:	b292      	uxth	r2, r2
    8b92:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8b94:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b98:	3301      	adds	r3, #1
    8b9a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b9e:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8ba2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8ba6:	429a      	cmp	r2, r3
    8ba8:	d8e4      	bhi.n	8b74 <Lpspi_Ip_SyncTransmit+0x20c>
    8baa:	e034      	b.n	8c16 <Lpspi_Ip_SyncTransmit+0x2ae>
            for (Index = 0; Index < NumberOfReads; Index++)
    8bac:	2300      	movs	r3, #0
    8bae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8bb2:	e013      	b.n	8bdc <Lpspi_Ip_SyncTransmit+0x274>
                Data = Base->RDR;
    8bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8bb8:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    8bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bbc:	689a      	ldr	r2, [r3, #8]
    8bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bc0:	8a9b      	ldrh	r3, [r3, #20]
    8bc2:	4619      	mov	r1, r3
    8bc4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8bc8:	440b      	add	r3, r1
    8bca:	009b      	lsls	r3, r3, #2
    8bcc:	4413      	add	r3, r2
    8bce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8bd0:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8bd2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8bd6:	3301      	adds	r3, #1
    8bd8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8bdc:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8be0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8be4:	429a      	cmp	r2, r3
    8be6:	d8e5      	bhi.n	8bb4 <Lpspi_Ip_SyncTransmit+0x24c>
    8be8:	e015      	b.n	8c16 <Lpspi_Ip_SyncTransmit+0x2ae>
        for (Index = 0; Index < NumberOfReads; Index++)
    8bea:	2300      	movs	r3, #0
    8bec:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8bf0:	e00b      	b.n	8c0a <Lpspi_Ip_SyncTransmit+0x2a2>
    8bf2:	bf00      	nop
    8bf4:	1fff8dd8 	.word	0x1fff8dd8
    8bf8:	0001851c 	.word	0x0001851c
            (void)Base->RDR;
    8bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    8c00:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c04:	3301      	adds	r3, #1
    8c06:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c0a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8c0e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c12:	429a      	cmp	r2, r3
    8c14:	d8f2      	bhi.n	8bfc <Lpspi_Ip_SyncTransmit+0x294>
    State->RxIndex += NumberOfReads;
    8c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c18:	8a9a      	ldrh	r2, [r3, #20]
    8c1a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8c1e:	b29b      	uxth	r3, r3
    8c20:	4413      	add	r3, r2
    8c22:	b29a      	uxth	r2, r3
    8c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c26:	829a      	strh	r2, [r3, #20]
}
    8c28:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    8c2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c2c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8c30:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8c34:	4413      	add	r3, r2
    8c36:	b2da      	uxtb	r2, r3
    8c38:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                ElapsedTicks = 0u;
    8c3e:	2300      	movs	r3, #0
    8c40:	9317      	str	r3, [sp, #92]	; 0x5c
            /* After driver code read all frames in RX FIFO, if there are still some frames in TX FIFO, at the time before driver code check number of frames available in TX FIFO 
            to prepare to fill TX FIFO. At that time, interrupt occurred, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO. 
            So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from interrupt and fill TX FIFO until full. 
            And there is a interrupt occurred after that before read all frames in RX FIFO, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (TxDoneFlag != TRUE))
    8c42:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8c48:	2b00      	cmp	r3, #0
    8c4a:	f000 810e 	beq.w	8e6a <Lpspi_Ip_SyncTransmit+0x502>
    8c4e:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
    8c52:	f083 0301 	eor.w	r3, r3, #1
    8c56:	b2db      	uxtb	r3, r3
    8c58:	2b00      	cmp	r3, #0
    8c5a:	f000 8106 	beq.w	8e6a <Lpspi_Ip_SyncTransmit+0x502>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    8c5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c60:	8b5a      	ldrh	r2, [r3, #26]
    8c62:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c64:	8adb      	ldrh	r3, [r3, #22]
    8c66:	429a      	cmp	r2, r3
    8c68:	f000 80c7 	beq.w	8dfa <Lpspi_Ip_SyncTransmit+0x492>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    8c6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8c72:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    8c76:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    8c7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c7c:	8b5b      	ldrh	r3, [r3, #26]
    8c7e:	4619      	mov	r1, r3
    8c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c82:	8adb      	ldrh	r3, [r3, #22]
    8c84:	1acb      	subs	r3, r1, r3
    8c86:	429a      	cmp	r2, r3
    8c88:	dd08      	ble.n	8c9c <Lpspi_Ip_SyncTransmit+0x334>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    8c8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c8c:	8b5b      	ldrh	r3, [r3, #26]
    8c8e:	b2da      	uxtb	r2, r3
    8c90:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c92:	8adb      	ldrh	r3, [r3, #22]
    8c94:	b2db      	uxtb	r3, r3
    8c96:	1ad3      	subs	r3, r2, r3
    8c98:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    8c9c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8ca0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    8ca4:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8ca8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8cac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8cb0:	4a85      	ldr	r2, [pc, #532]	; (8ec8 <Lpspi_Ip_SyncTransmit+0x560>)
    8cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cb6:	930b      	str	r3, [sp, #44]	; 0x2c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8cb8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8cbc:	4a83      	ldr	r2, [pc, #524]	; (8ecc <Lpspi_Ip_SyncTransmit+0x564>)
    8cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cc2:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 Data = 0u;
    8cc4:	2300      	movs	r3, #0
    8cc6:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Index = 0u;
    8cc8:	2300      	movs	r3, #0
    8cca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    8cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8cd2:	68db      	ldr	r3, [r3, #12]
    8cd4:	685b      	ldr	r3, [r3, #4]
    8cd6:	9309      	str	r3, [sp, #36]	; 0x24
    if (NULL_PTR != State->TxBuffer)
    8cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cda:	68db      	ldr	r3, [r3, #12]
    8cdc:	2b00      	cmp	r3, #0
    8cde:	d063      	beq.n	8da8 <Lpspi_Ip_SyncTransmit+0x440>
        if (State->TxFrameSize < 9u)
    8ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8ce4:	2b08      	cmp	r3, #8
    8ce6:	d81d      	bhi.n	8d24 <Lpspi_Ip_SyncTransmit+0x3bc>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8ce8:	2300      	movs	r3, #0
    8cea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8cee:	e012      	b.n	8d16 <Lpspi_Ip_SyncTransmit+0x3ae>
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    8cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cf2:	68db      	ldr	r3, [r3, #12]
    8cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8cf6:	8ad2      	ldrh	r2, [r2, #22]
    8cf8:	4611      	mov	r1, r2
    8cfa:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    8cfe:	440a      	add	r2, r1
    8d00:	4413      	add	r3, r2
    8d02:	781b      	ldrb	r3, [r3, #0]
    8d04:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d0a:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d10:	3301      	adds	r3, #1
    8d12:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d16:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8d1a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d1e:	429a      	cmp	r2, r3
    8d20:	d8e6      	bhi.n	8cf0 <Lpspi_Ip_SyncTransmit+0x388>
    8d22:	e053      	b.n	8dcc <Lpspi_Ip_SyncTransmit+0x464>
        else if (State->TxFrameSize < 17u)
    8d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8d28:	2b10      	cmp	r3, #16
    8d2a:	d81e      	bhi.n	8d6a <Lpspi_Ip_SyncTransmit+0x402>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d2c:	2300      	movs	r3, #0
    8d2e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d32:	e013      	b.n	8d5c <Lpspi_Ip_SyncTransmit+0x3f4>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    8d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d36:	68da      	ldr	r2, [r3, #12]
    8d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d3a:	8adb      	ldrh	r3, [r3, #22]
    8d3c:	4619      	mov	r1, r3
    8d3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d42:	440b      	add	r3, r1
    8d44:	005b      	lsls	r3, r3, #1
    8d46:	4413      	add	r3, r2
    8d48:	881b      	ldrh	r3, [r3, #0]
    8d4a:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d50:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d56:	3301      	adds	r3, #1
    8d58:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d5c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8d60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d64:	429a      	cmp	r2, r3
    8d66:	d8e5      	bhi.n	8d34 <Lpspi_Ip_SyncTransmit+0x3cc>
    8d68:	e030      	b.n	8dcc <Lpspi_Ip_SyncTransmit+0x464>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d6a:	2300      	movs	r3, #0
    8d6c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d70:	e013      	b.n	8d9a <Lpspi_Ip_SyncTransmit+0x432>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    8d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d74:	68da      	ldr	r2, [r3, #12]
    8d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d78:	8adb      	ldrh	r3, [r3, #22]
    8d7a:	4619      	mov	r1, r3
    8d7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d80:	440b      	add	r3, r1
    8d82:	009b      	lsls	r3, r3, #2
    8d84:	4413      	add	r3, r2
    8d86:	681b      	ldr	r3, [r3, #0]
    8d88:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d8e:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d94:	3301      	adds	r3, #1
    8d96:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d9a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8d9e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8da2:	429a      	cmp	r2, r3
    8da4:	d8e5      	bhi.n	8d72 <Lpspi_Ip_SyncTransmit+0x40a>
    8da6:	e011      	b.n	8dcc <Lpspi_Ip_SyncTransmit+0x464>
        for (Index = 0; Index < NumberOfWrites; Index++)
    8da8:	2300      	movs	r3, #0
    8daa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8dae:	e007      	b.n	8dc0 <Lpspi_Ip_SyncTransmit+0x458>
            Base->TDR = Data;
    8db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8db2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8db4:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    8db6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8dba:	3301      	adds	r3, #1
    8dbc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8dc0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8dc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8dc8:	429a      	cmp	r2, r3
    8dca:	d8f1      	bhi.n	8db0 <Lpspi_Ip_SyncTransmit+0x448>
    State->TxIndex += NumberOfWrites;
    8dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dce:	8ada      	ldrh	r2, [r3, #22]
    8dd0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    8dd4:	b29b      	uxth	r3, r3
    8dd6:	4413      	add	r3, r2
    8dd8:	b29a      	uxth	r2, r3
    8dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8ddc:	82da      	strh	r2, [r3, #22]
}
    8dde:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    8de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8de2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8de6:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8dea:	1ad3      	subs	r3, r2, r3
    8dec:	b2da      	uxtb	r2, r3
    8dee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                    ElapsedTicks = 0u;
    8df4:	2300      	movs	r3, #0
    8df6:	9317      	str	r3, [sp, #92]	; 0x5c
    8df8:	e037      	b.n	8e6a <Lpspi_Ip_SyncTransmit+0x502>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    8dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dfc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    8e00:	2b00      	cmp	r3, #0
    8e02:	d01c      	beq.n	8e3e <Lpspi_Ip_SyncTransmit+0x4d6>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    8e04:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e08:	68db      	ldr	r3, [r3, #12]
    8e0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8e0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
    8e0e:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    8e10:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e12:	2200      	movs	r2, #0
    8e14:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    8e16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    8e1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e1c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    8e1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e20:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    8e24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e26:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    8e28:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8e2c:	9300      	str	r3, [sp, #0]
    8e2e:	4623      	mov	r3, r4
    8e30:	f000 f84e 	bl	8ed0 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    8e34:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e36:	2200      	movs	r2, #0
    8e38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    8e3c:	e015      	b.n	8e6a <Lpspi_Ip_SyncTransmit+0x502>
                    }
                    else
                    {
                        TxDoneFlag = TRUE;
    8e3e:	2301      	movs	r3, #1
    8e40:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    8e44:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e46:	7f1b      	ldrb	r3, [r3, #28]
    8e48:	f083 0301 	eor.w	r3, r3, #1
    8e4c:	b2db      	uxtb	r3, r3
    8e4e:	2b00      	cmp	r3, #0
    8e50:	d00b      	beq.n	8e6a <Lpspi_Ip_SyncTransmit+0x502>
    8e52:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d005      	beq.n	8e6a <Lpspi_Ip_SyncTransmit+0x502>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    8e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    8e66:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e68:	661a      	str	r2, [r3, #96]	; 0x60
                        }
                    }
                }
            }
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, LPSPI_IP_TIMEOUT_METHOD);
    8e6a:	ab07      	add	r3, sp, #28
    8e6c:	2100      	movs	r1, #0
    8e6e:	4618      	mov	r0, r3
    8e70:	f7f8 ffdd 	bl	1e2e <OsIf_GetElapsed>
    8e74:	4602      	mov	r2, r0
    8e76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8e78:	4413      	add	r3, r2
    8e7a:	9317      	str	r3, [sp, #92]	; 0x5c
            if (ElapsedTicks >= TimeoutTicks)
    8e7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8e7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8e80:	429a      	cmp	r2, r3
    8e82:	d302      	bcc.n	8e8a <Lpspi_Ip_SyncTransmit+0x522>
            {
                Status = LPSPI_IP_TIMEOUT;
    8e84:	2303      	movs	r3, #3
    8e86:	9318      	str	r3, [sp, #96]	; 0x60
                break;
    8e88:	e006      	b.n	8e98 <Lpspi_Ip_SyncTransmit+0x530>
        while(State->RxIndex != State->ExpectedFifoReads)
    8e8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e8c:	8a9a      	ldrh	r2, [r3, #20]
    8e8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e90:	8b1b      	ldrh	r3, [r3, #24]
    8e92:	429a      	cmp	r2, r3
    8e94:	f47f adf6 	bne.w	8a84 <Lpspi_Ip_SyncTransmit+0x11c>
            }
        }
        if ((LPSPI_IP_STATUS_SUCCESS != Status) || (0u == Length))
    8e98:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8e9a:	2b00      	cmp	r3, #0
    8e9c:	d103      	bne.n	8ea6 <Lpspi_Ip_SyncTransmit+0x53e>
    8e9e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	d109      	bne.n	8eba <Lpspi_Ip_SyncTransmit+0x552>
        {
#if (STD_OFF == LPSPI_IP_DEV_ERROR_DETECT)
            /* Return Fail status if length is 0. Error Detect is enabled, nothing need to be done here */
            if (0u == Length)
    8ea6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8eaa:	2b00      	cmp	r3, #0
    8eac:	d101      	bne.n	8eb2 <Lpspi_Ip_SyncTransmit+0x54a>
            {
                Status = LPSPI_IP_STATUS_FAIL;
    8eae:	2301      	movs	r3, #1
    8eb0:	9318      	str	r3, [sp, #96]	; 0x60
            }
#endif
            State->Status = LPSPI_IP_FAULT;
    8eb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8eb4:	2203      	movs	r2, #3
    8eb6:	605a      	str	r2, [r3, #4]
    8eb8:	e002      	b.n	8ec0 <Lpspi_Ip_SyncTransmit+0x558>
        }
        else
        {
            State->Status = LPSPI_IP_IDLE;
    8eba:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ebc:	2201      	movs	r2, #1
    8ebe:	605a      	str	r2, [r3, #4]
        }
    }
    return Status;
    8ec0:	9b18      	ldr	r3, [sp, #96]	; 0x60
}
    8ec2:	4618      	mov	r0, r3
    8ec4:	b01a      	add	sp, #104	; 0x68
    8ec6:	bd10      	pop	{r4, pc}
    8ec8:	0001851c 	.word	0x0001851c
    8ecc:	1fff8dd8 	.word	0x1fff8dd8

00008ed0 <Lpspi_TransmitTxInit>:
                                 const uint8* TxBuffer,
                                 uint16 TxFrameSize,
                                 boolean TxLsb,
                                 uint16 BufLen
                                )
{
    8ed0:	b088      	sub	sp, #32
    8ed2:	9100      	str	r1, [sp, #0]
    8ed4:	4611      	mov	r1, r2
    8ed6:	461a      	mov	r2, r3
    8ed8:	4603      	mov	r3, r0
    8eda:	f88d 3007 	strb.w	r3, [sp, #7]
    8ede:	460b      	mov	r3, r1
    8ee0:	f8ad 3004 	strh.w	r3, [sp, #4]
    8ee4:	4613      	mov	r3, r2
    8ee6:	f88d 3006 	strb.w	r3, [sp, #6]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8eea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8eee:	4a46      	ldr	r2, [pc, #280]	; (9008 <Lpspi_TransmitTxInit+0x138>)
    8ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ef4:	9307      	str	r3, [sp, #28]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8ef6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8efa:	4a44      	ldr	r2, [pc, #272]	; (900c <Lpspi_TransmitTxInit+0x13c>)
    8efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f00:	9306      	str	r3, [sp, #24]
    uint32 TransferCommand = 0u;
    8f02:	2300      	movs	r3, #0
    8f04:	9305      	str	r3, [sp, #20]
    uint8 LsbWriteValue = TxLsb ? 1U : 0U;
    8f06:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f0a:	2b00      	cmp	r3, #0
    8f0c:	d001      	beq.n	8f12 <Lpspi_TransmitTxInit+0x42>
    8f0e:	2301      	movs	r3, #1
    8f10:	e000      	b.n	8f14 <Lpspi_TransmitTxInit+0x44>
    8f12:	2300      	movs	r3, #0
    8f14:	f88d 3013 	strb.w	r3, [sp, #19]

    State->TxFrameSize = TxFrameSize;
    8f18:	9b06      	ldr	r3, [sp, #24]
    8f1a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8f1e:	851a      	strh	r2, [r3, #40]	; 0x28
    State->TxLsb = TxLsb;
    8f20:	9b06      	ldr	r3, [sp, #24]
    8f22:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8f26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    /* Get transfer command */
#if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    TransferCommand = State->ExternalDevice->Tcr[State->ClockMode] | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
#else
    TransferCommand = State->ExternalDevice->Tcr | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
    8f2a:	9b06      	ldr	r3, [sp, #24]
    8f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f2e:	689a      	ldr	r2, [r3, #8]
    8f30:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8f34:	3b01      	subs	r3, #1
    8f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8f3a:	431a      	orrs	r2, r3
    8f3c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8f40:	05db      	lsls	r3, r3, #23
    8f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    8f46:	4313      	orrs	r3, r2
    8f48:	9305      	str	r3, [sp, #20]
        {
            TransferCommand &= ~LPSPI_TCR_CONT_MASK;
        }
        #endif
        
        if(TRUE == State->FirstCmd)
    8f4a:	9b06      	ldr	r3, [sp, #24]
    8f4c:	7f5b      	ldrb	r3, [r3, #29]
    8f4e:	2b00      	cmp	r3, #0
    8f50:	d003      	beq.n	8f5a <Lpspi_TransmitTxInit+0x8a>
        {
            /* Set transfer command */
            Base->TCR = TransferCommand;
    8f52:	9b07      	ldr	r3, [sp, #28]
    8f54:	9a05      	ldr	r2, [sp, #20]
    8f56:	661a      	str	r2, [r3, #96]	; 0x60
    8f58:	e00d      	b.n	8f76 <Lpspi_TransmitTxInit+0xa6>
        }
        else
        {
            if (0u != (TransferCommand & LPSPI_TCR_CONT_MASK))
    8f5a:	9b05      	ldr	r3, [sp, #20]
    8f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8f60:	2b00      	cmp	r3, #0
    8f62:	d005      	beq.n	8f70 <Lpspi_TransmitTxInit+0xa0>
            {
                Base->TCR = TransferCommand | LPSPI_TCR_CONTC_MASK;
    8f64:	9b05      	ldr	r3, [sp, #20]
    8f66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    8f6a:	9b07      	ldr	r3, [sp, #28]
    8f6c:	661a      	str	r2, [r3, #96]	; 0x60
    8f6e:	e002      	b.n	8f76 <Lpspi_TransmitTxInit+0xa6>
            }
            else
            {
                Base->TCR = TransferCommand;
    8f70:	9b07      	ldr	r3, [sp, #28]
    8f72:	9a05      	ldr	r2, [sp, #20]
    8f74:	661a      	str	r2, [r3, #96]	; 0x60
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        if (LPSPI_IP_FULL_DUPLEX == State->ExternalDevice->DeviceParams->TransferType)
        #endif
        {
            /* CMD will take 1 slot in TXFIFO, update current TX FIFO slot. it will be plus 1 when the first frames of channel have recieved */
            State->CurrentTxFifoSlot -= 1u;
    8f76:	9b06      	ldr	r3, [sp, #24]
    8f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8f7c:	3b01      	subs	r3, #1
    8f7e:	b2da      	uxtb	r2, r3
    8f80:	9b06      	ldr	r3, [sp, #24]
    8f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        }
    }
    
    /* Update State structure. */
    State->TxIndex = 0u;
    8f86:	9b06      	ldr	r3, [sp, #24]
    8f88:	2200      	movs	r2, #0
    8f8a:	82da      	strh	r2, [r3, #22]
        (void)TxBuffer;
    }
    else
    #endif
    {
        State->TxBuffer = TxBuffer;
    8f8c:	9b06      	ldr	r3, [sp, #24]
    8f8e:	9a00      	ldr	r2, [sp, #0]
    8f90:	60da      	str	r2, [r3, #12]
    8f92:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8f96:	f8ad 3010 	strh.w	r3, [sp, #16]
    8f9a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8f9e:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (FrameSize < 9u)
    8fa2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8fa6:	2b08      	cmp	r3, #8
    8fa8:	d804      	bhi.n	8fb4 <Lpspi_TransmitTxInit+0xe4>
        Ret = Length;
    8faa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8fae:	f8ad 300c 	strh.w	r3, [sp, #12]
    8fb2:	e022      	b.n	8ffa <Lpspi_TransmitTxInit+0x12a>
    else if (FrameSize < 17u)
    8fb4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8fb8:	2b10      	cmp	r3, #16
    8fba:	d80c      	bhi.n	8fd6 <Lpspi_TransmitTxInit+0x106>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    8fbc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8fc0:	085b      	lsrs	r3, r3, #1
    8fc2:	b29a      	uxth	r2, r3
    8fc4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8fc8:	f003 0301 	and.w	r3, r3, #1
    8fcc:	b29b      	uxth	r3, r3
    8fce:	4413      	add	r3, r2
    8fd0:	f8ad 300c 	strh.w	r3, [sp, #12]
    8fd4:	e011      	b.n	8ffa <Lpspi_TransmitTxInit+0x12a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    8fd6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8fda:	089b      	lsrs	r3, r3, #2
    8fdc:	b29a      	uxth	r2, r3
    8fde:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8fe2:	f003 0303 	and.w	r3, r3, #3
    8fe6:	b29b      	uxth	r3, r3
    8fe8:	2b00      	cmp	r3, #0
    8fea:	bf14      	ite	ne
    8fec:	2301      	movne	r3, #1
    8fee:	2300      	moveq	r3, #0
    8ff0:	b2db      	uxtb	r3, r3
    8ff2:	b29b      	uxth	r3, r3
    8ff4:	4413      	add	r3, r2
    8ff6:	f8ad 300c 	strh.w	r3, [sp, #12]
    return Ret;
    8ffa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    }

    State->ExpectedFifoWrites = Lpspi_Ip_GetWordsFromLength(BufLen, TxFrameSize);
    8ffe:	9b06      	ldr	r3, [sp, #24]
    9000:	835a      	strh	r2, [r3, #26]
}
    9002:	bf00      	nop
    9004:	b008      	add	sp, #32
    9006:	4770      	bx	lr
    9008:	0001851c 	.word	0x0001851c
    900c:	1fff8dd8 	.word	0x1fff8dd8

00009010 <Lpspi_TransmitRxInit>:
static void Lpspi_TransmitRxInit(uint8 Instance,
                                      uint8* RxBuffer,
                                      uint16 RxFrameSize,
                                      uint16 BufLen
                                     )
{
    9010:	b088      	sub	sp, #32
    9012:	9102      	str	r1, [sp, #8]
    9014:	4611      	mov	r1, r2
    9016:	461a      	mov	r2, r3
    9018:	4603      	mov	r3, r0
    901a:	f88d 300f 	strb.w	r3, [sp, #15]
    901e:	460b      	mov	r3, r1
    9020:	f8ad 300c 	strh.w	r3, [sp, #12]
    9024:	4613      	mov	r3, r2
    9026:	f8ad 3006 	strh.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    902a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    902e:	4a22      	ldr	r2, [pc, #136]	; (90b8 <Lpspi_TransmitRxInit+0xa8>)
    9030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9034:	9307      	str	r3, [sp, #28]
    
    /* Update State structure. */
    State->RxIndex = 0u;
    9036:	9b07      	ldr	r3, [sp, #28]
    9038:	2200      	movs	r2, #0
    903a:	829a      	strh	r2, [r3, #20]
        (void)RxBuffer; 
    }
    else
    #endif        
    {
        State->RxBuffer = RxBuffer; 
    903c:	9b07      	ldr	r3, [sp, #28]
    903e:	9a02      	ldr	r2, [sp, #8]
    9040:	609a      	str	r2, [r3, #8]
    9042:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9046:	f8ad 301a 	strh.w	r3, [sp, #26]
    904a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    904e:	f8ad 3018 	strh.w	r3, [sp, #24]
    if (FrameSize < 9u)
    9052:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    9056:	2b08      	cmp	r3, #8
    9058:	d804      	bhi.n	9064 <Lpspi_TransmitRxInit+0x54>
        Ret = Length;
    905a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    905e:	f8ad 3016 	strh.w	r3, [sp, #22]
    9062:	e022      	b.n	90aa <Lpspi_TransmitRxInit+0x9a>
    else if (FrameSize < 17u)
    9064:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    9068:	2b10      	cmp	r3, #16
    906a:	d80c      	bhi.n	9086 <Lpspi_TransmitRxInit+0x76>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    906c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9070:	085b      	lsrs	r3, r3, #1
    9072:	b29a      	uxth	r2, r3
    9074:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9078:	f003 0301 	and.w	r3, r3, #1
    907c:	b29b      	uxth	r3, r3
    907e:	4413      	add	r3, r2
    9080:	f8ad 3016 	strh.w	r3, [sp, #22]
    9084:	e011      	b.n	90aa <Lpspi_TransmitRxInit+0x9a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    9086:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    908a:	089b      	lsrs	r3, r3, #2
    908c:	b29a      	uxth	r2, r3
    908e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9092:	f003 0303 	and.w	r3, r3, #3
    9096:	b29b      	uxth	r3, r3
    9098:	2b00      	cmp	r3, #0
    909a:	bf14      	ite	ne
    909c:	2301      	movne	r3, #1
    909e:	2300      	moveq	r3, #0
    90a0:	b2db      	uxtb	r3, r3
    90a2:	b29b      	uxth	r3, r3
    90a4:	4413      	add	r3, r2
    90a6:	f8ad 3016 	strh.w	r3, [sp, #22]
    return Ret;
    90aa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    }

    State->ExpectedFifoReads = Lpspi_Ip_GetWordsFromLength(BufLen, RxFrameSize);
    90ae:	9b07      	ldr	r3, [sp, #28]
    90b0:	831a      	strh	r2, [r3, #24]
}
    90b2:	bf00      	nop
    90b4:	b008      	add	sp, #32
    90b6:	4770      	bx	lr
    90b8:	1fff8dd8 	.word	0x1fff8dd8

000090bc <Lpspi_Ip_AsyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            Lpspi_Ip_CallbackType EndCallback
                                          )
{
    90bc:	b500      	push	{lr}
    90be:	b08b      	sub	sp, #44	; 0x2c
    90c0:	9005      	str	r0, [sp, #20]
    90c2:	9104      	str	r1, [sp, #16]
    90c4:	9203      	str	r2, [sp, #12]
    90c6:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    90ca:	2300      	movs	r3, #0
    90cc:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Instance = 0u;
    90ce:	2300      	movs	r3, #0
    90d0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    90d4:	9b05      	ldr	r3, [sp, #20]
    90d6:	781b      	ldrb	r3, [r3, #0]
    90d8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    90dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    90e0:	4a3d      	ldr	r2, [pc, #244]	; (91d8 <Lpspi_Ip_AsyncTransmit+0x11c>)
    90e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90e6:	9307      	str	r3, [sp, #28]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];
    90e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    90ec:	4a3b      	ldr	r2, [pc, #236]	; (91dc <Lpspi_Ip_AsyncTransmit+0x120>)
    90ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90f2:	9306      	str	r3, [sp, #24]
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09();
    90f4:	f00d f93e 	bl	16374 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>
    if (LPSPI_IP_BUSY == State->Status)
    90f8:	9b07      	ldr	r3, [sp, #28]
    90fa:	685b      	ldr	r3, [r3, #4]
    90fc:	2b02      	cmp	r3, #2
    90fe:	d104      	bne.n	910a <Lpspi_Ip_AsyncTransmit+0x4e>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    9100:	f00d f964 	bl	163cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        Status = LPSPI_IP_STATUS_FAIL;
    9104:	2301      	movs	r3, #1
    9106:	9309      	str	r3, [sp, #36]	; 0x24
    9108:	e061      	b.n	91ce <Lpspi_Ip_AsyncTransmit+0x112>
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    910a:	9b07      	ldr	r3, [sp, #28]
    910c:	2202      	movs	r2, #2
    910e:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    9110:	9b07      	ldr	r3, [sp, #28]
    9112:	9a05      	ldr	r2, [sp, #20]
    9114:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    9116:	f00d f959 	bl	163cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        
        /* Update State structure. */
        State->Callback = EndCallback;
    911a:	9b07      	ldr	r3, [sp, #28]
    911c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    911e:	611a      	str	r2, [r3, #16]
        State->NextTransferConfigAvailable = State->KeepCs;
    9120:	9b07      	ldr	r3, [sp, #28]
    9122:	7f1a      	ldrb	r2, [r3, #28]
    9124:	9b07      	ldr	r3, [sp, #28]
    9126:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Reset TX done flag */
        State->TxDoneFlag = FALSE;
    912a:	9b07      	ldr	r3, [sp, #28]
    912c:	2200      	movs	r2, #0
    912e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    9132:	9b07      	ldr	r3, [sp, #28]
    9134:	7f5b      	ldrb	r3, [r3, #29]
    9136:	2b00      	cmp	r3, #0
    9138:	d028      	beq.n	918c <Lpspi_Ip_AsyncTransmit+0xd0>
        {
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11();
    913a:	f00d f9bf 	bl	164bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>
            /* Make sure that FIFOs will be empty before start new transfer session */
            Base->CR |= LPSPI_CR_RTF_MASK|LPSPI_CR_RRF_MASK;
    913e:	9b06      	ldr	r3, [sp, #24]
    9140:	691b      	ldr	r3, [r3, #16]
    9142:	f443 7240 	orr.w	r2, r3, #768	; 0x300
    9146:	9b06      	ldr	r3, [sp, #24]
    9148:	611a      	str	r2, [r3, #16]
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    914a:	9b06      	ldr	r3, [sp, #24]
    914c:	695b      	ldr	r3, [r3, #20]
    914e:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    9152:	9b06      	ldr	r3, [sp, #24]
    9154:	615a      	str	r2, [r3, #20]
            #endif
            {
                #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
                Base->CCR = ExternalDevice->Ccr[State->ClockMode];
                #else
                Base->CCR = ExternalDevice->Ccr;
    9156:	9b05      	ldr	r3, [sp, #20]
    9158:	685a      	ldr	r2, [r3, #4]
    915a:	9b06      	ldr	r3, [sp, #24]
    915c:	641a      	str	r2, [r3, #64]	; 0x40
                #endif
            }
            /* Update current FIFO slots are available to fill .*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    915e:	9b07      	ldr	r3, [sp, #28]
    9160:	2204      	movs	r2, #4
    9162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            /* In setting up Transmit command register, the RXMSK is also cleared */
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    9166:	9b07      	ldr	r3, [sp, #28]
    9168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    916a:	68db      	ldr	r3, [r3, #12]
    916c:	881a      	ldrh	r2, [r3, #0]
    916e:	9b07      	ldr	r3, [sp, #28]
    9170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9172:	68db      	ldr	r3, [r3, #12]
    9174:	7899      	ldrb	r1, [r3, #2]
    9176:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    917a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    917e:	9300      	str	r3, [sp, #0]
    9180:	460b      	mov	r3, r1
    9182:	9904      	ldr	r1, [sp, #16]
    9184:	f7ff fea4 	bl	8ed0 <Lpspi_TransmitTxInit>
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11();
    9188:	f00d f9c4 	bl	16514 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    918c:	9b07      	ldr	r3, [sp, #28]
    918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9190:	68db      	ldr	r3, [r3, #12]
    9192:	881a      	ldrh	r2, [r3, #0]
    9194:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    9198:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    919c:	9903      	ldr	r1, [sp, #12]
    919e:	f7ff ff37 	bl	9010 <Lpspi_TransmitRxInit>
            }
            else
            #endif
            {
                /* Set TX water */
                Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    91a2:	9b06      	ldr	r3, [sp, #24]
    91a4:	2203      	movs	r2, #3
    91a6:	659a      	str	r2, [r3, #88]	; 0x58
            }
            
            /* Disable DMA requests */
            Base->DER = 0u;
    91a8:	9b06      	ldr	r3, [sp, #24]
    91aa:	2200      	movs	r2, #0
    91ac:	61da      	str	r2, [r3, #28]
            switch (State->TransferMode)
    91ae:	9b07      	ldr	r3, [sp, #28]
    91b0:	681b      	ldr	r3, [r3, #0]
    91b2:	2b00      	cmp	r3, #0
    91b4:	d002      	beq.n	91bc <Lpspi_Ip_AsyncTransmit+0x100>
    91b6:	2b01      	cmp	r3, #1
    91b8:	d004      	beq.n	91c4 <Lpspi_Ip_AsyncTransmit+0x108>
                case LPSPI_IP_INTERRUPT:
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
                    break;
                default:
                    /* Nothing to do */
                    break;
    91ba:	e008      	b.n	91ce <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = 0u;
    91bc:	9b06      	ldr	r3, [sp, #24]
    91be:	2200      	movs	r2, #0
    91c0:	619a      	str	r2, [r3, #24]
                    break;
    91c2:	e004      	b.n	91ce <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
    91c4:	9b06      	ldr	r3, [sp, #24]
    91c6:	f641 0203 	movw	r2, #6147	; 0x1803
    91ca:	619a      	str	r2, [r3, #24]
                    break;
    91cc:	bf00      	nop
            /* Enable DMA request. */
            Base->DER = LPSPI_DER_RDDE_MASK | LPSPI_DER_TDDE_MASK;
        }
        #endif
    }
    return Status;
    91ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    91d0:	4618      	mov	r0, r3
    91d2:	b00b      	add	sp, #44	; 0x2c
    91d4:	f85d fb04 	ldr.w	pc, [sp], #4
    91d8:	1fff8dd8 	.word	0x1fff8dd8
    91dc:	0001851c 	.word	0x0001851c

000091e0 <Lpspi_Ip_ManageBuffers>:
}
#endif
#endif

void Lpspi_Ip_ManageBuffers(uint8 Instance)
{
    91e0:	b500      	push	{lr}
    91e2:	b085      	sub	sp, #20
    91e4:	4603      	mov	r3, r0
    91e6:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    91ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91ee:	4a14      	ldr	r2, [pc, #80]	; (9240 <Lpspi_Ip_ManageBuffers+0x60>)
    91f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91f4:	9303      	str	r3, [sp, #12]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    91f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91fa:	4a12      	ldr	r2, [pc, #72]	; (9244 <Lpspi_Ip_ManageBuffers+0x64>)
    91fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9200:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_POLLING == State->TransferMode)
    9202:	9b02      	ldr	r3, [sp, #8]
    9204:	681b      	ldr	r3, [r3, #0]
    9206:	2b00      	cmp	r3, #0
    9208:	d115      	bne.n	9236 <Lpspi_Ip_ManageBuffers+0x56>
                - Receive: Both TDF (push CDM) and DRF (receive data) are set.
               In half duplex Slave mode:
                - Transmit: TDF is set only, RDF will never be set by RX FIFO have masked.
                - Receive: Both TDF and RDF are set. But only process for RDF to receive data. In this case, State->CurrentTxFifoSlot will be set to 0 */
            if(
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    920a:	9b03      	ldr	r3, [sp, #12]
    920c:	695b      	ldr	r3, [r3, #20]
    920e:	f003 0302 	and.w	r3, r3, #2
            if(
    9212:	2b00      	cmp	r3, #0
    9214:	d10a      	bne.n	922c <Lpspi_Ip_ManageBuffers+0x4c>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    9216:	9b03      	ldr	r3, [sp, #12]
    9218:	695b      	ldr	r3, [r3, #20]
    921a:	f003 0301 	and.w	r3, r3, #1
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    921e:	2b00      	cmp	r3, #0
    9220:	d009      	beq.n	9236 <Lpspi_Ip_ManageBuffers+0x56>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    9222:	9b02      	ldr	r3, [sp, #8]
    9224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    9228:	2b00      	cmp	r3, #0
    922a:	d004      	beq.n	9236 <Lpspi_Ip_ManageBuffers+0x56>
                    Lpspi_Ip_TransferProcessHalfDuplex(Instance);
                }
                else
                #endif
                {
                    Lpspi_Ip_TransferProcess(Instance); 
    922c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9230:	4618      	mov	r0, r3
    9232:	f7ff f8cd 	bl	83d0 <Lpspi_Ip_TransferProcess>
                Lpspi_Ip_IrqTxDmaHandler(Instance);
            }
        }
        #endif
    }
}
    9236:	bf00      	nop
    9238:	b005      	add	sp, #20
    923a:	f85d fb04 	ldr.w	pc, [sp], #4
    923e:	bf00      	nop
    9240:	0001851c 	.word	0x0001851c
    9244:	1fff8dd8 	.word	0x1fff8dd8

00009248 <Lpspi_Ip_UpdateFrameSize>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_UpdateFrameSize(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint16 FrameSize)
{
    9248:	b084      	sub	sp, #16
    924a:	9001      	str	r0, [sp, #4]
    924c:	460b      	mov	r3, r1
    924e:	f8ad 3002 	strh.w	r3, [sp, #2]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    9252:	2300      	movs	r3, #0
    9254:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    DevAssert(LPSPI_IP_FRAMESIZE_MAX_U16 >= FrameSize);
    DevAssert(LPSPI_IP_FRAMESIZE_MIN_U16 <= FrameSize);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    9256:	9b01      	ldr	r3, [sp, #4]
    9258:	781b      	ldrb	r3, [r3, #0]
    925a:	461a      	mov	r2, r3
    925c:	4b09      	ldr	r3, [pc, #36]	; (9284 <Lpspi_Ip_UpdateFrameSize+0x3c>)
    925e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9262:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Frame size can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    9264:	9b02      	ldr	r3, [sp, #8]
    9266:	685b      	ldr	r3, [r3, #4]
    9268:	2b02      	cmp	r3, #2
    926a:	d005      	beq.n	9278 <Lpspi_Ip_UpdateFrameSize+0x30>
    {
        ExternalDevice->DeviceParams->FrameSize = FrameSize;
    926c:	9b01      	ldr	r3, [sp, #4]
    926e:	68db      	ldr	r3, [r3, #12]
    9270:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    9274:	801a      	strh	r2, [r3, #0]
    9276:	e001      	b.n	927c <Lpspi_Ip_UpdateFrameSize+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    9278:	2301      	movs	r3, #1
    927a:	9303      	str	r3, [sp, #12]
    }
    return Status;
    927c:	9b03      	ldr	r3, [sp, #12]
}
    927e:	4618      	mov	r0, r3
    9280:	b004      	add	sp, #16
    9282:	4770      	bx	lr
    9284:	1fff8dd8 	.word	0x1fff8dd8

00009288 <Lpspi_Ip_UpdateLsb>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateLsb(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, boolean Lsb)
{
    9288:	b084      	sub	sp, #16
    928a:	9001      	str	r0, [sp, #4]
    928c:	460b      	mov	r3, r1
    928e:	f88d 3003 	strb.w	r3, [sp, #3]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    9292:	2300      	movs	r3, #0
    9294:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    9296:	9b01      	ldr	r3, [sp, #4]
    9298:	781b      	ldrb	r3, [r3, #0]
    929a:	461a      	mov	r2, r3
    929c:	4b09      	ldr	r3, [pc, #36]	; (92c4 <Lpspi_Ip_UpdateLsb+0x3c>)
    929e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    92a2:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    92a4:	9b02      	ldr	r3, [sp, #8]
    92a6:	685b      	ldr	r3, [r3, #4]
    92a8:	2b02      	cmp	r3, #2
    92aa:	d005      	beq.n	92b8 <Lpspi_Ip_UpdateLsb+0x30>
    {
        ExternalDevice->DeviceParams->Lsb = Lsb;
    92ac:	9b01      	ldr	r3, [sp, #4]
    92ae:	68db      	ldr	r3, [r3, #12]
    92b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    92b4:	709a      	strb	r2, [r3, #2]
    92b6:	e001      	b.n	92bc <Lpspi_Ip_UpdateLsb+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    92b8:	2301      	movs	r3, #1
    92ba:	9303      	str	r3, [sp, #12]
    }
    return Status;
    92bc:	9b03      	ldr	r3, [sp, #12]
}
    92be:	4618      	mov	r0, r3
    92c0:	b004      	add	sp, #16
    92c2:	4770      	bx	lr
    92c4:	1fff8dd8 	.word	0x1fff8dd8

000092c8 <Lpspi_Ip_UpdateDefaultTransmitData>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateDefaultTransmitData(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint32 DefaultData)
{
    92c8:	b084      	sub	sp, #16
    92ca:	9001      	str	r0, [sp, #4]
    92cc:	9100      	str	r1, [sp, #0]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    92ce:	2300      	movs	r3, #0
    92d0:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    92d2:	9b01      	ldr	r3, [sp, #4]
    92d4:	781b      	ldrb	r3, [r3, #0]
    92d6:	461a      	mov	r2, r3
    92d8:	4b09      	ldr	r3, [pc, #36]	; (9300 <Lpspi_Ip_UpdateDefaultTransmitData+0x38>)
    92da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    92de:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    92e0:	9b02      	ldr	r3, [sp, #8]
    92e2:	685b      	ldr	r3, [r3, #4]
    92e4:	2b02      	cmp	r3, #2
    92e6:	d004      	beq.n	92f2 <Lpspi_Ip_UpdateDefaultTransmitData+0x2a>
    {
        ExternalDevice->DeviceParams->DefaultData = DefaultData;
    92e8:	9b01      	ldr	r3, [sp, #4]
    92ea:	68db      	ldr	r3, [r3, #12]
    92ec:	9a00      	ldr	r2, [sp, #0]
    92ee:	605a      	str	r2, [r3, #4]
    92f0:	e001      	b.n	92f6 <Lpspi_Ip_UpdateDefaultTransmitData+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    92f2:	2301      	movs	r3, #1
    92f4:	9303      	str	r3, [sp, #12]
    }
    return Status;
    92f6:	9b03      	ldr	r3, [sp, #12]
}
    92f8:	4618      	mov	r0, r3
    92fa:	b004      	add	sp, #16
    92fc:	4770      	bx	lr
    92fe:	bf00      	nop
    9300:	1fff8dd8 	.word	0x1fff8dd8

00009304 <Lpspi_Ip_UpdateTransferMode>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateTransferMode(uint8 Instance, Lpspi_Ip_ModeType Mode)
{
    9304:	b084      	sub	sp, #16
    9306:	4603      	mov	r3, r0
    9308:	9100      	str	r1, [sp, #0]
    930a:	f88d 3007 	strb.w	r3, [sp, #7]
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    930e:	2300      	movs	r3, #0
    9310:	9303      	str	r3, [sp, #12]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    9312:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9316:	4a09      	ldr	r2, [pc, #36]	; (933c <Lpspi_Ip_UpdateTransferMode+0x38>)
    9318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    931c:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Transfer mode can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    931e:	9b02      	ldr	r3, [sp, #8]
    9320:	685b      	ldr	r3, [r3, #4]
    9322:	2b02      	cmp	r3, #2
    9324:	d003      	beq.n	932e <Lpspi_Ip_UpdateTransferMode+0x2a>
    {
        State->TransferMode = Mode;
    9326:	9b02      	ldr	r3, [sp, #8]
    9328:	9a00      	ldr	r2, [sp, #0]
    932a:	601a      	str	r2, [r3, #0]
    932c:	e001      	b.n	9332 <Lpspi_Ip_UpdateTransferMode+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    932e:	2301      	movs	r3, #1
    9330:	9303      	str	r3, [sp, #12]
    }
    return Status;
    9332:	9b03      	ldr	r3, [sp, #12]
}
    9334:	4618      	mov	r0, r3
    9336:	b004      	add	sp, #16
    9338:	4770      	bx	lr
    933a:	bf00      	nop
    933c:	1fff8dd8 	.word	0x1fff8dd8

00009340 <Lpspi_Ip_Cancel>:

void Lpspi_Ip_Cancel(uint8 Instance)
{
    9340:	b500      	push	{lr}
    9342:	b087      	sub	sp, #28
    9344:	4603      	mov	r3, r0
    9346:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    uint32 Cfgr1 = 0u;
    934a:	2300      	movs	r3, #0
    934c:	9305      	str	r3, [sp, #20]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    934e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9352:	4a18      	ldr	r2, [pc, #96]	; (93b4 <Lpspi_Ip_Cancel+0x74>)
    9354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9358:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    935a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    935e:	4a16      	ldr	r2, [pc, #88]	; (93b8 <Lpspi_Ip_Cancel+0x78>)
    9360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9364:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10();
    9366:	f00d f857 	bl	16418 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>
    if (LPSPI_IP_BUSY == State->Status)
    936a:	9b03      	ldr	r3, [sp, #12]
    936c:	685b      	ldr	r3, [r3, #4]
    936e:	2b02      	cmp	r3, #2
    9370:	d11a      	bne.n	93a8 <Lpspi_Ip_Cancel+0x68>
    {
        /* Mask Rx to discard received data */
        Base->TCR |= LPSPI_TCR_RXMSK(1);
    9372:	9b04      	ldr	r3, [sp, #16]
    9374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9376:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    937a:	9b04      	ldr	r3, [sp, #16]
    937c:	661a      	str	r2, [r3, #96]	; 0x60
        /* store CFGR1 and restore after all registers are reset */
        Cfgr1 = Base->CFGR1;
    937e:	9b04      	ldr	r3, [sp, #16]
    9380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9382:	9305      	str	r3, [sp, #20]
        /* Disable interrupts and DMA requests. */
        /* Clear FIFO */
        /* RTF and RRF will not clear shifter, so RST must be used to ensure old Data in shifter will also be cleared. */
        Base->CR |= LPSPI_CR_RST_MASK;
    9384:	9b04      	ldr	r3, [sp, #16]
    9386:	691b      	ldr	r3, [r3, #16]
    9388:	f043 0202 	orr.w	r2, r3, #2
    938c:	9b04      	ldr	r3, [sp, #16]
    938e:	611a      	str	r2, [r3, #16]
        Base->CR &= ~LPSPI_CR_RST_MASK;
    9390:	9b04      	ldr	r3, [sp, #16]
    9392:	691b      	ldr	r3, [r3, #16]
    9394:	f023 0202 	bic.w	r2, r3, #2
    9398:	9b04      	ldr	r3, [sp, #16]
    939a:	611a      	str	r2, [r3, #16]
        /* restore CFGR1 */
        Base->CFGR1 = Cfgr1;
    939c:	9b04      	ldr	r3, [sp, #16]
    939e:	9a05      	ldr	r2, [sp, #20]
    93a0:	625a      	str	r2, [r3, #36]	; 0x24
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->RxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->TxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
        #endif
        /* set State to idle */
        State->Status = LPSPI_IP_IDLE;
    93a2:	9b03      	ldr	r3, [sp, #12]
    93a4:	2201      	movs	r2, #1
    93a6:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10();
    93a8:	f00d f862 	bl	16470 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>
}
    93ac:	bf00      	nop
    93ae:	b007      	add	sp, #28
    93b0:	f85d fb04 	ldr.w	pc, [sp], #4
    93b4:	0001851c 	.word	0x0001851c
    93b8:	1fff8dd8 	.word	0x1fff8dd8

000093bc <Lpspi_Ip_IrqHandler>:
* @param[in]     Instance            Instance of the hardware unit.
*
* @implements Lpspi_Ip_IrqHandler_Activity
*/
void Lpspi_Ip_IrqHandler(uint8 Instance)
{
    93bc:	b500      	push	{lr}
    93be:	b087      	sub	sp, #28
    93c0:	4603      	mov	r3, r0
    93c2:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    93c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93ca:	4a18      	ldr	r2, [pc, #96]	; (942c <Lpspi_Ip_IrqHandler+0x70>)
    93cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93d0:	9305      	str	r3, [sp, #20]
    const Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    93d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93d6:	4a16      	ldr	r2, [pc, #88]	; (9430 <Lpspi_Ip_IrqHandler+0x74>)
    93d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93dc:	9304      	str	r3, [sp, #16]
    uint32 IrqFlags = 0u;
    93de:	2300      	movs	r3, #0
    93e0:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != State)
    93e2:	9b04      	ldr	r3, [sp, #16]
    93e4:	2b00      	cmp	r3, #0
    93e6:	d016      	beq.n	9416 <Lpspi_Ip_IrqHandler+0x5a>
    {
        /* the driver has been initialized */
        IrqFlags = Base->SR & (LPSPI_SR_TDF_MASK | LPSPI_SR_RDF_MASK | LPSPI_SR_TEF_MASK | LPSPI_SR_REF_MASK);
    93e8:	9b05      	ldr	r3, [sp, #20]
    93ea:	695a      	ldr	r2, [r3, #20]
    93ec:	f641 0303 	movw	r3, #6147	; 0x1803
    93f0:	4013      	ands	r3, r2
    93f2:	9303      	str	r3, [sp, #12]
        IrqFlags &= Base->IER & (LPSPI_IER_TDIE_MASK | LPSPI_IER_RDIE_MASK | LPSPI_IER_TEIE_MASK | LPSPI_IER_REIE_MASK);
    93f4:	9b05      	ldr	r3, [sp, #20]
    93f6:	699a      	ldr	r2, [r3, #24]
    93f8:	f641 0303 	movw	r3, #6147	; 0x1803
    93fc:	4013      	ands	r3, r2
    93fe:	9a03      	ldr	r2, [sp, #12]
    9400:	4013      	ands	r3, r2
    9402:	9303      	str	r3, [sp, #12]
        if (0u != IrqFlags)
    9404:	9b03      	ldr	r3, [sp, #12]
    9406:	2b00      	cmp	r3, #0
    9408:	d00b      	beq.n	9422 <Lpspi_Ip_IrqHandler+0x66>
                Lpspi_Ip_TransferProcessHalfDuplex(Instance);    
            }
            else
            #endif
            {
                Lpspi_Ip_TransferProcess(Instance); 
    940a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    940e:	4618      	mov	r0, r3
    9410:	f7fe ffde 	bl	83d0 <Lpspi_Ip_TransferProcess>
    {
        /* the driver has not been initialized */
        /* clear all flags */
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    }
}
    9414:	e005      	b.n	9422 <Lpspi_Ip_IrqHandler+0x66>
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    9416:	9b05      	ldr	r3, [sp, #20]
    9418:	695b      	ldr	r3, [r3, #20]
    941a:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    941e:	9b05      	ldr	r3, [sp, #20]
    9420:	615a      	str	r2, [r3, #20]
}
    9422:	bf00      	nop
    9424:	b007      	add	sp, #28
    9426:	f85d fb04 	ldr.w	pc, [sp], #4
    942a:	bf00      	nop
    942c:	0001851c 	.word	0x0001851c
    9430:	1fff8dd8 	.word	0x1fff8dd8

00009434 <Lpspi_Ip_GetStatus>:
* @param[in]        Instance - SPI peripheral instance number.
*
* @return           Lpspi_Ip_HwStatusType
*/
Lpspi_Ip_HwStatusType Lpspi_Ip_GetStatus(uint8 Instance)
{
    9434:	b084      	sub	sp, #16
    9436:	4603      	mov	r3, r0
    9438:	f88d 3007 	strb.w	r3, [sp, #7]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_HwStatusType Status = LPSPI_IP_UNINIT;
    943c:	2300      	movs	r3, #0
    943e:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    9440:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9444:	4a06      	ldr	r2, [pc, #24]	; (9460 <Lpspi_Ip_GetStatus+0x2c>)
    9446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    944a:	9302      	str	r3, [sp, #8]
    if (State != NULL_PTR)
    944c:	9b02      	ldr	r3, [sp, #8]
    944e:	2b00      	cmp	r3, #0
    9450:	d002      	beq.n	9458 <Lpspi_Ip_GetStatus+0x24>
    {
        Status = State->Status;
    9452:	9b02      	ldr	r3, [sp, #8]
    9454:	685b      	ldr	r3, [r3, #4]
    9456:	9303      	str	r3, [sp, #12]
    }
    
    return Status;
    9458:	9b03      	ldr	r3, [sp, #12]
}
    945a:	4618      	mov	r0, r3
    945c:	b004      	add	sp, #16
    945e:	4770      	bx	lr
    9460:	1fff8dd8 	.word	0x1fff8dd8

00009464 <Spi_CheckInit>:
static inline Std_ReturnType Spi_CheckInit
    ( 
        const Spi_ConfigType *ConfigPtr,
        uint32 SpiCoreID
    )
{
    9464:	b086      	sub	sp, #24
    9466:	9001      	str	r0, [sp, #4]
    9468:	9100      	str	r1, [sp, #0]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    946a:	2300      	movs	r3, #0
    946c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 Sequence;
#endif

#if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
    /* Configuration sizes must be checked for Post Build & Link Time configurations */
    Channel  = (uint32)(ConfigPtr->SpiMaxChannel);
    9470:	9b01      	ldr	r3, [sp, #4]
    9472:	789b      	ldrb	r3, [r3, #2]
    9474:	9304      	str	r3, [sp, #16]
    Job      = (uint32)(ConfigPtr->SpiMaxJob);
    9476:	9b01      	ldr	r3, [sp, #4]
    9478:	889b      	ldrh	r3, [r3, #4]
    947a:	9303      	str	r3, [sp, #12]
    Sequence = (uint32)(ConfigPtr->SpiMaxSequence);
    947c:	9b01      	ldr	r3, [sp, #4]
    947e:	799b      	ldrb	r3, [r3, #6]
    9480:	9302      	str	r3, [sp, #8]

    if ((Channel >= SPI_MAX_CHANNEL) || (Job >= SPI_MAX_JOB) || (Sequence >= SPI_MAX_SEQUENCE))
    9482:	9b04      	ldr	r3, [sp, #16]
    9484:	2b01      	cmp	r3, #1
    9486:	d805      	bhi.n	9494 <Spi_CheckInit+0x30>
    9488:	9b03      	ldr	r3, [sp, #12]
    948a:	2b00      	cmp	r3, #0
    948c:	d102      	bne.n	9494 <Spi_CheckInit+0x30>
    948e:	9b02      	ldr	r3, [sp, #8]
    9490:	2b00      	cmp	r3, #0
    9492:	d002      	beq.n	949a <Spi_CheckInit+0x36>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    9494:	2301      	movs	r3, #1
    9496:	f88d 3017 	strb.w	r3, [sp, #23]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_CONFIG_OUT_OF_RANGE);
#endif
    }
    if (SpiCoreID != ConfigPtr->SpiCoreUse)
    949a:	9b01      	ldr	r3, [sp, #4]
    949c:	689b      	ldr	r3, [r3, #8]
    949e:	9a00      	ldr	r2, [sp, #0]
    94a0:	429a      	cmp	r2, r3
    94a2:	d002      	beq.n	94aa <Spi_CheckInit+0x46>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    94a4:	2301      	movs	r3, #1
    94a6:	f88d 3017 	strb.w	r3, [sp, #23]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_INVALID_POINTER);
#endif
    }
#endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */

    return CheckStatus;
    94aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    94ae:	4618      	mov	r0, r3
    94b0:	b006      	add	sp, #24
    94b2:	4770      	bx	lr

000094b4 <Spi_SyncJobsTranfer>:
static Std_ReturnType Spi_SyncJobsTranfer
    (
        const Spi_SequenceConfigType *SequenceConfig,
        uint32 SpiCoreID
    )
{
    94b4:	b500      	push	{lr}
    94b6:	b089      	sub	sp, #36	; 0x24
    94b8:	9001      	str	r0, [sp, #4]
    94ba:	9100      	str	r1, [sp, #0]
    Spi_JobType JobsCount;
    const Spi_JobType *JobIndexList;
    Spi_JobType Job;
    Spi_JobStateType *JobState;
    const Spi_JobConfigType *JobConfig;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    94bc:	2300      	movs	r3, #0
    94be:	f88d 3017 	strb.w	r3, [sp, #23]
    
    /* Get the number of jobs in the sequence */
    JobsCount = SequenceConfig->NumJobs;
    94c2:	9b01      	ldr	r3, [sp, #4]
    94c4:	881b      	ldrh	r3, [r3, #0]
    94c6:	f8ad 301e 	strh.w	r3, [sp, #30]
    JobIndexList = SequenceConfig->JobIndexList;
    94ca:	9b01      	ldr	r3, [sp, #4]
    94cc:	689b      	ldr	r3, [r3, #8]
    94ce:	9306      	str	r3, [sp, #24]
    while (0u < JobsCount)
    94d0:	e072      	b.n	95b8 <Spi_SyncJobsTranfer+0x104>
    {
        /* Get the job id */
        Job = *JobIndexList;
    94d2:	9b06      	ldr	r3, [sp, #24]
    94d4:	881b      	ldrh	r3, [r3, #0]
    94d6:	f8ad 3014 	strh.w	r3, [sp, #20]
        /* Set the job status as pending */
        JobState = &Spi_axSpiJobState[Job];
    94da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    94de:	009b      	lsls	r3, r3, #2
    94e0:	4a3a      	ldr	r2, [pc, #232]	; (95cc <Spi_SyncJobsTranfer+0x118>)
    94e2:	4413      	add	r3, r2
    94e4:	9304      	str	r3, [sp, #16]
        JobState->Result = SPI_JOB_PENDING;
    94e6:	9b04      	ldr	r3, [sp, #16]
    94e8:	2201      	movs	r2, #1
    94ea:	601a      	str	r2, [r3, #0]
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    94ec:	4a38      	ldr	r2, [pc, #224]	; (95d0 <Spi_SyncJobsTranfer+0x11c>)
    94ee:	9b00      	ldr	r3, [sp, #0]
    94f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94f4:	691a      	ldr	r2, [r3, #16]
    94f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    94fa:	009b      	lsls	r3, r3, #2
    94fc:	4413      	add	r3, r2
    94fe:	681b      	ldr	r3, [r3, #0]
    9500:	9303      	str	r3, [sp, #12]
        
        /* start job notification to assert the non-cs pin,
        when non-cs pin is used as chipselect*/
        if (NULL_PTR != JobConfig->StartNotification)
    9502:	9b03      	ldr	r3, [sp, #12]
    9504:	68db      	ldr	r3, [r3, #12]
    9506:	2b00      	cmp	r3, #0
    9508:	d002      	beq.n	9510 <Spi_SyncJobsTranfer+0x5c>
        {
            JobConfig->StartNotification();
    950a:	9b03      	ldr	r3, [sp, #12]
    950c:	68db      	ldr	r3, [r3, #12]
    950e:	4798      	blx	r3
        else
        {
            /* Do nothing */
        }
        /* Mark HWUnit as busy */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_BUSY;
    9510:	9b03      	ldr	r3, [sp, #12]
    9512:	7f1b      	ldrb	r3, [r3, #28]
    9514:	4619      	mov	r1, r3
    9516:	4b2f      	ldr	r3, [pc, #188]	; (95d4 <Spi_SyncJobsTranfer+0x120>)
    9518:	2202      	movs	r2, #2
    951a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        Status = Spi_Ipw_SyncTransmit(JobConfig, SpiCoreID);
    951e:	9900      	ldr	r1, [sp, #0]
    9520:	9803      	ldr	r0, [sp, #12]
    9522:	f000 fc5f 	bl	9de4 <Spi_Ipw_SyncTransmit>
    9526:	4603      	mov	r3, r0
    9528:	f88d 3017 	strb.w	r3, [sp, #23]
        
        /* release HWUnit */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_IDLE;
    952c:	9b03      	ldr	r3, [sp, #12]
    952e:	7f1b      	ldrb	r3, [r3, #28]
    9530:	4619      	mov	r1, r3
    9532:	4b28      	ldr	r3, [pc, #160]	; (95d4 <Spi_SyncJobsTranfer+0x120>)
    9534:	2201      	movs	r2, #1
    9536:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        if ((Std_ReturnType)E_OK == Status)
    953a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    953e:	2b00      	cmp	r3, #0
    9540:	d10a      	bne.n	9558 <Spi_SyncJobsTranfer+0xa4>
        {
            /* Job is done set the status as OK */
            JobState->Result = SPI_JOB_OK;
    9542:	9b04      	ldr	r3, [sp, #16]
    9544:	2200      	movs	r2, #0
    9546:	601a      	str	r2, [r3, #0]
            /* Perform job EndNotification (if there is one) */
            if (NULL_PTR != JobConfig->EndNotification)
    9548:	9b03      	ldr	r3, [sp, #12]
    954a:	689b      	ldr	r3, [r3, #8]
    954c:	2b00      	cmp	r3, #0
    954e:	d02b      	beq.n	95a8 <Spi_SyncJobsTranfer+0xf4>
            {
                JobConfig->EndNotification();
    9550:	9b03      	ldr	r3, [sp, #12]
    9552:	689b      	ldr	r3, [r3, #8]
    9554:	4798      	blx	r3
    9556:	e027      	b.n	95a8 <Spi_SyncJobsTranfer+0xf4>
            /* transmission failed */
            /* set the remaining job status (including the current one) as FAILED */
            do
            {
                /* Set the job status as FAILED */
                Spi_axSpiJobState[*JobIndexList].Result = SPI_JOB_FAILED;
    9558:	9b06      	ldr	r3, [sp, #24]
    955a:	881b      	ldrh	r3, [r3, #0]
    955c:	4619      	mov	r1, r3
    955e:	4b1b      	ldr	r3, [pc, #108]	; (95cc <Spi_SyncJobsTranfer+0x118>)
    9560:	2202      	movs	r2, #2
    9562:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                /* Update pointer position for JobConfig */
                JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[*JobIndexList].JobCfg;
    9566:	4a1a      	ldr	r2, [pc, #104]	; (95d0 <Spi_SyncJobsTranfer+0x11c>)
    9568:	9b00      	ldr	r3, [sp, #0]
    956a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    956e:	691a      	ldr	r2, [r3, #16]
    9570:	9b06      	ldr	r3, [sp, #24]
    9572:	881b      	ldrh	r3, [r3, #0]
    9574:	009b      	lsls	r3, r3, #2
    9576:	4413      	add	r3, r2
    9578:	681b      	ldr	r3, [r3, #0]
    957a:	9303      	str	r3, [sp, #12]
                /* Perform job EndNotification (if there is one) */
                if (NULL_PTR != JobConfig->EndNotification)
    957c:	9b03      	ldr	r3, [sp, #12]
    957e:	689b      	ldr	r3, [r3, #8]
    9580:	2b00      	cmp	r3, #0
    9582:	d002      	beq.n	958a <Spi_SyncJobsTranfer+0xd6>
                {
                    JobConfig->EndNotification();
    9584:	9b03      	ldr	r3, [sp, #12]
    9586:	689b      	ldr	r3, [r3, #8]
    9588:	4798      	blx	r3
                }
                else
                {
                    /* Do nothing */
                }
                JobIndexList++;
    958a:	9b06      	ldr	r3, [sp, #24]
    958c:	3302      	adds	r3, #2
    958e:	9306      	str	r3, [sp, #24]
                JobsCount--;
    9590:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9594:	3b01      	subs	r3, #1
    9596:	f8ad 301e 	strh.w	r3, [sp, #30]
            } while (0u < JobsCount);
    959a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    959e:	2b00      	cmp	r3, #0
    95a0:	d1da      	bne.n	9558 <Spi_SyncJobsTranfer+0xa4>
            JobsCount = 1u;  /* needed to end correctly the outer loop */
    95a2:	2301      	movs	r3, #1
    95a4:	f8ad 301e 	strh.w	r3, [sp, #30]
        }
        /* iterate to next job in sequence */
        JobIndexList++;
    95a8:	9b06      	ldr	r3, [sp, #24]
    95aa:	3302      	adds	r3, #2
    95ac:	9306      	str	r3, [sp, #24]
        JobsCount--;
    95ae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    95b2:	3b01      	subs	r3, #1
    95b4:	f8ad 301e 	strh.w	r3, [sp, #30]
    while (0u < JobsCount)
    95b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    95bc:	2b00      	cmp	r3, #0
    95be:	d188      	bne.n	94d2 <Spi_SyncJobsTranfer+0x1e>
    } /* while (JobsCount > 0u) */
    return Status;
    95c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    95c4:	4618      	mov	r0, r3
    95c6:	b009      	add	sp, #36	; 0x24
    95c8:	f85d fb04 	ldr.w	pc, [sp], #4
    95cc:	1fff8df4 	.word	0x1fff8df4
    95d0:	1fff8dec 	.word	0x1fff8dec
    95d4:	1fff8de4 	.word	0x1fff8de4

000095d8 <Spi_InitChannelsJobsSeqsState>:
*/
static void Spi_InitChannelsJobsSeqsState
    (
        uint32 SpiCoreID      
    )
{
    95d8:	b088      	sub	sp, #32
    95da:	9001      	str	r0, [sp, #4]
#endif
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_JobConfigType *JobConfig;
    const Spi_SequenceConfigType *SequenceConfig;
    
    for (Channel = 0u;
    95dc:	2300      	movs	r3, #0
    95de:	9307      	str	r3, [sp, #28]
    95e0:	e034      	b.n	964c <Spi_InitChannelsJobsSeqsState+0x74>
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
        Channel++)
    {
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    95e2:	4a4a      	ldr	r2, [pc, #296]	; (970c <Spi_InitChannelsJobsSeqsState+0x134>)
    95e4:	9b01      	ldr	r3, [sp, #4]
    95e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95ea:	68da      	ldr	r2, [r3, #12]
    95ec:	9b07      	ldr	r3, [sp, #28]
    95ee:	009b      	lsls	r3, r3, #2
    95f0:	4413      	add	r3, r2
    95f2:	681b      	ldr	r3, [r3, #0]
    95f4:	9302      	str	r3, [sp, #8]
        /* Check which channel has assigned for current core */
        if((NULL_PTR != ChannelConfig) && (SpiCoreID == ChannelConfig->SpiCoreUse))
    95f6:	9b02      	ldr	r3, [sp, #8]
    95f8:	2b00      	cmp	r3, #0
    95fa:	d024      	beq.n	9646 <Spi_InitChannelsJobsSeqsState+0x6e>
    95fc:	9b02      	ldr	r3, [sp, #8]
    95fe:	695b      	ldr	r3, [r3, #20]
    9600:	9a01      	ldr	r2, [sp, #4]
    9602:	429a      	cmp	r2, r3
    9604:	d11f      	bne.n	9646 <Spi_InitChannelsJobsSeqsState+0x6e>
        {
            /* Check if configured buffers are External (EB) */
            if (EB == ChannelConfig->BufferType)
    9606:	9b02      	ldr	r3, [sp, #8]
    9608:	681b      	ldr	r3, [r3, #0]
    960a:	2b01      	cmp	r3, #1
    960c:	d10e      	bne.n	962c <Spi_InitChannelsJobsSeqsState+0x54>
            {
                /* Initialize all buffers */
                ChannelConfig->BufferDescriptor->ExternalBufferTX = NULL_PTR;
    960e:	9b02      	ldr	r3, [sp, #8]
    9610:	691b      	ldr	r3, [r3, #16]
    9612:	2200      	movs	r2, #0
    9614:	601a      	str	r2, [r3, #0]
                ChannelConfig->BufferDescriptor->BufferRX = NULL_PTR;
    9616:	9b02      	ldr	r3, [sp, #8]
    9618:	691b      	ldr	r3, [r3, #16]
    961a:	2200      	movs	r2, #0
    961c:	609a      	str	r2, [r3, #8]
    
                /* Channel length is zero for unconfigured external buffers */
                Spi_axSpiChannelState[Channel].Length = (Spi_NumberOfDataType) 0;
    961e:	4a3c      	ldr	r2, [pc, #240]	; (9710 <Spi_InitChannelsJobsSeqsState+0x138>)
    9620:	9b07      	ldr	r3, [sp, #28]
    9622:	009b      	lsls	r3, r3, #2
    9624:	4413      	add	r3, r2
    9626:	2200      	movs	r2, #0
    9628:	805a      	strh	r2, [r3, #2]
    962a:	e007      	b.n	963c <Spi_InitChannelsJobsSeqsState+0x64>
            }
            else
            {
                /* Setup channel length according to configuration */
                Spi_axSpiChannelState[Channel].Length = ChannelConfig->Length;
    962c:	9b02      	ldr	r3, [sp, #8]
    962e:	8999      	ldrh	r1, [r3, #12]
    9630:	4a37      	ldr	r2, [pc, #220]	; (9710 <Spi_InitChannelsJobsSeqsState+0x138>)
    9632:	9b07      	ldr	r3, [sp, #28]
    9634:	009b      	lsls	r3, r3, #2
    9636:	4413      	add	r3, r2
    9638:	460a      	mov	r2, r1
    963a:	805a      	strh	r2, [r3, #2]
            }
            Spi_axSpiChannelState[Channel].Flags = SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    963c:	4a34      	ldr	r2, [pc, #208]	; (9710 <Spi_InitChannelsJobsSeqsState+0x138>)
    963e:	9b07      	ldr	r3, [sp, #28]
    9640:	2101      	movs	r1, #1
    9642:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        Channel++)
    9646:	9b07      	ldr	r3, [sp, #28]
    9648:	3301      	adds	r3, #1
    964a:	9307      	str	r3, [sp, #28]
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
    964c:	4a2f      	ldr	r2, [pc, #188]	; (970c <Spi_InitChannelsJobsSeqsState+0x134>)
    964e:	9b01      	ldr	r3, [sp, #4]
    9650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9654:	789b      	ldrb	r3, [r3, #2]
    9656:	461a      	mov	r2, r3
    for (Channel = 0u;
    9658:	9b07      	ldr	r3, [sp, #28]
    965a:	4293      	cmp	r3, r2
    965c:	d9c1      	bls.n	95e2 <Spi_InitChannelsJobsSeqsState+0xa>
        }
    }
    
    /* initialize job results */
    for (Job = 0u;
    965e:	2300      	movs	r3, #0
    9660:	9306      	str	r3, [sp, #24]
    9662:	e019      	b.n	9698 <Spi_InitChannelsJobsSeqsState+0xc0>
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
        Job++)
    {
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9664:	4a29      	ldr	r2, [pc, #164]	; (970c <Spi_InitChannelsJobsSeqsState+0x134>)
    9666:	9b01      	ldr	r3, [sp, #4]
    9668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    966c:	691a      	ldr	r2, [r3, #16]
    966e:	9b06      	ldr	r3, [sp, #24]
    9670:	009b      	lsls	r3, r3, #2
    9672:	4413      	add	r3, r2
    9674:	681b      	ldr	r3, [r3, #0]
    9676:	9303      	str	r3, [sp, #12]
        if((NULL_PTR != JobConfig) && (SpiCoreID == JobConfig->SpiCoreUse))
    9678:	9b03      	ldr	r3, [sp, #12]
    967a:	2b00      	cmp	r3, #0
    967c:	d009      	beq.n	9692 <Spi_InitChannelsJobsSeqsState+0xba>
    967e:	9b03      	ldr	r3, [sp, #12]
    9680:	695b      	ldr	r3, [r3, #20]
    9682:	9a01      	ldr	r2, [sp, #4]
    9684:	429a      	cmp	r2, r3
    9686:	d104      	bne.n	9692 <Spi_InitChannelsJobsSeqsState+0xba>
        {
            Spi_axSpiJobState[Job].Result = SPI_JOB_OK;
    9688:	4a22      	ldr	r2, [pc, #136]	; (9714 <Spi_InitChannelsJobsSeqsState+0x13c>)
    968a:	9b06      	ldr	r3, [sp, #24]
    968c:	2100      	movs	r1, #0
    968e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Job++)
    9692:	9b06      	ldr	r3, [sp, #24]
    9694:	3301      	adds	r3, #1
    9696:	9306      	str	r3, [sp, #24]
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
    9698:	4a1c      	ldr	r2, [pc, #112]	; (970c <Spi_InitChannelsJobsSeqsState+0x134>)
    969a:	9b01      	ldr	r3, [sp, #4]
    969c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96a0:	889b      	ldrh	r3, [r3, #4]
    96a2:	461a      	mov	r2, r3
    for (Job = 0u;
    96a4:	9b06      	ldr	r3, [sp, #24]
    96a6:	4293      	cmp	r3, r2
    96a8:	d9dc      	bls.n	9664 <Spi_InitChannelsJobsSeqsState+0x8c>
            Spi_axSpiJobState[Job].AsyncCrtSequenceState = NULL_PTR;
        #endif
        }
    }
    
    for (Sequence = 0u;
    96aa:	2300      	movs	r3, #0
    96ac:	9305      	str	r3, [sp, #20]
    96ae:	e01f      	b.n	96f0 <Spi_InitChannelsJobsSeqsState+0x118>
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
        Sequence++)
    {
        SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    96b0:	4a16      	ldr	r2, [pc, #88]	; (970c <Spi_InitChannelsJobsSeqsState+0x134>)
    96b2:	9b01      	ldr	r3, [sp, #4]
    96b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96b8:	695a      	ldr	r2, [r3, #20]
    96ba:	9b05      	ldr	r3, [sp, #20]
    96bc:	009b      	lsls	r3, r3, #2
    96be:	4413      	add	r3, r2
    96c0:	681b      	ldr	r3, [r3, #0]
    96c2:	9304      	str	r3, [sp, #16]
        if ((NULL_PTR != SequenceConfig) && (SpiCoreID == SequenceConfig->SpiCoreUse))
    96c4:	9b04      	ldr	r3, [sp, #16]
    96c6:	2b00      	cmp	r3, #0
    96c8:	d00f      	beq.n	96ea <Spi_InitChannelsJobsSeqsState+0x112>
    96ca:	9b04      	ldr	r3, [sp, #16]
    96cc:	685b      	ldr	r3, [r3, #4]
    96ce:	9a01      	ldr	r2, [sp, #4]
    96d0:	429a      	cmp	r2, r3
    96d2:	d10a      	bne.n	96ea <Spi_InitChannelsJobsSeqsState+0x112>
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
            Spi_axSpiSequenceState[Sequence].Sequence = SequenceConfig;
            #endif
    
            /* initialize sequence results */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_OK;
    96d4:	4a10      	ldr	r2, [pc, #64]	; (9718 <Spi_InitChannelsJobsSeqsState+0x140>)
    96d6:	9b05      	ldr	r3, [sp, #20]
    96d8:	2100      	movs	r1, #0
    96da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* SPI135: Spi_SyncTransmit() must fail if an other sync transmission
                    is ongoing.*/
            /* mark all HW units as used by the sync transmission, in order to
                force the mutual exclusion of Spi_SyncTransmit() calls */
    
            Spi_au32SpiSeqUsedHWUnits[Sequence] = 0xFFFFFFFFU;
    96de:	4a0f      	ldr	r2, [pc, #60]	; (971c <Spi_InitChannelsJobsSeqsState+0x144>)
    96e0:	9b05      	ldr	r3, [sp, #20]
    96e2:	f04f 31ff 	mov.w	r1, #4294967295
    96e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Sequence++)
    96ea:	9b05      	ldr	r3, [sp, #20]
    96ec:	3301      	adds	r3, #1
    96ee:	9305      	str	r3, [sp, #20]
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
    96f0:	4a06      	ldr	r2, [pc, #24]	; (970c <Spi_InitChannelsJobsSeqsState+0x134>)
    96f2:	9b01      	ldr	r3, [sp, #4]
    96f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96f8:	799b      	ldrb	r3, [r3, #6]
    96fa:	461a      	mov	r2, r3
    for (Sequence = 0u;
    96fc:	9b05      	ldr	r3, [sp, #20]
    96fe:	4293      	cmp	r3, r2
    9700:	d9d6      	bls.n	96b0 <Spi_InitChannelsJobsSeqsState+0xd8>
        else
        {
            /* Do nothing */
        }
    }
}
    9702:	bf00      	nop
    9704:	bf00      	nop
    9706:	b008      	add	sp, #32
    9708:	4770      	bx	lr
    970a:	bf00      	nop
    970c:	1fff8dec 	.word	0x1fff8dec
    9710:	1fff8df8 	.word	0x1fff8df8
    9714:	1fff8df4 	.word	0x1fff8df4
    9718:	1fff8df0 	.word	0x1fff8df0
    971c:	1fff8e00 	.word	0x1fff8e00

00009720 <Spi_GetStatusAsyncCheckHwBusy>:
*/
static Spi_StatusType Spi_GetStatusAsyncCheckHwBusy
    (
        uint32 SpiCoreID
    )
{
    9720:	b084      	sub	sp, #16
    9722:	9001      	str	r0, [sp, #4]
    Spi_StatusType StatusFlag = SPI_IDLE;
    9724:	2301      	movs	r3, #1
    9726:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9728:	2300      	movs	r3, #0
    972a:	f88d 300b 	strb.w	r3, [sp, #11]
    972e:	e028      	b.n	9782 <Spi_GetStatusAsyncCheckHwBusy+0x62>
    {
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9730:	4a18      	ldr	r2, [pc, #96]	; (9794 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    9732:	9b01      	ldr	r3, [sp, #4]
    9734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9738:	69da      	ldr	r2, [r3, #28]
    973a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    973e:	009b      	lsls	r3, r3, #2
    9740:	4413      	add	r3, r2
    9742:	681b      	ldr	r3, [r3, #0]
    9744:	2b00      	cmp	r3, #0
    9746:	d017      	beq.n	9778 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9748:	4a12      	ldr	r2, [pc, #72]	; (9794 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    974a:	9b01      	ldr	r3, [sp, #4]
    974c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9750:	69da      	ldr	r2, [r3, #28]
    9752:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9756:	009b      	lsls	r3, r3, #2
    9758:	4413      	add	r3, r2
    975a:	681b      	ldr	r3, [r3, #0]
    975c:	689b      	ldr	r3, [r3, #8]
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    975e:	9a01      	ldr	r2, [sp, #4]
    9760:	429a      	cmp	r2, r3
    9762:	d109      	bne.n	9778 <Spi_GetStatusAsyncCheckHwBusy+0x58>
           )
        {
            if (SPI_BUSY == Spi_axSpiHwUnitQueueArray[HWUnit].Status)
    9764:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9768:	4a0b      	ldr	r2, [pc, #44]	; (9798 <Spi_GetStatusAsyncCheckHwBusy+0x78>)
    976a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    976e:	2b02      	cmp	r3, #2
    9770:	d102      	bne.n	9778 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            {
                StatusFlag = SPI_BUSY;
    9772:	2302      	movs	r3, #2
    9774:	9303      	str	r3, [sp, #12]
                break;
    9776:	e008      	b.n	978a <Spi_GetStatusAsyncCheckHwBusy+0x6a>
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9778:	f89d 300b 	ldrb.w	r3, [sp, #11]
    977c:	3301      	adds	r3, #1
    977e:	f88d 300b 	strb.w	r3, [sp, #11]
    9782:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9786:	2b00      	cmp	r3, #0
    9788:	d0d2      	beq.n	9730 <Spi_GetStatusAsyncCheckHwBusy+0x10>
        else
        {
            /* Do nothing */
        }
    }
    return StatusFlag;
    978a:	9b03      	ldr	r3, [sp, #12]
}
    978c:	4618      	mov	r0, r3
    978e:	b004      	add	sp, #16
    9790:	4770      	bx	lr
    9792:	bf00      	nop
    9794:	1fff8dec 	.word	0x1fff8dec
    9798:	1fff8de4 	.word	0x1fff8de4

0000979c <Spi_GetVersionInfo>:
/** @implements Spi_GetVersionInfo_Activity */
void Spi_GetVersionInfo 
    (
        Std_VersionInfoType *versioninfo
    )
{
    979c:	b082      	sub	sp, #8
    979e:	9001      	str	r0, [sp, #4]
        (void)Det_ReportError((uint16)SPI_MODULE_ID,(uint8)0,SPI_GETVERSIONINFO_ID,SPI_E_PARAM_POINTER);
    }
    else
    {
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
    versioninfo->vendorID = (uint16)SPI_VENDOR_ID;
    97a0:	9b01      	ldr	r3, [sp, #4]
    97a2:	222b      	movs	r2, #43	; 0x2b
    97a4:	801a      	strh	r2, [r3, #0]
    versioninfo->moduleID = (uint8)SPI_MODULE_ID;
    97a6:	9b01      	ldr	r3, [sp, #4]
    97a8:	2253      	movs	r2, #83	; 0x53
    97aa:	805a      	strh	r2, [r3, #2]
    versioninfo->sw_major_version = (uint8)SPI_SW_MAJOR_VERSION;
    97ac:	9b01      	ldr	r3, [sp, #4]
    97ae:	2202      	movs	r2, #2
    97b0:	711a      	strb	r2, [r3, #4]
    versioninfo->sw_minor_version = (uint8)SPI_SW_MINOR_VERSION;
    97b2:	9b01      	ldr	r3, [sp, #4]
    97b4:	2200      	movs	r2, #0
    97b6:	715a      	strb	r2, [r3, #5]
    versioninfo->sw_patch_version = (uint8)SPI_SW_PATCH_VERSION;
    97b8:	9b01      	ldr	r3, [sp, #4]
    97ba:	2200      	movs	r2, #0
    97bc:	719a      	strb	r2, [r3, #6]
#if(SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
}
    97be:	bf00      	nop
    97c0:	b002      	add	sp, #8
    97c2:	4770      	bx	lr

000097c4 <Spi_Init>:
/** @implements Spi_Init_Activity */
void Spi_Init
    (
        const Spi_ConfigType *ConfigPtr
    )
{
    97c4:	b500      	push	{lr}
    97c6:	b085      	sub	sp, #20
    97c8:	9001      	str	r0, [sp, #4]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    97ca:	2300      	movs	r3, #0
    97cc:	f88d 300e 	strb.w	r3, [sp, #14]

    SpiCoreID = Spi_GetCoreID;
    97d0:	2300      	movs	r3, #0
    97d2:	9302      	str	r3, [sp, #8]
    CheckStatus = Spi_InitCheckDemError(SpiCoreID, ConfigPtr);
    if ((Std_ReturnType)E_OK == CheckStatus) 
    {
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/

    CheckStatus = Spi_CheckInit(ConfigPtr, SpiCoreID);
    97d4:	9902      	ldr	r1, [sp, #8]
    97d6:	9801      	ldr	r0, [sp, #4]
    97d8:	f7ff fe44 	bl	9464 <Spi_CheckInit>
    97dc:	4603      	mov	r3, r0
    97de:	f88d 300e 	strb.w	r3, [sp, #14]

    if((Std_ReturnType)E_OK == CheckStatus )
    97e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    97e6:	2b00      	cmp	r3, #0
    97e8:	d144      	bne.n	9874 <Spi_Init+0xb0>
    {
    #if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
        Spi_apxSpiConfigPtr[SpiCoreID] = ConfigPtr;
    97ea:	4924      	ldr	r1, [pc, #144]	; (987c <Spi_Init+0xb8>)
    97ec:	9b02      	ldr	r3, [sp, #8]
    97ee:	9a01      	ldr	r2, [sp, #4]
    97f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #else /* (SPI_CONFIG_VARIANT == SPI_VARIANT_PRECOMPILE) */
        Spi_apxSpiConfigPtr[SpiCoreID] = Spi_PBCfgVariantPredefined[SpiCoreID];
    #endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */
    /* Initiate Channels, Jobs, Sequences state */
    Spi_InitChannelsJobsSeqsState(SpiCoreID);
    97f4:	9802      	ldr	r0, [sp, #8]
    97f6:	f7ff feef 	bl	95d8 <Spi_InitChannelsJobsSeqsState>
        
        /* initialize all physical HWUnits */
        for (HWUnit = (Spi_HWUnitType) 0;
    97fa:	2300      	movs	r3, #0
    97fc:	f88d 300f 	strb.w	r3, [sp, #15]
    9800:	e034      	b.n	986c <Spi_Init+0xa8>
            HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
            HWUnit++)
        {
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9802:	4a1e      	ldr	r2, [pc, #120]	; (987c <Spi_Init+0xb8>)
    9804:	9b02      	ldr	r3, [sp, #8]
    9806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    980a:	69da      	ldr	r2, [r3, #28]
    980c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9810:	009b      	lsls	r3, r3, #2
    9812:	4413      	add	r3, r2
    9814:	681b      	ldr	r3, [r3, #0]
    9816:	2b00      	cmp	r3, #0
    9818:	d023      	beq.n	9862 <Spi_Init+0x9e>
               (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    981a:	4a18      	ldr	r2, [pc, #96]	; (987c <Spi_Init+0xb8>)
    981c:	9b02      	ldr	r3, [sp, #8]
    981e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9822:	69da      	ldr	r2, [r3, #28]
    9824:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9828:	009b      	lsls	r3, r3, #2
    982a:	4413      	add	r3, r2
    982c:	681b      	ldr	r3, [r3, #0]
    982e:	689b      	ldr	r3, [r3, #8]
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9830:	9a02      	ldr	r2, [sp, #8]
    9832:	429a      	cmp	r2, r3
    9834:	d115      	bne.n	9862 <Spi_Init+0x9e>
              )
            {
                Spi_Ipw_Init(HWUnit, Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig);
    9836:	4a11      	ldr	r2, [pc, #68]	; (987c <Spi_Init+0xb8>)
    9838:	9b02      	ldr	r3, [sp, #8]
    983a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    983e:	69da      	ldr	r2, [r3, #28]
    9840:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9844:	009b      	lsls	r3, r3, #2
    9846:	4413      	add	r3, r2
    9848:	681a      	ldr	r2, [r3, #0]
    984a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    984e:	4611      	mov	r1, r2
    9850:	4618      	mov	r0, r3
    9852:	f000 fa8c 	bl	9d6e <Spi_Ipw_Init>

#if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
                /* initialize the Job lists => no scheduled job for the unit */
                Spi_InitJobsList(HWUnit);
#endif
                Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_IDLE;
    9856:	f89d 300f 	ldrb.w	r3, [sp, #15]
    985a:	4a09      	ldr	r2, [pc, #36]	; (9880 <Spi_Init+0xbc>)
    985c:	2101      	movs	r1, #1
    985e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            HWUnit++)
    9862:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9866:	3301      	adds	r3, #1
    9868:	f88d 300f 	strb.w	r3, [sp, #15]
        for (HWUnit = (Spi_HWUnitType) 0;
    986c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9870:	2b00      	cmp	r3, #0
    9872:	d0c6      	beq.n	9802 <Spi_Init+0x3e>
    }

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/
}
    9874:	bf00      	nop
    9876:	b005      	add	sp, #20
    9878:	f85d fb04 	ldr.w	pc, [sp], #4
    987c:	1fff8dec 	.word	0x1fff8dec
    9880:	1fff8de4 	.word	0x1fff8de4

00009884 <Spi_DeInit>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_DeInit_Activity
*/
Std_ReturnType Spi_DeInit(void)
{
    9884:	b500      	push	{lr}
    9886:	b083      	sub	sp, #12
    Std_ReturnType TempExit = (Std_ReturnType)E_OK;
    9888:	2300      	movs	r3, #0
    988a:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;

    SpiCoreID = Spi_GetCoreID;
    988e:	2300      	movs	r3, #0
    9890:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Check if Spi Status is Busy */
        if (SPI_BUSY == Spi_GetStatus())
    9892:	f000 f8b1 	bl	99f8 <Spi_GetStatus>
    9896:	4603      	mov	r3, r0
    9898:	2b02      	cmp	r3, #2
    989a:	d103      	bne.n	98a4 <Spi_DeInit+0x20>
        {
            TempExit = E_NOT_OK;
    989c:	2301      	movs	r3, #1
    989e:	f88d 3007 	strb.w	r3, [sp, #7]
    98a2:	e037      	b.n	9914 <Spi_DeInit+0x90>
        }
        else
        {
            /* De-initialize all physical HWUnits */
            for (HWUnit = (Spi_HWUnitType) 0;
    98a4:	2300      	movs	r3, #0
    98a6:	f88d 3006 	strb.w	r3, [sp, #6]
    98aa:	e02a      	b.n	9902 <Spi_DeInit+0x7e>
                 HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
                 HWUnit++)
            {
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    98ac:	4a1c      	ldr	r2, [pc, #112]	; (9920 <Spi_DeInit+0x9c>)
    98ae:	9b00      	ldr	r3, [sp, #0]
    98b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98b4:	69da      	ldr	r2, [r3, #28]
    98b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98ba:	009b      	lsls	r3, r3, #2
    98bc:	4413      	add	r3, r2
    98be:	681b      	ldr	r3, [r3, #0]
    98c0:	2b00      	cmp	r3, #0
    98c2:	d019      	beq.n	98f8 <Spi_DeInit+0x74>
                    (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    98c4:	4a16      	ldr	r2, [pc, #88]	; (9920 <Spi_DeInit+0x9c>)
    98c6:	9b00      	ldr	r3, [sp, #0]
    98c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98cc:	69da      	ldr	r2, [r3, #28]
    98ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98d2:	009b      	lsls	r3, r3, #2
    98d4:	4413      	add	r3, r2
    98d6:	681b      	ldr	r3, [r3, #0]
    98d8:	689b      	ldr	r3, [r3, #8]
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    98da:	9a00      	ldr	r2, [sp, #0]
    98dc:	429a      	cmp	r2, r3
    98de:	d10b      	bne.n	98f8 <Spi_DeInit+0x74>
                   )
                {
                    Spi_Ipw_DeInit(HWUnit, SpiCoreID);
    98e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98e4:	9900      	ldr	r1, [sp, #0]
    98e6:	4618      	mov	r0, r3
    98e8:	f000 fa54 	bl	9d94 <Spi_Ipw_DeInit>
    
                    Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_UNINIT;
    98ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98f0:	4a0c      	ldr	r2, [pc, #48]	; (9924 <Spi_DeInit+0xa0>)
    98f2:	2100      	movs	r1, #0
    98f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                 HWUnit++)
    98f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98fc:	3301      	adds	r3, #1
    98fe:	f88d 3006 	strb.w	r3, [sp, #6]
            for (HWUnit = (Spi_HWUnitType) 0;
    9902:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9906:	2b00      	cmp	r3, #0
    9908:	d0d0      	beq.n	98ac <Spi_DeInit+0x28>
                {
                    /* Do nothing */
                }
            }
            /* Reset configuration pointer */
            Spi_apxSpiConfigPtr[SpiCoreID] = NULL_PTR;
    990a:	4a05      	ldr	r2, [pc, #20]	; (9920 <Spi_DeInit+0x9c>)
    990c:	9b00      	ldr	r3, [sp, #0]
    990e:	2100      	movs	r1, #0
    9910:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return TempExit;
    9914:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
    9918:	4618      	mov	r0, r3
    991a:	b003      	add	sp, #12
    991c:	f85d fb04 	ldr.w	pc, [sp], #4
    9920:	1fff8dec 	.word	0x1fff8dec
    9924:	1fff8de4 	.word	0x1fff8de4

00009928 <Spi_SetupEB>:
        Spi_ChannelType Channel,
        const Spi_DataBufferType  *SrcDataBufferPtr,
        Spi_DataBufferType *DesDataBufferPtr,
        Spi_NumberOfDataType Length
    )
{
    9928:	b500      	push	{lr}
    992a:	b089      	sub	sp, #36	; 0x24
    992c:	9102      	str	r1, [sp, #8]
    992e:	9201      	str	r2, [sp, #4]
    9930:	461a      	mov	r2, r3
    9932:	4603      	mov	r3, r0
    9934:	f88d 300f 	strb.w	r3, [sp, #15]
    9938:	4613      	mov	r3, r2
    993a:	f8ad 300c 	strh.w	r3, [sp, #12]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    993e:	2300      	movs	r3, #0
    9940:	f88d 301f 	strb.w	r3, [sp, #31]
    Spi_ChannelStateType *ChannelState;
    const Spi_ChannelConfigType *ChannelConfig;
    uint32 SpiCoreID;

    /* get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9944:	2300      	movs	r3, #0
    9946:	9306      	str	r3, [sp, #24]
        Status = (Std_ReturnType)E_NOT_OK;
    }
    else
    {
#endif
        ChannelState = &Spi_axSpiChannelState[Channel];
    9948:	f89d 300f 	ldrb.w	r3, [sp, #15]
    994c:	009b      	lsls	r3, r3, #2
    994e:	4a28      	ldr	r2, [pc, #160]	; (99f0 <Spi_SetupEB+0xc8>)
    9950:	4413      	add	r3, r2
    9952:	9305      	str	r3, [sp, #20]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    9954:	4a27      	ldr	r2, [pc, #156]	; (99f4 <Spi_SetupEB+0xcc>)
    9956:	9b06      	ldr	r3, [sp, #24]
    9958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    995c:	68da      	ldr	r2, [r3, #12]
    995e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9962:	009b      	lsls	r3, r3, #2
    9964:	4413      	add	r3, r2
    9966:	681b      	ldr	r3, [r3, #0]
    9968:	9304      	str	r3, [sp, #16]
        /* exit early if this is the wrong buffer type */
        if (IB == ChannelConfig->BufferType)
    996a:	9b04      	ldr	r3, [sp, #16]
    996c:	681b      	ldr	r3, [r3, #0]
    996e:	2b00      	cmp	r3, #0
    9970:	d103      	bne.n	997a <Spi_SetupEB+0x52>
        {
            /* Call Det_ReportError */
#if (SPI_DEV_ERROR_DETECT == STD_ON)
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_SETUPEB_ID,SPI_E_PARAM_CHANNEL);
#endif
            Status = (Std_ReturnType)E_NOT_OK;
    9972:	2301      	movs	r3, #1
    9974:	f88d 301f 	strb.w	r3, [sp, #31]
    9978:	e033      	b.n	99e2 <Spi_SetupEB+0xba>
            /* Length and Framesize - aren't compatible */
            /* If 8 < Framesize =< 16: Length must be divisible by 2 */
            /* If 16 < Framesize =< 32: Length must be divisible by 4 */
            Status = Spi_SetupEbCheckLength(ChannelConfig, Length);
#endif
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05();
    997a:	f00c fbb3 	bl	160e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>
            /* save the new parameters */
            ChannelConfig->BufferDescriptor->ExternalBufferTX = SrcDataBufferPtr;
    997e:	9b04      	ldr	r3, [sp, #16]
    9980:	691b      	ldr	r3, [r3, #16]
    9982:	9a02      	ldr	r2, [sp, #8]
    9984:	601a      	str	r2, [r3, #0]
            ChannelConfig->BufferDescriptor->BufferRX = DesDataBufferPtr;
    9986:	9b04      	ldr	r3, [sp, #16]
    9988:	691b      	ldr	r3, [r3, #16]
    998a:	9a01      	ldr	r2, [sp, #4]
    998c:	609a      	str	r2, [r3, #8]

            ChannelState->Length = Length;
    998e:	9b05      	ldr	r3, [sp, #20]
    9990:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9994:	805a      	strh	r2, [r3, #2]

            /* if source data pointer is zero, transmit default value */
            if (NULL_PTR == SrcDataBufferPtr)
    9996:	9b02      	ldr	r3, [sp, #8]
    9998:	2b00      	cmp	r3, #0
    999a:	d107      	bne.n	99ac <Spi_SetupEB+0x84>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    999c:	9b05      	ldr	r3, [sp, #20]
    999e:	781b      	ldrb	r3, [r3, #0]
    99a0:	f043 0301 	orr.w	r3, r3, #1
    99a4:	b2da      	uxtb	r2, r3
    99a6:	9b05      	ldr	r3, [sp, #20]
    99a8:	701a      	strb	r2, [r3, #0]
    99aa:	e006      	b.n	99ba <Spi_SetupEB+0x92>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_TX_DEFAULT_U8);
    99ac:	9b05      	ldr	r3, [sp, #20]
    99ae:	781b      	ldrb	r3, [r3, #0]
    99b0:	f023 0301 	bic.w	r3, r3, #1
    99b4:	b2da      	uxtb	r2, r3
    99b6:	9b05      	ldr	r3, [sp, #20]
    99b8:	701a      	strb	r2, [r3, #0]
            }

            /* if destination data pointer is zero, discard receiving data */
            if (NULL_PTR == DesDataBufferPtr)
    99ba:	9b01      	ldr	r3, [sp, #4]
    99bc:	2b00      	cmp	r3, #0
    99be:	d107      	bne.n	99d0 <Spi_SetupEB+0xa8>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_RX_DISCARD_U8;
    99c0:	9b05      	ldr	r3, [sp, #20]
    99c2:	781b      	ldrb	r3, [r3, #0]
    99c4:	f043 0302 	orr.w	r3, r3, #2
    99c8:	b2da      	uxtb	r2, r3
    99ca:	9b05      	ldr	r3, [sp, #20]
    99cc:	701a      	strb	r2, [r3, #0]
    99ce:	e006      	b.n	99de <Spi_SetupEB+0xb6>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_RX_DISCARD_U8);
    99d0:	9b05      	ldr	r3, [sp, #20]
    99d2:	781b      	ldrb	r3, [r3, #0]
    99d4:	f023 0302 	bic.w	r3, r3, #2
    99d8:	b2da      	uxtb	r2, r3
    99da:	9b05      	ldr	r3, [sp, #20]
    99dc:	701a      	strb	r2, [r3, #0]
            }
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05();
    99de:	f00c fbad 	bl	1613c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>
        }
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return Status;
    99e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    99e6:	4618      	mov	r0, r3
    99e8:	b009      	add	sp, #36	; 0x24
    99ea:	f85d fb04 	ldr.w	pc, [sp], #4
    99ee:	bf00      	nop
    99f0:	1fff8df8 	.word	0x1fff8df8
    99f4:	1fff8dec 	.word	0x1fff8dec

000099f8 <Spi_GetStatus>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_GetStatus_Activity
*/
Spi_StatusType Spi_GetStatus(void)
{
    99f8:	b500      	push	{lr}
    99fa:	b085      	sub	sp, #20
    Spi_StatusType StatusFlag = SPI_IDLE;
    99fc:	2301      	movs	r3, #1
    99fe:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    
    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9a00:	2300      	movs	r3, #0
    9a02:	9301      	str	r3, [sp, #4]

    if (NULL_PTR == Spi_apxSpiConfigPtr[SpiCoreID])
    9a04:	4a22      	ldr	r2, [pc, #136]	; (9a90 <Spi_GetStatus+0x98>)
    9a06:	9b01      	ldr	r3, [sp, #4]
    9a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a0c:	2b00      	cmp	r3, #0
    9a0e:	d102      	bne.n	9a16 <Spi_GetStatus+0x1e>
        /* If Development Error Detection is enabled, report error if not */
        /* initialized */
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSTATUS_ID,SPI_E_UNINIT);
#endif
        StatusFlag = SPI_UNINIT;
    9a10:	2300      	movs	r3, #0
    9a12:	9303      	str	r3, [sp, #12]
    9a14:	e037      	b.n	9a86 <Spi_GetStatus+0x8e>
    }
    else
    {
        /* The SPI Handler Driver software module shall be busy when any
           HWUnit is busy */
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9a16:	2300      	movs	r3, #0
    9a18:	f88d 300b 	strb.w	r3, [sp, #11]
    9a1c:	e028      	b.n	9a70 <Spi_GetStatus+0x78>
        {
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9a1e:	4a1c      	ldr	r2, [pc, #112]	; (9a90 <Spi_GetStatus+0x98>)
    9a20:	9b01      	ldr	r3, [sp, #4]
    9a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a26:	69da      	ldr	r2, [r3, #28]
    9a28:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a2c:	009b      	lsls	r3, r3, #2
    9a2e:	4413      	add	r3, r2
    9a30:	681b      	ldr	r3, [r3, #0]
    9a32:	2b00      	cmp	r3, #0
    9a34:	d017      	beq.n	9a66 <Spi_GetStatus+0x6e>
                (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9a36:	4a16      	ldr	r2, [pc, #88]	; (9a90 <Spi_GetStatus+0x98>)
    9a38:	9b01      	ldr	r3, [sp, #4]
    9a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a3e:	69da      	ldr	r2, [r3, #28]
    9a40:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a44:	009b      	lsls	r3, r3, #2
    9a46:	4413      	add	r3, r2
    9a48:	681b      	ldr	r3, [r3, #0]
    9a4a:	689b      	ldr	r3, [r3, #8]
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9a4c:	9a01      	ldr	r2, [sp, #4]
    9a4e:	429a      	cmp	r2, r3
    9a50:	d109      	bne.n	9a66 <Spi_GetStatus+0x6e>
               )
            {
                if (1u == Spi_au32SpiBusySyncHWUnitsStatus[HWUnit])
    9a52:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a56:	4a0f      	ldr	r2, [pc, #60]	; (9a94 <Spi_GetStatus+0x9c>)
    9a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a5c:	2b01      	cmp	r3, #1
    9a5e:	d102      	bne.n	9a66 <Spi_GetStatus+0x6e>
                {
                    StatusFlag = SPI_BUSY;
    9a60:	2302      	movs	r3, #2
    9a62:	9303      	str	r3, [sp, #12]
                    break;
    9a64:	e008      	b.n	9a78 <Spi_GetStatus+0x80>
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9a66:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a6a:	3301      	adds	r3, #1
    9a6c:	f88d 300b 	strb.w	r3, [sp, #11]
    9a70:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a74:	2b00      	cmp	r3, #0
    9a76:	d0d2      	beq.n	9a1e <Spi_GetStatus+0x26>
            {
                /* Do nothing */
            }
        }
        /* check for busy HWUnit in async transmissions */
        if (SPI_BUSY != StatusFlag)
    9a78:	9b03      	ldr	r3, [sp, #12]
    9a7a:	2b02      	cmp	r3, #2
    9a7c:	d003      	beq.n	9a86 <Spi_GetStatus+0x8e>
        {
            /* Note: Checking for IsSync attribute for HWUnit is not really needed
                 It is preferable to skip this check in order to have a more compact code
            */
            StatusFlag = Spi_GetStatusAsyncCheckHwBusy(SpiCoreID);
    9a7e:	9801      	ldr	r0, [sp, #4]
    9a80:	f7ff fe4e 	bl	9720 <Spi_GetStatusAsyncCheckHwBusy>
    9a84:	9003      	str	r0, [sp, #12]
        else
        {
            /* Do notthing */
        }
    }
    return StatusFlag;
    9a86:	9b03      	ldr	r3, [sp, #12]
}
    9a88:	4618      	mov	r0, r3
    9a8a:	b005      	add	sp, #20
    9a8c:	f85d fb04 	ldr.w	pc, [sp], #4
    9a90:	1fff8dec 	.word	0x1fff8dec
    9a94:	1fff8e04 	.word	0x1fff8e04

00009a98 <Spi_GetJobResult>:
/** @implements Spi_GetJobResult_Activity */
Spi_JobResultType Spi_GetJobResult
    (
        Spi_JobType Job
    )
{
    9a98:	b084      	sub	sp, #16
    9a9a:	4603      	mov	r3, r0
    9a9c:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETJOBRESULT_ID,SPI_E_PARAM_CONFIG);
    }
    else
    {
#endif
        JobResult = Spi_axSpiJobState[Job].Result;
    9aa0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9aa4:	4a03      	ldr	r2, [pc, #12]	; (9ab4 <Spi_GetJobResult+0x1c>)
    9aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aaa:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return JobResult;
    9aac:	9b03      	ldr	r3, [sp, #12]
}
    9aae:	4618      	mov	r0, r3
    9ab0:	b004      	add	sp, #16
    9ab2:	4770      	bx	lr
    9ab4:	1fff8df4 	.word	0x1fff8df4

00009ab8 <Spi_GetSequenceResult>:
/** @implements Spi_GetSequenceResult_Activity */
Spi_SeqResultType Spi_GetSequenceResult
    (
        Spi_SequenceType Sequence
    )
{
    9ab8:	b084      	sub	sp, #16
    9aba:	4603      	mov	r3, r0
    9abc:	f88d 3007 	strb.w	r3, [sp, #7]
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSEQUENCERESULT_ID,SPI_E_PARAM_CONFIG);
        }
        else
        {
#endif
           SequenceResult = Spi_axSpiSequenceState[Sequence].Result;
    9ac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ac4:	4a03      	ldr	r2, [pc, #12]	; (9ad4 <Spi_GetSequenceResult+0x1c>)
    9ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aca:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif

    return SequenceResult;
    9acc:	9b03      	ldr	r3, [sp, #12]
}
    9ace:	4618      	mov	r0, r3
    9ad0:	b004      	add	sp, #16
    9ad2:	4770      	bx	lr
    9ad4:	1fff8df0 	.word	0x1fff8df0

00009ad8 <Spi_SyncTransmit>:
/** @implements Spi_SyncTransmit_Activity */
Std_ReturnType Spi_SyncTransmit
    (
        Spi_SequenceType Sequence
    )
{
    9ad8:	b500      	push	{lr}
    9ada:	b08b      	sub	sp, #44	; 0x2c
    9adc:	4603      	mov	r3, r0
    9ade:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SequenceStateType *SequenceState;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9ae2:	2300      	movs	r3, #0
    9ae4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Spi_JobType Job;
    const Spi_JobConfigType *JobConfig;
    uint32 SpiCoreID;

    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9ae8:	2300      	movs	r3, #0
    9aea:	9308      	str	r3, [sp, #32]
        Status = Spi_SynctransmitCheckJobsIsValid(SequenceConfig, SpiCoreID);

        if ((Std_ReturnType)E_NOT_OK != Status)
        {
#endif /* (SPI_DEV_ERROR_DETECT == STD_ON) */
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    9aec:	4a60      	ldr	r2, [pc, #384]	; (9c70 <Spi_SyncTransmit+0x198>)
    9aee:	9b08      	ldr	r3, [sp, #32]
    9af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af4:	695a      	ldr	r2, [r3, #20]
    9af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9afa:	009b      	lsls	r3, r3, #2
    9afc:	4413      	add	r3, r2
    9afe:	681b      	ldr	r3, [r3, #0]
    9b00:	9307      	str	r3, [sp, #28]
            /* Get the number of jobs in the sequence */
            NumJobsInSequence = SequenceConfig->NumJobs;
    9b02:	9b07      	ldr	r3, [sp, #28]
    9b04:	881b      	ldrh	r3, [r3, #0]
    9b06:	f8ad 301a 	strh.w	r3, [sp, #26]

            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06();
    9b0a:	f00c fb3d 	bl	16188 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>
            /* check if there are HW units already running */
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9b0e:	2300      	movs	r3, #0
    9b10:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9b14:	e017      	b.n	9b46 <Spi_SyncTransmit+0x6e>
            {
                if (0u != ((Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] << HWUnit) & Spi_au32SpiSeqUsedHWUnits[Sequence]))
    9b16:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9b1a:	4a56      	ldr	r2, [pc, #344]	; (9c74 <Spi_SyncTransmit+0x19c>)
    9b1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9b20:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9b24:	409a      	lsls	r2, r3
    9b26:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b2a:	4953      	ldr	r1, [pc, #332]	; (9c78 <Spi_SyncTransmit+0x1a0>)
    9b2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    9b30:	4013      	ands	r3, r2
    9b32:	2b00      	cmp	r3, #0
    9b34:	d002      	beq.n	9b3c <Spi_SyncTransmit+0x64>
                {
                    Status = (Std_ReturnType)E_NOT_OK;
    9b36:	2301      	movs	r3, #1
    9b38:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9b3c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9b40:	3301      	adds	r3, #1
    9b42:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9b46:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	d0e3      	beq.n	9b16 <Spi_SyncTransmit+0x3e>
                {
                    /* Do notthing */
                }
            }
            
            if ((Std_ReturnType)E_NOT_OK != Status)
    9b4e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9b52:	2b01      	cmp	r3, #1
    9b54:	f000 8083 	beq.w	9c5e <Spi_SyncTransmit+0x186>
            {
                /* Set the sequence as pending */
                SequenceState = &Spi_axSpiSequenceState[Sequence];
    9b58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b5c:	009b      	lsls	r3, r3, #2
    9b5e:	4a47      	ldr	r2, [pc, #284]	; (9c7c <Spi_SyncTransmit+0x1a4>)
    9b60:	4413      	add	r3, r2
    9b62:	9305      	str	r3, [sp, #20]
                SequenceState->Result = SPI_SEQ_PENDING;
    9b64:	9b05      	ldr	r3, [sp, #20]
    9b66:	2201      	movs	r2, #1
    9b68:	601a      	str	r2, [r3, #0]
                /* set used HW units as busy */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9b6a:	2300      	movs	r3, #0
    9b6c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9b70:	e022      	b.n	9bb8 <Spi_SyncTransmit+0xe0>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9b72:	9b07      	ldr	r3, [sp, #28]
    9b74:	689a      	ldr	r2, [r3, #8]
    9b76:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9b7a:	005b      	lsls	r3, r3, #1
    9b7c:	4413      	add	r3, r2
    9b7e:	881b      	ldrh	r3, [r3, #0]
    9b80:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9b84:	4a3a      	ldr	r2, [pc, #232]	; (9c70 <Spi_SyncTransmit+0x198>)
    9b86:	9b08      	ldr	r3, [sp, #32]
    9b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b8c:	691a      	ldr	r2, [r3, #16]
    9b8e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9b92:	009b      	lsls	r3, r3, #2
    9b94:	4413      	add	r3, r2
    9b96:	681b      	ldr	r3, [r3, #0]
    9b98:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9b9a:	9b03      	ldr	r3, [sp, #12]
    9b9c:	7f1b      	ldrb	r3, [r3, #28]
    9b9e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 1u;
    9ba2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9ba6:	4a33      	ldr	r2, [pc, #204]	; (9c74 <Spi_SyncTransmit+0x19c>)
    9ba8:	2101      	movs	r1, #1
    9baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9bae:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9bb2:	3301      	adds	r3, #1
    9bb4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9bb8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9bbc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9bc0:	429a      	cmp	r2, r3
    9bc2:	d3d6      	bcc.n	9b72 <Spi_SyncTransmit+0x9a>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9bc4:	f00c fb0c 	bl	161e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
                /* Transmit Jobs */
                Status = Spi_SyncJobsTranfer(SequenceConfig, SpiCoreID);
    9bc8:	9908      	ldr	r1, [sp, #32]
    9bca:	9807      	ldr	r0, [sp, #28]
    9bcc:	f7ff fc72 	bl	94b4 <Spi_SyncJobsTranfer>
    9bd0:	4603      	mov	r3, r0
    9bd2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                
                if ((Std_ReturnType)E_OK == Status)
    9bd6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d103      	bne.n	9be6 <Spi_SyncTransmit+0x10e>
                {
                    /* Set the sequence as OK */
                    SequenceState->Result = SPI_SEQ_OK;
    9bde:	9b05      	ldr	r3, [sp, #20]
    9be0:	2200      	movs	r2, #0
    9be2:	601a      	str	r2, [r3, #0]
    9be4:	e002      	b.n	9bec <Spi_SyncTransmit+0x114>
#endif
                }
                else
                {
                    /* Set the sequence as FAILED */
                    SequenceState->Result = SPI_SEQ_FAILED;
    9be6:	9b05      	ldr	r3, [sp, #20]
    9be8:	2202      	movs	r2, #2
    9bea:	601a      	str	r2, [r3, #0]
                    /* Report to DEM */
                    Spi_DemReportStatus(SpiCoreID, DEM_EVENT_STATUS_FAILED);
#endif
                }
                
                SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07();
    9bec:	f00c fb1e 	bl	1622c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>
                /* set used HW units as idle */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9bf0:	2300      	movs	r3, #0
    9bf2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9bf6:	e022      	b.n	9c3e <Spi_SyncTransmit+0x166>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9bf8:	9b07      	ldr	r3, [sp, #28]
    9bfa:	689a      	ldr	r2, [r3, #8]
    9bfc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c00:	005b      	lsls	r3, r3, #1
    9c02:	4413      	add	r3, r2
    9c04:	881b      	ldrh	r3, [r3, #0]
    9c06:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9c0a:	4a19      	ldr	r2, [pc, #100]	; (9c70 <Spi_SyncTransmit+0x198>)
    9c0c:	9b08      	ldr	r3, [sp, #32]
    9c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c12:	691a      	ldr	r2, [r3, #16]
    9c14:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9c18:	009b      	lsls	r3, r3, #2
    9c1a:	4413      	add	r3, r2
    9c1c:	681b      	ldr	r3, [r3, #0]
    9c1e:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9c20:	9b03      	ldr	r3, [sp, #12]
    9c22:	7f1b      	ldrb	r3, [r3, #28]
    9c24:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 0u;
    9c28:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9c2c:	4a11      	ldr	r2, [pc, #68]	; (9c74 <Spi_SyncTransmit+0x19c>)
    9c2e:	2100      	movs	r1, #0
    9c30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9c34:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c38:	3301      	adds	r3, #1
    9c3a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9c3e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9c42:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9c46:	429a      	cmp	r2, r3
    9c48:	d3d6      	bcc.n	9bf8 <Spi_SyncTransmit+0x120>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07();
    9c4a:	f00c fb1b 	bl	16284 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>
                
                /* End Sequence Notification */
                if (NULL_PTR != SequenceConfig->EndNotification)
    9c4e:	9b07      	ldr	r3, [sp, #28]
    9c50:	68db      	ldr	r3, [r3, #12]
    9c52:	2b00      	cmp	r3, #0
    9c54:	d005      	beq.n	9c62 <Spi_SyncTransmit+0x18a>
                {
                    SequenceConfig->EndNotification();
    9c56:	9b07      	ldr	r3, [sp, #28]
    9c58:	68db      	ldr	r3, [r3, #12]
    9c5a:	4798      	blx	r3
    9c5c:	e001      	b.n	9c62 <Spi_SyncTransmit+0x18a>
                    /* Do nothing */
                }
            }
            else
            {
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9c5e:	f00c fabf 	bl	161e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
            /* Do nothing */
        }
    }
#endif

    return Status;
    9c62:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    9c66:	4618      	mov	r0, r3
    9c68:	b00b      	add	sp, #44	; 0x2c
    9c6a:	f85d fb04 	ldr.w	pc, [sp], #4
    9c6e:	bf00      	nop
    9c70:	1fff8dec 	.word	0x1fff8dec
    9c74:	1fff8e04 	.word	0x1fff8e04
    9c78:	1fff8e00 	.word	0x1fff8e00
    9c7c:	1fff8df0 	.word	0x1fff8df0

00009c80 <Spi_GetHWUnitStatus>:
/** @implements Spi_GetHWUnitStatus_Activity */
Spi_StatusType Spi_GetHWUnitStatus
    (
        Spi_HWUnitType HWUnit
    )
{
    9c80:	b084      	sub	sp, #16
    9c82:	4603      	mov	r3, r0
    9c84:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_StatusType Status = SPI_UNINIT;
    9c88:	2300      	movs	r3, #0
    9c8a:	9303      	str	r3, [sp, #12]
        /* Do nothing */
    }
    else
    {
#endif
        Status = Spi_axSpiHwUnitQueueArray[HWUnit].Status;
    9c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c90:	4a03      	ldr	r2, [pc, #12]	; (9ca0 <Spi_GetHWUnitStatus+0x20>)
    9c92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    9c96:	9303      	str	r3, [sp, #12]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return Status;
    9c98:	9b03      	ldr	r3, [sp, #12]
}
    9c9a:	4618      	mov	r0, r3
    9c9c:	b004      	add	sp, #16
    9c9e:	4770      	bx	lr
    9ca0:	1fff8de4 	.word	0x1fff8de4

00009ca4 <Spi_Cancel>:
*       undefined state due to cancelling a sequence transmission.
*
*/
/**  @implements Spi_Cancel_Activity */
void Spi_Cancel(Spi_SequenceType Sequence)
{
    9ca4:	b082      	sub	sp, #8
    9ca6:	4603      	mov	r3, r0
    9ca8:	f88d 3007 	strb.w	r3, [sp, #7]
        }
        else
        {
#endif
            /* Set sequence state to Cancel */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_CANCELLED;
    9cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9cb0:	4a03      	ldr	r2, [pc, #12]	; (9cc0 <Spi_Cancel+0x1c>)
    9cb2:	2103      	movs	r1, #3
    9cb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            #endif
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif
}
    9cb8:	bf00      	nop
    9cba:	b002      	add	sp, #8
    9cbc:	4770      	bx	lr
    9cbe:	bf00      	nop
    9cc0:	1fff8df0 	.word	0x1fff8df0

00009cc4 <Spi_MainFunction_Handling>:
                /*Do nothing */
            }
        }
    }
#endif /* #if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2) ) */
}
    9cc4:	bf00      	nop
    9cc6:	4770      	bx	lr

00009cc8 <Spi_Ipw_SyncTransmitProcess>:
        const Spi_JobConfigType *JobConfig,
        const Spi_ChannelConfigType *ChannelConfig,
        Spi_DataBufferType *RxBuffer,
        const Spi_DataBufferType *TxBuffer
    )
{
    9cc8:	b500      	push	{lr}
    9cca:	b08d      	sub	sp, #52	; 0x34
    9ccc:	9005      	str	r0, [sp, #20]
    9cce:	9104      	str	r1, [sp, #16]
    9cd0:	9203      	str	r2, [sp, #12]
    9cd2:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_StatusType Lpspi_spiStatus = LPSPI_IP_STATUS_SUCCESS;
    9cd4:	2300      	movs	r3, #0
    9cd6:	930b      	str	r3, [sp, #44]	; 0x2c
    const Lpspi_Ip_ExternalDeviceType* LpspiExternalDevice;
#if (SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)
    Flexio_Spi_Ip_StatusType Flexio_spiStatus = FLEXIO_SPI_IP_STATUS_SUCCESS;
    const Flexio_Spi_Ip_ExternalDeviceType* Flexio_SpiExternalDevice;
#endif
    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9cd8:	2300      	movs	r3, #0
    9cda:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    Spi_NumberOfDataType NumberOfBytes;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9cde:	9b05      	ldr	r3, [sp, #20]
    9ce0:	6a1b      	ldr	r3, [r3, #32]
    9ce2:	681b      	ldr	r3, [r3, #0]
    9ce4:	681b      	ldr	r3, [r3, #0]
    9ce6:	9309      	str	r3, [sp, #36]	; 0x24
        HalfDuplexMode = LPSPI_IP_FULL_DUPLEX;
        HalfDuplexModeSupport = FALSE;
    }
#endif
    
    NumberOfBytes = ChannelConfig->ChannelState->Length;
    9ce8:	9b04      	ldr	r3, [sp, #16]
    9cea:	699b      	ldr	r3, [r3, #24]
    9cec:	885b      	ldrh	r3, [r3, #2]
    9cee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    if (SPI_OVER_LPSPI == IpType)
    9cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d12e      	bne.n	9d56 <Spi_Ipw_SyncTransmitProcess+0x8e>
    {
        LpspiExternalDevice = JobConfig->ExternalDeviceConfig->ExDeviceConfig->ExternalDeviceConfig.LpspiExternalDeviceConfig;
    9cf8:	9b05      	ldr	r3, [sp, #20]
    9cfa:	6a1b      	ldr	r3, [r3, #32]
    9cfc:	681b      	ldr	r3, [r3, #0]
    9cfe:	689b      	ldr	r3, [r3, #8]
    9d00:	9307      	str	r3, [sp, #28]
        Lpspi_spiStatus = Lpspi_Ip_UpdateDefaultTransmitData(LpspiExternalDevice, ChannelConfig->DefaultTransmitValue);
    9d02:	9b04      	ldr	r3, [sp, #16]
    9d04:	689b      	ldr	r3, [r3, #8]
    9d06:	4619      	mov	r1, r3
    9d08:	9807      	ldr	r0, [sp, #28]
    9d0a:	f7ff fadd 	bl	92c8 <Lpspi_Ip_UpdateDefaultTransmitData>
    9d0e:	900b      	str	r0, [sp, #44]	; 0x2c
        if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d12:	2b00      	cmp	r3, #0
    9d14:	d11f      	bne.n	9d56 <Spi_Ipw_SyncTransmitProcess+0x8e>
        {
            Lpspi_spiStatus = Lpspi_Ip_UpdateFrameSize(LpspiExternalDevice, ChannelConfig->FrameSize);
    9d16:	9b04      	ldr	r3, [sp, #16]
    9d18:	791b      	ldrb	r3, [r3, #4]
    9d1a:	b29b      	uxth	r3, r3
    9d1c:	4619      	mov	r1, r3
    9d1e:	9807      	ldr	r0, [sp, #28]
    9d20:	f7ff fa92 	bl	9248 <Lpspi_Ip_UpdateFrameSize>
    9d24:	900b      	str	r0, [sp, #44]	; 0x2c
            if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d28:	2b00      	cmp	r3, #0
    9d2a:	d114      	bne.n	9d56 <Spi_Ipw_SyncTransmitProcess+0x8e>
            {
                Lpspi_spiStatus = Lpspi_Ip_UpdateLsb(LpspiExternalDevice, ChannelConfig->Lsb);
    9d2c:	9b04      	ldr	r3, [sp, #16]
    9d2e:	795b      	ldrb	r3, [r3, #5]
    9d30:	4619      	mov	r1, r3
    9d32:	9807      	ldr	r0, [sp, #28]
    9d34:	f7ff faa8 	bl	9288 <Lpspi_Ip_UpdateLsb>
    9d38:	900b      	str	r0, [sp, #44]	; 0x2c
                if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	d10a      	bne.n	9d56 <Spi_Ipw_SyncTransmitProcess+0x8e>
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmitHalfDuplex(LpspiExternalDevice, Buffer, NumberOfBytes, HalfDuplexMode, SPI_TIMEOUT_COUNTER_U32);
                    }
                    else
                    #endif
                    {
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmit(LpspiExternalDevice, (const uint8*)TxBuffer, RxBuffer, NumberOfBytes, SPI_TIMEOUT_COUNTER_U32);
    9d40:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    9d44:	f24c 3250 	movw	r2, #50000	; 0xc350
    9d48:	9200      	str	r2, [sp, #0]
    9d4a:	9a03      	ldr	r2, [sp, #12]
    9d4c:	9902      	ldr	r1, [sp, #8]
    9d4e:	9807      	ldr	r0, [sp, #28]
    9d50:	f7fe fe0a 	bl	8968 <Lpspi_Ip_SyncTransmit>
    9d54:	900b      	str	r0, [sp, #44]	; 0x2c
            }
        }
    }
    if( (LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus) || (FLEXIO_SPI_IP_STATUS_SUCCESS != Flexio_spiStatus))
#else
    if(LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus)
    9d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d58:	2b00      	cmp	r3, #0
    9d5a:	d002      	beq.n	9d62 <Spi_Ipw_SyncTransmitProcess+0x9a>
#endif /*(SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)*/
    {
        Ipw_Status = (Std_ReturnType)E_NOT_OK;
    9d5c:	2301      	movs	r3, #1
    9d5e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
    return Ipw_Status;
    9d62:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
}
    9d66:	4618      	mov	r0, r3
    9d68:	b00d      	add	sp, #52	; 0x34
    9d6a:	f85d fb04 	ldr.w	pc, [sp], #4

00009d6e <Spi_Ipw_Init>:
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* Spi_Ipw_Init */
void Spi_Ipw_Init(const Spi_HWUnitType HWUnitId, const Spi_HWUnitConfigType *HWUnit)
{
    9d6e:	b500      	push	{lr}
    9d70:	b083      	sub	sp, #12
    9d72:	4603      	mov	r3, r0
    9d74:	9100      	str	r1, [sp, #0]
    9d76:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == HWUnit->IpType)
    9d7a:	9b00      	ldr	r3, [sp, #0]
    9d7c:	681b      	ldr	r3, [r3, #0]
    9d7e:	2b00      	cmp	r3, #0
    9d80:	d104      	bne.n	9d8c <Spi_Ipw_Init+0x1e>
    #if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
        Spi_Ipw_au8LpspiHWUnitMapping[HWUnit->Instance] = HWUnitId;
    #else
        (void)HWUnitId;
    #endif
        (void)Lpspi_Ip_Init(HWUnit->IpConfig.LpspiIpConfig);
    9d82:	9b00      	ldr	r3, [sp, #0]
    9d84:	68db      	ldr	r3, [r3, #12]
    9d86:	4618      	mov	r0, r3
    9d88:	f7fe fd62 	bl	8850 <Lpspi_Ip_Init>
        (void)HWUnitId;
    #endif
        (void)Flexio_Spi_Ip_Init(HWUnit->IpConfig.FlexioSpiIpConfig);
    }
#endif
}
    9d8c:	bf00      	nop
    9d8e:	b003      	add	sp, #12
    9d90:	f85d fb04 	ldr.w	pc, [sp], #4

00009d94 <Spi_Ipw_DeInit>:

/* Spi_Ipw_DeInit */
void Spi_Ipw_DeInit(Spi_HWUnitType HWUnit, uint32 SpiCoreID)
{
    9d94:	b500      	push	{lr}
    9d96:	b083      	sub	sp, #12
    9d98:	4603      	mov	r3, r0
    9d9a:	9100      	str	r1, [sp, #0]
    9d9c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->IpType)
    9da0:	4a0f      	ldr	r2, [pc, #60]	; (9de0 <Spi_Ipw_DeInit+0x4c>)
    9da2:	9b00      	ldr	r3, [sp, #0]
    9da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9da8:	69da      	ldr	r2, [r3, #28]
    9daa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9dae:	009b      	lsls	r3, r3, #2
    9db0:	4413      	add	r3, r2
    9db2:	681b      	ldr	r3, [r3, #0]
    9db4:	681b      	ldr	r3, [r3, #0]
    9db6:	2b00      	cmp	r3, #0
    9db8:	d10d      	bne.n	9dd6 <Spi_Ipw_DeInit+0x42>
    {
        (void)Lpspi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    9dba:	4a09      	ldr	r2, [pc, #36]	; (9de0 <Spi_Ipw_DeInit+0x4c>)
    9dbc:	9b00      	ldr	r3, [sp, #0]
    9dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dc2:	69da      	ldr	r2, [r3, #28]
    9dc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9dc8:	009b      	lsls	r3, r3, #2
    9dca:	4413      	add	r3, r2
    9dcc:	681b      	ldr	r3, [r3, #0]
    9dce:	791b      	ldrb	r3, [r3, #4]
    9dd0:	4618      	mov	r0, r3
    9dd2:	f7fe fd99 	bl	8908 <Lpspi_Ip_DeInit>
    else
    {
        (void)Flexio_Spi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    }
#endif
}
    9dd6:	bf00      	nop
    9dd8:	b003      	add	sp, #12
    9dda:	f85d fb04 	ldr.w	pc, [sp], #4
    9dde:	bf00      	nop
    9de0:	1fff8dec 	.word	0x1fff8dec

00009de4 <Spi_Ipw_SyncTransmit>:

/* Spi_Ipw_SyncTransmit */
#if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL2) || (SPI_LEVEL_DELIVERED == SPI_LEVEL0) )
Std_ReturnType Spi_Ipw_SyncTransmit(const Spi_JobConfigType *JobConfig, uint32 SpiCoreID)
{
    9de4:	b500      	push	{lr}
    9de6:	b08b      	sub	sp, #44	; 0x2c
    9de8:	9001      	str	r0, [sp, #4]
    9dea:	9100      	str	r1, [sp, #0]

    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9dec:	2300      	movs	r3, #0
    9dee:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_ChannelConfigType *NextChannelConfig;
    Spi_ChannelType ChannelID;
    Spi_ChannelType NumChannelsInJob;
    Spi_ChannelType ChannelIndex;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9df2:	9b01      	ldr	r3, [sp, #4]
    9df4:	6a1b      	ldr	r3, [r3, #32]
    9df6:	681b      	ldr	r3, [r3, #0]
    9df8:	681b      	ldr	r3, [r3, #0]
    9dfa:	9306      	str	r3, [sp, #24]
    
    NumChannelsInJob = JobConfig->NumChannels;
    9dfc:	9b01      	ldr	r3, [sp, #4]
    9dfe:	781b      	ldrb	r3, [r3, #0]
    9e00:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    9e04:	2300      	movs	r3, #0
    9e06:	f88d 301f 	strb.w	r3, [sp, #31]
    9e0a:	e0e6      	b.n	9fda <Spi_Ipw_SyncTransmit+0x1f6>
    {
        ChannelID = JobConfig->ChannelIndexList[ChannelIndex];
    9e0c:	9b01      	ldr	r3, [sp, #4]
    9e0e:	685a      	ldr	r2, [r3, #4]
    9e10:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9e14:	4413      	add	r3, r2
    9e16:	781b      	ldrb	r3, [r3, #0]
    9e18:	f88d 3016 	strb.w	r3, [sp, #22]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[ChannelID].ChannelCfg;
    9e1c:	4a75      	ldr	r2, [pc, #468]	; (9ff4 <Spi_Ipw_SyncTransmit+0x210>)
    9e1e:	9b00      	ldr	r3, [sp, #0]
    9e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e24:	68da      	ldr	r2, [r3, #12]
    9e26:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9e2a:	009b      	lsls	r3, r3, #2
    9e2c:	4413      	add	r3, r2
    9e2e:	681b      	ldr	r3, [r3, #0]
    9e30:	9304      	str	r3, [sp, #16]
        RxBuffer = ChannelConfig->BufferDescriptor->BufferRX;
    9e32:	9b04      	ldr	r3, [sp, #16]
    9e34:	691b      	ldr	r3, [r3, #16]
    9e36:	689b      	ldr	r3, [r3, #8]
    9e38:	9303      	str	r3, [sp, #12]
        if(0u != (ChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9e3a:	9b04      	ldr	r3, [sp, #16]
    9e3c:	699b      	ldr	r3, [r3, #24]
    9e3e:	781b      	ldrb	r3, [r3, #0]
    9e40:	f003 0301 	and.w	r3, r3, #1
    9e44:	2b00      	cmp	r3, #0
    9e46:	d002      	beq.n	9e4e <Spi_Ipw_SyncTransmit+0x6a>
        {
            TxBuffer = NULL_PTR;
    9e48:	2300      	movs	r3, #0
    9e4a:	9308      	str	r3, [sp, #32]
    9e4c:	e00c      	b.n	9e68 <Spi_Ipw_SyncTransmit+0x84>
        }
        else
        {
            if(EB == ChannelConfig->BufferType)
    9e4e:	9b04      	ldr	r3, [sp, #16]
    9e50:	681b      	ldr	r3, [r3, #0]
    9e52:	2b01      	cmp	r3, #1
    9e54:	d104      	bne.n	9e60 <Spi_Ipw_SyncTransmit+0x7c>
            {
                TxBuffer = ChannelConfig->BufferDescriptor->ExternalBufferTX;
    9e56:	9b04      	ldr	r3, [sp, #16]
    9e58:	691b      	ldr	r3, [r3, #16]
    9e5a:	681b      	ldr	r3, [r3, #0]
    9e5c:	9308      	str	r3, [sp, #32]
    9e5e:	e003      	b.n	9e68 <Spi_Ipw_SyncTransmit+0x84>
            }
            else
            {
                TxBuffer = (const uint8*)(ChannelConfig->BufferDescriptor->InternalBufferTX);
    9e60:	9b04      	ldr	r3, [sp, #16]
    9e62:	691b      	ldr	r3, [r3, #16]
    9e64:	685b      	ldr	r3, [r3, #4]
    9e66:	9308      	str	r3, [sp, #32]
            }
        }
        
        if (SPI_OVER_LPSPI == IpType)
    9e68:	9b06      	ldr	r3, [sp, #24]
    9e6a:	2b00      	cmp	r3, #0
    9e6c:	f040 80a7 	bne.w	9fbe <Spi_Ipw_SyncTransmit+0x1da>
        {
            if(ChannelIndex == (NumChannelsInJob - 1u))
    9e70:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9e74:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9e78:	3b01      	subs	r3, #1
    9e7a:	429a      	cmp	r2, r3
    9e7c:	d10a      	bne.n	9e94 <Spi_Ipw_SyncTransmit+0xb0>
            {
                /* Clear CS after current channel */
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = FALSE;
    9e7e:	9b01      	ldr	r3, [sp, #4]
    9e80:	6a1b      	ldr	r3, [r3, #32]
    9e82:	681b      	ldr	r3, [r3, #0]
    9e84:	791b      	ldrb	r3, [r3, #4]
    9e86:	461a      	mov	r2, r3
    9e88:	4b5b      	ldr	r3, [pc, #364]	; (9ff8 <Spi_Ipw_SyncTransmit+0x214>)
    9e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9e8e:	2200      	movs	r2, #0
    9e90:	771a      	strb	r2, [r3, #28]
    9e92:	e07b      	b.n	9f8c <Spi_Ipw_SyncTransmit+0x1a8>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = TRUE;
    9e94:	9b01      	ldr	r3, [sp, #4]
    9e96:	6a1b      	ldr	r3, [r3, #32]
    9e98:	681b      	ldr	r3, [r3, #0]
    9e9a:	791b      	ldrb	r3, [r3, #4]
    9e9c:	461a      	mov	r2, r3
    9e9e:	4b56      	ldr	r3, [pc, #344]	; (9ff8 <Spi_Ipw_SyncTransmit+0x214>)
    9ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9ea4:	2201      	movs	r2, #1
    9ea6:	771a      	strb	r2, [r3, #28]
                MCAL_DATA_SYNC_BARRIER();
    9ea8:	f3bf 8f4f 	dsb	sy
                /* update data for next transfer */
                NextChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[JobConfig->ChannelIndexList[ChannelIndex + 1u]].ChannelCfg;
    9eac:	4a51      	ldr	r2, [pc, #324]	; (9ff4 <Spi_Ipw_SyncTransmit+0x210>)
    9eae:	9b00      	ldr	r3, [sp, #0]
    9eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eb4:	68da      	ldr	r2, [r3, #12]
    9eb6:	9b01      	ldr	r3, [sp, #4]
    9eb8:	6859      	ldr	r1, [r3, #4]
    9eba:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9ebe:	3301      	adds	r3, #1
    9ec0:	440b      	add	r3, r1
    9ec2:	781b      	ldrb	r3, [r3, #0]
    9ec4:	009b      	lsls	r3, r3, #2
    9ec6:	4413      	add	r3, r2
    9ec8:	681b      	ldr	r3, [r3, #0]
    9eca:	9302      	str	r3, [sp, #8]
                MCAL_DATA_SYNC_BARRIER();
    9ecc:	f3bf 8f4f 	dsb	sy
                if(0u != (NextChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9ed0:	9b02      	ldr	r3, [sp, #8]
    9ed2:	699b      	ldr	r3, [r3, #24]
    9ed4:	781b      	ldrb	r3, [r3, #0]
    9ed6:	f003 0301 	and.w	r3, r3, #1
    9eda:	2b00      	cmp	r3, #0
    9edc:	d00a      	beq.n	9ef4 <Spi_Ipw_SyncTransmit+0x110>
                {
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NULL_PTR;
    9ede:	9b01      	ldr	r3, [sp, #4]
    9ee0:	6a1b      	ldr	r3, [r3, #32]
    9ee2:	681b      	ldr	r3, [r3, #0]
    9ee4:	791b      	ldrb	r3, [r3, #4]
    9ee6:	461a      	mov	r2, r3
    9ee8:	4b43      	ldr	r3, [pc, #268]	; (9ff8 <Spi_Ipw_SyncTransmit+0x214>)
    9eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9eee:	2200      	movs	r2, #0
    9ef0:	62da      	str	r2, [r3, #44]	; 0x2c
    9ef2:	e01c      	b.n	9f2e <Spi_Ipw_SyncTransmit+0x14a>
                }
                else
                {
                    if(EB == NextChannelConfig->BufferType)
    9ef4:	9b02      	ldr	r3, [sp, #8]
    9ef6:	681b      	ldr	r3, [r3, #0]
    9ef8:	2b01      	cmp	r3, #1
    9efa:	d10c      	bne.n	9f16 <Spi_Ipw_SyncTransmit+0x132>
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->ExternalBufferTX;
    9efc:	9b02      	ldr	r3, [sp, #8]
    9efe:	691a      	ldr	r2, [r3, #16]
    9f00:	9b01      	ldr	r3, [sp, #4]
    9f02:	6a1b      	ldr	r3, [r3, #32]
    9f04:	681b      	ldr	r3, [r3, #0]
    9f06:	791b      	ldrb	r3, [r3, #4]
    9f08:	4619      	mov	r1, r3
    9f0a:	4b3b      	ldr	r3, [pc, #236]	; (9ff8 <Spi_Ipw_SyncTransmit+0x214>)
    9f0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9f10:	6812      	ldr	r2, [r2, #0]
    9f12:	62da      	str	r2, [r3, #44]	; 0x2c
    9f14:	e00b      	b.n	9f2e <Spi_Ipw_SyncTransmit+0x14a>
                    }
                    else
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->InternalBufferTX;
    9f16:	9b02      	ldr	r3, [sp, #8]
    9f18:	691a      	ldr	r2, [r3, #16]
    9f1a:	9b01      	ldr	r3, [sp, #4]
    9f1c:	6a1b      	ldr	r3, [r3, #32]
    9f1e:	681b      	ldr	r3, [r3, #0]
    9f20:	791b      	ldrb	r3, [r3, #4]
    9f22:	4619      	mov	r1, r3
    9f24:	4b34      	ldr	r3, [pc, #208]	; (9ff8 <Spi_Ipw_SyncTransmit+0x214>)
    9f26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9f2a:	6852      	ldr	r2, [r2, #4]
    9f2c:	62da      	str	r2, [r3, #44]	; 0x2c
                    }
                }
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FrameSizeNext = NextChannelConfig->FrameSize;
    9f2e:	9b02      	ldr	r3, [sp, #8]
    9f30:	791a      	ldrb	r2, [r3, #4]
    9f32:	9b01      	ldr	r3, [sp, #4]
    9f34:	6a1b      	ldr	r3, [r3, #32]
    9f36:	681b      	ldr	r3, [r3, #0]
    9f38:	791b      	ldrb	r3, [r3, #4]
    9f3a:	4619      	mov	r1, r3
    9f3c:	4b2e      	ldr	r3, [pc, #184]	; (9ff8 <Spi_Ipw_SyncTransmit+0x214>)
    9f3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9f42:	b292      	uxth	r2, r2
    9f44:	861a      	strh	r2, [r3, #48]	; 0x30
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LsbNext = NextChannelConfig->Lsb;
    9f46:	9b01      	ldr	r3, [sp, #4]
    9f48:	6a1b      	ldr	r3, [r3, #32]
    9f4a:	681b      	ldr	r3, [r3, #0]
    9f4c:	791b      	ldrb	r3, [r3, #4]
    9f4e:	461a      	mov	r2, r3
    9f50:	4b29      	ldr	r3, [pc, #164]	; (9ff8 <Spi_Ipw_SyncTransmit+0x214>)
    9f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f56:	9a02      	ldr	r2, [sp, #8]
    9f58:	7952      	ldrb	r2, [r2, #5]
    9f5a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->DefaultDataNext = NextChannelConfig->DefaultTransmitValue;
    9f5e:	9b01      	ldr	r3, [sp, #4]
    9f60:	6a1b      	ldr	r3, [r3, #32]
    9f62:	681b      	ldr	r3, [r3, #0]
    9f64:	791b      	ldrb	r3, [r3, #4]
    9f66:	461a      	mov	r2, r3
    9f68:	4b23      	ldr	r3, [pc, #140]	; (9ff8 <Spi_Ipw_SyncTransmit+0x214>)
    9f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f6e:	9a02      	ldr	r2, [sp, #8]
    9f70:	6892      	ldr	r2, [r2, #8]
    9f72:	635a      	str	r2, [r3, #52]	; 0x34
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LengthNext = NextChannelConfig->ChannelState->Length;
    9f74:	9b02      	ldr	r3, [sp, #8]
    9f76:	699a      	ldr	r2, [r3, #24]
    9f78:	9b01      	ldr	r3, [sp, #4]
    9f7a:	6a1b      	ldr	r3, [r3, #32]
    9f7c:	681b      	ldr	r3, [r3, #0]
    9f7e:	791b      	ldrb	r3, [r3, #4]
    9f80:	4619      	mov	r1, r3
    9f82:	4b1d      	ldr	r3, [pc, #116]	; (9ff8 <Spi_Ipw_SyncTransmit+0x214>)
    9f84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9f88:	8852      	ldrh	r2, [r2, #2]
    9f8a:	871a      	strh	r2, [r3, #56]	; 0x38
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->NextChannelIsRX = FALSE;
                }
                #endif
            }
            
            if(0u == ChannelIndex)
    9f8c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9f90:	2b00      	cmp	r3, #0
    9f92:	d10a      	bne.n	9faa <Spi_Ipw_SyncTransmit+0x1c6>
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = TRUE;
    9f94:	9b01      	ldr	r3, [sp, #4]
    9f96:	6a1b      	ldr	r3, [r3, #32]
    9f98:	681b      	ldr	r3, [r3, #0]
    9f9a:	791b      	ldrb	r3, [r3, #4]
    9f9c:	461a      	mov	r2, r3
    9f9e:	4b16      	ldr	r3, [pc, #88]	; (9ff8 <Spi_Ipw_SyncTransmit+0x214>)
    9fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9fa4:	2201      	movs	r2, #1
    9fa6:	775a      	strb	r2, [r3, #29]
    9fa8:	e009      	b.n	9fbe <Spi_Ipw_SyncTransmit+0x1da>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = FALSE;
    9faa:	9b01      	ldr	r3, [sp, #4]
    9fac:	6a1b      	ldr	r3, [r3, #32]
    9fae:	681b      	ldr	r3, [r3, #0]
    9fb0:	791b      	ldrb	r3, [r3, #4]
    9fb2:	461a      	mov	r2, r3
    9fb4:	4b10      	ldr	r3, [pc, #64]	; (9ff8 <Spi_Ipw_SyncTransmit+0x214>)
    9fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9fba:	2200      	movs	r2, #0
    9fbc:	775a      	strb	r2, [r3, #29]
            }
        }
        Ipw_Status = Spi_Ipw_SyncTransmitProcess(JobConfig, ChannelConfig, RxBuffer, (const uint8*)TxBuffer);
    9fbe:	9b08      	ldr	r3, [sp, #32]
    9fc0:	9a03      	ldr	r2, [sp, #12]
    9fc2:	9904      	ldr	r1, [sp, #16]
    9fc4:	9801      	ldr	r0, [sp, #4]
    9fc6:	f7ff fe7f 	bl	9cc8 <Spi_Ipw_SyncTransmitProcess>
    9fca:	4603      	mov	r3, r0
    9fcc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    9fd0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9fd4:	3301      	adds	r3, #1
    9fd6:	f88d 301f 	strb.w	r3, [sp, #31]
    9fda:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9fde:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9fe2:	429a      	cmp	r2, r3
    9fe4:	f4ff af12 	bcc.w	9e0c <Spi_Ipw_SyncTransmit+0x28>
    }
    return Ipw_Status;
    9fe8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    9fec:	4618      	mov	r0, r3
    9fee:	b00b      	add	sp, #44	; 0x2c
    9ff0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ff4:	1fff8dec 	.word	0x1fff8dec
    9ff8:	1fff8dd8 	.word	0x1fff8dd8

00009ffc <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    9ffc:	b084      	sub	sp, #16
    9ffe:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    a000:	2300      	movs	r3, #0
    a002:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    a006:	2300      	movs	r3, #0
    a008:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a00c:	2300      	movs	r3, #0
    a00e:	f88d 300e 	strb.w	r3, [sp, #14]
    a012:	e01b      	b.n	a04c <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a014:	4a12      	ldr	r2, [pc, #72]	; (a060 <Can_IsControllersBusy+0x64>)
    a016:	9b01      	ldr	r3, [sp, #4]
    a018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a01c:	695a      	ldr	r2, [r3, #20]
    a01e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a022:	009b      	lsls	r3, r3, #2
    a024:	4413      	add	r3, r2
    a026:	681b      	ldr	r3, [r3, #0]
    a028:	2b00      	cmp	r3, #0
    a02a:	d00a      	beq.n	a042 <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    a02c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a030:	4a0c      	ldr	r2, [pc, #48]	; (a064 <Can_IsControllersBusy+0x68>)
    a032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a036:	2b00      	cmp	r3, #0
    a038:	d003      	beq.n	a042 <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    a03a:	2301      	movs	r3, #1
    a03c:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a040:	e008      	b.n	a054 <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a042:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a046:	3301      	adds	r3, #1
    a048:	f88d 300e 	strb.w	r3, [sp, #14]
    a04c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a050:	2b01      	cmp	r3, #1
    a052:	d9df      	bls.n	a014 <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    a054:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a058:	4618      	mov	r0, r3
    a05a:	b004      	add	sp, #16
    a05c:	4770      	bx	lr
    a05e:	bf00      	nop
    a060:	1fff8e14 	.word	0x1fff8e14
    a064:	1fff8e0c 	.word	0x1fff8e0c

0000a068 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    a068:	b500      	push	{lr}
    a06a:	b085      	sub	sp, #20
    a06c:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    a06e:	2300      	movs	r3, #0
    a070:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    a074:	2300      	movs	r3, #0
    a076:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a07a:	2300      	movs	r3, #0
    a07c:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a07e:	2300      	movs	r3, #0
    a080:	f88d 300e 	strb.w	r3, [sp, #14]
    a084:	e035      	b.n	a0f2 <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a086:	4a30      	ldr	r2, [pc, #192]	; (a148 <Can_InitControllers+0xe0>)
    a088:	9b01      	ldr	r3, [sp, #4]
    a08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a08e:	695a      	ldr	r2, [r3, #20]
    a090:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a094:	009b      	lsls	r3, r3, #2
    a096:	4413      	add	r3, r2
    a098:	681b      	ldr	r3, [r3, #0]
    a09a:	2b00      	cmp	r3, #0
    a09c:	d024      	beq.n	a0e8 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a09e:	4a2a      	ldr	r2, [pc, #168]	; (a148 <Can_InitControllers+0xe0>)
    a0a0:	9b01      	ldr	r3, [sp, #4]
    a0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0a6:	695a      	ldr	r2, [r3, #20]
    a0a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0ac:	009b      	lsls	r3, r3, #2
    a0ae:	4413      	add	r3, r2
    a0b0:	681b      	ldr	r3, [r3, #0]
    a0b2:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a0b4:	9b02      	ldr	r3, [sp, #8]
    a0b6:	7a1b      	ldrb	r3, [r3, #8]
    a0b8:	2b00      	cmp	r3, #0
    a0ba:	d015      	beq.n	a0e8 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    a0bc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0c0:	4a22      	ldr	r2, [pc, #136]	; (a14c <Can_InitControllers+0xe4>)
    a0c2:	2100      	movs	r1, #0
    a0c4:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    a0c6:	9802      	ldr	r0, [sp, #8]
    a0c8:	f000 ff82 	bl	afd0 <Can_43_FLEXCAN_Ipw_Init>
    a0cc:	4603      	mov	r3, r0
    a0ce:	2b00      	cmp	r3, #0
    a0d0:	d106      	bne.n	a0e0 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a0d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0d6:	4a1e      	ldr	r2, [pc, #120]	; (a150 <Can_InitControllers+0xe8>)
    a0d8:	2102      	movs	r1, #2
    a0da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a0de:	e003      	b.n	a0e8 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    a0e0:	2301      	movs	r3, #1
    a0e2:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    a0e6:	e008      	b.n	a0fa <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a0e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0ec:	3301      	adds	r3, #1
    a0ee:	f88d 300e 	strb.w	r3, [sp, #14]
    a0f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0f6:	2b01      	cmp	r3, #1
    a0f8:	d9c5      	bls.n	a086 <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    a0fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a0fe:	2b00      	cmp	r3, #0
    a100:	d01e      	beq.n	a140 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a102:	2300      	movs	r3, #0
    a104:	f88d 300e 	strb.w	r3, [sp, #14]
    a108:	e016      	b.n	a138 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a10a:	4a0f      	ldr	r2, [pc, #60]	; (a148 <Can_InitControllers+0xe0>)
    a10c:	9b01      	ldr	r3, [sp, #4]
    a10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a112:	695a      	ldr	r2, [r3, #20]
    a114:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a118:	009b      	lsls	r3, r3, #2
    a11a:	4413      	add	r3, r2
    a11c:	681b      	ldr	r3, [r3, #0]
    a11e:	2b00      	cmp	r3, #0
    a120:	d005      	beq.n	a12e <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a122:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a126:	4a0a      	ldr	r2, [pc, #40]	; (a150 <Can_InitControllers+0xe8>)
    a128:	2100      	movs	r1, #0
    a12a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a12e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a132:	3301      	adds	r3, #1
    a134:	f88d 300e 	strb.w	r3, [sp, #14]
    a138:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a13c:	2b01      	cmp	r3, #1
    a13e:	d9e4      	bls.n	a10a <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    a140:	bf00      	nop
    a142:	b005      	add	sp, #20
    a144:	f85d fb04 	ldr.w	pc, [sp], #4
    a148:	1fff8e14 	.word	0x1fff8e14
    a14c:	1fff8e08 	.word	0x1fff8e08
    a150:	1fff8e0c 	.word	0x1fff8e0c

0000a154 <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    a154:	b500      	push	{lr}
    a156:	b085      	sub	sp, #20
    a158:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    a15a:	2300      	movs	r3, #0
    a15c:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a160:	2300      	movs	r3, #0
    a162:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a164:	2300      	movs	r3, #0
    a166:	f88d 300f 	strb.w	r3, [sp, #15]
    a16a:	e028      	b.n	a1be <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a16c:	4a18      	ldr	r2, [pc, #96]	; (a1d0 <Can_DeInitControllers+0x7c>)
    a16e:	9b01      	ldr	r3, [sp, #4]
    a170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a174:	695a      	ldr	r2, [r3, #20]
    a176:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a17a:	009b      	lsls	r3, r3, #2
    a17c:	4413      	add	r3, r2
    a17e:	681b      	ldr	r3, [r3, #0]
    a180:	2b00      	cmp	r3, #0
    a182:	d017      	beq.n	a1b4 <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a184:	4a12      	ldr	r2, [pc, #72]	; (a1d0 <Can_DeInitControllers+0x7c>)
    a186:	9b01      	ldr	r3, [sp, #4]
    a188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a18c:	695a      	ldr	r2, [r3, #20]
    a18e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a192:	009b      	lsls	r3, r3, #2
    a194:	4413      	add	r3, r2
    a196:	681b      	ldr	r3, [r3, #0]
    a198:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a19a:	9b02      	ldr	r3, [sp, #8]
    a19c:	7a1b      	ldrb	r3, [r3, #8]
    a19e:	2b00      	cmp	r3, #0
    a1a0:	d008      	beq.n	a1b4 <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a1a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1a6:	4a0b      	ldr	r2, [pc, #44]	; (a1d4 <Can_DeInitControllers+0x80>)
    a1a8:	2100      	movs	r1, #0
    a1aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    a1ae:	9802      	ldr	r0, [sp, #8]
    a1b0:	f001 f81a 	bl	b1e8 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a1b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1b8:	3301      	adds	r3, #1
    a1ba:	f88d 300f 	strb.w	r3, [sp, #15]
    a1be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1c2:	2b01      	cmp	r3, #1
    a1c4:	d9d2      	bls.n	a16c <Can_DeInitControllers+0x18>
            }
        }
    }
}
    a1c6:	bf00      	nop
    a1c8:	bf00      	nop
    a1ca:	b005      	add	sp, #20
    a1cc:	f85d fb04 	ldr.w	pc, [sp], #4
    a1d0:	1fff8e14 	.word	0x1fff8e14
    a1d4:	1fff8e0c 	.word	0x1fff8e0c

0000a1d8 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    a1d8:	b500      	push	{lr}
    a1da:	b085      	sub	sp, #20
    a1dc:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    a1de:	2300      	movs	r3, #0
    a1e0:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    a1e2:	2300      	movs	r3, #0
    a1e4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    a1e8:	2300      	movs	r3, #0
    a1ea:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    a1ec:	490c      	ldr	r1, [pc, #48]	; (a220 <Can_43_FLEXCAN_Init+0x48>)
    a1ee:	9b03      	ldr	r3, [sp, #12]
    a1f0:	9a01      	ldr	r2, [sp, #4]
    a1f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    a1f6:	9803      	ldr	r0, [sp, #12]
    a1f8:	f7ff ff00 	bl	9ffc <Can_IsControllersBusy>
    a1fc:	4603      	mov	r3, r0
    a1fe:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    a202:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a206:	f083 0301 	eor.w	r3, r3, #1
    a20a:	b2db      	uxtb	r3, r3
    a20c:	2b00      	cmp	r3, #0
    a20e:	d002      	beq.n	a216 <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    a210:	9803      	ldr	r0, [sp, #12]
    a212:	f7ff ff29 	bl	a068 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    a216:	bf00      	nop
    a218:	b005      	add	sp, #20
    a21a:	f85d fb04 	ldr.w	pc, [sp], #4
    a21e:	bf00      	nop
    a220:	1fff8e14 	.word	0x1fff8e14

0000a224 <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    a224:	b500      	push	{lr}
    a226:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    a228:	2300      	movs	r3, #0
    a22a:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    a22e:	2300      	movs	r3, #0
    a230:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    a234:	2300      	movs	r3, #0
    a236:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    a238:	2300      	movs	r3, #0
    a23a:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a23c:	2300      	movs	r3, #0
    a23e:	f88d 3007 	strb.w	r3, [sp, #7]
    a242:	e01b      	b.n	a27c <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a244:	4a19      	ldr	r2, [pc, #100]	; (a2ac <Can_43_FLEXCAN_DeInit+0x88>)
    a246:	9b00      	ldr	r3, [sp, #0]
    a248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a24c:	695a      	ldr	r2, [r3, #20]
    a24e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a252:	009b      	lsls	r3, r3, #2
    a254:	4413      	add	r3, r2
    a256:	681b      	ldr	r3, [r3, #0]
    a258:	2b00      	cmp	r3, #0
    a25a:	d00a      	beq.n	a272 <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a25c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a260:	4a13      	ldr	r2, [pc, #76]	; (a2b0 <Can_43_FLEXCAN_DeInit+0x8c>)
    a262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a266:	2b01      	cmp	r3, #1
    a268:	d103      	bne.n	a272 <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    a26a:	2301      	movs	r3, #1
    a26c:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    a270:	e008      	b.n	a284 <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a272:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a276:	3301      	adds	r3, #1
    a278:	f88d 3007 	strb.w	r3, [sp, #7]
    a27c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a280:	2b01      	cmp	r3, #1
    a282:	d9df      	bls.n	a244 <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    a284:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a288:	f083 0301 	eor.w	r3, r3, #1
    a28c:	b2db      	uxtb	r3, r3
    a28e:	2b00      	cmp	r3, #0
    a290:	d007      	beq.n	a2a2 <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    a292:	9800      	ldr	r0, [sp, #0]
    a294:	f7ff ff5e 	bl	a154 <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    a298:	4a04      	ldr	r2, [pc, #16]	; (a2ac <Can_43_FLEXCAN_DeInit+0x88>)
    a29a:	9b00      	ldr	r3, [sp, #0]
    a29c:	2100      	movs	r1, #0
    a29e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    a2a2:	bf00      	nop
    a2a4:	b003      	add	sp, #12
    a2a6:	f85d fb04 	ldr.w	pc, [sp], #4
    a2aa:	bf00      	nop
    a2ac:	1fff8e14 	.word	0x1fff8e14
    a2b0:	1fff8e0c 	.word	0x1fff8e0c

0000a2b4 <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    a2b4:	b500      	push	{lr}
    a2b6:	b087      	sub	sp, #28
    a2b8:	4603      	mov	r3, r0
    a2ba:	9100      	str	r1, [sp, #0]
    a2bc:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a2c0:	2301      	movs	r3, #1
    a2c2:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a2c6:	2300      	movs	r3, #0
    a2c8:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a2ca:	2300      	movs	r3, #0
    a2cc:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a2ce:	2300      	movs	r3, #0
    a2d0:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a2d2:	4a47      	ldr	r2, [pc, #284]	; (a3f0 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    a2d4:	9b04      	ldr	r3, [sp, #16]
    a2d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2da:	695a      	ldr	r2, [r3, #20]
    a2dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2e0:	009b      	lsls	r3, r3, #2
    a2e2:	4413      	add	r3, r2
    a2e4:	681b      	ldr	r3, [r3, #0]
    a2e6:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    a2e8:	9b00      	ldr	r3, [sp, #0]
    a2ea:	2b03      	cmp	r3, #3
    a2ec:	d05d      	beq.n	a3aa <Can_43_FLEXCAN_SetControllerMode+0xf6>
    a2ee:	9b00      	ldr	r3, [sp, #0]
    a2f0:	2b03      	cmp	r3, #3
    a2f2:	d874      	bhi.n	a3de <Can_43_FLEXCAN_SetControllerMode+0x12a>
    a2f4:	9b00      	ldr	r3, [sp, #0]
    a2f6:	2b01      	cmp	r3, #1
    a2f8:	d003      	beq.n	a302 <Can_43_FLEXCAN_SetControllerMode+0x4e>
    a2fa:	9b00      	ldr	r3, [sp, #0]
    a2fc:	2b02      	cmp	r3, #2
    a2fe:	d01d      	beq.n	a33c <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    a300:	e06d      	b.n	a3de <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    a302:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a306:	4a3b      	ldr	r2, [pc, #236]	; (a3f4 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a30c:	2b02      	cmp	r3, #2
    a30e:	d168      	bne.n	a3e2 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    a310:	9803      	ldr	r0, [sp, #12]
    a312:	f000 ffa3 	bl	b25c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    a316:	4603      	mov	r3, r0
    a318:	2b00      	cmp	r3, #0
    a31a:	d162      	bne.n	a3e2 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    a31c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a320:	4a34      	ldr	r2, [pc, #208]	; (a3f4 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a322:	2101      	movs	r1, #1
    a324:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    a328:	9b03      	ldr	r3, [sp, #12]
    a32a:	781b      	ldrb	r3, [r3, #0]
    a32c:	2101      	movs	r1, #1
    a32e:	4618      	mov	r0, r3
    a330:	f00c fe94 	bl	1705c <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a334:	2300      	movs	r3, #0
    a336:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    a33a:	e052      	b.n	a3e2 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    a33c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a340:	4a2c      	ldr	r2, [pc, #176]	; (a3f4 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a346:	2b01      	cmp	r3, #1
    a348:	d005      	beq.n	a356 <Can_43_FLEXCAN_SetControllerMode+0xa2>
    a34a:	2b00      	cmp	r3, #0
    a34c:	d029      	beq.n	a3a2 <Can_43_FLEXCAN_SetControllerMode+0xee>
    a34e:	3b02      	subs	r3, #2
    a350:	2b01      	cmp	r3, #1
    a352:	d826      	bhi.n	a3a2 <Can_43_FLEXCAN_SetControllerMode+0xee>
    a354:	e015      	b.n	a382 <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a356:	9803      	ldr	r0, [sp, #12]
    a358:	f000 fff2 	bl	b340 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a35c:	4603      	mov	r3, r0
    a35e:	2b00      	cmp	r3, #0
    a360:	d121      	bne.n	a3a6 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a362:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a366:	4a23      	ldr	r2, [pc, #140]	; (a3f4 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a368:	2102      	movs	r1, #2
    a36a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a36e:	9b03      	ldr	r3, [sp, #12]
    a370:	781b      	ldrb	r3, [r3, #0]
    a372:	2102      	movs	r1, #2
    a374:	4618      	mov	r0, r3
    a376:	f00c fe71 	bl	1705c <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    a37a:	2300      	movs	r3, #0
    a37c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a380:	e011      	b.n	a3a6 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a382:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a386:	4a1b      	ldr	r2, [pc, #108]	; (a3f4 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a388:	2102      	movs	r1, #2
    a38a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a38e:	9b03      	ldr	r3, [sp, #12]
    a390:	781b      	ldrb	r3, [r3, #0]
    a392:	2102      	movs	r1, #2
    a394:	4618      	mov	r0, r3
    a396:	f00c fe61 	bl	1705c <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a39a:	2300      	movs	r3, #0
    a39c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a3a0:	e002      	b.n	a3a8 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    a3a2:	bf00      	nop
    a3a4:	e01e      	b.n	a3e4 <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    a3a6:	bf00      	nop
                        break;
    a3a8:	e01c      	b.n	a3e4 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    a3aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3ae:	4a11      	ldr	r2, [pc, #68]	; (a3f4 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3b4:	3b02      	subs	r3, #2
    a3b6:	2b01      	cmp	r3, #1
    a3b8:	d80f      	bhi.n	a3da <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    a3ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3be:	4a0d      	ldr	r2, [pc, #52]	; (a3f4 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3c0:	2103      	movs	r1, #3
    a3c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    a3c6:	9b03      	ldr	r3, [sp, #12]
    a3c8:	781b      	ldrb	r3, [r3, #0]
    a3ca:	2103      	movs	r1, #3
    a3cc:	4618      	mov	r0, r3
    a3ce:	f00c fe45 	bl	1705c <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a3d2:	2300      	movs	r3, #0
    a3d4:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a3d8:	e000      	b.n	a3dc <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    a3da:	bf00      	nop
                        break;
    a3dc:	e002      	b.n	a3e4 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a3de:	bf00      	nop
    a3e0:	e000      	b.n	a3e4 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a3e2:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    a3e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a3e8:	4618      	mov	r0, r3
    a3ea:	b007      	add	sp, #28
    a3ec:	f85d fb04 	ldr.w	pc, [sp], #4
    a3f0:	1fff8e14 	.word	0x1fff8e14
    a3f4:	1fff8e0c 	.word	0x1fff8e0c

0000a3f8 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    a3f8:	b500      	push	{lr}
    a3fa:	b085      	sub	sp, #20
    a3fc:	4603      	mov	r3, r0
    a3fe:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a402:	2300      	movs	r3, #0
    a404:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a406:	2300      	movs	r3, #0
    a408:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a40a:	2300      	movs	r3, #0
    a40c:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a40e:	4a10      	ldr	r2, [pc, #64]	; (a450 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    a410:	9b03      	ldr	r3, [sp, #12]
    a412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a416:	695a      	ldr	r2, [r3, #20]
    a418:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a41c:	009b      	lsls	r3, r3, #2
    a41e:	4413      	add	r3, r2
    a420:	681b      	ldr	r3, [r3, #0]
    a422:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a424:	f009 fc1c 	bl	13c60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    a428:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a42c:	4a09      	ldr	r2, [pc, #36]	; (a454 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a42e:	5cd2      	ldrb	r2, [r2, r3]
    a430:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a434:	3201      	adds	r2, #1
    a436:	b2d1      	uxtb	r1, r2
    a438:	4a06      	ldr	r2, [pc, #24]	; (a454 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a43a:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a43c:	f009 fc3c 	bl	13cb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    a440:	9802      	ldr	r0, [sp, #8]
    a442:	f000 fffb 	bl	b43c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a446:	bf00      	nop
    a448:	b005      	add	sp, #20
    a44a:	f85d fb04 	ldr.w	pc, [sp], #4
    a44e:	bf00      	nop
    a450:	1fff8e14 	.word	0x1fff8e14
    a454:	1fff8e08 	.word	0x1fff8e08

0000a458 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    a458:	b500      	push	{lr}
    a45a:	b085      	sub	sp, #20
    a45c:	4603      	mov	r3, r0
    a45e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a462:	2300      	movs	r3, #0
    a464:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a466:	2300      	movs	r3, #0
    a468:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a46a:	2300      	movs	r3, #0
    a46c:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a46e:	4a16      	ldr	r2, [pc, #88]	; (a4c8 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    a470:	9b03      	ldr	r3, [sp, #12]
    a472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a476:	695a      	ldr	r2, [r3, #20]
    a478:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a47c:	009b      	lsls	r3, r3, #2
    a47e:	4413      	add	r3, r2
    a480:	681b      	ldr	r3, [r3, #0]
    a482:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a484:	f009 fc3e 	bl	13d04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    a488:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a48c:	4a0f      	ldr	r2, [pc, #60]	; (a4cc <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a48e:	5cd3      	ldrb	r3, [r2, r3]
    a490:	2b00      	cmp	r3, #0
    a492:	d009      	beq.n	a4a8 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    a494:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a498:	4a0c      	ldr	r2, [pc, #48]	; (a4cc <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a49a:	5cd2      	ldrb	r2, [r2, r3]
    a49c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4a0:	3a01      	subs	r2, #1
    a4a2:	b2d1      	uxtb	r1, r2
    a4a4:	4a09      	ldr	r2, [pc, #36]	; (a4cc <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a4a6:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a4a8:	f009 fc58 	bl	13d5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    a4ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4b0:	4a06      	ldr	r2, [pc, #24]	; (a4cc <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a4b2:	5cd3      	ldrb	r3, [r2, r3]
    a4b4:	2b00      	cmp	r3, #0
    a4b6:	d102      	bne.n	a4be <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    a4b8:	9802      	ldr	r0, [sp, #8]
    a4ba:	f000 ffe9 	bl	b490 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a4be:	bf00      	nop
    a4c0:	b005      	add	sp, #20
    a4c2:	f85d fb04 	ldr.w	pc, [sp], #4
    a4c6:	bf00      	nop
    a4c8:	1fff8e14 	.word	0x1fff8e14
    a4cc:	1fff8e08 	.word	0x1fff8e08

0000a4d0 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    a4d0:	b500      	push	{lr}
    a4d2:	b087      	sub	sp, #28
    a4d4:	4603      	mov	r3, r0
    a4d6:	9100      	str	r1, [sp, #0]
    a4d8:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a4dc:	2301      	movs	r3, #1
    a4de:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    a4e2:	2300      	movs	r3, #0
    a4e4:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    a4e8:	2300      	movs	r3, #0
    a4ea:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a4ec:	2300      	movs	r3, #0
    a4ee:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a4f0:	2300      	movs	r3, #0
    a4f2:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a4f4:	4a18      	ldr	r2, [pc, #96]	; (a558 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    a4f6:	9b04      	ldr	r3, [sp, #16]
    a4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4fc:	695a      	ldr	r2, [r3, #20]
    a4fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a502:	009b      	lsls	r3, r3, #2
    a504:	4413      	add	r3, r2
    a506:	681b      	ldr	r3, [r3, #0]
    a508:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    a50a:	f10d 030b 	add.w	r3, sp, #11
    a50e:	4619      	mov	r1, r3
    a510:	9803      	ldr	r0, [sp, #12]
    a512:	f000 ffe9 	bl	b4e8 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    a516:	4603      	mov	r3, r0
    a518:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    a51c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a520:	2b00      	cmp	r3, #0
    a522:	d112      	bne.n	a54a <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    a524:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a528:	2b00      	cmp	r3, #0
    a52a:	d002      	beq.n	a532 <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    a52c:	2b01      	cmp	r3, #1
    a52e:	d004      	beq.n	a53a <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    a530:	e007      	b.n	a542 <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    a532:	9b00      	ldr	r3, [sp, #0]
    a534:	2200      	movs	r2, #0
    a536:	601a      	str	r2, [r3, #0]
                                break;
    a538:	e008      	b.n	a54c <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    a53a:	9b00      	ldr	r3, [sp, #0]
    a53c:	2201      	movs	r2, #1
    a53e:	601a      	str	r2, [r3, #0]
                                break;
    a540:	e004      	b.n	a54c <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    a542:	9b00      	ldr	r3, [sp, #0]
    a544:	2202      	movs	r2, #2
    a546:	601a      	str	r2, [r3, #0]
                                break;
    a548:	e000      	b.n	a54c <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    a54a:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    a54c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a550:	4618      	mov	r0, r3
    a552:	b007      	add	sp, #28
    a554:	f85d fb04 	ldr.w	pc, [sp], #4
    a558:	1fff8e14 	.word	0x1fff8e14

0000a55c <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    a55c:	b084      	sub	sp, #16
    a55e:	4603      	mov	r3, r0
    a560:	9100      	str	r1, [sp, #0]
    a562:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a566:	2301      	movs	r3, #1
    a568:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    a56c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a570:	4a06      	ldr	r2, [pc, #24]	; (a58c <Can_43_FLEXCAN_GetControllerMode+0x30>)
    a572:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a576:	9b00      	ldr	r3, [sp, #0]
    a578:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    a57a:	2300      	movs	r3, #0
    a57c:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a580:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a584:	4618      	mov	r0, r3
    a586:	b004      	add	sp, #16
    a588:	4770      	bx	lr
    a58a:	bf00      	nop
    a58c:	1fff8e0c 	.word	0x1fff8e0c

0000a590 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    a590:	b500      	push	{lr}
    a592:	b087      	sub	sp, #28
    a594:	4603      	mov	r3, r0
    a596:	9100      	str	r1, [sp, #0]
    a598:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a59c:	2301      	movs	r3, #1
    a59e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a5a2:	2300      	movs	r3, #0
    a5a4:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a5a6:	2300      	movs	r3, #0
    a5a8:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a5aa:	2300      	movs	r3, #0
    a5ac:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a5ae:	4a0c      	ldr	r2, [pc, #48]	; (a5e0 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    a5b0:	9b04      	ldr	r3, [sp, #16]
    a5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5b6:	695a      	ldr	r2, [r3, #20]
    a5b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5bc:	009b      	lsls	r3, r3, #2
    a5be:	4413      	add	r3, r2
    a5c0:	681b      	ldr	r3, [r3, #0]
    a5c2:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    a5c4:	9900      	ldr	r1, [sp, #0]
    a5c6:	9803      	ldr	r0, [sp, #12]
    a5c8:	f000 ffb9 	bl	b53e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    a5cc:	4603      	mov	r3, r0
    a5ce:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a5d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a5d6:	4618      	mov	r0, r3
    a5d8:	b007      	add	sp, #28
    a5da:	f85d fb04 	ldr.w	pc, [sp], #4
    a5de:	bf00      	nop
    a5e0:	1fff8e14 	.word	0x1fff8e14

0000a5e4 <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    a5e4:	b500      	push	{lr}
    a5e6:	b087      	sub	sp, #28
    a5e8:	4603      	mov	r3, r0
    a5ea:	9100      	str	r1, [sp, #0]
    a5ec:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a5f0:	2301      	movs	r3, #1
    a5f2:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a5f6:	2300      	movs	r3, #0
    a5f8:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a5fa:	2300      	movs	r3, #0
    a5fc:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a5fe:	2300      	movs	r3, #0
    a600:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a602:	4a0c      	ldr	r2, [pc, #48]	; (a634 <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    a604:	9b04      	ldr	r3, [sp, #16]
    a606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a60a:	695a      	ldr	r2, [r3, #20]
    a60c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a610:	009b      	lsls	r3, r3, #2
    a612:	4413      	add	r3, r2
    a614:	681b      	ldr	r3, [r3, #0]
    a616:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    a618:	9900      	ldr	r1, [sp, #0]
    a61a:	9803      	ldr	r0, [sp, #12]
    a61c:	f000 ff7d 	bl	b51a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    a620:	4603      	mov	r3, r0
    a622:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a626:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a62a:	4618      	mov	r0, r3
    a62c:	b007      	add	sp, #28
    a62e:	f85d fb04 	ldr.w	pc, [sp], #4
    a632:	bf00      	nop
    a634:	1fff8e14 	.word	0x1fff8e14

0000a638 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    a638:	b500      	push	{lr}
    a63a:	b089      	sub	sp, #36	; 0x24
    a63c:	4603      	mov	r3, r0
    a63e:	9100      	str	r1, [sp, #0]
    a640:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    a644:	2301      	movs	r3, #1
    a646:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    a64a:	2300      	movs	r3, #0
    a64c:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    a650:	2300      	movs	r3, #0
    a652:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    a654:	2300      	movs	r3, #0
    a656:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a65a:	2300      	movs	r3, #0
    a65c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    a65e:	2300      	movs	r3, #0
    a660:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a662:	2300      	movs	r3, #0
    a664:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    a666:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a66a:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    a66e:	4a1d      	ldr	r2, [pc, #116]	; (a6e4 <Can_43_FLEXCAN_Write+0xac>)
    a670:	9b06      	ldr	r3, [sp, #24]
    a672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a676:	68da      	ldr	r2, [r3, #12]
    a678:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a67c:	4413      	add	r3, r2
    a67e:	781b      	ldrb	r3, [r3, #0]
    a680:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a684:	4a17      	ldr	r2, [pc, #92]	; (a6e4 <Can_43_FLEXCAN_Write+0xac>)
    a686:	9b06      	ldr	r3, [sp, #24]
    a688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a68c:	695a      	ldr	r2, [r3, #20]
    a68e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a692:	009b      	lsls	r3, r3, #2
    a694:	4413      	add	r3, r2
    a696:	681b      	ldr	r3, [r3, #0]
    a698:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    a69a:	9b04      	ldr	r3, [sp, #16]
    a69c:	2b00      	cmp	r3, #0
    a69e:	d01b      	beq.n	a6d8 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    a6a0:	4a10      	ldr	r2, [pc, #64]	; (a6e4 <Can_43_FLEXCAN_Write+0xac>)
    a6a2:	9b06      	ldr	r3, [sp, #24]
    a6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6a8:	6919      	ldr	r1, [r3, #16]
    a6aa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a6ae:	4613      	mov	r3, r2
    a6b0:	00db      	lsls	r3, r3, #3
    a6b2:	4413      	add	r3, r2
    a6b4:	009b      	lsls	r3, r3, #2
    a6b6:	440b      	add	r3, r1
    a6b8:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a6ba:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a6be:	4a0a      	ldr	r2, [pc, #40]	; (a6e8 <Can_43_FLEXCAN_Write+0xb0>)
    a6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6c4:	2b01      	cmp	r3, #1
    a6c6:	d107      	bne.n	a6d8 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    a6c8:	9a00      	ldr	r2, [sp, #0]
    a6ca:	9903      	ldr	r1, [sp, #12]
    a6cc:	9804      	ldr	r0, [sp, #16]
    a6ce:	f000 ff48 	bl	b562 <Can_43_FLEXCAN_Ipw_Write>
    a6d2:	4603      	mov	r3, r0
    a6d4:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    a6d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a6dc:	4618      	mov	r0, r3
    a6de:	b009      	add	sp, #36	; 0x24
    a6e0:	f85d fb04 	ldr.w	pc, [sp], #4
    a6e4:	1fff8e14 	.word	0x1fff8e14
    a6e8:	1fff8e0c 	.word	0x1fff8e0c

0000a6ec <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    a6ec:	bf00      	nop
    a6ee:	4770      	bx	lr

0000a6f0 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    a6f0:	bf00      	nop
    a6f2:	4770      	bx	lr

0000a6f4 <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    a6f4:	bf00      	nop
    a6f6:	4770      	bx	lr

0000a6f8 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    a6f8:	b500      	push	{lr}
    a6fa:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    a6fc:	2300      	movs	r3, #0
    a6fe:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    a702:	2300      	movs	r3, #0
    a704:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a706:	2300      	movs	r3, #0
    a708:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    a70a:	2300      	movs	r3, #0
    a70c:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    a70e:	4a17      	ldr	r2, [pc, #92]	; (a76c <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a710:	9b02      	ldr	r3, [sp, #8]
    a712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a716:	2b00      	cmp	r3, #0
    a718:	d024      	beq.n	a764 <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a71a:	e01f      	b.n	a75c <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a71c:	4a13      	ldr	r2, [pc, #76]	; (a76c <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a71e:	9b02      	ldr	r3, [sp, #8]
    a720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a724:	695a      	ldr	r2, [r3, #20]
    a726:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a72a:	009b      	lsls	r3, r3, #2
    a72c:	4413      	add	r3, r2
    a72e:	681b      	ldr	r3, [r3, #0]
    a730:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    a732:	9b01      	ldr	r3, [sp, #4]
    a734:	2b00      	cmp	r3, #0
    a736:	d00c      	beq.n	a752 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    a738:	9b01      	ldr	r3, [sp, #4]
    a73a:	7a1b      	ldrb	r3, [r3, #8]
    a73c:	2b00      	cmp	r3, #0
    a73e:	d008      	beq.n	a752 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    a740:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a744:	009b      	lsls	r3, r3, #2
    a746:	4a0a      	ldr	r2, [pc, #40]	; (a770 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    a748:	4413      	add	r3, r2
    a74a:	4619      	mov	r1, r3
    a74c:	9801      	ldr	r0, [sp, #4]
    a74e:	f001 f808 	bl	b762 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    a752:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a756:	3301      	adds	r3, #1
    a758:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a75c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a760:	2b01      	cmp	r3, #1
    a762:	d9db      	bls.n	a71c <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    a764:	bf00      	nop
    a766:	b005      	add	sp, #20
    a768:	f85d fb04 	ldr.w	pc, [sp], #4
    a76c:	1fff8e14 	.word	0x1fff8e14
    a770:	1fff8e0c 	.word	0x1fff8e0c

0000a774 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    a774:	b500      	push	{lr}
    a776:	b087      	sub	sp, #28
    a778:	4603      	mov	r3, r0
    a77a:	9200      	str	r2, [sp, #0]
    a77c:	f88d 3007 	strb.w	r3, [sp, #7]
    a780:	460b      	mov	r3, r1
    a782:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    a786:	2300      	movs	r3, #0
    a788:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a78c:	2300      	movs	r3, #0
    a78e:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a790:	2300      	movs	r3, #0
    a792:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    a794:	2300      	movs	r3, #0
    a796:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a798:	4a16      	ldr	r2, [pc, #88]	; (a7f4 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a79a:	9b04      	ldr	r3, [sp, #16]
    a79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7a0:	2b00      	cmp	r3, #0
    a7a2:	d022      	beq.n	a7ea <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a7a4:	4a13      	ldr	r2, [pc, #76]	; (a7f4 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a7a6:	9b04      	ldr	r3, [sp, #16]
    a7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7ac:	689a      	ldr	r2, [r3, #8]
    a7ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7b2:	4413      	add	r3, r2
    a7b4:	781b      	ldrb	r3, [r3, #0]
    a7b6:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a7ba:	4a0e      	ldr	r2, [pc, #56]	; (a7f4 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a7bc:	9b04      	ldr	r3, [sp, #16]
    a7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7c2:	695a      	ldr	r2, [r3, #20]
    a7c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a7c8:	009b      	lsls	r3, r3, #2
    a7ca:	4413      	add	r3, r2
    a7cc:	681b      	ldr	r3, [r3, #0]
    a7ce:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a7d0:	9b03      	ldr	r3, [sp, #12]
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	d009      	beq.n	a7ea <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    a7d6:	4a07      	ldr	r2, [pc, #28]	; (a7f4 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a7d8:	9b04      	ldr	r3, [sp, #16]
    a7da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a7de:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a7e2:	9b00      	ldr	r3, [sp, #0]
    a7e4:	9803      	ldr	r0, [sp, #12]
    a7e6:	f000 fff2 	bl	b7ce <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    a7ea:	bf00      	nop
    a7ec:	b007      	add	sp, #28
    a7ee:	f85d fb04 	ldr.w	pc, [sp], #4
    a7f2:	bf00      	nop
    a7f4:	1fff8e14 	.word	0x1fff8e14

0000a7f8 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    a7f8:	b500      	push	{lr}
    a7fa:	b087      	sub	sp, #28
    a7fc:	4603      	mov	r3, r0
    a7fe:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    a802:	2300      	movs	r3, #0
    a804:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a808:	2300      	movs	r3, #0
    a80a:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a80c:	2300      	movs	r3, #0
    a80e:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a810:	2300      	movs	r3, #0
    a812:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a814:	4a19      	ldr	r2, [pc, #100]	; (a87c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a816:	9b04      	ldr	r3, [sp, #16]
    a818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a81c:	2b00      	cmp	r3, #0
    a81e:	d029      	beq.n	a874 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a820:	4a16      	ldr	r2, [pc, #88]	; (a87c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a822:	9b04      	ldr	r3, [sp, #16]
    a824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a828:	689a      	ldr	r2, [r3, #8]
    a82a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a82e:	4413      	add	r3, r2
    a830:	781b      	ldrb	r3, [r3, #0]
    a832:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a836:	4a11      	ldr	r2, [pc, #68]	; (a87c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a838:	9b04      	ldr	r3, [sp, #16]
    a83a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a83e:	695a      	ldr	r2, [r3, #20]
    a840:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a844:	009b      	lsls	r3, r3, #2
    a846:	4413      	add	r3, r2
    a848:	681b      	ldr	r3, [r3, #0]
    a84a:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a84c:	9b03      	ldr	r3, [sp, #12]
    a84e:	2b00      	cmp	r3, #0
    a850:	d010      	beq.n	a874 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a852:	9803      	ldr	r0, [sp, #12]
    a854:	f000 fd74 	bl	b340 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a858:	4603      	mov	r3, r0
    a85a:	2b00      	cmp	r3, #0
    a85c:	d10a      	bne.n	a874 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a85e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a862:	4a07      	ldr	r2, [pc, #28]	; (a880 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    a864:	2102      	movs	r1, #2
    a866:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    a86a:	9b03      	ldr	r3, [sp, #12]
    a86c:	781b      	ldrb	r3, [r3, #0]
    a86e:	4618      	mov	r0, r3
    a870:	f00c fbfc 	bl	1706c <CanIf_ControllerBusOff>
            }
        }
    }
}
    a874:	bf00      	nop
    a876:	b007      	add	sp, #28
    a878:	f85d fb04 	ldr.w	pc, [sp], #4
    a87c:	1fff8e14 	.word	0x1fff8e14
    a880:	1fff8e0c 	.word	0x1fff8e0c

0000a884 <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    a884:	b500      	push	{lr}
    a886:	b085      	sub	sp, #20
    a888:	9003      	str	r0, [sp, #12]
    a88a:	9102      	str	r1, [sp, #8]
    a88c:	9201      	str	r2, [sp, #4]
    a88e:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    a890:	9b01      	ldr	r3, [sp, #4]
    a892:	685a      	ldr	r2, [r3, #4]
    a894:	9b03      	ldr	r3, [sp, #12]
    a896:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    a898:	9b01      	ldr	r3, [sp, #4]
    a89a:	681b      	ldr	r3, [r3, #0]
    a89c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    a8a0:	2b00      	cmp	r3, #0
    a8a2:	d005      	beq.n	a8b0 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    a8a4:	9b03      	ldr	r3, [sp, #12]
    a8a6:	681b      	ldr	r3, [r3, #0]
    a8a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    a8ac:	9b03      	ldr	r3, [sp, #12]
    a8ae:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    a8b0:	9b06      	ldr	r3, [sp, #24]
    a8b2:	699b      	ldr	r3, [r3, #24]
    a8b4:	2b00      	cmp	r3, #0
    a8b6:	d10c      	bne.n	a8d2 <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    a8b8:	9b01      	ldr	r3, [sp, #4]
    a8ba:	681b      	ldr	r3, [r3, #0]
    a8bc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    a8c0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    a8c4:	d105      	bne.n	a8d2 <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    a8c6:	2301      	movs	r3, #1
    a8c8:	2208      	movs	r2, #8
    a8ca:	2100      	movs	r1, #0
    a8cc:	2050      	movs	r0, #80	; 0x50
    a8ce:	f00c fa2d 	bl	16d2c <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    a8d2:	9b06      	ldr	r3, [sp, #24]
    a8d4:	699b      	ldr	r3, [r3, #24]
    a8d6:	2b01      	cmp	r3, #1
    a8d8:	d009      	beq.n	a8ee <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    a8da:	9b01      	ldr	r3, [sp, #4]
    a8dc:	681b      	ldr	r3, [r3, #0]
    a8de:	2b00      	cmp	r3, #0
    a8e0:	da05      	bge.n	a8ee <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    a8e2:	9b03      	ldr	r3, [sp, #12]
    a8e4:	681b      	ldr	r3, [r3, #0]
    a8e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a8ea:	9b03      	ldr	r3, [sp, #12]
    a8ec:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    a8ee:	9b06      	ldr	r3, [sp, #24]
    a8f0:	7c1a      	ldrb	r2, [r3, #16]
    a8f2:	9b01      	ldr	r3, [sp, #4]
    a8f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a8f8:	429a      	cmp	r2, r3
    a8fa:	d805      	bhi.n	a908 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    a8fc:	9b06      	ldr	r3, [sp, #24]
    a8fe:	7c1b      	ldrb	r3, [r3, #16]
    a900:	461a      	mov	r2, r3
    a902:	9b02      	ldr	r3, [sp, #8]
    a904:	609a      	str	r2, [r3, #8]
    a906:	e005      	b.n	a914 <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    a908:	9b01      	ldr	r3, [sp, #4]
    a90a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a90e:	461a      	mov	r2, r3
    a910:	9b02      	ldr	r3, [sp, #8]
    a912:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    a914:	9b06      	ldr	r3, [sp, #24]
    a916:	881a      	ldrh	r2, [r3, #0]
    a918:	9b03      	ldr	r3, [sp, #12]
    a91a:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    a91c:	9b00      	ldr	r3, [sp, #0]
    a91e:	781a      	ldrb	r2, [r3, #0]
    a920:	9b03      	ldr	r3, [sp, #12]
    a922:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    a924:	9b01      	ldr	r3, [sp, #4]
    a926:	f103 0208 	add.w	r2, r3, #8
    a92a:	9b02      	ldr	r3, [sp, #8]
    a92c:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    a92e:	9902      	ldr	r1, [sp, #8]
    a930:	9803      	ldr	r0, [sp, #12]
    a932:	f00c fb29 	bl	16f88 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    a936:	bf00      	nop
    a938:	b005      	add	sp, #20
    a93a:	f85d fb04 	ldr.w	pc, [sp], #4

0000a93e <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    a93e:	b500      	push	{lr}
    a940:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    a944:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a948:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    a94c:	6018      	str	r0, [r3, #0]
    a94e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a952:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a956:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    a958:	2300      	movs	r3, #0
    a95a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    a95e:	2300      	movs	r3, #0
    a960:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    a964:	2300      	movs	r3, #0
    a966:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    a96a:	2300      	movs	r3, #0
    a96c:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    a970:	2300      	movs	r3, #0
    a972:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    a976:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a97a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a97e:	681b      	ldr	r3, [r3, #0]
    a980:	7c9b      	ldrb	r3, [r3, #18]
    a982:	089b      	lsrs	r3, r3, #2
    a984:	b2db      	uxtb	r3, r3
    a986:	3306      	adds	r3, #6
    a988:	2b20      	cmp	r3, #32
    a98a:	d80b      	bhi.n	a9a4 <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    a98c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a990:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a994:	681b      	ldr	r3, [r3, #0]
    a996:	7c9b      	ldrb	r3, [r3, #18]
    a998:	089b      	lsrs	r3, r3, #2
    a99a:	b2db      	uxtb	r3, r3
    a99c:	3306      	adds	r3, #6
    a99e:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    a9a2:	e002      	b.n	a9aa <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    a9a4:	2320      	movs	r3, #32
    a9a6:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    a9aa:	2300      	movs	r3, #0
    a9ac:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    a9b0:	e169      	b.n	ac86 <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    a9b2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9b6:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    a9ba:	681b      	ldr	r3, [r3, #0]
    a9bc:	691b      	ldr	r3, [r3, #16]
    a9be:	2b00      	cmp	r3, #0
    a9c0:	d13a      	bne.n	aa38 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    a9c2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9c6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a9ca:	681b      	ldr	r3, [r3, #0]
    a9cc:	7c9b      	ldrb	r3, [r3, #18]
    a9ce:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    a9d2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a9d6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    a9da:	2300      	movs	r3, #0
    a9dc:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    a9e0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9e4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a9e8:	681b      	ldr	r3, [r3, #0]
    a9ea:	689b      	ldr	r3, [r3, #8]
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	d011      	beq.n	aa14 <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    a9f0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9f4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a9f8:	681b      	ldr	r3, [r3, #0]
    a9fa:	695a      	ldr	r2, [r3, #20]
    a9fc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aa00:	00db      	lsls	r3, r3, #3
    aa02:	4413      	add	r3, r2
    aa04:	685b      	ldr	r3, [r3, #4]
    aa06:	005b      	lsls	r3, r3, #1
    aa08:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aa0c:	4313      	orrs	r3, r2
    aa0e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aa12:	e126      	b.n	ac62 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    aa14:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa18:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa1c:	681b      	ldr	r3, [r3, #0]
    aa1e:	695a      	ldr	r2, [r3, #20]
    aa20:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aa24:	00db      	lsls	r3, r3, #3
    aa26:	4413      	add	r3, r2
    aa28:	685b      	ldr	r3, [r3, #4]
    aa2a:	04db      	lsls	r3, r3, #19
    aa2c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aa30:	4313      	orrs	r3, r2
    aa32:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aa36:	e114      	b.n	ac62 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    aa38:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa3c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    aa40:	681b      	ldr	r3, [r3, #0]
    aa42:	691b      	ldr	r3, [r3, #16]
    aa44:	2b01      	cmp	r3, #1
    aa46:	d160      	bne.n	ab0a <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    aa48:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa4c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa50:	681b      	ldr	r3, [r3, #0]
    aa52:	7c9b      	ldrb	r3, [r3, #18]
    aa54:	005b      	lsls	r3, r3, #1
    aa56:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    aa5a:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    aa5e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    aa62:	2301      	movs	r3, #1
    aa64:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    aa68:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa6c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa70:	681b      	ldr	r3, [r3, #0]
    aa72:	689b      	ldr	r3, [r3, #8]
    aa74:	2b00      	cmp	r3, #0
    aa76:	d024      	beq.n	aac2 <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    aa78:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa7c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa80:	681b      	ldr	r3, [r3, #0]
    aa82:	695a      	ldr	r2, [r3, #20]
    aa84:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aa88:	011b      	lsls	r3, r3, #4
    aa8a:	4413      	add	r3, r2
    aa8c:	685b      	ldr	r3, [r3, #4]
    aa8e:	0bdb      	lsrs	r3, r3, #15
    aa90:	041b      	lsls	r3, r3, #16
    aa92:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aa96:	4313      	orrs	r3, r2
    aa98:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    aa9c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aaa0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aaa4:	681b      	ldr	r3, [r3, #0]
    aaa6:	695a      	ldr	r2, [r3, #20]
    aaa8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aaac:	011b      	lsls	r3, r3, #4
    aaae:	3308      	adds	r3, #8
    aab0:	4413      	add	r3, r2
    aab2:	685b      	ldr	r3, [r3, #4]
    aab4:	0bdb      	lsrs	r3, r3, #15
    aab6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aaba:	4313      	orrs	r3, r2
    aabc:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aac0:	e0cf      	b.n	ac62 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    aac2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aac6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aaca:	681b      	ldr	r3, [r3, #0]
    aacc:	695a      	ldr	r2, [r3, #20]
    aace:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aad2:	011b      	lsls	r3, r3, #4
    aad4:	4413      	add	r3, r2
    aad6:	685b      	ldr	r3, [r3, #4]
    aad8:	04db      	lsls	r3, r3, #19
    aada:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aade:	4313      	orrs	r3, r2
    aae0:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    aae4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aae8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aaec:	681b      	ldr	r3, [r3, #0]
    aaee:	695a      	ldr	r2, [r3, #20]
    aaf0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aaf4:	011b      	lsls	r3, r3, #4
    aaf6:	3308      	adds	r3, #8
    aaf8:	4413      	add	r3, r2
    aafa:	685b      	ldr	r3, [r3, #4]
    aafc:	00db      	lsls	r3, r3, #3
    aafe:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab02:	4313      	orrs	r3, r2
    ab04:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    ab08:	e0ab      	b.n	ac62 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    ab0a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab0e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab12:	681b      	ldr	r3, [r3, #0]
    ab14:	7c9b      	ldrb	r3, [r3, #18]
    ab16:	009b      	lsls	r3, r3, #2
    ab18:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    ab1c:	2300      	movs	r3, #0
    ab1e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    ab22:	2302      	movs	r3, #2
    ab24:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    ab28:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab2c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab30:	681b      	ldr	r3, [r3, #0]
    ab32:	689b      	ldr	r3, [r3, #8]
    ab34:	2b00      	cmp	r3, #0
    ab36:	d04a      	beq.n	abce <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    ab38:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab3c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab40:	681b      	ldr	r3, [r3, #0]
    ab42:	695a      	ldr	r2, [r3, #20]
    ab44:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab48:	015b      	lsls	r3, r3, #5
    ab4a:	4413      	add	r3, r2
    ab4c:	685b      	ldr	r3, [r3, #4]
    ab4e:	0d5b      	lsrs	r3, r3, #21
    ab50:	061b      	lsls	r3, r3, #24
    ab52:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab56:	4313      	orrs	r3, r2
    ab58:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    ab5c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab60:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab64:	681b      	ldr	r3, [r3, #0]
    ab66:	695a      	ldr	r2, [r3, #20]
    ab68:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab6c:	015b      	lsls	r3, r3, #5
    ab6e:	3308      	adds	r3, #8
    ab70:	4413      	add	r3, r2
    ab72:	685b      	ldr	r3, [r3, #4]
    ab74:	0d5b      	lsrs	r3, r3, #21
    ab76:	041b      	lsls	r3, r3, #16
    ab78:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab7c:	4313      	orrs	r3, r2
    ab7e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    ab82:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab86:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab8a:	681b      	ldr	r3, [r3, #0]
    ab8c:	695a      	ldr	r2, [r3, #20]
    ab8e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab92:	015b      	lsls	r3, r3, #5
    ab94:	3310      	adds	r3, #16
    ab96:	4413      	add	r3, r2
    ab98:	685b      	ldr	r3, [r3, #4]
    ab9a:	0d5b      	lsrs	r3, r3, #21
    ab9c:	021b      	lsls	r3, r3, #8
    ab9e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aba2:	4313      	orrs	r3, r2
    aba4:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    aba8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abb0:	681b      	ldr	r3, [r3, #0]
    abb2:	695a      	ldr	r2, [r3, #20]
    abb4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abb8:	015b      	lsls	r3, r3, #5
    abba:	3318      	adds	r3, #24
    abbc:	4413      	add	r3, r2
    abbe:	685b      	ldr	r3, [r3, #4]
    abc0:	0d5b      	lsrs	r3, r3, #21
    abc2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    abc6:	4313      	orrs	r3, r2
    abc8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    abcc:	e049      	b.n	ac62 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    abce:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abd2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abd6:	681b      	ldr	r3, [r3, #0]
    abd8:	695a      	ldr	r2, [r3, #20]
    abda:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abde:	015b      	lsls	r3, r3, #5
    abe0:	4413      	add	r3, r2
    abe2:	685b      	ldr	r3, [r3, #4]
    abe4:	08db      	lsrs	r3, r3, #3
    abe6:	061b      	lsls	r3, r3, #24
    abe8:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    abec:	4313      	orrs	r3, r2
    abee:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    abf2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abf6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abfa:	681b      	ldr	r3, [r3, #0]
    abfc:	695a      	ldr	r2, [r3, #20]
    abfe:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac02:	015b      	lsls	r3, r3, #5
    ac04:	3308      	adds	r3, #8
    ac06:	4413      	add	r3, r2
    ac08:	685b      	ldr	r3, [r3, #4]
    ac0a:	08db      	lsrs	r3, r3, #3
    ac0c:	041b      	lsls	r3, r3, #16
    ac0e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac12:	4313      	orrs	r3, r2
    ac14:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    ac18:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac1c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac20:	681b      	ldr	r3, [r3, #0]
    ac22:	695a      	ldr	r2, [r3, #20]
    ac24:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac28:	015b      	lsls	r3, r3, #5
    ac2a:	3310      	adds	r3, #16
    ac2c:	4413      	add	r3, r2
    ac2e:	685b      	ldr	r3, [r3, #4]
    ac30:	08db      	lsrs	r3, r3, #3
    ac32:	021b      	lsls	r3, r3, #8
    ac34:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac38:	4313      	orrs	r3, r2
    ac3a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    ac3e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac42:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac46:	681b      	ldr	r3, [r3, #0]
    ac48:	695a      	ldr	r2, [r3, #20]
    ac4a:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac4e:	015b      	lsls	r3, r3, #5
    ac50:	3318      	adds	r3, #24
    ac52:	4413      	add	r3, r2
    ac54:	685b      	ldr	r3, [r3, #4]
    ac56:	08db      	lsrs	r3, r3, #3
    ac58:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac5c:	4313      	orrs	r3, r2
    ac5e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    ac62:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac66:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ac6a:	681b      	ldr	r3, [r3, #0]
    ac6c:	789b      	ldrb	r3, [r3, #2]
    ac6e:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    ac72:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac76:	4618      	mov	r0, r3
    ac78:	f002 fd22 	bl	d6c0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    ac7c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac80:	3301      	adds	r3, #1
    ac82:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ac86:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ac8a:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    ac8e:	429a      	cmp	r2, r3
    ac90:	d20a      	bcs.n	aca8 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    ac92:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac96:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac9a:	681b      	ldr	r3, [r3, #0]
    ac9c:	7c9b      	ldrb	r3, [r3, #18]
    ac9e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    aca2:	429a      	cmp	r2, r3
    aca4:	f4ff ae85 	bcc.w	a9b2 <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    aca8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acac:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    acb0:	681b      	ldr	r3, [r3, #0]
    acb2:	789a      	ldrb	r2, [r3, #2]
    acb4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acb8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    acbc:	681b      	ldr	r3, [r3, #0]
    acbe:	68db      	ldr	r3, [r3, #12]
    acc0:	4619      	mov	r1, r3
    acc2:	4610      	mov	r0, r2
    acc4:	f002 fd4a 	bl	d75c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    acc8:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    accc:	2b00      	cmp	r3, #0
    acce:	d054      	beq.n	ad7a <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    acd0:	2300      	movs	r3, #0
    acd2:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    acd6:	e03e      	b.n	ad56 <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    acd8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acdc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ace0:	681b      	ldr	r3, [r3, #0]
    ace2:	695a      	ldr	r2, [r3, #20]
    ace4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ace8:	00db      	lsls	r3, r3, #3
    acea:	441a      	add	r2, r3
    acec:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    acf0:	6812      	ldr	r2, [r2, #0]
    acf2:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    acf6:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    acfa:	00db      	lsls	r3, r3, #3
    acfc:	440b      	add	r3, r1
    acfe:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    ad00:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad04:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ad08:	681b      	ldr	r3, [r3, #0]
    ad0a:	689b      	ldr	r3, [r3, #8]
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d00a      	beq.n	ad26 <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    ad10:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad14:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    ad18:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    ad1c:	00db      	lsls	r3, r3, #3
    ad1e:	4413      	add	r3, r2
    ad20:	2201      	movs	r2, #1
    ad22:	705a      	strb	r2, [r3, #1]
    ad24:	e009      	b.n	ad3a <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    ad26:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad2a:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    ad2e:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    ad32:	00db      	lsls	r3, r3, #3
    ad34:	4413      	add	r3, r2
    ad36:	2200      	movs	r2, #0
    ad38:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    ad3a:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ad3e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad42:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    ad46:	2100      	movs	r1, #0
    ad48:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    ad4c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad50:	3301      	adds	r3, #1
    ad52:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ad56:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ad5a:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    ad5e:	429a      	cmp	r2, r3
    ad60:	d3ba      	bcc.n	acd8 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    ad62:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad66:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ad6a:	681b      	ldr	r3, [r3, #0]
    ad6c:	789b      	ldrb	r3, [r3, #2]
    ad6e:	aa02      	add	r2, sp, #8
    ad70:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    ad74:	4618      	mov	r0, r3
    ad76:	f002 f886 	bl	ce86 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    ad7a:	bf00      	nop
    ad7c:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    ad80:	f85d fb04 	ldr.w	pc, [sp], #4

0000ad84 <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    ad84:	b510      	push	{r4, lr}
    ad86:	b084      	sub	sp, #16
    ad88:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
#else
    uint16 BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
    ad8a:	9b01      	ldr	r3, [sp, #4]
    ad8c:	8b9b      	ldrh	r3, [r3, #28]
    ad8e:	f8ad 300e 	strh.w	r3, [sp, #14]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    ad92:	9b01      	ldr	r3, [sp, #4]
    ad94:	6a1a      	ldr	r2, [r3, #32]
    ad96:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ad9a:	2116      	movs	r1, #22
    ad9c:	fb01 f303 	mul.w	r3, r1, r3
    ada0:	4413      	add	r3, r2
    ada2:	785b      	ldrb	r3, [r3, #1]
    ada4:	2b00      	cmp	r3, #0
    ada6:	d016      	beq.n	add6 <Can_Ipw_InitBaudrate+0x52>
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    ada8:	9b01      	ldr	r3, [sp, #4]
    adaa:	7898      	ldrb	r0, [r3, #2]
    adac:	9b01      	ldr	r3, [sp, #4]
    adae:	6a1a      	ldr	r2, [r3, #32]
    adb0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    adb4:	2116      	movs	r1, #22
    adb6:	fb01 f303 	mul.w	r3, r1, r3
    adba:	4413      	add	r3, r2
    adbc:	7cd9      	ldrb	r1, [r3, #19]
    adbe:	9b01      	ldr	r3, [sp, #4]
    adc0:	6a1a      	ldr	r2, [r3, #32]
    adc2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    adc6:	2416      	movs	r4, #22
    adc8:	fb04 f303 	mul.w	r3, r4, r3
    adcc:	4413      	add	r3, r2
    adce:	7d1b      	ldrb	r3, [r3, #20]
    add0:	461a      	mov	r2, r3
    add2:	f003 f83d 	bl	de50 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    add6:	9b01      	ldr	r3, [sp, #4]
    add8:	7898      	ldrb	r0, [r3, #2]
    adda:	9b01      	ldr	r3, [sp, #4]
    addc:	6a1a      	ldr	r2, [r3, #32]
    adde:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ade2:	2116      	movs	r1, #22
    ade4:	fb01 f303 	mul.w	r3, r1, r3
    ade8:	4413      	add	r3, r2
    adea:	7c9b      	ldrb	r3, [r3, #18]
    adec:	4619      	mov	r1, r3
    adee:	f003 f883 	bl	def8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    adf2:	bf00      	nop
    adf4:	b004      	add	sp, #16
    adf6:	bd10      	pop	{r4, pc}

0000adf8 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    adf8:	b500      	push	{lr}
    adfa:	b087      	sub	sp, #28
    adfc:	9003      	str	r0, [sp, #12]
    adfe:	9102      	str	r1, [sp, #8]
    ae00:	4613      	mov	r3, r2
    ae02:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    ae06:	2300      	movs	r3, #0
    ae08:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    ae0c:	9b03      	ldr	r3, [sp, #12]
    ae0e:	785b      	ldrb	r3, [r3, #1]
    ae10:	461a      	mov	r2, r3
    ae12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae16:	491c      	ldr	r1, [pc, #112]	; (ae88 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    ae18:	0152      	lsls	r2, r2, #5
    ae1a:	4413      	add	r3, r2
    ae1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    ae20:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    ae24:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ae28:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ae2c:	4293      	cmp	r3, r2
    ae2e:	d027      	beq.n	ae80 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    ae30:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    ae34:	4613      	mov	r3, r2
    ae36:	00db      	lsls	r3, r3, #3
    ae38:	4413      	add	r3, r2
    ae3a:	009b      	lsls	r3, r3, #2
    ae3c:	461a      	mov	r2, r3
    ae3e:	9b02      	ldr	r3, [sp, #8]
    ae40:	4413      	add	r3, r2
    ae42:	7b1b      	ldrb	r3, [r3, #12]
    ae44:	f083 0301 	eor.w	r3, r3, #1
    ae48:	b2db      	uxtb	r3, r3
    ae4a:	2b00      	cmp	r3, #0
    ae4c:	d018      	beq.n	ae80 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    ae4e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    ae52:	4613      	mov	r3, r2
    ae54:	00db      	lsls	r3, r3, #3
    ae56:	4413      	add	r3, r2
    ae58:	009b      	lsls	r3, r3, #2
    ae5a:	461a      	mov	r2, r3
    ae5c:	9b02      	ldr	r3, [sp, #8]
    ae5e:	4413      	add	r3, r2
    ae60:	699b      	ldr	r3, [r3, #24]
    ae62:	2b03      	cmp	r3, #3
    ae64:	d10c      	bne.n	ae80 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    ae66:	9b03      	ldr	r3, [sp, #12]
    ae68:	785b      	ldrb	r3, [r3, #1]
    ae6a:	461a      	mov	r2, r3
    ae6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae70:	4906      	ldr	r1, [pc, #24]	; (ae8c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    ae72:	0152      	lsls	r2, r2, #5
    ae74:	4413      	add	r3, r2
    ae76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    ae7a:	4618      	mov	r0, r3
    ae7c:	f00c f850 	bl	16f20 <CanIf_TxConfirmation>
            }
        }
    }
    ae80:	bf00      	nop
    ae82:	b007      	add	sp, #28
    ae84:	f85d fb04 	ldr.w	pc, [sp], #4
    ae88:	1fff92d8 	.word	0x1fff92d8
    ae8c:	1fff9258 	.word	0x1fff9258

0000ae90 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    ae90:	b500      	push	{lr}
    ae92:	b08f      	sub	sp, #60	; 0x3c
    ae94:	9005      	str	r0, [sp, #20]
    ae96:	9104      	str	r1, [sp, #16]
    ae98:	4613      	mov	r3, r2
    ae9a:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    ae9e:	2300      	movs	r3, #0
    aea0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    aea4:	2300      	movs	r3, #0
    aea6:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    aea8:	2300      	movs	r3, #0
    aeaa:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    aeac:	9b05      	ldr	r3, [sp, #20]
    aeae:	785b      	ldrb	r3, [r3, #1]
    aeb0:	461a      	mov	r2, r3
    aeb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    aeb6:	4944      	ldr	r1, [pc, #272]	; (afc8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x138>)
    aeb8:	0152      	lsls	r2, r2, #5
    aeba:	4413      	add	r3, r2
    aebc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    aec0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    aec4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    aec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    aecc:	4293      	cmp	r3, r2
    aece:	d076      	beq.n	afbe <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
    aed0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    aed4:	4613      	mov	r3, r2
    aed6:	00db      	lsls	r3, r3, #3
    aed8:	4413      	add	r3, r2
    aeda:	009b      	lsls	r3, r3, #2
    aedc:	461a      	mov	r2, r3
    aede:	9b04      	ldr	r3, [sp, #16]
    aee0:	4413      	add	r3, r2
    aee2:	7b1b      	ldrb	r3, [r3, #12]
    aee4:	f083 0301 	eor.w	r3, r3, #1
    aee8:	b2db      	uxtb	r3, r3
    aeea:	2b00      	cmp	r3, #0
    aeec:	d067      	beq.n	afbe <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    aeee:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    aef2:	4613      	mov	r3, r2
    aef4:	00db      	lsls	r3, r3, #3
    aef6:	4413      	add	r3, r2
    aef8:	009b      	lsls	r3, r3, #2
    aefa:	461a      	mov	r2, r3
    aefc:	9b04      	ldr	r3, [sp, #16]
    aefe:	4413      	add	r3, r2
    af00:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    af02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af04:	699b      	ldr	r3, [r3, #24]
    af06:	2b00      	cmp	r3, #0
    af08:	d11d      	bne.n	af46 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xb6>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    af0a:	9b05      	ldr	r3, [sp, #20]
    af0c:	785b      	ldrb	r3, [r3, #1]
    af0e:	461a      	mov	r2, r3
    af10:	4b2e      	ldr	r3, [pc, #184]	; (afcc <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    af12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    af16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af18:	7f1b      	ldrb	r3, [r3, #28]
    af1a:	011b      	lsls	r3, r3, #4
    af1c:	4413      	add	r3, r2
    af1e:	681b      	ldr	r3, [r3, #0]
    af20:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    af22:	a906      	add	r1, sp, #24
    af24:	a809      	add	r0, sp, #36	; 0x24
    af26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af28:	9300      	str	r3, [sp, #0]
    af2a:	9b05      	ldr	r3, [sp, #20]
    af2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    af2e:	f7ff fca9 	bl	a884 <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    af32:	9b05      	ldr	r3, [sp, #20]
    af34:	7898      	ldrb	r0, [r3, #2]
    af36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af38:	7f19      	ldrb	r1, [r3, #28]
    af3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af3c:	7b1b      	ldrb	r3, [r3, #12]
    af3e:	2200      	movs	r2, #0
    af40:	f001 fe70 	bl	cc24 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    af44:	e03b      	b.n	afbe <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    af46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af48:	699b      	ldr	r3, [r3, #24]
    af4a:	2b01      	cmp	r3, #1
    af4c:	d137      	bne.n	afbe <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                if ((uint8)7U == u8MbIdx)
    af4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    af52:	2b07      	cmp	r3, #7
    af54:	d10d      	bne.n	af72 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xe2>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    af56:	2301      	movs	r3, #1
    af58:	2208      	movs	r2, #8
    af5a:	2100      	movs	r1, #0
    af5c:	2050      	movs	r0, #80	; 0x50
    af5e:	f00b fee5 	bl	16d2c <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    af62:	9b05      	ldr	r3, [sp, #20]
    af64:	699b      	ldr	r3, [r3, #24]
    af66:	2b00      	cmp	r3, #0
    af68:	d029      	beq.n	afbe <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    af6a:	9b05      	ldr	r3, [sp, #20]
    af6c:	699b      	ldr	r3, [r3, #24]
    af6e:	4798      	blx	r3
    }
    af70:	e025      	b.n	afbe <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                else if ((uint8)6U == u8MbIdx)
    af72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    af76:	2b06      	cmp	r3, #6
    af78:	d107      	bne.n	af8a <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xfa>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    af7a:	9b05      	ldr	r3, [sp, #20]
    af7c:	695b      	ldr	r3, [r3, #20]
    af7e:	2b00      	cmp	r3, #0
    af80:	d01d      	beq.n	afbe <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    af82:	9b05      	ldr	r3, [sp, #20]
    af84:	695b      	ldr	r3, [r3, #20]
    af86:	4798      	blx	r3
    }
    af88:	e019      	b.n	afbe <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    af8a:	9b05      	ldr	r3, [sp, #20]
    af8c:	785b      	ldrb	r3, [r3, #1]
    af8e:	461a      	mov	r2, r3
    af90:	4b0e      	ldr	r3, [pc, #56]	; (afcc <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    af92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    af96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af98:	7f1b      	ldrb	r3, [r3, #28]
    af9a:	011b      	lsls	r3, r3, #4
    af9c:	4413      	add	r3, r2
    af9e:	681b      	ldr	r3, [r3, #0]
    afa0:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    afa2:	a906      	add	r1, sp, #24
    afa4:	a809      	add	r0, sp, #36	; 0x24
    afa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afa8:	9300      	str	r3, [sp, #0]
    afaa:	9b05      	ldr	r3, [sp, #20]
    afac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    afae:	f7ff fc69 	bl	a884 <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    afb2:	9b05      	ldr	r3, [sp, #20]
    afb4:	789b      	ldrb	r3, [r3, #2]
    afb6:	2100      	movs	r1, #0
    afb8:	4618      	mov	r0, r3
    afba:	f001 ff31 	bl	ce20 <FlexCAN_Ip_RxFifo>
    }
    afbe:	bf00      	nop
    afc0:	b00f      	add	sp, #60	; 0x3c
    afc2:	f85d fb04 	ldr.w	pc, [sp], #4
    afc6:	bf00      	nop
    afc8:	1fff92d8 	.word	0x1fff92d8
    afcc:	00018528 	.word	0x00018528

0000afd0 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    afd0:	b510      	push	{r4, lr}
    afd2:	b084      	sub	sp, #16
    afd4:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    afd6:	2301      	movs	r3, #1
    afd8:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    afdc:	2300      	movs	r3, #0
    afde:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    afe2:	2300      	movs	r3, #0
    afe4:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    afe8:	2300      	movs	r3, #0
    afea:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    afec:	2300      	movs	r3, #0
    afee:	f88d 300d 	strb.w	r3, [sp, #13]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    aff2:	9b01      	ldr	r3, [sp, #4]
    aff4:	7898      	ldrb	r0, [r3, #2]
    aff6:	9b01      	ldr	r3, [sp, #4]
    aff8:	785b      	ldrb	r3, [r3, #1]
    affa:	461a      	mov	r2, r3
    affc:	4b77      	ldr	r3, [pc, #476]	; (b1dc <Can_43_FLEXCAN_Ipw_Init+0x20c>)
    affe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    b002:	9b01      	ldr	r3, [sp, #4]
    b004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b006:	681b      	ldr	r3, [r3, #0]
    b008:	461a      	mov	r2, r3
    b00a:	f001 fcff 	bl	ca0c <FlexCAN_Ip_Init_Privileged>
    b00e:	4603      	mov	r3, r0
    b010:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    b014:	9b01      	ldr	r3, [sp, #4]
    b016:	785b      	ldrb	r3, [r3, #1]
    b018:	461a      	mov	r2, r3
    b01a:	4b71      	ldr	r3, [pc, #452]	; (b1e0 <Can_43_FLEXCAN_Ipw_Init+0x210>)
    b01c:	2101      	movs	r1, #1
    b01e:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    b020:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b024:	2b00      	cmp	r3, #0
    b026:	d13b      	bne.n	b0a0 <Can_43_FLEXCAN_Ipw_Init+0xd0>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b028:	9b01      	ldr	r3, [sp, #4]
    b02a:	789b      	ldrb	r3, [r3, #2]
    b02c:	4618      	mov	r0, r3
    b02e:	f003 f821 	bl	e074 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    b032:	9b01      	ldr	r3, [sp, #4]
    b034:	6a1a      	ldr	r2, [r3, #32]
    b036:	9b01      	ldr	r3, [sp, #4]
    b038:	8b9b      	ldrh	r3, [r3, #28]
    b03a:	4619      	mov	r1, r3
    b03c:	2316      	movs	r3, #22
    b03e:	fb01 f303 	mul.w	r3, r1, r3
    b042:	4413      	add	r3, r2
    b044:	785b      	ldrb	r3, [r3, #1]
    b046:	2b00      	cmp	r3, #0
    b048:	d018      	beq.n	b07c <Can_43_FLEXCAN_Ipw_Init+0xac>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    b04a:	9b01      	ldr	r3, [sp, #4]
    b04c:	7898      	ldrb	r0, [r3, #2]
    b04e:	9b01      	ldr	r3, [sp, #4]
    b050:	6a1a      	ldr	r2, [r3, #32]
    b052:	9b01      	ldr	r3, [sp, #4]
    b054:	8b9b      	ldrh	r3, [r3, #28]
    b056:	4619      	mov	r1, r3
    b058:	2316      	movs	r3, #22
    b05a:	fb01 f303 	mul.w	r3, r1, r3
    b05e:	4413      	add	r3, r2
    b060:	7cd9      	ldrb	r1, [r3, #19]
    b062:	9b01      	ldr	r3, [sp, #4]
    b064:	6a1a      	ldr	r2, [r3, #32]
    b066:	9b01      	ldr	r3, [sp, #4]
    b068:	8b9b      	ldrh	r3, [r3, #28]
    b06a:	461c      	mov	r4, r3
    b06c:	2316      	movs	r3, #22
    b06e:	fb04 f303 	mul.w	r3, r4, r3
    b072:	4413      	add	r3, r2
    b074:	7d1b      	ldrb	r3, [r3, #20]
    b076:	461a      	mov	r2, r3
    b078:	f002 feea 	bl	de50 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    b07c:	9b01      	ldr	r3, [sp, #4]
    b07e:	7898      	ldrb	r0, [r3, #2]
    b080:	9b01      	ldr	r3, [sp, #4]
    b082:	6a1a      	ldr	r2, [r3, #32]
    b084:	9b01      	ldr	r3, [sp, #4]
    b086:	8b9b      	ldrh	r3, [r3, #28]
    b088:	4619      	mov	r1, r3
    b08a:	2316      	movs	r3, #22
    b08c:	fb01 f303 	mul.w	r3, r1, r3
    b090:	4413      	add	r3, r2
    b092:	7c9b      	ldrb	r3, [r3, #18]
    b094:	4619      	mov	r1, r3
    b096:	f002 ff2f 	bl	def8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b09a:	9801      	ldr	r0, [sp, #4]
    b09c:	f000 fb0a 	bl	b6b4 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b0a0:	2300      	movs	r3, #0
    b0a2:	f88d 300d 	strb.w	r3, [sp, #13]
    b0a6:	e010      	b.n	b0ca <Can_43_FLEXCAN_Ipw_Init+0xfa>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    b0a8:	9b01      	ldr	r3, [sp, #4]
    b0aa:	785b      	ldrb	r3, [r3, #1]
    b0ac:	461a      	mov	r2, r3
    b0ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b0b2:	494c      	ldr	r1, [pc, #304]	; (b1e4 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b0b4:	0152      	lsls	r2, r2, #5
    b0b6:	4413      	add	r3, r2
    b0b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b0bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b0c0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b0c4:	3301      	adds	r3, #1
    b0c6:	f88d 300d 	strb.w	r3, [sp, #13]
    b0ca:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b0ce:	2b1f      	cmp	r3, #31
    b0d0:	d9ea      	bls.n	b0a8 <Can_43_FLEXCAN_Ipw_Init+0xd8>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b0d2:	2300      	movs	r3, #0
    b0d4:	f88d 300f 	strb.w	r3, [sp, #15]
    b0d8:	e06b      	b.n	b1b2 <Can_43_FLEXCAN_Ipw_Init+0x1e2>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b0da:	9b01      	ldr	r3, [sp, #4]
    b0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b0de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b0e2:	009b      	lsls	r3, r3, #2
    b0e4:	4413      	add	r3, r2
    b0e6:	681b      	ldr	r3, [r3, #0]
    b0e8:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    b0ea:	9b02      	ldr	r3, [sp, #8]
    b0ec:	699b      	ldr	r3, [r3, #24]
    b0ee:	2b03      	cmp	r3, #3
    b0f0:	d006      	beq.n	b100 <Can_43_FLEXCAN_Ipw_Init+0x130>
    b0f2:	2b03      	cmp	r3, #3
    b0f4:	d857      	bhi.n	b1a6 <Can_43_FLEXCAN_Ipw_Init+0x1d6>
    b0f6:	2b00      	cmp	r3, #0
    b0f8:	d023      	beq.n	b142 <Can_43_FLEXCAN_Ipw_Init+0x172>
    b0fa:	2b01      	cmp	r3, #1
    b0fc:	d02f      	beq.n	b15e <Can_43_FLEXCAN_Ipw_Init+0x18e>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    b0fe:	e052      	b.n	b1a6 <Can_43_FLEXCAN_Ipw_Init+0x1d6>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b100:	2300      	movs	r3, #0
    b102:	f88d 300e 	strb.w	r3, [sp, #14]
    b106:	e015      	b.n	b134 <Can_43_FLEXCAN_Ipw_Init+0x164>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    b108:	9b01      	ldr	r3, [sp, #4]
    b10a:	785b      	ldrb	r3, [r3, #1]
    b10c:	461c      	mov	r4, r3
    b10e:	9b02      	ldr	r3, [sp, #8]
    b110:	7f1b      	ldrb	r3, [r3, #28]
    b112:	461a      	mov	r2, r3
    b114:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b118:	4413      	add	r3, r2
    b11a:	9a02      	ldr	r2, [sp, #8]
    b11c:	8810      	ldrh	r0, [r2, #0]
    b11e:	4931      	ldr	r1, [pc, #196]	; (b1e4 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b120:	0162      	lsls	r2, r4, #5
    b122:	4413      	add	r3, r2
    b124:	4602      	mov	r2, r0
    b126:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b12a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b12e:	3301      	adds	r3, #1
    b130:	f88d 300e 	strb.w	r3, [sp, #14]
    b134:	9b02      	ldr	r3, [sp, #8]
    b136:	7b9b      	ldrb	r3, [r3, #14]
    b138:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b13c:	429a      	cmp	r2, r3
    b13e:	d3e3      	bcc.n	b108 <Can_43_FLEXCAN_Ipw_Init+0x138>
                break;
    b140:	e032      	b.n	b1a8 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b142:	9b01      	ldr	r3, [sp, #4]
    b144:	785b      	ldrb	r3, [r3, #1]
    b146:	461c      	mov	r4, r3
    b148:	9b02      	ldr	r3, [sp, #8]
    b14a:	7f1b      	ldrb	r3, [r3, #28]
    b14c:	4618      	mov	r0, r3
    b14e:	9b02      	ldr	r3, [sp, #8]
    b150:	8819      	ldrh	r1, [r3, #0]
    b152:	4a24      	ldr	r2, [pc, #144]	; (b1e4 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b154:	0163      	lsls	r3, r4, #5
    b156:	4403      	add	r3, r0
    b158:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    b15c:	e024      	b.n	b1a8 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b15e:	9b01      	ldr	r3, [sp, #4]
    b160:	785b      	ldrb	r3, [r3, #1]
    b162:	461c      	mov	r4, r3
    b164:	9b02      	ldr	r3, [sp, #8]
    b166:	7f1b      	ldrb	r3, [r3, #28]
    b168:	4618      	mov	r0, r3
    b16a:	9b02      	ldr	r3, [sp, #8]
    b16c:	8819      	ldrh	r1, [r3, #0]
    b16e:	4a1d      	ldr	r2, [pc, #116]	; (b1e4 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b170:	0163      	lsls	r3, r4, #5
    b172:	4403      	add	r3, r0
    b174:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    b178:	9b01      	ldr	r3, [sp, #4]
    b17a:	785b      	ldrb	r3, [r3, #1]
    b17c:	4618      	mov	r0, r3
    b17e:	9b02      	ldr	r3, [sp, #8]
    b180:	8819      	ldrh	r1, [r3, #0]
    b182:	4a18      	ldr	r2, [pc, #96]	; (b1e4 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b184:	0183      	lsls	r3, r0, #6
    b186:	4413      	add	r3, r2
    b188:	330c      	adds	r3, #12
    b18a:	460a      	mov	r2, r1
    b18c:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    b18e:	9b01      	ldr	r3, [sp, #4]
    b190:	785b      	ldrb	r3, [r3, #1]
    b192:	4618      	mov	r0, r3
    b194:	9b02      	ldr	r3, [sp, #8]
    b196:	8819      	ldrh	r1, [r3, #0]
    b198:	4a12      	ldr	r2, [pc, #72]	; (b1e4 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b19a:	0183      	lsls	r3, r0, #6
    b19c:	4413      	add	r3, r2
    b19e:	330e      	adds	r3, #14
    b1a0:	460a      	mov	r2, r1
    b1a2:	801a      	strh	r2, [r3, #0]
                break;
    b1a4:	e000      	b.n	b1a8 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                break;
    b1a6:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b1a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b1ac:	3301      	adds	r3, #1
    b1ae:	f88d 300f 	strb.w	r3, [sp, #15]
    b1b2:	9b01      	ldr	r3, [sp, #4]
    b1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b1b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b1bc:	429a      	cmp	r2, r3
    b1be:	d38c      	bcc.n	b0da <Can_43_FLEXCAN_Ipw_Init+0x10a>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b1c0:	9b01      	ldr	r3, [sp, #4]
    b1c2:	789b      	ldrb	r3, [r3, #2]
    b1c4:	4618      	mov	r0, r3
    b1c6:	f002 fca5 	bl	db14 <FlexCAN_Ip_SetStopMode_Privileged>
    b1ca:	4603      	mov	r3, r0
    b1cc:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b1d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    b1d4:	4618      	mov	r0, r3
    b1d6:	b004      	add	sp, #16
    b1d8:	bd10      	pop	{r4, pc}
    b1da:	bf00      	nop
    b1dc:	00018528 	.word	0x00018528
    b1e0:	1fff9358 	.word	0x1fff9358
    b1e4:	1fff92d8 	.word	0x1fff92d8

0000b1e8 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b1e8:	b500      	push	{lr}
    b1ea:	b083      	sub	sp, #12
    b1ec:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    b1ee:	9b01      	ldr	r3, [sp, #4]
    b1f0:	789b      	ldrb	r3, [r3, #2]
    b1f2:	4618      	mov	r0, r3
    b1f4:	f002 fafa 	bl	d7ec <FlexCAN_Ip_Deinit_Privileged>
}
    b1f8:	bf00      	nop
    b1fa:	b003      	add	sp, #12
    b1fc:	f85d fb04 	ldr.w	pc, [sp], #4

0000b200 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b200:	b500      	push	{lr}
    b202:	b085      	sub	sp, #20
    b204:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    b206:	2300      	movs	r3, #0
    b208:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b20a:	9b01      	ldr	r3, [sp, #4]
    b20c:	785b      	ldrb	r3, [r3, #1]
    b20e:	461a      	mov	r2, r3
    b210:	4b11      	ldr	r3, [pc, #68]	; (b258 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    b212:	5c9b      	ldrb	r3, [r3, r2]
    b214:	2b00      	cmp	r3, #0
    b216:	d012      	beq.n	b23e <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b218:	9b01      	ldr	r3, [sp, #4]
    b21a:	7a5b      	ldrb	r3, [r3, #9]
    b21c:	f083 0301 	eor.w	r3, r3, #1
    b220:	b2db      	uxtb	r3, r3
    b222:	2b00      	cmp	r3, #0
    b224:	d006      	beq.n	b234 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b226:	9b01      	ldr	r3, [sp, #4]
    b228:	789b      	ldrb	r3, [r3, #2]
    b22a:	2201      	movs	r2, #1
    b22c:	2104      	movs	r1, #4
    b22e:	4618      	mov	r0, r3
    b230:	f002 ff4c 	bl	e0cc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b234:	9b01      	ldr	r3, [sp, #4]
    b236:	789b      	ldrb	r3, [r3, #2]
    b238:	4618      	mov	r0, r3
    b23a:	f002 feed 	bl	e018 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b23e:	9b01      	ldr	r3, [sp, #4]
    b240:	789b      	ldrb	r3, [r3, #2]
    b242:	4618      	mov	r0, r3
    b244:	f002 fc46 	bl	dad4 <FlexCAN_Ip_SetStartMode_Privileged>
    b248:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b24a:	9b03      	ldr	r3, [sp, #12]
    b24c:	b2db      	uxtb	r3, r3
}
    b24e:	4618      	mov	r0, r3
    b250:	b005      	add	sp, #20
    b252:	f85d fb04 	ldr.w	pc, [sp], #4
    b256:	bf00      	nop
    b258:	1fff9358 	.word	0x1fff9358

0000b25c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b25c:	b500      	push	{lr}
    b25e:	b087      	sub	sp, #28
    b260:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    b262:	2300      	movs	r3, #0
    b264:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    b268:	2300      	movs	r3, #0
    b26a:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    b26c:	9b01      	ldr	r3, [sp, #4]
    b26e:	7898      	ldrb	r0, [r3, #2]
    b270:	9b01      	ldr	r3, [sp, #4]
    b272:	785b      	ldrb	r3, [r3, #1]
    b274:	461a      	mov	r2, r3
    b276:	4b31      	ldr	r3, [pc, #196]	; (b33c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xe0>)
    b278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    b27c:	9b01      	ldr	r3, [sp, #4]
    b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b280:	681b      	ldr	r3, [r3, #0]
    b282:	461a      	mov	r2, r3
    b284:	f001 fbc2 	bl	ca0c <FlexCAN_Ip_Init_Privileged>
    b288:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b28a:	9b04      	ldr	r3, [sp, #16]
    b28c:	2b00      	cmp	r3, #0
    b28e:	d14f      	bne.n	b330 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd4>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b290:	9b01      	ldr	r3, [sp, #4]
    b292:	789b      	ldrb	r3, [r3, #2]
    b294:	4618      	mov	r0, r3
    b296:	f002 feed 	bl	e074 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    b29a:	9801      	ldr	r0, [sp, #4]
    b29c:	f7ff fd72 	bl	ad84 <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b2a0:	9801      	ldr	r0, [sp, #4]
    b2a2:	f000 fa07 	bl	b6b4 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b2a6:	2300      	movs	r3, #0
    b2a8:	f88d 3017 	strb.w	r3, [sp, #23]
    b2ac:	e02f      	b.n	b30e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xb2>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b2ae:	9b01      	ldr	r3, [sp, #4]
    b2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b2b2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b2b6:	009b      	lsls	r3, r3, #2
    b2b8:	4413      	add	r3, r2
    b2ba:	681b      	ldr	r3, [r3, #0]
    b2bc:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    b2be:	9b03      	ldr	r3, [sp, #12]
    b2c0:	7b1b      	ldrb	r3, [r3, #12]
    b2c2:	f083 0301 	eor.w	r3, r3, #1
    b2c6:	b2db      	uxtb	r3, r3
    b2c8:	2b00      	cmp	r3, #0
    b2ca:	d018      	beq.n	b2fe <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa2>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    b2cc:	9b03      	ldr	r3, [sp, #12]
    b2ce:	699b      	ldr	r3, [r3, #24]
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d003      	beq.n	b2dc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x80>
    b2d4:	3b01      	subs	r3, #1
    b2d6:	2b01      	cmp	r3, #1
    b2d8:	d813      	bhi.n	b302 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa6>
    b2da:	e009      	b.n	b2f0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x94>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    b2dc:	9b01      	ldr	r3, [sp, #4]
    b2de:	7898      	ldrb	r0, [r3, #2]
    b2e0:	9b03      	ldr	r3, [sp, #12]
    b2e2:	7f19      	ldrb	r1, [r3, #28]
    b2e4:	9b03      	ldr	r3, [sp, #12]
    b2e6:	7b1b      	ldrb	r3, [r3, #12]
    b2e8:	2200      	movs	r2, #0
    b2ea:	f001 fc9b 	bl	cc24 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    b2ee:	e009      	b.n	b304 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    b2f0:	9b01      	ldr	r3, [sp, #4]
    b2f2:	789b      	ldrb	r3, [r3, #2]
    b2f4:	2100      	movs	r1, #0
    b2f6:	4618      	mov	r0, r3
    b2f8:	f001 fd92 	bl	ce20 <FlexCAN_Ip_RxFifo>
                        }
                        break;
    b2fc:	e002      	b.n	b304 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    b2fe:	bf00      	nop
    b300:	e000      	b.n	b304 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                        break;
    b302:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b304:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b308:	3301      	adds	r3, #1
    b30a:	f88d 3017 	strb.w	r3, [sp, #23]
    b30e:	9b01      	ldr	r3, [sp, #4]
    b310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b314:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b318:	429a      	cmp	r2, r3
    b31a:	d3c8      	bcc.n	b2ae <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x52>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    b31c:	9801      	ldr	r0, [sp, #4]
    b31e:	f7ff ff6f 	bl	b200 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    b322:	4603      	mov	r3, r0
    b324:	2b00      	cmp	r3, #0
    b326:	bf14      	ite	ne
    b328:	2301      	movne	r3, #1
    b32a:	2300      	moveq	r3, #0
    b32c:	b2db      	uxtb	r3, r3
    b32e:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    b330:	9b04      	ldr	r3, [sp, #16]
    b332:	b2db      	uxtb	r3, r3
}
    b334:	4618      	mov	r0, r3
    b336:	b007      	add	sp, #28
    b338:	f85d fb04 	ldr.w	pc, [sp], #4
    b33c:	00018528 	.word	0x00018528

0000b340 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b340:	b500      	push	{lr}
    b342:	b085      	sub	sp, #20
    b344:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    b346:	2300      	movs	r3, #0
    b348:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    b34c:	2300      	movs	r3, #0
    b34e:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b352:	9b01      	ldr	r3, [sp, #4]
    b354:	789b      	ldrb	r3, [r3, #2]
    b356:	4618      	mov	r0, r3
    b358:	f002 f986 	bl	d668 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    b35c:	4603      	mov	r3, r0
    b35e:	2b00      	cmp	r3, #0
    b360:	d160      	bne.n	b424 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b362:	9b01      	ldr	r3, [sp, #4]
    b364:	785b      	ldrb	r3, [r3, #1]
    b366:	461a      	mov	r2, r3
    b368:	4b33      	ldr	r3, [pc, #204]	; (b438 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    b36a:	5c9b      	ldrb	r3, [r3, r2]
    b36c:	2b00      	cmp	r3, #0
    b36e:	d012      	beq.n	b396 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b370:	9b01      	ldr	r3, [sp, #4]
    b372:	789b      	ldrb	r3, [r3, #2]
    b374:	4618      	mov	r0, r3
    b376:	f002 fe7d 	bl	e074 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b37a:	9b01      	ldr	r3, [sp, #4]
    b37c:	7a5b      	ldrb	r3, [r3, #9]
    b37e:	f083 0301 	eor.w	r3, r3, #1
    b382:	b2db      	uxtb	r3, r3
    b384:	2b00      	cmp	r3, #0
    b386:	d006      	beq.n	b396 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b388:	9b01      	ldr	r3, [sp, #4]
    b38a:	789b      	ldrb	r3, [r3, #2]
    b38c:	2200      	movs	r2, #0
    b38e:	2104      	movs	r1, #4
    b390:	4618      	mov	r0, r3
    b392:	f002 fe9b 	bl	e0cc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b396:	2300      	movs	r3, #0
    b398:	f88d 300e 	strb.w	r3, [sp, #14]
    b39c:	e032      	b.n	b404 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b39e:	9b01      	ldr	r3, [sp, #4]
    b3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b3a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b3a6:	009b      	lsls	r3, r3, #2
    b3a8:	4413      	add	r3, r2
    b3aa:	681b      	ldr	r3, [r3, #0]
    b3ac:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b3ae:	9b02      	ldr	r3, [sp, #8]
    b3b0:	699b      	ldr	r3, [r3, #24]
    b3b2:	2b03      	cmp	r3, #3
    b3b4:	d119      	bne.n	b3ea <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    b3b6:	2300      	movs	r3, #0
    b3b8:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    b3bc:	9b01      	ldr	r3, [sp, #4]
    b3be:	7898      	ldrb	r0, [r3, #2]
    b3c0:	9b02      	ldr	r3, [sp, #8]
    b3c2:	7f1a      	ldrb	r2, [r3, #28]
    b3c4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b3c8:	4413      	add	r3, r2
    b3ca:	b2db      	uxtb	r3, r3
    b3cc:	4619      	mov	r1, r3
    b3ce:	f002 ff03 	bl	e1d8 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    b3d2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b3d6:	3301      	adds	r3, #1
    b3d8:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    b3dc:	9b02      	ldr	r3, [sp, #8]
    b3de:	7b9b      	ldrb	r3, [r3, #14]
    b3e0:	f89d 200d 	ldrb.w	r2, [sp, #13]
    b3e4:	429a      	cmp	r2, r3
    b3e6:	d3e9      	bcc.n	b3bc <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    b3e8:	e007      	b.n	b3fa <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    b3ea:	9b01      	ldr	r3, [sp, #4]
    b3ec:	789a      	ldrb	r2, [r3, #2]
    b3ee:	9b02      	ldr	r3, [sp, #8]
    b3f0:	7f1b      	ldrb	r3, [r3, #28]
    b3f2:	4619      	mov	r1, r3
    b3f4:	4610      	mov	r0, r2
    b3f6:	f002 feef 	bl	e1d8 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b3fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b3fe:	3301      	adds	r3, #1
    b400:	f88d 300e 	strb.w	r3, [sp, #14]
    b404:	9b01      	ldr	r3, [sp, #4]
    b406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b40a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b40e:	429a      	cmp	r2, r3
    b410:	d3c5      	bcc.n	b39e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b412:	9b01      	ldr	r3, [sp, #4]
    b414:	789b      	ldrb	r3, [r3, #2]
    b416:	4618      	mov	r0, r3
    b418:	f002 fb7c 	bl	db14 <FlexCAN_Ip_SetStopMode_Privileged>
    b41c:	4603      	mov	r3, r0
    b41e:	f88d 300f 	strb.w	r3, [sp, #15]
    b422:	e002      	b.n	b42a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    b424:	2301      	movs	r3, #1
    b426:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    b42a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b42e:	4618      	mov	r0, r3
    b430:	b005      	add	sp, #20
    b432:	f85d fb04 	ldr.w	pc, [sp], #4
    b436:	bf00      	nop
    b438:	1fff9358 	.word	0x1fff9358

0000b43c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b43c:	b500      	push	{lr}
    b43e:	b083      	sub	sp, #12
    b440:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b442:	9b01      	ldr	r3, [sp, #4]
    b444:	785b      	ldrb	r3, [r3, #1]
    b446:	461a      	mov	r2, r3
    b448:	4b10      	ldr	r3, [pc, #64]	; (b48c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b44a:	5c9b      	ldrb	r3, [r3, r2]
    b44c:	2b00      	cmp	r3, #0
    b44e:	d018      	beq.n	b482 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b450:	9b01      	ldr	r3, [sp, #4]
    b452:	789b      	ldrb	r3, [r3, #2]
    b454:	4618      	mov	r0, r3
    b456:	f002 fe0d 	bl	e074 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    b45a:	9b01      	ldr	r3, [sp, #4]
    b45c:	785b      	ldrb	r3, [r3, #1]
    b45e:	461a      	mov	r2, r3
    b460:	4b0a      	ldr	r3, [pc, #40]	; (b48c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b462:	2100      	movs	r1, #0
    b464:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b466:	9b01      	ldr	r3, [sp, #4]
    b468:	7a5b      	ldrb	r3, [r3, #9]
    b46a:	f083 0301 	eor.w	r3, r3, #1
    b46e:	b2db      	uxtb	r3, r3
    b470:	2b00      	cmp	r3, #0
    b472:	d006      	beq.n	b482 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b474:	9b01      	ldr	r3, [sp, #4]
    b476:	789b      	ldrb	r3, [r3, #2]
    b478:	2200      	movs	r2, #0
    b47a:	2104      	movs	r1, #4
    b47c:	4618      	mov	r0, r3
    b47e:	f002 fe25 	bl	e0cc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    b482:	bf00      	nop
    b484:	b003      	add	sp, #12
    b486:	f85d fb04 	ldr.w	pc, [sp], #4
    b48a:	bf00      	nop
    b48c:	1fff9358 	.word	0x1fff9358

0000b490 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b490:	b500      	push	{lr}
    b492:	b083      	sub	sp, #12
    b494:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b496:	9b01      	ldr	r3, [sp, #4]
    b498:	785b      	ldrb	r3, [r3, #1]
    b49a:	461a      	mov	r2, r3
    b49c:	4b11      	ldr	r3, [pc, #68]	; (b4e4 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b49e:	5c9b      	ldrb	r3, [r3, r2]
    b4a0:	f083 0301 	eor.w	r3, r3, #1
    b4a4:	b2db      	uxtb	r3, r3
    b4a6:	2b00      	cmp	r3, #0
    b4a8:	d018      	beq.n	b4dc <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b4aa:	9b01      	ldr	r3, [sp, #4]
    b4ac:	789b      	ldrb	r3, [r3, #2]
    b4ae:	4618      	mov	r0, r3
    b4b0:	f002 fdb2 	bl	e018 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b4b4:	9b01      	ldr	r3, [sp, #4]
    b4b6:	7a5b      	ldrb	r3, [r3, #9]
    b4b8:	f083 0301 	eor.w	r3, r3, #1
    b4bc:	b2db      	uxtb	r3, r3
    b4be:	2b00      	cmp	r3, #0
    b4c0:	d006      	beq.n	b4d0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b4c2:	9b01      	ldr	r3, [sp, #4]
    b4c4:	789b      	ldrb	r3, [r3, #2]
    b4c6:	2201      	movs	r2, #1
    b4c8:	2104      	movs	r1, #4
    b4ca:	4618      	mov	r0, r3
    b4cc:	f002 fdfe 	bl	e0cc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    b4d0:	9b01      	ldr	r3, [sp, #4]
    b4d2:	785b      	ldrb	r3, [r3, #1]
    b4d4:	461a      	mov	r2, r3
    b4d6:	4b03      	ldr	r3, [pc, #12]	; (b4e4 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b4d8:	2101      	movs	r1, #1
    b4da:	5499      	strb	r1, [r3, r2]
    }
}
    b4dc:	bf00      	nop
    b4de:	b003      	add	sp, #12
    b4e0:	f85d fb04 	ldr.w	pc, [sp], #4
    b4e4:	1fff9358 	.word	0x1fff9358

0000b4e8 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b4e8:	b500      	push	{lr}
    b4ea:	b085      	sub	sp, #20
    b4ec:	9001      	str	r0, [sp, #4]
    b4ee:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    b4f0:	2300      	movs	r3, #0
    b4f2:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    b4f4:	9b01      	ldr	r3, [sp, #4]
    b4f6:	789b      	ldrb	r3, [r3, #2]
    b4f8:	4618      	mov	r0, r3
    b4fa:	f001 fe81 	bl	d200 <FlexCAN_Ip_GetErrorStatus>
    b4fe:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    b500:	9b03      	ldr	r3, [sp, #12]
    b502:	091b      	lsrs	r3, r3, #4
    b504:	b2db      	uxtb	r3, r3
    b506:	f003 0303 	and.w	r3, r3, #3
    b50a:	b2da      	uxtb	r2, r3
    b50c:	9b00      	ldr	r3, [sp, #0]
    b50e:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b510:	2300      	movs	r3, #0
}
    b512:	4618      	mov	r0, r3
    b514:	b005      	add	sp, #20
    b516:	f85d fb04 	ldr.w	pc, [sp], #4

0000b51a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b51a:	b500      	push	{lr}
    b51c:	b083      	sub	sp, #12
    b51e:	9001      	str	r0, [sp, #4]
    b520:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b522:	9b01      	ldr	r3, [sp, #4]
    b524:	789b      	ldrb	r3, [r3, #2]
    b526:	4618      	mov	r0, r3
    b528:	f001 fe7c 	bl	d224 <FlexCAN_Ip_GetControllerTxErrorCounter>
    b52c:	4603      	mov	r3, r0
    b52e:	461a      	mov	r2, r3
    b530:	9b00      	ldr	r3, [sp, #0]
    b532:	701a      	strb	r2, [r3, #0]
     return E_OK;
    b534:	2300      	movs	r3, #0
}
    b536:	4618      	mov	r0, r3
    b538:	b003      	add	sp, #12
    b53a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b53e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b53e:	b500      	push	{lr}
    b540:	b083      	sub	sp, #12
    b542:	9001      	str	r0, [sp, #4]
    b544:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b546:	9b01      	ldr	r3, [sp, #4]
    b548:	789b      	ldrb	r3, [r3, #2]
    b54a:	4618      	mov	r0, r3
    b54c:	f001 fe7c 	bl	d248 <FlexCAN_Ip_GetControllerRxErrorCounter>
    b550:	4603      	mov	r3, r0
    b552:	461a      	mov	r2, r3
    b554:	9b00      	ldr	r3, [sp, #0]
    b556:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b558:	2300      	movs	r3, #0
}
    b55a:	4618      	mov	r0, r3
    b55c:	b003      	add	sp, #12
    b55e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b562 <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    b562:	b510      	push	{r4, lr}
    b564:	b08c      	sub	sp, #48	; 0x30
    b566:	9005      	str	r0, [sp, #20]
    b568:	9104      	str	r1, [sp, #16]
    b56a:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    b56c:	2301      	movs	r3, #1
    b56e:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    b570:	2300      	movs	r3, #0
    b572:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b576:	2300      	movs	r3, #0
    b578:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    b57a:	2300      	movs	r3, #0
    b57c:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    b57e:	2300      	movs	r3, #0
    b580:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    b584:	2300      	movs	r3, #0
    b586:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    b58a:	2300      	movs	r3, #0
    b58c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    b590:	2300      	movs	r3, #0
    b592:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    b596:	2300      	movs	r3, #0
    b598:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    b59c:	9b04      	ldr	r3, [sp, #16]
    b59e:	699b      	ldr	r3, [r3, #24]
    b5a0:	2b03      	cmp	r3, #3
    b5a2:	d173      	bne.n	b68c <Can_43_FLEXCAN_Ipw_Write+0x12a>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    b5a4:	9b03      	ldr	r3, [sp, #12]
    b5a6:	681b      	ldr	r3, [r3, #0]
    b5a8:	0fdb      	lsrs	r3, r3, #31
    b5aa:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    b5ac:	9b04      	ldr	r3, [sp, #16]
    b5ae:	7c1a      	ldrb	r2, [r3, #16]
    b5b0:	9b03      	ldr	r3, [sp, #12]
    b5b2:	799b      	ldrb	r3, [r3, #6]
    b5b4:	429a      	cmp	r2, r3
    b5b6:	d803      	bhi.n	b5c0 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    b5b8:	9b04      	ldr	r3, [sp, #16]
    b5ba:	7c1b      	ldrb	r3, [r3, #16]
    b5bc:	9307      	str	r3, [sp, #28]
    b5be:	e002      	b.n	b5c6 <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    b5c0:	9b03      	ldr	r3, [sp, #12]
    b5c2:	799b      	ldrb	r3, [r3, #6]
    b5c4:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    b5c6:	9b04      	ldr	r3, [sp, #16]
    b5c8:	7c5b      	ldrb	r3, [r3, #17]
    b5ca:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    b5ce:	9b03      	ldr	r3, [sp, #12]
    b5d0:	681b      	ldr	r3, [r3, #0]
    b5d2:	0f9b      	lsrs	r3, r3, #30
    b5d4:	f003 0301 	and.w	r3, r3, #1
    b5d8:	2b00      	cmp	r3, #0
    b5da:	bf14      	ite	ne
    b5dc:	2301      	movne	r3, #1
    b5de:	2300      	moveq	r3, #0
    b5e0:	b2db      	uxtb	r3, r3
    b5e2:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    b5e6:	9b05      	ldr	r3, [sp, #20]
    b5e8:	6a1a      	ldr	r2, [r3, #32]
    b5ea:	9b05      	ldr	r3, [sp, #20]
    b5ec:	8b9b      	ldrh	r3, [r3, #28]
    b5ee:	4619      	mov	r1, r3
    b5f0:	2316      	movs	r3, #22
    b5f2:	fb01 f303 	mul.w	r3, r1, r3
    b5f6:	4413      	add	r3, r2
    b5f8:	781b      	ldrb	r3, [r3, #0]
    b5fa:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #endif
#endif
        DataInfo.is_remote = FALSE;
    b5fe:	2300      	movs	r3, #0
    b600:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    b604:	9b04      	ldr	r3, [sp, #16]
    b606:	7b1b      	ldrb	r3, [r3, #12]
    b608:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    b60c:	9b05      	ldr	r3, [sp, #20]
    b60e:	7898      	ldrb	r0, [r3, #2]
    b610:	9b04      	ldr	r3, [sp, #16]
    b612:	7f1a      	ldrb	r2, [r3, #28]
    b614:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b618:	4413      	add	r3, r2
    b61a:	b2db      	uxtb	r3, r3
    b61c:	4619      	mov	r1, r3
    b61e:	f001 fcdd 	bl	cfdc <FlexCAN_Ip_GetTransferStatus>
    b622:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b626:	2b00      	cmp	r3, #0
    b628:	d122      	bne.n	b670 <Can_43_FLEXCAN_Ipw_Write+0x10e>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    b62a:	9b05      	ldr	r3, [sp, #20]
    b62c:	785b      	ldrb	r3, [r3, #1]
    b62e:	461c      	mov	r4, r3
    b630:	9b04      	ldr	r3, [sp, #16]
    b632:	7f1b      	ldrb	r3, [r3, #28]
    b634:	461a      	mov	r2, r3
    b636:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b63a:	4413      	add	r3, r2
    b63c:	9a03      	ldr	r2, [sp, #12]
    b63e:	8890      	ldrh	r0, [r2, #4]
    b640:	491b      	ldr	r1, [pc, #108]	; (b6b0 <Can_43_FLEXCAN_Ipw_Write+0x14e>)
    b642:	0162      	lsls	r2, r4, #5
    b644:	4413      	add	r3, r2
    b646:	4602      	mov	r2, r0
    b648:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    b64c:	9b05      	ldr	r3, [sp, #20]
    b64e:	7898      	ldrb	r0, [r3, #2]
    b650:	9b04      	ldr	r3, [sp, #16]
    b652:	7f1a      	ldrb	r2, [r3, #28]
    b654:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b658:	4413      	add	r3, r2
    b65a:	b2d9      	uxtb	r1, r3
    b65c:	9b03      	ldr	r3, [sp, #12]
    b65e:	681c      	ldr	r4, [r3, #0]
    b660:	9b03      	ldr	r3, [sp, #12]
    b662:	689b      	ldr	r3, [r3, #8]
    b664:	aa06      	add	r2, sp, #24
    b666:	9300      	str	r3, [sp, #0]
    b668:	4623      	mov	r3, r4
    b66a:	f001 fa4b 	bl	cb04 <FlexCAN_Ip_Send>
    b66e:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    b670:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b674:	3301      	adds	r3, #1
    b676:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    b67a:	9b04      	ldr	r3, [sp, #16]
    b67c:	7b9b      	ldrb	r3, [r3, #14]
    b67e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    b682:	429a      	cmp	r2, r3
    b684:	d202      	bcs.n	b68c <Can_43_FLEXCAN_Ipw_Write+0x12a>
    b686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b688:	2b02      	cmp	r3, #2
    b68a:	d0bf      	beq.n	b60c <Can_43_FLEXCAN_Ipw_Write+0xaa>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    b68c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b68e:	2b00      	cmp	r3, #0
    b690:	d004      	beq.n	b69c <Can_43_FLEXCAN_Ipw_Write+0x13a>
    b692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b694:	2b02      	cmp	r3, #2
    b696:	d001      	beq.n	b69c <Can_43_FLEXCAN_Ipw_Write+0x13a>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    b698:	2301      	movs	r3, #1
    b69a:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    b69c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b69e:	2b02      	cmp	r3, #2
    b6a0:	d002      	beq.n	b6a8 <Can_43_FLEXCAN_Ipw_Write+0x146>
    b6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6a4:	b2db      	uxtb	r3, r3
    b6a6:	e000      	b.n	b6aa <Can_43_FLEXCAN_Ipw_Write+0x148>
    b6a8:	2302      	movs	r3, #2
}
    b6aa:	4618      	mov	r0, r3
    b6ac:	b00c      	add	sp, #48	; 0x30
    b6ae:	bd10      	pop	{r4, pc}
    b6b0:	1fff9258 	.word	0x1fff9258

0000b6b4 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    b6b4:	b500      	push	{lr}
    b6b6:	b089      	sub	sp, #36	; 0x24
    b6b8:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    b6ba:	2300      	movs	r3, #0
    b6bc:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    b6c0:	9b01      	ldr	r3, [sp, #4]
    b6c2:	789b      	ldrb	r3, [r3, #2]
    b6c4:	2101      	movs	r1, #1
    b6c6:	4618      	mov	r0, r3
    b6c8:	f002 fa42 	bl	db50 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b6cc:	2300      	movs	r3, #0
    b6ce:	f88d 301f 	strb.w	r3, [sp, #31]
    b6d2:	e03a      	b.n	b74a <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    b6d4:	9b01      	ldr	r3, [sp, #4]
    b6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b6d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b6dc:	009b      	lsls	r3, r3, #2
    b6de:	4413      	add	r3, r2
    b6e0:	681b      	ldr	r3, [r3, #0]
    b6e2:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b6e4:	9b06      	ldr	r3, [sp, #24]
    b6e6:	699b      	ldr	r3, [r3, #24]
    b6e8:	2b00      	cmp	r3, #0
    b6ea:	d121      	bne.n	b730 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    b6ec:	2300      	movs	r3, #0
    b6ee:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    b6f2:	2300      	movs	r3, #0
    b6f4:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    b6f6:	9b06      	ldr	r3, [sp, #24]
    b6f8:	689b      	ldr	r3, [r3, #8]
    b6fa:	2b00      	cmp	r3, #0
    b6fc:	d002      	beq.n	b704 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    b6fe:	2301      	movs	r3, #1
    b700:	9302      	str	r3, [sp, #8]
    b702:	e001      	b.n	b708 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b704:	2300      	movs	r3, #0
    b706:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    b708:	9b01      	ldr	r3, [sp, #4]
    b70a:	7898      	ldrb	r0, [r3, #2]
    b70c:	9b06      	ldr	r3, [sp, #24]
    b70e:	7f19      	ldrb	r1, [r3, #28]
    b710:	9b06      	ldr	r3, [sp, #24]
    b712:	695b      	ldr	r3, [r3, #20]
    b714:	681b      	ldr	r3, [r3, #0]
    b716:	aa02      	add	r2, sp, #8
    b718:	f001 fa40 	bl	cb9c <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    b71c:	9b01      	ldr	r3, [sp, #4]
    b71e:	7898      	ldrb	r0, [r3, #2]
    b720:	9b06      	ldr	r3, [sp, #24]
    b722:	7f19      	ldrb	r1, [r3, #28]
    b724:	9b06      	ldr	r3, [sp, #24]
    b726:	695b      	ldr	r3, [r3, #20]
    b728:	685b      	ldr	r3, [r3, #4]
    b72a:	461a      	mov	r2, r3
    b72c:	f001 ffc8 	bl	d6c0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    b730:	9b06      	ldr	r3, [sp, #24]
    b732:	699b      	ldr	r3, [r3, #24]
    b734:	2b01      	cmp	r3, #1
    b736:	d103      	bne.n	b740 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    b738:	9906      	ldr	r1, [sp, #24]
    b73a:	9801      	ldr	r0, [sp, #4]
    b73c:	f7ff f8ff 	bl	a93e <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b740:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b744:	3301      	adds	r3, #1
    b746:	f88d 301f 	strb.w	r3, [sp, #31]
    b74a:	9b01      	ldr	r3, [sp, #4]
    b74c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b750:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b754:	429a      	cmp	r2, r3
    b756:	d3bd      	bcc.n	b6d4 <Can_Ipw_InitRx+0x20>
        }
    }
}
    b758:	bf00      	nop
    b75a:	bf00      	nop
    b75c:	b009      	add	sp, #36	; 0x24
    b75e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b762 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    b762:	b500      	push	{lr}
    b764:	b083      	sub	sp, #12
    b766:	9001      	str	r0, [sp, #4]
    b768:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    b76a:	9b00      	ldr	r3, [sp, #0]
    b76c:	681b      	ldr	r3, [r3, #0]
    b76e:	2b01      	cmp	r3, #1
    b770:	d114      	bne.n	b79c <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b772:	9b01      	ldr	r3, [sp, #4]
    b774:	789b      	ldrb	r3, [r3, #2]
    b776:	4618      	mov	r0, r3
    b778:	f002 f994 	bl	daa4 <FlexCAN_Ip_GetStartMode_Privileged>
    b77c:	4603      	mov	r3, r0
    b77e:	f083 0301 	eor.w	r3, r3, #1
    b782:	b2db      	uxtb	r3, r3
    b784:	2b00      	cmp	r3, #0
    b786:	d01e      	beq.n	b7c6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    b788:	9b00      	ldr	r3, [sp, #0]
    b78a:	2202      	movs	r2, #2
    b78c:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    b78e:	9b01      	ldr	r3, [sp, #4]
    b790:	781b      	ldrb	r3, [r3, #0]
    b792:	2102      	movs	r1, #2
    b794:	4618      	mov	r0, r3
    b796:	f00b fc61 	bl	1705c <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    b79a:	e014      	b.n	b7c6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    b79c:	9b00      	ldr	r3, [sp, #0]
    b79e:	681b      	ldr	r3, [r3, #0]
    b7a0:	2b02      	cmp	r3, #2
    b7a2:	d110      	bne.n	b7c6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b7a4:	9b01      	ldr	r3, [sp, #4]
    b7a6:	789b      	ldrb	r3, [r3, #2]
    b7a8:	4618      	mov	r0, r3
    b7aa:	f002 f97b 	bl	daa4 <FlexCAN_Ip_GetStartMode_Privileged>
    b7ae:	4603      	mov	r3, r0
    b7b0:	2b00      	cmp	r3, #0
    b7b2:	d008      	beq.n	b7c6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    b7b4:	9b00      	ldr	r3, [sp, #0]
    b7b6:	2201      	movs	r2, #1
    b7b8:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    b7ba:	9b01      	ldr	r3, [sp, #4]
    b7bc:	781b      	ldrb	r3, [r3, #0]
    b7be:	2101      	movs	r1, #1
    b7c0:	4618      	mov	r0, r3
    b7c2:	f00b fc4b 	bl	1705c <CanIf_ControllerModeIndication>
}
    b7c6:	bf00      	nop
    b7c8:	b003      	add	sp, #12
    b7ca:	f85d fb04 	ldr.w	pc, [sp], #4

0000b7ce <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    b7ce:	b500      	push	{lr}
    b7d0:	b085      	sub	sp, #20
    b7d2:	9003      	str	r0, [sp, #12]
    b7d4:	9102      	str	r1, [sp, #8]
    b7d6:	9300      	str	r3, [sp, #0]
    b7d8:	4613      	mov	r3, r2
    b7da:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    b7de:	9b00      	ldr	r3, [sp, #0]
    b7e0:	2b03      	cmp	r3, #3
    b7e2:	d009      	beq.n	b7f8 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    b7e4:	9b00      	ldr	r3, [sp, #0]
    b7e6:	2b03      	cmp	r3, #3
    b7e8:	d821      	bhi.n	b82e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    b7ea:	9b00      	ldr	r3, [sp, #0]
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	d00c      	beq.n	b80a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    b7f0:	9b00      	ldr	r3, [sp, #0]
    b7f2:	2b01      	cmp	r3, #1
    b7f4:	d012      	beq.n	b81c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    b7f6:	e01a      	b.n	b82e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b7f8:	9b02      	ldr	r3, [sp, #8]
    b7fa:	691b      	ldr	r3, [r3, #16]
    b7fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b800:	4619      	mov	r1, r3
    b802:	9803      	ldr	r0, [sp, #12]
    b804:	f7ff faf8 	bl	adf8 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    b808:	e012      	b.n	b830 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b80a:	9b02      	ldr	r3, [sp, #8]
    b80c:	691b      	ldr	r3, [r3, #16]
    b80e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b812:	4619      	mov	r1, r3
    b814:	9803      	ldr	r0, [sp, #12]
    b816:	f7ff fb3b 	bl	ae90 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b81a:	e009      	b.n	b830 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b81c:	9b02      	ldr	r3, [sp, #8]
    b81e:	691b      	ldr	r3, [r3, #16]
    b820:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b824:	4619      	mov	r1, r3
    b826:	9803      	ldr	r0, [sp, #12]
    b828:	f7ff fb32 	bl	ae90 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b82c:	e000      	b.n	b830 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    b82e:	bf00      	nop
            }
        }
    }
    b830:	bf00      	nop
    b832:	b005      	add	sp, #20
    b834:	f85d fb04 	ldr.w	pc, [sp], #4

0000b838 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    b838:	b500      	push	{lr}
    b83a:	b085      	sub	sp, #20
    b83c:	9102      	str	r1, [sp, #8]
    b83e:	9201      	str	r2, [sp, #4]
    b840:	9300      	str	r3, [sp, #0]
    b842:	4603      	mov	r3, r0
    b844:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    b848:	9a00      	ldr	r2, [sp, #0]
    b84a:	9b01      	ldr	r3, [sp, #4]
    b84c:	011b      	lsls	r3, r3, #4
    b84e:	4413      	add	r3, r2
    b850:	3308      	adds	r3, #8
    b852:	781b      	ldrb	r3, [r3, #0]
    b854:	f083 0301 	eor.w	r3, r3, #1
    b858:	b2db      	uxtb	r3, r3
    b85a:	2b00      	cmp	r3, #0
    b85c:	d03b      	beq.n	b8d6 <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    b85e:	9b02      	ldr	r3, [sp, #8]
    b860:	2b04      	cmp	r3, #4
    b862:	d83a      	bhi.n	b8da <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    b864:	a201      	add	r2, pc, #4	; (adr r2, b86c <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    b866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b86a:	bf00      	nop
    b86c:	0000b893 	.word	0x0000b893
    b870:	0000b8a5 	.word	0x0000b8a5
    b874:	0000b8b7 	.word	0x0000b8b7
    b878:	0000b8c7 	.word	0x0000b8c7
    b87c:	0000b881 	.word	0x0000b881
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    b880:	9b01      	ldr	r3, [sp, #4]
    b882:	b2d9      	uxtb	r1, r3
    b884:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b888:	2203      	movs	r2, #3
    b88a:	4618      	mov	r0, r3
    b88c:	f7fe ff72 	bl	a774 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b890:	e024      	b.n	b8dc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    b892:	9b01      	ldr	r3, [sp, #4]
    b894:	b2d9      	uxtb	r1, r3
    b896:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b89a:	2200      	movs	r2, #0
    b89c:	4618      	mov	r0, r3
    b89e:	f7fe ff69 	bl	a774 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b8a2:	e01b      	b.n	b8dc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    b8a4:	9b01      	ldr	r3, [sp, #4]
    b8a6:	b2d9      	uxtb	r1, r3
    b8a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8ac:	2201      	movs	r2, #1
    b8ae:	4618      	mov	r0, r3
    b8b0:	f7fe ff60 	bl	a774 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b8b4:	e012      	b.n	b8dc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    b8b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8ba:	2201      	movs	r2, #1
    b8bc:	2106      	movs	r1, #6
    b8be:	4618      	mov	r0, r3
    b8c0:	f7fe ff58 	bl	a774 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b8c4:	e00a      	b.n	b8dc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    b8c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8ca:	2201      	movs	r2, #1
    b8cc:	2107      	movs	r1, #7
    b8ce:	4618      	mov	r0, r3
    b8d0:	f7fe ff50 	bl	a774 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b8d4:	e002      	b.n	b8dc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    b8d6:	bf00      	nop
    b8d8:	e000      	b.n	b8dc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    b8da:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    b8dc:	bf00      	nop
    b8de:	b005      	add	sp, #20
    b8e0:	f85d fb04 	ldr.w	pc, [sp], #4

0000b8e4 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    b8e4:	b500      	push	{lr}
    b8e6:	b085      	sub	sp, #20
    b8e8:	9102      	str	r1, [sp, #8]
    b8ea:	9201      	str	r2, [sp, #4]
    b8ec:	9300      	str	r3, [sp, #0]
    b8ee:	4603      	mov	r3, r0
    b8f0:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    b8f4:	9b02      	ldr	r3, [sp, #8]
    b8f6:	2b07      	cmp	r3, #7
    b8f8:	d105      	bne.n	b906 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    b8fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8fe:	4618      	mov	r0, r3
    b900:	f7fe ff7a 	bl	a7f8 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    b904:	e000      	b.n	b908 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    b906:	bf00      	nop
        }
    }
}
    b908:	bf00      	nop
    b90a:	b005      	add	sp, #20
    b90c:	f85d fb04 	ldr.w	pc, [sp], #4

0000b910 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    b910:	b082      	sub	sp, #8
    b912:	9001      	str	r0, [sp, #4]
    b914:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    b916:	9b01      	ldr	r3, [sp, #4]
    b918:	9a00      	ldr	r2, [sp, #0]
    b91a:	649a      	str	r2, [r3, #72]	; 0x48
}
    b91c:	bf00      	nop
    b91e:	b002      	add	sp, #8
    b920:	4770      	bx	lr

0000b922 <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    b922:	b084      	sub	sp, #16
    b924:	9001      	str	r0, [sp, #4]
    b926:	460b      	mov	r3, r1
    b928:	f88d 3003 	strb.w	r3, [sp, #3]
    b92c:	4613      	mov	r3, r2
    b92e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    b932:	9b01      	ldr	r3, [sp, #4]
    b934:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b938:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    b93a:	9b03      	ldr	r3, [sp, #12]
    b93c:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    b940:	9303      	str	r3, [sp, #12]

    if (enable)
    b942:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b946:	2b00      	cmp	r3, #0
    b948:	d00b      	beq.n	b962 <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    b94a:	9b03      	ldr	r3, [sp, #12]
    b94c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b950:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    b952:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b956:	021b      	lsls	r3, r3, #8
    b958:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    b95c:	9a03      	ldr	r2, [sp, #12]
    b95e:	4313      	orrs	r3, r2
    b960:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    b962:	9b01      	ldr	r3, [sp, #4]
    b964:	9a03      	ldr	r2, [sp, #12]
    b966:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    b96a:	bf00      	nop
    b96c:	b004      	add	sp, #16
    b96e:	4770      	bx	lr

0000b970 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    b970:	b082      	sub	sp, #8
    b972:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    b974:	9b01      	ldr	r3, [sp, #4]
    b976:	681b      	ldr	r3, [r3, #0]
    b978:	43db      	mvns	r3, r3
    b97a:	0fdb      	lsrs	r3, r3, #31
    b97c:	b2db      	uxtb	r3, r3
}
    b97e:	4618      	mov	r0, r3
    b980:	b002      	add	sp, #8
    b982:	4770      	bx	lr

0000b984 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    b984:	b082      	sub	sp, #8
    b986:	9001      	str	r0, [sp, #4]
    b988:	460b      	mov	r3, r1
    b98a:	f88d 3003 	strb.w	r3, [sp, #3]
    b98e:	4613      	mov	r3, r2
    b990:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    b994:	9b01      	ldr	r3, [sp, #4]
    b996:	681b      	ldr	r3, [r3, #0]
    b998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b99c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b9a0:	2a00      	cmp	r2, #0
    b9a2:	d002      	beq.n	b9aa <FlexCAN_SetFDEnabled+0x26>
    b9a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b9a8:	e000      	b.n	b9ac <FlexCAN_SetFDEnabled+0x28>
    b9aa:	2200      	movs	r2, #0
    b9ac:	431a      	orrs	r2, r3
    b9ae:	9b01      	ldr	r3, [sp, #4]
    b9b0:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    b9b2:	9b01      	ldr	r3, [sp, #4]
    b9b4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b9b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b9bc:	f89d 2002 	ldrb.w	r2, [sp, #2]
    b9c0:	2a00      	cmp	r2, #0
    b9c2:	d002      	beq.n	b9ca <FlexCAN_SetFDEnabled+0x46>
    b9c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b9c8:	e000      	b.n	b9cc <FlexCAN_SetFDEnabled+0x48>
    b9ca:	2200      	movs	r2, #0
    b9cc:	431a      	orrs	r2, r3
    b9ce:	9b01      	ldr	r3, [sp, #4]
    b9d0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    b9d4:	9b01      	ldr	r3, [sp, #4]
    b9d6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b9da:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    b9de:	9b01      	ldr	r3, [sp, #4]
    b9e0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    b9e4:	bf00      	nop
    b9e6:	b002      	add	sp, #8
    b9e8:	4770      	bx	lr

0000b9ea <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    b9ea:	b082      	sub	sp, #8
    b9ec:	9001      	str	r0, [sp, #4]
    b9ee:	460b      	mov	r3, r1
    b9f0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    b9f4:	9b01      	ldr	r3, [sp, #4]
    b9f6:	685b      	ldr	r3, [r3, #4]
    b9f8:	f023 0308 	bic.w	r3, r3, #8
    b9fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba00:	2a00      	cmp	r2, #0
    ba02:	d001      	beq.n	ba08 <FlexCAN_SetListenOnlyMode+0x1e>
    ba04:	2208      	movs	r2, #8
    ba06:	e000      	b.n	ba0a <FlexCAN_SetListenOnlyMode+0x20>
    ba08:	2200      	movs	r2, #0
    ba0a:	431a      	orrs	r2, r3
    ba0c:	9b01      	ldr	r3, [sp, #4]
    ba0e:	605a      	str	r2, [r3, #4]
}
    ba10:	bf00      	nop
    ba12:	b002      	add	sp, #8
    ba14:	4770      	bx	lr

0000ba16 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    ba16:	b082      	sub	sp, #8
    ba18:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    ba1a:	9b01      	ldr	r3, [sp, #4]
    ba1c:	689b      	ldr	r3, [r3, #8]
}
    ba1e:	bf00      	nop
    ba20:	b002      	add	sp, #8
    ba22:	4770      	bx	lr

0000ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    ba24:	b084      	sub	sp, #16
    ba26:	9001      	str	r0, [sp, #4]
    ba28:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    ba2a:	9b00      	ldr	r3, [sp, #0]
    ba2c:	f003 031f 	and.w	r3, r3, #31
    ba30:	2201      	movs	r2, #1
    ba32:	fa02 f303 	lsl.w	r3, r2, r3
    ba36:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    ba38:	9b00      	ldr	r3, [sp, #0]
    ba3a:	2b1f      	cmp	r3, #31
    ba3c:	d802      	bhi.n	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    ba3e:	9b01      	ldr	r3, [sp, #4]
    ba40:	9a03      	ldr	r2, [sp, #12]
    ba42:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    ba44:	bf00      	nop
    ba46:	b004      	add	sp, #16
    ba48:	4770      	bx	lr

0000ba4a <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    ba4a:	b084      	sub	sp, #16
    ba4c:	9001      	str	r0, [sp, #4]
    ba4e:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    ba50:	2300      	movs	r3, #0
    ba52:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    ba54:	9b00      	ldr	r3, [sp, #0]
    ba56:	2b1f      	cmp	r3, #31
    ba58:	d80e      	bhi.n	ba78 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    ba5a:	9b01      	ldr	r3, [sp, #4]
    ba5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ba5e:	9b00      	ldr	r3, [sp, #0]
    ba60:	f003 031f 	and.w	r3, r3, #31
    ba64:	2101      	movs	r1, #1
    ba66:	fa01 f303 	lsl.w	r3, r1, r3
    ba6a:	401a      	ands	r2, r3
    ba6c:	9b00      	ldr	r3, [sp, #0]
    ba6e:	f003 031f 	and.w	r3, r3, #31
    ba72:	fa22 f303 	lsr.w	r3, r2, r3
    ba76:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    ba78:	9b03      	ldr	r3, [sp, #12]
    ba7a:	b2db      	uxtb	r3, r3
}
    ba7c:	4618      	mov	r0, r3
    ba7e:	b004      	add	sp, #16
    ba80:	4770      	bx	lr

0000ba82 <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    ba82:	b082      	sub	sp, #8
    ba84:	9001      	str	r0, [sp, #4]
    ba86:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    ba88:	9b01      	ldr	r3, [sp, #4]
    ba8a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    ba8e:	4b15      	ldr	r3, [pc, #84]	; (bae4 <FlexCAN_SetFDTimeSegments+0x62>)
    ba90:	4013      	ands	r3, r2
    ba92:	9a01      	ldr	r2, [sp, #4]
    ba94:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    ba98:	9b01      	ldr	r3, [sp, #4]
    ba9a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    ba9e:	9b00      	ldr	r3, [sp, #0]
    baa0:	681b      	ldr	r3, [r3, #0]
    baa2:	029b      	lsls	r3, r3, #10
    baa4:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    baa8:	9b00      	ldr	r3, [sp, #0]
    baaa:	689b      	ldr	r3, [r3, #8]
    baac:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bab0:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    bab2:	9b00      	ldr	r3, [sp, #0]
    bab4:	685b      	ldr	r3, [r3, #4]
    bab6:	015b      	lsls	r3, r3, #5
    bab8:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    baba:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    babc:	9b00      	ldr	r3, [sp, #0]
    babe:	68db      	ldr	r3, [r3, #12]
    bac0:	0518      	lsls	r0, r3, #20
    bac2:	4b09      	ldr	r3, [pc, #36]	; (bae8 <FlexCAN_SetFDTimeSegments+0x66>)
    bac4:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    bac6:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    bac8:	9b00      	ldr	r3, [sp, #0]
    baca:	691b      	ldr	r3, [r3, #16]
    bacc:	041b      	lsls	r3, r3, #16
    bace:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    bad2:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bad4:	431a      	orrs	r2, r3
    bad6:	9b01      	ldr	r3, [sp, #4]
    bad8:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    badc:	bf00      	nop
    bade:	b002      	add	sp, #8
    bae0:	4770      	bx	lr
    bae2:	bf00      	nop
    bae4:	c0088318 	.word	0xc0088318
    bae8:	3ff00000 	.word	0x3ff00000

0000baec <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    baec:	b082      	sub	sp, #8
    baee:	9001      	str	r0, [sp, #4]
    baf0:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    baf2:	9b01      	ldr	r3, [sp, #4]
    baf4:	685a      	ldr	r2, [r3, #4]
    baf6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    bafa:	4013      	ands	r3, r2
    bafc:	9a01      	ldr	r2, [sp, #4]
    bafe:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bb00:	9b01      	ldr	r3, [sp, #4]
    bb02:	685a      	ldr	r2, [r3, #4]
    bb04:	9b00      	ldr	r3, [sp, #0]
    bb06:	681b      	ldr	r3, [r3, #0]
    bb08:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bb0c:	9b00      	ldr	r3, [sp, #0]
    bb0e:	689b      	ldr	r3, [r3, #8]
    bb10:	041b      	lsls	r3, r3, #16
    bb12:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bb16:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bb18:	9b00      	ldr	r3, [sp, #0]
    bb1a:	685b      	ldr	r3, [r3, #4]
    bb1c:	04db      	lsls	r3, r3, #19
    bb1e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bb22:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    bb24:	9b00      	ldr	r3, [sp, #0]
    bb26:	68db      	ldr	r3, [r3, #12]
    bb28:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bb2a:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    bb2c:	9b00      	ldr	r3, [sp, #0]
    bb2e:	691b      	ldr	r3, [r3, #16]
    bb30:	059b      	lsls	r3, r3, #22
    bb32:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    bb36:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bb38:	431a      	orrs	r2, r3
    bb3a:	9b01      	ldr	r3, [sp, #4]
    bb3c:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    bb3e:	bf00      	nop
    bb40:	b002      	add	sp, #8
    bb42:	4770      	bx	lr

0000bb44 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bb44:	b082      	sub	sp, #8
    bb46:	9001      	str	r0, [sp, #4]
    bb48:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    bb4a:	9b01      	ldr	r3, [sp, #4]
    bb4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bb4e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    bb52:	9b01      	ldr	r3, [sp, #4]
    bb54:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bb56:	9b01      	ldr	r3, [sp, #4]
    bb58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    bb5a:	9b00      	ldr	r3, [sp, #0]
    bb5c:	681b      	ldr	r3, [r3, #0]
    bb5e:	029b      	lsls	r3, r3, #10
    bb60:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bb62:	9b00      	ldr	r3, [sp, #0]
    bb64:	689b      	ldr	r3, [r3, #8]
    bb66:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bb6a:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bb6c:	9b00      	ldr	r3, [sp, #0]
    bb6e:	685b      	ldr	r3, [r3, #4]
    bb70:	015b      	lsls	r3, r3, #5
    bb72:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bb76:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bb78:	9b00      	ldr	r3, [sp, #0]
    bb7a:	68db      	ldr	r3, [r3, #12]
    bb7c:	0558      	lsls	r0, r3, #21
    bb7e:	4b07      	ldr	r3, [pc, #28]	; (bb9c <FlexCAN_SetExtendedTimeSegments+0x58>)
    bb80:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bb82:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    bb84:	9b00      	ldr	r3, [sp, #0]
    bb86:	691b      	ldr	r3, [r3, #16]
    bb88:	041b      	lsls	r3, r3, #16
    bb8a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bb8e:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bb90:	431a      	orrs	r2, r3
    bb92:	9b01      	ldr	r3, [sp, #4]
    bb94:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    bb96:	bf00      	nop
    bb98:	b002      	add	sp, #8
    bb9a:	4770      	bx	lr
    bb9c:	7fe00000 	.word	0x7fe00000

0000bba0 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bba0:	b082      	sub	sp, #8
    bba2:	9001      	str	r0, [sp, #4]
    bba4:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    bba6:	9b01      	ldr	r3, [sp, #4]
    bba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bbaa:	0d5b      	lsrs	r3, r3, #21
    bbac:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bbb0:	9b00      	ldr	r3, [sp, #0]
    bbb2:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    bbb4:	9b01      	ldr	r3, [sp, #4]
    bbb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bbb8:	0a9b      	lsrs	r3, r3, #10
    bbba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    bbbe:	9b00      	ldr	r3, [sp, #0]
    bbc0:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    bbc2:	9b01      	ldr	r3, [sp, #4]
    bbc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bbc6:	095b      	lsrs	r3, r3, #5
    bbc8:	f003 021f 	and.w	r2, r3, #31
    bbcc:	9b00      	ldr	r3, [sp, #0]
    bbce:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    bbd0:	9b01      	ldr	r3, [sp, #4]
    bbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bbd4:	f003 021f 	and.w	r2, r3, #31
    bbd8:	9b00      	ldr	r3, [sp, #0]
    bbda:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    bbdc:	9b01      	ldr	r3, [sp, #4]
    bbde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bbe0:	0c1b      	lsrs	r3, r3, #16
    bbe2:	f003 021f 	and.w	r2, r3, #31
    bbe6:	9b00      	ldr	r3, [sp, #0]
    bbe8:	611a      	str	r2, [r3, #16]
}
    bbea:	bf00      	nop
    bbec:	b002      	add	sp, #8
    bbee:	4770      	bx	lr

0000bbf0 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bbf0:	b082      	sub	sp, #8
    bbf2:	9001      	str	r0, [sp, #4]
    bbf4:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    bbf6:	9b01      	ldr	r3, [sp, #4]
    bbf8:	685b      	ldr	r3, [r3, #4]
    bbfa:	0e1b      	lsrs	r3, r3, #24
    bbfc:	b2da      	uxtb	r2, r3
    bbfe:	9b00      	ldr	r3, [sp, #0]
    bc00:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    bc02:	9b01      	ldr	r3, [sp, #4]
    bc04:	685b      	ldr	r3, [r3, #4]
    bc06:	f003 0207 	and.w	r2, r3, #7
    bc0a:	9b00      	ldr	r3, [sp, #0]
    bc0c:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    bc0e:	9b01      	ldr	r3, [sp, #4]
    bc10:	685b      	ldr	r3, [r3, #4]
    bc12:	0cdb      	lsrs	r3, r3, #19
    bc14:	f003 0207 	and.w	r2, r3, #7
    bc18:	9b00      	ldr	r3, [sp, #0]
    bc1a:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    bc1c:	9b01      	ldr	r3, [sp, #4]
    bc1e:	685b      	ldr	r3, [r3, #4]
    bc20:	0c1b      	lsrs	r3, r3, #16
    bc22:	f003 0207 	and.w	r2, r3, #7
    bc26:	9b00      	ldr	r3, [sp, #0]
    bc28:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    bc2a:	9b01      	ldr	r3, [sp, #4]
    bc2c:	685b      	ldr	r3, [r3, #4]
    bc2e:	0d9b      	lsrs	r3, r3, #22
    bc30:	f003 0203 	and.w	r2, r3, #3
    bc34:	9b00      	ldr	r3, [sp, #0]
    bc36:	611a      	str	r2, [r3, #16]
}
    bc38:	bf00      	nop
    bc3a:	b002      	add	sp, #8
    bc3c:	4770      	bx	lr

0000bc3e <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bc3e:	b082      	sub	sp, #8
    bc40:	9001      	str	r0, [sp, #4]
    bc42:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    bc44:	9b01      	ldr	r3, [sp, #4]
    bc46:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc4a:	0d1b      	lsrs	r3, r3, #20
    bc4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bc50:	9b00      	ldr	r3, [sp, #0]
    bc52:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    bc54:	9b01      	ldr	r3, [sp, #4]
    bc56:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc5a:	0a9b      	lsrs	r3, r3, #10
    bc5c:	f003 021f 	and.w	r2, r3, #31
    bc60:	9b00      	ldr	r3, [sp, #0]
    bc62:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    bc64:	9b01      	ldr	r3, [sp, #4]
    bc66:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc6a:	095b      	lsrs	r3, r3, #5
    bc6c:	f003 0207 	and.w	r2, r3, #7
    bc70:	9b00      	ldr	r3, [sp, #0]
    bc72:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    bc74:	9b01      	ldr	r3, [sp, #4]
    bc76:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc7a:	f003 0207 	and.w	r2, r3, #7
    bc7e:	9b00      	ldr	r3, [sp, #0]
    bc80:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    bc82:	9b01      	ldr	r3, [sp, #4]
    bc84:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc88:	0c1b      	lsrs	r3, r3, #16
    bc8a:	f003 0207 	and.w	r2, r3, #7
    bc8e:	9b00      	ldr	r3, [sp, #0]
    bc90:	611a      	str	r2, [r3, #16]
}
    bc92:	bf00      	nop
    bc94:	b002      	add	sp, #8
    bc96:	4770      	bx	lr

0000bc98 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    bc98:	b082      	sub	sp, #8
    bc9a:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    bc9c:	9b01      	ldr	r3, [sp, #4]
    bc9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bca0:	0fdb      	lsrs	r3, r3, #31
    bca2:	b2db      	uxtb	r3, r3
}
    bca4:	4618      	mov	r0, r3
    bca6:	b002      	add	sp, #8
    bca8:	4770      	bx	lr

0000bcaa <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    bcaa:	b082      	sub	sp, #8
    bcac:	9001      	str	r0, [sp, #4]
    bcae:	460b      	mov	r3, r1
    bcb0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    bcb4:	9b01      	ldr	r3, [sp, #4]
    bcb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bcb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    bcbc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bcc0:	2a00      	cmp	r2, #0
    bcc2:	d002      	beq.n	bcca <FlexCAN_EnableExtCbt+0x20>
    bcc4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    bcc8:	e000      	b.n	bccc <FlexCAN_EnableExtCbt+0x22>
    bcca:	2200      	movs	r2, #0
    bccc:	431a      	orrs	r2, r3
    bcce:	9b01      	ldr	r3, [sp, #4]
    bcd0:	651a      	str	r2, [r3, #80]	; 0x50
}
    bcd2:	bf00      	nop
    bcd4:	b002      	add	sp, #8
    bcd6:	4770      	bx	lr

0000bcd8 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    bcd8:	b082      	sub	sp, #8
    bcda:	9001      	str	r0, [sp, #4]
    bcdc:	460b      	mov	r3, r1
    bcde:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    bce2:	9b01      	ldr	r3, [sp, #4]
    bce4:	681b      	ldr	r3, [r3, #0]
    bce6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    bcea:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bcee:	2a00      	cmp	r2, #0
    bcf0:	d001      	beq.n	bcf6 <FlexCAN_SetSelfReception+0x1e>
    bcf2:	2200      	movs	r2, #0
    bcf4:	e001      	b.n	bcfa <FlexCAN_SetSelfReception+0x22>
    bcf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bcfa:	431a      	orrs	r2, r3
    bcfc:	9b01      	ldr	r3, [sp, #4]
    bcfe:	601a      	str	r2, [r3, #0]
}
    bd00:	bf00      	nop
    bd02:	b002      	add	sp, #8
    bd04:	4770      	bx	lr

0000bd06 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    bd06:	b082      	sub	sp, #8
    bd08:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    bd0a:	9b01      	ldr	r3, [sp, #4]
    bd0c:	681b      	ldr	r3, [r3, #0]
    bd0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bd12:	2b00      	cmp	r3, #0
    bd14:	bf14      	ite	ne
    bd16:	2301      	movne	r3, #1
    bd18:	2300      	moveq	r3, #0
    bd1a:	b2db      	uxtb	r3, r3
}
    bd1c:	4618      	mov	r0, r3
    bd1e:	b002      	add	sp, #8
    bd20:	4770      	bx	lr

0000bd22 <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    bd22:	b082      	sub	sp, #8
    bd24:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    bd26:	9b01      	ldr	r3, [sp, #4]
    bd28:	685b      	ldr	r3, [r3, #4]
    bd2a:	f003 0308 	and.w	r3, r3, #8
    bd2e:	2b00      	cmp	r3, #0
    bd30:	bf14      	ite	ne
    bd32:	2301      	movne	r3, #1
    bd34:	2300      	moveq	r3, #0
    bd36:	b2db      	uxtb	r3, r3
}
    bd38:	4618      	mov	r0, r3
    bd3a:	b002      	add	sp, #8
    bd3c:	4770      	bx	lr

0000bd3e <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    bd3e:	b082      	sub	sp, #8
    bd40:	4603      	mov	r3, r0
    bd42:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    bd46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd4a:	3301      	adds	r3, #1
    bd4c:	00db      	lsls	r3, r3, #3
    bd4e:	089b      	lsrs	r3, r3, #2
    bd50:	3305      	adds	r3, #5
}
    bd52:	4618      	mov	r0, r3
    bd54:	b002      	add	sp, #8
    bd56:	4770      	bx	lr

0000bd58 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    bd58:	b082      	sub	sp, #8
    bd5a:	9001      	str	r0, [sp, #4]
    bd5c:	460b      	mov	r3, r1
    bd5e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    bd62:	9b01      	ldr	r3, [sp, #4]
    bd64:	685b      	ldr	r3, [r3, #4]
    bd66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    bd6a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bd6e:	2a00      	cmp	r2, #0
    bd70:	d002      	beq.n	bd78 <FlexCAN_SetClkSrc+0x20>
    bd72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    bd76:	e000      	b.n	bd7a <FlexCAN_SetClkSrc+0x22>
    bd78:	2200      	movs	r2, #0
    bd7a:	431a      	orrs	r2, r3
    bd7c:	9b01      	ldr	r3, [sp, #4]
    bd7e:	605a      	str	r2, [r3, #4]
}
    bd80:	bf00      	nop
    bd82:	b002      	add	sp, #8
    bd84:	4770      	bx	lr

0000bd86 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bd86:	b084      	sub	sp, #16
    bd88:	9001      	str	r0, [sp, #4]
    bd8a:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    bd8c:	2300      	movs	r3, #0
    bd8e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    bd92:	9b00      	ldr	r3, [sp, #0]
    bd94:	2b1f      	cmp	r3, #31
    bd96:	d810      	bhi.n	bdba <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    bd98:	9b01      	ldr	r3, [sp, #4]
    bd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bd9c:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    bd9e:	9b01      	ldr	r3, [sp, #4]
    bda0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    bda2:	9b02      	ldr	r3, [sp, #8]
    bda4:	401a      	ands	r2, r3
    bda6:	9b00      	ldr	r3, [sp, #0]
    bda8:	f003 031f 	and.w	r3, r3, #31
    bdac:	fa22 f303 	lsr.w	r3, r2, r3
    bdb0:	b2db      	uxtb	r3, r3
    bdb2:	f003 0301 	and.w	r3, r3, #1
    bdb6:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    bdba:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bdbe:	4618      	mov	r0, r3
    bdc0:	b004      	add	sp, #16
    bdc2:	4770      	bx	lr

0000bdc4 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    bdc4:	b082      	sub	sp, #8
    bdc6:	9001      	str	r0, [sp, #4]
    bdc8:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    bdca:	9b01      	ldr	r3, [sp, #4]
    bdcc:	9a00      	ldr	r2, [sp, #0]
    bdce:	611a      	str	r2, [r3, #16]
}
    bdd0:	bf00      	nop
    bdd2:	b002      	add	sp, #8
    bdd4:	4770      	bx	lr

0000bdd6 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    bdd6:	b084      	sub	sp, #16
    bdd8:	9003      	str	r0, [sp, #12]
    bdda:	9102      	str	r1, [sp, #8]
    bddc:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    bdde:	9b03      	ldr	r3, [sp, #12]
    bde0:	9a02      	ldr	r2, [sp, #8]
    bde2:	f502 7208 	add.w	r2, r2, #544	; 0x220
    bde6:	9901      	ldr	r1, [sp, #4]
    bde8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    bdec:	bf00      	nop
    bdee:	b004      	add	sp, #16
    bdf0:	4770      	bx	lr

0000bdf2 <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    bdf2:	b082      	sub	sp, #8
    bdf4:	9001      	str	r0, [sp, #4]
    bdf6:	460b      	mov	r3, r1
    bdf8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    bdfc:	9b01      	ldr	r3, [sp, #4]
    bdfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    be00:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    be04:	f89d 3003 	ldrb.w	r3, [sp, #3]
    be08:	04db      	lsls	r3, r3, #19
    be0a:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    be0e:	431a      	orrs	r2, r3
    be10:	9b01      	ldr	r3, [sp, #4]
    be12:	635a      	str	r2, [r3, #52]	; 0x34
}
    be14:	bf00      	nop
    be16:	b002      	add	sp, #8
    be18:	4770      	bx	lr

0000be1a <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    be1a:	b082      	sub	sp, #8
    be1c:	9001      	str	r0, [sp, #4]
    be1e:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    be20:	9b00      	ldr	r3, [sp, #0]
    be22:	2b00      	cmp	r3, #0
    be24:	d106      	bne.n	be34 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    be26:	9b01      	ldr	r3, [sp, #4]
    be28:	681b      	ldr	r3, [r3, #0]
    be2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    be2e:	9b01      	ldr	r3, [sp, #4]
    be30:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    be32:	e005      	b.n	be40 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    be34:	9b01      	ldr	r3, [sp, #4]
    be36:	681b      	ldr	r3, [r3, #0]
    be38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    be3c:	9b01      	ldr	r3, [sp, #4]
    be3e:	601a      	str	r2, [r3, #0]
}
    be40:	bf00      	nop
    be42:	b002      	add	sp, #8
    be44:	4770      	bx	lr

0000be46 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    be46:	b500      	push	{lr}
    be48:	b083      	sub	sp, #12
    be4a:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    be4c:	9801      	ldr	r0, [sp, #4]
    be4e:	f002 ff85 	bl	ed5c <FlexCAN_IsFDAvailable>
    be52:	4603      	mov	r3, r0
    be54:	2b00      	cmp	r3, #0
    be56:	d007      	beq.n	be68 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    be58:	9b01      	ldr	r3, [sp, #4]
    be5a:	2200      	movs	r2, #0
    be5c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    be60:	9b01      	ldr	r3, [sp, #4]
    be62:	4a12      	ldr	r2, [pc, #72]	; (beac <FlexCAN_SetRegDefaultVal+0x66>)
    be64:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    be68:	9b01      	ldr	r3, [sp, #4]
    be6a:	f04f 32ff 	mov.w	r2, #4294967295
    be6e:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    be70:	9b01      	ldr	r3, [sp, #4]
    be72:	2200      	movs	r2, #0
    be74:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    be76:	9b01      	ldr	r3, [sp, #4]
    be78:	2200      	movs	r2, #0
    be7a:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    be7c:	9b01      	ldr	r3, [sp, #4]
    be7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    be82:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    be84:	9b01      	ldr	r3, [sp, #4]
    be86:	4a0a      	ldr	r2, [pc, #40]	; (beb0 <FlexCAN_SetRegDefaultVal+0x6a>)
    be88:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    be8a:	9b01      	ldr	r3, [sp, #4]
    be8c:	2200      	movs	r2, #0
    be8e:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    be90:	9b01      	ldr	r3, [sp, #4]
    be92:	2200      	movs	r2, #0
    be94:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    be96:	9b01      	ldr	r3, [sp, #4]
    be98:	2200      	movs	r2, #0
    be9a:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    be9c:	9b01      	ldr	r3, [sp, #4]
    be9e:	4a05      	ldr	r2, [pc, #20]	; (beb4 <FlexCAN_SetRegDefaultVal+0x6e>)
    bea0:	601a      	str	r2, [r3, #0]
}
    bea2:	bf00      	nop
    bea4:	b003      	add	sp, #12
    bea6:	f85d fb04 	ldr.w	pc, [sp], #4
    beaa:	bf00      	nop
    beac:	80004100 	.word	0x80004100
    beb0:	0003b006 	.word	0x0003b006
    beb4:	d890000f 	.word	0xd890000f

0000beb8 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    beb8:	b500      	push	{lr}
    beba:	b085      	sub	sp, #20
    bebc:	9001      	str	r0, [sp, #4]
    bebe:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bec0:	2300      	movs	r3, #0
    bec2:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    bec4:	9b00      	ldr	r3, [sp, #0]
    bec6:	7a1b      	ldrb	r3, [r3, #8]
    bec8:	2b00      	cmp	r3, #0
    beca:	d006      	beq.n	beda <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    becc:	9b00      	ldr	r3, [sp, #0]
    bece:	685b      	ldr	r3, [r3, #4]
    bed0:	4619      	mov	r1, r3
    bed2:	9801      	ldr	r0, [sp, #4]
    bed4:	f002 fefe 	bl	ecd4 <FlexCAN_EnableRxFifo>
    bed8:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    beda:	9b03      	ldr	r3, [sp, #12]
}
    bedc:	4618      	mov	r0, r3
    bede:	b005      	add	sp, #20
    bee0:	f85d fb04 	ldr.w	pc, [sp], #4

0000bee4 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bee4:	b500      	push	{lr}
    bee6:	b085      	sub	sp, #20
    bee8:	9001      	str	r0, [sp, #4]
    beea:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    beec:	2300      	movs	r3, #0
    beee:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    bef0:	9b00      	ldr	r3, [sp, #0]
    bef2:	68db      	ldr	r3, [r3, #12]
    bef4:	2b02      	cmp	r3, #2
    bef6:	d003      	beq.n	bf00 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    bef8:	2100      	movs	r1, #0
    befa:	9801      	ldr	r0, [sp, #4]
    befc:	f7ff feec 	bl	bcd8 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    bf00:	9900      	ldr	r1, [sp, #0]
    bf02:	9801      	ldr	r0, [sp, #4]
    bf04:	f7ff ffd8 	bl	beb8 <FlexCAN_InitRxFifo>
    bf08:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    bf0a:	9b03      	ldr	r3, [sp, #12]
    bf0c:	2b00      	cmp	r3, #0
    bf0e:	d006      	beq.n	bf1e <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    bf10:	9801      	ldr	r0, [sp, #4]
    bf12:	f002 fd03 	bl	e91c <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    bf16:	9801      	ldr	r0, [sp, #4]
    bf18:	f002 fdca 	bl	eab0 <FlexCAN_Disable>
    bf1c:	e00b      	b.n	bf36 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    bf1e:	9b00      	ldr	r3, [sp, #0]
    bf20:	3314      	adds	r3, #20
    bf22:	4619      	mov	r1, r3
    bf24:	9801      	ldr	r0, [sp, #4]
    bf26:	f002 ff3b 	bl	eda0 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    bf2a:	9b00      	ldr	r3, [sp, #0]
    bf2c:	681b      	ldr	r3, [r3, #0]
    bf2e:	4619      	mov	r1, r3
    bf30:	9801      	ldr	r0, [sp, #4]
    bf32:	f003 fab7 	bl	f4a4 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    bf36:	9b03      	ldr	r3, [sp, #12]
}
    bf38:	4618      	mov	r0, r3
    bf3a:	b005      	add	sp, #20
    bf3c:	f85d fb04 	ldr.w	pc, [sp], #4

0000bf40 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bf40:	b500      	push	{lr}
    bf42:	b087      	sub	sp, #28
    bf44:	4603      	mov	r3, r0
    bf46:	9102      	str	r1, [sp, #8]
    bf48:	9201      	str	r2, [sp, #4]
    bf4a:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bf4e:	2300      	movs	r3, #0
    bf50:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    bf52:	9802      	ldr	r0, [sp, #8]
    bf54:	f7ff fd0c 	bl	b970 <FlexCAN_IsEnabled>
    bf58:	4603      	mov	r3, r0
    bf5a:	2b00      	cmp	r3, #0
    bf5c:	d00a      	beq.n	bf74 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    bf5e:	9802      	ldr	r0, [sp, #8]
    bf60:	f002 fcdc 	bl	e91c <FlexCAN_EnterFreezeMode>
    bf64:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    bf66:	9b05      	ldr	r3, [sp, #20]
    bf68:	2b00      	cmp	r3, #0
    bf6a:	d103      	bne.n	bf74 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    bf6c:	9802      	ldr	r0, [sp, #8]
    bf6e:	f002 fd9f 	bl	eab0 <FlexCAN_Disable>
    bf72:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    bf74:	9b05      	ldr	r3, [sp, #20]
    bf76:	2b00      	cmp	r3, #0
    bf78:	d137      	bne.n	bfea <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    bf7a:	9b01      	ldr	r3, [sp, #4]
    bf7c:	7e5b      	ldrb	r3, [r3, #25]
    bf7e:	4619      	mov	r1, r3
    bf80:	9802      	ldr	r0, [sp, #8]
    bf82:	f7ff fee9 	bl	bd58 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bf86:	9b02      	ldr	r3, [sp, #8]
    bf88:	681b      	ldr	r3, [r3, #0]
    bf8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bf8e:	9b02      	ldr	r3, [sp, #8]
    bf90:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    bf92:	9802      	ldr	r0, [sp, #8]
    bf94:	f002 fe28 	bl	ebe8 <FlexCAN_Init>
    bf98:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    bf9a:	9b05      	ldr	r3, [sp, #20]
    bf9c:	2b00      	cmp	r3, #0
    bf9e:	d006      	beq.n	bfae <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    bfa0:	9802      	ldr	r0, [sp, #8]
    bfa2:	f002 fcbb 	bl	e91c <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    bfa6:	9802      	ldr	r0, [sp, #8]
    bfa8:	f002 fd82 	bl	eab0 <FlexCAN_Disable>
    bfac:	e01d      	b.n	bfea <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    bfae:	9802      	ldr	r0, [sp, #8]
    bfb0:	f002 fed4 	bl	ed5c <FlexCAN_IsFDAvailable>
    bfb4:	4603      	mov	r3, r0
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	d007      	beq.n	bfca <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    bfba:	9b01      	ldr	r3, [sp, #4]
    bfbc:	7e19      	ldrb	r1, [r3, #24]
    bfbe:	9b01      	ldr	r3, [sp, #4]
    bfc0:	7edb      	ldrb	r3, [r3, #27]
    bfc2:	461a      	mov	r2, r3
    bfc4:	9802      	ldr	r0, [sp, #8]
    bfc6:	f7ff fcdd 	bl	b984 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    bfca:	9b01      	ldr	r3, [sp, #4]
    bfcc:	691b      	ldr	r3, [r3, #16]
    bfce:	4619      	mov	r1, r3
    bfd0:	9802      	ldr	r0, [sp, #8]
    bfd2:	f003 fdeb 	bl	fbac <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    bfd6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bfda:	4618      	mov	r0, r3
    bfdc:	f003 fe56 	bl	fc8c <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    bfe0:	9901      	ldr	r1, [sp, #4]
    bfe2:	9802      	ldr	r0, [sp, #8]
    bfe4:	f7ff ff7e 	bl	bee4 <FlexCAN_InitCtroll>
    bfe8:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    bfea:	9b05      	ldr	r3, [sp, #20]
}
    bfec:	4618      	mov	r0, r3
    bfee:	b007      	add	sp, #28
    bff0:	f85d fb04 	ldr.w	pc, [sp], #4

0000bff4 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bff4:	b500      	push	{lr}
    bff6:	b083      	sub	sp, #12
    bff8:	9001      	str	r0, [sp, #4]
    bffa:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    bffc:	9b00      	ldr	r3, [sp, #0]
    bffe:	7e1b      	ldrb	r3, [r3, #24]
    c000:	4619      	mov	r1, r3
    c002:	9801      	ldr	r0, [sp, #4]
    c004:	f7ff fe51 	bl	bcaa <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    c008:	9b00      	ldr	r3, [sp, #0]
    c00a:	7e1b      	ldrb	r3, [r3, #24]
    c00c:	2b00      	cmp	r3, #0
    c00e:	d00c      	beq.n	c02a <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    c010:	9b00      	ldr	r3, [sp, #0]
    c012:	331c      	adds	r3, #28
    c014:	4619      	mov	r1, r3
    c016:	9801      	ldr	r0, [sp, #4]
    c018:	f7ff fd94 	bl	bb44 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    c01c:	9b00      	ldr	r3, [sp, #0]
    c01e:	3330      	adds	r3, #48	; 0x30
    c020:	4619      	mov	r1, r3
    c022:	9801      	ldr	r0, [sp, #4]
    c024:	f7ff fd2d 	bl	ba82 <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    c028:	e005      	b.n	c036 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    c02a:	9b00      	ldr	r3, [sp, #0]
    c02c:	331c      	adds	r3, #28
    c02e:	4619      	mov	r1, r3
    c030:	9801      	ldr	r0, [sp, #4]
    c032:	f7ff fd5b 	bl	baec <FlexCAN_SetTimeSegments>
}
    c036:	bf00      	nop
    c038:	b003      	add	sp, #12
    c03a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c03e <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    c03e:	b500      	push	{lr}
    c040:	b08d      	sub	sp, #52	; 0x34
    c042:	4603      	mov	r3, r0
    c044:	9102      	str	r1, [sp, #8]
    c046:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c04a:	2300      	movs	r3, #0
    c04c:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c04e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c052:	4a46      	ldr	r2, [pc, #280]	; (c16c <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    c054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c058:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c05a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c05e:	4a44      	ldr	r2, [pc, #272]	; (c170 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    c060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c064:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    c066:	2300      	movs	r3, #0
    c068:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    c06a:	2300      	movs	r3, #0
    c06c:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c06e:	9b02      	ldr	r3, [sp, #8]
    c070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c074:	fb02 f303 	mul.w	r3, r2, r3
    c078:	2100      	movs	r1, #0
    c07a:	4618      	mov	r0, r3
    c07c:	f7f5 ff0a 	bl	1e94 <OsIf_MicrosToTicks>
    c080:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    c082:	2300      	movs	r3, #0
    c084:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c086:	2000      	movs	r0, #0
    c088:	f7f5 feb8 	bl	1dfc <OsIf_GetCounter>
    c08c:	4603      	mov	r3, r0
    c08e:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c090:	e02a      	b.n	c0e8 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    c092:	9b08      	ldr	r3, [sp, #32]
    c094:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c098:	2b01      	cmp	r3, #1
    c09a:	d115      	bne.n	c0c8 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c09c:	2307      	movs	r3, #7
    c09e:	9309      	str	r3, [sp, #36]	; 0x24
    c0a0:	e00f      	b.n	c0c2 <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    c0a2:	9909      	ldr	r1, [sp, #36]	; 0x24
    c0a4:	9807      	ldr	r0, [sp, #28]
    c0a6:	f7ff fcd0 	bl	ba4a <FlexCAN_GetBuffStatusFlag>
    c0aa:	4603      	mov	r3, r0
    c0ac:	2b00      	cmp	r3, #0
    c0ae:	d005      	beq.n	c0bc <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    c0b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
    c0b6:	4618      	mov	r0, r3
    c0b8:	f000 fb06 	bl	c6c8 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    c0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0be:	3b01      	subs	r3, #1
    c0c0:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0c4:	2b04      	cmp	r3, #4
    c0c6:	d8ec      	bhi.n	c0a2 <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c0c8:	ab05      	add	r3, sp, #20
    c0ca:	2100      	movs	r1, #0
    c0cc:	4618      	mov	r0, r3
    c0ce:	f7f5 feae 	bl	1e2e <OsIf_GetElapsed>
    c0d2:	4602      	mov	r2, r0
    c0d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c0d6:	4413      	add	r3, r2
    c0d8:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    c0da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c0dc:	9b06      	ldr	r3, [sp, #24]
    c0de:	429a      	cmp	r2, r3
    c0e0:	d302      	bcc.n	c0e8 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    c0e2:	2303      	movs	r3, #3
    c0e4:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c0e6:	e003      	b.n	c0f0 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c0e8:	9b08      	ldr	r3, [sp, #32]
    c0ea:	685b      	ldr	r3, [r3, #4]
    c0ec:	2b01      	cmp	r3, #1
    c0ee:	d0d0      	beq.n	c092 <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    c0f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c0f2:	2b03      	cmp	r3, #3
    c0f4:	d125      	bne.n	c142 <FlexCAN_ProccessLegacyRxFIFO+0x104>
    c0f6:	9b08      	ldr	r3, [sp, #32]
    c0f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c0fc:	2b01      	cmp	r3, #1
    c0fe:	d020      	beq.n	c142 <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    c100:	9b08      	ldr	r3, [sp, #32]
    c102:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c106:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c10a:	9300      	str	r3, [sp, #0]
    c10c:	2300      	movs	r3, #0
    c10e:	2205      	movs	r2, #5
    c110:	9807      	ldr	r0, [sp, #28]
    c112:	f002 feef 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    c116:	9b08      	ldr	r3, [sp, #32]
    c118:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c11c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c120:	9300      	str	r3, [sp, #0]
    c122:	2300      	movs	r3, #0
    c124:	2206      	movs	r2, #6
    c126:	9807      	ldr	r0, [sp, #28]
    c128:	f002 fee4 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    c12c:	9b08      	ldr	r3, [sp, #32]
    c12e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c132:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c136:	9300      	str	r3, [sp, #0]
    c138:	2300      	movs	r3, #0
    c13a:	2207      	movs	r2, #7
    c13c:	9807      	ldr	r0, [sp, #28]
    c13e:	f002 fed9 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c142:	9b08      	ldr	r3, [sp, #32]
    c144:	685b      	ldr	r3, [r3, #4]
    c146:	2b00      	cmp	r3, #0
    c148:	d005      	beq.n	c156 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    c14a:	2b01      	cmp	r3, #1
    c14c:	d106      	bne.n	c15c <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c14e:	9b08      	ldr	r3, [sp, #32]
    c150:	2200      	movs	r2, #0
    c152:	605a      	str	r2, [r3, #4]
                break;
    c154:	e005      	b.n	c162 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    c156:	2300      	movs	r3, #0
    c158:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c15a:	e002      	b.n	c162 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    c15c:	2301      	movs	r3, #1
    c15e:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c160:	bf00      	nop
        }

    return eResult;
    c162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    c164:	4618      	mov	r0, r3
    c166:	b00d      	add	sp, #52	; 0x34
    c168:	f85d fb04 	ldr.w	pc, [sp], #4
    c16c:	1fff935c 	.word	0x1fff935c
    c170:	00018530 	.word	0x00018530

0000c174 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    c174:	b084      	sub	sp, #16
    c176:	9200      	str	r2, [sp, #0]
    c178:	461a      	mov	r2, r3
    c17a:	4603      	mov	r3, r0
    c17c:	f88d 3007 	strb.w	r3, [sp, #7]
    c180:	460b      	mov	r3, r1
    c182:	f88d 3006 	strb.w	r3, [sp, #6]
    c186:	4613      	mov	r3, r2
    c188:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c18c:	2300      	movs	r3, #0
    c18e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c190:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c194:	4a15      	ldr	r2, [pc, #84]	; (c1ec <FlexCAN_StartRxMessageBufferData+0x78>)
    c196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c19a:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c19c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c1a0:	9a02      	ldr	r2, [sp, #8]
    c1a2:	011b      	lsls	r3, r3, #4
    c1a4:	4413      	add	r3, r2
    c1a6:	3304      	adds	r3, #4
    c1a8:	681b      	ldr	r3, [r3, #0]
    c1aa:	2b00      	cmp	r3, #0
    c1ac:	d002      	beq.n	c1b4 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    c1ae:	2302      	movs	r3, #2
    c1b0:	9303      	str	r3, [sp, #12]
    c1b2:	e017      	b.n	c1e4 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    c1b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c1b8:	9a02      	ldr	r2, [sp, #8]
    c1ba:	011b      	lsls	r3, r3, #4
    c1bc:	4413      	add	r3, r2
    c1be:	3304      	adds	r3, #4
    c1c0:	2201      	movs	r2, #1
    c1c2:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    c1c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c1c8:	9a02      	ldr	r2, [sp, #8]
    c1ca:	011b      	lsls	r3, r3, #4
    c1cc:	4413      	add	r3, r2
    c1ce:	9a00      	ldr	r2, [sp, #0]
    c1d0:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    c1d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c1d6:	9a02      	ldr	r2, [sp, #8]
    c1d8:	011b      	lsls	r3, r3, #4
    c1da:	4413      	add	r3, r2
    c1dc:	3308      	adds	r3, #8
    c1de:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c1e2:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    c1e4:	9b03      	ldr	r3, [sp, #12]
}
    c1e6:	4618      	mov	r0, r3
    c1e8:	b004      	add	sp, #16
    c1ea:	4770      	bx	lr
    c1ec:	1fff935c 	.word	0x1fff935c

0000c1f0 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    c1f0:	b500      	push	{lr}
    c1f2:	b08f      	sub	sp, #60	; 0x3c
    c1f4:	9204      	str	r2, [sp, #16]
    c1f6:	9303      	str	r3, [sp, #12]
    c1f8:	4603      	mov	r3, r0
    c1fa:	f88d 3017 	strb.w	r3, [sp, #23]
    c1fe:	460b      	mov	r3, r1
    c200:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c204:	2300      	movs	r3, #0
    c206:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    c208:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c20c:	4a38      	ldr	r2, [pc, #224]	; (c2f0 <FlexCAN_StartSendData+0x100>)
    c20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c212:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    c214:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c218:	4a36      	ldr	r2, [pc, #216]	; (c2f4 <FlexCAN_StartSendData+0x104>)
    c21a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c21e:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    c220:	2300      	movs	r3, #0
    c222:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c224:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c22a:	011b      	lsls	r3, r3, #4
    c22c:	4413      	add	r3, r2
    c22e:	3304      	adds	r3, #4
    c230:	681b      	ldr	r3, [r3, #0]
    c232:	2b00      	cmp	r3, #0
    c234:	d002      	beq.n	c23c <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    c236:	2302      	movs	r3, #2
    c238:	930d      	str	r3, [sp, #52]	; 0x34
    c23a:	e053      	b.n	c2e4 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c23c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c240:	4619      	mov	r1, r3
    c242:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c244:	f7ff fbee 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    c248:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c24c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c24e:	011b      	lsls	r3, r3, #4
    c250:	4413      	add	r3, r2
    c252:	3304      	adds	r3, #4
    c254:	2202      	movs	r2, #2
    c256:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    c258:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c25c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c25e:	011b      	lsls	r3, r3, #4
    c260:	4413      	add	r3, r2
    c262:	330c      	adds	r3, #12
    c264:	2200      	movs	r2, #0
    c266:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    c268:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c26c:	9a04      	ldr	r2, [sp, #16]
    c26e:	7b11      	ldrb	r1, [r2, #12]
    c270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c272:	011b      	lsls	r3, r3, #4
    c274:	4413      	add	r3, r2
    c276:	3308      	adds	r3, #8
    c278:	460a      	mov	r2, r1
    c27a:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    c27c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c280:	9a04      	ldr	r2, [sp, #16]
    c282:	7ad1      	ldrb	r1, [r2, #11]
    c284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c286:	011b      	lsls	r3, r3, #4
    c288:	4413      	add	r3, r2
    c28a:	3309      	adds	r3, #9
    c28c:	460a      	mov	r2, r1
    c28e:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    c290:	9b04      	ldr	r3, [sp, #16]
    c292:	685b      	ldr	r3, [r3, #4]
    c294:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    c296:	9b04      	ldr	r3, [sp, #16]
    c298:	681b      	ldr	r3, [r3, #0]
    c29a:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    c29c:	9b04      	ldr	r3, [sp, #16]
    c29e:	7a1b      	ldrb	r3, [r3, #8]
    c2a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    c2a4:	9b04      	ldr	r3, [sp, #16]
    c2a6:	7a5b      	ldrb	r3, [r3, #9]
    c2a8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    c2ac:	9b04      	ldr	r3, [sp, #16]
    c2ae:	7a9b      	ldrb	r3, [r3, #10]
    c2b0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    c2b4:	9b04      	ldr	r3, [sp, #16]
    c2b6:	7adb      	ldrb	r3, [r3, #11]
    c2b8:	2b00      	cmp	r3, #0
    c2ba:	d002      	beq.n	c2c2 <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    c2bc:	231c      	movs	r3, #28
    c2be:	9306      	str	r3, [sp, #24]
    c2c0:	e001      	b.n	c2c6 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    c2c2:	230c      	movs	r3, #12
    c2c4:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c2c6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c2ca:	4619      	mov	r1, r3
    c2cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c2ce:	f002 fa89 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    c2d2:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    c2d4:	a906      	add	r1, sp, #24
    c2d6:	2300      	movs	r3, #0
    c2d8:	9300      	str	r3, [sp, #0]
    c2da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c2dc:	9a03      	ldr	r2, [sp, #12]
    c2de:	980a      	ldr	r0, [sp, #40]	; 0x28
    c2e0:	f002 ffd2 	bl	f288 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c2e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    c2e6:	4618      	mov	r0, r3
    c2e8:	b00f      	add	sp, #60	; 0x3c
    c2ea:	f85d fb04 	ldr.w	pc, [sp], #4
    c2ee:	bf00      	nop
    c2f0:	1fff935c 	.word	0x1fff935c
    c2f4:	00018530 	.word	0x00018530

0000c2f8 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    c2f8:	b500      	push	{lr}
    c2fa:	b089      	sub	sp, #36	; 0x24
    c2fc:	4603      	mov	r3, r0
    c2fe:	9102      	str	r1, [sp, #8]
    c300:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    c304:	2300      	movs	r3, #0
    c306:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    c308:	2300      	movs	r3, #0
    c30a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c30c:	2300      	movs	r3, #0
    c30e:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    c310:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c314:	4a26      	ldr	r2, [pc, #152]	; (c3b0 <FlexCAN_StartRxMessageFifoData+0xb8>)
    c316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c31a:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    c31c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c320:	4a24      	ldr	r2, [pc, #144]	; (c3b4 <FlexCAN_StartRxMessageFifoData+0xbc>)
    c322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c326:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    c328:	9b05      	ldr	r3, [sp, #20]
    c32a:	685b      	ldr	r3, [r3, #4]
    c32c:	2b01      	cmp	r3, #1
    c32e:	d102      	bne.n	c336 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    c330:	2302      	movs	r3, #2
    c332:	9307      	str	r3, [sp, #28]
    c334:	e036      	b.n	c3a4 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    c336:	9b05      	ldr	r3, [sp, #20]
    c338:	2201      	movs	r2, #1
    c33a:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    c33c:	9b05      	ldr	r3, [sp, #20]
    c33e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c342:	2b01      	cmp	r3, #1
    c344:	d102      	bne.n	c34c <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c346:	9b05      	ldr	r3, [sp, #20]
    c348:	2201      	movs	r2, #1
    c34a:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    c34c:	9b05      	ldr	r3, [sp, #20]
    c34e:	9a02      	ldr	r2, [sp, #8]
    c350:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    c352:	9b05      	ldr	r3, [sp, #20]
    c354:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c358:	2b00      	cmp	r3, #0
    c35a:	d123      	bne.n	c3a4 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    c35c:	9b05      	ldr	r3, [sp, #20]
    c35e:	2200      	movs	r2, #0
    c360:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    c362:	9b05      	ldr	r3, [sp, #20]
    c364:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c368:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c36c:	9300      	str	r3, [sp, #0]
    c36e:	2301      	movs	r3, #1
    c370:	2206      	movs	r2, #6
    c372:	9806      	ldr	r0, [sp, #24]
    c374:	f002 fdbe 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    c378:	9b05      	ldr	r3, [sp, #20]
    c37a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c37e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c382:	9300      	str	r3, [sp, #0]
    c384:	2301      	movs	r3, #1
    c386:	2207      	movs	r2, #7
    c388:	9806      	ldr	r0, [sp, #24]
    c38a:	f002 fdb3 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    c38e:	9b05      	ldr	r3, [sp, #20]
    c390:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c394:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c398:	9300      	str	r3, [sp, #0]
    c39a:	2301      	movs	r3, #1
    c39c:	2205      	movs	r2, #5
    c39e:	9806      	ldr	r0, [sp, #24]
    c3a0:	f002 fda8 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c3a4:	9b07      	ldr	r3, [sp, #28]
}
    c3a6:	4618      	mov	r0, r3
    c3a8:	b009      	add	sp, #36	; 0x24
    c3aa:	f85d fb04 	ldr.w	pc, [sp], #4
    c3ae:	bf00      	nop
    c3b0:	00018530 	.word	0x00018530
    c3b4:	1fff935c 	.word	0x1fff935c

0000c3b8 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    c3b8:	b510      	push	{r4, lr}
    c3ba:	b09e      	sub	sp, #120	; 0x78
    c3bc:	4603      	mov	r3, r0
    c3be:	9102      	str	r1, [sp, #8]
    c3c0:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c3c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3c8:	4a70      	ldr	r2, [pc, #448]	; (c58c <FlexCAN_IRQHandlerRxMB+0x1d4>)
    c3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3ce:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c3d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3d4:	4a6e      	ldr	r2, [pc, #440]	; (c590 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    c3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3da:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    c3dc:	2300      	movs	r3, #0
    c3de:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    c3e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c3e4:	9b02      	ldr	r3, [sp, #8]
    c3e6:	011b      	lsls	r3, r3, #4
    c3e8:	4413      	add	r3, r2
    c3ea:	681b      	ldr	r3, [r3, #0]
    c3ec:	2b00      	cmp	r3, #0
    c3ee:	d105      	bne.n	c3fc <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    c3f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c3f2:	9b02      	ldr	r3, [sp, #8]
    c3f4:	011b      	lsls	r3, r3, #4
    c3f6:	4413      	add	r3, r2
    c3f8:	aa05      	add	r2, sp, #20
    c3fa:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    c3fc:	2300      	movs	r3, #0
    c3fe:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    c402:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c404:	9b02      	ldr	r3, [sp, #8]
    c406:	011b      	lsls	r3, r3, #4
    c408:	4413      	add	r3, r2
    c40a:	3308      	adds	r3, #8
    c40c:	781b      	ldrb	r3, [r3, #0]
    c40e:	2b00      	cmp	r3, #0
    c410:	d008      	beq.n	c424 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    c412:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c414:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c418:	2b00      	cmp	r3, #0
    c41a:	d003      	beq.n	c424 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    c41c:	2301      	movs	r3, #1
    c41e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    c422:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    c424:	9902      	ldr	r1, [sp, #8]
    c426:	981c      	ldr	r0, [sp, #112]	; 0x70
    c428:	f002 fd55 	bl	eed6 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    c42c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c42e:	9b02      	ldr	r3, [sp, #8]
    c430:	011b      	lsls	r3, r3, #4
    c432:	4413      	add	r3, r2
    c434:	681b      	ldr	r3, [r3, #0]
    c436:	461a      	mov	r2, r3
    c438:	9902      	ldr	r1, [sp, #8]
    c43a:	981c      	ldr	r0, [sp, #112]	; 0x70
    c43c:	f002 fe7a 	bl	f134 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c440:	9902      	ldr	r1, [sp, #8]
    c442:	981c      	ldr	r0, [sp, #112]	; 0x70
    c444:	f7ff faee 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    c448:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c44a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c44e:	2b00      	cmp	r3, #0
    c450:	d032      	beq.n	c4b8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c452:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c454:	9b02      	ldr	r3, [sp, #8]
    c456:	011b      	lsls	r3, r3, #4
    c458:	4413      	add	r3, r2
    c45a:	681b      	ldr	r3, [r3, #0]
    c45c:	681b      	ldr	r3, [r3, #0]
    c45e:	0e1b      	lsrs	r3, r3, #24
    c460:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    c464:	2b02      	cmp	r3, #2
    c466:	d027      	beq.n	c4b8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c468:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c46a:	9b02      	ldr	r3, [sp, #8]
    c46c:	011b      	lsls	r3, r3, #4
    c46e:	4413      	add	r3, r2
    c470:	681b      	ldr	r3, [r3, #0]
    c472:	681b      	ldr	r3, [r3, #0]
    c474:	0e1b      	lsrs	r3, r3, #24
    c476:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c47a:	2b04      	cmp	r3, #4
    c47c:	d01c      	beq.n	c4b8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    c47e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c480:	9b02      	ldr	r3, [sp, #8]
    c482:	011b      	lsls	r3, r3, #4
    c484:	4413      	add	r3, r2
    c486:	681b      	ldr	r3, [r3, #0]
    c488:	681b      	ldr	r3, [r3, #0]
    c48a:	0e1b      	lsrs	r3, r3, #24
    c48c:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c490:	2b06      	cmp	r3, #6
    c492:	d011      	beq.n	c4b8 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c494:	9902      	ldr	r1, [sp, #8]
    c496:	981c      	ldr	r0, [sp, #112]	; 0x70
    c498:	f002 f9a4 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    c49c:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    c49e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c4a0:	681b      	ldr	r3, [r3, #0]
    c4a2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c4a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c4a8:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c4aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c4ac:	681b      	ldr	r3, [r3, #0]
    c4ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    c4b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c4b4:	601a      	str	r2, [r3, #0]
    {
    c4b6:	e002      	b.n	c4be <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    c4b8:	981c      	ldr	r0, [sp, #112]	; 0x70
    c4ba:	f7ff faac 	bl	ba16 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    c4be:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    c4c2:	2b00      	cmp	r3, #0
    c4c4:	d000      	beq.n	c4c8 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    c4c6:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c4c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4ca:	9b02      	ldr	r3, [sp, #8]
    c4cc:	011b      	lsls	r3, r3, #4
    c4ce:	4413      	add	r3, r2
    c4d0:	3304      	adds	r3, #4
    c4d2:	2200      	movs	r2, #0
    c4d4:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    c4d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4d8:	9b02      	ldr	r3, [sp, #8]
    c4da:	011b      	lsls	r3, r3, #4
    c4dc:	4413      	add	r3, r2
    c4de:	3308      	adds	r3, #8
    c4e0:	781b      	ldrb	r3, [r3, #0]
    c4e2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    c4e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c4e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c4ec:	2b00      	cmp	r3, #0
    c4ee:	d008      	beq.n	c502 <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    c4f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c4f2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c4f6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c4fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c4fc:	9a02      	ldr	r2, [sp, #8]
    c4fe:	2100      	movs	r1, #0
    c500:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    c502:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c504:	9b02      	ldr	r3, [sp, #8]
    c506:	011b      	lsls	r3, r3, #4
    c508:	4413      	add	r3, r2
    c50a:	3304      	adds	r3, #4
    c50c:	681b      	ldr	r3, [r3, #0]
    c50e:	2b00      	cmp	r3, #0
    c510:	d11e      	bne.n	c550 <FlexCAN_IRQHandlerRxMB+0x198>
    c512:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c514:	9b02      	ldr	r3, [sp, #8]
    c516:	011b      	lsls	r3, r3, #4
    c518:	4413      	add	r3, r2
    c51a:	3308      	adds	r3, #8
    c51c:	781b      	ldrb	r3, [r3, #0]
    c51e:	f083 0301 	eor.w	r3, r3, #1
    c522:	b2db      	uxtb	r3, r3
    c524:	2b00      	cmp	r3, #0
    c526:	d013      	beq.n	c550 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    c528:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c52a:	9b02      	ldr	r3, [sp, #8]
    c52c:	011b      	lsls	r3, r3, #4
    c52e:	4413      	add	r3, r2
    c530:	3308      	adds	r3, #8
    c532:	2201      	movs	r2, #1
    c534:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c538:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c53c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c540:	9300      	str	r3, [sp, #0]
    c542:	2300      	movs	r3, #0
    c544:	9a02      	ldr	r2, [sp, #8]
    c546:	981c      	ldr	r0, [sp, #112]	; 0x70
    c548:	f002 fcd4 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
    c54c:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c54e:	e019      	b.n	c584 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    c550:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    c554:	f083 0301 	eor.w	r3, r3, #1
    c558:	b2db      	uxtb	r3, r3
    c55a:	2b00      	cmp	r3, #0
    c55c:	d012      	beq.n	c584 <FlexCAN_IRQHandlerRxMB+0x1cc>
    c55e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c560:	9b02      	ldr	r3, [sp, #8]
    c562:	011b      	lsls	r3, r3, #4
    c564:	4413      	add	r3, r2
    c566:	3308      	adds	r3, #8
    c568:	781b      	ldrb	r3, [r3, #0]
    c56a:	2b00      	cmp	r3, #0
    c56c:	d00a      	beq.n	c584 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c56e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c570:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c574:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c578:	9300      	str	r3, [sp, #0]
    c57a:	2300      	movs	r3, #0
    c57c:	9a02      	ldr	r2, [sp, #8]
    c57e:	981c      	ldr	r0, [sp, #112]	; 0x70
    c580:	f002 fcb8 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
}
    c584:	bf00      	nop
    c586:	b01e      	add	sp, #120	; 0x78
    c588:	bd10      	pop	{r4, pc}
    c58a:	bf00      	nop
    c58c:	00018530 	.word	0x00018530
    c590:	1fff935c 	.word	0x1fff935c

0000c594 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    c594:	b510      	push	{r4, lr}
    c596:	b09a      	sub	sp, #104	; 0x68
    c598:	4603      	mov	r3, r0
    c59a:	9102      	str	r1, [sp, #8]
    c59c:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c5a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c5a4:	4a46      	ldr	r2, [pc, #280]	; (c6c0 <FlexCAN_IRQHandlerTxMB+0x12c>)
    c5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5aa:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c5ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c5b0:	4a44      	ldr	r2, [pc, #272]	; (c6c4 <FlexCAN_IRQHandlerTxMB+0x130>)
    c5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5b6:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    c5b8:	2300      	movs	r3, #0
    c5ba:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    c5bc:	2300      	movs	r3, #0
    c5be:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    c5c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c5c2:	9b02      	ldr	r3, [sp, #8]
    c5c4:	011b      	lsls	r3, r3, #4
    c5c6:	4413      	add	r3, r2
    c5c8:	3309      	adds	r3, #9
    c5ca:	781b      	ldrb	r3, [r3, #0]
    c5cc:	2b00      	cmp	r3, #0
    c5ce:	d01e      	beq.n	c60e <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    c5d0:	9902      	ldr	r1, [sp, #8]
    c5d2:	9819      	ldr	r0, [sp, #100]	; 0x64
    c5d4:	f002 fc7f 	bl	eed6 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    c5d8:	ab04      	add	r3, sp, #16
    c5da:	461a      	mov	r2, r3
    c5dc:	9902      	ldr	r1, [sp, #8]
    c5de:	9819      	ldr	r0, [sp, #100]	; 0x64
    c5e0:	f002 fda8 	bl	f134 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    c5e4:	9819      	ldr	r0, [sp, #100]	; 0x64
    c5e6:	f7ff fa16 	bl	ba16 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    c5ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c5ec:	9918      	ldr	r1, [sp, #96]	; 0x60
    c5ee:	9b02      	ldr	r3, [sp, #8]
    c5f0:	011b      	lsls	r3, r3, #4
    c5f2:	440b      	add	r3, r1
    c5f4:	330c      	adds	r3, #12
    c5f6:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c5f8:	9b04      	ldr	r3, [sp, #16]
    c5fa:	0e1b      	lsrs	r3, r3, #24
    c5fc:	f003 030f 	and.w	r3, r3, #15
    c600:	2b04      	cmp	r3, #4
    c602:	d116      	bne.n	c632 <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c604:	9902      	ldr	r1, [sp, #8]
    c606:	9819      	ldr	r0, [sp, #100]	; 0x64
    c608:	f7ff fa0c 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
    c60c:	e011      	b.n	c632 <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    c60e:	9902      	ldr	r1, [sp, #8]
    c610:	9819      	ldr	r0, [sp, #100]	; 0x64
    c612:	f002 fd7b 	bl	f10c <FlexCAN_GetMsgBuffTimestamp>
    c616:	4601      	mov	r1, r0
    c618:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c61a:	9b02      	ldr	r3, [sp, #8]
    c61c:	011b      	lsls	r3, r3, #4
    c61e:	4413      	add	r3, r2
    c620:	330c      	adds	r3, #12
    c622:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    c624:	9819      	ldr	r0, [sp, #100]	; 0x64
    c626:	f7ff f9f6 	bl	ba16 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c62a:	9902      	ldr	r1, [sp, #8]
    c62c:	9819      	ldr	r0, [sp, #100]	; 0x64
    c62e:	f7ff f9f9 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    c632:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c634:	9b02      	ldr	r3, [sp, #8]
    c636:	011b      	lsls	r3, r3, #4
    c638:	4413      	add	r3, r2
    c63a:	3304      	adds	r3, #4
    c63c:	2200      	movs	r2, #0
    c63e:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    c640:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c642:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c646:	2b00      	cmp	r3, #0
    c648:	d008      	beq.n	c65c <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    c64a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c64c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c650:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c654:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c656:	9a02      	ldr	r2, [sp, #8]
    c658:	2104      	movs	r1, #4
    c65a:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    c65c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c65e:	9b02      	ldr	r3, [sp, #8]
    c660:	011b      	lsls	r3, r3, #4
    c662:	4413      	add	r3, r2
    c664:	3304      	adds	r3, #4
    c666:	681b      	ldr	r3, [r3, #0]
    c668:	2b00      	cmp	r3, #0
    c66a:	d112      	bne.n	c692 <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    c66c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c66e:	9b02      	ldr	r3, [sp, #8]
    c670:	011b      	lsls	r3, r3, #4
    c672:	4413      	add	r3, r2
    c674:	3308      	adds	r3, #8
    c676:	2201      	movs	r2, #1
    c678:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c67a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c67c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c680:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c684:	9300      	str	r3, [sp, #0]
    c686:	2300      	movs	r3, #0
    c688:	9a02      	ldr	r2, [sp, #8]
    c68a:	9819      	ldr	r0, [sp, #100]	; 0x64
    c68c:	f002 fc32 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c690:	e012      	b.n	c6b8 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    c692:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c694:	9b02      	ldr	r3, [sp, #8]
    c696:	011b      	lsls	r3, r3, #4
    c698:	4413      	add	r3, r2
    c69a:	3308      	adds	r3, #8
    c69c:	781b      	ldrb	r3, [r3, #0]
    c69e:	2b00      	cmp	r3, #0
    c6a0:	d00a      	beq.n	c6b8 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c6a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c6a4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c6a8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c6ac:	9300      	str	r3, [sp, #0]
    c6ae:	2300      	movs	r3, #0
    c6b0:	9a02      	ldr	r2, [sp, #8]
    c6b2:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6b4:	f002 fc1e 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
}
    c6b8:	bf00      	nop
    c6ba:	b01a      	add	sp, #104	; 0x68
    c6bc:	bd10      	pop	{r4, pc}
    c6be:	bf00      	nop
    c6c0:	00018530 	.word	0x00018530
    c6c4:	1fff935c 	.word	0x1fff935c

0000c6c8 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    c6c8:	b510      	push	{r4, lr}
    c6ca:	b098      	sub	sp, #96	; 0x60
    c6cc:	4603      	mov	r3, r0
    c6ce:	9100      	str	r1, [sp, #0]
    c6d0:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c6d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c6d8:	4a3c      	ldr	r2, [pc, #240]	; (c7cc <FlexCAN_IRQHandlerRxFIFO+0x104>)
    c6da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6de:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c6e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c6e4:	4a3a      	ldr	r2, [pc, #232]	; (c7d0 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    c6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6ea:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    c6ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6ee:	681b      	ldr	r3, [r3, #0]
    c6f0:	2b00      	cmp	r3, #0
    c6f2:	d102      	bne.n	c6fa <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    c6f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6f6:	aa02      	add	r2, sp, #8
    c6f8:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    c6fa:	9b00      	ldr	r3, [sp, #0]
    c6fc:	2b07      	cmp	r3, #7
    c6fe:	d048      	beq.n	c792 <FlexCAN_IRQHandlerRxFIFO+0xca>
    c700:	9b00      	ldr	r3, [sp, #0]
    c702:	2b07      	cmp	r3, #7
    c704:	d858      	bhi.n	c7b8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    c706:	9b00      	ldr	r3, [sp, #0]
    c708:	2b05      	cmp	r3, #5
    c70a:	d003      	beq.n	c714 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    c70c:	9b00      	ldr	r3, [sp, #0]
    c70e:	2b06      	cmp	r3, #6
    c710:	d02c      	beq.n	c76c <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    c712:	e051      	b.n	c7b8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c714:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c716:	685b      	ldr	r3, [r3, #4]
    c718:	2b01      	cmp	r3, #1
    c71a:	d14f      	bne.n	c7bc <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    c71c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c71e:	681b      	ldr	r3, [r3, #0]
    c720:	4619      	mov	r1, r3
    c722:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c724:	f003 f98d 	bl	fa42 <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c728:	9900      	ldr	r1, [sp, #0]
    c72a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c72c:	f7ff f97a 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c730:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c732:	2200      	movs	r2, #0
    c734:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    c736:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c738:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c73c:	2b00      	cmp	r3, #0
    c73e:	d008      	beq.n	c752 <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c740:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c742:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c746:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c74a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c74c:	2200      	movs	r2, #0
    c74e:	2101      	movs	r1, #1
    c750:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c752:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c754:	685b      	ldr	r3, [r3, #4]
    c756:	2b00      	cmp	r3, #0
    c758:	d130      	bne.n	c7bc <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c75a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c75c:	2201      	movs	r2, #1
    c75e:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    c760:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c764:	4618      	mov	r0, r3
    c766:	f000 fc61 	bl	d02c <FlexCAN_CompleteRxMessageFifoData>
            break;
    c76a:	e027      	b.n	c7bc <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c76c:	9900      	ldr	r1, [sp, #0]
    c76e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c770:	f7ff f958 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c774:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c776:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c77a:	2b00      	cmp	r3, #0
    c77c:	d020      	beq.n	c7c0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c77e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c780:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c784:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c788:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c78a:	2200      	movs	r2, #0
    c78c:	2102      	movs	r1, #2
    c78e:	47a0      	blx	r4
            break;
    c790:	e016      	b.n	c7c0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c792:	9900      	ldr	r1, [sp, #0]
    c794:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c796:	f7ff f945 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c79a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c79c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	d00f      	beq.n	c7c4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c7a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7a6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c7aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c7ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7b0:	2200      	movs	r2, #0
    c7b2:	2103      	movs	r1, #3
    c7b4:	47a0      	blx	r4
            break;
    c7b6:	e005      	b.n	c7c4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    c7b8:	bf00      	nop
    c7ba:	e004      	b.n	c7c6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c7bc:	bf00      	nop
    c7be:	e002      	b.n	c7c6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c7c0:	bf00      	nop
    c7c2:	e000      	b.n	c7c6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c7c4:	bf00      	nop
    }
}
    c7c6:	bf00      	nop
    c7c8:	b018      	add	sp, #96	; 0x60
    c7ca:	bd10      	pop	{r4, pc}
    c7cc:	00018530 	.word	0x00018530
    c7d0:	1fff935c 	.word	0x1fff935c

0000c7d4 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c7d4:	b500      	push	{lr}
    c7d6:	b08b      	sub	sp, #44	; 0x2c
    c7d8:	4603      	mov	r3, r0
    c7da:	460a      	mov	r2, r1
    c7dc:	f88d 3007 	strb.w	r3, [sp, #7]
    c7e0:	4613      	mov	r3, r2
    c7e2:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c7e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7ea:	4a3c      	ldr	r2, [pc, #240]	; (c8dc <FlexCAN_AbortTxTransfer+0x108>)
    c7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7f0:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c7f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7f6:	4a3a      	ldr	r2, [pc, #232]	; (c8e0 <FlexCAN_AbortTxTransfer+0x10c>)
    c7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7fc:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c7fe:	2300      	movs	r3, #0
    c800:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    c802:	2300      	movs	r3, #0
    c804:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c806:	2300      	movs	r3, #0
    c808:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    c80a:	2300      	movs	r3, #0
    c80c:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    c80e:	2300      	movs	r3, #0
    c810:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    c812:	2300      	movs	r3, #0
    c814:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c816:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c81a:	4619      	mov	r1, r3
    c81c:	9807      	ldr	r0, [sp, #28]
    c81e:	f001 ffe1 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    c822:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    c824:	9b03      	ldr	r3, [sp, #12]
    c826:	681b      	ldr	r3, [r3, #0]
    c828:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c82a:	9b05      	ldr	r3, [sp, #20]
    c82c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c830:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c832:	9b05      	ldr	r3, [sp, #20]
    c834:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    c838:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    c83a:	9b03      	ldr	r3, [sp, #12]
    c83c:	9a05      	ldr	r2, [sp, #20]
    c83e:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c840:	2100      	movs	r1, #0
    c842:	4828      	ldr	r0, [pc, #160]	; (c8e4 <FlexCAN_AbortTxTransfer+0x110>)
    c844:	f7f5 fb26 	bl	1e94 <OsIf_MicrosToTicks>
    c848:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c84a:	2000      	movs	r0, #0
    c84c:	f7f5 fad6 	bl	1dfc <OsIf_GetCounter>
    c850:	4603      	mov	r3, r0
    c852:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c854:	e00f      	b.n	c876 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c856:	ab02      	add	r3, sp, #8
    c858:	2100      	movs	r1, #0
    c85a:	4618      	mov	r0, r3
    c85c:	f7f5 fae7 	bl	1e2e <OsIf_GetElapsed>
    c860:	4602      	mov	r2, r0
    c862:	9b08      	ldr	r3, [sp, #32]
    c864:	4413      	add	r3, r2
    c866:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    c868:	9a08      	ldr	r2, [sp, #32]
    c86a:	9b04      	ldr	r3, [sp, #16]
    c86c:	429a      	cmp	r2, r3
    c86e:	d302      	bcc.n	c876 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    c870:	2303      	movs	r3, #3
    c872:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    c874:	e008      	b.n	c888 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c876:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c87a:	4619      	mov	r1, r3
    c87c:	9807      	ldr	r0, [sp, #28]
    c87e:	f7ff f8e4 	bl	ba4a <FlexCAN_GetBuffStatusFlag>
    c882:	4603      	mov	r3, r0
    c884:	2b00      	cmp	r3, #0
    c886:	d0e6      	beq.n	c856 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    c888:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c88a:	2b03      	cmp	r3, #3
    c88c:	d012      	beq.n	c8b4 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    c88e:	9b03      	ldr	r3, [sp, #12]
    c890:	681b      	ldr	r3, [r3, #0]
    c892:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c894:	9b05      	ldr	r3, [sp, #20]
    c896:	0e1b      	lsrs	r3, r3, #24
    c898:	f003 030f 	and.w	r3, r3, #15
    c89c:	2b08      	cmp	r3, #8
    c89e:	d101      	bne.n	c8a4 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    c8a0:	2305      	movs	r3, #5
    c8a2:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c8a4:	9b05      	ldr	r3, [sp, #20]
    c8a6:	0e1b      	lsrs	r3, r3, #24
    c8a8:	f003 030f 	and.w	r3, r3, #15
    c8ac:	2b09      	cmp	r3, #9
    c8ae:	d101      	bne.n	c8b4 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    c8b0:	2300      	movs	r3, #0
    c8b2:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    c8b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c8b8:	4619      	mov	r1, r3
    c8ba:	9807      	ldr	r0, [sp, #28]
    c8bc:	f7ff f8b2 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c8c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c8c4:	9a06      	ldr	r2, [sp, #24]
    c8c6:	011b      	lsls	r3, r3, #4
    c8c8:	4413      	add	r3, r2
    c8ca:	3304      	adds	r3, #4
    c8cc:	2200      	movs	r2, #0
    c8ce:	601a      	str	r2, [r3, #0]

    return result;
    c8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c8d2:	4618      	mov	r0, r3
    c8d4:	b00b      	add	sp, #44	; 0x2c
    c8d6:	f85d fb04 	ldr.w	pc, [sp], #4
    c8da:	bf00      	nop
    c8dc:	00018530 	.word	0x00018530
    c8e0:	1fff935c 	.word	0x1fff935c
    c8e4:	000f4240 	.word	0x000f4240

0000c8e8 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c8e8:	b500      	push	{lr}
    c8ea:	b089      	sub	sp, #36	; 0x24
    c8ec:	4603      	mov	r3, r0
    c8ee:	460a      	mov	r2, r1
    c8f0:	f88d 3007 	strb.w	r3, [sp, #7]
    c8f4:	4613      	mov	r3, r2
    c8f6:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c8fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8fe:	4a41      	ldr	r2, [pc, #260]	; (ca04 <FlexCAN_AbortRxTransfer+0x11c>)
    c900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c904:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c906:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c90a:	4a3f      	ldr	r2, [pc, #252]	; (ca08 <FlexCAN_AbortRxTransfer+0x120>)
    c90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c910:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    c912:	2300      	movs	r3, #0
    c914:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    c918:	2300      	movs	r3, #0
    c91a:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    c91c:	2300      	movs	r3, #0
    c91e:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    c920:	2300      	movs	r3, #0
    c922:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c924:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c928:	9a06      	ldr	r2, [sp, #24]
    c92a:	011b      	lsls	r3, r3, #4
    c92c:	4413      	add	r3, r2
    c92e:	3304      	adds	r3, #4
    c930:	2200      	movs	r2, #0
    c932:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    c934:	9b06      	ldr	r3, [sp, #24]
    c936:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c93a:	2b00      	cmp	r3, #0
    c93c:	d03c      	beq.n	c9b8 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    c93e:	9b07      	ldr	r3, [sp, #28]
    c940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c942:	0e1b      	lsrs	r3, r3, #24
    c944:	b2db      	uxtb	r3, r3
    c946:	f003 030f 	and.w	r3, r3, #15
    c94a:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    c94e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c952:	4618      	mov	r0, r3
    c954:	f7ff f9f3 	bl	bd3e <RxFifoOcuppiedLastMsgBuff>
    c958:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    c95a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c95e:	9a04      	ldr	r2, [sp, #16]
    c960:	429a      	cmp	r2, r3
    c962:	d21b      	bcs.n	c99c <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c964:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c968:	4619      	mov	r1, r3
    c96a:	9807      	ldr	r0, [sp, #28]
    c96c:	f001 ff3a 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    c970:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    c972:	9b02      	ldr	r3, [sp, #8]
    c974:	681b      	ldr	r3, [r3, #0]
    c976:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    c978:	9b03      	ldr	r3, [sp, #12]
    c97a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c97e:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    c980:	9b02      	ldr	r3, [sp, #8]
    c982:	9a03      	ldr	r2, [sp, #12]
    c984:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c986:	9b03      	ldr	r3, [sp, #12]
    c988:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c98c:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c98e:	9b03      	ldr	r3, [sp, #12]
    c990:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    c994:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    c996:	9b02      	ldr	r3, [sp, #8]
    c998:	9a03      	ldr	r2, [sp, #12]
    c99a:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    c99c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	d125      	bne.n	c9f0 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    c9a4:	9b06      	ldr	r3, [sp, #24]
    c9a6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c9aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
    c9ae:	2205      	movs	r2, #5
    c9b0:	9807      	ldr	r0, [sp, #28]
    c9b2:	f002 faf5 	bl	efa0 <FLEXCAN_ClearMsgBuffIntCmd>
    c9b6:	e01b      	b.n	c9f0 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c9b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9bc:	4619      	mov	r1, r3
    c9be:	9807      	ldr	r0, [sp, #28]
    c9c0:	f001 ff10 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    c9c4:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    c9c6:	9b02      	ldr	r3, [sp, #8]
    c9c8:	681b      	ldr	r3, [r3, #0]
    c9ca:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c9cc:	9b03      	ldr	r3, [sp, #12]
    c9ce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c9d2:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    c9d4:	9b02      	ldr	r3, [sp, #8]
    c9d6:	9a03      	ldr	r2, [sp, #12]
    c9d8:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c9da:	9b03      	ldr	r3, [sp, #12]
    c9dc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c9e0:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c9e2:	9b03      	ldr	r3, [sp, #12]
    c9e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    c9e8:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    c9ea:	9b02      	ldr	r3, [sp, #8]
    c9ec:	9a03      	ldr	r2, [sp, #12]
    c9ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    c9f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9f4:	4619      	mov	r1, r3
    c9f6:	9807      	ldr	r0, [sp, #28]
    c9f8:	f7ff f814 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    c9fc:	bf00      	nop
    c9fe:	b009      	add	sp, #36	; 0x24
    ca00:	f85d fb04 	ldr.w	pc, [sp], #4
    ca04:	00018530 	.word	0x00018530
    ca08:	1fff935c 	.word	0x1fff935c

0000ca0c <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    ca0c:	b500      	push	{lr}
    ca0e:	b089      	sub	sp, #36	; 0x24
    ca10:	4603      	mov	r3, r0
    ca12:	9102      	str	r1, [sp, #8]
    ca14:	9201      	str	r2, [sp, #4]
    ca16:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    ca1a:	2300      	movs	r3, #0
    ca1c:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    ca1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca22:	4a36      	ldr	r2, [pc, #216]	; (cafc <FlexCAN_Ip_Init_Privileged+0xf0>)
    ca24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca28:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    ca2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca2e:	9a01      	ldr	r2, [sp, #4]
    ca30:	9905      	ldr	r1, [sp, #20]
    ca32:	4618      	mov	r0, r3
    ca34:	f7ff fa84 	bl	bf40 <FlexCAN_InitController>
    ca38:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    ca3a:	9b06      	ldr	r3, [sp, #24]
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d158      	bne.n	caf2 <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    ca40:	9901      	ldr	r1, [sp, #4]
    ca42:	9805      	ldr	r0, [sp, #20]
    ca44:	f7ff fad6 	bl	bff4 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    ca48:	9b01      	ldr	r3, [sp, #4]
    ca4a:	68db      	ldr	r3, [r3, #12]
    ca4c:	4619      	mov	r1, r3
    ca4e:	9805      	ldr	r0, [sp, #20]
    ca50:	f002 fdb8 	bl	f5c4 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    ca54:	2300      	movs	r3, #0
    ca56:	9307      	str	r3, [sp, #28]
    ca58:	e01d      	b.n	ca96 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    ca5a:	9a02      	ldr	r2, [sp, #8]
    ca5c:	9b07      	ldr	r3, [sp, #28]
    ca5e:	011b      	lsls	r3, r3, #4
    ca60:	4413      	add	r3, r2
    ca62:	3308      	adds	r3, #8
    ca64:	2201      	movs	r2, #1
    ca66:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    ca68:	9a02      	ldr	r2, [sp, #8]
    ca6a:	9b07      	ldr	r3, [sp, #28]
    ca6c:	011b      	lsls	r3, r3, #4
    ca6e:	4413      	add	r3, r2
    ca70:	2200      	movs	r2, #0
    ca72:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    ca74:	9a02      	ldr	r2, [sp, #8]
    ca76:	9b07      	ldr	r3, [sp, #28]
    ca78:	011b      	lsls	r3, r3, #4
    ca7a:	4413      	add	r3, r2
    ca7c:	3304      	adds	r3, #4
    ca7e:	2200      	movs	r2, #0
    ca80:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    ca82:	9a02      	ldr	r2, [sp, #8]
    ca84:	9b07      	ldr	r3, [sp, #28]
    ca86:	011b      	lsls	r3, r3, #4
    ca88:	4413      	add	r3, r2
    ca8a:	330c      	adds	r3, #12
    ca8c:	2200      	movs	r2, #0
    ca8e:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    ca90:	9b07      	ldr	r3, [sp, #28]
    ca92:	3301      	adds	r3, #1
    ca94:	9307      	str	r3, [sp, #28]
    ca96:	9b07      	ldr	r3, [sp, #28]
    ca98:	2b1f      	cmp	r3, #31
    ca9a:	d9de      	bls.n	ca5a <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    ca9c:	9b01      	ldr	r3, [sp, #4]
    ca9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    caa0:	9b02      	ldr	r3, [sp, #8]
    caa2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    caa6:	9b01      	ldr	r3, [sp, #4]
    caa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    caaa:	9b02      	ldr	r3, [sp, #8]
    caac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    cab0:	9b02      	ldr	r3, [sp, #8]
    cab2:	2200      	movs	r2, #0
    cab4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    cab8:	9b01      	ldr	r3, [sp, #4]
    caba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    cabc:	9b02      	ldr	r3, [sp, #8]
    cabe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    cac2:	9b02      	ldr	r3, [sp, #8]
    cac4:	2200      	movs	r2, #0
    cac6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    caca:	9b01      	ldr	r3, [sp, #4]
    cacc:	7a1a      	ldrb	r2, [r3, #8]
    cace:	9b02      	ldr	r3, [sp, #8]
    cad0:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    cad4:	9b01      	ldr	r3, [sp, #4]
    cad6:	681a      	ldr	r2, [r3, #0]
    cad8:	9b02      	ldr	r3, [sp, #8]
    cada:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    cade:	9b02      	ldr	r3, [sp, #8]
    cae0:	2201      	movs	r2, #1
    cae2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    cae6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    caea:	4905      	ldr	r1, [pc, #20]	; (cb00 <FlexCAN_Ip_Init_Privileged+0xf4>)
    caec:	9a02      	ldr	r2, [sp, #8]
    caee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    caf2:	9b06      	ldr	r3, [sp, #24]
}
    caf4:	4618      	mov	r0, r3
    caf6:	b009      	add	sp, #36	; 0x24
    caf8:	f85d fb04 	ldr.w	pc, [sp], #4
    cafc:	00018530 	.word	0x00018530
    cb00:	1fff935c 	.word	0x1fff935c

0000cb04 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    cb04:	b500      	push	{lr}
    cb06:	b08b      	sub	sp, #44	; 0x2c
    cb08:	9204      	str	r2, [sp, #16]
    cb0a:	9303      	str	r3, [sp, #12]
    cb0c:	4603      	mov	r3, r0
    cb0e:	f88d 3017 	strb.w	r3, [sp, #23]
    cb12:	460b      	mov	r3, r1
    cb14:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    cb18:	2301      	movs	r3, #1
    cb1a:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cb1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cb20:	4a1c      	ldr	r2, [pc, #112]	; (cb94 <FlexCAN_Ip_Send+0x90>)
    cb22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb26:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cb28:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cb2c:	4a1a      	ldr	r2, [pc, #104]	; (cb98 <FlexCAN_Ip_Send+0x94>)
    cb2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb32:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    cb34:	9808      	ldr	r0, [sp, #32]
    cb36:	f7ff f8f4 	bl	bd22 <FlexCAN_IsListenOnlyModeEnabled>
    cb3a:	4603      	mov	r3, r0
    cb3c:	f083 0301 	eor.w	r3, r3, #1
    cb40:	b2db      	uxtb	r3, r3
    cb42:	2b00      	cmp	r3, #0
    cb44:	d021      	beq.n	cb8a <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    cb46:	f89d 1016 	ldrb.w	r1, [sp, #22]
    cb4a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    cb4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb50:	9300      	str	r3, [sp, #0]
    cb52:	9b03      	ldr	r3, [sp, #12]
    cb54:	9a04      	ldr	r2, [sp, #16]
    cb56:	f7ff fb4b 	bl	c1f0 <FlexCAN_StartSendData>
    cb5a:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    cb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb5e:	2b00      	cmp	r3, #0
    cb60:	d113      	bne.n	cb8a <FlexCAN_Ip_Send+0x86>
    cb62:	9b04      	ldr	r3, [sp, #16]
    cb64:	7b1b      	ldrb	r3, [r3, #12]
    cb66:	f083 0301 	eor.w	r3, r3, #1
    cb6a:	b2db      	uxtb	r3, r3
    cb6c:	2b00      	cmp	r3, #0
    cb6e:	d00c      	beq.n	cb8a <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cb70:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cb74:	9b07      	ldr	r3, [sp, #28]
    cb76:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cb7a:	f89d 1017 	ldrb.w	r1, [sp, #23]
    cb7e:	9300      	str	r3, [sp, #0]
    cb80:	2301      	movs	r3, #1
    cb82:	9808      	ldr	r0, [sp, #32]
    cb84:	f002 f9b6 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
    cb88:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    cb8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cb8c:	4618      	mov	r0, r3
    cb8e:	b00b      	add	sp, #44	; 0x2c
    cb90:	f85d fb04 	ldr.w	pc, [sp], #4
    cb94:	00018530 	.word	0x00018530
    cb98:	1fff935c 	.word	0x1fff935c

0000cb9c <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    cb9c:	b500      	push	{lr}
    cb9e:	b08b      	sub	sp, #44	; 0x2c
    cba0:	9202      	str	r2, [sp, #8]
    cba2:	9301      	str	r3, [sp, #4]
    cba4:	4603      	mov	r3, r0
    cba6:	f88d 300f 	strb.w	r3, [sp, #15]
    cbaa:	460b      	mov	r3, r1
    cbac:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    cbb0:	2300      	movs	r3, #0
    cbb2:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cbb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cbb8:	4a19      	ldr	r2, [pc, #100]	; (cc20 <FlexCAN_Ip_ConfigRxMb+0x84>)
    cbba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbbe:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    cbc0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cbc4:	4619      	mov	r1, r3
    cbc6:	9808      	ldr	r0, [sp, #32]
    cbc8:	f7fe ff2c 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    cbcc:	9b02      	ldr	r3, [sp, #8]
    cbce:	685b      	ldr	r3, [r3, #4]
    cbd0:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    cbd2:	9b02      	ldr	r3, [sp, #8]
    cbd4:	681b      	ldr	r3, [r3, #0]
    cbd6:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    cbd8:	9b02      	ldr	r3, [sp, #8]
    cbda:	7a1b      	ldrb	r3, [r3, #8]
    cbdc:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    cbe0:	230f      	movs	r3, #15
    cbe2:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cbe4:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cbe8:	aa04      	add	r2, sp, #16
    cbea:	9b01      	ldr	r3, [sp, #4]
    cbec:	9808      	ldr	r0, [sp, #32]
    cbee:	f002 fa25 	bl	f03c <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    cbf2:	2300      	movs	r3, #0
    cbf4:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cbf6:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cbfa:	aa04      	add	r2, sp, #16
    cbfc:	9b01      	ldr	r3, [sp, #4]
    cbfe:	9808      	ldr	r0, [sp, #32]
    cc00:	f002 fa1c 	bl	f03c <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    cc04:	2304      	movs	r3, #4
    cc06:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cc08:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cc0c:	aa04      	add	r2, sp, #16
    cc0e:	9b01      	ldr	r3, [sp, #4]
    cc10:	9808      	ldr	r0, [sp, #32]
    cc12:	f002 fa13 	bl	f03c <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    cc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cc18:	4618      	mov	r0, r3
    cc1a:	b00b      	add	sp, #44	; 0x2c
    cc1c:	f85d fb04 	ldr.w	pc, [sp], #4
    cc20:	00018530 	.word	0x00018530

0000cc24 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    cc24:	b500      	push	{lr}
    cc26:	b089      	sub	sp, #36	; 0x24
    cc28:	9202      	str	r2, [sp, #8]
    cc2a:	461a      	mov	r2, r3
    cc2c:	4603      	mov	r3, r0
    cc2e:	f88d 300f 	strb.w	r3, [sp, #15]
    cc32:	460b      	mov	r3, r1
    cc34:	f88d 300e 	strb.w	r3, [sp, #14]
    cc38:	4613      	mov	r3, r2
    cc3a:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cc3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc42:	4a18      	ldr	r2, [pc, #96]	; (cca4 <FlexCAN_Ip_Receive+0x80>)
    cc44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc48:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cc4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc4e:	4a16      	ldr	r2, [pc, #88]	; (cca8 <FlexCAN_Ip_Receive+0x84>)
    cc50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc54:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    cc56:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cc5a:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cc5e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cc62:	9a02      	ldr	r2, [sp, #8]
    cc64:	f7ff fa86 	bl	c174 <FlexCAN_StartRxMessageBufferData>
    cc68:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    cc6a:	9b07      	ldr	r3, [sp, #28]
    cc6c:	2b00      	cmp	r3, #0
    cc6e:	d113      	bne.n	cc98 <FlexCAN_Ip_Receive+0x74>
    cc70:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cc74:	f083 0301 	eor.w	r3, r3, #1
    cc78:	b2db      	uxtb	r3, r3
    cc7a:	2b00      	cmp	r3, #0
    cc7c:	d00c      	beq.n	cc98 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cc7e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cc82:	9b05      	ldr	r3, [sp, #20]
    cc84:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cc88:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cc8c:	9300      	str	r3, [sp, #0]
    cc8e:	2301      	movs	r3, #1
    cc90:	9806      	ldr	r0, [sp, #24]
    cc92:	f002 f92f 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
    cc96:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    cc98:	9b07      	ldr	r3, [sp, #28]
}
    cc9a:	4618      	mov	r0, r3
    cc9c:	b009      	add	sp, #36	; 0x24
    cc9e:	f85d fb04 	ldr.w	pc, [sp], #4
    cca2:	bf00      	nop
    cca4:	00018530 	.word	0x00018530
    cca8:	1fff935c 	.word	0x1fff935c

0000ccac <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    ccac:	b500      	push	{lr}
    ccae:	b08b      	sub	sp, #44	; 0x2c
    ccb0:	9202      	str	r2, [sp, #8]
    ccb2:	461a      	mov	r2, r3
    ccb4:	4603      	mov	r3, r0
    ccb6:	f88d 300f 	strb.w	r3, [sp, #15]
    ccba:	460b      	mov	r3, r1
    ccbc:	f88d 300e 	strb.w	r3, [sp, #14]
    ccc0:	4613      	mov	r3, r2
    ccc2:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    ccc6:	2300      	movs	r3, #0
    ccc8:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    ccca:	2300      	movs	r3, #0
    cccc:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ccce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ccd4:	fb02 f303 	mul.w	r3, r2, r3
    ccd8:	2100      	movs	r1, #0
    ccda:	4618      	mov	r0, r3
    ccdc:	f7f5 f8da 	bl	1e94 <OsIf_MicrosToTicks>
    cce0:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cce2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cce6:	4a4c      	ldr	r2, [pc, #304]	; (ce18 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    cce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccec:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ccee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ccf2:	4a4a      	ldr	r2, [pc, #296]	; (ce1c <FlexCAN_Ip_ReceiveBlocking+0x170>)
    ccf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccf8:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    ccfa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ccfe:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cd02:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cd06:	9a02      	ldr	r2, [sp, #8]
    cd08:	f7ff fa34 	bl	c174 <FlexCAN_StartRxMessageBufferData>
    cd0c:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    cd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd10:	2b00      	cmp	r3, #0
    cd12:	d113      	bne.n	cd3c <FlexCAN_Ip_ReceiveBlocking+0x90>
    cd14:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd18:	f083 0301 	eor.w	r3, r3, #1
    cd1c:	b2db      	uxtb	r3, r3
    cd1e:	2b00      	cmp	r3, #0
    cd20:	d00c      	beq.n	cd3c <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cd22:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cd26:	9b06      	ldr	r3, [sp, #24]
    cd28:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cd2c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cd30:	9300      	str	r3, [sp, #0]
    cd32:	2301      	movs	r3, #1
    cd34:	9805      	ldr	r0, [sp, #20]
    cd36:	f002 f8dd 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
    cd3a:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    cd3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd3e:	2b00      	cmp	r3, #0
    cd40:	d133      	bne.n	cdaa <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cd42:	2000      	movs	r0, #0
    cd44:	f7f5 f85a 	bl	1dfc <OsIf_GetCounter>
    cd48:	4603      	mov	r3, r0
    cd4a:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    cd4c:	e024      	b.n	cd98 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    cd4e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd52:	2b00      	cmp	r3, #0
    cd54:	d010      	beq.n	cd78 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    cd56:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cd5a:	4619      	mov	r1, r3
    cd5c:	9805      	ldr	r0, [sp, #20]
    cd5e:	f7fe fe74 	bl	ba4a <FlexCAN_GetBuffStatusFlag>
    cd62:	4603      	mov	r3, r0
    cd64:	2b00      	cmp	r3, #0
    cd66:	d007      	beq.n	cd78 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    cd68:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cd6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd70:	4611      	mov	r1, r2
    cd72:	4618      	mov	r0, r3
    cd74:	f7ff fb20 	bl	c3b8 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cd78:	ab04      	add	r3, sp, #16
    cd7a:	2100      	movs	r1, #0
    cd7c:	4618      	mov	r0, r3
    cd7e:	f7f5 f856 	bl	1e2e <OsIf_GetElapsed>
    cd82:	4602      	mov	r2, r0
    cd84:	9b08      	ldr	r3, [sp, #32]
    cd86:	4413      	add	r3, r2
    cd88:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    cd8a:	9a08      	ldr	r2, [sp, #32]
    cd8c:	9b07      	ldr	r3, [sp, #28]
    cd8e:	429a      	cmp	r2, r3
    cd90:	d302      	bcc.n	cd98 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    cd92:	2303      	movs	r3, #3
    cd94:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    cd96:	e008      	b.n	cdaa <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    cd98:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cd9c:	9a06      	ldr	r2, [sp, #24]
    cd9e:	011b      	lsls	r3, r3, #4
    cda0:	4413      	add	r3, r2
    cda2:	3304      	adds	r3, #4
    cda4:	681b      	ldr	r3, [r3, #0]
    cda6:	2b01      	cmp	r3, #1
    cda8:	d0d1      	beq.n	cd4e <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    cdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdac:	2b03      	cmp	r3, #3
    cdae:	d112      	bne.n	cdd6 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    cdb0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cdb4:	f083 0301 	eor.w	r3, r3, #1
    cdb8:	b2db      	uxtb	r3, r3
    cdba:	2b00      	cmp	r3, #0
    cdbc:	d00b      	beq.n	cdd6 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    cdbe:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cdc2:	9b06      	ldr	r3, [sp, #24]
    cdc4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cdc8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cdcc:	9300      	str	r3, [sp, #0]
    cdce:	2300      	movs	r3, #0
    cdd0:	9805      	ldr	r0, [sp, #20]
    cdd2:	f002 f88f 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    cdd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdd8:	2b04      	cmp	r3, #4
    cdda:	d018      	beq.n	ce0e <FlexCAN_Ip_ReceiveBlocking+0x162>
    cddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdde:	2b02      	cmp	r3, #2
    cde0:	d015      	beq.n	ce0e <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    cde2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cde6:	9a06      	ldr	r2, [sp, #24]
    cde8:	011b      	lsls	r3, r3, #4
    cdea:	4413      	add	r3, r2
    cdec:	3304      	adds	r3, #4
    cdee:	681b      	ldr	r3, [r3, #0]
    cdf0:	2b00      	cmp	r3, #0
    cdf2:	d102      	bne.n	cdfa <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    cdf4:	2300      	movs	r3, #0
    cdf6:	9309      	str	r3, [sp, #36]	; 0x24
    cdf8:	e009      	b.n	ce0e <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    cdfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cdfe:	9a06      	ldr	r2, [sp, #24]
    ce00:	011b      	lsls	r3, r3, #4
    ce02:	4413      	add	r3, r2
    ce04:	3304      	adds	r3, #4
    ce06:	2200      	movs	r2, #0
    ce08:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    ce0a:	2303      	movs	r3, #3
    ce0c:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    ce0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    ce10:	4618      	mov	r0, r3
    ce12:	b00b      	add	sp, #44	; 0x2c
    ce14:	f85d fb04 	ldr.w	pc, [sp], #4
    ce18:	1fff935c 	.word	0x1fff935c
    ce1c:	00018530 	.word	0x00018530

0000ce20 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    ce20:	b500      	push	{lr}
    ce22:	b085      	sub	sp, #20
    ce24:	4603      	mov	r3, r0
    ce26:	9100      	str	r1, [sp, #0]
    ce28:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ce2c:	2300      	movs	r3, #0
    ce2e:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    ce30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ce34:	9900      	ldr	r1, [sp, #0]
    ce36:	4618      	mov	r0, r3
    ce38:	f7ff fa5e 	bl	c2f8 <FlexCAN_StartRxMessageFifoData>
    ce3c:	9003      	str	r0, [sp, #12]
    }
    return result;
    ce3e:	9b03      	ldr	r3, [sp, #12]
}
    ce40:	4618      	mov	r0, r3
    ce42:	b005      	add	sp, #20
    ce44:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce48 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    ce48:	b500      	push	{lr}
    ce4a:	b087      	sub	sp, #28
    ce4c:	4603      	mov	r3, r0
    ce4e:	9102      	str	r1, [sp, #8]
    ce50:	9201      	str	r2, [sp, #4]
    ce52:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ce56:	2300      	movs	r3, #0
    ce58:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    ce5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce5e:	9902      	ldr	r1, [sp, #8]
    ce60:	4618      	mov	r0, r3
    ce62:	f7ff fa49 	bl	c2f8 <FlexCAN_StartRxMessageFifoData>
    ce66:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    ce68:	9b05      	ldr	r3, [sp, #20]
    ce6a:	2b00      	cmp	r3, #0
    ce6c:	d106      	bne.n	ce7c <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    ce6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce72:	9901      	ldr	r1, [sp, #4]
    ce74:	4618      	mov	r0, r3
    ce76:	f7ff f8e2 	bl	c03e <FlexCAN_ProccessLegacyRxFIFO>
    ce7a:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    ce7c:	9b05      	ldr	r3, [sp, #20]
}
    ce7e:	4618      	mov	r0, r3
    ce80:	b007      	add	sp, #28
    ce82:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce86 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    ce86:	b500      	push	{lr}
    ce88:	b089      	sub	sp, #36	; 0x24
    ce8a:	4603      	mov	r3, r0
    ce8c:	9102      	str	r1, [sp, #8]
    ce8e:	9201      	str	r2, [sp, #4]
    ce90:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ce94:	2300      	movs	r3, #0
    ce96:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ce98:	2300      	movs	r3, #0
    ce9a:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ce9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cea0:	4a1c      	ldr	r2, [pc, #112]	; (cf14 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    cea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cea6:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    cea8:	9805      	ldr	r0, [sp, #20]
    ceaa:	f7fe fd61 	bl	b970 <FlexCAN_IsEnabled>
    ceae:	4603      	mov	r3, r0
    ceb0:	2b00      	cmp	r3, #0
    ceb2:	bf14      	ite	ne
    ceb4:	2301      	movne	r3, #1
    ceb6:	2300      	moveq	r3, #0
    ceb8:	b2db      	uxtb	r3, r3
    ceba:	f083 0301 	eor.w	r3, r3, #1
    cebe:	b2db      	uxtb	r3, r3
    cec0:	f88d 3013 	strb.w	r3, [sp, #19]
    cec4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cec8:	f003 0301 	and.w	r3, r3, #1
    cecc:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    ced0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ced4:	2b00      	cmp	r3, #0
    ced6:	d003      	beq.n	cee0 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    ced8:	9805      	ldr	r0, [sp, #20]
    ceda:	f001 fd6b 	bl	e9b4 <FlexCAN_Enable>
    cede:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    cee0:	9b07      	ldr	r3, [sp, #28]
    cee2:	2b00      	cmp	r3, #0
    cee4:	d104      	bne.n	cef0 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    cee6:	9a01      	ldr	r2, [sp, #4]
    cee8:	9902      	ldr	r1, [sp, #8]
    ceea:	9805      	ldr	r0, [sp, #20]
    ceec:	f002 fba5 	bl	f63a <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    cef0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cef4:	2b00      	cmp	r3, #0
    cef6:	d008      	beq.n	cf0a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    cef8:	9805      	ldr	r0, [sp, #20]
    cefa:	f001 fdd9 	bl	eab0 <FlexCAN_Disable>
    cefe:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    cf00:	9b06      	ldr	r3, [sp, #24]
    cf02:	2b00      	cmp	r3, #0
    cf04:	d001      	beq.n	cf0a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    cf06:	9b06      	ldr	r3, [sp, #24]
    cf08:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    cf0a:	9b07      	ldr	r3, [sp, #28]
}
    cf0c:	4618      	mov	r0, r3
    cf0e:	b009      	add	sp, #36	; 0x24
    cf10:	f85d fb04 	ldr.w	pc, [sp], #4
    cf14:	00018530 	.word	0x00018530

0000cf18 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    cf18:	b500      	push	{lr}
    cf1a:	b08f      	sub	sp, #60	; 0x3c
    cf1c:	9204      	str	r2, [sp, #16]
    cf1e:	9303      	str	r3, [sp, #12]
    cf20:	4603      	mov	r3, r0
    cf22:	f88d 3017 	strb.w	r3, [sp, #23]
    cf26:	460b      	mov	r3, r1
    cf28:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cf2c:	2300      	movs	r3, #0
    cf2e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    cf30:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cf34:	4a27      	ldr	r2, [pc, #156]	; (cfd4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    cf36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf3a:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    cf3c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cf40:	4a25      	ldr	r2, [pc, #148]	; (cfd8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    cf42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf46:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    cf48:	2300      	movs	r3, #0
    cf4a:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    cf4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf4e:	2b00      	cmp	r3, #0
    cf50:	d13a      	bne.n	cfc8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    cf52:	9b04      	ldr	r3, [sp, #16]
    cf54:	685b      	ldr	r3, [r3, #4]
    cf56:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    cf58:	9b04      	ldr	r3, [sp, #16]
    cf5a:	681b      	ldr	r3, [r3, #0]
    cf5c:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    cf5e:	230a      	movs	r3, #10
    cf60:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    cf62:	2300      	movs	r3, #0
    cf64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    cf68:	2300      	movs	r3, #0
    cf6a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    cf6e:	2300      	movs	r3, #0
    cf70:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    cf74:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cf78:	4619      	mov	r1, r3
    cf7a:	980c      	ldr	r0, [sp, #48]	; 0x30
    cf7c:	f7fe fd52 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    cf80:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cf84:	4619      	mov	r1, r3
    cf86:	980c      	ldr	r0, [sp, #48]	; 0x30
    cf88:	f001 fc2c 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    cf8c:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    cf8e:	9b04      	ldr	r3, [sp, #16]
    cf90:	7adb      	ldrb	r3, [r3, #11]
    cf92:	a906      	add	r1, sp, #24
    cf94:	9300      	str	r3, [sp, #0]
    cf96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf98:	9a03      	ldr	r2, [sp, #12]
    cf9a:	980a      	ldr	r0, [sp, #40]	; 0x28
    cf9c:	f002 f974 	bl	f288 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    cfa0:	9b04      	ldr	r3, [sp, #16]
    cfa2:	7b1b      	ldrb	r3, [r3, #12]
    cfa4:	f083 0301 	eor.w	r3, r3, #1
    cfa8:	b2db      	uxtb	r3, r3
    cfaa:	2b00      	cmp	r3, #0
    cfac:	d00c      	beq.n	cfc8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    cfae:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cfb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfb4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cfb8:	f89d 1017 	ldrb.w	r1, [sp, #23]
    cfbc:	9300      	str	r3, [sp, #0]
    cfbe:	2301      	movs	r3, #1
    cfc0:	980c      	ldr	r0, [sp, #48]	; 0x30
    cfc2:	f001 ff97 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
    cfc6:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    cfc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    cfca:	4618      	mov	r0, r3
    cfcc:	b00f      	add	sp, #60	; 0x3c
    cfce:	f85d fb04 	ldr.w	pc, [sp], #4
    cfd2:	bf00      	nop
    cfd4:	00018530 	.word	0x00018530
    cfd8:	1fff935c 	.word	0x1fff935c

0000cfdc <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    cfdc:	b084      	sub	sp, #16
    cfde:	4603      	mov	r3, r0
    cfe0:	460a      	mov	r2, r1
    cfe2:	f88d 3007 	strb.w	r3, [sp, #7]
    cfe6:	4613      	mov	r3, r2
    cfe8:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cfec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cff0:	4a0d      	ldr	r2, [pc, #52]	; (d028 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    cff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff6:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    cff8:	2301      	movs	r3, #1
    cffa:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    cffc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d000:	2b1f      	cmp	r3, #31
    d002:	d80d      	bhi.n	d020 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    d004:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d008:	9a02      	ldr	r2, [sp, #8]
    d00a:	011b      	lsls	r3, r3, #4
    d00c:	4413      	add	r3, r2
    d00e:	3304      	adds	r3, #4
    d010:	681b      	ldr	r3, [r3, #0]
    d012:	2b00      	cmp	r3, #0
    d014:	d102      	bne.n	d01c <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    d016:	2300      	movs	r3, #0
    d018:	9303      	str	r3, [sp, #12]
    d01a:	e001      	b.n	d020 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    d01c:	2302      	movs	r3, #2
    d01e:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    d020:	9b03      	ldr	r3, [sp, #12]
}
    d022:	4618      	mov	r0, r3
    d024:	b004      	add	sp, #16
    d026:	4770      	bx	lr
    d028:	1fff935c 	.word	0x1fff935c

0000d02c <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    d02c:	b500      	push	{lr}
    d02e:	b087      	sub	sp, #28
    d030:	4603      	mov	r3, r0
    d032:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d036:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d03a:	4a1d      	ldr	r2, [pc, #116]	; (d0b0 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    d03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d040:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d042:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d046:	4a1b      	ldr	r2, [pc, #108]	; (d0b4 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    d048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d04c:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    d04e:	9b04      	ldr	r3, [sp, #16]
    d050:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    d054:	2b00      	cmp	r3, #0
    d056:	d120      	bne.n	d09a <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    d058:	9b04      	ldr	r3, [sp, #16]
    d05a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d05e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d062:	9300      	str	r3, [sp, #0]
    d064:	2300      	movs	r3, #0
    d066:	2205      	movs	r2, #5
    d068:	9805      	ldr	r0, [sp, #20]
    d06a:	f001 ff43 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    d06e:	9b04      	ldr	r3, [sp, #16]
    d070:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d074:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d078:	9300      	str	r3, [sp, #0]
    d07a:	2300      	movs	r3, #0
    d07c:	2206      	movs	r2, #6
    d07e:	9805      	ldr	r0, [sp, #20]
    d080:	f001 ff38 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    d084:	9b04      	ldr	r3, [sp, #16]
    d086:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d08a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d08e:	9300      	str	r3, [sp, #0]
    d090:	2300      	movs	r3, #0
    d092:	2207      	movs	r2, #7
    d094:	9805      	ldr	r0, [sp, #20]
    d096:	f001 ff2d 	bl	eef4 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    d09a:	9b04      	ldr	r3, [sp, #16]
    d09c:	2200      	movs	r2, #0
    d09e:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    d0a0:	9b04      	ldr	r3, [sp, #16]
    d0a2:	2200      	movs	r2, #0
    d0a4:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    d0a6:	bf00      	nop
    d0a8:	b007      	add	sp, #28
    d0aa:	f85d fb04 	ldr.w	pc, [sp], #4
    d0ae:	bf00      	nop
    d0b0:	00018530 	.word	0x00018530
    d0b4:	1fff935c 	.word	0x1fff935c

0000d0b8 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    d0b8:	b500      	push	{lr}
    d0ba:	b08b      	sub	sp, #44	; 0x2c
    d0bc:	4603      	mov	r3, r0
    d0be:	9102      	str	r1, [sp, #8]
    d0c0:	9201      	str	r2, [sp, #4]
    d0c2:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    d0c6:	2300      	movs	r3, #0
    d0c8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    d0ca:	2300      	movs	r3, #0
    d0cc:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d0ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d0d2:	4a3f      	ldr	r2, [pc, #252]	; (d1d0 <FlexCAN_IRQHandler+0x118>)
    d0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0d8:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d0da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d0de:	4a3d      	ldr	r2, [pc, #244]	; (d1d4 <FlexCAN_IRQHandler+0x11c>)
    d0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0e4:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    d0e6:	9b01      	ldr	r3, [sp, #4]
    d0e8:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    d0ea:	9b05      	ldr	r3, [sp, #20]
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	d05c      	beq.n	d1aa <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d0f0:	9907      	ldr	r1, [sp, #28]
    d0f2:	9806      	ldr	r0, [sp, #24]
    d0f4:	f7fe fe47 	bl	bd86 <FlexCAN_GetMsgBuffIntStatusFlag>
    d0f8:	4603      	mov	r3, r0
    d0fa:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d0fc:	e008      	b.n	d110 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    d0fe:	9b07      	ldr	r3, [sp, #28]
    d100:	3b01      	subs	r3, #1
    d102:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d104:	9907      	ldr	r1, [sp, #28]
    d106:	9806      	ldr	r0, [sp, #24]
    d108:	f7fe fe3d 	bl	bd86 <FlexCAN_GetMsgBuffIntStatusFlag>
    d10c:	4603      	mov	r3, r0
    d10e:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d110:	9b08      	ldr	r3, [sp, #32]
    d112:	2b00      	cmp	r3, #0
    d114:	d103      	bne.n	d11e <FlexCAN_IRQHandler+0x66>
    d116:	9a07      	ldr	r2, [sp, #28]
    d118:	9b02      	ldr	r3, [sp, #8]
    d11a:	429a      	cmp	r2, r3
    d11c:	d8ef      	bhi.n	d0fe <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    d11e:	9b08      	ldr	r3, [sp, #32]
    d120:	2b00      	cmp	r3, #0
    d122:	d050      	beq.n	d1c6 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    d124:	9b07      	ldr	r3, [sp, #28]
    d126:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d128:	9b05      	ldr	r3, [sp, #20]
    d12a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d12e:	2b00      	cmp	r3, #0
    d130:	d00b      	beq.n	d14a <FlexCAN_IRQHandler+0x92>
    d132:	9b07      	ldr	r3, [sp, #28]
    d134:	2b07      	cmp	r3, #7
    d136:	d808      	bhi.n	d14a <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    d138:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d13c:	9907      	ldr	r1, [sp, #28]
    d13e:	4618      	mov	r0, r3
    d140:	f7ff fac2 	bl	c6c8 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    d144:	2300      	movs	r3, #0
    d146:	9309      	str	r3, [sp, #36]	; 0x24
    d148:	e00d      	b.n	d166 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    d14a:	9a05      	ldr	r2, [sp, #20]
    d14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d14e:	011b      	lsls	r3, r3, #4
    d150:	4413      	add	r3, r2
    d152:	3304      	adds	r3, #4
    d154:	681b      	ldr	r3, [r3, #0]
    d156:	2b01      	cmp	r3, #1
    d158:	d105      	bne.n	d166 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d15a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d15e:	9907      	ldr	r1, [sp, #28]
    d160:	4618      	mov	r0, r3
    d162:	f7ff f929 	bl	c3b8 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    d166:	9a05      	ldr	r2, [sp, #20]
    d168:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d16a:	011b      	lsls	r3, r3, #4
    d16c:	4413      	add	r3, r2
    d16e:	3304      	adds	r3, #4
    d170:	681b      	ldr	r3, [r3, #0]
    d172:	2b02      	cmp	r3, #2
    d174:	d105      	bne.n	d182 <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    d176:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d17a:	9907      	ldr	r1, [sp, #28]
    d17c:	4618      	mov	r0, r3
    d17e:	f7ff fa09 	bl	c594 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    d182:	9907      	ldr	r1, [sp, #28]
    d184:	9806      	ldr	r0, [sp, #24]
    d186:	f7fe fdfe 	bl	bd86 <FlexCAN_GetMsgBuffIntStatusFlag>
    d18a:	4603      	mov	r3, r0
    d18c:	2b00      	cmp	r3, #0
    d18e:	d01a      	beq.n	d1c6 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    d190:	9a05      	ldr	r2, [sp, #20]
    d192:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d194:	011b      	lsls	r3, r3, #4
    d196:	4413      	add	r3, r2
    d198:	3304      	adds	r3, #4
    d19a:	681b      	ldr	r3, [r3, #0]
    d19c:	2b00      	cmp	r3, #0
    d19e:	d112      	bne.n	d1c6 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d1a0:	9907      	ldr	r1, [sp, #28]
    d1a2:	9806      	ldr	r0, [sp, #24]
    d1a4:	f7fe fc3e 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    d1a8:	e00d      	b.n	d1c6 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d1aa:	9b02      	ldr	r3, [sp, #8]
    d1ac:	9307      	str	r3, [sp, #28]
    d1ae:	e006      	b.n	d1be <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d1b0:	9907      	ldr	r1, [sp, #28]
    d1b2:	9806      	ldr	r0, [sp, #24]
    d1b4:	f7fe fc36 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d1b8:	9b07      	ldr	r3, [sp, #28]
    d1ba:	3301      	adds	r3, #1
    d1bc:	9307      	str	r3, [sp, #28]
    d1be:	9a07      	ldr	r2, [sp, #28]
    d1c0:	9b01      	ldr	r3, [sp, #4]
    d1c2:	429a      	cmp	r2, r3
    d1c4:	d9f4      	bls.n	d1b0 <FlexCAN_IRQHandler+0xf8>
}
    d1c6:	bf00      	nop
    d1c8:	b00b      	add	sp, #44	; 0x2c
    d1ca:	f85d fb04 	ldr.w	pc, [sp], #4
    d1ce:	bf00      	nop
    d1d0:	00018530 	.word	0x00018530
    d1d4:	1fff935c 	.word	0x1fff935c

0000d1d8 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    d1d8:	b084      	sub	sp, #16
    d1da:	4603      	mov	r3, r0
    d1dc:	9100      	str	r1, [sp, #0]
    d1de:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d1e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d1e6:	4a05      	ldr	r2, [pc, #20]	; (d1fc <FlexCAN_Ip_ClearErrorStatus+0x24>)
    d1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1ec:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    d1ee:	9b03      	ldr	r3, [sp, #12]
    d1f0:	9a00      	ldr	r2, [sp, #0]
    d1f2:	621a      	str	r2, [r3, #32]
}
    d1f4:	bf00      	nop
    d1f6:	b004      	add	sp, #16
    d1f8:	4770      	bx	lr
    d1fa:	bf00      	nop
    d1fc:	00018530 	.word	0x00018530

0000d200 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    d200:	b084      	sub	sp, #16
    d202:	4603      	mov	r3, r0
    d204:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d208:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d20c:	4a04      	ldr	r2, [pc, #16]	; (d220 <FlexCAN_Ip_GetErrorStatus+0x20>)
    d20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d212:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    d214:	9b03      	ldr	r3, [sp, #12]
    d216:	6a1b      	ldr	r3, [r3, #32]
}
    d218:	4618      	mov	r0, r3
    d21a:	b004      	add	sp, #16
    d21c:	4770      	bx	lr
    d21e:	bf00      	nop
    d220:	00018530 	.word	0x00018530

0000d224 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    d224:	b084      	sub	sp, #16
    d226:	4603      	mov	r3, r0
    d228:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d22c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d230:	4a04      	ldr	r2, [pc, #16]	; (d244 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    d232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d236:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    d238:	9b03      	ldr	r3, [sp, #12]
    d23a:	69db      	ldr	r3, [r3, #28]
    d23c:	b2db      	uxtb	r3, r3
}
    d23e:	4618      	mov	r0, r3
    d240:	b004      	add	sp, #16
    d242:	4770      	bx	lr
    d244:	00018530 	.word	0x00018530

0000d248 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    d248:	b084      	sub	sp, #16
    d24a:	4603      	mov	r3, r0
    d24c:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d250:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d254:	4a05      	ldr	r2, [pc, #20]	; (d26c <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    d256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d25a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    d25c:	9b03      	ldr	r3, [sp, #12]
    d25e:	69db      	ldr	r3, [r3, #28]
    d260:	0a1b      	lsrs	r3, r3, #8
    d262:	b2db      	uxtb	r3, r3
}
    d264:	4618      	mov	r0, r3
    d266:	b004      	add	sp, #16
    d268:	4770      	bx	lr
    d26a:	bf00      	nop
    d26c:	00018530 	.word	0x00018530

0000d270 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    d270:	b510      	push	{r4, lr}
    d272:	b086      	sub	sp, #24
    d274:	4603      	mov	r3, r0
    d276:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d27a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d27e:	4a29      	ldr	r2, [pc, #164]	; (d324 <FlexCAN_Error_IRQHandler+0xb4>)
    d280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d284:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d286:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d28a:	4a27      	ldr	r2, [pc, #156]	; (d328 <FlexCAN_Error_IRQHandler+0xb8>)
    d28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d290:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d292:	2300      	movs	r3, #0
    d294:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    d296:	9b03      	ldr	r3, [sp, #12]
    d298:	2b00      	cmp	r3, #0
    d29a:	d03d      	beq.n	d318 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    d29c:	9b04      	ldr	r3, [sp, #16]
    d29e:	6a1b      	ldr	r3, [r3, #32]
    d2a0:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    d2a2:	9b05      	ldr	r3, [sp, #20]
    d2a4:	f003 0302 	and.w	r3, r3, #2
    d2a8:	2b00      	cmp	r3, #0
    d2aa:	d019      	beq.n	d2e0 <FlexCAN_Error_IRQHandler+0x70>
    d2ac:	9b04      	ldr	r3, [sp, #16]
    d2ae:	685b      	ldr	r3, [r3, #4]
    d2b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	d013      	beq.n	d2e0 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    d2b8:	9b04      	ldr	r3, [sp, #16]
    d2ba:	2202      	movs	r2, #2
    d2bc:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d2be:	9b03      	ldr	r3, [sp, #12]
    d2c0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d2c4:	2b00      	cmp	r3, #0
    d2c6:	d00b      	beq.n	d2e0 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    d2c8:	9b03      	ldr	r3, [sp, #12]
    d2ca:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d2ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d2d2:	9b03      	ldr	r3, [sp, #12]
    d2d4:	9a05      	ldr	r2, [sp, #20]
    d2d6:	2105      	movs	r1, #5
    d2d8:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    d2da:	9b04      	ldr	r3, [sp, #16]
    d2dc:	6a1b      	ldr	r3, [r3, #32]
    d2de:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    d2e0:	9b05      	ldr	r3, [sp, #20]
    d2e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    d2e6:	2b00      	cmp	r3, #0
    d2e8:	d019      	beq.n	d31e <FlexCAN_Error_IRQHandler+0xae>
    d2ea:	9b04      	ldr	r3, [sp, #16]
    d2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d2ee:	2b00      	cmp	r3, #0
    d2f0:	da15      	bge.n	d31e <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    d2f2:	9b04      	ldr	r3, [sp, #16]
    d2f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    d2f8:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d2fa:	9b03      	ldr	r3, [sp, #12]
    d2fc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d300:	2b00      	cmp	r3, #0
    d302:	d00c      	beq.n	d31e <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    d304:	9b03      	ldr	r3, [sp, #12]
    d306:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d30a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d30e:	9b03      	ldr	r3, [sp, #12]
    d310:	9a05      	ldr	r2, [sp, #20]
    d312:	2106      	movs	r1, #6
    d314:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    d316:	e002      	b.n	d31e <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    d318:	9b04      	ldr	r3, [sp, #16]
    d31a:	4a04      	ldr	r2, [pc, #16]	; (d32c <FlexCAN_Error_IRQHandler+0xbc>)
    d31c:	621a      	str	r2, [r3, #32]
}
    d31e:	bf00      	nop
    d320:	b006      	add	sp, #24
    d322:	bd10      	pop	{r4, pc}
    d324:	00018530 	.word	0x00018530
    d328:	1fff935c 	.word	0x1fff935c
    d32c:	00300002 	.word	0x00300002

0000d330 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    d330:	b510      	push	{r4, lr}
    d332:	b086      	sub	sp, #24
    d334:	4603      	mov	r3, r0
    d336:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d33a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d33e:	4a3a      	ldr	r2, [pc, #232]	; (d428 <FlexCAN_BusOff_IRQHandler+0xf8>)
    d340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d344:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d346:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d34a:	4a38      	ldr	r2, [pc, #224]	; (d42c <FlexCAN_BusOff_IRQHandler+0xfc>)
    d34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d350:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d352:	2300      	movs	r3, #0
    d354:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    d356:	9b03      	ldr	r3, [sp, #12]
    d358:	2b00      	cmp	r3, #0
    d35a:	d05f      	beq.n	d41c <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    d35c:	9b04      	ldr	r3, [sp, #16]
    d35e:	6a1b      	ldr	r3, [r3, #32]
    d360:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    d362:	9b05      	ldr	r3, [sp, #20]
    d364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d368:	2b00      	cmp	r3, #0
    d36a:	d01a      	beq.n	d3a2 <FlexCAN_BusOff_IRQHandler+0x72>
    d36c:	9b04      	ldr	r3, [sp, #16]
    d36e:	685b      	ldr	r3, [r3, #4]
    d370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    d374:	2b00      	cmp	r3, #0
    d376:	d014      	beq.n	d3a2 <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    d378:	9b04      	ldr	r3, [sp, #16]
    d37a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    d37e:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d380:	9b03      	ldr	r3, [sp, #12]
    d382:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d386:	2b00      	cmp	r3, #0
    d388:	d00b      	beq.n	d3a2 <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    d38a:	9b03      	ldr	r3, [sp, #12]
    d38c:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d390:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d394:	9b03      	ldr	r3, [sp, #12]
    d396:	9a05      	ldr	r2, [sp, #20]
    d398:	2109      	movs	r1, #9
    d39a:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d39c:	9b04      	ldr	r3, [sp, #16]
    d39e:	6a1b      	ldr	r3, [r3, #32]
    d3a0:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    d3a2:	9b05      	ldr	r3, [sp, #20]
    d3a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    d3a8:	2b00      	cmp	r3, #0
    d3aa:	d01a      	beq.n	d3e2 <FlexCAN_BusOff_IRQHandler+0xb2>
    d3ac:	9b04      	ldr	r3, [sp, #16]
    d3ae:	685b      	ldr	r3, [r3, #4]
    d3b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d3b4:	2b00      	cmp	r3, #0
    d3b6:	d014      	beq.n	d3e2 <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    d3b8:	9b04      	ldr	r3, [sp, #16]
    d3ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    d3be:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d3c0:	9b03      	ldr	r3, [sp, #12]
    d3c2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d3c6:	2b00      	cmp	r3, #0
    d3c8:	d00b      	beq.n	d3e2 <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    d3ca:	9b03      	ldr	r3, [sp, #12]
    d3cc:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d3d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d3d4:	9b03      	ldr	r3, [sp, #12]
    d3d6:	9a05      	ldr	r2, [sp, #20]
    d3d8:	2108      	movs	r1, #8
    d3da:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d3dc:	9b04      	ldr	r3, [sp, #16]
    d3de:	6a1b      	ldr	r3, [r3, #32]
    d3e0:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    d3e2:	9b05      	ldr	r3, [sp, #20]
    d3e4:	f003 0304 	and.w	r3, r3, #4
    d3e8:	2b00      	cmp	r3, #0
    d3ea:	d01a      	beq.n	d422 <FlexCAN_BusOff_IRQHandler+0xf2>
    d3ec:	9b04      	ldr	r3, [sp, #16]
    d3ee:	685b      	ldr	r3, [r3, #4]
    d3f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d3f4:	2b00      	cmp	r3, #0
    d3f6:	d014      	beq.n	d422 <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    d3f8:	9b04      	ldr	r3, [sp, #16]
    d3fa:	2204      	movs	r2, #4
    d3fc:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d3fe:	9b03      	ldr	r3, [sp, #12]
    d400:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d404:	2b00      	cmp	r3, #0
    d406:	d00c      	beq.n	d422 <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    d408:	9b03      	ldr	r3, [sp, #12]
    d40a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d40e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d412:	9b03      	ldr	r3, [sp, #12]
    d414:	9a05      	ldr	r2, [sp, #20]
    d416:	2107      	movs	r1, #7
    d418:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    d41a:	e002      	b.n	d422 <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    d41c:	9b04      	ldr	r3, [sp, #16]
    d41e:	4a04      	ldr	r2, [pc, #16]	; (d430 <FlexCAN_BusOff_IRQHandler+0x100>)
    d420:	621a      	str	r2, [r3, #32]
}
    d422:	bf00      	nop
    d424:	b006      	add	sp, #24
    d426:	bd10      	pop	{r4, pc}
    d428:	00018530 	.word	0x00018530
    d42c:	1fff935c 	.word	0x1fff935c
    d430:	000b0004 	.word	0x000b0004

0000d434 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    d434:	b500      	push	{lr}
    d436:	b091      	sub	sp, #68	; 0x44
    d438:	9204      	str	r2, [sp, #16]
    d43a:	9303      	str	r3, [sp, #12]
    d43c:	4603      	mov	r3, r0
    d43e:	f88d 3017 	strb.w	r3, [sp, #23]
    d442:	460b      	mov	r3, r1
    d444:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d448:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d44c:	4a5f      	ldr	r2, [pc, #380]	; (d5cc <FlexCAN_Ip_SendBlocking+0x198>)
    d44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d452:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d454:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d458:	4a5d      	ldr	r2, [pc, #372]	; (d5d0 <FlexCAN_Ip_SendBlocking+0x19c>)
    d45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d45e:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    d460:	2300      	movs	r3, #0
    d462:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    d464:	2300      	movs	r3, #0
    d466:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d46a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d46e:	fb02 f303 	mul.w	r3, r2, r3
    d472:	2100      	movs	r1, #0
    d474:	4618      	mov	r0, r3
    d476:	f7f4 fd0d 	bl	1e94 <OsIf_MicrosToTicks>
    d47a:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    d47c:	2300      	movs	r3, #0
    d47e:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    d480:	2300      	movs	r3, #0
    d482:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    d484:	2300      	movs	r3, #0
    d486:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    d488:	f89d 1016 	ldrb.w	r1, [sp, #22]
    d48c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    d490:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d492:	9300      	str	r3, [sp, #0]
    d494:	9b03      	ldr	r3, [sp, #12]
    d496:	9a04      	ldr	r2, [sp, #16]
    d498:	f7fe feaa 	bl	c1f0 <FlexCAN_StartSendData>
    d49c:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    d49e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d4a0:	2b00      	cmp	r3, #0
    d4a2:	f040 808d 	bne.w	d5c0 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d4a6:	2000      	movs	r0, #0
    d4a8:	f7f4 fca8 	bl	1dfc <OsIf_GetCounter>
    d4ac:	4603      	mov	r3, r0
    d4ae:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d4b0:	e00f      	b.n	d4d2 <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d4b2:	ab07      	add	r3, sp, #28
    d4b4:	2100      	movs	r1, #0
    d4b6:	4618      	mov	r0, r3
    d4b8:	f7f4 fcb9 	bl	1e2e <OsIf_GetElapsed>
    d4bc:	4602      	mov	r2, r0
    d4be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d4c0:	4413      	add	r3, r2
    d4c2:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    d4c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d4c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d4c8:	429a      	cmp	r2, r3
    d4ca:	d302      	bcc.n	d4d2 <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    d4cc:	2303      	movs	r3, #3
    d4ce:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    d4d0:	e008      	b.n	d4e4 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d4d2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d4d6:	4619      	mov	r1, r3
    d4d8:	980d      	ldr	r0, [sp, #52]	; 0x34
    d4da:	f7fe fab6 	bl	ba4a <FlexCAN_GetBuffStatusFlag>
    d4de:	4603      	mov	r3, r0
    d4e0:	2b01      	cmp	r3, #1
    d4e2:	d1e6      	bne.n	d4b2 <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    d4e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d4e6:	2b03      	cmp	r3, #3
    d4e8:	d15c      	bne.n	d5a4 <FlexCAN_Ip_SendBlocking+0x170>
    d4ea:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d4ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d4f0:	011b      	lsls	r3, r3, #4
    d4f2:	4413      	add	r3, r2
    d4f4:	3304      	adds	r3, #4
    d4f6:	681b      	ldr	r3, [r3, #0]
    d4f8:	2b00      	cmp	r3, #0
    d4fa:	d053      	beq.n	d5a4 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d4fc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d500:	4619      	mov	r1, r3
    d502:	980d      	ldr	r0, [sp, #52]	; 0x34
    d504:	f7fe fa8e 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    d508:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d50c:	4619      	mov	r1, r3
    d50e:	980d      	ldr	r0, [sp, #52]	; 0x34
    d510:	f001 f968 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    d514:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    d516:	9b08      	ldr	r3, [sp, #32]
    d518:	681b      	ldr	r3, [r3, #0]
    d51a:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    d51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d51e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    d522:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    d524:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d526:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    d52a:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    d52c:	9b08      	ldr	r3, [sp, #32]
    d52e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d530:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d532:	2100      	movs	r1, #0
    d534:	4827      	ldr	r0, [pc, #156]	; (d5d4 <FlexCAN_Ip_SendBlocking+0x1a0>)
    d536:	f7f4 fcad 	bl	1e94 <OsIf_MicrosToTicks>
    d53a:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d53c:	2000      	movs	r0, #0
    d53e:	f7f4 fc5d 	bl	1dfc <OsIf_GetCounter>
    d542:	4603      	mov	r3, r0
    d544:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    d546:	2300      	movs	r3, #0
    d548:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d54a:	e00f      	b.n	d56c <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d54c:	ab07      	add	r3, sp, #28
    d54e:	2100      	movs	r1, #0
    d550:	4618      	mov	r0, r3
    d552:	f7f4 fc6c 	bl	1e2e <OsIf_GetElapsed>
    d556:	4602      	mov	r2, r0
    d558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d55a:	4413      	add	r3, r2
    d55c:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    d55e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d562:	429a      	cmp	r2, r3
    d564:	d302      	bcc.n	d56c <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    d566:	2303      	movs	r3, #3
    d568:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    d56a:	e008      	b.n	d57e <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d56c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d570:	4619      	mov	r1, r3
    d572:	980d      	ldr	r0, [sp, #52]	; 0x34
    d574:	f7fe fa69 	bl	ba4a <FlexCAN_GetBuffStatusFlag>
    d578:	4603      	mov	r3, r0
    d57a:	2b00      	cmp	r3, #0
    d57c:	d0e6      	beq.n	d54c <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    d57e:	9b08      	ldr	r3, [sp, #32]
    d580:	681b      	ldr	r3, [r3, #0]
    d582:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d584:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d586:	0e1b      	lsrs	r3, r3, #24
    d588:	f003 030f 	and.w	r3, r3, #15
    d58c:	2b08      	cmp	r3, #8
    d58e:	d101      	bne.n	d594 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    d590:	2300      	movs	r3, #0
    d592:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d594:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d596:	0e1b      	lsrs	r3, r3, #24
    d598:	f003 030f 	and.w	r3, r3, #15
    d59c:	2b09      	cmp	r3, #9
    d59e:	d101      	bne.n	d5a4 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    d5a0:	2303      	movs	r3, #3
    d5a2:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d5a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5a8:	4619      	mov	r1, r3
    d5aa:	980d      	ldr	r0, [sp, #52]	; 0x34
    d5ac:	f7fe fa3a 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    d5b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d5b6:	011b      	lsls	r3, r3, #4
    d5b8:	4413      	add	r3, r2
    d5ba:	3304      	adds	r3, #4
    d5bc:	2200      	movs	r2, #0
    d5be:	601a      	str	r2, [r3, #0]
    }
    return result;
    d5c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    d5c2:	4618      	mov	r0, r3
    d5c4:	b011      	add	sp, #68	; 0x44
    d5c6:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ca:	bf00      	nop
    d5cc:	00018530 	.word	0x00018530
    d5d0:	1fff935c 	.word	0x1fff935c
    d5d4:	000f4240 	.word	0x000f4240

0000d5d8 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d5d8:	b500      	push	{lr}
    d5da:	b087      	sub	sp, #28
    d5dc:	4603      	mov	r3, r0
    d5de:	9100      	str	r1, [sp, #0]
    d5e0:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d5e4:	2300      	movs	r3, #0
    d5e6:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d5e8:	2300      	movs	r3, #0
    d5ea:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d5ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d5f0:	4a1c      	ldr	r2, [pc, #112]	; (d664 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    d5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5f6:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d5f8:	9803      	ldr	r0, [sp, #12]
    d5fa:	f7fe f9b9 	bl	b970 <FlexCAN_IsEnabled>
    d5fe:	4603      	mov	r3, r0
    d600:	2b00      	cmp	r3, #0
    d602:	bf14      	ite	ne
    d604:	2301      	movne	r3, #1
    d606:	2300      	moveq	r3, #0
    d608:	b2db      	uxtb	r3, r3
    d60a:	f083 0301 	eor.w	r3, r3, #1
    d60e:	b2db      	uxtb	r3, r3
    d610:	f88d 300b 	strb.w	r3, [sp, #11]
    d614:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d618:	f003 0301 	and.w	r3, r3, #1
    d61c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d620:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d624:	2b00      	cmp	r3, #0
    d626:	d003      	beq.n	d630 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d628:	9803      	ldr	r0, [sp, #12]
    d62a:	f001 f9c3 	bl	e9b4 <FlexCAN_Enable>
    d62e:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d630:	9b05      	ldr	r3, [sp, #20]
    d632:	2b00      	cmp	r3, #0
    d634:	d103      	bne.n	d63e <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    d636:	9900      	ldr	r1, [sp, #0]
    d638:	9803      	ldr	r0, [sp, #12]
    d63a:	f7fe fbc3 	bl	bdc4 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    d63e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d642:	2b00      	cmp	r3, #0
    d644:	d008      	beq.n	d658 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d646:	9803      	ldr	r0, [sp, #12]
    d648:	f001 fa32 	bl	eab0 <FlexCAN_Disable>
    d64c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d64e:	9b04      	ldr	r3, [sp, #16]
    d650:	2b00      	cmp	r3, #0
    d652:	d001      	beq.n	d658 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    d654:	9b04      	ldr	r3, [sp, #16]
    d656:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    d658:	9b05      	ldr	r3, [sp, #20]
}
    d65a:	4618      	mov	r0, r3
    d65c:	b007      	add	sp, #28
    d65e:	f85d fb04 	ldr.w	pc, [sp], #4
    d662:	bf00      	nop
    d664:	00018530 	.word	0x00018530

0000d668 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    d668:	b500      	push	{lr}
    d66a:	b085      	sub	sp, #20
    d66c:	4603      	mov	r3, r0
    d66e:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d672:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d676:	4a06      	ldr	r2, [pc, #24]	; (d690 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    d678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d67c:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    d67e:	9803      	ldr	r0, [sp, #12]
    d680:	f001 f94c 	bl	e91c <FlexCAN_EnterFreezeMode>
    d684:	4603      	mov	r3, r0
}
    d686:	4618      	mov	r0, r3
    d688:	b005      	add	sp, #20
    d68a:	f85d fb04 	ldr.w	pc, [sp], #4
    d68e:	bf00      	nop
    d690:	00018530 	.word	0x00018530

0000d694 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    d694:	b500      	push	{lr}
    d696:	b085      	sub	sp, #20
    d698:	4603      	mov	r3, r0
    d69a:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d69e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6a2:	4a06      	ldr	r2, [pc, #24]	; (d6bc <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    d6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6a8:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    d6aa:	9803      	ldr	r0, [sp, #12]
    d6ac:	f001 f9be 	bl	ea2c <FlexCAN_ExitFreezeMode>
    d6b0:	4603      	mov	r3, r0
}
    d6b2:	4618      	mov	r0, r3
    d6b4:	b005      	add	sp, #20
    d6b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d6ba:	bf00      	nop
    d6bc:	00018530 	.word	0x00018530

0000d6c0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    d6c0:	b500      	push	{lr}
    d6c2:	b087      	sub	sp, #28
    d6c4:	4603      	mov	r3, r0
    d6c6:	9200      	str	r2, [sp, #0]
    d6c8:	f88d 3007 	strb.w	r3, [sp, #7]
    d6cc:	460b      	mov	r3, r1
    d6ce:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d6d2:	2300      	movs	r3, #0
    d6d4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d6d6:	2300      	movs	r3, #0
    d6d8:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d6da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6de:	4a1e      	ldr	r2, [pc, #120]	; (d758 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    d6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6e4:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d6e6:	9803      	ldr	r0, [sp, #12]
    d6e8:	f7fe f942 	bl	b970 <FlexCAN_IsEnabled>
    d6ec:	4603      	mov	r3, r0
    d6ee:	2b00      	cmp	r3, #0
    d6f0:	bf14      	ite	ne
    d6f2:	2301      	movne	r3, #1
    d6f4:	2300      	moveq	r3, #0
    d6f6:	b2db      	uxtb	r3, r3
    d6f8:	f083 0301 	eor.w	r3, r3, #1
    d6fc:	b2db      	uxtb	r3, r3
    d6fe:	f88d 300b 	strb.w	r3, [sp, #11]
    d702:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d706:	f003 0301 	and.w	r3, r3, #1
    d70a:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d70e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d712:	2b00      	cmp	r3, #0
    d714:	d003      	beq.n	d71e <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    d716:	9803      	ldr	r0, [sp, #12]
    d718:	f001 f94c 	bl	e9b4 <FlexCAN_Enable>
    d71c:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d71e:	9b05      	ldr	r3, [sp, #20]
    d720:	2b00      	cmp	r3, #0
    d722:	d106      	bne.n	d732 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    d724:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d728:	9a00      	ldr	r2, [sp, #0]
    d72a:	4619      	mov	r1, r3
    d72c:	9803      	ldr	r0, [sp, #12]
    d72e:	f7fe fb52 	bl	bdd6 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    d732:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d736:	2b00      	cmp	r3, #0
    d738:	d008      	beq.n	d74c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    d73a:	9803      	ldr	r0, [sp, #12]
    d73c:	f001 f9b8 	bl	eab0 <FlexCAN_Disable>
    d740:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d742:	9b04      	ldr	r3, [sp, #16]
    d744:	2b00      	cmp	r3, #0
    d746:	d001      	beq.n	d74c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    d748:	9b04      	ldr	r3, [sp, #16]
    d74a:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    d74c:	9b05      	ldr	r3, [sp, #20]
}
    d74e:	4618      	mov	r0, r3
    d750:	b007      	add	sp, #28
    d752:	f85d fb04 	ldr.w	pc, [sp], #4
    d756:	bf00      	nop
    d758:	00018530 	.word	0x00018530

0000d75c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d75c:	b500      	push	{lr}
    d75e:	b087      	sub	sp, #28
    d760:	4603      	mov	r3, r0
    d762:	9100      	str	r1, [sp, #0]
    d764:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d768:	2300      	movs	r3, #0
    d76a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d76c:	2300      	movs	r3, #0
    d76e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d770:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d774:	4a1c      	ldr	r2, [pc, #112]	; (d7e8 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    d776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d77a:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d77c:	9803      	ldr	r0, [sp, #12]
    d77e:	f7fe f8f7 	bl	b970 <FlexCAN_IsEnabled>
    d782:	4603      	mov	r3, r0
    d784:	2b00      	cmp	r3, #0
    d786:	bf14      	ite	ne
    d788:	2301      	movne	r3, #1
    d78a:	2300      	moveq	r3, #0
    d78c:	b2db      	uxtb	r3, r3
    d78e:	f083 0301 	eor.w	r3, r3, #1
    d792:	b2db      	uxtb	r3, r3
    d794:	f88d 300b 	strb.w	r3, [sp, #11]
    d798:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d79c:	f003 0301 	and.w	r3, r3, #1
    d7a0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d7a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7a8:	2b00      	cmp	r3, #0
    d7aa:	d003      	beq.n	d7b4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d7ac:	9803      	ldr	r0, [sp, #12]
    d7ae:	f001 f901 	bl	e9b4 <FlexCAN_Enable>
    d7b2:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    d7b4:	9b05      	ldr	r3, [sp, #20]
    d7b6:	2b00      	cmp	r3, #0
    d7b8:	d103      	bne.n	d7c2 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    d7ba:	9900      	ldr	r1, [sp, #0]
    d7bc:	9803      	ldr	r0, [sp, #12]
    d7be:	f7fe f8a7 	bl	b910 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    d7c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	d008      	beq.n	d7dc <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d7ca:	9803      	ldr	r0, [sp, #12]
    d7cc:	f001 f970 	bl	eab0 <FlexCAN_Disable>
    d7d0:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d7d2:	9b04      	ldr	r3, [sp, #16]
    d7d4:	2b00      	cmp	r3, #0
    d7d6:	d001      	beq.n	d7dc <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    d7d8:	9b04      	ldr	r3, [sp, #16]
    d7da:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    d7dc:	9b05      	ldr	r3, [sp, #20]
}
    d7de:	4618      	mov	r0, r3
    d7e0:	b007      	add	sp, #28
    d7e2:	f85d fb04 	ldr.w	pc, [sp], #4
    d7e6:	bf00      	nop
    d7e8:	00018530 	.word	0x00018530

0000d7ec <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    d7ec:	b500      	push	{lr}
    d7ee:	b085      	sub	sp, #20
    d7f0:	4603      	mov	r3, r0
    d7f2:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d7f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d7fa:	4a0e      	ldr	r2, [pc, #56]	; (d834 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    d7fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d800:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    d802:	9803      	ldr	r0, [sp, #12]
    d804:	f001 f88a 	bl	e91c <FlexCAN_EnterFreezeMode>
    d808:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    d80a:	9b02      	ldr	r3, [sp, #8]
    d80c:	2b00      	cmp	r3, #0
    d80e:	d10b      	bne.n	d828 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    d810:	9803      	ldr	r0, [sp, #12]
    d812:	f7fe fb18 	bl	be46 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    d816:	9803      	ldr	r0, [sp, #12]
    d818:	f001 f94a 	bl	eab0 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    d81c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d820:	4a05      	ldr	r2, [pc, #20]	; (d838 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    d822:	2100      	movs	r1, #0
    d824:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    d828:	9b02      	ldr	r3, [sp, #8]
}
    d82a:	4618      	mov	r0, r3
    d82c:	b005      	add	sp, #20
    d82e:	f85d fb04 	ldr.w	pc, [sp], #4
    d832:	bf00      	nop
    d834:	00018530 	.word	0x00018530
    d838:	1fff935c 	.word	0x1fff935c

0000d83c <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    d83c:	b500      	push	{lr}
    d83e:	b085      	sub	sp, #20
    d840:	4603      	mov	r3, r0
    d842:	460a      	mov	r2, r1
    d844:	f88d 3007 	strb.w	r3, [sp, #7]
    d848:	4613      	mov	r3, r2
    d84a:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d84e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d852:	4a22      	ldr	r2, [pc, #136]	; (d8dc <FlexCAN_Ip_MainFunctionRead+0xa0>)
    d854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d858:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d85a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d85e:	4a20      	ldr	r2, [pc, #128]	; (d8e0 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    d860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d864:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d866:	9b02      	ldr	r3, [sp, #8]
    d868:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d86c:	2b00      	cmp	r3, #0
    d86e:	d015      	beq.n	d89c <FlexCAN_Ip_MainFunctionRead+0x60>
    d870:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d874:	2b07      	cmp	r3, #7
    d876:	d811      	bhi.n	d89c <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d878:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d87c:	2b00      	cmp	r3, #0
    d87e:	d128      	bne.n	d8d2 <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    d880:	2105      	movs	r1, #5
    d882:	9803      	ldr	r0, [sp, #12]
    d884:	f7fe f8e1 	bl	ba4a <FlexCAN_GetBuffStatusFlag>
    d888:	4603      	mov	r3, r0
    d88a:	2b00      	cmp	r3, #0
    d88c:	d021      	beq.n	d8d2 <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    d88e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d892:	2105      	movs	r1, #5
    d894:	4618      	mov	r0, r3
    d896:	f7fe ff17 	bl	c6c8 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d89a:	e01a      	b.n	d8d2 <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    d89c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d8a0:	4619      	mov	r1, r3
    d8a2:	9803      	ldr	r0, [sp, #12]
    d8a4:	f7fe f8d1 	bl	ba4a <FlexCAN_GetBuffStatusFlag>
    d8a8:	4603      	mov	r3, r0
    d8aa:	2b00      	cmp	r3, #0
    d8ac:	d012      	beq.n	d8d4 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    d8ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d8b2:	9a02      	ldr	r2, [sp, #8]
    d8b4:	011b      	lsls	r3, r3, #4
    d8b6:	4413      	add	r3, r2
    d8b8:	3304      	adds	r3, #4
    d8ba:	681b      	ldr	r3, [r3, #0]
    d8bc:	2b01      	cmp	r3, #1
    d8be:	d109      	bne.n	d8d4 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d8c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d8c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8c8:	4611      	mov	r1, r2
    d8ca:	4618      	mov	r0, r3
    d8cc:	f7fe fd74 	bl	c3b8 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    d8d0:	e000      	b.n	d8d4 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d8d2:	bf00      	nop
}
    d8d4:	bf00      	nop
    d8d6:	b005      	add	sp, #20
    d8d8:	f85d fb04 	ldr.w	pc, [sp], #4
    d8dc:	00018530 	.word	0x00018530
    d8e0:	1fff935c 	.word	0x1fff935c

0000d8e4 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    d8e4:	b510      	push	{r4, lr}
    d8e6:	b086      	sub	sp, #24
    d8e8:	4603      	mov	r3, r0
    d8ea:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    d8ee:	2301      	movs	r3, #1
    d8f0:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d8f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8f6:	4a15      	ldr	r2, [pc, #84]	; (d94c <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    d8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8fc:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d8fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d902:	4a13      	ldr	r2, [pc, #76]	; (d950 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    d904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d908:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d90a:	2300      	movs	r3, #0
    d90c:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    d90e:	9b04      	ldr	r3, [sp, #16]
    d910:	6a1b      	ldr	r3, [r3, #32]
    d912:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    d914:	9b02      	ldr	r3, [sp, #8]
    d916:	f003 0304 	and.w	r3, r3, #4
    d91a:	2b00      	cmp	r3, #0
    d91c:	d012      	beq.n	d944 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    d91e:	9b03      	ldr	r3, [sp, #12]
    d920:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d924:	2b00      	cmp	r3, #0
    d926:	d008      	beq.n	d93a <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    d928:	9b03      	ldr	r3, [sp, #12]
    d92a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d92e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d932:	9b03      	ldr	r3, [sp, #12]
    d934:	9a02      	ldr	r2, [sp, #8]
    d936:	2107      	movs	r1, #7
    d938:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    d93a:	9b04      	ldr	r3, [sp, #16]
    d93c:	2204      	movs	r2, #4
    d93e:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    d940:	2300      	movs	r3, #0
    d942:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    d944:	9b05      	ldr	r3, [sp, #20]
}
    d946:	4618      	mov	r0, r3
    d948:	b006      	add	sp, #24
    d94a:	bd10      	pop	{r4, pc}
    d94c:	00018530 	.word	0x00018530
    d950:	1fff935c 	.word	0x1fff935c

0000d954 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    d954:	b510      	push	{r4, lr}
    d956:	b098      	sub	sp, #96	; 0x60
    d958:	4603      	mov	r3, r0
    d95a:	460a      	mov	r2, r1
    d95c:	f88d 3007 	strb.w	r3, [sp, #7]
    d960:	4613      	mov	r3, r2
    d962:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d966:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d96a:	4a3f      	ldr	r2, [pc, #252]	; (da68 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    d96c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d970:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d972:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d976:	4a3d      	ldr	r2, [pc, #244]	; (da6c <FlexCAN_Ip_MainFunctionWrite+0x118>)
    d978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d97c:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    d97e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d982:	4619      	mov	r1, r3
    d984:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d986:	f7fe f860 	bl	ba4a <FlexCAN_GetBuffStatusFlag>
    d98a:	4603      	mov	r3, r0
    d98c:	2b00      	cmp	r3, #0
    d98e:	d068      	beq.n	da62 <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    d990:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d994:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d996:	011b      	lsls	r3, r3, #4
    d998:	4413      	add	r3, r2
    d99a:	3304      	adds	r3, #4
    d99c:	681b      	ldr	r3, [r3, #0]
    d99e:	2b02      	cmp	r3, #2
    d9a0:	d15f      	bne.n	da62 <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    d9a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d9a8:	011b      	lsls	r3, r3, #4
    d9aa:	4413      	add	r3, r2
    d9ac:	3309      	adds	r3, #9
    d9ae:	781b      	ldrb	r3, [r3, #0]
    d9b0:	2b00      	cmp	r3, #0
    d9b2:	d028      	beq.n	da06 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    d9b4:	2300      	movs	r3, #0
    d9b6:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    d9b8:	2300      	movs	r3, #0
    d9ba:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    d9bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9c0:	4619      	mov	r1, r3
    d9c2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9c4:	f001 fa87 	bl	eed6 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    d9c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9cc:	aa02      	add	r2, sp, #8
    d9ce:	4619      	mov	r1, r3
    d9d0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9d2:	f001 fbaf 	bl	f134 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    d9d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9d8:	f7fe f81d 	bl	ba16 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    d9dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d9e2:	9916      	ldr	r1, [sp, #88]	; 0x58
    d9e4:	011b      	lsls	r3, r3, #4
    d9e6:	440b      	add	r3, r1
    d9e8:	330c      	adds	r3, #12
    d9ea:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d9ec:	9b02      	ldr	r3, [sp, #8]
    d9ee:	0e1b      	lsrs	r3, r3, #24
    d9f0:	f003 030f 	and.w	r3, r3, #15
    d9f4:	2b04      	cmp	r3, #4
    d9f6:	d11d      	bne.n	da34 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d9f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9fc:	4619      	mov	r1, r3
    d9fe:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da00:	f7fe f810 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
    da04:	e016      	b.n	da34 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    da06:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da0a:	f89d 4006 	ldrb.w	r4, [sp, #6]
    da0e:	4619      	mov	r1, r3
    da10:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da12:	f001 fb7b 	bl	f10c <FlexCAN_GetMsgBuffTimestamp>
    da16:	4601      	mov	r1, r0
    da18:	9a16      	ldr	r2, [sp, #88]	; 0x58
    da1a:	0123      	lsls	r3, r4, #4
    da1c:	4413      	add	r3, r2
    da1e:	330c      	adds	r3, #12
    da20:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    da22:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da24:	f7fd fff7 	bl	ba16 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    da28:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da2c:	4619      	mov	r1, r3
    da2e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da30:	f7fd fff8 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    da34:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da38:	9a16      	ldr	r2, [sp, #88]	; 0x58
    da3a:	011b      	lsls	r3, r3, #4
    da3c:	4413      	add	r3, r2
    da3e:	3304      	adds	r3, #4
    da40:	2200      	movs	r2, #0
    da42:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    da44:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    da4a:	2b00      	cmp	r3, #0
    da4c:	d009      	beq.n	da62 <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    da4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da50:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    da54:	f89d 2006 	ldrb.w	r2, [sp, #6]
    da58:	f89d 0007 	ldrb.w	r0, [sp, #7]
    da5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da5e:	2104      	movs	r1, #4
    da60:	47a0      	blx	r4
            }
        }
    }
}
    da62:	bf00      	nop
    da64:	b018      	add	sp, #96	; 0x60
    da66:	bd10      	pop	{r4, pc}
    da68:	00018530 	.word	0x00018530
    da6c:	1fff935c 	.word	0x1fff935c

0000da70 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    da70:	b084      	sub	sp, #16
    da72:	4603      	mov	r3, r0
    da74:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    da78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da7c:	4a08      	ldr	r2, [pc, #32]	; (daa0 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    da7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da82:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    da84:	9b03      	ldr	r3, [sp, #12]
    da86:	681b      	ldr	r3, [r3, #0]
    da88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    da8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    da90:	bf0c      	ite	eq
    da92:	2301      	moveq	r3, #1
    da94:	2300      	movne	r3, #0
    da96:	b2db      	uxtb	r3, r3
}
    da98:	4618      	mov	r0, r3
    da9a:	b004      	add	sp, #16
    da9c:	4770      	bx	lr
    da9e:	bf00      	nop
    daa0:	00018530 	.word	0x00018530

0000daa4 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    daa4:	b084      	sub	sp, #16
    daa6:	4603      	mov	r3, r0
    daa8:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    daac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dab0:	4a07      	ldr	r2, [pc, #28]	; (dad0 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    dab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dab6:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    dab8:	9b03      	ldr	r3, [sp, #12]
    daba:	681b      	ldr	r3, [r3, #0]
    dabc:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    dac0:	2b00      	cmp	r3, #0
    dac2:	bf0c      	ite	eq
    dac4:	2301      	moveq	r3, #1
    dac6:	2300      	movne	r3, #0
    dac8:	b2db      	uxtb	r3, r3
}
    daca:	4618      	mov	r0, r3
    dacc:	b004      	add	sp, #16
    dace:	4770      	bx	lr
    dad0:	00018530 	.word	0x00018530

0000dad4 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    dad4:	b500      	push	{lr}
    dad6:	b085      	sub	sp, #20
    dad8:	4603      	mov	r3, r0
    dada:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dade:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dae2:	4a0b      	ldr	r2, [pc, #44]	; (db10 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    dae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dae8:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    daea:	f006 faf7 	bl	140dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    daee:	9b03      	ldr	r3, [sp, #12]
    daf0:	681b      	ldr	r3, [r3, #0]
    daf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    daf6:	9b03      	ldr	r3, [sp, #12]
    daf8:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    dafa:	f006 fb1b 	bl	14134 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    dafe:	9803      	ldr	r0, [sp, #12]
    db00:	f000 ff94 	bl	ea2c <FlexCAN_ExitFreezeMode>
    db04:	4603      	mov	r3, r0
}
    db06:	4618      	mov	r0, r3
    db08:	b005      	add	sp, #20
    db0a:	f85d fb04 	ldr.w	pc, [sp], #4
    db0e:	bf00      	nop
    db10:	00018530 	.word	0x00018530

0000db14 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    db14:	b500      	push	{lr}
    db16:	b085      	sub	sp, #20
    db18:	4603      	mov	r3, r0
    db1a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    db1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db22:	4a0a      	ldr	r2, [pc, #40]	; (db4c <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    db24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db28:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    db2a:	9802      	ldr	r0, [sp, #8]
    db2c:	f000 fef6 	bl	e91c <FlexCAN_EnterFreezeMode>
    db30:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    db32:	9b03      	ldr	r3, [sp, #12]
    db34:	2b00      	cmp	r3, #0
    db36:	d103      	bne.n	db40 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    db38:	9802      	ldr	r0, [sp, #8]
    db3a:	f000 ffb9 	bl	eab0 <FlexCAN_Disable>
    db3e:	9003      	str	r0, [sp, #12]
    }
    return status;
    db40:	9b03      	ldr	r3, [sp, #12]
}
    db42:	4618      	mov	r0, r3
    db44:	b005      	add	sp, #20
    db46:	f85d fb04 	ldr.w	pc, [sp], #4
    db4a:	bf00      	nop
    db4c:	00018530 	.word	0x00018530

0000db50 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    db50:	b500      	push	{lr}
    db52:	b087      	sub	sp, #28
    db54:	4603      	mov	r3, r0
    db56:	9100      	str	r1, [sp, #0]
    db58:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    db5c:	2300      	movs	r3, #0
    db5e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    db60:	2300      	movs	r3, #0
    db62:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    db64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db68:	4a1e      	ldr	r2, [pc, #120]	; (dbe4 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    db6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db6e:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    db70:	9803      	ldr	r0, [sp, #12]
    db72:	f7fd fefd 	bl	b970 <FlexCAN_IsEnabled>
    db76:	4603      	mov	r3, r0
    db78:	2b00      	cmp	r3, #0
    db7a:	bf14      	ite	ne
    db7c:	2301      	movne	r3, #1
    db7e:	2300      	moveq	r3, #0
    db80:	b2db      	uxtb	r3, r3
    db82:	f083 0301 	eor.w	r3, r3, #1
    db86:	b2db      	uxtb	r3, r3
    db88:	f88d 300b 	strb.w	r3, [sp, #11]
    db8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    db90:	f003 0301 	and.w	r3, r3, #1
    db94:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    db98:	f89d 300b 	ldrb.w	r3, [sp, #11]
    db9c:	2b00      	cmp	r3, #0
    db9e:	d003      	beq.n	dba8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    dba0:	9803      	ldr	r0, [sp, #12]
    dba2:	f000 ff07 	bl	e9b4 <FlexCAN_Enable>
    dba6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dba8:	9b05      	ldr	r3, [sp, #20]
    dbaa:	2b00      	cmp	r3, #0
    dbac:	d107      	bne.n	dbbe <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    dbae:	f006 fae7 	bl	14180 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    dbb2:	9900      	ldr	r1, [sp, #0]
    dbb4:	9803      	ldr	r0, [sp, #12]
    dbb6:	f7fe f930 	bl	be1a <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    dbba:	f006 fb0d 	bl	141d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    dbbe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	d008      	beq.n	dbd8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    dbc6:	9803      	ldr	r0, [sp, #12]
    dbc8:	f000 ff72 	bl	eab0 <FlexCAN_Disable>
    dbcc:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dbce:	9b04      	ldr	r3, [sp, #16]
    dbd0:	2b00      	cmp	r3, #0
    dbd2:	d001      	beq.n	dbd8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    dbd4:	9b04      	ldr	r3, [sp, #16]
    dbd6:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dbd8:	9b05      	ldr	r3, [sp, #20]
}
    dbda:	4618      	mov	r0, r3
    dbdc:	b007      	add	sp, #28
    dbde:	f85d fb04 	ldr.w	pc, [sp], #4
    dbe2:	bf00      	nop
    dbe4:	00018530 	.word	0x00018530

0000dbe8 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    dbe8:	b500      	push	{lr}
    dbea:	b087      	sub	sp, #28
    dbec:	4603      	mov	r3, r0
    dbee:	9100      	str	r1, [sp, #0]
    dbf0:	f88d 3007 	strb.w	r3, [sp, #7]
    dbf4:	4613      	mov	r3, r2
    dbf6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dbfa:	2300      	movs	r3, #0
    dbfc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dbfe:	2300      	movs	r3, #0
    dc00:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dc02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc06:	4a1c      	ldr	r2, [pc, #112]	; (dc78 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    dc08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc0c:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    dc0e:	9b03      	ldr	r3, [sp, #12]
    dc10:	681b      	ldr	r3, [r3, #0]
    dc12:	0fdb      	lsrs	r3, r3, #31
    dc14:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    dc18:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d003      	beq.n	dc28 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    dc20:	9803      	ldr	r0, [sp, #12]
    dc22:	f000 fec7 	bl	e9b4 <FlexCAN_Enable>
    dc26:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dc28:	9b05      	ldr	r3, [sp, #20]
    dc2a:	2b00      	cmp	r3, #0
    dc2c:	d112      	bne.n	dc54 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dc2e:	f006 fc93 	bl	14558 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dc32:	9803      	ldr	r0, [sp, #12]
    dc34:	f7fe f830 	bl	bc98 <FlexCAN_IsExCbtEnabled>
    dc38:	4603      	mov	r3, r0
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d004      	beq.n	dc48 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    dc3e:	9900      	ldr	r1, [sp, #0]
    dc40:	9803      	ldr	r0, [sp, #12]
    dc42:	f7fd ff7f 	bl	bb44 <FlexCAN_SetExtendedTimeSegments>
    dc46:	e003      	b.n	dc50 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    dc48:	9900      	ldr	r1, [sp, #0]
    dc4a:	9803      	ldr	r0, [sp, #12]
    dc4c:	f7fd ff4e 	bl	baec <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dc50:	f006 fcae 	bl	145b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    dc54:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc58:	2b00      	cmp	r3, #0
    dc5a:	d008      	beq.n	dc6e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    dc5c:	9803      	ldr	r0, [sp, #12]
    dc5e:	f000 ff27 	bl	eab0 <FlexCAN_Disable>
    dc62:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dc64:	9b04      	ldr	r3, [sp, #16]
    dc66:	2b00      	cmp	r3, #0
    dc68:	d001      	beq.n	dc6e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    dc6a:	9b04      	ldr	r3, [sp, #16]
    dc6c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dc6e:	9b05      	ldr	r3, [sp, #20]
}
    dc70:	4618      	mov	r0, r3
    dc72:	b007      	add	sp, #28
    dc74:	f85d fb04 	ldr.w	pc, [sp], #4
    dc78:	00018530 	.word	0x00018530

0000dc7c <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    dc7c:	b500      	push	{lr}
    dc7e:	b085      	sub	sp, #20
    dc80:	4603      	mov	r3, r0
    dc82:	9100      	str	r1, [sp, #0]
    dc84:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dc88:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc8c:	4a0d      	ldr	r2, [pc, #52]	; (dcc4 <FlexCAN_Ip_GetBitrate+0x48>)
    dc8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc92:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    dc94:	2300      	movs	r3, #0
    dc96:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dc9a:	9803      	ldr	r0, [sp, #12]
    dc9c:	f7fd fffc 	bl	bc98 <FlexCAN_IsExCbtEnabled>
    dca0:	4603      	mov	r3, r0
    dca2:	2b00      	cmp	r3, #0
    dca4:	d004      	beq.n	dcb0 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    dca6:	9900      	ldr	r1, [sp, #0]
    dca8:	9803      	ldr	r0, [sp, #12]
    dcaa:	f7fd ff79 	bl	bba0 <FlexCAN_GetExtendedTimeSegments>
    dcae:	e003      	b.n	dcb8 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    dcb0:	9900      	ldr	r1, [sp, #0]
    dcb2:	9803      	ldr	r0, [sp, #12]
    dcb4:	f7fd ff9c 	bl	bbf0 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    dcb8:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    dcbc:	4618      	mov	r0, r3
    dcbe:	b005      	add	sp, #20
    dcc0:	f85d fb04 	ldr.w	pc, [sp], #4
    dcc4:	00018530 	.word	0x00018530

0000dcc8 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    dcc8:	b500      	push	{lr}
    dcca:	b085      	sub	sp, #20
    dccc:	4603      	mov	r3, r0
    dcce:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dcd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dcd6:	4a0a      	ldr	r2, [pc, #40]	; (dd00 <FlexCAN_Ip_ClearTDCFail+0x38>)
    dcd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcdc:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    dcde:	f006 faa1 	bl	14224 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    dce2:	9b03      	ldr	r3, [sp, #12]
    dce4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dce8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    dcec:	9b03      	ldr	r3, [sp, #12]
    dcee:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    dcf2:	f006 fac3 	bl	1427c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    dcf6:	bf00      	nop
    dcf8:	b005      	add	sp, #20
    dcfa:	f85d fb04 	ldr.w	pc, [sp], #4
    dcfe:	bf00      	nop
    dd00:	00018530 	.word	0x00018530

0000dd04 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    dd04:	b084      	sub	sp, #16
    dd06:	4603      	mov	r3, r0
    dd08:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    dd0c:	2300      	movs	r3, #0
    dd0e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dd12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd16:	4a0a      	ldr	r2, [pc, #40]	; (dd40 <FlexCAN_Ip_GetTDCFail+0x3c>)
    dd18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd1c:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    dd1e:	9b02      	ldr	r3, [sp, #8]
    dd20:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dd24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    dd28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    dd2c:	bf0c      	ite	eq
    dd2e:	2301      	moveq	r3, #1
    dd30:	2300      	movne	r3, #0
    dd32:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    dd36:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    dd3a:	4618      	mov	r0, r3
    dd3c:	b004      	add	sp, #16
    dd3e:	4770      	bx	lr
    dd40:	00018530 	.word	0x00018530

0000dd44 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    dd44:	b084      	sub	sp, #16
    dd46:	4603      	mov	r3, r0
    dd48:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    dd4c:	2300      	movs	r3, #0
    dd4e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dd52:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd56:	4a08      	ldr	r2, [pc, #32]	; (dd78 <FlexCAN_Ip_GetTDCValue+0x34>)
    dd58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd5c:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    dd5e:	9b02      	ldr	r3, [sp, #8]
    dd60:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dd64:	b2db      	uxtb	r3, r3
    dd66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dd6a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    dd6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    dd72:	4618      	mov	r0, r3
    dd74:	b004      	add	sp, #16
    dd76:	4770      	bx	lr
    dd78:	00018530 	.word	0x00018530

0000dd7c <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    dd7c:	b500      	push	{lr}
    dd7e:	b087      	sub	sp, #28
    dd80:	4603      	mov	r3, r0
    dd82:	9100      	str	r1, [sp, #0]
    dd84:	f88d 3007 	strb.w	r3, [sp, #7]
    dd88:	4613      	mov	r3, r2
    dd8a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dd8e:	2300      	movs	r3, #0
    dd90:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dd92:	2300      	movs	r3, #0
    dd94:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dd96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd9a:	4a1e      	ldr	r2, [pc, #120]	; (de14 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    dd9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dda0:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    dda2:	9803      	ldr	r0, [sp, #12]
    dda4:	f7fd ffaf 	bl	bd06 <FlexCAN_IsFDEnabled>
    dda8:	4603      	mov	r3, r0
    ddaa:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    ddae:	9b03      	ldr	r3, [sp, #12]
    ddb0:	681b      	ldr	r3, [r3, #0]
    ddb2:	0fdb      	lsrs	r3, r3, #31
    ddb4:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    ddb8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ddbc:	2b00      	cmp	r3, #0
    ddbe:	d003      	beq.n	ddc8 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    ddc0:	9803      	ldr	r0, [sp, #12]
    ddc2:	f000 fdf7 	bl	e9b4 <FlexCAN_Enable>
    ddc6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    ddc8:	9b05      	ldr	r3, [sp, #20]
    ddca:	2b00      	cmp	r3, #0
    ddcc:	d10f      	bne.n	ddee <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    ddce:	f006 fc15 	bl	145fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    ddd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ddd6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ddda:	4619      	mov	r1, r3
    dddc:	9803      	ldr	r0, [sp, #12]
    ddde:	f7fd fdd1 	bl	b984 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    dde2:	9900      	ldr	r1, [sp, #0]
    dde4:	9803      	ldr	r0, [sp, #12]
    dde6:	f7fd fe4c 	bl	ba82 <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    ddea:	f006 fc33 	bl	14654 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    ddee:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ddf2:	2b00      	cmp	r3, #0
    ddf4:	d008      	beq.n	de08 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    ddf6:	9803      	ldr	r0, [sp, #12]
    ddf8:	f000 fe5a 	bl	eab0 <FlexCAN_Disable>
    ddfc:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ddfe:	9b04      	ldr	r3, [sp, #16]
    de00:	2b00      	cmp	r3, #0
    de02:	d001      	beq.n	de08 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    de04:	9b04      	ldr	r3, [sp, #16]
    de06:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    de08:	9b05      	ldr	r3, [sp, #20]
}
    de0a:	4618      	mov	r0, r3
    de0c:	b007      	add	sp, #28
    de0e:	f85d fb04 	ldr.w	pc, [sp], #4
    de12:	bf00      	nop
    de14:	00018530 	.word	0x00018530

0000de18 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    de18:	b500      	push	{lr}
    de1a:	b085      	sub	sp, #20
    de1c:	4603      	mov	r3, r0
    de1e:	9100      	str	r1, [sp, #0]
    de20:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    de24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de28:	4a08      	ldr	r2, [pc, #32]	; (de4c <FlexCAN_Ip_GetBitrateFD+0x34>)
    de2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de2e:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    de30:	2300      	movs	r3, #0
    de32:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    de36:	9900      	ldr	r1, [sp, #0]
    de38:	9803      	ldr	r0, [sp, #12]
    de3a:	f7fd ff00 	bl	bc3e <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    de3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    de42:	4618      	mov	r0, r3
    de44:	b005      	add	sp, #20
    de46:	f85d fb04 	ldr.w	pc, [sp], #4
    de4a:	bf00      	nop
    de4c:	00018530 	.word	0x00018530

0000de50 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    de50:	b500      	push	{lr}
    de52:	b087      	sub	sp, #28
    de54:	4603      	mov	r3, r0
    de56:	f88d 3007 	strb.w	r3, [sp, #7]
    de5a:	460b      	mov	r3, r1
    de5c:	f88d 3006 	strb.w	r3, [sp, #6]
    de60:	4613      	mov	r3, r2
    de62:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    de66:	2300      	movs	r3, #0
    de68:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    de6a:	2300      	movs	r3, #0
    de6c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    de6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de72:	4a20      	ldr	r2, [pc, #128]	; (def4 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    de74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de78:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    de7a:	9803      	ldr	r0, [sp, #12]
    de7c:	f7fd fd78 	bl	b970 <FlexCAN_IsEnabled>
    de80:	4603      	mov	r3, r0
    de82:	2b00      	cmp	r3, #0
    de84:	bf14      	ite	ne
    de86:	2301      	movne	r3, #1
    de88:	2300      	moveq	r3, #0
    de8a:	b2db      	uxtb	r3, r3
    de8c:	f083 0301 	eor.w	r3, r3, #1
    de90:	b2db      	uxtb	r3, r3
    de92:	f88d 300b 	strb.w	r3, [sp, #11]
    de96:	f89d 300b 	ldrb.w	r3, [sp, #11]
    de9a:	f003 0301 	and.w	r3, r3, #1
    de9e:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    dea2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dea6:	2b00      	cmp	r3, #0
    dea8:	d003      	beq.n	deb2 <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    deaa:	9803      	ldr	r0, [sp, #12]
    deac:	f000 fd82 	bl	e9b4 <FlexCAN_Enable>
    deb0:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    deb2:	9b05      	ldr	r3, [sp, #20]
    deb4:	2b00      	cmp	r3, #0
    deb6:	d10b      	bne.n	ded0 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    deb8:	f006 fbf2 	bl	146a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    debc:	f89d 2005 	ldrb.w	r2, [sp, #5]
    dec0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dec4:	4619      	mov	r1, r3
    dec6:	9803      	ldr	r0, [sp, #12]
    dec8:	f7fd fd2b 	bl	b922 <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    decc:	f006 fc14 	bl	146f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    ded0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ded4:	2b00      	cmp	r3, #0
    ded6:	d008      	beq.n	deea <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    ded8:	9803      	ldr	r0, [sp, #12]
    deda:	f000 fde9 	bl	eab0 <FlexCAN_Disable>
    dede:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dee0:	9b04      	ldr	r3, [sp, #16]
    dee2:	2b00      	cmp	r3, #0
    dee4:	d001      	beq.n	deea <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    dee6:	9b04      	ldr	r3, [sp, #16]
    dee8:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    deea:	9b05      	ldr	r3, [sp, #20]
}
    deec:	4618      	mov	r0, r3
    deee:	b007      	add	sp, #28
    def0:	f85d fb04 	ldr.w	pc, [sp], #4
    def4:	00018530 	.word	0x00018530

0000def8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    def8:	b500      	push	{lr}
    defa:	b087      	sub	sp, #28
    defc:	4603      	mov	r3, r0
    defe:	460a      	mov	r2, r1
    df00:	f88d 3007 	strb.w	r3, [sp, #7]
    df04:	4613      	mov	r3, r2
    df06:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    df0a:	2300      	movs	r3, #0
    df0c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    df0e:	2300      	movs	r3, #0
    df10:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    df12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df16:	4a1f      	ldr	r2, [pc, #124]	; (df94 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    df18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df1c:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    df1e:	9803      	ldr	r0, [sp, #12]
    df20:	f7fd fd26 	bl	b970 <FlexCAN_IsEnabled>
    df24:	4603      	mov	r3, r0
    df26:	2b00      	cmp	r3, #0
    df28:	bf14      	ite	ne
    df2a:	2301      	movne	r3, #1
    df2c:	2300      	moveq	r3, #0
    df2e:	b2db      	uxtb	r3, r3
    df30:	f083 0301 	eor.w	r3, r3, #1
    df34:	b2db      	uxtb	r3, r3
    df36:	f88d 300b 	strb.w	r3, [sp, #11]
    df3a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df3e:	f003 0301 	and.w	r3, r3, #1
    df42:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    df46:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df4a:	2b00      	cmp	r3, #0
    df4c:	d003      	beq.n	df56 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    df4e:	9803      	ldr	r0, [sp, #12]
    df50:	f000 fd30 	bl	e9b4 <FlexCAN_Enable>
    df54:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    df56:	9b05      	ldr	r3, [sp, #20]
    df58:	2b00      	cmp	r3, #0
    df5a:	d109      	bne.n	df70 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    df5c:	f006 fbf2 	bl	14744 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    df60:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df64:	4619      	mov	r1, r3
    df66:	9803      	ldr	r0, [sp, #12]
    df68:	f7fd ff43 	bl	bdf2 <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    df6c:	f006 fc16 	bl	1479c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    df70:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df74:	2b00      	cmp	r3, #0
    df76:	d008      	beq.n	df8a <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    df78:	9803      	ldr	r0, [sp, #12]
    df7a:	f000 fd99 	bl	eab0 <FlexCAN_Disable>
    df7e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    df80:	9b04      	ldr	r3, [sp, #16]
    df82:	2b00      	cmp	r3, #0
    df84:	d001      	beq.n	df8a <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    df86:	9b04      	ldr	r3, [sp, #16]
    df88:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    df8a:	9b05      	ldr	r3, [sp, #20]
}
    df8c:	4618      	mov	r0, r3
    df8e:	b007      	add	sp, #28
    df90:	f85d fb04 	ldr.w	pc, [sp], #4
    df94:	00018530 	.word	0x00018530

0000df98 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    df98:	b500      	push	{lr}
    df9a:	b085      	sub	sp, #20
    df9c:	4603      	mov	r3, r0
    df9e:	460a      	mov	r2, r1
    dfa0:	f88d 3007 	strb.w	r3, [sp, #7]
    dfa4:	4613      	mov	r3, r2
    dfa6:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dfaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dfae:	4a0b      	ldr	r2, [pc, #44]	; (dfdc <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    dfb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfb4:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    dfb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfba:	4619      	mov	r1, r3
    dfbc:	9803      	ldr	r0, [sp, #12]
    dfbe:	f7fd fd44 	bl	ba4a <FlexCAN_GetBuffStatusFlag>
    dfc2:	4603      	mov	r3, r0
    dfc4:	2b01      	cmp	r3, #1
    dfc6:	bf0c      	ite	eq
    dfc8:	2301      	moveq	r3, #1
    dfca:	2300      	movne	r3, #0
    dfcc:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    dfd0:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    dfd4:	4618      	mov	r0, r3
    dfd6:	b005      	add	sp, #20
    dfd8:	f85d fb04 	ldr.w	pc, [sp], #4
    dfdc:	00018530 	.word	0x00018530

0000dfe0 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    dfe0:	b500      	push	{lr}
    dfe2:	b085      	sub	sp, #20
    dfe4:	4603      	mov	r3, r0
    dfe6:	460a      	mov	r2, r1
    dfe8:	f88d 3007 	strb.w	r3, [sp, #7]
    dfec:	4613      	mov	r3, r2
    dfee:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dff2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dff6:	4a07      	ldr	r2, [pc, #28]	; (e014 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    dff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dffc:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    dffe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e002:	4619      	mov	r1, r3
    e004:	9803      	ldr	r0, [sp, #12]
    e006:	f7fd fd0d 	bl	ba24 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    e00a:	bf00      	nop
    e00c:	b005      	add	sp, #20
    e00e:	f85d fb04 	ldr.w	pc, [sp], #4
    e012:	bf00      	nop
    e014:	00018530 	.word	0x00018530

0000e018 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    e018:	b500      	push	{lr}
    e01a:	b087      	sub	sp, #28
    e01c:	4603      	mov	r3, r0
    e01e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e022:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e026:	4a11      	ldr	r2, [pc, #68]	; (e06c <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    e028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e02c:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    e02e:	2301      	movs	r3, #1
    e030:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e032:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e036:	4a0e      	ldr	r2, [pc, #56]	; (e070 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    e038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e03c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    e03e:	9804      	ldr	r0, [sp, #16]
    e040:	f7fd fc96 	bl	b970 <FlexCAN_IsEnabled>
    e044:	4603      	mov	r3, r0
    e046:	2b00      	cmp	r3, #0
    e048:	d00b      	beq.n	e062 <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    e04a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e04e:	4619      	mov	r1, r3
    e050:	9804      	ldr	r0, [sp, #16]
    e052:	f000 ffe1 	bl	f018 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    e056:	9b03      	ldr	r3, [sp, #12]
    e058:	2201      	movs	r2, #1
    e05a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e05e:	2300      	movs	r3, #0
    e060:	9305      	str	r3, [sp, #20]
    }

    return result;
    e062:	9b05      	ldr	r3, [sp, #20]
}
    e064:	4618      	mov	r0, r3
    e066:	b007      	add	sp, #28
    e068:	f85d fb04 	ldr.w	pc, [sp], #4
    e06c:	00018530 	.word	0x00018530
    e070:	1fff935c 	.word	0x1fff935c

0000e074 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    e074:	b500      	push	{lr}
    e076:	b087      	sub	sp, #28
    e078:	4603      	mov	r3, r0
    e07a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e07e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e082:	4a10      	ldr	r2, [pc, #64]	; (e0c4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    e084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e088:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    e08a:	2301      	movs	r3, #1
    e08c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e08e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e092:	4a0d      	ldr	r2, [pc, #52]	; (e0c8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    e094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e098:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    e09a:	9804      	ldr	r0, [sp, #16]
    e09c:	f7fd fc68 	bl	b970 <FlexCAN_IsEnabled>
    e0a0:	4603      	mov	r3, r0
    e0a2:	2b00      	cmp	r3, #0
    e0a4:	d008      	beq.n	e0b8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    e0a6:	9804      	ldr	r0, [sp, #16]
    e0a8:	f000 ffae 	bl	f008 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    e0ac:	9b03      	ldr	r3, [sp, #12]
    e0ae:	2200      	movs	r2, #0
    e0b0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e0b4:	2300      	movs	r3, #0
    e0b6:	9305      	str	r3, [sp, #20]
    }

    return result;
    e0b8:	9b05      	ldr	r3, [sp, #20]
}
    e0ba:	4618      	mov	r0, r3
    e0bc:	b007      	add	sp, #28
    e0be:	f85d fb04 	ldr.w	pc, [sp], #4
    e0c2:	bf00      	nop
    e0c4:	00018530 	.word	0x00018530
    e0c8:	1fff935c 	.word	0x1fff935c

0000e0cc <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    e0cc:	b500      	push	{lr}
    e0ce:	b087      	sub	sp, #28
    e0d0:	4603      	mov	r3, r0
    e0d2:	9100      	str	r1, [sp, #0]
    e0d4:	f88d 3007 	strb.w	r3, [sp, #7]
    e0d8:	4613      	mov	r3, r2
    e0da:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e0de:	2300      	movs	r3, #0
    e0e0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e0e2:	2300      	movs	r3, #0
    e0e4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e0e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0ea:	4a3a      	ldr	r2, [pc, #232]	; (e1d4 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    e0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0f0:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e0f2:	9803      	ldr	r0, [sp, #12]
    e0f4:	f7fd fc3c 	bl	b970 <FlexCAN_IsEnabled>
    e0f8:	4603      	mov	r3, r0
    e0fa:	2b00      	cmp	r3, #0
    e0fc:	bf14      	ite	ne
    e0fe:	2301      	movne	r3, #1
    e100:	2300      	moveq	r3, #0
    e102:	b2db      	uxtb	r3, r3
    e104:	f083 0301 	eor.w	r3, r3, #1
    e108:	b2db      	uxtb	r3, r3
    e10a:	f88d 300b 	strb.w	r3, [sp, #11]
    e10e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e112:	f003 0301 	and.w	r3, r3, #1
    e116:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e11a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e11e:	2b00      	cmp	r3, #0
    e120:	d003      	beq.n	e12a <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e122:	9803      	ldr	r0, [sp, #12]
    e124:	f000 fc46 	bl	e9b4 <FlexCAN_Enable>
    e128:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    e12a:	9b05      	ldr	r3, [sp, #20]
    e12c:	2b00      	cmp	r3, #0
    e12e:	d13c      	bne.n	e1aa <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    e130:	9b00      	ldr	r3, [sp, #0]
    e132:	2b04      	cmp	r3, #4
    e134:	d83b      	bhi.n	e1ae <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    e136:	a201      	add	r2, pc, #4	; (adr r2, e13c <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    e138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e13c:	0000e187 	.word	0x0000e187
    e140:	0000e199 	.word	0x0000e199
    e144:	0000e163 	.word	0x0000e163
    e148:	0000e175 	.word	0x0000e175
    e14c:	0000e151 	.word	0x0000e151
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    e150:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e154:	461a      	mov	r2, r3
    e156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e15a:	9803      	ldr	r0, [sp, #12]
    e15c:	f000 fce8 	bl	eb30 <FlexCAN_SetErrIntCmd>
                break;
    e160:	e026      	b.n	e1b0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    e162:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e166:	461a      	mov	r2, r3
    e168:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    e16c:	9803      	ldr	r0, [sp, #12]
    e16e:	f000 fcdf 	bl	eb30 <FlexCAN_SetErrIntCmd>
                break;
    e172:	e01d      	b.n	e1b0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    e174:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e178:	461a      	mov	r2, r3
    e17a:	f244 0101 	movw	r1, #16385	; 0x4001
    e17e:	9803      	ldr	r0, [sp, #12]
    e180:	f000 fcd6 	bl	eb30 <FlexCAN_SetErrIntCmd>
                break;
    e184:	e014      	b.n	e1b0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    e186:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e18a:	461a      	mov	r2, r3
    e18c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e190:	9803      	ldr	r0, [sp, #12]
    e192:	f000 fccd 	bl	eb30 <FlexCAN_SetErrIntCmd>
                }
                break;
    e196:	e00b      	b.n	e1b0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    e198:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e19c:	461a      	mov	r2, r3
    e19e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e1a2:	9803      	ldr	r0, [sp, #12]
    e1a4:	f000 fcc4 	bl	eb30 <FlexCAN_SetErrIntCmd>
                }
                break;
    e1a8:	e002      	b.n	e1b0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    e1aa:	bf00      	nop
    e1ac:	e000      	b.n	e1b0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    e1ae:	bf00      	nop

    if (TRUE == disabled)
    e1b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e1b4:	2b00      	cmp	r3, #0
    e1b6:	d008      	beq.n	e1ca <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    e1b8:	9803      	ldr	r0, [sp, #12]
    e1ba:	f000 fc79 	bl	eab0 <FlexCAN_Disable>
    e1be:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e1c0:	9b04      	ldr	r3, [sp, #16]
    e1c2:	2b00      	cmp	r3, #0
    e1c4:	d001      	beq.n	e1ca <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    e1c6:	9b04      	ldr	r3, [sp, #16]
    e1c8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e1ca:	9b05      	ldr	r3, [sp, #20]
}
    e1cc:	4618      	mov	r0, r3
    e1ce:	b007      	add	sp, #28
    e1d0:	f85d fb04 	ldr.w	pc, [sp], #4
    e1d4:	00018530 	.word	0x00018530

0000e1d8 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    e1d8:	b500      	push	{lr}
    e1da:	b087      	sub	sp, #28
    e1dc:	4603      	mov	r3, r0
    e1de:	460a      	mov	r2, r1
    e1e0:	f88d 3007 	strb.w	r3, [sp, #7]
    e1e4:	4613      	mov	r3, r2
    e1e6:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e1ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1ee:	4a27      	ldr	r2, [pc, #156]	; (e28c <FlexCAN_Ip_AbortTransfer+0xb4>)
    e1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1f4:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e1f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1fa:	4a25      	ldr	r2, [pc, #148]	; (e290 <FlexCAN_Ip_AbortTransfer+0xb8>)
    e1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e200:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e202:	2300      	movs	r3, #0
    e204:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    e206:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e20a:	2b1f      	cmp	r3, #31
    e20c:	d838      	bhi.n	e280 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    e20e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e212:	9a03      	ldr	r2, [sp, #12]
    e214:	011b      	lsls	r3, r3, #4
    e216:	4413      	add	r3, r2
    e218:	3304      	adds	r3, #4
    e21a:	681b      	ldr	r3, [r3, #0]
    e21c:	2b00      	cmp	r3, #0
    e21e:	d102      	bne.n	e226 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    e220:	2305      	movs	r3, #5
    e222:	9305      	str	r3, [sp, #20]
    e224:	e02c      	b.n	e280 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    e226:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e22a:	9b03      	ldr	r3, [sp, #12]
    e22c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    e230:	f89d 1007 	ldrb.w	r1, [sp, #7]
    e234:	9804      	ldr	r0, [sp, #16]
    e236:	f000 feb3 	bl	efa0 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    e23a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e23e:	9a03      	ldr	r2, [sp, #12]
    e240:	011b      	lsls	r3, r3, #4
    e242:	4413      	add	r3, r2
    e244:	3304      	adds	r3, #4
    e246:	681b      	ldr	r3, [r3, #0]
    e248:	2b02      	cmp	r3, #2
    e24a:	d108      	bne.n	e25e <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    e24c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e250:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e254:	4611      	mov	r1, r2
    e256:	4618      	mov	r0, r3
    e258:	f7fe fabc 	bl	c7d4 <FlexCAN_AbortTxTransfer>
    e25c:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    e25e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e262:	9a03      	ldr	r2, [sp, #12]
    e264:	011b      	lsls	r3, r3, #4
    e266:	4413      	add	r3, r2
    e268:	3304      	adds	r3, #4
    e26a:	681b      	ldr	r3, [r3, #0]
    e26c:	2b01      	cmp	r3, #1
    e26e:	d107      	bne.n	e280 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    e270:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e274:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e278:	4611      	mov	r1, r2
    e27a:	4618      	mov	r0, r3
    e27c:	f7fe fb34 	bl	c8e8 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    e280:	9b05      	ldr	r3, [sp, #20]
}
    e282:	4618      	mov	r0, r3
    e284:	b007      	add	sp, #28
    e286:	f85d fb04 	ldr.w	pc, [sp], #4
    e28a:	bf00      	nop
    e28c:	00018530 	.word	0x00018530
    e290:	1fff935c 	.word	0x1fff935c

0000e294 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    e294:	b500      	push	{lr}
    e296:	b087      	sub	sp, #28
    e298:	4603      	mov	r3, r0
    e29a:	9100      	str	r1, [sp, #0]
    e29c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e2a0:	2300      	movs	r3, #0
    e2a2:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e2a4:	2300      	movs	r3, #0
    e2a6:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e2a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2ac:	4a1b      	ldr	r2, [pc, #108]	; (e31c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    e2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2b2:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e2b4:	9803      	ldr	r0, [sp, #12]
    e2b6:	f7fd fb5b 	bl	b970 <FlexCAN_IsEnabled>
    e2ba:	4603      	mov	r3, r0
    e2bc:	2b00      	cmp	r3, #0
    e2be:	bf14      	ite	ne
    e2c0:	2301      	movne	r3, #1
    e2c2:	2300      	moveq	r3, #0
    e2c4:	b2db      	uxtb	r3, r3
    e2c6:	f083 0301 	eor.w	r3, r3, #1
    e2ca:	b2db      	uxtb	r3, r3
    e2cc:	f88d 300b 	strb.w	r3, [sp, #11]
    e2d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e2d4:	f003 0301 	and.w	r3, r3, #1
    e2d8:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e2dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e2e0:	2b00      	cmp	r3, #0
    e2e2:	d003      	beq.n	e2ec <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e2e4:	9803      	ldr	r0, [sp, #12]
    e2e6:	f000 fb65 	bl	e9b4 <FlexCAN_Enable>
    e2ea:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e2ec:	9b05      	ldr	r3, [sp, #20]
    e2ee:	2b00      	cmp	r3, #0
    e2f0:	d102      	bne.n	e2f8 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    e2f2:	9b03      	ldr	r3, [sp, #12]
    e2f4:	9a00      	ldr	r2, [sp, #0]
    e2f6:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    e2f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e2fc:	2b00      	cmp	r3, #0
    e2fe:	d008      	beq.n	e312 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e300:	9803      	ldr	r0, [sp, #12]
    e302:	f000 fbd5 	bl	eab0 <FlexCAN_Disable>
    e306:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e308:	9b04      	ldr	r3, [sp, #16]
    e30a:	2b00      	cmp	r3, #0
    e30c:	d001      	beq.n	e312 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    e30e:	9b04      	ldr	r3, [sp, #16]
    e310:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e312:	9b05      	ldr	r3, [sp, #20]
}
    e314:	4618      	mov	r0, r3
    e316:	b007      	add	sp, #28
    e318:	f85d fb04 	ldr.w	pc, [sp], #4
    e31c:	00018530 	.word	0x00018530

0000e320 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    e320:	b500      	push	{lr}
    e322:	b087      	sub	sp, #28
    e324:	4603      	mov	r3, r0
    e326:	9100      	str	r1, [sp, #0]
    e328:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e32c:	2300      	movs	r3, #0
    e32e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e330:	2300      	movs	r3, #0
    e332:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e334:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e338:	4a1b      	ldr	r2, [pc, #108]	; (e3a8 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    e33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e33e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e340:	9803      	ldr	r0, [sp, #12]
    e342:	f7fd fb15 	bl	b970 <FlexCAN_IsEnabled>
    e346:	4603      	mov	r3, r0
    e348:	2b00      	cmp	r3, #0
    e34a:	bf14      	ite	ne
    e34c:	2301      	movne	r3, #1
    e34e:	2300      	moveq	r3, #0
    e350:	b2db      	uxtb	r3, r3
    e352:	f083 0301 	eor.w	r3, r3, #1
    e356:	b2db      	uxtb	r3, r3
    e358:	f88d 300b 	strb.w	r3, [sp, #11]
    e35c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e360:	f003 0301 	and.w	r3, r3, #1
    e364:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e368:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e36c:	2b00      	cmp	r3, #0
    e36e:	d003      	beq.n	e378 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e370:	9803      	ldr	r0, [sp, #12]
    e372:	f000 fb1f 	bl	e9b4 <FlexCAN_Enable>
    e376:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e378:	9b05      	ldr	r3, [sp, #20]
    e37a:	2b00      	cmp	r3, #0
    e37c:	d102      	bne.n	e384 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    e37e:	9b03      	ldr	r3, [sp, #12]
    e380:	9a00      	ldr	r2, [sp, #0]
    e382:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    e384:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e388:	2b00      	cmp	r3, #0
    e38a:	d008      	beq.n	e39e <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e38c:	9803      	ldr	r0, [sp, #12]
    e38e:	f000 fb8f 	bl	eab0 <FlexCAN_Disable>
    e392:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e394:	9b04      	ldr	r3, [sp, #16]
    e396:	2b00      	cmp	r3, #0
    e398:	d001      	beq.n	e39e <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    e39a:	9b04      	ldr	r3, [sp, #16]
    e39c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e39e:	9b05      	ldr	r3, [sp, #20]
}
    e3a0:	4618      	mov	r0, r3
    e3a2:	b007      	add	sp, #28
    e3a4:	f85d fb04 	ldr.w	pc, [sp], #4
    e3a8:	00018530 	.word	0x00018530

0000e3ac <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    e3ac:	b500      	push	{lr}
    e3ae:	b087      	sub	sp, #28
    e3b0:	4603      	mov	r3, r0
    e3b2:	460a      	mov	r2, r1
    e3b4:	f88d 3007 	strb.w	r3, [sp, #7]
    e3b8:	4613      	mov	r3, r2
    e3ba:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e3be:	2300      	movs	r3, #0
    e3c0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e3c2:	2300      	movs	r3, #0
    e3c4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e3c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e3ca:	4a1f      	ldr	r2, [pc, #124]	; (e448 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    e3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3d0:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e3d2:	9803      	ldr	r0, [sp, #12]
    e3d4:	f7fd facc 	bl	b970 <FlexCAN_IsEnabled>
    e3d8:	4603      	mov	r3, r0
    e3da:	2b00      	cmp	r3, #0
    e3dc:	bf14      	ite	ne
    e3de:	2301      	movne	r3, #1
    e3e0:	2300      	moveq	r3, #0
    e3e2:	b2db      	uxtb	r3, r3
    e3e4:	f083 0301 	eor.w	r3, r3, #1
    e3e8:	b2db      	uxtb	r3, r3
    e3ea:	f88d 300b 	strb.w	r3, [sp, #11]
    e3ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3f2:	f003 0301 	and.w	r3, r3, #1
    e3f6:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e3fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3fe:	2b00      	cmp	r3, #0
    e400:	d003      	beq.n	e40a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e402:	9803      	ldr	r0, [sp, #12]
    e404:	f000 fad6 	bl	e9b4 <FlexCAN_Enable>
    e408:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    e40a:	9b05      	ldr	r3, [sp, #20]
    e40c:	2b00      	cmp	r3, #0
    e40e:	d109      	bne.n	e424 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e410:	f005 ff5a 	bl	142c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    e414:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e418:	4619      	mov	r1, r3
    e41a:	9803      	ldr	r0, [sp, #12]
    e41c:	f7fd fae5 	bl	b9ea <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e420:	f005 ff7e 	bl	14320 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    e424:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e428:	2b00      	cmp	r3, #0
    e42a:	d008      	beq.n	e43e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    e42c:	9803      	ldr	r0, [sp, #12]
    e42e:	f000 fb3f 	bl	eab0 <FlexCAN_Disable>
    e432:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e434:	9b04      	ldr	r3, [sp, #16]
    e436:	2b00      	cmp	r3, #0
    e438:	d001      	beq.n	e43e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    e43a:	9b04      	ldr	r3, [sp, #16]
    e43c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e43e:	9b05      	ldr	r3, [sp, #20]
}
    e440:	4618      	mov	r0, r3
    e442:	b007      	add	sp, #28
    e444:	f85d fb04 	ldr.w	pc, [sp], #4
    e448:	00018530 	.word	0x00018530

0000e44c <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    e44c:	b500      	push	{lr}
    e44e:	b085      	sub	sp, #20
    e450:	4603      	mov	r3, r0
    e452:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    e456:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e45a:	4a06      	ldr	r2, [pc, #24]	; (e474 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    e45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e460:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    e462:	9803      	ldr	r0, [sp, #12]
    e464:	f7fd fc5d 	bl	bd22 <FlexCAN_IsListenOnlyModeEnabled>
    e468:	4603      	mov	r3, r0
}
    e46a:	4618      	mov	r0, r3
    e46c:	b005      	add	sp, #20
    e46e:	f85d fb04 	ldr.w	pc, [sp], #4
    e472:	bf00      	nop
    e474:	00018530 	.word	0x00018530

0000e478 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    e478:	b500      	push	{lr}
    e47a:	b089      	sub	sp, #36	; 0x24
    e47c:	4603      	mov	r3, r0
    e47e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    e482:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e486:	4a27      	ldr	r2, [pc, #156]	; (e524 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    e488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e48c:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    e48e:	2300      	movs	r3, #0
    e490:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    e492:	2300      	movs	r3, #0
    e494:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e496:	2100      	movs	r1, #0
    e498:	4823      	ldr	r0, [pc, #140]	; (e528 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    e49a:	f7f3 fcfb 	bl	1e94 <OsIf_MicrosToTicks>
    e49e:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    e4a0:	2301      	movs	r3, #1
    e4a2:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    e4a4:	9b05      	ldr	r3, [sp, #20]
    e4a6:	685b      	ldr	r3, [r3, #4]
    e4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e4ac:	2b00      	cmp	r3, #0
    e4ae:	d033      	beq.n	e518 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    e4b0:	2300      	movs	r3, #0
    e4b2:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e4b4:	9b05      	ldr	r3, [sp, #20]
    e4b6:	6a1b      	ldr	r3, [r3, #32]
    e4b8:	f003 0320 	and.w	r3, r3, #32
    e4bc:	2b00      	cmp	r3, #0
    e4be:	d02b      	beq.n	e518 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e4c0:	f006 fa36 	bl	14930 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    e4c4:	9b05      	ldr	r3, [sp, #20]
    e4c6:	685b      	ldr	r3, [r3, #4]
    e4c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    e4cc:	9b05      	ldr	r3, [sp, #20]
    e4ce:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    e4d0:	9b05      	ldr	r3, [sp, #20]
    e4d2:	685b      	ldr	r3, [r3, #4]
    e4d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e4d8:	9b05      	ldr	r3, [sp, #20]
    e4da:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e4dc:	f006 fa54 	bl	14988 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e4e0:	2000      	movs	r0, #0
    e4e2:	f7f3 fc8b 	bl	1dfc <OsIf_GetCounter>
    e4e6:	4603      	mov	r3, r0
    e4e8:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e4ea:	e00f      	b.n	e50c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e4ec:	ab03      	add	r3, sp, #12
    e4ee:	2100      	movs	r1, #0
    e4f0:	4618      	mov	r0, r3
    e4f2:	f7f3 fc9c 	bl	1e2e <OsIf_GetElapsed>
    e4f6:	4602      	mov	r2, r0
    e4f8:	9b07      	ldr	r3, [sp, #28]
    e4fa:	4413      	add	r3, r2
    e4fc:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    e4fe:	9a07      	ldr	r2, [sp, #28]
    e500:	9b04      	ldr	r3, [sp, #16]
    e502:	429a      	cmp	r2, r3
    e504:	d302      	bcc.n	e50c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    e506:	2303      	movs	r3, #3
    e508:	9306      	str	r3, [sp, #24]
                    break;
    e50a:	e005      	b.n	e518 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e50c:	9b05      	ldr	r3, [sp, #20]
    e50e:	6a1b      	ldr	r3, [r3, #32]
    e510:	f003 0320 	and.w	r3, r3, #32
    e514:	2b00      	cmp	r3, #0
    e516:	d1e9      	bne.n	e4ec <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    e518:	9b06      	ldr	r3, [sp, #24]
}
    e51a:	4618      	mov	r0, r3
    e51c:	b009      	add	sp, #36	; 0x24
    e51e:	f85d fb04 	ldr.w	pc, [sp], #4
    e522:	bf00      	nop
    e524:	00018530 	.word	0x00018530
    e528:	000f4240 	.word	0x000f4240

0000e52c <FlexCAN_SetSelfReception>:
{
    e52c:	b082      	sub	sp, #8
    e52e:	9001      	str	r0, [sp, #4]
    e530:	460b      	mov	r3, r1
    e532:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    e536:	9b01      	ldr	r3, [sp, #4]
    e538:	681b      	ldr	r3, [r3, #0]
    e53a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e53e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e542:	2a00      	cmp	r2, #0
    e544:	d001      	beq.n	e54a <FlexCAN_SetSelfReception+0x1e>
    e546:	2200      	movs	r2, #0
    e548:	e001      	b.n	e54e <FlexCAN_SetSelfReception+0x22>
    e54a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e54e:	431a      	orrs	r2, r3
    e550:	9b01      	ldr	r3, [sp, #4]
    e552:	601a      	str	r2, [r3, #0]
}
    e554:	bf00      	nop
    e556:	b002      	add	sp, #8
    e558:	4770      	bx	lr

0000e55a <FlexCAN_IsFDEnabled>:
{
    e55a:	b082      	sub	sp, #8
    e55c:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    e55e:	9b01      	ldr	r3, [sp, #4]
    e560:	681b      	ldr	r3, [r3, #0]
    e562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    e566:	2b00      	cmp	r3, #0
    e568:	bf14      	ite	ne
    e56a:	2301      	movne	r3, #1
    e56c:	2300      	moveq	r3, #0
    e56e:	b2db      	uxtb	r3, r3
}
    e570:	4618      	mov	r0, r3
    e572:	b002      	add	sp, #8
    e574:	4770      	bx	lr

0000e576 <FlexCAN_SetIsoCan>:
{
    e576:	b082      	sub	sp, #8
    e578:	9001      	str	r0, [sp, #4]
    e57a:	460b      	mov	r3, r1
    e57c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    e580:	9b01      	ldr	r3, [sp, #4]
    e582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e588:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e58c:	2a00      	cmp	r2, #0
    e58e:	d002      	beq.n	e596 <FlexCAN_SetIsoCan+0x20>
    e590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e594:	e000      	b.n	e598 <FlexCAN_SetIsoCan+0x22>
    e596:	2200      	movs	r2, #0
    e598:	431a      	orrs	r2, r3
    e59a:	9b01      	ldr	r3, [sp, #4]
    e59c:	635a      	str	r2, [r3, #52]	; 0x34
}
    e59e:	bf00      	nop
    e5a0:	b002      	add	sp, #8
    e5a2:	4770      	bx	lr

0000e5a4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    e5a4:	b082      	sub	sp, #8
    e5a6:	9001      	str	r0, [sp, #4]
    e5a8:	460b      	mov	r3, r1
    e5aa:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    e5ae:	9b01      	ldr	r3, [sp, #4]
    e5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e5b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    e5b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e5ba:	2a00      	cmp	r2, #0
    e5bc:	d002      	beq.n	e5c4 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    e5be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e5c2:	e000      	b.n	e5c6 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    e5c4:	2200      	movs	r2, #0
    e5c6:	431a      	orrs	r2, r3
    e5c8:	9b01      	ldr	r3, [sp, #4]
    e5ca:	635a      	str	r2, [r3, #52]	; 0x34
}
    e5cc:	bf00      	nop
    e5ce:	b002      	add	sp, #8
    e5d0:	4770      	bx	lr

0000e5d2 <FlexCAN_SetProtocolException>:
{
    e5d2:	b082      	sub	sp, #8
    e5d4:	9001      	str	r0, [sp, #4]
    e5d6:	460b      	mov	r3, r1
    e5d8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    e5dc:	9b01      	ldr	r3, [sp, #4]
    e5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e5e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    e5e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e5e8:	2a00      	cmp	r2, #0
    e5ea:	d002      	beq.n	e5f2 <FlexCAN_SetProtocolException+0x20>
    e5ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e5f0:	e000      	b.n	e5f4 <FlexCAN_SetProtocolException+0x22>
    e5f2:	2200      	movs	r2, #0
    e5f4:	431a      	orrs	r2, r3
    e5f6:	9b01      	ldr	r3, [sp, #4]
    e5f8:	635a      	str	r2, [r3, #52]	; 0x34
}
    e5fa:	bf00      	nop
    e5fc:	b002      	add	sp, #8
    e5fe:	4770      	bx	lr

0000e600 <FlexCAN_SetRemoteReqStore>:
{
    e600:	b082      	sub	sp, #8
    e602:	9001      	str	r0, [sp, #4]
    e604:	460b      	mov	r3, r1
    e606:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    e60a:	9b01      	ldr	r3, [sp, #4]
    e60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e60e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e612:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e616:	2a00      	cmp	r2, #0
    e618:	d002      	beq.n	e620 <FlexCAN_SetRemoteReqStore+0x20>
    e61a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e61e:	e000      	b.n	e622 <FlexCAN_SetRemoteReqStore+0x22>
    e620:	2200      	movs	r2, #0
    e622:	431a      	orrs	r2, r3
    e624:	9b01      	ldr	r3, [sp, #4]
    e626:	635a      	str	r2, [r3, #52]	; 0x34
}
    e628:	bf00      	nop
    e62a:	b002      	add	sp, #8
    e62c:	4770      	bx	lr

0000e62e <FlexCAN_SetBusOffAutorecovery>:
{
    e62e:	b082      	sub	sp, #8
    e630:	9001      	str	r0, [sp, #4]
    e632:	460b      	mov	r3, r1
    e634:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    e638:	9b01      	ldr	r3, [sp, #4]
    e63a:	685b      	ldr	r3, [r3, #4]
    e63c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    e640:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e644:	2a00      	cmp	r2, #0
    e646:	d001      	beq.n	e64c <FlexCAN_SetBusOffAutorecovery+0x1e>
    e648:	2200      	movs	r2, #0
    e64a:	e000      	b.n	e64e <FlexCAN_SetBusOffAutorecovery+0x20>
    e64c:	2240      	movs	r2, #64	; 0x40
    e64e:	431a      	orrs	r2, r3
    e650:	9b01      	ldr	r3, [sp, #4]
    e652:	605a      	str	r2, [r3, #4]
}
    e654:	bf00      	nop
    e656:	b002      	add	sp, #8
    e658:	4770      	bx	lr

0000e65a <FlexCAN_SetEdgeFilter>:
{
    e65a:	b082      	sub	sp, #8
    e65c:	9001      	str	r0, [sp, #4]
    e65e:	460b      	mov	r3, r1
    e660:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    e664:	9b01      	ldr	r3, [sp, #4]
    e666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e66c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e670:	2a00      	cmp	r2, #0
    e672:	d001      	beq.n	e678 <FlexCAN_SetEdgeFilter+0x1e>
    e674:	2200      	movs	r2, #0
    e676:	e001      	b.n	e67c <FlexCAN_SetEdgeFilter+0x22>
    e678:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e67c:	431a      	orrs	r2, r3
    e67e:	9b01      	ldr	r3, [sp, #4]
    e680:	635a      	str	r2, [r3, #52]	; 0x34
}
    e682:	bf00      	nop
    e684:	b002      	add	sp, #8
    e686:	4770      	bx	lr

0000e688 <FlexCAN_CanBitSampling>:
{
    e688:	b082      	sub	sp, #8
    e68a:	9001      	str	r0, [sp, #4]
    e68c:	460b      	mov	r3, r1
    e68e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    e692:	9b01      	ldr	r3, [sp, #4]
    e694:	685b      	ldr	r3, [r3, #4]
    e696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e69a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e69e:	2a00      	cmp	r2, #0
    e6a0:	d001      	beq.n	e6a6 <FlexCAN_CanBitSampling+0x1e>
    e6a2:	2280      	movs	r2, #128	; 0x80
    e6a4:	e000      	b.n	e6a8 <FlexCAN_CanBitSampling+0x20>
    e6a6:	2200      	movs	r2, #0
    e6a8:	431a      	orrs	r2, r3
    e6aa:	9b01      	ldr	r3, [sp, #4]
    e6ac:	605a      	str	r2, [r3, #4]
}
    e6ae:	bf00      	nop
    e6b0:	b002      	add	sp, #8
    e6b2:	4770      	bx	lr

0000e6b4 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    e6b4:	b084      	sub	sp, #16
    e6b6:	4603      	mov	r3, r0
    e6b8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    e6bc:	23ff      	movs	r3, #255	; 0xff
    e6be:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    e6c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e6c4:	2b40      	cmp	r3, #64	; 0x40
    e6c6:	d804      	bhi.n	e6d2 <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    e6c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e6cc:	4a03      	ldr	r2, [pc, #12]	; (e6dc <FlexCAN_ComputeDLCValue+0x28>)
    e6ce:	5cd3      	ldrb	r3, [r2, r3]
    e6d0:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    e6d2:	9b03      	ldr	r3, [sp, #12]
    e6d4:	b2db      	uxtb	r3, r3
}
    e6d6:	4618      	mov	r0, r3
    e6d8:	b004      	add	sp, #16
    e6da:	4770      	bx	lr
    e6dc:	0001853c 	.word	0x0001853c

0000e6e0 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    e6e0:	b500      	push	{lr}
    e6e2:	b087      	sub	sp, #28
    e6e4:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    e6e6:	9801      	ldr	r0, [sp, #4]
    e6e8:	f000 f8f6 	bl	e8d8 <FlexCAN_GetMaxMbNum>
    e6ec:	4603      	mov	r3, r0
    e6ee:	009b      	lsls	r3, r3, #2
    e6f0:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    e6f2:	9801      	ldr	r0, [sp, #4]
    e6f4:	f000 f8f0 	bl	e8d8 <FlexCAN_GetMaxMbNum>
    e6f8:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e6fa:	9b01      	ldr	r3, [sp, #4]
    e6fc:	3380      	adds	r3, #128	; 0x80
    e6fe:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e700:	2300      	movs	r3, #0
    e702:	9305      	str	r3, [sp, #20]
    e704:	e008      	b.n	e718 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    e706:	9b05      	ldr	r3, [sp, #20]
    e708:	009b      	lsls	r3, r3, #2
    e70a:	9a02      	ldr	r2, [sp, #8]
    e70c:	4413      	add	r3, r2
    e70e:	2200      	movs	r2, #0
    e710:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e712:	9b05      	ldr	r3, [sp, #20]
    e714:	3301      	adds	r3, #1
    e716:	9305      	str	r3, [sp, #20]
    e718:	9a05      	ldr	r2, [sp, #20]
    e71a:	9b04      	ldr	r3, [sp, #16]
    e71c:	429a      	cmp	r2, r3
    e71e:	d3f2      	bcc.n	e706 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    e720:	9b01      	ldr	r3, [sp, #4]
    e722:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    e726:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e728:	2300      	movs	r3, #0
    e72a:	9305      	str	r3, [sp, #20]
    e72c:	e008      	b.n	e740 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    e72e:	9b05      	ldr	r3, [sp, #20]
    e730:	009b      	lsls	r3, r3, #2
    e732:	9a02      	ldr	r2, [sp, #8]
    e734:	4413      	add	r3, r2
    e736:	2200      	movs	r2, #0
    e738:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e73a:	9b05      	ldr	r3, [sp, #20]
    e73c:	3301      	adds	r3, #1
    e73e:	9305      	str	r3, [sp, #20]
    e740:	9a05      	ldr	r2, [sp, #20]
    e742:	9b03      	ldr	r3, [sp, #12]
    e744:	429a      	cmp	r2, r3
    e746:	d3f2      	bcc.n	e72e <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    e748:	bf00      	nop
    e74a:	bf00      	nop
    e74c:	b007      	add	sp, #28
    e74e:	f85d fb04 	ldr.w	pc, [sp], #4

0000e752 <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    e752:	b084      	sub	sp, #16
    e754:	4603      	mov	r3, r0
    e756:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    e75a:	2308      	movs	r3, #8
    e75c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    e760:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e764:	2b08      	cmp	r3, #8
    e766:	d804      	bhi.n	e772 <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    e768:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e76c:	f88d 300f 	strb.w	r3, [sp, #15]
    e770:	e033      	b.n	e7da <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    e772:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e776:	3b09      	subs	r3, #9
    e778:	2b06      	cmp	r3, #6
    e77a:	d82d      	bhi.n	e7d8 <FlexCAN_ComputePayloadSize+0x86>
    e77c:	a201      	add	r2, pc, #4	; (adr r2, e784 <FlexCAN_ComputePayloadSize+0x32>)
    e77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e782:	bf00      	nop
    e784:	0000e7a1 	.word	0x0000e7a1
    e788:	0000e7a9 	.word	0x0000e7a9
    e78c:	0000e7b1 	.word	0x0000e7b1
    e790:	0000e7b9 	.word	0x0000e7b9
    e794:	0000e7c1 	.word	0x0000e7c1
    e798:	0000e7c9 	.word	0x0000e7c9
    e79c:	0000e7d1 	.word	0x0000e7d1
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    e7a0:	230c      	movs	r3, #12
    e7a2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7a6:	e018      	b.n	e7da <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    e7a8:	2310      	movs	r3, #16
    e7aa:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7ae:	e014      	b.n	e7da <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    e7b0:	2314      	movs	r3, #20
    e7b2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7b6:	e010      	b.n	e7da <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    e7b8:	2318      	movs	r3, #24
    e7ba:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7be:	e00c      	b.n	e7da <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    e7c0:	2320      	movs	r3, #32
    e7c2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7c6:	e008      	b.n	e7da <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    e7c8:	2330      	movs	r3, #48	; 0x30
    e7ca:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7ce:	e004      	b.n	e7da <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    e7d0:	2340      	movs	r3, #64	; 0x40
    e7d2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7d6:	e000      	b.n	e7da <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    e7d8:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    e7da:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    e7de:	4618      	mov	r0, r3
    e7e0:	b004      	add	sp, #16
    e7e2:	4770      	bx	lr

0000e7e4 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    e7e4:	b500      	push	{lr}
    e7e6:	b08b      	sub	sp, #44	; 0x2c
    e7e8:	9001      	str	r0, [sp, #4]
    e7ea:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    e7ec:	2308      	movs	r3, #8
    e7ee:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    e7f2:	2300      	movs	r3, #0
    e7f4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    e7f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    e7fc:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    e7fe:	2300      	movs	r3, #0
    e800:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    e804:	9b00      	ldr	r3, [sp, #0]
    e806:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    e80a:	2300      	movs	r3, #0
    e80c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    e810:	2300      	movs	r3, #0
    e812:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    e816:	2300      	movs	r3, #0
    e818:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    e81a:	2300      	movs	r3, #0
    e81c:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e820:	9b01      	ldr	r3, [sp, #4]
    e822:	3380      	adds	r3, #128	; 0x80
    e824:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    e826:	2300      	movs	r3, #0
    e828:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e82a:	2300      	movs	r3, #0
    e82c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e830:	e02d      	b.n	e88e <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    e832:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e836:	4619      	mov	r1, r3
    e838:	9801      	ldr	r0, [sp, #4]
    e83a:	f000 fad1 	bl	ede0 <FlexCAN_GetPayloadSize>
    e83e:	4603      	mov	r3, r0
    e840:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    e844:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e848:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e84c:	4413      	add	r3, r2
    e84e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    e852:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e856:	9a07      	ldr	r2, [sp, #28]
    e858:	fbb2 f3f3 	udiv	r3, r2, r3
    e85c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    e860:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e864:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e868:	429a      	cmp	r2, r3
    e86a:	d815      	bhi.n	e898 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    e86c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    e870:	3380      	adds	r3, #128	; 0x80
    e872:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    e876:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    e87a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e87e:	1ad3      	subs	r3, r2, r3
    e880:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e884:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e888:	3301      	adds	r3, #1
    e88a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e88e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e892:	2b00      	cmp	r3, #0
    e894:	d0cd      	beq.n	e832 <FlexCAN_GetMsgBuffRegion+0x4e>
    e896:	e000      	b.n	e89a <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    e898:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    e89a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    e89e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e8a2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e8a6:	fbb3 f0f2 	udiv	r0, r3, r2
    e8aa:	fb00 f202 	mul.w	r2, r0, r2
    e8ae:	1a9b      	subs	r3, r3, r2
    e8b0:	b2db      	uxtb	r3, r3
    e8b2:	461a      	mov	r2, r3
    e8b4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e8b8:	089b      	lsrs	r3, r3, #2
    e8ba:	b2db      	uxtb	r3, r3
    e8bc:	fb02 f303 	mul.w	r3, r2, r3
    e8c0:	440b      	add	r3, r1
    e8c2:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    e8c4:	9b06      	ldr	r3, [sp, #24]
    e8c6:	009b      	lsls	r3, r3, #2
    e8c8:	9a04      	ldr	r2, [sp, #16]
    e8ca:	4413      	add	r3, r2
    e8cc:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    e8ce:	9b03      	ldr	r3, [sp, #12]
}
    e8d0:	4618      	mov	r0, r3
    e8d2:	b00b      	add	sp, #44	; 0x2c
    e8d4:	f85d fb04 	ldr.w	pc, [sp], #4

0000e8d8 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    e8d8:	b084      	sub	sp, #16
    e8da:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    e8dc:	2300      	movs	r3, #0
    e8de:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e8e0:	2300      	movs	r3, #0
    e8e2:	9303      	str	r3, [sp, #12]
    e8e4:	e00e      	b.n	e904 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    e8e6:	4a0b      	ldr	r2, [pc, #44]	; (e914 <FlexCAN_GetMaxMbNum+0x3c>)
    e8e8:	9b03      	ldr	r3, [sp, #12]
    e8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8ee:	9a01      	ldr	r2, [sp, #4]
    e8f0:	429a      	cmp	r2, r3
    e8f2:	d104      	bne.n	e8fe <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    e8f4:	4a08      	ldr	r2, [pc, #32]	; (e918 <FlexCAN_GetMaxMbNum+0x40>)
    e8f6:	9b03      	ldr	r3, [sp, #12]
    e8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8fc:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e8fe:	9b03      	ldr	r3, [sp, #12]
    e900:	3301      	adds	r3, #1
    e902:	9303      	str	r3, [sp, #12]
    e904:	9b03      	ldr	r3, [sp, #12]
    e906:	2b02      	cmp	r3, #2
    e908:	d9ed      	bls.n	e8e6 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    e90a:	9b02      	ldr	r3, [sp, #8]
}
    e90c:	4618      	mov	r0, r3
    e90e:	b004      	add	sp, #16
    e910:	4770      	bx	lr
    e912:	bf00      	nop
    e914:	00018580 	.word	0x00018580
    e918:	0001858c 	.word	0x0001858c

0000e91c <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    e91c:	b500      	push	{lr}
    e91e:	b087      	sub	sp, #28
    e920:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    e922:	2300      	movs	r3, #0
    e924:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    e926:	2300      	movs	r3, #0
    e928:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e92a:	2100      	movs	r1, #0
    e92c:	4820      	ldr	r0, [pc, #128]	; (e9b0 <FlexCAN_EnterFreezeMode+0x94>)
    e92e:	f7f3 fab1 	bl	1e94 <OsIf_MicrosToTicks>
    e932:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    e934:	2300      	movs	r3, #0
    e936:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    e938:	f005 fa36 	bl	13da8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    e93c:	9b01      	ldr	r3, [sp, #4]
    e93e:	681b      	ldr	r3, [r3, #0]
    e940:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e944:	9b01      	ldr	r3, [sp, #4]
    e946:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    e948:	9b01      	ldr	r3, [sp, #4]
    e94a:	681b      	ldr	r3, [r3, #0]
    e94c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    e950:	9b01      	ldr	r3, [sp, #4]
    e952:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    e954:	9b01      	ldr	r3, [sp, #4]
    e956:	681b      	ldr	r3, [r3, #0]
    e958:	2b00      	cmp	r3, #0
    e95a:	da05      	bge.n	e968 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    e95c:	9b01      	ldr	r3, [sp, #4]
    e95e:	681b      	ldr	r3, [r3, #0]
    e960:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    e964:	9b01      	ldr	r3, [sp, #4]
    e966:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    e968:	f005 fa4a 	bl	13e00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e96c:	2000      	movs	r0, #0
    e96e:	f7f3 fa45 	bl	1dfc <OsIf_GetCounter>
    e972:	4603      	mov	r3, r0
    e974:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    e976:	e00f      	b.n	e998 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e978:	ab02      	add	r3, sp, #8
    e97a:	2100      	movs	r1, #0
    e97c:	4618      	mov	r0, r3
    e97e:	f7f3 fa56 	bl	1e2e <OsIf_GetElapsed>
    e982:	4602      	mov	r2, r0
    e984:	9b05      	ldr	r3, [sp, #20]
    e986:	4413      	add	r3, r2
    e988:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    e98a:	9a05      	ldr	r2, [sp, #20]
    e98c:	9b03      	ldr	r3, [sp, #12]
    e98e:	429a      	cmp	r2, r3
    e990:	d302      	bcc.n	e998 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    e992:	2303      	movs	r3, #3
    e994:	9304      	str	r3, [sp, #16]
            break;
    e996:	e005      	b.n	e9a4 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    e998:	9b01      	ldr	r3, [sp, #4]
    e99a:	681b      	ldr	r3, [r3, #0]
    e99c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    e9a0:	2b00      	cmp	r3, #0
    e9a2:	d0e9      	beq.n	e978 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    e9a4:	9b04      	ldr	r3, [sp, #16]
}
    e9a6:	4618      	mov	r0, r3
    e9a8:	b007      	add	sp, #28
    e9aa:	f85d fb04 	ldr.w	pc, [sp], #4
    e9ae:	bf00      	nop
    e9b0:	000f4240 	.word	0x000f4240

0000e9b4 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    e9b4:	b500      	push	{lr}
    e9b6:	b087      	sub	sp, #28
    e9b8:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    e9ba:	2300      	movs	r3, #0
    e9bc:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    e9be:	2300      	movs	r3, #0
    e9c0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e9c2:	2100      	movs	r1, #0
    e9c4:	4818      	ldr	r0, [pc, #96]	; (ea28 <FlexCAN_Enable+0x74>)
    e9c6:	f7f3 fa65 	bl	1e94 <OsIf_MicrosToTicks>
    e9ca:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    e9cc:	2300      	movs	r3, #0
    e9ce:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    e9d0:	f005 fa3c 	bl	13e4c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    e9d4:	9b01      	ldr	r3, [sp, #4]
    e9d6:	681b      	ldr	r3, [r3, #0]
    e9d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    e9dc:	9b01      	ldr	r3, [sp, #4]
    e9de:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    e9e0:	f005 fa60 	bl	13ea4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e9e4:	2000      	movs	r0, #0
    e9e6:	f7f3 fa09 	bl	1dfc <OsIf_GetCounter>
    e9ea:	4603      	mov	r3, r0
    e9ec:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    e9ee:	e00f      	b.n	ea10 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e9f0:	ab02      	add	r3, sp, #8
    e9f2:	2100      	movs	r1, #0
    e9f4:	4618      	mov	r0, r3
    e9f6:	f7f3 fa1a 	bl	1e2e <OsIf_GetElapsed>
    e9fa:	4602      	mov	r2, r0
    e9fc:	9b05      	ldr	r3, [sp, #20]
    e9fe:	4413      	add	r3, r2
    ea00:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ea02:	9a05      	ldr	r2, [sp, #20]
    ea04:	9b03      	ldr	r3, [sp, #12]
    ea06:	429a      	cmp	r2, r3
    ea08:	d302      	bcc.n	ea10 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    ea0a:	2303      	movs	r3, #3
    ea0c:	9304      	str	r3, [sp, #16]
            break;
    ea0e:	e005      	b.n	ea1c <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    ea10:	9b01      	ldr	r3, [sp, #4]
    ea12:	681b      	ldr	r3, [r3, #0]
    ea14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ea18:	2b00      	cmp	r3, #0
    ea1a:	d0e9      	beq.n	e9f0 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    ea1c:	9b04      	ldr	r3, [sp, #16]
}
    ea1e:	4618      	mov	r0, r3
    ea20:	b007      	add	sp, #28
    ea22:	f85d fb04 	ldr.w	pc, [sp], #4
    ea26:	bf00      	nop
    ea28:	000f4240 	.word	0x000f4240

0000ea2c <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    ea2c:	b500      	push	{lr}
    ea2e:	b087      	sub	sp, #28
    ea30:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    ea32:	2300      	movs	r3, #0
    ea34:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    ea36:	2300      	movs	r3, #0
    ea38:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea3a:	2100      	movs	r1, #0
    ea3c:	481b      	ldr	r0, [pc, #108]	; (eaac <FlexCAN_ExitFreezeMode+0x80>)
    ea3e:	f7f3 fa29 	bl	1e94 <OsIf_MicrosToTicks>
    ea42:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    ea44:	2300      	movs	r3, #0
    ea46:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    ea48:	f005 fa52 	bl	13ef0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    ea4c:	9b01      	ldr	r3, [sp, #4]
    ea4e:	681b      	ldr	r3, [r3, #0]
    ea50:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    ea54:	9b01      	ldr	r3, [sp, #4]
    ea56:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    ea58:	9b01      	ldr	r3, [sp, #4]
    ea5a:	681b      	ldr	r3, [r3, #0]
    ea5c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    ea60:	9b01      	ldr	r3, [sp, #4]
    ea62:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    ea64:	f005 fa70 	bl	13f48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea68:	2000      	movs	r0, #0
    ea6a:	f7f3 f9c7 	bl	1dfc <OsIf_GetCounter>
    ea6e:	4603      	mov	r3, r0
    ea70:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    ea72:	e00f      	b.n	ea94 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea74:	ab02      	add	r3, sp, #8
    ea76:	2100      	movs	r1, #0
    ea78:	4618      	mov	r0, r3
    ea7a:	f7f3 f9d8 	bl	1e2e <OsIf_GetElapsed>
    ea7e:	4602      	mov	r2, r0
    ea80:	9b05      	ldr	r3, [sp, #20]
    ea82:	4413      	add	r3, r2
    ea84:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ea86:	9a05      	ldr	r2, [sp, #20]
    ea88:	9b03      	ldr	r3, [sp, #12]
    ea8a:	429a      	cmp	r2, r3
    ea8c:	d302      	bcc.n	ea94 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    ea8e:	2303      	movs	r3, #3
    ea90:	9304      	str	r3, [sp, #16]
            break;
    ea92:	e005      	b.n	eaa0 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    ea94:	9b01      	ldr	r3, [sp, #4]
    ea96:	681b      	ldr	r3, [r3, #0]
    ea98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ea9c:	2b00      	cmp	r3, #0
    ea9e:	d1e9      	bne.n	ea74 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    eaa0:	9b04      	ldr	r3, [sp, #16]
}
    eaa2:	4618      	mov	r0, r3
    eaa4:	b007      	add	sp, #28
    eaa6:	f85d fb04 	ldr.w	pc, [sp], #4
    eaaa:	bf00      	nop
    eaac:	000f4240 	.word	0x000f4240

0000eab0 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    eab0:	b500      	push	{lr}
    eab2:	b087      	sub	sp, #28
    eab4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    eab6:	2300      	movs	r3, #0
    eab8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    eaba:	2300      	movs	r3, #0
    eabc:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eabe:	2100      	movs	r1, #0
    eac0:	481a      	ldr	r0, [pc, #104]	; (eb2c <FlexCAN_Disable+0x7c>)
    eac2:	f7f3 f9e7 	bl	1e94 <OsIf_MicrosToTicks>
    eac6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    eac8:	2300      	movs	r3, #0
    eaca:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    eacc:	9b01      	ldr	r3, [sp, #4]
    eace:	681b      	ldr	r3, [r3, #0]
    ead0:	2b00      	cmp	r3, #0
    ead2:	db25      	blt.n	eb20 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    ead4:	f005 fa5e 	bl	13f94 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    ead8:	9b01      	ldr	r3, [sp, #4]
    eada:	681b      	ldr	r3, [r3, #0]
    eadc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    eae0:	9b01      	ldr	r3, [sp, #4]
    eae2:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    eae4:	f005 fa82 	bl	13fec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eae8:	2000      	movs	r0, #0
    eaea:	f7f3 f987 	bl	1dfc <OsIf_GetCounter>
    eaee:	4603      	mov	r3, r0
    eaf0:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    eaf2:	e00f      	b.n	eb14 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eaf4:	ab02      	add	r3, sp, #8
    eaf6:	2100      	movs	r1, #0
    eaf8:	4618      	mov	r0, r3
    eafa:	f7f3 f998 	bl	1e2e <OsIf_GetElapsed>
    eafe:	4602      	mov	r2, r0
    eb00:	9b05      	ldr	r3, [sp, #20]
    eb02:	4413      	add	r3, r2
    eb04:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    eb06:	9a05      	ldr	r2, [sp, #20]
    eb08:	9b03      	ldr	r3, [sp, #12]
    eb0a:	429a      	cmp	r2, r3
    eb0c:	d302      	bcc.n	eb14 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    eb0e:	2303      	movs	r3, #3
    eb10:	9304      	str	r3, [sp, #16]
                break;
    eb12:	e005      	b.n	eb20 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    eb14:	9b01      	ldr	r3, [sp, #4]
    eb16:	681b      	ldr	r3, [r3, #0]
    eb18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    eb1c:	2b00      	cmp	r3, #0
    eb1e:	d0e9      	beq.n	eaf4 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    eb20:	9b04      	ldr	r3, [sp, #16]
}
    eb22:	4618      	mov	r0, r3
    eb24:	b007      	add	sp, #28
    eb26:	f85d fb04 	ldr.w	pc, [sp], #4
    eb2a:	bf00      	nop
    eb2c:	000f4240 	.word	0x000f4240

0000eb30 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    eb30:	b500      	push	{lr}
    eb32:	b087      	sub	sp, #28
    eb34:	9003      	str	r0, [sp, #12]
    eb36:	9102      	str	r1, [sp, #8]
    eb38:	4613      	mov	r3, r2
    eb3a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    eb3e:	9b02      	ldr	r3, [sp, #8]
    eb40:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    eb42:	f005 fa79 	bl	14038 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    eb46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eb4a:	2b00      	cmp	r3, #0
    eb4c:	d020      	beq.n	eb90 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    eb4e:	9b02      	ldr	r3, [sp, #8]
    eb50:	f244 0201 	movw	r2, #16385	; 0x4001
    eb54:	4293      	cmp	r3, r2
    eb56:	d106      	bne.n	eb66 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    eb58:	9b03      	ldr	r3, [sp, #12]
    eb5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    eb5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    eb60:	9b03      	ldr	r3, [sp, #12]
    eb62:	635a      	str	r2, [r3, #52]	; 0x34
    eb64:	e03a      	b.n	ebdc <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    eb66:	9b02      	ldr	r3, [sp, #8]
    eb68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    eb6c:	d003      	beq.n	eb76 <FlexCAN_SetErrIntCmd+0x46>
    eb6e:	9b02      	ldr	r3, [sp, #8]
    eb70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    eb74:	d105      	bne.n	eb82 <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    eb76:	9b03      	ldr	r3, [sp, #12]
    eb78:	681b      	ldr	r3, [r3, #0]
    eb7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    eb7e:	9b03      	ldr	r3, [sp, #12]
    eb80:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    eb82:	9b03      	ldr	r3, [sp, #12]
    eb84:	685a      	ldr	r2, [r3, #4]
    eb86:	9b05      	ldr	r3, [sp, #20]
    eb88:	431a      	orrs	r2, r3
    eb8a:	9b03      	ldr	r3, [sp, #12]
    eb8c:	605a      	str	r2, [r3, #4]
    eb8e:	e025      	b.n	ebdc <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    eb90:	9b02      	ldr	r3, [sp, #8]
    eb92:	f244 0201 	movw	r2, #16385	; 0x4001
    eb96:	4293      	cmp	r3, r2
    eb98:	d106      	bne.n	eba8 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    eb9a:	9b03      	ldr	r3, [sp, #12]
    eb9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    eb9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    eba2:	9b03      	ldr	r3, [sp, #12]
    eba4:	635a      	str	r2, [r3, #52]	; 0x34
    eba6:	e019      	b.n	ebdc <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    eba8:	9b03      	ldr	r3, [sp, #12]
    ebaa:	685a      	ldr	r2, [r3, #4]
    ebac:	9b05      	ldr	r3, [sp, #20]
    ebae:	43db      	mvns	r3, r3
    ebb0:	401a      	ands	r2, r3
    ebb2:	9b03      	ldr	r3, [sp, #12]
    ebb4:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    ebb6:	9b03      	ldr	r3, [sp, #12]
    ebb8:	685b      	ldr	r3, [r3, #4]
    ebba:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    ebbc:	9b05      	ldr	r3, [sp, #20]
    ebbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ebc2:	2b00      	cmp	r3, #0
    ebc4:	d10a      	bne.n	ebdc <FlexCAN_SetErrIntCmd+0xac>
    ebc6:	9b05      	ldr	r3, [sp, #20]
    ebc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ebcc:	2b00      	cmp	r3, #0
    ebce:	d105      	bne.n	ebdc <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    ebd0:	9b03      	ldr	r3, [sp, #12]
    ebd2:	681b      	ldr	r3, [r3, #0]
    ebd4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    ebd8:	9b03      	ldr	r3, [sp, #12]
    ebda:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    ebdc:	f005 fa58 	bl	14090 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    ebe0:	bf00      	nop
    ebe2:	b007      	add	sp, #28
    ebe4:	f85d fb04 	ldr.w	pc, [sp], #4

0000ebe8 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    ebe8:	b500      	push	{lr}
    ebea:	b087      	sub	sp, #28
    ebec:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    ebee:	2300      	movs	r3, #0
    ebf0:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    ebf2:	2300      	movs	r3, #0
    ebf4:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ebf6:	2100      	movs	r1, #0
    ebf8:	4833      	ldr	r0, [pc, #204]	; (ecc8 <FlexCAN_Init+0xe0>)
    ebfa:	f7f3 f94b 	bl	1e94 <OsIf_MicrosToTicks>
    ebfe:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    ec00:	2300      	movs	r3, #0
    ec02:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    ec04:	9b01      	ldr	r3, [sp, #4]
    ec06:	681b      	ldr	r3, [r3, #0]
    ec08:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    ec0c:	9b01      	ldr	r3, [sp, #4]
    ec0e:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ec10:	2000      	movs	r0, #0
    ec12:	f7f3 f8f3 	bl	1dfc <OsIf_GetCounter>
    ec16:	4603      	mov	r3, r0
    ec18:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ec1a:	e00f      	b.n	ec3c <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ec1c:	ab02      	add	r3, sp, #8
    ec1e:	2100      	movs	r1, #0
    ec20:	4618      	mov	r0, r3
    ec22:	f7f3 f904 	bl	1e2e <OsIf_GetElapsed>
    ec26:	4602      	mov	r2, r0
    ec28:	9b05      	ldr	r3, [sp, #20]
    ec2a:	4413      	add	r3, r2
    ec2c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ec2e:	9a05      	ldr	r2, [sp, #20]
    ec30:	9b03      	ldr	r3, [sp, #12]
    ec32:	429a      	cmp	r2, r3
    ec34:	d302      	bcc.n	ec3c <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    ec36:	2303      	movs	r3, #3
    ec38:	9304      	str	r3, [sp, #16]
            break;
    ec3a:	e005      	b.n	ec48 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ec3c:	9b01      	ldr	r3, [sp, #4]
    ec3e:	681b      	ldr	r3, [r3, #0]
    ec40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    ec44:	2b00      	cmp	r3, #0
    ec46:	d1e9      	bne.n	ec1c <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    ec48:	9b04      	ldr	r3, [sp, #16]
    ec4a:	2b00      	cmp	r3, #0
    ec4c:	d136      	bne.n	ecbc <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    ec4e:	9b01      	ldr	r3, [sp, #4]
    ec50:	681b      	ldr	r3, [r3, #0]
    ec52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    ec56:	9b01      	ldr	r3, [sp, #4]
    ec58:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    ec5a:	9801      	ldr	r0, [sp, #4]
    ec5c:	f7ff fd40 	bl	e6e0 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    ec60:	9b01      	ldr	r3, [sp, #4]
    ec62:	f04f 32ff 	mov.w	r2, #4294967295
    ec66:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    ec68:	9b01      	ldr	r3, [sp, #4]
    ec6a:	f04f 32ff 	mov.w	r2, #4294967295
    ec6e:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    ec70:	9b01      	ldr	r3, [sp, #4]
    ec72:	f04f 32ff 	mov.w	r2, #4294967295
    ec76:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    ec78:	9b01      	ldr	r3, [sp, #4]
    ec7a:	2200      	movs	r2, #0
    ec7c:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    ec7e:	9b01      	ldr	r3, [sp, #4]
    ec80:	f04f 32ff 	mov.w	r2, #4294967295
    ec84:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    ec86:	9b01      	ldr	r3, [sp, #4]
    ec88:	4a10      	ldr	r2, [pc, #64]	; (eccc <FlexCAN_Init+0xe4>)
    ec8a:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    ec8c:	9b01      	ldr	r3, [sp, #4]
    ec8e:	2200      	movs	r2, #0
    ec90:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    ec92:	9b01      	ldr	r3, [sp, #4]
    ec94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    ec98:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    ec9a:	9b01      	ldr	r3, [sp, #4]
    ec9c:	2200      	movs	r2, #0
    ec9e:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    eca0:	9801      	ldr	r0, [sp, #4]
    eca2:	f000 f85b 	bl	ed5c <FlexCAN_IsFDAvailable>
    eca6:	4603      	mov	r3, r0
    eca8:	2b00      	cmp	r3, #0
    ecaa:	d007      	beq.n	ecbc <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    ecac:	9b01      	ldr	r3, [sp, #4]
    ecae:	2200      	movs	r2, #0
    ecb0:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    ecb4:	9b01      	ldr	r3, [sp, #4]
    ecb6:	4a06      	ldr	r2, [pc, #24]	; (ecd0 <FlexCAN_Init+0xe8>)
    ecb8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    ecbc:	9b04      	ldr	r3, [sp, #16]
}
    ecbe:	4618      	mov	r0, r3
    ecc0:	b007      	add	sp, #28
    ecc2:	f85d fb04 	ldr.w	pc, [sp], #4
    ecc6:	bf00      	nop
    ecc8:	000f4240 	.word	0x000f4240
    eccc:	003b0006 	.word	0x003b0006
    ecd0:	80004100 	.word	0x80004100

0000ecd4 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    ecd4:	b500      	push	{lr}
    ecd6:	b087      	sub	sp, #28
    ecd8:	9001      	str	r0, [sp, #4]
    ecda:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    ecdc:	9801      	ldr	r0, [sp, #4]
    ecde:	f7ff fdfb 	bl	e8d8 <FlexCAN_GetMaxMbNum>
    ece2:	4603      	mov	r3, r0
    ece4:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    ece8:	2300      	movs	r3, #0
    ecea:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    ecec:	9b01      	ldr	r3, [sp, #4]
    ecee:	681b      	ldr	r3, [r3, #0]
    ecf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ecf4:	2b00      	cmp	r3, #0
    ecf6:	d001      	beq.n	ecfc <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    ecf8:	2301      	movs	r3, #1
    ecfa:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    ecfc:	9b04      	ldr	r3, [sp, #16]
    ecfe:	2b00      	cmp	r3, #0
    ed00:	d127      	bne.n	ed52 <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    ed02:	9b01      	ldr	r3, [sp, #4]
    ed04:	681b      	ldr	r3, [r3, #0]
    ed06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    ed0a:	9b01      	ldr	r3, [sp, #4]
    ed0c:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    ed0e:	9b01      	ldr	r3, [sp, #4]
    ed10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ed12:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    ed16:	9b00      	ldr	r3, [sp, #0]
    ed18:	061b      	lsls	r3, r3, #24
    ed1a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    ed1e:	431a      	orrs	r2, r3
    ed20:	9b01      	ldr	r3, [sp, #4]
    ed22:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    ed24:	9b01      	ldr	r3, [sp, #4]
    ed26:	f04f 32ff 	mov.w	r2, #4294967295
    ed2a:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    ed2c:	2300      	movs	r3, #0
    ed2e:	9305      	str	r3, [sp, #20]
    ed30:	e00a      	b.n	ed48 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    ed32:	9b01      	ldr	r3, [sp, #4]
    ed34:	9a05      	ldr	r2, [sp, #20]
    ed36:	f502 7208 	add.w	r2, r2, #544	; 0x220
    ed3a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    ed3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    ed42:	9b05      	ldr	r3, [sp, #20]
    ed44:	3301      	adds	r3, #1
    ed46:	9305      	str	r3, [sp, #20]
    ed48:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ed4c:	9a05      	ldr	r2, [sp, #20]
    ed4e:	429a      	cmp	r2, r3
    ed50:	d3ef      	bcc.n	ed32 <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    ed52:	9b04      	ldr	r3, [sp, #16]
}
    ed54:	4618      	mov	r0, r3
    ed56:	b007      	add	sp, #28
    ed58:	f85d fb04 	ldr.w	pc, [sp], #4

0000ed5c <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    ed5c:	b084      	sub	sp, #16
    ed5e:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    ed60:	2300      	movs	r3, #0
    ed62:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    ed64:	2300      	movs	r3, #0
    ed66:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    ed6a:	2300      	movs	r3, #0
    ed6c:	9303      	str	r3, [sp, #12]
    ed6e:	e00d      	b.n	ed8c <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    ed70:	4a0a      	ldr	r2, [pc, #40]	; (ed9c <FlexCAN_IsFDAvailable+0x40>)
    ed72:	9b03      	ldr	r3, [sp, #12]
    ed74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed78:	9a01      	ldr	r2, [sp, #4]
    ed7a:	429a      	cmp	r2, r3
    ed7c:	d103      	bne.n	ed86 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    ed7e:	2301      	movs	r3, #1
    ed80:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    ed84:	e005      	b.n	ed92 <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    ed86:	9b03      	ldr	r3, [sp, #12]
    ed88:	3301      	adds	r3, #1
    ed8a:	9303      	str	r3, [sp, #12]
    ed8c:	9b03      	ldr	r3, [sp, #12]
    ed8e:	2b00      	cmp	r3, #0
    ed90:	d0ee      	beq.n	ed70 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    ed92:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    ed96:	4618      	mov	r0, r3
    ed98:	b004      	add	sp, #16
    ed9a:	4770      	bx	lr
    ed9c:	00018598 	.word	0x00018598

0000eda0 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    eda0:	b500      	push	{lr}
    eda2:	b085      	sub	sp, #20
    eda4:	9001      	str	r0, [sp, #4]
    eda6:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    eda8:	9801      	ldr	r0, [sp, #4]
    edaa:	f7ff fbd6 	bl	e55a <FlexCAN_IsFDEnabled>
    edae:	4603      	mov	r3, r0
    edb0:	2b00      	cmp	r3, #0
    edb2:	d011      	beq.n	edd8 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    edb4:	9b01      	ldr	r3, [sp, #4]
    edb6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    edba:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    edbc:	9b03      	ldr	r3, [sp, #12]
    edbe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    edc2:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    edc4:	9b00      	ldr	r3, [sp, #0]
    edc6:	681b      	ldr	r3, [r3, #0]
    edc8:	041b      	lsls	r3, r3, #16
    edca:	9a03      	ldr	r2, [sp, #12]
    edcc:	4313      	orrs	r3, r2
    edce:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    edd0:	9b01      	ldr	r3, [sp, #4]
    edd2:	9a03      	ldr	r2, [sp, #12]
    edd4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    edd8:	bf00      	nop
    edda:	b005      	add	sp, #20
    eddc:	f85d fb04 	ldr.w	pc, [sp], #4

0000ede0 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    ede0:	b500      	push	{lr}
    ede2:	b085      	sub	sp, #20
    ede4:	9001      	str	r0, [sp, #4]
    ede6:	460b      	mov	r3, r1
    ede8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    edec:	2300      	movs	r3, #0
    edee:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    edf0:	9801      	ldr	r0, [sp, #4]
    edf2:	f7ff ffb3 	bl	ed5c <FlexCAN_IsFDAvailable>
    edf6:	4603      	mov	r3, r0
    edf8:	2b00      	cmp	r3, #0
    edfa:	d019      	beq.n	ee30 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    edfc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ee00:	2b00      	cmp	r3, #0
    ee02:	d10a      	bne.n	ee1a <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ee04:	9b01      	ldr	r3, [sp, #4]
    ee06:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ee0a:	0c1b      	lsrs	r3, r3, #16
    ee0c:	f003 0303 	and.w	r3, r3, #3
    ee10:	2208      	movs	r2, #8
    ee12:	fa02 f303 	lsl.w	r3, r2, r3
    ee16:	9303      	str	r3, [sp, #12]
    ee18:	e00c      	b.n	ee34 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ee1a:	9b01      	ldr	r3, [sp, #4]
    ee1c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ee20:	0c1b      	lsrs	r3, r3, #16
    ee22:	f003 0303 	and.w	r3, r3, #3
    ee26:	2208      	movs	r2, #8
    ee28:	fa02 f303 	lsl.w	r3, r2, r3
    ee2c:	9303      	str	r3, [sp, #12]
    ee2e:	e001      	b.n	ee34 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    ee30:	2308      	movs	r3, #8
    ee32:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    ee34:	9b03      	ldr	r3, [sp, #12]
    ee36:	b2db      	uxtb	r3, r3
}
    ee38:	4618      	mov	r0, r3
    ee3a:	b005      	add	sp, #20
    ee3c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ee40 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    ee40:	b500      	push	{lr}
    ee42:	b087      	sub	sp, #28
    ee44:	9001      	str	r0, [sp, #4]
    ee46:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    ee48:	2308      	movs	r3, #8
    ee4a:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    ee4e:	f44f 7300 	mov.w	r3, #512	; 0x200
    ee52:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    ee54:	2308      	movs	r3, #8
    ee56:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    ee5a:	2300      	movs	r3, #0
    ee5c:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    ee60:	2300      	movs	r3, #0
    ee62:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    ee66:	2300      	movs	r3, #0
    ee68:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ee6c:	2300      	movs	r3, #0
    ee6e:	f88d 3015 	strb.w	r3, [sp, #21]
    ee72:	e024      	b.n	eebe <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    ee74:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ee78:	4619      	mov	r1, r3
    ee7a:	9801      	ldr	r0, [sp, #4]
    ee7c:	f7ff ffb0 	bl	ede0 <FlexCAN_GetPayloadSize>
    ee80:	4603      	mov	r3, r0
    ee82:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    ee86:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ee8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ee8e:	4413      	add	r3, r2
    ee90:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    ee94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ee98:	9a04      	ldr	r2, [sp, #16]
    ee9a:	fbb2 f3f3 	udiv	r3, r2, r3
    ee9e:	b2da      	uxtb	r2, r3
    eea0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    eea4:	4413      	add	r3, r2
    eea6:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    eeaa:	f89d 3016 	ldrb.w	r3, [sp, #22]
    eeae:	9a00      	ldr	r2, [sp, #0]
    eeb0:	429a      	cmp	r2, r3
    eeb2:	d309      	bcc.n	eec8 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    eeb4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    eeb8:	3301      	adds	r3, #1
    eeba:	f88d 3015 	strb.w	r3, [sp, #21]
    eebe:	f89d 3015 	ldrb.w	r3, [sp, #21]
    eec2:	2b00      	cmp	r3, #0
    eec4:	d0d6      	beq.n	ee74 <FlexCAN_GetMbPayloadSize+0x34>
    eec6:	e000      	b.n	eeca <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    eec8:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    eeca:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    eece:	4618      	mov	r0, r3
    eed0:	b007      	add	sp, #28
    eed2:	f85d fb04 	ldr.w	pc, [sp], #4

0000eed6 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    eed6:	b500      	push	{lr}
    eed8:	b085      	sub	sp, #20
    eeda:	9001      	str	r0, [sp, #4]
    eedc:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    eede:	9900      	ldr	r1, [sp, #0]
    eee0:	9801      	ldr	r0, [sp, #4]
    eee2:	f7ff fc7f 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    eee6:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    eee8:	9b03      	ldr	r3, [sp, #12]
    eeea:	681b      	ldr	r3, [r3, #0]
}
    eeec:	bf00      	nop
    eeee:	b005      	add	sp, #20
    eef0:	f85d fb04 	ldr.w	pc, [sp], #4

0000eef4 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    eef4:	b500      	push	{lr}
    eef6:	b087      	sub	sp, #28
    eef8:	9003      	str	r0, [sp, #12]
    eefa:	9201      	str	r2, [sp, #4]
    eefc:	461a      	mov	r2, r3
    eefe:	460b      	mov	r3, r1
    ef00:	f88d 300b 	strb.w	r3, [sp, #11]
    ef04:	4613      	mov	r3, r2
    ef06:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    ef0a:	2300      	movs	r3, #0
    ef0c:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    ef0e:	9b01      	ldr	r3, [sp, #4]
    ef10:	f003 031f 	and.w	r3, r3, #31
    ef14:	2201      	movs	r2, #1
    ef16:	fa02 f303 	lsl.w	r3, r2, r3
    ef1a:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    ef1c:	9b01      	ldr	r3, [sp, #4]
    ef1e:	2b1f      	cmp	r3, #31
    ef20:	d837      	bhi.n	ef92 <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    ef22:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ef26:	2b00      	cmp	r3, #0
    ef28:	d01b      	beq.n	ef62 <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ef2a:	f005 fc5d 	bl	147e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    ef2e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef32:	4a1a      	ldr	r2, [pc, #104]	; (ef9c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    ef38:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef3c:	9a04      	ldr	r2, [sp, #16]
    ef3e:	430a      	orrs	r2, r1
    ef40:	4916      	ldr	r1, [pc, #88]	; (ef9c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    ef46:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ef4a:	2b00      	cmp	r3, #0
    ef4c:	d006      	beq.n	ef5c <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ef4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef52:	4a12      	ldr	r2, [pc, #72]	; (ef9c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ef58:	9b03      	ldr	r3, [sp, #12]
    ef5a:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ef5c:	f005 fc70 	bl	14840 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    ef60:	e017      	b.n	ef92 <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ef62:	f005 fc41 	bl	147e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    ef66:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef6a:	4a0c      	ldr	r2, [pc, #48]	; (ef9c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef6c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    ef70:	9b04      	ldr	r3, [sp, #16]
    ef72:	43da      	mvns	r2, r3
    ef74:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef78:	400a      	ands	r2, r1
    ef7a:	4908      	ldr	r1, [pc, #32]	; (ef9c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ef80:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef84:	4a05      	ldr	r2, [pc, #20]	; (ef9c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ef8a:	9b03      	ldr	r3, [sp, #12]
    ef8c:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ef8e:	f005 fc57 	bl	14840 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    ef92:	9b05      	ldr	r3, [sp, #20]
}
    ef94:	4618      	mov	r0, r3
    ef96:	b007      	add	sp, #28
    ef98:	f85d fb04 	ldr.w	pc, [sp], #4
    ef9c:	1fff9368 	.word	0x1fff9368

0000efa0 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    efa0:	b500      	push	{lr}
    efa2:	b087      	sub	sp, #28
    efa4:	9003      	str	r0, [sp, #12]
    efa6:	9201      	str	r2, [sp, #4]
    efa8:	461a      	mov	r2, r3
    efaa:	460b      	mov	r3, r1
    efac:	f88d 300b 	strb.w	r3, [sp, #11]
    efb0:	4613      	mov	r3, r2
    efb2:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    efb6:	9b01      	ldr	r3, [sp, #4]
    efb8:	f003 031f 	and.w	r3, r3, #31
    efbc:	2201      	movs	r2, #1
    efbe:	fa02 f303 	lsl.w	r3, r2, r3
    efc2:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    efc4:	9b01      	ldr	r3, [sp, #4]
    efc6:	2b1f      	cmp	r3, #31
    efc8:	d818      	bhi.n	effc <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    efca:	f005 f9cf 	bl	1436c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    efce:	9b03      	ldr	r3, [sp, #12]
    efd0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    efd2:	9b05      	ldr	r3, [sp, #20]
    efd4:	43da      	mvns	r2, r3
    efd6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    efda:	400a      	ands	r2, r1
    efdc:	4909      	ldr	r1, [pc, #36]	; (f004 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    efde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    efe2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    efe6:	2b00      	cmp	r3, #0
    efe8:	d006      	beq.n	eff8 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    efea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    efee:	4a05      	ldr	r2, [pc, #20]	; (f004 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    eff0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    eff4:	9b03      	ldr	r3, [sp, #12]
    eff6:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    eff8:	f005 f9e4 	bl	143c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    effc:	bf00      	nop
    effe:	b007      	add	sp, #28
    f000:	f85d fb04 	ldr.w	pc, [sp], #4
    f004:	1fff9368 	.word	0x1fff9368

0000f008 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    f008:	b082      	sub	sp, #8
    f00a:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    f00c:	9b01      	ldr	r3, [sp, #4]
    f00e:	2200      	movs	r2, #0
    f010:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    f012:	bf00      	nop
    f014:	b002      	add	sp, #8
    f016:	4770      	bx	lr

0000f018 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    f018:	b082      	sub	sp, #8
    f01a:	9001      	str	r0, [sp, #4]
    f01c:	460b      	mov	r3, r1
    f01e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f022:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f026:	4a04      	ldr	r2, [pc, #16]	; (f038 <FlexCAN_EnableInterrupts+0x20>)
    f028:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f02c:	9b01      	ldr	r3, [sp, #4]
    f02e:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    f030:	bf00      	nop
    f032:	b002      	add	sp, #8
    f034:	4770      	bx	lr
    f036:	bf00      	nop
    f038:	1fff9368 	.word	0x1fff9368

0000f03c <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    f03c:	b500      	push	{lr}
    f03e:	b087      	sub	sp, #28
    f040:	9003      	str	r0, [sp, #12]
    f042:	9102      	str	r1, [sp, #8]
    f044:	9201      	str	r2, [sp, #4]
    f046:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f048:	9902      	ldr	r1, [sp, #8]
    f04a:	9803      	ldr	r0, [sp, #12]
    f04c:	f7ff fbca 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    f050:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    f052:	9b05      	ldr	r3, [sp, #20]
    f054:	3304      	adds	r3, #4
    f056:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    f058:	9b05      	ldr	r3, [sp, #20]
    f05a:	2200      	movs	r2, #0
    f05c:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    f05e:	9b04      	ldr	r3, [sp, #16]
    f060:	2200      	movs	r2, #0
    f062:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f064:	9b01      	ldr	r3, [sp, #4]
    f066:	685b      	ldr	r3, [r3, #4]
    f068:	2b01      	cmp	r3, #1
    f06a:	d119      	bne.n	f0a0 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    f06c:	9b05      	ldr	r3, [sp, #20]
    f06e:	681b      	ldr	r3, [r3, #0]
    f070:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    f074:	9b05      	ldr	r3, [sp, #20]
    f076:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    f078:	9b05      	ldr	r3, [sp, #20]
    f07a:	681b      	ldr	r3, [r3, #0]
    f07c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    f080:	9b05      	ldr	r3, [sp, #20]
    f082:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f084:	9b04      	ldr	r3, [sp, #16]
    f086:	681b      	ldr	r3, [r3, #0]
    f088:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f08c:	9b04      	ldr	r3, [sp, #16]
    f08e:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f090:	9b04      	ldr	r3, [sp, #16]
    f092:	681a      	ldr	r2, [r3, #0]
    f094:	9b00      	ldr	r3, [sp, #0]
    f096:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f09a:	431a      	orrs	r2, r3
    f09c:	9b04      	ldr	r3, [sp, #16]
    f09e:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f0a0:	9b01      	ldr	r3, [sp, #4]
    f0a2:	685b      	ldr	r3, [r3, #4]
    f0a4:	2b00      	cmp	r3, #0
    f0a6:	d116      	bne.n	f0d6 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f0a8:	9b05      	ldr	r3, [sp, #20]
    f0aa:	681b      	ldr	r3, [r3, #0]
    f0ac:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    f0b0:	9b05      	ldr	r3, [sp, #20]
    f0b2:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    f0b4:	9b04      	ldr	r3, [sp, #16]
    f0b6:	681b      	ldr	r3, [r3, #0]
    f0b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f0bc:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f0c0:	9a04      	ldr	r2, [sp, #16]
    f0c2:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f0c4:	9b04      	ldr	r3, [sp, #16]
    f0c6:	681a      	ldr	r2, [r3, #0]
    f0c8:	9b00      	ldr	r3, [sp, #0]
    f0ca:	0499      	lsls	r1, r3, #18
    f0cc:	4b0e      	ldr	r3, [pc, #56]	; (f108 <FlexCAN_SetRxMsgBuff+0xcc>)
    f0ce:	400b      	ands	r3, r1
    f0d0:	431a      	orrs	r2, r3
    f0d2:	9b04      	ldr	r3, [sp, #16]
    f0d4:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    f0d6:	9b01      	ldr	r3, [sp, #4]
    f0d8:	681b      	ldr	r3, [r3, #0]
    f0da:	2b0f      	cmp	r3, #15
    f0dc:	d00f      	beq.n	f0fe <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    f0de:	9b05      	ldr	r3, [sp, #20]
    f0e0:	681b      	ldr	r3, [r3, #0]
    f0e2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    f0e6:	9b05      	ldr	r3, [sp, #20]
    f0e8:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f0ea:	9b05      	ldr	r3, [sp, #20]
    f0ec:	681a      	ldr	r2, [r3, #0]
    f0ee:	9b01      	ldr	r3, [sp, #4]
    f0f0:	681b      	ldr	r3, [r3, #0]
    f0f2:	061b      	lsls	r3, r3, #24
    f0f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f0f8:	431a      	orrs	r2, r3
    f0fa:	9b05      	ldr	r3, [sp, #20]
    f0fc:	601a      	str	r2, [r3, #0]
    }
}
    f0fe:	bf00      	nop
    f100:	b007      	add	sp, #28
    f102:	f85d fb04 	ldr.w	pc, [sp], #4
    f106:	bf00      	nop
    f108:	1ffc0000 	.word	0x1ffc0000

0000f10c <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    f10c:	b500      	push	{lr}
    f10e:	b085      	sub	sp, #20
    f110:	9001      	str	r0, [sp, #4]
    f112:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    f114:	2300      	movs	r3, #0
    f116:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f118:	9900      	ldr	r1, [sp, #0]
    f11a:	9801      	ldr	r0, [sp, #4]
    f11c:	f7ff fb62 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    f120:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f122:	9b02      	ldr	r3, [sp, #8]
    f124:	681b      	ldr	r3, [r3, #0]
    f126:	b29b      	uxth	r3, r3
    f128:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    f12a:	9b03      	ldr	r3, [sp, #12]
}
    f12c:	4618      	mov	r0, r3
    f12e:	b005      	add	sp, #20
    f130:	f85d fb04 	ldr.w	pc, [sp], #4

0000f134 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    f134:	b500      	push	{lr}
    f136:	b08d      	sub	sp, #52	; 0x34
    f138:	9003      	str	r0, [sp, #12]
    f13a:	9102      	str	r1, [sp, #8]
    f13c:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f13e:	9902      	ldr	r1, [sp, #8]
    f140:	9803      	ldr	r0, [sp, #12]
    f142:	f7ff fb4f 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    f146:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f14a:	3304      	adds	r3, #4
    f14c:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    f14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f150:	3308      	adds	r3, #8
    f152:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f156:	3308      	adds	r3, #8
    f158:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    f15a:	2300      	movs	r3, #0
    f15c:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    f15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f160:	681b      	ldr	r3, [r3, #0]
    f162:	0c1b      	lsrs	r3, r3, #16
    f164:	b2db      	uxtb	r3, r3
    f166:	f003 030f 	and.w	r3, r3, #15
    f16a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    f16e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f172:	4618      	mov	r0, r3
    f174:	f7ff faed 	bl	e752 <FlexCAN_ComputePayloadSize>
    f178:	4603      	mov	r3, r0
    f17a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    f17e:	9b01      	ldr	r3, [sp, #4]
    f180:	3308      	adds	r3, #8
    f182:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    f184:	9902      	ldr	r1, [sp, #8]
    f186:	9803      	ldr	r0, [sp, #12]
    f188:	f7ff fe5a 	bl	ee40 <FlexCAN_GetMbPayloadSize>
    f18c:	4603      	mov	r3, r0
    f18e:	461a      	mov	r2, r3
    f190:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f194:	4293      	cmp	r3, r2
    f196:	d906      	bls.n	f1a6 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    f198:	9902      	ldr	r1, [sp, #8]
    f19a:	9803      	ldr	r0, [sp, #12]
    f19c:	f7ff fe50 	bl	ee40 <FlexCAN_GetMbPayloadSize>
    f1a0:	4603      	mov	r3, r0
    f1a2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    f1a6:	9b01      	ldr	r3, [sp, #4]
    f1a8:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    f1ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    f1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1b2:	681a      	ldr	r2, [r3, #0]
    f1b4:	9b01      	ldr	r3, [sp, #4]
    f1b6:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    f1b8:	9b01      	ldr	r3, [sp, #4]
    f1ba:	681b      	ldr	r3, [r3, #0]
    f1bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    f1c0:	2b00      	cmp	r3, #0
    f1c2:	d004      	beq.n	f1ce <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    f1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f1c6:	681a      	ldr	r2, [r3, #0]
    f1c8:	9b01      	ldr	r3, [sp, #4]
    f1ca:	605a      	str	r2, [r3, #4]
    f1cc:	e004      	b.n	f1d8 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    f1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f1d0:	681b      	ldr	r3, [r3, #0]
    f1d2:	0c9a      	lsrs	r2, r3, #18
    f1d4:	9b01      	ldr	r3, [sp, #4]
    f1d6:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f1d8:	9b01      	ldr	r3, [sp, #4]
    f1da:	681b      	ldr	r3, [r3, #0]
    f1dc:	b29a      	uxth	r2, r3
    f1de:	9b01      	ldr	r3, [sp, #4]
    f1e0:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f1e2:	2300      	movs	r3, #0
    f1e4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f1e8:	e025      	b.n	f236 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    f1ea:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f1ee:	089b      	lsrs	r3, r3, #2
    f1f0:	b2db      	uxtb	r3, r3
    f1f2:	009b      	lsls	r3, r3, #2
    f1f4:	9a07      	ldr	r2, [sp, #28]
    f1f6:	4413      	add	r3, r2
    f1f8:	681b      	ldr	r3, [r3, #0]
    f1fa:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    f1fc:	9b04      	ldr	r3, [sp, #16]
    f1fe:	0e1a      	lsrs	r2, r3, #24
    f200:	9b04      	ldr	r3, [sp, #16]
    f202:	0a1b      	lsrs	r3, r3, #8
    f204:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f208:	431a      	orrs	r2, r3
    f20a:	9b04      	ldr	r3, [sp, #16]
    f20c:	021b      	lsls	r3, r3, #8
    f20e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f212:	ea42 0103 	orr.w	r1, r2, r3
    f216:	9b04      	ldr	r3, [sp, #16]
    f218:	061a      	lsls	r2, r3, #24
    f21a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f21e:	089b      	lsrs	r3, r3, #2
    f220:	b2db      	uxtb	r3, r3
    f222:	009b      	lsls	r3, r3, #2
    f224:	9806      	ldr	r0, [sp, #24]
    f226:	4403      	add	r3, r0
    f228:	430a      	orrs	r2, r1
    f22a:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f22c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f230:	3304      	adds	r3, #4
    f232:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f236:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f23a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f23e:	f023 0303 	bic.w	r3, r3, #3
    f242:	429a      	cmp	r2, r3
    f244:	d3d1      	bcc.n	f1ea <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    f246:	e014      	b.n	f272 <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    f248:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f24c:	f083 0303 	eor.w	r3, r3, #3
    f250:	b2db      	uxtb	r3, r3
    f252:	461a      	mov	r2, r3
    f254:	9b08      	ldr	r3, [sp, #32]
    f256:	441a      	add	r2, r3
    f258:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f25c:	7812      	ldrb	r2, [r2, #0]
    f25e:	b2d1      	uxtb	r1, r2
    f260:	9a01      	ldr	r2, [sp, #4]
    f262:	4413      	add	r3, r2
    f264:	460a      	mov	r2, r1
    f266:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    f268:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f26c:	3301      	adds	r3, #1
    f26e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f272:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f276:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f27a:	429a      	cmp	r2, r3
    f27c:	d3e4      	bcc.n	f248 <FlexCAN_GetMsgBuff+0x114>
    }
}
    f27e:	bf00      	nop
    f280:	bf00      	nop
    f282:	b00d      	add	sp, #52	; 0x34
    f284:	f85d fb04 	ldr.w	pc, [sp], #4

0000f288 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    f288:	b500      	push	{lr}
    f28a:	b08d      	sub	sp, #52	; 0x34
    f28c:	9003      	str	r0, [sp, #12]
    f28e:	9102      	str	r1, [sp, #8]
    f290:	9201      	str	r2, [sp, #4]
    f292:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    f294:	2300      	movs	r3, #0
    f296:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    f298:	9b03      	ldr	r3, [sp, #12]
    f29a:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f29e:	3304      	adds	r3, #4
    f2a0:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2a4:	3308      	adds	r3, #8
    f2a6:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2aa:	3308      	adds	r3, #8
    f2ac:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    f2ae:	9b00      	ldr	r3, [sp, #0]
    f2b0:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    f2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    f2b8:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    f2ba:	9b08      	ldr	r3, [sp, #32]
    f2bc:	2200      	movs	r2, #0
    f2be:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    f2c0:	9b02      	ldr	r3, [sp, #8]
    f2c2:	689b      	ldr	r3, [r3, #8]
    f2c4:	b2db      	uxtb	r3, r3
    f2c6:	4618      	mov	r0, r3
    f2c8:	f7ff f9f4 	bl	e6b4 <FlexCAN_ComputeDLCValue>
    f2cc:	4603      	mov	r3, r0
    f2ce:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    f2d2:	9b00      	ldr	r3, [sp, #0]
    f2d4:	2b00      	cmp	r3, #0
    f2d6:	d065      	beq.n	f3a4 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f2d8:	2300      	movs	r3, #0
    f2da:	930a      	str	r3, [sp, #40]	; 0x28
    f2dc:	e02c      	b.n	f338 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    f2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f2e0:	089b      	lsrs	r3, r3, #2
    f2e2:	009b      	lsls	r3, r3, #2
    f2e4:	9a05      	ldr	r2, [sp, #20]
    f2e6:	4413      	add	r3, r2
    f2e8:	681b      	ldr	r3, [r3, #0]
    f2ea:	0e1a      	lsrs	r2, r3, #24
    f2ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f2ee:	089b      	lsrs	r3, r3, #2
    f2f0:	009b      	lsls	r3, r3, #2
    f2f2:	9905      	ldr	r1, [sp, #20]
    f2f4:	440b      	add	r3, r1
    f2f6:	681b      	ldr	r3, [r3, #0]
    f2f8:	0a1b      	lsrs	r3, r3, #8
    f2fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f2fe:	431a      	orrs	r2, r3
    f300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f302:	089b      	lsrs	r3, r3, #2
    f304:	009b      	lsls	r3, r3, #2
    f306:	9905      	ldr	r1, [sp, #20]
    f308:	440b      	add	r3, r1
    f30a:	681b      	ldr	r3, [r3, #0]
    f30c:	021b      	lsls	r3, r3, #8
    f30e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f312:	ea42 0103 	orr.w	r1, r2, r3
    f316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f318:	089b      	lsrs	r3, r3, #2
    f31a:	009b      	lsls	r3, r3, #2
    f31c:	9a05      	ldr	r2, [sp, #20]
    f31e:	4413      	add	r3, r2
    f320:	681b      	ldr	r3, [r3, #0]
    f322:	061a      	lsls	r2, r3, #24
    f324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f326:	089b      	lsrs	r3, r3, #2
    f328:	009b      	lsls	r3, r3, #2
    f32a:	9806      	ldr	r0, [sp, #24]
    f32c:	4403      	add	r3, r0
    f32e:	430a      	orrs	r2, r1
    f330:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f334:	3304      	adds	r3, #4
    f336:	930a      	str	r3, [sp, #40]	; 0x28
    f338:	9b02      	ldr	r3, [sp, #8]
    f33a:	689b      	ldr	r3, [r3, #8]
    f33c:	f023 0303 	bic.w	r3, r3, #3
    f340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f342:	429a      	cmp	r2, r3
    f344:	d3cb      	bcc.n	f2de <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    f346:	e00c      	b.n	f362 <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    f348:	9a00      	ldr	r2, [sp, #0]
    f34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f34c:	441a      	add	r2, r3
    f34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f350:	f083 0303 	eor.w	r3, r3, #3
    f354:	9907      	ldr	r1, [sp, #28]
    f356:	440b      	add	r3, r1
    f358:	7812      	ldrb	r2, [r2, #0]
    f35a:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    f35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f35e:	3301      	adds	r3, #1
    f360:	930a      	str	r3, [sp, #40]	; 0x28
    f362:	9b02      	ldr	r3, [sp, #8]
    f364:	689b      	ldr	r3, [r3, #8]
    f366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f368:	429a      	cmp	r2, r3
    f36a:	d3ed      	bcc.n	f348 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    f36c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f370:	4618      	mov	r0, r3
    f372:	f7ff f9ee 	bl	e752 <FlexCAN_ComputePayloadSize>
    f376:	4603      	mov	r3, r0
    f378:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f37c:	9b02      	ldr	r3, [sp, #8]
    f37e:	689b      	ldr	r3, [r3, #8]
    f380:	930a      	str	r3, [sp, #40]	; 0x28
    f382:	e00a      	b.n	f39a <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    f384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f386:	f083 0303 	eor.w	r3, r3, #3
    f38a:	9a07      	ldr	r2, [sp, #28]
    f38c:	4413      	add	r3, r2
    f38e:	9a02      	ldr	r2, [sp, #8]
    f390:	7b52      	ldrb	r2, [r2, #13]
    f392:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f396:	3301      	adds	r3, #1
    f398:	930a      	str	r3, [sp, #40]	; 0x28
    f39a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    f39e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f3a0:	429a      	cmp	r2, r3
    f3a2:	d3ef      	bcc.n	f384 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f3a4:	9b02      	ldr	r3, [sp, #8]
    f3a6:	685b      	ldr	r3, [r3, #4]
    f3a8:	2b01      	cmp	r3, #1
    f3aa:	d111      	bne.n	f3d0 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f3ac:	9b08      	ldr	r3, [sp, #32]
    f3ae:	681b      	ldr	r3, [r3, #0]
    f3b0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f3b4:	9b08      	ldr	r3, [sp, #32]
    f3b6:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f3b8:	9b08      	ldr	r3, [sp, #32]
    f3ba:	681a      	ldr	r2, [r3, #0]
    f3bc:	9b01      	ldr	r3, [sp, #4]
    f3be:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f3c2:	431a      	orrs	r2, r3
    f3c4:	9b08      	ldr	r3, [sp, #32]
    f3c6:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f3c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3ca:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    f3ce:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f3d0:	9b02      	ldr	r3, [sp, #8]
    f3d2:	685b      	ldr	r3, [r3, #4]
    f3d4:	2b00      	cmp	r3, #0
    f3d6:	d114      	bne.n	f402 <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    f3d8:	9b08      	ldr	r3, [sp, #32]
    f3da:	681b      	ldr	r3, [r3, #0]
    f3dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f3e0:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f3e4:	9a08      	ldr	r2, [sp, #32]
    f3e6:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f3e8:	9b08      	ldr	r3, [sp, #32]
    f3ea:	681a      	ldr	r2, [r3, #0]
    f3ec:	9b01      	ldr	r3, [sp, #4]
    f3ee:	0499      	lsls	r1, r3, #18
    f3f0:	4b2b      	ldr	r3, [pc, #172]	; (f4a0 <FlexCAN_SetTxMsgBuff+0x218>)
    f3f2:	400b      	ands	r3, r1
    f3f4:	431a      	orrs	r2, r3
    f3f6:	9b08      	ldr	r3, [sp, #32]
    f3f8:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f3fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    f400:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    f402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f404:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    f408:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    f40a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f40e:	041b      	lsls	r3, r3, #16
    f410:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    f414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f416:	4313      	orrs	r3, r2
    f418:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    f41a:	9b02      	ldr	r3, [sp, #8]
    f41c:	681b      	ldr	r3, [r3, #0]
    f41e:	2b0f      	cmp	r3, #15
    f420:	d03a      	beq.n	f498 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    f422:	9b02      	ldr	r3, [sp, #8]
    f424:	681b      	ldr	r3, [r3, #0]
    f426:	2b1c      	cmp	r3, #28
    f428:	d104      	bne.n	f434 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f42c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f430:	930b      	str	r3, [sp, #44]	; 0x2c
    f432:	e007      	b.n	f444 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    f434:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    f438:	2b00      	cmp	r3, #0
    f43a:	d003      	beq.n	f444 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f43c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f43e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f442:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    f444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f446:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    f44a:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    f44c:	9b02      	ldr	r3, [sp, #8]
    f44e:	7b1b      	ldrb	r3, [r3, #12]
    f450:	2b00      	cmp	r3, #0
    f452:	d00e      	beq.n	f472 <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    f454:	9b02      	ldr	r3, [sp, #8]
    f456:	681b      	ldr	r3, [r3, #0]
    f458:	061b      	lsls	r3, r3, #24
    f45a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    f45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f460:	4313      	orrs	r3, r2
    f462:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f466:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    f468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f46a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    f46e:	930b      	str	r3, [sp, #44]	; 0x2c
    f470:	e007      	b.n	f482 <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f472:	9b02      	ldr	r3, [sp, #8]
    f474:	681b      	ldr	r3, [r3, #0]
    f476:	061b      	lsls	r3, r3, #24
    f478:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f47c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f47e:	4313      	orrs	r3, r2
    f480:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    f482:	9b02      	ldr	r3, [sp, #8]
    f484:	7b9b      	ldrb	r3, [r3, #14]
    f486:	2b00      	cmp	r3, #0
    f488:	d003      	beq.n	f492 <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    f48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f48c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f490:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    f492:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f496:	601a      	str	r2, [r3, #0]
        }
}
    f498:	bf00      	nop
    f49a:	b00d      	add	sp, #52	; 0x34
    f49c:	f85d fb04 	ldr.w	pc, [sp], #4
    f4a0:	1ffc0000 	.word	0x1ffc0000

0000f4a4 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    f4a4:	b500      	push	{lr}
    f4a6:	b08f      	sub	sp, #60	; 0x3c
    f4a8:	9001      	str	r0, [sp, #4]
    f4aa:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    f4ac:	9b01      	ldr	r3, [sp, #4]
    f4ae:	3380      	adds	r3, #128	; 0x80
    f4b0:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    f4b2:	2300      	movs	r3, #0
    f4b4:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    f4b6:	2300      	movs	r3, #0
    f4b8:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    f4ba:	2300      	movs	r3, #0
    f4bc:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    f4be:	2300      	movs	r3, #0
    f4c0:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    f4c2:	2308      	movs	r3, #8
    f4c4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    f4c8:	9b00      	ldr	r3, [sp, #0]
    f4ca:	3b01      	subs	r3, #1
    f4cc:	4619      	mov	r1, r3
    f4ce:	9801      	ldr	r0, [sp, #4]
    f4d0:	f7ff fcb6 	bl	ee40 <FlexCAN_GetMbPayloadSize>
    f4d4:	4603      	mov	r3, r0
    f4d6:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    f4da:	2300      	movs	r3, #0
    f4dc:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    f4de:	2300      	movs	r3, #0
    f4e0:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    f4e2:	2300      	movs	r3, #0
    f4e4:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    f4e6:	9b00      	ldr	r3, [sp, #0]
    f4e8:	3b01      	subs	r3, #1
    f4ea:	4619      	mov	r1, r3
    f4ec:	9801      	ldr	r0, [sp, #4]
    f4ee:	f7ff f979 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    f4f2:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    f4f4:	f89d 2016 	ldrb.w	r2, [sp, #22]
    f4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f4fa:	441a      	add	r2, r3
    f4fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f500:	4413      	add	r3, r2
    f502:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    f504:	9801      	ldr	r0, [sp, #4]
    f506:	f7ff f9e7 	bl	e8d8 <FlexCAN_GetMaxMbNum>
    f50a:	4603      	mov	r3, r0
    f50c:	011b      	lsls	r3, r3, #4
    f50e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f510:	4413      	add	r3, r2
    f512:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    f514:	9a04      	ldr	r2, [sp, #16]
    f516:	9b03      	ldr	r3, [sp, #12]
    f518:	429a      	cmp	r2, r3
    f51a:	d806      	bhi.n	f52a <FlexCAN_SetMaxMsgBuffNum+0x86>
    f51c:	9801      	ldr	r0, [sp, #4]
    f51e:	f7ff f9db 	bl	e8d8 <FlexCAN_GetMaxMbNum>
    f522:	4602      	mov	r2, r0
    f524:	9b00      	ldr	r3, [sp, #0]
    f526:	4293      	cmp	r3, r2
    f528:	d901      	bls.n	f52e <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    f52a:	2304      	movs	r3, #4
    f52c:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    f52e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f530:	2b00      	cmp	r3, #0
    f532:	d142      	bne.n	f5ba <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    f534:	9b01      	ldr	r3, [sp, #4]
    f536:	681b      	ldr	r3, [r3, #0]
    f538:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    f53c:	9b00      	ldr	r3, [sp, #0]
    f53e:	3b01      	subs	r3, #1
    f540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f544:	431a      	orrs	r2, r3
    f546:	9b01      	ldr	r3, [sp, #4]
    f548:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    f54a:	9b01      	ldr	r3, [sp, #4]
    f54c:	681b      	ldr	r3, [r3, #0]
    f54e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    f552:	2b00      	cmp	r3, #0
    f554:	d131      	bne.n	f5ba <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f556:	2300      	movs	r3, #0
    f558:	930d      	str	r3, [sp, #52]	; 0x34
    f55a:	e02a      	b.n	f5b2 <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    f55c:	990d      	ldr	r1, [sp, #52]	; 0x34
    f55e:	9801      	ldr	r0, [sp, #4]
    f560:	f7ff f940 	bl	e7e4 <FlexCAN_GetMsgBuffRegion>
    f564:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f566:	9b08      	ldr	r3, [sp, #32]
    f568:	3304      	adds	r3, #4
    f56a:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f56c:	9b08      	ldr	r3, [sp, #32]
    f56e:	3308      	adds	r3, #8
    f570:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    f572:	9b08      	ldr	r3, [sp, #32]
    f574:	2200      	movs	r2, #0
    f576:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    f578:	9b07      	ldr	r3, [sp, #28]
    f57a:	2200      	movs	r2, #0
    f57c:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    f57e:	990d      	ldr	r1, [sp, #52]	; 0x34
    f580:	9801      	ldr	r0, [sp, #4]
    f582:	f7ff fc5d 	bl	ee40 <FlexCAN_GetMbPayloadSize>
    f586:	4603      	mov	r3, r0
    f588:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f58c:	2300      	movs	r3, #0
    f58e:	930c      	str	r3, [sp, #48]	; 0x30
    f590:	e007      	b.n	f5a2 <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    f592:	9a06      	ldr	r2, [sp, #24]
    f594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f596:	4413      	add	r3, r2
    f598:	2200      	movs	r2, #0
    f59a:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f59c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f59e:	3301      	adds	r3, #1
    f5a0:	930c      	str	r3, [sp, #48]	; 0x30
    f5a2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    f5a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f5a8:	429a      	cmp	r2, r3
    f5aa:	d3f2      	bcc.n	f592 <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f5ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f5ae:	3301      	adds	r3, #1
    f5b0:	930d      	str	r3, [sp, #52]	; 0x34
    f5b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f5b4:	9b00      	ldr	r3, [sp, #0]
    f5b6:	429a      	cmp	r2, r3
    f5b8:	d3d0      	bcc.n	f55c <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    f5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    f5bc:	4618      	mov	r0, r3
    f5be:	b00f      	add	sp, #60	; 0x3c
    f5c0:	f85d fb04 	ldr.w	pc, [sp], #4

0000f5c4 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    f5c4:	b500      	push	{lr}
    f5c6:	b083      	sub	sp, #12
    f5c8:	9001      	str	r0, [sp, #4]
    f5ca:	9100      	str	r1, [sp, #0]
    switch (mode)
    f5cc:	9b00      	ldr	r3, [sp, #0]
    f5ce:	2b02      	cmp	r3, #2
    f5d0:	d01d      	beq.n	f60e <FlexCAN_SetOperationMode+0x4a>
    f5d2:	9b00      	ldr	r3, [sp, #0]
    f5d4:	2b02      	cmp	r3, #2
    f5d6:	d82b      	bhi.n	f630 <FlexCAN_SetOperationMode+0x6c>
    f5d8:	9b00      	ldr	r3, [sp, #0]
    f5da:	2b00      	cmp	r3, #0
    f5dc:	d003      	beq.n	f5e6 <FlexCAN_SetOperationMode+0x22>
    f5de:	9b00      	ldr	r3, [sp, #0]
    f5e0:	2b01      	cmp	r3, #1
    f5e2:	d00d      	beq.n	f600 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    f5e4:	e024      	b.n	f630 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f5e6:	9b01      	ldr	r3, [sp, #4]
    f5e8:	685b      	ldr	r3, [r3, #4]
    f5ea:	f023 0208 	bic.w	r2, r3, #8
    f5ee:	9b01      	ldr	r3, [sp, #4]
    f5f0:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    f5f2:	9b01      	ldr	r3, [sp, #4]
    f5f4:	685b      	ldr	r3, [r3, #4]
    f5f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    f5fa:	9b01      	ldr	r3, [sp, #4]
    f5fc:	605a      	str	r2, [r3, #4]
            break;
    f5fe:	e018      	b.n	f632 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    f600:	9b01      	ldr	r3, [sp, #4]
    f602:	685b      	ldr	r3, [r3, #4]
    f604:	f043 0208 	orr.w	r2, r3, #8
    f608:	9b01      	ldr	r3, [sp, #4]
    f60a:	605a      	str	r2, [r3, #4]
            break;
    f60c:	e011      	b.n	f632 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    f60e:	9b01      	ldr	r3, [sp, #4]
    f610:	685b      	ldr	r3, [r3, #4]
    f612:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    f616:	9b01      	ldr	r3, [sp, #4]
    f618:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f61a:	9b01      	ldr	r3, [sp, #4]
    f61c:	685b      	ldr	r3, [r3, #4]
    f61e:	f023 0208 	bic.w	r2, r3, #8
    f622:	9b01      	ldr	r3, [sp, #4]
    f624:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    f626:	2101      	movs	r1, #1
    f628:	9801      	ldr	r0, [sp, #4]
    f62a:	f7fe ff7f 	bl	e52c <FlexCAN_SetSelfReception>
            break;
    f62e:	e000      	b.n	f632 <FlexCAN_SetOperationMode+0x6e>
            break;
    f630:	bf00      	nop
    }
}
    f632:	bf00      	nop
    f634:	b003      	add	sp, #12
    f636:	f85d fb04 	ldr.w	pc, [sp], #4

0000f63a <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    f63a:	b500      	push	{lr}
    f63c:	b08d      	sub	sp, #52	; 0x34
    f63e:	9003      	str	r0, [sp, #12]
    f640:	9102      	str	r1, [sp, #8]
    f642:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    f644:	2300      	movs	r3, #0
    f646:	9309      	str	r3, [sp, #36]	; 0x24
    f648:	2300      	movs	r3, #0
    f64a:	9308      	str	r3, [sp, #32]
    f64c:	2300      	movs	r3, #0
    f64e:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    f650:	9b03      	ldr	r3, [sp, #12]
    f652:	33e0      	adds	r3, #224	; 0xe0
    f654:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    f656:	9b03      	ldr	r3, [sp, #12]
    f658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f65a:	0e1b      	lsrs	r3, r3, #24
    f65c:	f003 030f 	and.w	r3, r3, #15
    f660:	9305      	str	r3, [sp, #20]
    f662:	9b02      	ldr	r3, [sp, #8]
    f664:	2b03      	cmp	r3, #3
    f666:	f200 81e7 	bhi.w	fa38 <FlexCAN_SetRxFifoFilter+0x3fe>
    f66a:	a201      	add	r2, pc, #4	; (adr r2, f670 <FlexCAN_SetRxFifoFilter+0x36>)
    f66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f670:	0000f681 	.word	0x0000f681
    f674:	0000f71b 	.word	0x0000f71b
    f678:	0000f855 	.word	0x0000f855
    f67c:	0000fa23 	.word	0x0000fa23
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f680:	f004 ff18 	bl	144b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f684:	9b03      	ldr	r3, [sp, #12]
    f686:	681b      	ldr	r3, [r3, #0]
    f688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    f68c:	9b03      	ldr	r3, [sp, #12]
    f68e:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f690:	f004 ff3c 	bl	1450c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f694:	2300      	movs	r3, #0
    f696:	930b      	str	r3, [sp, #44]	; 0x2c
    f698:	e038      	b.n	f70c <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    f69a:	2300      	movs	r3, #0
    f69c:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    f69e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6a0:	00db      	lsls	r3, r3, #3
    f6a2:	9a01      	ldr	r2, [sp, #4]
    f6a4:	4413      	add	r3, r2
    f6a6:	781b      	ldrb	r3, [r3, #0]
    f6a8:	2b00      	cmp	r3, #0
    f6aa:	d002      	beq.n	f6b2 <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f6ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f6b0:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    f6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6b4:	00db      	lsls	r3, r3, #3
    f6b6:	9a01      	ldr	r2, [sp, #4]
    f6b8:	4413      	add	r3, r2
    f6ba:	785b      	ldrb	r3, [r3, #1]
    f6bc:	2b00      	cmp	r3, #0
    f6be:	d013      	beq.n	f6e8 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f6c0:	9b07      	ldr	r3, [sp, #28]
    f6c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f6c6:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    f6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6ca:	00db      	lsls	r3, r3, #3
    f6cc:	9a01      	ldr	r2, [sp, #4]
    f6ce:	4413      	add	r3, r2
    f6d0:	685b      	ldr	r3, [r3, #4]
    f6d2:	005b      	lsls	r3, r3, #1
    f6d4:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    f6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6da:	009b      	lsls	r3, r3, #2
    f6dc:	9a06      	ldr	r2, [sp, #24]
    f6de:	4413      	add	r3, r2
    f6e0:	9a07      	ldr	r2, [sp, #28]
    f6e2:	440a      	add	r2, r1
    f6e4:	601a      	str	r2, [r3, #0]
    f6e6:	e00e      	b.n	f706 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    f6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6ea:	00db      	lsls	r3, r3, #3
    f6ec:	9a01      	ldr	r2, [sp, #4]
    f6ee:	4413      	add	r3, r2
    f6f0:	685b      	ldr	r3, [r3, #4]
    f6f2:	04da      	lsls	r2, r3, #19
    f6f4:	4b9d      	ldr	r3, [pc, #628]	; (f96c <FlexCAN_SetRxFifoFilter+0x332>)
    f6f6:	4013      	ands	r3, r2
    f6f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f6fa:	0092      	lsls	r2, r2, #2
    f6fc:	9906      	ldr	r1, [sp, #24]
    f6fe:	440a      	add	r2, r1
    f700:	9907      	ldr	r1, [sp, #28]
    f702:	440b      	add	r3, r1
    f704:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f708:	3301      	adds	r3, #1
    f70a:	930b      	str	r3, [sp, #44]	; 0x2c
    f70c:	9b05      	ldr	r3, [sp, #20]
    f70e:	3301      	adds	r3, #1
    f710:	00db      	lsls	r3, r3, #3
    f712:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f714:	429a      	cmp	r2, r3
    f716:	d3c0      	bcc.n	f69a <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    f718:	e18f      	b.n	fa3a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f71a:	f004 fecb 	bl	144b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    f71e:	9b03      	ldr	r3, [sp, #12]
    f720:	681b      	ldr	r3, [r3, #0]
    f722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f726:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    f72a:	9b03      	ldr	r3, [sp, #12]
    f72c:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f72e:	f004 feed 	bl	1450c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f732:	2300      	movs	r3, #0
    f734:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f736:	2300      	movs	r3, #0
    f738:	930b      	str	r3, [sp, #44]	; 0x2c
    f73a:	e083      	b.n	f844 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    f73c:	2300      	movs	r3, #0
    f73e:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    f740:	2300      	movs	r3, #0
    f742:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    f744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f746:	00db      	lsls	r3, r3, #3
    f748:	9a01      	ldr	r2, [sp, #4]
    f74a:	4413      	add	r3, r2
    f74c:	781b      	ldrb	r3, [r3, #0]
    f74e:	2b00      	cmp	r3, #0
    f750:	d002      	beq.n	f758 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f752:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f756:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    f758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f75a:	3301      	adds	r3, #1
    f75c:	00db      	lsls	r3, r3, #3
    f75e:	9a01      	ldr	r2, [sp, #4]
    f760:	4413      	add	r3, r2
    f762:	781b      	ldrb	r3, [r3, #0]
    f764:	2b00      	cmp	r3, #0
    f766:	d002      	beq.n	f76e <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    f768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f76c:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    f76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f770:	00db      	lsls	r3, r3, #3
    f772:	9a01      	ldr	r2, [sp, #4]
    f774:	4413      	add	r3, r2
    f776:	785b      	ldrb	r3, [r3, #1]
    f778:	2b00      	cmp	r3, #0
    f77a:	d014      	beq.n	f7a6 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f77e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f782:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f786:	00db      	lsls	r3, r3, #3
    f788:	9a01      	ldr	r2, [sp, #4]
    f78a:	4413      	add	r3, r2
    f78c:	685b      	ldr	r3, [r3, #4]
    f78e:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    f790:	041a      	lsls	r2, r3, #16
    f792:	4b77      	ldr	r3, [pc, #476]	; (f970 <FlexCAN_SetRxFifoFilter+0x336>)
    f794:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f796:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f798:	0092      	lsls	r2, r2, #2
    f79a:	9906      	ldr	r1, [sp, #24]
    f79c:	440a      	add	r2, r1
    f79e:	9909      	ldr	r1, [sp, #36]	; 0x24
    f7a0:	440b      	add	r3, r1
    f7a2:	6013      	str	r3, [r2, #0]
    f7a4:	e00e      	b.n	f7c4 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7a8:	00db      	lsls	r3, r3, #3
    f7aa:	9a01      	ldr	r2, [sp, #4]
    f7ac:	4413      	add	r3, r2
    f7ae:	685b      	ldr	r3, [r3, #4]
    f7b0:	04da      	lsls	r2, r3, #19
    f7b2:	4b6e      	ldr	r3, [pc, #440]	; (f96c <FlexCAN_SetRxFifoFilter+0x332>)
    f7b4:	4013      	ands	r3, r2
    f7b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f7b8:	0092      	lsls	r2, r2, #2
    f7ba:	9906      	ldr	r1, [sp, #24]
    f7bc:	440a      	add	r2, r1
    f7be:	9909      	ldr	r1, [sp, #36]	; 0x24
    f7c0:	440b      	add	r3, r1
    f7c2:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7c6:	3301      	adds	r3, #1
    f7c8:	00db      	lsls	r3, r3, #3
    f7ca:	9a01      	ldr	r2, [sp, #4]
    f7cc:	4413      	add	r3, r2
    f7ce:	785b      	ldrb	r3, [r3, #1]
    f7d0:	2b00      	cmp	r3, #0
    f7d2:	d01a      	beq.n	f80a <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    f7d4:	9b08      	ldr	r3, [sp, #32]
    f7d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f7da:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f7dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7de:	009b      	lsls	r3, r3, #2
    f7e0:	9a06      	ldr	r2, [sp, #24]
    f7e2:	4413      	add	r3, r2
    f7e4:	6819      	ldr	r1, [r3, #0]
    f7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7e8:	3301      	adds	r3, #1
    f7ea:	00db      	lsls	r3, r3, #3
    f7ec:	9a01      	ldr	r2, [sp, #4]
    f7ee:	4413      	add	r3, r2
    f7f0:	685b      	ldr	r3, [r3, #4]
    f7f2:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    f7f4:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f7f8:	9b08      	ldr	r3, [sp, #32]
    f7fa:	441a      	add	r2, r3
    f7fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7fe:	009b      	lsls	r3, r3, #2
    f800:	9806      	ldr	r0, [sp, #24]
    f802:	4403      	add	r3, r0
    f804:	430a      	orrs	r2, r1
    f806:	601a      	str	r2, [r3, #0]
    f808:	e016      	b.n	f838 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f80c:	009b      	lsls	r3, r3, #2
    f80e:	9a06      	ldr	r2, [sp, #24]
    f810:	4413      	add	r3, r2
    f812:	6819      	ldr	r1, [r3, #0]
    f814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f816:	3301      	adds	r3, #1
    f818:	00db      	lsls	r3, r3, #3
    f81a:	9a01      	ldr	r2, [sp, #4]
    f81c:	4413      	add	r3, r2
    f81e:	685b      	ldr	r3, [r3, #4]
    f820:	00da      	lsls	r2, r3, #3
    f822:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    f826:	4013      	ands	r3, r2
    f828:	9a08      	ldr	r2, [sp, #32]
    f82a:	441a      	add	r2, r3
    f82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f82e:	009b      	lsls	r3, r3, #2
    f830:	9806      	ldr	r0, [sp, #24]
    f832:	4403      	add	r3, r0
    f834:	430a      	orrs	r2, r1
    f836:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    f838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f83a:	3302      	adds	r3, #2
    f83c:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f840:	3301      	adds	r3, #1
    f842:	930b      	str	r3, [sp, #44]	; 0x2c
    f844:	9b05      	ldr	r3, [sp, #20]
    f846:	3301      	adds	r3, #1
    f848:	00db      	lsls	r3, r3, #3
    f84a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f84c:	429a      	cmp	r2, r3
    f84e:	f4ff af75 	bcc.w	f73c <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    f852:	e0f2      	b.n	fa3a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f854:	f004 fe2e 	bl	144b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f858:	9b03      	ldr	r3, [sp, #12]
    f85a:	681b      	ldr	r3, [r3, #0]
    f85c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f860:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    f864:	9b03      	ldr	r3, [sp, #12]
    f866:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f868:	f004 fe50 	bl	1450c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f86c:	2300      	movs	r3, #0
    f86e:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f870:	2300      	movs	r3, #0
    f872:	930b      	str	r3, [sp, #44]	; 0x2c
    f874:	e0cd      	b.n	fa12 <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    f876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f878:	00db      	lsls	r3, r3, #3
    f87a:	9a01      	ldr	r2, [sp, #4]
    f87c:	4413      	add	r3, r2
    f87e:	785b      	ldrb	r3, [r3, #1]
    f880:	2b00      	cmp	r3, #0
    f882:	d00e      	beq.n	f8a2 <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f886:	00db      	lsls	r3, r3, #3
    f888:	9a01      	ldr	r2, [sp, #4]
    f88a:	4413      	add	r3, r2
    f88c:	685b      	ldr	r3, [r3, #4]
    f88e:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f890:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f894:	009b      	lsls	r3, r3, #2
    f896:	9a06      	ldr	r2, [sp, #24]
    f898:	4413      	add	r3, r2
    f89a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f89c:	440a      	add	r2, r1
    f89e:	601a      	str	r2, [r3, #0]
    f8a0:	e00d      	b.n	f8be <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8a4:	00db      	lsls	r3, r3, #3
    f8a6:	9a01      	ldr	r2, [sp, #4]
    f8a8:	4413      	add	r3, r2
    f8aa:	685b      	ldr	r3, [r3, #4]
    f8ac:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f8ae:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8b2:	009b      	lsls	r3, r3, #2
    f8b4:	9a06      	ldr	r2, [sp, #24]
    f8b6:	4413      	add	r3, r2
    f8b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f8ba:	440a      	add	r2, r1
    f8bc:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8c0:	3301      	adds	r3, #1
    f8c2:	00db      	lsls	r3, r3, #3
    f8c4:	9a01      	ldr	r2, [sp, #4]
    f8c6:	4413      	add	r3, r2
    f8c8:	785b      	ldrb	r3, [r3, #1]
    f8ca:	2b00      	cmp	r3, #0
    f8cc:	d017      	beq.n	f8fe <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f8ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8d0:	009b      	lsls	r3, r3, #2
    f8d2:	9a06      	ldr	r2, [sp, #24]
    f8d4:	4413      	add	r3, r2
    f8d6:	6819      	ldr	r1, [r3, #0]
    f8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8da:	3301      	adds	r3, #1
    f8dc:	00db      	lsls	r3, r3, #3
    f8de:	9a01      	ldr	r2, [sp, #4]
    f8e0:	4413      	add	r3, r2
    f8e2:	685b      	ldr	r3, [r3, #4]
    f8e4:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    f8e6:	041b      	lsls	r3, r3, #16
    f8e8:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f8ee:	441a      	add	r2, r3
    f8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8f2:	009b      	lsls	r3, r3, #2
    f8f4:	9806      	ldr	r0, [sp, #24]
    f8f6:	4403      	add	r3, r0
    f8f8:	430a      	orrs	r2, r1
    f8fa:	601a      	str	r2, [r3, #0]
    f8fc:	e016      	b.n	f92c <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f8fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f900:	009b      	lsls	r3, r3, #2
    f902:	9a06      	ldr	r2, [sp, #24]
    f904:	4413      	add	r3, r2
    f906:	6819      	ldr	r1, [r3, #0]
    f908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f90a:	3301      	adds	r3, #1
    f90c:	00db      	lsls	r3, r3, #3
    f90e:	9a01      	ldr	r2, [sp, #4]
    f910:	4413      	add	r3, r2
    f912:	685b      	ldr	r3, [r3, #4]
    f914:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    f916:	041b      	lsls	r3, r3, #16
    f918:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f91e:	441a      	add	r2, r3
    f920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f922:	009b      	lsls	r3, r3, #2
    f924:	9806      	ldr	r0, [sp, #24]
    f926:	4403      	add	r3, r0
    f928:	430a      	orrs	r2, r1
    f92a:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    f92c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f92e:	3302      	adds	r3, #2
    f930:	00db      	lsls	r3, r3, #3
    f932:	9a01      	ldr	r2, [sp, #4]
    f934:	4413      	add	r3, r2
    f936:	785b      	ldrb	r3, [r3, #1]
    f938:	2b00      	cmp	r3, #0
    f93a:	d01b      	beq.n	f974 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f93c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f93e:	009b      	lsls	r3, r3, #2
    f940:	9a06      	ldr	r2, [sp, #24]
    f942:	4413      	add	r3, r2
    f944:	6819      	ldr	r1, [r3, #0]
    f946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f948:	3302      	adds	r3, #2
    f94a:	00db      	lsls	r3, r3, #3
    f94c:	9a01      	ldr	r2, [sp, #4]
    f94e:	4413      	add	r3, r2
    f950:	685b      	ldr	r3, [r3, #4]
    f952:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    f954:	021b      	lsls	r3, r3, #8
    f956:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f958:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f95a:	441a      	add	r2, r3
    f95c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f95e:	009b      	lsls	r3, r3, #2
    f960:	9806      	ldr	r0, [sp, #24]
    f962:	4403      	add	r3, r0
    f964:	430a      	orrs	r2, r1
    f966:	601a      	str	r2, [r3, #0]
    f968:	e01a      	b.n	f9a0 <FlexCAN_SetRxFifoFilter+0x366>
    f96a:	bf00      	nop
    f96c:	3ff80000 	.word	0x3ff80000
    f970:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f976:	009b      	lsls	r3, r3, #2
    f978:	9a06      	ldr	r2, [sp, #24]
    f97a:	4413      	add	r3, r2
    f97c:	6819      	ldr	r1, [r3, #0]
    f97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f980:	3302      	adds	r3, #2
    f982:	00db      	lsls	r3, r3, #3
    f984:	9a01      	ldr	r2, [sp, #4]
    f986:	4413      	add	r3, r2
    f988:	685b      	ldr	r3, [r3, #4]
    f98a:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    f98c:	021b      	lsls	r3, r3, #8
    f98e:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f990:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f992:	441a      	add	r2, r3
    f994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f996:	009b      	lsls	r3, r3, #2
    f998:	9806      	ldr	r0, [sp, #24]
    f99a:	4403      	add	r3, r0
    f99c:	430a      	orrs	r2, r1
    f99e:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    f9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9a2:	3303      	adds	r3, #3
    f9a4:	00db      	lsls	r3, r3, #3
    f9a6:	9a01      	ldr	r2, [sp, #4]
    f9a8:	4413      	add	r3, r2
    f9aa:	785b      	ldrb	r3, [r3, #1]
    f9ac:	2b00      	cmp	r3, #0
    f9ae:	d015      	beq.n	f9dc <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f9b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9b2:	009b      	lsls	r3, r3, #2
    f9b4:	9a06      	ldr	r2, [sp, #24]
    f9b6:	4413      	add	r3, r2
    f9b8:	6819      	ldr	r1, [r3, #0]
    f9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9bc:	3303      	adds	r3, #3
    f9be:	00db      	lsls	r3, r3, #3
    f9c0:	9a01      	ldr	r2, [sp, #4]
    f9c2:	4413      	add	r3, r2
    f9c4:	685b      	ldr	r3, [r3, #4]
    f9c6:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    f9c8:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9cc:	441a      	add	r2, r3
    f9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9d0:	009b      	lsls	r3, r3, #2
    f9d2:	9806      	ldr	r0, [sp, #24]
    f9d4:	4403      	add	r3, r0
    f9d6:	430a      	orrs	r2, r1
    f9d8:	601a      	str	r2, [r3, #0]
    f9da:	e014      	b.n	fa06 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    f9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9de:	009b      	lsls	r3, r3, #2
    f9e0:	9a06      	ldr	r2, [sp, #24]
    f9e2:	4413      	add	r3, r2
    f9e4:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9e8:	3303      	adds	r3, #3
    f9ea:	00db      	lsls	r3, r3, #3
    f9ec:	9a01      	ldr	r2, [sp, #4]
    f9ee:	4413      	add	r3, r2
    f9f0:	685b      	ldr	r3, [r3, #4]
    f9f2:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    f9f4:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    f9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9f8:	441a      	add	r2, r3
    f9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9fc:	009b      	lsls	r3, r3, #2
    f9fe:	9806      	ldr	r0, [sp, #24]
    fa00:	4403      	add	r3, r0
    fa02:	430a      	orrs	r2, r1
    fa04:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    fa06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa08:	3304      	adds	r3, #4
    fa0a:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    fa0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa0e:	3301      	adds	r3, #1
    fa10:	930b      	str	r3, [sp, #44]	; 0x2c
    fa12:	9b05      	ldr	r3, [sp, #20]
    fa14:	3301      	adds	r3, #1
    fa16:	00db      	lsls	r3, r3, #3
    fa18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fa1a:	429a      	cmp	r2, r3
    fa1c:	f4ff af2b 	bcc.w	f876 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    fa20:	e00b      	b.n	fa3a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    fa22:	f004 fd47 	bl	144b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    fa26:	9b03      	ldr	r3, [sp, #12]
    fa28:	681b      	ldr	r3, [r3, #0]
    fa2a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    fa2e:	9b03      	ldr	r3, [sp, #12]
    fa30:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    fa32:	f004 fd6b 	bl	1450c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    fa36:	e000      	b.n	fa3a <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    fa38:	bf00      	nop
    }
}
    fa3a:	bf00      	nop
    fa3c:	b00d      	add	sp, #52	; 0x34
    fa3e:	f85d fb04 	ldr.w	pc, [sp], #4

0000fa42 <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    fa42:	b500      	push	{lr}
    fa44:	b08b      	sub	sp, #44	; 0x2c
    fa46:	9001      	str	r0, [sp, #4]
    fa48:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    fa4a:	9b01      	ldr	r3, [sp, #4]
    fa4c:	3380      	adds	r3, #128	; 0x80
    fa4e:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    fa50:	9b07      	ldr	r3, [sp, #28]
    fa52:	3304      	adds	r3, #4
    fa54:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    fa56:	9b07      	ldr	r3, [sp, #28]
    fa58:	3308      	adds	r3, #8
    fa5a:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    fa5c:	2300      	movs	r3, #0
    fa5e:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    fa60:	9b07      	ldr	r3, [sp, #28]
    fa62:	681b      	ldr	r3, [r3, #0]
    fa64:	0c1b      	lsrs	r3, r3, #16
    fa66:	b2db      	uxtb	r3, r3
    fa68:	f003 030f 	and.w	r3, r3, #15
    fa6c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    fa70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fa74:	4618      	mov	r0, r3
    fa76:	f7fe fe6c 	bl	e752 <FlexCAN_ComputePayloadSize>
    fa7a:	4603      	mov	r3, r0
    fa7c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    fa80:	9b00      	ldr	r3, [sp, #0]
    fa82:	3308      	adds	r3, #8
    fa84:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    fa86:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fa8a:	2b08      	cmp	r3, #8
    fa8c:	d902      	bls.n	fa94 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    fa8e:	2308      	movs	r3, #8
    fa90:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    fa94:	9b00      	ldr	r3, [sp, #0]
    fa96:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    fa9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    fa9e:	9b07      	ldr	r3, [sp, #28]
    faa0:	681a      	ldr	r2, [r3, #0]
    faa2:	9b00      	ldr	r3, [sp, #0]
    faa4:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    faa6:	9b00      	ldr	r3, [sp, #0]
    faa8:	681b      	ldr	r3, [r3, #0]
    faaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    faae:	2b00      	cmp	r3, #0
    fab0:	d004      	beq.n	fabc <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    fab2:	9b06      	ldr	r3, [sp, #24]
    fab4:	681a      	ldr	r2, [r3, #0]
    fab6:	9b00      	ldr	r3, [sp, #0]
    fab8:	605a      	str	r2, [r3, #4]
    faba:	e004      	b.n	fac6 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    fabc:	9b06      	ldr	r3, [sp, #24]
    fabe:	681b      	ldr	r3, [r3, #0]
    fac0:	0c9a      	lsrs	r2, r3, #18
    fac2:	9b00      	ldr	r3, [sp, #0]
    fac4:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    fac6:	9b01      	ldr	r3, [sp, #4]
    fac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    faca:	b2da      	uxtb	r2, r3
    facc:	9b00      	ldr	r3, [sp, #0]
    face:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    fad2:	9b00      	ldr	r3, [sp, #0]
    fad4:	681b      	ldr	r3, [r3, #0]
    fad6:	b29a      	uxth	r2, r3
    fad8:	9b00      	ldr	r3, [sp, #0]
    fada:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fadc:	2300      	movs	r3, #0
    fade:	9309      	str	r3, [sp, #36]	; 0x24
    fae0:	e01f      	b.n	fb22 <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    fae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fae4:	089b      	lsrs	r3, r3, #2
    fae6:	009b      	lsls	r3, r3, #2
    fae8:	9a05      	ldr	r2, [sp, #20]
    faea:	4413      	add	r3, r2
    faec:	681b      	ldr	r3, [r3, #0]
    faee:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    faf0:	9b02      	ldr	r3, [sp, #8]
    faf2:	0e1a      	lsrs	r2, r3, #24
    faf4:	9b02      	ldr	r3, [sp, #8]
    faf6:	0a1b      	lsrs	r3, r3, #8
    faf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    fafc:	431a      	orrs	r2, r3
    fafe:	9b02      	ldr	r3, [sp, #8]
    fb00:	021b      	lsls	r3, r3, #8
    fb02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    fb06:	ea42 0103 	orr.w	r1, r2, r3
    fb0a:	9b02      	ldr	r3, [sp, #8]
    fb0c:	061a      	lsls	r2, r3, #24
    fb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb10:	089b      	lsrs	r3, r3, #2
    fb12:	009b      	lsls	r3, r3, #2
    fb14:	9804      	ldr	r0, [sp, #16]
    fb16:	4403      	add	r3, r0
    fb18:	430a      	orrs	r2, r1
    fb1a:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fb1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb1e:	3304      	adds	r3, #4
    fb20:	9309      	str	r3, [sp, #36]	; 0x24
    fb22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fb28:	429a      	cmp	r2, r3
    fb2a:	d3da      	bcc.n	fae2 <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    fb2c:	bf00      	nop
    fb2e:	bf00      	nop
    fb30:	b00b      	add	sp, #44	; 0x2c
    fb32:	f85d fb04 	ldr.w	pc, [sp], #4

0000fb36 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    fb36:	b088      	sub	sp, #32
    fb38:	9003      	str	r0, [sp, #12]
    fb3a:	9301      	str	r3, [sp, #4]
    fb3c:	460b      	mov	r3, r1
    fb3e:	f88d 300b 	strb.w	r3, [sp, #11]
    fb42:	4613      	mov	r3, r2
    fb44:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    fb48:	2300      	movs	r3, #0
    fb4a:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    fb4e:	2300      	movs	r3, #0
    fb50:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    fb52:	2300      	movs	r3, #0
    fb54:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    fb56:	9b01      	ldr	r3, [sp, #4]
    fb58:	b2db      	uxtb	r3, r3
    fb5a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    fb5e:	429a      	cmp	r2, r3
    fb60:	d303      	bcc.n	fb6a <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    fb62:	2301      	movs	r3, #1
    fb64:	f88d 301f 	strb.w	r3, [sp, #31]
    fb68:	e01b      	b.n	fba2 <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    fb6a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    fb6e:	2b00      	cmp	r3, #0
    fb70:	d014      	beq.n	fb9c <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    fb72:	9b03      	ldr	r3, [sp, #12]
    fb74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fb76:	0e1b      	lsrs	r3, r3, #24
    fb78:	f003 030f 	and.w	r3, r3, #15
    fb7c:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    fb7e:	9b06      	ldr	r3, [sp, #24]
    fb80:	3301      	adds	r3, #1
    fb82:	00db      	lsls	r3, r3, #3
    fb84:	089b      	lsrs	r3, r3, #2
    fb86:	3305      	adds	r3, #5
    fb88:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    fb8a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    fb8e:	9a05      	ldr	r2, [sp, #20]
    fb90:	429a      	cmp	r2, r3
    fb92:	d306      	bcc.n	fba2 <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    fb94:	2301      	movs	r3, #1
    fb96:	f88d 301f 	strb.w	r3, [sp, #31]
    fb9a:	e002      	b.n	fba2 <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    fb9c:	2300      	movs	r3, #0
    fb9e:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    fba2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    fba6:	4618      	mov	r0, r3
    fba8:	b008      	add	sp, #32
    fbaa:	4770      	bx	lr

0000fbac <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    fbac:	b500      	push	{lr}
    fbae:	b083      	sub	sp, #12
    fbb0:	9001      	str	r0, [sp, #4]
    fbb2:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    fbb4:	9b00      	ldr	r3, [sp, #0]
    fbb6:	f003 0320 	and.w	r3, r3, #32
    fbba:	2b00      	cmp	r3, #0
    fbbc:	d004      	beq.n	fbc8 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    fbbe:	2101      	movs	r1, #1
    fbc0:	9801      	ldr	r0, [sp, #4]
    fbc2:	f7fe fcd8 	bl	e576 <FlexCAN_SetIsoCan>
    fbc6:	e003      	b.n	fbd0 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    fbc8:	2100      	movs	r1, #0
    fbca:	9801      	ldr	r0, [sp, #4]
    fbcc:	f7fe fcd3 	bl	e576 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    fbd0:	9b00      	ldr	r3, [sp, #0]
    fbd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fbd6:	2b00      	cmp	r3, #0
    fbd8:	d004      	beq.n	fbe4 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    fbda:	2101      	movs	r1, #1
    fbdc:	9801      	ldr	r0, [sp, #4]
    fbde:	f7fe fce1 	bl	e5a4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    fbe2:	e003      	b.n	fbec <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    fbe4:	2100      	movs	r1, #0
    fbe6:	9801      	ldr	r0, [sp, #4]
    fbe8:	f7fe fcdc 	bl	e5a4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    fbec:	9b00      	ldr	r3, [sp, #0]
    fbee:	f003 0308 	and.w	r3, r3, #8
    fbf2:	2b00      	cmp	r3, #0
    fbf4:	d004      	beq.n	fc00 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    fbf6:	2101      	movs	r1, #1
    fbf8:	9801      	ldr	r0, [sp, #4]
    fbfa:	f7fe fcea 	bl	e5d2 <FlexCAN_SetProtocolException>
    fbfe:	e003      	b.n	fc08 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    fc00:	2100      	movs	r1, #0
    fc02:	9801      	ldr	r0, [sp, #4]
    fc04:	f7fe fce5 	bl	e5d2 <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    fc08:	9b00      	ldr	r3, [sp, #0]
    fc0a:	f003 0302 	and.w	r3, r3, #2
    fc0e:	2b00      	cmp	r3, #0
    fc10:	d00a      	beq.n	fc28 <FlexCAN_ConfigCtrlOptions+0x7c>
    fc12:	9b01      	ldr	r3, [sp, #4]
    fc14:	681b      	ldr	r3, [r3, #0]
    fc16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	d104      	bne.n	fc28 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    fc1e:	2101      	movs	r1, #1
    fc20:	9801      	ldr	r0, [sp, #4]
    fc22:	f7fe fd31 	bl	e688 <FlexCAN_CanBitSampling>
    fc26:	e003      	b.n	fc30 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    fc28:	2100      	movs	r1, #0
    fc2a:	9801      	ldr	r0, [sp, #4]
    fc2c:	f7fe fd2c 	bl	e688 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    fc30:	9b00      	ldr	r3, [sp, #0]
    fc32:	f003 0304 	and.w	r3, r3, #4
    fc36:	2b00      	cmp	r3, #0
    fc38:	d004      	beq.n	fc44 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    fc3a:	2101      	movs	r1, #1
    fc3c:	9801      	ldr	r0, [sp, #4]
    fc3e:	f7fe fcf6 	bl	e62e <FlexCAN_SetBusOffAutorecovery>
    fc42:	e003      	b.n	fc4c <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    fc44:	2100      	movs	r1, #0
    fc46:	9801      	ldr	r0, [sp, #4]
    fc48:	f7fe fcf1 	bl	e62e <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    fc4c:	9b00      	ldr	r3, [sp, #0]
    fc4e:	f003 0301 	and.w	r3, r3, #1
    fc52:	2b00      	cmp	r3, #0
    fc54:	d004      	beq.n	fc60 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    fc56:	2101      	movs	r1, #1
    fc58:	9801      	ldr	r0, [sp, #4]
    fc5a:	f7fe fcd1 	bl	e600 <FlexCAN_SetRemoteReqStore>
    fc5e:	e003      	b.n	fc68 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    fc60:	2100      	movs	r1, #0
    fc62:	9801      	ldr	r0, [sp, #4]
    fc64:	f7fe fccc 	bl	e600 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    fc68:	9b00      	ldr	r3, [sp, #0]
    fc6a:	f003 0310 	and.w	r3, r3, #16
    fc6e:	2b00      	cmp	r3, #0
    fc70:	d004      	beq.n	fc7c <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    fc72:	2101      	movs	r1, #1
    fc74:	9801      	ldr	r0, [sp, #4]
    fc76:	f7fe fcf0 	bl	e65a <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    fc7a:	e003      	b.n	fc84 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    fc7c:	2100      	movs	r1, #0
    fc7e:	9801      	ldr	r0, [sp, #4]
    fc80:	f7fe fceb 	bl	e65a <FlexCAN_SetEdgeFilter>
}
    fc84:	bf00      	nop
    fc86:	b003      	add	sp, #12
    fc88:	f85d fb04 	ldr.w	pc, [sp], #4

0000fc8c <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    fc8c:	b084      	sub	sp, #16
    fc8e:	4603      	mov	r3, r0
    fc90:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    fc94:	2300      	movs	r3, #0
    fc96:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fc9a:	2300      	movs	r3, #0
    fc9c:	f88d 300f 	strb.w	r3, [sp, #15]
    fca0:	e00d      	b.n	fcbe <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    fca2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fca6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fcaa:	4909      	ldr	r1, [pc, #36]	; (fcd0 <FlexCAN_ResetImaskBuff+0x44>)
    fcac:	4413      	add	r3, r2
    fcae:	2200      	movs	r2, #0
    fcb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fcb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fcb8:	3301      	adds	r3, #1
    fcba:	f88d 300f 	strb.w	r3, [sp, #15]
    fcbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	d0ed      	beq.n	fca2 <FlexCAN_ResetImaskBuff+0x16>
    }
}
    fcc6:	bf00      	nop
    fcc8:	bf00      	nop
    fcca:	b004      	add	sp, #16
    fccc:	4770      	bx	lr
    fcce:	bf00      	nop
    fcd0:	1fff9368 	.word	0x1fff9368

0000fcd4 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    fcd4:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    fcd6:	2000      	movs	r0, #0
    fcd8:	f7fd fb2a 	bl	d330 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fcdc:	f3bf 8f4f 	dsb	sy
}
    fce0:	bf00      	nop
    fce2:	bd08      	pop	{r3, pc}

0000fce4 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    fce4:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    fce6:	2000      	movs	r0, #0
    fce8:	f7fd fac2 	bl	d270 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fcec:	f3bf 8f4f 	dsb	sy
}
    fcf0:	bf00      	nop
    fcf2:	bd08      	pop	{r3, pc}

0000fcf4 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    fcf4:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    fcf6:	220f      	movs	r2, #15
    fcf8:	2100      	movs	r1, #0
    fcfa:	2000      	movs	r0, #0
    fcfc:	f7fd f9dc 	bl	d0b8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd00:	f3bf 8f4f 	dsb	sy
}
    fd04:	bf00      	nop
    fd06:	bd08      	pop	{r3, pc}

0000fd08 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    fd08:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    fd0a:	221f      	movs	r2, #31
    fd0c:	2110      	movs	r1, #16
    fd0e:	2000      	movs	r0, #0
    fd10:	f7fd f9d2 	bl	d0b8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd14:	f3bf 8f4f 	dsb	sy
}
    fd18:	bf00      	nop
    fd1a:	bd08      	pop	{r3, pc}

0000fd1c <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    fd1c:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    fd1e:	2001      	movs	r0, #1
    fd20:	f7fd fb06 	bl	d330 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fd24:	f3bf 8f4f 	dsb	sy
}
    fd28:	bf00      	nop
    fd2a:	bd08      	pop	{r3, pc}

0000fd2c <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    fd2c:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    fd2e:	2001      	movs	r0, #1
    fd30:	f7fd fa9e 	bl	d270 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fd34:	f3bf 8f4f 	dsb	sy
}
    fd38:	bf00      	nop
    fd3a:	bd08      	pop	{r3, pc}

0000fd3c <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    fd3c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    fd3e:	220f      	movs	r2, #15
    fd40:	2100      	movs	r1, #0
    fd42:	2001      	movs	r0, #1
    fd44:	f7fd f9b8 	bl	d0b8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd48:	f3bf 8f4f 	dsb	sy
}
    fd4c:	bf00      	nop
    fd4e:	bd08      	pop	{r3, pc}

0000fd50 <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    fd50:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    fd52:	221f      	movs	r2, #31
    fd54:	2110      	movs	r1, #16
    fd56:	2001      	movs	r0, #1
    fd58:	f7fd f9ae 	bl	d0b8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd5c:	f3bf 8f4f 	dsb	sy
}
    fd60:	bf00      	nop
    fd62:	bd08      	pop	{r3, pc}

0000fd64 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    fd64:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    fd66:	2002      	movs	r0, #2
    fd68:	f7fd fae2 	bl	d330 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fd6c:	f3bf 8f4f 	dsb	sy
}
    fd70:	bf00      	nop
    fd72:	bd08      	pop	{r3, pc}

0000fd74 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    fd74:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    fd76:	2002      	movs	r0, #2
    fd78:	f7fd fa7a 	bl	d270 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fd7c:	f3bf 8f4f 	dsb	sy
}
    fd80:	bf00      	nop
    fd82:	bd08      	pop	{r3, pc}

0000fd84 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    fd84:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    fd86:	220f      	movs	r2, #15
    fd88:	2100      	movs	r1, #0
    fd8a:	2002      	movs	r0, #2
    fd8c:	f7fd f994 	bl	d0b8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd90:	f3bf 8f4f 	dsb	sy
}
    fd94:	bf00      	nop
    fd96:	bd08      	pop	{r3, pc}

0000fd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fd98:	b500      	push	{lr}
    fd9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd9c:	f7f0 ff26 	bl	bec <Sys_GetCoreID>
    fda0:	4603      	mov	r3, r0
    fda2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    fda4:	4a10      	ldr	r2, [pc, #64]	; (fde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fda6:	9b01      	ldr	r3, [sp, #4]
    fda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdac:	2b00      	cmp	r3, #0
    fdae:	d10d      	bne.n	fdcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fdb0:	f7f0 fde2 	bl	978 <Adc_schm_read_msr>
    fdb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fdb6:	9b00      	ldr	r3, [sp, #0]
    fdb8:	f003 0301 	and.w	r3, r3, #1
    fdbc:	2b00      	cmp	r3, #0
    fdbe:	d100      	bne.n	fdc2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fdc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    fdc2:	490a      	ldr	r1, [pc, #40]	; (fdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    fdc4:	9b01      	ldr	r3, [sp, #4]
    fdc6:	9a00      	ldr	r2, [sp, #0]
    fdc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    fdcc:	4a06      	ldr	r2, [pc, #24]	; (fde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fdce:	9b01      	ldr	r3, [sp, #4]
    fdd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdd4:	1c5a      	adds	r2, r3, #1
    fdd6:	4904      	ldr	r1, [pc, #16]	; (fde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fdd8:	9b01      	ldr	r3, [sp, #4]
    fdda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fdde:	bf00      	nop
    fde0:	b003      	add	sp, #12
    fde2:	f85d fb04 	ldr.w	pc, [sp], #4
    fde6:	bf00      	nop
    fde8:	1fff9378 	.word	0x1fff9378
    fdec:	1fff9374 	.word	0x1fff9374

0000fdf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fdf0:	b500      	push	{lr}
    fdf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdf4:	f7f0 fefa 	bl	bec <Sys_GetCoreID>
    fdf8:	4603      	mov	r3, r0
    fdfa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    fdfc:	4a0d      	ldr	r2, [pc, #52]	; (fe34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fdfe:	9b01      	ldr	r3, [sp, #4]
    fe00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe04:	1e5a      	subs	r2, r3, #1
    fe06:	490b      	ldr	r1, [pc, #44]	; (fe34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fe08:	9b01      	ldr	r3, [sp, #4]
    fe0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    fe0e:	4a0a      	ldr	r2, [pc, #40]	; (fe38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    fe10:	9b01      	ldr	r3, [sp, #4]
    fe12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe16:	f003 0301 	and.w	r3, r3, #1
    fe1a:	2b00      	cmp	r3, #0
    fe1c:	d106      	bne.n	fe2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    fe1e:	4a05      	ldr	r2, [pc, #20]	; (fe34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fe20:	9b01      	ldr	r3, [sp, #4]
    fe22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe26:	2b00      	cmp	r3, #0
    fe28:	d100      	bne.n	fe2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe2c:	bf00      	nop
    fe2e:	b003      	add	sp, #12
    fe30:	f85d fb04 	ldr.w	pc, [sp], #4
    fe34:	1fff9378 	.word	0x1fff9378
    fe38:	1fff9374 	.word	0x1fff9374

0000fe3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    fe3c:	b500      	push	{lr}
    fe3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe40:	f7f0 fed4 	bl	bec <Sys_GetCoreID>
    fe44:	4603      	mov	r3, r0
    fe46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    fe48:	4a10      	ldr	r2, [pc, #64]	; (fe8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    fe4a:	9b01      	ldr	r3, [sp, #4]
    fe4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe50:	2b00      	cmp	r3, #0
    fe52:	d10d      	bne.n	fe70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe54:	f7f0 fd90 	bl	978 <Adc_schm_read_msr>
    fe58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe5a:	9b00      	ldr	r3, [sp, #0]
    fe5c:	f003 0301 	and.w	r3, r3, #1
    fe60:	2b00      	cmp	r3, #0
    fe62:	d100      	bne.n	fe66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    fe66:	490a      	ldr	r1, [pc, #40]	; (fe90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    fe68:	9b01      	ldr	r3, [sp, #4]
    fe6a:	9a00      	ldr	r2, [sp, #0]
    fe6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    fe70:	4a06      	ldr	r2, [pc, #24]	; (fe8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    fe72:	9b01      	ldr	r3, [sp, #4]
    fe74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe78:	1c5a      	adds	r2, r3, #1
    fe7a:	4904      	ldr	r1, [pc, #16]	; (fe8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    fe7c:	9b01      	ldr	r3, [sp, #4]
    fe7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe82:	bf00      	nop
    fe84:	b003      	add	sp, #12
    fe86:	f85d fb04 	ldr.w	pc, [sp], #4
    fe8a:	bf00      	nop
    fe8c:	1fff9380 	.word	0x1fff9380
    fe90:	1fff937c 	.word	0x1fff937c

0000fe94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    fe94:	b500      	push	{lr}
    fe96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe98:	f7f0 fea8 	bl	bec <Sys_GetCoreID>
    fe9c:	4603      	mov	r3, r0
    fe9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    fea0:	4a0d      	ldr	r2, [pc, #52]	; (fed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    fea2:	9b01      	ldr	r3, [sp, #4]
    fea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fea8:	1e5a      	subs	r2, r3, #1
    feaa:	490b      	ldr	r1, [pc, #44]	; (fed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    feac:	9b01      	ldr	r3, [sp, #4]
    feae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    feb2:	4a0a      	ldr	r2, [pc, #40]	; (fedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    feb4:	9b01      	ldr	r3, [sp, #4]
    feb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feba:	f003 0301 	and.w	r3, r3, #1
    febe:	2b00      	cmp	r3, #0
    fec0:	d106      	bne.n	fed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    fec2:	4a05      	ldr	r2, [pc, #20]	; (fed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    fec4:	9b01      	ldr	r3, [sp, #4]
    fec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feca:	2b00      	cmp	r3, #0
    fecc:	d100      	bne.n	fed0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fece:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fed0:	bf00      	nop
    fed2:	b003      	add	sp, #12
    fed4:	f85d fb04 	ldr.w	pc, [sp], #4
    fed8:	1fff9380 	.word	0x1fff9380
    fedc:	1fff937c 	.word	0x1fff937c

0000fee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    fee0:	b500      	push	{lr}
    fee2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fee4:	f7f0 fe82 	bl	bec <Sys_GetCoreID>
    fee8:	4603      	mov	r3, r0
    feea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    feec:	4a10      	ldr	r2, [pc, #64]	; (ff30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    feee:	9b01      	ldr	r3, [sp, #4]
    fef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fef4:	2b00      	cmp	r3, #0
    fef6:	d10d      	bne.n	ff14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fef8:	f7f0 fd3e 	bl	978 <Adc_schm_read_msr>
    fefc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fefe:	9b00      	ldr	r3, [sp, #0]
    ff00:	f003 0301 	and.w	r3, r3, #1
    ff04:	2b00      	cmp	r3, #0
    ff06:	d100      	bne.n	ff0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ff0a:	490a      	ldr	r1, [pc, #40]	; (ff34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    ff0c:	9b01      	ldr	r3, [sp, #4]
    ff0e:	9a00      	ldr	r2, [sp, #0]
    ff10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    ff14:	4a06      	ldr	r2, [pc, #24]	; (ff30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ff16:	9b01      	ldr	r3, [sp, #4]
    ff18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff1c:	1c5a      	adds	r2, r3, #1
    ff1e:	4904      	ldr	r1, [pc, #16]	; (ff30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ff20:	9b01      	ldr	r3, [sp, #4]
    ff22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff26:	bf00      	nop
    ff28:	b003      	add	sp, #12
    ff2a:	f85d fb04 	ldr.w	pc, [sp], #4
    ff2e:	bf00      	nop
    ff30:	1fff9388 	.word	0x1fff9388
    ff34:	1fff9384 	.word	0x1fff9384

0000ff38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ff38:	b500      	push	{lr}
    ff3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff3c:	f7f0 fe56 	bl	bec <Sys_GetCoreID>
    ff40:	4603      	mov	r3, r0
    ff42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    ff44:	4a0d      	ldr	r2, [pc, #52]	; (ff7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ff46:	9b01      	ldr	r3, [sp, #4]
    ff48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff4c:	1e5a      	subs	r2, r3, #1
    ff4e:	490b      	ldr	r1, [pc, #44]	; (ff7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ff50:	9b01      	ldr	r3, [sp, #4]
    ff52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ff56:	4a0a      	ldr	r2, [pc, #40]	; (ff80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    ff58:	9b01      	ldr	r3, [sp, #4]
    ff5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff5e:	f003 0301 	and.w	r3, r3, #1
    ff62:	2b00      	cmp	r3, #0
    ff64:	d106      	bne.n	ff74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    ff66:	4a05      	ldr	r2, [pc, #20]	; (ff7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ff68:	9b01      	ldr	r3, [sp, #4]
    ff6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff6e:	2b00      	cmp	r3, #0
    ff70:	d100      	bne.n	ff74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff74:	bf00      	nop
    ff76:	b003      	add	sp, #12
    ff78:	f85d fb04 	ldr.w	pc, [sp], #4
    ff7c:	1fff9388 	.word	0x1fff9388
    ff80:	1fff9384 	.word	0x1fff9384

0000ff84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    ff84:	b500      	push	{lr}
    ff86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff88:	f7f0 fe30 	bl	bec <Sys_GetCoreID>
    ff8c:	4603      	mov	r3, r0
    ff8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    ff90:	4a10      	ldr	r2, [pc, #64]	; (ffd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ff92:	9b01      	ldr	r3, [sp, #4]
    ff94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff98:	2b00      	cmp	r3, #0
    ff9a:	d10d      	bne.n	ffb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff9c:	f7f0 fcec 	bl	978 <Adc_schm_read_msr>
    ffa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ffa2:	9b00      	ldr	r3, [sp, #0]
    ffa4:	f003 0301 	and.w	r3, r3, #1
    ffa8:	2b00      	cmp	r3, #0
    ffaa:	d100      	bne.n	ffae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ffac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    ffae:	490a      	ldr	r1, [pc, #40]	; (ffd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    ffb0:	9b01      	ldr	r3, [sp, #4]
    ffb2:	9a00      	ldr	r2, [sp, #0]
    ffb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    ffb8:	4a06      	ldr	r2, [pc, #24]	; (ffd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ffba:	9b01      	ldr	r3, [sp, #4]
    ffbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffc0:	1c5a      	adds	r2, r3, #1
    ffc2:	4904      	ldr	r1, [pc, #16]	; (ffd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ffc4:	9b01      	ldr	r3, [sp, #4]
    ffc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ffca:	bf00      	nop
    ffcc:	b003      	add	sp, #12
    ffce:	f85d fb04 	ldr.w	pc, [sp], #4
    ffd2:	bf00      	nop
    ffd4:	1fff9390 	.word	0x1fff9390
    ffd8:	1fff938c 	.word	0x1fff938c

0000ffdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    ffdc:	b500      	push	{lr}
    ffde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffe0:	f7f0 fe04 	bl	bec <Sys_GetCoreID>
    ffe4:	4603      	mov	r3, r0
    ffe6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    ffe8:	4a0d      	ldr	r2, [pc, #52]	; (10020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    ffea:	9b01      	ldr	r3, [sp, #4]
    ffec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fff0:	1e5a      	subs	r2, r3, #1
    fff2:	490b      	ldr	r1, [pc, #44]	; (10020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    fff4:	9b01      	ldr	r3, [sp, #4]
    fff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    fffa:	4a0a      	ldr	r2, [pc, #40]	; (10024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    fffc:	9b01      	ldr	r3, [sp, #4]
    fffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10002:	f003 0301 	and.w	r3, r3, #1
   10006:	2b00      	cmp	r3, #0
   10008:	d106      	bne.n	10018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
   1000a:	4a05      	ldr	r2, [pc, #20]	; (10020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   1000c:	9b01      	ldr	r3, [sp, #4]
   1000e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10012:	2b00      	cmp	r3, #0
   10014:	d100      	bne.n	10018 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10016:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10018:	bf00      	nop
   1001a:	b003      	add	sp, #12
   1001c:	f85d fb04 	ldr.w	pc, [sp], #4
   10020:	1fff9390 	.word	0x1fff9390
   10024:	1fff938c 	.word	0x1fff938c

00010028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   10028:	b500      	push	{lr}
   1002a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1002c:	f7f0 fdde 	bl	bec <Sys_GetCoreID>
   10030:	4603      	mov	r3, r0
   10032:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
   10034:	4a10      	ldr	r2, [pc, #64]	; (10078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   10036:	9b01      	ldr	r3, [sp, #4]
   10038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1003c:	2b00      	cmp	r3, #0
   1003e:	d10d      	bne.n	1005c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10040:	f7f0 fc9a 	bl	978 <Adc_schm_read_msr>
   10044:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10046:	9b00      	ldr	r3, [sp, #0]
   10048:	f003 0301 	and.w	r3, r3, #1
   1004c:	2b00      	cmp	r3, #0
   1004e:	d100      	bne.n	10052 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10050:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   10052:	490a      	ldr	r1, [pc, #40]	; (1007c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
   10054:	9b01      	ldr	r3, [sp, #4]
   10056:	9a00      	ldr	r2, [sp, #0]
   10058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
   1005c:	4a06      	ldr	r2, [pc, #24]	; (10078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   1005e:	9b01      	ldr	r3, [sp, #4]
   10060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10064:	1c5a      	adds	r2, r3, #1
   10066:	4904      	ldr	r1, [pc, #16]	; (10078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   10068:	9b01      	ldr	r3, [sp, #4]
   1006a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1006e:	bf00      	nop
   10070:	b003      	add	sp, #12
   10072:	f85d fb04 	ldr.w	pc, [sp], #4
   10076:	bf00      	nop
   10078:	1fff9398 	.word	0x1fff9398
   1007c:	1fff9394 	.word	0x1fff9394

00010080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   10080:	b500      	push	{lr}
   10082:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10084:	f7f0 fdb2 	bl	bec <Sys_GetCoreID>
   10088:	4603      	mov	r3, r0
   1008a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
   1008c:	4a0d      	ldr	r2, [pc, #52]	; (100c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   1008e:	9b01      	ldr	r3, [sp, #4]
   10090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10094:	1e5a      	subs	r2, r3, #1
   10096:	490b      	ldr	r1, [pc, #44]	; (100c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   10098:	9b01      	ldr	r3, [sp, #4]
   1009a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1009e:	4a0a      	ldr	r2, [pc, #40]	; (100c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
   100a0:	9b01      	ldr	r3, [sp, #4]
   100a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100a6:	f003 0301 	and.w	r3, r3, #1
   100aa:	2b00      	cmp	r3, #0
   100ac:	d106      	bne.n	100bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
   100ae:	4a05      	ldr	r2, [pc, #20]	; (100c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   100b0:	9b01      	ldr	r3, [sp, #4]
   100b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100b6:	2b00      	cmp	r3, #0
   100b8:	d100      	bne.n	100bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   100ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   100bc:	bf00      	nop
   100be:	b003      	add	sp, #12
   100c0:	f85d fb04 	ldr.w	pc, [sp], #4
   100c4:	1fff9398 	.word	0x1fff9398
   100c8:	1fff9394 	.word	0x1fff9394

000100cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   100cc:	b500      	push	{lr}
   100ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100d0:	f7f0 fd8c 	bl	bec <Sys_GetCoreID>
   100d4:	4603      	mov	r3, r0
   100d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
   100d8:	4a10      	ldr	r2, [pc, #64]	; (1011c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   100da:	9b01      	ldr	r3, [sp, #4]
   100dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100e0:	2b00      	cmp	r3, #0
   100e2:	d10d      	bne.n	10100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   100e4:	f7f0 fc48 	bl	978 <Adc_schm_read_msr>
   100e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   100ea:	9b00      	ldr	r3, [sp, #0]
   100ec:	f003 0301 	and.w	r3, r3, #1
   100f0:	2b00      	cmp	r3, #0
   100f2:	d100      	bne.n	100f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   100f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   100f6:	490a      	ldr	r1, [pc, #40]	; (10120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
   100f8:	9b01      	ldr	r3, [sp, #4]
   100fa:	9a00      	ldr	r2, [sp, #0]
   100fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
   10100:	4a06      	ldr	r2, [pc, #24]	; (1011c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   10102:	9b01      	ldr	r3, [sp, #4]
   10104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10108:	1c5a      	adds	r2, r3, #1
   1010a:	4904      	ldr	r1, [pc, #16]	; (1011c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   1010c:	9b01      	ldr	r3, [sp, #4]
   1010e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10112:	bf00      	nop
   10114:	b003      	add	sp, #12
   10116:	f85d fb04 	ldr.w	pc, [sp], #4
   1011a:	bf00      	nop
   1011c:	1fff93a0 	.word	0x1fff93a0
   10120:	1fff939c 	.word	0x1fff939c

00010124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   10124:	b500      	push	{lr}
   10126:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10128:	f7f0 fd60 	bl	bec <Sys_GetCoreID>
   1012c:	4603      	mov	r3, r0
   1012e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
   10130:	4a0d      	ldr	r2, [pc, #52]	; (10168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   10132:	9b01      	ldr	r3, [sp, #4]
   10134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10138:	1e5a      	subs	r2, r3, #1
   1013a:	490b      	ldr	r1, [pc, #44]	; (10168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   1013c:	9b01      	ldr	r3, [sp, #4]
   1013e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   10142:	4a0a      	ldr	r2, [pc, #40]	; (1016c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
   10144:	9b01      	ldr	r3, [sp, #4]
   10146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1014a:	f003 0301 	and.w	r3, r3, #1
   1014e:	2b00      	cmp	r3, #0
   10150:	d106      	bne.n	10160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
   10152:	4a05      	ldr	r2, [pc, #20]	; (10168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   10154:	9b01      	ldr	r3, [sp, #4]
   10156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1015a:	2b00      	cmp	r3, #0
   1015c:	d100      	bne.n	10160 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1015e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10160:	bf00      	nop
   10162:	b003      	add	sp, #12
   10164:	f85d fb04 	ldr.w	pc, [sp], #4
   10168:	1fff93a0 	.word	0x1fff93a0
   1016c:	1fff939c 	.word	0x1fff939c

00010170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   10170:	b500      	push	{lr}
   10172:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10174:	f7f0 fd3a 	bl	bec <Sys_GetCoreID>
   10178:	4603      	mov	r3, r0
   1017a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
   1017c:	4a10      	ldr	r2, [pc, #64]	; (101c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   1017e:	9b01      	ldr	r3, [sp, #4]
   10180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10184:	2b00      	cmp	r3, #0
   10186:	d10d      	bne.n	101a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10188:	f7f0 fbf6 	bl	978 <Adc_schm_read_msr>
   1018c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1018e:	9b00      	ldr	r3, [sp, #0]
   10190:	f003 0301 	and.w	r3, r3, #1
   10194:	2b00      	cmp	r3, #0
   10196:	d100      	bne.n	1019a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10198:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   1019a:	490a      	ldr	r1, [pc, #40]	; (101c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
   1019c:	9b01      	ldr	r3, [sp, #4]
   1019e:	9a00      	ldr	r2, [sp, #0]
   101a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
   101a4:	4a06      	ldr	r2, [pc, #24]	; (101c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   101a6:	9b01      	ldr	r3, [sp, #4]
   101a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101ac:	1c5a      	adds	r2, r3, #1
   101ae:	4904      	ldr	r1, [pc, #16]	; (101c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   101b0:	9b01      	ldr	r3, [sp, #4]
   101b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   101b6:	bf00      	nop
   101b8:	b003      	add	sp, #12
   101ba:	f85d fb04 	ldr.w	pc, [sp], #4
   101be:	bf00      	nop
   101c0:	1fff93a8 	.word	0x1fff93a8
   101c4:	1fff93a4 	.word	0x1fff93a4

000101c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   101c8:	b500      	push	{lr}
   101ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101cc:	f7f0 fd0e 	bl	bec <Sys_GetCoreID>
   101d0:	4603      	mov	r3, r0
   101d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
   101d4:	4a0d      	ldr	r2, [pc, #52]	; (1020c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   101d6:	9b01      	ldr	r3, [sp, #4]
   101d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101dc:	1e5a      	subs	r2, r3, #1
   101de:	490b      	ldr	r1, [pc, #44]	; (1020c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   101e0:	9b01      	ldr	r3, [sp, #4]
   101e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   101e6:	4a0a      	ldr	r2, [pc, #40]	; (10210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
   101e8:	9b01      	ldr	r3, [sp, #4]
   101ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101ee:	f003 0301 	and.w	r3, r3, #1
   101f2:	2b00      	cmp	r3, #0
   101f4:	d106      	bne.n	10204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
   101f6:	4a05      	ldr	r2, [pc, #20]	; (1020c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   101f8:	9b01      	ldr	r3, [sp, #4]
   101fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101fe:	2b00      	cmp	r3, #0
   10200:	d100      	bne.n	10204 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10202:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10204:	bf00      	nop
   10206:	b003      	add	sp, #12
   10208:	f85d fb04 	ldr.w	pc, [sp], #4
   1020c:	1fff93a8 	.word	0x1fff93a8
   10210:	1fff93a4 	.word	0x1fff93a4

00010214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   10214:	b500      	push	{lr}
   10216:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10218:	f7f0 fce8 	bl	bec <Sys_GetCoreID>
   1021c:	4603      	mov	r3, r0
   1021e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
   10220:	4a10      	ldr	r2, [pc, #64]	; (10264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   10222:	9b01      	ldr	r3, [sp, #4]
   10224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10228:	2b00      	cmp	r3, #0
   1022a:	d10d      	bne.n	10248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1022c:	f7f0 fba4 	bl	978 <Adc_schm_read_msr>
   10230:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10232:	9b00      	ldr	r3, [sp, #0]
   10234:	f003 0301 	and.w	r3, r3, #1
   10238:	2b00      	cmp	r3, #0
   1023a:	d100      	bne.n	1023e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1023c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
   1023e:	490a      	ldr	r1, [pc, #40]	; (10268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
   10240:	9b01      	ldr	r3, [sp, #4]
   10242:	9a00      	ldr	r2, [sp, #0]
   10244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
   10248:	4a06      	ldr	r2, [pc, #24]	; (10264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   1024a:	9b01      	ldr	r3, [sp, #4]
   1024c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10250:	1c5a      	adds	r2, r3, #1
   10252:	4904      	ldr	r1, [pc, #16]	; (10264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   10254:	9b01      	ldr	r3, [sp, #4]
   10256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1025a:	bf00      	nop
   1025c:	b003      	add	sp, #12
   1025e:	f85d fb04 	ldr.w	pc, [sp], #4
   10262:	bf00      	nop
   10264:	1fff93b0 	.word	0x1fff93b0
   10268:	1fff93ac 	.word	0x1fff93ac

0001026c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   1026c:	b500      	push	{lr}
   1026e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10270:	f7f0 fcbc 	bl	bec <Sys_GetCoreID>
   10274:	4603      	mov	r3, r0
   10276:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
   10278:	4a0d      	ldr	r2, [pc, #52]	; (102b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   1027a:	9b01      	ldr	r3, [sp, #4]
   1027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10280:	1e5a      	subs	r2, r3, #1
   10282:	490b      	ldr	r1, [pc, #44]	; (102b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   10284:	9b01      	ldr	r3, [sp, #4]
   10286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
   1028a:	4a0a      	ldr	r2, [pc, #40]	; (102b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
   1028c:	9b01      	ldr	r3, [sp, #4]
   1028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10292:	f003 0301 	and.w	r3, r3, #1
   10296:	2b00      	cmp	r3, #0
   10298:	d106      	bne.n	102a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
   1029a:	4a05      	ldr	r2, [pc, #20]	; (102b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   1029c:	9b01      	ldr	r3, [sp, #4]
   1029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102a2:	2b00      	cmp	r3, #0
   102a4:	d100      	bne.n	102a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   102a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   102a8:	bf00      	nop
   102aa:	b003      	add	sp, #12
   102ac:	f85d fb04 	ldr.w	pc, [sp], #4
   102b0:	1fff93b0 	.word	0x1fff93b0
   102b4:	1fff93ac 	.word	0x1fff93ac

000102b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   102b8:	b500      	push	{lr}
   102ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102bc:	f7f0 fc96 	bl	bec <Sys_GetCoreID>
   102c0:	4603      	mov	r3, r0
   102c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
   102c4:	4a10      	ldr	r2, [pc, #64]	; (10308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   102c6:	9b01      	ldr	r3, [sp, #4]
   102c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102cc:	2b00      	cmp	r3, #0
   102ce:	d10d      	bne.n	102ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   102d0:	f7f0 fb52 	bl	978 <Adc_schm_read_msr>
   102d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   102d6:	9b00      	ldr	r3, [sp, #0]
   102d8:	f003 0301 	and.w	r3, r3, #1
   102dc:	2b00      	cmp	r3, #0
   102de:	d100      	bne.n	102e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   102e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
   102e2:	490a      	ldr	r1, [pc, #40]	; (1030c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
   102e4:	9b01      	ldr	r3, [sp, #4]
   102e6:	9a00      	ldr	r2, [sp, #0]
   102e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
   102ec:	4a06      	ldr	r2, [pc, #24]	; (10308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   102ee:	9b01      	ldr	r3, [sp, #4]
   102f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102f4:	1c5a      	adds	r2, r3, #1
   102f6:	4904      	ldr	r1, [pc, #16]	; (10308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   102f8:	9b01      	ldr	r3, [sp, #4]
   102fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   102fe:	bf00      	nop
   10300:	b003      	add	sp, #12
   10302:	f85d fb04 	ldr.w	pc, [sp], #4
   10306:	bf00      	nop
   10308:	1fff93b8 	.word	0x1fff93b8
   1030c:	1fff93b4 	.word	0x1fff93b4

00010310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   10310:	b500      	push	{lr}
   10312:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10314:	f7f0 fc6a 	bl	bec <Sys_GetCoreID>
   10318:	4603      	mov	r3, r0
   1031a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
   1031c:	4a0d      	ldr	r2, [pc, #52]	; (10354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   1031e:	9b01      	ldr	r3, [sp, #4]
   10320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10324:	1e5a      	subs	r2, r3, #1
   10326:	490b      	ldr	r1, [pc, #44]	; (10354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   10328:	9b01      	ldr	r3, [sp, #4]
   1032a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
   1032e:	4a0a      	ldr	r2, [pc, #40]	; (10358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
   10330:	9b01      	ldr	r3, [sp, #4]
   10332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10336:	f003 0301 	and.w	r3, r3, #1
   1033a:	2b00      	cmp	r3, #0
   1033c:	d106      	bne.n	1034c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
   1033e:	4a05      	ldr	r2, [pc, #20]	; (10354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   10340:	9b01      	ldr	r3, [sp, #4]
   10342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10346:	2b00      	cmp	r3, #0
   10348:	d100      	bne.n	1034c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1034a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1034c:	bf00      	nop
   1034e:	b003      	add	sp, #12
   10350:	f85d fb04 	ldr.w	pc, [sp], #4
   10354:	1fff93b8 	.word	0x1fff93b8
   10358:	1fff93b4 	.word	0x1fff93b4

0001035c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   1035c:	b500      	push	{lr}
   1035e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10360:	f7f0 fc44 	bl	bec <Sys_GetCoreID>
   10364:	4603      	mov	r3, r0
   10366:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
   10368:	4a10      	ldr	r2, [pc, #64]	; (103ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   1036a:	9b01      	ldr	r3, [sp, #4]
   1036c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10370:	2b00      	cmp	r3, #0
   10372:	d10d      	bne.n	10390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10374:	f7f0 fb00 	bl	978 <Adc_schm_read_msr>
   10378:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1037a:	9b00      	ldr	r3, [sp, #0]
   1037c:	f003 0301 	and.w	r3, r3, #1
   10380:	2b00      	cmp	r3, #0
   10382:	d100      	bne.n	10386 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10384:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
   10386:	490a      	ldr	r1, [pc, #40]	; (103b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
   10388:	9b01      	ldr	r3, [sp, #4]
   1038a:	9a00      	ldr	r2, [sp, #0]
   1038c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
   10390:	4a06      	ldr	r2, [pc, #24]	; (103ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   10392:	9b01      	ldr	r3, [sp, #4]
   10394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10398:	1c5a      	adds	r2, r3, #1
   1039a:	4904      	ldr	r1, [pc, #16]	; (103ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   1039c:	9b01      	ldr	r3, [sp, #4]
   1039e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   103a2:	bf00      	nop
   103a4:	b003      	add	sp, #12
   103a6:	f85d fb04 	ldr.w	pc, [sp], #4
   103aa:	bf00      	nop
   103ac:	1fff93c0 	.word	0x1fff93c0
   103b0:	1fff93bc 	.word	0x1fff93bc

000103b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   103b4:	b500      	push	{lr}
   103b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103b8:	f7f0 fc18 	bl	bec <Sys_GetCoreID>
   103bc:	4603      	mov	r3, r0
   103be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
   103c0:	4a0d      	ldr	r2, [pc, #52]	; (103f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   103c2:	9b01      	ldr	r3, [sp, #4]
   103c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103c8:	1e5a      	subs	r2, r3, #1
   103ca:	490b      	ldr	r1, [pc, #44]	; (103f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   103cc:	9b01      	ldr	r3, [sp, #4]
   103ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
   103d2:	4a0a      	ldr	r2, [pc, #40]	; (103fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
   103d4:	9b01      	ldr	r3, [sp, #4]
   103d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103da:	f003 0301 	and.w	r3, r3, #1
   103de:	2b00      	cmp	r3, #0
   103e0:	d106      	bne.n	103f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
   103e2:	4a05      	ldr	r2, [pc, #20]	; (103f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   103e4:	9b01      	ldr	r3, [sp, #4]
   103e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103ea:	2b00      	cmp	r3, #0
   103ec:	d100      	bne.n	103f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   103ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   103f0:	bf00      	nop
   103f2:	b003      	add	sp, #12
   103f4:	f85d fb04 	ldr.w	pc, [sp], #4
   103f8:	1fff93c0 	.word	0x1fff93c0
   103fc:	1fff93bc 	.word	0x1fff93bc

00010400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   10400:	b500      	push	{lr}
   10402:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10404:	f7f0 fbf2 	bl	bec <Sys_GetCoreID>
   10408:	4603      	mov	r3, r0
   1040a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
   1040c:	4a10      	ldr	r2, [pc, #64]	; (10450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   1040e:	9b01      	ldr	r3, [sp, #4]
   10410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10414:	2b00      	cmp	r3, #0
   10416:	d10d      	bne.n	10434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10418:	f7f0 faae 	bl	978 <Adc_schm_read_msr>
   1041c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1041e:	9b00      	ldr	r3, [sp, #0]
   10420:	f003 0301 	and.w	r3, r3, #1
   10424:	2b00      	cmp	r3, #0
   10426:	d100      	bne.n	1042a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10428:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
   1042a:	490a      	ldr	r1, [pc, #40]	; (10454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
   1042c:	9b01      	ldr	r3, [sp, #4]
   1042e:	9a00      	ldr	r2, [sp, #0]
   10430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
   10434:	4a06      	ldr	r2, [pc, #24]	; (10450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   10436:	9b01      	ldr	r3, [sp, #4]
   10438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1043c:	1c5a      	adds	r2, r3, #1
   1043e:	4904      	ldr	r1, [pc, #16]	; (10450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   10440:	9b01      	ldr	r3, [sp, #4]
   10442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10446:	bf00      	nop
   10448:	b003      	add	sp, #12
   1044a:	f85d fb04 	ldr.w	pc, [sp], #4
   1044e:	bf00      	nop
   10450:	1fff93c8 	.word	0x1fff93c8
   10454:	1fff93c4 	.word	0x1fff93c4

00010458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   10458:	b500      	push	{lr}
   1045a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1045c:	f7f0 fbc6 	bl	bec <Sys_GetCoreID>
   10460:	4603      	mov	r3, r0
   10462:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
   10464:	4a0d      	ldr	r2, [pc, #52]	; (1049c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   10466:	9b01      	ldr	r3, [sp, #4]
   10468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1046c:	1e5a      	subs	r2, r3, #1
   1046e:	490b      	ldr	r1, [pc, #44]	; (1049c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   10470:	9b01      	ldr	r3, [sp, #4]
   10472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
   10476:	4a0a      	ldr	r2, [pc, #40]	; (104a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
   10478:	9b01      	ldr	r3, [sp, #4]
   1047a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1047e:	f003 0301 	and.w	r3, r3, #1
   10482:	2b00      	cmp	r3, #0
   10484:	d106      	bne.n	10494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
   10486:	4a05      	ldr	r2, [pc, #20]	; (1049c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   10488:	9b01      	ldr	r3, [sp, #4]
   1048a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1048e:	2b00      	cmp	r3, #0
   10490:	d100      	bne.n	10494 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10492:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10494:	bf00      	nop
   10496:	b003      	add	sp, #12
   10498:	f85d fb04 	ldr.w	pc, [sp], #4
   1049c:	1fff93c8 	.word	0x1fff93c8
   104a0:	1fff93c4 	.word	0x1fff93c4

000104a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   104a4:	b500      	push	{lr}
   104a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104a8:	f7f0 fba0 	bl	bec <Sys_GetCoreID>
   104ac:	4603      	mov	r3, r0
   104ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
   104b0:	4a10      	ldr	r2, [pc, #64]	; (104f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   104b2:	9b01      	ldr	r3, [sp, #4]
   104b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104b8:	2b00      	cmp	r3, #0
   104ba:	d10d      	bne.n	104d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   104bc:	f7f0 fa5c 	bl	978 <Adc_schm_read_msr>
   104c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   104c2:	9b00      	ldr	r3, [sp, #0]
   104c4:	f003 0301 	and.w	r3, r3, #1
   104c8:	2b00      	cmp	r3, #0
   104ca:	d100      	bne.n	104ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   104cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   104ce:	490a      	ldr	r1, [pc, #40]	; (104f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
   104d0:	9b01      	ldr	r3, [sp, #4]
   104d2:	9a00      	ldr	r2, [sp, #0]
   104d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
   104d8:	4a06      	ldr	r2, [pc, #24]	; (104f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   104da:	9b01      	ldr	r3, [sp, #4]
   104dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104e0:	1c5a      	adds	r2, r3, #1
   104e2:	4904      	ldr	r1, [pc, #16]	; (104f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   104e4:	9b01      	ldr	r3, [sp, #4]
   104e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   104ea:	bf00      	nop
   104ec:	b003      	add	sp, #12
   104ee:	f85d fb04 	ldr.w	pc, [sp], #4
   104f2:	bf00      	nop
   104f4:	1fff93d0 	.word	0x1fff93d0
   104f8:	1fff93cc 	.word	0x1fff93cc

000104fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   104fc:	b500      	push	{lr}
   104fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10500:	f7f0 fb74 	bl	bec <Sys_GetCoreID>
   10504:	4603      	mov	r3, r0
   10506:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
   10508:	4a0d      	ldr	r2, [pc, #52]	; (10540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   1050a:	9b01      	ldr	r3, [sp, #4]
   1050c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10510:	1e5a      	subs	r2, r3, #1
   10512:	490b      	ldr	r1, [pc, #44]	; (10540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   10514:	9b01      	ldr	r3, [sp, #4]
   10516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   1051a:	4a0a      	ldr	r2, [pc, #40]	; (10544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
   1051c:	9b01      	ldr	r3, [sp, #4]
   1051e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10522:	f003 0301 	and.w	r3, r3, #1
   10526:	2b00      	cmp	r3, #0
   10528:	d106      	bne.n	10538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
   1052a:	4a05      	ldr	r2, [pc, #20]	; (10540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   1052c:	9b01      	ldr	r3, [sp, #4]
   1052e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10532:	2b00      	cmp	r3, #0
   10534:	d100      	bne.n	10538 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10536:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10538:	bf00      	nop
   1053a:	b003      	add	sp, #12
   1053c:	f85d fb04 	ldr.w	pc, [sp], #4
   10540:	1fff93d0 	.word	0x1fff93d0
   10544:	1fff93cc 	.word	0x1fff93cc

00010548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   10548:	b500      	push	{lr}
   1054a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1054c:	f7f0 fb4e 	bl	bec <Sys_GetCoreID>
   10550:	4603      	mov	r3, r0
   10552:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
   10554:	4a10      	ldr	r2, [pc, #64]	; (10598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   10556:	9b01      	ldr	r3, [sp, #4]
   10558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1055c:	2b00      	cmp	r3, #0
   1055e:	d10d      	bne.n	1057c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10560:	f7f0 fa0a 	bl	978 <Adc_schm_read_msr>
   10564:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10566:	9b00      	ldr	r3, [sp, #0]
   10568:	f003 0301 	and.w	r3, r3, #1
   1056c:	2b00      	cmp	r3, #0
   1056e:	d100      	bne.n	10572 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10570:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   10572:	490a      	ldr	r1, [pc, #40]	; (1059c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
   10574:	9b01      	ldr	r3, [sp, #4]
   10576:	9a00      	ldr	r2, [sp, #0]
   10578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
   1057c:	4a06      	ldr	r2, [pc, #24]	; (10598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   1057e:	9b01      	ldr	r3, [sp, #4]
   10580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10584:	1c5a      	adds	r2, r3, #1
   10586:	4904      	ldr	r1, [pc, #16]	; (10598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   10588:	9b01      	ldr	r3, [sp, #4]
   1058a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1058e:	bf00      	nop
   10590:	b003      	add	sp, #12
   10592:	f85d fb04 	ldr.w	pc, [sp], #4
   10596:	bf00      	nop
   10598:	1fff93d8 	.word	0x1fff93d8
   1059c:	1fff93d4 	.word	0x1fff93d4

000105a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   105a0:	b500      	push	{lr}
   105a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105a4:	f7f0 fb22 	bl	bec <Sys_GetCoreID>
   105a8:	4603      	mov	r3, r0
   105aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
   105ac:	4a0d      	ldr	r2, [pc, #52]	; (105e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   105ae:	9b01      	ldr	r3, [sp, #4]
   105b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105b4:	1e5a      	subs	r2, r3, #1
   105b6:	490b      	ldr	r1, [pc, #44]	; (105e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   105b8:	9b01      	ldr	r3, [sp, #4]
   105ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   105be:	4a0a      	ldr	r2, [pc, #40]	; (105e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
   105c0:	9b01      	ldr	r3, [sp, #4]
   105c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105c6:	f003 0301 	and.w	r3, r3, #1
   105ca:	2b00      	cmp	r3, #0
   105cc:	d106      	bne.n	105dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
   105ce:	4a05      	ldr	r2, [pc, #20]	; (105e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   105d0:	9b01      	ldr	r3, [sp, #4]
   105d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105d6:	2b00      	cmp	r3, #0
   105d8:	d100      	bne.n	105dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   105da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   105dc:	bf00      	nop
   105de:	b003      	add	sp, #12
   105e0:	f85d fb04 	ldr.w	pc, [sp], #4
   105e4:	1fff93d8 	.word	0x1fff93d8
   105e8:	1fff93d4 	.word	0x1fff93d4

000105ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   105ec:	b500      	push	{lr}
   105ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105f0:	f7f0 fafc 	bl	bec <Sys_GetCoreID>
   105f4:	4603      	mov	r3, r0
   105f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
   105f8:	4a10      	ldr	r2, [pc, #64]	; (1063c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   105fa:	9b01      	ldr	r3, [sp, #4]
   105fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10600:	2b00      	cmp	r3, #0
   10602:	d10d      	bne.n	10620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10604:	f7f0 f9b8 	bl	978 <Adc_schm_read_msr>
   10608:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1060a:	9b00      	ldr	r3, [sp, #0]
   1060c:	f003 0301 	and.w	r3, r3, #1
   10610:	2b00      	cmp	r3, #0
   10612:	d100      	bne.n	10616 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10614:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   10616:	490a      	ldr	r1, [pc, #40]	; (10640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
   10618:	9b01      	ldr	r3, [sp, #4]
   1061a:	9a00      	ldr	r2, [sp, #0]
   1061c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
   10620:	4a06      	ldr	r2, [pc, #24]	; (1063c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   10622:	9b01      	ldr	r3, [sp, #4]
   10624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10628:	1c5a      	adds	r2, r3, #1
   1062a:	4904      	ldr	r1, [pc, #16]	; (1063c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   1062c:	9b01      	ldr	r3, [sp, #4]
   1062e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10632:	bf00      	nop
   10634:	b003      	add	sp, #12
   10636:	f85d fb04 	ldr.w	pc, [sp], #4
   1063a:	bf00      	nop
   1063c:	1fff93e0 	.word	0x1fff93e0
   10640:	1fff93dc 	.word	0x1fff93dc

00010644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   10644:	b500      	push	{lr}
   10646:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10648:	f7f0 fad0 	bl	bec <Sys_GetCoreID>
   1064c:	4603      	mov	r3, r0
   1064e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
   10650:	4a0d      	ldr	r2, [pc, #52]	; (10688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   10652:	9b01      	ldr	r3, [sp, #4]
   10654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10658:	1e5a      	subs	r2, r3, #1
   1065a:	490b      	ldr	r1, [pc, #44]	; (10688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   1065c:	9b01      	ldr	r3, [sp, #4]
   1065e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   10662:	4a0a      	ldr	r2, [pc, #40]	; (1068c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
   10664:	9b01      	ldr	r3, [sp, #4]
   10666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1066a:	f003 0301 	and.w	r3, r3, #1
   1066e:	2b00      	cmp	r3, #0
   10670:	d106      	bne.n	10680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
   10672:	4a05      	ldr	r2, [pc, #20]	; (10688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   10674:	9b01      	ldr	r3, [sp, #4]
   10676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1067a:	2b00      	cmp	r3, #0
   1067c:	d100      	bne.n	10680 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1067e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10680:	bf00      	nop
   10682:	b003      	add	sp, #12
   10684:	f85d fb04 	ldr.w	pc, [sp], #4
   10688:	1fff93e0 	.word	0x1fff93e0
   1068c:	1fff93dc 	.word	0x1fff93dc

00010690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   10690:	b500      	push	{lr}
   10692:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10694:	f7f0 faaa 	bl	bec <Sys_GetCoreID>
   10698:	4603      	mov	r3, r0
   1069a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
   1069c:	4a10      	ldr	r2, [pc, #64]	; (106e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   1069e:	9b01      	ldr	r3, [sp, #4]
   106a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106a4:	2b00      	cmp	r3, #0
   106a6:	d10d      	bne.n	106c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   106a8:	f7f0 f966 	bl	978 <Adc_schm_read_msr>
   106ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   106ae:	9b00      	ldr	r3, [sp, #0]
   106b0:	f003 0301 	and.w	r3, r3, #1
   106b4:	2b00      	cmp	r3, #0
   106b6:	d100      	bne.n	106ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   106b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   106ba:	490a      	ldr	r1, [pc, #40]	; (106e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
   106bc:	9b01      	ldr	r3, [sp, #4]
   106be:	9a00      	ldr	r2, [sp, #0]
   106c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
   106c4:	4a06      	ldr	r2, [pc, #24]	; (106e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   106c6:	9b01      	ldr	r3, [sp, #4]
   106c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106cc:	1c5a      	adds	r2, r3, #1
   106ce:	4904      	ldr	r1, [pc, #16]	; (106e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   106d0:	9b01      	ldr	r3, [sp, #4]
   106d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   106d6:	bf00      	nop
   106d8:	b003      	add	sp, #12
   106da:	f85d fb04 	ldr.w	pc, [sp], #4
   106de:	bf00      	nop
   106e0:	1fff93e8 	.word	0x1fff93e8
   106e4:	1fff93e4 	.word	0x1fff93e4

000106e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   106e8:	b500      	push	{lr}
   106ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106ec:	f7f0 fa7e 	bl	bec <Sys_GetCoreID>
   106f0:	4603      	mov	r3, r0
   106f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
   106f4:	4a0d      	ldr	r2, [pc, #52]	; (1072c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   106f6:	9b01      	ldr	r3, [sp, #4]
   106f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106fc:	1e5a      	subs	r2, r3, #1
   106fe:	490b      	ldr	r1, [pc, #44]	; (1072c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   10700:	9b01      	ldr	r3, [sp, #4]
   10702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   10706:	4a0a      	ldr	r2, [pc, #40]	; (10730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
   10708:	9b01      	ldr	r3, [sp, #4]
   1070a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1070e:	f003 0301 	and.w	r3, r3, #1
   10712:	2b00      	cmp	r3, #0
   10714:	d106      	bne.n	10724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
   10716:	4a05      	ldr	r2, [pc, #20]	; (1072c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   10718:	9b01      	ldr	r3, [sp, #4]
   1071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1071e:	2b00      	cmp	r3, #0
   10720:	d100      	bne.n	10724 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10722:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10724:	bf00      	nop
   10726:	b003      	add	sp, #12
   10728:	f85d fb04 	ldr.w	pc, [sp], #4
   1072c:	1fff93e8 	.word	0x1fff93e8
   10730:	1fff93e4 	.word	0x1fff93e4

00010734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   10734:	b500      	push	{lr}
   10736:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10738:	f7f0 fa58 	bl	bec <Sys_GetCoreID>
   1073c:	4603      	mov	r3, r0
   1073e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
   10740:	4a10      	ldr	r2, [pc, #64]	; (10784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   10742:	9b01      	ldr	r3, [sp, #4]
   10744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10748:	2b00      	cmp	r3, #0
   1074a:	d10d      	bne.n	10768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1074c:	f7f0 f914 	bl	978 <Adc_schm_read_msr>
   10750:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10752:	9b00      	ldr	r3, [sp, #0]
   10754:	f003 0301 	and.w	r3, r3, #1
   10758:	2b00      	cmp	r3, #0
   1075a:	d100      	bne.n	1075e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1075c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   1075e:	490a      	ldr	r1, [pc, #40]	; (10788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
   10760:	9b01      	ldr	r3, [sp, #4]
   10762:	9a00      	ldr	r2, [sp, #0]
   10764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
   10768:	4a06      	ldr	r2, [pc, #24]	; (10784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   1076a:	9b01      	ldr	r3, [sp, #4]
   1076c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10770:	1c5a      	adds	r2, r3, #1
   10772:	4904      	ldr	r1, [pc, #16]	; (10784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   10774:	9b01      	ldr	r3, [sp, #4]
   10776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1077a:	bf00      	nop
   1077c:	b003      	add	sp, #12
   1077e:	f85d fb04 	ldr.w	pc, [sp], #4
   10782:	bf00      	nop
   10784:	1fff93f0 	.word	0x1fff93f0
   10788:	1fff93ec 	.word	0x1fff93ec

0001078c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   1078c:	b500      	push	{lr}
   1078e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10790:	f7f0 fa2c 	bl	bec <Sys_GetCoreID>
   10794:	4603      	mov	r3, r0
   10796:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
   10798:	4a0d      	ldr	r2, [pc, #52]	; (107d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   1079a:	9b01      	ldr	r3, [sp, #4]
   1079c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107a0:	1e5a      	subs	r2, r3, #1
   107a2:	490b      	ldr	r1, [pc, #44]	; (107d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   107a4:	9b01      	ldr	r3, [sp, #4]
   107a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   107aa:	4a0a      	ldr	r2, [pc, #40]	; (107d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
   107ac:	9b01      	ldr	r3, [sp, #4]
   107ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107b2:	f003 0301 	and.w	r3, r3, #1
   107b6:	2b00      	cmp	r3, #0
   107b8:	d106      	bne.n	107c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
   107ba:	4a05      	ldr	r2, [pc, #20]	; (107d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   107bc:	9b01      	ldr	r3, [sp, #4]
   107be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107c2:	2b00      	cmp	r3, #0
   107c4:	d100      	bne.n	107c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   107c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   107c8:	bf00      	nop
   107ca:	b003      	add	sp, #12
   107cc:	f85d fb04 	ldr.w	pc, [sp], #4
   107d0:	1fff93f0 	.word	0x1fff93f0
   107d4:	1fff93ec 	.word	0x1fff93ec

000107d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   107d8:	b500      	push	{lr}
   107da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107dc:	f7f0 fa06 	bl	bec <Sys_GetCoreID>
   107e0:	4603      	mov	r3, r0
   107e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
   107e4:	4a10      	ldr	r2, [pc, #64]	; (10828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   107e6:	9b01      	ldr	r3, [sp, #4]
   107e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107ec:	2b00      	cmp	r3, #0
   107ee:	d10d      	bne.n	1080c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   107f0:	f7f0 f8c2 	bl	978 <Adc_schm_read_msr>
   107f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   107f6:	9b00      	ldr	r3, [sp, #0]
   107f8:	f003 0301 	and.w	r3, r3, #1
   107fc:	2b00      	cmp	r3, #0
   107fe:	d100      	bne.n	10802 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10800:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   10802:	490a      	ldr	r1, [pc, #40]	; (1082c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
   10804:	9b01      	ldr	r3, [sp, #4]
   10806:	9a00      	ldr	r2, [sp, #0]
   10808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
   1080c:	4a06      	ldr	r2, [pc, #24]	; (10828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   1080e:	9b01      	ldr	r3, [sp, #4]
   10810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10814:	1c5a      	adds	r2, r3, #1
   10816:	4904      	ldr	r1, [pc, #16]	; (10828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   10818:	9b01      	ldr	r3, [sp, #4]
   1081a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1081e:	bf00      	nop
   10820:	b003      	add	sp, #12
   10822:	f85d fb04 	ldr.w	pc, [sp], #4
   10826:	bf00      	nop
   10828:	1fff93f8 	.word	0x1fff93f8
   1082c:	1fff93f4 	.word	0x1fff93f4

00010830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   10830:	b500      	push	{lr}
   10832:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10834:	f7f0 f9da 	bl	bec <Sys_GetCoreID>
   10838:	4603      	mov	r3, r0
   1083a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
   1083c:	4a0d      	ldr	r2, [pc, #52]	; (10874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   1083e:	9b01      	ldr	r3, [sp, #4]
   10840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10844:	1e5a      	subs	r2, r3, #1
   10846:	490b      	ldr	r1, [pc, #44]	; (10874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   10848:	9b01      	ldr	r3, [sp, #4]
   1084a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   1084e:	4a0a      	ldr	r2, [pc, #40]	; (10878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
   10850:	9b01      	ldr	r3, [sp, #4]
   10852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10856:	f003 0301 	and.w	r3, r3, #1
   1085a:	2b00      	cmp	r3, #0
   1085c:	d106      	bne.n	1086c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
   1085e:	4a05      	ldr	r2, [pc, #20]	; (10874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   10860:	9b01      	ldr	r3, [sp, #4]
   10862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10866:	2b00      	cmp	r3, #0
   10868:	d100      	bne.n	1086c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1086a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1086c:	bf00      	nop
   1086e:	b003      	add	sp, #12
   10870:	f85d fb04 	ldr.w	pc, [sp], #4
   10874:	1fff93f8 	.word	0x1fff93f8
   10878:	1fff93f4 	.word	0x1fff93f4

0001087c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   1087c:	b500      	push	{lr}
   1087e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10880:	f7f0 f9b4 	bl	bec <Sys_GetCoreID>
   10884:	4603      	mov	r3, r0
   10886:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
   10888:	4a10      	ldr	r2, [pc, #64]	; (108cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   1088a:	9b01      	ldr	r3, [sp, #4]
   1088c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10890:	2b00      	cmp	r3, #0
   10892:	d10d      	bne.n	108b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10894:	f7f0 f870 	bl	978 <Adc_schm_read_msr>
   10898:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1089a:	9b00      	ldr	r3, [sp, #0]
   1089c:	f003 0301 	and.w	r3, r3, #1
   108a0:	2b00      	cmp	r3, #0
   108a2:	d100      	bne.n	108a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   108a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   108a6:	490a      	ldr	r1, [pc, #40]	; (108d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
   108a8:	9b01      	ldr	r3, [sp, #4]
   108aa:	9a00      	ldr	r2, [sp, #0]
   108ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
   108b0:	4a06      	ldr	r2, [pc, #24]	; (108cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   108b2:	9b01      	ldr	r3, [sp, #4]
   108b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108b8:	1c5a      	adds	r2, r3, #1
   108ba:	4904      	ldr	r1, [pc, #16]	; (108cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   108bc:	9b01      	ldr	r3, [sp, #4]
   108be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   108c2:	bf00      	nop
   108c4:	b003      	add	sp, #12
   108c6:	f85d fb04 	ldr.w	pc, [sp], #4
   108ca:	bf00      	nop
   108cc:	1fff9400 	.word	0x1fff9400
   108d0:	1fff93fc 	.word	0x1fff93fc

000108d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   108d4:	b500      	push	{lr}
   108d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108d8:	f7f0 f988 	bl	bec <Sys_GetCoreID>
   108dc:	4603      	mov	r3, r0
   108de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
   108e0:	4a0d      	ldr	r2, [pc, #52]	; (10918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   108e2:	9b01      	ldr	r3, [sp, #4]
   108e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108e8:	1e5a      	subs	r2, r3, #1
   108ea:	490b      	ldr	r1, [pc, #44]	; (10918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   108ec:	9b01      	ldr	r3, [sp, #4]
   108ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   108f2:	4a0a      	ldr	r2, [pc, #40]	; (1091c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
   108f4:	9b01      	ldr	r3, [sp, #4]
   108f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108fa:	f003 0301 	and.w	r3, r3, #1
   108fe:	2b00      	cmp	r3, #0
   10900:	d106      	bne.n	10910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
   10902:	4a05      	ldr	r2, [pc, #20]	; (10918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   10904:	9b01      	ldr	r3, [sp, #4]
   10906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1090a:	2b00      	cmp	r3, #0
   1090c:	d100      	bne.n	10910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1090e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10910:	bf00      	nop
   10912:	b003      	add	sp, #12
   10914:	f85d fb04 	ldr.w	pc, [sp], #4
   10918:	1fff9400 	.word	0x1fff9400
   1091c:	1fff93fc 	.word	0x1fff93fc

00010920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   10920:	b500      	push	{lr}
   10922:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10924:	f7f0 f962 	bl	bec <Sys_GetCoreID>
   10928:	4603      	mov	r3, r0
   1092a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
   1092c:	4a10      	ldr	r2, [pc, #64]	; (10970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   1092e:	9b01      	ldr	r3, [sp, #4]
   10930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10934:	2b00      	cmp	r3, #0
   10936:	d10d      	bne.n	10954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10938:	f7f0 f81e 	bl	978 <Adc_schm_read_msr>
   1093c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1093e:	9b00      	ldr	r3, [sp, #0]
   10940:	f003 0301 	and.w	r3, r3, #1
   10944:	2b00      	cmp	r3, #0
   10946:	d100      	bne.n	1094a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10948:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   1094a:	490a      	ldr	r1, [pc, #40]	; (10974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
   1094c:	9b01      	ldr	r3, [sp, #4]
   1094e:	9a00      	ldr	r2, [sp, #0]
   10950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
   10954:	4a06      	ldr	r2, [pc, #24]	; (10970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   10956:	9b01      	ldr	r3, [sp, #4]
   10958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1095c:	1c5a      	adds	r2, r3, #1
   1095e:	4904      	ldr	r1, [pc, #16]	; (10970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   10960:	9b01      	ldr	r3, [sp, #4]
   10962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10966:	bf00      	nop
   10968:	b003      	add	sp, #12
   1096a:	f85d fb04 	ldr.w	pc, [sp], #4
   1096e:	bf00      	nop
   10970:	1fff9408 	.word	0x1fff9408
   10974:	1fff9404 	.word	0x1fff9404

00010978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   10978:	b500      	push	{lr}
   1097a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1097c:	f7f0 f936 	bl	bec <Sys_GetCoreID>
   10980:	4603      	mov	r3, r0
   10982:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
   10984:	4a0d      	ldr	r2, [pc, #52]	; (109bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   10986:	9b01      	ldr	r3, [sp, #4]
   10988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1098c:	1e5a      	subs	r2, r3, #1
   1098e:	490b      	ldr	r1, [pc, #44]	; (109bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   10990:	9b01      	ldr	r3, [sp, #4]
   10992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   10996:	4a0a      	ldr	r2, [pc, #40]	; (109c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
   10998:	9b01      	ldr	r3, [sp, #4]
   1099a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1099e:	f003 0301 	and.w	r3, r3, #1
   109a2:	2b00      	cmp	r3, #0
   109a4:	d106      	bne.n	109b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
   109a6:	4a05      	ldr	r2, [pc, #20]	; (109bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   109a8:	9b01      	ldr	r3, [sp, #4]
   109aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109ae:	2b00      	cmp	r3, #0
   109b0:	d100      	bne.n	109b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   109b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   109b4:	bf00      	nop
   109b6:	b003      	add	sp, #12
   109b8:	f85d fb04 	ldr.w	pc, [sp], #4
   109bc:	1fff9408 	.word	0x1fff9408
   109c0:	1fff9404 	.word	0x1fff9404

000109c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   109c4:	b500      	push	{lr}
   109c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109c8:	f7f0 f910 	bl	bec <Sys_GetCoreID>
   109cc:	4603      	mov	r3, r0
   109ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
   109d0:	4a10      	ldr	r2, [pc, #64]	; (10a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   109d2:	9b01      	ldr	r3, [sp, #4]
   109d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109d8:	2b00      	cmp	r3, #0
   109da:	d10d      	bne.n	109f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   109dc:	f7ef ffcc 	bl	978 <Adc_schm_read_msr>
   109e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   109e2:	9b00      	ldr	r3, [sp, #0]
   109e4:	f003 0301 	and.w	r3, r3, #1
   109e8:	2b00      	cmp	r3, #0
   109ea:	d100      	bne.n	109ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   109ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   109ee:	490a      	ldr	r1, [pc, #40]	; (10a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
   109f0:	9b01      	ldr	r3, [sp, #4]
   109f2:	9a00      	ldr	r2, [sp, #0]
   109f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
   109f8:	4a06      	ldr	r2, [pc, #24]	; (10a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   109fa:	9b01      	ldr	r3, [sp, #4]
   109fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a00:	1c5a      	adds	r2, r3, #1
   10a02:	4904      	ldr	r1, [pc, #16]	; (10a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10a04:	9b01      	ldr	r3, [sp, #4]
   10a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a0a:	bf00      	nop
   10a0c:	b003      	add	sp, #12
   10a0e:	f85d fb04 	ldr.w	pc, [sp], #4
   10a12:	bf00      	nop
   10a14:	1fff9410 	.word	0x1fff9410
   10a18:	1fff940c 	.word	0x1fff940c

00010a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   10a1c:	b500      	push	{lr}
   10a1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a20:	f7f0 f8e4 	bl	bec <Sys_GetCoreID>
   10a24:	4603      	mov	r3, r0
   10a26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
   10a28:	4a0d      	ldr	r2, [pc, #52]	; (10a60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10a2a:	9b01      	ldr	r3, [sp, #4]
   10a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a30:	1e5a      	subs	r2, r3, #1
   10a32:	490b      	ldr	r1, [pc, #44]	; (10a60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10a34:	9b01      	ldr	r3, [sp, #4]
   10a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   10a3a:	4a0a      	ldr	r2, [pc, #40]	; (10a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
   10a3c:	9b01      	ldr	r3, [sp, #4]
   10a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a42:	f003 0301 	and.w	r3, r3, #1
   10a46:	2b00      	cmp	r3, #0
   10a48:	d106      	bne.n	10a58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
   10a4a:	4a05      	ldr	r2, [pc, #20]	; (10a60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10a4c:	9b01      	ldr	r3, [sp, #4]
   10a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a52:	2b00      	cmp	r3, #0
   10a54:	d100      	bne.n	10a58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10a58:	bf00      	nop
   10a5a:	b003      	add	sp, #12
   10a5c:	f85d fb04 	ldr.w	pc, [sp], #4
   10a60:	1fff9410 	.word	0x1fff9410
   10a64:	1fff940c 	.word	0x1fff940c

00010a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10a68:	b500      	push	{lr}
   10a6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a6c:	f7f0 f8be 	bl	bec <Sys_GetCoreID>
   10a70:	4603      	mov	r3, r0
   10a72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
   10a74:	4a10      	ldr	r2, [pc, #64]	; (10ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10a76:	9b01      	ldr	r3, [sp, #4]
   10a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a7c:	2b00      	cmp	r3, #0
   10a7e:	d10d      	bne.n	10a9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a80:	f7ef ff7a 	bl	978 <Adc_schm_read_msr>
   10a84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a86:	9b00      	ldr	r3, [sp, #0]
   10a88:	f003 0301 	and.w	r3, r3, #1
   10a8c:	2b00      	cmp	r3, #0
   10a8e:	d100      	bne.n	10a92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   10a92:	490a      	ldr	r1, [pc, #40]	; (10abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
   10a94:	9b01      	ldr	r3, [sp, #4]
   10a96:	9a00      	ldr	r2, [sp, #0]
   10a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
   10a9c:	4a06      	ldr	r2, [pc, #24]	; (10ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10a9e:	9b01      	ldr	r3, [sp, #4]
   10aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aa4:	1c5a      	adds	r2, r3, #1
   10aa6:	4904      	ldr	r1, [pc, #16]	; (10ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10aa8:	9b01      	ldr	r3, [sp, #4]
   10aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10aae:	bf00      	nop
   10ab0:	b003      	add	sp, #12
   10ab2:	f85d fb04 	ldr.w	pc, [sp], #4
   10ab6:	bf00      	nop
   10ab8:	1fff9418 	.word	0x1fff9418
   10abc:	1fff9414 	.word	0x1fff9414

00010ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10ac0:	b500      	push	{lr}
   10ac2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ac4:	f7f0 f892 	bl	bec <Sys_GetCoreID>
   10ac8:	4603      	mov	r3, r0
   10aca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
   10acc:	4a0d      	ldr	r2, [pc, #52]	; (10b04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10ace:	9b01      	ldr	r3, [sp, #4]
   10ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ad4:	1e5a      	subs	r2, r3, #1
   10ad6:	490b      	ldr	r1, [pc, #44]	; (10b04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10ad8:	9b01      	ldr	r3, [sp, #4]
   10ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   10ade:	4a0a      	ldr	r2, [pc, #40]	; (10b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
   10ae0:	9b01      	ldr	r3, [sp, #4]
   10ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ae6:	f003 0301 	and.w	r3, r3, #1
   10aea:	2b00      	cmp	r3, #0
   10aec:	d106      	bne.n	10afc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
   10aee:	4a05      	ldr	r2, [pc, #20]	; (10b04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10af0:	9b01      	ldr	r3, [sp, #4]
   10af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10af6:	2b00      	cmp	r3, #0
   10af8:	d100      	bne.n	10afc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10afa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10afc:	bf00      	nop
   10afe:	b003      	add	sp, #12
   10b00:	f85d fb04 	ldr.w	pc, [sp], #4
   10b04:	1fff9418 	.word	0x1fff9418
   10b08:	1fff9414 	.word	0x1fff9414

00010b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10b0c:	b500      	push	{lr}
   10b0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b10:	f7f0 f86c 	bl	bec <Sys_GetCoreID>
   10b14:	4603      	mov	r3, r0
   10b16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
   10b18:	4a10      	ldr	r2, [pc, #64]	; (10b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10b1a:	9b01      	ldr	r3, [sp, #4]
   10b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b20:	2b00      	cmp	r3, #0
   10b22:	d10d      	bne.n	10b40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b24:	f7ef ff28 	bl	978 <Adc_schm_read_msr>
   10b28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b2a:	9b00      	ldr	r3, [sp, #0]
   10b2c:	f003 0301 	and.w	r3, r3, #1
   10b30:	2b00      	cmp	r3, #0
   10b32:	d100      	bne.n	10b36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   10b36:	490a      	ldr	r1, [pc, #40]	; (10b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
   10b38:	9b01      	ldr	r3, [sp, #4]
   10b3a:	9a00      	ldr	r2, [sp, #0]
   10b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
   10b40:	4a06      	ldr	r2, [pc, #24]	; (10b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10b42:	9b01      	ldr	r3, [sp, #4]
   10b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b48:	1c5a      	adds	r2, r3, #1
   10b4a:	4904      	ldr	r1, [pc, #16]	; (10b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10b4c:	9b01      	ldr	r3, [sp, #4]
   10b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b52:	bf00      	nop
   10b54:	b003      	add	sp, #12
   10b56:	f85d fb04 	ldr.w	pc, [sp], #4
   10b5a:	bf00      	nop
   10b5c:	1fff9420 	.word	0x1fff9420
   10b60:	1fff941c 	.word	0x1fff941c

00010b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10b64:	b500      	push	{lr}
   10b66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b68:	f7f0 f840 	bl	bec <Sys_GetCoreID>
   10b6c:	4603      	mov	r3, r0
   10b6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
   10b70:	4a0d      	ldr	r2, [pc, #52]	; (10ba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10b72:	9b01      	ldr	r3, [sp, #4]
   10b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b78:	1e5a      	subs	r2, r3, #1
   10b7a:	490b      	ldr	r1, [pc, #44]	; (10ba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10b7c:	9b01      	ldr	r3, [sp, #4]
   10b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   10b82:	4a0a      	ldr	r2, [pc, #40]	; (10bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
   10b84:	9b01      	ldr	r3, [sp, #4]
   10b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b8a:	f003 0301 	and.w	r3, r3, #1
   10b8e:	2b00      	cmp	r3, #0
   10b90:	d106      	bne.n	10ba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
   10b92:	4a05      	ldr	r2, [pc, #20]	; (10ba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10b94:	9b01      	ldr	r3, [sp, #4]
   10b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b9a:	2b00      	cmp	r3, #0
   10b9c:	d100      	bne.n	10ba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ba0:	bf00      	nop
   10ba2:	b003      	add	sp, #12
   10ba4:	f85d fb04 	ldr.w	pc, [sp], #4
   10ba8:	1fff9420 	.word	0x1fff9420
   10bac:	1fff941c 	.word	0x1fff941c

00010bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10bb0:	b500      	push	{lr}
   10bb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bb4:	f7f0 f81a 	bl	bec <Sys_GetCoreID>
   10bb8:	4603      	mov	r3, r0
   10bba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
   10bbc:	4a10      	ldr	r2, [pc, #64]	; (10c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10bbe:	9b01      	ldr	r3, [sp, #4]
   10bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bc4:	2b00      	cmp	r3, #0
   10bc6:	d10d      	bne.n	10be4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10bc8:	f7ef fed6 	bl	978 <Adc_schm_read_msr>
   10bcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10bce:	9b00      	ldr	r3, [sp, #0]
   10bd0:	f003 0301 	and.w	r3, r3, #1
   10bd4:	2b00      	cmp	r3, #0
   10bd6:	d100      	bne.n	10bda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10bd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   10bda:	490a      	ldr	r1, [pc, #40]	; (10c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
   10bdc:	9b01      	ldr	r3, [sp, #4]
   10bde:	9a00      	ldr	r2, [sp, #0]
   10be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
   10be4:	4a06      	ldr	r2, [pc, #24]	; (10c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10be6:	9b01      	ldr	r3, [sp, #4]
   10be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bec:	1c5a      	adds	r2, r3, #1
   10bee:	4904      	ldr	r1, [pc, #16]	; (10c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10bf0:	9b01      	ldr	r3, [sp, #4]
   10bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10bf6:	bf00      	nop
   10bf8:	b003      	add	sp, #12
   10bfa:	f85d fb04 	ldr.w	pc, [sp], #4
   10bfe:	bf00      	nop
   10c00:	1fff9428 	.word	0x1fff9428
   10c04:	1fff9424 	.word	0x1fff9424

00010c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10c08:	b500      	push	{lr}
   10c0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c0c:	f7ef ffee 	bl	bec <Sys_GetCoreID>
   10c10:	4603      	mov	r3, r0
   10c12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
   10c14:	4a0d      	ldr	r2, [pc, #52]	; (10c4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10c16:	9b01      	ldr	r3, [sp, #4]
   10c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c1c:	1e5a      	subs	r2, r3, #1
   10c1e:	490b      	ldr	r1, [pc, #44]	; (10c4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10c20:	9b01      	ldr	r3, [sp, #4]
   10c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   10c26:	4a0a      	ldr	r2, [pc, #40]	; (10c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
   10c28:	9b01      	ldr	r3, [sp, #4]
   10c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c2e:	f003 0301 	and.w	r3, r3, #1
   10c32:	2b00      	cmp	r3, #0
   10c34:	d106      	bne.n	10c44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
   10c36:	4a05      	ldr	r2, [pc, #20]	; (10c4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10c38:	9b01      	ldr	r3, [sp, #4]
   10c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c3e:	2b00      	cmp	r3, #0
   10c40:	d100      	bne.n	10c44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c44:	bf00      	nop
   10c46:	b003      	add	sp, #12
   10c48:	f85d fb04 	ldr.w	pc, [sp], #4
   10c4c:	1fff9428 	.word	0x1fff9428
   10c50:	1fff9424 	.word	0x1fff9424

00010c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10c54:	b500      	push	{lr}
   10c56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c58:	f7ef ffc8 	bl	bec <Sys_GetCoreID>
   10c5c:	4603      	mov	r3, r0
   10c5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
   10c60:	4a10      	ldr	r2, [pc, #64]	; (10ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10c62:	9b01      	ldr	r3, [sp, #4]
   10c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c68:	2b00      	cmp	r3, #0
   10c6a:	d10d      	bne.n	10c88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c6c:	f7ef fe84 	bl	978 <Adc_schm_read_msr>
   10c70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c72:	9b00      	ldr	r3, [sp, #0]
   10c74:	f003 0301 	and.w	r3, r3, #1
   10c78:	2b00      	cmp	r3, #0
   10c7a:	d100      	bne.n	10c7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   10c7e:	490a      	ldr	r1, [pc, #40]	; (10ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
   10c80:	9b01      	ldr	r3, [sp, #4]
   10c82:	9a00      	ldr	r2, [sp, #0]
   10c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
   10c88:	4a06      	ldr	r2, [pc, #24]	; (10ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10c8a:	9b01      	ldr	r3, [sp, #4]
   10c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c90:	1c5a      	adds	r2, r3, #1
   10c92:	4904      	ldr	r1, [pc, #16]	; (10ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10c94:	9b01      	ldr	r3, [sp, #4]
   10c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c9a:	bf00      	nop
   10c9c:	b003      	add	sp, #12
   10c9e:	f85d fb04 	ldr.w	pc, [sp], #4
   10ca2:	bf00      	nop
   10ca4:	1fff9430 	.word	0x1fff9430
   10ca8:	1fff942c 	.word	0x1fff942c

00010cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10cac:	b500      	push	{lr}
   10cae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10cb0:	f7ef ff9c 	bl	bec <Sys_GetCoreID>
   10cb4:	4603      	mov	r3, r0
   10cb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
   10cb8:	4a0d      	ldr	r2, [pc, #52]	; (10cf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10cba:	9b01      	ldr	r3, [sp, #4]
   10cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cc0:	1e5a      	subs	r2, r3, #1
   10cc2:	490b      	ldr	r1, [pc, #44]	; (10cf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10cc4:	9b01      	ldr	r3, [sp, #4]
   10cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   10cca:	4a0a      	ldr	r2, [pc, #40]	; (10cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
   10ccc:	9b01      	ldr	r3, [sp, #4]
   10cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cd2:	f003 0301 	and.w	r3, r3, #1
   10cd6:	2b00      	cmp	r3, #0
   10cd8:	d106      	bne.n	10ce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
   10cda:	4a05      	ldr	r2, [pc, #20]	; (10cf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10cdc:	9b01      	ldr	r3, [sp, #4]
   10cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ce2:	2b00      	cmp	r3, #0
   10ce4:	d100      	bne.n	10ce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ce6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ce8:	bf00      	nop
   10cea:	b003      	add	sp, #12
   10cec:	f85d fb04 	ldr.w	pc, [sp], #4
   10cf0:	1fff9430 	.word	0x1fff9430
   10cf4:	1fff942c 	.word	0x1fff942c

00010cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10cf8:	b500      	push	{lr}
   10cfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10cfc:	f7ef ff76 	bl	bec <Sys_GetCoreID>
   10d00:	4603      	mov	r3, r0
   10d02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
   10d04:	4a10      	ldr	r2, [pc, #64]	; (10d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10d06:	9b01      	ldr	r3, [sp, #4]
   10d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d0c:	2b00      	cmp	r3, #0
   10d0e:	d10d      	bne.n	10d2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d10:	f7ef fe32 	bl	978 <Adc_schm_read_msr>
   10d14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d16:	9b00      	ldr	r3, [sp, #0]
   10d18:	f003 0301 	and.w	r3, r3, #1
   10d1c:	2b00      	cmp	r3, #0
   10d1e:	d100      	bne.n	10d22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   10d22:	490a      	ldr	r1, [pc, #40]	; (10d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   10d24:	9b01      	ldr	r3, [sp, #4]
   10d26:	9a00      	ldr	r2, [sp, #0]
   10d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   10d2c:	4a06      	ldr	r2, [pc, #24]	; (10d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10d2e:	9b01      	ldr	r3, [sp, #4]
   10d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d34:	1c5a      	adds	r2, r3, #1
   10d36:	4904      	ldr	r1, [pc, #16]	; (10d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10d38:	9b01      	ldr	r3, [sp, #4]
   10d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d3e:	bf00      	nop
   10d40:	b003      	add	sp, #12
   10d42:	f85d fb04 	ldr.w	pc, [sp], #4
   10d46:	bf00      	nop
   10d48:	1fff9438 	.word	0x1fff9438
   10d4c:	1fff9434 	.word	0x1fff9434

00010d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10d50:	b500      	push	{lr}
   10d52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d54:	f7ef ff4a 	bl	bec <Sys_GetCoreID>
   10d58:	4603      	mov	r3, r0
   10d5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   10d5c:	4a0d      	ldr	r2, [pc, #52]	; (10d94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10d5e:	9b01      	ldr	r3, [sp, #4]
   10d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d64:	1e5a      	subs	r2, r3, #1
   10d66:	490b      	ldr	r1, [pc, #44]	; (10d94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10d68:	9b01      	ldr	r3, [sp, #4]
   10d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   10d6e:	4a0a      	ldr	r2, [pc, #40]	; (10d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   10d70:	9b01      	ldr	r3, [sp, #4]
   10d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d76:	f003 0301 	and.w	r3, r3, #1
   10d7a:	2b00      	cmp	r3, #0
   10d7c:	d106      	bne.n	10d8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   10d7e:	4a05      	ldr	r2, [pc, #20]	; (10d94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10d80:	9b01      	ldr	r3, [sp, #4]
   10d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d86:	2b00      	cmp	r3, #0
   10d88:	d100      	bne.n	10d8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d8c:	bf00      	nop
   10d8e:	b003      	add	sp, #12
   10d90:	f85d fb04 	ldr.w	pc, [sp], #4
   10d94:	1fff9438 	.word	0x1fff9438
   10d98:	1fff9434 	.word	0x1fff9434

00010d9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10d9c:	b500      	push	{lr}
   10d9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10da0:	f7ef ff24 	bl	bec <Sys_GetCoreID>
   10da4:	4603      	mov	r3, r0
   10da6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   10da8:	4a10      	ldr	r2, [pc, #64]	; (10dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10daa:	9b01      	ldr	r3, [sp, #4]
   10dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10db0:	2b00      	cmp	r3, #0
   10db2:	d10d      	bne.n	10dd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10db4:	f7ef fde0 	bl	978 <Adc_schm_read_msr>
   10db8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10dba:	9b00      	ldr	r3, [sp, #0]
   10dbc:	f003 0301 	and.w	r3, r3, #1
   10dc0:	2b00      	cmp	r3, #0
   10dc2:	d100      	bne.n	10dc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10dc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   10dc6:	490a      	ldr	r1, [pc, #40]	; (10df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   10dc8:	9b01      	ldr	r3, [sp, #4]
   10dca:	9a00      	ldr	r2, [sp, #0]
   10dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   10dd0:	4a06      	ldr	r2, [pc, #24]	; (10dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10dd2:	9b01      	ldr	r3, [sp, #4]
   10dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dd8:	1c5a      	adds	r2, r3, #1
   10dda:	4904      	ldr	r1, [pc, #16]	; (10dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10ddc:	9b01      	ldr	r3, [sp, #4]
   10dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10de2:	bf00      	nop
   10de4:	b003      	add	sp, #12
   10de6:	f85d fb04 	ldr.w	pc, [sp], #4
   10dea:	bf00      	nop
   10dec:	1fff9440 	.word	0x1fff9440
   10df0:	1fff943c 	.word	0x1fff943c

00010df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10df4:	b500      	push	{lr}
   10df6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10df8:	f7ef fef8 	bl	bec <Sys_GetCoreID>
   10dfc:	4603      	mov	r3, r0
   10dfe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   10e00:	4a0d      	ldr	r2, [pc, #52]	; (10e38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10e02:	9b01      	ldr	r3, [sp, #4]
   10e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e08:	1e5a      	subs	r2, r3, #1
   10e0a:	490b      	ldr	r1, [pc, #44]	; (10e38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10e0c:	9b01      	ldr	r3, [sp, #4]
   10e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   10e12:	4a0a      	ldr	r2, [pc, #40]	; (10e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   10e14:	9b01      	ldr	r3, [sp, #4]
   10e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e1a:	f003 0301 	and.w	r3, r3, #1
   10e1e:	2b00      	cmp	r3, #0
   10e20:	d106      	bne.n	10e30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   10e22:	4a05      	ldr	r2, [pc, #20]	; (10e38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10e24:	9b01      	ldr	r3, [sp, #4]
   10e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e2a:	2b00      	cmp	r3, #0
   10e2c:	d100      	bne.n	10e30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e30:	bf00      	nop
   10e32:	b003      	add	sp, #12
   10e34:	f85d fb04 	ldr.w	pc, [sp], #4
   10e38:	1fff9440 	.word	0x1fff9440
   10e3c:	1fff943c 	.word	0x1fff943c

00010e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10e40:	b500      	push	{lr}
   10e42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e44:	f7ef fed2 	bl	bec <Sys_GetCoreID>
   10e48:	4603      	mov	r3, r0
   10e4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   10e4c:	4a10      	ldr	r2, [pc, #64]	; (10e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10e4e:	9b01      	ldr	r3, [sp, #4]
   10e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e54:	2b00      	cmp	r3, #0
   10e56:	d10d      	bne.n	10e74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10e58:	f7ef fd8e 	bl	978 <Adc_schm_read_msr>
   10e5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e5e:	9b00      	ldr	r3, [sp, #0]
   10e60:	f003 0301 	and.w	r3, r3, #1
   10e64:	2b00      	cmp	r3, #0
   10e66:	d100      	bne.n	10e6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   10e6a:	490a      	ldr	r1, [pc, #40]	; (10e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   10e6c:	9b01      	ldr	r3, [sp, #4]
   10e6e:	9a00      	ldr	r2, [sp, #0]
   10e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   10e74:	4a06      	ldr	r2, [pc, #24]	; (10e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10e76:	9b01      	ldr	r3, [sp, #4]
   10e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e7c:	1c5a      	adds	r2, r3, #1
   10e7e:	4904      	ldr	r1, [pc, #16]	; (10e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10e80:	9b01      	ldr	r3, [sp, #4]
   10e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e86:	bf00      	nop
   10e88:	b003      	add	sp, #12
   10e8a:	f85d fb04 	ldr.w	pc, [sp], #4
   10e8e:	bf00      	nop
   10e90:	1fff9448 	.word	0x1fff9448
   10e94:	1fff9444 	.word	0x1fff9444

00010e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10e98:	b500      	push	{lr}
   10e9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e9c:	f7ef fea6 	bl	bec <Sys_GetCoreID>
   10ea0:	4603      	mov	r3, r0
   10ea2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   10ea4:	4a0d      	ldr	r2, [pc, #52]	; (10edc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10ea6:	9b01      	ldr	r3, [sp, #4]
   10ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10eac:	1e5a      	subs	r2, r3, #1
   10eae:	490b      	ldr	r1, [pc, #44]	; (10edc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10eb0:	9b01      	ldr	r3, [sp, #4]
   10eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   10eb6:	4a0a      	ldr	r2, [pc, #40]	; (10ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   10eb8:	9b01      	ldr	r3, [sp, #4]
   10eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ebe:	f003 0301 	and.w	r3, r3, #1
   10ec2:	2b00      	cmp	r3, #0
   10ec4:	d106      	bne.n	10ed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   10ec6:	4a05      	ldr	r2, [pc, #20]	; (10edc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10ec8:	9b01      	ldr	r3, [sp, #4]
   10eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ece:	2b00      	cmp	r3, #0
   10ed0:	d100      	bne.n	10ed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ed2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ed4:	bf00      	nop
   10ed6:	b003      	add	sp, #12
   10ed8:	f85d fb04 	ldr.w	pc, [sp], #4
   10edc:	1fff9448 	.word	0x1fff9448
   10ee0:	1fff9444 	.word	0x1fff9444

00010ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10ee4:	b500      	push	{lr}
   10ee6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ee8:	f7ef fe80 	bl	bec <Sys_GetCoreID>
   10eec:	4603      	mov	r3, r0
   10eee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   10ef0:	4a10      	ldr	r2, [pc, #64]	; (10f34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10ef2:	9b01      	ldr	r3, [sp, #4]
   10ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ef8:	2b00      	cmp	r3, #0
   10efa:	d10d      	bne.n	10f18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10efc:	f7ef fd3c 	bl	978 <Adc_schm_read_msr>
   10f00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f02:	9b00      	ldr	r3, [sp, #0]
   10f04:	f003 0301 	and.w	r3, r3, #1
   10f08:	2b00      	cmp	r3, #0
   10f0a:	d100      	bne.n	10f0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   10f0e:	490a      	ldr	r1, [pc, #40]	; (10f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   10f10:	9b01      	ldr	r3, [sp, #4]
   10f12:	9a00      	ldr	r2, [sp, #0]
   10f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   10f18:	4a06      	ldr	r2, [pc, #24]	; (10f34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10f1a:	9b01      	ldr	r3, [sp, #4]
   10f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f20:	1c5a      	adds	r2, r3, #1
   10f22:	4904      	ldr	r1, [pc, #16]	; (10f34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10f24:	9b01      	ldr	r3, [sp, #4]
   10f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f2a:	bf00      	nop
   10f2c:	b003      	add	sp, #12
   10f2e:	f85d fb04 	ldr.w	pc, [sp], #4
   10f32:	bf00      	nop
   10f34:	1fff9450 	.word	0x1fff9450
   10f38:	1fff944c 	.word	0x1fff944c

00010f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10f3c:	b500      	push	{lr}
   10f3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f40:	f7ef fe54 	bl	bec <Sys_GetCoreID>
   10f44:	4603      	mov	r3, r0
   10f46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   10f48:	4a0d      	ldr	r2, [pc, #52]	; (10f80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10f4a:	9b01      	ldr	r3, [sp, #4]
   10f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f50:	1e5a      	subs	r2, r3, #1
   10f52:	490b      	ldr	r1, [pc, #44]	; (10f80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10f54:	9b01      	ldr	r3, [sp, #4]
   10f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   10f5a:	4a0a      	ldr	r2, [pc, #40]	; (10f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   10f5c:	9b01      	ldr	r3, [sp, #4]
   10f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f62:	f003 0301 	and.w	r3, r3, #1
   10f66:	2b00      	cmp	r3, #0
   10f68:	d106      	bne.n	10f78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   10f6a:	4a05      	ldr	r2, [pc, #20]	; (10f80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10f6c:	9b01      	ldr	r3, [sp, #4]
   10f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f72:	2b00      	cmp	r3, #0
   10f74:	d100      	bne.n	10f78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f78:	bf00      	nop
   10f7a:	b003      	add	sp, #12
   10f7c:	f85d fb04 	ldr.w	pc, [sp], #4
   10f80:	1fff9450 	.word	0x1fff9450
   10f84:	1fff944c 	.word	0x1fff944c

00010f88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   10f88:	b500      	push	{lr}
   10f8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f8c:	f7ef fe2e 	bl	bec <Sys_GetCoreID>
   10f90:	4603      	mov	r3, r0
   10f92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   10f94:	4a10      	ldr	r2, [pc, #64]	; (10fd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10f96:	9b01      	ldr	r3, [sp, #4]
   10f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f9c:	2b00      	cmp	r3, #0
   10f9e:	d10d      	bne.n	10fbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10fa0:	f7ef fcea 	bl	978 <Adc_schm_read_msr>
   10fa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10fa6:	9b00      	ldr	r3, [sp, #0]
   10fa8:	f003 0301 	and.w	r3, r3, #1
   10fac:	2b00      	cmp	r3, #0
   10fae:	d100      	bne.n	10fb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10fb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   10fb2:	490a      	ldr	r1, [pc, #40]	; (10fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   10fb4:	9b01      	ldr	r3, [sp, #4]
   10fb6:	9a00      	ldr	r2, [sp, #0]
   10fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   10fbc:	4a06      	ldr	r2, [pc, #24]	; (10fd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10fbe:	9b01      	ldr	r3, [sp, #4]
   10fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fc4:	1c5a      	adds	r2, r3, #1
   10fc6:	4904      	ldr	r1, [pc, #16]	; (10fd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10fc8:	9b01      	ldr	r3, [sp, #4]
   10fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10fce:	bf00      	nop
   10fd0:	b003      	add	sp, #12
   10fd2:	f85d fb04 	ldr.w	pc, [sp], #4
   10fd6:	bf00      	nop
   10fd8:	1fff9458 	.word	0x1fff9458
   10fdc:	1fff9454 	.word	0x1fff9454

00010fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   10fe0:	b500      	push	{lr}
   10fe2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fe4:	f7ef fe02 	bl	bec <Sys_GetCoreID>
   10fe8:	4603      	mov	r3, r0
   10fea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   10fec:	4a0d      	ldr	r2, [pc, #52]	; (11024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   10fee:	9b01      	ldr	r3, [sp, #4]
   10ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ff4:	1e5a      	subs	r2, r3, #1
   10ff6:	490b      	ldr	r1, [pc, #44]	; (11024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   10ff8:	9b01      	ldr	r3, [sp, #4]
   10ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   10ffe:	4a0a      	ldr	r2, [pc, #40]	; (11028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   11000:	9b01      	ldr	r3, [sp, #4]
   11002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11006:	f003 0301 	and.w	r3, r3, #1
   1100a:	2b00      	cmp	r3, #0
   1100c:	d106      	bne.n	1101c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   1100e:	4a05      	ldr	r2, [pc, #20]	; (11024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   11010:	9b01      	ldr	r3, [sp, #4]
   11012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11016:	2b00      	cmp	r3, #0
   11018:	d100      	bne.n	1101c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1101a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1101c:	bf00      	nop
   1101e:	b003      	add	sp, #12
   11020:	f85d fb04 	ldr.w	pc, [sp], #4
   11024:	1fff9458 	.word	0x1fff9458
   11028:	1fff9454 	.word	0x1fff9454

0001102c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   1102c:	b500      	push	{lr}
   1102e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11030:	f7ef fddc 	bl	bec <Sys_GetCoreID>
   11034:	4603      	mov	r3, r0
   11036:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   11038:	4a10      	ldr	r2, [pc, #64]	; (1107c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1103a:	9b01      	ldr	r3, [sp, #4]
   1103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11040:	2b00      	cmp	r3, #0
   11042:	d10d      	bne.n	11060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11044:	f7ef fc98 	bl	978 <Adc_schm_read_msr>
   11048:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1104a:	9b00      	ldr	r3, [sp, #0]
   1104c:	f003 0301 	and.w	r3, r3, #1
   11050:	2b00      	cmp	r3, #0
   11052:	d100      	bne.n	11056 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11054:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   11056:	490a      	ldr	r1, [pc, #40]	; (11080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   11058:	9b01      	ldr	r3, [sp, #4]
   1105a:	9a00      	ldr	r2, [sp, #0]
   1105c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   11060:	4a06      	ldr	r2, [pc, #24]	; (1107c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   11062:	9b01      	ldr	r3, [sp, #4]
   11064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11068:	1c5a      	adds	r2, r3, #1
   1106a:	4904      	ldr	r1, [pc, #16]	; (1107c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1106c:	9b01      	ldr	r3, [sp, #4]
   1106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11072:	bf00      	nop
   11074:	b003      	add	sp, #12
   11076:	f85d fb04 	ldr.w	pc, [sp], #4
   1107a:	bf00      	nop
   1107c:	1fff9460 	.word	0x1fff9460
   11080:	1fff945c 	.word	0x1fff945c

00011084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   11084:	b500      	push	{lr}
   11086:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11088:	f7ef fdb0 	bl	bec <Sys_GetCoreID>
   1108c:	4603      	mov	r3, r0
   1108e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   11090:	4a0d      	ldr	r2, [pc, #52]	; (110c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   11092:	9b01      	ldr	r3, [sp, #4]
   11094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11098:	1e5a      	subs	r2, r3, #1
   1109a:	490b      	ldr	r1, [pc, #44]	; (110c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   1109c:	9b01      	ldr	r3, [sp, #4]
   1109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   110a2:	4a0a      	ldr	r2, [pc, #40]	; (110cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   110a4:	9b01      	ldr	r3, [sp, #4]
   110a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110aa:	f003 0301 	and.w	r3, r3, #1
   110ae:	2b00      	cmp	r3, #0
   110b0:	d106      	bne.n	110c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   110b2:	4a05      	ldr	r2, [pc, #20]	; (110c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   110b4:	9b01      	ldr	r3, [sp, #4]
   110b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110ba:	2b00      	cmp	r3, #0
   110bc:	d100      	bne.n	110c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   110be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   110c0:	bf00      	nop
   110c2:	b003      	add	sp, #12
   110c4:	f85d fb04 	ldr.w	pc, [sp], #4
   110c8:	1fff9460 	.word	0x1fff9460
   110cc:	1fff945c 	.word	0x1fff945c

000110d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   110d0:	b500      	push	{lr}
   110d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110d4:	f7ef fd8a 	bl	bec <Sys_GetCoreID>
   110d8:	4603      	mov	r3, r0
   110da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   110dc:	4a10      	ldr	r2, [pc, #64]	; (11120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   110de:	9b01      	ldr	r3, [sp, #4]
   110e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110e4:	2b00      	cmp	r3, #0
   110e6:	d10d      	bne.n	11104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   110e8:	f7ef fc46 	bl	978 <Adc_schm_read_msr>
   110ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   110ee:	9b00      	ldr	r3, [sp, #0]
   110f0:	f003 0301 	and.w	r3, r3, #1
   110f4:	2b00      	cmp	r3, #0
   110f6:	d100      	bne.n	110fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   110f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   110fa:	490a      	ldr	r1, [pc, #40]	; (11124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   110fc:	9b01      	ldr	r3, [sp, #4]
   110fe:	9a00      	ldr	r2, [sp, #0]
   11100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   11104:	4a06      	ldr	r2, [pc, #24]	; (11120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   11106:	9b01      	ldr	r3, [sp, #4]
   11108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1110c:	1c5a      	adds	r2, r3, #1
   1110e:	4904      	ldr	r1, [pc, #16]	; (11120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   11110:	9b01      	ldr	r3, [sp, #4]
   11112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11116:	bf00      	nop
   11118:	b003      	add	sp, #12
   1111a:	f85d fb04 	ldr.w	pc, [sp], #4
   1111e:	bf00      	nop
   11120:	1fff9468 	.word	0x1fff9468
   11124:	1fff9464 	.word	0x1fff9464

00011128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   11128:	b500      	push	{lr}
   1112a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1112c:	f7ef fd5e 	bl	bec <Sys_GetCoreID>
   11130:	4603      	mov	r3, r0
   11132:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   11134:	4a0d      	ldr	r2, [pc, #52]	; (1116c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   11136:	9b01      	ldr	r3, [sp, #4]
   11138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1113c:	1e5a      	subs	r2, r3, #1
   1113e:	490b      	ldr	r1, [pc, #44]	; (1116c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   11140:	9b01      	ldr	r3, [sp, #4]
   11142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   11146:	4a0a      	ldr	r2, [pc, #40]	; (11170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   11148:	9b01      	ldr	r3, [sp, #4]
   1114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1114e:	f003 0301 	and.w	r3, r3, #1
   11152:	2b00      	cmp	r3, #0
   11154:	d106      	bne.n	11164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   11156:	4a05      	ldr	r2, [pc, #20]	; (1116c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   11158:	9b01      	ldr	r3, [sp, #4]
   1115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1115e:	2b00      	cmp	r3, #0
   11160:	d100      	bne.n	11164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11162:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11164:	bf00      	nop
   11166:	b003      	add	sp, #12
   11168:	f85d fb04 	ldr.w	pc, [sp], #4
   1116c:	1fff9468 	.word	0x1fff9468
   11170:	1fff9464 	.word	0x1fff9464

00011174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   11174:	b500      	push	{lr}
   11176:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11178:	f7ef fd38 	bl	bec <Sys_GetCoreID>
   1117c:	4603      	mov	r3, r0
   1117e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   11180:	4a10      	ldr	r2, [pc, #64]	; (111c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   11182:	9b01      	ldr	r3, [sp, #4]
   11184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11188:	2b00      	cmp	r3, #0
   1118a:	d10d      	bne.n	111a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1118c:	f7ef fbf4 	bl	978 <Adc_schm_read_msr>
   11190:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11192:	9b00      	ldr	r3, [sp, #0]
   11194:	f003 0301 	and.w	r3, r3, #1
   11198:	2b00      	cmp	r3, #0
   1119a:	d100      	bne.n	1119e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1119c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   1119e:	490a      	ldr	r1, [pc, #40]	; (111c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   111a0:	9b01      	ldr	r3, [sp, #4]
   111a2:	9a00      	ldr	r2, [sp, #0]
   111a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   111a8:	4a06      	ldr	r2, [pc, #24]	; (111c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   111aa:	9b01      	ldr	r3, [sp, #4]
   111ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111b0:	1c5a      	adds	r2, r3, #1
   111b2:	4904      	ldr	r1, [pc, #16]	; (111c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   111b4:	9b01      	ldr	r3, [sp, #4]
   111b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   111ba:	bf00      	nop
   111bc:	b003      	add	sp, #12
   111be:	f85d fb04 	ldr.w	pc, [sp], #4
   111c2:	bf00      	nop
   111c4:	1fff9470 	.word	0x1fff9470
   111c8:	1fff946c 	.word	0x1fff946c

000111cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   111cc:	b500      	push	{lr}
   111ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111d0:	f7ef fd0c 	bl	bec <Sys_GetCoreID>
   111d4:	4603      	mov	r3, r0
   111d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   111d8:	4a0d      	ldr	r2, [pc, #52]	; (11210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   111da:	9b01      	ldr	r3, [sp, #4]
   111dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111e0:	1e5a      	subs	r2, r3, #1
   111e2:	490b      	ldr	r1, [pc, #44]	; (11210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   111e4:	9b01      	ldr	r3, [sp, #4]
   111e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   111ea:	4a0a      	ldr	r2, [pc, #40]	; (11214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   111ec:	9b01      	ldr	r3, [sp, #4]
   111ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111f2:	f003 0301 	and.w	r3, r3, #1
   111f6:	2b00      	cmp	r3, #0
   111f8:	d106      	bne.n	11208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   111fa:	4a05      	ldr	r2, [pc, #20]	; (11210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   111fc:	9b01      	ldr	r3, [sp, #4]
   111fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11202:	2b00      	cmp	r3, #0
   11204:	d100      	bne.n	11208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11206:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11208:	bf00      	nop
   1120a:	b003      	add	sp, #12
   1120c:	f85d fb04 	ldr.w	pc, [sp], #4
   11210:	1fff9470 	.word	0x1fff9470
   11214:	1fff946c 	.word	0x1fff946c

00011218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   11218:	b500      	push	{lr}
   1121a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1121c:	f7ef fce6 	bl	bec <Sys_GetCoreID>
   11220:	4603      	mov	r3, r0
   11222:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   11224:	4a10      	ldr	r2, [pc, #64]	; (11268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   11226:	9b01      	ldr	r3, [sp, #4]
   11228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1122c:	2b00      	cmp	r3, #0
   1122e:	d10d      	bne.n	1124c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11230:	f7ef fba2 	bl	978 <Adc_schm_read_msr>
   11234:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11236:	9b00      	ldr	r3, [sp, #0]
   11238:	f003 0301 	and.w	r3, r3, #1
   1123c:	2b00      	cmp	r3, #0
   1123e:	d100      	bne.n	11242 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11240:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   11242:	490a      	ldr	r1, [pc, #40]	; (1126c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   11244:	9b01      	ldr	r3, [sp, #4]
   11246:	9a00      	ldr	r2, [sp, #0]
   11248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   1124c:	4a06      	ldr	r2, [pc, #24]	; (11268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   1124e:	9b01      	ldr	r3, [sp, #4]
   11250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11254:	1c5a      	adds	r2, r3, #1
   11256:	4904      	ldr	r1, [pc, #16]	; (11268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   11258:	9b01      	ldr	r3, [sp, #4]
   1125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1125e:	bf00      	nop
   11260:	b003      	add	sp, #12
   11262:	f85d fb04 	ldr.w	pc, [sp], #4
   11266:	bf00      	nop
   11268:	1fff9478 	.word	0x1fff9478
   1126c:	1fff9474 	.word	0x1fff9474

00011270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   11270:	b500      	push	{lr}
   11272:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11274:	f7ef fcba 	bl	bec <Sys_GetCoreID>
   11278:	4603      	mov	r3, r0
   1127a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   1127c:	4a0d      	ldr	r2, [pc, #52]	; (112b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   1127e:	9b01      	ldr	r3, [sp, #4]
   11280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11284:	1e5a      	subs	r2, r3, #1
   11286:	490b      	ldr	r1, [pc, #44]	; (112b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   11288:	9b01      	ldr	r3, [sp, #4]
   1128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   1128e:	4a0a      	ldr	r2, [pc, #40]	; (112b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   11290:	9b01      	ldr	r3, [sp, #4]
   11292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11296:	f003 0301 	and.w	r3, r3, #1
   1129a:	2b00      	cmp	r3, #0
   1129c:	d106      	bne.n	112ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   1129e:	4a05      	ldr	r2, [pc, #20]	; (112b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   112a0:	9b01      	ldr	r3, [sp, #4]
   112a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112a6:	2b00      	cmp	r3, #0
   112a8:	d100      	bne.n	112ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   112aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   112ac:	bf00      	nop
   112ae:	b003      	add	sp, #12
   112b0:	f85d fb04 	ldr.w	pc, [sp], #4
   112b4:	1fff9478 	.word	0x1fff9478
   112b8:	1fff9474 	.word	0x1fff9474

000112bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   112bc:	b500      	push	{lr}
   112be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112c0:	f7ef fc94 	bl	bec <Sys_GetCoreID>
   112c4:	4603      	mov	r3, r0
   112c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   112c8:	4a10      	ldr	r2, [pc, #64]	; (1130c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   112ca:	9b01      	ldr	r3, [sp, #4]
   112cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112d0:	2b00      	cmp	r3, #0
   112d2:	d10d      	bne.n	112f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   112d4:	f7ef fb50 	bl	978 <Adc_schm_read_msr>
   112d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   112da:	9b00      	ldr	r3, [sp, #0]
   112dc:	f003 0301 	and.w	r3, r3, #1
   112e0:	2b00      	cmp	r3, #0
   112e2:	d100      	bne.n	112e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   112e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   112e6:	490a      	ldr	r1, [pc, #40]	; (11310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   112e8:	9b01      	ldr	r3, [sp, #4]
   112ea:	9a00      	ldr	r2, [sp, #0]
   112ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   112f0:	4a06      	ldr	r2, [pc, #24]	; (1130c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   112f2:	9b01      	ldr	r3, [sp, #4]
   112f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112f8:	1c5a      	adds	r2, r3, #1
   112fa:	4904      	ldr	r1, [pc, #16]	; (1130c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   112fc:	9b01      	ldr	r3, [sp, #4]
   112fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11302:	bf00      	nop
   11304:	b003      	add	sp, #12
   11306:	f85d fb04 	ldr.w	pc, [sp], #4
   1130a:	bf00      	nop
   1130c:	1fff9480 	.word	0x1fff9480
   11310:	1fff947c 	.word	0x1fff947c

00011314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   11314:	b500      	push	{lr}
   11316:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11318:	f7ef fc68 	bl	bec <Sys_GetCoreID>
   1131c:	4603      	mov	r3, r0
   1131e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   11320:	4a0d      	ldr	r2, [pc, #52]	; (11358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   11322:	9b01      	ldr	r3, [sp, #4]
   11324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11328:	1e5a      	subs	r2, r3, #1
   1132a:	490b      	ldr	r1, [pc, #44]	; (11358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   1132c:	9b01      	ldr	r3, [sp, #4]
   1132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   11332:	4a0a      	ldr	r2, [pc, #40]	; (1135c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   11334:	9b01      	ldr	r3, [sp, #4]
   11336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1133a:	f003 0301 	and.w	r3, r3, #1
   1133e:	2b00      	cmp	r3, #0
   11340:	d106      	bne.n	11350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   11342:	4a05      	ldr	r2, [pc, #20]	; (11358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   11344:	9b01      	ldr	r3, [sp, #4]
   11346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1134a:	2b00      	cmp	r3, #0
   1134c:	d100      	bne.n	11350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1134e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11350:	bf00      	nop
   11352:	b003      	add	sp, #12
   11354:	f85d fb04 	ldr.w	pc, [sp], #4
   11358:	1fff9480 	.word	0x1fff9480
   1135c:	1fff947c 	.word	0x1fff947c

00011360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   11360:	b500      	push	{lr}
   11362:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11364:	f7ef fc42 	bl	bec <Sys_GetCoreID>
   11368:	4603      	mov	r3, r0
   1136a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   1136c:	4a10      	ldr	r2, [pc, #64]	; (113b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   1136e:	9b01      	ldr	r3, [sp, #4]
   11370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11374:	2b00      	cmp	r3, #0
   11376:	d10d      	bne.n	11394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11378:	f7ef fafe 	bl	978 <Adc_schm_read_msr>
   1137c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1137e:	9b00      	ldr	r3, [sp, #0]
   11380:	f003 0301 	and.w	r3, r3, #1
   11384:	2b00      	cmp	r3, #0
   11386:	d100      	bne.n	1138a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11388:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   1138a:	490a      	ldr	r1, [pc, #40]	; (113b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   1138c:	9b01      	ldr	r3, [sp, #4]
   1138e:	9a00      	ldr	r2, [sp, #0]
   11390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   11394:	4a06      	ldr	r2, [pc, #24]	; (113b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   11396:	9b01      	ldr	r3, [sp, #4]
   11398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1139c:	1c5a      	adds	r2, r3, #1
   1139e:	4904      	ldr	r1, [pc, #16]	; (113b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   113a0:	9b01      	ldr	r3, [sp, #4]
   113a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   113a6:	bf00      	nop
   113a8:	b003      	add	sp, #12
   113aa:	f85d fb04 	ldr.w	pc, [sp], #4
   113ae:	bf00      	nop
   113b0:	1fff9488 	.word	0x1fff9488
   113b4:	1fff9484 	.word	0x1fff9484

000113b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   113b8:	b500      	push	{lr}
   113ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113bc:	f7ef fc16 	bl	bec <Sys_GetCoreID>
   113c0:	4603      	mov	r3, r0
   113c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   113c4:	4a0d      	ldr	r2, [pc, #52]	; (113fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   113c6:	9b01      	ldr	r3, [sp, #4]
   113c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113cc:	1e5a      	subs	r2, r3, #1
   113ce:	490b      	ldr	r1, [pc, #44]	; (113fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   113d0:	9b01      	ldr	r3, [sp, #4]
   113d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   113d6:	4a0a      	ldr	r2, [pc, #40]	; (11400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   113d8:	9b01      	ldr	r3, [sp, #4]
   113da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113de:	f003 0301 	and.w	r3, r3, #1
   113e2:	2b00      	cmp	r3, #0
   113e4:	d106      	bne.n	113f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   113e6:	4a05      	ldr	r2, [pc, #20]	; (113fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   113e8:	9b01      	ldr	r3, [sp, #4]
   113ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113ee:	2b00      	cmp	r3, #0
   113f0:	d100      	bne.n	113f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   113f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   113f4:	bf00      	nop
   113f6:	b003      	add	sp, #12
   113f8:	f85d fb04 	ldr.w	pc, [sp], #4
   113fc:	1fff9488 	.word	0x1fff9488
   11400:	1fff9484 	.word	0x1fff9484

00011404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   11404:	b500      	push	{lr}
   11406:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11408:	f7ef fbf0 	bl	bec <Sys_GetCoreID>
   1140c:	4603      	mov	r3, r0
   1140e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   11410:	4a10      	ldr	r2, [pc, #64]	; (11454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   11412:	9b01      	ldr	r3, [sp, #4]
   11414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11418:	2b00      	cmp	r3, #0
   1141a:	d10d      	bne.n	11438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1141c:	f7ef faac 	bl	978 <Adc_schm_read_msr>
   11420:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11422:	9b00      	ldr	r3, [sp, #0]
   11424:	f003 0301 	and.w	r3, r3, #1
   11428:	2b00      	cmp	r3, #0
   1142a:	d100      	bne.n	1142e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1142c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   1142e:	490a      	ldr	r1, [pc, #40]	; (11458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   11430:	9b01      	ldr	r3, [sp, #4]
   11432:	9a00      	ldr	r2, [sp, #0]
   11434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   11438:	4a06      	ldr	r2, [pc, #24]	; (11454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   1143a:	9b01      	ldr	r3, [sp, #4]
   1143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11440:	1c5a      	adds	r2, r3, #1
   11442:	4904      	ldr	r1, [pc, #16]	; (11454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   11444:	9b01      	ldr	r3, [sp, #4]
   11446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1144a:	bf00      	nop
   1144c:	b003      	add	sp, #12
   1144e:	f85d fb04 	ldr.w	pc, [sp], #4
   11452:	bf00      	nop
   11454:	1fff9490 	.word	0x1fff9490
   11458:	1fff948c 	.word	0x1fff948c

0001145c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   1145c:	b500      	push	{lr}
   1145e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11460:	f7ef fbc4 	bl	bec <Sys_GetCoreID>
   11464:	4603      	mov	r3, r0
   11466:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   11468:	4a0d      	ldr	r2, [pc, #52]	; (114a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   1146a:	9b01      	ldr	r3, [sp, #4]
   1146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11470:	1e5a      	subs	r2, r3, #1
   11472:	490b      	ldr	r1, [pc, #44]	; (114a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   11474:	9b01      	ldr	r3, [sp, #4]
   11476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   1147a:	4a0a      	ldr	r2, [pc, #40]	; (114a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   1147c:	9b01      	ldr	r3, [sp, #4]
   1147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11482:	f003 0301 	and.w	r3, r3, #1
   11486:	2b00      	cmp	r3, #0
   11488:	d106      	bne.n	11498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   1148a:	4a05      	ldr	r2, [pc, #20]	; (114a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   1148c:	9b01      	ldr	r3, [sp, #4]
   1148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11492:	2b00      	cmp	r3, #0
   11494:	d100      	bne.n	11498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11496:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11498:	bf00      	nop
   1149a:	b003      	add	sp, #12
   1149c:	f85d fb04 	ldr.w	pc, [sp], #4
   114a0:	1fff9490 	.word	0x1fff9490
   114a4:	1fff948c 	.word	0x1fff948c

000114a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   114a8:	b500      	push	{lr}
   114aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114ac:	f7ef fb9e 	bl	bec <Sys_GetCoreID>
   114b0:	4603      	mov	r3, r0
   114b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   114b4:	4a10      	ldr	r2, [pc, #64]	; (114f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   114b6:	9b01      	ldr	r3, [sp, #4]
   114b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114bc:	2b00      	cmp	r3, #0
   114be:	d10d      	bne.n	114dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   114c0:	f7ef fa5a 	bl	978 <Adc_schm_read_msr>
   114c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   114c6:	9b00      	ldr	r3, [sp, #0]
   114c8:	f003 0301 	and.w	r3, r3, #1
   114cc:	2b00      	cmp	r3, #0
   114ce:	d100      	bne.n	114d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   114d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   114d2:	490a      	ldr	r1, [pc, #40]	; (114fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   114d4:	9b01      	ldr	r3, [sp, #4]
   114d6:	9a00      	ldr	r2, [sp, #0]
   114d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   114dc:	4a06      	ldr	r2, [pc, #24]	; (114f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   114de:	9b01      	ldr	r3, [sp, #4]
   114e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114e4:	1c5a      	adds	r2, r3, #1
   114e6:	4904      	ldr	r1, [pc, #16]	; (114f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   114e8:	9b01      	ldr	r3, [sp, #4]
   114ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   114ee:	bf00      	nop
   114f0:	b003      	add	sp, #12
   114f2:	f85d fb04 	ldr.w	pc, [sp], #4
   114f6:	bf00      	nop
   114f8:	1fff9498 	.word	0x1fff9498
   114fc:	1fff9494 	.word	0x1fff9494

00011500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   11500:	b500      	push	{lr}
   11502:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11504:	f7ef fb72 	bl	bec <Sys_GetCoreID>
   11508:	4603      	mov	r3, r0
   1150a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   1150c:	4a0d      	ldr	r2, [pc, #52]	; (11544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   1150e:	9b01      	ldr	r3, [sp, #4]
   11510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11514:	1e5a      	subs	r2, r3, #1
   11516:	490b      	ldr	r1, [pc, #44]	; (11544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   11518:	9b01      	ldr	r3, [sp, #4]
   1151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   1151e:	4a0a      	ldr	r2, [pc, #40]	; (11548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   11520:	9b01      	ldr	r3, [sp, #4]
   11522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11526:	f003 0301 	and.w	r3, r3, #1
   1152a:	2b00      	cmp	r3, #0
   1152c:	d106      	bne.n	1153c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   1152e:	4a05      	ldr	r2, [pc, #20]	; (11544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   11530:	9b01      	ldr	r3, [sp, #4]
   11532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11536:	2b00      	cmp	r3, #0
   11538:	d100      	bne.n	1153c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1153a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1153c:	bf00      	nop
   1153e:	b003      	add	sp, #12
   11540:	f85d fb04 	ldr.w	pc, [sp], #4
   11544:	1fff9498 	.word	0x1fff9498
   11548:	1fff9494 	.word	0x1fff9494

0001154c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   1154c:	b500      	push	{lr}
   1154e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11550:	f7ef fb4c 	bl	bec <Sys_GetCoreID>
   11554:	4603      	mov	r3, r0
   11556:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   11558:	4a10      	ldr	r2, [pc, #64]	; (1159c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   1155a:	9b01      	ldr	r3, [sp, #4]
   1155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11560:	2b00      	cmp	r3, #0
   11562:	d10d      	bne.n	11580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11564:	f7ef fa08 	bl	978 <Adc_schm_read_msr>
   11568:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1156a:	9b00      	ldr	r3, [sp, #0]
   1156c:	f003 0301 	and.w	r3, r3, #1
   11570:	2b00      	cmp	r3, #0
   11572:	d100      	bne.n	11576 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11574:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   11576:	490a      	ldr	r1, [pc, #40]	; (115a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   11578:	9b01      	ldr	r3, [sp, #4]
   1157a:	9a00      	ldr	r2, [sp, #0]
   1157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   11580:	4a06      	ldr	r2, [pc, #24]	; (1159c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   11582:	9b01      	ldr	r3, [sp, #4]
   11584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11588:	1c5a      	adds	r2, r3, #1
   1158a:	4904      	ldr	r1, [pc, #16]	; (1159c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   1158c:	9b01      	ldr	r3, [sp, #4]
   1158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11592:	bf00      	nop
   11594:	b003      	add	sp, #12
   11596:	f85d fb04 	ldr.w	pc, [sp], #4
   1159a:	bf00      	nop
   1159c:	1fff94a0 	.word	0x1fff94a0
   115a0:	1fff949c 	.word	0x1fff949c

000115a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   115a4:	b500      	push	{lr}
   115a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115a8:	f7ef fb20 	bl	bec <Sys_GetCoreID>
   115ac:	4603      	mov	r3, r0
   115ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   115b0:	4a0d      	ldr	r2, [pc, #52]	; (115e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   115b2:	9b01      	ldr	r3, [sp, #4]
   115b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115b8:	1e5a      	subs	r2, r3, #1
   115ba:	490b      	ldr	r1, [pc, #44]	; (115e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   115bc:	9b01      	ldr	r3, [sp, #4]
   115be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   115c2:	4a0a      	ldr	r2, [pc, #40]	; (115ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   115c4:	9b01      	ldr	r3, [sp, #4]
   115c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115ca:	f003 0301 	and.w	r3, r3, #1
   115ce:	2b00      	cmp	r3, #0
   115d0:	d106      	bne.n	115e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   115d2:	4a05      	ldr	r2, [pc, #20]	; (115e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   115d4:	9b01      	ldr	r3, [sp, #4]
   115d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115da:	2b00      	cmp	r3, #0
   115dc:	d100      	bne.n	115e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   115de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   115e0:	bf00      	nop
   115e2:	b003      	add	sp, #12
   115e4:	f85d fb04 	ldr.w	pc, [sp], #4
   115e8:	1fff94a0 	.word	0x1fff94a0
   115ec:	1fff949c 	.word	0x1fff949c

000115f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   115f0:	b500      	push	{lr}
   115f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115f4:	f7ef fafa 	bl	bec <Sys_GetCoreID>
   115f8:	4603      	mov	r3, r0
   115fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   115fc:	4a10      	ldr	r2, [pc, #64]	; (11640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   115fe:	9b01      	ldr	r3, [sp, #4]
   11600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11604:	2b00      	cmp	r3, #0
   11606:	d10d      	bne.n	11624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11608:	f7ef f9b6 	bl	978 <Adc_schm_read_msr>
   1160c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1160e:	9b00      	ldr	r3, [sp, #0]
   11610:	f003 0301 	and.w	r3, r3, #1
   11614:	2b00      	cmp	r3, #0
   11616:	d100      	bne.n	1161a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11618:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   1161a:	490a      	ldr	r1, [pc, #40]	; (11644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   1161c:	9b01      	ldr	r3, [sp, #4]
   1161e:	9a00      	ldr	r2, [sp, #0]
   11620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   11624:	4a06      	ldr	r2, [pc, #24]	; (11640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   11626:	9b01      	ldr	r3, [sp, #4]
   11628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1162c:	1c5a      	adds	r2, r3, #1
   1162e:	4904      	ldr	r1, [pc, #16]	; (11640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   11630:	9b01      	ldr	r3, [sp, #4]
   11632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11636:	bf00      	nop
   11638:	b003      	add	sp, #12
   1163a:	f85d fb04 	ldr.w	pc, [sp], #4
   1163e:	bf00      	nop
   11640:	1fff94a8 	.word	0x1fff94a8
   11644:	1fff94a4 	.word	0x1fff94a4

00011648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   11648:	b500      	push	{lr}
   1164a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1164c:	f7ef face 	bl	bec <Sys_GetCoreID>
   11650:	4603      	mov	r3, r0
   11652:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   11654:	4a0d      	ldr	r2, [pc, #52]	; (1168c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   11656:	9b01      	ldr	r3, [sp, #4]
   11658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1165c:	1e5a      	subs	r2, r3, #1
   1165e:	490b      	ldr	r1, [pc, #44]	; (1168c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   11660:	9b01      	ldr	r3, [sp, #4]
   11662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   11666:	4a0a      	ldr	r2, [pc, #40]	; (11690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   11668:	9b01      	ldr	r3, [sp, #4]
   1166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1166e:	f003 0301 	and.w	r3, r3, #1
   11672:	2b00      	cmp	r3, #0
   11674:	d106      	bne.n	11684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   11676:	4a05      	ldr	r2, [pc, #20]	; (1168c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   11678:	9b01      	ldr	r3, [sp, #4]
   1167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1167e:	2b00      	cmp	r3, #0
   11680:	d100      	bne.n	11684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11682:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11684:	bf00      	nop
   11686:	b003      	add	sp, #12
   11688:	f85d fb04 	ldr.w	pc, [sp], #4
   1168c:	1fff94a8 	.word	0x1fff94a8
   11690:	1fff94a4 	.word	0x1fff94a4

00011694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   11694:	b500      	push	{lr}
   11696:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11698:	f7ef faa8 	bl	bec <Sys_GetCoreID>
   1169c:	4603      	mov	r3, r0
   1169e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   116a0:	4a10      	ldr	r2, [pc, #64]	; (116e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   116a2:	9b01      	ldr	r3, [sp, #4]
   116a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116a8:	2b00      	cmp	r3, #0
   116aa:	d10d      	bne.n	116c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   116ac:	f7ef f964 	bl	978 <Adc_schm_read_msr>
   116b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   116b2:	9b00      	ldr	r3, [sp, #0]
   116b4:	f003 0301 	and.w	r3, r3, #1
   116b8:	2b00      	cmp	r3, #0
   116ba:	d100      	bne.n	116be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   116bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   116be:	490a      	ldr	r1, [pc, #40]	; (116e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   116c0:	9b01      	ldr	r3, [sp, #4]
   116c2:	9a00      	ldr	r2, [sp, #0]
   116c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   116c8:	4a06      	ldr	r2, [pc, #24]	; (116e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   116ca:	9b01      	ldr	r3, [sp, #4]
   116cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116d0:	1c5a      	adds	r2, r3, #1
   116d2:	4904      	ldr	r1, [pc, #16]	; (116e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   116d4:	9b01      	ldr	r3, [sp, #4]
   116d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   116da:	bf00      	nop
   116dc:	b003      	add	sp, #12
   116de:	f85d fb04 	ldr.w	pc, [sp], #4
   116e2:	bf00      	nop
   116e4:	1fff94b0 	.word	0x1fff94b0
   116e8:	1fff94ac 	.word	0x1fff94ac

000116ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   116ec:	b500      	push	{lr}
   116ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116f0:	f7ef fa7c 	bl	bec <Sys_GetCoreID>
   116f4:	4603      	mov	r3, r0
   116f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   116f8:	4a0d      	ldr	r2, [pc, #52]	; (11730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   116fa:	9b01      	ldr	r3, [sp, #4]
   116fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11700:	1e5a      	subs	r2, r3, #1
   11702:	490b      	ldr	r1, [pc, #44]	; (11730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   11704:	9b01      	ldr	r3, [sp, #4]
   11706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   1170a:	4a0a      	ldr	r2, [pc, #40]	; (11734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   1170c:	9b01      	ldr	r3, [sp, #4]
   1170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11712:	f003 0301 	and.w	r3, r3, #1
   11716:	2b00      	cmp	r3, #0
   11718:	d106      	bne.n	11728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   1171a:	4a05      	ldr	r2, [pc, #20]	; (11730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   1171c:	9b01      	ldr	r3, [sp, #4]
   1171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11722:	2b00      	cmp	r3, #0
   11724:	d100      	bne.n	11728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11726:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11728:	bf00      	nop
   1172a:	b003      	add	sp, #12
   1172c:	f85d fb04 	ldr.w	pc, [sp], #4
   11730:	1fff94b0 	.word	0x1fff94b0
   11734:	1fff94ac 	.word	0x1fff94ac

00011738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   11738:	b500      	push	{lr}
   1173a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1173c:	f7ef fa56 	bl	bec <Sys_GetCoreID>
   11740:	4603      	mov	r3, r0
   11742:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   11744:	4a10      	ldr	r2, [pc, #64]	; (11788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   11746:	9b01      	ldr	r3, [sp, #4]
   11748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1174c:	2b00      	cmp	r3, #0
   1174e:	d10d      	bne.n	1176c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11750:	f7ef f912 	bl	978 <Adc_schm_read_msr>
   11754:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11756:	9b00      	ldr	r3, [sp, #0]
   11758:	f003 0301 	and.w	r3, r3, #1
   1175c:	2b00      	cmp	r3, #0
   1175e:	d100      	bne.n	11762 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11760:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   11762:	490a      	ldr	r1, [pc, #40]	; (1178c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   11764:	9b01      	ldr	r3, [sp, #4]
   11766:	9a00      	ldr	r2, [sp, #0]
   11768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   1176c:	4a06      	ldr	r2, [pc, #24]	; (11788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   1176e:	9b01      	ldr	r3, [sp, #4]
   11770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11774:	1c5a      	adds	r2, r3, #1
   11776:	4904      	ldr	r1, [pc, #16]	; (11788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   11778:	9b01      	ldr	r3, [sp, #4]
   1177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1177e:	bf00      	nop
   11780:	b003      	add	sp, #12
   11782:	f85d fb04 	ldr.w	pc, [sp], #4
   11786:	bf00      	nop
   11788:	1fff94b8 	.word	0x1fff94b8
   1178c:	1fff94b4 	.word	0x1fff94b4

00011790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   11790:	b500      	push	{lr}
   11792:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11794:	f7ef fa2a 	bl	bec <Sys_GetCoreID>
   11798:	4603      	mov	r3, r0
   1179a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   1179c:	4a0d      	ldr	r2, [pc, #52]	; (117d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   1179e:	9b01      	ldr	r3, [sp, #4]
   117a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117a4:	1e5a      	subs	r2, r3, #1
   117a6:	490b      	ldr	r1, [pc, #44]	; (117d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   117a8:	9b01      	ldr	r3, [sp, #4]
   117aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   117ae:	4a0a      	ldr	r2, [pc, #40]	; (117d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   117b0:	9b01      	ldr	r3, [sp, #4]
   117b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117b6:	f003 0301 	and.w	r3, r3, #1
   117ba:	2b00      	cmp	r3, #0
   117bc:	d106      	bne.n	117cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   117be:	4a05      	ldr	r2, [pc, #20]	; (117d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   117c0:	9b01      	ldr	r3, [sp, #4]
   117c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117c6:	2b00      	cmp	r3, #0
   117c8:	d100      	bne.n	117cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   117ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   117cc:	bf00      	nop
   117ce:	b003      	add	sp, #12
   117d0:	f85d fb04 	ldr.w	pc, [sp], #4
   117d4:	1fff94b8 	.word	0x1fff94b8
   117d8:	1fff94b4 	.word	0x1fff94b4

000117dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   117dc:	b500      	push	{lr}
   117de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117e0:	f7ef fa04 	bl	bec <Sys_GetCoreID>
   117e4:	4603      	mov	r3, r0
   117e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   117e8:	4a10      	ldr	r2, [pc, #64]	; (1182c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   117ea:	9b01      	ldr	r3, [sp, #4]
   117ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117f0:	2b00      	cmp	r3, #0
   117f2:	d10d      	bne.n	11810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   117f4:	f7ef f8c0 	bl	978 <Adc_schm_read_msr>
   117f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   117fa:	9b00      	ldr	r3, [sp, #0]
   117fc:	f003 0301 	and.w	r3, r3, #1
   11800:	2b00      	cmp	r3, #0
   11802:	d100      	bne.n	11806 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11804:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   11806:	490a      	ldr	r1, [pc, #40]	; (11830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   11808:	9b01      	ldr	r3, [sp, #4]
   1180a:	9a00      	ldr	r2, [sp, #0]
   1180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   11810:	4a06      	ldr	r2, [pc, #24]	; (1182c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   11812:	9b01      	ldr	r3, [sp, #4]
   11814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11818:	1c5a      	adds	r2, r3, #1
   1181a:	4904      	ldr	r1, [pc, #16]	; (1182c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   1181c:	9b01      	ldr	r3, [sp, #4]
   1181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11822:	bf00      	nop
   11824:	b003      	add	sp, #12
   11826:	f85d fb04 	ldr.w	pc, [sp], #4
   1182a:	bf00      	nop
   1182c:	1fff94c0 	.word	0x1fff94c0
   11830:	1fff94bc 	.word	0x1fff94bc

00011834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   11834:	b500      	push	{lr}
   11836:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11838:	f7ef f9d8 	bl	bec <Sys_GetCoreID>
   1183c:	4603      	mov	r3, r0
   1183e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   11840:	4a0d      	ldr	r2, [pc, #52]	; (11878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   11842:	9b01      	ldr	r3, [sp, #4]
   11844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11848:	1e5a      	subs	r2, r3, #1
   1184a:	490b      	ldr	r1, [pc, #44]	; (11878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   1184c:	9b01      	ldr	r3, [sp, #4]
   1184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   11852:	4a0a      	ldr	r2, [pc, #40]	; (1187c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   11854:	9b01      	ldr	r3, [sp, #4]
   11856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1185a:	f003 0301 	and.w	r3, r3, #1
   1185e:	2b00      	cmp	r3, #0
   11860:	d106      	bne.n	11870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   11862:	4a05      	ldr	r2, [pc, #20]	; (11878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   11864:	9b01      	ldr	r3, [sp, #4]
   11866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1186a:	2b00      	cmp	r3, #0
   1186c:	d100      	bne.n	11870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1186e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11870:	bf00      	nop
   11872:	b003      	add	sp, #12
   11874:	f85d fb04 	ldr.w	pc, [sp], #4
   11878:	1fff94c0 	.word	0x1fff94c0
   1187c:	1fff94bc 	.word	0x1fff94bc

00011880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   11880:	b500      	push	{lr}
   11882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11884:	f7ef f9b2 	bl	bec <Sys_GetCoreID>
   11888:	4603      	mov	r3, r0
   1188a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   1188c:	4a10      	ldr	r2, [pc, #64]	; (118d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   1188e:	9b01      	ldr	r3, [sp, #4]
   11890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11894:	2b00      	cmp	r3, #0
   11896:	d10d      	bne.n	118b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11898:	f7ef f86e 	bl	978 <Adc_schm_read_msr>
   1189c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1189e:	9b00      	ldr	r3, [sp, #0]
   118a0:	f003 0301 	and.w	r3, r3, #1
   118a4:	2b00      	cmp	r3, #0
   118a6:	d100      	bne.n	118aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   118a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   118aa:	490a      	ldr	r1, [pc, #40]	; (118d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   118ac:	9b01      	ldr	r3, [sp, #4]
   118ae:	9a00      	ldr	r2, [sp, #0]
   118b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   118b4:	4a06      	ldr	r2, [pc, #24]	; (118d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   118b6:	9b01      	ldr	r3, [sp, #4]
   118b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118bc:	1c5a      	adds	r2, r3, #1
   118be:	4904      	ldr	r1, [pc, #16]	; (118d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   118c0:	9b01      	ldr	r3, [sp, #4]
   118c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   118c6:	bf00      	nop
   118c8:	b003      	add	sp, #12
   118ca:	f85d fb04 	ldr.w	pc, [sp], #4
   118ce:	bf00      	nop
   118d0:	1fff94c8 	.word	0x1fff94c8
   118d4:	1fff94c4 	.word	0x1fff94c4

000118d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   118d8:	b500      	push	{lr}
   118da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118dc:	f7ef f986 	bl	bec <Sys_GetCoreID>
   118e0:	4603      	mov	r3, r0
   118e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   118e4:	4a0d      	ldr	r2, [pc, #52]	; (1191c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   118e6:	9b01      	ldr	r3, [sp, #4]
   118e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118ec:	1e5a      	subs	r2, r3, #1
   118ee:	490b      	ldr	r1, [pc, #44]	; (1191c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   118f0:	9b01      	ldr	r3, [sp, #4]
   118f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   118f6:	4a0a      	ldr	r2, [pc, #40]	; (11920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   118f8:	9b01      	ldr	r3, [sp, #4]
   118fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118fe:	f003 0301 	and.w	r3, r3, #1
   11902:	2b00      	cmp	r3, #0
   11904:	d106      	bne.n	11914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   11906:	4a05      	ldr	r2, [pc, #20]	; (1191c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   11908:	9b01      	ldr	r3, [sp, #4]
   1190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1190e:	2b00      	cmp	r3, #0
   11910:	d100      	bne.n	11914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11914:	bf00      	nop
   11916:	b003      	add	sp, #12
   11918:	f85d fb04 	ldr.w	pc, [sp], #4
   1191c:	1fff94c8 	.word	0x1fff94c8
   11920:	1fff94c4 	.word	0x1fff94c4

00011924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   11924:	b500      	push	{lr}
   11926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11928:	f7ef f960 	bl	bec <Sys_GetCoreID>
   1192c:	4603      	mov	r3, r0
   1192e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   11930:	4a10      	ldr	r2, [pc, #64]	; (11974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   11932:	9b01      	ldr	r3, [sp, #4]
   11934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11938:	2b00      	cmp	r3, #0
   1193a:	d10d      	bne.n	11958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1193c:	f7ef f81c 	bl	978 <Adc_schm_read_msr>
   11940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11942:	9b00      	ldr	r3, [sp, #0]
   11944:	f003 0301 	and.w	r3, r3, #1
   11948:	2b00      	cmp	r3, #0
   1194a:	d100      	bne.n	1194e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1194c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   1194e:	490a      	ldr	r1, [pc, #40]	; (11978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   11950:	9b01      	ldr	r3, [sp, #4]
   11952:	9a00      	ldr	r2, [sp, #0]
   11954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   11958:	4a06      	ldr	r2, [pc, #24]	; (11974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   1195a:	9b01      	ldr	r3, [sp, #4]
   1195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11960:	1c5a      	adds	r2, r3, #1
   11962:	4904      	ldr	r1, [pc, #16]	; (11974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   11964:	9b01      	ldr	r3, [sp, #4]
   11966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1196a:	bf00      	nop
   1196c:	b003      	add	sp, #12
   1196e:	f85d fb04 	ldr.w	pc, [sp], #4
   11972:	bf00      	nop
   11974:	1fff94d0 	.word	0x1fff94d0
   11978:	1fff94cc 	.word	0x1fff94cc

0001197c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   1197c:	b500      	push	{lr}
   1197e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11980:	f7ef f934 	bl	bec <Sys_GetCoreID>
   11984:	4603      	mov	r3, r0
   11986:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   11988:	4a0d      	ldr	r2, [pc, #52]	; (119c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   1198a:	9b01      	ldr	r3, [sp, #4]
   1198c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11990:	1e5a      	subs	r2, r3, #1
   11992:	490b      	ldr	r1, [pc, #44]	; (119c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   11994:	9b01      	ldr	r3, [sp, #4]
   11996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   1199a:	4a0a      	ldr	r2, [pc, #40]	; (119c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   1199c:	9b01      	ldr	r3, [sp, #4]
   1199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119a2:	f003 0301 	and.w	r3, r3, #1
   119a6:	2b00      	cmp	r3, #0
   119a8:	d106      	bne.n	119b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   119aa:	4a05      	ldr	r2, [pc, #20]	; (119c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   119ac:	9b01      	ldr	r3, [sp, #4]
   119ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119b2:	2b00      	cmp	r3, #0
   119b4:	d100      	bne.n	119b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   119b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   119b8:	bf00      	nop
   119ba:	b003      	add	sp, #12
   119bc:	f85d fb04 	ldr.w	pc, [sp], #4
   119c0:	1fff94d0 	.word	0x1fff94d0
   119c4:	1fff94cc 	.word	0x1fff94cc

000119c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   119c8:	b500      	push	{lr}
   119ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119cc:	f7ef f90e 	bl	bec <Sys_GetCoreID>
   119d0:	4603      	mov	r3, r0
   119d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   119d4:	4a10      	ldr	r2, [pc, #64]	; (11a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   119d6:	9b01      	ldr	r3, [sp, #4]
   119d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119dc:	2b00      	cmp	r3, #0
   119de:	d10d      	bne.n	119fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   119e0:	f7ee ffca 	bl	978 <Adc_schm_read_msr>
   119e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   119e6:	9b00      	ldr	r3, [sp, #0]
   119e8:	f003 0301 	and.w	r3, r3, #1
   119ec:	2b00      	cmp	r3, #0
   119ee:	d100      	bne.n	119f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   119f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   119f2:	490a      	ldr	r1, [pc, #40]	; (11a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   119f4:	9b01      	ldr	r3, [sp, #4]
   119f6:	9a00      	ldr	r2, [sp, #0]
   119f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   119fc:	4a06      	ldr	r2, [pc, #24]	; (11a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   119fe:	9b01      	ldr	r3, [sp, #4]
   11a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a04:	1c5a      	adds	r2, r3, #1
   11a06:	4904      	ldr	r1, [pc, #16]	; (11a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11a08:	9b01      	ldr	r3, [sp, #4]
   11a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a0e:	bf00      	nop
   11a10:	b003      	add	sp, #12
   11a12:	f85d fb04 	ldr.w	pc, [sp], #4
   11a16:	bf00      	nop
   11a18:	1fff94d8 	.word	0x1fff94d8
   11a1c:	1fff94d4 	.word	0x1fff94d4

00011a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   11a20:	b500      	push	{lr}
   11a22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a24:	f7ef f8e2 	bl	bec <Sys_GetCoreID>
   11a28:	4603      	mov	r3, r0
   11a2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   11a2c:	4a0d      	ldr	r2, [pc, #52]	; (11a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11a2e:	9b01      	ldr	r3, [sp, #4]
   11a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a34:	1e5a      	subs	r2, r3, #1
   11a36:	490b      	ldr	r1, [pc, #44]	; (11a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11a38:	9b01      	ldr	r3, [sp, #4]
   11a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   11a3e:	4a0a      	ldr	r2, [pc, #40]	; (11a68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   11a40:	9b01      	ldr	r3, [sp, #4]
   11a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a46:	f003 0301 	and.w	r3, r3, #1
   11a4a:	2b00      	cmp	r3, #0
   11a4c:	d106      	bne.n	11a5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   11a4e:	4a05      	ldr	r2, [pc, #20]	; (11a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11a50:	9b01      	ldr	r3, [sp, #4]
   11a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a56:	2b00      	cmp	r3, #0
   11a58:	d100      	bne.n	11a5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a5c:	bf00      	nop
   11a5e:	b003      	add	sp, #12
   11a60:	f85d fb04 	ldr.w	pc, [sp], #4
   11a64:	1fff94d8 	.word	0x1fff94d8
   11a68:	1fff94d4 	.word	0x1fff94d4

00011a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11a6c:	b500      	push	{lr}
   11a6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a70:	f7ef f8bc 	bl	bec <Sys_GetCoreID>
   11a74:	4603      	mov	r3, r0
   11a76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   11a78:	4a10      	ldr	r2, [pc, #64]	; (11abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11a7a:	9b01      	ldr	r3, [sp, #4]
   11a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a80:	2b00      	cmp	r3, #0
   11a82:	d10d      	bne.n	11aa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a84:	f7ee ff78 	bl	978 <Adc_schm_read_msr>
   11a88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a8a:	9b00      	ldr	r3, [sp, #0]
   11a8c:	f003 0301 	and.w	r3, r3, #1
   11a90:	2b00      	cmp	r3, #0
   11a92:	d100      	bne.n	11a96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   11a96:	490a      	ldr	r1, [pc, #40]	; (11ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   11a98:	9b01      	ldr	r3, [sp, #4]
   11a9a:	9a00      	ldr	r2, [sp, #0]
   11a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   11aa0:	4a06      	ldr	r2, [pc, #24]	; (11abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11aa2:	9b01      	ldr	r3, [sp, #4]
   11aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11aa8:	1c5a      	adds	r2, r3, #1
   11aaa:	4904      	ldr	r1, [pc, #16]	; (11abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11aac:	9b01      	ldr	r3, [sp, #4]
   11aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ab2:	bf00      	nop
   11ab4:	b003      	add	sp, #12
   11ab6:	f85d fb04 	ldr.w	pc, [sp], #4
   11aba:	bf00      	nop
   11abc:	1fff94e0 	.word	0x1fff94e0
   11ac0:	1fff94dc 	.word	0x1fff94dc

00011ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11ac4:	b500      	push	{lr}
   11ac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ac8:	f7ef f890 	bl	bec <Sys_GetCoreID>
   11acc:	4603      	mov	r3, r0
   11ace:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   11ad0:	4a0d      	ldr	r2, [pc, #52]	; (11b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11ad2:	9b01      	ldr	r3, [sp, #4]
   11ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ad8:	1e5a      	subs	r2, r3, #1
   11ada:	490b      	ldr	r1, [pc, #44]	; (11b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11adc:	9b01      	ldr	r3, [sp, #4]
   11ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   11ae2:	4a0a      	ldr	r2, [pc, #40]	; (11b0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   11ae4:	9b01      	ldr	r3, [sp, #4]
   11ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11aea:	f003 0301 	and.w	r3, r3, #1
   11aee:	2b00      	cmp	r3, #0
   11af0:	d106      	bne.n	11b00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   11af2:	4a05      	ldr	r2, [pc, #20]	; (11b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11af4:	9b01      	ldr	r3, [sp, #4]
   11af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11afa:	2b00      	cmp	r3, #0
   11afc:	d100      	bne.n	11b00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11afe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b00:	bf00      	nop
   11b02:	b003      	add	sp, #12
   11b04:	f85d fb04 	ldr.w	pc, [sp], #4
   11b08:	1fff94e0 	.word	0x1fff94e0
   11b0c:	1fff94dc 	.word	0x1fff94dc

00011b10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11b10:	b500      	push	{lr}
   11b12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b14:	f7ef f86a 	bl	bec <Sys_GetCoreID>
   11b18:	4603      	mov	r3, r0
   11b1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   11b1c:	4a10      	ldr	r2, [pc, #64]	; (11b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11b1e:	9b01      	ldr	r3, [sp, #4]
   11b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b24:	2b00      	cmp	r3, #0
   11b26:	d10d      	bne.n	11b44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b28:	f7ee ff26 	bl	978 <Adc_schm_read_msr>
   11b2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b2e:	9b00      	ldr	r3, [sp, #0]
   11b30:	f003 0301 	and.w	r3, r3, #1
   11b34:	2b00      	cmp	r3, #0
   11b36:	d100      	bne.n	11b3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   11b3a:	490a      	ldr	r1, [pc, #40]	; (11b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   11b3c:	9b01      	ldr	r3, [sp, #4]
   11b3e:	9a00      	ldr	r2, [sp, #0]
   11b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   11b44:	4a06      	ldr	r2, [pc, #24]	; (11b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11b46:	9b01      	ldr	r3, [sp, #4]
   11b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b4c:	1c5a      	adds	r2, r3, #1
   11b4e:	4904      	ldr	r1, [pc, #16]	; (11b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11b50:	9b01      	ldr	r3, [sp, #4]
   11b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b56:	bf00      	nop
   11b58:	b003      	add	sp, #12
   11b5a:	f85d fb04 	ldr.w	pc, [sp], #4
   11b5e:	bf00      	nop
   11b60:	1fff94e8 	.word	0x1fff94e8
   11b64:	1fff94e4 	.word	0x1fff94e4

00011b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11b68:	b500      	push	{lr}
   11b6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b6c:	f7ef f83e 	bl	bec <Sys_GetCoreID>
   11b70:	4603      	mov	r3, r0
   11b72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   11b74:	4a0d      	ldr	r2, [pc, #52]	; (11bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11b76:	9b01      	ldr	r3, [sp, #4]
   11b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b7c:	1e5a      	subs	r2, r3, #1
   11b7e:	490b      	ldr	r1, [pc, #44]	; (11bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11b80:	9b01      	ldr	r3, [sp, #4]
   11b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   11b86:	4a0a      	ldr	r2, [pc, #40]	; (11bb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   11b88:	9b01      	ldr	r3, [sp, #4]
   11b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b8e:	f003 0301 	and.w	r3, r3, #1
   11b92:	2b00      	cmp	r3, #0
   11b94:	d106      	bne.n	11ba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   11b96:	4a05      	ldr	r2, [pc, #20]	; (11bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11b98:	9b01      	ldr	r3, [sp, #4]
   11b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b9e:	2b00      	cmp	r3, #0
   11ba0:	d100      	bne.n	11ba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ba4:	bf00      	nop
   11ba6:	b003      	add	sp, #12
   11ba8:	f85d fb04 	ldr.w	pc, [sp], #4
   11bac:	1fff94e8 	.word	0x1fff94e8
   11bb0:	1fff94e4 	.word	0x1fff94e4

00011bb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11bb4:	b500      	push	{lr}
   11bb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bb8:	f7ef f818 	bl	bec <Sys_GetCoreID>
   11bbc:	4603      	mov	r3, r0
   11bbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   11bc0:	4a10      	ldr	r2, [pc, #64]	; (11c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11bc2:	9b01      	ldr	r3, [sp, #4]
   11bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bc8:	2b00      	cmp	r3, #0
   11bca:	d10d      	bne.n	11be8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11bcc:	f7ee fed4 	bl	978 <Adc_schm_read_msr>
   11bd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11bd2:	9b00      	ldr	r3, [sp, #0]
   11bd4:	f003 0301 	and.w	r3, r3, #1
   11bd8:	2b00      	cmp	r3, #0
   11bda:	d100      	bne.n	11bde <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11bdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   11bde:	490a      	ldr	r1, [pc, #40]	; (11c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   11be0:	9b01      	ldr	r3, [sp, #4]
   11be2:	9a00      	ldr	r2, [sp, #0]
   11be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   11be8:	4a06      	ldr	r2, [pc, #24]	; (11c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11bea:	9b01      	ldr	r3, [sp, #4]
   11bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bf0:	1c5a      	adds	r2, r3, #1
   11bf2:	4904      	ldr	r1, [pc, #16]	; (11c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11bf4:	9b01      	ldr	r3, [sp, #4]
   11bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11bfa:	bf00      	nop
   11bfc:	b003      	add	sp, #12
   11bfe:	f85d fb04 	ldr.w	pc, [sp], #4
   11c02:	bf00      	nop
   11c04:	1fff94f0 	.word	0x1fff94f0
   11c08:	1fff94ec 	.word	0x1fff94ec

00011c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11c0c:	b500      	push	{lr}
   11c0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c10:	f7ee ffec 	bl	bec <Sys_GetCoreID>
   11c14:	4603      	mov	r3, r0
   11c16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   11c18:	4a0d      	ldr	r2, [pc, #52]	; (11c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11c1a:	9b01      	ldr	r3, [sp, #4]
   11c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c20:	1e5a      	subs	r2, r3, #1
   11c22:	490b      	ldr	r1, [pc, #44]	; (11c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11c24:	9b01      	ldr	r3, [sp, #4]
   11c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   11c2a:	4a0a      	ldr	r2, [pc, #40]	; (11c54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   11c2c:	9b01      	ldr	r3, [sp, #4]
   11c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c32:	f003 0301 	and.w	r3, r3, #1
   11c36:	2b00      	cmp	r3, #0
   11c38:	d106      	bne.n	11c48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   11c3a:	4a05      	ldr	r2, [pc, #20]	; (11c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11c3c:	9b01      	ldr	r3, [sp, #4]
   11c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c42:	2b00      	cmp	r3, #0
   11c44:	d100      	bne.n	11c48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c48:	bf00      	nop
   11c4a:	b003      	add	sp, #12
   11c4c:	f85d fb04 	ldr.w	pc, [sp], #4
   11c50:	1fff94f0 	.word	0x1fff94f0
   11c54:	1fff94ec 	.word	0x1fff94ec

00011c58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11c58:	b500      	push	{lr}
   11c5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c5c:	f7ee ffc6 	bl	bec <Sys_GetCoreID>
   11c60:	4603      	mov	r3, r0
   11c62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   11c64:	4a10      	ldr	r2, [pc, #64]	; (11ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11c66:	9b01      	ldr	r3, [sp, #4]
   11c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c6c:	2b00      	cmp	r3, #0
   11c6e:	d10d      	bne.n	11c8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c70:	f7ee fe82 	bl	978 <Adc_schm_read_msr>
   11c74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c76:	9b00      	ldr	r3, [sp, #0]
   11c78:	f003 0301 	and.w	r3, r3, #1
   11c7c:	2b00      	cmp	r3, #0
   11c7e:	d100      	bne.n	11c82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   11c82:	490a      	ldr	r1, [pc, #40]	; (11cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   11c84:	9b01      	ldr	r3, [sp, #4]
   11c86:	9a00      	ldr	r2, [sp, #0]
   11c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   11c8c:	4a06      	ldr	r2, [pc, #24]	; (11ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11c8e:	9b01      	ldr	r3, [sp, #4]
   11c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c94:	1c5a      	adds	r2, r3, #1
   11c96:	4904      	ldr	r1, [pc, #16]	; (11ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11c98:	9b01      	ldr	r3, [sp, #4]
   11c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c9e:	bf00      	nop
   11ca0:	b003      	add	sp, #12
   11ca2:	f85d fb04 	ldr.w	pc, [sp], #4
   11ca6:	bf00      	nop
   11ca8:	1fff94f8 	.word	0x1fff94f8
   11cac:	1fff94f4 	.word	0x1fff94f4

00011cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11cb0:	b500      	push	{lr}
   11cb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cb4:	f7ee ff9a 	bl	bec <Sys_GetCoreID>
   11cb8:	4603      	mov	r3, r0
   11cba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   11cbc:	4a0d      	ldr	r2, [pc, #52]	; (11cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11cbe:	9b01      	ldr	r3, [sp, #4]
   11cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cc4:	1e5a      	subs	r2, r3, #1
   11cc6:	490b      	ldr	r1, [pc, #44]	; (11cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11cc8:	9b01      	ldr	r3, [sp, #4]
   11cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   11cce:	4a0a      	ldr	r2, [pc, #40]	; (11cf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   11cd0:	9b01      	ldr	r3, [sp, #4]
   11cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cd6:	f003 0301 	and.w	r3, r3, #1
   11cda:	2b00      	cmp	r3, #0
   11cdc:	d106      	bne.n	11cec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   11cde:	4a05      	ldr	r2, [pc, #20]	; (11cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11ce0:	9b01      	ldr	r3, [sp, #4]
   11ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ce6:	2b00      	cmp	r3, #0
   11ce8:	d100      	bne.n	11cec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11cea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11cec:	bf00      	nop
   11cee:	b003      	add	sp, #12
   11cf0:	f85d fb04 	ldr.w	pc, [sp], #4
   11cf4:	1fff94f8 	.word	0x1fff94f8
   11cf8:	1fff94f4 	.word	0x1fff94f4

00011cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11cfc:	b500      	push	{lr}
   11cfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d00:	f7ee ff74 	bl	bec <Sys_GetCoreID>
   11d04:	4603      	mov	r3, r0
   11d06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   11d08:	4a10      	ldr	r2, [pc, #64]	; (11d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11d0a:	9b01      	ldr	r3, [sp, #4]
   11d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d10:	2b00      	cmp	r3, #0
   11d12:	d10d      	bne.n	11d30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d14:	f7ee fe30 	bl	978 <Adc_schm_read_msr>
   11d18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d1a:	9b00      	ldr	r3, [sp, #0]
   11d1c:	f003 0301 	and.w	r3, r3, #1
   11d20:	2b00      	cmp	r3, #0
   11d22:	d100      	bne.n	11d26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   11d26:	490a      	ldr	r1, [pc, #40]	; (11d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   11d28:	9b01      	ldr	r3, [sp, #4]
   11d2a:	9a00      	ldr	r2, [sp, #0]
   11d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   11d30:	4a06      	ldr	r2, [pc, #24]	; (11d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11d32:	9b01      	ldr	r3, [sp, #4]
   11d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d38:	1c5a      	adds	r2, r3, #1
   11d3a:	4904      	ldr	r1, [pc, #16]	; (11d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11d3c:	9b01      	ldr	r3, [sp, #4]
   11d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d42:	bf00      	nop
   11d44:	b003      	add	sp, #12
   11d46:	f85d fb04 	ldr.w	pc, [sp], #4
   11d4a:	bf00      	nop
   11d4c:	1fff9500 	.word	0x1fff9500
   11d50:	1fff94fc 	.word	0x1fff94fc

00011d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11d54:	b500      	push	{lr}
   11d56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d58:	f7ee ff48 	bl	bec <Sys_GetCoreID>
   11d5c:	4603      	mov	r3, r0
   11d5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   11d60:	4a0d      	ldr	r2, [pc, #52]	; (11d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11d62:	9b01      	ldr	r3, [sp, #4]
   11d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d68:	1e5a      	subs	r2, r3, #1
   11d6a:	490b      	ldr	r1, [pc, #44]	; (11d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11d6c:	9b01      	ldr	r3, [sp, #4]
   11d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   11d72:	4a0a      	ldr	r2, [pc, #40]	; (11d9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   11d74:	9b01      	ldr	r3, [sp, #4]
   11d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d7a:	f003 0301 	and.w	r3, r3, #1
   11d7e:	2b00      	cmp	r3, #0
   11d80:	d106      	bne.n	11d90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   11d82:	4a05      	ldr	r2, [pc, #20]	; (11d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11d84:	9b01      	ldr	r3, [sp, #4]
   11d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d8a:	2b00      	cmp	r3, #0
   11d8c:	d100      	bne.n	11d90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d90:	bf00      	nop
   11d92:	b003      	add	sp, #12
   11d94:	f85d fb04 	ldr.w	pc, [sp], #4
   11d98:	1fff9500 	.word	0x1fff9500
   11d9c:	1fff94fc 	.word	0x1fff94fc

00011da0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11da0:	b500      	push	{lr}
   11da2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11da4:	f7ee ff22 	bl	bec <Sys_GetCoreID>
   11da8:	4603      	mov	r3, r0
   11daa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   11dac:	4a10      	ldr	r2, [pc, #64]	; (11df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11dae:	9b01      	ldr	r3, [sp, #4]
   11db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11db4:	2b00      	cmp	r3, #0
   11db6:	d10d      	bne.n	11dd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11db8:	f7ee fdde 	bl	978 <Adc_schm_read_msr>
   11dbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11dbe:	9b00      	ldr	r3, [sp, #0]
   11dc0:	f003 0301 	and.w	r3, r3, #1
   11dc4:	2b00      	cmp	r3, #0
   11dc6:	d100      	bne.n	11dca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11dc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   11dca:	490a      	ldr	r1, [pc, #40]	; (11df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   11dcc:	9b01      	ldr	r3, [sp, #4]
   11dce:	9a00      	ldr	r2, [sp, #0]
   11dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   11dd4:	4a06      	ldr	r2, [pc, #24]	; (11df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11dd6:	9b01      	ldr	r3, [sp, #4]
   11dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ddc:	1c5a      	adds	r2, r3, #1
   11dde:	4904      	ldr	r1, [pc, #16]	; (11df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11de0:	9b01      	ldr	r3, [sp, #4]
   11de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11de6:	bf00      	nop
   11de8:	b003      	add	sp, #12
   11dea:	f85d fb04 	ldr.w	pc, [sp], #4
   11dee:	bf00      	nop
   11df0:	1fff9508 	.word	0x1fff9508
   11df4:	1fff9504 	.word	0x1fff9504

00011df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11df8:	b500      	push	{lr}
   11dfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11dfc:	f7ee fef6 	bl	bec <Sys_GetCoreID>
   11e00:	4603      	mov	r3, r0
   11e02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   11e04:	4a0d      	ldr	r2, [pc, #52]	; (11e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11e06:	9b01      	ldr	r3, [sp, #4]
   11e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e0c:	1e5a      	subs	r2, r3, #1
   11e0e:	490b      	ldr	r1, [pc, #44]	; (11e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11e10:	9b01      	ldr	r3, [sp, #4]
   11e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   11e16:	4a0a      	ldr	r2, [pc, #40]	; (11e40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   11e18:	9b01      	ldr	r3, [sp, #4]
   11e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e1e:	f003 0301 	and.w	r3, r3, #1
   11e22:	2b00      	cmp	r3, #0
   11e24:	d106      	bne.n	11e34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   11e26:	4a05      	ldr	r2, [pc, #20]	; (11e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11e28:	9b01      	ldr	r3, [sp, #4]
   11e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e2e:	2b00      	cmp	r3, #0
   11e30:	d100      	bne.n	11e34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e34:	bf00      	nop
   11e36:	b003      	add	sp, #12
   11e38:	f85d fb04 	ldr.w	pc, [sp], #4
   11e3c:	1fff9508 	.word	0x1fff9508
   11e40:	1fff9504 	.word	0x1fff9504

00011e44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11e44:	b500      	push	{lr}
   11e46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e48:	f7ee fed0 	bl	bec <Sys_GetCoreID>
   11e4c:	4603      	mov	r3, r0
   11e4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   11e50:	4a10      	ldr	r2, [pc, #64]	; (11e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11e52:	9b01      	ldr	r3, [sp, #4]
   11e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e58:	2b00      	cmp	r3, #0
   11e5a:	d10d      	bne.n	11e78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e5c:	f7ee fd8c 	bl	978 <Adc_schm_read_msr>
   11e60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e62:	9b00      	ldr	r3, [sp, #0]
   11e64:	f003 0301 	and.w	r3, r3, #1
   11e68:	2b00      	cmp	r3, #0
   11e6a:	d100      	bne.n	11e6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   11e6e:	490a      	ldr	r1, [pc, #40]	; (11e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   11e70:	9b01      	ldr	r3, [sp, #4]
   11e72:	9a00      	ldr	r2, [sp, #0]
   11e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   11e78:	4a06      	ldr	r2, [pc, #24]	; (11e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11e7a:	9b01      	ldr	r3, [sp, #4]
   11e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e80:	1c5a      	adds	r2, r3, #1
   11e82:	4904      	ldr	r1, [pc, #16]	; (11e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11e84:	9b01      	ldr	r3, [sp, #4]
   11e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e8a:	bf00      	nop
   11e8c:	b003      	add	sp, #12
   11e8e:	f85d fb04 	ldr.w	pc, [sp], #4
   11e92:	bf00      	nop
   11e94:	1fff9510 	.word	0x1fff9510
   11e98:	1fff950c 	.word	0x1fff950c

00011e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11e9c:	b500      	push	{lr}
   11e9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ea0:	f7ee fea4 	bl	bec <Sys_GetCoreID>
   11ea4:	4603      	mov	r3, r0
   11ea6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   11ea8:	4a0d      	ldr	r2, [pc, #52]	; (11ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11eaa:	9b01      	ldr	r3, [sp, #4]
   11eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11eb0:	1e5a      	subs	r2, r3, #1
   11eb2:	490b      	ldr	r1, [pc, #44]	; (11ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11eb4:	9b01      	ldr	r3, [sp, #4]
   11eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   11eba:	4a0a      	ldr	r2, [pc, #40]	; (11ee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   11ebc:	9b01      	ldr	r3, [sp, #4]
   11ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ec2:	f003 0301 	and.w	r3, r3, #1
   11ec6:	2b00      	cmp	r3, #0
   11ec8:	d106      	bne.n	11ed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   11eca:	4a05      	ldr	r2, [pc, #20]	; (11ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11ecc:	9b01      	ldr	r3, [sp, #4]
   11ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ed2:	2b00      	cmp	r3, #0
   11ed4:	d100      	bne.n	11ed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ed6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ed8:	bf00      	nop
   11eda:	b003      	add	sp, #12
   11edc:	f85d fb04 	ldr.w	pc, [sp], #4
   11ee0:	1fff9510 	.word	0x1fff9510
   11ee4:	1fff950c 	.word	0x1fff950c

00011ee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11ee8:	b500      	push	{lr}
   11eea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11eec:	f7ee fe7e 	bl	bec <Sys_GetCoreID>
   11ef0:	4603      	mov	r3, r0
   11ef2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   11ef4:	4a10      	ldr	r2, [pc, #64]	; (11f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11ef6:	9b01      	ldr	r3, [sp, #4]
   11ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11efc:	2b00      	cmp	r3, #0
   11efe:	d10d      	bne.n	11f1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f00:	f7ee fd3a 	bl	978 <Adc_schm_read_msr>
   11f04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f06:	9b00      	ldr	r3, [sp, #0]
   11f08:	f003 0301 	and.w	r3, r3, #1
   11f0c:	2b00      	cmp	r3, #0
   11f0e:	d100      	bne.n	11f12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   11f12:	490a      	ldr	r1, [pc, #40]	; (11f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   11f14:	9b01      	ldr	r3, [sp, #4]
   11f16:	9a00      	ldr	r2, [sp, #0]
   11f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   11f1c:	4a06      	ldr	r2, [pc, #24]	; (11f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11f1e:	9b01      	ldr	r3, [sp, #4]
   11f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f24:	1c5a      	adds	r2, r3, #1
   11f26:	4904      	ldr	r1, [pc, #16]	; (11f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11f28:	9b01      	ldr	r3, [sp, #4]
   11f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f2e:	bf00      	nop
   11f30:	b003      	add	sp, #12
   11f32:	f85d fb04 	ldr.w	pc, [sp], #4
   11f36:	bf00      	nop
   11f38:	1fff9518 	.word	0x1fff9518
   11f3c:	1fff9514 	.word	0x1fff9514

00011f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11f40:	b500      	push	{lr}
   11f42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f44:	f7ee fe52 	bl	bec <Sys_GetCoreID>
   11f48:	4603      	mov	r3, r0
   11f4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   11f4c:	4a0d      	ldr	r2, [pc, #52]	; (11f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11f4e:	9b01      	ldr	r3, [sp, #4]
   11f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f54:	1e5a      	subs	r2, r3, #1
   11f56:	490b      	ldr	r1, [pc, #44]	; (11f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11f58:	9b01      	ldr	r3, [sp, #4]
   11f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   11f5e:	4a0a      	ldr	r2, [pc, #40]	; (11f88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   11f60:	9b01      	ldr	r3, [sp, #4]
   11f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f66:	f003 0301 	and.w	r3, r3, #1
   11f6a:	2b00      	cmp	r3, #0
   11f6c:	d106      	bne.n	11f7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   11f6e:	4a05      	ldr	r2, [pc, #20]	; (11f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11f70:	9b01      	ldr	r3, [sp, #4]
   11f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f76:	2b00      	cmp	r3, #0
   11f78:	d100      	bne.n	11f7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f7c:	bf00      	nop
   11f7e:	b003      	add	sp, #12
   11f80:	f85d fb04 	ldr.w	pc, [sp], #4
   11f84:	1fff9518 	.word	0x1fff9518
   11f88:	1fff9514 	.word	0x1fff9514

00011f8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   11f8c:	b500      	push	{lr}
   11f8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f90:	f7ee fe2c 	bl	bec <Sys_GetCoreID>
   11f94:	4603      	mov	r3, r0
   11f96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   11f98:	4a10      	ldr	r2, [pc, #64]	; (11fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11f9a:	9b01      	ldr	r3, [sp, #4]
   11f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fa0:	2b00      	cmp	r3, #0
   11fa2:	d10d      	bne.n	11fc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11fa4:	f7ee fce8 	bl	978 <Adc_schm_read_msr>
   11fa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11faa:	9b00      	ldr	r3, [sp, #0]
   11fac:	f003 0301 	and.w	r3, r3, #1
   11fb0:	2b00      	cmp	r3, #0
   11fb2:	d100      	bne.n	11fb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11fb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   11fb6:	490a      	ldr	r1, [pc, #40]	; (11fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   11fb8:	9b01      	ldr	r3, [sp, #4]
   11fba:	9a00      	ldr	r2, [sp, #0]
   11fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   11fc0:	4a06      	ldr	r2, [pc, #24]	; (11fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11fc2:	9b01      	ldr	r3, [sp, #4]
   11fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fc8:	1c5a      	adds	r2, r3, #1
   11fca:	4904      	ldr	r1, [pc, #16]	; (11fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11fcc:	9b01      	ldr	r3, [sp, #4]
   11fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11fd2:	bf00      	nop
   11fd4:	b003      	add	sp, #12
   11fd6:	f85d fb04 	ldr.w	pc, [sp], #4
   11fda:	bf00      	nop
   11fdc:	1fff9520 	.word	0x1fff9520
   11fe0:	1fff951c 	.word	0x1fff951c

00011fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   11fe4:	b500      	push	{lr}
   11fe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fe8:	f7ee fe00 	bl	bec <Sys_GetCoreID>
   11fec:	4603      	mov	r3, r0
   11fee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   11ff0:	4a0d      	ldr	r2, [pc, #52]	; (12028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   11ff2:	9b01      	ldr	r3, [sp, #4]
   11ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ff8:	1e5a      	subs	r2, r3, #1
   11ffa:	490b      	ldr	r1, [pc, #44]	; (12028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   11ffc:	9b01      	ldr	r3, [sp, #4]
   11ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   12002:	4a0a      	ldr	r2, [pc, #40]	; (1202c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   12004:	9b01      	ldr	r3, [sp, #4]
   12006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1200a:	f003 0301 	and.w	r3, r3, #1
   1200e:	2b00      	cmp	r3, #0
   12010:	d106      	bne.n	12020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   12012:	4a05      	ldr	r2, [pc, #20]	; (12028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   12014:	9b01      	ldr	r3, [sp, #4]
   12016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1201a:	2b00      	cmp	r3, #0
   1201c:	d100      	bne.n	12020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1201e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12020:	bf00      	nop
   12022:	b003      	add	sp, #12
   12024:	f85d fb04 	ldr.w	pc, [sp], #4
   12028:	1fff9520 	.word	0x1fff9520
   1202c:	1fff951c 	.word	0x1fff951c

00012030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   12030:	b500      	push	{lr}
   12032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12034:	f7ee fdda 	bl	bec <Sys_GetCoreID>
   12038:	4603      	mov	r3, r0
   1203a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   1203c:	4a10      	ldr	r2, [pc, #64]	; (12080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1203e:	9b01      	ldr	r3, [sp, #4]
   12040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12044:	2b00      	cmp	r3, #0
   12046:	d10d      	bne.n	12064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12048:	f7ee fc96 	bl	978 <Adc_schm_read_msr>
   1204c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1204e:	9b00      	ldr	r3, [sp, #0]
   12050:	f003 0301 	and.w	r3, r3, #1
   12054:	2b00      	cmp	r3, #0
   12056:	d100      	bne.n	1205a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   1205a:	490a      	ldr	r1, [pc, #40]	; (12084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   1205c:	9b01      	ldr	r3, [sp, #4]
   1205e:	9a00      	ldr	r2, [sp, #0]
   12060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   12064:	4a06      	ldr	r2, [pc, #24]	; (12080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   12066:	9b01      	ldr	r3, [sp, #4]
   12068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1206c:	1c5a      	adds	r2, r3, #1
   1206e:	4904      	ldr	r1, [pc, #16]	; (12080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   12070:	9b01      	ldr	r3, [sp, #4]
   12072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12076:	bf00      	nop
   12078:	b003      	add	sp, #12
   1207a:	f85d fb04 	ldr.w	pc, [sp], #4
   1207e:	bf00      	nop
   12080:	1fff9528 	.word	0x1fff9528
   12084:	1fff9524 	.word	0x1fff9524

00012088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   12088:	b500      	push	{lr}
   1208a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1208c:	f7ee fdae 	bl	bec <Sys_GetCoreID>
   12090:	4603      	mov	r3, r0
   12092:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   12094:	4a0d      	ldr	r2, [pc, #52]	; (120cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   12096:	9b01      	ldr	r3, [sp, #4]
   12098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1209c:	1e5a      	subs	r2, r3, #1
   1209e:	490b      	ldr	r1, [pc, #44]	; (120cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   120a0:	9b01      	ldr	r3, [sp, #4]
   120a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   120a6:	4a0a      	ldr	r2, [pc, #40]	; (120d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   120a8:	9b01      	ldr	r3, [sp, #4]
   120aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120ae:	f003 0301 	and.w	r3, r3, #1
   120b2:	2b00      	cmp	r3, #0
   120b4:	d106      	bne.n	120c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   120b6:	4a05      	ldr	r2, [pc, #20]	; (120cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   120b8:	9b01      	ldr	r3, [sp, #4]
   120ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120be:	2b00      	cmp	r3, #0
   120c0:	d100      	bne.n	120c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   120c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   120c4:	bf00      	nop
   120c6:	b003      	add	sp, #12
   120c8:	f85d fb04 	ldr.w	pc, [sp], #4
   120cc:	1fff9528 	.word	0x1fff9528
   120d0:	1fff9524 	.word	0x1fff9524

000120d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   120d4:	b500      	push	{lr}
   120d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120d8:	f7ee fd88 	bl	bec <Sys_GetCoreID>
   120dc:	4603      	mov	r3, r0
   120de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   120e0:	4a10      	ldr	r2, [pc, #64]	; (12124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   120e2:	9b01      	ldr	r3, [sp, #4]
   120e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120e8:	2b00      	cmp	r3, #0
   120ea:	d10d      	bne.n	12108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   120ec:	f7ee fc44 	bl	978 <Adc_schm_read_msr>
   120f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   120f2:	9b00      	ldr	r3, [sp, #0]
   120f4:	f003 0301 	and.w	r3, r3, #1
   120f8:	2b00      	cmp	r3, #0
   120fa:	d100      	bne.n	120fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   120fe:	490a      	ldr	r1, [pc, #40]	; (12128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   12100:	9b01      	ldr	r3, [sp, #4]
   12102:	9a00      	ldr	r2, [sp, #0]
   12104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   12108:	4a06      	ldr	r2, [pc, #24]	; (12124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   1210a:	9b01      	ldr	r3, [sp, #4]
   1210c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12110:	1c5a      	adds	r2, r3, #1
   12112:	4904      	ldr	r1, [pc, #16]	; (12124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   12114:	9b01      	ldr	r3, [sp, #4]
   12116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1211a:	bf00      	nop
   1211c:	b003      	add	sp, #12
   1211e:	f85d fb04 	ldr.w	pc, [sp], #4
   12122:	bf00      	nop
   12124:	1fff9530 	.word	0x1fff9530
   12128:	1fff952c 	.word	0x1fff952c

0001212c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   1212c:	b500      	push	{lr}
   1212e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12130:	f7ee fd5c 	bl	bec <Sys_GetCoreID>
   12134:	4603      	mov	r3, r0
   12136:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   12138:	4a0d      	ldr	r2, [pc, #52]	; (12170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   1213a:	9b01      	ldr	r3, [sp, #4]
   1213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12140:	1e5a      	subs	r2, r3, #1
   12142:	490b      	ldr	r1, [pc, #44]	; (12170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   12144:	9b01      	ldr	r3, [sp, #4]
   12146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   1214a:	4a0a      	ldr	r2, [pc, #40]	; (12174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   1214c:	9b01      	ldr	r3, [sp, #4]
   1214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12152:	f003 0301 	and.w	r3, r3, #1
   12156:	2b00      	cmp	r3, #0
   12158:	d106      	bne.n	12168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   1215a:	4a05      	ldr	r2, [pc, #20]	; (12170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   1215c:	9b01      	ldr	r3, [sp, #4]
   1215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12162:	2b00      	cmp	r3, #0
   12164:	d100      	bne.n	12168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12168:	bf00      	nop
   1216a:	b003      	add	sp, #12
   1216c:	f85d fb04 	ldr.w	pc, [sp], #4
   12170:	1fff9530 	.word	0x1fff9530
   12174:	1fff952c 	.word	0x1fff952c

00012178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   12178:	b500      	push	{lr}
   1217a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1217c:	f7ee fd36 	bl	bec <Sys_GetCoreID>
   12180:	4603      	mov	r3, r0
   12182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   12184:	4a10      	ldr	r2, [pc, #64]	; (121c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   12186:	9b01      	ldr	r3, [sp, #4]
   12188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1218c:	2b00      	cmp	r3, #0
   1218e:	d10d      	bne.n	121ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12190:	f7ee fbf2 	bl	978 <Adc_schm_read_msr>
   12194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12196:	9b00      	ldr	r3, [sp, #0]
   12198:	f003 0301 	and.w	r3, r3, #1
   1219c:	2b00      	cmp	r3, #0
   1219e:	d100      	bne.n	121a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   121a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   121a2:	490a      	ldr	r1, [pc, #40]	; (121cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   121a4:	9b01      	ldr	r3, [sp, #4]
   121a6:	9a00      	ldr	r2, [sp, #0]
   121a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   121ac:	4a06      	ldr	r2, [pc, #24]	; (121c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   121ae:	9b01      	ldr	r3, [sp, #4]
   121b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121b4:	1c5a      	adds	r2, r3, #1
   121b6:	4904      	ldr	r1, [pc, #16]	; (121c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   121b8:	9b01      	ldr	r3, [sp, #4]
   121ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   121be:	bf00      	nop
   121c0:	b003      	add	sp, #12
   121c2:	f85d fb04 	ldr.w	pc, [sp], #4
   121c6:	bf00      	nop
   121c8:	1fff9538 	.word	0x1fff9538
   121cc:	1fff9534 	.word	0x1fff9534

000121d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   121d0:	b500      	push	{lr}
   121d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121d4:	f7ee fd0a 	bl	bec <Sys_GetCoreID>
   121d8:	4603      	mov	r3, r0
   121da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   121dc:	4a0d      	ldr	r2, [pc, #52]	; (12214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   121de:	9b01      	ldr	r3, [sp, #4]
   121e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121e4:	1e5a      	subs	r2, r3, #1
   121e6:	490b      	ldr	r1, [pc, #44]	; (12214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   121e8:	9b01      	ldr	r3, [sp, #4]
   121ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   121ee:	4a0a      	ldr	r2, [pc, #40]	; (12218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   121f0:	9b01      	ldr	r3, [sp, #4]
   121f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121f6:	f003 0301 	and.w	r3, r3, #1
   121fa:	2b00      	cmp	r3, #0
   121fc:	d106      	bne.n	1220c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   121fe:	4a05      	ldr	r2, [pc, #20]	; (12214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   12200:	9b01      	ldr	r3, [sp, #4]
   12202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12206:	2b00      	cmp	r3, #0
   12208:	d100      	bne.n	1220c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1220a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1220c:	bf00      	nop
   1220e:	b003      	add	sp, #12
   12210:	f85d fb04 	ldr.w	pc, [sp], #4
   12214:	1fff9538 	.word	0x1fff9538
   12218:	1fff9534 	.word	0x1fff9534

0001221c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   1221c:	b500      	push	{lr}
   1221e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12220:	f7ee fce4 	bl	bec <Sys_GetCoreID>
   12224:	4603      	mov	r3, r0
   12226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   12228:	4a10      	ldr	r2, [pc, #64]	; (1226c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1222a:	9b01      	ldr	r3, [sp, #4]
   1222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12230:	2b00      	cmp	r3, #0
   12232:	d10d      	bne.n	12250 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12234:	f7ee fba0 	bl	978 <Adc_schm_read_msr>
   12238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1223a:	9b00      	ldr	r3, [sp, #0]
   1223c:	f003 0301 	and.w	r3, r3, #1
   12240:	2b00      	cmp	r3, #0
   12242:	d100      	bne.n	12246 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   12246:	490a      	ldr	r1, [pc, #40]	; (12270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   12248:	9b01      	ldr	r3, [sp, #4]
   1224a:	9a00      	ldr	r2, [sp, #0]
   1224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   12250:	4a06      	ldr	r2, [pc, #24]	; (1226c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   12252:	9b01      	ldr	r3, [sp, #4]
   12254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12258:	1c5a      	adds	r2, r3, #1
   1225a:	4904      	ldr	r1, [pc, #16]	; (1226c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1225c:	9b01      	ldr	r3, [sp, #4]
   1225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12262:	bf00      	nop
   12264:	b003      	add	sp, #12
   12266:	f85d fb04 	ldr.w	pc, [sp], #4
   1226a:	bf00      	nop
   1226c:	1fff9540 	.word	0x1fff9540
   12270:	1fff953c 	.word	0x1fff953c

00012274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   12274:	b500      	push	{lr}
   12276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12278:	f7ee fcb8 	bl	bec <Sys_GetCoreID>
   1227c:	4603      	mov	r3, r0
   1227e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   12280:	4a0d      	ldr	r2, [pc, #52]	; (122b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   12282:	9b01      	ldr	r3, [sp, #4]
   12284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12288:	1e5a      	subs	r2, r3, #1
   1228a:	490b      	ldr	r1, [pc, #44]	; (122b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   1228c:	9b01      	ldr	r3, [sp, #4]
   1228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   12292:	4a0a      	ldr	r2, [pc, #40]	; (122bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   12294:	9b01      	ldr	r3, [sp, #4]
   12296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1229a:	f003 0301 	and.w	r3, r3, #1
   1229e:	2b00      	cmp	r3, #0
   122a0:	d106      	bne.n	122b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   122a2:	4a05      	ldr	r2, [pc, #20]	; (122b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   122a4:	9b01      	ldr	r3, [sp, #4]
   122a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122aa:	2b00      	cmp	r3, #0
   122ac:	d100      	bne.n	122b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   122ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   122b0:	bf00      	nop
   122b2:	b003      	add	sp, #12
   122b4:	f85d fb04 	ldr.w	pc, [sp], #4
   122b8:	1fff9540 	.word	0x1fff9540
   122bc:	1fff953c 	.word	0x1fff953c

000122c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   122c0:	b500      	push	{lr}
   122c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122c4:	f7ee fc92 	bl	bec <Sys_GetCoreID>
   122c8:	4603      	mov	r3, r0
   122ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   122cc:	4a10      	ldr	r2, [pc, #64]	; (12310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   122ce:	9b01      	ldr	r3, [sp, #4]
   122d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122d4:	2b00      	cmp	r3, #0
   122d6:	d10d      	bne.n	122f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   122d8:	f7ee fb4e 	bl	978 <Adc_schm_read_msr>
   122dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   122de:	9b00      	ldr	r3, [sp, #0]
   122e0:	f003 0301 	and.w	r3, r3, #1
   122e4:	2b00      	cmp	r3, #0
   122e6:	d100      	bne.n	122ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   122e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   122ea:	490a      	ldr	r1, [pc, #40]	; (12314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   122ec:	9b01      	ldr	r3, [sp, #4]
   122ee:	9a00      	ldr	r2, [sp, #0]
   122f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   122f4:	4a06      	ldr	r2, [pc, #24]	; (12310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   122f6:	9b01      	ldr	r3, [sp, #4]
   122f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122fc:	1c5a      	adds	r2, r3, #1
   122fe:	4904      	ldr	r1, [pc, #16]	; (12310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   12300:	9b01      	ldr	r3, [sp, #4]
   12302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12306:	bf00      	nop
   12308:	b003      	add	sp, #12
   1230a:	f85d fb04 	ldr.w	pc, [sp], #4
   1230e:	bf00      	nop
   12310:	1fff9548 	.word	0x1fff9548
   12314:	1fff9544 	.word	0x1fff9544

00012318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   12318:	b500      	push	{lr}
   1231a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1231c:	f7ee fc66 	bl	bec <Sys_GetCoreID>
   12320:	4603      	mov	r3, r0
   12322:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   12324:	4a0d      	ldr	r2, [pc, #52]	; (1235c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   12326:	9b01      	ldr	r3, [sp, #4]
   12328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1232c:	1e5a      	subs	r2, r3, #1
   1232e:	490b      	ldr	r1, [pc, #44]	; (1235c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   12330:	9b01      	ldr	r3, [sp, #4]
   12332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   12336:	4a0a      	ldr	r2, [pc, #40]	; (12360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   12338:	9b01      	ldr	r3, [sp, #4]
   1233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1233e:	f003 0301 	and.w	r3, r3, #1
   12342:	2b00      	cmp	r3, #0
   12344:	d106      	bne.n	12354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   12346:	4a05      	ldr	r2, [pc, #20]	; (1235c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   12348:	9b01      	ldr	r3, [sp, #4]
   1234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1234e:	2b00      	cmp	r3, #0
   12350:	d100      	bne.n	12354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12354:	bf00      	nop
   12356:	b003      	add	sp, #12
   12358:	f85d fb04 	ldr.w	pc, [sp], #4
   1235c:	1fff9548 	.word	0x1fff9548
   12360:	1fff9544 	.word	0x1fff9544

00012364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   12364:	b500      	push	{lr}
   12366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12368:	f7ee fc40 	bl	bec <Sys_GetCoreID>
   1236c:	4603      	mov	r3, r0
   1236e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   12370:	4a10      	ldr	r2, [pc, #64]	; (123b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   12372:	9b01      	ldr	r3, [sp, #4]
   12374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12378:	2b00      	cmp	r3, #0
   1237a:	d10d      	bne.n	12398 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1237c:	f7ee fafc 	bl	978 <Adc_schm_read_msr>
   12380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12382:	9b00      	ldr	r3, [sp, #0]
   12384:	f003 0301 	and.w	r3, r3, #1
   12388:	2b00      	cmp	r3, #0
   1238a:	d100      	bne.n	1238e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1238c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   1238e:	490a      	ldr	r1, [pc, #40]	; (123b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   12390:	9b01      	ldr	r3, [sp, #4]
   12392:	9a00      	ldr	r2, [sp, #0]
   12394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   12398:	4a06      	ldr	r2, [pc, #24]	; (123b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1239a:	9b01      	ldr	r3, [sp, #4]
   1239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123a0:	1c5a      	adds	r2, r3, #1
   123a2:	4904      	ldr	r1, [pc, #16]	; (123b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   123a4:	9b01      	ldr	r3, [sp, #4]
   123a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   123aa:	bf00      	nop
   123ac:	b003      	add	sp, #12
   123ae:	f85d fb04 	ldr.w	pc, [sp], #4
   123b2:	bf00      	nop
   123b4:	1fff9550 	.word	0x1fff9550
   123b8:	1fff954c 	.word	0x1fff954c

000123bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   123bc:	b500      	push	{lr}
   123be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123c0:	f7ee fc14 	bl	bec <Sys_GetCoreID>
   123c4:	4603      	mov	r3, r0
   123c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   123c8:	4a0d      	ldr	r2, [pc, #52]	; (12400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   123ca:	9b01      	ldr	r3, [sp, #4]
   123cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123d0:	1e5a      	subs	r2, r3, #1
   123d2:	490b      	ldr	r1, [pc, #44]	; (12400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   123d4:	9b01      	ldr	r3, [sp, #4]
   123d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   123da:	4a0a      	ldr	r2, [pc, #40]	; (12404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   123dc:	9b01      	ldr	r3, [sp, #4]
   123de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123e2:	f003 0301 	and.w	r3, r3, #1
   123e6:	2b00      	cmp	r3, #0
   123e8:	d106      	bne.n	123f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   123ea:	4a05      	ldr	r2, [pc, #20]	; (12400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   123ec:	9b01      	ldr	r3, [sp, #4]
   123ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123f2:	2b00      	cmp	r3, #0
   123f4:	d100      	bne.n	123f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   123f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   123f8:	bf00      	nop
   123fa:	b003      	add	sp, #12
   123fc:	f85d fb04 	ldr.w	pc, [sp], #4
   12400:	1fff9550 	.word	0x1fff9550
   12404:	1fff954c 	.word	0x1fff954c

00012408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   12408:	b500      	push	{lr}
   1240a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1240c:	f7ee fbee 	bl	bec <Sys_GetCoreID>
   12410:	4603      	mov	r3, r0
   12412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   12414:	4a10      	ldr	r2, [pc, #64]	; (12458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   12416:	9b01      	ldr	r3, [sp, #4]
   12418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1241c:	2b00      	cmp	r3, #0
   1241e:	d10d      	bne.n	1243c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12420:	f7ee faaa 	bl	978 <Adc_schm_read_msr>
   12424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12426:	9b00      	ldr	r3, [sp, #0]
   12428:	f003 0301 	and.w	r3, r3, #1
   1242c:	2b00      	cmp	r3, #0
   1242e:	d100      	bne.n	12432 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   12432:	490a      	ldr	r1, [pc, #40]	; (1245c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   12434:	9b01      	ldr	r3, [sp, #4]
   12436:	9a00      	ldr	r2, [sp, #0]
   12438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   1243c:	4a06      	ldr	r2, [pc, #24]	; (12458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   1243e:	9b01      	ldr	r3, [sp, #4]
   12440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12444:	1c5a      	adds	r2, r3, #1
   12446:	4904      	ldr	r1, [pc, #16]	; (12458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   12448:	9b01      	ldr	r3, [sp, #4]
   1244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1244e:	bf00      	nop
   12450:	b003      	add	sp, #12
   12452:	f85d fb04 	ldr.w	pc, [sp], #4
   12456:	bf00      	nop
   12458:	1fff9558 	.word	0x1fff9558
   1245c:	1fff9554 	.word	0x1fff9554

00012460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   12460:	b500      	push	{lr}
   12462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12464:	f7ee fbc2 	bl	bec <Sys_GetCoreID>
   12468:	4603      	mov	r3, r0
   1246a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   1246c:	4a0d      	ldr	r2, [pc, #52]	; (124a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   1246e:	9b01      	ldr	r3, [sp, #4]
   12470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12474:	1e5a      	subs	r2, r3, #1
   12476:	490b      	ldr	r1, [pc, #44]	; (124a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   12478:	9b01      	ldr	r3, [sp, #4]
   1247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   1247e:	4a0a      	ldr	r2, [pc, #40]	; (124a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   12480:	9b01      	ldr	r3, [sp, #4]
   12482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12486:	f003 0301 	and.w	r3, r3, #1
   1248a:	2b00      	cmp	r3, #0
   1248c:	d106      	bne.n	1249c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   1248e:	4a05      	ldr	r2, [pc, #20]	; (124a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   12490:	9b01      	ldr	r3, [sp, #4]
   12492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12496:	2b00      	cmp	r3, #0
   12498:	d100      	bne.n	1249c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1249a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1249c:	bf00      	nop
   1249e:	b003      	add	sp, #12
   124a0:	f85d fb04 	ldr.w	pc, [sp], #4
   124a4:	1fff9558 	.word	0x1fff9558
   124a8:	1fff9554 	.word	0x1fff9554

000124ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   124ac:	b500      	push	{lr}
   124ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124b0:	f7ee fb9c 	bl	bec <Sys_GetCoreID>
   124b4:	4603      	mov	r3, r0
   124b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   124b8:	4a10      	ldr	r2, [pc, #64]	; (124fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   124ba:	9b01      	ldr	r3, [sp, #4]
   124bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124c0:	2b00      	cmp	r3, #0
   124c2:	d10d      	bne.n	124e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   124c4:	f7ee fa58 	bl	978 <Adc_schm_read_msr>
   124c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   124ca:	9b00      	ldr	r3, [sp, #0]
   124cc:	f003 0301 	and.w	r3, r3, #1
   124d0:	2b00      	cmp	r3, #0
   124d2:	d100      	bne.n	124d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   124d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   124d6:	490a      	ldr	r1, [pc, #40]	; (12500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   124d8:	9b01      	ldr	r3, [sp, #4]
   124da:	9a00      	ldr	r2, [sp, #0]
   124dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   124e0:	4a06      	ldr	r2, [pc, #24]	; (124fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   124e2:	9b01      	ldr	r3, [sp, #4]
   124e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124e8:	1c5a      	adds	r2, r3, #1
   124ea:	4904      	ldr	r1, [pc, #16]	; (124fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   124ec:	9b01      	ldr	r3, [sp, #4]
   124ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   124f2:	bf00      	nop
   124f4:	b003      	add	sp, #12
   124f6:	f85d fb04 	ldr.w	pc, [sp], #4
   124fa:	bf00      	nop
   124fc:	1fff9560 	.word	0x1fff9560
   12500:	1fff955c 	.word	0x1fff955c

00012504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   12504:	b500      	push	{lr}
   12506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12508:	f7ee fb70 	bl	bec <Sys_GetCoreID>
   1250c:	4603      	mov	r3, r0
   1250e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   12510:	4a0d      	ldr	r2, [pc, #52]	; (12548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   12512:	9b01      	ldr	r3, [sp, #4]
   12514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12518:	1e5a      	subs	r2, r3, #1
   1251a:	490b      	ldr	r1, [pc, #44]	; (12548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   1251c:	9b01      	ldr	r3, [sp, #4]
   1251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   12522:	4a0a      	ldr	r2, [pc, #40]	; (1254c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   12524:	9b01      	ldr	r3, [sp, #4]
   12526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1252a:	f003 0301 	and.w	r3, r3, #1
   1252e:	2b00      	cmp	r3, #0
   12530:	d106      	bne.n	12540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   12532:	4a05      	ldr	r2, [pc, #20]	; (12548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   12534:	9b01      	ldr	r3, [sp, #4]
   12536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1253a:	2b00      	cmp	r3, #0
   1253c:	d100      	bne.n	12540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1253e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12540:	bf00      	nop
   12542:	b003      	add	sp, #12
   12544:	f85d fb04 	ldr.w	pc, [sp], #4
   12548:	1fff9560 	.word	0x1fff9560
   1254c:	1fff955c 	.word	0x1fff955c

00012550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   12550:	b500      	push	{lr}
   12552:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12554:	f7ee fb4a 	bl	bec <Sys_GetCoreID>
   12558:	4603      	mov	r3, r0
   1255a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   1255c:	4a10      	ldr	r2, [pc, #64]	; (125a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1255e:	9b01      	ldr	r3, [sp, #4]
   12560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12564:	2b00      	cmp	r3, #0
   12566:	d10d      	bne.n	12584 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12568:	f7ee fa06 	bl	978 <Adc_schm_read_msr>
   1256c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1256e:	9b00      	ldr	r3, [sp, #0]
   12570:	f003 0301 	and.w	r3, r3, #1
   12574:	2b00      	cmp	r3, #0
   12576:	d100      	bne.n	1257a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12578:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   1257a:	490a      	ldr	r1, [pc, #40]	; (125a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   1257c:	9b01      	ldr	r3, [sp, #4]
   1257e:	9a00      	ldr	r2, [sp, #0]
   12580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   12584:	4a06      	ldr	r2, [pc, #24]	; (125a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   12586:	9b01      	ldr	r3, [sp, #4]
   12588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1258c:	1c5a      	adds	r2, r3, #1
   1258e:	4904      	ldr	r1, [pc, #16]	; (125a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   12590:	9b01      	ldr	r3, [sp, #4]
   12592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12596:	bf00      	nop
   12598:	b003      	add	sp, #12
   1259a:	f85d fb04 	ldr.w	pc, [sp], #4
   1259e:	bf00      	nop
   125a0:	1fff9568 	.word	0x1fff9568
   125a4:	1fff9564 	.word	0x1fff9564

000125a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   125a8:	b500      	push	{lr}
   125aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125ac:	f7ee fb1e 	bl	bec <Sys_GetCoreID>
   125b0:	4603      	mov	r3, r0
   125b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   125b4:	4a0d      	ldr	r2, [pc, #52]	; (125ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   125b6:	9b01      	ldr	r3, [sp, #4]
   125b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125bc:	1e5a      	subs	r2, r3, #1
   125be:	490b      	ldr	r1, [pc, #44]	; (125ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   125c0:	9b01      	ldr	r3, [sp, #4]
   125c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   125c6:	4a0a      	ldr	r2, [pc, #40]	; (125f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   125c8:	9b01      	ldr	r3, [sp, #4]
   125ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125ce:	f003 0301 	and.w	r3, r3, #1
   125d2:	2b00      	cmp	r3, #0
   125d4:	d106      	bne.n	125e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   125d6:	4a05      	ldr	r2, [pc, #20]	; (125ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   125d8:	9b01      	ldr	r3, [sp, #4]
   125da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125de:	2b00      	cmp	r3, #0
   125e0:	d100      	bne.n	125e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   125e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   125e4:	bf00      	nop
   125e6:	b003      	add	sp, #12
   125e8:	f85d fb04 	ldr.w	pc, [sp], #4
   125ec:	1fff9568 	.word	0x1fff9568
   125f0:	1fff9564 	.word	0x1fff9564

000125f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   125f4:	b500      	push	{lr}
   125f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125f8:	f7ee faf8 	bl	bec <Sys_GetCoreID>
   125fc:	4603      	mov	r3, r0
   125fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   12600:	4a10      	ldr	r2, [pc, #64]	; (12644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   12602:	9b01      	ldr	r3, [sp, #4]
   12604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12608:	2b00      	cmp	r3, #0
   1260a:	d10d      	bne.n	12628 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1260c:	f7ee f9b4 	bl	978 <Adc_schm_read_msr>
   12610:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12612:	9b00      	ldr	r3, [sp, #0]
   12614:	f003 0301 	and.w	r3, r3, #1
   12618:	2b00      	cmp	r3, #0
   1261a:	d100      	bne.n	1261e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1261c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   1261e:	490a      	ldr	r1, [pc, #40]	; (12648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   12620:	9b01      	ldr	r3, [sp, #4]
   12622:	9a00      	ldr	r2, [sp, #0]
   12624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   12628:	4a06      	ldr	r2, [pc, #24]	; (12644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   1262a:	9b01      	ldr	r3, [sp, #4]
   1262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12630:	1c5a      	adds	r2, r3, #1
   12632:	4904      	ldr	r1, [pc, #16]	; (12644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   12634:	9b01      	ldr	r3, [sp, #4]
   12636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1263a:	bf00      	nop
   1263c:	b003      	add	sp, #12
   1263e:	f85d fb04 	ldr.w	pc, [sp], #4
   12642:	bf00      	nop
   12644:	1fff9570 	.word	0x1fff9570
   12648:	1fff956c 	.word	0x1fff956c

0001264c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   1264c:	b500      	push	{lr}
   1264e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12650:	f7ee facc 	bl	bec <Sys_GetCoreID>
   12654:	4603      	mov	r3, r0
   12656:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   12658:	4a0d      	ldr	r2, [pc, #52]	; (12690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   1265a:	9b01      	ldr	r3, [sp, #4]
   1265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12660:	1e5a      	subs	r2, r3, #1
   12662:	490b      	ldr	r1, [pc, #44]	; (12690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   12664:	9b01      	ldr	r3, [sp, #4]
   12666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   1266a:	4a0a      	ldr	r2, [pc, #40]	; (12694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   1266c:	9b01      	ldr	r3, [sp, #4]
   1266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12672:	f003 0301 	and.w	r3, r3, #1
   12676:	2b00      	cmp	r3, #0
   12678:	d106      	bne.n	12688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   1267a:	4a05      	ldr	r2, [pc, #20]	; (12690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   1267c:	9b01      	ldr	r3, [sp, #4]
   1267e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12682:	2b00      	cmp	r3, #0
   12684:	d100      	bne.n	12688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12686:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12688:	bf00      	nop
   1268a:	b003      	add	sp, #12
   1268c:	f85d fb04 	ldr.w	pc, [sp], #4
   12690:	1fff9570 	.word	0x1fff9570
   12694:	1fff956c 	.word	0x1fff956c

00012698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   12698:	b500      	push	{lr}
   1269a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1269c:	f7ee faa6 	bl	bec <Sys_GetCoreID>
   126a0:	4603      	mov	r3, r0
   126a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   126a4:	4a10      	ldr	r2, [pc, #64]	; (126e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   126a6:	9b01      	ldr	r3, [sp, #4]
   126a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126ac:	2b00      	cmp	r3, #0
   126ae:	d10d      	bne.n	126cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   126b0:	f7ee f962 	bl	978 <Adc_schm_read_msr>
   126b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   126b6:	9b00      	ldr	r3, [sp, #0]
   126b8:	f003 0301 	and.w	r3, r3, #1
   126bc:	2b00      	cmp	r3, #0
   126be:	d100      	bne.n	126c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   126c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   126c2:	490a      	ldr	r1, [pc, #40]	; (126ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   126c4:	9b01      	ldr	r3, [sp, #4]
   126c6:	9a00      	ldr	r2, [sp, #0]
   126c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   126cc:	4a06      	ldr	r2, [pc, #24]	; (126e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   126ce:	9b01      	ldr	r3, [sp, #4]
   126d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126d4:	1c5a      	adds	r2, r3, #1
   126d6:	4904      	ldr	r1, [pc, #16]	; (126e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   126d8:	9b01      	ldr	r3, [sp, #4]
   126da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   126de:	bf00      	nop
   126e0:	b003      	add	sp, #12
   126e2:	f85d fb04 	ldr.w	pc, [sp], #4
   126e6:	bf00      	nop
   126e8:	1fff9578 	.word	0x1fff9578
   126ec:	1fff9574 	.word	0x1fff9574

000126f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   126f0:	b500      	push	{lr}
   126f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126f4:	f7ee fa7a 	bl	bec <Sys_GetCoreID>
   126f8:	4603      	mov	r3, r0
   126fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   126fc:	4a0d      	ldr	r2, [pc, #52]	; (12734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   126fe:	9b01      	ldr	r3, [sp, #4]
   12700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12704:	1e5a      	subs	r2, r3, #1
   12706:	490b      	ldr	r1, [pc, #44]	; (12734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   12708:	9b01      	ldr	r3, [sp, #4]
   1270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   1270e:	4a0a      	ldr	r2, [pc, #40]	; (12738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   12710:	9b01      	ldr	r3, [sp, #4]
   12712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12716:	f003 0301 	and.w	r3, r3, #1
   1271a:	2b00      	cmp	r3, #0
   1271c:	d106      	bne.n	1272c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   1271e:	4a05      	ldr	r2, [pc, #20]	; (12734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   12720:	9b01      	ldr	r3, [sp, #4]
   12722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12726:	2b00      	cmp	r3, #0
   12728:	d100      	bne.n	1272c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1272a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1272c:	bf00      	nop
   1272e:	b003      	add	sp, #12
   12730:	f85d fb04 	ldr.w	pc, [sp], #4
   12734:	1fff9578 	.word	0x1fff9578
   12738:	1fff9574 	.word	0x1fff9574

0001273c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   1273c:	b500      	push	{lr}
   1273e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12740:	f7ee fa54 	bl	bec <Sys_GetCoreID>
   12744:	4603      	mov	r3, r0
   12746:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   12748:	4a10      	ldr	r2, [pc, #64]	; (1278c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   1274a:	9b01      	ldr	r3, [sp, #4]
   1274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12750:	2b00      	cmp	r3, #0
   12752:	d10d      	bne.n	12770 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12754:	f7ee f910 	bl	978 <Adc_schm_read_msr>
   12758:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1275a:	9b00      	ldr	r3, [sp, #0]
   1275c:	f003 0301 	and.w	r3, r3, #1
   12760:	2b00      	cmp	r3, #0
   12762:	d100      	bne.n	12766 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12764:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   12766:	490a      	ldr	r1, [pc, #40]	; (12790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   12768:	9b01      	ldr	r3, [sp, #4]
   1276a:	9a00      	ldr	r2, [sp, #0]
   1276c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   12770:	4a06      	ldr	r2, [pc, #24]	; (1278c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   12772:	9b01      	ldr	r3, [sp, #4]
   12774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12778:	1c5a      	adds	r2, r3, #1
   1277a:	4904      	ldr	r1, [pc, #16]	; (1278c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   1277c:	9b01      	ldr	r3, [sp, #4]
   1277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12782:	bf00      	nop
   12784:	b003      	add	sp, #12
   12786:	f85d fb04 	ldr.w	pc, [sp], #4
   1278a:	bf00      	nop
   1278c:	1fff9580 	.word	0x1fff9580
   12790:	1fff957c 	.word	0x1fff957c

00012794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   12794:	b500      	push	{lr}
   12796:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12798:	f7ee fa28 	bl	bec <Sys_GetCoreID>
   1279c:	4603      	mov	r3, r0
   1279e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   127a0:	4a0d      	ldr	r2, [pc, #52]	; (127d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   127a2:	9b01      	ldr	r3, [sp, #4]
   127a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127a8:	1e5a      	subs	r2, r3, #1
   127aa:	490b      	ldr	r1, [pc, #44]	; (127d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   127ac:	9b01      	ldr	r3, [sp, #4]
   127ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   127b2:	4a0a      	ldr	r2, [pc, #40]	; (127dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   127b4:	9b01      	ldr	r3, [sp, #4]
   127b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127ba:	f003 0301 	and.w	r3, r3, #1
   127be:	2b00      	cmp	r3, #0
   127c0:	d106      	bne.n	127d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   127c2:	4a05      	ldr	r2, [pc, #20]	; (127d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   127c4:	9b01      	ldr	r3, [sp, #4]
   127c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127ca:	2b00      	cmp	r3, #0
   127cc:	d100      	bne.n	127d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   127ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   127d0:	bf00      	nop
   127d2:	b003      	add	sp, #12
   127d4:	f85d fb04 	ldr.w	pc, [sp], #4
   127d8:	1fff9580 	.word	0x1fff9580
   127dc:	1fff957c 	.word	0x1fff957c

000127e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   127e0:	b500      	push	{lr}
   127e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127e4:	f7ee fa02 	bl	bec <Sys_GetCoreID>
   127e8:	4603      	mov	r3, r0
   127ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   127ec:	4a10      	ldr	r2, [pc, #64]	; (12830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   127ee:	9b01      	ldr	r3, [sp, #4]
   127f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127f4:	2b00      	cmp	r3, #0
   127f6:	d10d      	bne.n	12814 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   127f8:	f7ee f8be 	bl	978 <Adc_schm_read_msr>
   127fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127fe:	9b00      	ldr	r3, [sp, #0]
   12800:	f003 0301 	and.w	r3, r3, #1
   12804:	2b00      	cmp	r3, #0
   12806:	d100      	bne.n	1280a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12808:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   1280a:	490a      	ldr	r1, [pc, #40]	; (12834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   1280c:	9b01      	ldr	r3, [sp, #4]
   1280e:	9a00      	ldr	r2, [sp, #0]
   12810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   12814:	4a06      	ldr	r2, [pc, #24]	; (12830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   12816:	9b01      	ldr	r3, [sp, #4]
   12818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1281c:	1c5a      	adds	r2, r3, #1
   1281e:	4904      	ldr	r1, [pc, #16]	; (12830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   12820:	9b01      	ldr	r3, [sp, #4]
   12822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12826:	bf00      	nop
   12828:	b003      	add	sp, #12
   1282a:	f85d fb04 	ldr.w	pc, [sp], #4
   1282e:	bf00      	nop
   12830:	1fff9588 	.word	0x1fff9588
   12834:	1fff9584 	.word	0x1fff9584

00012838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   12838:	b500      	push	{lr}
   1283a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1283c:	f7ee f9d6 	bl	bec <Sys_GetCoreID>
   12840:	4603      	mov	r3, r0
   12842:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   12844:	4a0d      	ldr	r2, [pc, #52]	; (1287c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   12846:	9b01      	ldr	r3, [sp, #4]
   12848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1284c:	1e5a      	subs	r2, r3, #1
   1284e:	490b      	ldr	r1, [pc, #44]	; (1287c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   12850:	9b01      	ldr	r3, [sp, #4]
   12852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   12856:	4a0a      	ldr	r2, [pc, #40]	; (12880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   12858:	9b01      	ldr	r3, [sp, #4]
   1285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1285e:	f003 0301 	and.w	r3, r3, #1
   12862:	2b00      	cmp	r3, #0
   12864:	d106      	bne.n	12874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   12866:	4a05      	ldr	r2, [pc, #20]	; (1287c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   12868:	9b01      	ldr	r3, [sp, #4]
   1286a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1286e:	2b00      	cmp	r3, #0
   12870:	d100      	bne.n	12874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12872:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12874:	bf00      	nop
   12876:	b003      	add	sp, #12
   12878:	f85d fb04 	ldr.w	pc, [sp], #4
   1287c:	1fff9588 	.word	0x1fff9588
   12880:	1fff9584 	.word	0x1fff9584

00012884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   12884:	b500      	push	{lr}
   12886:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12888:	f7ee f9b0 	bl	bec <Sys_GetCoreID>
   1288c:	4603      	mov	r3, r0
   1288e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   12890:	4a10      	ldr	r2, [pc, #64]	; (128d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   12892:	9b01      	ldr	r3, [sp, #4]
   12894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12898:	2b00      	cmp	r3, #0
   1289a:	d10d      	bne.n	128b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1289c:	f7ee f86c 	bl	978 <Adc_schm_read_msr>
   128a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   128a2:	9b00      	ldr	r3, [sp, #0]
   128a4:	f003 0301 	and.w	r3, r3, #1
   128a8:	2b00      	cmp	r3, #0
   128aa:	d100      	bne.n	128ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   128ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   128ae:	490a      	ldr	r1, [pc, #40]	; (128d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   128b0:	9b01      	ldr	r3, [sp, #4]
   128b2:	9a00      	ldr	r2, [sp, #0]
   128b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   128b8:	4a06      	ldr	r2, [pc, #24]	; (128d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   128ba:	9b01      	ldr	r3, [sp, #4]
   128bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128c0:	1c5a      	adds	r2, r3, #1
   128c2:	4904      	ldr	r1, [pc, #16]	; (128d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   128c4:	9b01      	ldr	r3, [sp, #4]
   128c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   128ca:	bf00      	nop
   128cc:	b003      	add	sp, #12
   128ce:	f85d fb04 	ldr.w	pc, [sp], #4
   128d2:	bf00      	nop
   128d4:	1fff9590 	.word	0x1fff9590
   128d8:	1fff958c 	.word	0x1fff958c

000128dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   128dc:	b500      	push	{lr}
   128de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128e0:	f7ee f984 	bl	bec <Sys_GetCoreID>
   128e4:	4603      	mov	r3, r0
   128e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   128e8:	4a0d      	ldr	r2, [pc, #52]	; (12920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   128ea:	9b01      	ldr	r3, [sp, #4]
   128ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128f0:	1e5a      	subs	r2, r3, #1
   128f2:	490b      	ldr	r1, [pc, #44]	; (12920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   128f4:	9b01      	ldr	r3, [sp, #4]
   128f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   128fa:	4a0a      	ldr	r2, [pc, #40]	; (12924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   128fc:	9b01      	ldr	r3, [sp, #4]
   128fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12902:	f003 0301 	and.w	r3, r3, #1
   12906:	2b00      	cmp	r3, #0
   12908:	d106      	bne.n	12918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   1290a:	4a05      	ldr	r2, [pc, #20]	; (12920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   1290c:	9b01      	ldr	r3, [sp, #4]
   1290e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12912:	2b00      	cmp	r3, #0
   12914:	d100      	bne.n	12918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12916:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12918:	bf00      	nop
   1291a:	b003      	add	sp, #12
   1291c:	f85d fb04 	ldr.w	pc, [sp], #4
   12920:	1fff9590 	.word	0x1fff9590
   12924:	1fff958c 	.word	0x1fff958c

00012928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   12928:	b500      	push	{lr}
   1292a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1292c:	f7ee f95e 	bl	bec <Sys_GetCoreID>
   12930:	4603      	mov	r3, r0
   12932:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   12934:	4a10      	ldr	r2, [pc, #64]	; (12978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   12936:	9b01      	ldr	r3, [sp, #4]
   12938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1293c:	2b00      	cmp	r3, #0
   1293e:	d10d      	bne.n	1295c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12940:	f7ee f81a 	bl	978 <Adc_schm_read_msr>
   12944:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12946:	9b00      	ldr	r3, [sp, #0]
   12948:	f003 0301 	and.w	r3, r3, #1
   1294c:	2b00      	cmp	r3, #0
   1294e:	d100      	bne.n	12952 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12950:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   12952:	490a      	ldr	r1, [pc, #40]	; (1297c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   12954:	9b01      	ldr	r3, [sp, #4]
   12956:	9a00      	ldr	r2, [sp, #0]
   12958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   1295c:	4a06      	ldr	r2, [pc, #24]	; (12978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   1295e:	9b01      	ldr	r3, [sp, #4]
   12960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12964:	1c5a      	adds	r2, r3, #1
   12966:	4904      	ldr	r1, [pc, #16]	; (12978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   12968:	9b01      	ldr	r3, [sp, #4]
   1296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1296e:	bf00      	nop
   12970:	b003      	add	sp, #12
   12972:	f85d fb04 	ldr.w	pc, [sp], #4
   12976:	bf00      	nop
   12978:	1fff9598 	.word	0x1fff9598
   1297c:	1fff9594 	.word	0x1fff9594

00012980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   12980:	b500      	push	{lr}
   12982:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12984:	f7ee f932 	bl	bec <Sys_GetCoreID>
   12988:	4603      	mov	r3, r0
   1298a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   1298c:	4a0d      	ldr	r2, [pc, #52]	; (129c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   1298e:	9b01      	ldr	r3, [sp, #4]
   12990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12994:	1e5a      	subs	r2, r3, #1
   12996:	490b      	ldr	r1, [pc, #44]	; (129c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   12998:	9b01      	ldr	r3, [sp, #4]
   1299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   1299e:	4a0a      	ldr	r2, [pc, #40]	; (129c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   129a0:	9b01      	ldr	r3, [sp, #4]
   129a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129a6:	f003 0301 	and.w	r3, r3, #1
   129aa:	2b00      	cmp	r3, #0
   129ac:	d106      	bne.n	129bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   129ae:	4a05      	ldr	r2, [pc, #20]	; (129c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   129b0:	9b01      	ldr	r3, [sp, #4]
   129b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129b6:	2b00      	cmp	r3, #0
   129b8:	d100      	bne.n	129bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   129ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   129bc:	bf00      	nop
   129be:	b003      	add	sp, #12
   129c0:	f85d fb04 	ldr.w	pc, [sp], #4
   129c4:	1fff9598 	.word	0x1fff9598
   129c8:	1fff9594 	.word	0x1fff9594

000129cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   129cc:	b500      	push	{lr}
   129ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129d0:	f7ee f90c 	bl	bec <Sys_GetCoreID>
   129d4:	4603      	mov	r3, r0
   129d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   129d8:	4a10      	ldr	r2, [pc, #64]	; (12a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   129da:	9b01      	ldr	r3, [sp, #4]
   129dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129e0:	2b00      	cmp	r3, #0
   129e2:	d10d      	bne.n	12a00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   129e4:	f7ed ffc8 	bl	978 <Adc_schm_read_msr>
   129e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   129ea:	9b00      	ldr	r3, [sp, #0]
   129ec:	f003 0301 	and.w	r3, r3, #1
   129f0:	2b00      	cmp	r3, #0
   129f2:	d100      	bne.n	129f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   129f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   129f6:	490a      	ldr	r1, [pc, #40]	; (12a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   129f8:	9b01      	ldr	r3, [sp, #4]
   129fa:	9a00      	ldr	r2, [sp, #0]
   129fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   12a00:	4a06      	ldr	r2, [pc, #24]	; (12a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12a02:	9b01      	ldr	r3, [sp, #4]
   12a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a08:	1c5a      	adds	r2, r3, #1
   12a0a:	4904      	ldr	r1, [pc, #16]	; (12a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12a0c:	9b01      	ldr	r3, [sp, #4]
   12a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a12:	bf00      	nop
   12a14:	b003      	add	sp, #12
   12a16:	f85d fb04 	ldr.w	pc, [sp], #4
   12a1a:	bf00      	nop
   12a1c:	1fff95a0 	.word	0x1fff95a0
   12a20:	1fff959c 	.word	0x1fff959c

00012a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   12a24:	b500      	push	{lr}
   12a26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a28:	f7ee f8e0 	bl	bec <Sys_GetCoreID>
   12a2c:	4603      	mov	r3, r0
   12a2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   12a30:	4a0d      	ldr	r2, [pc, #52]	; (12a68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12a32:	9b01      	ldr	r3, [sp, #4]
   12a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a38:	1e5a      	subs	r2, r3, #1
   12a3a:	490b      	ldr	r1, [pc, #44]	; (12a68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12a3c:	9b01      	ldr	r3, [sp, #4]
   12a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   12a42:	4a0a      	ldr	r2, [pc, #40]	; (12a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   12a44:	9b01      	ldr	r3, [sp, #4]
   12a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a4a:	f003 0301 	and.w	r3, r3, #1
   12a4e:	2b00      	cmp	r3, #0
   12a50:	d106      	bne.n	12a60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   12a52:	4a05      	ldr	r2, [pc, #20]	; (12a68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12a54:	9b01      	ldr	r3, [sp, #4]
   12a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a5a:	2b00      	cmp	r3, #0
   12a5c:	d100      	bne.n	12a60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a60:	bf00      	nop
   12a62:	b003      	add	sp, #12
   12a64:	f85d fb04 	ldr.w	pc, [sp], #4
   12a68:	1fff95a0 	.word	0x1fff95a0
   12a6c:	1fff959c 	.word	0x1fff959c

00012a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12a70:	b500      	push	{lr}
   12a72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a74:	f7ee f8ba 	bl	bec <Sys_GetCoreID>
   12a78:	4603      	mov	r3, r0
   12a7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   12a7c:	4a10      	ldr	r2, [pc, #64]	; (12ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12a7e:	9b01      	ldr	r3, [sp, #4]
   12a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a84:	2b00      	cmp	r3, #0
   12a86:	d10d      	bne.n	12aa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a88:	f7ed ff76 	bl	978 <Adc_schm_read_msr>
   12a8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a8e:	9b00      	ldr	r3, [sp, #0]
   12a90:	f003 0301 	and.w	r3, r3, #1
   12a94:	2b00      	cmp	r3, #0
   12a96:	d100      	bne.n	12a9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   12a9a:	490a      	ldr	r1, [pc, #40]	; (12ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   12a9c:	9b01      	ldr	r3, [sp, #4]
   12a9e:	9a00      	ldr	r2, [sp, #0]
   12aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   12aa4:	4a06      	ldr	r2, [pc, #24]	; (12ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12aa6:	9b01      	ldr	r3, [sp, #4]
   12aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aac:	1c5a      	adds	r2, r3, #1
   12aae:	4904      	ldr	r1, [pc, #16]	; (12ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12ab0:	9b01      	ldr	r3, [sp, #4]
   12ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ab6:	bf00      	nop
   12ab8:	b003      	add	sp, #12
   12aba:	f85d fb04 	ldr.w	pc, [sp], #4
   12abe:	bf00      	nop
   12ac0:	1fff95a8 	.word	0x1fff95a8
   12ac4:	1fff95a4 	.word	0x1fff95a4

00012ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12ac8:	b500      	push	{lr}
   12aca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12acc:	f7ee f88e 	bl	bec <Sys_GetCoreID>
   12ad0:	4603      	mov	r3, r0
   12ad2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   12ad4:	4a0d      	ldr	r2, [pc, #52]	; (12b0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12ad6:	9b01      	ldr	r3, [sp, #4]
   12ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12adc:	1e5a      	subs	r2, r3, #1
   12ade:	490b      	ldr	r1, [pc, #44]	; (12b0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12ae0:	9b01      	ldr	r3, [sp, #4]
   12ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   12ae6:	4a0a      	ldr	r2, [pc, #40]	; (12b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   12ae8:	9b01      	ldr	r3, [sp, #4]
   12aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aee:	f003 0301 	and.w	r3, r3, #1
   12af2:	2b00      	cmp	r3, #0
   12af4:	d106      	bne.n	12b04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   12af6:	4a05      	ldr	r2, [pc, #20]	; (12b0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12af8:	9b01      	ldr	r3, [sp, #4]
   12afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12afe:	2b00      	cmp	r3, #0
   12b00:	d100      	bne.n	12b04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b04:	bf00      	nop
   12b06:	b003      	add	sp, #12
   12b08:	f85d fb04 	ldr.w	pc, [sp], #4
   12b0c:	1fff95a8 	.word	0x1fff95a8
   12b10:	1fff95a4 	.word	0x1fff95a4

00012b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12b14:	b500      	push	{lr}
   12b16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b18:	f7ee f868 	bl	bec <Sys_GetCoreID>
   12b1c:	4603      	mov	r3, r0
   12b1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   12b20:	4a10      	ldr	r2, [pc, #64]	; (12b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12b22:	9b01      	ldr	r3, [sp, #4]
   12b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b28:	2b00      	cmp	r3, #0
   12b2a:	d10d      	bne.n	12b48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b2c:	f7ed ff24 	bl	978 <Adc_schm_read_msr>
   12b30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b32:	9b00      	ldr	r3, [sp, #0]
   12b34:	f003 0301 	and.w	r3, r3, #1
   12b38:	2b00      	cmp	r3, #0
   12b3a:	d100      	bne.n	12b3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   12b3e:	490a      	ldr	r1, [pc, #40]	; (12b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   12b40:	9b01      	ldr	r3, [sp, #4]
   12b42:	9a00      	ldr	r2, [sp, #0]
   12b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   12b48:	4a06      	ldr	r2, [pc, #24]	; (12b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12b4a:	9b01      	ldr	r3, [sp, #4]
   12b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b50:	1c5a      	adds	r2, r3, #1
   12b52:	4904      	ldr	r1, [pc, #16]	; (12b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12b54:	9b01      	ldr	r3, [sp, #4]
   12b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b5a:	bf00      	nop
   12b5c:	b003      	add	sp, #12
   12b5e:	f85d fb04 	ldr.w	pc, [sp], #4
   12b62:	bf00      	nop
   12b64:	1fff95b0 	.word	0x1fff95b0
   12b68:	1fff95ac 	.word	0x1fff95ac

00012b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12b6c:	b500      	push	{lr}
   12b6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b70:	f7ee f83c 	bl	bec <Sys_GetCoreID>
   12b74:	4603      	mov	r3, r0
   12b76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   12b78:	4a0d      	ldr	r2, [pc, #52]	; (12bb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12b7a:	9b01      	ldr	r3, [sp, #4]
   12b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b80:	1e5a      	subs	r2, r3, #1
   12b82:	490b      	ldr	r1, [pc, #44]	; (12bb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12b84:	9b01      	ldr	r3, [sp, #4]
   12b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   12b8a:	4a0a      	ldr	r2, [pc, #40]	; (12bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   12b8c:	9b01      	ldr	r3, [sp, #4]
   12b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b92:	f003 0301 	and.w	r3, r3, #1
   12b96:	2b00      	cmp	r3, #0
   12b98:	d106      	bne.n	12ba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   12b9a:	4a05      	ldr	r2, [pc, #20]	; (12bb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12b9c:	9b01      	ldr	r3, [sp, #4]
   12b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ba2:	2b00      	cmp	r3, #0
   12ba4:	d100      	bne.n	12ba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ba6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ba8:	bf00      	nop
   12baa:	b003      	add	sp, #12
   12bac:	f85d fb04 	ldr.w	pc, [sp], #4
   12bb0:	1fff95b0 	.word	0x1fff95b0
   12bb4:	1fff95ac 	.word	0x1fff95ac

00012bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12bb8:	b500      	push	{lr}
   12bba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bbc:	f7ee f816 	bl	bec <Sys_GetCoreID>
   12bc0:	4603      	mov	r3, r0
   12bc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   12bc4:	4a10      	ldr	r2, [pc, #64]	; (12c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12bc6:	9b01      	ldr	r3, [sp, #4]
   12bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bcc:	2b00      	cmp	r3, #0
   12bce:	d10d      	bne.n	12bec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12bd0:	f7ed fed2 	bl	978 <Adc_schm_read_msr>
   12bd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12bd6:	9b00      	ldr	r3, [sp, #0]
   12bd8:	f003 0301 	and.w	r3, r3, #1
   12bdc:	2b00      	cmp	r3, #0
   12bde:	d100      	bne.n	12be2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12be0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   12be2:	490a      	ldr	r1, [pc, #40]	; (12c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   12be4:	9b01      	ldr	r3, [sp, #4]
   12be6:	9a00      	ldr	r2, [sp, #0]
   12be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   12bec:	4a06      	ldr	r2, [pc, #24]	; (12c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12bee:	9b01      	ldr	r3, [sp, #4]
   12bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bf4:	1c5a      	adds	r2, r3, #1
   12bf6:	4904      	ldr	r1, [pc, #16]	; (12c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12bf8:	9b01      	ldr	r3, [sp, #4]
   12bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12bfe:	bf00      	nop
   12c00:	b003      	add	sp, #12
   12c02:	f85d fb04 	ldr.w	pc, [sp], #4
   12c06:	bf00      	nop
   12c08:	1fff95b8 	.word	0x1fff95b8
   12c0c:	1fff95b4 	.word	0x1fff95b4

00012c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12c10:	b500      	push	{lr}
   12c12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c14:	f7ed ffea 	bl	bec <Sys_GetCoreID>
   12c18:	4603      	mov	r3, r0
   12c1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   12c1c:	4a0d      	ldr	r2, [pc, #52]	; (12c54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12c1e:	9b01      	ldr	r3, [sp, #4]
   12c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c24:	1e5a      	subs	r2, r3, #1
   12c26:	490b      	ldr	r1, [pc, #44]	; (12c54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12c28:	9b01      	ldr	r3, [sp, #4]
   12c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   12c2e:	4a0a      	ldr	r2, [pc, #40]	; (12c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   12c30:	9b01      	ldr	r3, [sp, #4]
   12c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c36:	f003 0301 	and.w	r3, r3, #1
   12c3a:	2b00      	cmp	r3, #0
   12c3c:	d106      	bne.n	12c4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   12c3e:	4a05      	ldr	r2, [pc, #20]	; (12c54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12c40:	9b01      	ldr	r3, [sp, #4]
   12c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c46:	2b00      	cmp	r3, #0
   12c48:	d100      	bne.n	12c4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c4c:	bf00      	nop
   12c4e:	b003      	add	sp, #12
   12c50:	f85d fb04 	ldr.w	pc, [sp], #4
   12c54:	1fff95b8 	.word	0x1fff95b8
   12c58:	1fff95b4 	.word	0x1fff95b4

00012c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12c5c:	b500      	push	{lr}
   12c5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c60:	f7ed ffc4 	bl	bec <Sys_GetCoreID>
   12c64:	4603      	mov	r3, r0
   12c66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   12c68:	4a10      	ldr	r2, [pc, #64]	; (12cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12c6a:	9b01      	ldr	r3, [sp, #4]
   12c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c70:	2b00      	cmp	r3, #0
   12c72:	d10d      	bne.n	12c90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c74:	f7ed fe80 	bl	978 <Adc_schm_read_msr>
   12c78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c7a:	9b00      	ldr	r3, [sp, #0]
   12c7c:	f003 0301 	and.w	r3, r3, #1
   12c80:	2b00      	cmp	r3, #0
   12c82:	d100      	bne.n	12c86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   12c86:	490a      	ldr	r1, [pc, #40]	; (12cb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   12c88:	9b01      	ldr	r3, [sp, #4]
   12c8a:	9a00      	ldr	r2, [sp, #0]
   12c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   12c90:	4a06      	ldr	r2, [pc, #24]	; (12cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12c92:	9b01      	ldr	r3, [sp, #4]
   12c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c98:	1c5a      	adds	r2, r3, #1
   12c9a:	4904      	ldr	r1, [pc, #16]	; (12cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12c9c:	9b01      	ldr	r3, [sp, #4]
   12c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ca2:	bf00      	nop
   12ca4:	b003      	add	sp, #12
   12ca6:	f85d fb04 	ldr.w	pc, [sp], #4
   12caa:	bf00      	nop
   12cac:	1fff95c0 	.word	0x1fff95c0
   12cb0:	1fff95bc 	.word	0x1fff95bc

00012cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12cb4:	b500      	push	{lr}
   12cb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12cb8:	f7ed ff98 	bl	bec <Sys_GetCoreID>
   12cbc:	4603      	mov	r3, r0
   12cbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   12cc0:	4a0d      	ldr	r2, [pc, #52]	; (12cf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12cc2:	9b01      	ldr	r3, [sp, #4]
   12cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cc8:	1e5a      	subs	r2, r3, #1
   12cca:	490b      	ldr	r1, [pc, #44]	; (12cf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12ccc:	9b01      	ldr	r3, [sp, #4]
   12cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   12cd2:	4a0a      	ldr	r2, [pc, #40]	; (12cfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   12cd4:	9b01      	ldr	r3, [sp, #4]
   12cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cda:	f003 0301 	and.w	r3, r3, #1
   12cde:	2b00      	cmp	r3, #0
   12ce0:	d106      	bne.n	12cf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   12ce2:	4a05      	ldr	r2, [pc, #20]	; (12cf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12ce4:	9b01      	ldr	r3, [sp, #4]
   12ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cea:	2b00      	cmp	r3, #0
   12cec:	d100      	bne.n	12cf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12cee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12cf0:	bf00      	nop
   12cf2:	b003      	add	sp, #12
   12cf4:	f85d fb04 	ldr.w	pc, [sp], #4
   12cf8:	1fff95c0 	.word	0x1fff95c0
   12cfc:	1fff95bc 	.word	0x1fff95bc

00012d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12d00:	b500      	push	{lr}
   12d02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d04:	f7ed ff72 	bl	bec <Sys_GetCoreID>
   12d08:	4603      	mov	r3, r0
   12d0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   12d0c:	4a10      	ldr	r2, [pc, #64]	; (12d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12d0e:	9b01      	ldr	r3, [sp, #4]
   12d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d14:	2b00      	cmp	r3, #0
   12d16:	d10d      	bne.n	12d34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d18:	f7ed fe2e 	bl	978 <Adc_schm_read_msr>
   12d1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d1e:	9b00      	ldr	r3, [sp, #0]
   12d20:	f003 0301 	and.w	r3, r3, #1
   12d24:	2b00      	cmp	r3, #0
   12d26:	d100      	bne.n	12d2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   12d2a:	490a      	ldr	r1, [pc, #40]	; (12d54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   12d2c:	9b01      	ldr	r3, [sp, #4]
   12d2e:	9a00      	ldr	r2, [sp, #0]
   12d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   12d34:	4a06      	ldr	r2, [pc, #24]	; (12d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12d36:	9b01      	ldr	r3, [sp, #4]
   12d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d3c:	1c5a      	adds	r2, r3, #1
   12d3e:	4904      	ldr	r1, [pc, #16]	; (12d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12d40:	9b01      	ldr	r3, [sp, #4]
   12d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d46:	bf00      	nop
   12d48:	b003      	add	sp, #12
   12d4a:	f85d fb04 	ldr.w	pc, [sp], #4
   12d4e:	bf00      	nop
   12d50:	1fff95c8 	.word	0x1fff95c8
   12d54:	1fff95c4 	.word	0x1fff95c4

00012d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12d58:	b500      	push	{lr}
   12d5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d5c:	f7ed ff46 	bl	bec <Sys_GetCoreID>
   12d60:	4603      	mov	r3, r0
   12d62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   12d64:	4a0d      	ldr	r2, [pc, #52]	; (12d9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12d66:	9b01      	ldr	r3, [sp, #4]
   12d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d6c:	1e5a      	subs	r2, r3, #1
   12d6e:	490b      	ldr	r1, [pc, #44]	; (12d9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12d70:	9b01      	ldr	r3, [sp, #4]
   12d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   12d76:	4a0a      	ldr	r2, [pc, #40]	; (12da0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   12d78:	9b01      	ldr	r3, [sp, #4]
   12d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d7e:	f003 0301 	and.w	r3, r3, #1
   12d82:	2b00      	cmp	r3, #0
   12d84:	d106      	bne.n	12d94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   12d86:	4a05      	ldr	r2, [pc, #20]	; (12d9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12d88:	9b01      	ldr	r3, [sp, #4]
   12d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d8e:	2b00      	cmp	r3, #0
   12d90:	d100      	bne.n	12d94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d94:	bf00      	nop
   12d96:	b003      	add	sp, #12
   12d98:	f85d fb04 	ldr.w	pc, [sp], #4
   12d9c:	1fff95c8 	.word	0x1fff95c8
   12da0:	1fff95c4 	.word	0x1fff95c4

00012da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12da4:	b500      	push	{lr}
   12da6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12da8:	f7ed ff20 	bl	bec <Sys_GetCoreID>
   12dac:	4603      	mov	r3, r0
   12dae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   12db0:	4a10      	ldr	r2, [pc, #64]	; (12df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12db2:	9b01      	ldr	r3, [sp, #4]
   12db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12db8:	2b00      	cmp	r3, #0
   12dba:	d10d      	bne.n	12dd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12dbc:	f7ed fddc 	bl	978 <Adc_schm_read_msr>
   12dc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12dc2:	9b00      	ldr	r3, [sp, #0]
   12dc4:	f003 0301 	and.w	r3, r3, #1
   12dc8:	2b00      	cmp	r3, #0
   12dca:	d100      	bne.n	12dce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12dcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   12dce:	490a      	ldr	r1, [pc, #40]	; (12df8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   12dd0:	9b01      	ldr	r3, [sp, #4]
   12dd2:	9a00      	ldr	r2, [sp, #0]
   12dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   12dd8:	4a06      	ldr	r2, [pc, #24]	; (12df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12dda:	9b01      	ldr	r3, [sp, #4]
   12ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12de0:	1c5a      	adds	r2, r3, #1
   12de2:	4904      	ldr	r1, [pc, #16]	; (12df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12de4:	9b01      	ldr	r3, [sp, #4]
   12de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12dea:	bf00      	nop
   12dec:	b003      	add	sp, #12
   12dee:	f85d fb04 	ldr.w	pc, [sp], #4
   12df2:	bf00      	nop
   12df4:	1fff95d0 	.word	0x1fff95d0
   12df8:	1fff95cc 	.word	0x1fff95cc

00012dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12dfc:	b500      	push	{lr}
   12dfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e00:	f7ed fef4 	bl	bec <Sys_GetCoreID>
   12e04:	4603      	mov	r3, r0
   12e06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   12e08:	4a0d      	ldr	r2, [pc, #52]	; (12e40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12e0a:	9b01      	ldr	r3, [sp, #4]
   12e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e10:	1e5a      	subs	r2, r3, #1
   12e12:	490b      	ldr	r1, [pc, #44]	; (12e40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12e14:	9b01      	ldr	r3, [sp, #4]
   12e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   12e1a:	4a0a      	ldr	r2, [pc, #40]	; (12e44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   12e1c:	9b01      	ldr	r3, [sp, #4]
   12e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e22:	f003 0301 	and.w	r3, r3, #1
   12e26:	2b00      	cmp	r3, #0
   12e28:	d106      	bne.n	12e38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   12e2a:	4a05      	ldr	r2, [pc, #20]	; (12e40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12e2c:	9b01      	ldr	r3, [sp, #4]
   12e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e32:	2b00      	cmp	r3, #0
   12e34:	d100      	bne.n	12e38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e38:	bf00      	nop
   12e3a:	b003      	add	sp, #12
   12e3c:	f85d fb04 	ldr.w	pc, [sp], #4
   12e40:	1fff95d0 	.word	0x1fff95d0
   12e44:	1fff95cc 	.word	0x1fff95cc

00012e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12e48:	b500      	push	{lr}
   12e4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e4c:	f7ed fece 	bl	bec <Sys_GetCoreID>
   12e50:	4603      	mov	r3, r0
   12e52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   12e54:	4a10      	ldr	r2, [pc, #64]	; (12e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12e56:	9b01      	ldr	r3, [sp, #4]
   12e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e5c:	2b00      	cmp	r3, #0
   12e5e:	d10d      	bne.n	12e7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e60:	f7ed fd8a 	bl	978 <Adc_schm_read_msr>
   12e64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e66:	9b00      	ldr	r3, [sp, #0]
   12e68:	f003 0301 	and.w	r3, r3, #1
   12e6c:	2b00      	cmp	r3, #0
   12e6e:	d100      	bne.n	12e72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   12e72:	490a      	ldr	r1, [pc, #40]	; (12e9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   12e74:	9b01      	ldr	r3, [sp, #4]
   12e76:	9a00      	ldr	r2, [sp, #0]
   12e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   12e7c:	4a06      	ldr	r2, [pc, #24]	; (12e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12e7e:	9b01      	ldr	r3, [sp, #4]
   12e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e84:	1c5a      	adds	r2, r3, #1
   12e86:	4904      	ldr	r1, [pc, #16]	; (12e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12e88:	9b01      	ldr	r3, [sp, #4]
   12e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e8e:	bf00      	nop
   12e90:	b003      	add	sp, #12
   12e92:	f85d fb04 	ldr.w	pc, [sp], #4
   12e96:	bf00      	nop
   12e98:	1fff95d8 	.word	0x1fff95d8
   12e9c:	1fff95d4 	.word	0x1fff95d4

00012ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12ea0:	b500      	push	{lr}
   12ea2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ea4:	f7ed fea2 	bl	bec <Sys_GetCoreID>
   12ea8:	4603      	mov	r3, r0
   12eaa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   12eac:	4a0d      	ldr	r2, [pc, #52]	; (12ee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12eae:	9b01      	ldr	r3, [sp, #4]
   12eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eb4:	1e5a      	subs	r2, r3, #1
   12eb6:	490b      	ldr	r1, [pc, #44]	; (12ee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12eb8:	9b01      	ldr	r3, [sp, #4]
   12eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   12ebe:	4a0a      	ldr	r2, [pc, #40]	; (12ee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   12ec0:	9b01      	ldr	r3, [sp, #4]
   12ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ec6:	f003 0301 	and.w	r3, r3, #1
   12eca:	2b00      	cmp	r3, #0
   12ecc:	d106      	bne.n	12edc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   12ece:	4a05      	ldr	r2, [pc, #20]	; (12ee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12ed0:	9b01      	ldr	r3, [sp, #4]
   12ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ed6:	2b00      	cmp	r3, #0
   12ed8:	d100      	bne.n	12edc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12eda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12edc:	bf00      	nop
   12ede:	b003      	add	sp, #12
   12ee0:	f85d fb04 	ldr.w	pc, [sp], #4
   12ee4:	1fff95d8 	.word	0x1fff95d8
   12ee8:	1fff95d4 	.word	0x1fff95d4

00012eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12eec:	b500      	push	{lr}
   12eee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ef0:	f7ed fe7c 	bl	bec <Sys_GetCoreID>
   12ef4:	4603      	mov	r3, r0
   12ef6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   12ef8:	4a10      	ldr	r2, [pc, #64]	; (12f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12efa:	9b01      	ldr	r3, [sp, #4]
   12efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f00:	2b00      	cmp	r3, #0
   12f02:	d10d      	bne.n	12f20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f04:	f7ed fd38 	bl	978 <Adc_schm_read_msr>
   12f08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f0a:	9b00      	ldr	r3, [sp, #0]
   12f0c:	f003 0301 	and.w	r3, r3, #1
   12f10:	2b00      	cmp	r3, #0
   12f12:	d100      	bne.n	12f16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   12f16:	490a      	ldr	r1, [pc, #40]	; (12f40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   12f18:	9b01      	ldr	r3, [sp, #4]
   12f1a:	9a00      	ldr	r2, [sp, #0]
   12f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   12f20:	4a06      	ldr	r2, [pc, #24]	; (12f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12f22:	9b01      	ldr	r3, [sp, #4]
   12f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f28:	1c5a      	adds	r2, r3, #1
   12f2a:	4904      	ldr	r1, [pc, #16]	; (12f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12f2c:	9b01      	ldr	r3, [sp, #4]
   12f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f32:	bf00      	nop
   12f34:	b003      	add	sp, #12
   12f36:	f85d fb04 	ldr.w	pc, [sp], #4
   12f3a:	bf00      	nop
   12f3c:	1fff95e0 	.word	0x1fff95e0
   12f40:	1fff95dc 	.word	0x1fff95dc

00012f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12f44:	b500      	push	{lr}
   12f46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f48:	f7ed fe50 	bl	bec <Sys_GetCoreID>
   12f4c:	4603      	mov	r3, r0
   12f4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   12f50:	4a0d      	ldr	r2, [pc, #52]	; (12f88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12f52:	9b01      	ldr	r3, [sp, #4]
   12f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f58:	1e5a      	subs	r2, r3, #1
   12f5a:	490b      	ldr	r1, [pc, #44]	; (12f88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12f5c:	9b01      	ldr	r3, [sp, #4]
   12f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   12f62:	4a0a      	ldr	r2, [pc, #40]	; (12f8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   12f64:	9b01      	ldr	r3, [sp, #4]
   12f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f6a:	f003 0301 	and.w	r3, r3, #1
   12f6e:	2b00      	cmp	r3, #0
   12f70:	d106      	bne.n	12f80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   12f72:	4a05      	ldr	r2, [pc, #20]	; (12f88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12f74:	9b01      	ldr	r3, [sp, #4]
   12f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f7a:	2b00      	cmp	r3, #0
   12f7c:	d100      	bne.n	12f80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f80:	bf00      	nop
   12f82:	b003      	add	sp, #12
   12f84:	f85d fb04 	ldr.w	pc, [sp], #4
   12f88:	1fff95e0 	.word	0x1fff95e0
   12f8c:	1fff95dc 	.word	0x1fff95dc

00012f90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   12f90:	b500      	push	{lr}
   12f92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f94:	f7ed fe2a 	bl	bec <Sys_GetCoreID>
   12f98:	4603      	mov	r3, r0
   12f9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   12f9c:	4a10      	ldr	r2, [pc, #64]	; (12fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   12f9e:	9b01      	ldr	r3, [sp, #4]
   12fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fa4:	2b00      	cmp	r3, #0
   12fa6:	d10d      	bne.n	12fc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12fa8:	f7ed fce6 	bl	978 <Adc_schm_read_msr>
   12fac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12fae:	9b00      	ldr	r3, [sp, #0]
   12fb0:	f003 0301 	and.w	r3, r3, #1
   12fb4:	2b00      	cmp	r3, #0
   12fb6:	d100      	bne.n	12fba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12fb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   12fba:	490a      	ldr	r1, [pc, #40]	; (12fe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   12fbc:	9b01      	ldr	r3, [sp, #4]
   12fbe:	9a00      	ldr	r2, [sp, #0]
   12fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   12fc4:	4a06      	ldr	r2, [pc, #24]	; (12fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   12fc6:	9b01      	ldr	r3, [sp, #4]
   12fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fcc:	1c5a      	adds	r2, r3, #1
   12fce:	4904      	ldr	r1, [pc, #16]	; (12fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   12fd0:	9b01      	ldr	r3, [sp, #4]
   12fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12fd6:	bf00      	nop
   12fd8:	b003      	add	sp, #12
   12fda:	f85d fb04 	ldr.w	pc, [sp], #4
   12fde:	bf00      	nop
   12fe0:	1fff95e8 	.word	0x1fff95e8
   12fe4:	1fff95e4 	.word	0x1fff95e4

00012fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   12fe8:	b500      	push	{lr}
   12fea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fec:	f7ed fdfe 	bl	bec <Sys_GetCoreID>
   12ff0:	4603      	mov	r3, r0
   12ff2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   12ff4:	4a0d      	ldr	r2, [pc, #52]	; (1302c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   12ff6:	9b01      	ldr	r3, [sp, #4]
   12ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ffc:	1e5a      	subs	r2, r3, #1
   12ffe:	490b      	ldr	r1, [pc, #44]	; (1302c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   13000:	9b01      	ldr	r3, [sp, #4]
   13002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   13006:	4a0a      	ldr	r2, [pc, #40]	; (13030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   13008:	9b01      	ldr	r3, [sp, #4]
   1300a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1300e:	f003 0301 	and.w	r3, r3, #1
   13012:	2b00      	cmp	r3, #0
   13014:	d106      	bne.n	13024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   13016:	4a05      	ldr	r2, [pc, #20]	; (1302c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   13018:	9b01      	ldr	r3, [sp, #4]
   1301a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1301e:	2b00      	cmp	r3, #0
   13020:	d100      	bne.n	13024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13022:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13024:	bf00      	nop
   13026:	b003      	add	sp, #12
   13028:	f85d fb04 	ldr.w	pc, [sp], #4
   1302c:	1fff95e8 	.word	0x1fff95e8
   13030:	1fff95e4 	.word	0x1fff95e4

00013034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   13034:	b500      	push	{lr}
   13036:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13038:	f7ed fdd8 	bl	bec <Sys_GetCoreID>
   1303c:	4603      	mov	r3, r0
   1303e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   13040:	4a10      	ldr	r2, [pc, #64]	; (13084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   13042:	9b01      	ldr	r3, [sp, #4]
   13044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13048:	2b00      	cmp	r3, #0
   1304a:	d10d      	bne.n	13068 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1304c:	f7ed fc94 	bl	978 <Adc_schm_read_msr>
   13050:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13052:	9b00      	ldr	r3, [sp, #0]
   13054:	f003 0301 	and.w	r3, r3, #1
   13058:	2b00      	cmp	r3, #0
   1305a:	d100      	bne.n	1305e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1305c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   1305e:	490a      	ldr	r1, [pc, #40]	; (13088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   13060:	9b01      	ldr	r3, [sp, #4]
   13062:	9a00      	ldr	r2, [sp, #0]
   13064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   13068:	4a06      	ldr	r2, [pc, #24]	; (13084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1306a:	9b01      	ldr	r3, [sp, #4]
   1306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13070:	1c5a      	adds	r2, r3, #1
   13072:	4904      	ldr	r1, [pc, #16]	; (13084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   13074:	9b01      	ldr	r3, [sp, #4]
   13076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1307a:	bf00      	nop
   1307c:	b003      	add	sp, #12
   1307e:	f85d fb04 	ldr.w	pc, [sp], #4
   13082:	bf00      	nop
   13084:	1fff95f0 	.word	0x1fff95f0
   13088:	1fff95ec 	.word	0x1fff95ec

0001308c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   1308c:	b500      	push	{lr}
   1308e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13090:	f7ed fdac 	bl	bec <Sys_GetCoreID>
   13094:	4603      	mov	r3, r0
   13096:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   13098:	4a0d      	ldr	r2, [pc, #52]	; (130d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   1309a:	9b01      	ldr	r3, [sp, #4]
   1309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130a0:	1e5a      	subs	r2, r3, #1
   130a2:	490b      	ldr	r1, [pc, #44]	; (130d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   130a4:	9b01      	ldr	r3, [sp, #4]
   130a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   130aa:	4a0a      	ldr	r2, [pc, #40]	; (130d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   130ac:	9b01      	ldr	r3, [sp, #4]
   130ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130b2:	f003 0301 	and.w	r3, r3, #1
   130b6:	2b00      	cmp	r3, #0
   130b8:	d106      	bne.n	130c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   130ba:	4a05      	ldr	r2, [pc, #20]	; (130d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   130bc:	9b01      	ldr	r3, [sp, #4]
   130be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130c2:	2b00      	cmp	r3, #0
   130c4:	d100      	bne.n	130c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   130c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   130c8:	bf00      	nop
   130ca:	b003      	add	sp, #12
   130cc:	f85d fb04 	ldr.w	pc, [sp], #4
   130d0:	1fff95f0 	.word	0x1fff95f0
   130d4:	1fff95ec 	.word	0x1fff95ec

000130d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   130d8:	b500      	push	{lr}
   130da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130dc:	f7ed fd86 	bl	bec <Sys_GetCoreID>
   130e0:	4603      	mov	r3, r0
   130e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   130e4:	4a10      	ldr	r2, [pc, #64]	; (13128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   130e6:	9b01      	ldr	r3, [sp, #4]
   130e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130ec:	2b00      	cmp	r3, #0
   130ee:	d10d      	bne.n	1310c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   130f0:	f7ed fc42 	bl	978 <Adc_schm_read_msr>
   130f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   130f6:	9b00      	ldr	r3, [sp, #0]
   130f8:	f003 0301 	and.w	r3, r3, #1
   130fc:	2b00      	cmp	r3, #0
   130fe:	d100      	bne.n	13102 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13100:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   13102:	490a      	ldr	r1, [pc, #40]	; (1312c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   13104:	9b01      	ldr	r3, [sp, #4]
   13106:	9a00      	ldr	r2, [sp, #0]
   13108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   1310c:	4a06      	ldr	r2, [pc, #24]	; (13128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   1310e:	9b01      	ldr	r3, [sp, #4]
   13110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13114:	1c5a      	adds	r2, r3, #1
   13116:	4904      	ldr	r1, [pc, #16]	; (13128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   13118:	9b01      	ldr	r3, [sp, #4]
   1311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1311e:	bf00      	nop
   13120:	b003      	add	sp, #12
   13122:	f85d fb04 	ldr.w	pc, [sp], #4
   13126:	bf00      	nop
   13128:	1fff95f8 	.word	0x1fff95f8
   1312c:	1fff95f4 	.word	0x1fff95f4

00013130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   13130:	b500      	push	{lr}
   13132:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13134:	f7ed fd5a 	bl	bec <Sys_GetCoreID>
   13138:	4603      	mov	r3, r0
   1313a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   1313c:	4a0d      	ldr	r2, [pc, #52]	; (13174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1313e:	9b01      	ldr	r3, [sp, #4]
   13140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13144:	1e5a      	subs	r2, r3, #1
   13146:	490b      	ldr	r1, [pc, #44]	; (13174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   13148:	9b01      	ldr	r3, [sp, #4]
   1314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   1314e:	4a0a      	ldr	r2, [pc, #40]	; (13178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   13150:	9b01      	ldr	r3, [sp, #4]
   13152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13156:	f003 0301 	and.w	r3, r3, #1
   1315a:	2b00      	cmp	r3, #0
   1315c:	d106      	bne.n	1316c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   1315e:	4a05      	ldr	r2, [pc, #20]	; (13174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   13160:	9b01      	ldr	r3, [sp, #4]
   13162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13166:	2b00      	cmp	r3, #0
   13168:	d100      	bne.n	1316c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1316a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1316c:	bf00      	nop
   1316e:	b003      	add	sp, #12
   13170:	f85d fb04 	ldr.w	pc, [sp], #4
   13174:	1fff95f8 	.word	0x1fff95f8
   13178:	1fff95f4 	.word	0x1fff95f4

0001317c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   1317c:	b500      	push	{lr}
   1317e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13180:	f7ed fd34 	bl	bec <Sys_GetCoreID>
   13184:	4603      	mov	r3, r0
   13186:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   13188:	4a10      	ldr	r2, [pc, #64]	; (131cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1318a:	9b01      	ldr	r3, [sp, #4]
   1318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13190:	2b00      	cmp	r3, #0
   13192:	d10d      	bne.n	131b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13194:	f7ed fbf0 	bl	978 <Adc_schm_read_msr>
   13198:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1319a:	9b00      	ldr	r3, [sp, #0]
   1319c:	f003 0301 	and.w	r3, r3, #1
   131a0:	2b00      	cmp	r3, #0
   131a2:	d100      	bne.n	131a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   131a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   131a6:	490a      	ldr	r1, [pc, #40]	; (131d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   131a8:	9b01      	ldr	r3, [sp, #4]
   131aa:	9a00      	ldr	r2, [sp, #0]
   131ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   131b0:	4a06      	ldr	r2, [pc, #24]	; (131cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   131b2:	9b01      	ldr	r3, [sp, #4]
   131b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131b8:	1c5a      	adds	r2, r3, #1
   131ba:	4904      	ldr	r1, [pc, #16]	; (131cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   131bc:	9b01      	ldr	r3, [sp, #4]
   131be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   131c2:	bf00      	nop
   131c4:	b003      	add	sp, #12
   131c6:	f85d fb04 	ldr.w	pc, [sp], #4
   131ca:	bf00      	nop
   131cc:	1fff9600 	.word	0x1fff9600
   131d0:	1fff95fc 	.word	0x1fff95fc

000131d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   131d4:	b500      	push	{lr}
   131d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131d8:	f7ed fd08 	bl	bec <Sys_GetCoreID>
   131dc:	4603      	mov	r3, r0
   131de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   131e0:	4a0d      	ldr	r2, [pc, #52]	; (13218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   131e2:	9b01      	ldr	r3, [sp, #4]
   131e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131e8:	1e5a      	subs	r2, r3, #1
   131ea:	490b      	ldr	r1, [pc, #44]	; (13218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   131ec:	9b01      	ldr	r3, [sp, #4]
   131ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   131f2:	4a0a      	ldr	r2, [pc, #40]	; (1321c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   131f4:	9b01      	ldr	r3, [sp, #4]
   131f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131fa:	f003 0301 	and.w	r3, r3, #1
   131fe:	2b00      	cmp	r3, #0
   13200:	d106      	bne.n	13210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   13202:	4a05      	ldr	r2, [pc, #20]	; (13218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   13204:	9b01      	ldr	r3, [sp, #4]
   13206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1320a:	2b00      	cmp	r3, #0
   1320c:	d100      	bne.n	13210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1320e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13210:	bf00      	nop
   13212:	b003      	add	sp, #12
   13214:	f85d fb04 	ldr.w	pc, [sp], #4
   13218:	1fff9600 	.word	0x1fff9600
   1321c:	1fff95fc 	.word	0x1fff95fc

00013220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   13220:	b500      	push	{lr}
   13222:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13224:	f7ed fce2 	bl	bec <Sys_GetCoreID>
   13228:	4603      	mov	r3, r0
   1322a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   1322c:	4a10      	ldr	r2, [pc, #64]	; (13270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1322e:	9b01      	ldr	r3, [sp, #4]
   13230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13234:	2b00      	cmp	r3, #0
   13236:	d10d      	bne.n	13254 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13238:	f7ed fb9e 	bl	978 <Adc_schm_read_msr>
   1323c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1323e:	9b00      	ldr	r3, [sp, #0]
   13240:	f003 0301 	and.w	r3, r3, #1
   13244:	2b00      	cmp	r3, #0
   13246:	d100      	bne.n	1324a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13248:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   1324a:	490a      	ldr	r1, [pc, #40]	; (13274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   1324c:	9b01      	ldr	r3, [sp, #4]
   1324e:	9a00      	ldr	r2, [sp, #0]
   13250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   13254:	4a06      	ldr	r2, [pc, #24]	; (13270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   13256:	9b01      	ldr	r3, [sp, #4]
   13258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1325c:	1c5a      	adds	r2, r3, #1
   1325e:	4904      	ldr	r1, [pc, #16]	; (13270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   13260:	9b01      	ldr	r3, [sp, #4]
   13262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13266:	bf00      	nop
   13268:	b003      	add	sp, #12
   1326a:	f85d fb04 	ldr.w	pc, [sp], #4
   1326e:	bf00      	nop
   13270:	1fff9608 	.word	0x1fff9608
   13274:	1fff9604 	.word	0x1fff9604

00013278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   13278:	b500      	push	{lr}
   1327a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1327c:	f7ed fcb6 	bl	bec <Sys_GetCoreID>
   13280:	4603      	mov	r3, r0
   13282:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   13284:	4a0d      	ldr	r2, [pc, #52]	; (132bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   13286:	9b01      	ldr	r3, [sp, #4]
   13288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1328c:	1e5a      	subs	r2, r3, #1
   1328e:	490b      	ldr	r1, [pc, #44]	; (132bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   13290:	9b01      	ldr	r3, [sp, #4]
   13292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   13296:	4a0a      	ldr	r2, [pc, #40]	; (132c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   13298:	9b01      	ldr	r3, [sp, #4]
   1329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1329e:	f003 0301 	and.w	r3, r3, #1
   132a2:	2b00      	cmp	r3, #0
   132a4:	d106      	bne.n	132b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   132a6:	4a05      	ldr	r2, [pc, #20]	; (132bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   132a8:	9b01      	ldr	r3, [sp, #4]
   132aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ae:	2b00      	cmp	r3, #0
   132b0:	d100      	bne.n	132b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   132b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   132b4:	bf00      	nop
   132b6:	b003      	add	sp, #12
   132b8:	f85d fb04 	ldr.w	pc, [sp], #4
   132bc:	1fff9608 	.word	0x1fff9608
   132c0:	1fff9604 	.word	0x1fff9604

000132c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   132c4:	b500      	push	{lr}
   132c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132c8:	f7ed fc90 	bl	bec <Sys_GetCoreID>
   132cc:	4603      	mov	r3, r0
   132ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   132d0:	4a10      	ldr	r2, [pc, #64]	; (13314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   132d2:	9b01      	ldr	r3, [sp, #4]
   132d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132d8:	2b00      	cmp	r3, #0
   132da:	d10d      	bne.n	132f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   132dc:	f7ed fb4c 	bl	978 <Adc_schm_read_msr>
   132e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   132e2:	9b00      	ldr	r3, [sp, #0]
   132e4:	f003 0301 	and.w	r3, r3, #1
   132e8:	2b00      	cmp	r3, #0
   132ea:	d100      	bne.n	132ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   132ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   132ee:	490a      	ldr	r1, [pc, #40]	; (13318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   132f0:	9b01      	ldr	r3, [sp, #4]
   132f2:	9a00      	ldr	r2, [sp, #0]
   132f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   132f8:	4a06      	ldr	r2, [pc, #24]	; (13314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   132fa:	9b01      	ldr	r3, [sp, #4]
   132fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13300:	1c5a      	adds	r2, r3, #1
   13302:	4904      	ldr	r1, [pc, #16]	; (13314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   13304:	9b01      	ldr	r3, [sp, #4]
   13306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1330a:	bf00      	nop
   1330c:	b003      	add	sp, #12
   1330e:	f85d fb04 	ldr.w	pc, [sp], #4
   13312:	bf00      	nop
   13314:	1fff9610 	.word	0x1fff9610
   13318:	1fff960c 	.word	0x1fff960c

0001331c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   1331c:	b500      	push	{lr}
   1331e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13320:	f7ed fc64 	bl	bec <Sys_GetCoreID>
   13324:	4603      	mov	r3, r0
   13326:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   13328:	4a0d      	ldr	r2, [pc, #52]	; (13360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   1332a:	9b01      	ldr	r3, [sp, #4]
   1332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13330:	1e5a      	subs	r2, r3, #1
   13332:	490b      	ldr	r1, [pc, #44]	; (13360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   13334:	9b01      	ldr	r3, [sp, #4]
   13336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   1333a:	4a0a      	ldr	r2, [pc, #40]	; (13364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   1333c:	9b01      	ldr	r3, [sp, #4]
   1333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13342:	f003 0301 	and.w	r3, r3, #1
   13346:	2b00      	cmp	r3, #0
   13348:	d106      	bne.n	13358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   1334a:	4a05      	ldr	r2, [pc, #20]	; (13360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   1334c:	9b01      	ldr	r3, [sp, #4]
   1334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13352:	2b00      	cmp	r3, #0
   13354:	d100      	bne.n	13358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13356:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13358:	bf00      	nop
   1335a:	b003      	add	sp, #12
   1335c:	f85d fb04 	ldr.w	pc, [sp], #4
   13360:	1fff9610 	.word	0x1fff9610
   13364:	1fff960c 	.word	0x1fff960c

00013368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   13368:	b500      	push	{lr}
   1336a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1336c:	f7ed fc3e 	bl	bec <Sys_GetCoreID>
   13370:	4603      	mov	r3, r0
   13372:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   13374:	4a10      	ldr	r2, [pc, #64]	; (133b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   13376:	9b01      	ldr	r3, [sp, #4]
   13378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1337c:	2b00      	cmp	r3, #0
   1337e:	d10d      	bne.n	1339c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13380:	f7ed fafa 	bl	978 <Adc_schm_read_msr>
   13384:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13386:	9b00      	ldr	r3, [sp, #0]
   13388:	f003 0301 	and.w	r3, r3, #1
   1338c:	2b00      	cmp	r3, #0
   1338e:	d100      	bne.n	13392 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13390:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   13392:	490a      	ldr	r1, [pc, #40]	; (133bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   13394:	9b01      	ldr	r3, [sp, #4]
   13396:	9a00      	ldr	r2, [sp, #0]
   13398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   1339c:	4a06      	ldr	r2, [pc, #24]	; (133b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1339e:	9b01      	ldr	r3, [sp, #4]
   133a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133a4:	1c5a      	adds	r2, r3, #1
   133a6:	4904      	ldr	r1, [pc, #16]	; (133b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   133a8:	9b01      	ldr	r3, [sp, #4]
   133aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   133ae:	bf00      	nop
   133b0:	b003      	add	sp, #12
   133b2:	f85d fb04 	ldr.w	pc, [sp], #4
   133b6:	bf00      	nop
   133b8:	1fff9618 	.word	0x1fff9618
   133bc:	1fff9614 	.word	0x1fff9614

000133c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   133c0:	b500      	push	{lr}
   133c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133c4:	f7ed fc12 	bl	bec <Sys_GetCoreID>
   133c8:	4603      	mov	r3, r0
   133ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   133cc:	4a0d      	ldr	r2, [pc, #52]	; (13404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   133ce:	9b01      	ldr	r3, [sp, #4]
   133d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133d4:	1e5a      	subs	r2, r3, #1
   133d6:	490b      	ldr	r1, [pc, #44]	; (13404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   133d8:	9b01      	ldr	r3, [sp, #4]
   133da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   133de:	4a0a      	ldr	r2, [pc, #40]	; (13408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   133e0:	9b01      	ldr	r3, [sp, #4]
   133e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133e6:	f003 0301 	and.w	r3, r3, #1
   133ea:	2b00      	cmp	r3, #0
   133ec:	d106      	bne.n	133fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   133ee:	4a05      	ldr	r2, [pc, #20]	; (13404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   133f0:	9b01      	ldr	r3, [sp, #4]
   133f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133f6:	2b00      	cmp	r3, #0
   133f8:	d100      	bne.n	133fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   133fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133fc:	bf00      	nop
   133fe:	b003      	add	sp, #12
   13400:	f85d fb04 	ldr.w	pc, [sp], #4
   13404:	1fff9618 	.word	0x1fff9618
   13408:	1fff9614 	.word	0x1fff9614

0001340c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   1340c:	b500      	push	{lr}
   1340e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13410:	f7ed fbec 	bl	bec <Sys_GetCoreID>
   13414:	4603      	mov	r3, r0
   13416:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   13418:	4a10      	ldr	r2, [pc, #64]	; (1345c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   1341a:	9b01      	ldr	r3, [sp, #4]
   1341c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13420:	2b00      	cmp	r3, #0
   13422:	d10d      	bne.n	13440 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13424:	f7ed faa8 	bl	978 <Adc_schm_read_msr>
   13428:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1342a:	9b00      	ldr	r3, [sp, #0]
   1342c:	f003 0301 	and.w	r3, r3, #1
   13430:	2b00      	cmp	r3, #0
   13432:	d100      	bne.n	13436 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13434:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   13436:	490a      	ldr	r1, [pc, #40]	; (13460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   13438:	9b01      	ldr	r3, [sp, #4]
   1343a:	9a00      	ldr	r2, [sp, #0]
   1343c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   13440:	4a06      	ldr	r2, [pc, #24]	; (1345c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   13442:	9b01      	ldr	r3, [sp, #4]
   13444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13448:	1c5a      	adds	r2, r3, #1
   1344a:	4904      	ldr	r1, [pc, #16]	; (1345c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   1344c:	9b01      	ldr	r3, [sp, #4]
   1344e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13452:	bf00      	nop
   13454:	b003      	add	sp, #12
   13456:	f85d fb04 	ldr.w	pc, [sp], #4
   1345a:	bf00      	nop
   1345c:	1fff9620 	.word	0x1fff9620
   13460:	1fff961c 	.word	0x1fff961c

00013464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   13464:	b500      	push	{lr}
   13466:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13468:	f7ed fbc0 	bl	bec <Sys_GetCoreID>
   1346c:	4603      	mov	r3, r0
   1346e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   13470:	4a0d      	ldr	r2, [pc, #52]	; (134a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   13472:	9b01      	ldr	r3, [sp, #4]
   13474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13478:	1e5a      	subs	r2, r3, #1
   1347a:	490b      	ldr	r1, [pc, #44]	; (134a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   1347c:	9b01      	ldr	r3, [sp, #4]
   1347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   13482:	4a0a      	ldr	r2, [pc, #40]	; (134ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   13484:	9b01      	ldr	r3, [sp, #4]
   13486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1348a:	f003 0301 	and.w	r3, r3, #1
   1348e:	2b00      	cmp	r3, #0
   13490:	d106      	bne.n	134a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   13492:	4a05      	ldr	r2, [pc, #20]	; (134a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   13494:	9b01      	ldr	r3, [sp, #4]
   13496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1349a:	2b00      	cmp	r3, #0
   1349c:	d100      	bne.n	134a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1349e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   134a0:	bf00      	nop
   134a2:	b003      	add	sp, #12
   134a4:	f85d fb04 	ldr.w	pc, [sp], #4
   134a8:	1fff9620 	.word	0x1fff9620
   134ac:	1fff961c 	.word	0x1fff961c

000134b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   134b0:	b500      	push	{lr}
   134b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134b4:	f7ed fb9a 	bl	bec <Sys_GetCoreID>
   134b8:	4603      	mov	r3, r0
   134ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   134bc:	4a10      	ldr	r2, [pc, #64]	; (13500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   134be:	9b01      	ldr	r3, [sp, #4]
   134c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134c4:	2b00      	cmp	r3, #0
   134c6:	d10d      	bne.n	134e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   134c8:	f7ed fa56 	bl	978 <Adc_schm_read_msr>
   134cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   134ce:	9b00      	ldr	r3, [sp, #0]
   134d0:	f003 0301 	and.w	r3, r3, #1
   134d4:	2b00      	cmp	r3, #0
   134d6:	d100      	bne.n	134da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   134d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   134da:	490a      	ldr	r1, [pc, #40]	; (13504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   134dc:	9b01      	ldr	r3, [sp, #4]
   134de:	9a00      	ldr	r2, [sp, #0]
   134e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   134e4:	4a06      	ldr	r2, [pc, #24]	; (13500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   134e6:	9b01      	ldr	r3, [sp, #4]
   134e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134ec:	1c5a      	adds	r2, r3, #1
   134ee:	4904      	ldr	r1, [pc, #16]	; (13500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   134f0:	9b01      	ldr	r3, [sp, #4]
   134f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   134f6:	bf00      	nop
   134f8:	b003      	add	sp, #12
   134fa:	f85d fb04 	ldr.w	pc, [sp], #4
   134fe:	bf00      	nop
   13500:	1fff9628 	.word	0x1fff9628
   13504:	1fff9624 	.word	0x1fff9624

00013508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   13508:	b500      	push	{lr}
   1350a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1350c:	f7ed fb6e 	bl	bec <Sys_GetCoreID>
   13510:	4603      	mov	r3, r0
   13512:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   13514:	4a0d      	ldr	r2, [pc, #52]	; (1354c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   13516:	9b01      	ldr	r3, [sp, #4]
   13518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1351c:	1e5a      	subs	r2, r3, #1
   1351e:	490b      	ldr	r1, [pc, #44]	; (1354c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   13520:	9b01      	ldr	r3, [sp, #4]
   13522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   13526:	4a0a      	ldr	r2, [pc, #40]	; (13550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   13528:	9b01      	ldr	r3, [sp, #4]
   1352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1352e:	f003 0301 	and.w	r3, r3, #1
   13532:	2b00      	cmp	r3, #0
   13534:	d106      	bne.n	13544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   13536:	4a05      	ldr	r2, [pc, #20]	; (1354c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   13538:	9b01      	ldr	r3, [sp, #4]
   1353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1353e:	2b00      	cmp	r3, #0
   13540:	d100      	bne.n	13544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13542:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13544:	bf00      	nop
   13546:	b003      	add	sp, #12
   13548:	f85d fb04 	ldr.w	pc, [sp], #4
   1354c:	1fff9628 	.word	0x1fff9628
   13550:	1fff9624 	.word	0x1fff9624

00013554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   13554:	b500      	push	{lr}
   13556:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13558:	f7ed fb48 	bl	bec <Sys_GetCoreID>
   1355c:	4603      	mov	r3, r0
   1355e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   13560:	4a10      	ldr	r2, [pc, #64]	; (135a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   13562:	9b01      	ldr	r3, [sp, #4]
   13564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13568:	2b00      	cmp	r3, #0
   1356a:	d10d      	bne.n	13588 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1356c:	f7ed fa04 	bl	978 <Adc_schm_read_msr>
   13570:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13572:	9b00      	ldr	r3, [sp, #0]
   13574:	f003 0301 	and.w	r3, r3, #1
   13578:	2b00      	cmp	r3, #0
   1357a:	d100      	bne.n	1357e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1357c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   1357e:	490a      	ldr	r1, [pc, #40]	; (135a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   13580:	9b01      	ldr	r3, [sp, #4]
   13582:	9a00      	ldr	r2, [sp, #0]
   13584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   13588:	4a06      	ldr	r2, [pc, #24]	; (135a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   1358a:	9b01      	ldr	r3, [sp, #4]
   1358c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13590:	1c5a      	adds	r2, r3, #1
   13592:	4904      	ldr	r1, [pc, #16]	; (135a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   13594:	9b01      	ldr	r3, [sp, #4]
   13596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1359a:	bf00      	nop
   1359c:	b003      	add	sp, #12
   1359e:	f85d fb04 	ldr.w	pc, [sp], #4
   135a2:	bf00      	nop
   135a4:	1fff9630 	.word	0x1fff9630
   135a8:	1fff962c 	.word	0x1fff962c

000135ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   135ac:	b500      	push	{lr}
   135ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135b0:	f7ed fb1c 	bl	bec <Sys_GetCoreID>
   135b4:	4603      	mov	r3, r0
   135b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   135b8:	4a0d      	ldr	r2, [pc, #52]	; (135f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   135ba:	9b01      	ldr	r3, [sp, #4]
   135bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135c0:	1e5a      	subs	r2, r3, #1
   135c2:	490b      	ldr	r1, [pc, #44]	; (135f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   135c4:	9b01      	ldr	r3, [sp, #4]
   135c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   135ca:	4a0a      	ldr	r2, [pc, #40]	; (135f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   135cc:	9b01      	ldr	r3, [sp, #4]
   135ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135d2:	f003 0301 	and.w	r3, r3, #1
   135d6:	2b00      	cmp	r3, #0
   135d8:	d106      	bne.n	135e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   135da:	4a05      	ldr	r2, [pc, #20]	; (135f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   135dc:	9b01      	ldr	r3, [sp, #4]
   135de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135e2:	2b00      	cmp	r3, #0
   135e4:	d100      	bne.n	135e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   135e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   135e8:	bf00      	nop
   135ea:	b003      	add	sp, #12
   135ec:	f85d fb04 	ldr.w	pc, [sp], #4
   135f0:	1fff9630 	.word	0x1fff9630
   135f4:	1fff962c 	.word	0x1fff962c

000135f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   135f8:	b500      	push	{lr}
   135fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135fc:	f7ed faf6 	bl	bec <Sys_GetCoreID>
   13600:	4603      	mov	r3, r0
   13602:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   13604:	4a10      	ldr	r2, [pc, #64]	; (13648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   13606:	9b01      	ldr	r3, [sp, #4]
   13608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1360c:	2b00      	cmp	r3, #0
   1360e:	d10d      	bne.n	1362c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13610:	f7ed f9b2 	bl	978 <Adc_schm_read_msr>
   13614:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13616:	9b00      	ldr	r3, [sp, #0]
   13618:	f003 0301 	and.w	r3, r3, #1
   1361c:	2b00      	cmp	r3, #0
   1361e:	d100      	bne.n	13622 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13620:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   13622:	490a      	ldr	r1, [pc, #40]	; (1364c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   13624:	9b01      	ldr	r3, [sp, #4]
   13626:	9a00      	ldr	r2, [sp, #0]
   13628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   1362c:	4a06      	ldr	r2, [pc, #24]	; (13648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   1362e:	9b01      	ldr	r3, [sp, #4]
   13630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13634:	1c5a      	adds	r2, r3, #1
   13636:	4904      	ldr	r1, [pc, #16]	; (13648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   13638:	9b01      	ldr	r3, [sp, #4]
   1363a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1363e:	bf00      	nop
   13640:	b003      	add	sp, #12
   13642:	f85d fb04 	ldr.w	pc, [sp], #4
   13646:	bf00      	nop
   13648:	1fff9638 	.word	0x1fff9638
   1364c:	1fff9634 	.word	0x1fff9634

00013650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   13650:	b500      	push	{lr}
   13652:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13654:	f7ed faca 	bl	bec <Sys_GetCoreID>
   13658:	4603      	mov	r3, r0
   1365a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   1365c:	4a0d      	ldr	r2, [pc, #52]	; (13694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1365e:	9b01      	ldr	r3, [sp, #4]
   13660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13664:	1e5a      	subs	r2, r3, #1
   13666:	490b      	ldr	r1, [pc, #44]	; (13694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   13668:	9b01      	ldr	r3, [sp, #4]
   1366a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   1366e:	4a0a      	ldr	r2, [pc, #40]	; (13698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   13670:	9b01      	ldr	r3, [sp, #4]
   13672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13676:	f003 0301 	and.w	r3, r3, #1
   1367a:	2b00      	cmp	r3, #0
   1367c:	d106      	bne.n	1368c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   1367e:	4a05      	ldr	r2, [pc, #20]	; (13694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   13680:	9b01      	ldr	r3, [sp, #4]
   13682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13686:	2b00      	cmp	r3, #0
   13688:	d100      	bne.n	1368c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1368a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1368c:	bf00      	nop
   1368e:	b003      	add	sp, #12
   13690:	f85d fb04 	ldr.w	pc, [sp], #4
   13694:	1fff9638 	.word	0x1fff9638
   13698:	1fff9634 	.word	0x1fff9634

0001369c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   1369c:	b500      	push	{lr}
   1369e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136a0:	f7ed faa4 	bl	bec <Sys_GetCoreID>
   136a4:	4603      	mov	r3, r0
   136a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   136a8:	4a10      	ldr	r2, [pc, #64]	; (136ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   136aa:	9b01      	ldr	r3, [sp, #4]
   136ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136b0:	2b00      	cmp	r3, #0
   136b2:	d10d      	bne.n	136d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   136b4:	f7ed f960 	bl	978 <Adc_schm_read_msr>
   136b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   136ba:	9b00      	ldr	r3, [sp, #0]
   136bc:	f003 0301 	and.w	r3, r3, #1
   136c0:	2b00      	cmp	r3, #0
   136c2:	d100      	bne.n	136c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   136c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   136c6:	490a      	ldr	r1, [pc, #40]	; (136f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   136c8:	9b01      	ldr	r3, [sp, #4]
   136ca:	9a00      	ldr	r2, [sp, #0]
   136cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   136d0:	4a06      	ldr	r2, [pc, #24]	; (136ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   136d2:	9b01      	ldr	r3, [sp, #4]
   136d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136d8:	1c5a      	adds	r2, r3, #1
   136da:	4904      	ldr	r1, [pc, #16]	; (136ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   136dc:	9b01      	ldr	r3, [sp, #4]
   136de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   136e2:	bf00      	nop
   136e4:	b003      	add	sp, #12
   136e6:	f85d fb04 	ldr.w	pc, [sp], #4
   136ea:	bf00      	nop
   136ec:	1fff9640 	.word	0x1fff9640
   136f0:	1fff963c 	.word	0x1fff963c

000136f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   136f4:	b500      	push	{lr}
   136f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136f8:	f7ed fa78 	bl	bec <Sys_GetCoreID>
   136fc:	4603      	mov	r3, r0
   136fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   13700:	4a0d      	ldr	r2, [pc, #52]	; (13738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   13702:	9b01      	ldr	r3, [sp, #4]
   13704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13708:	1e5a      	subs	r2, r3, #1
   1370a:	490b      	ldr	r1, [pc, #44]	; (13738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   1370c:	9b01      	ldr	r3, [sp, #4]
   1370e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   13712:	4a0a      	ldr	r2, [pc, #40]	; (1373c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   13714:	9b01      	ldr	r3, [sp, #4]
   13716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1371a:	f003 0301 	and.w	r3, r3, #1
   1371e:	2b00      	cmp	r3, #0
   13720:	d106      	bne.n	13730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   13722:	4a05      	ldr	r2, [pc, #20]	; (13738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   13724:	9b01      	ldr	r3, [sp, #4]
   13726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1372a:	2b00      	cmp	r3, #0
   1372c:	d100      	bne.n	13730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1372e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13730:	bf00      	nop
   13732:	b003      	add	sp, #12
   13734:	f85d fb04 	ldr.w	pc, [sp], #4
   13738:	1fff9640 	.word	0x1fff9640
   1373c:	1fff963c 	.word	0x1fff963c

00013740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   13740:	b500      	push	{lr}
   13742:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13744:	f7ed fa52 	bl	bec <Sys_GetCoreID>
   13748:	4603      	mov	r3, r0
   1374a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   1374c:	4a10      	ldr	r2, [pc, #64]	; (13790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   1374e:	9b01      	ldr	r3, [sp, #4]
   13750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13754:	2b00      	cmp	r3, #0
   13756:	d10d      	bne.n	13774 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13758:	f7ed f90e 	bl	978 <Adc_schm_read_msr>
   1375c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1375e:	9b00      	ldr	r3, [sp, #0]
   13760:	f003 0301 	and.w	r3, r3, #1
   13764:	2b00      	cmp	r3, #0
   13766:	d100      	bne.n	1376a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13768:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   1376a:	490a      	ldr	r1, [pc, #40]	; (13794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   1376c:	9b01      	ldr	r3, [sp, #4]
   1376e:	9a00      	ldr	r2, [sp, #0]
   13770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   13774:	4a06      	ldr	r2, [pc, #24]	; (13790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   13776:	9b01      	ldr	r3, [sp, #4]
   13778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1377c:	1c5a      	adds	r2, r3, #1
   1377e:	4904      	ldr	r1, [pc, #16]	; (13790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   13780:	9b01      	ldr	r3, [sp, #4]
   13782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13786:	bf00      	nop
   13788:	b003      	add	sp, #12
   1378a:	f85d fb04 	ldr.w	pc, [sp], #4
   1378e:	bf00      	nop
   13790:	1fff9648 	.word	0x1fff9648
   13794:	1fff9644 	.word	0x1fff9644

00013798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   13798:	b500      	push	{lr}
   1379a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1379c:	f7ed fa26 	bl	bec <Sys_GetCoreID>
   137a0:	4603      	mov	r3, r0
   137a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   137a4:	4a0d      	ldr	r2, [pc, #52]	; (137dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   137a6:	9b01      	ldr	r3, [sp, #4]
   137a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137ac:	1e5a      	subs	r2, r3, #1
   137ae:	490b      	ldr	r1, [pc, #44]	; (137dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   137b0:	9b01      	ldr	r3, [sp, #4]
   137b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   137b6:	4a0a      	ldr	r2, [pc, #40]	; (137e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   137b8:	9b01      	ldr	r3, [sp, #4]
   137ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137be:	f003 0301 	and.w	r3, r3, #1
   137c2:	2b00      	cmp	r3, #0
   137c4:	d106      	bne.n	137d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   137c6:	4a05      	ldr	r2, [pc, #20]	; (137dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   137c8:	9b01      	ldr	r3, [sp, #4]
   137ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137ce:	2b00      	cmp	r3, #0
   137d0:	d100      	bne.n	137d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   137d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   137d4:	bf00      	nop
   137d6:	b003      	add	sp, #12
   137d8:	f85d fb04 	ldr.w	pc, [sp], #4
   137dc:	1fff9648 	.word	0x1fff9648
   137e0:	1fff9644 	.word	0x1fff9644

000137e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   137e4:	b500      	push	{lr}
   137e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137e8:	f7ed fa00 	bl	bec <Sys_GetCoreID>
   137ec:	4603      	mov	r3, r0
   137ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   137f0:	4a10      	ldr	r2, [pc, #64]	; (13834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   137f2:	9b01      	ldr	r3, [sp, #4]
   137f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137f8:	2b00      	cmp	r3, #0
   137fa:	d10d      	bne.n	13818 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137fc:	f7ed f8bc 	bl	978 <Adc_schm_read_msr>
   13800:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13802:	9b00      	ldr	r3, [sp, #0]
   13804:	f003 0301 	and.w	r3, r3, #1
   13808:	2b00      	cmp	r3, #0
   1380a:	d100      	bne.n	1380e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1380c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   1380e:	490a      	ldr	r1, [pc, #40]	; (13838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   13810:	9b01      	ldr	r3, [sp, #4]
   13812:	9a00      	ldr	r2, [sp, #0]
   13814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   13818:	4a06      	ldr	r2, [pc, #24]	; (13834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   1381a:	9b01      	ldr	r3, [sp, #4]
   1381c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13820:	1c5a      	adds	r2, r3, #1
   13822:	4904      	ldr	r1, [pc, #16]	; (13834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   13824:	9b01      	ldr	r3, [sp, #4]
   13826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1382a:	bf00      	nop
   1382c:	b003      	add	sp, #12
   1382e:	f85d fb04 	ldr.w	pc, [sp], #4
   13832:	bf00      	nop
   13834:	1fff9650 	.word	0x1fff9650
   13838:	1fff964c 	.word	0x1fff964c

0001383c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   1383c:	b500      	push	{lr}
   1383e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13840:	f7ed f9d4 	bl	bec <Sys_GetCoreID>
   13844:	4603      	mov	r3, r0
   13846:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   13848:	4a0d      	ldr	r2, [pc, #52]	; (13880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   1384a:	9b01      	ldr	r3, [sp, #4]
   1384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13850:	1e5a      	subs	r2, r3, #1
   13852:	490b      	ldr	r1, [pc, #44]	; (13880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   13854:	9b01      	ldr	r3, [sp, #4]
   13856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   1385a:	4a0a      	ldr	r2, [pc, #40]	; (13884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   1385c:	9b01      	ldr	r3, [sp, #4]
   1385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13862:	f003 0301 	and.w	r3, r3, #1
   13866:	2b00      	cmp	r3, #0
   13868:	d106      	bne.n	13878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   1386a:	4a05      	ldr	r2, [pc, #20]	; (13880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   1386c:	9b01      	ldr	r3, [sp, #4]
   1386e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13872:	2b00      	cmp	r3, #0
   13874:	d100      	bne.n	13878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13876:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13878:	bf00      	nop
   1387a:	b003      	add	sp, #12
   1387c:	f85d fb04 	ldr.w	pc, [sp], #4
   13880:	1fff9650 	.word	0x1fff9650
   13884:	1fff964c 	.word	0x1fff964c

00013888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   13888:	b500      	push	{lr}
   1388a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1388c:	f7ed f9ae 	bl	bec <Sys_GetCoreID>
   13890:	4603      	mov	r3, r0
   13892:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   13894:	4a10      	ldr	r2, [pc, #64]	; (138d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   13896:	9b01      	ldr	r3, [sp, #4]
   13898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1389c:	2b00      	cmp	r3, #0
   1389e:	d10d      	bne.n	138bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   138a0:	f7ed f86a 	bl	978 <Adc_schm_read_msr>
   138a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   138a6:	9b00      	ldr	r3, [sp, #0]
   138a8:	f003 0301 	and.w	r3, r3, #1
   138ac:	2b00      	cmp	r3, #0
   138ae:	d100      	bne.n	138b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   138b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   138b2:	490a      	ldr	r1, [pc, #40]	; (138dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   138b4:	9b01      	ldr	r3, [sp, #4]
   138b6:	9a00      	ldr	r2, [sp, #0]
   138b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   138bc:	4a06      	ldr	r2, [pc, #24]	; (138d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   138be:	9b01      	ldr	r3, [sp, #4]
   138c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138c4:	1c5a      	adds	r2, r3, #1
   138c6:	4904      	ldr	r1, [pc, #16]	; (138d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   138c8:	9b01      	ldr	r3, [sp, #4]
   138ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   138ce:	bf00      	nop
   138d0:	b003      	add	sp, #12
   138d2:	f85d fb04 	ldr.w	pc, [sp], #4
   138d6:	bf00      	nop
   138d8:	1fff9658 	.word	0x1fff9658
   138dc:	1fff9654 	.word	0x1fff9654

000138e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   138e0:	b500      	push	{lr}
   138e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138e4:	f7ed f982 	bl	bec <Sys_GetCoreID>
   138e8:	4603      	mov	r3, r0
   138ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   138ec:	4a0d      	ldr	r2, [pc, #52]	; (13924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   138ee:	9b01      	ldr	r3, [sp, #4]
   138f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138f4:	1e5a      	subs	r2, r3, #1
   138f6:	490b      	ldr	r1, [pc, #44]	; (13924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   138f8:	9b01      	ldr	r3, [sp, #4]
   138fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   138fe:	4a0a      	ldr	r2, [pc, #40]	; (13928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   13900:	9b01      	ldr	r3, [sp, #4]
   13902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13906:	f003 0301 	and.w	r3, r3, #1
   1390a:	2b00      	cmp	r3, #0
   1390c:	d106      	bne.n	1391c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   1390e:	4a05      	ldr	r2, [pc, #20]	; (13924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   13910:	9b01      	ldr	r3, [sp, #4]
   13912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13916:	2b00      	cmp	r3, #0
   13918:	d100      	bne.n	1391c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1391a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1391c:	bf00      	nop
   1391e:	b003      	add	sp, #12
   13920:	f85d fb04 	ldr.w	pc, [sp], #4
   13924:	1fff9658 	.word	0x1fff9658
   13928:	1fff9654 	.word	0x1fff9654

0001392c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   1392c:	b500      	push	{lr}
   1392e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13930:	f7ed f95c 	bl	bec <Sys_GetCoreID>
   13934:	4603      	mov	r3, r0
   13936:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   13938:	4a10      	ldr	r2, [pc, #64]	; (1397c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   1393a:	9b01      	ldr	r3, [sp, #4]
   1393c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13940:	2b00      	cmp	r3, #0
   13942:	d10d      	bne.n	13960 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13944:	f7ed f818 	bl	978 <Adc_schm_read_msr>
   13948:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1394a:	9b00      	ldr	r3, [sp, #0]
   1394c:	f003 0301 	and.w	r3, r3, #1
   13950:	2b00      	cmp	r3, #0
   13952:	d100      	bne.n	13956 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13954:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   13956:	490a      	ldr	r1, [pc, #40]	; (13980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   13958:	9b01      	ldr	r3, [sp, #4]
   1395a:	9a00      	ldr	r2, [sp, #0]
   1395c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   13960:	4a06      	ldr	r2, [pc, #24]	; (1397c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   13962:	9b01      	ldr	r3, [sp, #4]
   13964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13968:	1c5a      	adds	r2, r3, #1
   1396a:	4904      	ldr	r1, [pc, #16]	; (1397c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   1396c:	9b01      	ldr	r3, [sp, #4]
   1396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13972:	bf00      	nop
   13974:	b003      	add	sp, #12
   13976:	f85d fb04 	ldr.w	pc, [sp], #4
   1397a:	bf00      	nop
   1397c:	1fff9660 	.word	0x1fff9660
   13980:	1fff965c 	.word	0x1fff965c

00013984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   13984:	b500      	push	{lr}
   13986:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13988:	f7ed f930 	bl	bec <Sys_GetCoreID>
   1398c:	4603      	mov	r3, r0
   1398e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   13990:	4a0d      	ldr	r2, [pc, #52]	; (139c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13992:	9b01      	ldr	r3, [sp, #4]
   13994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13998:	1e5a      	subs	r2, r3, #1
   1399a:	490b      	ldr	r1, [pc, #44]	; (139c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   1399c:	9b01      	ldr	r3, [sp, #4]
   1399e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   139a2:	4a0a      	ldr	r2, [pc, #40]	; (139cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   139a4:	9b01      	ldr	r3, [sp, #4]
   139a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139aa:	f003 0301 	and.w	r3, r3, #1
   139ae:	2b00      	cmp	r3, #0
   139b0:	d106      	bne.n	139c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   139b2:	4a05      	ldr	r2, [pc, #20]	; (139c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   139b4:	9b01      	ldr	r3, [sp, #4]
   139b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139ba:	2b00      	cmp	r3, #0
   139bc:	d100      	bne.n	139c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   139be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   139c0:	bf00      	nop
   139c2:	b003      	add	sp, #12
   139c4:	f85d fb04 	ldr.w	pc, [sp], #4
   139c8:	1fff9660 	.word	0x1fff9660
   139cc:	1fff965c 	.word	0x1fff965c

000139d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   139d0:	b500      	push	{lr}
   139d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139d4:	f7ed f90a 	bl	bec <Sys_GetCoreID>
   139d8:	4603      	mov	r3, r0
   139da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   139dc:	4a10      	ldr	r2, [pc, #64]	; (13a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   139de:	9b01      	ldr	r3, [sp, #4]
   139e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139e4:	2b00      	cmp	r3, #0
   139e6:	d10d      	bne.n	13a04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   139e8:	f7ec ffc6 	bl	978 <Adc_schm_read_msr>
   139ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   139ee:	9b00      	ldr	r3, [sp, #0]
   139f0:	f003 0301 	and.w	r3, r3, #1
   139f4:	2b00      	cmp	r3, #0
   139f6:	d100      	bne.n	139fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   139f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   139fa:	490a      	ldr	r1, [pc, #40]	; (13a24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   139fc:	9b01      	ldr	r3, [sp, #4]
   139fe:	9a00      	ldr	r2, [sp, #0]
   13a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   13a04:	4a06      	ldr	r2, [pc, #24]	; (13a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13a06:	9b01      	ldr	r3, [sp, #4]
   13a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a0c:	1c5a      	adds	r2, r3, #1
   13a0e:	4904      	ldr	r1, [pc, #16]	; (13a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13a10:	9b01      	ldr	r3, [sp, #4]
   13a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a16:	bf00      	nop
   13a18:	b003      	add	sp, #12
   13a1a:	f85d fb04 	ldr.w	pc, [sp], #4
   13a1e:	bf00      	nop
   13a20:	1fff9668 	.word	0x1fff9668
   13a24:	1fff9664 	.word	0x1fff9664

00013a28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   13a28:	b500      	push	{lr}
   13a2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a2c:	f7ed f8de 	bl	bec <Sys_GetCoreID>
   13a30:	4603      	mov	r3, r0
   13a32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   13a34:	4a0d      	ldr	r2, [pc, #52]	; (13a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13a36:	9b01      	ldr	r3, [sp, #4]
   13a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a3c:	1e5a      	subs	r2, r3, #1
   13a3e:	490b      	ldr	r1, [pc, #44]	; (13a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13a40:	9b01      	ldr	r3, [sp, #4]
   13a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   13a46:	4a0a      	ldr	r2, [pc, #40]	; (13a70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   13a48:	9b01      	ldr	r3, [sp, #4]
   13a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a4e:	f003 0301 	and.w	r3, r3, #1
   13a52:	2b00      	cmp	r3, #0
   13a54:	d106      	bne.n	13a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   13a56:	4a05      	ldr	r2, [pc, #20]	; (13a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13a58:	9b01      	ldr	r3, [sp, #4]
   13a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a5e:	2b00      	cmp	r3, #0
   13a60:	d100      	bne.n	13a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a64:	bf00      	nop
   13a66:	b003      	add	sp, #12
   13a68:	f85d fb04 	ldr.w	pc, [sp], #4
   13a6c:	1fff9668 	.word	0x1fff9668
   13a70:	1fff9664 	.word	0x1fff9664

00013a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13a74:	b500      	push	{lr}
   13a76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a78:	f7ed f8b8 	bl	bec <Sys_GetCoreID>
   13a7c:	4603      	mov	r3, r0
   13a7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   13a80:	4a10      	ldr	r2, [pc, #64]	; (13ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13a82:	9b01      	ldr	r3, [sp, #4]
   13a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a88:	2b00      	cmp	r3, #0
   13a8a:	d10d      	bne.n	13aa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a8c:	f7ec ff74 	bl	978 <Adc_schm_read_msr>
   13a90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a92:	9b00      	ldr	r3, [sp, #0]
   13a94:	f003 0301 	and.w	r3, r3, #1
   13a98:	2b00      	cmp	r3, #0
   13a9a:	d100      	bne.n	13a9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   13a9e:	490a      	ldr	r1, [pc, #40]	; (13ac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   13aa0:	9b01      	ldr	r3, [sp, #4]
   13aa2:	9a00      	ldr	r2, [sp, #0]
   13aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   13aa8:	4a06      	ldr	r2, [pc, #24]	; (13ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13aaa:	9b01      	ldr	r3, [sp, #4]
   13aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ab0:	1c5a      	adds	r2, r3, #1
   13ab2:	4904      	ldr	r1, [pc, #16]	; (13ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13ab4:	9b01      	ldr	r3, [sp, #4]
   13ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13aba:	bf00      	nop
   13abc:	b003      	add	sp, #12
   13abe:	f85d fb04 	ldr.w	pc, [sp], #4
   13ac2:	bf00      	nop
   13ac4:	1fff9670 	.word	0x1fff9670
   13ac8:	1fff966c 	.word	0x1fff966c

00013acc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13acc:	b500      	push	{lr}
   13ace:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ad0:	f7ed f88c 	bl	bec <Sys_GetCoreID>
   13ad4:	4603      	mov	r3, r0
   13ad6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   13ad8:	4a0d      	ldr	r2, [pc, #52]	; (13b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13ada:	9b01      	ldr	r3, [sp, #4]
   13adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ae0:	1e5a      	subs	r2, r3, #1
   13ae2:	490b      	ldr	r1, [pc, #44]	; (13b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13ae4:	9b01      	ldr	r3, [sp, #4]
   13ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   13aea:	4a0a      	ldr	r2, [pc, #40]	; (13b14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   13aec:	9b01      	ldr	r3, [sp, #4]
   13aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13af2:	f003 0301 	and.w	r3, r3, #1
   13af6:	2b00      	cmp	r3, #0
   13af8:	d106      	bne.n	13b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   13afa:	4a05      	ldr	r2, [pc, #20]	; (13b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13afc:	9b01      	ldr	r3, [sp, #4]
   13afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b02:	2b00      	cmp	r3, #0
   13b04:	d100      	bne.n	13b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b08:	bf00      	nop
   13b0a:	b003      	add	sp, #12
   13b0c:	f85d fb04 	ldr.w	pc, [sp], #4
   13b10:	1fff9670 	.word	0x1fff9670
   13b14:	1fff966c 	.word	0x1fff966c

00013b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13b18:	b500      	push	{lr}
   13b1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b1c:	f7ed f866 	bl	bec <Sys_GetCoreID>
   13b20:	4603      	mov	r3, r0
   13b22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   13b24:	4a10      	ldr	r2, [pc, #64]	; (13b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13b26:	9b01      	ldr	r3, [sp, #4]
   13b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b2c:	2b00      	cmp	r3, #0
   13b2e:	d10d      	bne.n	13b4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b30:	f7ec ff22 	bl	978 <Adc_schm_read_msr>
   13b34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b36:	9b00      	ldr	r3, [sp, #0]
   13b38:	f003 0301 	and.w	r3, r3, #1
   13b3c:	2b00      	cmp	r3, #0
   13b3e:	d100      	bne.n	13b42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   13b42:	490a      	ldr	r1, [pc, #40]	; (13b6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   13b44:	9b01      	ldr	r3, [sp, #4]
   13b46:	9a00      	ldr	r2, [sp, #0]
   13b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   13b4c:	4a06      	ldr	r2, [pc, #24]	; (13b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13b4e:	9b01      	ldr	r3, [sp, #4]
   13b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b54:	1c5a      	adds	r2, r3, #1
   13b56:	4904      	ldr	r1, [pc, #16]	; (13b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13b58:	9b01      	ldr	r3, [sp, #4]
   13b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b5e:	bf00      	nop
   13b60:	b003      	add	sp, #12
   13b62:	f85d fb04 	ldr.w	pc, [sp], #4
   13b66:	bf00      	nop
   13b68:	1fff9678 	.word	0x1fff9678
   13b6c:	1fff9674 	.word	0x1fff9674

00013b70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13b70:	b500      	push	{lr}
   13b72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b74:	f7ed f83a 	bl	bec <Sys_GetCoreID>
   13b78:	4603      	mov	r3, r0
   13b7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   13b7c:	4a0d      	ldr	r2, [pc, #52]	; (13bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13b7e:	9b01      	ldr	r3, [sp, #4]
   13b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b84:	1e5a      	subs	r2, r3, #1
   13b86:	490b      	ldr	r1, [pc, #44]	; (13bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13b88:	9b01      	ldr	r3, [sp, #4]
   13b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   13b8e:	4a0a      	ldr	r2, [pc, #40]	; (13bb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   13b90:	9b01      	ldr	r3, [sp, #4]
   13b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b96:	f003 0301 	and.w	r3, r3, #1
   13b9a:	2b00      	cmp	r3, #0
   13b9c:	d106      	bne.n	13bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   13b9e:	4a05      	ldr	r2, [pc, #20]	; (13bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13ba0:	9b01      	ldr	r3, [sp, #4]
   13ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ba6:	2b00      	cmp	r3, #0
   13ba8:	d100      	bne.n	13bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13baa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13bac:	bf00      	nop
   13bae:	b003      	add	sp, #12
   13bb0:	f85d fb04 	ldr.w	pc, [sp], #4
   13bb4:	1fff9678 	.word	0x1fff9678
   13bb8:	1fff9674 	.word	0x1fff9674

00013bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13bbc:	b500      	push	{lr}
   13bbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bc0:	f7ed f814 	bl	bec <Sys_GetCoreID>
   13bc4:	4603      	mov	r3, r0
   13bc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   13bc8:	4a10      	ldr	r2, [pc, #64]	; (13c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13bca:	9b01      	ldr	r3, [sp, #4]
   13bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bd0:	2b00      	cmp	r3, #0
   13bd2:	d10d      	bne.n	13bf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13bd4:	f7ec fed0 	bl	978 <Adc_schm_read_msr>
   13bd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13bda:	9b00      	ldr	r3, [sp, #0]
   13bdc:	f003 0301 	and.w	r3, r3, #1
   13be0:	2b00      	cmp	r3, #0
   13be2:	d100      	bne.n	13be6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13be4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   13be6:	490a      	ldr	r1, [pc, #40]	; (13c10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   13be8:	9b01      	ldr	r3, [sp, #4]
   13bea:	9a00      	ldr	r2, [sp, #0]
   13bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   13bf0:	4a06      	ldr	r2, [pc, #24]	; (13c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13bf2:	9b01      	ldr	r3, [sp, #4]
   13bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bf8:	1c5a      	adds	r2, r3, #1
   13bfa:	4904      	ldr	r1, [pc, #16]	; (13c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13bfc:	9b01      	ldr	r3, [sp, #4]
   13bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c02:	bf00      	nop
   13c04:	b003      	add	sp, #12
   13c06:	f85d fb04 	ldr.w	pc, [sp], #4
   13c0a:	bf00      	nop
   13c0c:	1fff9680 	.word	0x1fff9680
   13c10:	1fff967c 	.word	0x1fff967c

00013c14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13c14:	b500      	push	{lr}
   13c16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c18:	f7ec ffe8 	bl	bec <Sys_GetCoreID>
   13c1c:	4603      	mov	r3, r0
   13c1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   13c20:	4a0d      	ldr	r2, [pc, #52]	; (13c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13c22:	9b01      	ldr	r3, [sp, #4]
   13c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c28:	1e5a      	subs	r2, r3, #1
   13c2a:	490b      	ldr	r1, [pc, #44]	; (13c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13c2c:	9b01      	ldr	r3, [sp, #4]
   13c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   13c32:	4a0a      	ldr	r2, [pc, #40]	; (13c5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   13c34:	9b01      	ldr	r3, [sp, #4]
   13c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c3a:	f003 0301 	and.w	r3, r3, #1
   13c3e:	2b00      	cmp	r3, #0
   13c40:	d106      	bne.n	13c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   13c42:	4a05      	ldr	r2, [pc, #20]	; (13c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13c44:	9b01      	ldr	r3, [sp, #4]
   13c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c4a:	2b00      	cmp	r3, #0
   13c4c:	d100      	bne.n	13c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c50:	bf00      	nop
   13c52:	b003      	add	sp, #12
   13c54:	f85d fb04 	ldr.w	pc, [sp], #4
   13c58:	1fff9680 	.word	0x1fff9680
   13c5c:	1fff967c 	.word	0x1fff967c

00013c60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13c60:	b500      	push	{lr}
   13c62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c64:	f7ec ffc2 	bl	bec <Sys_GetCoreID>
   13c68:	4603      	mov	r3, r0
   13c6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
   13c6c:	4a10      	ldr	r2, [pc, #64]	; (13cb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13c6e:	9b01      	ldr	r3, [sp, #4]
   13c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c74:	2b00      	cmp	r3, #0
   13c76:	d10d      	bne.n	13c94 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c78:	f7ec fe87 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   13c7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c7e:	9b00      	ldr	r3, [sp, #0]
   13c80:	f003 0301 	and.w	r3, r3, #1
   13c84:	2b00      	cmp	r3, #0
   13c86:	d100      	bne.n	13c8a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   13c8a:	490a      	ldr	r1, [pc, #40]	; (13cb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
   13c8c:	9b01      	ldr	r3, [sp, #4]
   13c8e:	9a00      	ldr	r2, [sp, #0]
   13c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
   13c94:	4a06      	ldr	r2, [pc, #24]	; (13cb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13c96:	9b01      	ldr	r3, [sp, #4]
   13c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c9c:	1c5a      	adds	r2, r3, #1
   13c9e:	4904      	ldr	r1, [pc, #16]	; (13cb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13ca0:	9b01      	ldr	r3, [sp, #4]
   13ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ca6:	bf00      	nop
   13ca8:	b003      	add	sp, #12
   13caa:	f85d fb04 	ldr.w	pc, [sp], #4
   13cae:	bf00      	nop
   13cb0:	1fff9688 	.word	0x1fff9688
   13cb4:	1fff9684 	.word	0x1fff9684

00013cb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13cb8:	b500      	push	{lr}
   13cba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cbc:	f7ec ff96 	bl	bec <Sys_GetCoreID>
   13cc0:	4603      	mov	r3, r0
   13cc2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
   13cc4:	4a0d      	ldr	r2, [pc, #52]	; (13cfc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13cc6:	9b01      	ldr	r3, [sp, #4]
   13cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ccc:	1e5a      	subs	r2, r3, #1
   13cce:	490b      	ldr	r1, [pc, #44]	; (13cfc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13cd0:	9b01      	ldr	r3, [sp, #4]
   13cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   13cd6:	4a0a      	ldr	r2, [pc, #40]	; (13d00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
   13cd8:	9b01      	ldr	r3, [sp, #4]
   13cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cde:	f003 0301 	and.w	r3, r3, #1
   13ce2:	2b00      	cmp	r3, #0
   13ce4:	d106      	bne.n	13cf4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
   13ce6:	4a05      	ldr	r2, [pc, #20]	; (13cfc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13ce8:	9b01      	ldr	r3, [sp, #4]
   13cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cee:	2b00      	cmp	r3, #0
   13cf0:	d100      	bne.n	13cf4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13cf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13cf4:	bf00      	nop
   13cf6:	b003      	add	sp, #12
   13cf8:	f85d fb04 	ldr.w	pc, [sp], #4
   13cfc:	1fff9688 	.word	0x1fff9688
   13d00:	1fff9684 	.word	0x1fff9684

00013d04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13d04:	b500      	push	{lr}
   13d06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d08:	f7ec ff70 	bl	bec <Sys_GetCoreID>
   13d0c:	4603      	mov	r3, r0
   13d0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
   13d10:	4a10      	ldr	r2, [pc, #64]	; (13d54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13d12:	9b01      	ldr	r3, [sp, #4]
   13d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d18:	2b00      	cmp	r3, #0
   13d1a:	d10d      	bne.n	13d38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d1c:	f7ec fe35 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   13d20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d22:	9b00      	ldr	r3, [sp, #0]
   13d24:	f003 0301 	and.w	r3, r3, #1
   13d28:	2b00      	cmp	r3, #0
   13d2a:	d100      	bne.n	13d2e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   13d2e:	490a      	ldr	r1, [pc, #40]	; (13d58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
   13d30:	9b01      	ldr	r3, [sp, #4]
   13d32:	9a00      	ldr	r2, [sp, #0]
   13d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
   13d38:	4a06      	ldr	r2, [pc, #24]	; (13d54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13d3a:	9b01      	ldr	r3, [sp, #4]
   13d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d40:	1c5a      	adds	r2, r3, #1
   13d42:	4904      	ldr	r1, [pc, #16]	; (13d54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13d44:	9b01      	ldr	r3, [sp, #4]
   13d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d4a:	bf00      	nop
   13d4c:	b003      	add	sp, #12
   13d4e:	f85d fb04 	ldr.w	pc, [sp], #4
   13d52:	bf00      	nop
   13d54:	1fff9690 	.word	0x1fff9690
   13d58:	1fff968c 	.word	0x1fff968c

00013d5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13d5c:	b500      	push	{lr}
   13d5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d60:	f7ec ff44 	bl	bec <Sys_GetCoreID>
   13d64:	4603      	mov	r3, r0
   13d66:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
   13d68:	4a0d      	ldr	r2, [pc, #52]	; (13da0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13d6a:	9b01      	ldr	r3, [sp, #4]
   13d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d70:	1e5a      	subs	r2, r3, #1
   13d72:	490b      	ldr	r1, [pc, #44]	; (13da0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13d74:	9b01      	ldr	r3, [sp, #4]
   13d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   13d7a:	4a0a      	ldr	r2, [pc, #40]	; (13da4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
   13d7c:	9b01      	ldr	r3, [sp, #4]
   13d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d82:	f003 0301 	and.w	r3, r3, #1
   13d86:	2b00      	cmp	r3, #0
   13d88:	d106      	bne.n	13d98 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
   13d8a:	4a05      	ldr	r2, [pc, #20]	; (13da0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13d8c:	9b01      	ldr	r3, [sp, #4]
   13d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d92:	2b00      	cmp	r3, #0
   13d94:	d100      	bne.n	13d98 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d98:	bf00      	nop
   13d9a:	b003      	add	sp, #12
   13d9c:	f85d fb04 	ldr.w	pc, [sp], #4
   13da0:	1fff9690 	.word	0x1fff9690
   13da4:	1fff968c 	.word	0x1fff968c

00013da8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13da8:	b500      	push	{lr}
   13daa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13dac:	f7ec ff1e 	bl	bec <Sys_GetCoreID>
   13db0:	4603      	mov	r3, r0
   13db2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
   13db4:	4a10      	ldr	r2, [pc, #64]	; (13df8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13db6:	9b01      	ldr	r3, [sp, #4]
   13db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dbc:	2b00      	cmp	r3, #0
   13dbe:	d10d      	bne.n	13ddc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13dc0:	f7ec fde3 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   13dc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13dc6:	9b00      	ldr	r3, [sp, #0]
   13dc8:	f003 0301 	and.w	r3, r3, #1
   13dcc:	2b00      	cmp	r3, #0
   13dce:	d100      	bne.n	13dd2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13dd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   13dd2:	490a      	ldr	r1, [pc, #40]	; (13dfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
   13dd4:	9b01      	ldr	r3, [sp, #4]
   13dd6:	9a00      	ldr	r2, [sp, #0]
   13dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
   13ddc:	4a06      	ldr	r2, [pc, #24]	; (13df8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13dde:	9b01      	ldr	r3, [sp, #4]
   13de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13de4:	1c5a      	adds	r2, r3, #1
   13de6:	4904      	ldr	r1, [pc, #16]	; (13df8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13de8:	9b01      	ldr	r3, [sp, #4]
   13dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13dee:	bf00      	nop
   13df0:	b003      	add	sp, #12
   13df2:	f85d fb04 	ldr.w	pc, [sp], #4
   13df6:	bf00      	nop
   13df8:	1fff9698 	.word	0x1fff9698
   13dfc:	1fff9694 	.word	0x1fff9694

00013e00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13e00:	b500      	push	{lr}
   13e02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e04:	f7ec fef2 	bl	bec <Sys_GetCoreID>
   13e08:	4603      	mov	r3, r0
   13e0a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
   13e0c:	4a0d      	ldr	r2, [pc, #52]	; (13e44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13e0e:	9b01      	ldr	r3, [sp, #4]
   13e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e14:	1e5a      	subs	r2, r3, #1
   13e16:	490b      	ldr	r1, [pc, #44]	; (13e44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13e18:	9b01      	ldr	r3, [sp, #4]
   13e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   13e1e:	4a0a      	ldr	r2, [pc, #40]	; (13e48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
   13e20:	9b01      	ldr	r3, [sp, #4]
   13e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e26:	f003 0301 	and.w	r3, r3, #1
   13e2a:	2b00      	cmp	r3, #0
   13e2c:	d106      	bne.n	13e3c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
   13e2e:	4a05      	ldr	r2, [pc, #20]	; (13e44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13e30:	9b01      	ldr	r3, [sp, #4]
   13e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e36:	2b00      	cmp	r3, #0
   13e38:	d100      	bne.n	13e3c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e3c:	bf00      	nop
   13e3e:	b003      	add	sp, #12
   13e40:	f85d fb04 	ldr.w	pc, [sp], #4
   13e44:	1fff9698 	.word	0x1fff9698
   13e48:	1fff9694 	.word	0x1fff9694

00013e4c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13e4c:	b500      	push	{lr}
   13e4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e50:	f7ec fecc 	bl	bec <Sys_GetCoreID>
   13e54:	4603      	mov	r3, r0
   13e56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
   13e58:	4a10      	ldr	r2, [pc, #64]	; (13e9c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13e5a:	9b01      	ldr	r3, [sp, #4]
   13e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e60:	2b00      	cmp	r3, #0
   13e62:	d10d      	bne.n	13e80 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e64:	f7ec fd91 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   13e68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e6a:	9b00      	ldr	r3, [sp, #0]
   13e6c:	f003 0301 	and.w	r3, r3, #1
   13e70:	2b00      	cmp	r3, #0
   13e72:	d100      	bne.n	13e76 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   13e76:	490a      	ldr	r1, [pc, #40]	; (13ea0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
   13e78:	9b01      	ldr	r3, [sp, #4]
   13e7a:	9a00      	ldr	r2, [sp, #0]
   13e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
   13e80:	4a06      	ldr	r2, [pc, #24]	; (13e9c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13e82:	9b01      	ldr	r3, [sp, #4]
   13e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e88:	1c5a      	adds	r2, r3, #1
   13e8a:	4904      	ldr	r1, [pc, #16]	; (13e9c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13e8c:	9b01      	ldr	r3, [sp, #4]
   13e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e92:	bf00      	nop
   13e94:	b003      	add	sp, #12
   13e96:	f85d fb04 	ldr.w	pc, [sp], #4
   13e9a:	bf00      	nop
   13e9c:	1fff96a0 	.word	0x1fff96a0
   13ea0:	1fff969c 	.word	0x1fff969c

00013ea4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13ea4:	b500      	push	{lr}
   13ea6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ea8:	f7ec fea0 	bl	bec <Sys_GetCoreID>
   13eac:	4603      	mov	r3, r0
   13eae:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
   13eb0:	4a0d      	ldr	r2, [pc, #52]	; (13ee8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13eb2:	9b01      	ldr	r3, [sp, #4]
   13eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eb8:	1e5a      	subs	r2, r3, #1
   13eba:	490b      	ldr	r1, [pc, #44]	; (13ee8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13ebc:	9b01      	ldr	r3, [sp, #4]
   13ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   13ec2:	4a0a      	ldr	r2, [pc, #40]	; (13eec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
   13ec4:	9b01      	ldr	r3, [sp, #4]
   13ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eca:	f003 0301 	and.w	r3, r3, #1
   13ece:	2b00      	cmp	r3, #0
   13ed0:	d106      	bne.n	13ee0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
   13ed2:	4a05      	ldr	r2, [pc, #20]	; (13ee8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13ed4:	9b01      	ldr	r3, [sp, #4]
   13ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eda:	2b00      	cmp	r3, #0
   13edc:	d100      	bne.n	13ee0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ede:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ee0:	bf00      	nop
   13ee2:	b003      	add	sp, #12
   13ee4:	f85d fb04 	ldr.w	pc, [sp], #4
   13ee8:	1fff96a0 	.word	0x1fff96a0
   13eec:	1fff969c 	.word	0x1fff969c

00013ef0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   13ef0:	b500      	push	{lr}
   13ef2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ef4:	f7ec fe7a 	bl	bec <Sys_GetCoreID>
   13ef8:	4603      	mov	r3, r0
   13efa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
   13efc:	4a10      	ldr	r2, [pc, #64]	; (13f40 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13efe:	9b01      	ldr	r3, [sp, #4]
   13f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f04:	2b00      	cmp	r3, #0
   13f06:	d10d      	bne.n	13f24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f08:	f7ec fd3f 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   13f0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f0e:	9b00      	ldr	r3, [sp, #0]
   13f10:	f003 0301 	and.w	r3, r3, #1
   13f14:	2b00      	cmp	r3, #0
   13f16:	d100      	bne.n	13f1a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   13f1a:	490a      	ldr	r1, [pc, #40]	; (13f44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
   13f1c:	9b01      	ldr	r3, [sp, #4]
   13f1e:	9a00      	ldr	r2, [sp, #0]
   13f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
   13f24:	4a06      	ldr	r2, [pc, #24]	; (13f40 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13f26:	9b01      	ldr	r3, [sp, #4]
   13f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f2c:	1c5a      	adds	r2, r3, #1
   13f2e:	4904      	ldr	r1, [pc, #16]	; (13f40 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13f30:	9b01      	ldr	r3, [sp, #4]
   13f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f36:	bf00      	nop
   13f38:	b003      	add	sp, #12
   13f3a:	f85d fb04 	ldr.w	pc, [sp], #4
   13f3e:	bf00      	nop
   13f40:	1fff96a8 	.word	0x1fff96a8
   13f44:	1fff96a4 	.word	0x1fff96a4

00013f48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   13f48:	b500      	push	{lr}
   13f4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f4c:	f7ec fe4e 	bl	bec <Sys_GetCoreID>
   13f50:	4603      	mov	r3, r0
   13f52:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
   13f54:	4a0d      	ldr	r2, [pc, #52]	; (13f8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13f56:	9b01      	ldr	r3, [sp, #4]
   13f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f5c:	1e5a      	subs	r2, r3, #1
   13f5e:	490b      	ldr	r1, [pc, #44]	; (13f8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13f60:	9b01      	ldr	r3, [sp, #4]
   13f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   13f66:	4a0a      	ldr	r2, [pc, #40]	; (13f90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
   13f68:	9b01      	ldr	r3, [sp, #4]
   13f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f6e:	f003 0301 	and.w	r3, r3, #1
   13f72:	2b00      	cmp	r3, #0
   13f74:	d106      	bne.n	13f84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
   13f76:	4a05      	ldr	r2, [pc, #20]	; (13f8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13f78:	9b01      	ldr	r3, [sp, #4]
   13f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f7e:	2b00      	cmp	r3, #0
   13f80:	d100      	bne.n	13f84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f84:	bf00      	nop
   13f86:	b003      	add	sp, #12
   13f88:	f85d fb04 	ldr.w	pc, [sp], #4
   13f8c:	1fff96a8 	.word	0x1fff96a8
   13f90:	1fff96a4 	.word	0x1fff96a4

00013f94 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   13f94:	b500      	push	{lr}
   13f96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f98:	f7ec fe28 	bl	bec <Sys_GetCoreID>
   13f9c:	4603      	mov	r3, r0
   13f9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
   13fa0:	4a10      	ldr	r2, [pc, #64]	; (13fe4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   13fa2:	9b01      	ldr	r3, [sp, #4]
   13fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fa8:	2b00      	cmp	r3, #0
   13faa:	d10d      	bne.n	13fc8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13fac:	f7ec fced 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   13fb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13fb2:	9b00      	ldr	r3, [sp, #0]
   13fb4:	f003 0301 	and.w	r3, r3, #1
   13fb8:	2b00      	cmp	r3, #0
   13fba:	d100      	bne.n	13fbe <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13fbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   13fbe:	490a      	ldr	r1, [pc, #40]	; (13fe8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
   13fc0:	9b01      	ldr	r3, [sp, #4]
   13fc2:	9a00      	ldr	r2, [sp, #0]
   13fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
   13fc8:	4a06      	ldr	r2, [pc, #24]	; (13fe4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   13fca:	9b01      	ldr	r3, [sp, #4]
   13fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fd0:	1c5a      	adds	r2, r3, #1
   13fd2:	4904      	ldr	r1, [pc, #16]	; (13fe4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   13fd4:	9b01      	ldr	r3, [sp, #4]
   13fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13fda:	bf00      	nop
   13fdc:	b003      	add	sp, #12
   13fde:	f85d fb04 	ldr.w	pc, [sp], #4
   13fe2:	bf00      	nop
   13fe4:	1fff96b0 	.word	0x1fff96b0
   13fe8:	1fff96ac 	.word	0x1fff96ac

00013fec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   13fec:	b500      	push	{lr}
   13fee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ff0:	f7ec fdfc 	bl	bec <Sys_GetCoreID>
   13ff4:	4603      	mov	r3, r0
   13ff6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
   13ff8:	4a0d      	ldr	r2, [pc, #52]	; (14030 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   13ffa:	9b01      	ldr	r3, [sp, #4]
   13ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14000:	1e5a      	subs	r2, r3, #1
   14002:	490b      	ldr	r1, [pc, #44]	; (14030 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   14004:	9b01      	ldr	r3, [sp, #4]
   14006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1400a:	4a0a      	ldr	r2, [pc, #40]	; (14034 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
   1400c:	9b01      	ldr	r3, [sp, #4]
   1400e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14012:	f003 0301 	and.w	r3, r3, #1
   14016:	2b00      	cmp	r3, #0
   14018:	d106      	bne.n	14028 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
   1401a:	4a05      	ldr	r2, [pc, #20]	; (14030 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   1401c:	9b01      	ldr	r3, [sp, #4]
   1401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14022:	2b00      	cmp	r3, #0
   14024:	d100      	bne.n	14028 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14026:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14028:	bf00      	nop
   1402a:	b003      	add	sp, #12
   1402c:	f85d fb04 	ldr.w	pc, [sp], #4
   14030:	1fff96b0 	.word	0x1fff96b0
   14034:	1fff96ac 	.word	0x1fff96ac

00014038 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   14038:	b500      	push	{lr}
   1403a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1403c:	f7ec fdd6 	bl	bec <Sys_GetCoreID>
   14040:	4603      	mov	r3, r0
   14042:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
   14044:	4a10      	ldr	r2, [pc, #64]	; (14088 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   14046:	9b01      	ldr	r3, [sp, #4]
   14048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1404c:	2b00      	cmp	r3, #0
   1404e:	d10d      	bne.n	1406c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14050:	f7ec fc9b 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   14054:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14056:	9b00      	ldr	r3, [sp, #0]
   14058:	f003 0301 	and.w	r3, r3, #1
   1405c:	2b00      	cmp	r3, #0
   1405e:	d100      	bne.n	14062 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14060:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   14062:	490a      	ldr	r1, [pc, #40]	; (1408c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
   14064:	9b01      	ldr	r3, [sp, #4]
   14066:	9a00      	ldr	r2, [sp, #0]
   14068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
   1406c:	4a06      	ldr	r2, [pc, #24]	; (14088 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   1406e:	9b01      	ldr	r3, [sp, #4]
   14070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14074:	1c5a      	adds	r2, r3, #1
   14076:	4904      	ldr	r1, [pc, #16]	; (14088 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   14078:	9b01      	ldr	r3, [sp, #4]
   1407a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1407e:	bf00      	nop
   14080:	b003      	add	sp, #12
   14082:	f85d fb04 	ldr.w	pc, [sp], #4
   14086:	bf00      	nop
   14088:	1fff96b8 	.word	0x1fff96b8
   1408c:	1fff96b4 	.word	0x1fff96b4

00014090 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   14090:	b500      	push	{lr}
   14092:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14094:	f7ec fdaa 	bl	bec <Sys_GetCoreID>
   14098:	4603      	mov	r3, r0
   1409a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
   1409c:	4a0d      	ldr	r2, [pc, #52]	; (140d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   1409e:	9b01      	ldr	r3, [sp, #4]
   140a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140a4:	1e5a      	subs	r2, r3, #1
   140a6:	490b      	ldr	r1, [pc, #44]	; (140d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   140a8:	9b01      	ldr	r3, [sp, #4]
   140aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   140ae:	4a0a      	ldr	r2, [pc, #40]	; (140d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
   140b0:	9b01      	ldr	r3, [sp, #4]
   140b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140b6:	f003 0301 	and.w	r3, r3, #1
   140ba:	2b00      	cmp	r3, #0
   140bc:	d106      	bne.n	140cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
   140be:	4a05      	ldr	r2, [pc, #20]	; (140d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   140c0:	9b01      	ldr	r3, [sp, #4]
   140c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140c6:	2b00      	cmp	r3, #0
   140c8:	d100      	bne.n	140cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   140ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   140cc:	bf00      	nop
   140ce:	b003      	add	sp, #12
   140d0:	f85d fb04 	ldr.w	pc, [sp], #4
   140d4:	1fff96b8 	.word	0x1fff96b8
   140d8:	1fff96b4 	.word	0x1fff96b4

000140dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   140dc:	b500      	push	{lr}
   140de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140e0:	f7ec fd84 	bl	bec <Sys_GetCoreID>
   140e4:	4603      	mov	r3, r0
   140e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
   140e8:	4a10      	ldr	r2, [pc, #64]	; (1412c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   140ea:	9b01      	ldr	r3, [sp, #4]
   140ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140f0:	2b00      	cmp	r3, #0
   140f2:	d10d      	bne.n	14110 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   140f4:	f7ec fc49 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   140f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   140fa:	9b00      	ldr	r3, [sp, #0]
   140fc:	f003 0301 	and.w	r3, r3, #1
   14100:	2b00      	cmp	r3, #0
   14102:	d100      	bne.n	14106 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14104:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   14106:	490a      	ldr	r1, [pc, #40]	; (14130 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
   14108:	9b01      	ldr	r3, [sp, #4]
   1410a:	9a00      	ldr	r2, [sp, #0]
   1410c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
   14110:	4a06      	ldr	r2, [pc, #24]	; (1412c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   14112:	9b01      	ldr	r3, [sp, #4]
   14114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14118:	1c5a      	adds	r2, r3, #1
   1411a:	4904      	ldr	r1, [pc, #16]	; (1412c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   1411c:	9b01      	ldr	r3, [sp, #4]
   1411e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14122:	bf00      	nop
   14124:	b003      	add	sp, #12
   14126:	f85d fb04 	ldr.w	pc, [sp], #4
   1412a:	bf00      	nop
   1412c:	1fff96c0 	.word	0x1fff96c0
   14130:	1fff96bc 	.word	0x1fff96bc

00014134 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   14134:	b500      	push	{lr}
   14136:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14138:	f7ec fd58 	bl	bec <Sys_GetCoreID>
   1413c:	4603      	mov	r3, r0
   1413e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
   14140:	4a0d      	ldr	r2, [pc, #52]	; (14178 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   14142:	9b01      	ldr	r3, [sp, #4]
   14144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14148:	1e5a      	subs	r2, r3, #1
   1414a:	490b      	ldr	r1, [pc, #44]	; (14178 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   1414c:	9b01      	ldr	r3, [sp, #4]
   1414e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   14152:	4a0a      	ldr	r2, [pc, #40]	; (1417c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
   14154:	9b01      	ldr	r3, [sp, #4]
   14156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1415a:	f003 0301 	and.w	r3, r3, #1
   1415e:	2b00      	cmp	r3, #0
   14160:	d106      	bne.n	14170 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
   14162:	4a05      	ldr	r2, [pc, #20]	; (14178 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   14164:	9b01      	ldr	r3, [sp, #4]
   14166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1416a:	2b00      	cmp	r3, #0
   1416c:	d100      	bne.n	14170 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1416e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14170:	bf00      	nop
   14172:	b003      	add	sp, #12
   14174:	f85d fb04 	ldr.w	pc, [sp], #4
   14178:	1fff96c0 	.word	0x1fff96c0
   1417c:	1fff96bc 	.word	0x1fff96bc

00014180 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   14180:	b500      	push	{lr}
   14182:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14184:	f7ec fd32 	bl	bec <Sys_GetCoreID>
   14188:	4603      	mov	r3, r0
   1418a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
   1418c:	4a10      	ldr	r2, [pc, #64]	; (141d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   1418e:	9b01      	ldr	r3, [sp, #4]
   14190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14194:	2b00      	cmp	r3, #0
   14196:	d10d      	bne.n	141b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14198:	f7ec fbf7 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   1419c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1419e:	9b00      	ldr	r3, [sp, #0]
   141a0:	f003 0301 	and.w	r3, r3, #1
   141a4:	2b00      	cmp	r3, #0
   141a6:	d100      	bne.n	141aa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   141a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   141aa:	490a      	ldr	r1, [pc, #40]	; (141d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
   141ac:	9b01      	ldr	r3, [sp, #4]
   141ae:	9a00      	ldr	r2, [sp, #0]
   141b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
   141b4:	4a06      	ldr	r2, [pc, #24]	; (141d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   141b6:	9b01      	ldr	r3, [sp, #4]
   141b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141bc:	1c5a      	adds	r2, r3, #1
   141be:	4904      	ldr	r1, [pc, #16]	; (141d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   141c0:	9b01      	ldr	r3, [sp, #4]
   141c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   141c6:	bf00      	nop
   141c8:	b003      	add	sp, #12
   141ca:	f85d fb04 	ldr.w	pc, [sp], #4
   141ce:	bf00      	nop
   141d0:	1fff96c8 	.word	0x1fff96c8
   141d4:	1fff96c4 	.word	0x1fff96c4

000141d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   141d8:	b500      	push	{lr}
   141da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141dc:	f7ec fd06 	bl	bec <Sys_GetCoreID>
   141e0:	4603      	mov	r3, r0
   141e2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
   141e4:	4a0d      	ldr	r2, [pc, #52]	; (1421c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   141e6:	9b01      	ldr	r3, [sp, #4]
   141e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141ec:	1e5a      	subs	r2, r3, #1
   141ee:	490b      	ldr	r1, [pc, #44]	; (1421c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   141f0:	9b01      	ldr	r3, [sp, #4]
   141f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   141f6:	4a0a      	ldr	r2, [pc, #40]	; (14220 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
   141f8:	9b01      	ldr	r3, [sp, #4]
   141fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141fe:	f003 0301 	and.w	r3, r3, #1
   14202:	2b00      	cmp	r3, #0
   14204:	d106      	bne.n	14214 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
   14206:	4a05      	ldr	r2, [pc, #20]	; (1421c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   14208:	9b01      	ldr	r3, [sp, #4]
   1420a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1420e:	2b00      	cmp	r3, #0
   14210:	d100      	bne.n	14214 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14212:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14214:	bf00      	nop
   14216:	b003      	add	sp, #12
   14218:	f85d fb04 	ldr.w	pc, [sp], #4
   1421c:	1fff96c8 	.word	0x1fff96c8
   14220:	1fff96c4 	.word	0x1fff96c4

00014224 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   14224:	b500      	push	{lr}
   14226:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14228:	f7ec fce0 	bl	bec <Sys_GetCoreID>
   1422c:	4603      	mov	r3, r0
   1422e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
   14230:	4a10      	ldr	r2, [pc, #64]	; (14274 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   14232:	9b01      	ldr	r3, [sp, #4]
   14234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14238:	2b00      	cmp	r3, #0
   1423a:	d10d      	bne.n	14258 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1423c:	f7ec fba5 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   14240:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14242:	9b00      	ldr	r3, [sp, #0]
   14244:	f003 0301 	and.w	r3, r3, #1
   14248:	2b00      	cmp	r3, #0
   1424a:	d100      	bne.n	1424e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1424c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1424e:	490a      	ldr	r1, [pc, #40]	; (14278 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
   14250:	9b01      	ldr	r3, [sp, #4]
   14252:	9a00      	ldr	r2, [sp, #0]
   14254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
   14258:	4a06      	ldr	r2, [pc, #24]	; (14274 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   1425a:	9b01      	ldr	r3, [sp, #4]
   1425c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14260:	1c5a      	adds	r2, r3, #1
   14262:	4904      	ldr	r1, [pc, #16]	; (14274 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   14264:	9b01      	ldr	r3, [sp, #4]
   14266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1426a:	bf00      	nop
   1426c:	b003      	add	sp, #12
   1426e:	f85d fb04 	ldr.w	pc, [sp], #4
   14272:	bf00      	nop
   14274:	1fff96d0 	.word	0x1fff96d0
   14278:	1fff96cc 	.word	0x1fff96cc

0001427c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   1427c:	b500      	push	{lr}
   1427e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14280:	f7ec fcb4 	bl	bec <Sys_GetCoreID>
   14284:	4603      	mov	r3, r0
   14286:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
   14288:	4a0d      	ldr	r2, [pc, #52]	; (142c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   1428a:	9b01      	ldr	r3, [sp, #4]
   1428c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14290:	1e5a      	subs	r2, r3, #1
   14292:	490b      	ldr	r1, [pc, #44]	; (142c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   14294:	9b01      	ldr	r3, [sp, #4]
   14296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1429a:	4a0a      	ldr	r2, [pc, #40]	; (142c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
   1429c:	9b01      	ldr	r3, [sp, #4]
   1429e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142a2:	f003 0301 	and.w	r3, r3, #1
   142a6:	2b00      	cmp	r3, #0
   142a8:	d106      	bne.n	142b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
   142aa:	4a05      	ldr	r2, [pc, #20]	; (142c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   142ac:	9b01      	ldr	r3, [sp, #4]
   142ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142b2:	2b00      	cmp	r3, #0
   142b4:	d100      	bne.n	142b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   142b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   142b8:	bf00      	nop
   142ba:	b003      	add	sp, #12
   142bc:	f85d fb04 	ldr.w	pc, [sp], #4
   142c0:	1fff96d0 	.word	0x1fff96d0
   142c4:	1fff96cc 	.word	0x1fff96cc

000142c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   142c8:	b500      	push	{lr}
   142ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142cc:	f7ec fc8e 	bl	bec <Sys_GetCoreID>
   142d0:	4603      	mov	r3, r0
   142d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
   142d4:	4a10      	ldr	r2, [pc, #64]	; (14318 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   142d6:	9b01      	ldr	r3, [sp, #4]
   142d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142dc:	2b00      	cmp	r3, #0
   142de:	d10d      	bne.n	142fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   142e0:	f7ec fb53 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   142e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   142e6:	9b00      	ldr	r3, [sp, #0]
   142e8:	f003 0301 	and.w	r3, r3, #1
   142ec:	2b00      	cmp	r3, #0
   142ee:	d100      	bne.n	142f2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   142f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   142f2:	490a      	ldr	r1, [pc, #40]	; (1431c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
   142f4:	9b01      	ldr	r3, [sp, #4]
   142f6:	9a00      	ldr	r2, [sp, #0]
   142f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
   142fc:	4a06      	ldr	r2, [pc, #24]	; (14318 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   142fe:	9b01      	ldr	r3, [sp, #4]
   14300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14304:	1c5a      	adds	r2, r3, #1
   14306:	4904      	ldr	r1, [pc, #16]	; (14318 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   14308:	9b01      	ldr	r3, [sp, #4]
   1430a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1430e:	bf00      	nop
   14310:	b003      	add	sp, #12
   14312:	f85d fb04 	ldr.w	pc, [sp], #4
   14316:	bf00      	nop
   14318:	1fff96d8 	.word	0x1fff96d8
   1431c:	1fff96d4 	.word	0x1fff96d4

00014320 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   14320:	b500      	push	{lr}
   14322:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14324:	f7ec fc62 	bl	bec <Sys_GetCoreID>
   14328:	4603      	mov	r3, r0
   1432a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
   1432c:	4a0d      	ldr	r2, [pc, #52]	; (14364 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   1432e:	9b01      	ldr	r3, [sp, #4]
   14330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14334:	1e5a      	subs	r2, r3, #1
   14336:	490b      	ldr	r1, [pc, #44]	; (14364 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   14338:	9b01      	ldr	r3, [sp, #4]
   1433a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1433e:	4a0a      	ldr	r2, [pc, #40]	; (14368 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
   14340:	9b01      	ldr	r3, [sp, #4]
   14342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14346:	f003 0301 	and.w	r3, r3, #1
   1434a:	2b00      	cmp	r3, #0
   1434c:	d106      	bne.n	1435c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
   1434e:	4a05      	ldr	r2, [pc, #20]	; (14364 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   14350:	9b01      	ldr	r3, [sp, #4]
   14352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14356:	2b00      	cmp	r3, #0
   14358:	d100      	bne.n	1435c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1435a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1435c:	bf00      	nop
   1435e:	b003      	add	sp, #12
   14360:	f85d fb04 	ldr.w	pc, [sp], #4
   14364:	1fff96d8 	.word	0x1fff96d8
   14368:	1fff96d4 	.word	0x1fff96d4

0001436c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   1436c:	b500      	push	{lr}
   1436e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14370:	f7ec fc3c 	bl	bec <Sys_GetCoreID>
   14374:	4603      	mov	r3, r0
   14376:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
   14378:	4a10      	ldr	r2, [pc, #64]	; (143bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   1437a:	9b01      	ldr	r3, [sp, #4]
   1437c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14380:	2b00      	cmp	r3, #0
   14382:	d10d      	bne.n	143a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14384:	f7ec fb01 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   14388:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1438a:	9b00      	ldr	r3, [sp, #0]
   1438c:	f003 0301 	and.w	r3, r3, #1
   14390:	2b00      	cmp	r3, #0
   14392:	d100      	bne.n	14396 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14394:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   14396:	490a      	ldr	r1, [pc, #40]	; (143c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
   14398:	9b01      	ldr	r3, [sp, #4]
   1439a:	9a00      	ldr	r2, [sp, #0]
   1439c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
   143a0:	4a06      	ldr	r2, [pc, #24]	; (143bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   143a2:	9b01      	ldr	r3, [sp, #4]
   143a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143a8:	1c5a      	adds	r2, r3, #1
   143aa:	4904      	ldr	r1, [pc, #16]	; (143bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   143ac:	9b01      	ldr	r3, [sp, #4]
   143ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   143b2:	bf00      	nop
   143b4:	b003      	add	sp, #12
   143b6:	f85d fb04 	ldr.w	pc, [sp], #4
   143ba:	bf00      	nop
   143bc:	1fff96e0 	.word	0x1fff96e0
   143c0:	1fff96dc 	.word	0x1fff96dc

000143c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   143c4:	b500      	push	{lr}
   143c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143c8:	f7ec fc10 	bl	bec <Sys_GetCoreID>
   143cc:	4603      	mov	r3, r0
   143ce:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
   143d0:	4a0d      	ldr	r2, [pc, #52]	; (14408 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   143d2:	9b01      	ldr	r3, [sp, #4]
   143d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143d8:	1e5a      	subs	r2, r3, #1
   143da:	490b      	ldr	r1, [pc, #44]	; (14408 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   143dc:	9b01      	ldr	r3, [sp, #4]
   143de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   143e2:	4a0a      	ldr	r2, [pc, #40]	; (1440c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
   143e4:	9b01      	ldr	r3, [sp, #4]
   143e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143ea:	f003 0301 	and.w	r3, r3, #1
   143ee:	2b00      	cmp	r3, #0
   143f0:	d106      	bne.n	14400 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
   143f2:	4a05      	ldr	r2, [pc, #20]	; (14408 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   143f4:	9b01      	ldr	r3, [sp, #4]
   143f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143fa:	2b00      	cmp	r3, #0
   143fc:	d100      	bne.n	14400 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14400:	bf00      	nop
   14402:	b003      	add	sp, #12
   14404:	f85d fb04 	ldr.w	pc, [sp], #4
   14408:	1fff96e0 	.word	0x1fff96e0
   1440c:	1fff96dc 	.word	0x1fff96dc

00014410 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   14410:	b500      	push	{lr}
   14412:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14414:	f7ec fbea 	bl	bec <Sys_GetCoreID>
   14418:	4603      	mov	r3, r0
   1441a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
   1441c:	4a10      	ldr	r2, [pc, #64]	; (14460 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   1441e:	9b01      	ldr	r3, [sp, #4]
   14420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14424:	2b00      	cmp	r3, #0
   14426:	d10d      	bne.n	14444 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14428:	f7ec faaf 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   1442c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1442e:	9b00      	ldr	r3, [sp, #0]
   14430:	f003 0301 	and.w	r3, r3, #1
   14434:	2b00      	cmp	r3, #0
   14436:	d100      	bne.n	1443a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14438:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1443a:	490a      	ldr	r1, [pc, #40]	; (14464 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
   1443c:	9b01      	ldr	r3, [sp, #4]
   1443e:	9a00      	ldr	r2, [sp, #0]
   14440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
   14444:	4a06      	ldr	r2, [pc, #24]	; (14460 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   14446:	9b01      	ldr	r3, [sp, #4]
   14448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1444c:	1c5a      	adds	r2, r3, #1
   1444e:	4904      	ldr	r1, [pc, #16]	; (14460 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   14450:	9b01      	ldr	r3, [sp, #4]
   14452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14456:	bf00      	nop
   14458:	b003      	add	sp, #12
   1445a:	f85d fb04 	ldr.w	pc, [sp], #4
   1445e:	bf00      	nop
   14460:	1fff96e8 	.word	0x1fff96e8
   14464:	1fff96e4 	.word	0x1fff96e4

00014468 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   14468:	b500      	push	{lr}
   1446a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1446c:	f7ec fbbe 	bl	bec <Sys_GetCoreID>
   14470:	4603      	mov	r3, r0
   14472:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
   14474:	4a0d      	ldr	r2, [pc, #52]	; (144ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   14476:	9b01      	ldr	r3, [sp, #4]
   14478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1447c:	1e5a      	subs	r2, r3, #1
   1447e:	490b      	ldr	r1, [pc, #44]	; (144ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   14480:	9b01      	ldr	r3, [sp, #4]
   14482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   14486:	4a0a      	ldr	r2, [pc, #40]	; (144b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
   14488:	9b01      	ldr	r3, [sp, #4]
   1448a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1448e:	f003 0301 	and.w	r3, r3, #1
   14492:	2b00      	cmp	r3, #0
   14494:	d106      	bne.n	144a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
   14496:	4a05      	ldr	r2, [pc, #20]	; (144ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   14498:	9b01      	ldr	r3, [sp, #4]
   1449a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1449e:	2b00      	cmp	r3, #0
   144a0:	d100      	bne.n	144a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   144a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   144a4:	bf00      	nop
   144a6:	b003      	add	sp, #12
   144a8:	f85d fb04 	ldr.w	pc, [sp], #4
   144ac:	1fff96e8 	.word	0x1fff96e8
   144b0:	1fff96e4 	.word	0x1fff96e4

000144b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   144b4:	b500      	push	{lr}
   144b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144b8:	f7ec fb98 	bl	bec <Sys_GetCoreID>
   144bc:	4603      	mov	r3, r0
   144be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
   144c0:	4a10      	ldr	r2, [pc, #64]	; (14504 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   144c2:	9b01      	ldr	r3, [sp, #4]
   144c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144c8:	2b00      	cmp	r3, #0
   144ca:	d10d      	bne.n	144e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   144cc:	f7ec fa5d 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   144d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   144d2:	9b00      	ldr	r3, [sp, #0]
   144d4:	f003 0301 	and.w	r3, r3, #1
   144d8:	2b00      	cmp	r3, #0
   144da:	d100      	bne.n	144de <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   144dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   144de:	490a      	ldr	r1, [pc, #40]	; (14508 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
   144e0:	9b01      	ldr	r3, [sp, #4]
   144e2:	9a00      	ldr	r2, [sp, #0]
   144e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
   144e8:	4a06      	ldr	r2, [pc, #24]	; (14504 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   144ea:	9b01      	ldr	r3, [sp, #4]
   144ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144f0:	1c5a      	adds	r2, r3, #1
   144f2:	4904      	ldr	r1, [pc, #16]	; (14504 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   144f4:	9b01      	ldr	r3, [sp, #4]
   144f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   144fa:	bf00      	nop
   144fc:	b003      	add	sp, #12
   144fe:	f85d fb04 	ldr.w	pc, [sp], #4
   14502:	bf00      	nop
   14504:	1fff96f0 	.word	0x1fff96f0
   14508:	1fff96ec 	.word	0x1fff96ec

0001450c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   1450c:	b500      	push	{lr}
   1450e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14510:	f7ec fb6c 	bl	bec <Sys_GetCoreID>
   14514:	4603      	mov	r3, r0
   14516:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
   14518:	4a0d      	ldr	r2, [pc, #52]	; (14550 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   1451a:	9b01      	ldr	r3, [sp, #4]
   1451c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14520:	1e5a      	subs	r2, r3, #1
   14522:	490b      	ldr	r1, [pc, #44]	; (14550 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   14524:	9b01      	ldr	r3, [sp, #4]
   14526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1452a:	4a0a      	ldr	r2, [pc, #40]	; (14554 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
   1452c:	9b01      	ldr	r3, [sp, #4]
   1452e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14532:	f003 0301 	and.w	r3, r3, #1
   14536:	2b00      	cmp	r3, #0
   14538:	d106      	bne.n	14548 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
   1453a:	4a05      	ldr	r2, [pc, #20]	; (14550 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   1453c:	9b01      	ldr	r3, [sp, #4]
   1453e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14542:	2b00      	cmp	r3, #0
   14544:	d100      	bne.n	14548 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14546:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14548:	bf00      	nop
   1454a:	b003      	add	sp, #12
   1454c:	f85d fb04 	ldr.w	pc, [sp], #4
   14550:	1fff96f0 	.word	0x1fff96f0
   14554:	1fff96ec 	.word	0x1fff96ec

00014558 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   14558:	b500      	push	{lr}
   1455a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1455c:	f7ec fb46 	bl	bec <Sys_GetCoreID>
   14560:	4603      	mov	r3, r0
   14562:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
   14564:	4a10      	ldr	r2, [pc, #64]	; (145a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   14566:	9b01      	ldr	r3, [sp, #4]
   14568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1456c:	2b00      	cmp	r3, #0
   1456e:	d10d      	bne.n	1458c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14570:	f7ec fa0b 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   14574:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14576:	9b00      	ldr	r3, [sp, #0]
   14578:	f003 0301 	and.w	r3, r3, #1
   1457c:	2b00      	cmp	r3, #0
   1457e:	d100      	bne.n	14582 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14580:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   14582:	490a      	ldr	r1, [pc, #40]	; (145ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
   14584:	9b01      	ldr	r3, [sp, #4]
   14586:	9a00      	ldr	r2, [sp, #0]
   14588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
   1458c:	4a06      	ldr	r2, [pc, #24]	; (145a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   1458e:	9b01      	ldr	r3, [sp, #4]
   14590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14594:	1c5a      	adds	r2, r3, #1
   14596:	4904      	ldr	r1, [pc, #16]	; (145a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   14598:	9b01      	ldr	r3, [sp, #4]
   1459a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1459e:	bf00      	nop
   145a0:	b003      	add	sp, #12
   145a2:	f85d fb04 	ldr.w	pc, [sp], #4
   145a6:	bf00      	nop
   145a8:	1fff96f8 	.word	0x1fff96f8
   145ac:	1fff96f4 	.word	0x1fff96f4

000145b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   145b0:	b500      	push	{lr}
   145b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145b4:	f7ec fb1a 	bl	bec <Sys_GetCoreID>
   145b8:	4603      	mov	r3, r0
   145ba:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
   145bc:	4a0d      	ldr	r2, [pc, #52]	; (145f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   145be:	9b01      	ldr	r3, [sp, #4]
   145c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145c4:	1e5a      	subs	r2, r3, #1
   145c6:	490b      	ldr	r1, [pc, #44]	; (145f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   145c8:	9b01      	ldr	r3, [sp, #4]
   145ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   145ce:	4a0a      	ldr	r2, [pc, #40]	; (145f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
   145d0:	9b01      	ldr	r3, [sp, #4]
   145d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145d6:	f003 0301 	and.w	r3, r3, #1
   145da:	2b00      	cmp	r3, #0
   145dc:	d106      	bne.n	145ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
   145de:	4a05      	ldr	r2, [pc, #20]	; (145f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   145e0:	9b01      	ldr	r3, [sp, #4]
   145e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145e6:	2b00      	cmp	r3, #0
   145e8:	d100      	bne.n	145ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   145ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   145ec:	bf00      	nop
   145ee:	b003      	add	sp, #12
   145f0:	f85d fb04 	ldr.w	pc, [sp], #4
   145f4:	1fff96f8 	.word	0x1fff96f8
   145f8:	1fff96f4 	.word	0x1fff96f4

000145fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   145fc:	b500      	push	{lr}
   145fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14600:	f7ec faf4 	bl	bec <Sys_GetCoreID>
   14604:	4603      	mov	r3, r0
   14606:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
   14608:	4a10      	ldr	r2, [pc, #64]	; (1464c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   1460a:	9b01      	ldr	r3, [sp, #4]
   1460c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14610:	2b00      	cmp	r3, #0
   14612:	d10d      	bne.n	14630 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14614:	f7ec f9b9 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   14618:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1461a:	9b00      	ldr	r3, [sp, #0]
   1461c:	f003 0301 	and.w	r3, r3, #1
   14620:	2b00      	cmp	r3, #0
   14622:	d100      	bne.n	14626 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14624:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   14626:	490a      	ldr	r1, [pc, #40]	; (14650 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
   14628:	9b01      	ldr	r3, [sp, #4]
   1462a:	9a00      	ldr	r2, [sp, #0]
   1462c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
   14630:	4a06      	ldr	r2, [pc, #24]	; (1464c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   14632:	9b01      	ldr	r3, [sp, #4]
   14634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14638:	1c5a      	adds	r2, r3, #1
   1463a:	4904      	ldr	r1, [pc, #16]	; (1464c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   1463c:	9b01      	ldr	r3, [sp, #4]
   1463e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14642:	bf00      	nop
   14644:	b003      	add	sp, #12
   14646:	f85d fb04 	ldr.w	pc, [sp], #4
   1464a:	bf00      	nop
   1464c:	1fff9700 	.word	0x1fff9700
   14650:	1fff96fc 	.word	0x1fff96fc

00014654 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   14654:	b500      	push	{lr}
   14656:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14658:	f7ec fac8 	bl	bec <Sys_GetCoreID>
   1465c:	4603      	mov	r3, r0
   1465e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
   14660:	4a0d      	ldr	r2, [pc, #52]	; (14698 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   14662:	9b01      	ldr	r3, [sp, #4]
   14664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14668:	1e5a      	subs	r2, r3, #1
   1466a:	490b      	ldr	r1, [pc, #44]	; (14698 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   1466c:	9b01      	ldr	r3, [sp, #4]
   1466e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   14672:	4a0a      	ldr	r2, [pc, #40]	; (1469c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
   14674:	9b01      	ldr	r3, [sp, #4]
   14676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1467a:	f003 0301 	and.w	r3, r3, #1
   1467e:	2b00      	cmp	r3, #0
   14680:	d106      	bne.n	14690 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
   14682:	4a05      	ldr	r2, [pc, #20]	; (14698 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   14684:	9b01      	ldr	r3, [sp, #4]
   14686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1468a:	2b00      	cmp	r3, #0
   1468c:	d100      	bne.n	14690 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1468e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14690:	bf00      	nop
   14692:	b003      	add	sp, #12
   14694:	f85d fb04 	ldr.w	pc, [sp], #4
   14698:	1fff9700 	.word	0x1fff9700
   1469c:	1fff96fc 	.word	0x1fff96fc

000146a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   146a0:	b500      	push	{lr}
   146a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146a4:	f7ec faa2 	bl	bec <Sys_GetCoreID>
   146a8:	4603      	mov	r3, r0
   146aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
   146ac:	4a10      	ldr	r2, [pc, #64]	; (146f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   146ae:	9b01      	ldr	r3, [sp, #4]
   146b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146b4:	2b00      	cmp	r3, #0
   146b6:	d10d      	bne.n	146d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   146b8:	f7ec f967 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   146bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   146be:	9b00      	ldr	r3, [sp, #0]
   146c0:	f003 0301 	and.w	r3, r3, #1
   146c4:	2b00      	cmp	r3, #0
   146c6:	d100      	bne.n	146ca <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   146c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   146ca:	490a      	ldr	r1, [pc, #40]	; (146f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
   146cc:	9b01      	ldr	r3, [sp, #4]
   146ce:	9a00      	ldr	r2, [sp, #0]
   146d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
   146d4:	4a06      	ldr	r2, [pc, #24]	; (146f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   146d6:	9b01      	ldr	r3, [sp, #4]
   146d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146dc:	1c5a      	adds	r2, r3, #1
   146de:	4904      	ldr	r1, [pc, #16]	; (146f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   146e0:	9b01      	ldr	r3, [sp, #4]
   146e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   146e6:	bf00      	nop
   146e8:	b003      	add	sp, #12
   146ea:	f85d fb04 	ldr.w	pc, [sp], #4
   146ee:	bf00      	nop
   146f0:	1fff9708 	.word	0x1fff9708
   146f4:	1fff9704 	.word	0x1fff9704

000146f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   146f8:	b500      	push	{lr}
   146fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146fc:	f7ec fa76 	bl	bec <Sys_GetCoreID>
   14700:	4603      	mov	r3, r0
   14702:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
   14704:	4a0d      	ldr	r2, [pc, #52]	; (1473c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   14706:	9b01      	ldr	r3, [sp, #4]
   14708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1470c:	1e5a      	subs	r2, r3, #1
   1470e:	490b      	ldr	r1, [pc, #44]	; (1473c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   14710:	9b01      	ldr	r3, [sp, #4]
   14712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   14716:	4a0a      	ldr	r2, [pc, #40]	; (14740 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
   14718:	9b01      	ldr	r3, [sp, #4]
   1471a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1471e:	f003 0301 	and.w	r3, r3, #1
   14722:	2b00      	cmp	r3, #0
   14724:	d106      	bne.n	14734 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
   14726:	4a05      	ldr	r2, [pc, #20]	; (1473c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   14728:	9b01      	ldr	r3, [sp, #4]
   1472a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1472e:	2b00      	cmp	r3, #0
   14730:	d100      	bne.n	14734 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14732:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14734:	bf00      	nop
   14736:	b003      	add	sp, #12
   14738:	f85d fb04 	ldr.w	pc, [sp], #4
   1473c:	1fff9708 	.word	0x1fff9708
   14740:	1fff9704 	.word	0x1fff9704

00014744 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   14744:	b500      	push	{lr}
   14746:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14748:	f7ec fa50 	bl	bec <Sys_GetCoreID>
   1474c:	4603      	mov	r3, r0
   1474e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
   14750:	4a10      	ldr	r2, [pc, #64]	; (14794 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   14752:	9b01      	ldr	r3, [sp, #4]
   14754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14758:	2b00      	cmp	r3, #0
   1475a:	d10d      	bne.n	14778 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1475c:	f7ec f915 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   14760:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14762:	9b00      	ldr	r3, [sp, #0]
   14764:	f003 0301 	and.w	r3, r3, #1
   14768:	2b00      	cmp	r3, #0
   1476a:	d100      	bne.n	1476e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1476c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   1476e:	490a      	ldr	r1, [pc, #40]	; (14798 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
   14770:	9b01      	ldr	r3, [sp, #4]
   14772:	9a00      	ldr	r2, [sp, #0]
   14774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
   14778:	4a06      	ldr	r2, [pc, #24]	; (14794 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   1477a:	9b01      	ldr	r3, [sp, #4]
   1477c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14780:	1c5a      	adds	r2, r3, #1
   14782:	4904      	ldr	r1, [pc, #16]	; (14794 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   14784:	9b01      	ldr	r3, [sp, #4]
   14786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1478a:	bf00      	nop
   1478c:	b003      	add	sp, #12
   1478e:	f85d fb04 	ldr.w	pc, [sp], #4
   14792:	bf00      	nop
   14794:	1fff9710 	.word	0x1fff9710
   14798:	1fff970c 	.word	0x1fff970c

0001479c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   1479c:	b500      	push	{lr}
   1479e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147a0:	f7ec fa24 	bl	bec <Sys_GetCoreID>
   147a4:	4603      	mov	r3, r0
   147a6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
   147a8:	4a0d      	ldr	r2, [pc, #52]	; (147e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   147aa:	9b01      	ldr	r3, [sp, #4]
   147ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147b0:	1e5a      	subs	r2, r3, #1
   147b2:	490b      	ldr	r1, [pc, #44]	; (147e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   147b4:	9b01      	ldr	r3, [sp, #4]
   147b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   147ba:	4a0a      	ldr	r2, [pc, #40]	; (147e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
   147bc:	9b01      	ldr	r3, [sp, #4]
   147be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147c2:	f003 0301 	and.w	r3, r3, #1
   147c6:	2b00      	cmp	r3, #0
   147c8:	d106      	bne.n	147d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
   147ca:	4a05      	ldr	r2, [pc, #20]	; (147e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   147cc:	9b01      	ldr	r3, [sp, #4]
   147ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147d2:	2b00      	cmp	r3, #0
   147d4:	d100      	bne.n	147d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   147d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   147d8:	bf00      	nop
   147da:	b003      	add	sp, #12
   147dc:	f85d fb04 	ldr.w	pc, [sp], #4
   147e0:	1fff9710 	.word	0x1fff9710
   147e4:	1fff970c 	.word	0x1fff970c

000147e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   147e8:	b500      	push	{lr}
   147ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147ec:	f7ec f9fe 	bl	bec <Sys_GetCoreID>
   147f0:	4603      	mov	r3, r0
   147f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
   147f4:	4a10      	ldr	r2, [pc, #64]	; (14838 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   147f6:	9b01      	ldr	r3, [sp, #4]
   147f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147fc:	2b00      	cmp	r3, #0
   147fe:	d10d      	bne.n	1481c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14800:	f7ec f8c3 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   14804:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14806:	9b00      	ldr	r3, [sp, #0]
   14808:	f003 0301 	and.w	r3, r3, #1
   1480c:	2b00      	cmp	r3, #0
   1480e:	d100      	bne.n	14812 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14810:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   14812:	490a      	ldr	r1, [pc, #40]	; (1483c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
   14814:	9b01      	ldr	r3, [sp, #4]
   14816:	9a00      	ldr	r2, [sp, #0]
   14818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
   1481c:	4a06      	ldr	r2, [pc, #24]	; (14838 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   1481e:	9b01      	ldr	r3, [sp, #4]
   14820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14824:	1c5a      	adds	r2, r3, #1
   14826:	4904      	ldr	r1, [pc, #16]	; (14838 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   14828:	9b01      	ldr	r3, [sp, #4]
   1482a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1482e:	bf00      	nop
   14830:	b003      	add	sp, #12
   14832:	f85d fb04 	ldr.w	pc, [sp], #4
   14836:	bf00      	nop
   14838:	1fff9718 	.word	0x1fff9718
   1483c:	1fff9714 	.word	0x1fff9714

00014840 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   14840:	b500      	push	{lr}
   14842:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14844:	f7ec f9d2 	bl	bec <Sys_GetCoreID>
   14848:	4603      	mov	r3, r0
   1484a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
   1484c:	4a0d      	ldr	r2, [pc, #52]	; (14884 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   1484e:	9b01      	ldr	r3, [sp, #4]
   14850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14854:	1e5a      	subs	r2, r3, #1
   14856:	490b      	ldr	r1, [pc, #44]	; (14884 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   14858:	9b01      	ldr	r3, [sp, #4]
   1485a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   1485e:	4a0a      	ldr	r2, [pc, #40]	; (14888 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
   14860:	9b01      	ldr	r3, [sp, #4]
   14862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14866:	f003 0301 	and.w	r3, r3, #1
   1486a:	2b00      	cmp	r3, #0
   1486c:	d106      	bne.n	1487c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
   1486e:	4a05      	ldr	r2, [pc, #20]	; (14884 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   14870:	9b01      	ldr	r3, [sp, #4]
   14872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14876:	2b00      	cmp	r3, #0
   14878:	d100      	bne.n	1487c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1487a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1487c:	bf00      	nop
   1487e:	b003      	add	sp, #12
   14880:	f85d fb04 	ldr.w	pc, [sp], #4
   14884:	1fff9718 	.word	0x1fff9718
   14888:	1fff9714 	.word	0x1fff9714

0001488c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   1488c:	b500      	push	{lr}
   1488e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14890:	f7ec f9ac 	bl	bec <Sys_GetCoreID>
   14894:	4603      	mov	r3, r0
   14896:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
   14898:	4a10      	ldr	r2, [pc, #64]	; (148dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   1489a:	9b01      	ldr	r3, [sp, #4]
   1489c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148a0:	2b00      	cmp	r3, #0
   148a2:	d10d      	bne.n	148c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   148a4:	f7ec f871 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   148a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   148aa:	9b00      	ldr	r3, [sp, #0]
   148ac:	f003 0301 	and.w	r3, r3, #1
   148b0:	2b00      	cmp	r3, #0
   148b2:	d100      	bne.n	148b6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   148b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   148b6:	490a      	ldr	r1, [pc, #40]	; (148e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
   148b8:	9b01      	ldr	r3, [sp, #4]
   148ba:	9a00      	ldr	r2, [sp, #0]
   148bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
   148c0:	4a06      	ldr	r2, [pc, #24]	; (148dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   148c2:	9b01      	ldr	r3, [sp, #4]
   148c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148c8:	1c5a      	adds	r2, r3, #1
   148ca:	4904      	ldr	r1, [pc, #16]	; (148dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   148cc:	9b01      	ldr	r3, [sp, #4]
   148ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   148d2:	bf00      	nop
   148d4:	b003      	add	sp, #12
   148d6:	f85d fb04 	ldr.w	pc, [sp], #4
   148da:	bf00      	nop
   148dc:	1fff9720 	.word	0x1fff9720
   148e0:	1fff971c 	.word	0x1fff971c

000148e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   148e4:	b500      	push	{lr}
   148e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148e8:	f7ec f980 	bl	bec <Sys_GetCoreID>
   148ec:	4603      	mov	r3, r0
   148ee:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
   148f0:	4a0d      	ldr	r2, [pc, #52]	; (14928 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   148f2:	9b01      	ldr	r3, [sp, #4]
   148f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148f8:	1e5a      	subs	r2, r3, #1
   148fa:	490b      	ldr	r1, [pc, #44]	; (14928 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   148fc:	9b01      	ldr	r3, [sp, #4]
   148fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   14902:	4a0a      	ldr	r2, [pc, #40]	; (1492c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
   14904:	9b01      	ldr	r3, [sp, #4]
   14906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1490a:	f003 0301 	and.w	r3, r3, #1
   1490e:	2b00      	cmp	r3, #0
   14910:	d106      	bne.n	14920 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
   14912:	4a05      	ldr	r2, [pc, #20]	; (14928 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   14914:	9b01      	ldr	r3, [sp, #4]
   14916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1491a:	2b00      	cmp	r3, #0
   1491c:	d100      	bne.n	14920 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1491e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14920:	bf00      	nop
   14922:	b003      	add	sp, #12
   14924:	f85d fb04 	ldr.w	pc, [sp], #4
   14928:	1fff9720 	.word	0x1fff9720
   1492c:	1fff971c 	.word	0x1fff971c

00014930 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   14930:	b500      	push	{lr}
   14932:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14934:	f7ec f95a 	bl	bec <Sys_GetCoreID>
   14938:	4603      	mov	r3, r0
   1493a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
   1493c:	4a10      	ldr	r2, [pc, #64]	; (14980 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   1493e:	9b01      	ldr	r3, [sp, #4]
   14940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14944:	2b00      	cmp	r3, #0
   14946:	d10d      	bne.n	14964 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14948:	f7ec f81f 	bl	98a <Can_43_FLEXCAN_schm_read_msr>
   1494c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1494e:	9b00      	ldr	r3, [sp, #0]
   14950:	f003 0301 	and.w	r3, r3, #1
   14954:	2b00      	cmp	r3, #0
   14956:	d100      	bne.n	1495a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14958:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1495a:	490a      	ldr	r1, [pc, #40]	; (14984 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
   1495c:	9b01      	ldr	r3, [sp, #4]
   1495e:	9a00      	ldr	r2, [sp, #0]
   14960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
   14964:	4a06      	ldr	r2, [pc, #24]	; (14980 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   14966:	9b01      	ldr	r3, [sp, #4]
   14968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1496c:	1c5a      	adds	r2, r3, #1
   1496e:	4904      	ldr	r1, [pc, #16]	; (14980 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   14970:	9b01      	ldr	r3, [sp, #4]
   14972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14976:	bf00      	nop
   14978:	b003      	add	sp, #12
   1497a:	f85d fb04 	ldr.w	pc, [sp], #4
   1497e:	bf00      	nop
   14980:	1fff9728 	.word	0x1fff9728
   14984:	1fff9724 	.word	0x1fff9724

00014988 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   14988:	b500      	push	{lr}
   1498a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1498c:	f7ec f92e 	bl	bec <Sys_GetCoreID>
   14990:	4603      	mov	r3, r0
   14992:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
   14994:	4a0d      	ldr	r2, [pc, #52]	; (149cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   14996:	9b01      	ldr	r3, [sp, #4]
   14998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1499c:	1e5a      	subs	r2, r3, #1
   1499e:	490b      	ldr	r1, [pc, #44]	; (149cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   149a0:	9b01      	ldr	r3, [sp, #4]
   149a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   149a6:	4a0a      	ldr	r2, [pc, #40]	; (149d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
   149a8:	9b01      	ldr	r3, [sp, #4]
   149aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149ae:	f003 0301 	and.w	r3, r3, #1
   149b2:	2b00      	cmp	r3, #0
   149b4:	d106      	bne.n	149c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
   149b6:	4a05      	ldr	r2, [pc, #20]	; (149cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   149b8:	9b01      	ldr	r3, [sp, #4]
   149ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149be:	2b00      	cmp	r3, #0
   149c0:	d100      	bne.n	149c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   149c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   149c4:	bf00      	nop
   149c6:	b003      	add	sp, #12
   149c8:	f85d fb04 	ldr.w	pc, [sp], #4
   149cc:	1fff9728 	.word	0x1fff9728
   149d0:	1fff9724 	.word	0x1fff9724

000149d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   149d4:	b500      	push	{lr}
   149d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149d8:	f7ec f908 	bl	bec <Sys_GetCoreID>
   149dc:	4603      	mov	r3, r0
   149de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   149e0:	4a10      	ldr	r2, [pc, #64]	; (14a24 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   149e2:	9b01      	ldr	r3, [sp, #4]
   149e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149e8:	2b00      	cmp	r3, #0
   149ea:	d10d      	bne.n	14a08 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   149ec:	f7eb ffd6 	bl	99c <Mcu_schm_read_msr>
   149f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   149f2:	9b00      	ldr	r3, [sp, #0]
   149f4:	f003 0301 	and.w	r3, r3, #1
   149f8:	2b00      	cmp	r3, #0
   149fa:	d100      	bne.n	149fe <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   149fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   149fe:	490a      	ldr	r1, [pc, #40]	; (14a28 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   14a00:	9b01      	ldr	r3, [sp, #4]
   14a02:	9a00      	ldr	r2, [sp, #0]
   14a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   14a08:	4a06      	ldr	r2, [pc, #24]	; (14a24 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14a0a:	9b01      	ldr	r3, [sp, #4]
   14a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a10:	1c5a      	adds	r2, r3, #1
   14a12:	4904      	ldr	r1, [pc, #16]	; (14a24 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14a14:	9b01      	ldr	r3, [sp, #4]
   14a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a1a:	bf00      	nop
   14a1c:	b003      	add	sp, #12
   14a1e:	f85d fb04 	ldr.w	pc, [sp], #4
   14a22:	bf00      	nop
   14a24:	1fff9730 	.word	0x1fff9730
   14a28:	1fff972c 	.word	0x1fff972c

00014a2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   14a2c:	b500      	push	{lr}
   14a2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a30:	f7ec f8dc 	bl	bec <Sys_GetCoreID>
   14a34:	4603      	mov	r3, r0
   14a36:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   14a38:	4a0d      	ldr	r2, [pc, #52]	; (14a70 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14a3a:	9b01      	ldr	r3, [sp, #4]
   14a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a40:	1e5a      	subs	r2, r3, #1
   14a42:	490b      	ldr	r1, [pc, #44]	; (14a70 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14a44:	9b01      	ldr	r3, [sp, #4]
   14a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   14a4a:	4a0a      	ldr	r2, [pc, #40]	; (14a74 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   14a4c:	9b01      	ldr	r3, [sp, #4]
   14a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a52:	f003 0301 	and.w	r3, r3, #1
   14a56:	2b00      	cmp	r3, #0
   14a58:	d106      	bne.n	14a68 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   14a5a:	4a05      	ldr	r2, [pc, #20]	; (14a70 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14a5c:	9b01      	ldr	r3, [sp, #4]
   14a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a62:	2b00      	cmp	r3, #0
   14a64:	d100      	bne.n	14a68 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a68:	bf00      	nop
   14a6a:	b003      	add	sp, #12
   14a6c:	f85d fb04 	ldr.w	pc, [sp], #4
   14a70:	1fff9730 	.word	0x1fff9730
   14a74:	1fff972c 	.word	0x1fff972c

00014a78 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14a78:	b500      	push	{lr}
   14a7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a7c:	f7ec f8b6 	bl	bec <Sys_GetCoreID>
   14a80:	4603      	mov	r3, r0
   14a82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   14a84:	4a10      	ldr	r2, [pc, #64]	; (14ac8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14a86:	9b01      	ldr	r3, [sp, #4]
   14a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a8c:	2b00      	cmp	r3, #0
   14a8e:	d10d      	bne.n	14aac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a90:	f7eb ff84 	bl	99c <Mcu_schm_read_msr>
   14a94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a96:	9b00      	ldr	r3, [sp, #0]
   14a98:	f003 0301 	and.w	r3, r3, #1
   14a9c:	2b00      	cmp	r3, #0
   14a9e:	d100      	bne.n	14aa2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14aa0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14aa2:	490a      	ldr	r1, [pc, #40]	; (14acc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   14aa4:	9b01      	ldr	r3, [sp, #4]
   14aa6:	9a00      	ldr	r2, [sp, #0]
   14aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   14aac:	4a06      	ldr	r2, [pc, #24]	; (14ac8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14aae:	9b01      	ldr	r3, [sp, #4]
   14ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ab4:	1c5a      	adds	r2, r3, #1
   14ab6:	4904      	ldr	r1, [pc, #16]	; (14ac8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14ab8:	9b01      	ldr	r3, [sp, #4]
   14aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14abe:	bf00      	nop
   14ac0:	b003      	add	sp, #12
   14ac2:	f85d fb04 	ldr.w	pc, [sp], #4
   14ac6:	bf00      	nop
   14ac8:	1fff9738 	.word	0x1fff9738
   14acc:	1fff9734 	.word	0x1fff9734

00014ad0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14ad0:	b500      	push	{lr}
   14ad2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ad4:	f7ec f88a 	bl	bec <Sys_GetCoreID>
   14ad8:	4603      	mov	r3, r0
   14ada:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   14adc:	4a0d      	ldr	r2, [pc, #52]	; (14b14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14ade:	9b01      	ldr	r3, [sp, #4]
   14ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ae4:	1e5a      	subs	r2, r3, #1
   14ae6:	490b      	ldr	r1, [pc, #44]	; (14b14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14ae8:	9b01      	ldr	r3, [sp, #4]
   14aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14aee:	4a0a      	ldr	r2, [pc, #40]	; (14b18 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   14af0:	9b01      	ldr	r3, [sp, #4]
   14af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14af6:	f003 0301 	and.w	r3, r3, #1
   14afa:	2b00      	cmp	r3, #0
   14afc:	d106      	bne.n	14b0c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   14afe:	4a05      	ldr	r2, [pc, #20]	; (14b14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14b00:	9b01      	ldr	r3, [sp, #4]
   14b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b06:	2b00      	cmp	r3, #0
   14b08:	d100      	bne.n	14b0c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b0c:	bf00      	nop
   14b0e:	b003      	add	sp, #12
   14b10:	f85d fb04 	ldr.w	pc, [sp], #4
   14b14:	1fff9738 	.word	0x1fff9738
   14b18:	1fff9734 	.word	0x1fff9734

00014b1c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14b1c:	b500      	push	{lr}
   14b1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b20:	f7ec f864 	bl	bec <Sys_GetCoreID>
   14b24:	4603      	mov	r3, r0
   14b26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   14b28:	4a10      	ldr	r2, [pc, #64]	; (14b6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14b2a:	9b01      	ldr	r3, [sp, #4]
   14b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b30:	2b00      	cmp	r3, #0
   14b32:	d10d      	bne.n	14b50 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b34:	f7eb ff32 	bl	99c <Mcu_schm_read_msr>
   14b38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b3a:	9b00      	ldr	r3, [sp, #0]
   14b3c:	f003 0301 	and.w	r3, r3, #1
   14b40:	2b00      	cmp	r3, #0
   14b42:	d100      	bne.n	14b46 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14b46:	490a      	ldr	r1, [pc, #40]	; (14b70 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   14b48:	9b01      	ldr	r3, [sp, #4]
   14b4a:	9a00      	ldr	r2, [sp, #0]
   14b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   14b50:	4a06      	ldr	r2, [pc, #24]	; (14b6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14b52:	9b01      	ldr	r3, [sp, #4]
   14b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b58:	1c5a      	adds	r2, r3, #1
   14b5a:	4904      	ldr	r1, [pc, #16]	; (14b6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14b5c:	9b01      	ldr	r3, [sp, #4]
   14b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b62:	bf00      	nop
   14b64:	b003      	add	sp, #12
   14b66:	f85d fb04 	ldr.w	pc, [sp], #4
   14b6a:	bf00      	nop
   14b6c:	1fff9740 	.word	0x1fff9740
   14b70:	1fff973c 	.word	0x1fff973c

00014b74 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14b74:	b500      	push	{lr}
   14b76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b78:	f7ec f838 	bl	bec <Sys_GetCoreID>
   14b7c:	4603      	mov	r3, r0
   14b7e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   14b80:	4a0d      	ldr	r2, [pc, #52]	; (14bb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14b82:	9b01      	ldr	r3, [sp, #4]
   14b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b88:	1e5a      	subs	r2, r3, #1
   14b8a:	490b      	ldr	r1, [pc, #44]	; (14bb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14b8c:	9b01      	ldr	r3, [sp, #4]
   14b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14b92:	4a0a      	ldr	r2, [pc, #40]	; (14bbc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   14b94:	9b01      	ldr	r3, [sp, #4]
   14b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b9a:	f003 0301 	and.w	r3, r3, #1
   14b9e:	2b00      	cmp	r3, #0
   14ba0:	d106      	bne.n	14bb0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   14ba2:	4a05      	ldr	r2, [pc, #20]	; (14bb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14ba4:	9b01      	ldr	r3, [sp, #4]
   14ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14baa:	2b00      	cmp	r3, #0
   14bac:	d100      	bne.n	14bb0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14bae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14bb0:	bf00      	nop
   14bb2:	b003      	add	sp, #12
   14bb4:	f85d fb04 	ldr.w	pc, [sp], #4
   14bb8:	1fff9740 	.word	0x1fff9740
   14bbc:	1fff973c 	.word	0x1fff973c

00014bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14bc0:	b500      	push	{lr}
   14bc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14bc4:	f7ec f812 	bl	bec <Sys_GetCoreID>
   14bc8:	4603      	mov	r3, r0
   14bca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   14bcc:	4a10      	ldr	r2, [pc, #64]	; (14c10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14bce:	9b01      	ldr	r3, [sp, #4]
   14bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bd4:	2b00      	cmp	r3, #0
   14bd6:	d10d      	bne.n	14bf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14bd8:	f7eb fee9 	bl	9ae <Port_schm_read_msr>
   14bdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14bde:	9b00      	ldr	r3, [sp, #0]
   14be0:	f003 0301 	and.w	r3, r3, #1
   14be4:	2b00      	cmp	r3, #0
   14be6:	d100      	bne.n	14bea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14be8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   14bea:	490a      	ldr	r1, [pc, #40]	; (14c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   14bec:	9b01      	ldr	r3, [sp, #4]
   14bee:	9a00      	ldr	r2, [sp, #0]
   14bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   14bf4:	4a06      	ldr	r2, [pc, #24]	; (14c10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14bf6:	9b01      	ldr	r3, [sp, #4]
   14bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bfc:	1c5a      	adds	r2, r3, #1
   14bfe:	4904      	ldr	r1, [pc, #16]	; (14c10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14c00:	9b01      	ldr	r3, [sp, #4]
   14c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c06:	bf00      	nop
   14c08:	b003      	add	sp, #12
   14c0a:	f85d fb04 	ldr.w	pc, [sp], #4
   14c0e:	bf00      	nop
   14c10:	1fff9748 	.word	0x1fff9748
   14c14:	1fff9744 	.word	0x1fff9744

00014c18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14c18:	b500      	push	{lr}
   14c1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c1c:	f7eb ffe6 	bl	bec <Sys_GetCoreID>
   14c20:	4603      	mov	r3, r0
   14c22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   14c24:	4a0d      	ldr	r2, [pc, #52]	; (14c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14c26:	9b01      	ldr	r3, [sp, #4]
   14c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c2c:	1e5a      	subs	r2, r3, #1
   14c2e:	490b      	ldr	r1, [pc, #44]	; (14c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14c30:	9b01      	ldr	r3, [sp, #4]
   14c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   14c36:	4a0a      	ldr	r2, [pc, #40]	; (14c60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   14c38:	9b01      	ldr	r3, [sp, #4]
   14c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c3e:	f003 0301 	and.w	r3, r3, #1
   14c42:	2b00      	cmp	r3, #0
   14c44:	d106      	bne.n	14c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   14c46:	4a05      	ldr	r2, [pc, #20]	; (14c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14c48:	9b01      	ldr	r3, [sp, #4]
   14c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c4e:	2b00      	cmp	r3, #0
   14c50:	d100      	bne.n	14c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c54:	bf00      	nop
   14c56:	b003      	add	sp, #12
   14c58:	f85d fb04 	ldr.w	pc, [sp], #4
   14c5c:	1fff9748 	.word	0x1fff9748
   14c60:	1fff9744 	.word	0x1fff9744

00014c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14c64:	b500      	push	{lr}
   14c66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c68:	f7eb ffc0 	bl	bec <Sys_GetCoreID>
   14c6c:	4603      	mov	r3, r0
   14c6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   14c70:	4a10      	ldr	r2, [pc, #64]	; (14cb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14c72:	9b01      	ldr	r3, [sp, #4]
   14c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c78:	2b00      	cmp	r3, #0
   14c7a:	d10d      	bne.n	14c98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c7c:	f7eb fe97 	bl	9ae <Port_schm_read_msr>
   14c80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c82:	9b00      	ldr	r3, [sp, #0]
   14c84:	f003 0301 	and.w	r3, r3, #1
   14c88:	2b00      	cmp	r3, #0
   14c8a:	d100      	bne.n	14c8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14c8e:	490a      	ldr	r1, [pc, #40]	; (14cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   14c90:	9b01      	ldr	r3, [sp, #4]
   14c92:	9a00      	ldr	r2, [sp, #0]
   14c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   14c98:	4a06      	ldr	r2, [pc, #24]	; (14cb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14c9a:	9b01      	ldr	r3, [sp, #4]
   14c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ca0:	1c5a      	adds	r2, r3, #1
   14ca2:	4904      	ldr	r1, [pc, #16]	; (14cb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14ca4:	9b01      	ldr	r3, [sp, #4]
   14ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14caa:	bf00      	nop
   14cac:	b003      	add	sp, #12
   14cae:	f85d fb04 	ldr.w	pc, [sp], #4
   14cb2:	bf00      	nop
   14cb4:	1fff9750 	.word	0x1fff9750
   14cb8:	1fff974c 	.word	0x1fff974c

00014cbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14cbc:	b500      	push	{lr}
   14cbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cc0:	f7eb ff94 	bl	bec <Sys_GetCoreID>
   14cc4:	4603      	mov	r3, r0
   14cc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   14cc8:	4a0d      	ldr	r2, [pc, #52]	; (14d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14cca:	9b01      	ldr	r3, [sp, #4]
   14ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cd0:	1e5a      	subs	r2, r3, #1
   14cd2:	490b      	ldr	r1, [pc, #44]	; (14d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14cd4:	9b01      	ldr	r3, [sp, #4]
   14cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14cda:	4a0a      	ldr	r2, [pc, #40]	; (14d04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   14cdc:	9b01      	ldr	r3, [sp, #4]
   14cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ce2:	f003 0301 	and.w	r3, r3, #1
   14ce6:	2b00      	cmp	r3, #0
   14ce8:	d106      	bne.n	14cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   14cea:	4a05      	ldr	r2, [pc, #20]	; (14d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14cec:	9b01      	ldr	r3, [sp, #4]
   14cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cf2:	2b00      	cmp	r3, #0
   14cf4:	d100      	bne.n	14cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14cf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14cf8:	bf00      	nop
   14cfa:	b003      	add	sp, #12
   14cfc:	f85d fb04 	ldr.w	pc, [sp], #4
   14d00:	1fff9750 	.word	0x1fff9750
   14d04:	1fff974c 	.word	0x1fff974c

00014d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14d08:	b500      	push	{lr}
   14d0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d0c:	f7eb ff6e 	bl	bec <Sys_GetCoreID>
   14d10:	4603      	mov	r3, r0
   14d12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   14d14:	4a10      	ldr	r2, [pc, #64]	; (14d58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14d16:	9b01      	ldr	r3, [sp, #4]
   14d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d1c:	2b00      	cmp	r3, #0
   14d1e:	d10d      	bne.n	14d3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d20:	f7eb fe45 	bl	9ae <Port_schm_read_msr>
   14d24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d26:	9b00      	ldr	r3, [sp, #0]
   14d28:	f003 0301 	and.w	r3, r3, #1
   14d2c:	2b00      	cmp	r3, #0
   14d2e:	d100      	bne.n	14d32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14d32:	490a      	ldr	r1, [pc, #40]	; (14d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   14d34:	9b01      	ldr	r3, [sp, #4]
   14d36:	9a00      	ldr	r2, [sp, #0]
   14d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   14d3c:	4a06      	ldr	r2, [pc, #24]	; (14d58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14d3e:	9b01      	ldr	r3, [sp, #4]
   14d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d44:	1c5a      	adds	r2, r3, #1
   14d46:	4904      	ldr	r1, [pc, #16]	; (14d58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14d48:	9b01      	ldr	r3, [sp, #4]
   14d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d4e:	bf00      	nop
   14d50:	b003      	add	sp, #12
   14d52:	f85d fb04 	ldr.w	pc, [sp], #4
   14d56:	bf00      	nop
   14d58:	1fff9758 	.word	0x1fff9758
   14d5c:	1fff9754 	.word	0x1fff9754

00014d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14d60:	b500      	push	{lr}
   14d62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d64:	f7eb ff42 	bl	bec <Sys_GetCoreID>
   14d68:	4603      	mov	r3, r0
   14d6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   14d6c:	4a0d      	ldr	r2, [pc, #52]	; (14da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14d6e:	9b01      	ldr	r3, [sp, #4]
   14d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d74:	1e5a      	subs	r2, r3, #1
   14d76:	490b      	ldr	r1, [pc, #44]	; (14da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14d78:	9b01      	ldr	r3, [sp, #4]
   14d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14d7e:	4a0a      	ldr	r2, [pc, #40]	; (14da8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   14d80:	9b01      	ldr	r3, [sp, #4]
   14d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d86:	f003 0301 	and.w	r3, r3, #1
   14d8a:	2b00      	cmp	r3, #0
   14d8c:	d106      	bne.n	14d9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   14d8e:	4a05      	ldr	r2, [pc, #20]	; (14da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14d90:	9b01      	ldr	r3, [sp, #4]
   14d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d96:	2b00      	cmp	r3, #0
   14d98:	d100      	bne.n	14d9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d9c:	bf00      	nop
   14d9e:	b003      	add	sp, #12
   14da0:	f85d fb04 	ldr.w	pc, [sp], #4
   14da4:	1fff9758 	.word	0x1fff9758
   14da8:	1fff9754 	.word	0x1fff9754

00014dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14dac:	b500      	push	{lr}
   14dae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14db0:	f7eb ff1c 	bl	bec <Sys_GetCoreID>
   14db4:	4603      	mov	r3, r0
   14db6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   14db8:	4a10      	ldr	r2, [pc, #64]	; (14dfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14dba:	9b01      	ldr	r3, [sp, #4]
   14dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dc0:	2b00      	cmp	r3, #0
   14dc2:	d10d      	bne.n	14de0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14dc4:	f7eb fdf3 	bl	9ae <Port_schm_read_msr>
   14dc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14dca:	9b00      	ldr	r3, [sp, #0]
   14dcc:	f003 0301 	and.w	r3, r3, #1
   14dd0:	2b00      	cmp	r3, #0
   14dd2:	d100      	bne.n	14dd6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14dd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   14dd6:	490a      	ldr	r1, [pc, #40]	; (14e00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   14dd8:	9b01      	ldr	r3, [sp, #4]
   14dda:	9a00      	ldr	r2, [sp, #0]
   14ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   14de0:	4a06      	ldr	r2, [pc, #24]	; (14dfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14de2:	9b01      	ldr	r3, [sp, #4]
   14de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14de8:	1c5a      	adds	r2, r3, #1
   14dea:	4904      	ldr	r1, [pc, #16]	; (14dfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14dec:	9b01      	ldr	r3, [sp, #4]
   14dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14df2:	bf00      	nop
   14df4:	b003      	add	sp, #12
   14df6:	f85d fb04 	ldr.w	pc, [sp], #4
   14dfa:	bf00      	nop
   14dfc:	1fff9760 	.word	0x1fff9760
   14e00:	1fff975c 	.word	0x1fff975c

00014e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14e04:	b500      	push	{lr}
   14e06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e08:	f7eb fef0 	bl	bec <Sys_GetCoreID>
   14e0c:	4603      	mov	r3, r0
   14e0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   14e10:	4a0d      	ldr	r2, [pc, #52]	; (14e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14e12:	9b01      	ldr	r3, [sp, #4]
   14e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e18:	1e5a      	subs	r2, r3, #1
   14e1a:	490b      	ldr	r1, [pc, #44]	; (14e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14e1c:	9b01      	ldr	r3, [sp, #4]
   14e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   14e22:	4a0a      	ldr	r2, [pc, #40]	; (14e4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   14e24:	9b01      	ldr	r3, [sp, #4]
   14e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e2a:	f003 0301 	and.w	r3, r3, #1
   14e2e:	2b00      	cmp	r3, #0
   14e30:	d106      	bne.n	14e40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   14e32:	4a05      	ldr	r2, [pc, #20]	; (14e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14e34:	9b01      	ldr	r3, [sp, #4]
   14e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e3a:	2b00      	cmp	r3, #0
   14e3c:	d100      	bne.n	14e40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e40:	bf00      	nop
   14e42:	b003      	add	sp, #12
   14e44:	f85d fb04 	ldr.w	pc, [sp], #4
   14e48:	1fff9760 	.word	0x1fff9760
   14e4c:	1fff975c 	.word	0x1fff975c

00014e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14e50:	b500      	push	{lr}
   14e52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e54:	f7eb feca 	bl	bec <Sys_GetCoreID>
   14e58:	4603      	mov	r3, r0
   14e5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   14e5c:	4a10      	ldr	r2, [pc, #64]	; (14ea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14e5e:	9b01      	ldr	r3, [sp, #4]
   14e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e64:	2b00      	cmp	r3, #0
   14e66:	d10d      	bne.n	14e84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e68:	f7eb fda1 	bl	9ae <Port_schm_read_msr>
   14e6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e6e:	9b00      	ldr	r3, [sp, #0]
   14e70:	f003 0301 	and.w	r3, r3, #1
   14e74:	2b00      	cmp	r3, #0
   14e76:	d100      	bne.n	14e7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   14e7a:	490a      	ldr	r1, [pc, #40]	; (14ea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   14e7c:	9b01      	ldr	r3, [sp, #4]
   14e7e:	9a00      	ldr	r2, [sp, #0]
   14e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   14e84:	4a06      	ldr	r2, [pc, #24]	; (14ea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14e86:	9b01      	ldr	r3, [sp, #4]
   14e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e8c:	1c5a      	adds	r2, r3, #1
   14e8e:	4904      	ldr	r1, [pc, #16]	; (14ea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14e90:	9b01      	ldr	r3, [sp, #4]
   14e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e96:	bf00      	nop
   14e98:	b003      	add	sp, #12
   14e9a:	f85d fb04 	ldr.w	pc, [sp], #4
   14e9e:	bf00      	nop
   14ea0:	1fff9768 	.word	0x1fff9768
   14ea4:	1fff9764 	.word	0x1fff9764

00014ea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14ea8:	b500      	push	{lr}
   14eaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14eac:	f7eb fe9e 	bl	bec <Sys_GetCoreID>
   14eb0:	4603      	mov	r3, r0
   14eb2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   14eb4:	4a0d      	ldr	r2, [pc, #52]	; (14eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14eb6:	9b01      	ldr	r3, [sp, #4]
   14eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ebc:	1e5a      	subs	r2, r3, #1
   14ebe:	490b      	ldr	r1, [pc, #44]	; (14eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14ec0:	9b01      	ldr	r3, [sp, #4]
   14ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   14ec6:	4a0a      	ldr	r2, [pc, #40]	; (14ef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   14ec8:	9b01      	ldr	r3, [sp, #4]
   14eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ece:	f003 0301 	and.w	r3, r3, #1
   14ed2:	2b00      	cmp	r3, #0
   14ed4:	d106      	bne.n	14ee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   14ed6:	4a05      	ldr	r2, [pc, #20]	; (14eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14ed8:	9b01      	ldr	r3, [sp, #4]
   14eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ede:	2b00      	cmp	r3, #0
   14ee0:	d100      	bne.n	14ee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14ee2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ee4:	bf00      	nop
   14ee6:	b003      	add	sp, #12
   14ee8:	f85d fb04 	ldr.w	pc, [sp], #4
   14eec:	1fff9768 	.word	0x1fff9768
   14ef0:	1fff9764 	.word	0x1fff9764

00014ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   14ef4:	b500      	push	{lr}
   14ef6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ef8:	f7eb fe78 	bl	bec <Sys_GetCoreID>
   14efc:	4603      	mov	r3, r0
   14efe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   14f00:	4a10      	ldr	r2, [pc, #64]	; (14f44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14f02:	9b01      	ldr	r3, [sp, #4]
   14f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f08:	2b00      	cmp	r3, #0
   14f0a:	d10d      	bne.n	14f28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f0c:	f7eb fd4f 	bl	9ae <Port_schm_read_msr>
   14f10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f12:	9b00      	ldr	r3, [sp, #0]
   14f14:	f003 0301 	and.w	r3, r3, #1
   14f18:	2b00      	cmp	r3, #0
   14f1a:	d100      	bne.n	14f1e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   14f1e:	490a      	ldr	r1, [pc, #40]	; (14f48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   14f20:	9b01      	ldr	r3, [sp, #4]
   14f22:	9a00      	ldr	r2, [sp, #0]
   14f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   14f28:	4a06      	ldr	r2, [pc, #24]	; (14f44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14f2a:	9b01      	ldr	r3, [sp, #4]
   14f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f30:	1c5a      	adds	r2, r3, #1
   14f32:	4904      	ldr	r1, [pc, #16]	; (14f44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14f34:	9b01      	ldr	r3, [sp, #4]
   14f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f3a:	bf00      	nop
   14f3c:	b003      	add	sp, #12
   14f3e:	f85d fb04 	ldr.w	pc, [sp], #4
   14f42:	bf00      	nop
   14f44:	1fff9770 	.word	0x1fff9770
   14f48:	1fff976c 	.word	0x1fff976c

00014f4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   14f4c:	b500      	push	{lr}
   14f4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f50:	f7eb fe4c 	bl	bec <Sys_GetCoreID>
   14f54:	4603      	mov	r3, r0
   14f56:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   14f58:	4a0d      	ldr	r2, [pc, #52]	; (14f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14f5a:	9b01      	ldr	r3, [sp, #4]
   14f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f60:	1e5a      	subs	r2, r3, #1
   14f62:	490b      	ldr	r1, [pc, #44]	; (14f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14f64:	9b01      	ldr	r3, [sp, #4]
   14f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   14f6a:	4a0a      	ldr	r2, [pc, #40]	; (14f94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   14f6c:	9b01      	ldr	r3, [sp, #4]
   14f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f72:	f003 0301 	and.w	r3, r3, #1
   14f76:	2b00      	cmp	r3, #0
   14f78:	d106      	bne.n	14f88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   14f7a:	4a05      	ldr	r2, [pc, #20]	; (14f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14f7c:	9b01      	ldr	r3, [sp, #4]
   14f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f82:	2b00      	cmp	r3, #0
   14f84:	d100      	bne.n	14f88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f88:	bf00      	nop
   14f8a:	b003      	add	sp, #12
   14f8c:	f85d fb04 	ldr.w	pc, [sp], #4
   14f90:	1fff9770 	.word	0x1fff9770
   14f94:	1fff976c 	.word	0x1fff976c

00014f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   14f98:	b500      	push	{lr}
   14f9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f9c:	f7eb fe26 	bl	bec <Sys_GetCoreID>
   14fa0:	4603      	mov	r3, r0
   14fa2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   14fa4:	4a10      	ldr	r2, [pc, #64]	; (14fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   14fa6:	9b01      	ldr	r3, [sp, #4]
   14fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fac:	2b00      	cmp	r3, #0
   14fae:	d10d      	bne.n	14fcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14fb0:	f7eb fcfd 	bl	9ae <Port_schm_read_msr>
   14fb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14fb6:	9b00      	ldr	r3, [sp, #0]
   14fb8:	f003 0301 	and.w	r3, r3, #1
   14fbc:	2b00      	cmp	r3, #0
   14fbe:	d100      	bne.n	14fc2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14fc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   14fc2:	490a      	ldr	r1, [pc, #40]	; (14fec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   14fc4:	9b01      	ldr	r3, [sp, #4]
   14fc6:	9a00      	ldr	r2, [sp, #0]
   14fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   14fcc:	4a06      	ldr	r2, [pc, #24]	; (14fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   14fce:	9b01      	ldr	r3, [sp, #4]
   14fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fd4:	1c5a      	adds	r2, r3, #1
   14fd6:	4904      	ldr	r1, [pc, #16]	; (14fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   14fd8:	9b01      	ldr	r3, [sp, #4]
   14fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14fde:	bf00      	nop
   14fe0:	b003      	add	sp, #12
   14fe2:	f85d fb04 	ldr.w	pc, [sp], #4
   14fe6:	bf00      	nop
   14fe8:	1fff9778 	.word	0x1fff9778
   14fec:	1fff9774 	.word	0x1fff9774

00014ff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   14ff0:	b500      	push	{lr}
   14ff2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ff4:	f7eb fdfa 	bl	bec <Sys_GetCoreID>
   14ff8:	4603      	mov	r3, r0
   14ffa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   14ffc:	4a0d      	ldr	r2, [pc, #52]	; (15034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   14ffe:	9b01      	ldr	r3, [sp, #4]
   15000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15004:	1e5a      	subs	r2, r3, #1
   15006:	490b      	ldr	r1, [pc, #44]	; (15034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15008:	9b01      	ldr	r3, [sp, #4]
   1500a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   1500e:	4a0a      	ldr	r2, [pc, #40]	; (15038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   15010:	9b01      	ldr	r3, [sp, #4]
   15012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15016:	f003 0301 	and.w	r3, r3, #1
   1501a:	2b00      	cmp	r3, #0
   1501c:	d106      	bne.n	1502c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   1501e:	4a05      	ldr	r2, [pc, #20]	; (15034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15020:	9b01      	ldr	r3, [sp, #4]
   15022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15026:	2b00      	cmp	r3, #0
   15028:	d100      	bne.n	1502c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1502a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1502c:	bf00      	nop
   1502e:	b003      	add	sp, #12
   15030:	f85d fb04 	ldr.w	pc, [sp], #4
   15034:	1fff9778 	.word	0x1fff9778
   15038:	1fff9774 	.word	0x1fff9774

0001503c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   1503c:	b500      	push	{lr}
   1503e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15040:	f7eb fdd4 	bl	bec <Sys_GetCoreID>
   15044:	4603      	mov	r3, r0
   15046:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   15048:	4a10      	ldr	r2, [pc, #64]	; (1508c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1504a:	9b01      	ldr	r3, [sp, #4]
   1504c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15050:	2b00      	cmp	r3, #0
   15052:	d10d      	bne.n	15070 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15054:	f7eb fcab 	bl	9ae <Port_schm_read_msr>
   15058:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1505a:	9b00      	ldr	r3, [sp, #0]
   1505c:	f003 0301 	and.w	r3, r3, #1
   15060:	2b00      	cmp	r3, #0
   15062:	d100      	bne.n	15066 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15064:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   15066:	490a      	ldr	r1, [pc, #40]	; (15090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   15068:	9b01      	ldr	r3, [sp, #4]
   1506a:	9a00      	ldr	r2, [sp, #0]
   1506c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   15070:	4a06      	ldr	r2, [pc, #24]	; (1508c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15072:	9b01      	ldr	r3, [sp, #4]
   15074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15078:	1c5a      	adds	r2, r3, #1
   1507a:	4904      	ldr	r1, [pc, #16]	; (1508c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1507c:	9b01      	ldr	r3, [sp, #4]
   1507e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15082:	bf00      	nop
   15084:	b003      	add	sp, #12
   15086:	f85d fb04 	ldr.w	pc, [sp], #4
   1508a:	bf00      	nop
   1508c:	1fff9780 	.word	0x1fff9780
   15090:	1fff977c 	.word	0x1fff977c

00015094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15094:	b500      	push	{lr}
   15096:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15098:	f7eb fda8 	bl	bec <Sys_GetCoreID>
   1509c:	4603      	mov	r3, r0
   1509e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   150a0:	4a0d      	ldr	r2, [pc, #52]	; (150d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   150a2:	9b01      	ldr	r3, [sp, #4]
   150a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150a8:	1e5a      	subs	r2, r3, #1
   150aa:	490b      	ldr	r1, [pc, #44]	; (150d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   150ac:	9b01      	ldr	r3, [sp, #4]
   150ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   150b2:	4a0a      	ldr	r2, [pc, #40]	; (150dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   150b4:	9b01      	ldr	r3, [sp, #4]
   150b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150ba:	f003 0301 	and.w	r3, r3, #1
   150be:	2b00      	cmp	r3, #0
   150c0:	d106      	bne.n	150d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   150c2:	4a05      	ldr	r2, [pc, #20]	; (150d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   150c4:	9b01      	ldr	r3, [sp, #4]
   150c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150ca:	2b00      	cmp	r3, #0
   150cc:	d100      	bne.n	150d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   150ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   150d0:	bf00      	nop
   150d2:	b003      	add	sp, #12
   150d4:	f85d fb04 	ldr.w	pc, [sp], #4
   150d8:	1fff9780 	.word	0x1fff9780
   150dc:	1fff977c 	.word	0x1fff977c

000150e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   150e0:	b500      	push	{lr}
   150e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150e4:	f7eb fd82 	bl	bec <Sys_GetCoreID>
   150e8:	4603      	mov	r3, r0
   150ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   150ec:	4a10      	ldr	r2, [pc, #64]	; (15130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   150ee:	9b01      	ldr	r3, [sp, #4]
   150f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150f4:	2b00      	cmp	r3, #0
   150f6:	d10d      	bne.n	15114 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   150f8:	f7eb fc59 	bl	9ae <Port_schm_read_msr>
   150fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   150fe:	9b00      	ldr	r3, [sp, #0]
   15100:	f003 0301 	and.w	r3, r3, #1
   15104:	2b00      	cmp	r3, #0
   15106:	d100      	bne.n	1510a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15108:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1510a:	490a      	ldr	r1, [pc, #40]	; (15134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   1510c:	9b01      	ldr	r3, [sp, #4]
   1510e:	9a00      	ldr	r2, [sp, #0]
   15110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   15114:	4a06      	ldr	r2, [pc, #24]	; (15130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15116:	9b01      	ldr	r3, [sp, #4]
   15118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1511c:	1c5a      	adds	r2, r3, #1
   1511e:	4904      	ldr	r1, [pc, #16]	; (15130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15120:	9b01      	ldr	r3, [sp, #4]
   15122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15126:	bf00      	nop
   15128:	b003      	add	sp, #12
   1512a:	f85d fb04 	ldr.w	pc, [sp], #4
   1512e:	bf00      	nop
   15130:	1fff9788 	.word	0x1fff9788
   15134:	1fff9784 	.word	0x1fff9784

00015138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15138:	b500      	push	{lr}
   1513a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1513c:	f7eb fd56 	bl	bec <Sys_GetCoreID>
   15140:	4603      	mov	r3, r0
   15142:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   15144:	4a0d      	ldr	r2, [pc, #52]	; (1517c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15146:	9b01      	ldr	r3, [sp, #4]
   15148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1514c:	1e5a      	subs	r2, r3, #1
   1514e:	490b      	ldr	r1, [pc, #44]	; (1517c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15150:	9b01      	ldr	r3, [sp, #4]
   15152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   15156:	4a0a      	ldr	r2, [pc, #40]	; (15180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   15158:	9b01      	ldr	r3, [sp, #4]
   1515a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1515e:	f003 0301 	and.w	r3, r3, #1
   15162:	2b00      	cmp	r3, #0
   15164:	d106      	bne.n	15174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   15166:	4a05      	ldr	r2, [pc, #20]	; (1517c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15168:	9b01      	ldr	r3, [sp, #4]
   1516a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1516e:	2b00      	cmp	r3, #0
   15170:	d100      	bne.n	15174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15172:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15174:	bf00      	nop
   15176:	b003      	add	sp, #12
   15178:	f85d fb04 	ldr.w	pc, [sp], #4
   1517c:	1fff9788 	.word	0x1fff9788
   15180:	1fff9784 	.word	0x1fff9784

00015184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15184:	b500      	push	{lr}
   15186:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15188:	f7eb fd30 	bl	bec <Sys_GetCoreID>
   1518c:	4603      	mov	r3, r0
   1518e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   15190:	4a10      	ldr	r2, [pc, #64]	; (151d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15192:	9b01      	ldr	r3, [sp, #4]
   15194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15198:	2b00      	cmp	r3, #0
   1519a:	d10d      	bne.n	151b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1519c:	f7eb fc07 	bl	9ae <Port_schm_read_msr>
   151a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   151a2:	9b00      	ldr	r3, [sp, #0]
   151a4:	f003 0301 	and.w	r3, r3, #1
   151a8:	2b00      	cmp	r3, #0
   151aa:	d100      	bne.n	151ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   151ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   151ae:	490a      	ldr	r1, [pc, #40]	; (151d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   151b0:	9b01      	ldr	r3, [sp, #4]
   151b2:	9a00      	ldr	r2, [sp, #0]
   151b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   151b8:	4a06      	ldr	r2, [pc, #24]	; (151d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   151ba:	9b01      	ldr	r3, [sp, #4]
   151bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151c0:	1c5a      	adds	r2, r3, #1
   151c2:	4904      	ldr	r1, [pc, #16]	; (151d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   151c4:	9b01      	ldr	r3, [sp, #4]
   151c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   151ca:	bf00      	nop
   151cc:	b003      	add	sp, #12
   151ce:	f85d fb04 	ldr.w	pc, [sp], #4
   151d2:	bf00      	nop
   151d4:	1fff9790 	.word	0x1fff9790
   151d8:	1fff978c 	.word	0x1fff978c

000151dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   151dc:	b500      	push	{lr}
   151de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151e0:	f7eb fd04 	bl	bec <Sys_GetCoreID>
   151e4:	4603      	mov	r3, r0
   151e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   151e8:	4a0d      	ldr	r2, [pc, #52]	; (15220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   151ea:	9b01      	ldr	r3, [sp, #4]
   151ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151f0:	1e5a      	subs	r2, r3, #1
   151f2:	490b      	ldr	r1, [pc, #44]	; (15220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   151f4:	9b01      	ldr	r3, [sp, #4]
   151f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   151fa:	4a0a      	ldr	r2, [pc, #40]	; (15224 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   151fc:	9b01      	ldr	r3, [sp, #4]
   151fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15202:	f003 0301 	and.w	r3, r3, #1
   15206:	2b00      	cmp	r3, #0
   15208:	d106      	bne.n	15218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   1520a:	4a05      	ldr	r2, [pc, #20]	; (15220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   1520c:	9b01      	ldr	r3, [sp, #4]
   1520e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15212:	2b00      	cmp	r3, #0
   15214:	d100      	bne.n	15218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15216:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15218:	bf00      	nop
   1521a:	b003      	add	sp, #12
   1521c:	f85d fb04 	ldr.w	pc, [sp], #4
   15220:	1fff9790 	.word	0x1fff9790
   15224:	1fff978c 	.word	0x1fff978c

00015228 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15228:	b500      	push	{lr}
   1522a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1522c:	f7eb fcde 	bl	bec <Sys_GetCoreID>
   15230:	4603      	mov	r3, r0
   15232:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   15234:	4a10      	ldr	r2, [pc, #64]	; (15278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15236:	9b01      	ldr	r3, [sp, #4]
   15238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1523c:	2b00      	cmp	r3, #0
   1523e:	d10d      	bne.n	1525c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15240:	f7eb fbb5 	bl	9ae <Port_schm_read_msr>
   15244:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15246:	9b00      	ldr	r3, [sp, #0]
   15248:	f003 0301 	and.w	r3, r3, #1
   1524c:	2b00      	cmp	r3, #0
   1524e:	d100      	bne.n	15252 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15250:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   15252:	490a      	ldr	r1, [pc, #40]	; (1527c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   15254:	9b01      	ldr	r3, [sp, #4]
   15256:	9a00      	ldr	r2, [sp, #0]
   15258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   1525c:	4a06      	ldr	r2, [pc, #24]	; (15278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   1525e:	9b01      	ldr	r3, [sp, #4]
   15260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15264:	1c5a      	adds	r2, r3, #1
   15266:	4904      	ldr	r1, [pc, #16]	; (15278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15268:	9b01      	ldr	r3, [sp, #4]
   1526a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1526e:	bf00      	nop
   15270:	b003      	add	sp, #12
   15272:	f85d fb04 	ldr.w	pc, [sp], #4
   15276:	bf00      	nop
   15278:	1fff9798 	.word	0x1fff9798
   1527c:	1fff9794 	.word	0x1fff9794

00015280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15280:	b500      	push	{lr}
   15282:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15284:	f7eb fcb2 	bl	bec <Sys_GetCoreID>
   15288:	4603      	mov	r3, r0
   1528a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   1528c:	4a0d      	ldr	r2, [pc, #52]	; (152c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   1528e:	9b01      	ldr	r3, [sp, #4]
   15290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15294:	1e5a      	subs	r2, r3, #1
   15296:	490b      	ldr	r1, [pc, #44]	; (152c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15298:	9b01      	ldr	r3, [sp, #4]
   1529a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1529e:	4a0a      	ldr	r2, [pc, #40]	; (152c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   152a0:	9b01      	ldr	r3, [sp, #4]
   152a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152a6:	f003 0301 	and.w	r3, r3, #1
   152aa:	2b00      	cmp	r3, #0
   152ac:	d106      	bne.n	152bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   152ae:	4a05      	ldr	r2, [pc, #20]	; (152c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   152b0:	9b01      	ldr	r3, [sp, #4]
   152b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152b6:	2b00      	cmp	r3, #0
   152b8:	d100      	bne.n	152bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   152ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   152bc:	bf00      	nop
   152be:	b003      	add	sp, #12
   152c0:	f85d fb04 	ldr.w	pc, [sp], #4
   152c4:	1fff9798 	.word	0x1fff9798
   152c8:	1fff9794 	.word	0x1fff9794

000152cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   152cc:	b500      	push	{lr}
   152ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152d0:	f7eb fc8c 	bl	bec <Sys_GetCoreID>
   152d4:	4603      	mov	r3, r0
   152d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   152d8:	4a10      	ldr	r2, [pc, #64]	; (1531c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   152da:	9b01      	ldr	r3, [sp, #4]
   152dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152e0:	2b00      	cmp	r3, #0
   152e2:	d10d      	bne.n	15300 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   152e4:	f7eb fb63 	bl	9ae <Port_schm_read_msr>
   152e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   152ea:	9b00      	ldr	r3, [sp, #0]
   152ec:	f003 0301 	and.w	r3, r3, #1
   152f0:	2b00      	cmp	r3, #0
   152f2:	d100      	bne.n	152f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   152f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   152f6:	490a      	ldr	r1, [pc, #40]	; (15320 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   152f8:	9b01      	ldr	r3, [sp, #4]
   152fa:	9a00      	ldr	r2, [sp, #0]
   152fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   15300:	4a06      	ldr	r2, [pc, #24]	; (1531c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15302:	9b01      	ldr	r3, [sp, #4]
   15304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15308:	1c5a      	adds	r2, r3, #1
   1530a:	4904      	ldr	r1, [pc, #16]	; (1531c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   1530c:	9b01      	ldr	r3, [sp, #4]
   1530e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15312:	bf00      	nop
   15314:	b003      	add	sp, #12
   15316:	f85d fb04 	ldr.w	pc, [sp], #4
   1531a:	bf00      	nop
   1531c:	1fff97a0 	.word	0x1fff97a0
   15320:	1fff979c 	.word	0x1fff979c

00015324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15324:	b500      	push	{lr}
   15326:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15328:	f7eb fc60 	bl	bec <Sys_GetCoreID>
   1532c:	4603      	mov	r3, r0
   1532e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   15330:	4a0d      	ldr	r2, [pc, #52]	; (15368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15332:	9b01      	ldr	r3, [sp, #4]
   15334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15338:	1e5a      	subs	r2, r3, #1
   1533a:	490b      	ldr	r1, [pc, #44]	; (15368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   1533c:	9b01      	ldr	r3, [sp, #4]
   1533e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   15342:	4a0a      	ldr	r2, [pc, #40]	; (1536c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   15344:	9b01      	ldr	r3, [sp, #4]
   15346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1534a:	f003 0301 	and.w	r3, r3, #1
   1534e:	2b00      	cmp	r3, #0
   15350:	d106      	bne.n	15360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   15352:	4a05      	ldr	r2, [pc, #20]	; (15368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15354:	9b01      	ldr	r3, [sp, #4]
   15356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1535a:	2b00      	cmp	r3, #0
   1535c:	d100      	bne.n	15360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1535e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15360:	bf00      	nop
   15362:	b003      	add	sp, #12
   15364:	f85d fb04 	ldr.w	pc, [sp], #4
   15368:	1fff97a0 	.word	0x1fff97a0
   1536c:	1fff979c 	.word	0x1fff979c

00015370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15370:	b500      	push	{lr}
   15372:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15374:	f7eb fc3a 	bl	bec <Sys_GetCoreID>
   15378:	4603      	mov	r3, r0
   1537a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   1537c:	4a10      	ldr	r2, [pc, #64]	; (153c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   1537e:	9b01      	ldr	r3, [sp, #4]
   15380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15384:	2b00      	cmp	r3, #0
   15386:	d10d      	bne.n	153a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15388:	f7eb fb11 	bl	9ae <Port_schm_read_msr>
   1538c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1538e:	9b00      	ldr	r3, [sp, #0]
   15390:	f003 0301 	and.w	r3, r3, #1
   15394:	2b00      	cmp	r3, #0
   15396:	d100      	bne.n	1539a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15398:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1539a:	490a      	ldr	r1, [pc, #40]	; (153c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   1539c:	9b01      	ldr	r3, [sp, #4]
   1539e:	9a00      	ldr	r2, [sp, #0]
   153a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   153a4:	4a06      	ldr	r2, [pc, #24]	; (153c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   153a6:	9b01      	ldr	r3, [sp, #4]
   153a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153ac:	1c5a      	adds	r2, r3, #1
   153ae:	4904      	ldr	r1, [pc, #16]	; (153c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   153b0:	9b01      	ldr	r3, [sp, #4]
   153b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   153b6:	bf00      	nop
   153b8:	b003      	add	sp, #12
   153ba:	f85d fb04 	ldr.w	pc, [sp], #4
   153be:	bf00      	nop
   153c0:	1fff97a8 	.word	0x1fff97a8
   153c4:	1fff97a4 	.word	0x1fff97a4

000153c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   153c8:	b500      	push	{lr}
   153ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153cc:	f7eb fc0e 	bl	bec <Sys_GetCoreID>
   153d0:	4603      	mov	r3, r0
   153d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   153d4:	4a0d      	ldr	r2, [pc, #52]	; (1540c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   153d6:	9b01      	ldr	r3, [sp, #4]
   153d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153dc:	1e5a      	subs	r2, r3, #1
   153de:	490b      	ldr	r1, [pc, #44]	; (1540c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   153e0:	9b01      	ldr	r3, [sp, #4]
   153e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   153e6:	4a0a      	ldr	r2, [pc, #40]	; (15410 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   153e8:	9b01      	ldr	r3, [sp, #4]
   153ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153ee:	f003 0301 	and.w	r3, r3, #1
   153f2:	2b00      	cmp	r3, #0
   153f4:	d106      	bne.n	15404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   153f6:	4a05      	ldr	r2, [pc, #20]	; (1540c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   153f8:	9b01      	ldr	r3, [sp, #4]
   153fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153fe:	2b00      	cmp	r3, #0
   15400:	d100      	bne.n	15404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15402:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15404:	bf00      	nop
   15406:	b003      	add	sp, #12
   15408:	f85d fb04 	ldr.w	pc, [sp], #4
   1540c:	1fff97a8 	.word	0x1fff97a8
   15410:	1fff97a4 	.word	0x1fff97a4

00015414 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15414:	b500      	push	{lr}
   15416:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15418:	f7eb fbe8 	bl	bec <Sys_GetCoreID>
   1541c:	4603      	mov	r3, r0
   1541e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   15420:	4a10      	ldr	r2, [pc, #64]	; (15464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15422:	9b01      	ldr	r3, [sp, #4]
   15424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15428:	2b00      	cmp	r3, #0
   1542a:	d10d      	bne.n	15448 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1542c:	f7eb fabf 	bl	9ae <Port_schm_read_msr>
   15430:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15432:	9b00      	ldr	r3, [sp, #0]
   15434:	f003 0301 	and.w	r3, r3, #1
   15438:	2b00      	cmp	r3, #0
   1543a:	d100      	bne.n	1543e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1543c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1543e:	490a      	ldr	r1, [pc, #40]	; (15468 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   15440:	9b01      	ldr	r3, [sp, #4]
   15442:	9a00      	ldr	r2, [sp, #0]
   15444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   15448:	4a06      	ldr	r2, [pc, #24]	; (15464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   1544a:	9b01      	ldr	r3, [sp, #4]
   1544c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15450:	1c5a      	adds	r2, r3, #1
   15452:	4904      	ldr	r1, [pc, #16]	; (15464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15454:	9b01      	ldr	r3, [sp, #4]
   15456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1545a:	bf00      	nop
   1545c:	b003      	add	sp, #12
   1545e:	f85d fb04 	ldr.w	pc, [sp], #4
   15462:	bf00      	nop
   15464:	1fff97b0 	.word	0x1fff97b0
   15468:	1fff97ac 	.word	0x1fff97ac

0001546c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   1546c:	b500      	push	{lr}
   1546e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15470:	f7eb fbbc 	bl	bec <Sys_GetCoreID>
   15474:	4603      	mov	r3, r0
   15476:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   15478:	4a0d      	ldr	r2, [pc, #52]	; (154b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1547a:	9b01      	ldr	r3, [sp, #4]
   1547c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15480:	1e5a      	subs	r2, r3, #1
   15482:	490b      	ldr	r1, [pc, #44]	; (154b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15484:	9b01      	ldr	r3, [sp, #4]
   15486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1548a:	4a0a      	ldr	r2, [pc, #40]	; (154b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   1548c:	9b01      	ldr	r3, [sp, #4]
   1548e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15492:	f003 0301 	and.w	r3, r3, #1
   15496:	2b00      	cmp	r3, #0
   15498:	d106      	bne.n	154a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   1549a:	4a05      	ldr	r2, [pc, #20]	; (154b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1549c:	9b01      	ldr	r3, [sp, #4]
   1549e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154a2:	2b00      	cmp	r3, #0
   154a4:	d100      	bne.n	154a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   154a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   154a8:	bf00      	nop
   154aa:	b003      	add	sp, #12
   154ac:	f85d fb04 	ldr.w	pc, [sp], #4
   154b0:	1fff97b0 	.word	0x1fff97b0
   154b4:	1fff97ac 	.word	0x1fff97ac

000154b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   154b8:	b500      	push	{lr}
   154ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154bc:	f7eb fb96 	bl	bec <Sys_GetCoreID>
   154c0:	4603      	mov	r3, r0
   154c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   154c4:	4a10      	ldr	r2, [pc, #64]	; (15508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   154c6:	9b01      	ldr	r3, [sp, #4]
   154c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154cc:	2b00      	cmp	r3, #0
   154ce:	d10d      	bne.n	154ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   154d0:	f7eb fa6d 	bl	9ae <Port_schm_read_msr>
   154d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   154d6:	9b00      	ldr	r3, [sp, #0]
   154d8:	f003 0301 	and.w	r3, r3, #1
   154dc:	2b00      	cmp	r3, #0
   154de:	d100      	bne.n	154e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   154e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   154e2:	490a      	ldr	r1, [pc, #40]	; (1550c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   154e4:	9b01      	ldr	r3, [sp, #4]
   154e6:	9a00      	ldr	r2, [sp, #0]
   154e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   154ec:	4a06      	ldr	r2, [pc, #24]	; (15508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   154ee:	9b01      	ldr	r3, [sp, #4]
   154f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154f4:	1c5a      	adds	r2, r3, #1
   154f6:	4904      	ldr	r1, [pc, #16]	; (15508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   154f8:	9b01      	ldr	r3, [sp, #4]
   154fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   154fe:	bf00      	nop
   15500:	b003      	add	sp, #12
   15502:	f85d fb04 	ldr.w	pc, [sp], #4
   15506:	bf00      	nop
   15508:	1fff97b8 	.word	0x1fff97b8
   1550c:	1fff97b4 	.word	0x1fff97b4

00015510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   15510:	b500      	push	{lr}
   15512:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15514:	f7eb fb6a 	bl	bec <Sys_GetCoreID>
   15518:	4603      	mov	r3, r0
   1551a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   1551c:	4a0d      	ldr	r2, [pc, #52]	; (15554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   1551e:	9b01      	ldr	r3, [sp, #4]
   15520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15524:	1e5a      	subs	r2, r3, #1
   15526:	490b      	ldr	r1, [pc, #44]	; (15554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   15528:	9b01      	ldr	r3, [sp, #4]
   1552a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1552e:	4a0a      	ldr	r2, [pc, #40]	; (15558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   15530:	9b01      	ldr	r3, [sp, #4]
   15532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15536:	f003 0301 	and.w	r3, r3, #1
   1553a:	2b00      	cmp	r3, #0
   1553c:	d106      	bne.n	1554c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   1553e:	4a05      	ldr	r2, [pc, #20]	; (15554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   15540:	9b01      	ldr	r3, [sp, #4]
   15542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15546:	2b00      	cmp	r3, #0
   15548:	d100      	bne.n	1554c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1554a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1554c:	bf00      	nop
   1554e:	b003      	add	sp, #12
   15550:	f85d fb04 	ldr.w	pc, [sp], #4
   15554:	1fff97b8 	.word	0x1fff97b8
   15558:	1fff97b4 	.word	0x1fff97b4

0001555c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   1555c:	b500      	push	{lr}
   1555e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15560:	f7eb fb44 	bl	bec <Sys_GetCoreID>
   15564:	4603      	mov	r3, r0
   15566:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   15568:	4a10      	ldr	r2, [pc, #64]	; (155ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1556a:	9b01      	ldr	r3, [sp, #4]
   1556c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15570:	2b00      	cmp	r3, #0
   15572:	d10d      	bne.n	15590 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15574:	f7eb fa1b 	bl	9ae <Port_schm_read_msr>
   15578:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1557a:	9b00      	ldr	r3, [sp, #0]
   1557c:	f003 0301 	and.w	r3, r3, #1
   15580:	2b00      	cmp	r3, #0
   15582:	d100      	bne.n	15586 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15584:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   15586:	490a      	ldr	r1, [pc, #40]	; (155b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   15588:	9b01      	ldr	r3, [sp, #4]
   1558a:	9a00      	ldr	r2, [sp, #0]
   1558c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   15590:	4a06      	ldr	r2, [pc, #24]	; (155ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   15592:	9b01      	ldr	r3, [sp, #4]
   15594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15598:	1c5a      	adds	r2, r3, #1
   1559a:	4904      	ldr	r1, [pc, #16]	; (155ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1559c:	9b01      	ldr	r3, [sp, #4]
   1559e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   155a2:	bf00      	nop
   155a4:	b003      	add	sp, #12
   155a6:	f85d fb04 	ldr.w	pc, [sp], #4
   155aa:	bf00      	nop
   155ac:	1fff97c0 	.word	0x1fff97c0
   155b0:	1fff97bc 	.word	0x1fff97bc

000155b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   155b4:	b500      	push	{lr}
   155b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155b8:	f7eb fb18 	bl	bec <Sys_GetCoreID>
   155bc:	4603      	mov	r3, r0
   155be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   155c0:	4a0d      	ldr	r2, [pc, #52]	; (155f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   155c2:	9b01      	ldr	r3, [sp, #4]
   155c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155c8:	1e5a      	subs	r2, r3, #1
   155ca:	490b      	ldr	r1, [pc, #44]	; (155f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   155cc:	9b01      	ldr	r3, [sp, #4]
   155ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   155d2:	4a0a      	ldr	r2, [pc, #40]	; (155fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   155d4:	9b01      	ldr	r3, [sp, #4]
   155d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155da:	f003 0301 	and.w	r3, r3, #1
   155de:	2b00      	cmp	r3, #0
   155e0:	d106      	bne.n	155f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   155e2:	4a05      	ldr	r2, [pc, #20]	; (155f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   155e4:	9b01      	ldr	r3, [sp, #4]
   155e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155ea:	2b00      	cmp	r3, #0
   155ec:	d100      	bne.n	155f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   155ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   155f0:	bf00      	nop
   155f2:	b003      	add	sp, #12
   155f4:	f85d fb04 	ldr.w	pc, [sp], #4
   155f8:	1fff97c0 	.word	0x1fff97c0
   155fc:	1fff97bc 	.word	0x1fff97bc

00015600 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   15600:	b500      	push	{lr}
   15602:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15604:	f7eb faf2 	bl	bec <Sys_GetCoreID>
   15608:	4603      	mov	r3, r0
   1560a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   1560c:	4a10      	ldr	r2, [pc, #64]	; (15650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   1560e:	9b01      	ldr	r3, [sp, #4]
   15610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15614:	2b00      	cmp	r3, #0
   15616:	d10d      	bne.n	15634 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15618:	f7eb f9c9 	bl	9ae <Port_schm_read_msr>
   1561c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1561e:	9b00      	ldr	r3, [sp, #0]
   15620:	f003 0301 	and.w	r3, r3, #1
   15624:	2b00      	cmp	r3, #0
   15626:	d100      	bne.n	1562a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15628:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1562a:	490a      	ldr	r1, [pc, #40]	; (15654 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   1562c:	9b01      	ldr	r3, [sp, #4]
   1562e:	9a00      	ldr	r2, [sp, #0]
   15630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   15634:	4a06      	ldr	r2, [pc, #24]	; (15650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   15636:	9b01      	ldr	r3, [sp, #4]
   15638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1563c:	1c5a      	adds	r2, r3, #1
   1563e:	4904      	ldr	r1, [pc, #16]	; (15650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   15640:	9b01      	ldr	r3, [sp, #4]
   15642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15646:	bf00      	nop
   15648:	b003      	add	sp, #12
   1564a:	f85d fb04 	ldr.w	pc, [sp], #4
   1564e:	bf00      	nop
   15650:	1fff97c8 	.word	0x1fff97c8
   15654:	1fff97c4 	.word	0x1fff97c4

00015658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   15658:	b500      	push	{lr}
   1565a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1565c:	f7eb fac6 	bl	bec <Sys_GetCoreID>
   15660:	4603      	mov	r3, r0
   15662:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   15664:	4a0d      	ldr	r2, [pc, #52]	; (1569c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   15666:	9b01      	ldr	r3, [sp, #4]
   15668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1566c:	1e5a      	subs	r2, r3, #1
   1566e:	490b      	ldr	r1, [pc, #44]	; (1569c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   15670:	9b01      	ldr	r3, [sp, #4]
   15672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   15676:	4a0a      	ldr	r2, [pc, #40]	; (156a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   15678:	9b01      	ldr	r3, [sp, #4]
   1567a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1567e:	f003 0301 	and.w	r3, r3, #1
   15682:	2b00      	cmp	r3, #0
   15684:	d106      	bne.n	15694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   15686:	4a05      	ldr	r2, [pc, #20]	; (1569c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   15688:	9b01      	ldr	r3, [sp, #4]
   1568a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1568e:	2b00      	cmp	r3, #0
   15690:	d100      	bne.n	15694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15692:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15694:	bf00      	nop
   15696:	b003      	add	sp, #12
   15698:	f85d fb04 	ldr.w	pc, [sp], #4
   1569c:	1fff97c8 	.word	0x1fff97c8
   156a0:	1fff97c4 	.word	0x1fff97c4

000156a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   156a4:	b500      	push	{lr}
   156a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156a8:	f7eb faa0 	bl	bec <Sys_GetCoreID>
   156ac:	4603      	mov	r3, r0
   156ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   156b0:	4a10      	ldr	r2, [pc, #64]	; (156f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   156b2:	9b01      	ldr	r3, [sp, #4]
   156b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156b8:	2b00      	cmp	r3, #0
   156ba:	d10d      	bne.n	156d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   156bc:	f7eb f977 	bl	9ae <Port_schm_read_msr>
   156c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   156c2:	9b00      	ldr	r3, [sp, #0]
   156c4:	f003 0301 	and.w	r3, r3, #1
   156c8:	2b00      	cmp	r3, #0
   156ca:	d100      	bne.n	156ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   156cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   156ce:	490a      	ldr	r1, [pc, #40]	; (156f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   156d0:	9b01      	ldr	r3, [sp, #4]
   156d2:	9a00      	ldr	r2, [sp, #0]
   156d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   156d8:	4a06      	ldr	r2, [pc, #24]	; (156f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   156da:	9b01      	ldr	r3, [sp, #4]
   156dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156e0:	1c5a      	adds	r2, r3, #1
   156e2:	4904      	ldr	r1, [pc, #16]	; (156f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   156e4:	9b01      	ldr	r3, [sp, #4]
   156e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   156ea:	bf00      	nop
   156ec:	b003      	add	sp, #12
   156ee:	f85d fb04 	ldr.w	pc, [sp], #4
   156f2:	bf00      	nop
   156f4:	1fff97d0 	.word	0x1fff97d0
   156f8:	1fff97cc 	.word	0x1fff97cc

000156fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   156fc:	b500      	push	{lr}
   156fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15700:	f7eb fa74 	bl	bec <Sys_GetCoreID>
   15704:	4603      	mov	r3, r0
   15706:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   15708:	4a0d      	ldr	r2, [pc, #52]	; (15740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1570a:	9b01      	ldr	r3, [sp, #4]
   1570c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15710:	1e5a      	subs	r2, r3, #1
   15712:	490b      	ldr	r1, [pc, #44]	; (15740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   15714:	9b01      	ldr	r3, [sp, #4]
   15716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1571a:	4a0a      	ldr	r2, [pc, #40]	; (15744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   1571c:	9b01      	ldr	r3, [sp, #4]
   1571e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15722:	f003 0301 	and.w	r3, r3, #1
   15726:	2b00      	cmp	r3, #0
   15728:	d106      	bne.n	15738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   1572a:	4a05      	ldr	r2, [pc, #20]	; (15740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1572c:	9b01      	ldr	r3, [sp, #4]
   1572e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15732:	2b00      	cmp	r3, #0
   15734:	d100      	bne.n	15738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15736:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15738:	bf00      	nop
   1573a:	b003      	add	sp, #12
   1573c:	f85d fb04 	ldr.w	pc, [sp], #4
   15740:	1fff97d0 	.word	0x1fff97d0
   15744:	1fff97cc 	.word	0x1fff97cc

00015748 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   15748:	b500      	push	{lr}
   1574a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1574c:	f7eb fa4e 	bl	bec <Sys_GetCoreID>
   15750:	4603      	mov	r3, r0
   15752:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   15754:	4a10      	ldr	r2, [pc, #64]	; (15798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   15756:	9b01      	ldr	r3, [sp, #4]
   15758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1575c:	2b00      	cmp	r3, #0
   1575e:	d10d      	bne.n	1577c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15760:	f7eb f925 	bl	9ae <Port_schm_read_msr>
   15764:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15766:	9b00      	ldr	r3, [sp, #0]
   15768:	f003 0301 	and.w	r3, r3, #1
   1576c:	2b00      	cmp	r3, #0
   1576e:	d100      	bne.n	15772 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15770:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   15772:	490a      	ldr	r1, [pc, #40]	; (1579c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   15774:	9b01      	ldr	r3, [sp, #4]
   15776:	9a00      	ldr	r2, [sp, #0]
   15778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   1577c:	4a06      	ldr	r2, [pc, #24]	; (15798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   1577e:	9b01      	ldr	r3, [sp, #4]
   15780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15784:	1c5a      	adds	r2, r3, #1
   15786:	4904      	ldr	r1, [pc, #16]	; (15798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   15788:	9b01      	ldr	r3, [sp, #4]
   1578a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1578e:	bf00      	nop
   15790:	b003      	add	sp, #12
   15792:	f85d fb04 	ldr.w	pc, [sp], #4
   15796:	bf00      	nop
   15798:	1fff97d8 	.word	0x1fff97d8
   1579c:	1fff97d4 	.word	0x1fff97d4

000157a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   157a0:	b500      	push	{lr}
   157a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157a4:	f7eb fa22 	bl	bec <Sys_GetCoreID>
   157a8:	4603      	mov	r3, r0
   157aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   157ac:	4a0d      	ldr	r2, [pc, #52]	; (157e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   157ae:	9b01      	ldr	r3, [sp, #4]
   157b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157b4:	1e5a      	subs	r2, r3, #1
   157b6:	490b      	ldr	r1, [pc, #44]	; (157e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   157b8:	9b01      	ldr	r3, [sp, #4]
   157ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   157be:	4a0a      	ldr	r2, [pc, #40]	; (157e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   157c0:	9b01      	ldr	r3, [sp, #4]
   157c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157c6:	f003 0301 	and.w	r3, r3, #1
   157ca:	2b00      	cmp	r3, #0
   157cc:	d106      	bne.n	157dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   157ce:	4a05      	ldr	r2, [pc, #20]	; (157e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   157d0:	9b01      	ldr	r3, [sp, #4]
   157d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157d6:	2b00      	cmp	r3, #0
   157d8:	d100      	bne.n	157dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   157da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   157dc:	bf00      	nop
   157de:	b003      	add	sp, #12
   157e0:	f85d fb04 	ldr.w	pc, [sp], #4
   157e4:	1fff97d8 	.word	0x1fff97d8
   157e8:	1fff97d4 	.word	0x1fff97d4

000157ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   157ec:	b500      	push	{lr}
   157ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157f0:	f7eb f9fc 	bl	bec <Sys_GetCoreID>
   157f4:	4603      	mov	r3, r0
   157f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   157f8:	4a10      	ldr	r2, [pc, #64]	; (1583c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   157fa:	9b01      	ldr	r3, [sp, #4]
   157fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15800:	2b00      	cmp	r3, #0
   15802:	d10d      	bne.n	15820 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15804:	f7eb f8d3 	bl	9ae <Port_schm_read_msr>
   15808:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1580a:	9b00      	ldr	r3, [sp, #0]
   1580c:	f003 0301 	and.w	r3, r3, #1
   15810:	2b00      	cmp	r3, #0
   15812:	d100      	bne.n	15816 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15814:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   15816:	490a      	ldr	r1, [pc, #40]	; (15840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   15818:	9b01      	ldr	r3, [sp, #4]
   1581a:	9a00      	ldr	r2, [sp, #0]
   1581c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   15820:	4a06      	ldr	r2, [pc, #24]	; (1583c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   15822:	9b01      	ldr	r3, [sp, #4]
   15824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15828:	1c5a      	adds	r2, r3, #1
   1582a:	4904      	ldr	r1, [pc, #16]	; (1583c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1582c:	9b01      	ldr	r3, [sp, #4]
   1582e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15832:	bf00      	nop
   15834:	b003      	add	sp, #12
   15836:	f85d fb04 	ldr.w	pc, [sp], #4
   1583a:	bf00      	nop
   1583c:	1fff97e0 	.word	0x1fff97e0
   15840:	1fff97dc 	.word	0x1fff97dc

00015844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   15844:	b500      	push	{lr}
   15846:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15848:	f7eb f9d0 	bl	bec <Sys_GetCoreID>
   1584c:	4603      	mov	r3, r0
   1584e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   15850:	4a0d      	ldr	r2, [pc, #52]	; (15888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   15852:	9b01      	ldr	r3, [sp, #4]
   15854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15858:	1e5a      	subs	r2, r3, #1
   1585a:	490b      	ldr	r1, [pc, #44]	; (15888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   1585c:	9b01      	ldr	r3, [sp, #4]
   1585e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   15862:	4a0a      	ldr	r2, [pc, #40]	; (1588c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   15864:	9b01      	ldr	r3, [sp, #4]
   15866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1586a:	f003 0301 	and.w	r3, r3, #1
   1586e:	2b00      	cmp	r3, #0
   15870:	d106      	bne.n	15880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   15872:	4a05      	ldr	r2, [pc, #20]	; (15888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   15874:	9b01      	ldr	r3, [sp, #4]
   15876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1587a:	2b00      	cmp	r3, #0
   1587c:	d100      	bne.n	15880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1587e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15880:	bf00      	nop
   15882:	b003      	add	sp, #12
   15884:	f85d fb04 	ldr.w	pc, [sp], #4
   15888:	1fff97e0 	.word	0x1fff97e0
   1588c:	1fff97dc 	.word	0x1fff97dc

00015890 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   15890:	b500      	push	{lr}
   15892:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15894:	f7eb f9aa 	bl	bec <Sys_GetCoreID>
   15898:	4603      	mov	r3, r0
   1589a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   1589c:	4a10      	ldr	r2, [pc, #64]	; (158e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1589e:	9b01      	ldr	r3, [sp, #4]
   158a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158a4:	2b00      	cmp	r3, #0
   158a6:	d10d      	bne.n	158c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   158a8:	f7eb f881 	bl	9ae <Port_schm_read_msr>
   158ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   158ae:	9b00      	ldr	r3, [sp, #0]
   158b0:	f003 0301 	and.w	r3, r3, #1
   158b4:	2b00      	cmp	r3, #0
   158b6:	d100      	bne.n	158ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   158b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   158ba:	490a      	ldr	r1, [pc, #40]	; (158e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   158bc:	9b01      	ldr	r3, [sp, #4]
   158be:	9a00      	ldr	r2, [sp, #0]
   158c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   158c4:	4a06      	ldr	r2, [pc, #24]	; (158e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   158c6:	9b01      	ldr	r3, [sp, #4]
   158c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158cc:	1c5a      	adds	r2, r3, #1
   158ce:	4904      	ldr	r1, [pc, #16]	; (158e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   158d0:	9b01      	ldr	r3, [sp, #4]
   158d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   158d6:	bf00      	nop
   158d8:	b003      	add	sp, #12
   158da:	f85d fb04 	ldr.w	pc, [sp], #4
   158de:	bf00      	nop
   158e0:	1fff97e8 	.word	0x1fff97e8
   158e4:	1fff97e4 	.word	0x1fff97e4

000158e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   158e8:	b500      	push	{lr}
   158ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158ec:	f7eb f97e 	bl	bec <Sys_GetCoreID>
   158f0:	4603      	mov	r3, r0
   158f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   158f4:	4a0d      	ldr	r2, [pc, #52]	; (1592c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   158f6:	9b01      	ldr	r3, [sp, #4]
   158f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158fc:	1e5a      	subs	r2, r3, #1
   158fe:	490b      	ldr	r1, [pc, #44]	; (1592c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   15900:	9b01      	ldr	r3, [sp, #4]
   15902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   15906:	4a0a      	ldr	r2, [pc, #40]	; (15930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   15908:	9b01      	ldr	r3, [sp, #4]
   1590a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1590e:	f003 0301 	and.w	r3, r3, #1
   15912:	2b00      	cmp	r3, #0
   15914:	d106      	bne.n	15924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   15916:	4a05      	ldr	r2, [pc, #20]	; (1592c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   15918:	9b01      	ldr	r3, [sp, #4]
   1591a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1591e:	2b00      	cmp	r3, #0
   15920:	d100      	bne.n	15924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15922:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15924:	bf00      	nop
   15926:	b003      	add	sp, #12
   15928:	f85d fb04 	ldr.w	pc, [sp], #4
   1592c:	1fff97e8 	.word	0x1fff97e8
   15930:	1fff97e4 	.word	0x1fff97e4

00015934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   15934:	b500      	push	{lr}
   15936:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15938:	f7eb f958 	bl	bec <Sys_GetCoreID>
   1593c:	4603      	mov	r3, r0
   1593e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   15940:	4a10      	ldr	r2, [pc, #64]	; (15984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   15942:	9b01      	ldr	r3, [sp, #4]
   15944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15948:	2b00      	cmp	r3, #0
   1594a:	d10d      	bne.n	15968 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1594c:	f7eb f82f 	bl	9ae <Port_schm_read_msr>
   15950:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15952:	9b00      	ldr	r3, [sp, #0]
   15954:	f003 0301 	and.w	r3, r3, #1
   15958:	2b00      	cmp	r3, #0
   1595a:	d100      	bne.n	1595e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1595c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   1595e:	490a      	ldr	r1, [pc, #40]	; (15988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   15960:	9b01      	ldr	r3, [sp, #4]
   15962:	9a00      	ldr	r2, [sp, #0]
   15964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   15968:	4a06      	ldr	r2, [pc, #24]	; (15984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   1596a:	9b01      	ldr	r3, [sp, #4]
   1596c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15970:	1c5a      	adds	r2, r3, #1
   15972:	4904      	ldr	r1, [pc, #16]	; (15984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   15974:	9b01      	ldr	r3, [sp, #4]
   15976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1597a:	bf00      	nop
   1597c:	b003      	add	sp, #12
   1597e:	f85d fb04 	ldr.w	pc, [sp], #4
   15982:	bf00      	nop
   15984:	1fff97f0 	.word	0x1fff97f0
   15988:	1fff97ec 	.word	0x1fff97ec

0001598c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   1598c:	b500      	push	{lr}
   1598e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15990:	f7eb f92c 	bl	bec <Sys_GetCoreID>
   15994:	4603      	mov	r3, r0
   15996:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   15998:	4a0d      	ldr	r2, [pc, #52]	; (159d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1599a:	9b01      	ldr	r3, [sp, #4]
   1599c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159a0:	1e5a      	subs	r2, r3, #1
   159a2:	490b      	ldr	r1, [pc, #44]	; (159d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   159a4:	9b01      	ldr	r3, [sp, #4]
   159a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   159aa:	4a0a      	ldr	r2, [pc, #40]	; (159d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   159ac:	9b01      	ldr	r3, [sp, #4]
   159ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159b2:	f003 0301 	and.w	r3, r3, #1
   159b6:	2b00      	cmp	r3, #0
   159b8:	d106      	bne.n	159c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   159ba:	4a05      	ldr	r2, [pc, #20]	; (159d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   159bc:	9b01      	ldr	r3, [sp, #4]
   159be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159c2:	2b00      	cmp	r3, #0
   159c4:	d100      	bne.n	159c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   159c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   159c8:	bf00      	nop
   159ca:	b003      	add	sp, #12
   159cc:	f85d fb04 	ldr.w	pc, [sp], #4
   159d0:	1fff97f0 	.word	0x1fff97f0
   159d4:	1fff97ec 	.word	0x1fff97ec

000159d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   159d8:	b500      	push	{lr}
   159da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159dc:	f7eb f906 	bl	bec <Sys_GetCoreID>
   159e0:	4603      	mov	r3, r0
   159e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   159e4:	4a10      	ldr	r2, [pc, #64]	; (15a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   159e6:	9b01      	ldr	r3, [sp, #4]
   159e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159ec:	2b00      	cmp	r3, #0
   159ee:	d10d      	bne.n	15a0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   159f0:	f7ea ffdd 	bl	9ae <Port_schm_read_msr>
   159f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   159f6:	9b00      	ldr	r3, [sp, #0]
   159f8:	f003 0301 	and.w	r3, r3, #1
   159fc:	2b00      	cmp	r3, #0
   159fe:	d100      	bne.n	15a02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   15a02:	490a      	ldr	r1, [pc, #40]	; (15a2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   15a04:	9b01      	ldr	r3, [sp, #4]
   15a06:	9a00      	ldr	r2, [sp, #0]
   15a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   15a0c:	4a06      	ldr	r2, [pc, #24]	; (15a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15a0e:	9b01      	ldr	r3, [sp, #4]
   15a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a14:	1c5a      	adds	r2, r3, #1
   15a16:	4904      	ldr	r1, [pc, #16]	; (15a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15a18:	9b01      	ldr	r3, [sp, #4]
   15a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a1e:	bf00      	nop
   15a20:	b003      	add	sp, #12
   15a22:	f85d fb04 	ldr.w	pc, [sp], #4
   15a26:	bf00      	nop
   15a28:	1fff97f8 	.word	0x1fff97f8
   15a2c:	1fff97f4 	.word	0x1fff97f4

00015a30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   15a30:	b500      	push	{lr}
   15a32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a34:	f7eb f8da 	bl	bec <Sys_GetCoreID>
   15a38:	4603      	mov	r3, r0
   15a3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   15a3c:	4a0d      	ldr	r2, [pc, #52]	; (15a74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15a3e:	9b01      	ldr	r3, [sp, #4]
   15a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a44:	1e5a      	subs	r2, r3, #1
   15a46:	490b      	ldr	r1, [pc, #44]	; (15a74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15a48:	9b01      	ldr	r3, [sp, #4]
   15a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   15a4e:	4a0a      	ldr	r2, [pc, #40]	; (15a78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   15a50:	9b01      	ldr	r3, [sp, #4]
   15a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a56:	f003 0301 	and.w	r3, r3, #1
   15a5a:	2b00      	cmp	r3, #0
   15a5c:	d106      	bne.n	15a6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   15a5e:	4a05      	ldr	r2, [pc, #20]	; (15a74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15a60:	9b01      	ldr	r3, [sp, #4]
   15a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a66:	2b00      	cmp	r3, #0
   15a68:	d100      	bne.n	15a6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a6c:	bf00      	nop
   15a6e:	b003      	add	sp, #12
   15a70:	f85d fb04 	ldr.w	pc, [sp], #4
   15a74:	1fff97f8 	.word	0x1fff97f8
   15a78:	1fff97f4 	.word	0x1fff97f4

00015a7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15a7c:	b500      	push	{lr}
   15a7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a80:	f7eb f8b4 	bl	bec <Sys_GetCoreID>
   15a84:	4603      	mov	r3, r0
   15a86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   15a88:	4a10      	ldr	r2, [pc, #64]	; (15acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15a8a:	9b01      	ldr	r3, [sp, #4]
   15a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a90:	2b00      	cmp	r3, #0
   15a92:	d10d      	bne.n	15ab0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a94:	f7ea ff8b 	bl	9ae <Port_schm_read_msr>
   15a98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a9a:	9b00      	ldr	r3, [sp, #0]
   15a9c:	f003 0301 	and.w	r3, r3, #1
   15aa0:	2b00      	cmp	r3, #0
   15aa2:	d100      	bne.n	15aa6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15aa4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   15aa6:	490a      	ldr	r1, [pc, #40]	; (15ad0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   15aa8:	9b01      	ldr	r3, [sp, #4]
   15aaa:	9a00      	ldr	r2, [sp, #0]
   15aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   15ab0:	4a06      	ldr	r2, [pc, #24]	; (15acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15ab2:	9b01      	ldr	r3, [sp, #4]
   15ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ab8:	1c5a      	adds	r2, r3, #1
   15aba:	4904      	ldr	r1, [pc, #16]	; (15acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15abc:	9b01      	ldr	r3, [sp, #4]
   15abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15ac2:	bf00      	nop
   15ac4:	b003      	add	sp, #12
   15ac6:	f85d fb04 	ldr.w	pc, [sp], #4
   15aca:	bf00      	nop
   15acc:	1fff9800 	.word	0x1fff9800
   15ad0:	1fff97fc 	.word	0x1fff97fc

00015ad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15ad4:	b500      	push	{lr}
   15ad6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ad8:	f7eb f888 	bl	bec <Sys_GetCoreID>
   15adc:	4603      	mov	r3, r0
   15ade:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   15ae0:	4a0d      	ldr	r2, [pc, #52]	; (15b18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15ae2:	9b01      	ldr	r3, [sp, #4]
   15ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ae8:	1e5a      	subs	r2, r3, #1
   15aea:	490b      	ldr	r1, [pc, #44]	; (15b18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15aec:	9b01      	ldr	r3, [sp, #4]
   15aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   15af2:	4a0a      	ldr	r2, [pc, #40]	; (15b1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   15af4:	9b01      	ldr	r3, [sp, #4]
   15af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15afa:	f003 0301 	and.w	r3, r3, #1
   15afe:	2b00      	cmp	r3, #0
   15b00:	d106      	bne.n	15b10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   15b02:	4a05      	ldr	r2, [pc, #20]	; (15b18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15b04:	9b01      	ldr	r3, [sp, #4]
   15b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b0a:	2b00      	cmp	r3, #0
   15b0c:	d100      	bne.n	15b10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15b0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15b10:	bf00      	nop
   15b12:	b003      	add	sp, #12
   15b14:	f85d fb04 	ldr.w	pc, [sp], #4
   15b18:	1fff9800 	.word	0x1fff9800
   15b1c:	1fff97fc 	.word	0x1fff97fc

00015b20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15b20:	b500      	push	{lr}
   15b22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b24:	f7eb f862 	bl	bec <Sys_GetCoreID>
   15b28:	4603      	mov	r3, r0
   15b2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   15b2c:	4a10      	ldr	r2, [pc, #64]	; (15b70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15b2e:	9b01      	ldr	r3, [sp, #4]
   15b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b34:	2b00      	cmp	r3, #0
   15b36:	d10d      	bne.n	15b54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15b38:	f7ea ff39 	bl	9ae <Port_schm_read_msr>
   15b3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15b3e:	9b00      	ldr	r3, [sp, #0]
   15b40:	f003 0301 	and.w	r3, r3, #1
   15b44:	2b00      	cmp	r3, #0
   15b46:	d100      	bne.n	15b4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15b48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   15b4a:	490a      	ldr	r1, [pc, #40]	; (15b74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   15b4c:	9b01      	ldr	r3, [sp, #4]
   15b4e:	9a00      	ldr	r2, [sp, #0]
   15b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   15b54:	4a06      	ldr	r2, [pc, #24]	; (15b70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15b56:	9b01      	ldr	r3, [sp, #4]
   15b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b5c:	1c5a      	adds	r2, r3, #1
   15b5e:	4904      	ldr	r1, [pc, #16]	; (15b70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15b60:	9b01      	ldr	r3, [sp, #4]
   15b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15b66:	bf00      	nop
   15b68:	b003      	add	sp, #12
   15b6a:	f85d fb04 	ldr.w	pc, [sp], #4
   15b6e:	bf00      	nop
   15b70:	1fff9808 	.word	0x1fff9808
   15b74:	1fff9804 	.word	0x1fff9804

00015b78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15b78:	b500      	push	{lr}
   15b7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b7c:	f7eb f836 	bl	bec <Sys_GetCoreID>
   15b80:	4603      	mov	r3, r0
   15b82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   15b84:	4a0d      	ldr	r2, [pc, #52]	; (15bbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15b86:	9b01      	ldr	r3, [sp, #4]
   15b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b8c:	1e5a      	subs	r2, r3, #1
   15b8e:	490b      	ldr	r1, [pc, #44]	; (15bbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15b90:	9b01      	ldr	r3, [sp, #4]
   15b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   15b96:	4a0a      	ldr	r2, [pc, #40]	; (15bc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   15b98:	9b01      	ldr	r3, [sp, #4]
   15b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b9e:	f003 0301 	and.w	r3, r3, #1
   15ba2:	2b00      	cmp	r3, #0
   15ba4:	d106      	bne.n	15bb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   15ba6:	4a05      	ldr	r2, [pc, #20]	; (15bbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15ba8:	9b01      	ldr	r3, [sp, #4]
   15baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bae:	2b00      	cmp	r3, #0
   15bb0:	d100      	bne.n	15bb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15bb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15bb4:	bf00      	nop
   15bb6:	b003      	add	sp, #12
   15bb8:	f85d fb04 	ldr.w	pc, [sp], #4
   15bbc:	1fff9808 	.word	0x1fff9808
   15bc0:	1fff9804 	.word	0x1fff9804

00015bc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15bc4:	b500      	push	{lr}
   15bc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15bc8:	f7eb f810 	bl	bec <Sys_GetCoreID>
   15bcc:	4603      	mov	r3, r0
   15bce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   15bd0:	4a10      	ldr	r2, [pc, #64]	; (15c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15bd2:	9b01      	ldr	r3, [sp, #4]
   15bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bd8:	2b00      	cmp	r3, #0
   15bda:	d10d      	bne.n	15bf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15bdc:	f7ea fee7 	bl	9ae <Port_schm_read_msr>
   15be0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15be2:	9b00      	ldr	r3, [sp, #0]
   15be4:	f003 0301 	and.w	r3, r3, #1
   15be8:	2b00      	cmp	r3, #0
   15bea:	d100      	bne.n	15bee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15bec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   15bee:	490a      	ldr	r1, [pc, #40]	; (15c18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   15bf0:	9b01      	ldr	r3, [sp, #4]
   15bf2:	9a00      	ldr	r2, [sp, #0]
   15bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   15bf8:	4a06      	ldr	r2, [pc, #24]	; (15c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15bfa:	9b01      	ldr	r3, [sp, #4]
   15bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c00:	1c5a      	adds	r2, r3, #1
   15c02:	4904      	ldr	r1, [pc, #16]	; (15c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15c04:	9b01      	ldr	r3, [sp, #4]
   15c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15c0a:	bf00      	nop
   15c0c:	b003      	add	sp, #12
   15c0e:	f85d fb04 	ldr.w	pc, [sp], #4
   15c12:	bf00      	nop
   15c14:	1fff9810 	.word	0x1fff9810
   15c18:	1fff980c 	.word	0x1fff980c

00015c1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15c1c:	b500      	push	{lr}
   15c1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c20:	f7ea ffe4 	bl	bec <Sys_GetCoreID>
   15c24:	4603      	mov	r3, r0
   15c26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   15c28:	4a0d      	ldr	r2, [pc, #52]	; (15c60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15c2a:	9b01      	ldr	r3, [sp, #4]
   15c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c30:	1e5a      	subs	r2, r3, #1
   15c32:	490b      	ldr	r1, [pc, #44]	; (15c60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15c34:	9b01      	ldr	r3, [sp, #4]
   15c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   15c3a:	4a0a      	ldr	r2, [pc, #40]	; (15c64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   15c3c:	9b01      	ldr	r3, [sp, #4]
   15c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c42:	f003 0301 	and.w	r3, r3, #1
   15c46:	2b00      	cmp	r3, #0
   15c48:	d106      	bne.n	15c58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   15c4a:	4a05      	ldr	r2, [pc, #20]	; (15c60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15c4c:	9b01      	ldr	r3, [sp, #4]
   15c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c52:	2b00      	cmp	r3, #0
   15c54:	d100      	bne.n	15c58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15c56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15c58:	bf00      	nop
   15c5a:	b003      	add	sp, #12
   15c5c:	f85d fb04 	ldr.w	pc, [sp], #4
   15c60:	1fff9810 	.word	0x1fff9810
   15c64:	1fff980c 	.word	0x1fff980c

00015c68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15c68:	b500      	push	{lr}
   15c6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c6c:	f7ea ffbe 	bl	bec <Sys_GetCoreID>
   15c70:	4603      	mov	r3, r0
   15c72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   15c74:	4a10      	ldr	r2, [pc, #64]	; (15cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15c76:	9b01      	ldr	r3, [sp, #4]
   15c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c7c:	2b00      	cmp	r3, #0
   15c7e:	d10d      	bne.n	15c9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15c80:	f7ea fe95 	bl	9ae <Port_schm_read_msr>
   15c84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15c86:	9b00      	ldr	r3, [sp, #0]
   15c88:	f003 0301 	and.w	r3, r3, #1
   15c8c:	2b00      	cmp	r3, #0
   15c8e:	d100      	bne.n	15c92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15c90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   15c92:	490a      	ldr	r1, [pc, #40]	; (15cbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   15c94:	9b01      	ldr	r3, [sp, #4]
   15c96:	9a00      	ldr	r2, [sp, #0]
   15c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   15c9c:	4a06      	ldr	r2, [pc, #24]	; (15cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15c9e:	9b01      	ldr	r3, [sp, #4]
   15ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ca4:	1c5a      	adds	r2, r3, #1
   15ca6:	4904      	ldr	r1, [pc, #16]	; (15cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15ca8:	9b01      	ldr	r3, [sp, #4]
   15caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15cae:	bf00      	nop
   15cb0:	b003      	add	sp, #12
   15cb2:	f85d fb04 	ldr.w	pc, [sp], #4
   15cb6:	bf00      	nop
   15cb8:	1fff9818 	.word	0x1fff9818
   15cbc:	1fff9814 	.word	0x1fff9814

00015cc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15cc0:	b500      	push	{lr}
   15cc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15cc4:	f7ea ff92 	bl	bec <Sys_GetCoreID>
   15cc8:	4603      	mov	r3, r0
   15cca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   15ccc:	4a0d      	ldr	r2, [pc, #52]	; (15d04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15cce:	9b01      	ldr	r3, [sp, #4]
   15cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cd4:	1e5a      	subs	r2, r3, #1
   15cd6:	490b      	ldr	r1, [pc, #44]	; (15d04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15cd8:	9b01      	ldr	r3, [sp, #4]
   15cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   15cde:	4a0a      	ldr	r2, [pc, #40]	; (15d08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   15ce0:	9b01      	ldr	r3, [sp, #4]
   15ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ce6:	f003 0301 	and.w	r3, r3, #1
   15cea:	2b00      	cmp	r3, #0
   15cec:	d106      	bne.n	15cfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   15cee:	4a05      	ldr	r2, [pc, #20]	; (15d04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15cf0:	9b01      	ldr	r3, [sp, #4]
   15cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cf6:	2b00      	cmp	r3, #0
   15cf8:	d100      	bne.n	15cfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15cfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15cfc:	bf00      	nop
   15cfe:	b003      	add	sp, #12
   15d00:	f85d fb04 	ldr.w	pc, [sp], #4
   15d04:	1fff9818 	.word	0x1fff9818
   15d08:	1fff9814 	.word	0x1fff9814

00015d0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15d0c:	b500      	push	{lr}
   15d0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d10:	f7ea ff6c 	bl	bec <Sys_GetCoreID>
   15d14:	4603      	mov	r3, r0
   15d16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   15d18:	4a10      	ldr	r2, [pc, #64]	; (15d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15d1a:	9b01      	ldr	r3, [sp, #4]
   15d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d20:	2b00      	cmp	r3, #0
   15d22:	d10d      	bne.n	15d40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15d24:	f7ea fe43 	bl	9ae <Port_schm_read_msr>
   15d28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15d2a:	9b00      	ldr	r3, [sp, #0]
   15d2c:	f003 0301 	and.w	r3, r3, #1
   15d30:	2b00      	cmp	r3, #0
   15d32:	d100      	bne.n	15d36 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15d34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   15d36:	490a      	ldr	r1, [pc, #40]	; (15d60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   15d38:	9b01      	ldr	r3, [sp, #4]
   15d3a:	9a00      	ldr	r2, [sp, #0]
   15d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   15d40:	4a06      	ldr	r2, [pc, #24]	; (15d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15d42:	9b01      	ldr	r3, [sp, #4]
   15d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d48:	1c5a      	adds	r2, r3, #1
   15d4a:	4904      	ldr	r1, [pc, #16]	; (15d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15d4c:	9b01      	ldr	r3, [sp, #4]
   15d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15d52:	bf00      	nop
   15d54:	b003      	add	sp, #12
   15d56:	f85d fb04 	ldr.w	pc, [sp], #4
   15d5a:	bf00      	nop
   15d5c:	1fff9820 	.word	0x1fff9820
   15d60:	1fff981c 	.word	0x1fff981c

00015d64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15d64:	b500      	push	{lr}
   15d66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d68:	f7ea ff40 	bl	bec <Sys_GetCoreID>
   15d6c:	4603      	mov	r3, r0
   15d6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   15d70:	4a0d      	ldr	r2, [pc, #52]	; (15da8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15d72:	9b01      	ldr	r3, [sp, #4]
   15d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d78:	1e5a      	subs	r2, r3, #1
   15d7a:	490b      	ldr	r1, [pc, #44]	; (15da8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15d7c:	9b01      	ldr	r3, [sp, #4]
   15d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   15d82:	4a0a      	ldr	r2, [pc, #40]	; (15dac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   15d84:	9b01      	ldr	r3, [sp, #4]
   15d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d8a:	f003 0301 	and.w	r3, r3, #1
   15d8e:	2b00      	cmp	r3, #0
   15d90:	d106      	bne.n	15da0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   15d92:	4a05      	ldr	r2, [pc, #20]	; (15da8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15d94:	9b01      	ldr	r3, [sp, #4]
   15d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d9a:	2b00      	cmp	r3, #0
   15d9c:	d100      	bne.n	15da0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15d9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15da0:	bf00      	nop
   15da2:	b003      	add	sp, #12
   15da4:	f85d fb04 	ldr.w	pc, [sp], #4
   15da8:	1fff9820 	.word	0x1fff9820
   15dac:	1fff981c 	.word	0x1fff981c

00015db0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15db0:	b500      	push	{lr}
   15db2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15db4:	f7ea ff1a 	bl	bec <Sys_GetCoreID>
   15db8:	4603      	mov	r3, r0
   15dba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId])
   15dbc:	4a10      	ldr	r2, [pc, #64]	; (15e00 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15dbe:	9b01      	ldr	r3, [sp, #4]
   15dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dc4:	2b00      	cmp	r3, #0
   15dc6:	d10d      	bne.n	15de4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15dc8:	f7ea fdfa 	bl	9c0 <Spi_schm_read_msr>
   15dcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15dce:	9b00      	ldr	r3, [sp, #0]
   15dd0:	f003 0301 	and.w	r3, r3, #1
   15dd4:	2b00      	cmp	r3, #0
   15dd6:	d100      	bne.n	15dda <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15dd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   15dda:	490a      	ldr	r1, [pc, #40]	; (15e04 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x54>)
   15ddc:	9b01      	ldr	r3, [sp, #4]
   15dde:	9a00      	ldr	r2, [sp, #0]
   15de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]++;
   15de4:	4a06      	ldr	r2, [pc, #24]	; (15e00 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15de6:	9b01      	ldr	r3, [sp, #4]
   15de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dec:	1c5a      	adds	r2, r3, #1
   15dee:	4904      	ldr	r1, [pc, #16]	; (15e00 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15df0:	9b01      	ldr	r3, [sp, #4]
   15df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15df6:	bf00      	nop
   15df8:	b003      	add	sp, #12
   15dfa:	f85d fb04 	ldr.w	pc, [sp], #4
   15dfe:	bf00      	nop
   15e00:	1fff9828 	.word	0x1fff9828
   15e04:	1fff9824 	.word	0x1fff9824

00015e08 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15e08:	b500      	push	{lr}
   15e0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e0c:	f7ea feee 	bl	bec <Sys_GetCoreID>
   15e10:	4603      	mov	r3, r0
   15e12:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]--;
   15e14:	4a0d      	ldr	r2, [pc, #52]	; (15e4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15e16:	9b01      	ldr	r3, [sp, #4]
   15e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e1c:	1e5a      	subs	r2, r3, #1
   15e1e:	490b      	ldr	r1, [pc, #44]	; (15e4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15e20:	9b01      	ldr	r3, [sp, #4]
   15e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   15e26:	4a0a      	ldr	r2, [pc, #40]	; (15e50 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x48>)
   15e28:	9b01      	ldr	r3, [sp, #4]
   15e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e2e:	f003 0301 	and.w	r3, r3, #1
   15e32:	2b00      	cmp	r3, #0
   15e34:	d106      	bne.n	15e44 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
   15e36:	4a05      	ldr	r2, [pc, #20]	; (15e4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15e38:	9b01      	ldr	r3, [sp, #4]
   15e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e3e:	2b00      	cmp	r3, #0
   15e40:	d100      	bne.n	15e44 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15e42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15e44:	bf00      	nop
   15e46:	b003      	add	sp, #12
   15e48:	f85d fb04 	ldr.w	pc, [sp], #4
   15e4c:	1fff9828 	.word	0x1fff9828
   15e50:	1fff9824 	.word	0x1fff9824

00015e54 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15e54:	b500      	push	{lr}
   15e56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e58:	f7ea fec8 	bl	bec <Sys_GetCoreID>
   15e5c:	4603      	mov	r3, r0
   15e5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId])
   15e60:	4a10      	ldr	r2, [pc, #64]	; (15ea4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15e62:	9b01      	ldr	r3, [sp, #4]
   15e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e68:	2b00      	cmp	r3, #0
   15e6a:	d10d      	bne.n	15e88 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15e6c:	f7ea fda8 	bl	9c0 <Spi_schm_read_msr>
   15e70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15e72:	9b00      	ldr	r3, [sp, #0]
   15e74:	f003 0301 	and.w	r3, r3, #1
   15e78:	2b00      	cmp	r3, #0
   15e7a:	d100      	bne.n	15e7e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15e7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   15e7e:	490a      	ldr	r1, [pc, #40]	; (15ea8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x54>)
   15e80:	9b01      	ldr	r3, [sp, #4]
   15e82:	9a00      	ldr	r2, [sp, #0]
   15e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]++;
   15e88:	4a06      	ldr	r2, [pc, #24]	; (15ea4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15e8a:	9b01      	ldr	r3, [sp, #4]
   15e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e90:	1c5a      	adds	r2, r3, #1
   15e92:	4904      	ldr	r1, [pc, #16]	; (15ea4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15e94:	9b01      	ldr	r3, [sp, #4]
   15e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15e9a:	bf00      	nop
   15e9c:	b003      	add	sp, #12
   15e9e:	f85d fb04 	ldr.w	pc, [sp], #4
   15ea2:	bf00      	nop
   15ea4:	1fff9830 	.word	0x1fff9830
   15ea8:	1fff982c 	.word	0x1fff982c

00015eac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15eac:	b500      	push	{lr}
   15eae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15eb0:	f7ea fe9c 	bl	bec <Sys_GetCoreID>
   15eb4:	4603      	mov	r3, r0
   15eb6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]--;
   15eb8:	4a0d      	ldr	r2, [pc, #52]	; (15ef0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15eba:	9b01      	ldr	r3, [sp, #4]
   15ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ec0:	1e5a      	subs	r2, r3, #1
   15ec2:	490b      	ldr	r1, [pc, #44]	; (15ef0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15ec4:	9b01      	ldr	r3, [sp, #4]
   15ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   15eca:	4a0a      	ldr	r2, [pc, #40]	; (15ef4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x48>)
   15ecc:	9b01      	ldr	r3, [sp, #4]
   15ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ed2:	f003 0301 	and.w	r3, r3, #1
   15ed6:	2b00      	cmp	r3, #0
   15ed8:	d106      	bne.n	15ee8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
   15eda:	4a05      	ldr	r2, [pc, #20]	; (15ef0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15edc:	9b01      	ldr	r3, [sp, #4]
   15ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ee2:	2b00      	cmp	r3, #0
   15ee4:	d100      	bne.n	15ee8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15ee6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15ee8:	bf00      	nop
   15eea:	b003      	add	sp, #12
   15eec:	f85d fb04 	ldr.w	pc, [sp], #4
   15ef0:	1fff9830 	.word	0x1fff9830
   15ef4:	1fff982c 	.word	0x1fff982c

00015ef8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   15ef8:	b500      	push	{lr}
   15efa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15efc:	f7ea fe76 	bl	bec <Sys_GetCoreID>
   15f00:	4603      	mov	r3, r0
   15f02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId])
   15f04:	4a10      	ldr	r2, [pc, #64]	; (15f48 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15f06:	9b01      	ldr	r3, [sp, #4]
   15f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f0c:	2b00      	cmp	r3, #0
   15f0e:	d10d      	bne.n	15f2c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15f10:	f7ea fd56 	bl	9c0 <Spi_schm_read_msr>
   15f14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15f16:	9b00      	ldr	r3, [sp, #0]
   15f18:	f003 0301 	and.w	r3, r3, #1
   15f1c:	2b00      	cmp	r3, #0
   15f1e:	d100      	bne.n	15f22 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15f20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   15f22:	490a      	ldr	r1, [pc, #40]	; (15f4c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x54>)
   15f24:	9b01      	ldr	r3, [sp, #4]
   15f26:	9a00      	ldr	r2, [sp, #0]
   15f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]++;
   15f2c:	4a06      	ldr	r2, [pc, #24]	; (15f48 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15f2e:	9b01      	ldr	r3, [sp, #4]
   15f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f34:	1c5a      	adds	r2, r3, #1
   15f36:	4904      	ldr	r1, [pc, #16]	; (15f48 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15f38:	9b01      	ldr	r3, [sp, #4]
   15f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15f3e:	bf00      	nop
   15f40:	b003      	add	sp, #12
   15f42:	f85d fb04 	ldr.w	pc, [sp], #4
   15f46:	bf00      	nop
   15f48:	1fff9838 	.word	0x1fff9838
   15f4c:	1fff9834 	.word	0x1fff9834

00015f50 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   15f50:	b500      	push	{lr}
   15f52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f54:	f7ea fe4a 	bl	bec <Sys_GetCoreID>
   15f58:	4603      	mov	r3, r0
   15f5a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]--;
   15f5c:	4a0d      	ldr	r2, [pc, #52]	; (15f94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15f5e:	9b01      	ldr	r3, [sp, #4]
   15f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f64:	1e5a      	subs	r2, r3, #1
   15f66:	490b      	ldr	r1, [pc, #44]	; (15f94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15f68:	9b01      	ldr	r3, [sp, #4]
   15f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   15f6e:	4a0a      	ldr	r2, [pc, #40]	; (15f98 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x48>)
   15f70:	9b01      	ldr	r3, [sp, #4]
   15f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f76:	f003 0301 	and.w	r3, r3, #1
   15f7a:	2b00      	cmp	r3, #0
   15f7c:	d106      	bne.n	15f8c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
   15f7e:	4a05      	ldr	r2, [pc, #20]	; (15f94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15f80:	9b01      	ldr	r3, [sp, #4]
   15f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f86:	2b00      	cmp	r3, #0
   15f88:	d100      	bne.n	15f8c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15f8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15f8c:	bf00      	nop
   15f8e:	b003      	add	sp, #12
   15f90:	f85d fb04 	ldr.w	pc, [sp], #4
   15f94:	1fff9838 	.word	0x1fff9838
   15f98:	1fff9834 	.word	0x1fff9834

00015f9c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   15f9c:	b500      	push	{lr}
   15f9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15fa0:	f7ea fe24 	bl	bec <Sys_GetCoreID>
   15fa4:	4603      	mov	r3, r0
   15fa6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId])
   15fa8:	4a10      	ldr	r2, [pc, #64]	; (15fec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   15faa:	9b01      	ldr	r3, [sp, #4]
   15fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fb0:	2b00      	cmp	r3, #0
   15fb2:	d10d      	bne.n	15fd0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15fb4:	f7ea fd04 	bl	9c0 <Spi_schm_read_msr>
   15fb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15fba:	9b00      	ldr	r3, [sp, #0]
   15fbc:	f003 0301 	and.w	r3, r3, #1
   15fc0:	2b00      	cmp	r3, #0
   15fc2:	d100      	bne.n	15fc6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15fc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   15fc6:	490a      	ldr	r1, [pc, #40]	; (15ff0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x54>)
   15fc8:	9b01      	ldr	r3, [sp, #4]
   15fca:	9a00      	ldr	r2, [sp, #0]
   15fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]++;
   15fd0:	4a06      	ldr	r2, [pc, #24]	; (15fec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   15fd2:	9b01      	ldr	r3, [sp, #4]
   15fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fd8:	1c5a      	adds	r2, r3, #1
   15fda:	4904      	ldr	r1, [pc, #16]	; (15fec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   15fdc:	9b01      	ldr	r3, [sp, #4]
   15fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15fe2:	bf00      	nop
   15fe4:	b003      	add	sp, #12
   15fe6:	f85d fb04 	ldr.w	pc, [sp], #4
   15fea:	bf00      	nop
   15fec:	1fff9840 	.word	0x1fff9840
   15ff0:	1fff983c 	.word	0x1fff983c

00015ff4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   15ff4:	b500      	push	{lr}
   15ff6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ff8:	f7ea fdf8 	bl	bec <Sys_GetCoreID>
   15ffc:	4603      	mov	r3, r0
   15ffe:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]--;
   16000:	4a0d      	ldr	r2, [pc, #52]	; (16038 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   16002:	9b01      	ldr	r3, [sp, #4]
   16004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16008:	1e5a      	subs	r2, r3, #1
   1600a:	490b      	ldr	r1, [pc, #44]	; (16038 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   1600c:	9b01      	ldr	r3, [sp, #4]
   1600e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   16012:	4a0a      	ldr	r2, [pc, #40]	; (1603c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x48>)
   16014:	9b01      	ldr	r3, [sp, #4]
   16016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1601a:	f003 0301 	and.w	r3, r3, #1
   1601e:	2b00      	cmp	r3, #0
   16020:	d106      	bne.n	16030 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
   16022:	4a05      	ldr	r2, [pc, #20]	; (16038 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   16024:	9b01      	ldr	r3, [sp, #4]
   16026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1602a:	2b00      	cmp	r3, #0
   1602c:	d100      	bne.n	16030 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1602e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16030:	bf00      	nop
   16032:	b003      	add	sp, #12
   16034:	f85d fb04 	ldr.w	pc, [sp], #4
   16038:	1fff9840 	.word	0x1fff9840
   1603c:	1fff983c 	.word	0x1fff983c

00016040 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   16040:	b500      	push	{lr}
   16042:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16044:	f7ea fdd2 	bl	bec <Sys_GetCoreID>
   16048:	4603      	mov	r3, r0
   1604a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId])
   1604c:	4a10      	ldr	r2, [pc, #64]	; (16090 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   1604e:	9b01      	ldr	r3, [sp, #4]
   16050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16054:	2b00      	cmp	r3, #0
   16056:	d10d      	bne.n	16074 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16058:	f7ea fcb2 	bl	9c0 <Spi_schm_read_msr>
   1605c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1605e:	9b00      	ldr	r3, [sp, #0]
   16060:	f003 0301 	and.w	r3, r3, #1
   16064:	2b00      	cmp	r3, #0
   16066:	d100      	bne.n	1606a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16068:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1606a:	490a      	ldr	r1, [pc, #40]	; (16094 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x54>)
   1606c:	9b01      	ldr	r3, [sp, #4]
   1606e:	9a00      	ldr	r2, [sp, #0]
   16070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]++;
   16074:	4a06      	ldr	r2, [pc, #24]	; (16090 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   16076:	9b01      	ldr	r3, [sp, #4]
   16078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1607c:	1c5a      	adds	r2, r3, #1
   1607e:	4904      	ldr	r1, [pc, #16]	; (16090 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   16080:	9b01      	ldr	r3, [sp, #4]
   16082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16086:	bf00      	nop
   16088:	b003      	add	sp, #12
   1608a:	f85d fb04 	ldr.w	pc, [sp], #4
   1608e:	bf00      	nop
   16090:	1fff9848 	.word	0x1fff9848
   16094:	1fff9844 	.word	0x1fff9844

00016098 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   16098:	b500      	push	{lr}
   1609a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1609c:	f7ea fda6 	bl	bec <Sys_GetCoreID>
   160a0:	4603      	mov	r3, r0
   160a2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]--;
   160a4:	4a0d      	ldr	r2, [pc, #52]	; (160dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   160a6:	9b01      	ldr	r3, [sp, #4]
   160a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160ac:	1e5a      	subs	r2, r3, #1
   160ae:	490b      	ldr	r1, [pc, #44]	; (160dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   160b0:	9b01      	ldr	r3, [sp, #4]
   160b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   160b6:	4a0a      	ldr	r2, [pc, #40]	; (160e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x48>)
   160b8:	9b01      	ldr	r3, [sp, #4]
   160ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160be:	f003 0301 	and.w	r3, r3, #1
   160c2:	2b00      	cmp	r3, #0
   160c4:	d106      	bne.n	160d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
   160c6:	4a05      	ldr	r2, [pc, #20]	; (160dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   160c8:	9b01      	ldr	r3, [sp, #4]
   160ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160ce:	2b00      	cmp	r3, #0
   160d0:	d100      	bne.n	160d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   160d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   160d4:	bf00      	nop
   160d6:	b003      	add	sp, #12
   160d8:	f85d fb04 	ldr.w	pc, [sp], #4
   160dc:	1fff9848 	.word	0x1fff9848
   160e0:	1fff9844 	.word	0x1fff9844

000160e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   160e4:	b500      	push	{lr}
   160e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160e8:	f7ea fd80 	bl	bec <Sys_GetCoreID>
   160ec:	4603      	mov	r3, r0
   160ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId])
   160f0:	4a10      	ldr	r2, [pc, #64]	; (16134 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   160f2:	9b01      	ldr	r3, [sp, #4]
   160f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160f8:	2b00      	cmp	r3, #0
   160fa:	d10d      	bne.n	16118 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   160fc:	f7ea fc60 	bl	9c0 <Spi_schm_read_msr>
   16100:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16102:	9b00      	ldr	r3, [sp, #0]
   16104:	f003 0301 	and.w	r3, r3, #1
   16108:	2b00      	cmp	r3, #0
   1610a:	d100      	bne.n	1610e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1610c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   1610e:	490a      	ldr	r1, [pc, #40]	; (16138 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x54>)
   16110:	9b01      	ldr	r3, [sp, #4]
   16112:	9a00      	ldr	r2, [sp, #0]
   16114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]++;
   16118:	4a06      	ldr	r2, [pc, #24]	; (16134 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   1611a:	9b01      	ldr	r3, [sp, #4]
   1611c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16120:	1c5a      	adds	r2, r3, #1
   16122:	4904      	ldr	r1, [pc, #16]	; (16134 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   16124:	9b01      	ldr	r3, [sp, #4]
   16126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1612a:	bf00      	nop
   1612c:	b003      	add	sp, #12
   1612e:	f85d fb04 	ldr.w	pc, [sp], #4
   16132:	bf00      	nop
   16134:	1fff9850 	.word	0x1fff9850
   16138:	1fff984c 	.word	0x1fff984c

0001613c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   1613c:	b500      	push	{lr}
   1613e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16140:	f7ea fd54 	bl	bec <Sys_GetCoreID>
   16144:	4603      	mov	r3, r0
   16146:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]--;
   16148:	4a0d      	ldr	r2, [pc, #52]	; (16180 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   1614a:	9b01      	ldr	r3, [sp, #4]
   1614c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16150:	1e5a      	subs	r2, r3, #1
   16152:	490b      	ldr	r1, [pc, #44]	; (16180 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   16154:	9b01      	ldr	r3, [sp, #4]
   16156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1615a:	4a0a      	ldr	r2, [pc, #40]	; (16184 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x48>)
   1615c:	9b01      	ldr	r3, [sp, #4]
   1615e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16162:	f003 0301 	and.w	r3, r3, #1
   16166:	2b00      	cmp	r3, #0
   16168:	d106      	bne.n	16178 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
   1616a:	4a05      	ldr	r2, [pc, #20]	; (16180 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   1616c:	9b01      	ldr	r3, [sp, #4]
   1616e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16172:	2b00      	cmp	r3, #0
   16174:	d100      	bne.n	16178 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16176:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16178:	bf00      	nop
   1617a:	b003      	add	sp, #12
   1617c:	f85d fb04 	ldr.w	pc, [sp], #4
   16180:	1fff9850 	.word	0x1fff9850
   16184:	1fff984c 	.word	0x1fff984c

00016188 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   16188:	b500      	push	{lr}
   1618a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1618c:	f7ea fd2e 	bl	bec <Sys_GetCoreID>
   16190:	4603      	mov	r3, r0
   16192:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId])
   16194:	4a10      	ldr	r2, [pc, #64]	; (161d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   16196:	9b01      	ldr	r3, [sp, #4]
   16198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1619c:	2b00      	cmp	r3, #0
   1619e:	d10d      	bne.n	161bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   161a0:	f7ea fc0e 	bl	9c0 <Spi_schm_read_msr>
   161a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   161a6:	9b00      	ldr	r3, [sp, #0]
   161a8:	f003 0301 	and.w	r3, r3, #1
   161ac:	2b00      	cmp	r3, #0
   161ae:	d100      	bne.n	161b2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   161b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   161b2:	490a      	ldr	r1, [pc, #40]	; (161dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x54>)
   161b4:	9b01      	ldr	r3, [sp, #4]
   161b6:	9a00      	ldr	r2, [sp, #0]
   161b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]++;
   161bc:	4a06      	ldr	r2, [pc, #24]	; (161d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   161be:	9b01      	ldr	r3, [sp, #4]
   161c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161c4:	1c5a      	adds	r2, r3, #1
   161c6:	4904      	ldr	r1, [pc, #16]	; (161d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   161c8:	9b01      	ldr	r3, [sp, #4]
   161ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   161ce:	bf00      	nop
   161d0:	b003      	add	sp, #12
   161d2:	f85d fb04 	ldr.w	pc, [sp], #4
   161d6:	bf00      	nop
   161d8:	1fff9858 	.word	0x1fff9858
   161dc:	1fff9854 	.word	0x1fff9854

000161e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   161e0:	b500      	push	{lr}
   161e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161e4:	f7ea fd02 	bl	bec <Sys_GetCoreID>
   161e8:	4603      	mov	r3, r0
   161ea:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]--;
   161ec:	4a0d      	ldr	r2, [pc, #52]	; (16224 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   161ee:	9b01      	ldr	r3, [sp, #4]
   161f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161f4:	1e5a      	subs	r2, r3, #1
   161f6:	490b      	ldr	r1, [pc, #44]	; (16224 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   161f8:	9b01      	ldr	r3, [sp, #4]
   161fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   161fe:	4a0a      	ldr	r2, [pc, #40]	; (16228 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x48>)
   16200:	9b01      	ldr	r3, [sp, #4]
   16202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16206:	f003 0301 	and.w	r3, r3, #1
   1620a:	2b00      	cmp	r3, #0
   1620c:	d106      	bne.n	1621c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
   1620e:	4a05      	ldr	r2, [pc, #20]	; (16224 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   16210:	9b01      	ldr	r3, [sp, #4]
   16212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16216:	2b00      	cmp	r3, #0
   16218:	d100      	bne.n	1621c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1621a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1621c:	bf00      	nop
   1621e:	b003      	add	sp, #12
   16220:	f85d fb04 	ldr.w	pc, [sp], #4
   16224:	1fff9858 	.word	0x1fff9858
   16228:	1fff9854 	.word	0x1fff9854

0001622c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   1622c:	b500      	push	{lr}
   1622e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16230:	f7ea fcdc 	bl	bec <Sys_GetCoreID>
   16234:	4603      	mov	r3, r0
   16236:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId])
   16238:	4a10      	ldr	r2, [pc, #64]	; (1627c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   1623a:	9b01      	ldr	r3, [sp, #4]
   1623c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16240:	2b00      	cmp	r3, #0
   16242:	d10d      	bne.n	16260 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16244:	f7ea fbbc 	bl	9c0 <Spi_schm_read_msr>
   16248:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1624a:	9b00      	ldr	r3, [sp, #0]
   1624c:	f003 0301 	and.w	r3, r3, #1
   16250:	2b00      	cmp	r3, #0
   16252:	d100      	bne.n	16256 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16254:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   16256:	490a      	ldr	r1, [pc, #40]	; (16280 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x54>)
   16258:	9b01      	ldr	r3, [sp, #4]
   1625a:	9a00      	ldr	r2, [sp, #0]
   1625c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]++;
   16260:	4a06      	ldr	r2, [pc, #24]	; (1627c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   16262:	9b01      	ldr	r3, [sp, #4]
   16264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16268:	1c5a      	adds	r2, r3, #1
   1626a:	4904      	ldr	r1, [pc, #16]	; (1627c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   1626c:	9b01      	ldr	r3, [sp, #4]
   1626e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16272:	bf00      	nop
   16274:	b003      	add	sp, #12
   16276:	f85d fb04 	ldr.w	pc, [sp], #4
   1627a:	bf00      	nop
   1627c:	1fff9860 	.word	0x1fff9860
   16280:	1fff985c 	.word	0x1fff985c

00016284 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   16284:	b500      	push	{lr}
   16286:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16288:	f7ea fcb0 	bl	bec <Sys_GetCoreID>
   1628c:	4603      	mov	r3, r0
   1628e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]--;
   16290:	4a0d      	ldr	r2, [pc, #52]	; (162c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   16292:	9b01      	ldr	r3, [sp, #4]
   16294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16298:	1e5a      	subs	r2, r3, #1
   1629a:	490b      	ldr	r1, [pc, #44]	; (162c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   1629c:	9b01      	ldr	r3, [sp, #4]
   1629e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   162a2:	4a0a      	ldr	r2, [pc, #40]	; (162cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x48>)
   162a4:	9b01      	ldr	r3, [sp, #4]
   162a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162aa:	f003 0301 	and.w	r3, r3, #1
   162ae:	2b00      	cmp	r3, #0
   162b0:	d106      	bne.n	162c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
   162b2:	4a05      	ldr	r2, [pc, #20]	; (162c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   162b4:	9b01      	ldr	r3, [sp, #4]
   162b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162ba:	2b00      	cmp	r3, #0
   162bc:	d100      	bne.n	162c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   162be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   162c0:	bf00      	nop
   162c2:	b003      	add	sp, #12
   162c4:	f85d fb04 	ldr.w	pc, [sp], #4
   162c8:	1fff9860 	.word	0x1fff9860
   162cc:	1fff985c 	.word	0x1fff985c

000162d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   162d0:	b500      	push	{lr}
   162d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162d4:	f7ea fc8a 	bl	bec <Sys_GetCoreID>
   162d8:	4603      	mov	r3, r0
   162da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId])
   162dc:	4a10      	ldr	r2, [pc, #64]	; (16320 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   162de:	9b01      	ldr	r3, [sp, #4]
   162e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162e4:	2b00      	cmp	r3, #0
   162e6:	d10d      	bne.n	16304 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   162e8:	f7ea fb6a 	bl	9c0 <Spi_schm_read_msr>
   162ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   162ee:	9b00      	ldr	r3, [sp, #0]
   162f0:	f003 0301 	and.w	r3, r3, #1
   162f4:	2b00      	cmp	r3, #0
   162f6:	d100      	bne.n	162fa <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   162f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   162fa:	490a      	ldr	r1, [pc, #40]	; (16324 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x54>)
   162fc:	9b01      	ldr	r3, [sp, #4]
   162fe:	9a00      	ldr	r2, [sp, #0]
   16300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]++;
   16304:	4a06      	ldr	r2, [pc, #24]	; (16320 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   16306:	9b01      	ldr	r3, [sp, #4]
   16308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1630c:	1c5a      	adds	r2, r3, #1
   1630e:	4904      	ldr	r1, [pc, #16]	; (16320 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   16310:	9b01      	ldr	r3, [sp, #4]
   16312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16316:	bf00      	nop
   16318:	b003      	add	sp, #12
   1631a:	f85d fb04 	ldr.w	pc, [sp], #4
   1631e:	bf00      	nop
   16320:	1fff9868 	.word	0x1fff9868
   16324:	1fff9864 	.word	0x1fff9864

00016328 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   16328:	b500      	push	{lr}
   1632a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1632c:	f7ea fc5e 	bl	bec <Sys_GetCoreID>
   16330:	4603      	mov	r3, r0
   16332:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]--;
   16334:	4a0d      	ldr	r2, [pc, #52]	; (1636c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   16336:	9b01      	ldr	r3, [sp, #4]
   16338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1633c:	1e5a      	subs	r2, r3, #1
   1633e:	490b      	ldr	r1, [pc, #44]	; (1636c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   16340:	9b01      	ldr	r3, [sp, #4]
   16342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   16346:	4a0a      	ldr	r2, [pc, #40]	; (16370 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x48>)
   16348:	9b01      	ldr	r3, [sp, #4]
   1634a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1634e:	f003 0301 	and.w	r3, r3, #1
   16352:	2b00      	cmp	r3, #0
   16354:	d106      	bne.n	16364 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
   16356:	4a05      	ldr	r2, [pc, #20]	; (1636c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   16358:	9b01      	ldr	r3, [sp, #4]
   1635a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1635e:	2b00      	cmp	r3, #0
   16360:	d100      	bne.n	16364 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16362:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16364:	bf00      	nop
   16366:	b003      	add	sp, #12
   16368:	f85d fb04 	ldr.w	pc, [sp], #4
   1636c:	1fff9868 	.word	0x1fff9868
   16370:	1fff9864 	.word	0x1fff9864

00016374 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   16374:	b500      	push	{lr}
   16376:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16378:	f7ea fc38 	bl	bec <Sys_GetCoreID>
   1637c:	4603      	mov	r3, r0
   1637e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId])
   16380:	4a10      	ldr	r2, [pc, #64]	; (163c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   16382:	9b01      	ldr	r3, [sp, #4]
   16384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16388:	2b00      	cmp	r3, #0
   1638a:	d10d      	bne.n	163a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1638c:	f7ea fb18 	bl	9c0 <Spi_schm_read_msr>
   16390:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16392:	9b00      	ldr	r3, [sp, #0]
   16394:	f003 0301 	and.w	r3, r3, #1
   16398:	2b00      	cmp	r3, #0
   1639a:	d100      	bne.n	1639e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1639c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1639e:	490a      	ldr	r1, [pc, #40]	; (163c8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x54>)
   163a0:	9b01      	ldr	r3, [sp, #4]
   163a2:	9a00      	ldr	r2, [sp, #0]
   163a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]++;
   163a8:	4a06      	ldr	r2, [pc, #24]	; (163c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   163aa:	9b01      	ldr	r3, [sp, #4]
   163ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163b0:	1c5a      	adds	r2, r3, #1
   163b2:	4904      	ldr	r1, [pc, #16]	; (163c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   163b4:	9b01      	ldr	r3, [sp, #4]
   163b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   163ba:	bf00      	nop
   163bc:	b003      	add	sp, #12
   163be:	f85d fb04 	ldr.w	pc, [sp], #4
   163c2:	bf00      	nop
   163c4:	1fff9870 	.word	0x1fff9870
   163c8:	1fff986c 	.word	0x1fff986c

000163cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   163cc:	b500      	push	{lr}
   163ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   163d0:	f7ea fc0c 	bl	bec <Sys_GetCoreID>
   163d4:	4603      	mov	r3, r0
   163d6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]--;
   163d8:	4a0d      	ldr	r2, [pc, #52]	; (16410 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   163da:	9b01      	ldr	r3, [sp, #4]
   163dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163e0:	1e5a      	subs	r2, r3, #1
   163e2:	490b      	ldr	r1, [pc, #44]	; (16410 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   163e4:	9b01      	ldr	r3, [sp, #4]
   163e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   163ea:	4a0a      	ldr	r2, [pc, #40]	; (16414 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x48>)
   163ec:	9b01      	ldr	r3, [sp, #4]
   163ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163f2:	f003 0301 	and.w	r3, r3, #1
   163f6:	2b00      	cmp	r3, #0
   163f8:	d106      	bne.n	16408 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
   163fa:	4a05      	ldr	r2, [pc, #20]	; (16410 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   163fc:	9b01      	ldr	r3, [sp, #4]
   163fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16402:	2b00      	cmp	r3, #0
   16404:	d100      	bne.n	16408 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16406:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16408:	bf00      	nop
   1640a:	b003      	add	sp, #12
   1640c:	f85d fb04 	ldr.w	pc, [sp], #4
   16410:	1fff9870 	.word	0x1fff9870
   16414:	1fff986c 	.word	0x1fff986c

00016418 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   16418:	b500      	push	{lr}
   1641a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1641c:	f7ea fbe6 	bl	bec <Sys_GetCoreID>
   16420:	4603      	mov	r3, r0
   16422:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId])
   16424:	4a10      	ldr	r2, [pc, #64]	; (16468 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   16426:	9b01      	ldr	r3, [sp, #4]
   16428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1642c:	2b00      	cmp	r3, #0
   1642e:	d10d      	bne.n	1644c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16430:	f7ea fac6 	bl	9c0 <Spi_schm_read_msr>
   16434:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16436:	9b00      	ldr	r3, [sp, #0]
   16438:	f003 0301 	and.w	r3, r3, #1
   1643c:	2b00      	cmp	r3, #0
   1643e:	d100      	bne.n	16442 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16440:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   16442:	490a      	ldr	r1, [pc, #40]	; (1646c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x54>)
   16444:	9b01      	ldr	r3, [sp, #4]
   16446:	9a00      	ldr	r2, [sp, #0]
   16448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]++;
   1644c:	4a06      	ldr	r2, [pc, #24]	; (16468 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   1644e:	9b01      	ldr	r3, [sp, #4]
   16450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16454:	1c5a      	adds	r2, r3, #1
   16456:	4904      	ldr	r1, [pc, #16]	; (16468 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   16458:	9b01      	ldr	r3, [sp, #4]
   1645a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1645e:	bf00      	nop
   16460:	b003      	add	sp, #12
   16462:	f85d fb04 	ldr.w	pc, [sp], #4
   16466:	bf00      	nop
   16468:	1fff9878 	.word	0x1fff9878
   1646c:	1fff9874 	.word	0x1fff9874

00016470 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   16470:	b500      	push	{lr}
   16472:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16474:	f7ea fbba 	bl	bec <Sys_GetCoreID>
   16478:	4603      	mov	r3, r0
   1647a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]--;
   1647c:	4a0d      	ldr	r2, [pc, #52]	; (164b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   1647e:	9b01      	ldr	r3, [sp, #4]
   16480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16484:	1e5a      	subs	r2, r3, #1
   16486:	490b      	ldr	r1, [pc, #44]	; (164b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   16488:	9b01      	ldr	r3, [sp, #4]
   1648a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1648e:	4a0a      	ldr	r2, [pc, #40]	; (164b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x48>)
   16490:	9b01      	ldr	r3, [sp, #4]
   16492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16496:	f003 0301 	and.w	r3, r3, #1
   1649a:	2b00      	cmp	r3, #0
   1649c:	d106      	bne.n	164ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
   1649e:	4a05      	ldr	r2, [pc, #20]	; (164b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   164a0:	9b01      	ldr	r3, [sp, #4]
   164a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164a6:	2b00      	cmp	r3, #0
   164a8:	d100      	bne.n	164ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   164aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   164ac:	bf00      	nop
   164ae:	b003      	add	sp, #12
   164b0:	f85d fb04 	ldr.w	pc, [sp], #4
   164b4:	1fff9878 	.word	0x1fff9878
   164b8:	1fff9874 	.word	0x1fff9874

000164bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   164bc:	b500      	push	{lr}
   164be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   164c0:	f7ea fb94 	bl	bec <Sys_GetCoreID>
   164c4:	4603      	mov	r3, r0
   164c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId])
   164c8:	4a10      	ldr	r2, [pc, #64]	; (1650c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   164ca:	9b01      	ldr	r3, [sp, #4]
   164cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164d0:	2b00      	cmp	r3, #0
   164d2:	d10d      	bne.n	164f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   164d4:	f7ea fa74 	bl	9c0 <Spi_schm_read_msr>
   164d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   164da:	9b00      	ldr	r3, [sp, #0]
   164dc:	f003 0301 	and.w	r3, r3, #1
   164e0:	2b00      	cmp	r3, #0
   164e2:	d100      	bne.n	164e6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   164e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   164e6:	490a      	ldr	r1, [pc, #40]	; (16510 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x54>)
   164e8:	9b01      	ldr	r3, [sp, #4]
   164ea:	9a00      	ldr	r2, [sp, #0]
   164ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]++;
   164f0:	4a06      	ldr	r2, [pc, #24]	; (1650c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   164f2:	9b01      	ldr	r3, [sp, #4]
   164f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164f8:	1c5a      	adds	r2, r3, #1
   164fa:	4904      	ldr	r1, [pc, #16]	; (1650c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   164fc:	9b01      	ldr	r3, [sp, #4]
   164fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16502:	bf00      	nop
   16504:	b003      	add	sp, #12
   16506:	f85d fb04 	ldr.w	pc, [sp], #4
   1650a:	bf00      	nop
   1650c:	1fff9880 	.word	0x1fff9880
   16510:	1fff987c 	.word	0x1fff987c

00016514 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   16514:	b500      	push	{lr}
   16516:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16518:	f7ea fb68 	bl	bec <Sys_GetCoreID>
   1651c:	4603      	mov	r3, r0
   1651e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]--;
   16520:	4a0d      	ldr	r2, [pc, #52]	; (16558 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   16522:	9b01      	ldr	r3, [sp, #4]
   16524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16528:	1e5a      	subs	r2, r3, #1
   1652a:	490b      	ldr	r1, [pc, #44]	; (16558 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   1652c:	9b01      	ldr	r3, [sp, #4]
   1652e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   16532:	4a0a      	ldr	r2, [pc, #40]	; (1655c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x48>)
   16534:	9b01      	ldr	r3, [sp, #4]
   16536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1653a:	f003 0301 	and.w	r3, r3, #1
   1653e:	2b00      	cmp	r3, #0
   16540:	d106      	bne.n	16550 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
   16542:	4a05      	ldr	r2, [pc, #20]	; (16558 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   16544:	9b01      	ldr	r3, [sp, #4]
   16546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1654a:	2b00      	cmp	r3, #0
   1654c:	d100      	bne.n	16550 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1654e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16550:	bf00      	nop
   16552:	b003      	add	sp, #12
   16554:	f85d fb04 	ldr.w	pc, [sp], #4
   16558:	1fff9880 	.word	0x1fff9880
   1655c:	1fff987c 	.word	0x1fff987c

00016560 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   16560:	b500      	push	{lr}
   16562:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16564:	f7ea fb42 	bl	bec <Sys_GetCoreID>
   16568:	4603      	mov	r3, r0
   1656a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId])
   1656c:	4a10      	ldr	r2, [pc, #64]	; (165b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   1656e:	9b01      	ldr	r3, [sp, #4]
   16570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16574:	2b00      	cmp	r3, #0
   16576:	d10d      	bne.n	16594 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16578:	f7ea fa22 	bl	9c0 <Spi_schm_read_msr>
   1657c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1657e:	9b00      	ldr	r3, [sp, #0]
   16580:	f003 0301 	and.w	r3, r3, #1
   16584:	2b00      	cmp	r3, #0
   16586:	d100      	bne.n	1658a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16588:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1658a:	490a      	ldr	r1, [pc, #40]	; (165b4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x54>)
   1658c:	9b01      	ldr	r3, [sp, #4]
   1658e:	9a00      	ldr	r2, [sp, #0]
   16590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]++;
   16594:	4a06      	ldr	r2, [pc, #24]	; (165b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   16596:	9b01      	ldr	r3, [sp, #4]
   16598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1659c:	1c5a      	adds	r2, r3, #1
   1659e:	4904      	ldr	r1, [pc, #16]	; (165b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   165a0:	9b01      	ldr	r3, [sp, #4]
   165a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   165a6:	bf00      	nop
   165a8:	b003      	add	sp, #12
   165aa:	f85d fb04 	ldr.w	pc, [sp], #4
   165ae:	bf00      	nop
   165b0:	1fff9888 	.word	0x1fff9888
   165b4:	1fff9884 	.word	0x1fff9884

000165b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   165b8:	b500      	push	{lr}
   165ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   165bc:	f7ea fb16 	bl	bec <Sys_GetCoreID>
   165c0:	4603      	mov	r3, r0
   165c2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]--;
   165c4:	4a0d      	ldr	r2, [pc, #52]	; (165fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   165c6:	9b01      	ldr	r3, [sp, #4]
   165c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165cc:	1e5a      	subs	r2, r3, #1
   165ce:	490b      	ldr	r1, [pc, #44]	; (165fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   165d0:	9b01      	ldr	r3, [sp, #4]
   165d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   165d6:	4a0a      	ldr	r2, [pc, #40]	; (16600 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x48>)
   165d8:	9b01      	ldr	r3, [sp, #4]
   165da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165de:	f003 0301 	and.w	r3, r3, #1
   165e2:	2b00      	cmp	r3, #0
   165e4:	d106      	bne.n	165f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
   165e6:	4a05      	ldr	r2, [pc, #20]	; (165fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   165e8:	9b01      	ldr	r3, [sp, #4]
   165ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165ee:	2b00      	cmp	r3, #0
   165f0:	d100      	bne.n	165f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   165f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   165f4:	bf00      	nop
   165f6:	b003      	add	sp, #12
   165f8:	f85d fb04 	ldr.w	pc, [sp], #4
   165fc:	1fff9888 	.word	0x1fff9888
   16600:	1fff9884 	.word	0x1fff9884

00016604 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   16604:	b500      	push	{lr}
   16606:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16608:	f7ea faf0 	bl	bec <Sys_GetCoreID>
   1660c:	4603      	mov	r3, r0
   1660e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId])
   16610:	4a10      	ldr	r2, [pc, #64]	; (16654 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   16612:	9b01      	ldr	r3, [sp, #4]
   16614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16618:	2b00      	cmp	r3, #0
   1661a:	d10d      	bne.n	16638 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1661c:	f7ea f9d0 	bl	9c0 <Spi_schm_read_msr>
   16620:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16622:	9b00      	ldr	r3, [sp, #0]
   16624:	f003 0301 	and.w	r3, r3, #1
   16628:	2b00      	cmp	r3, #0
   1662a:	d100      	bne.n	1662e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1662c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1662e:	490a      	ldr	r1, [pc, #40]	; (16658 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x54>)
   16630:	9b01      	ldr	r3, [sp, #4]
   16632:	9a00      	ldr	r2, [sp, #0]
   16634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]++;
   16638:	4a06      	ldr	r2, [pc, #24]	; (16654 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   1663a:	9b01      	ldr	r3, [sp, #4]
   1663c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16640:	1c5a      	adds	r2, r3, #1
   16642:	4904      	ldr	r1, [pc, #16]	; (16654 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   16644:	9b01      	ldr	r3, [sp, #4]
   16646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1664a:	bf00      	nop
   1664c:	b003      	add	sp, #12
   1664e:	f85d fb04 	ldr.w	pc, [sp], #4
   16652:	bf00      	nop
   16654:	1fff9890 	.word	0x1fff9890
   16658:	1fff988c 	.word	0x1fff988c

0001665c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   1665c:	b500      	push	{lr}
   1665e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16660:	f7ea fac4 	bl	bec <Sys_GetCoreID>
   16664:	4603      	mov	r3, r0
   16666:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]--;
   16668:	4a0d      	ldr	r2, [pc, #52]	; (166a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   1666a:	9b01      	ldr	r3, [sp, #4]
   1666c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16670:	1e5a      	subs	r2, r3, #1
   16672:	490b      	ldr	r1, [pc, #44]	; (166a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   16674:	9b01      	ldr	r3, [sp, #4]
   16676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1667a:	4a0a      	ldr	r2, [pc, #40]	; (166a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x48>)
   1667c:	9b01      	ldr	r3, [sp, #4]
   1667e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16682:	f003 0301 	and.w	r3, r3, #1
   16686:	2b00      	cmp	r3, #0
   16688:	d106      	bne.n	16698 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
   1668a:	4a05      	ldr	r2, [pc, #20]	; (166a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   1668c:	9b01      	ldr	r3, [sp, #4]
   1668e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16692:	2b00      	cmp	r3, #0
   16694:	d100      	bne.n	16698 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16696:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16698:	bf00      	nop
   1669a:	b003      	add	sp, #12
   1669c:	f85d fb04 	ldr.w	pc, [sp], #4
   166a0:	1fff9890 	.word	0x1fff9890
   166a4:	1fff988c 	.word	0x1fff988c

000166a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   166a8:	b500      	push	{lr}
   166aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   166ac:	f7ea fa9e 	bl	bec <Sys_GetCoreID>
   166b0:	4603      	mov	r3, r0
   166b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId])
   166b4:	4a10      	ldr	r2, [pc, #64]	; (166f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   166b6:	9b01      	ldr	r3, [sp, #4]
   166b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166bc:	2b00      	cmp	r3, #0
   166be:	d10d      	bne.n	166dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   166c0:	f7ea f97e 	bl	9c0 <Spi_schm_read_msr>
   166c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   166c6:	9b00      	ldr	r3, [sp, #0]
   166c8:	f003 0301 	and.w	r3, r3, #1
   166cc:	2b00      	cmp	r3, #0
   166ce:	d100      	bne.n	166d2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   166d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   166d2:	490a      	ldr	r1, [pc, #40]	; (166fc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x54>)
   166d4:	9b01      	ldr	r3, [sp, #4]
   166d6:	9a00      	ldr	r2, [sp, #0]
   166d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]++;
   166dc:	4a06      	ldr	r2, [pc, #24]	; (166f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   166de:	9b01      	ldr	r3, [sp, #4]
   166e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166e4:	1c5a      	adds	r2, r3, #1
   166e6:	4904      	ldr	r1, [pc, #16]	; (166f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   166e8:	9b01      	ldr	r3, [sp, #4]
   166ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   166ee:	bf00      	nop
   166f0:	b003      	add	sp, #12
   166f2:	f85d fb04 	ldr.w	pc, [sp], #4
   166f6:	bf00      	nop
   166f8:	1fff9898 	.word	0x1fff9898
   166fc:	1fff9894 	.word	0x1fff9894

00016700 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   16700:	b500      	push	{lr}
   16702:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16704:	f7ea fa72 	bl	bec <Sys_GetCoreID>
   16708:	4603      	mov	r3, r0
   1670a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]--;
   1670c:	4a0d      	ldr	r2, [pc, #52]	; (16744 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   1670e:	9b01      	ldr	r3, [sp, #4]
   16710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16714:	1e5a      	subs	r2, r3, #1
   16716:	490b      	ldr	r1, [pc, #44]	; (16744 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   16718:	9b01      	ldr	r3, [sp, #4]
   1671a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1671e:	4a0a      	ldr	r2, [pc, #40]	; (16748 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x48>)
   16720:	9b01      	ldr	r3, [sp, #4]
   16722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16726:	f003 0301 	and.w	r3, r3, #1
   1672a:	2b00      	cmp	r3, #0
   1672c:	d106      	bne.n	1673c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
   1672e:	4a05      	ldr	r2, [pc, #20]	; (16744 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   16730:	9b01      	ldr	r3, [sp, #4]
   16732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16736:	2b00      	cmp	r3, #0
   16738:	d100      	bne.n	1673c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1673a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1673c:	bf00      	nop
   1673e:	b003      	add	sp, #12
   16740:	f85d fb04 	ldr.w	pc, [sp], #4
   16744:	1fff9898 	.word	0x1fff9898
   16748:	1fff9894 	.word	0x1fff9894

0001674c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   1674c:	b500      	push	{lr}
   1674e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16750:	f7ea fa4c 	bl	bec <Sys_GetCoreID>
   16754:	4603      	mov	r3, r0
   16756:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId])
   16758:	4a10      	ldr	r2, [pc, #64]	; (1679c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   1675a:	9b01      	ldr	r3, [sp, #4]
   1675c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16760:	2b00      	cmp	r3, #0
   16762:	d10d      	bne.n	16780 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16764:	f7ea f92c 	bl	9c0 <Spi_schm_read_msr>
   16768:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1676a:	9b00      	ldr	r3, [sp, #0]
   1676c:	f003 0301 	and.w	r3, r3, #1
   16770:	2b00      	cmp	r3, #0
   16772:	d100      	bne.n	16776 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16774:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   16776:	490a      	ldr	r1, [pc, #40]	; (167a0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x54>)
   16778:	9b01      	ldr	r3, [sp, #4]
   1677a:	9a00      	ldr	r2, [sp, #0]
   1677c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]++;
   16780:	4a06      	ldr	r2, [pc, #24]	; (1679c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   16782:	9b01      	ldr	r3, [sp, #4]
   16784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16788:	1c5a      	adds	r2, r3, #1
   1678a:	4904      	ldr	r1, [pc, #16]	; (1679c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   1678c:	9b01      	ldr	r3, [sp, #4]
   1678e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16792:	bf00      	nop
   16794:	b003      	add	sp, #12
   16796:	f85d fb04 	ldr.w	pc, [sp], #4
   1679a:	bf00      	nop
   1679c:	1fff98a0 	.word	0x1fff98a0
   167a0:	1fff989c 	.word	0x1fff989c

000167a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   167a4:	b500      	push	{lr}
   167a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167a8:	f7ea fa20 	bl	bec <Sys_GetCoreID>
   167ac:	4603      	mov	r3, r0
   167ae:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]--;
   167b0:	4a0d      	ldr	r2, [pc, #52]	; (167e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   167b2:	9b01      	ldr	r3, [sp, #4]
   167b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167b8:	1e5a      	subs	r2, r3, #1
   167ba:	490b      	ldr	r1, [pc, #44]	; (167e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   167bc:	9b01      	ldr	r3, [sp, #4]
   167be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   167c2:	4a0a      	ldr	r2, [pc, #40]	; (167ec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x48>)
   167c4:	9b01      	ldr	r3, [sp, #4]
   167c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167ca:	f003 0301 	and.w	r3, r3, #1
   167ce:	2b00      	cmp	r3, #0
   167d0:	d106      	bne.n	167e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
   167d2:	4a05      	ldr	r2, [pc, #20]	; (167e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   167d4:	9b01      	ldr	r3, [sp, #4]
   167d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167da:	2b00      	cmp	r3, #0
   167dc:	d100      	bne.n	167e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   167de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   167e0:	bf00      	nop
   167e2:	b003      	add	sp, #12
   167e4:	f85d fb04 	ldr.w	pc, [sp], #4
   167e8:	1fff98a0 	.word	0x1fff98a0
   167ec:	1fff989c 	.word	0x1fff989c

000167f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   167f0:	b500      	push	{lr}
   167f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167f4:	f7ea f9fa 	bl	bec <Sys_GetCoreID>
   167f8:	4603      	mov	r3, r0
   167fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId])
   167fc:	4a10      	ldr	r2, [pc, #64]	; (16840 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   167fe:	9b01      	ldr	r3, [sp, #4]
   16800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16804:	2b00      	cmp	r3, #0
   16806:	d10d      	bne.n	16824 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16808:	f7ea f8da 	bl	9c0 <Spi_schm_read_msr>
   1680c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1680e:	9b00      	ldr	r3, [sp, #0]
   16810:	f003 0301 	and.w	r3, r3, #1
   16814:	2b00      	cmp	r3, #0
   16816:	d100      	bne.n	1681a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16818:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1681a:	490a      	ldr	r1, [pc, #40]	; (16844 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x54>)
   1681c:	9b01      	ldr	r3, [sp, #4]
   1681e:	9a00      	ldr	r2, [sp, #0]
   16820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]++;
   16824:	4a06      	ldr	r2, [pc, #24]	; (16840 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   16826:	9b01      	ldr	r3, [sp, #4]
   16828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1682c:	1c5a      	adds	r2, r3, #1
   1682e:	4904      	ldr	r1, [pc, #16]	; (16840 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   16830:	9b01      	ldr	r3, [sp, #4]
   16832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16836:	bf00      	nop
   16838:	b003      	add	sp, #12
   1683a:	f85d fb04 	ldr.w	pc, [sp], #4
   1683e:	bf00      	nop
   16840:	1fff98a8 	.word	0x1fff98a8
   16844:	1fff98a4 	.word	0x1fff98a4

00016848 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   16848:	b500      	push	{lr}
   1684a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1684c:	f7ea f9ce 	bl	bec <Sys_GetCoreID>
   16850:	4603      	mov	r3, r0
   16852:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]--;
   16854:	4a0d      	ldr	r2, [pc, #52]	; (1688c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   16856:	9b01      	ldr	r3, [sp, #4]
   16858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1685c:	1e5a      	subs	r2, r3, #1
   1685e:	490b      	ldr	r1, [pc, #44]	; (1688c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   16860:	9b01      	ldr	r3, [sp, #4]
   16862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   16866:	4a0a      	ldr	r2, [pc, #40]	; (16890 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x48>)
   16868:	9b01      	ldr	r3, [sp, #4]
   1686a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1686e:	f003 0301 	and.w	r3, r3, #1
   16872:	2b00      	cmp	r3, #0
   16874:	d106      	bne.n	16884 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
   16876:	4a05      	ldr	r2, [pc, #20]	; (1688c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   16878:	9b01      	ldr	r3, [sp, #4]
   1687a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1687e:	2b00      	cmp	r3, #0
   16880:	d100      	bne.n	16884 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16882:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16884:	bf00      	nop
   16886:	b003      	add	sp, #12
   16888:	f85d fb04 	ldr.w	pc, [sp], #4
   1688c:	1fff98a8 	.word	0x1fff98a8
   16890:	1fff98a4 	.word	0x1fff98a4

00016894 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   16894:	b500      	push	{lr}
   16896:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16898:	f7ea f9a8 	bl	bec <Sys_GetCoreID>
   1689c:	4603      	mov	r3, r0
   1689e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId])
   168a0:	4a10      	ldr	r2, [pc, #64]	; (168e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   168a2:	9b01      	ldr	r3, [sp, #4]
   168a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168a8:	2b00      	cmp	r3, #0
   168aa:	d10d      	bne.n	168c8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   168ac:	f7ea f888 	bl	9c0 <Spi_schm_read_msr>
   168b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   168b2:	9b00      	ldr	r3, [sp, #0]
   168b4:	f003 0301 	and.w	r3, r3, #1
   168b8:	2b00      	cmp	r3, #0
   168ba:	d100      	bne.n	168be <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   168bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   168be:	490a      	ldr	r1, [pc, #40]	; (168e8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x54>)
   168c0:	9b01      	ldr	r3, [sp, #4]
   168c2:	9a00      	ldr	r2, [sp, #0]
   168c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]++;
   168c8:	4a06      	ldr	r2, [pc, #24]	; (168e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   168ca:	9b01      	ldr	r3, [sp, #4]
   168cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168d0:	1c5a      	adds	r2, r3, #1
   168d2:	4904      	ldr	r1, [pc, #16]	; (168e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   168d4:	9b01      	ldr	r3, [sp, #4]
   168d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   168da:	bf00      	nop
   168dc:	b003      	add	sp, #12
   168de:	f85d fb04 	ldr.w	pc, [sp], #4
   168e2:	bf00      	nop
   168e4:	1fff98b0 	.word	0x1fff98b0
   168e8:	1fff98ac 	.word	0x1fff98ac

000168ec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   168ec:	b500      	push	{lr}
   168ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168f0:	f7ea f97c 	bl	bec <Sys_GetCoreID>
   168f4:	4603      	mov	r3, r0
   168f6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]--;
   168f8:	4a0d      	ldr	r2, [pc, #52]	; (16930 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   168fa:	9b01      	ldr	r3, [sp, #4]
   168fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16900:	1e5a      	subs	r2, r3, #1
   16902:	490b      	ldr	r1, [pc, #44]	; (16930 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   16904:	9b01      	ldr	r3, [sp, #4]
   16906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1690a:	4a0a      	ldr	r2, [pc, #40]	; (16934 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x48>)
   1690c:	9b01      	ldr	r3, [sp, #4]
   1690e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16912:	f003 0301 	and.w	r3, r3, #1
   16916:	2b00      	cmp	r3, #0
   16918:	d106      	bne.n	16928 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
   1691a:	4a05      	ldr	r2, [pc, #20]	; (16930 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   1691c:	9b01      	ldr	r3, [sp, #4]
   1691e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16922:	2b00      	cmp	r3, #0
   16924:	d100      	bne.n	16928 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16926:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16928:	bf00      	nop
   1692a:	b003      	add	sp, #12
   1692c:	f85d fb04 	ldr.w	pc, [sp], #4
   16930:	1fff98b0 	.word	0x1fff98b0
   16934:	1fff98ac 	.word	0x1fff98ac

00016938 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   16938:	b500      	push	{lr}
   1693a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1693c:	f7ea f956 	bl	bec <Sys_GetCoreID>
   16940:	4603      	mov	r3, r0
   16942:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId])
   16944:	4a10      	ldr	r2, [pc, #64]	; (16988 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   16946:	9b01      	ldr	r3, [sp, #4]
   16948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1694c:	2b00      	cmp	r3, #0
   1694e:	d10d      	bne.n	1696c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16950:	f7ea f836 	bl	9c0 <Spi_schm_read_msr>
   16954:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16956:	9b00      	ldr	r3, [sp, #0]
   16958:	f003 0301 	and.w	r3, r3, #1
   1695c:	2b00      	cmp	r3, #0
   1695e:	d100      	bne.n	16962 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16960:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   16962:	490a      	ldr	r1, [pc, #40]	; (1698c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x54>)
   16964:	9b01      	ldr	r3, [sp, #4]
   16966:	9a00      	ldr	r2, [sp, #0]
   16968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]++;
   1696c:	4a06      	ldr	r2, [pc, #24]	; (16988 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   1696e:	9b01      	ldr	r3, [sp, #4]
   16970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16974:	1c5a      	adds	r2, r3, #1
   16976:	4904      	ldr	r1, [pc, #16]	; (16988 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   16978:	9b01      	ldr	r3, [sp, #4]
   1697a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1697e:	bf00      	nop
   16980:	b003      	add	sp, #12
   16982:	f85d fb04 	ldr.w	pc, [sp], #4
   16986:	bf00      	nop
   16988:	1fff98b8 	.word	0x1fff98b8
   1698c:	1fff98b4 	.word	0x1fff98b4

00016990 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   16990:	b500      	push	{lr}
   16992:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16994:	f7ea f92a 	bl	bec <Sys_GetCoreID>
   16998:	4603      	mov	r3, r0
   1699a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]--;
   1699c:	4a0d      	ldr	r2, [pc, #52]	; (169d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   1699e:	9b01      	ldr	r3, [sp, #4]
   169a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169a4:	1e5a      	subs	r2, r3, #1
   169a6:	490b      	ldr	r1, [pc, #44]	; (169d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   169a8:	9b01      	ldr	r3, [sp, #4]
   169aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   169ae:	4a0a      	ldr	r2, [pc, #40]	; (169d8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x48>)
   169b0:	9b01      	ldr	r3, [sp, #4]
   169b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169b6:	f003 0301 	and.w	r3, r3, #1
   169ba:	2b00      	cmp	r3, #0
   169bc:	d106      	bne.n	169cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
   169be:	4a05      	ldr	r2, [pc, #20]	; (169d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   169c0:	9b01      	ldr	r3, [sp, #4]
   169c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169c6:	2b00      	cmp	r3, #0
   169c8:	d100      	bne.n	169cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   169ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   169cc:	bf00      	nop
   169ce:	b003      	add	sp, #12
   169d0:	f85d fb04 	ldr.w	pc, [sp], #4
   169d4:	1fff98b8 	.word	0x1fff98b8
   169d8:	1fff98b4 	.word	0x1fff98b4

000169dc <Det_Init>:
*
* @requirements   DET008
*
*/
void Det_Init(void)
{
   169dc:	b508      	push	{r3, lr}
    SEGGER_RTT_Init();  //Initializing RTT library.
   169de:	f7ea faa3 	bl	f28 <SEGGER_RTT_Init>
}
   169e2:	bf00      	nop
   169e4:	bd08      	pop	{r3, pc}

000169e6 <Det_SearchApi>:
 * @param[in] ApiId Api id where error was detected.
 * @return StringPtr Ptr to string of api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchApi( uint8 ModuleIndex, uint8 ApiId ) {
   169e6:	b084      	sub	sp, #16
   169e8:	4603      	mov	r3, r0
   169ea:	460a      	mov	r2, r1
   169ec:	f88d 3007 	strb.w	r3, [sp, #7]
   169f0:	4613      	mov	r3, r2
   169f2:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   169f6:	2300      	movs	r3, #0
   169f8:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   169fc:	2300      	movs	r3, #0
   169fe:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   16a00:	2300      	movs	r3, #0
   16a02:	f88d 300f 	strb.w	r3, [sp, #15]
   16a06:	e026      	b.n	16a56 <Det_SearchApi+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiId == ApiId ) {
   16a08:	491b      	ldr	r1, [pc, #108]	; (16a78 <Det_SearchApi+0x92>)
   16a0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16a0e:	4613      	mov	r3, r2
   16a10:	005b      	lsls	r3, r3, #1
   16a12:	4413      	add	r3, r2
   16a14:	00db      	lsls	r3, r3, #3
   16a16:	440b      	add	r3, r1
   16a18:	68da      	ldr	r2, [r3, #12]
   16a1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16a1e:	00db      	lsls	r3, r3, #3
   16a20:	4413      	add	r3, r2
   16a22:	781b      	ldrb	r3, [r3, #0]
   16a24:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16a28:	429a      	cmp	r2, r3
   16a2a:	d10f      	bne.n	16a4c <Det_SearchApi+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiName;
   16a2c:	4912      	ldr	r1, [pc, #72]	; (16a78 <Det_SearchApi+0x92>)
   16a2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16a32:	4613      	mov	r3, r2
   16a34:	005b      	lsls	r3, r3, #1
   16a36:	4413      	add	r3, r2
   16a38:	00db      	lsls	r3, r3, #3
   16a3a:	440b      	add	r3, r1
   16a3c:	68da      	ldr	r2, [r3, #12]
   16a3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16a42:	00db      	lsls	r3, r3, #3
   16a44:	4413      	add	r3, r2
   16a46:	685b      	ldr	r3, [r3, #4]
   16a48:	9302      	str	r3, [sp, #8]
            break;
   16a4a:	e011      	b.n	16a70 <Det_SearchApi+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   16a4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16a50:	3301      	adds	r3, #1
   16a52:	f88d 300f 	strb.w	r3, [sp, #15]
   16a56:	4908      	ldr	r1, [pc, #32]	; (16a78 <Det_SearchApi+0x92>)
   16a58:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16a5c:	4613      	mov	r3, r2
   16a5e:	005b      	lsls	r3, r3, #1
   16a60:	4413      	add	r3, r2
   16a62:	00db      	lsls	r3, r3, #3
   16a64:	440b      	add	r3, r1
   16a66:	7a1b      	ldrb	r3, [r3, #8]
   16a68:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16a6c:	429a      	cmp	r2, r3
   16a6e:	d3cb      	bcc.n	16a08 <Det_SearchApi+0x22>
        }
    }

    return StringPtr;
   16a70:	9b02      	ldr	r3, [sp, #8]
}
   16a72:	4618      	mov	r0, r3
   16a74:	b004      	add	sp, #16
   16a76:	4770      	bx	lr
   16a78:	0001892c 	.word	0x0001892c

00016a7c <Det_SearchError>:
 * @param[in] ErrorId Error id reported.
 * @return StringPtr Ptr to string of error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchError( uint8 ModuleIndex, uint8 ErrorId ) {
   16a7c:	b084      	sub	sp, #16
   16a7e:	4603      	mov	r3, r0
   16a80:	460a      	mov	r2, r1
   16a82:	f88d 3007 	strb.w	r3, [sp, #7]
   16a86:	4613      	mov	r3, r2
   16a88:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   16a8c:	2300      	movs	r3, #0
   16a8e:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16a92:	2300      	movs	r3, #0
   16a94:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16a96:	2300      	movs	r3, #0
   16a98:	f88d 300f 	strb.w	r3, [sp, #15]
   16a9c:	e026      	b.n	16aec <Det_SearchError+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorId == ErrorId ) {
   16a9e:	491c      	ldr	r1, [pc, #112]	; (16b10 <Det_SearchError+0x94>)
   16aa0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16aa4:	4613      	mov	r3, r2
   16aa6:	005b      	lsls	r3, r3, #1
   16aa8:	4413      	add	r3, r2
   16aaa:	00db      	lsls	r3, r3, #3
   16aac:	440b      	add	r3, r1
   16aae:	695a      	ldr	r2, [r3, #20]
   16ab0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16ab4:	00db      	lsls	r3, r3, #3
   16ab6:	4413      	add	r3, r2
   16ab8:	781b      	ldrb	r3, [r3, #0]
   16aba:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16abe:	429a      	cmp	r2, r3
   16ac0:	d10f      	bne.n	16ae2 <Det_SearchError+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorMeaning;
   16ac2:	4913      	ldr	r1, [pc, #76]	; (16b10 <Det_SearchError+0x94>)
   16ac4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16ac8:	4613      	mov	r3, r2
   16aca:	005b      	lsls	r3, r3, #1
   16acc:	4413      	add	r3, r2
   16ace:	00db      	lsls	r3, r3, #3
   16ad0:	440b      	add	r3, r1
   16ad2:	695a      	ldr	r2, [r3, #20]
   16ad4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16ad8:	00db      	lsls	r3, r3, #3
   16ada:	4413      	add	r3, r2
   16adc:	685b      	ldr	r3, [r3, #4]
   16ade:	9302      	str	r3, [sp, #8]
            break;
   16ae0:	e011      	b.n	16b06 <Det_SearchError+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16ae2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16ae6:	3301      	adds	r3, #1
   16ae8:	f88d 300f 	strb.w	r3, [sp, #15]
   16aec:	4908      	ldr	r1, [pc, #32]	; (16b10 <Det_SearchError+0x94>)
   16aee:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16af2:	4613      	mov	r3, r2
   16af4:	005b      	lsls	r3, r3, #1
   16af6:	4413      	add	r3, r2
   16af8:	00db      	lsls	r3, r3, #3
   16afa:	440b      	add	r3, r1
   16afc:	7c1b      	ldrb	r3, [r3, #16]
   16afe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16b02:	429a      	cmp	r2, r3
   16b04:	d3cb      	bcc.n	16a9e <Det_SearchError+0x22>
        }
    }

    return StringPtr;
   16b06:	9b02      	ldr	r3, [sp, #8]
}
   16b08:	4618      	mov	r0, r3
   16b0a:	b004      	add	sp, #16
   16b0c:	4770      	bx	lr
   16b0e:	bf00      	nop
   16b10:	0001892c 	.word	0x0001892c

00016b14 <Det_GetModuleName>:
 * @param[in] ModuleId Module Id where error was detected.
 * @return StringPtr Pointer to string module name.
 * 
 * @note If the module Id isn´t registered it will return NULL;
 */
const char* Det_GetModuleName( uint16 ModuleId ) {
   16b14:	b084      	sub	sp, #16
   16b16:	4603      	mov	r3, r0
   16b18:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data 
    uint8 i = 0;
   16b1c:	2300      	movs	r3, #0
   16b1e:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16b22:	2300      	movs	r3, #0
   16b24:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16b26:	2300      	movs	r3, #0
   16b28:	f88d 300f 	strb.w	r3, [sp, #15]
   16b2c:	e01c      	b.n	16b68 <Det_GetModuleName+0x54>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16b2e:	4912      	ldr	r1, [pc, #72]	; (16b78 <Det_GetModuleName+0x64>)
   16b30:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16b34:	4613      	mov	r3, r2
   16b36:	005b      	lsls	r3, r3, #1
   16b38:	4413      	add	r3, r2
   16b3a:	00db      	lsls	r3, r3, #3
   16b3c:	440b      	add	r3, r1
   16b3e:	881b      	ldrh	r3, [r3, #0]
   16b40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16b44:	429a      	cmp	r2, r3
   16b46:	d10a      	bne.n	16b5e <Det_GetModuleName+0x4a>
            StringPtr = ModuleStrings_Ptr[i].ModuleName;
   16b48:	490b      	ldr	r1, [pc, #44]	; (16b78 <Det_GetModuleName+0x64>)
   16b4a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16b4e:	4613      	mov	r3, r2
   16b50:	005b      	lsls	r3, r3, #1
   16b52:	4413      	add	r3, r2
   16b54:	00db      	lsls	r3, r3, #3
   16b56:	440b      	add	r3, r1
   16b58:	685b      	ldr	r3, [r3, #4]
   16b5a:	9302      	str	r3, [sp, #8]
            break;
   16b5c:	e008      	b.n	16b70 <Det_GetModuleName+0x5c>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16b5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b62:	3301      	adds	r3, #1
   16b64:	f88d 300f 	strb.w	r3, [sp, #15]
   16b68:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b6c:	2b0a      	cmp	r3, #10
   16b6e:	d9de      	bls.n	16b2e <Det_GetModuleName+0x1a>
        }
    }

    return StringPtr;
   16b70:	9b02      	ldr	r3, [sp, #8]
}
   16b72:	4618      	mov	r0, r3
   16b74:	b004      	add	sp, #16
   16b76:	4770      	bx	lr
   16b78:	0001892c 	.word	0x0001892c

00016b7c <Det_GetApiName>:
 * @param[in] ApiId Api Id where error was detected 
 * @return StringPtr Pointer to string Api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetApiName( uint16 ModuleId, uint8 ApiId ) {
   16b7c:	b500      	push	{lr}
   16b7e:	b085      	sub	sp, #20
   16b80:	4603      	mov	r3, r0
   16b82:	460a      	mov	r2, r1
   16b84:	f8ad 3006 	strh.w	r3, [sp, #6]
   16b88:	4613      	mov	r3, r2
   16b8a:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16b8e:	2300      	movs	r3, #0
   16b90:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16b94:	2300      	movs	r3, #0
   16b96:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16b98:	2300      	movs	r3, #0
   16b9a:	f88d 300f 	strb.w	r3, [sp, #15]
   16b9e:	e01b      	b.n	16bd8 <Det_GetApiName+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16ba0:	4912      	ldr	r1, [pc, #72]	; (16bec <Det_GetApiName+0x70>)
   16ba2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16ba6:	4613      	mov	r3, r2
   16ba8:	005b      	lsls	r3, r3, #1
   16baa:	4413      	add	r3, r2
   16bac:	00db      	lsls	r3, r3, #3
   16bae:	440b      	add	r3, r1
   16bb0:	881b      	ldrh	r3, [r3, #0]
   16bb2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16bb6:	429a      	cmp	r2, r3
   16bb8:	d109      	bne.n	16bce <Det_GetApiName+0x52>
            StringPtr = Det_SearchApi( i , ApiId ); //Searching Api.
   16bba:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16bbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bc2:	4611      	mov	r1, r2
   16bc4:	4618      	mov	r0, r3
   16bc6:	f7ff ff0e 	bl	169e6 <Det_SearchApi>
   16bca:	9002      	str	r0, [sp, #8]
            break;
   16bcc:	e008      	b.n	16be0 <Det_GetApiName+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16bce:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bd2:	3301      	adds	r3, #1
   16bd4:	f88d 300f 	strb.w	r3, [sp, #15]
   16bd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bdc:	2b0a      	cmp	r3, #10
   16bde:	d9df      	bls.n	16ba0 <Det_GetApiName+0x24>
        }
    }

    return StringPtr;
   16be0:	9b02      	ldr	r3, [sp, #8]
}
   16be2:	4618      	mov	r0, r3
   16be4:	b005      	add	sp, #20
   16be6:	f85d fb04 	ldr.w	pc, [sp], #4
   16bea:	bf00      	nop
   16bec:	0001892c 	.word	0x0001892c

00016bf0 <Det_GetErrorMeaning>:
 * @param[in] ErrorId Error Id reported. 
 * @return StringPtr Pointer to string Error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetErrorMeaning( uint16 ModuleId, uint8 ErrorId ) {
   16bf0:	b500      	push	{lr}
   16bf2:	b085      	sub	sp, #20
   16bf4:	4603      	mov	r3, r0
   16bf6:	460a      	mov	r2, r1
   16bf8:	f8ad 3006 	strh.w	r3, [sp, #6]
   16bfc:	4613      	mov	r3, r2
   16bfe:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16c02:	2300      	movs	r3, #0
   16c04:	f88d 300f 	strb.w	r3, [sp, #15]
    const char * StringPtr = NULL_PTR;
   16c08:	2300      	movs	r3, #0
   16c0a:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16c0c:	2300      	movs	r3, #0
   16c0e:	f88d 300f 	strb.w	r3, [sp, #15]
   16c12:	e01b      	b.n	16c4c <Det_GetErrorMeaning+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16c14:	4912      	ldr	r1, [pc, #72]	; (16c60 <Det_GetErrorMeaning+0x70>)
   16c16:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16c1a:	4613      	mov	r3, r2
   16c1c:	005b      	lsls	r3, r3, #1
   16c1e:	4413      	add	r3, r2
   16c20:	00db      	lsls	r3, r3, #3
   16c22:	440b      	add	r3, r1
   16c24:	881b      	ldrh	r3, [r3, #0]
   16c26:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16c2a:	429a      	cmp	r2, r3
   16c2c:	d109      	bne.n	16c42 <Det_GetErrorMeaning+0x52>
            StringPtr = Det_SearchError( i, ErrorId );
   16c2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16c32:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c36:	4611      	mov	r1, r2
   16c38:	4618      	mov	r0, r3
   16c3a:	f7ff ff1f 	bl	16a7c <Det_SearchError>
   16c3e:	9002      	str	r0, [sp, #8]
            break;
   16c40:	e008      	b.n	16c54 <Det_GetErrorMeaning+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16c42:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c46:	3301      	adds	r3, #1
   16c48:	f88d 300f 	strb.w	r3, [sp, #15]
   16c4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c50:	2b0a      	cmp	r3, #10
   16c52:	d9df      	bls.n	16c14 <Det_GetErrorMeaning+0x24>
        }
    }

    return StringPtr;
   16c54:	9b02      	ldr	r3, [sp, #8]
}
   16c56:	4618      	mov	r0, r3
   16c58:	b005      	add	sp, #20
   16c5a:	f85d fb04 	ldr.w	pc, [sp], #4
   16c5e:	bf00      	nop
   16c60:	0001892c 	.word	0x0001892c

00016c64 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   16c64:	b510      	push	{r4, lr}
   16c66:	b088      	sub	sp, #32
   16c68:	4604      	mov	r4, r0
   16c6a:	4608      	mov	r0, r1
   16c6c:	4611      	mov	r1, r2
   16c6e:	461a      	mov	r2, r3
   16c70:	4623      	mov	r3, r4
   16c72:	f8ad 300e 	strh.w	r3, [sp, #14]
   16c76:	4603      	mov	r3, r0
   16c78:	f88d 300d 	strb.w	r3, [sp, #13]
   16c7c:	460b      	mov	r3, r1
   16c7e:	f88d 300c 	strb.w	r3, [sp, #12]
   16c82:	4613      	mov	r3, r2
   16c84:	f88d 300b 	strb.w	r3, [sp, #11]
    //local data.
    const char* Strings_error[3]; //Pointer to strings for the error message.

    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16c88:	f7e9 ffb0 	bl	bec <Sys_GetCoreID>
   16c8c:	4603      	mov	r3, r0
   16c8e:	9307      	str	r3, [sp, #28]

    Det_ModuleId[u32CoreId] = ModuleId;
   16c90:	4921      	ldr	r1, [pc, #132]	; (16d18 <Det_ReportError+0xb4>)
   16c92:	9b07      	ldr	r3, [sp, #28]
   16c94:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   16c98:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   16c9c:	4a1f      	ldr	r2, [pc, #124]	; (16d1c <Det_ReportError+0xb8>)
   16c9e:	9b07      	ldr	r3, [sp, #28]
   16ca0:	4413      	add	r3, r2
   16ca2:	f89d 200d 	ldrb.w	r2, [sp, #13]
   16ca6:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   16ca8:	4a1d      	ldr	r2, [pc, #116]	; (16d20 <Det_ReportError+0xbc>)
   16caa:	9b07      	ldr	r3, [sp, #28]
   16cac:	4413      	add	r3, r2
   16cae:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16cb2:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   16cb4:	4a1b      	ldr	r2, [pc, #108]	; (16d24 <Det_ReportError+0xc0>)
   16cb6:	9b07      	ldr	r3, [sp, #28]
   16cb8:	4413      	add	r3, r2
   16cba:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16cbe:	701a      	strb	r2, [r3, #0]

    //Obtaining strings for error message.
    Strings_error[0] = Det_GetModuleName( ModuleId );
   16cc0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16cc4:	4618      	mov	r0, r3
   16cc6:	f7ff ff25 	bl	16b14 <Det_GetModuleName>
   16cca:	4603      	mov	r3, r0
   16ccc:	9304      	str	r3, [sp, #16]
    Strings_error[1] = Det_GetApiName( ModuleId, ApiId );
   16cce:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16cd2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16cd6:	4611      	mov	r1, r2
   16cd8:	4618      	mov	r0, r3
   16cda:	f7ff ff4f 	bl	16b7c <Det_GetApiName>
   16cde:	4603      	mov	r3, r0
   16ce0:	9305      	str	r3, [sp, #20]
    Strings_error[2] = Det_GetErrorMeaning( ModuleId, ErrorId );
   16ce2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16ce6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16cea:	4611      	mov	r1, r2
   16cec:	4618      	mov	r0, r3
   16cee:	f7ff ff7f 	bl	16bf0 <Det_GetErrorMeaning>
   16cf2:	4603      	mov	r3, r0
   16cf4:	9306      	str	r3, [sp, #24]

    SEGGER_RTT_printf( 0, "Error: Error in %s in function %s with the instance %d, %s\n", 
   16cf6:	9904      	ldr	r1, [sp, #16]
   16cf8:	9805      	ldr	r0, [sp, #20]
   16cfa:	f89d 300d 	ldrb.w	r3, [sp, #13]
   16cfe:	9a06      	ldr	r2, [sp, #24]
   16d00:	9201      	str	r2, [sp, #4]
   16d02:	9300      	str	r3, [sp, #0]
   16d04:	4603      	mov	r3, r0
   16d06:	460a      	mov	r2, r1
   16d08:	4907      	ldr	r1, [pc, #28]	; (16d28 <Det_ReportError+0xc4>)
   16d0a:	2000      	movs	r0, #0
   16d0c:	f7ea fc74 	bl	15f8 <SEGGER_RTT_printf>
    Strings_error[0], Strings_error[1], InstanceId, Strings_error[2] );

    return E_OK;
   16d10:	2300      	movs	r3, #0
}
   16d12:	4618      	mov	r0, r3
   16d14:	b008      	add	sp, #32
   16d16:	bd10      	pop	{r4, pc}
   16d18:	1fff98e4 	.word	0x1fff98e4
   16d1c:	1fff98bc 	.word	0x1fff98bc
   16d20:	1fff98c0 	.word	0x1fff98c0
   16d24:	1fff98c4 	.word	0x1fff98c4
   16d28:	00017d14 	.word	0x00017d14

00016d2c <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   16d2c:	b510      	push	{r4, lr}
   16d2e:	b084      	sub	sp, #16
   16d30:	4604      	mov	r4, r0
   16d32:	4608      	mov	r0, r1
   16d34:	4611      	mov	r1, r2
   16d36:	461a      	mov	r2, r3
   16d38:	4623      	mov	r3, r4
   16d3a:	f8ad 3006 	strh.w	r3, [sp, #6]
   16d3e:	4603      	mov	r3, r0
   16d40:	f88d 3005 	strb.w	r3, [sp, #5]
   16d44:	460b      	mov	r3, r1
   16d46:	f88d 3004 	strb.w	r3, [sp, #4]
   16d4a:	4613      	mov	r3, r2
   16d4c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d50:	f7e9 ff4c 	bl	bec <Sys_GetCoreID>
   16d54:	4603      	mov	r3, r0
   16d56:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   16d58:	490d      	ldr	r1, [pc, #52]	; (16d90 <Det_ReportRuntimeError+0x64>)
   16d5a:	9b03      	ldr	r3, [sp, #12]
   16d5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16d60:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   16d64:	4a0b      	ldr	r2, [pc, #44]	; (16d94 <Det_ReportRuntimeError+0x68>)
   16d66:	9b03      	ldr	r3, [sp, #12]
   16d68:	4413      	add	r3, r2
   16d6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16d6e:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   16d70:	4a09      	ldr	r2, [pc, #36]	; (16d98 <Det_ReportRuntimeError+0x6c>)
   16d72:	9b03      	ldr	r3, [sp, #12]
   16d74:	4413      	add	r3, r2
   16d76:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16d7a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   16d7c:	4a07      	ldr	r2, [pc, #28]	; (16d9c <Det_ReportRuntimeError+0x70>)
   16d7e:	9b03      	ldr	r3, [sp, #12]
   16d80:	4413      	add	r3, r2
   16d82:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16d86:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16d88:	2300      	movs	r3, #0
}
   16d8a:	4618      	mov	r0, r3
   16d8c:	b004      	add	sp, #16
   16d8e:	bd10      	pop	{r4, pc}
   16d90:	1fff98e8 	.word	0x1fff98e8
   16d94:	1fff98c8 	.word	0x1fff98c8
   16d98:	1fff98cc 	.word	0x1fff98cc
   16d9c:	1fff98d0 	.word	0x1fff98d0

00016da0 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   16da0:	b510      	push	{r4, lr}
   16da2:	b084      	sub	sp, #16
   16da4:	4604      	mov	r4, r0
   16da6:	4608      	mov	r0, r1
   16da8:	4611      	mov	r1, r2
   16daa:	461a      	mov	r2, r3
   16dac:	4623      	mov	r3, r4
   16dae:	f8ad 3006 	strh.w	r3, [sp, #6]
   16db2:	4603      	mov	r3, r0
   16db4:	f88d 3005 	strb.w	r3, [sp, #5]
   16db8:	460b      	mov	r3, r1
   16dba:	f88d 3004 	strb.w	r3, [sp, #4]
   16dbe:	4613      	mov	r3, r2
   16dc0:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16dc4:	f7e9 ff12 	bl	bec <Sys_GetCoreID>
   16dc8:	4603      	mov	r3, r0
   16dca:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   16dcc:	490d      	ldr	r1, [pc, #52]	; (16e04 <Det_ReportTransientFault+0x64>)
   16dce:	9b03      	ldr	r3, [sp, #12]
   16dd0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16dd4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   16dd8:	4a0b      	ldr	r2, [pc, #44]	; (16e08 <Det_ReportTransientFault+0x68>)
   16dda:	9b03      	ldr	r3, [sp, #12]
   16ddc:	4413      	add	r3, r2
   16dde:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16de2:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   16de4:	4a09      	ldr	r2, [pc, #36]	; (16e0c <Det_ReportTransientFault+0x6c>)
   16de6:	9b03      	ldr	r3, [sp, #12]
   16de8:	4413      	add	r3, r2
   16dea:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16dee:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   16df0:	4a07      	ldr	r2, [pc, #28]	; (16e10 <Det_ReportTransientFault+0x70>)
   16df2:	9b03      	ldr	r3, [sp, #12]
   16df4:	4413      	add	r3, r2
   16df6:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16dfa:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16dfc:	2300      	movs	r3, #0
}
   16dfe:	4618      	mov	r0, r3
   16e00:	b004      	add	sp, #16
   16e02:	bd10      	pop	{r4, pc}
   16e04:	1fff98e0 	.word	0x1fff98e0
   16e08:	1fff98d4 	.word	0x1fff98d4
   16e0c:	1fff98d8 	.word	0x1fff98d8
   16e10:	1fff98dc 	.word	0x1fff98dc

00016e14 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   16e14:	bf00      	nop
   16e16:	4770      	bx	lr

00016e18 <CanIf_Init>:
 * @brief This function initialices the CanIf Driver.
 * 
 * @param ConfigPtr Pointer to driver control structure. 
 */
void CanIf_Init(const CanIf_ConfigType * ConfigPtr)
{
   16e18:	b082      	sub	sp, #8
   16e1a:	9001      	str	r0, [sp, #4]
    #if (STD_ON == CANIF_PRECOMPILE_SUPPORT)
    CanIf_ConfigPtr = &CanIf_Config;
    (void)ConfigPtr;
    #else
    CanIf_ConfigPtr = ConfigPtr;
   16e1c:	4a02      	ldr	r2, [pc, #8]	; (16e28 <CanIf_Init+0x10>)
   16e1e:	9b01      	ldr	r3, [sp, #4]
   16e20:	6013      	str	r3, [r2, #0]
    #endif
}
   16e22:	bf00      	nop
   16e24:	b002      	add	sp, #8
   16e26:	4770      	bx	lr
   16e28:	1fff98ec 	.word	0x1fff98ec

00016e2c <CanIf_Transmit>:
Std_ReturnType CanIf_Transmit
(
    PduIdType CanTxPduId,
    const PduInfoType * PduInfoPtr
)
{
   16e2c:	b500      	push	{lr}
   16e2e:	b08b      	sub	sp, #44	; 0x2c
   16e30:	4603      	mov	r3, r0
   16e32:	9100      	str	r1, [sp, #0]
   16e34:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType RetVal = E_NOT_OK;
   16e38:	2301      	movs	r3, #1
   16e3a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Can_HwHandleType CanHth = 0U;
   16e3e:	2300      	movs	r3, #0
   16e40:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Can_PduType PduInfo;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   16e44:	2300      	movs	r3, #0
   16e46:	9308      	str	r3, [sp, #32]
    uint8 CanIfControllerId = 0U;
   16e48:	2300      	movs	r3, #0
   16e4a:	f88d 301f 	strb.w	r3, [sp, #31]
    const CanIf_CtrlPCConfigType * CanIfController = NULL_PTR;
   16e4e:	2300      	movs	r3, #0
   16e50:	9306      	str	r3, [sp, #24]

    if (NULL_PTR != CanIf_ConfigPtr)
   16e52:	4b31      	ldr	r3, [pc, #196]	; (16f18 <CanIf_Transmit+0xec>)
   16e54:	681b      	ldr	r3, [r3, #0]
   16e56:	2b00      	cmp	r3, #0
   16e58:	d057      	beq.n	16f0a <CanIf_Transmit+0xde>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   16e5a:	4b2f      	ldr	r3, [pc, #188]	; (16f18 <CanIf_Transmit+0xec>)
   16e5c:	681b      	ldr	r3, [r3, #0]
   16e5e:	785b      	ldrb	r3, [r3, #1]
   16e60:	b29b      	uxth	r3, r3
   16e62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16e66:	429a      	cmp	r2, r3
   16e68:	d24f      	bcs.n	16f0a <CanIf_Transmit+0xde>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   16e6a:	4b2b      	ldr	r3, [pc, #172]	; (16f18 <CanIf_Transmit+0xec>)
   16e6c:	681b      	ldr	r3, [r3, #0]
   16e6e:	68d9      	ldr	r1, [r3, #12]
   16e70:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16e74:	4613      	mov	r3, r2
   16e76:	009b      	lsls	r3, r3, #2
   16e78:	4413      	add	r3, r2
   16e7a:	009b      	lsls	r3, r3, #2
   16e7c:	440b      	add	r3, r1
   16e7e:	9308      	str	r3, [sp, #32]
            CanIfControllerId = TxPduInfo->CanIfCtrlId;
   16e80:	9b08      	ldr	r3, [sp, #32]
   16e82:	7b9b      	ldrb	r3, [r3, #14]
   16e84:	f88d 301f 	strb.w	r3, [sp, #31]
            CanIfController = &CanIf_PCConfig.CanIfCtrlConfigPtr[CanIfControllerId];
   16e88:	4b24      	ldr	r3, [pc, #144]	; (16f1c <CanIf_Transmit+0xf0>)
   16e8a:	685a      	ldr	r2, [r3, #4]
   16e8c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16e90:	00db      	lsls	r3, r3, #3
   16e92:	4413      	add	r3, r2
   16e94:	9306      	str	r3, [sp, #24]

            CanHth = TxPduInfo->CanHth;
   16e96:	9b08      	ldr	r3, [sp, #32]
   16e98:	899b      	ldrh	r3, [r3, #12]
   16e9a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

            PduInfo.id = TxPduInfo->CanId;
   16e9e:	9b08      	ldr	r3, [sp, #32]
   16ea0:	685b      	ldr	r3, [r3, #4]
   16ea2:	9303      	str	r3, [sp, #12]
            /* Convert Id by adding two most significant bits specify the frame type */
            switch (TxPduInfo->CanFrameType)
   16ea4:	9b08      	ldr	r3, [sp, #32]
   16ea6:	689b      	ldr	r3, [r3, #8]
   16ea8:	2b03      	cmp	r3, #3
   16eaa:	d010      	beq.n	16ece <CanIf_Transmit+0xa2>
   16eac:	2b03      	cmp	r3, #3
   16eae:	d813      	bhi.n	16ed8 <CanIf_Transmit+0xac>
   16eb0:	2b00      	cmp	r3, #0
   16eb2:	d002      	beq.n	16eba <CanIf_Transmit+0x8e>
   16eb4:	2b01      	cmp	r3, #1
   16eb6:	d005      	beq.n	16ec4 <CanIf_Transmit+0x98>
                    PduInfo.id |= 0x40000000U;
                    break;
                }
                default:
                {
                    break;
   16eb8:	e00e      	b.n	16ed8 <CanIf_Transmit+0xac>
                    PduInfo.id |= 0x80000000U;
   16eba:	9b03      	ldr	r3, [sp, #12]
   16ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16ec0:	9303      	str	r3, [sp, #12]
                    break;
   16ec2:	e00a      	b.n	16eda <CanIf_Transmit+0xae>
                    PduInfo.id |= 0xC0000000U;
   16ec4:	9b03      	ldr	r3, [sp, #12]
   16ec6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   16eca:	9303      	str	r3, [sp, #12]
                    break;
   16ecc:	e005      	b.n	16eda <CanIf_Transmit+0xae>
                    PduInfo.id |= 0x40000000U;
   16ece:	9b03      	ldr	r3, [sp, #12]
   16ed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16ed4:	9303      	str	r3, [sp, #12]
                    break;
   16ed6:	e000      	b.n	16eda <CanIf_Transmit+0xae>
                    break;
   16ed8:	bf00      	nop
                }
            }
            
            PduInfo.length = (uint8)(PduInfoPtr->SduLength);
   16eda:	9b00      	ldr	r3, [sp, #0]
   16edc:	689b      	ldr	r3, [r3, #8]
   16ede:	b2db      	uxtb	r3, r3
   16ee0:	f88d 3012 	strb.w	r3, [sp, #18]
            PduInfo.sdu = PduInfoPtr->SduDataPtr;
   16ee4:	9b00      	ldr	r3, [sp, #0]
   16ee6:	681b      	ldr	r3, [r3, #0]
   16ee8:	9305      	str	r3, [sp, #20]
            PduInfo.swPduHandle = CanTxPduId;
   16eea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16eee:	f8ad 3010 	strh.w	r3, [sp, #16]

            RetVal = CanIfController->CanDrvConfigPtr->CanApi->CanWrite(CanHth, &PduInfo); 
   16ef2:	9b06      	ldr	r3, [sp, #24]
   16ef4:	685b      	ldr	r3, [r3, #4]
   16ef6:	685b      	ldr	r3, [r3, #4]
   16ef8:	681b      	ldr	r3, [r3, #0]
   16efa:	a903      	add	r1, sp, #12
   16efc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   16f00:	4610      	mov	r0, r2
   16f02:	4798      	blx	r3
   16f04:	4603      	mov	r3, r0
   16f06:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
    }
    return RetVal;
   16f0a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
   16f0e:	4618      	mov	r0, r3
   16f10:	b00b      	add	sp, #44	; 0x2c
   16f12:	f85d fb04 	ldr.w	pc, [sp], #4
   16f16:	bf00      	nop
   16f18:	1fff98ec 	.word	0x1fff98ec
   16f1c:	00018a6c 	.word	0x00018a6c

00016f20 <CanIf_TxConfirmation>:

void CanIf_TxConfirmation
(
    PduIdType CanTxPduId
)
{
   16f20:	b500      	push	{lr}
   16f22:	b085      	sub	sp, #20
   16f24:	4603      	mov	r3, r0
   16f26:	f8ad 3006 	strh.w	r3, [sp, #6]
    PduIdType UserPduId;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   16f2a:	2300      	movs	r3, #0
   16f2c:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != CanIf_ConfigPtr)
   16f2e:	4b15      	ldr	r3, [pc, #84]	; (16f84 <CanIf_TxConfirmation+0x64>)
   16f30:	681b      	ldr	r3, [r3, #0]
   16f32:	2b00      	cmp	r3, #0
   16f34:	d021      	beq.n	16f7a <CanIf_TxConfirmation+0x5a>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   16f36:	4b13      	ldr	r3, [pc, #76]	; (16f84 <CanIf_TxConfirmation+0x64>)
   16f38:	681b      	ldr	r3, [r3, #0]
   16f3a:	785b      	ldrb	r3, [r3, #1]
   16f3c:	b29b      	uxth	r3, r3
   16f3e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16f42:	429a      	cmp	r2, r3
   16f44:	d219      	bcs.n	16f7a <CanIf_TxConfirmation+0x5a>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   16f46:	4b0f      	ldr	r3, [pc, #60]	; (16f84 <CanIf_TxConfirmation+0x64>)
   16f48:	681b      	ldr	r3, [r3, #0]
   16f4a:	68d9      	ldr	r1, [r3, #12]
   16f4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16f50:	4613      	mov	r3, r2
   16f52:	009b      	lsls	r3, r3, #2
   16f54:	4413      	add	r3, r2
   16f56:	009b      	lsls	r3, r3, #2
   16f58:	440b      	add	r3, r1
   16f5a:	9303      	str	r3, [sp, #12]

            if (NULL_PTR != TxPduInfo->UserTxConfirmation)
   16f5c:	9b03      	ldr	r3, [sp, #12]
   16f5e:	691b      	ldr	r3, [r3, #16]
   16f60:	2b00      	cmp	r3, #0
   16f62:	d00a      	beq.n	16f7a <CanIf_TxConfirmation+0x5a>
            {
                UserPduId = TxPduInfo->PduId;
   16f64:	9b03      	ldr	r3, [sp, #12]
   16f66:	881b      	ldrh	r3, [r3, #0]
   16f68:	f8ad 300a 	strh.w	r3, [sp, #10]
                TxPduInfo->UserTxConfirmation(UserPduId, E_OK);
   16f6c:	9b03      	ldr	r3, [sp, #12]
   16f6e:	691b      	ldr	r3, [r3, #16]
   16f70:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   16f74:	2100      	movs	r1, #0
   16f76:	4610      	mov	r0, r2
   16f78:	4798      	blx	r3
            }
        }
    }
}
   16f7a:	bf00      	nop
   16f7c:	b005      	add	sp, #20
   16f7e:	f85d fb04 	ldr.w	pc, [sp], #4
   16f82:	bf00      	nop
   16f84:	1fff98ec 	.word	0x1fff98ec

00016f88 <CanIf_RxIndication>:
void CanIf_RxIndication
(
    const Can_HwType * Mailbox,
    const PduInfoType * PduInfoPtr
)
{
   16f88:	b500      	push	{lr}
   16f8a:	b089      	sub	sp, #36	; 0x24
   16f8c:	9001      	str	r0, [sp, #4]
   16f8e:	9100      	str	r1, [sp, #0]
    PduIdType UserPduId = 0U;
   16f90:	2300      	movs	r3, #0
   16f92:	f8ad 301e 	strh.w	r3, [sp, #30]
    PduInfoType PduInfo;
    const CanIf_RxPduType * RxPduInfo = NULL_PTR;
   16f96:	2300      	movs	r3, #0
   16f98:	9306      	str	r3, [sp, #24]
    uint8 CanDrvId = 0U;
   16f9a:	2300      	movs	r3, #0
   16f9c:	f88d 3017 	strb.w	r3, [sp, #23]

    if (NULL_PTR != CanIf_ConfigPtr)
   16fa0:	4b2c      	ldr	r3, [pc, #176]	; (17054 <CanIf_RxIndication+0xcc>)
   16fa2:	681b      	ldr	r3, [r3, #0]
   16fa4:	2b00      	cmp	r3, #0
   16fa6:	d050      	beq.n	1704a <CanIf_RxIndication+0xc2>
    {
        if ((Mailbox->ControllerId) < (CanIf_PCConfig.NumOfCtrl))
   16fa8:	9b01      	ldr	r3, [sp, #4]
   16faa:	799a      	ldrb	r2, [r3, #6]
   16fac:	4b2a      	ldr	r3, [pc, #168]	; (17058 <CanIf_RxIndication+0xd0>)
   16fae:	781b      	ldrb	r3, [r3, #0]
   16fb0:	429a      	cmp	r2, r3
   16fb2:	d24a      	bcs.n	1704a <CanIf_RxIndication+0xc2>
        {
            if ((Mailbox->Hoh) < (CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->NumCanHoh))
   16fb4:	9b01      	ldr	r3, [sp, #4]
   16fb6:	889a      	ldrh	r2, [r3, #4]
   16fb8:	4b27      	ldr	r3, [pc, #156]	; (17058 <CanIf_RxIndication+0xd0>)
   16fba:	6859      	ldr	r1, [r3, #4]
   16fbc:	9b01      	ldr	r3, [sp, #4]
   16fbe:	799b      	ldrb	r3, [r3, #6]
   16fc0:	00db      	lsls	r3, r3, #3
   16fc2:	440b      	add	r3, r1
   16fc4:	685b      	ldr	r3, [r3, #4]
   16fc6:	885b      	ldrh	r3, [r3, #2]
   16fc8:	429a      	cmp	r2, r3
   16fca:	d23e      	bcs.n	1704a <CanIf_RxIndication+0xc2>
            {
                CanDrvId = CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->CanDrvId;
   16fcc:	4b22      	ldr	r3, [pc, #136]	; (17058 <CanIf_RxIndication+0xd0>)
   16fce:	685a      	ldr	r2, [r3, #4]
   16fd0:	9b01      	ldr	r3, [sp, #4]
   16fd2:	799b      	ldrb	r3, [r3, #6]
   16fd4:	00db      	lsls	r3, r3, #3
   16fd6:	4413      	add	r3, r2
   16fd8:	685b      	ldr	r3, [r3, #4]
   16fda:	781b      	ldrb	r3, [r3, #0]
   16fdc:	f88d 3017 	strb.w	r3, [sp, #23]
                RxPduInfo = CanIf_ConfigPtr->CanDrvConfigPtr[CanDrvId]->HohToRxPduMappingPtr[Mailbox->Hoh];
   16fe0:	4b1c      	ldr	r3, [pc, #112]	; (17054 <CanIf_RxIndication+0xcc>)
   16fe2:	681b      	ldr	r3, [r3, #0]
   16fe4:	685a      	ldr	r2, [r3, #4]
   16fe6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   16fea:	009b      	lsls	r3, r3, #2
   16fec:	4413      	add	r3, r2
   16fee:	681b      	ldr	r3, [r3, #0]
   16ff0:	681a      	ldr	r2, [r3, #0]
   16ff2:	9b01      	ldr	r3, [sp, #4]
   16ff4:	889b      	ldrh	r3, [r3, #4]
   16ff6:	009b      	lsls	r3, r3, #2
   16ff8:	4413      	add	r3, r2
   16ffa:	681b      	ldr	r3, [r3, #0]
   16ffc:	9306      	str	r3, [sp, #24]
                
                /* Will discard the Can HOH if it was not referred by any CanIf RxPDU */
                if (NULL_PTR != RxPduInfo)
   16ffe:	9b06      	ldr	r3, [sp, #24]
   17000:	2b00      	cmp	r3, #0
   17002:	d022      	beq.n	1704a <CanIf_RxIndication+0xc2>
                {
                    if (NULL_PTR != RxPduInfo->UserRxIndication)
   17004:	9b06      	ldr	r3, [sp, #24]
   17006:	689b      	ldr	r3, [r3, #8]
   17008:	2b00      	cmp	r3, #0
   1700a:	d01e      	beq.n	1704a <CanIf_RxIndication+0xc2>
                    {
                        UserPduId = RxPduInfo->PduId;
   1700c:	9b06      	ldr	r3, [sp, #24]
   1700e:	881b      	ldrh	r3, [r3, #0]
   17010:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if ((TRUE == RxPduInfo->PduLengthCheck) && (PduInfoPtr->SduLength > (RxPduInfo->PduLength)))
   17014:	9b06      	ldr	r3, [sp, #24]
   17016:	789b      	ldrb	r3, [r3, #2]
   17018:	2b00      	cmp	r3, #0
   1701a:	d009      	beq.n	17030 <CanIf_RxIndication+0xa8>
   1701c:	9b00      	ldr	r3, [sp, #0]
   1701e:	689b      	ldr	r3, [r3, #8]
   17020:	9a06      	ldr	r2, [sp, #24]
   17022:	8892      	ldrh	r2, [r2, #4]
   17024:	4293      	cmp	r3, r2
   17026:	d903      	bls.n	17030 <CanIf_RxIndication+0xa8>
                        {
                            PduInfo.SduLength = RxPduInfo->PduLength; /* Truncates exceeded data as configured on GUI */
   17028:	9b06      	ldr	r3, [sp, #24]
   1702a:	889b      	ldrh	r3, [r3, #4]
   1702c:	9304      	str	r3, [sp, #16]
   1702e:	e002      	b.n	17036 <CanIf_RxIndication+0xae>
                        }
                        else
                        {
                            PduInfo.SduLength = PduInfoPtr->SduLength;
   17030:	9b00      	ldr	r3, [sp, #0]
   17032:	689b      	ldr	r3, [r3, #8]
   17034:	9304      	str	r3, [sp, #16]
                        }
                        PduInfo.SduDataPtr = PduInfoPtr->SduDataPtr;
   17036:	9b00      	ldr	r3, [sp, #0]
   17038:	681b      	ldr	r3, [r3, #0]
   1703a:	9302      	str	r3, [sp, #8]
                        RxPduInfo->UserRxIndication(UserPduId, &PduInfo);
   1703c:	9b06      	ldr	r3, [sp, #24]
   1703e:	689b      	ldr	r3, [r3, #8]
   17040:	a902      	add	r1, sp, #8
   17042:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   17046:	4610      	mov	r0, r2
   17048:	4798      	blx	r3
                    }
                }
            }
        }
    }
}
   1704a:	bf00      	nop
   1704c:	b009      	add	sp, #36	; 0x24
   1704e:	f85d fb04 	ldr.w	pc, [sp], #4
   17052:	bf00      	nop
   17054:	1fff98ec 	.word	0x1fff98ec
   17058:	00018a6c 	.word	0x00018a6c

0001705c <CanIf_ControllerModeIndication>:
void CanIf_ControllerModeIndication
( 
    uint8 ControllerId, 
    Can_ControllerStateType ControllerMode 
)
{
   1705c:	b082      	sub	sp, #8
   1705e:	4603      	mov	r3, r0
   17060:	9100      	str	r1, [sp, #0]
   17062:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId; 
    (void)ControllerMode;
}
   17066:	bf00      	nop
   17068:	b002      	add	sp, #8
   1706a:	4770      	bx	lr

0001706c <CanIf_ControllerBusOff>:

void CanIf_ControllerBusOff
(
    uint8 ControllerId
)
{
   1706c:	b082      	sub	sp, #8
   1706e:	4603      	mov	r3, r0
   17070:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
   17074:	bf00      	nop
   17076:	b002      	add	sp, #8
   17078:	4770      	bx	lr

0001707a <CanIf_SetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param Transition Desired state.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_SetControllerMode( uint8 Controller, Can_ControllerStateType Transition ) {
   1707a:	b500      	push	{lr}
   1707c:	b087      	sub	sp, #28
   1707e:	4603      	mov	r3, r0
   17080:	9100      	str	r1, [sp, #0]
   17082:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17086:	2301      	movs	r3, #1
   17088:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   1708c:	2300      	movs	r3, #0
   1708e:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   17090:	2300      	movs	r3, #0
   17092:	f88d 300f 	strb.w	r3, [sp, #15]


    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17096:	4b13      	ldr	r3, [pc, #76]	; (170e4 <CanIf_SetControllerMode+0x6a>)
   17098:	681b      	ldr	r3, [r3, #0]
   1709a:	2b00      	cmp	r3, #0
   1709c:	d01c      	beq.n	170d8 <CanIf_SetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   1709e:	4b12      	ldr	r3, [pc, #72]	; (170e8 <CanIf_SetControllerMode+0x6e>)
   170a0:	781b      	ldrb	r3, [r3, #0]
   170a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   170a6:	429a      	cmp	r2, r3
   170a8:	d216      	bcs.n	170d8 <CanIf_SetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   170aa:	4b0f      	ldr	r3, [pc, #60]	; (170e8 <CanIf_SetControllerMode+0x6e>)
   170ac:	685a      	ldr	r2, [r3, #4]
   170ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   170b2:	00db      	lsls	r3, r3, #3
   170b4:	4413      	add	r3, r2
   170b6:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   170b8:	9b04      	ldr	r3, [sp, #16]
   170ba:	785b      	ldrb	r3, [r3, #1]
   170bc:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanSetMode( CanController_ID, Transition );   //Calling Can Driver Api.
   170c0:	9b04      	ldr	r3, [sp, #16]
   170c2:	685b      	ldr	r3, [r3, #4]
   170c4:	685b      	ldr	r3, [r3, #4]
   170c6:	685b      	ldr	r3, [r3, #4]
   170c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   170cc:	9900      	ldr	r1, [sp, #0]
   170ce:	4610      	mov	r0, r2
   170d0:	4798      	blx	r3
   170d2:	4603      	mov	r3, r0
   170d4:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   170d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   170dc:	4618      	mov	r0, r3
   170de:	b007      	add	sp, #28
   170e0:	f85d fb04 	ldr.w	pc, [sp], #4
   170e4:	1fff98ec 	.word	0x1fff98ec
   170e8:	00018a6c 	.word	0x00018a6c

000170ec <CanIf_EnableControllerInterrupts>:
/**
 * @brief This function enables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_EnableControllerInterrupts( uint8 Controller ) {
   170ec:	b500      	push	{lr}
   170ee:	b085      	sub	sp, #20
   170f0:	4603      	mov	r3, r0
   170f2:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   170f6:	2300      	movs	r3, #0
   170f8:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   170fa:	2300      	movs	r3, #0
   170fc:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17100:	4b10      	ldr	r3, [pc, #64]	; (17144 <CanIf_EnableControllerInterrupts+0x58>)
   17102:	681b      	ldr	r3, [r3, #0]
   17104:	2b00      	cmp	r3, #0
   17106:	d018      	beq.n	1713a <CanIf_EnableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17108:	4b0f      	ldr	r3, [pc, #60]	; (17148 <CanIf_EnableControllerInterrupts+0x5c>)
   1710a:	781b      	ldrb	r3, [r3, #0]
   1710c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17110:	429a      	cmp	r2, r3
   17112:	d212      	bcs.n	1713a <CanIf_EnableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17114:	4b0c      	ldr	r3, [pc, #48]	; (17148 <CanIf_EnableControllerInterrupts+0x5c>)
   17116:	685a      	ldr	r2, [r3, #4]
   17118:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1711c:	00db      	lsls	r3, r3, #3
   1711e:	4413      	add	r3, r2
   17120:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17122:	9b03      	ldr	r3, [sp, #12]
   17124:	785b      	ldrb	r3, [r3, #1]
   17126:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanEnableInterrupts( CanController_ID );   //Calling Can Driver Api.
   1712a:	9b03      	ldr	r3, [sp, #12]
   1712c:	685b      	ldr	r3, [r3, #4]
   1712e:	685b      	ldr	r3, [r3, #4]
   17130:	689b      	ldr	r3, [r3, #8]
   17132:	f89d 200b 	ldrb.w	r2, [sp, #11]
   17136:	4610      	mov	r0, r2
   17138:	4798      	blx	r3
        }
    }
}
   1713a:	bf00      	nop
   1713c:	b005      	add	sp, #20
   1713e:	f85d fb04 	ldr.w	pc, [sp], #4
   17142:	bf00      	nop
   17144:	1fff98ec 	.word	0x1fff98ec
   17148:	00018a6c 	.word	0x00018a6c

0001714c <CanIf_DisableControllerInterrupts>:
/**
 * @brief This function disables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_DisableControllerInterrupts( uint8 Controller ) {
   1714c:	b500      	push	{lr}
   1714e:	b085      	sub	sp, #20
   17150:	4603      	mov	r3, r0
   17152:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17156:	2300      	movs	r3, #0
   17158:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   1715a:	2300      	movs	r3, #0
   1715c:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17160:	4b10      	ldr	r3, [pc, #64]	; (171a4 <CanIf_DisableControllerInterrupts+0x58>)
   17162:	681b      	ldr	r3, [r3, #0]
   17164:	2b00      	cmp	r3, #0
   17166:	d018      	beq.n	1719a <CanIf_DisableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17168:	4b0f      	ldr	r3, [pc, #60]	; (171a8 <CanIf_DisableControllerInterrupts+0x5c>)
   1716a:	781b      	ldrb	r3, [r3, #0]
   1716c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17170:	429a      	cmp	r2, r3
   17172:	d212      	bcs.n	1719a <CanIf_DisableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17174:	4b0c      	ldr	r3, [pc, #48]	; (171a8 <CanIf_DisableControllerInterrupts+0x5c>)
   17176:	685a      	ldr	r2, [r3, #4]
   17178:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1717c:	00db      	lsls	r3, r3, #3
   1717e:	4413      	add	r3, r2
   17180:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17182:	9b03      	ldr	r3, [sp, #12]
   17184:	785b      	ldrb	r3, [r3, #1]
   17186:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanDisableInterrupts( CanController_ID );   //Calling Can Driver Api.
   1718a:	9b03      	ldr	r3, [sp, #12]
   1718c:	685b      	ldr	r3, [r3, #4]
   1718e:	685b      	ldr	r3, [r3, #4]
   17190:	68db      	ldr	r3, [r3, #12]
   17192:	f89d 200b 	ldrb.w	r2, [sp, #11]
   17196:	4610      	mov	r0, r2
   17198:	4798      	blx	r3
        }
    }
}
   1719a:	bf00      	nop
   1719c:	b005      	add	sp, #20
   1719e:	f85d fb04 	ldr.w	pc, [sp], #4
   171a2:	bf00      	nop
   171a4:	1fff98ec 	.word	0x1fff98ec
   171a8:	00018a6c 	.word	0x00018a6c

000171ac <CanIf_GetControllerErrorState>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param ErrorStatePtr Pointer to variable to store the actual error state of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerErrorState( uint8 ControllerId, Can_ErrorStateType *ErrorStatePtr) {
   171ac:	b500      	push	{lr}
   171ae:	b087      	sub	sp, #28
   171b0:	4603      	mov	r3, r0
   171b2:	9100      	str	r1, [sp, #0]
   171b4:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   171b8:	2301      	movs	r3, #1
   171ba:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   171be:	2300      	movs	r3, #0
   171c0:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   171c2:	2300      	movs	r3, #0
   171c4:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   171c8:	4b13      	ldr	r3, [pc, #76]	; (17218 <CanIf_GetControllerErrorState+0x6c>)
   171ca:	681b      	ldr	r3, [r3, #0]
   171cc:	2b00      	cmp	r3, #0
   171ce:	d01c      	beq.n	1720a <CanIf_GetControllerErrorState+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   171d0:	4b12      	ldr	r3, [pc, #72]	; (1721c <CanIf_GetControllerErrorState+0x70>)
   171d2:	781b      	ldrb	r3, [r3, #0]
   171d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   171d8:	429a      	cmp	r2, r3
   171da:	d216      	bcs.n	1720a <CanIf_GetControllerErrorState+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   171dc:	4b0f      	ldr	r3, [pc, #60]	; (1721c <CanIf_GetControllerErrorState+0x70>)
   171de:	685a      	ldr	r2, [r3, #4]
   171e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   171e4:	00db      	lsls	r3, r3, #3
   171e6:	4413      	add	r3, r2
   171e8:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   171ea:	9b04      	ldr	r3, [sp, #16]
   171ec:	785b      	ldrb	r3, [r3, #1]
   171ee:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetErrorState( CanController_ID, ErrorStatePtr );   //Calling Can Driver Api.
   171f2:	9b04      	ldr	r3, [sp, #16]
   171f4:	685b      	ldr	r3, [r3, #4]
   171f6:	685b      	ldr	r3, [r3, #4]
   171f8:	691b      	ldr	r3, [r3, #16]
   171fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   171fe:	9900      	ldr	r1, [sp, #0]
   17200:	4610      	mov	r0, r2
   17202:	4798      	blx	r3
   17204:	4603      	mov	r3, r0
   17206:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   1720a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   1720e:	4618      	mov	r0, r3
   17210:	b007      	add	sp, #28
   17212:	f85d fb04 	ldr.w	pc, [sp], #4
   17216:	bf00      	nop
   17218:	1fff98ec 	.word	0x1fff98ec
   1721c:	00018a6c 	.word	0x00018a6c

00017220 <CanIf_GetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param ControllerModePtr Pointer to variable to store the actual state of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerMode( uint8 Controller, Can_ControllerStateType *ControllerModePtr ) {
   17220:	b500      	push	{lr}
   17222:	b087      	sub	sp, #28
   17224:	4603      	mov	r3, r0
   17226:	9100      	str	r1, [sp, #0]
   17228:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   1722c:	2301      	movs	r3, #1
   1722e:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17232:	2300      	movs	r3, #0
   17234:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   17236:	2300      	movs	r3, #0
   17238:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   1723c:	4b13      	ldr	r3, [pc, #76]	; (1728c <CanIf_GetControllerMode+0x6c>)
   1723e:	681b      	ldr	r3, [r3, #0]
   17240:	2b00      	cmp	r3, #0
   17242:	d01c      	beq.n	1727e <CanIf_GetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17244:	4b12      	ldr	r3, [pc, #72]	; (17290 <CanIf_GetControllerMode+0x70>)
   17246:	781b      	ldrb	r3, [r3, #0]
   17248:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1724c:	429a      	cmp	r2, r3
   1724e:	d216      	bcs.n	1727e <CanIf_GetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17250:	4b0f      	ldr	r3, [pc, #60]	; (17290 <CanIf_GetControllerMode+0x70>)
   17252:	685a      	ldr	r2, [r3, #4]
   17254:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17258:	00db      	lsls	r3, r3, #3
   1725a:	4413      	add	r3, r2
   1725c:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   1725e:	9b04      	ldr	r3, [sp, #16]
   17260:	785b      	ldrb	r3, [r3, #1]
   17262:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetMode( CanController_ID, ControllerModePtr );   //Calling Can Driver Api.
   17266:	9b04      	ldr	r3, [sp, #16]
   17268:	685b      	ldr	r3, [r3, #4]
   1726a:	685b      	ldr	r3, [r3, #4]
   1726c:	695b      	ldr	r3, [r3, #20]
   1726e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   17272:	9900      	ldr	r1, [sp, #0]
   17274:	4610      	mov	r0, r2
   17276:	4798      	blx	r3
   17278:	4603      	mov	r3, r0
   1727a:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   1727e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   17282:	4618      	mov	r0, r3
   17284:	b007      	add	sp, #28
   17286:	f85d fb04 	ldr.w	pc, [sp], #4
   1728a:	bf00      	nop
   1728c:	1fff98ec 	.word	0x1fff98ec
   17290:	00018a6c 	.word	0x00018a6c

00017294 <CanIf_GetControllerRxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param RxErrorCounterPtr Pointer to variable to store the actual value of the rx error counter of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerRxErrorCounter( uint8 ControllerId, uint8 *RxErrorCounterPtr ) {
   17294:	b500      	push	{lr}
   17296:	b087      	sub	sp, #28
   17298:	4603      	mov	r3, r0
   1729a:	9100      	str	r1, [sp, #0]
   1729c:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   172a0:	2301      	movs	r3, #1
   172a2:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   172a6:	2300      	movs	r3, #0
   172a8:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   172aa:	2300      	movs	r3, #0
   172ac:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   172b0:	4b13      	ldr	r3, [pc, #76]	; (17300 <CanIf_GetControllerRxErrorCounter+0x6c>)
   172b2:	681b      	ldr	r3, [r3, #0]
   172b4:	2b00      	cmp	r3, #0
   172b6:	d01c      	beq.n	172f2 <CanIf_GetControllerRxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   172b8:	4b12      	ldr	r3, [pc, #72]	; (17304 <CanIf_GetControllerRxErrorCounter+0x70>)
   172ba:	781b      	ldrb	r3, [r3, #0]
   172bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   172c0:	429a      	cmp	r2, r3
   172c2:	d216      	bcs.n	172f2 <CanIf_GetControllerRxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   172c4:	4b0f      	ldr	r3, [pc, #60]	; (17304 <CanIf_GetControllerRxErrorCounter+0x70>)
   172c6:	685a      	ldr	r2, [r3, #4]
   172c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   172cc:	00db      	lsls	r3, r3, #3
   172ce:	4413      	add	r3, r2
   172d0:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   172d2:	9b04      	ldr	r3, [sp, #16]
   172d4:	785b      	ldrb	r3, [r3, #1]
   172d6:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetRxErrorCounter( CanController_ID, RxErrorCounterPtr );   //Calling Can Driver Api.
   172da:	9b04      	ldr	r3, [sp, #16]
   172dc:	685b      	ldr	r3, [r3, #4]
   172de:	685b      	ldr	r3, [r3, #4]
   172e0:	699b      	ldr	r3, [r3, #24]
   172e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   172e6:	9900      	ldr	r1, [sp, #0]
   172e8:	4610      	mov	r0, r2
   172ea:	4798      	blx	r3
   172ec:	4603      	mov	r3, r0
   172ee:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   172f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   172f6:	4618      	mov	r0, r3
   172f8:	b007      	add	sp, #28
   172fa:	f85d fb04 	ldr.w	pc, [sp], #4
   172fe:	bf00      	nop
   17300:	1fff98ec 	.word	0x1fff98ec
   17304:	00018a6c 	.word	0x00018a6c

00017308 <CanIf_GetControllerTxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param TxErrorCounterPtr Pointer to variable to store the actual value of the tx error counter of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerTxErrorCounter( uint8 ControllerId, uint8 *TxErrorCounterPtr ) {
   17308:	b500      	push	{lr}
   1730a:	b087      	sub	sp, #28
   1730c:	4603      	mov	r3, r0
   1730e:	9100      	str	r1, [sp, #0]
   17310:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17314:	2301      	movs	r3, #1
   17316:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   1731a:	2300      	movs	r3, #0
   1731c:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   1731e:	2300      	movs	r3, #0
   17320:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17324:	4b13      	ldr	r3, [pc, #76]	; (17374 <CanIf_GetControllerTxErrorCounter+0x6c>)
   17326:	681b      	ldr	r3, [r3, #0]
   17328:	2b00      	cmp	r3, #0
   1732a:	d01c      	beq.n	17366 <CanIf_GetControllerTxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   1732c:	4b12      	ldr	r3, [pc, #72]	; (17378 <CanIf_GetControllerTxErrorCounter+0x70>)
   1732e:	781b      	ldrb	r3, [r3, #0]
   17330:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17334:	429a      	cmp	r2, r3
   17336:	d216      	bcs.n	17366 <CanIf_GetControllerTxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   17338:	4b0f      	ldr	r3, [pc, #60]	; (17378 <CanIf_GetControllerTxErrorCounter+0x70>)
   1733a:	685a      	ldr	r2, [r3, #4]
   1733c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17340:	00db      	lsls	r3, r3, #3
   17342:	4413      	add	r3, r2
   17344:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17346:	9b04      	ldr	r3, [sp, #16]
   17348:	785b      	ldrb	r3, [r3, #1]
   1734a:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetTxErrorCounter( CanController_ID, TxErrorCounterPtr );   //Calling Can Driver Api.
   1734e:	9b04      	ldr	r3, [sp, #16]
   17350:	685b      	ldr	r3, [r3, #4]
   17352:	685b      	ldr	r3, [r3, #4]
   17354:	69db      	ldr	r3, [r3, #28]
   17356:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1735a:	9900      	ldr	r1, [sp, #0]
   1735c:	4610      	mov	r0, r2
   1735e:	4798      	blx	r3
   17360:	4603      	mov	r3, r0
   17362:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   17366:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   1736a:	4618      	mov	r0, r3
   1736c:	b007      	add	sp, #28
   1736e:	f85d fb04 	ldr.w	pc, [sp], #4
   17372:	bf00      	nop
   17374:	1fff98ec 	.word	0x1fff98ec
   17378:	00018a6c 	.word	0x00018a6c

0001737c <Fls_ACEraseRomEnd>:
   1737c:	5f75634d 	.word	0x5f75634d
   17380:	74696e49 	.word	0x74696e49
   17384:	00002928 	.word	0x00002928
   17388:	5f75634d 	.word	0x5f75634d
   1738c:	74696e49 	.word	0x74696e49
   17390:	636f6c43 	.word	0x636f6c43
   17394:	0029286b 	.word	0x0029286b
   17398:	5f75634d 	.word	0x5f75634d
   1739c:	4d746553 	.word	0x4d746553
   173a0:	2865646f 	.word	0x2865646f
   173a4:	00000029 	.word	0x00000029
   173a8:	5f75634d 	.word	0x5f75634d
   173ac:	56746547 	.word	0x56746547
   173b0:	69737265 	.word	0x69737265
   173b4:	6e496e6f 	.word	0x6e496e6f
   173b8:	29286f66 	.word	0x29286f66
   173bc:	00000000 	.word	0x00000000
   173c0:	61766e49 	.word	0x61766e49
   173c4:	2064696c 	.word	0x2064696c
   173c8:	666e6f63 	.word	0x666e6f63
   173cc:	696f7020 	.word	0x696f7020
   173d0:	7265746e 	.word	0x7265746e
   173d4:	00000000 	.word	0x00000000
   173d8:	76697244 	.word	0x76697244
   173dc:	75207265 	.word	0x75207265
   173e0:	696e696e 	.word	0x696e696e
   173e4:	6c616974 	.word	0x6c616974
   173e8:	64657a69 	.word	0x64657a69
   173ec:	00000000 	.word	0x00000000
   173f0:	76697244 	.word	0x76697244
   173f4:	61207265 	.word	0x61207265
   173f8:	6165726c 	.word	0x6165726c
   173fc:	69207964 	.word	0x69207964
   17400:	6974696e 	.word	0x6974696e
   17404:	7a696c61 	.word	0x7a696c61
   17408:	00006465 	.word	0x00006465
   1740c:	61766e49 	.word	0x61766e49
   17410:	2064696c 	.word	0x2064696c
   17414:	75706e69 	.word	0x75706e69
   17418:	61702074 	.word	0x61702074
   1741c:	656d6172 	.word	0x656d6172
   17420:	00726574 	.word	0x00726574
   17424:	74616c50 	.word	0x74616c50
   17428:	6d726f66 	.word	0x6d726f66
   1742c:	696e495f 	.word	0x696e495f
   17430:	00292874 	.word	0x00292874
   17434:	74616c50 	.word	0x74616c50
   17438:	6d726f66 	.word	0x6d726f66
   1743c:	7465535f 	.word	0x7465535f
   17440:	28717249 	.word	0x28717249
   17444:	00000029 	.word	0x00000029
   17448:	74616c50 	.word	0x74616c50
   1744c:	6d726f66 	.word	0x6d726f66
   17450:	7465535f 	.word	0x7465535f
   17454:	50717249 	.word	0x50717249
   17458:	726f6972 	.word	0x726f6972
   1745c:	28797469 	.word	0x28797469
   17460:	00000029 	.word	0x00000029
   17464:	74616c50 	.word	0x74616c50
   17468:	6d726f66 	.word	0x6d726f66
   1746c:	7465475f 	.word	0x7465475f
   17470:	50717249 	.word	0x50717249
   17474:	726f6972 	.word	0x726f6972
   17478:	28797469 	.word	0x28797469
   1747c:	00000029 	.word	0x00000029
   17480:	74616c50 	.word	0x74616c50
   17484:	6d726f66 	.word	0x6d726f66
   17488:	736e495f 	.word	0x736e495f
   1748c:	6c6c6174 	.word	0x6c6c6174
   17490:	48717249 	.word	0x48717249
   17494:	6c646e61 	.word	0x6c646e61
   17498:	29287265 	.word	0x29287265
   1749c:	00000000 	.word	0x00000000
   174a0:	61766e49 	.word	0x61766e49
   174a4:	2064696c 	.word	0x2064696c
   174a8:	6e696f70 	.word	0x6e696f70
   174ac:	00726574 	.word	0x00726574
   174b0:	6c6c6143 	.word	0x6c6c6143
   174b4:	6f726620 	.word	0x6f726620
   174b8:	7277206d 	.word	0x7277206d
   174bc:	20676e6f 	.word	0x20676e6f
   174c0:	7070616d 	.word	0x7070616d
   174c4:	70206465 	.word	0x70206465
   174c8:	69747261 	.word	0x69747261
   174cc:	6e6f6974 	.word	0x6e6f6974
   174d0:	00000000 	.word	0x00000000
   174d4:	61726150 	.word	0x61726150
   174d8:	6574656d 	.word	0x6574656d
   174dc:	756f2072 	.word	0x756f2072
   174e0:	666f2074 	.word	0x666f2074
   174e4:	6e617220 	.word	0x6e617220
   174e8:	00006567 	.word	0x00006567
   174ec:	74726f50 	.word	0x74726f50
   174f0:	696e495f 	.word	0x696e495f
   174f4:	00292874 	.word	0x00292874
   174f8:	74726f50 	.word	0x74726f50
   174fc:	7465535f 	.word	0x7465535f
   17500:	446e6950 	.word	0x446e6950
   17504:	63657269 	.word	0x63657269
   17508:	6e6f6974 	.word	0x6e6f6974
   1750c:	00002928 	.word	0x00002928
   17510:	74726f50 	.word	0x74726f50
   17514:	7465535f 	.word	0x7465535f
   17518:	4d6e6950 	.word	0x4d6e6950
   1751c:	2865646f 	.word	0x2865646f
   17520:	00000029 	.word	0x00000029
   17524:	74726f50 	.word	0x74726f50
   17528:	6665525f 	.word	0x6665525f
   1752c:	68736572 	.word	0x68736572
   17530:	74726f50 	.word	0x74726f50
   17534:	65726944 	.word	0x65726944
   17538:	6f697463 	.word	0x6f697463
   1753c:	0029286e 	.word	0x0029286e
   17540:	74726f50 	.word	0x74726f50
   17544:	7465475f 	.word	0x7465475f
   17548:	73726556 	.word	0x73726556
   1754c:	496e6f69 	.word	0x496e6f69
   17550:	286f666e 	.word	0x286f666e
   17554:	00000029 	.word	0x00000029
   17558:	61766e49 	.word	0x61766e49
   1755c:	2064696c 	.word	0x2064696c
   17560:	74726f50 	.word	0x74726f50
   17564:	6e695020 	.word	0x6e695020
   17568:	00444920 	.word	0x00444920
   1756c:	74726f50 	.word	0x74726f50
   17570:	6e697020 	.word	0x6e697020
   17574:	646f6d20 	.word	0x646f6d20
   17578:	73692065 	.word	0x73692065
   1757c:	636e7520 	.word	0x636e7520
   17580:	676e6168 	.word	0x676e6168
   17584:	6c626165 	.word	0x6c626165
   17588:	00000065 	.word	0x00000065
   1758c:	61766e49 	.word	0x61766e49
   17590:	2064696c 	.word	0x2064696c
   17594:	74726f70 	.word	0x74726f70
   17598:	6e697020 	.word	0x6e697020
   1759c:	646f6d20 	.word	0x646f6d20
   175a0:	00000065 	.word	0x00000065
   175a4:	5f6f6944 	.word	0x5f6f6944
   175a8:	74697257 	.word	0x74697257
   175ac:	61684365 	.word	0x61684365
   175b0:	6c656e6e 	.word	0x6c656e6e
   175b4:	00002928 	.word	0x00002928
   175b8:	5f6f6944 	.word	0x5f6f6944
   175bc:	64616552 	.word	0x64616552
   175c0:	6e616843 	.word	0x6e616843
   175c4:	286c656e 	.word	0x286c656e
   175c8:	00000029 	.word	0x00000029
   175cc:	5f6f6944 	.word	0x5f6f6944
   175d0:	70696c46 	.word	0x70696c46
   175d4:	6e616843 	.word	0x6e616843
   175d8:	286c656e 	.word	0x286c656e
   175dc:	00000029 	.word	0x00000029
   175e0:	5f6f6944 	.word	0x5f6f6944
   175e4:	74697257 	.word	0x74697257
   175e8:	61684365 	.word	0x61684365
   175ec:	6c656e6e 	.word	0x6c656e6e
   175f0:	756f7247 	.word	0x756f7247
   175f4:	00292870 	.word	0x00292870
   175f8:	5f6f6944 	.word	0x5f6f6944
   175fc:	64616552 	.word	0x64616552
   17600:	6e616843 	.word	0x6e616843
   17604:	476c656e 	.word	0x476c656e
   17608:	70756f72 	.word	0x70756f72
   1760c:	00002928 	.word	0x00002928
   17610:	5f6f6944 	.word	0x5f6f6944
   17614:	74697257 	.word	0x74697257
   17618:	726f5065 	.word	0x726f5065
   1761c:	00292874 	.word	0x00292874
   17620:	5f6f6944 	.word	0x5f6f6944
   17624:	64616552 	.word	0x64616552
   17628:	74726f50 	.word	0x74726f50
   1762c:	00002928 	.word	0x00002928
   17630:	5f6f6944 	.word	0x5f6f6944
   17634:	56746547 	.word	0x56746547
   17638:	69737265 	.word	0x69737265
   1763c:	6e496e6f 	.word	0x6e496e6f
   17640:	29286f66 	.word	0x29286f66
   17644:	00000000 	.word	0x00000000
   17648:	61766e49 	.word	0x61766e49
   1764c:	2064696c 	.word	0x2064696c
   17650:	206f6964 	.word	0x206f6964
   17654:	6e616863 	.word	0x6e616863
   17658:	206c656e 	.word	0x206c656e
   1765c:	6576656c 	.word	0x6576656c
   17660:	0000006c 	.word	0x0000006c
   17664:	61766e49 	.word	0x61766e49
   17668:	2064696c 	.word	0x2064696c
   1766c:	206f6964 	.word	0x206f6964
   17670:	6e616863 	.word	0x6e616863
   17674:	206c656e 	.word	0x206c656e
   17678:	00006469 	.word	0x00006469
   1767c:	61766e49 	.word	0x61766e49
   17680:	2064696c 	.word	0x2064696c
   17684:	74726f70 	.word	0x74726f70
   17688:	00646920 	.word	0x00646920
   1768c:	61766e49 	.word	0x61766e49
   17690:	2064696c 	.word	0x2064696c
   17694:	6e616863 	.word	0x6e616863
   17698:	206c656e 	.word	0x206c656e
   1769c:	756f7267 	.word	0x756f7267
   176a0:	64692070 	.word	0x64692070
   176a4:	00000000 	.word	0x00000000
   176a8:	61766e49 	.word	0x61766e49
   176ac:	2064696c 	.word	0x2064696c
   176b0:	666e6f63 	.word	0x666e6f63
   176b4:	70206769 	.word	0x70206769
   176b8:	6d617261 	.word	0x6d617261
   176bc:	72657465 	.word	0x72657465
   176c0:	00000000 	.word	0x00000000
   176c4:	5f6d7750 	.word	0x5f6d7750
   176c8:	74696e49 	.word	0x74696e49
   176cc:	00002928 	.word	0x00002928
   176d0:	5f6d7750 	.word	0x5f6d7750
   176d4:	6e496544 	.word	0x6e496544
   176d8:	29287469 	.word	0x29287469
   176dc:	00000000 	.word	0x00000000
   176e0:	5f6d7750 	.word	0x5f6d7750
   176e4:	44746553 	.word	0x44746553
   176e8:	43797475 	.word	0x43797475
   176ec:	656c6379 	.word	0x656c6379
   176f0:	00002928 	.word	0x00002928
   176f4:	5f6d7750 	.word	0x5f6d7750
   176f8:	50746553 	.word	0x50746553
   176fc:	6f697265 	.word	0x6f697265
   17700:	646e4164 	.word	0x646e4164
   17704:	79747544 	.word	0x79747544
   17708:	00002928 	.word	0x00002928
   1770c:	5f6d7750 	.word	0x5f6d7750
   17710:	4f746553 	.word	0x4f746553
   17714:	75707475 	.word	0x75707475
   17718:	496f5474 	.word	0x496f5474
   1771c:	28656c64 	.word	0x28656c64
   17720:	00000029 	.word	0x00000029
   17724:	5f6d7750 	.word	0x5f6d7750
   17728:	56746547 	.word	0x56746547
   1772c:	69737265 	.word	0x69737265
   17730:	6e496e6f 	.word	0x6e496e6f
   17734:	29286f66 	.word	0x29286f66
   17738:	00000000 	.word	0x00000000
   1773c:	61766e49 	.word	0x61766e49
   17740:	2064696c 	.word	0x2064696c
   17744:	666e6f63 	.word	0x666e6f63
   17748:	70206769 	.word	0x70206769
   1774c:	746e696f 	.word	0x746e696f
   17750:	00007265 	.word	0x00007265
   17754:	61766e49 	.word	0x61766e49
   17758:	2064696c 	.word	0x2064696c
   1775c:	206d7770 	.word	0x206d7770
   17760:	6e616863 	.word	0x6e616863
   17764:	006c656e 	.word	0x006c656e
   17768:	206d7750 	.word	0x206d7750
   1776c:	6e616863 	.word	0x6e616863
   17770:	206c656e 	.word	0x206c656e
   17774:	69726570 	.word	0x69726570
   17778:	6920646f 	.word	0x6920646f
   1777c:	6e752073 	.word	0x6e752073
   17780:	6e616863 	.word	0x6e616863
   17784:	62616567 	.word	0x62616567
   17788:	0000656c 	.word	0x0000656c
   1778c:	5f636441 	.word	0x5f636441
   17790:	74696e49 	.word	0x74696e49
   17794:	00002928 	.word	0x00002928
   17798:	5f636441 	.word	0x5f636441
   1779c:	6e496544 	.word	0x6e496544
   177a0:	29287469 	.word	0x29287469
   177a4:	00000000 	.word	0x00000000
   177a8:	5f636441 	.word	0x5f636441
   177ac:	72617453 	.word	0x72617453
   177b0:	6f724774 	.word	0x6f724774
   177b4:	6f437075 	.word	0x6f437075
   177b8:	7265766e 	.word	0x7265766e
   177bc:	6e6f6973 	.word	0x6e6f6973
   177c0:	00002928 	.word	0x00002928
   177c4:	5f636441 	.word	0x5f636441
   177c8:	706f7453 	.word	0x706f7453
   177cc:	756f7247 	.word	0x756f7247
   177d0:	6e6f4370 	.word	0x6e6f4370
   177d4:	73726576 	.word	0x73726576
   177d8:	286e6f69 	.word	0x286e6f69
   177dc:	00000029 	.word	0x00000029
   177e0:	5f636441 	.word	0x5f636441
   177e4:	64616552 	.word	0x64616552
   177e8:	756f7247 	.word	0x756f7247
   177ec:	00292870 	.word	0x00292870
   177f0:	5f636441 	.word	0x5f636441
   177f4:	47746547 	.word	0x47746547
   177f8:	70756f72 	.word	0x70756f72
   177fc:	74617453 	.word	0x74617453
   17800:	29287375 	.word	0x29287375
   17804:	00000000 	.word	0x00000000
   17808:	5f636441 	.word	0x5f636441
   1780c:	696c6143 	.word	0x696c6143
   17810:	74617262 	.word	0x74617262
   17814:	00292865 	.word	0x00292865
   17818:	5f636441 	.word	0x5f636441
   1781c:	75746553 	.word	0x75746553
   17820:	73655270 	.word	0x73655270
   17824:	42746c75 	.word	0x42746c75
   17828:	65666675 	.word	0x65666675
   1782c:	00292872 	.word	0x00292872
   17830:	5f636441 	.word	0x5f636441
   17834:	56746547 	.word	0x56746547
   17838:	69737265 	.word	0x69737265
   1783c:	6e496e6f 	.word	0x6e496e6f
   17840:	29286f66 	.word	0x29286f66
   17844:	00000000 	.word	0x00000000
   17848:	61766e49 	.word	0x61766e49
   1784c:	2064696c 	.word	0x2064696c
   17850:	20636461 	.word	0x20636461
   17854:	756f7267 	.word	0x756f7267
   17858:	00000070 	.word	0x00000070
   1785c:	66667542 	.word	0x66667542
   17860:	70207265 	.word	0x70207265
   17864:	746e696f 	.word	0x746e696f
   17868:	6e207265 	.word	0x6e207265
   1786c:	6920746f 	.word	0x6920746f
   17870:	6974696e 	.word	0x6974696e
   17874:	7a696c61 	.word	0x7a696c61
   17878:	00006465 	.word	0x00006465
   1787c:	696c6143 	.word	0x696c6143
   17880:	74617262 	.word	0x74617262
   17884:	206e6f69 	.word	0x206e6f69
   17888:	7265706f 	.word	0x7265706f
   1788c:	6f697461 	.word	0x6f697461
   17890:	6974206e 	.word	0x6974206e
   17894:	2064656d 	.word	0x2064656d
   17898:	0074756f 	.word	0x0074756f
   1789c:	65686353 	.word	0x65686353
   178a0:	656c7564 	.word	0x656c7564
   178a4:	6e495f72 	.word	0x6e495f72
   178a8:	29287469 	.word	0x29287469
   178ac:	00000000 	.word	0x00000000
   178b0:	65686353 	.word	0x65686353
   178b4:	656c7564 	.word	0x656c7564
   178b8:	65475f72 	.word	0x65475f72
   178bc:	61745374 	.word	0x61745374
   178c0:	51737574 	.word	0x51737574
   178c4:	65756575 	.word	0x65756575
   178c8:	00002928 	.word	0x00002928
   178cc:	65686353 	.word	0x65686353
   178d0:	656c7564 	.word	0x656c7564
   178d4:	6c465f72 	.word	0x6c465f72
   178d8:	51687375 	.word	0x51687375
   178dc:	65756575 	.word	0x65756575
   178e0:	00002928 	.word	0x00002928
   178e4:	65686353 	.word	0x65686353
   178e8:	656c7564 	.word	0x656c7564
   178ec:	72575f72 	.word	0x72575f72
   178f0:	51657469 	.word	0x51657469
   178f4:	65756575 	.word	0x65756575
   178f8:	00002928 	.word	0x00002928
   178fc:	65686353 	.word	0x65686353
   17900:	656c7564 	.word	0x656c7564
   17904:	65525f72 	.word	0x65525f72
   17908:	75516461 	.word	0x75516461
   1790c:	28657565 	.word	0x28657565
   17910:	00000029 	.word	0x00000029
   17914:	65686353 	.word	0x65686353
   17918:	656c7564 	.word	0x656c7564
   1791c:	74535f72 	.word	0x74535f72
   17920:	54747261 	.word	0x54747261
   17924:	286b7361 	.word	0x286b7361
   17928:	00000029 	.word	0x00000029
   1792c:	65686353 	.word	0x65686353
   17930:	656c7564 	.word	0x656c7564
   17934:	74535f72 	.word	0x74535f72
   17938:	6154706f 	.word	0x6154706f
   1793c:	29286b73 	.word	0x29286b73
   17940:	00000000 	.word	0x00000000
   17944:	65686353 	.word	0x65686353
   17948:	656c7564 	.word	0x656c7564
   1794c:	65505f72 	.word	0x65505f72
   17950:	646f6972 	.word	0x646f6972
   17954:	6b736154 	.word	0x6b736154
   17958:	00002928 	.word	0x00002928
   1795c:	65686353 	.word	0x65686353
   17960:	656c7564 	.word	0x656c7564
   17964:	74535f72 	.word	0x74535f72
   17968:	54747261 	.word	0x54747261
   1796c:	72656d69 	.word	0x72656d69
   17970:	00002928 	.word	0x00002928
   17974:	65686353 	.word	0x65686353
   17978:	656c7564 	.word	0x656c7564
   1797c:	74535f72 	.word	0x74535f72
   17980:	6954706f 	.word	0x6954706f
   17984:	2872656d 	.word	0x2872656d
   17988:	00000029 	.word	0x00000029
   1798c:	65686353 	.word	0x65686353
   17990:	656c7564 	.word	0x656c7564
   17994:	65475f72 	.word	0x65475f72
   17998:	6d695474 	.word	0x6d695474
   1799c:	29287265 	.word	0x29287265
   179a0:	00000000 	.word	0x00000000
   179a4:	65686353 	.word	0x65686353
   179a8:	656c7564 	.word	0x656c7564
   179ac:	65525f72 	.word	0x65525f72
   179b0:	64616f6c 	.word	0x64616f6c
   179b4:	656d6954 	.word	0x656d6954
   179b8:	00292872 	.word	0x00292872
   179bc:	65686353 	.word	0x65686353
   179c0:	656c7564 	.word	0x656c7564
   179c4:	614d5f72 	.word	0x614d5f72
   179c8:	75466e69 	.word	0x75466e69
   179cc:	6974636e 	.word	0x6974636e
   179d0:	29286e6f 	.word	0x29286e6f
   179d4:	00000000 	.word	0x00000000
   179d8:	75657551 	.word	0x75657551
   179dc:	64692065 	.word	0x64692065
   179e0:	74756f20 	.word	0x74756f20
   179e4:	20666f20 	.word	0x20666f20
   179e8:	676e6172 	.word	0x676e6172
   179ec:	00000065 	.word	0x00000065
   179f0:	61766e49 	.word	0x61766e49
   179f4:	2064696c 	.word	0x2064696c
   179f8:	75657571 	.word	0x75657571
   179fc:	74732065 	.word	0x74732065
   17a00:	73757461 	.word	0x73757461
   17a04:	616c6620 	.word	0x616c6620
   17a08:	00000067 	.word	0x00000067
   17a0c:	6b736154 	.word	0x6b736154
   17a10:	20646920 	.word	0x20646920
   17a14:	2074756f 	.word	0x2074756f
   17a18:	7220666f 	.word	0x7220666f
   17a1c:	65676e61 	.word	0x65676e61
   17a20:	00000000 	.word	0x00000000
   17a24:	61766e49 	.word	0x61766e49
   17a28:	2064696c 	.word	0x2064696c
   17a2c:	6b736174 	.word	0x6b736174
   17a30:	20726f20 	.word	0x20726f20
   17a34:	656d6974 	.word	0x656d6974
   17a38:	65702072 	.word	0x65702072
   17a3c:	646f6972 	.word	0x646f6972
   17a40:	74696369 	.word	0x74696369
   17a44:	00000079 	.word	0x00000079
   17a48:	656d6954 	.word	0x656d6954
   17a4c:	64692072 	.word	0x64692072
   17a50:	74756f20 	.word	0x74756f20
   17a54:	20666f20 	.word	0x20666f20
   17a58:	676e6172 	.word	0x676e6172
   17a5c:	00000065 	.word	0x00000065
   17a60:	65686353 	.word	0x65686353
   17a64:	656c7564 	.word	0x656c7564
   17a68:	6e752072 	.word	0x6e752072
   17a6c:	74696e69 	.word	0x74696e69
   17a70:	696c6169 	.word	0x696c6169
   17a74:	0064657a 	.word	0x0064657a
   17a78:	6f497748 	.word	0x6f497748
   17a7c:	425f6241 	.word	0x425f6241
   17a80:	6f747475 	.word	0x6f747475
   17a84:	495f736e 	.word	0x495f736e
   17a88:	2874696e 	.word	0x2874696e
   17a8c:	00000029 	.word	0x00000029
   17a90:	6f497748 	.word	0x6f497748
   17a94:	425f6241 	.word	0x425f6241
   17a98:	6f747475 	.word	0x6f747475
   17a9c:	475f736e 	.word	0x475f736e
   17aa0:	76457465 	.word	0x76457465
   17aa4:	28746e65 	.word	0x28746e65
   17aa8:	00000029 	.word	0x00000029
   17aac:	6f497748 	.word	0x6f497748
   17ab0:	425f6241 	.word	0x425f6241
   17ab4:	6f747475 	.word	0x6f747475
   17ab8:	4d5f736e 	.word	0x4d5f736e
   17abc:	466e6961 	.word	0x466e6961
   17ac0:	74636e75 	.word	0x74636e75
   17ac4:	286e6f69 	.word	0x286e6f69
   17ac8:	00000029 	.word	0x00000029
   17acc:	61766e49 	.word	0x61766e49
   17ad0:	2064696c 	.word	0x2064696c
   17ad4:	74747562 	.word	0x74747562
   17ad8:	69206e6f 	.word	0x69206e6f
   17adc:	00000064 	.word	0x00000064
   17ae0:	61766e49 	.word	0x61766e49
   17ae4:	2064696c 	.word	0x2064696c
   17ae8:	74747562 	.word	0x74747562
   17aec:	73206e6f 	.word	0x73206e6f
   17af0:	65746174 	.word	0x65746174
   17af4:	00000000 	.word	0x00000000
   17af8:	75646f4d 	.word	0x75646f4d
   17afc:	7520656c 	.word	0x7520656c
   17b00:	696e696e 	.word	0x696e696e
   17b04:	6c616974 	.word	0x6c616974
   17b08:	64657a69 	.word	0x64657a69
   17b0c:	00000000 	.word	0x00000000
   17b10:	6f497748 	.word	0x6f497748
   17b14:	4c5f6241 	.word	0x4c5f6241
   17b18:	5f736465 	.word	0x5f736465
   17b1c:	74696e49 	.word	0x74696e49
   17b20:	00002928 	.word	0x00002928
   17b24:	6f497748 	.word	0x6f497748
   17b28:	4c5f6241 	.word	0x4c5f6241
   17b2c:	5f736465 	.word	0x5f736465
   17b30:	6e727554 	.word	0x6e727554
   17b34:	29286e4f 	.word	0x29286e4f
   17b38:	00000000 	.word	0x00000000
   17b3c:	6f497748 	.word	0x6f497748
   17b40:	4c5f6241 	.word	0x4c5f6241
   17b44:	5f736465 	.word	0x5f736465
   17b48:	6e727554 	.word	0x6e727554
   17b4c:	2866664f 	.word	0x2866664f
   17b50:	00000029 	.word	0x00000029
   17b54:	6f497748 	.word	0x6f497748
   17b58:	4c5f6241 	.word	0x4c5f6241
   17b5c:	5f736465 	.word	0x5f736465
   17b60:	6e727554 	.word	0x6e727554
   17b64:	67676f54 	.word	0x67676f54
   17b68:	2928656c 	.word	0x2928656c
   17b6c:	00000000 	.word	0x00000000
   17b70:	61766e49 	.word	0x61766e49
   17b74:	2064696c 	.word	0x2064696c
   17b78:	2064656c 	.word	0x2064656c
   17b7c:	00006469 	.word	0x00006469
   17b80:	6f497748 	.word	0x6f497748
   17b84:	505f6241 	.word	0x505f6241
   17b88:	5f73746f 	.word	0x5f73746f
   17b8c:	74696e49 	.word	0x74696e49
   17b90:	00002928 	.word	0x00002928
   17b94:	6f497748 	.word	0x6f497748
   17b98:	505f6241 	.word	0x505f6241
   17b9c:	5f73746f 	.word	0x5f73746f
   17ba0:	56746547 	.word	0x56746547
   17ba4:	65756c61 	.word	0x65756c61
   17ba8:	00002928 	.word	0x00002928
   17bac:	6f497748 	.word	0x6f497748
   17bb0:	505f6241 	.word	0x505f6241
   17bb4:	5f73746f 	.word	0x5f73746f
   17bb8:	41746547 	.word	0x41746547
   17bbc:	6156746c 	.word	0x6156746c
   17bc0:	2865756c 	.word	0x2865756c
   17bc4:	00000029 	.word	0x00000029
   17bc8:	61766e49 	.word	0x61766e49
   17bcc:	2064696c 	.word	0x2064696c
   17bd0:	75706e69 	.word	0x75706e69
   17bd4:	6f702074 	.word	0x6f702074
   17bd8:	65746e69 	.word	0x65746e69
   17bdc:	00000072 	.word	0x00000072
   17be0:	6f497748 	.word	0x6f497748
   17be4:	425f6241 	.word	0x425f6241
   17be8:	657a7a75 	.word	0x657a7a75
   17bec:	6e495f72 	.word	0x6e495f72
   17bf0:	29287469 	.word	0x29287469
   17bf4:	00000000 	.word	0x00000000
   17bf8:	6f497748 	.word	0x6f497748
   17bfc:	425f6241 	.word	0x425f6241
   17c00:	657a7a75 	.word	0x657a7a75
   17c04:	65425f72 	.word	0x65425f72
   17c08:	29287065 	.word	0x29287065
   17c0c:	00000000 	.word	0x00000000
   17c10:	6f497748 	.word	0x6f497748
   17c14:	425f6241 	.word	0x425f6241
   17c18:	657a7a75 	.word	0x657a7a75
   17c1c:	74535f72 	.word	0x74535f72
   17c20:	2928706f 	.word	0x2928706f
   17c24:	00000000 	.word	0x00000000
   17c28:	61766e49 	.word	0x61766e49
   17c2c:	2064696c 	.word	0x2064696c
   17c30:	7a7a7562 	.word	0x7a7a7562
   17c34:	74207265 	.word	0x74207265
   17c38:	00656e6f 	.word	0x00656e6f
   17c3c:	2075634d 	.word	0x2075634d
   17c40:	75646f6d 	.word	0x75646f6d
   17c44:	0000656c 	.word	0x0000656c
   17c48:	74616c50 	.word	0x74616c50
   17c4c:	6d726f66 	.word	0x6d726f66
   17c50:	646f6d20 	.word	0x646f6d20
   17c54:	00656c75 	.word	0x00656c75
   17c58:	74726f50 	.word	0x74726f50
   17c5c:	646f6d20 	.word	0x646f6d20
   17c60:	00656c75 	.word	0x00656c75
   17c64:	206f6944 	.word	0x206f6944
   17c68:	75646f6d 	.word	0x75646f6d
   17c6c:	0000656c 	.word	0x0000656c
   17c70:	206d7750 	.word	0x206d7750
   17c74:	75646f6d 	.word	0x75646f6d
   17c78:	0000656c 	.word	0x0000656c
   17c7c:	20636441 	.word	0x20636441
   17c80:	75646f6d 	.word	0x75646f6d
   17c84:	0000656c 	.word	0x0000656c
   17c88:	65686353 	.word	0x65686353
   17c8c:	656c7564 	.word	0x656c7564
   17c90:	6f6d2072 	.word	0x6f6d2072
   17c94:	656c7564 	.word	0x656c7564
   17c98:	00000000 	.word	0x00000000
   17c9c:	74747542 	.word	0x74747542
   17ca0:	20736e6f 	.word	0x20736e6f
   17ca4:	61204f49 	.word	0x61204f49
   17ca8:	72747362 	.word	0x72747362
   17cac:	69746361 	.word	0x69746361
   17cb0:	6d206e6f 	.word	0x6d206e6f
   17cb4:	6c75646f 	.word	0x6c75646f
   17cb8:	00000065 	.word	0x00000065
   17cbc:	7364654c 	.word	0x7364654c
   17cc0:	204f4920 	.word	0x204f4920
   17cc4:	74736261 	.word	0x74736261
   17cc8:	74636172 	.word	0x74636172
   17ccc:	206e6f69 	.word	0x206e6f69
   17cd0:	75646f6d 	.word	0x75646f6d
   17cd4:	0000656c 	.word	0x0000656c
   17cd8:	73746f50 	.word	0x73746f50
   17cdc:	204f4920 	.word	0x204f4920
   17ce0:	74736261 	.word	0x74736261
   17ce4:	74636172 	.word	0x74636172
   17ce8:	206e6f69 	.word	0x206e6f69
   17cec:	75646f6d 	.word	0x75646f6d
   17cf0:	0000656c 	.word	0x0000656c
   17cf4:	7a7a7542 	.word	0x7a7a7542
   17cf8:	49207265 	.word	0x49207265
   17cfc:	6261204f 	.word	0x6261204f
   17d00:	61727473 	.word	0x61727473
   17d04:	6f697463 	.word	0x6f697463
   17d08:	6f6d206e 	.word	0x6f6d206e
   17d0c:	656c7564 	.word	0x656c7564
   17d10:	00000000 	.word	0x00000000
   17d14:	6f727245 	.word	0x6f727245
   17d18:	45203a72 	.word	0x45203a72
   17d1c:	726f7272 	.word	0x726f7272
   17d20:	206e6920 	.word	0x206e6920
   17d24:	69207325 	.word	0x69207325
   17d28:	7566206e 	.word	0x7566206e
   17d2c:	6974636e 	.word	0x6974636e
   17d30:	25206e6f 	.word	0x25206e6f
   17d34:	69772073 	.word	0x69772073
   17d38:	74206874 	.word	0x74206874
   17d3c:	69206568 	.word	0x69206568
   17d40:	6174736e 	.word	0x6174736e
   17d44:	2065636e 	.word	0x2065636e
   17d48:	202c6425 	.word	0x202c6425
   17d4c:	000a7325 	.word	0x000a7325
   17d50:	6d726554 	.word	0x6d726554
   17d54:	6c616e69 	.word	0x6c616e69
   17d58:	00000000 	.word	0x00000000
   17d5c:	4c554e28 	.word	0x4c554e28
   17d60:	0000294c 	.word	0x0000294c

00017d64 <Clock_Ip_au8DividerCallbackIndex>:
   17d64:	0e0d0c00 06030201 0a070409 000b0805     ................

00017d74 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00017d84 <Clock_Ip_au8XoscCallbackIndex>:
   17d84:	00000100 00000000 00000000 00000000     ................

00017d94 <Clock_Ip_au8IrcoscCallbackIndex>:
   17d94:	03020100 00000004 00000000 00000000     ................

00017da4 <Clock_Ip_au8GateCallbackIndex>:
   17da4:	06010200 01040301 00000500 00000000     ................

00017db4 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00017dc4 <Clock_Ip_au8PllCallbackIndex>:
   17dc4:	00000100 00000000 00000000 00000000     ................

00017dd4 <Clock_Ip_au8SelectorCallbackIndex>:
   17dd4:	0a090800 03020109 07060504 00000000     ................

00017de4 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00017df4 <Clock_Ip_au8CmuCallbackIndex>:
	...

00017e04 <Clock_Ip_au8ClockFeatures>:
	...
   17e14:	01000000 00000000 00000000 00000002     ................
   17e24:	00000000 00000300 00000000 00040000     ................
   17e34:	00000000 05000000 00000000 00000000     ................
   17e44:	00000006 00000000 00000100 00000000     ................
   17e54:	00010000 00000000 04000000 00000000     ................
   17e64:	00000000 00000005 00000001 00000401     ................
   17e74:	00000200 00050100 00030000 04020000     ................
   17e84:	04000000 02000000 00000005 00000005     ................
   17e94:	00000403 00000600 00050300 00070000     ................
   17ea4:	05000000 00000000 00000000 00000006     ................
	...
   17ee4:	00050000 00000000 06000000 00000100     ................
   17ef4:	00000000 00030007 00000000 00000000     ................
   17f04:	00000000 00060000 00000000 07000000     ................
   17f14:	00000100 00000000 00030008 00000000     ................
	...
   17f2c:	00090000 00000000 0a000000 00000100     ................
   17f3c:	00000000 0003000b 00000000 00000000     ................
   17f4c:	00000000 000c0000 00000000 0d000000     ................
   17f5c:	00000100 00000000 0003000e 00000000     ................
   17f6c:	00000800 00000000 00090000 00000000     ................
   17f7c:	0a000000 00000000 00000000 0000000b     ................
   17f8c:	00000000 00000b01 00000000 000b0200     ................
   17f9c:	00000000 0b030000 00000000 00000000     ................
	...
   17fb4:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   17fc4:	01000000 00000000 00000000 00000007     ................
   17fd4:	00007300 00000700 00320000 00090000     .s........2.....
   17fe4:	02000000 07000000 00000000 00000021     ............!...
   17ff4:	00000009 00000400 00000900 00030000     ................
   18004:	00070000 61000000 07000000 00000000     .......a........
   18014:	00000024 00000007 00002500 00000700     $........%......
   18024:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   18034:	00000000 00000020 38000004 00003800     .... ......8.8..
   18044:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   18054:	04000000 00260000 00000026 66000004     ......&.&......f
   18064:	00006600 00000400 00370037 00040000     .f......7.7.....
   18074:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   18084:	2e000004 00002e00 00000200 00404040     ............@@@.
   18094:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   180a4:	0000006b 6c000004 00006c00 00000900     k......l.l......
   180b4:	00010000 00090000 00000000 07000000     ................
   180c4:	00000000 00000036 00000007 00003100     ....6........1..
   180d4:	00000700 00490000 00070000 4a000000     ......I........J
   180e4:	07000000 00000000 0000004b 00000007     ........K.......
   180f4:	00004c00 00000700 004d0000 00070000     .L........M.....
   18104:	3d000000 03000000 00000000 00000000     ...=............

00018114 <Clock_Ip_au16SelectorEntryHardwareValue>:
   18114:	01010a03 01010001 04040002 02000603     ................
   18124:	00010810 02020100 00000000 00000007     ................
   18134:	00000009 00000000 00000c0e 00000000     ................
	...

0001816c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   1816c:	00020000 00000300 00000601 00000000     ................
	...

0001819c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   1819c:	00000700 00000000 02020000 01010303     ................
   181ac:	03020606 00000000 00000000 00000000     ................
	...

000181cc <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   181cc:	00000001 00000000 02020000 01010303     ................
   181dc:	03020606 00000000 00000000 00000000     ................
	...

000181fc <Clock_Ip_au8DividerValueHardwareValue>:
   181fc:	00020100 00000003 00000004 00000000     ................
   1820c:	00000005 00000000 00000000 00000000     ................
   1821c:	00000006 00000000 00000000 00000000     ................
	...
   1823c:	00000007                                ....

00018240 <Clock_Ip_apxScgPeriphAsyncDivs>:
   18240:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00018250 <Clock_Ip_aeSourceTypeClockName>:
   18250:	00000000 00000001 00000001 00000001     ................
   18260:	00000001 00000001 00000001 00000001     ................
   18270:	00000002 00000003 00000001 00000001     ................
   18280:	00000001 00000001 00000002 00000002     ................
   18290:	00000003 00000003 00000001 00000001     ................
   182a0:	00000004 00000004 00000004 00000004     ................
	...

0001830c <Clock_Ip_aeHwPllName>:
   1830c:	00000009                                ....

00018310 <Clock_Ip_aeHwDfsName>:
   18310:	00000057                                W...

00018314 <Clock_Ip_axDividerCallbacks>:
   18314:	00002ebd 00002ec7 00002ee1 00002efb     ................
   18324:	00002f15 00002f2f 00002f49 00002f63     ./..//..I/..c/..
   18334:	00002f7d 00002f97 00002fb1 00002fcb     }/.../.../.../..
   18344:	00002fe5 00002fff 00003019              ./.../...0..

00018350 <Clock_Ip_axDividerTriggerCallbacks>:
   18350:	0000338d 0000338d                       .3...3..

00018358 <Clock_Ip_axExtOscCallbacks>:
   18358:	00003399 00003399 00003399 000033a3     .3...3...3...3..
   18368:	00003399 000033ad 000033c7 000033e1     .3...3...3...3..
   18378:	00003465 00003479                       e4..y4..

00018380 <Clock_Ip_axFracDivCallbacks>:
   18380:	00003639 00003639 00003643              96..96..C6..

0001838c <Clock_Ip_axGateCallbacks>:
   1838c:	0000365d 00003667 00003767 00003781     ]6..g6..g7...7..
   1839c:	00003717 00003731 000036c7 000036e1     .7..17...6...6..
   183ac:	00003677 00003691 000037b7 000037d1     w6...6...7...7..
   183bc:	00003807 00003821                       .8..!8..

000183c4 <Clock_Ip_axIntOscCallbacks>:
   183c4:	000039cd 000039cd 000039d7 000039e1     .9...9...9...9..
   183d4:	000039fb 00003a15 00003a29 00003a43     .9...:..):..C:..
   183e4:	00003a5d 00003a71 00003a8b 00003aa5     ]:..q:...:...:..
   183f4:	00003b4d 00003b67 00003b81              M;..g;...;..

00018400 <Clock_Ip_axCmuCallbacks>:
   18400:	0000411d 00004127 00004133 0000411d     .A..'A..3A...A..

00018410 <Clock_Ip_axPllCallbacks>:
   18410:	0000413d 0000413d 00004147 0000413d     =A..=A..GA..=A..
   18420:	00004153 0000415d 00004177 00004191     SA..]A..wA...A..
   18430:	00004235 00004221                       5B..!B..

00018438 <Clock_Ip_axPcfsCallbacks>:
   18438:	00004391                                .C..

0001843c <Clock_Ip_axSelectorCallbacks>:
   1843c:	0000439d 0000439d 000043a7 000043c1     .C...C...C...C..
   1844c:	0000439d 000043db 000043f5 0000440f     .C...C...C...D..
   1845c:	00004429 00004443 0000445d 00004477     )D..CD..]D..wD..
   1846c:	00004491 000044ab 000044c5 000044df     .D...D...D...D..
   1847c:	000044f9 00004513 0000452d 00004547     .D...E..-E..GE..
   1848c:	00004561 0000457b                       aE..{E..

00018494 <ClockSource>:
   18494:	00000000 00000008 00000002 00000005     ................
	...
   184ac:	00000009                                ....

000184b0 <ResetReasonArray>:
   184b0:	00000000 00000001 00000002 00000003     ................
   184c0:	00000004 00000005 00000006 00000007     ................
   184d0:	00000008 00000009 0000000a 0000000b     ................
   184e0:	0000000c 0000000d 0000000e              ............

000184ec <Port_au32PortCiPortBaseAddr>:
   184ec:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   184fc:	4004d000                                ...@

00018500 <Port_au32PortCiGpioBaseAddr>:
   18500:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   18510:	400ff100                                ...@

00018514 <Adc_Ip_apxBase>:
   18514:	4003b000 40027000                       ...@.p.@

0001851c <Lpspi_Ip_apxBases>:
   1851c:	4002c000 4002d000 4002e000              ...@...@...@

00018528 <Can_Ipw_apxStatus>:
   18528:	1fff8e18 1fff9038                       ....8...

00018530 <Flexcan_Ip_apxBase>:
   18530:	40024000 40025000 4002b000              .@.@.P.@...@

0001853c <payload_code.3>:
   1853c:	03020100 07060504 09090908 0a0a0a09     ................
   1854c:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
   1855c:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
   1856c:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
   1857c:	0000000f                                ....

00018580 <flexcanBase.2>:
   18580:	40024000 40025000 4002b000              .@.@.P.@...@

0001858c <maxMbNum.1>:
   1858c:	00000020 00000010 00000010               ...........

00018598 <flexcanBase.0>:
   18598:	40024000                                .@.@

0001859c <McuApis>:
   1859c:	00000000 0001737c 00000002 00017388     ....|s.......s..
   185ac:	00000008 00017398 00000009 000173a8     .....s.......s..

000185bc <McuErrors>:
   185bc:	00000011 000173c0 0000000f 000173d8     .....s.......s..
   185cc:	00000013 000173f0 0000000b 0001740c     .....s.......t..
   185dc:	0000000c 0001740c 00000010 0001740c     .....t.......t..

000185ec <PlatformApis>:
   185ec:	00000020 00017424 00000021 00017434      ...$t..!...4t..
   185fc:	00000022 00017448 00000023 00017464     "...Ht..#...dt..
   1860c:	00000024 00017480                       $....t..

00018614 <PlatformErrors>:
   18614:	00000001 000174a0 00000004 000174b0     .....t.......t..
   18624:	00000002 000174d4                       .....t..

0001862c <PortApis>:
   1862c:	00000000 000174ec 00000001 000174f8     .....t.......t..
   1863c:	00000004 00017510 00000002 00017524     .....u......$u..
   1864c:	00000003 00017540                       ....@u..

00018654 <PortErrors>:
   18654:	0000000a 00017558 0000000e 0001756c     ....Xu......lu..
   18664:	0000000c 000173c0 000000f0 000173c0     .....s.......s..
   18674:	0000000d 0001758c 0000000f 000173d8     .....u.......s..
   18684:	00000010 0001740c                       .....t..

0001868c <DioApis>:
   1868c:	00000001 000175a4 00000000 000175b8     .....u.......u..
   1869c:	00000011 000175cc 00000005 000175e0     .....u.......u..
   186ac:	00000004 000175f8 00000003 00017610     .....u.......v..
   186bc:	00000002 00017620 00000012 00017630     .... v......0v..

000186cc <DioErrors>:
   186cc:	00000021 00017648 00000020 0001740c     !...Hv.. ....t..
   186dc:	0000000a 00017664 00000014 0001767c     ....dv......|v..
   186ec:	0000001f 0001768c 000000f0 000176a8     .....v.......v..

000186fc <PwmApis>:
   186fc:	00000000 000176c4 00000001 000176d0     .....v.......v..
   1870c:	00000002 000176e0 00000003 000176f4     .....v.......v..
   1871c:	00000004 0001770c 00000008 00017724     .....w......$w..

0001872c <PwmErrors>:
   1872c:	00000010 0001773c 00000011 000173d8     ....<w.......s..
   1873c:	00000014 000173f0 00000012 00017754     .....s......Tw..
   1874c:	00000013 00017768 00000015 0001740c     ....hw.......t..

0001875c <AdcApis>:
   1875c:	00000000 0001778c 00000001 00017798     .....w.......w..
   1876c:	00000002 000177a8 00000003 000177c4     .....w.......w..
   1877c:	00000004 000177e0 00000009 000177f0     .....w.......w..
   1878c:	00000029 00017808 0000000c 00017818     )....x.......x..
   1879c:	0000000a 00017830                       ....0x..

000187a4 <AdcErrors>:
   187a4:	0000000a 000173d8 0000000d 000173f0     .....s.......s..
   187b4:	00000014 000174a0 00000015 00017848     .....t......Hx..
   187c4:	00000019 0001785c 0000002b 0001787c     ....\x..+...|x..

000187d4 <SchedulerApis>:
   187d4:	00000000 0001789c 00000002 000178b0     .....x.......x..
   187e4:	00000003 000178cc 00000004 000178e4     .....x.......x..
   187f4:	00000005 000178fc 00000006 00017914     .....x.......y..
   18804:	00000007 0001792c 00000008 00017944     ....,y......Dy..
   18814:	00000009 0001795c 0000000a 00017974     ....\y......ty..
   18824:	0000000b 0001798c 0000000c 000179a4     .....y.......y..
   18834:	0000000d 000179bc                       .....y..

0001883c <SchedulerErrors>:
   1883c:	00000000 0001773c 00000001 000179d8     ....<w.......y..
   1884c:	00000002 000179f0 00000003 00017a0c     .....y.......z..
   1885c:	00000004 00017a24 00000005 00017a48     ....$z......Hz..
   1886c:	00000006 00017a60                       ....`z..

00018874 <HwIoAb_ButtonsApis>:
   18874:	00000000 00017a78 00000001 00017a90     ....xz.......z..
   18884:	00000002 00017aac                       .....z..

0001888c <HwIoAb_ButtonsErrors>:
   1888c:	00000000 0001773c 00000001 00017acc     ....<w.......z..
   1889c:	00000002 00017ae0 00000003 00017af8     .....z.......z..

000188ac <HwIoAb_LedsApis>:
   188ac:	00000000 00017b10 00000001 00017b24     .....{......${..
   188bc:	00000002 00017b3c 00000003 00017b54     ....<{......T{..

000188cc <HwIoAb_LedsErrors>:
   188cc:	00000000 0001773c 00000001 00017b70     ....<w......p{..
   188dc:	00000002 00017af8                       .....z..

000188e4 <HwIoAb_PotsApis>:
   188e4:	00000000 00017b80 00000001 00017b94     .....{.......{..
   188f4:	00000002 00017bac                       .....{..

000188fc <HwIoAb_PotsErrors>:
   188fc:	00000000 00017bc8 00000001 00017af8     .....{.......z..

0001890c <HwIoAb_BuzzerApis>:
   1890c:	00000000 00017be0 00000001 00017bf8     .....{.......{..
   1891c:	00000002 00017c10                       .....|..

00018924 <HwIoAb_BuzzerErrors>:
   18924:	00000000 00017c28                       ....(|..

0001892c <ModuleStrings>:
   1892c:	00000065 00017c3c 00000004 0001859c     e...<|..........
   1893c:	00000006 000185bc 000000ff 00017c48     ............H|..
   1894c:	00000005 000185ec 00000003 00018614     ................
   1895c:	0000007c 00017c58 00000005 0001862c     |...X|......,...
   1896c:	00000007 00018654 00000078 00017c64     ....T...x...d|..
   1897c:	00000008 0001868c 00000006 000186cc     ................
   1898c:	00000079 00017c70 00000006 000186fc     y...p|..........
   1899c:	00000006 0001872c 0000007b 00017c7c     ....,...{...||..
   189ac:	00000009 0001875c 00000006 000187a4     ....\...........
   189bc:	0000012c 00017c88 0000000d 000187d4     ,....|..........
   189cc:	00000007 0001883c 0000012d 00017c9c     ....<...-....|..
   189dc:	00000003 00018874 00000004 0001888c     ....t...........
   189ec:	0000012e 00017cbc 00000004 000188ac     .....|..........
   189fc:	00000003 000188cc 0000012f 00017cd8     ......../....|..
   18a0c:	00000003 000188e4 00000002 000188fc     ................
   18a1c:	00000130 00017cf4 00000003 0001890c     0....|..........
   18a2c:	00000001 00018924                       ....$...

00018a34 <Can_43_FLEXCAN_Driver_P2Func>:
   18a34:	0000a639 0000a2b5 0000a459 0000a3f9     9.......Y.......
   18a44:	0000a4d1 0000a55d 0000a591 0000a5e5     ....]...........

00018a54 <Can_43_FLEXCAN_Driver_Config>:
   18a54:	00030000 00018a34                       ....4...

00018a5c <CanIf_CtrlPCConfig>:
   18a5c:	00000000 00018a54 00000101 00018a54     ....T.......T...

00018a6c <CanIf_PCConfig>:
   18a6c:	00000002 00018a5c                       ....\...

00018a74 <CanIf_TxPdu>:
   18a74:	00000000 00000123 00000002 00000001     ....#...........
   18a84:	00000a29 00000001 00000124 00000002     ).......$.......
   18a94:	00000001 00000a29 00000002 00000100     ....)...........
   18aa4:	00000002 00010002 000009d5              ............

00018ab0 <CanIf_RxPdu>:
   18ab0:	00010000 00010001 00000a0d              ............

00018abc <CanIf_Can_43_FLEXCAN_HohToRxPduMapping>:
   18abc:	00018ab0 00000000 00000000              ............

00018ac8 <CanIf_Can_43_FLEXCAN_DrvConfig>:
   18ac8:	00018abc                                ....

00018acc <CanIf_CanDrvConfig>:
   18acc:	00018ac8                                ....

00018ad0 <CanIf_Config>:
   18ad0:	00000301 00018acc 00018ab0 00018a74     ............t...

00018ae0 <Can_43_FLEXCANIpwHwChannelConfig0>:
   18ae0:	00019028                                (...

00018ae4 <Can_43_FLEXCANIpwHwChannelConfig1>:
   18ae4:	00019078                                x...

00018ae8 <Can_au32HwBufferAddr_Ctrl0>:
   18ae8:	4002b080 4002b090                       ...@...@

00018af0 <Can_au32HwBufferAddr_Ctrl1>:
   18af0:	40024080 40024090                       .@.@.@.@

00018af8 <Can_aHwFilter_Object0>:
   18af8:	00000200 dffc0000                       ........

00018b00 <Can_aCtrlOffsetToCtrlIDMap>:
   18b00:	0000ff01                                ....

00018b04 <Can_aHwObjIDToCtrlIDMap>:
   18b04:	00010001                                ....

00018b08 <Can_aHwObjectConfig>:
	...
   18b14:	ff010000 00010008 00018af8 00000000     ................
   18b24:	00000000 00018af0 00000001 00000001     ................
   18b34:	00000000 ff020000 00000008 00000000     ................
   18b44:	00000003 00000000 00018ae8 00000002     ................
   18b54:	00000001 00000000 ff010000 00000008     ................
   18b64:	00000000 00000003 00000001 00018af4     ................

00018b74 <Can_aBaudrateConfig_Ctrl0>:
   18b74:	06030000 001d0003 00000000 00000000     ................
	...

00018b8c <Can_apHwObject_Ctrl0>:
   18b8c:	00018b2c                                ,...

00018b90 <Can_aBaudrateConfig_Ctrl1>:
   18b90:	06030000 001d0003 00000000 00000000     ................
	...

00018ba8 <Can_apHwObject_Ctrl1>:
   18ba8:	00018b08 00018b50                       ....P...

00018bb0 <Can_aControllerConfig>:
   18bb0:	00020000 4002b000 00000000 ffffffff     .......@........
	...
   18bcc:	00010000 00018b74 00018ae0 00000001     ....t...........
   18bdc:	00018b8c 00000101 40024000 00000001     .........@.@....
   18bec:	ffffffff 00000000 00000000 00000000     ................
   18bfc:	00010000 00018b90 00018ae4 00000002     ................
   18c0c:	00018ba8                                ....

00018c10 <Can_apController>:
   18c10:	00018bb0 00018be0                       ........

00018c18 <Can_43_FLEXCAN_Config>:
   18c18:	00000000 00000001 00018b00 00018b04     ................
   18c28:	00018b08 00018c10                       ........

00018c30 <Mcu_aClockConfigPB>:
	...
   18c38:	14000002 0400000e 01000020 00000002     ........ .......
   18c48:	01000001 00000001 00000005 00000001     ................
   18c58:	00000000 00000057 00000000 00000000     ....W...........
	...
   18c70:	00000057 00000000 00000057 00000000     W.......W.......
	...
   18c98:	00000019 00000005 0000001a 00000002     ................
   18ca8:	0000001b 00000005 0000002a 00000002     ........*.......
   18cb8:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   18cc8:	00000041 00000000 00000042 00000000     A.......B.......
   18cd8:	00000031 0000000b 00000045 00000000     1.......E.......
   18ce8:	00000046 0000000b 00000047 00000000     F.......G.......
   18cf8:	00000044 00000000 00000030 0000000b     D.......0.......
   18d08:	0000003d 00000000 00000043 00000000     =.......C.......
   18d18:	00000049 00000000 0000004a 00000000     I.......J.......
   18d28:	0000004b 00000000 00000048 00000000     K.......H.......
   18d38:	00000057 00000057 00000057 00000057     W...W...W...W...
   18d48:	00000057 00000057 00000057 00000057     W...W...W...W...
   18d58:	00000057 00000057 00000057 00000057     W...W...W...W...
   18d68:	00000057 00000057 00000057 00000057     W...W...W...W...
   18d78:	0000000a 00000001 00000000 0000000b     ................
   18d88:	00000001 00000000 0000000c 00000001     ................
   18d98:	00000000 0000000d 00000002 00000000     ................
   18da8:	0000001d 00000001 00000000 0000001e     ................
   18db8:	00000002 00000000 0000001f 00000001     ................
   18dc8:	00000000 00000021 00000001 00000000     ....!...........
   18dd8:	00000022 00000002 00000000 00000023     "...........#...
   18de8:	00000001 00000000 00000025 00000002     ........%.......
   18df8:	00000000 00000026 00000004 00000000     ....&...........
   18e08:	00000027 00000002 00000000 00000048     '...........H...
   18e18:	00000001 00000001 00000057 00000000     ........W.......
   18e28:	00000000 00000057 00000000 00000000     ....W...........
   18e38:	00000057 00000000 00000000 00000057     W...........W...
	...
   18e50:	00000057 00000000 00000000 00000057     W...........W...
	...
   18e68:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   18e84:	00000014 00007d00 00000015 00007d00     .....}.......}..
   18e94:	00000016 00007d00 00000017 00008000     .....}..........
   18ea4:	00000030 00000001 00000031 00000001     0.......1.......
   18eb4:	00000033 00000000 00000034 00000000     3.......4.......
   18ec4:	00000036 00000000 00000039 00000000     6.......9.......
   18ed4:	0000003a 00000001 0000003b 00000000     :.......;.......
   18ee4:	0000003c 00000001 0000003d 00000000     <.......=.......
   18ef4:	0000003e 00000000 0000003f 00000000     >.......?.......
   18f04:	00000040 00000001 00000041 00000000     @.......A.......
   18f14:	00000042 00000000 00000043 00000000     B.......C.......
   18f24:	00000044 00000000 00000045 00000000     D.......E.......
   18f34:	00000046 00000001 00000047 00000000     F.......G.......
   18f44:	00000048 00000000 00000049 00000000     H.......I.......
   18f54:	0000004a 00000000 0000004b 00000000     J.......K.......
   18f64:	0000004e 00000001 0000004f 00000001     N.......O.......
   18f74:	00000050 00000001 00000051 00000001     P.......Q.......
   18f84:	00000052 00000001 00000053 00000001     R.......S.......
   18f94:	00000054 00000001 00000055 00000000     T.......U.......
   18fa4:	00000057 00000000 00000057 00000000     W.......W.......
   18fb4:	00000057 00000000 00000057 00000000     W.......W.......
   18fc4:	00000057 00000000 00000057 00000000     W.......W.......
   18fd4:	00000057 00000000 00000057 00000000     W.......W.......
   18fe4:	00000057 00000000 00000057 00000000     W.......W.......
   18ff4:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00019028 <Flexcan_aCtrlConfigPB>:
   19028:	00000002 00000000 00000000 00000000     ................
   19038:	00000040 00000000 00000100 00000003     @...............
   19048:	00000006 00000003 0000001d 00000000     ................
   19058:	00000004 00000006 00000003 0000001d     ................
	...
   19070:	0000b839 0000b8e5 00000002 00000000     9...............
	...
   19088:	00000040 00000000 00000100 00000003     @...............
   19098:	00000006 00000003 0000001d 00000000     ................
   190a8:	00000004 00000006 00000003 0000001d     ................
	...
   190c0:	0000b839 0000b8e5                       9.......

000190c8 <aIrqConfiguration>:
   190c8:	00000027 00000000 0000834d 00000028     '.......M...(...
   190d8:	00000000 0000835d 0000005c 00000f01     ....]...\.......
   190e8:	0000fd65 0000005d 00000f01 0000fd75     e...].......u...
   190f8:	0000005f 00000f01 0000fd85 0000004e     _...........N...
   19108:	00000f01 0000fcd5 0000004f 00000f01     ........O.......
   19118:	0000fce5 00000051 00000f01 0000fcf5     ....Q...........

00019128 <intCtrlConfig>:
   19128:	00000008 000190c8                       ........

00019130 <Lpspi_Ip_DeviceAttributes_Conf0Spi1Cs3>:
   19130:	00000001 07070606 43200000 1fff8b28     .......... C(...

00019140 <Lpspi_Ip_PhyUnitConfig_SPI1>:
   19140:	00000001 00000000 00000001 00000000     ................
   19150:	00000000                                ....

00019154 <Mcu_Config>:
   19154:	0000005a 00000000 00000001 00000001     Z...............
   19164:	000197f0 00018c30 000197fc              ....0.......

00019170 <OsIf_xPredefinedConfig>:
   19170:	00000000 02dc6c00                       .....l..

00019178 <OsIf_apxPredefinedConfig>:
   19178:	00019170                                p...

0001917c <Platform_uConfiguration>:
   1917c:	00019184                                ....

00019180 <Platform_Config>:
   19180:	0001917c                                |...

00019184 <ipwConfig>:
   19184:	00019128 00000000                       (.......

0001918c <Port_au16PinDescription>:
   1918c:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1919c:	0001ffff 0003ffff 0003ffff 0003ffff     ................
   191ac:	0003ffff 0001ffff 0003ffcf 0003ffff     ................
   191bc:	0003ffff 0003fcff 0001dfef 0003f36f     ............o...
   191cc:	0003fe3f 0003f3ff 00026e3f 0001bebf     ?.......?n......
   191dc:	0002cf9f 0000302f 000030cc 000183ef     ..../0...0......
   191ec:	0001ec7c 00000b1f 00000023 00000010     |.......#.......
   191fc:	0001010c 00000033 000072cf 0000003c     ....3....r..<...
   1920c:	0000cff3 00001b2f 00018c7f 00000433     ..../.......3...
   1921c:	00000000 00000030 0000600b 00018c38     ....0....`..8...

0001922c <g_pin_mux_InitConfigArr>:
   1922c:	4004b000 400ff080 00000008 00000002     ...@...@........
   1923c:	00000001 00000002 00000000 00000000     ................
	...
   19254:	4004b000 400ff080 00000009 00000002     ...@...@........
   19264:	00000001 00000002 00000000 00000000     ................
	...
   1927c:	4004b000 400ff080 0000000a 00000002     ...@...@........
   1928c:	00000001 00000002 00000000 00000000     ................
	...
   192a4:	4004b000 400ff080 0000000b 00000002     ...@...@........
   192b4:	00000001 00000002 00000000 00000000     ................
	...
   192cc:	4004b000 400ff080 0000000d 00000002     ...@...@........
   192dc:	00000001 00000002 00000000 00000000     ................
	...
   192f4:	4004b000 400ff080 0000000e 00000002     ...@...@........
   19304:	00000001 00000002 00000000 00000000     ................
	...
   1931c:	4004b000 00000000 00000010 00000002     ...@............
   1932c:	00000003 00000001 00000000 00000000     ................
	...
   19344:	4004b000 00000000 00000011 00000002     ...@............
   19354:	00000003 00000002 00000000 00000000     ................
	...
   1936c:	4004d000 400ff100 0000000c 00000002     ...@...@........
   1937c:	00000001 00000001 00000000 00000000     ................
	...
   19394:	4004d000 00000000 00000004 00000002     ...@............
   193a4:	00000005 00000001 00000000 00000000     ................
	...
   193bc:	4004d000 00000000 00000005 00000002     ...@............
   193cc:	00000005 00000002 00000000 00000000     ................
	...
   193e4:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   193f4:	00000001 00000001 00000000 00000000     ................
	...
   1940c:	40049000 400ff000 0000000c 00000002     ...@...@........
   1941c:	00000001 00000001 00000000 00000000     ................
	...
   19434:	40049000 00000000 0000000d 00000002     ...@............
   19444:	00000002 00000002 00000000 00000000     ................
	...
   1945c:	4004a000 00000000 00000001 00000002     ...@............
   1946c:	00000000 00000001 00000000 00000000     ................
	...
   19484:	4004a000 00000000 0000000d 00000002     ...@............
   19494:	00000000 00000001 00000000 00000000     ................
	...
   194ac:	4004a000 00000000 0000000e 00000002     ...@............
   194bc:	00000003 00000002 00000000 00000000     ................
	...
   194d4:	4004a000 00000000 0000000f 00000002     ...@............
   194e4:	00000003 00000001 00000000 00000000     ................
	...
   194fc:	4004a000 00000000 00000010 00000002     ...@............
   1950c:	00000003 00000002 00000000 00000000     ................
	...
   19524:	4004a000 00000000 00000011 00000002     ...@............
   19534:	00000003 00000002 00000000 00000000     ................
	...

0001954c <au8Port_PartitionList>:
   1954c:	00000001                                ....

00019550 <au32Port_PinToPartitionMap>:
   19550:	00000001 00000001 00000001 00000001     ................
   19560:	00000001 00000001 00000001 00000001     ................
   19570:	00000001 00000001 00000001 00000001     ................
   19580:	00000001 00000001 00000001 00000001     ................
   19590:	00000001 00000001 00000001 00000001     ................

000195a0 <Port_au16NoUnUsedPadsArrayDefault>:
   195a0:	00010000 00030002 00070006 00090008     ................
   195b0:	000e000b 0010000f 00200011 00230022     .......... .".#.
   195c0:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   195d0:	0040002c 00420041 00460043 004c0047     ,.@.A.B.C.F.G.L.
   195e0:	0060004f 00620061 00640063 00660065     O.`.a.b.c.d.e.f.
   195f0:	00680067 006a0069 006c006b 006e006d     g.h.i.j.k.l.m.n.
   19600:	0070006f 00810080 00830082 00870086     o.p.............
   19610:	00890088 008b008a 008e008d 0090008f     ................

00019620 <Port_UnUsedPin>:
   19620:	00000000 00000001 00000000              ............

0001962c <Port_aPinConfigDefault>:
   1962c:	00000048 00000100 00000000 00000002     H...............
   1963c:	00010001 00000049 00000100 00000000     ....I...........
   1964c:	00000002 00010101 0000004a 00000100     ........J.......
   1965c:	00000000 00000002 00010101 0000008c     ................
   1966c:	00000100 00000000 00000001 00010101     ................
   1967c:	0000004b 00000100 00000000 00000002     K...............
   1968c:	00010101 0000004d 00000100 00000000     ....M...........
   1969c:	00000002 00010101 0000004e 00000100     ........N.......
   196ac:	00000000 00000002 00010101 00000071     ............q...
   196bc:	00000100 00000000 00000001 00010101     ................
   196cc:	0000000c 00000100 00000000 00000001     ................
   196dc:	00010101 00000021 00000000 00000002     ....!...........
   196ec:	00000000 00010000 0000002d 00000000     ........-.......
   196fc:	00000002 00000000 00010000 0000000d     ................
   1970c:	00000200 00000000 00000002 00010000     ................
   1971c:	00000050 00000300 00000000 00000001     P...............
   1972c:	00010000 00000051 00000300 00000000     ....Q...........
   1973c:	00000002 00010000 0000002e 00000300     ................
   1974c:	00000000 00000002 00010000 0000002f     ............/...
   1975c:	00000300 00000000 00000001 00010000     ................
   1976c:	00000030 00000300 00000000 00000002     0...............
   1977c:	00010000 00000031 00000300 00000000     ....1...........
   1978c:	00000002 00010000 00000084 00000500     ................
   1979c:	00000000 00000001 00010000 00000085     ................
   197ac:	00000500 00000000 00000002 00010000     ................

000197bc <Port_Config>:
   197bc:	00400014 000195a0 00019620 0001962c     ..@..... ...,...
	...
   197d4:	00019550 0001954c 0001922c              P...L...,...

000197e0 <Power_Ip_RCM_ConfigPB>:
	...

000197e8 <Power_Ip_PMC_ConfigPB>:
   197e8:	00000000                                ....

000197ec <Power_Ip_SMC_ConfigPB>:
   197ec:	00000000                                ....

000197f0 <Power_Ip_aModeConfigPB>:
	...

000197fc <Power_Ip_HwIPsConfigPB>:
   197fc:	000197e0 000197e8 000197ec              ............

00019808 <Spi_ExternalDeviceConfig_Conf0Spi1Cs3>:
   19808:	00000000 00000001 00019130 00000000     ........0.......

00019818 <Spi_aExternalDeviceConfigList>:
   19818:	00019808                                ....

0001981c <Spi_HwUnitConfig_SPI1>:
   1981c:	00000000 00000001 00000000 00019140     ............@...
   1982c:	00000001                                ....

00019830 <Spi_aHwUnitConfigList>:
   19830:	0001981c                                ....

00019834 <Spi_ChannelConfig_Spi1Cs3_Control>:
   19834:	00000001 00000008 00000001 00000004     ................
   19844:	1fff98f8 00000000 1fff8df8              ............

00019850 <Spi_ChannelConfig_Spi1Cs3_Data>:
   19850:	00000001 00000008 00000001 00000004     ................
   19860:	1fff9904 00000000 1fff8dfc              ............

0001986c <Spi_aChannelConfigList>:
   1986c:	00019834 00019850                       4...P...

00019874 <Spi_Spi1Cs3_W_R_Job_ChannelAssignment>:
   19874:	00000100                                ....

00019878 <Spi_JobConfig_Spi1Cs3_W_R_Job>:
   19878:	00000002 00019874 00000000 00000000     ....t...........
	...
   19890:	1fff8df4 00000000 00019818              ............

0001989c <Spi_aJobConfigList>:
   1989c:	00019878                                x...

000198a0 <Spi_Spi1Cs3_Sequence_W_R_JobAssignment>:
   198a0:	00000000                                ....

000198a4 <Spi_SequenceConfig_Spi1Cs3_Sequence_W_R>:
   198a4:	00000001 00000000 000198a0 00000000     ................
   198b4:	00000000                                ....

000198b8 <Spi_aSequenceConfigList>:
   198b8:	000198a4                                ....

000198bc <Spi_Config>:
   198bc:	00010001 00000000 00000000 0001986c     ............l...
   198cc:	0001989c 000198b8 00019818 00019830     ............0...

000198dc <_aInitStr.0>:
   198dc:	00000000 54540000 45522052 53454747     ......TTR REGGES
   198ec:	00000000                                ....

000198f0 <_aV2C.0>:
   198f0:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00019900 <__INIT_TABLE>:
   19900:	00000002 	.word	0x00000002
   19904:	1fff8b10 	.word	0x1fff8b10
   19908:	00019928 	.word	0x00019928
   1990c:	00019948 	.word	0x00019948
   19910:	1fff8800 	.word	0x1fff8800
   19914:	00000000 	.word	0x00000000
   19918:	00000310 	.word	0x00000310

0001991c <__ZERO_TABLE>:
   1991c:	00000001 	.word	0x00000001
   19920:	1fff8b30 	.word	0x1fff8b30
   19924:	1fff9dd0 	.word	0x1fff9dd0
