
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000c63 	.word	0x00000c63
  10:	00000c65 	.word	0x00000c65
  14:	00000c67 	.word	0x00000c67
  18:	00000c69 	.word	0x00000c69
	...
  2c:	00000c6b 	.word	0x00000c6b
  30:	00000c6d 	.word	0x00000c6d
  34:	00000000 	.word	0x00000000
  38:	00000c6f 	.word	0x00000c6f
  3c:	00000c71 	.word	0x00000c71
  40:	00000c73 	.word	0x00000c73
  44:	00000c73 	.word	0x00000c73
  48:	00000c73 	.word	0x00000c73
  4c:	00000c73 	.word	0x00000c73
  50:	00000c73 	.word	0x00000c73
  54:	00000c73 	.word	0x00000c73
  58:	00000c73 	.word	0x00000c73
  5c:	00000c73 	.word	0x00000c73
  60:	00000c73 	.word	0x00000c73
  64:	00000c73 	.word	0x00000c73
  68:	00000c73 	.word	0x00000c73
  6c:	00000c73 	.word	0x00000c73
  70:	00000c73 	.word	0x00000c73
  74:	00000c73 	.word	0x00000c73
  78:	00000c73 	.word	0x00000c73
  7c:	00000c73 	.word	0x00000c73
  80:	00000c73 	.word	0x00000c73
  84:	00000c73 	.word	0x00000c73
  88:	00000c73 	.word	0x00000c73
  8c:	00000c73 	.word	0x00000c73
  90:	00000c73 	.word	0x00000c73
  94:	00000c73 	.word	0x00000c73
  98:	00000c73 	.word	0x00000c73
  9c:	00000c73 	.word	0x00000c73
  a0:	00000c73 	.word	0x00000c73
  a4:	00000c73 	.word	0x00000c73
  a8:	00000c73 	.word	0x00000c73
  ac:	00000c73 	.word	0x00000c73
  b0:	00000c73 	.word	0x00000c73
  b4:	00000c73 	.word	0x00000c73
  b8:	00000c73 	.word	0x00000c73
  bc:	00000c73 	.word	0x00000c73
  c0:	00000c73 	.word	0x00000c73
  c4:	00000c73 	.word	0x00000c73
  c8:	00000c73 	.word	0x00000c73
  cc:	00000c73 	.word	0x00000c73
  d0:	00000c73 	.word	0x00000c73
  d4:	00000c73 	.word	0x00000c73
  d8:	00000c73 	.word	0x00000c73
  dc:	00000c73 	.word	0x00000c73
  e0:	00000c73 	.word	0x00000c73
  e4:	00000c73 	.word	0x00000c73
  e8:	00000c73 	.word	0x00000c73
  ec:	00000c73 	.word	0x00000c73
  f0:	00000c73 	.word	0x00000c73
  f4:	00000c73 	.word	0x00000c73
  f8:	00000c73 	.word	0x00000c73
  fc:	00000c73 	.word	0x00000c73
 100:	00000c73 	.word	0x00000c73
 104:	00000c73 	.word	0x00000c73
 108:	00000c73 	.word	0x00000c73
 10c:	00000c73 	.word	0x00000c73
 110:	00000c73 	.word	0x00000c73
 114:	00000c73 	.word	0x00000c73
 118:	00000c73 	.word	0x00000c73
 11c:	00000c73 	.word	0x00000c73
 120:	00000c73 	.word	0x00000c73
 124:	00000c73 	.word	0x00000c73
 128:	00000c73 	.word	0x00000c73
 12c:	00000c73 	.word	0x00000c73
 130:	00000c73 	.word	0x00000c73
 134:	00000c73 	.word	0x00000c73
 138:	00000c73 	.word	0x00000c73
 13c:	00000c73 	.word	0x00000c73
 140:	00000c73 	.word	0x00000c73
 144:	00000c73 	.word	0x00000c73
 148:	00000c73 	.word	0x00000c73
 14c:	00000c73 	.word	0x00000c73
 150:	00000c73 	.word	0x00000c73
 154:	00000c73 	.word	0x00000c73
 158:	00000c73 	.word	0x00000c73
 15c:	00000c73 	.word	0x00000c73
 160:	00000c73 	.word	0x00000c73
 164:	00000c73 	.word	0x00000c73
 168:	00000c73 	.word	0x00000c73
 16c:	00000c73 	.word	0x00000c73
 170:	00000c73 	.word	0x00000c73
 174:	00000c73 	.word	0x00000c73
 178:	00000c73 	.word	0x00000c73
 17c:	00000c73 	.word	0x00000c73
 180:	00000c73 	.word	0x00000c73
 184:	00000c73 	.word	0x00000c73
 188:	00000c73 	.word	0x00000c73
 18c:	00000c73 	.word	0x00000c73
 190:	00000c73 	.word	0x00000c73
 194:	00000c73 	.word	0x00000c73
 198:	00000c73 	.word	0x00000c73
 19c:	00000c73 	.word	0x00000c73
 1a0:	00000c73 	.word	0x00000c73
 1a4:	00000c73 	.word	0x00000c73
 1a8:	00000c73 	.word	0x00000c73
 1ac:	00000c73 	.word	0x00000c73
 1b0:	00000c73 	.word	0x00000c73
 1b4:	00000c73 	.word	0x00000c73
 1b8:	00000c73 	.word	0x00000c73
 1bc:	00000c73 	.word	0x00000c73
 1c0:	00000c73 	.word	0x00000c73
 1c4:	00000c73 	.word	0x00000c73
 1c8:	00000c73 	.word	0x00000c73
 1cc:	00000c73 	.word	0x00000c73
 1d0:	00000c73 	.word	0x00000c73
 1d4:	00000c73 	.word	0x00000c73
 1d8:	00000c73 	.word	0x00000c73
 1dc:	00000c73 	.word	0x00000c73
 1e0:	00000c73 	.word	0x00000c73
 1e4:	00000c73 	.word	0x00000c73
 1e8:	00000c73 	.word	0x00000c73
 1ec:	00000c73 	.word	0x00000c73
 1f0:	00000c73 	.word	0x00000c73
 1f4:	00000c73 	.word	0x00000c73
 1f8:	00000c73 	.word	0x00000c73
 1fc:	00000c73 	.word	0x00000c73
 200:	00000c73 	.word	0x00000c73
 204:	00000c73 	.word	0x00000c73
 208:	00000c73 	.word	0x00000c73
 20c:	00000c73 	.word	0x00000c73
 210:	00000c73 	.word	0x00000c73
 214:	00000c73 	.word	0x00000c73
 218:	00000c73 	.word	0x00000c73
 21c:	00000c73 	.word	0x00000c73
 220:	00000c73 	.word	0x00000c73
 224:	00000c73 	.word	0x00000c73
 228:	00000c73 	.word	0x00000c73
 22c:	00000c73 	.word	0x00000c73
 230:	00000c73 	.word	0x00000c73
 234:	00000c73 	.word	0x00000c73
 238:	00000c73 	.word	0x00000c73
 23c:	00000c73 	.word	0x00000c73
 240:	00000c73 	.word	0x00000c73
 244:	00000c73 	.word	0x00000c73
 248:	00000c73 	.word	0x00000c73
 24c:	00000c73 	.word	0x00000c73
 250:	00000c73 	.word	0x00000c73
 254:	00000c73 	.word	0x00000c73
 258:	00000c73 	.word	0x00000c73
 25c:	00000c73 	.word	0x00000c73
 260:	00000c73 	.word	0x00000c73
 264:	00000c73 	.word	0x00000c73
 268:	00000c73 	.word	0x00000c73
 26c:	00000c73 	.word	0x00000c73
 270:	00000c73 	.word	0x00000c73
 274:	00000c73 	.word	0x00000c73
 278:	00000c73 	.word	0x00000c73
 27c:	00000c73 	.word	0x00000c73
 280:	00000c73 	.word	0x00000c73
 284:	00000c73 	.word	0x00000c73
 288:	00000c73 	.word	0x00000c73
 28c:	00000c73 	.word	0x00000c73
 290:	00000c73 	.word	0x00000c73
 294:	00000c73 	.word	0x00000c73
 298:	00000c73 	.word	0x00000c73
 29c:	00000c73 	.word	0x00000c73
 2a0:	00000c73 	.word	0x00000c73
 2a4:	00000c73 	.word	0x00000c73
 2a8:	00000c73 	.word	0x00000c73
 2ac:	00000c73 	.word	0x00000c73
 2b0:	00000c73 	.word	0x00000c73
 2b4:	00000c73 	.word	0x00000c73
 2b8:	00000c73 	.word	0x00000c73
 2bc:	00000c73 	.word	0x00000c73
 2c0:	00000c73 	.word	0x00000c73
 2c4:	00000c73 	.word	0x00000c73
 2c8:	00000c73 	.word	0x00000c73
 2cc:	00000c73 	.word	0x00000c73
 2d0:	00000c73 	.word	0x00000c73
 2d4:	00000c73 	.word	0x00000c73
 2d8:	00000c73 	.word	0x00000c73
 2dc:	00000c73 	.word	0x00000c73
 2e0:	00000c73 	.word	0x00000c73
 2e4:	00000c73 	.word	0x00000c73
 2e8:	00000c73 	.word	0x00000c73
 2ec:	00000c73 	.word	0x00000c73
 2f0:	00000c73 	.word	0x00000c73
 2f4:	00000c73 	.word	0x00000c73
 2f8:	00000c73 	.word	0x00000c73
 2fc:	00000c73 	.word	0x00000c73
 300:	00000c73 	.word	0x00000c73
 304:	00000c73 	.word	0x00000c73
 308:	00000c73 	.word	0x00000c73
 30c:	00000c73 	.word	0x00000c73

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fb25 	bl	ad0 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbe4 	bl	c58 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff98f4 	.word	0x1fff98f4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb2f 	bl	bfc <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * In this case only one HTH is used for transmission with one message buffer. For reception only one HRH is utilized.
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b500      	push	{lr}
     8b2:	b085      	sub	sp, #20
    //local data.
    //Transmit message (PDU) 0 (Message ID 0x100) for Can 0 controller.
    uint8 Message0_SDU[3] = { 0xDE, 0xF4, 0xC9 }; //Data payload for message.
     8b4:	4a14      	ldr	r2, [pc, #80]	; (908 <main+0x58>)
     8b6:	ab03      	add	r3, sp, #12
     8b8:	6812      	ldr	r2, [r2, #0]
     8ba:	4611      	mov	r1, r2
     8bc:	8019      	strh	r1, [r3, #0]
     8be:	3302      	adds	r3, #2
     8c0:	0c12      	lsrs	r2, r2, #16
     8c2:	701a      	strb	r2, [r3, #0]
    PduInfoType Message0 = {
     8c4:	ab03      	add	r3, sp, #12
     8c6:	9300      	str	r3, [sp, #0]
     8c8:	2300      	movs	r3, #0
     8ca:	9301      	str	r3, [sp, #4]
     8cc:	2303      	movs	r3, #3
     8ce:	9302      	str	r3, [sp, #8]
        .SduLength = 3,
        .SduDataPtr = Message0_SDU,
        .MetaDataPtr = NULL_PTR
    };

    EcuM_Init();    //MCU configuration.
     8d0:	f000 feec 	bl	16ac <EcuM_Init>

    //SBC by default is in force normal mode so the CAN transceiver is already active.

    CanIf_SetControllerMode( CanIfFlexCan0 , CAN_CS_STARTED );   //Can 0 controller active in Can Bus.
     8d4:	2101      	movs	r1, #1
     8d6:	2001      	movs	r0, #1
     8d8:	f016 fc07 	bl	170ea <CanIf_SetControllerMode>

    while( 1u ) {
        //Transmit messages every 5s.
        CanIf_Transmit( CanIfTxPDU_0, &Message0 );   //Writing in Can 0 message buffer 1.
     8dc:	466b      	mov	r3, sp
     8de:	4619      	mov	r1, r3
     8e0:	2000      	movs	r0, #0
     8e2:	f016 fadb 	bl	16e9c <CanIf_Transmit>

        while( CanIf_Can0_bTxFlag == FALSE ); //Waiting until messages are transmitted.
     8e6:	bf00      	nop
     8e8:	4b08      	ldr	r3, [pc, #32]	; (90c <main+0x5c>)
     8ea:	781b      	ldrb	r3, [r3, #0]
     8ec:	f083 0301 	eor.w	r3, r3, #1
     8f0:	b2db      	uxtb	r3, r3
     8f2:	2b00      	cmp	r3, #0
     8f4:	d1f8      	bne.n	8e8 <main+0x38>
        CanIf_Can0_bTxFlag = FALSE;  //Clearing transmit flag.
     8f6:	4b05      	ldr	r3, [pc, #20]	; (90c <main+0x5c>)
     8f8:	2200      	movs	r2, #0
     8fa:	701a      	strb	r2, [r3, #0]

        Delay( 5000 );  //Waiting 5s for next transmission.
     8fc:	f241 3088 	movw	r0, #5000	; 0x1388
     900:	f000 fef4 	bl	16ec <Delay>
        CanIf_Transmit( CanIfTxPDU_0, &Message0 );   //Writing in Can 0 message buffer 1.
     904:	e7ea      	b.n	8dc <main+0x2c>
     906:	bf00      	nop
     908:	000173ec 	.word	0x000173ec
     90c:	1fff8b30 	.word	0x1fff8b30

00000910 <DevAssert>:
    #error "Unsupported architecture!"
#endif

/* Implement default assert macro */
static inline void DevAssert(volatile boolean x)
{
     910:	b082      	sub	sp, #8
     912:	4603      	mov	r3, r0
     914:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     918:	f89d 3007 	ldrb.w	r3, [sp, #7]
     91c:	b2db      	uxtb	r3, r3
     91e:	2b00      	cmp	r3, #0
     920:	d101      	bne.n	926 <DevAssert+0x16>
     922:	be00      	bkpt	0x0000
     924:	e7fd      	b.n	922 <DevAssert+0x12>
}
     926:	bf00      	nop
     928:	b002      	add	sp, #8
     92a:	4770      	bx	lr

0000092c <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     92c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     92e:	f3ef 8310 	mrs	r3, PRIMASK
     932:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     934:	4623      	mov	r3, r4
}
     936:	4618      	mov	r0, r3
     938:	f85d 4b04 	ldr.w	r4, [sp], #4
     93c:	4770      	bx	lr

0000093e <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     93e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     940:	f3ef 8310 	mrs	r3, PRIMASK
     944:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     946:	4623      	mov	r3, r4
}
     948:	4618      	mov	r0, r3
     94a:	f85d 4b04 	ldr.w	r4, [sp], #4
     94e:	4770      	bx	lr

00000950 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     950:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     952:	f3ef 8310 	mrs	r3, PRIMASK
     956:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     958:	4623      	mov	r3, r4
}
     95a:	4618      	mov	r0, r3
     95c:	f85d 4b04 	ldr.w	r4, [sp], #4
     960:	4770      	bx	lr

00000962 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     962:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     964:	f3ef 8310 	mrs	r3, PRIMASK
     968:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     96a:	4623      	mov	r3, r4
}
     96c:	4618      	mov	r0, r3
     96e:	f85d 4b04 	ldr.w	r4, [sp], #4
     972:	4770      	bx	lr

00000974 <Spi_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Spi_schm_read_msr(void)
{
     974:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     976:	f3ef 8310 	mrs	r3, PRIMASK
     97a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     97c:	4623      	mov	r3, r4
}
     97e:	4618      	mov	r0, r3
     980:	f85d 4b04 	ldr.w	r4, [sp], #4
     984:	4770      	bx	lr
	...

00000988 <CDD_UserTxConfirmation_Can_0>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can0 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_0( PduIdType TxPduId, Std_ReturnType result ) {
     988:	b082      	sub	sp, #8
     98a:	4603      	mov	r3, r0
     98c:	460a      	mov	r2, r1
     98e:	f8ad 3006 	strh.w	r3, [sp, #6]
     992:	4613      	mov	r3, r2
     994:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     998:	f89d 3005 	ldrb.w	r3, [sp, #5]
     99c:	2b00      	cmp	r3, #0
     99e:	d108      	bne.n	9b2 <CDD_UserTxConfirmation_Can_0+0x2a>
        Transmit_count++;
     9a0:	4b05      	ldr	r3, [pc, #20]	; (9b8 <CDD_UserTxConfirmation_Can_0+0x30>)
     9a2:	781b      	ldrb	r3, [r3, #0]
     9a4:	3301      	adds	r3, #1
     9a6:	b2da      	uxtb	r2, r3
     9a8:	4b03      	ldr	r3, [pc, #12]	; (9b8 <CDD_UserTxConfirmation_Can_0+0x30>)
     9aa:	701a      	strb	r2, [r3, #0]
        CanIf_Can0_bTxFlag = TRUE;
     9ac:	4b03      	ldr	r3, [pc, #12]	; (9bc <CDD_UserTxConfirmation_Can_0+0x34>)
     9ae:	2201      	movs	r2, #1
     9b0:	701a      	strb	r2, [r3, #0]
    }    
}
     9b2:	bf00      	nop
     9b4:	b002      	add	sp, #8
     9b6:	4770      	bx	lr
     9b8:	1fff98f0 	.word	0x1fff98f0
     9bc:	1fff8b30 	.word	0x1fff8b30

000009c0 <CDD_UserRxIndication_Can_0>:
 * @brief Callback function for the reception of a PDU (registered) of interest for the Can0 controller.
 * 
 * @param RxPduId ID (container) of the PDU received.
 * @param PduInfoPtr Pointer to PDU received (message)
 */
void CDD_UserRxIndication_Can_0( PduIdType RxPduId, const PduInfoType* PduInfoPtr ) {
     9c0:	b086      	sub	sp, #24
     9c2:	4603      	mov	r3, r0
     9c4:	9100      	str	r1, [sp, #0]
     9c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data.
    static uint8 counter_RXPDU0 = 0;   //Message rx 0 counter.
    uint8 Data[8];  //Data payload received.

    //Obtaining data received.
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     9ca:	2300      	movs	r3, #0
     9cc:	f88d 3017 	strb.w	r3, [sp, #23]
     9d0:	e010      	b.n	9f4 <CDD_UserRxIndication_Can_0+0x34>
        Data[i] = PduInfoPtr->SduDataPtr[i];
     9d2:	9b00      	ldr	r3, [sp, #0]
     9d4:	681a      	ldr	r2, [r3, #0]
     9d6:	f89d 3017 	ldrb.w	r3, [sp, #23]
     9da:	441a      	add	r2, r3
     9dc:	f89d 3017 	ldrb.w	r3, [sp, #23]
     9e0:	7812      	ldrb	r2, [r2, #0]
     9e2:	a906      	add	r1, sp, #24
     9e4:	440b      	add	r3, r1
     9e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     9ea:	f89d 3017 	ldrb.w	r3, [sp, #23]
     9ee:	3301      	adds	r3, #1
     9f0:	f88d 3017 	strb.w	r3, [sp, #23]
     9f4:	f89d 2017 	ldrb.w	r2, [sp, #23]
     9f8:	9b00      	ldr	r3, [sp, #0]
     9fa:	689b      	ldr	r3, [r3, #8]
     9fc:	429a      	cmp	r2, r3
     9fe:	d3e8      	bcc.n	9d2 <CDD_UserRxIndication_Can_0+0x12>
    }

    //Verifying which message was received.
    switch ( RxPduId ) {
     a00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     a04:	2b00      	cmp	r3, #0
     a06:	d106      	bne.n	a16 <CDD_UserRxIndication_Can_0+0x56>
        case 0: //ID 0x200 received
            counter_RXPDU0++;
     a08:	4b06      	ldr	r3, [pc, #24]	; (a24 <CDD_UserRxIndication_Can_0+0x64>)
     a0a:	781b      	ldrb	r3, [r3, #0]
     a0c:	3301      	adds	r3, #1
     a0e:	b2da      	uxtb	r2, r3
     a10:	4b04      	ldr	r3, [pc, #16]	; (a24 <CDD_UserRxIndication_Can_0+0x64>)
     a12:	701a      	strb	r2, [r3, #0]
        break;
     a14:	e000      	b.n	a18 <CDD_UserRxIndication_Can_0+0x58>
        default:
        break;
     a16:	bf00      	nop
    }
    
    CanIf_Can0_bRxFlag = TRUE;   //Message received.
     a18:	4b03      	ldr	r3, [pc, #12]	; (a28 <CDD_UserRxIndication_Can_0+0x68>)
     a1a:	2201      	movs	r2, #1
     a1c:	701a      	strb	r2, [r3, #0]
}
     a1e:	bf00      	nop
     a20:	b006      	add	sp, #24
     a22:	4770      	bx	lr
     a24:	1fff98f1 	.word	0x1fff98f1
     a28:	1fff8b31 	.word	0x1fff8b31

00000a2c <CDD_UserTxConfirmation_Can_2>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can2 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_2( PduIdType TxPduId, Std_ReturnType result ) {
     a2c:	b082      	sub	sp, #8
     a2e:	4603      	mov	r3, r0
     a30:	460a      	mov	r2, r1
     a32:	f8ad 3006 	strh.w	r3, [sp, #6]
     a36:	4613      	mov	r3, r2
     a38:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     a3c:	f89d 3005 	ldrb.w	r3, [sp, #5]
     a40:	2b00      	cmp	r3, #0
     a42:	d108      	bne.n	a56 <CDD_UserTxConfirmation_Can_2+0x2a>
        Transmit_count++;
     a44:	4b05      	ldr	r3, [pc, #20]	; (a5c <CDD_UserTxConfirmation_Can_2+0x30>)
     a46:	781b      	ldrb	r3, [r3, #0]
     a48:	3301      	adds	r3, #1
     a4a:	b2da      	uxtb	r2, r3
     a4c:	4b03      	ldr	r3, [pc, #12]	; (a5c <CDD_UserTxConfirmation_Can_2+0x30>)
     a4e:	701a      	strb	r2, [r3, #0]
        CanIf_Can2_bTxFlag = TRUE;
     a50:	4b03      	ldr	r3, [pc, #12]	; (a60 <CDD_UserTxConfirmation_Can_2+0x34>)
     a52:	2201      	movs	r2, #1
     a54:	701a      	strb	r2, [r3, #0]
    }
}
     a56:	bf00      	nop
     a58:	b002      	add	sp, #8
     a5a:	4770      	bx	lr
     a5c:	1fff98f2 	.word	0x1fff98f2
     a60:	1fff8b32 	.word	0x1fff8b32

00000a64 <CDD_UserRxIndication_Can_2>:
 * @brief Callback function for the reception of a PDU (registered) of interest for the Can2 controller.
 * 
 * @param RxPduId ID (container) of the PDU received.
 * @param PduInfoPtr Pointer to PDU received (message)
 */
void CDD_UserRxIndication_Can_2( PduIdType RxPduId, const PduInfoType* PduInfoPtr ) {
     a64:	b086      	sub	sp, #24
     a66:	4603      	mov	r3, r0
     a68:	9100      	str	r1, [sp, #0]
     a6a:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data.
    static uint8 counter_RXPDU1 = 0;   //Message rx 1 counter.
    uint8 Data[8];  //Data payload received.

    //Obtaining data received.
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     a6e:	2300      	movs	r3, #0
     a70:	f88d 3017 	strb.w	r3, [sp, #23]
     a74:	e010      	b.n	a98 <CDD_UserRxIndication_Can_2+0x34>
        Data[i] = PduInfoPtr->SduDataPtr[i];
     a76:	9b00      	ldr	r3, [sp, #0]
     a78:	681a      	ldr	r2, [r3, #0]
     a7a:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a7e:	441a      	add	r2, r3
     a80:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a84:	7812      	ldrb	r2, [r2, #0]
     a86:	a906      	add	r1, sp, #24
     a88:	440b      	add	r3, r1
     a8a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     a8e:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a92:	3301      	adds	r3, #1
     a94:	f88d 3017 	strb.w	r3, [sp, #23]
     a98:	f89d 2017 	ldrb.w	r2, [sp, #23]
     a9c:	9b00      	ldr	r3, [sp, #0]
     a9e:	689b      	ldr	r3, [r3, #8]
     aa0:	429a      	cmp	r2, r3
     aa2:	d3e8      	bcc.n	a76 <CDD_UserRxIndication_Can_2+0x12>
    }

    //Verifying which message was received.
    switch ( RxPduId ) {
     aa4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     aa8:	2b01      	cmp	r3, #1
     aaa:	d106      	bne.n	aba <CDD_UserRxIndication_Can_2+0x56>
        case 1: //ID 0x400 received
            counter_RXPDU1++;
     aac:	4b06      	ldr	r3, [pc, #24]	; (ac8 <CDD_UserRxIndication_Can_2+0x64>)
     aae:	781b      	ldrb	r3, [r3, #0]
     ab0:	3301      	adds	r3, #1
     ab2:	b2da      	uxtb	r2, r3
     ab4:	4b04      	ldr	r3, [pc, #16]	; (ac8 <CDD_UserRxIndication_Can_2+0x64>)
     ab6:	701a      	strb	r2, [r3, #0]
        break;
     ab8:	e000      	b.n	abc <CDD_UserRxIndication_Can_2+0x58>
        default:
        break;
     aba:	bf00      	nop
    }
    
    CanIf_Can2_bRxFlag = TRUE;   //Message received.
     abc:	4b03      	ldr	r3, [pc, #12]	; (acc <CDD_UserRxIndication_Can_2+0x68>)
     abe:	2201      	movs	r2, #1
     ac0:	701a      	strb	r2, [r3, #0]
}
     ac2:	bf00      	nop
     ac4:	b006      	add	sp, #24
     ac6:	4770      	bx	lr
     ac8:	1fff98f3 	.word	0x1fff98f3
     acc:	1fff8b33 	.word	0x1fff8b33

00000ad0 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     ad0:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     ad2:	2300      	movs	r3, #0
     ad4:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     ad6:	2300      	movs	r3, #0
     ad8:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     ada:	2300      	movs	r3, #0
     adc:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     ade:	2300      	movs	r3, #0
     ae0:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     ae2:	4b44      	ldr	r3, [pc, #272]	; (bf4 <init_data_bss+0x124>)
     ae4:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     ae6:	4b44      	ldr	r3, [pc, #272]	; (bf8 <init_data_bss+0x128>)
     ae8:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     aea:	9b05      	ldr	r3, [sp, #20]
     aec:	681b      	ldr	r3, [r3, #0]
     aee:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     af0:	9b05      	ldr	r3, [sp, #20]
     af2:	3304      	adds	r3, #4
     af4:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     af6:	9b05      	ldr	r3, [sp, #20]
     af8:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     afa:	2300      	movs	r3, #0
     afc:	9309      	str	r3, [sp, #36]	; 0x24
     afe:	e03d      	b.n	b7c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b02:	4613      	mov	r3, r2
     b04:	005b      	lsls	r3, r3, #1
     b06:	4413      	add	r3, r2
     b08:	009b      	lsls	r3, r3, #2
     b0a:	461a      	mov	r2, r3
     b0c:	9b03      	ldr	r3, [sp, #12]
     b0e:	4413      	add	r3, r2
     b10:	685b      	ldr	r3, [r3, #4]
     b12:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b16:	4613      	mov	r3, r2
     b18:	005b      	lsls	r3, r3, #1
     b1a:	4413      	add	r3, r2
     b1c:	009b      	lsls	r3, r3, #2
     b1e:	461a      	mov	r2, r3
     b20:	9b03      	ldr	r3, [sp, #12]
     b22:	4413      	add	r3, r2
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b2a:	4613      	mov	r3, r2
     b2c:	005b      	lsls	r3, r3, #1
     b2e:	4413      	add	r3, r2
     b30:	009b      	lsls	r3, r3, #2
     b32:	461a      	mov	r2, r3
     b34:	9b03      	ldr	r3, [sp, #12]
     b36:	4413      	add	r3, r2
     b38:	689b      	ldr	r3, [r3, #8]
     b3a:	4619      	mov	r1, r3
     b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b3e:	4613      	mov	r3, r2
     b40:	005b      	lsls	r3, r3, #1
     b42:	4413      	add	r3, r2
     b44:	009b      	lsls	r3, r3, #2
     b46:	461a      	mov	r2, r3
     b48:	9b03      	ldr	r3, [sp, #12]
     b4a:	4413      	add	r3, r2
     b4c:	685b      	ldr	r3, [r3, #4]
     b4e:	1acb      	subs	r3, r1, r3
     b50:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b52:	2300      	movs	r3, #0
     b54:	9308      	str	r3, [sp, #32]
     b56:	e00a      	b.n	b6e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     b58:	9a00      	ldr	r2, [sp, #0]
     b5a:	9b08      	ldr	r3, [sp, #32]
     b5c:	441a      	add	r2, r3
     b5e:	9901      	ldr	r1, [sp, #4]
     b60:	9b08      	ldr	r3, [sp, #32]
     b62:	440b      	add	r3, r1
     b64:	7812      	ldrb	r2, [r2, #0]
     b66:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b68:	9b08      	ldr	r3, [sp, #32]
     b6a:	3301      	adds	r3, #1
     b6c:	9308      	str	r3, [sp, #32]
     b6e:	9a08      	ldr	r2, [sp, #32]
     b70:	9b06      	ldr	r3, [sp, #24]
     b72:	429a      	cmp	r2, r3
     b74:	d3f0      	bcc.n	b58 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b78:	3301      	adds	r3, #1
     b7a:	9309      	str	r3, [sp, #36]	; 0x24
     b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b7e:	9b07      	ldr	r3, [sp, #28]
     b80:	429a      	cmp	r2, r3
     b82:	d3bd      	bcc.n	b00 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b84:	9b04      	ldr	r3, [sp, #16]
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b8a:	9b04      	ldr	r3, [sp, #16]
     b8c:	3304      	adds	r3, #4
     b8e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b90:	9b04      	ldr	r3, [sp, #16]
     b92:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b94:	2300      	movs	r3, #0
     b96:	9309      	str	r3, [sp, #36]	; 0x24
     b98:	e024      	b.n	be4 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b9c:	00db      	lsls	r3, r3, #3
     b9e:	9a02      	ldr	r2, [sp, #8]
     ba0:	4413      	add	r3, r2
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ba8:	00db      	lsls	r3, r3, #3
     baa:	9a02      	ldr	r2, [sp, #8]
     bac:	4413      	add	r3, r2
     bae:	685b      	ldr	r3, [r3, #4]
     bb0:	4619      	mov	r1, r3
     bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bb4:	00db      	lsls	r3, r3, #3
     bb6:	9a02      	ldr	r2, [sp, #8]
     bb8:	4413      	add	r3, r2
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	1acb      	subs	r3, r1, r3
     bbe:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     bc0:	2300      	movs	r3, #0
     bc2:	9308      	str	r3, [sp, #32]
     bc4:	e007      	b.n	bd6 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     bc6:	9a01      	ldr	r2, [sp, #4]
     bc8:	9b08      	ldr	r3, [sp, #32]
     bca:	4413      	add	r3, r2
     bcc:	2200      	movs	r2, #0
     bce:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     bd0:	9b08      	ldr	r3, [sp, #32]
     bd2:	3301      	adds	r3, #1
     bd4:	9308      	str	r3, [sp, #32]
     bd6:	9a08      	ldr	r2, [sp, #32]
     bd8:	9b06      	ldr	r3, [sp, #24]
     bda:	429a      	cmp	r2, r3
     bdc:	d3f3      	bcc.n	bc6 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
     be0:	3301      	adds	r3, #1
     be2:	9309      	str	r3, [sp, #36]	; 0x24
     be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     be6:	9b07      	ldr	r3, [sp, #28]
     be8:	429a      	cmp	r2, r3
     bea:	d3d6      	bcc.n	b9a <init_data_bss+0xca>
        }
    }
}
     bec:	bf00      	nop
     bee:	bf00      	nop
     bf0:	b00a      	add	sp, #40	; 0x28
     bf2:	4770      	bx	lr
     bf4:	000199a0 	.word	0x000199a0
     bf8:	000199bc 	.word	0x000199bc

00000bfc <sys_m4_cache_init>:
{
     bfc:	b084      	sub	sp, #16
     bfe:	4603      	mov	r3, r0
     c00:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     c04:	2300      	movs	r3, #0
     c06:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c0e:	2b00      	cmp	r3, #0
     c10:	d118      	bne.n	c44 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     c12:	4b10      	ldr	r3, [pc, #64]	; (c54 <sys_m4_cache_init+0x58>)
     c14:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     c18:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     c1a:	4b0e      	ldr	r3, [pc, #56]	; (c54 <sys_m4_cache_init+0x58>)
     c1c:	681b      	ldr	r3, [r3, #0]
     c1e:	4a0d      	ldr	r2, [pc, #52]	; (c54 <sys_m4_cache_init+0x58>)
     c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c24:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     c26:	bf00      	nop
     c28:	4b0a      	ldr	r3, [pc, #40]	; (c54 <sys_m4_cache_init+0x58>)
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c34:	d0f8      	beq.n	c28 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     c36:	4b07      	ldr	r3, [pc, #28]	; (c54 <sys_m4_cache_init+0x58>)
     c38:	681b      	ldr	r3, [r3, #0]
     c3a:	4a06      	ldr	r2, [pc, #24]	; (c54 <sys_m4_cache_init+0x58>)
     c3c:	f043 0301 	orr.w	r3, r3, #1
     c40:	6013      	str	r3, [r2, #0]
     c42:	e002      	b.n	c4a <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     c44:	2301      	movs	r3, #1
     c46:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     c4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c4e:	4618      	mov	r0, r3
     c50:	b004      	add	sp, #16
     c52:	4770      	bx	lr
     c54:	e0082000 	.word	0xe0082000

00000c58 <startup_go_to_user_mode>:
}
     c58:	bf00      	nop
     c5a:	4770      	bx	lr

00000c5c <Sys_GetCoreID>:
    return 0U;
     c5c:	2300      	movs	r3, #0
}
     c5e:	4618      	mov	r0, r3
     c60:	4770      	bx	lr

00000c62 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     c62:	e7fe      	b.n	c62 <HardFault_Handler>

00000c64 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     c64:	e7fe      	b.n	c64 <MemManage_Handler>

00000c66 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     c66:	e7fe      	b.n	c66 <BusFault_Handler>

00000c68 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     c68:	e7fe      	b.n	c68 <UsageFault_Handler>

00000c6a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     c6a:	e7fe      	b.n	c6a <SVC_Handler>

00000c6c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     c6c:	e7fe      	b.n	c6c <DebugMon_Handler>

00000c6e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     c6e:	e7fe      	b.n	c6e <PendSV_Handler>

00000c70 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c70:	e7fe      	b.n	c70 <SysTick_Handler>

00000c72 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c72:	e7fe      	b.n	c72 <undefined_handler>

00000c74 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     c74:	b500      	push	{lr}
     c76:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     c78:	4b26      	ldr	r3, [pc, #152]	; (d14 <_DoInit+0xa0>)
     c7a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     c7c:	22a8      	movs	r2, #168	; 0xa8
     c7e:	2100      	movs	r1, #0
     c80:	9800      	ldr	r0, [sp, #0]
     c82:	f000 fd67 	bl	1754 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     c86:	9b00      	ldr	r3, [sp, #0]
     c88:	2203      	movs	r2, #3
     c8a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     c8c:	9b00      	ldr	r3, [sp, #0]
     c8e:	2203      	movs	r2, #3
     c90:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     c92:	9b00      	ldr	r3, [sp, #0]
     c94:	4a20      	ldr	r2, [pc, #128]	; (d18 <_DoInit+0xa4>)
     c96:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     c98:	9b00      	ldr	r3, [sp, #0]
     c9a:	4a20      	ldr	r2, [pc, #128]	; (d1c <_DoInit+0xa8>)
     c9c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     c9e:	9b00      	ldr	r3, [sp, #0]
     ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
     ca4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     ca6:	9b00      	ldr	r3, [sp, #0]
     ca8:	2200      	movs	r2, #0
     caa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     cac:	9b00      	ldr	r3, [sp, #0]
     cae:	2200      	movs	r2, #0
     cb0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     cb2:	9b00      	ldr	r3, [sp, #0]
     cb4:	2200      	movs	r2, #0
     cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     cb8:	9b00      	ldr	r3, [sp, #0]
     cba:	4a17      	ldr	r2, [pc, #92]	; (d18 <_DoInit+0xa4>)
     cbc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     cbe:	9b00      	ldr	r3, [sp, #0]
     cc0:	4a17      	ldr	r2, [pc, #92]	; (d20 <_DoInit+0xac>)
     cc2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     cc4:	9b00      	ldr	r3, [sp, #0]
     cc6:	2210      	movs	r2, #16
     cc8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     cca:	9b00      	ldr	r3, [sp, #0]
     ccc:	2200      	movs	r2, #0
     cce:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     cd0:	9b00      	ldr	r3, [sp, #0]
     cd2:	2200      	movs	r2, #0
     cd4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     cd6:	9b00      	ldr	r3, [sp, #0]
     cd8:	2200      	movs	r2, #0
     cda:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     cdc:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     ce0:	2300      	movs	r3, #0
     ce2:	9301      	str	r3, [sp, #4]
     ce4:	e00c      	b.n	d00 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     ce6:	9b01      	ldr	r3, [sp, #4]
     ce8:	f1c3 030f 	rsb	r3, r3, #15
     cec:	4a0d      	ldr	r2, [pc, #52]	; (d24 <_DoInit+0xb0>)
     cee:	5cd1      	ldrb	r1, [r2, r3]
     cf0:	9a00      	ldr	r2, [sp, #0]
     cf2:	9b01      	ldr	r3, [sp, #4]
     cf4:	4413      	add	r3, r2
     cf6:	460a      	mov	r2, r1
     cf8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     cfa:	9b01      	ldr	r3, [sp, #4]
     cfc:	3301      	adds	r3, #1
     cfe:	9301      	str	r3, [sp, #4]
     d00:	9b01      	ldr	r3, [sp, #4]
     d02:	2b0f      	cmp	r3, #15
     d04:	d9ef      	bls.n	ce6 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     d06:	f3bf 8f5f 	dmb	sy
}
     d0a:	bf00      	nop
     d0c:	b003      	add	sp, #12
     d0e:	f85d fb04 	ldr.w	pc, [sp], #4
     d12:	bf00      	nop
     d14:	1fff9910 	.word	0x1fff9910
     d18:	00017dc4 	.word	0x00017dc4
     d1c:	1fff99b8 	.word	0x1fff99b8
     d20:	1fff9db8 	.word	0x1fff9db8
     d24:	0001997c 	.word	0x0001997c

00000d28 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     d28:	b500      	push	{lr}
     d2a:	b08b      	sub	sp, #44	; 0x2c
     d2c:	9003      	str	r0, [sp, #12]
     d2e:	9102      	str	r1, [sp, #8]
     d30:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     d32:	2300      	movs	r3, #0
     d34:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     d36:	9b03      	ldr	r3, [sp, #12]
     d38:	68db      	ldr	r3, [r3, #12]
     d3a:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     d3c:	9b03      	ldr	r3, [sp, #12]
     d3e:	691b      	ldr	r3, [r3, #16]
     d40:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     d42:	9a06      	ldr	r2, [sp, #24]
     d44:	9b07      	ldr	r3, [sp, #28]
     d46:	429a      	cmp	r2, r3
     d48:	d905      	bls.n	d56 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     d4a:	9a06      	ldr	r2, [sp, #24]
     d4c:	9b07      	ldr	r3, [sp, #28]
     d4e:	1ad3      	subs	r3, r2, r3
     d50:	3b01      	subs	r3, #1
     d52:	9309      	str	r3, [sp, #36]	; 0x24
     d54:	e007      	b.n	d66 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     d56:	9b03      	ldr	r3, [sp, #12]
     d58:	689a      	ldr	r2, [r3, #8]
     d5a:	9906      	ldr	r1, [sp, #24]
     d5c:	9b07      	ldr	r3, [sp, #28]
     d5e:	1acb      	subs	r3, r1, r3
     d60:	4413      	add	r3, r2
     d62:	3b01      	subs	r3, #1
     d64:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     d66:	9b03      	ldr	r3, [sp, #12]
     d68:	689a      	ldr	r2, [r3, #8]
     d6a:	9b07      	ldr	r3, [sp, #28]
     d6c:	1ad3      	subs	r3, r2, r3
     d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d70:	4293      	cmp	r3, r2
     d72:	bf28      	it	cs
     d74:	4613      	movcs	r3, r2
     d76:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d7a:	9b01      	ldr	r3, [sp, #4]
     d7c:	4293      	cmp	r3, r2
     d7e:	bf28      	it	cs
     d80:	4613      	movcs	r3, r2
     d82:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d84:	9b03      	ldr	r3, [sp, #12]
     d86:	685a      	ldr	r2, [r3, #4]
     d88:	9b07      	ldr	r3, [sp, #28]
     d8a:	4413      	add	r3, r2
     d8c:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d90:	9902      	ldr	r1, [sp, #8]
     d92:	9805      	ldr	r0, [sp, #20]
     d94:	f000 fcd0 	bl	1738 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     d98:	9a08      	ldr	r2, [sp, #32]
     d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d9c:	4413      	add	r3, r2
     d9e:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     da0:	9a02      	ldr	r2, [sp, #8]
     da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     da4:	4413      	add	r3, r2
     da6:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     da8:	9a01      	ldr	r2, [sp, #4]
     daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     dac:	1ad3      	subs	r3, r2, r3
     dae:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     db0:	9a07      	ldr	r2, [sp, #28]
     db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     db4:	4413      	add	r3, r2
     db6:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     db8:	9b03      	ldr	r3, [sp, #12]
     dba:	689b      	ldr	r3, [r3, #8]
     dbc:	9a07      	ldr	r2, [sp, #28]
     dbe:	429a      	cmp	r2, r3
     dc0:	d101      	bne.n	dc6 <_WriteBlocking+0x9e>
      WrOff = 0u;
     dc2:	2300      	movs	r3, #0
     dc4:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     dc6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     dca:	9b03      	ldr	r3, [sp, #12]
     dcc:	9a07      	ldr	r2, [sp, #28]
     dce:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     dd0:	9b01      	ldr	r3, [sp, #4]
     dd2:	2b00      	cmp	r3, #0
     dd4:	d1b2      	bne.n	d3c <_WriteBlocking+0x14>
  return NumBytesWritten;
     dd6:	9b08      	ldr	r3, [sp, #32]
}
     dd8:	4618      	mov	r0, r3
     dda:	b00b      	add	sp, #44	; 0x2c
     ddc:	f85d fb04 	ldr.w	pc, [sp], #4

00000de0 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     de0:	b500      	push	{lr}
     de2:	b089      	sub	sp, #36	; 0x24
     de4:	9003      	str	r0, [sp, #12]
     de6:	9102      	str	r1, [sp, #8]
     de8:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     dea:	9b03      	ldr	r3, [sp, #12]
     dec:	68db      	ldr	r3, [r3, #12]
     dee:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     df0:	9b03      	ldr	r3, [sp, #12]
     df2:	689a      	ldr	r2, [r3, #8]
     df4:	9b07      	ldr	r3, [sp, #28]
     df6:	1ad3      	subs	r3, r2, r3
     df8:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     dfa:	9a06      	ldr	r2, [sp, #24]
     dfc:	9b01      	ldr	r3, [sp, #4]
     dfe:	429a      	cmp	r2, r3
     e00:	d911      	bls.n	e26 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     e02:	9b03      	ldr	r3, [sp, #12]
     e04:	685a      	ldr	r2, [r3, #4]
     e06:	9b07      	ldr	r3, [sp, #28]
     e08:	4413      	add	r3, r2
     e0a:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     e0c:	9a01      	ldr	r2, [sp, #4]
     e0e:	9902      	ldr	r1, [sp, #8]
     e10:	9804      	ldr	r0, [sp, #16]
     e12:	f000 fc91 	bl	1738 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e16:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     e1a:	9a07      	ldr	r2, [sp, #28]
     e1c:	9b01      	ldr	r3, [sp, #4]
     e1e:	441a      	add	r2, r3
     e20:	9b03      	ldr	r3, [sp, #12]
     e22:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     e24:	e01f      	b.n	e66 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     e26:	9b06      	ldr	r3, [sp, #24]
     e28:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     e2a:	9b03      	ldr	r3, [sp, #12]
     e2c:	685a      	ldr	r2, [r3, #4]
     e2e:	9b07      	ldr	r3, [sp, #28]
     e30:	4413      	add	r3, r2
     e32:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     e34:	9a05      	ldr	r2, [sp, #20]
     e36:	9902      	ldr	r1, [sp, #8]
     e38:	9804      	ldr	r0, [sp, #16]
     e3a:	f000 fc7d 	bl	1738 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     e3e:	9a01      	ldr	r2, [sp, #4]
     e40:	9b06      	ldr	r3, [sp, #24]
     e42:	1ad3      	subs	r3, r2, r3
     e44:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     e46:	9b03      	ldr	r3, [sp, #12]
     e48:	685b      	ldr	r3, [r3, #4]
     e4a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     e4c:	9a02      	ldr	r2, [sp, #8]
     e4e:	9b06      	ldr	r3, [sp, #24]
     e50:	4413      	add	r3, r2
     e52:	9a05      	ldr	r2, [sp, #20]
     e54:	4619      	mov	r1, r3
     e56:	9804      	ldr	r0, [sp, #16]
     e58:	f000 fc6e 	bl	1738 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e5c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     e60:	9b03      	ldr	r3, [sp, #12]
     e62:	9a05      	ldr	r2, [sp, #20]
     e64:	60da      	str	r2, [r3, #12]
}
     e66:	bf00      	nop
     e68:	b009      	add	sp, #36	; 0x24
     e6a:	f85d fb04 	ldr.w	pc, [sp], #4

00000e6e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     e6e:	b086      	sub	sp, #24
     e70:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     e72:	9b01      	ldr	r3, [sp, #4]
     e74:	691b      	ldr	r3, [r3, #16]
     e76:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     e78:	9b01      	ldr	r3, [sp, #4]
     e7a:	68db      	ldr	r3, [r3, #12]
     e7c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     e7e:	9a04      	ldr	r2, [sp, #16]
     e80:	9b03      	ldr	r3, [sp, #12]
     e82:	429a      	cmp	r2, r3
     e84:	d808      	bhi.n	e98 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e86:	9b01      	ldr	r3, [sp, #4]
     e88:	689a      	ldr	r2, [r3, #8]
     e8a:	9b03      	ldr	r3, [sp, #12]
     e8c:	1ad2      	subs	r2, r2, r3
     e8e:	9b04      	ldr	r3, [sp, #16]
     e90:	4413      	add	r3, r2
     e92:	3b01      	subs	r3, #1
     e94:	9305      	str	r3, [sp, #20]
     e96:	e004      	b.n	ea2 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     e98:	9a04      	ldr	r2, [sp, #16]
     e9a:	9b03      	ldr	r3, [sp, #12]
     e9c:	1ad3      	subs	r3, r2, r3
     e9e:	3b01      	subs	r3, #1
     ea0:	9305      	str	r3, [sp, #20]
  }
  return r;
     ea2:	9b05      	ldr	r3, [sp, #20]
}
     ea4:	4618      	mov	r0, r3
     ea6:	b006      	add	sp, #24
     ea8:	4770      	bx	lr
	...

00000eac <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     eac:	b500      	push	{lr}
     eae:	b089      	sub	sp, #36	; 0x24
     eb0:	9003      	str	r0, [sp, #12]
     eb2:	9102      	str	r1, [sp, #8]
     eb4:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     eb6:	9b02      	ldr	r3, [sp, #8]
     eb8:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     eba:	9b03      	ldr	r3, [sp, #12]
     ebc:	1c5a      	adds	r2, r3, #1
     ebe:	4613      	mov	r3, r2
     ec0:	005b      	lsls	r3, r3, #1
     ec2:	4413      	add	r3, r2
     ec4:	00db      	lsls	r3, r3, #3
     ec6:	4a20      	ldr	r2, [pc, #128]	; (f48 <SEGGER_RTT_WriteNoLock+0x9c>)
     ec8:	4413      	add	r3, r2
     eca:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     ecc:	9b05      	ldr	r3, [sp, #20]
     ece:	695b      	ldr	r3, [r3, #20]
     ed0:	2b02      	cmp	r3, #2
     ed2:	d029      	beq.n	f28 <SEGGER_RTT_WriteNoLock+0x7c>
     ed4:	2b02      	cmp	r3, #2
     ed6:	d82e      	bhi.n	f36 <SEGGER_RTT_WriteNoLock+0x8a>
     ed8:	2b00      	cmp	r3, #0
     eda:	d002      	beq.n	ee2 <SEGGER_RTT_WriteNoLock+0x36>
     edc:	2b01      	cmp	r3, #1
     ede:	d013      	beq.n	f08 <SEGGER_RTT_WriteNoLock+0x5c>
     ee0:	e029      	b.n	f36 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     ee2:	9805      	ldr	r0, [sp, #20]
     ee4:	f7ff ffc3 	bl	e6e <_GetAvailWriteSpace>
     ee8:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     eea:	9a04      	ldr	r2, [sp, #16]
     eec:	9b01      	ldr	r3, [sp, #4]
     eee:	429a      	cmp	r2, r3
     ef0:	d202      	bcs.n	ef8 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     ef2:	2300      	movs	r3, #0
     ef4:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     ef6:	e021      	b.n	f3c <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     ef8:	9b01      	ldr	r3, [sp, #4]
     efa:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     efc:	9a01      	ldr	r2, [sp, #4]
     efe:	9906      	ldr	r1, [sp, #24]
     f00:	9805      	ldr	r0, [sp, #20]
     f02:	f7ff ff6d 	bl	de0 <_WriteNoCheck>
    break;
     f06:	e019      	b.n	f3c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     f08:	9805      	ldr	r0, [sp, #20]
     f0a:	f7ff ffb0 	bl	e6e <_GetAvailWriteSpace>
     f0e:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     f10:	9a01      	ldr	r2, [sp, #4]
     f12:	9b04      	ldr	r3, [sp, #16]
     f14:	4293      	cmp	r3, r2
     f16:	bf28      	it	cs
     f18:	4613      	movcs	r3, r2
     f1a:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     f1c:	9a07      	ldr	r2, [sp, #28]
     f1e:	9906      	ldr	r1, [sp, #24]
     f20:	9805      	ldr	r0, [sp, #20]
     f22:	f7ff ff5d 	bl	de0 <_WriteNoCheck>
    break;
     f26:	e009      	b.n	f3c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     f28:	9a01      	ldr	r2, [sp, #4]
     f2a:	9906      	ldr	r1, [sp, #24]
     f2c:	9805      	ldr	r0, [sp, #20]
     f2e:	f7ff fefb 	bl	d28 <_WriteBlocking>
     f32:	9007      	str	r0, [sp, #28]
    break;
     f34:	e002      	b.n	f3c <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     f36:	2300      	movs	r3, #0
     f38:	9307      	str	r3, [sp, #28]
    break;
     f3a:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     f3c:	9b07      	ldr	r3, [sp, #28]
}
     f3e:	4618      	mov	r0, r3
     f40:	b009      	add	sp, #36	; 0x24
     f42:	f85d fb04 	ldr.w	pc, [sp], #4
     f46:	bf00      	nop
     f48:	1fff9910 	.word	0x1fff9910

00000f4c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     f4c:	b500      	push	{lr}
     f4e:	b089      	sub	sp, #36	; 0x24
     f50:	9003      	str	r0, [sp, #12]
     f52:	9102      	str	r1, [sp, #8]
     f54:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     f56:	4b0f      	ldr	r3, [pc, #60]	; (f94 <SEGGER_RTT_Write+0x48>)
     f58:	9307      	str	r3, [sp, #28]
     f5a:	9b07      	ldr	r3, [sp, #28]
     f5c:	781b      	ldrb	r3, [r3, #0]
     f5e:	b2db      	uxtb	r3, r3
     f60:	2b53      	cmp	r3, #83	; 0x53
     f62:	d001      	beq.n	f68 <SEGGER_RTT_Write+0x1c>
     f64:	f7ff fe86 	bl	c74 <_DoInit>
  SEGGER_RTT_LOCK();
     f68:	f3ef 8311 	mrs	r3, BASEPRI
     f6c:	f04f 0120 	mov.w	r1, #32
     f70:	f381 8811 	msr	BASEPRI, r1
     f74:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     f76:	9a01      	ldr	r2, [sp, #4]
     f78:	9902      	ldr	r1, [sp, #8]
     f7a:	9803      	ldr	r0, [sp, #12]
     f7c:	f7ff ff96 	bl	eac <SEGGER_RTT_WriteNoLock>
     f80:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     f82:	9b06      	ldr	r3, [sp, #24]
     f84:	f383 8811 	msr	BASEPRI, r3
  return Status;
     f88:	9b05      	ldr	r3, [sp, #20]
}
     f8a:	4618      	mov	r0, r3
     f8c:	b009      	add	sp, #36	; 0x24
     f8e:	f85d fb04 	ldr.w	pc, [sp], #4
     f92:	bf00      	nop
     f94:	1fff9910 	.word	0x1fff9910

00000f98 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     f98:	b508      	push	{r3, lr}
  _DoInit();
     f9a:	f7ff fe6b 	bl	c74 <_DoInit>
}
     f9e:	bf00      	nop
     fa0:	bd08      	pop	{r3, pc}

00000fa2 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     fa2:	b500      	push	{lr}
     fa4:	b085      	sub	sp, #20
     fa6:	9001      	str	r0, [sp, #4]
     fa8:	460b      	mov	r3, r1
     faa:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     fae:	9b01      	ldr	r3, [sp, #4]
     fb0:	689b      	ldr	r3, [r3, #8]
     fb2:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     fb4:	9b03      	ldr	r3, [sp, #12]
     fb6:	1c5a      	adds	r2, r3, #1
     fb8:	9b01      	ldr	r3, [sp, #4]
     fba:	685b      	ldr	r3, [r3, #4]
     fbc:	429a      	cmp	r2, r3
     fbe:	d80f      	bhi.n	fe0 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     fc0:	9b01      	ldr	r3, [sp, #4]
     fc2:	681a      	ldr	r2, [r3, #0]
     fc4:	9b03      	ldr	r3, [sp, #12]
     fc6:	4413      	add	r3, r2
     fc8:	f89d 2003 	ldrb.w	r2, [sp, #3]
     fcc:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     fce:	9b03      	ldr	r3, [sp, #12]
     fd0:	1c5a      	adds	r2, r3, #1
     fd2:	9b01      	ldr	r3, [sp, #4]
     fd4:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     fd6:	9b01      	ldr	r3, [sp, #4]
     fd8:	68db      	ldr	r3, [r3, #12]
     fda:	1c5a      	adds	r2, r3, #1
     fdc:	9b01      	ldr	r3, [sp, #4]
     fde:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     fe0:	9b01      	ldr	r3, [sp, #4]
     fe2:	689a      	ldr	r2, [r3, #8]
     fe4:	9b01      	ldr	r3, [sp, #4]
     fe6:	685b      	ldr	r3, [r3, #4]
     fe8:	429a      	cmp	r2, r3
     fea:	d115      	bne.n	1018 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     fec:	9b01      	ldr	r3, [sp, #4]
     fee:	6918      	ldr	r0, [r3, #16]
     ff0:	9b01      	ldr	r3, [sp, #4]
     ff2:	6819      	ldr	r1, [r3, #0]
     ff4:	9b01      	ldr	r3, [sp, #4]
     ff6:	689b      	ldr	r3, [r3, #8]
     ff8:	461a      	mov	r2, r3
     ffa:	f7ff ffa7 	bl	f4c <SEGGER_RTT_Write>
     ffe:	4602      	mov	r2, r0
    1000:	9b01      	ldr	r3, [sp, #4]
    1002:	689b      	ldr	r3, [r3, #8]
    1004:	429a      	cmp	r2, r3
    1006:	d004      	beq.n	1012 <_StoreChar+0x70>
      p->ReturnValue = -1;
    1008:	9b01      	ldr	r3, [sp, #4]
    100a:	f04f 32ff 	mov.w	r2, #4294967295
    100e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1010:	e002      	b.n	1018 <_StoreChar+0x76>
      p->Cnt = 0u;
    1012:	9b01      	ldr	r3, [sp, #4]
    1014:	2200      	movs	r2, #0
    1016:	609a      	str	r2, [r3, #8]
}
    1018:	bf00      	nop
    101a:	b005      	add	sp, #20
    101c:	f85d fb04 	ldr.w	pc, [sp], #4

00001020 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1020:	b500      	push	{lr}
    1022:	b08b      	sub	sp, #44	; 0x2c
    1024:	9003      	str	r0, [sp, #12]
    1026:	9102      	str	r1, [sp, #8]
    1028:	9201      	str	r2, [sp, #4]
    102a:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    102c:	9b02      	ldr	r3, [sp, #8]
    102e:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1030:	2301      	movs	r3, #1
    1032:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1034:	2301      	movs	r3, #1
    1036:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1038:	e007      	b.n	104a <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    103a:	9a08      	ldr	r2, [sp, #32]
    103c:	9b01      	ldr	r3, [sp, #4]
    103e:	fbb2 f3f3 	udiv	r3, r2, r3
    1042:	9308      	str	r3, [sp, #32]
    Width++;
    1044:	9b07      	ldr	r3, [sp, #28]
    1046:	3301      	adds	r3, #1
    1048:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    104a:	9a08      	ldr	r2, [sp, #32]
    104c:	9b01      	ldr	r3, [sp, #4]
    104e:	429a      	cmp	r2, r3
    1050:	d2f3      	bcs.n	103a <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1052:	9a00      	ldr	r2, [sp, #0]
    1054:	9b07      	ldr	r3, [sp, #28]
    1056:	429a      	cmp	r2, r3
    1058:	d901      	bls.n	105e <_PrintUnsigned+0x3e>
    Width = NumDigits;
    105a:	9b00      	ldr	r3, [sp, #0]
    105c:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    105e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1060:	f003 0301 	and.w	r3, r3, #1
    1064:	2b00      	cmp	r3, #0
    1066:	d128      	bne.n	10ba <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    106a:	2b00      	cmp	r3, #0
    106c:	d025      	beq.n	10ba <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    106e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1070:	f003 0302 	and.w	r3, r3, #2
    1074:	2b00      	cmp	r3, #0
    1076:	d006      	beq.n	1086 <_PrintUnsigned+0x66>
    1078:	9b00      	ldr	r3, [sp, #0]
    107a:	2b00      	cmp	r3, #0
    107c:	d103      	bne.n	1086 <_PrintUnsigned+0x66>
        c = '0';
    107e:	2330      	movs	r3, #48	; 0x30
    1080:	f88d 301b 	strb.w	r3, [sp, #27]
    1084:	e002      	b.n	108c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1086:	2320      	movs	r3, #32
    1088:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    108c:	e00c      	b.n	10a8 <_PrintUnsigned+0x88>
        FieldWidth--;
    108e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1090:	3b01      	subs	r3, #1
    1092:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1094:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1098:	4619      	mov	r1, r3
    109a:	9803      	ldr	r0, [sp, #12]
    109c:	f7ff ff81 	bl	fa2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    10a0:	9b03      	ldr	r3, [sp, #12]
    10a2:	68db      	ldr	r3, [r3, #12]
    10a4:	2b00      	cmp	r3, #0
    10a6:	db07      	blt.n	10b8 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10aa:	2b00      	cmp	r3, #0
    10ac:	d005      	beq.n	10ba <_PrintUnsigned+0x9a>
    10ae:	9a07      	ldr	r2, [sp, #28]
    10b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10b2:	429a      	cmp	r2, r3
    10b4:	d3eb      	bcc.n	108e <_PrintUnsigned+0x6e>
    10b6:	e000      	b.n	10ba <_PrintUnsigned+0x9a>
          break;
    10b8:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    10ba:	9b03      	ldr	r3, [sp, #12]
    10bc:	68db      	ldr	r3, [r3, #12]
    10be:	2b00      	cmp	r3, #0
    10c0:	db55      	blt.n	116e <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    10c2:	9b00      	ldr	r3, [sp, #0]
    10c4:	2b01      	cmp	r3, #1
    10c6:	d903      	bls.n	10d0 <_PrintUnsigned+0xb0>
        NumDigits--;
    10c8:	9b00      	ldr	r3, [sp, #0]
    10ca:	3b01      	subs	r3, #1
    10cc:	9300      	str	r3, [sp, #0]
    10ce:	e009      	b.n	10e4 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    10d0:	9a02      	ldr	r2, [sp, #8]
    10d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10d4:	fbb2 f3f3 	udiv	r3, r2, r3
    10d8:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    10da:	9a05      	ldr	r2, [sp, #20]
    10dc:	9b01      	ldr	r3, [sp, #4]
    10de:	429a      	cmp	r2, r3
    10e0:	d200      	bcs.n	10e4 <_PrintUnsigned+0xc4>
          break;
    10e2:	e005      	b.n	10f0 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    10e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10e6:	9a01      	ldr	r2, [sp, #4]
    10e8:	fb02 f303 	mul.w	r3, r2, r3
    10ec:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    10ee:	e7e8      	b.n	10c2 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    10f0:	9a02      	ldr	r2, [sp, #8]
    10f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10f4:	fbb2 f3f3 	udiv	r3, r2, r3
    10f8:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    10fa:	9b05      	ldr	r3, [sp, #20]
    10fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10fe:	fb02 f303 	mul.w	r3, r2, r3
    1102:	9a02      	ldr	r2, [sp, #8]
    1104:	1ad3      	subs	r3, r2, r3
    1106:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1108:	4a1b      	ldr	r2, [pc, #108]	; (1178 <_PrintUnsigned+0x158>)
    110a:	9b05      	ldr	r3, [sp, #20]
    110c:	4413      	add	r3, r2
    110e:	781b      	ldrb	r3, [r3, #0]
    1110:	4619      	mov	r1, r3
    1112:	9803      	ldr	r0, [sp, #12]
    1114:	f7ff ff45 	bl	fa2 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1118:	9b03      	ldr	r3, [sp, #12]
    111a:	68db      	ldr	r3, [r3, #12]
    111c:	2b00      	cmp	r3, #0
    111e:	db08      	blt.n	1132 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1120:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1122:	9b01      	ldr	r3, [sp, #4]
    1124:	fbb2 f3f3 	udiv	r3, r2, r3
    1128:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    112a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    112c:	2b00      	cmp	r3, #0
    112e:	d1df      	bne.n	10f0 <_PrintUnsigned+0xd0>
    1130:	e000      	b.n	1134 <_PrintUnsigned+0x114>
        break;
    1132:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1136:	f003 0301 	and.w	r3, r3, #1
    113a:	2b00      	cmp	r3, #0
    113c:	d017      	beq.n	116e <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    113e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1140:	2b00      	cmp	r3, #0
    1142:	d014      	beq.n	116e <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1144:	e00a      	b.n	115c <_PrintUnsigned+0x13c>
          FieldWidth--;
    1146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1148:	3b01      	subs	r3, #1
    114a:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    114c:	2120      	movs	r1, #32
    114e:	9803      	ldr	r0, [sp, #12]
    1150:	f7ff ff27 	bl	fa2 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1154:	9b03      	ldr	r3, [sp, #12]
    1156:	68db      	ldr	r3, [r3, #12]
    1158:	2b00      	cmp	r3, #0
    115a:	db07      	blt.n	116c <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    115c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    115e:	2b00      	cmp	r3, #0
    1160:	d005      	beq.n	116e <_PrintUnsigned+0x14e>
    1162:	9a07      	ldr	r2, [sp, #28]
    1164:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1166:	429a      	cmp	r2, r3
    1168:	d3ed      	bcc.n	1146 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    116a:	e000      	b.n	116e <_PrintUnsigned+0x14e>
            break;
    116c:	bf00      	nop
}
    116e:	bf00      	nop
    1170:	b00b      	add	sp, #44	; 0x2c
    1172:	f85d fb04 	ldr.w	pc, [sp], #4
    1176:	bf00      	nop
    1178:	00019990 	.word	0x00019990

0000117c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    117c:	b500      	push	{lr}
    117e:	b089      	sub	sp, #36	; 0x24
    1180:	9005      	str	r0, [sp, #20]
    1182:	9104      	str	r1, [sp, #16]
    1184:	9203      	str	r2, [sp, #12]
    1186:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1188:	9b04      	ldr	r3, [sp, #16]
    118a:	2b00      	cmp	r3, #0
    118c:	bfb8      	it	lt
    118e:	425b      	neglt	r3, r3
    1190:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1192:	2301      	movs	r3, #1
    1194:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1196:	e007      	b.n	11a8 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1198:	9b03      	ldr	r3, [sp, #12]
    119a:	9a06      	ldr	r2, [sp, #24]
    119c:	fb92 f3f3 	sdiv	r3, r2, r3
    11a0:	9306      	str	r3, [sp, #24]
    Width++;
    11a2:	9b07      	ldr	r3, [sp, #28]
    11a4:	3301      	adds	r3, #1
    11a6:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    11a8:	9b03      	ldr	r3, [sp, #12]
    11aa:	9a06      	ldr	r2, [sp, #24]
    11ac:	429a      	cmp	r2, r3
    11ae:	daf3      	bge.n	1198 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    11b0:	9a02      	ldr	r2, [sp, #8]
    11b2:	9b07      	ldr	r3, [sp, #28]
    11b4:	429a      	cmp	r2, r3
    11b6:	d901      	bls.n	11bc <_PrintInt+0x40>
    Width = NumDigits;
    11b8:	9b02      	ldr	r3, [sp, #8]
    11ba:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    11bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11be:	2b00      	cmp	r3, #0
    11c0:	d00a      	beq.n	11d8 <_PrintInt+0x5c>
    11c2:	9b04      	ldr	r3, [sp, #16]
    11c4:	2b00      	cmp	r3, #0
    11c6:	db04      	blt.n	11d2 <_PrintInt+0x56>
    11c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11ca:	f003 0304 	and.w	r3, r3, #4
    11ce:	2b00      	cmp	r3, #0
    11d0:	d002      	beq.n	11d8 <_PrintInt+0x5c>
    FieldWidth--;
    11d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11d4:	3b01      	subs	r3, #1
    11d6:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    11d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11da:	f003 0302 	and.w	r3, r3, #2
    11de:	2b00      	cmp	r3, #0
    11e0:	d002      	beq.n	11e8 <_PrintInt+0x6c>
    11e2:	9b02      	ldr	r3, [sp, #8]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d01c      	beq.n	1222 <_PrintInt+0xa6>
    11e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11ea:	f003 0301 	and.w	r3, r3, #1
    11ee:	2b00      	cmp	r3, #0
    11f0:	d117      	bne.n	1222 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    11f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11f4:	2b00      	cmp	r3, #0
    11f6:	d014      	beq.n	1222 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11f8:	e00a      	b.n	1210 <_PrintInt+0x94>
        FieldWidth--;
    11fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11fc:	3b01      	subs	r3, #1
    11fe:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1200:	2120      	movs	r1, #32
    1202:	9805      	ldr	r0, [sp, #20]
    1204:	f7ff fecd 	bl	fa2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1208:	9b05      	ldr	r3, [sp, #20]
    120a:	68db      	ldr	r3, [r3, #12]
    120c:	2b00      	cmp	r3, #0
    120e:	db07      	blt.n	1220 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1212:	2b00      	cmp	r3, #0
    1214:	d005      	beq.n	1222 <_PrintInt+0xa6>
    1216:	9a07      	ldr	r2, [sp, #28]
    1218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    121a:	429a      	cmp	r2, r3
    121c:	d3ed      	bcc.n	11fa <_PrintInt+0x7e>
    121e:	e000      	b.n	1222 <_PrintInt+0xa6>
          break;
    1220:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1222:	9b05      	ldr	r3, [sp, #20]
    1224:	68db      	ldr	r3, [r3, #12]
    1226:	2b00      	cmp	r3, #0
    1228:	db4a      	blt.n	12c0 <__BSS_SRAM_SIZE+0x20>
    if (v < 0) {
    122a:	9b04      	ldr	r3, [sp, #16]
    122c:	2b00      	cmp	r3, #0
    122e:	da07      	bge.n	1240 <_PrintInt+0xc4>
      v = -v;
    1230:	9b04      	ldr	r3, [sp, #16]
    1232:	425b      	negs	r3, r3
    1234:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1236:	212d      	movs	r1, #45	; 0x2d
    1238:	9805      	ldr	r0, [sp, #20]
    123a:	f7ff feb2 	bl	fa2 <_StoreChar>
    123e:	e008      	b.n	1252 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1242:	f003 0304 	and.w	r3, r3, #4
    1246:	2b00      	cmp	r3, #0
    1248:	d003      	beq.n	1252 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    124a:	212b      	movs	r1, #43	; 0x2b
    124c:	9805      	ldr	r0, [sp, #20]
    124e:	f7ff fea8 	bl	fa2 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1252:	9b05      	ldr	r3, [sp, #20]
    1254:	68db      	ldr	r3, [r3, #12]
    1256:	2b00      	cmp	r3, #0
    1258:	db32      	blt.n	12c0 <__BSS_SRAM_SIZE+0x20>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    125a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    125c:	f003 0302 	and.w	r3, r3, #2
    1260:	2b00      	cmp	r3, #0
    1262:	d01f      	beq.n	12a4 <__BSS_SRAM_SIZE+0x4>
    1264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1266:	f003 0301 	and.w	r3, r3, #1
    126a:	2b00      	cmp	r3, #0
    126c:	d11a      	bne.n	12a4 <__BSS_SRAM_SIZE+0x4>
    126e:	9b02      	ldr	r3, [sp, #8]
    1270:	2b00      	cmp	r3, #0
    1272:	d117      	bne.n	12a4 <__BSS_SRAM_SIZE+0x4>
        if (FieldWidth != 0u) {
    1274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1276:	2b00      	cmp	r3, #0
    1278:	d014      	beq.n	12a4 <__BSS_SRAM_SIZE+0x4>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    127a:	e00a      	b.n	1292 <_PrintInt+0x116>
            FieldWidth--;
    127c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    127e:	3b01      	subs	r3, #1
    1280:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1282:	2130      	movs	r1, #48	; 0x30
    1284:	9805      	ldr	r0, [sp, #20]
    1286:	f7ff fe8c 	bl	fa2 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    128a:	9b05      	ldr	r3, [sp, #20]
    128c:	68db      	ldr	r3, [r3, #12]
    128e:	2b00      	cmp	r3, #0
    1290:	db07      	blt.n	12a2 <__BSS_SRAM_SIZE+0x2>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1294:	2b00      	cmp	r3, #0
    1296:	d005      	beq.n	12a4 <__BSS_SRAM_SIZE+0x4>
    1298:	9a07      	ldr	r2, [sp, #28]
    129a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    129c:	429a      	cmp	r2, r3
    129e:	d3ed      	bcc.n	127c <_PrintInt+0x100>
    12a0:	e000      	b.n	12a4 <__BSS_SRAM_SIZE+0x4>
              break;
    12a2:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    12a4:	9b05      	ldr	r3, [sp, #20]
    12a6:	68db      	ldr	r3, [r3, #12]
    12a8:	2b00      	cmp	r3, #0
    12aa:	db09      	blt.n	12c0 <__BSS_SRAM_SIZE+0x20>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    12ac:	9904      	ldr	r1, [sp, #16]
    12ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    12b0:	9301      	str	r3, [sp, #4]
    12b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12b4:	9300      	str	r3, [sp, #0]
    12b6:	9b02      	ldr	r3, [sp, #8]
    12b8:	9a03      	ldr	r2, [sp, #12]
    12ba:	9805      	ldr	r0, [sp, #20]
    12bc:	f7ff feb0 	bl	1020 <_PrintUnsigned>
      }
    }
  }
}
    12c0:	bf00      	nop
    12c2:	b009      	add	sp, #36	; 0x24
    12c4:	f85d fb04 	ldr.w	pc, [sp], #4

000012c8 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    12c8:	b500      	push	{lr}
    12ca:	b0a3      	sub	sp, #140	; 0x8c
    12cc:	9005      	str	r0, [sp, #20]
    12ce:	9104      	str	r1, [sp, #16]
    12d0:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    12d2:	ab06      	add	r3, sp, #24
    12d4:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    12d6:	2340      	movs	r3, #64	; 0x40
    12d8:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    12da:	2300      	movs	r3, #0
    12dc:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    12de:	9b05      	ldr	r3, [sp, #20]
    12e0:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    12e2:	2300      	movs	r3, #0
    12e4:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    12e6:	9b04      	ldr	r3, [sp, #16]
    12e8:	781b      	ldrb	r3, [r3, #0]
    12ea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    12ee:	9b04      	ldr	r3, [sp, #16]
    12f0:	3301      	adds	r3, #1
    12f2:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    12f4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12f8:	2b00      	cmp	r3, #0
    12fa:	f000 819c 	beq.w	1636 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    12fe:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1302:	2b25      	cmp	r3, #37	; 0x25
    1304:	f040 818b 	bne.w	161e <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1308:	2300      	movs	r3, #0
    130a:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    130c:	2301      	movs	r3, #1
    130e:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1310:	9b04      	ldr	r3, [sp, #16]
    1312:	781b      	ldrb	r3, [r3, #0]
    1314:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1318:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    131c:	3b23      	subs	r3, #35	; 0x23
    131e:	2b0d      	cmp	r3, #13
    1320:	d83e      	bhi.n	13a0 <SEGGER_RTT_vprintf+0xd8>
    1322:	a201      	add	r2, pc, #4	; (adr r2, 1328 <SEGGER_RTT_vprintf+0x60>)
    1324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1328:	00001391 	.word	0x00001391
    132c:	000013a1 	.word	0x000013a1
    1330:	000013a1 	.word	0x000013a1
    1334:	000013a1 	.word	0x000013a1
    1338:	000013a1 	.word	0x000013a1
    133c:	000013a1 	.word	0x000013a1
    1340:	000013a1 	.word	0x000013a1
    1344:	000013a1 	.word	0x000013a1
    1348:	00001381 	.word	0x00001381
    134c:	000013a1 	.word	0x000013a1
    1350:	00001361 	.word	0x00001361
    1354:	000013a1 	.word	0x000013a1
    1358:	000013a1 	.word	0x000013a1
    135c:	00001371 	.word	0x00001371
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1360:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1362:	f043 0301 	orr.w	r3, r3, #1
    1366:	931e      	str	r3, [sp, #120]	; 0x78
    1368:	9b04      	ldr	r3, [sp, #16]
    136a:	3301      	adds	r3, #1
    136c:	9304      	str	r3, [sp, #16]
    136e:	e01a      	b.n	13a6 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1370:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1372:	f043 0302 	orr.w	r3, r3, #2
    1376:	931e      	str	r3, [sp, #120]	; 0x78
    1378:	9b04      	ldr	r3, [sp, #16]
    137a:	3301      	adds	r3, #1
    137c:	9304      	str	r3, [sp, #16]
    137e:	e012      	b.n	13a6 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1380:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1382:	f043 0304 	orr.w	r3, r3, #4
    1386:	931e      	str	r3, [sp, #120]	; 0x78
    1388:	9b04      	ldr	r3, [sp, #16]
    138a:	3301      	adds	r3, #1
    138c:	9304      	str	r3, [sp, #16]
    138e:	e00a      	b.n	13a6 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1390:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1392:	f043 0308 	orr.w	r3, r3, #8
    1396:	931e      	str	r3, [sp, #120]	; 0x78
    1398:	9b04      	ldr	r3, [sp, #16]
    139a:	3301      	adds	r3, #1
    139c:	9304      	str	r3, [sp, #16]
    139e:	e002      	b.n	13a6 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    13a0:	2300      	movs	r3, #0
    13a2:	9320      	str	r3, [sp, #128]	; 0x80
    13a4:	bf00      	nop
        }
      } while (v);
    13a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    13a8:	2b00      	cmp	r3, #0
    13aa:	d1b1      	bne.n	1310 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    13ac:	2300      	movs	r3, #0
    13ae:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    13b0:	9b04      	ldr	r3, [sp, #16]
    13b2:	781b      	ldrb	r3, [r3, #0]
    13b4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    13b8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13bc:	2b2f      	cmp	r3, #47	; 0x2f
    13be:	d912      	bls.n	13e6 <SEGGER_RTT_vprintf+0x11e>
    13c0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13c4:	2b39      	cmp	r3, #57	; 0x39
    13c6:	d80e      	bhi.n	13e6 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    13c8:	9b04      	ldr	r3, [sp, #16]
    13ca:	3301      	adds	r3, #1
    13cc:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    13ce:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    13d0:	4613      	mov	r3, r2
    13d2:	009b      	lsls	r3, r3, #2
    13d4:	4413      	add	r3, r2
    13d6:	005b      	lsls	r3, r3, #1
    13d8:	461a      	mov	r2, r3
    13da:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13de:	4413      	add	r3, r2
    13e0:	3b30      	subs	r3, #48	; 0x30
    13e2:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    13e4:	e7e4      	b.n	13b0 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    13e6:	2300      	movs	r3, #0
    13e8:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    13ea:	9b04      	ldr	r3, [sp, #16]
    13ec:	781b      	ldrb	r3, [r3, #0]
    13ee:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    13f2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13f6:	2b2e      	cmp	r3, #46	; 0x2e
    13f8:	d11d      	bne.n	1436 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    13fa:	9b04      	ldr	r3, [sp, #16]
    13fc:	3301      	adds	r3, #1
    13fe:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1400:	9b04      	ldr	r3, [sp, #16]
    1402:	781b      	ldrb	r3, [r3, #0]
    1404:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1408:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    140c:	2b2f      	cmp	r3, #47	; 0x2f
    140e:	d912      	bls.n	1436 <SEGGER_RTT_vprintf+0x16e>
    1410:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1414:	2b39      	cmp	r3, #57	; 0x39
    1416:	d80e      	bhi.n	1436 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1418:	9b04      	ldr	r3, [sp, #16]
    141a:	3301      	adds	r3, #1
    141c:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    141e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1420:	4613      	mov	r3, r2
    1422:	009b      	lsls	r3, r3, #2
    1424:	4413      	add	r3, r2
    1426:	005b      	lsls	r3, r3, #1
    1428:	461a      	mov	r2, r3
    142a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    142e:	4413      	add	r3, r2
    1430:	3b30      	subs	r3, #48	; 0x30
    1432:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1434:	e7e4      	b.n	1400 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1436:	9b04      	ldr	r3, [sp, #16]
    1438:	781b      	ldrb	r3, [r3, #0]
    143a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    143e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1442:	2b6c      	cmp	r3, #108	; 0x6c
    1444:	d003      	beq.n	144e <SEGGER_RTT_vprintf+0x186>
    1446:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    144a:	2b68      	cmp	r3, #104	; 0x68
    144c:	d107      	bne.n	145e <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    144e:	9b04      	ldr	r3, [sp, #16]
    1450:	3301      	adds	r3, #1
    1452:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1454:	9b04      	ldr	r3, [sp, #16]
    1456:	781b      	ldrb	r3, [r3, #0]
    1458:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    145c:	e7ef      	b.n	143e <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    145e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1462:	2b25      	cmp	r3, #37	; 0x25
    1464:	f000 80d0 	beq.w	1608 <SEGGER_RTT_vprintf+0x340>
    1468:	2b25      	cmp	r3, #37	; 0x25
    146a:	f2c0 80d3 	blt.w	1614 <SEGGER_RTT_vprintf+0x34c>
    146e:	2b78      	cmp	r3, #120	; 0x78
    1470:	f300 80d0 	bgt.w	1614 <SEGGER_RTT_vprintf+0x34c>
    1474:	2b58      	cmp	r3, #88	; 0x58
    1476:	f2c0 80cd 	blt.w	1614 <SEGGER_RTT_vprintf+0x34c>
    147a:	3b58      	subs	r3, #88	; 0x58
    147c:	2b20      	cmp	r3, #32
    147e:	f200 80c9 	bhi.w	1614 <SEGGER_RTT_vprintf+0x34c>
    1482:	a201      	add	r2, pc, #4	; (adr r2, 1488 <SEGGER_RTT_vprintf+0x1c0>)
    1484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1488:	00001579 	.word	0x00001579
    148c:	00001615 	.word	0x00001615
    1490:	00001615 	.word	0x00001615
    1494:	00001615 	.word	0x00001615
    1498:	00001615 	.word	0x00001615
    149c:	00001615 	.word	0x00001615
    14a0:	00001615 	.word	0x00001615
    14a4:	00001615 	.word	0x00001615
    14a8:	00001615 	.word	0x00001615
    14ac:	00001615 	.word	0x00001615
    14b0:	00001615 	.word	0x00001615
    14b4:	0000150d 	.word	0x0000150d
    14b8:	00001531 	.word	0x00001531
    14bc:	00001615 	.word	0x00001615
    14c0:	00001615 	.word	0x00001615
    14c4:	00001615 	.word	0x00001615
    14c8:	00001615 	.word	0x00001615
    14cc:	00001615 	.word	0x00001615
    14d0:	00001615 	.word	0x00001615
    14d4:	00001615 	.word	0x00001615
    14d8:	00001615 	.word	0x00001615
    14dc:	00001615 	.word	0x00001615
    14e0:	00001615 	.word	0x00001615
    14e4:	00001615 	.word	0x00001615
    14e8:	000015e5 	.word	0x000015e5
    14ec:	00001615 	.word	0x00001615
    14f0:	00001615 	.word	0x00001615
    14f4:	0000159d 	.word	0x0000159d
    14f8:	00001615 	.word	0x00001615
    14fc:	00001555 	.word	0x00001555
    1500:	00001615 	.word	0x00001615
    1504:	00001615 	.word	0x00001615
    1508:	00001579 	.word	0x00001579
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    150c:	9b03      	ldr	r3, [sp, #12]
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	1d19      	adds	r1, r3, #4
    1512:	9a03      	ldr	r2, [sp, #12]
    1514:	6011      	str	r1, [r2, #0]
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    151a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    151c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1520:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1524:	ab16      	add	r3, sp, #88	; 0x58
    1526:	4611      	mov	r1, r2
    1528:	4618      	mov	r0, r3
    152a:	f7ff fd3a 	bl	fa2 <_StoreChar>
        break;
    152e:	e072      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1530:	9b03      	ldr	r3, [sp, #12]
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	1d19      	adds	r1, r3, #4
    1536:	9a03      	ldr	r2, [sp, #12]
    1538:	6011      	str	r1, [r2, #0]
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    153e:	a816      	add	r0, sp, #88	; 0x58
    1540:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1542:	9301      	str	r3, [sp, #4]
    1544:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1546:	9300      	str	r3, [sp, #0]
    1548:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    154a:	220a      	movs	r2, #10
    154c:	9920      	ldr	r1, [sp, #128]	; 0x80
    154e:	f7ff fe15 	bl	117c <_PrintInt>
        break;
    1552:	e060      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1554:	9b03      	ldr	r3, [sp, #12]
    1556:	681b      	ldr	r3, [r3, #0]
    1558:	1d19      	adds	r1, r3, #4
    155a:	9a03      	ldr	r2, [sp, #12]
    155c:	6011      	str	r1, [r2, #0]
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1562:	9920      	ldr	r1, [sp, #128]	; 0x80
    1564:	a816      	add	r0, sp, #88	; 0x58
    1566:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1568:	9301      	str	r3, [sp, #4]
    156a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    156c:	9300      	str	r3, [sp, #0]
    156e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1570:	220a      	movs	r2, #10
    1572:	f7ff fd55 	bl	1020 <_PrintUnsigned>
        break;
    1576:	e04e      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1578:	9b03      	ldr	r3, [sp, #12]
    157a:	681b      	ldr	r3, [r3, #0]
    157c:	1d19      	adds	r1, r3, #4
    157e:	9a03      	ldr	r2, [sp, #12]
    1580:	6011      	str	r1, [r2, #0]
    1582:	681b      	ldr	r3, [r3, #0]
    1584:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1586:	9920      	ldr	r1, [sp, #128]	; 0x80
    1588:	a816      	add	r0, sp, #88	; 0x58
    158a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    158c:	9301      	str	r3, [sp, #4]
    158e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1590:	9300      	str	r3, [sp, #0]
    1592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1594:	2210      	movs	r2, #16
    1596:	f7ff fd43 	bl	1020 <_PrintUnsigned>
        break;
    159a:	e03c      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    159c:	9b03      	ldr	r3, [sp, #12]
    159e:	681b      	ldr	r3, [r3, #0]
    15a0:	1d19      	adds	r1, r3, #4
    15a2:	9a03      	ldr	r2, [sp, #12]
    15a4:	6011      	str	r1, [r2, #0]
    15a6:	681b      	ldr	r3, [r3, #0]
    15a8:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    15aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    15ac:	2b00      	cmp	r3, #0
    15ae:	d101      	bne.n	15b4 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    15b0:	4b2c      	ldr	r3, [pc, #176]	; (1664 <SEGGER_RTT_vprintf+0x39c>)
    15b2:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    15b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    15b6:	781b      	ldrb	r3, [r3, #0]
    15b8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    15bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    15be:	3301      	adds	r3, #1
    15c0:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    15c2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15c6:	2b00      	cmp	r3, #0
    15c8:	d00a      	beq.n	15e0 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    15ca:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    15ce:	ab16      	add	r3, sp, #88	; 0x58
    15d0:	4611      	mov	r1, r2
    15d2:	4618      	mov	r0, r3
    15d4:	f7ff fce5 	bl	fa2 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    15d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15da:	2b00      	cmp	r3, #0
    15dc:	daea      	bge.n	15b4 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    15de:	e01a      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
              break;
    15e0:	bf00      	nop
        break;
    15e2:	e018      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    15e4:	9b03      	ldr	r3, [sp, #12]
    15e6:	681b      	ldr	r3, [r3, #0]
    15e8:	1d19      	adds	r1, r3, #4
    15ea:	9a03      	ldr	r2, [sp, #12]
    15ec:	6011      	str	r1, [r2, #0]
    15ee:	681b      	ldr	r3, [r3, #0]
    15f0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    15f2:	9920      	ldr	r1, [sp, #128]	; 0x80
    15f4:	a816      	add	r0, sp, #88	; 0x58
    15f6:	2300      	movs	r3, #0
    15f8:	9301      	str	r3, [sp, #4]
    15fa:	2308      	movs	r3, #8
    15fc:	9300      	str	r3, [sp, #0]
    15fe:	2308      	movs	r3, #8
    1600:	2210      	movs	r2, #16
    1602:	f7ff fd0d 	bl	1020 <_PrintUnsigned>
        break;
    1606:	e006      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1608:	ab16      	add	r3, sp, #88	; 0x58
    160a:	2125      	movs	r1, #37	; 0x25
    160c:	4618      	mov	r0, r3
    160e:	f7ff fcc8 	bl	fa2 <_StoreChar>
        break;
    1612:	e000      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1614:	bf00      	nop
      }
      sFormat++;
    1616:	9b04      	ldr	r3, [sp, #16]
    1618:	3301      	adds	r3, #1
    161a:	9304      	str	r3, [sp, #16]
    161c:	e006      	b.n	162c <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    161e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1622:	ab16      	add	r3, sp, #88	; 0x58
    1624:	4611      	mov	r1, r2
    1626:	4618      	mov	r0, r3
    1628:	f7ff fcbb 	bl	fa2 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    162c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    162e:	2b00      	cmp	r3, #0
    1630:	f6bf ae59 	bge.w	12e6 <SEGGER_RTT_vprintf+0x1e>
    1634:	e000      	b.n	1638 <SEGGER_RTT_vprintf+0x370>
      break;
    1636:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1638:	9b19      	ldr	r3, [sp, #100]	; 0x64
    163a:	2b00      	cmp	r3, #0
    163c:	dd0c      	ble.n	1658 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    163e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1640:	2b00      	cmp	r3, #0
    1642:	d005      	beq.n	1650 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1644:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1646:	ab06      	add	r3, sp, #24
    1648:	4619      	mov	r1, r3
    164a:	9805      	ldr	r0, [sp, #20]
    164c:	f7ff fc7e 	bl	f4c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1650:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1652:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1654:	4413      	add	r3, r2
    1656:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1658:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    165a:	4618      	mov	r0, r3
    165c:	b023      	add	sp, #140	; 0x8c
    165e:	f85d fb04 	ldr.w	pc, [sp], #4
    1662:	bf00      	nop
    1664:	00017dd0 	.word	0x00017dd0

00001668 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1668:	b40e      	push	{r1, r2, r3}
    166a:	b500      	push	{lr}
    166c:	b084      	sub	sp, #16
    166e:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1670:	ab06      	add	r3, sp, #24
    1672:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1674:	ab02      	add	r3, sp, #8
    1676:	461a      	mov	r2, r3
    1678:	9905      	ldr	r1, [sp, #20]
    167a:	9801      	ldr	r0, [sp, #4]
    167c:	f7ff fe24 	bl	12c8 <SEGGER_RTT_vprintf>
    1680:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1682:	9b03      	ldr	r3, [sp, #12]
}
    1684:	4618      	mov	r0, r3
    1686:	b004      	add	sp, #16
    1688:	f85d eb04 	ldr.w	lr, [sp], #4
    168c:	b003      	add	sp, #12
    168e:	4770      	bx	lr

00001690 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    1690:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    1692:	4805      	ldr	r0, [pc, #20]	; (16a8 <MCU_clocks+0x18>)
    1694:	f004 fa38 	bl	5b08 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    1698:	2000      	movs	r0, #0
    169a:	f004 fae9 	bl	5c70 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    169e:	2000      	movs	r0, #0
    16a0:	f004 fab0 	bl	5c04 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    16a4:	bf00      	nop
    16a6:	bd08      	pop	{r3, pc}
    16a8:	000191f4 	.word	0x000191f4

000016ac <EcuM_Init>:
/**
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void ) {   
    16ac:	b508      	push	{r3, lr}
    MCU_clocks();
    16ae:	f7ff ffef 	bl	1690 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    16b2:	2000      	movs	r0, #0
    16b4:	f000 fbd1 	bl	1e5a <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    16b8:	2000      	movs	r0, #0
    16ba:	f000 fa71 	bl	1ba0 <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    16be:	4807      	ldr	r0, [pc, #28]	; (16dc <EcuM_Init+0x30>)
    16c0:	f004 feba 	bl	6438 <Port_Init>
    Spi_Init( &Spi_Config );    //Init spi driver and configuration.
    16c4:	4806      	ldr	r0, [pc, #24]	; (16e0 <EcuM_Init+0x34>)
    16c6:	f008 f8b5 	bl	9834 <Spi_Init>
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );  //Init FlexCan driver
    16ca:	4806      	ldr	r0, [pc, #24]	; (16e4 <EcuM_Init+0x38>)
    16cc:	f008 fdbc 	bl	a248 <Can_43_FLEXCAN_Init>
    CanIf_Init( &CanIf_Config );    //Init CanIf driver.
    16d0:	4805      	ldr	r0, [pc, #20]	; (16e8 <EcuM_Init+0x3c>)
    16d2:	f015 fbd9 	bl	16e88 <CanIf_Init>
}
    16d6:	bf00      	nop
    16d8:	bd08      	pop	{r3, pc}
    16da:	bf00      	nop
    16dc:	0001985c 	.word	0x0001985c
    16e0:	0001995c 	.word	0x0001995c
    16e4:	00018cb8 	.word	0x00018cb8
    16e8:	00018b40 	.word	0x00018b40

000016ec <Delay>:
/**
 * @brief This function is a delay in ms using the osif timer.
 * 
 * @param ms Delay in ms.
 */
void Delay( uint32 ms ) {
    16ec:	b500      	push	{lr}
    16ee:	b087      	sub	sp, #28
    16f0:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
    16f2:	9b01      	ldr	r3, [sp, #4]
    16f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    16f8:	fb02 f303 	mul.w	r3, r2, r3
    16fc:	2101      	movs	r1, #1
    16fe:	4618      	mov	r0, r3
    1700:	f000 fc00 	bl	1f04 <OsIf_MicrosToTicks>
    1704:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
    1706:	2001      	movs	r0, #1
    1708:	f000 fbb0 	bl	1e6c <OsIf_GetCounter>
    170c:	4603      	mov	r3, r0
    170e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
    1710:	2300      	movs	r3, #0
    1712:	9305      	str	r3, [sp, #20]

    do {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    1714:	ab03      	add	r3, sp, #12
    1716:	2101      	movs	r1, #1
    1718:	4618      	mov	r0, r3
    171a:	f000 fbc0 	bl	1e9e <OsIf_GetElapsed>
    171e:	4602      	mov	r2, r0
    1720:	9b05      	ldr	r3, [sp, #20]
    1722:	4413      	add	r3, r2
    1724:	9305      	str	r3, [sp, #20]
    } while( ElapsedTime < Timeout );
    1726:	9a05      	ldr	r2, [sp, #20]
    1728:	9b04      	ldr	r3, [sp, #16]
    172a:	429a      	cmp	r2, r3
    172c:	d3f2      	bcc.n	1714 <Delay+0x28>
    172e:	bf00      	nop
    1730:	bf00      	nop
    1732:	b007      	add	sp, #28
    1734:	f85d fb04 	ldr.w	pc, [sp], #4

00001738 <memcpy>:
    1738:	440a      	add	r2, r1
    173a:	4291      	cmp	r1, r2
    173c:	f100 33ff 	add.w	r3, r0, #4294967295
    1740:	d100      	bne.n	1744 <memcpy+0xc>
    1742:	4770      	bx	lr
    1744:	b510      	push	{r4, lr}
    1746:	f811 4b01 	ldrb.w	r4, [r1], #1
    174a:	f803 4f01 	strb.w	r4, [r3, #1]!
    174e:	4291      	cmp	r1, r2
    1750:	d1f9      	bne.n	1746 <memcpy+0xe>
    1752:	bd10      	pop	{r4, pc}

00001754 <memset>:
    1754:	4402      	add	r2, r0
    1756:	4603      	mov	r3, r0
    1758:	4293      	cmp	r3, r2
    175a:	d100      	bne.n	175e <memset+0xa>
    175c:	4770      	bx	lr
    175e:	f803 1b01 	strb.w	r1, [r3], #1
    1762:	e7f9      	b.n	1758 <memset+0x4>

00001764 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1764:	b500      	push	{lr}
    1766:	b087      	sub	sp, #28
    1768:	9003      	str	r0, [sp, #12]
    176a:	9102      	str	r1, [sp, #8]
    176c:	9201      	str	r2, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    sint32 dev_irqNumber = (sint32)eIrqNumber;
    176e:	9b03      	ldr	r3, [sp, #12]
    1770:	9305      	str	r3, [sp, #20]
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= dev_irqNumber);
    1772:	9b05      	ldr	r3, [sp, #20]
    1774:	43db      	mvns	r3, r3
    1776:	0fdb      	lsrs	r3, r3, #31
    1778:	b2db      	uxtb	r3, r3
    177a:	4618      	mov	r0, r3
    177c:	f7ff f8c8 	bl	910 <DevAssert>
    DevAssert(dev_irqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1780:	9b05      	ldr	r3, [sp, #20]
    1782:	2b7a      	cmp	r3, #122	; 0x7a
    1784:	bfd4      	ite	le
    1786:	2301      	movle	r3, #1
    1788:	2300      	movgt	r3, #0
    178a:	b2db      	uxtb	r3, r3
    178c:	4618      	mov	r0, r3
    178e:	f7ff f8bf 	bl	910 <DevAssert>
#if (MCAL_PLATFORM_ARM == MCAL_ARM_MARCH)
#if defined(S32K3XX) || defined(SAF85) || defined(S32R41)
    DevAssert(S32_SCB->VTOR >= (uint32)__RAM_INTERRUPT_START);
#else
    DevAssert(S32_SCB->VTOR >= (uint32)__INT_SRAM_START);
    1792:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1796:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    179a:	4a14      	ldr	r2, [pc, #80]	; (17ec <IntCtrl_Ip_InstallHandlerPrivileged+0x88>)
    179c:	4293      	cmp	r3, r2
    179e:	bf2c      	ite	cs
    17a0:	2301      	movcs	r3, #1
    17a2:	2300      	movcc	r3, #0
    17a4:	b2db      	uxtb	r3, r3
    17a6:	4618      	mov	r0, r3
    17a8:	f7ff f8b2 	bl	910 <DevAssert>

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    17ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    17b0:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    17b4:	9304      	str	r3, [sp, #16]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    17b6:	9b01      	ldr	r3, [sp, #4]
    17b8:	2b00      	cmp	r3, #0
    17ba:	d007      	beq.n	17cc <IntCtrl_Ip_InstallHandlerPrivileged+0x68>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    17bc:	9b03      	ldr	r3, [sp, #12]
    17be:	3310      	adds	r3, #16
    17c0:	009b      	lsls	r3, r3, #2
    17c2:	9a04      	ldr	r2, [sp, #16]
    17c4:	4413      	add	r3, r2
    17c6:	681a      	ldr	r2, [r3, #0]
    17c8:	9b01      	ldr	r3, [sp, #4]
    17ca:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    17cc:	9b03      	ldr	r3, [sp, #12]
    17ce:	3310      	adds	r3, #16
    17d0:	009b      	lsls	r3, r3, #2
    17d2:	9a04      	ldr	r2, [sp, #16]
    17d4:	4413      	add	r3, r2
    17d6:	9a02      	ldr	r2, [sp, #8]
    17d8:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    17da:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    17de:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    17e2:	bf00      	nop
    17e4:	b007      	add	sp, #28
    17e6:	f85d fb04 	ldr.w	pc, [sp], #4
    17ea:	bf00      	nop
    17ec:	1fff8000 	.word	0x1fff8000

000017f0 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    17f0:	b500      	push	{lr}
    17f2:	b083      	sub	sp, #12
    17f4:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    17f6:	9b01      	ldr	r3, [sp, #4]
    17f8:	43db      	mvns	r3, r3
    17fa:	0fdb      	lsrs	r3, r3, #31
    17fc:	b2db      	uxtb	r3, r3
    17fe:	4618      	mov	r0, r3
    1800:	f7ff f886 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1804:	9b01      	ldr	r3, [sp, #4]
    1806:	2b7a      	cmp	r3, #122	; 0x7a
    1808:	bfd4      	ite	le
    180a:	2301      	movle	r3, #1
    180c:	2300      	movgt	r3, #0
    180e:	b2db      	uxtb	r3, r3
    1810:	4618      	mov	r0, r3
    1812:	f7ff f87d 	bl	910 <DevAssert>
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1816:	9b01      	ldr	r3, [sp, #4]
    1818:	f003 021f 	and.w	r2, r3, #31
    181c:	4905      	ldr	r1, [pc, #20]	; (1834 <IntCtrl_Ip_EnableIrqPrivileged+0x44>)
    181e:	9b01      	ldr	r3, [sp, #4]
    1820:	095b      	lsrs	r3, r3, #5
    1822:	2001      	movs	r0, #1
    1824:	fa00 f202 	lsl.w	r2, r0, r2
    1828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    182c:	bf00      	nop
    182e:	b003      	add	sp, #12
    1830:	f85d fb04 	ldr.w	pc, [sp], #4
    1834:	e000e100 	.word	0xe000e100

00001838 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1838:	b500      	push	{lr}
    183a:	b083      	sub	sp, #12
    183c:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    183e:	9b01      	ldr	r3, [sp, #4]
    1840:	43db      	mvns	r3, r3
    1842:	0fdb      	lsrs	r3, r3, #31
    1844:	b2db      	uxtb	r3, r3
    1846:	4618      	mov	r0, r3
    1848:	f7ff f862 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    184c:	9b01      	ldr	r3, [sp, #4]
    184e:	2b7a      	cmp	r3, #122	; 0x7a
    1850:	bfd4      	ite	le
    1852:	2301      	movle	r3, #1
    1854:	2300      	movgt	r3, #0
    1856:	b2db      	uxtb	r3, r3
    1858:	4618      	mov	r0, r3
    185a:	f7ff f859 	bl	910 <DevAssert>
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    185e:	9b01      	ldr	r3, [sp, #4]
    1860:	f003 021f 	and.w	r2, r3, #31
    1864:	4906      	ldr	r1, [pc, #24]	; (1880 <IntCtrl_Ip_DisableIrqPrivileged+0x48>)
    1866:	9b01      	ldr	r3, [sp, #4]
    1868:	095b      	lsrs	r3, r3, #5
    186a:	2001      	movs	r0, #1
    186c:	fa00 f202 	lsl.w	r2, r0, r2
    1870:	3320      	adds	r3, #32
    1872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1876:	bf00      	nop
    1878:	b003      	add	sp, #12
    187a:	f85d fb04 	ldr.w	pc, [sp], #4
    187e:	bf00      	nop
    1880:	e000e100 	.word	0xe000e100

00001884 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1884:	b500      	push	{lr}
    1886:	b085      	sub	sp, #20
    1888:	9001      	str	r0, [sp, #4]
    188a:	460b      	mov	r3, r1
    188c:	f88d 3003 	strb.w	r3, [sp, #3]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number and priority - dev_irqNumber is used to avoid compiler warning */
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= (sint32)eIrqNumber);
    1890:	9b01      	ldr	r3, [sp, #4]
    1892:	43db      	mvns	r3, r3
    1894:	0fdb      	lsrs	r3, r3, #31
    1896:	b2db      	uxtb	r3, r3
    1898:	4618      	mov	r0, r3
    189a:	f7ff f839 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    189e:	9b01      	ldr	r3, [sp, #4]
    18a0:	2b7a      	cmp	r3, #122	; 0x7a
    18a2:	bfd4      	ite	le
    18a4:	2301      	movle	r3, #1
    18a6:	2300      	movgt	r3, #0
    18a8:	b2db      	uxtb	r3, r3
    18aa:	4618      	mov	r0, r3
    18ac:	f7ff f830 	bl	910 <DevAssert>
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    DevAssert(u8Priority < (uint8)(1U << INT_CTRL_IP_NVIC_PRIO_BITS));
    18b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    18b4:	2b0f      	cmp	r3, #15
    18b6:	bf94      	ite	ls
    18b8:	2301      	movls	r3, #1
    18ba:	2300      	movhi	r3, #0
    18bc:	b2db      	uxtb	r3, r3
    18be:	4618      	mov	r0, r3
    18c0:	f7ff f826 	bl	910 <DevAssert>
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    18c4:	2304      	movs	r3, #4
    18c6:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    18ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
    18ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    18d2:	fa02 f103 	lsl.w	r1, r2, r3
    18d6:	4a05      	ldr	r2, [pc, #20]	; (18ec <IntCtrl_Ip_SetPriorityPrivileged+0x68>)
    18d8:	9b01      	ldr	r3, [sp, #4]
    18da:	b2c9      	uxtb	r1, r1
    18dc:	4413      	add	r3, r2
    18de:	460a      	mov	r2, r1
    18e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    18e4:	bf00      	nop
    18e6:	b005      	add	sp, #20
    18e8:	f85d fb04 	ldr.w	pc, [sp], #4
    18ec:	e000e100 	.word	0xe000e100

000018f0 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    18f0:	b500      	push	{lr}
    18f2:	b085      	sub	sp, #20
    18f4:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number */
    DevAssert(INT_CTRL_IP_IRQ_MIN <= eIrqNumber);
    18f6:	9b01      	ldr	r3, [sp, #4]
    18f8:	43db      	mvns	r3, r3
    18fa:	0fdb      	lsrs	r3, r3, #31
    18fc:	b2db      	uxtb	r3, r3
    18fe:	4618      	mov	r0, r3
    1900:	f7ff f806 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1904:	9b01      	ldr	r3, [sp, #4]
    1906:	2b7a      	cmp	r3, #122	; 0x7a
    1908:	bfd4      	ite	le
    190a:	2301      	movle	r3, #1
    190c:	2300      	movgt	r3, #0
    190e:	b2db      	uxtb	r3, r3
    1910:	4618      	mov	r0, r3
    1912:	f7fe fffd 	bl	910 <DevAssert>

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1916:	2304      	movs	r3, #4
    1918:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    191c:	4a09      	ldr	r2, [pc, #36]	; (1944 <IntCtrl_Ip_GetPriorityPrivileged+0x54>)
    191e:	9b01      	ldr	r3, [sp, #4]
    1920:	4413      	add	r3, r2
    1922:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1926:	b2db      	uxtb	r3, r3
    1928:	461a      	mov	r2, r3
    192a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    192e:	fa42 f303 	asr.w	r3, r2, r3
    1932:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    1936:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    193a:	4618      	mov	r0, r3
    193c:	b005      	add	sp, #20
    193e:	f85d fb04 	ldr.w	pc, [sp], #4
    1942:	bf00      	nop
    1944:	e000e100 	.word	0xe000e100

00001948 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    1948:	b500      	push	{lr}
    194a:	b083      	sub	sp, #12
    194c:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number */
    DevAssert(0 <= (sint32)eIrqNumber);
    194e:	9b01      	ldr	r3, [sp, #4]
    1950:	43db      	mvns	r3, r3
    1952:	0fdb      	lsrs	r3, r3, #31
    1954:	b2db      	uxtb	r3, r3
    1956:	4618      	mov	r0, r3
    1958:	f7fe ffda 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    195c:	9b01      	ldr	r3, [sp, #4]
    195e:	2b7a      	cmp	r3, #122	; 0x7a
    1960:	bfd4      	ite	le
    1962:	2301      	movle	r3, #1
    1964:	2300      	movgt	r3, #0
    1966:	b2db      	uxtb	r3, r3
    1968:	4618      	mov	r0, r3
    196a:	f7fe ffd1 	bl	910 <DevAssert>
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    196e:	9b01      	ldr	r3, [sp, #4]
    1970:	f003 021f 	and.w	r2, r3, #31
    1974:	4906      	ldr	r1, [pc, #24]	; (1990 <IntCtrl_Ip_ClearPendingPrivileged+0x48>)
    1976:	9b01      	ldr	r3, [sp, #4]
    1978:	095b      	lsrs	r3, r3, #5
    197a:	2001      	movs	r0, #1
    197c:	fa00 f202 	lsl.w	r2, r0, r2
    1980:	3360      	adds	r3, #96	; 0x60
    1982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1986:	bf00      	nop
    1988:	b003      	add	sp, #12
    198a:	f85d fb04 	ldr.w	pc, [sp], #4
    198e:	bf00      	nop
    1990:	e000e100 	.word	0xe000e100

00001994 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1994:	b500      	push	{lr}
    1996:	b085      	sub	sp, #20
    1998:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_ENABLE_VTOR_CONFIG == STD_ON)
    S32_SCB->VTOR = pIntCtrlCtrlConfig->u32VectorTableAddress;
#endif

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    199a:	9b01      	ldr	r3, [sp, #4]
    199c:	2b00      	cmp	r3, #0
    199e:	bf14      	ite	ne
    19a0:	2301      	movne	r3, #1
    19a2:	2300      	moveq	r3, #0
    19a4:	b2db      	uxtb	r3, r3
    19a6:	4618      	mov	r0, r3
    19a8:	f7fe ffb2 	bl	910 <DevAssert>
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
    19ac:	9b01      	ldr	r3, [sp, #4]
    19ae:	681b      	ldr	r3, [r3, #0]
    19b0:	2b59      	cmp	r3, #89	; 0x59
    19b2:	bf94      	ite	ls
    19b4:	2301      	movls	r3, #1
    19b6:	2300      	movhi	r3, #0
    19b8:	b2db      	uxtb	r3, r3
    19ba:	4618      	mov	r0, r3
    19bc:	f7fe ffa8 	bl	910 <DevAssert>
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    19c0:	2300      	movs	r3, #0
    19c2:	9303      	str	r3, [sp, #12]
    19c4:	e05d      	b.n	1a82 <IntCtrl_Ip_Init+0xee>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    19c6:	9b01      	ldr	r3, [sp, #4]
    19c8:	6859      	ldr	r1, [r3, #4]
    19ca:	9a03      	ldr	r2, [sp, #12]
    19cc:	4613      	mov	r3, r2
    19ce:	005b      	lsls	r3, r3, #1
    19d0:	4413      	add	r3, r2
    19d2:	009b      	lsls	r3, r3, #2
    19d4:	440b      	add	r3, r1
    19d6:	681b      	ldr	r3, [r3, #0]
    19d8:	4618      	mov	r0, r3
    19da:	f000 f899 	bl	1b10 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19de:	9b01      	ldr	r3, [sp, #4]
    19e0:	6859      	ldr	r1, [r3, #4]
    19e2:	9a03      	ldr	r2, [sp, #12]
    19e4:	4613      	mov	r3, r2
    19e6:	005b      	lsls	r3, r3, #1
    19e8:	4413      	add	r3, r2
    19ea:	009b      	lsls	r3, r3, #2
    19ec:	440b      	add	r3, r1
    19ee:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    19f0:	9b01      	ldr	r3, [sp, #4]
    19f2:	6859      	ldr	r1, [r3, #4]
    19f4:	9a03      	ldr	r2, [sp, #12]
    19f6:	4613      	mov	r3, r2
    19f8:	005b      	lsls	r3, r3, #1
    19fa:	4413      	add	r3, r2
    19fc:	009b      	lsls	r3, r3, #2
    19fe:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a00:	795b      	ldrb	r3, [r3, #5]
    1a02:	4619      	mov	r1, r3
    1a04:	f000 f869 	bl	1ada <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a08:	9b01      	ldr	r3, [sp, #4]
    1a0a:	6859      	ldr	r1, [r3, #4]
    1a0c:	9a03      	ldr	r2, [sp, #12]
    1a0e:	4613      	mov	r3, r2
    1a10:	005b      	lsls	r3, r3, #1
    1a12:	4413      	add	r3, r2
    1a14:	009b      	lsls	r3, r3, #2
    1a16:	440b      	add	r3, r1
    1a18:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1a1a:	9b01      	ldr	r3, [sp, #4]
    1a1c:	6859      	ldr	r1, [r3, #4]
    1a1e:	9a03      	ldr	r2, [sp, #12]
    1a20:	4613      	mov	r3, r2
    1a22:	005b      	lsls	r3, r3, #1
    1a24:	4413      	add	r3, r2
    1a26:	009b      	lsls	r3, r3, #2
    1a28:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a2a:	689b      	ldr	r3, [r3, #8]
    1a2c:	2200      	movs	r2, #0
    1a2e:	4619      	mov	r1, r3
    1a30:	f000 f831 	bl	1a96 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1a34:	9b01      	ldr	r3, [sp, #4]
    1a36:	6859      	ldr	r1, [r3, #4]
    1a38:	9a03      	ldr	r2, [sp, #12]
    1a3a:	4613      	mov	r3, r2
    1a3c:	005b      	lsls	r3, r3, #1
    1a3e:	4413      	add	r3, r2
    1a40:	009b      	lsls	r3, r3, #2
    1a42:	440b      	add	r3, r1
    1a44:	791b      	ldrb	r3, [r3, #4]
    1a46:	2b00      	cmp	r3, #0
    1a48:	d00c      	beq.n	1a64 <IntCtrl_Ip_Init+0xd0>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a4a:	9b01      	ldr	r3, [sp, #4]
    1a4c:	6859      	ldr	r1, [r3, #4]
    1a4e:	9a03      	ldr	r2, [sp, #12]
    1a50:	4613      	mov	r3, r2
    1a52:	005b      	lsls	r3, r3, #1
    1a54:	4413      	add	r3, r2
    1a56:	009b      	lsls	r3, r3, #2
    1a58:	440b      	add	r3, r1
    1a5a:	681b      	ldr	r3, [r3, #0]
    1a5c:	4618      	mov	r0, r3
    1a5e:	f000 f828 	bl	1ab2 <IntCtrl_Ip_EnableIrq>
    1a62:	e00b      	b.n	1a7c <IntCtrl_Ip_Init+0xe8>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a64:	9b01      	ldr	r3, [sp, #4]
    1a66:	6859      	ldr	r1, [r3, #4]
    1a68:	9a03      	ldr	r2, [sp, #12]
    1a6a:	4613      	mov	r3, r2
    1a6c:	005b      	lsls	r3, r3, #1
    1a6e:	4413      	add	r3, r2
    1a70:	009b      	lsls	r3, r3, #2
    1a72:	440b      	add	r3, r1
    1a74:	681b      	ldr	r3, [r3, #0]
    1a76:	4618      	mov	r0, r3
    1a78:	f000 f825 	bl	1ac6 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a7c:	9b03      	ldr	r3, [sp, #12]
    1a7e:	3301      	adds	r3, #1
    1a80:	9303      	str	r3, [sp, #12]
    1a82:	9b01      	ldr	r3, [sp, #4]
    1a84:	681b      	ldr	r3, [r3, #0]
    1a86:	9a03      	ldr	r2, [sp, #12]
    1a88:	429a      	cmp	r2, r3
    1a8a:	d39c      	bcc.n	19c6 <IntCtrl_Ip_Init+0x32>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1a8c:	2300      	movs	r3, #0
}
    1a8e:	4618      	mov	r0, r3
    1a90:	b005      	add	sp, #20
    1a92:	f85d fb04 	ldr.w	pc, [sp], #4

00001a96 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1a96:	b500      	push	{lr}
    1a98:	b085      	sub	sp, #20
    1a9a:	9003      	str	r0, [sp, #12]
    1a9c:	9102      	str	r1, [sp, #8]
    1a9e:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1aa0:	9a01      	ldr	r2, [sp, #4]
    1aa2:	9902      	ldr	r1, [sp, #8]
    1aa4:	9803      	ldr	r0, [sp, #12]
    1aa6:	f7ff fe5d 	bl	1764 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1aaa:	bf00      	nop
    1aac:	b005      	add	sp, #20
    1aae:	f85d fb04 	ldr.w	pc, [sp], #4

00001ab2 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1ab2:	b500      	push	{lr}
    1ab4:	b083      	sub	sp, #12
    1ab6:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1ab8:	9801      	ldr	r0, [sp, #4]
    1aba:	f7ff fe99 	bl	17f0 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1abe:	bf00      	nop
    1ac0:	b003      	add	sp, #12
    1ac2:	f85d fb04 	ldr.w	pc, [sp], #4

00001ac6 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1ac6:	b500      	push	{lr}
    1ac8:	b083      	sub	sp, #12
    1aca:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1acc:	9801      	ldr	r0, [sp, #4]
    1ace:	f7ff feb3 	bl	1838 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1ad2:	bf00      	nop
    1ad4:	b003      	add	sp, #12
    1ad6:	f85d fb04 	ldr.w	pc, [sp], #4

00001ada <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1ada:	b500      	push	{lr}
    1adc:	b083      	sub	sp, #12
    1ade:	9001      	str	r0, [sp, #4]
    1ae0:	460b      	mov	r3, r1
    1ae2:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1ae6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1aea:	4619      	mov	r1, r3
    1aec:	9801      	ldr	r0, [sp, #4]
    1aee:	f7ff fec9 	bl	1884 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1af2:	bf00      	nop
    1af4:	b003      	add	sp, #12
    1af6:	f85d fb04 	ldr.w	pc, [sp], #4

00001afa <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1afa:	b500      	push	{lr}
    1afc:	b083      	sub	sp, #12
    1afe:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1b00:	9801      	ldr	r0, [sp, #4]
    1b02:	f7ff fef5 	bl	18f0 <IntCtrl_Ip_GetPriorityPrivileged>
    1b06:	4603      	mov	r3, r0
}
    1b08:	4618      	mov	r0, r3
    1b0a:	b003      	add	sp, #12
    1b0c:	f85d fb04 	ldr.w	pc, [sp], #4

00001b10 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1b10:	b500      	push	{lr}
    1b12:	b083      	sub	sp, #12
    1b14:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1b16:	9801      	ldr	r0, [sp, #4]
    1b18:	f7ff ff16 	bl	1948 <IntCtrl_Ip_ClearPendingPrivileged>
}
    1b1c:	bf00      	nop
    1b1e:	b003      	add	sp, #12
    1b20:	f85d fb04 	ldr.w	pc, [sp], #4

00001b24 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1b24:	b500      	push	{lr}
    1b26:	b083      	sub	sp, #12
    1b28:	9001      	str	r0, [sp, #4]
    1b2a:	460b      	mov	r3, r1
    1b2c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1b30:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b34:	2b00      	cmp	r3, #0
    1b36:	d003      	beq.n	1b40 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1b38:	9801      	ldr	r0, [sp, #4]
    1b3a:	f7ff ffba 	bl	1ab2 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1b3e:	e002      	b.n	1b46 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1b40:	9801      	ldr	r0, [sp, #4]
    1b42:	f7ff ffc0 	bl	1ac6 <IntCtrl_Ip_DisableIrq>
}
    1b46:	bf00      	nop
    1b48:	b003      	add	sp, #12
    1b4a:	f85d fb04 	ldr.w	pc, [sp], #4

00001b4e <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1b4e:	b500      	push	{lr}
    1b50:	b083      	sub	sp, #12
    1b52:	9001      	str	r0, [sp, #4]
    1b54:	460b      	mov	r3, r1
    1b56:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1b5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b5e:	4619      	mov	r1, r3
    1b60:	9801      	ldr	r0, [sp, #4]
    1b62:	f7ff ffba 	bl	1ada <IntCtrl_Ip_SetPriority>
}
    1b66:	bf00      	nop
    1b68:	b003      	add	sp, #12
    1b6a:	f85d fb04 	ldr.w	pc, [sp], #4

00001b6e <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1b6e:	b500      	push	{lr}
    1b70:	b083      	sub	sp, #12
    1b72:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1b74:	9801      	ldr	r0, [sp, #4]
    1b76:	f7ff ffc0 	bl	1afa <IntCtrl_Ip_GetPriority>
    1b7a:	4603      	mov	r3, r0
}
    1b7c:	4618      	mov	r0, r3
    1b7e:	b003      	add	sp, #12
    1b80:	f85d fb04 	ldr.w	pc, [sp], #4

00001b84 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1b84:	b500      	push	{lr}
    1b86:	b085      	sub	sp, #20
    1b88:	9003      	str	r0, [sp, #12]
    1b8a:	9102      	str	r1, [sp, #8]
    1b8c:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1b8e:	9a01      	ldr	r2, [sp, #4]
    1b90:	9902      	ldr	r1, [sp, #8]
    1b92:	9803      	ldr	r0, [sp, #12]
    1b94:	f7ff ff7f 	bl	1a96 <IntCtrl_Ip_InstallHandler>
}
    1b98:	bf00      	nop
    1b9a:	b005      	add	sp, #20
    1b9c:	f85d fb04 	ldr.w	pc, [sp], #4

00001ba0 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1ba0:	b500      	push	{lr}
    1ba2:	b085      	sub	sp, #20
    1ba4:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1ba6:	2300      	movs	r3, #0
    1ba8:	f88d 300f 	strb.w	r3, [sp, #15]
    (void)pConfig;
#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != pConfig)
    1bac:	9b01      	ldr	r3, [sp, #4]
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d006      	beq.n	1bc0 <Platform_Init+0x20>
    {
        (void)Det_ReportError((uint16)CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INIT_ID, PLATFORM_E_PARAM_POINTER);
    1bb2:	2301      	movs	r3, #1
    1bb4:	2220      	movs	r2, #32
    1bb6:	2100      	movs	r1, #0
    1bb8:	20ff      	movs	r0, #255	; 0xff
    1bba:	f015 f88b 	bl	16cd4 <Det_ReportError>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1bbe:	e008      	b.n	1bd2 <Platform_Init+0x32>
            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1bc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1bc4:	4a05      	ldr	r2, [pc, #20]	; (1bdc <Platform_Init+0x3c>)
    1bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	4618      	mov	r0, r3
    1bce:	f000 f917 	bl	1e00 <Platform_Ipw_Init>
}
    1bd2:	bf00      	nop
    1bd4:	b005      	add	sp, #20
    1bd6:	f85d fb04 	ldr.w	pc, [sp], #4
    1bda:	bf00      	nop
    1bdc:	00019220 	.word	0x00019220

00001be0 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1be0:	b500      	push	{lr}
    1be2:	b085      	sub	sp, #20
    1be4:	9001      	str	r0, [sp, #4]
    1be6:	460b      	mov	r3, r1
    1be8:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1bec:	2300      	movs	r3, #0
    1bee:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1bf2:	9b01      	ldr	r3, [sp, #4]
    1bf4:	2b7a      	cmp	r3, #122	; 0x7a
    1bf6:	dc02      	bgt.n	1bfe <Platform_SetIrq+0x1e>
    1bf8:	9b01      	ldr	r3, [sp, #4]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	da09      	bge.n	1c12 <Platform_SetIrq+0x32>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1bfe:	2302      	movs	r3, #2
    1c00:	2221      	movs	r2, #33	; 0x21
    1c02:	2100      	movs	r1, #0
    1c04:	20ff      	movs	r0, #255	; 0xff
    1c06:	f015 f865 	bl	16cd4 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c0a:	2301      	movs	r3, #1
    1c0c:	f88d 300f 	strb.w	r3, [sp, #15]
    1c10:	e005      	b.n	1c1e <Platform_SetIrq+0x3e>
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1c12:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1c16:	4619      	mov	r1, r3
    1c18:	9801      	ldr	r0, [sp, #4]
    1c1a:	f7ff ff83 	bl	1b24 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1c1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1c22:	4618      	mov	r0, r3
    1c24:	b005      	add	sp, #20
    1c26:	f85d fb04 	ldr.w	pc, [sp], #4

00001c2a <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1c2a:	b500      	push	{lr}
    1c2c:	b085      	sub	sp, #20
    1c2e:	9001      	str	r0, [sp, #4]
    1c30:	460b      	mov	r3, r1
    1c32:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c36:	2300      	movs	r3, #0
    1c38:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1c3c:	9b01      	ldr	r3, [sp, #4]
    1c3e:	2b7a      	cmp	r3, #122	; 0x7a
    1c40:	dc06      	bgt.n	1c50 <Platform_SetIrqPriority+0x26>
    1c42:	9b01      	ldr	r3, [sp, #4]
    1c44:	2b00      	cmp	r3, #0
    1c46:	db03      	blt.n	1c50 <Platform_SetIrqPriority+0x26>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
    1c48:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1c4c:	2b0f      	cmp	r3, #15
    1c4e:	d909      	bls.n	1c64 <Platform_SetIrqPriority+0x3a>
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
        (u8Priority >= (uint8)(1U << INT_CTRL_IP_GIC_PRIO_BITS)))
#endif
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1c50:	2302      	movs	r3, #2
    1c52:	2222      	movs	r2, #34	; 0x22
    1c54:	2100      	movs	r1, #0
    1c56:	20ff      	movs	r0, #255	; 0xff
    1c58:	f015 f83c 	bl	16cd4 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c5c:	2301      	movs	r3, #1
    1c5e:	f88d 300f 	strb.w	r3, [sp, #15]
    1c62:	e005      	b.n	1c70 <Platform_SetIrqPriority+0x46>
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1c64:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1c68:	4619      	mov	r1, r3
    1c6a:	9801      	ldr	r0, [sp, #4]
    1c6c:	f7ff ff6f 	bl	1b4e <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1c70:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1c74:	4618      	mov	r0, r3
    1c76:	b005      	add	sp, #20
    1c78:	f85d fb04 	ldr.w	pc, [sp], #4

00001c7c <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1c7c:	b500      	push	{lr}
    1c7e:	b085      	sub	sp, #20
    1c80:	9001      	str	r0, [sp, #4]
    1c82:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c84:	2300      	movs	r3, #0
    1c86:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1c8a:	9b01      	ldr	r3, [sp, #4]
    1c8c:	2b7a      	cmp	r3, #122	; 0x7a
    1c8e:	dc02      	bgt.n	1c96 <Platform_GetIrqPriority+0x1a>
    1c90:	9b01      	ldr	r3, [sp, #4]
    1c92:	2b00      	cmp	r3, #0
    1c94:	da09      	bge.n	1caa <Platform_GetIrqPriority+0x2e>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1c96:	2302      	movs	r3, #2
    1c98:	2223      	movs	r2, #35	; 0x23
    1c9a:	2100      	movs	r1, #0
    1c9c:	20ff      	movs	r0, #255	; 0xff
    1c9e:	f015 f819 	bl	16cd4 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1ca2:	2301      	movs	r3, #1
    1ca4:	f88d 300f 	strb.w	r3, [sp, #15]
    1ca8:	e013      	b.n	1cd2 <Platform_GetIrqPriority+0x56>
    }
    else if (u8Priority == NULL_PTR)
    1caa:	9b00      	ldr	r3, [sp, #0]
    1cac:	2b00      	cmp	r3, #0
    1cae:	d109      	bne.n	1cc4 <Platform_GetIrqPriority+0x48>
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_POINTER);
    1cb0:	2301      	movs	r3, #1
    1cb2:	2223      	movs	r2, #35	; 0x23
    1cb4:	2100      	movs	r1, #0
    1cb6:	20ff      	movs	r0, #255	; 0xff
    1cb8:	f015 f80c 	bl	16cd4 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1cbc:	2301      	movs	r3, #1
    1cbe:	f88d 300f 	strb.w	r3, [sp, #15]
    1cc2:	e006      	b.n	1cd2 <Platform_GetIrqPriority+0x56>
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1cc4:	9801      	ldr	r0, [sp, #4]
    1cc6:	f7ff ff52 	bl	1b6e <Platform_Ipw_GetIrqPriority>
    1cca:	4603      	mov	r3, r0
    1ccc:	461a      	mov	r2, r3
    1cce:	9b00      	ldr	r3, [sp, #0]
    1cd0:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1cd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1cd6:	4618      	mov	r0, r3
    1cd8:	b005      	add	sp, #20
    1cda:	f85d fb04 	ldr.w	pc, [sp], #4

00001cde <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1cde:	b500      	push	{lr}
    1ce0:	b087      	sub	sp, #28
    1ce2:	9003      	str	r0, [sp, #12]
    1ce4:	9102      	str	r1, [sp, #8]
    1ce6:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1ce8:	2300      	movs	r3, #0
    1cea:	f88d 3017 	strb.w	r3, [sp, #23]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1cee:	9b03      	ldr	r3, [sp, #12]
    1cf0:	2b7a      	cmp	r3, #122	; 0x7a
    1cf2:	dc02      	bgt.n	1cfa <Platform_InstallIrqHandler+0x1c>
    1cf4:	9b03      	ldr	r3, [sp, #12]
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	da09      	bge.n	1d0e <Platform_InstallIrqHandler+0x30>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INSTALL_HANDLER_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1cfa:	2302      	movs	r3, #2
    1cfc:	2224      	movs	r2, #36	; 0x24
    1cfe:	2100      	movs	r1, #0
    1d00:	20ff      	movs	r0, #255	; 0xff
    1d02:	f014 ffe7 	bl	16cd4 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1d06:	2301      	movs	r3, #1
    1d08:	f88d 3017 	strb.w	r3, [sp, #23]
    1d0c:	e004      	b.n	1d18 <Platform_InstallIrqHandler+0x3a>
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1d0e:	9a01      	ldr	r2, [sp, #4]
    1d10:	9902      	ldr	r1, [sp, #8]
    1d12:	9803      	ldr	r0, [sp, #12]
    1d14:	f7ff ff36 	bl	1b84 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1d18:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1d1c:	4618      	mov	r0, r3
    1d1e:	b007      	add	sp, #28
    1d20:	f85d fb04 	ldr.w	pc, [sp], #4

00001d24 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1d24:	b500      	push	{lr}
    1d26:	b085      	sub	sp, #20
    1d28:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1d2a:	2300      	movs	r3, #0
    1d2c:	9303      	str	r3, [sp, #12]
    1d2e:	e05d      	b.n	1dec <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1d30:	9b01      	ldr	r3, [sp, #4]
    1d32:	6859      	ldr	r1, [r3, #4]
    1d34:	9a03      	ldr	r2, [sp, #12]
    1d36:	4613      	mov	r3, r2
    1d38:	005b      	lsls	r3, r3, #1
    1d3a:	4413      	add	r3, r2
    1d3c:	009b      	lsls	r3, r3, #2
    1d3e:	440b      	add	r3, r1
    1d40:	681b      	ldr	r3, [r3, #0]
    1d42:	4618      	mov	r0, r3
    1d44:	f7ff fee4 	bl	1b10 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1d48:	9b01      	ldr	r3, [sp, #4]
    1d4a:	6859      	ldr	r1, [r3, #4]
    1d4c:	9a03      	ldr	r2, [sp, #12]
    1d4e:	4613      	mov	r3, r2
    1d50:	005b      	lsls	r3, r3, #1
    1d52:	4413      	add	r3, r2
    1d54:	009b      	lsls	r3, r3, #2
    1d56:	440b      	add	r3, r1
    1d58:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1d5a:	9b01      	ldr	r3, [sp, #4]
    1d5c:	6859      	ldr	r1, [r3, #4]
    1d5e:	9a03      	ldr	r2, [sp, #12]
    1d60:	4613      	mov	r3, r2
    1d62:	005b      	lsls	r3, r3, #1
    1d64:	4413      	add	r3, r2
    1d66:	009b      	lsls	r3, r3, #2
    1d68:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1d6a:	795b      	ldrb	r3, [r3, #5]
    1d6c:	4619      	mov	r1, r3
    1d6e:	f7ff feb4 	bl	1ada <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1d72:	9b01      	ldr	r3, [sp, #4]
    1d74:	6859      	ldr	r1, [r3, #4]
    1d76:	9a03      	ldr	r2, [sp, #12]
    1d78:	4613      	mov	r3, r2
    1d7a:	005b      	lsls	r3, r3, #1
    1d7c:	4413      	add	r3, r2
    1d7e:	009b      	lsls	r3, r3, #2
    1d80:	440b      	add	r3, r1
    1d82:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1d84:	9b01      	ldr	r3, [sp, #4]
    1d86:	6859      	ldr	r1, [r3, #4]
    1d88:	9a03      	ldr	r2, [sp, #12]
    1d8a:	4613      	mov	r3, r2
    1d8c:	005b      	lsls	r3, r3, #1
    1d8e:	4413      	add	r3, r2
    1d90:	009b      	lsls	r3, r3, #2
    1d92:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1d94:	689b      	ldr	r3, [r3, #8]
    1d96:	2200      	movs	r2, #0
    1d98:	4619      	mov	r1, r3
    1d9a:	f7ff fe7c 	bl	1a96 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1d9e:	9b01      	ldr	r3, [sp, #4]
    1da0:	6859      	ldr	r1, [r3, #4]
    1da2:	9a03      	ldr	r2, [sp, #12]
    1da4:	4613      	mov	r3, r2
    1da6:	005b      	lsls	r3, r3, #1
    1da8:	4413      	add	r3, r2
    1daa:	009b      	lsls	r3, r3, #2
    1dac:	440b      	add	r3, r1
    1dae:	791b      	ldrb	r3, [r3, #4]
    1db0:	2b00      	cmp	r3, #0
    1db2:	d00c      	beq.n	1dce <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1db4:	9b01      	ldr	r3, [sp, #4]
    1db6:	6859      	ldr	r1, [r3, #4]
    1db8:	9a03      	ldr	r2, [sp, #12]
    1dba:	4613      	mov	r3, r2
    1dbc:	005b      	lsls	r3, r3, #1
    1dbe:	4413      	add	r3, r2
    1dc0:	009b      	lsls	r3, r3, #2
    1dc2:	440b      	add	r3, r1
    1dc4:	681b      	ldr	r3, [r3, #0]
    1dc6:	4618      	mov	r0, r3
    1dc8:	f7ff fe73 	bl	1ab2 <IntCtrl_Ip_EnableIrq>
    1dcc:	e00b      	b.n	1de6 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1dce:	9b01      	ldr	r3, [sp, #4]
    1dd0:	6859      	ldr	r1, [r3, #4]
    1dd2:	9a03      	ldr	r2, [sp, #12]
    1dd4:	4613      	mov	r3, r2
    1dd6:	005b      	lsls	r3, r3, #1
    1dd8:	4413      	add	r3, r2
    1dda:	009b      	lsls	r3, r3, #2
    1ddc:	440b      	add	r3, r1
    1dde:	681b      	ldr	r3, [r3, #0]
    1de0:	4618      	mov	r0, r3
    1de2:	f7ff fe70 	bl	1ac6 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1de6:	9b03      	ldr	r3, [sp, #12]
    1de8:	3301      	adds	r3, #1
    1dea:	9303      	str	r3, [sp, #12]
    1dec:	9b01      	ldr	r3, [sp, #4]
    1dee:	681b      	ldr	r3, [r3, #0]
    1df0:	9a03      	ldr	r2, [sp, #12]
    1df2:	429a      	cmp	r2, r3
    1df4:	d39c      	bcc.n	1d30 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1df6:	2300      	movs	r3, #0
}
    1df8:	4618      	mov	r0, r3
    1dfa:	b005      	add	sp, #20
    1dfc:	f85d fb04 	ldr.w	pc, [sp], #4

00001e00 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1e00:	b500      	push	{lr}
    1e02:	b085      	sub	sp, #20
    1e04:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1e06:	2300      	movs	r3, #0
    1e08:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1e0c:	9b01      	ldr	r3, [sp, #4]
    1e0e:	681b      	ldr	r3, [r3, #0]
    1e10:	2b00      	cmp	r3, #0
    1e12:	d007      	beq.n	1e24 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1e14:	9b01      	ldr	r3, [sp, #4]
    1e16:	681b      	ldr	r3, [r3, #0]
    1e18:	4618      	mov	r0, r3
    1e1a:	f7ff ff83 	bl	1d24 <Platform_Ipw_InitIntCtrl>
    1e1e:	4603      	mov	r3, r0
    1e20:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1e24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e28:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1e2a:	bf00      	nop
    1e2c:	b005      	add	sp, #20
    1e2e:	f85d fb04 	ldr.w	pc, [sp], #4

00001e32 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1e32:	2300      	movs	r3, #0
}
    1e34:	4618      	mov	r0, r3
    1e36:	4770      	bx	lr

00001e38 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1e38:	b082      	sub	sp, #8
    1e3a:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1e3c:	2301      	movs	r3, #1
}
    1e3e:	4618      	mov	r0, r3
    1e40:	b002      	add	sp, #8
    1e42:	4770      	bx	lr

00001e44 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1e44:	b082      	sub	sp, #8
    1e46:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1e48:	bf00      	nop
    1e4a:	b002      	add	sp, #8
    1e4c:	4770      	bx	lr

00001e4e <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1e4e:	b082      	sub	sp, #8
    1e50:	9001      	str	r0, [sp, #4]
    return Micros;
    1e52:	9b01      	ldr	r3, [sp, #4]
}
    1e54:	4618      	mov	r0, r3
    1e56:	b002      	add	sp, #8
    1e58:	4770      	bx	lr

00001e5a <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1e5a:	b500      	push	{lr}
    1e5c:	b083      	sub	sp, #12
    1e5e:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1e60:	f000 f86c 	bl	1f3c <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1e64:	bf00      	nop
    1e66:	b003      	add	sp, #12
    1e68:	f85d fb04 	ldr.w	pc, [sp], #4

00001e6c <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1e6c:	b500      	push	{lr}
    1e6e:	b085      	sub	sp, #20
    1e70:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1e72:	2300      	movs	r3, #0
    1e74:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1e76:	9b01      	ldr	r3, [sp, #4]
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d003      	beq.n	1e84 <OsIf_GetCounter+0x18>
    1e7c:	9b01      	ldr	r3, [sp, #4]
    1e7e:	2b01      	cmp	r3, #1
    1e80:	d004      	beq.n	1e8c <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e82:	e007      	b.n	1e94 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1e84:	f7ff ffd5 	bl	1e32 <OsIf_Timer_Dummy_GetCounter>
    1e88:	9003      	str	r0, [sp, #12]
            break;
    1e8a:	e003      	b.n	1e94 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1e8c:	f000 f872 	bl	1f74 <OsIf_Timer_System_GetCounter>
    1e90:	9003      	str	r0, [sp, #12]
            break;
    1e92:	bf00      	nop
    }

    return Value;
    1e94:	9b03      	ldr	r3, [sp, #12]
}
    1e96:	4618      	mov	r0, r3
    1e98:	b005      	add	sp, #20
    1e9a:	f85d fb04 	ldr.w	pc, [sp], #4

00001e9e <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1e9e:	b500      	push	{lr}
    1ea0:	b085      	sub	sp, #20
    1ea2:	9001      	str	r0, [sp, #4]
    1ea4:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1ea6:	2300      	movs	r3, #0
    1ea8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1eaa:	9b00      	ldr	r3, [sp, #0]
    1eac:	2b00      	cmp	r3, #0
    1eae:	d003      	beq.n	1eb8 <OsIf_GetElapsed+0x1a>
    1eb0:	9b00      	ldr	r3, [sp, #0]
    1eb2:	2b01      	cmp	r3, #1
    1eb4:	d005      	beq.n	1ec2 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1eb6:	e009      	b.n	1ecc <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1eb8:	9801      	ldr	r0, [sp, #4]
    1eba:	f7ff ffbd 	bl	1e38 <OsIf_Timer_Dummy_GetElapsed>
    1ebe:	9003      	str	r0, [sp, #12]
            break;
    1ec0:	e004      	b.n	1ecc <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1ec2:	9801      	ldr	r0, [sp, #4]
    1ec4:	f000 f864 	bl	1f90 <OsIf_Timer_System_GetElapsed>
    1ec8:	9003      	str	r0, [sp, #12]
            break;
    1eca:	bf00      	nop
    }

    return Value;
    1ecc:	9b03      	ldr	r3, [sp, #12]
}
    1ece:	4618      	mov	r0, r3
    1ed0:	b005      	add	sp, #20
    1ed2:	f85d fb04 	ldr.w	pc, [sp], #4

00001ed6 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1ed6:	b500      	push	{lr}
    1ed8:	b083      	sub	sp, #12
    1eda:	9001      	str	r0, [sp, #4]
    1edc:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1ede:	9b00      	ldr	r3, [sp, #0]
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d003      	beq.n	1eec <OsIf_SetTimerFrequency+0x16>
    1ee4:	9b00      	ldr	r3, [sp, #0]
    1ee6:	2b01      	cmp	r3, #1
    1ee8:	d004      	beq.n	1ef4 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1eea:	e007      	b.n	1efc <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1eec:	9801      	ldr	r0, [sp, #4]
    1eee:	f7ff ffa9 	bl	1e44 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1ef2:	e003      	b.n	1efc <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1ef4:	9801      	ldr	r0, [sp, #4]
    1ef6:	f000 f85b 	bl	1fb0 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1efa:	bf00      	nop
    }
}
    1efc:	bf00      	nop
    1efe:	b003      	add	sp, #12
    1f00:	f85d fb04 	ldr.w	pc, [sp], #4

00001f04 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1f04:	b500      	push	{lr}
    1f06:	b085      	sub	sp, #20
    1f08:	9001      	str	r0, [sp, #4]
    1f0a:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1f0c:	2300      	movs	r3, #0
    1f0e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1f10:	9b00      	ldr	r3, [sp, #0]
    1f12:	2b00      	cmp	r3, #0
    1f14:	d003      	beq.n	1f1e <OsIf_MicrosToTicks+0x1a>
    1f16:	9b00      	ldr	r3, [sp, #0]
    1f18:	2b01      	cmp	r3, #1
    1f1a:	d005      	beq.n	1f28 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1f1c:	e009      	b.n	1f32 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1f1e:	9801      	ldr	r0, [sp, #4]
    1f20:	f7ff ff95 	bl	1e4e <OsIf_Timer_Dummy_MicrosToTicks>
    1f24:	9003      	str	r0, [sp, #12]
            break;
    1f26:	e004      	b.n	1f32 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1f28:	9801      	ldr	r0, [sp, #4]
    1f2a:	f000 f84f 	bl	1fcc <OsIf_Timer_System_MicrosToTicks>
    1f2e:	9003      	str	r0, [sp, #12]
            break;
    1f30:	bf00      	nop
    }

    return Value;
    1f32:	9b03      	ldr	r3, [sp, #12]
}
    1f34:	4618      	mov	r0, r3
    1f36:	b005      	add	sp, #20
    1f38:	f85d fb04 	ldr.w	pc, [sp], #4

00001f3c <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1f3c:	b500      	push	{lr}
    1f3e:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1f40:	2300      	movs	r3, #0
    1f42:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1f44:	4a09      	ldr	r2, [pc, #36]	; (1f6c <OsIf_Timer_System_Init+0x30>)
    1f46:	9b01      	ldr	r3, [sp, #4]
    1f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1f4c:	685a      	ldr	r2, [r3, #4]
    1f4e:	4908      	ldr	r1, [pc, #32]	; (1f70 <OsIf_Timer_System_Init+0x34>)
    1f50:	9b01      	ldr	r3, [sp, #4]
    1f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1f56:	4a06      	ldr	r2, [pc, #24]	; (1f70 <OsIf_Timer_System_Init+0x34>)
    1f58:	9b01      	ldr	r3, [sp, #4]
    1f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1f5e:	4618      	mov	r0, r3
    1f60:	f000 f868 	bl	2034 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1f64:	bf00      	nop
    1f66:	b003      	add	sp, #12
    1f68:	f85d fb04 	ldr.w	pc, [sp], #4
    1f6c:	00019218 	.word	0x00019218
    1f70:	1fff8b34 	.word	0x1fff8b34

00001f74 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1f74:	b500      	push	{lr}
    1f76:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1f78:	2300      	movs	r3, #0
    1f7a:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1f7c:	2300      	movs	r3, #0
    1f7e:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1f80:	f000 f86c 	bl	205c <OsIf_Timer_System_Internal_GetCounter>
    1f84:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1f86:	9b01      	ldr	r3, [sp, #4]
}
    1f88:	4618      	mov	r0, r3
    1f8a:	b003      	add	sp, #12
    1f8c:	f85d fb04 	ldr.w	pc, [sp], #4

00001f90 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1f90:	b500      	push	{lr}
    1f92:	b085      	sub	sp, #20
    1f94:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1f96:	2300      	movs	r3, #0
    1f98:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1f9a:	2300      	movs	r3, #0
    1f9c:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1f9e:	9801      	ldr	r0, [sp, #4]
    1fa0:	f000 f864 	bl	206c <OsIf_Timer_System_Internal_GetElapsed>
    1fa4:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1fa6:	9b03      	ldr	r3, [sp, #12]
}
    1fa8:	4618      	mov	r0, r3
    1faa:	b005      	add	sp, #20
    1fac:	f85d fb04 	ldr.w	pc, [sp], #4

00001fb0 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1fb0:	b084      	sub	sp, #16
    1fb2:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1fb4:	2300      	movs	r3, #0
    1fb6:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1fb8:	4903      	ldr	r1, [pc, #12]	; (1fc8 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1fba:	9b03      	ldr	r3, [sp, #12]
    1fbc:	9a01      	ldr	r2, [sp, #4]
    1fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1fc2:	bf00      	nop
    1fc4:	b004      	add	sp, #16
    1fc6:	4770      	bx	lr
    1fc8:	1fff8b34 	.word	0x1fff8b34

00001fcc <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fce:	b087      	sub	sp, #28
    1fd0:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1fd2:	2100      	movs	r1, #0
    1fd4:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1fd6:	2100      	movs	r1, #0
    1fd8:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1fda:	9901      	ldr	r1, [sp, #4]
    1fdc:	2000      	movs	r0, #0
    1fde:	460e      	mov	r6, r1
    1fe0:	4607      	mov	r7, r0
    1fe2:	4812      	ldr	r0, [pc, #72]	; (202c <OsIf_Timer_System_MicrosToTicks+0x60>)
    1fe4:	9904      	ldr	r1, [sp, #16]
    1fe6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1fea:	2000      	movs	r0, #0
    1fec:	460c      	mov	r4, r1
    1fee:	4605      	mov	r5, r0
    1ff0:	fb04 f007 	mul.w	r0, r4, r7
    1ff4:	fb06 f105 	mul.w	r1, r6, r5
    1ff8:	4401      	add	r1, r0
    1ffa:	fba6 2304 	umull	r2, r3, r6, r4
    1ffe:	4419      	add	r1, r3
    2000:	460b      	mov	r3, r1
    2002:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2006:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    200a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    200e:	4a08      	ldr	r2, [pc, #32]	; (2030 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2010:	f04f 0300 	mov.w	r3, #0
    2014:	f7fe fac6 	bl	5a4 <__aeabi_uldivmod>
    2018:	4602      	mov	r2, r0
    201a:	460b      	mov	r3, r1
    201c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    2020:	9b02      	ldr	r3, [sp, #8]
    2022:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2024:	9b05      	ldr	r3, [sp, #20]
}
    2026:	4618      	mov	r0, r3
    2028:	b007      	add	sp, #28
    202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    202c:	1fff8b34 	.word	0x1fff8b34
    2030:	000f4240 	.word	0x000f4240

00002034 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    2034:	b082      	sub	sp, #8
    2036:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    2038:	4b07      	ldr	r3, [pc, #28]	; (2058 <OsIf_Timer_System_Internal_Init+0x24>)
    203a:	2200      	movs	r2, #0
    203c:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    203e:	4b06      	ldr	r3, [pc, #24]	; (2058 <OsIf_Timer_System_Internal_Init+0x24>)
    2040:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2044:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    2046:	4b04      	ldr	r3, [pc, #16]	; (2058 <OsIf_Timer_System_Internal_Init+0x24>)
    2048:	2200      	movs	r2, #0
    204a:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    204c:	4b02      	ldr	r3, [pc, #8]	; (2058 <OsIf_Timer_System_Internal_Init+0x24>)
    204e:	2205      	movs	r2, #5
    2050:	601a      	str	r2, [r3, #0]
}
    2052:	bf00      	nop
    2054:	b002      	add	sp, #8
    2056:	4770      	bx	lr
    2058:	e000e010 	.word	0xe000e010

0000205c <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    205c:	4b02      	ldr	r3, [pc, #8]	; (2068 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    205e:	689b      	ldr	r3, [r3, #8]
    2060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    2064:	4618      	mov	r0, r3
    2066:	4770      	bx	lr
    2068:	e000e010 	.word	0xe000e010

0000206c <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    206c:	b084      	sub	sp, #16
    206e:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    2070:	4b10      	ldr	r3, [pc, #64]	; (20b4 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    2072:	689b      	ldr	r3, [r3, #8]
    2074:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2078:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    207a:	2300      	movs	r3, #0
    207c:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    207e:	9b01      	ldr	r3, [sp, #4]
    2080:	681b      	ldr	r3, [r3, #0]
    2082:	9a02      	ldr	r2, [sp, #8]
    2084:	429a      	cmp	r2, r3
    2086:	d909      	bls.n	209c <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    2088:	9b01      	ldr	r3, [sp, #4]
    208a:	681a      	ldr	r2, [r3, #0]
    208c:	9b02      	ldr	r3, [sp, #8]
    208e:	1ad3      	subs	r3, r2, r3
    2090:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2094:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    2098:	9303      	str	r3, [sp, #12]
    209a:	e004      	b.n	20a6 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    209c:	9b01      	ldr	r3, [sp, #4]
    209e:	681a      	ldr	r2, [r3, #0]
    20a0:	9b02      	ldr	r3, [sp, #8]
    20a2:	1ad3      	subs	r3, r2, r3
    20a4:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    20a6:	9b01      	ldr	r3, [sp, #4]
    20a8:	9a02      	ldr	r2, [sp, #8]
    20aa:	601a      	str	r2, [r3, #0]

    return dif;
    20ac:	9b03      	ldr	r3, [sp, #12]
}
    20ae:	4618      	mov	r0, r3
    20b0:	b004      	add	sp, #16
    20b2:	4770      	bx	lr
    20b4:	e000e010 	.word	0xe000e010

000020b8 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    20b8:	b082      	sub	sp, #8
    20ba:	9001      	str	r0, [sp, #4]
    20bc:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    20be:	bf00      	nop
    20c0:	b002      	add	sp, #8
    20c2:	4770      	bx	lr

000020c4 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    20c4:	b500      	push	{lr}
    20c6:	b085      	sub	sp, #20
    20c8:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    20ca:	4b24      	ldr	r3, [pc, #144]	; (215c <Clock_Ip_UpdateDriverContext+0x98>)
    20cc:	2201      	movs	r2, #1
    20ce:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    20d0:	4b23      	ldr	r3, [pc, #140]	; (2160 <Clock_Ip_UpdateDriverContext+0x9c>)
    20d2:	681b      	ldr	r3, [r3, #0]
    20d4:	2102      	movs	r1, #2
    20d6:	4618      	mov	r0, r3
    20d8:	f003 fc32 	bl	5940 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    20dc:	2300      	movs	r3, #0
    20de:	f88d 300f 	strb.w	r3, [sp, #15]
    20e2:	e015      	b.n	2110 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    20e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    20e8:	9a01      	ldr	r2, [sp, #4]
    20ea:	334a      	adds	r3, #74	; 0x4a
    20ec:	00db      	lsls	r3, r3, #3
    20ee:	4413      	add	r3, r2
    20f0:	6858      	ldr	r0, [r3, #4]
    20f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    20f6:	9a01      	ldr	r2, [sp, #4]
    20f8:	334a      	adds	r3, #74	; 0x4a
    20fa:	00db      	lsls	r3, r3, #3
    20fc:	4413      	add	r3, r2
    20fe:	689b      	ldr	r3, [r3, #8]
    2100:	4619      	mov	r1, r3
    2102:	f001 fadc 	bl	36be <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2106:	f89d 300f 	ldrb.w	r3, [sp, #15]
    210a:	3301      	adds	r3, #1
    210c:	f88d 300f 	strb.w	r3, [sp, #15]
    2110:	9b01      	ldr	r3, [sp, #4]
    2112:	7bdb      	ldrb	r3, [r3, #15]
    2114:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2118:	429a      	cmp	r2, r3
    211a:	d3e3      	bcc.n	20e4 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    211c:	f000 f824 	bl	2168 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2120:	2301      	movs	r3, #1
    2122:	f88d 300f 	strb.w	r3, [sp, #15]
    2126:	e00e      	b.n	2146 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2128:	f89d 200f 	ldrb.w	r2, [sp, #15]
    212c:	9b01      	ldr	r3, [sp, #4]
    212e:	327e      	adds	r2, #126	; 0x7e
    2130:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2134:	490b      	ldr	r1, [pc, #44]	; (2164 <Clock_Ip_UpdateDriverContext+0xa0>)
    2136:	f89d 200f 	ldrb.w	r2, [sp, #15]
    213a:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    213c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2140:	3301      	adds	r3, #1
    2142:	f88d 300f 	strb.w	r3, [sp, #15]
    2146:	9b01      	ldr	r3, [sp, #4]
    2148:	7cdb      	ldrb	r3, [r3, #19]
    214a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    214e:	429a      	cmp	r2, r3
    2150:	d3ea      	bcc.n	2128 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2152:	bf00      	nop
    2154:	bf00      	nop
    2156:	b005      	add	sp, #20
    2158:	f85d fb04 	ldr.w	pc, [sp], #4
    215c:	1fff8b10 	.word	0x1fff8b10
    2160:	1fff8b38 	.word	0x1fff8b38
    2164:	1fff8b44 	.word	0x1fff8b44

00002168 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    2168:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    216a:	4b23      	ldr	r3, [pc, #140]	; (21f8 <Clock_Ip_CallEmptyCallbacks+0x90>)
    216c:	781b      	ldrb	r3, [r3, #0]
    216e:	f083 0301 	eor.w	r3, r3, #1
    2172:	b2db      	uxtb	r3, r3
    2174:	2b00      	cmp	r3, #0
    2176:	d03d      	beq.n	21f4 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2178:	4b1f      	ldr	r3, [pc, #124]	; (21f8 <Clock_Ip_CallEmptyCallbacks+0x90>)
    217a:	2201      	movs	r2, #1
    217c:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    217e:	4b1f      	ldr	r3, [pc, #124]	; (21fc <Clock_Ip_CallEmptyCallbacks+0x94>)
    2180:	685b      	ldr	r3, [r3, #4]
    2182:	2100      	movs	r1, #0
    2184:	2000      	movs	r0, #0
    2186:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2188:	4b1c      	ldr	r3, [pc, #112]	; (21fc <Clock_Ip_CallEmptyCallbacks+0x94>)
    218a:	689b      	ldr	r3, [r3, #8]
    218c:	2057      	movs	r0, #87	; 0x57
    218e:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2190:	4b1b      	ldr	r3, [pc, #108]	; (2200 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2192:	681b      	ldr	r3, [r3, #0]
    2194:	2000      	movs	r0, #0
    2196:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2198:	4b1a      	ldr	r3, [pc, #104]	; (2204 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    219a:	681b      	ldr	r3, [r3, #0]
    219c:	2000      	movs	r0, #0
    219e:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    21a0:	4b19      	ldr	r3, [pc, #100]	; (2208 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    21a2:	681b      	ldr	r3, [r3, #0]
    21a4:	2000      	movs	r0, #0
    21a6:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    21a8:	4b18      	ldr	r3, [pc, #96]	; (220c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    21aa:	685b      	ldr	r3, [r3, #4]
    21ac:	2000      	movs	r0, #0
    21ae:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    21b0:	4b16      	ldr	r3, [pc, #88]	; (220c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    21b2:	689b      	ldr	r3, [r3, #8]
    21b4:	2057      	movs	r0, #87	; 0x57
    21b6:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    21b8:	4b15      	ldr	r3, [pc, #84]	; (2210 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	2000      	movs	r0, #0
    21be:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    21c0:	4b13      	ldr	r3, [pc, #76]	; (2210 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    21c2:	685b      	ldr	r3, [r3, #4]
    21c4:	2100      	movs	r1, #0
    21c6:	2057      	movs	r0, #87	; 0x57
    21c8:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    21ca:	4b12      	ldr	r3, [pc, #72]	; (2214 <Clock_Ip_CallEmptyCallbacks+0xac>)
    21cc:	681b      	ldr	r3, [r3, #0]
    21ce:	2000      	movs	r0, #0
    21d0:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    21d2:	4b11      	ldr	r3, [pc, #68]	; (2218 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    21d4:	685b      	ldr	r3, [r3, #4]
    21d6:	2000      	movs	r0, #0
    21d8:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    21da:	4b0f      	ldr	r3, [pc, #60]	; (2218 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    21dc:	689b      	ldr	r3, [r3, #8]
    21de:	2057      	movs	r0, #87	; 0x57
    21e0:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    21e2:	4b0e      	ldr	r3, [pc, #56]	; (221c <Clock_Ip_CallEmptyCallbacks+0xb4>)
    21e4:	685b      	ldr	r3, [r3, #4]
    21e6:	2000      	movs	r0, #0
    21e8:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    21ea:	4b0d      	ldr	r3, [pc, #52]	; (2220 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    21ec:	681b      	ldr	r3, [r3, #0]
    21ee:	2100      	movs	r1, #0
    21f0:	2000      	movs	r0, #0
    21f2:	4798      	blx	r3
    }
}
    21f4:	bf00      	nop
    21f6:	bd08      	pop	{r3, pc}
    21f8:	1fff8b3c 	.word	0x1fff8b3c
    21fc:	00018474 	.word	0x00018474
    2200:	00018388 	.word	0x00018388
    2204:	000183c4 	.word	0x000183c4
    2208:	000183cc 	.word	0x000183cc
    220c:	000183f4 	.word	0x000183f4
    2210:	00018400 	.word	0x00018400
    2214:	00018438 	.word	0x00018438
    2218:	00018484 	.word	0x00018484
    221c:	000184b0 	.word	0x000184b0
    2220:	000184ac 	.word	0x000184ac

00002224 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2224:	b500      	push	{lr}
    2226:	b085      	sub	sp, #20
    2228:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    222a:	9b01      	ldr	r3, [sp, #4]
    222c:	7adb      	ldrb	r3, [r3, #11]
    222e:	9303      	str	r3, [sp, #12]
    2230:	e01f      	b.n	2272 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2232:	9b03      	ldr	r3, [sp, #12]
    2234:	1e5a      	subs	r2, r3, #1
    2236:	9b01      	ldr	r3, [sp, #4]
    2238:	320d      	adds	r2, #13
    223a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    223e:	495a      	ldr	r1, [pc, #360]	; (23a8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2240:	4613      	mov	r3, r2
    2242:	00db      	lsls	r3, r3, #3
    2244:	4413      	add	r3, r2
    2246:	440b      	add	r3, r1
    2248:	3301      	adds	r3, #1
    224a:	781b      	ldrb	r3, [r3, #0]
    224c:	461a      	mov	r2, r3
    224e:	4b57      	ldr	r3, [pc, #348]	; (23ac <Clock_Ip_ResetClockConfiguration+0x188>)
    2250:	5c9b      	ldrb	r3, [r3, r2]
    2252:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2254:	4a56      	ldr	r2, [pc, #344]	; (23b0 <Clock_Ip_ResetClockConfiguration+0x18c>)
    2256:	9b02      	ldr	r3, [sp, #8]
    2258:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    225c:	9a03      	ldr	r2, [sp, #12]
    225e:	3a01      	subs	r2, #1
    2260:	320d      	adds	r2, #13
    2262:	00d2      	lsls	r2, r2, #3
    2264:	9901      	ldr	r1, [sp, #4]
    2266:	440a      	add	r2, r1
    2268:	4610      	mov	r0, r2
    226a:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    226c:	9b03      	ldr	r3, [sp, #12]
    226e:	3b01      	subs	r3, #1
    2270:	9303      	str	r3, [sp, #12]
    2272:	9b03      	ldr	r3, [sp, #12]
    2274:	2b00      	cmp	r3, #0
    2276:	d1dc      	bne.n	2232 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2278:	9b01      	ldr	r3, [sp, #4]
    227a:	7b9b      	ldrb	r3, [r3, #14]
    227c:	9303      	str	r3, [sp, #12]
    227e:	e026      	b.n	22ce <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2280:	9b03      	ldr	r3, [sp, #12]
    2282:	3b01      	subs	r3, #1
    2284:	9a01      	ldr	r2, [sp, #4]
    2286:	3324      	adds	r3, #36	; 0x24
    2288:	011b      	lsls	r3, r3, #4
    228a:	4413      	add	r3, r2
    228c:	3304      	adds	r3, #4
    228e:	681a      	ldr	r2, [r3, #0]
    2290:	4945      	ldr	r1, [pc, #276]	; (23a8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2292:	4613      	mov	r3, r2
    2294:	00db      	lsls	r3, r3, #3
    2296:	4413      	add	r3, r2
    2298:	440b      	add	r3, r1
    229a:	3301      	adds	r3, #1
    229c:	781b      	ldrb	r3, [r3, #0]
    229e:	461a      	mov	r2, r3
    22a0:	4b44      	ldr	r3, [pc, #272]	; (23b4 <Clock_Ip_ResetClockConfiguration+0x190>)
    22a2:	5c9b      	ldrb	r3, [r3, r2]
    22a4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    22a6:	4944      	ldr	r1, [pc, #272]	; (23b8 <Clock_Ip_ResetClockConfiguration+0x194>)
    22a8:	9a02      	ldr	r2, [sp, #8]
    22aa:	4613      	mov	r3, r2
    22ac:	005b      	lsls	r3, r3, #1
    22ae:	4413      	add	r3, r2
    22b0:	009b      	lsls	r3, r3, #2
    22b2:	440b      	add	r3, r1
    22b4:	681b      	ldr	r3, [r3, #0]
    22b6:	9a03      	ldr	r2, [sp, #12]
    22b8:	3a01      	subs	r2, #1
    22ba:	3224      	adds	r2, #36	; 0x24
    22bc:	0112      	lsls	r2, r2, #4
    22be:	9901      	ldr	r1, [sp, #4]
    22c0:	440a      	add	r2, r1
    22c2:	3204      	adds	r2, #4
    22c4:	4610      	mov	r0, r2
    22c6:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    22c8:	9b03      	ldr	r3, [sp, #12]
    22ca:	3b01      	subs	r3, #1
    22cc:	9303      	str	r3, [sp, #12]
    22ce:	9b03      	ldr	r3, [sp, #12]
    22d0:	2b00      	cmp	r3, #0
    22d2:	d1d5      	bne.n	2280 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    22d4:	9b01      	ldr	r3, [sp, #4]
    22d6:	7a9b      	ldrb	r3, [r3, #10]
    22d8:	9303      	str	r3, [sp, #12]
    22da:	e02a      	b.n	2332 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    22dc:	9b03      	ldr	r3, [sp, #12]
    22de:	1e5a      	subs	r2, r3, #1
    22e0:	9901      	ldr	r1, [sp, #4]
    22e2:	4613      	mov	r3, r2
    22e4:	009b      	lsls	r3, r3, #2
    22e6:	4413      	add	r3, r2
    22e8:	00db      	lsls	r3, r3, #3
    22ea:	440b      	add	r3, r1
    22ec:	3340      	adds	r3, #64	; 0x40
    22ee:	681a      	ldr	r2, [r3, #0]
    22f0:	492d      	ldr	r1, [pc, #180]	; (23a8 <Clock_Ip_ResetClockConfiguration+0x184>)
    22f2:	4613      	mov	r3, r2
    22f4:	00db      	lsls	r3, r3, #3
    22f6:	4413      	add	r3, r2
    22f8:	440b      	add	r3, r1
    22fa:	3301      	adds	r3, #1
    22fc:	781b      	ldrb	r3, [r3, #0]
    22fe:	461a      	mov	r2, r3
    2300:	4b2e      	ldr	r3, [pc, #184]	; (23bc <Clock_Ip_ResetClockConfiguration+0x198>)
    2302:	5c9b      	ldrb	r3, [r3, r2]
    2304:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2306:	492e      	ldr	r1, [pc, #184]	; (23c0 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2308:	9a02      	ldr	r2, [sp, #8]
    230a:	4613      	mov	r3, r2
    230c:	009b      	lsls	r3, r3, #2
    230e:	4413      	add	r3, r2
    2310:	009b      	lsls	r3, r3, #2
    2312:	440b      	add	r3, r1
    2314:	6819      	ldr	r1, [r3, #0]
    2316:	9b03      	ldr	r3, [sp, #12]
    2318:	1e5a      	subs	r2, r3, #1
    231a:	4613      	mov	r3, r2
    231c:	009b      	lsls	r3, r3, #2
    231e:	4413      	add	r3, r2
    2320:	00db      	lsls	r3, r3, #3
    2322:	3340      	adds	r3, #64	; 0x40
    2324:	9a01      	ldr	r2, [sp, #4]
    2326:	4413      	add	r3, r2
    2328:	4618      	mov	r0, r3
    232a:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    232c:	9b03      	ldr	r3, [sp, #12]
    232e:	3b01      	subs	r3, #1
    2330:	9303      	str	r3, [sp, #12]
    2332:	9b03      	ldr	r3, [sp, #12]
    2334:	2b00      	cmp	r3, #0
    2336:	d1d1      	bne.n	22dc <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2338:	9b01      	ldr	r3, [sp, #4]
    233a:	7a5b      	ldrb	r3, [r3, #9]
    233c:	9303      	str	r3, [sp, #12]
    233e:	e02b      	b.n	2398 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2340:	9b03      	ldr	r3, [sp, #12]
    2342:	1e5a      	subs	r2, r3, #1
    2344:	9901      	ldr	r1, [sp, #4]
    2346:	4613      	mov	r3, r2
    2348:	009b      	lsls	r3, r3, #2
    234a:	4413      	add	r3, r2
    234c:	009b      	lsls	r3, r3, #2
    234e:	440b      	add	r3, r1
    2350:	332c      	adds	r3, #44	; 0x2c
    2352:	681a      	ldr	r2, [r3, #0]
    2354:	4914      	ldr	r1, [pc, #80]	; (23a8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2356:	4613      	mov	r3, r2
    2358:	00db      	lsls	r3, r3, #3
    235a:	4413      	add	r3, r2
    235c:	440b      	add	r3, r1
    235e:	3301      	adds	r3, #1
    2360:	781b      	ldrb	r3, [r3, #0]
    2362:	461a      	mov	r2, r3
    2364:	4b17      	ldr	r3, [pc, #92]	; (23c4 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2366:	5c9b      	ldrb	r3, [r3, r2]
    2368:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    236a:	4917      	ldr	r1, [pc, #92]	; (23c8 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    236c:	9a02      	ldr	r2, [sp, #8]
    236e:	4613      	mov	r3, r2
    2370:	009b      	lsls	r3, r3, #2
    2372:	4413      	add	r3, r2
    2374:	009b      	lsls	r3, r3, #2
    2376:	440b      	add	r3, r1
    2378:	6819      	ldr	r1, [r3, #0]
    237a:	9b03      	ldr	r3, [sp, #12]
    237c:	1e5a      	subs	r2, r3, #1
    237e:	4613      	mov	r3, r2
    2380:	009b      	lsls	r3, r3, #2
    2382:	4413      	add	r3, r2
    2384:	009b      	lsls	r3, r3, #2
    2386:	3328      	adds	r3, #40	; 0x28
    2388:	9a01      	ldr	r2, [sp, #4]
    238a:	4413      	add	r3, r2
    238c:	3304      	adds	r3, #4
    238e:	4618      	mov	r0, r3
    2390:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2392:	9b03      	ldr	r3, [sp, #12]
    2394:	3b01      	subs	r3, #1
    2396:	9303      	str	r3, [sp, #12]
    2398:	9b03      	ldr	r3, [sp, #12]
    239a:	2b00      	cmp	r3, #0
    239c:	d1d0      	bne.n	2340 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    239e:	bf00      	nop
    23a0:	bf00      	nop
    23a2:	b005      	add	sp, #20
    23a4:	f85d fb04 	ldr.w	pc, [sp], #4
    23a8:	00017e78 	.word	0x00017e78
    23ac:	00017e48 	.word	0x00017e48
    23b0:	000184b0 	.word	0x000184b0
    23b4:	00017e28 	.word	0x00017e28
    23b8:	000183f4 	.word	0x000183f4
    23bc:	00017e38 	.word	0x00017e38
    23c0:	00018484 	.word	0x00018484
    23c4:	00017df8 	.word	0x00017df8
    23c8:	000183cc 	.word	0x000183cc

000023cc <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    23cc:	b500      	push	{lr}
    23ce:	b085      	sub	sp, #20
    23d0:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    23d2:	2301      	movs	r3, #1
    23d4:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    23d6:	9801      	ldr	r0, [sp, #4]
    23d8:	f000 f818 	bl	240c <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    23dc:	4b0a      	ldr	r3, [pc, #40]	; (2408 <Clock_Ip_Init+0x3c>)
    23de:	781b      	ldrb	r3, [r3, #0]
    23e0:	2b00      	cmp	r3, #0
    23e2:	d00a      	beq.n	23fa <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    23e4:	f000 fb74 	bl	2ad0 <Clock_Ip_GetPllStatus>
    23e8:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    23ea:	9b02      	ldr	r3, [sp, #8]
    23ec:	2b00      	cmp	r3, #0
    23ee:	d106      	bne.n	23fe <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    23f0:	f000 fbf2 	bl	2bd8 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    23f4:	2300      	movs	r3, #0
    23f6:	9303      	str	r3, [sp, #12]
    23f8:	e001      	b.n	23fe <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    23fa:	2300      	movs	r3, #0
    23fc:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    23fe:	9b03      	ldr	r3, [sp, #12]
}
    2400:	4618      	mov	r0, r3
    2402:	b005      	add	sp, #20
    2404:	f85d fb04 	ldr.w	pc, [sp], #4
    2408:	1fff8b40 	.word	0x1fff8b40

0000240c <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    240c:	b510      	push	{r4, lr}
    240e:	b084      	sub	sp, #16
    2410:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2412:	4a9f      	ldr	r2, [pc, #636]	; (2690 <Clock_Ip_InitClock+0x284>)
    2414:	9b01      	ldr	r3, [sp, #4]
    2416:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2418:	2101      	movs	r1, #1
    241a:	9801      	ldr	r0, [sp, #4]
    241c:	f003 fa90 	bl	5940 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2420:	4b9b      	ldr	r3, [pc, #620]	; (2690 <Clock_Ip_InitClock+0x284>)
    2422:	681b      	ldr	r3, [r3, #0]
    2424:	2b00      	cmp	r3, #0
    2426:	d030      	beq.n	248a <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2428:	2300      	movs	r3, #0
    242a:	9303      	str	r3, [sp, #12]
    242c:	e027      	b.n	247e <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    242e:	9901      	ldr	r1, [sp, #4]
    2430:	9a03      	ldr	r2, [sp, #12]
    2432:	4613      	mov	r3, r2
    2434:	009b      	lsls	r3, r3, #2
    2436:	4413      	add	r3, r2
    2438:	009b      	lsls	r3, r3, #2
    243a:	440b      	add	r3, r1
    243c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2440:	681a      	ldr	r2, [r3, #0]
    2442:	4994      	ldr	r1, [pc, #592]	; (2694 <Clock_Ip_InitClock+0x288>)
    2444:	4613      	mov	r3, r2
    2446:	00db      	lsls	r3, r3, #3
    2448:	4413      	add	r3, r2
    244a:	440b      	add	r3, r1
    244c:	3301      	adds	r3, #1
    244e:	781b      	ldrb	r3, [r3, #0]
    2450:	461a      	mov	r2, r3
    2452:	4b91      	ldr	r3, [pc, #580]	; (2698 <Clock_Ip_InitClock+0x28c>)
    2454:	5c9b      	ldrb	r3, [r3, r2]
    2456:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2458:	4a90      	ldr	r2, [pc, #576]	; (269c <Clock_Ip_InitClock+0x290>)
    245a:	9b02      	ldr	r3, [sp, #8]
    245c:	011b      	lsls	r3, r3, #4
    245e:	4413      	add	r3, r2
    2460:	6819      	ldr	r1, [r3, #0]
    2462:	9a03      	ldr	r2, [sp, #12]
    2464:	4613      	mov	r3, r2
    2466:	009b      	lsls	r3, r3, #2
    2468:	4413      	add	r3, r2
    246a:	009b      	lsls	r3, r3, #2
    246c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2470:	9a01      	ldr	r2, [sp, #4]
    2472:	4413      	add	r3, r2
    2474:	4618      	mov	r0, r3
    2476:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2478:	9b03      	ldr	r3, [sp, #12]
    247a:	3301      	adds	r3, #1
    247c:	9303      	str	r3, [sp, #12]
    247e:	9b01      	ldr	r3, [sp, #4]
    2480:	7c9b      	ldrb	r3, [r3, #18]
    2482:	461a      	mov	r2, r3
    2484:	9b03      	ldr	r3, [sp, #12]
    2486:	4293      	cmp	r3, r2
    2488:	d3d1      	bcc.n	242e <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    248a:	9801      	ldr	r0, [sp, #4]
    248c:	f7ff feca 	bl	2224 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2490:	2300      	movs	r3, #0
    2492:	9303      	str	r3, [sp, #12]
    2494:	e029      	b.n	24ea <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2496:	9901      	ldr	r1, [sp, #4]
    2498:	9a03      	ldr	r2, [sp, #12]
    249a:	4613      	mov	r3, r2
    249c:	005b      	lsls	r3, r3, #1
    249e:	4413      	add	r3, r2
    24a0:	009b      	lsls	r3, r3, #2
    24a2:	440b      	add	r3, r1
    24a4:	3314      	adds	r3, #20
    24a6:	681a      	ldr	r2, [r3, #0]
    24a8:	497a      	ldr	r1, [pc, #488]	; (2694 <Clock_Ip_InitClock+0x288>)
    24aa:	4613      	mov	r3, r2
    24ac:	00db      	lsls	r3, r3, #3
    24ae:	4413      	add	r3, r2
    24b0:	440b      	add	r3, r1
    24b2:	3301      	adds	r3, #1
    24b4:	781b      	ldrb	r3, [r3, #0]
    24b6:	461a      	mov	r2, r3
    24b8:	4b79      	ldr	r3, [pc, #484]	; (26a0 <Clock_Ip_InitClock+0x294>)
    24ba:	5c9b      	ldrb	r3, [r3, r2]
    24bc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    24be:	4979      	ldr	r1, [pc, #484]	; (26a4 <Clock_Ip_InitClock+0x298>)
    24c0:	9a02      	ldr	r2, [sp, #8]
    24c2:	4613      	mov	r3, r2
    24c4:	005b      	lsls	r3, r3, #1
    24c6:	4413      	add	r3, r2
    24c8:	009b      	lsls	r3, r3, #2
    24ca:	440b      	add	r3, r1
    24cc:	6819      	ldr	r1, [r3, #0]
    24ce:	9a03      	ldr	r2, [sp, #12]
    24d0:	4613      	mov	r3, r2
    24d2:	005b      	lsls	r3, r3, #1
    24d4:	4413      	add	r3, r2
    24d6:	009b      	lsls	r3, r3, #2
    24d8:	3310      	adds	r3, #16
    24da:	9a01      	ldr	r2, [sp, #4]
    24dc:	4413      	add	r3, r2
    24de:	3304      	adds	r3, #4
    24e0:	4618      	mov	r0, r3
    24e2:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    24e4:	9b03      	ldr	r3, [sp, #12]
    24e6:	3301      	adds	r3, #1
    24e8:	9303      	str	r3, [sp, #12]
    24ea:	9b01      	ldr	r3, [sp, #4]
    24ec:	7a1b      	ldrb	r3, [r3, #8]
    24ee:	461a      	mov	r2, r3
    24f0:	9b03      	ldr	r3, [sp, #12]
    24f2:	4293      	cmp	r3, r2
    24f4:	d3cf      	bcc.n	2496 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    24f6:	2300      	movs	r3, #0
    24f8:	9303      	str	r3, [sp, #12]
    24fa:	e02a      	b.n	2552 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    24fc:	9901      	ldr	r1, [sp, #4]
    24fe:	9a03      	ldr	r2, [sp, #12]
    2500:	4613      	mov	r3, r2
    2502:	009b      	lsls	r3, r3, #2
    2504:	4413      	add	r3, r2
    2506:	009b      	lsls	r3, r3, #2
    2508:	440b      	add	r3, r1
    250a:	332c      	adds	r3, #44	; 0x2c
    250c:	681a      	ldr	r2, [r3, #0]
    250e:	4961      	ldr	r1, [pc, #388]	; (2694 <Clock_Ip_InitClock+0x288>)
    2510:	4613      	mov	r3, r2
    2512:	00db      	lsls	r3, r3, #3
    2514:	4413      	add	r3, r2
    2516:	440b      	add	r3, r1
    2518:	3301      	adds	r3, #1
    251a:	781b      	ldrb	r3, [r3, #0]
    251c:	461a      	mov	r2, r3
    251e:	4b62      	ldr	r3, [pc, #392]	; (26a8 <Clock_Ip_InitClock+0x29c>)
    2520:	5c9b      	ldrb	r3, [r3, r2]
    2522:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2524:	4961      	ldr	r1, [pc, #388]	; (26ac <Clock_Ip_InitClock+0x2a0>)
    2526:	9a02      	ldr	r2, [sp, #8]
    2528:	4613      	mov	r3, r2
    252a:	009b      	lsls	r3, r3, #2
    252c:	4413      	add	r3, r2
    252e:	009b      	lsls	r3, r3, #2
    2530:	440b      	add	r3, r1
    2532:	3304      	adds	r3, #4
    2534:	6819      	ldr	r1, [r3, #0]
    2536:	9a03      	ldr	r2, [sp, #12]
    2538:	4613      	mov	r3, r2
    253a:	009b      	lsls	r3, r3, #2
    253c:	4413      	add	r3, r2
    253e:	009b      	lsls	r3, r3, #2
    2540:	3328      	adds	r3, #40	; 0x28
    2542:	9a01      	ldr	r2, [sp, #4]
    2544:	4413      	add	r3, r2
    2546:	3304      	adds	r3, #4
    2548:	4618      	mov	r0, r3
    254a:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    254c:	9b03      	ldr	r3, [sp, #12]
    254e:	3301      	adds	r3, #1
    2550:	9303      	str	r3, [sp, #12]
    2552:	9b01      	ldr	r3, [sp, #4]
    2554:	7a5b      	ldrb	r3, [r3, #9]
    2556:	461a      	mov	r2, r3
    2558:	9b03      	ldr	r3, [sp, #12]
    255a:	4293      	cmp	r3, r2
    255c:	d3ce      	bcc.n	24fc <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    255e:	9801      	ldr	r0, [sp, #4]
    2560:	f7ff fdb0 	bl	20c4 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2564:	2300      	movs	r3, #0
    2566:	9303      	str	r3, [sp, #12]
    2568:	e028      	b.n	25bc <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    256a:	9901      	ldr	r1, [sp, #4]
    256c:	9a03      	ldr	r2, [sp, #12]
    256e:	4613      	mov	r3, r2
    2570:	009b      	lsls	r3, r3, #2
    2572:	4413      	add	r3, r2
    2574:	009b      	lsls	r3, r3, #2
    2576:	440b      	add	r3, r1
    2578:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    257c:	681a      	ldr	r2, [r3, #0]
    257e:	4945      	ldr	r1, [pc, #276]	; (2694 <Clock_Ip_InitClock+0x288>)
    2580:	4613      	mov	r3, r2
    2582:	00db      	lsls	r3, r3, #3
    2584:	4413      	add	r3, r2
    2586:	440b      	add	r3, r1
    2588:	3301      	adds	r3, #1
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	461a      	mov	r2, r3
    258e:	4b48      	ldr	r3, [pc, #288]	; (26b0 <Clock_Ip_InitClock+0x2a4>)
    2590:	5c9b      	ldrb	r3, [r3, r2]
    2592:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2594:	4a47      	ldr	r2, [pc, #284]	; (26b4 <Clock_Ip_InitClock+0x2a8>)
    2596:	9b02      	ldr	r3, [sp, #8]
    2598:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    259c:	9a03      	ldr	r2, [sp, #12]
    259e:	4613      	mov	r3, r2
    25a0:	009b      	lsls	r3, r3, #2
    25a2:	4413      	add	r3, r2
    25a4:	009b      	lsls	r3, r3, #2
    25a6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    25aa:	9a01      	ldr	r2, [sp, #4]
    25ac:	4413      	add	r3, r2
    25ae:	3304      	adds	r3, #4
    25b0:	9903      	ldr	r1, [sp, #12]
    25b2:	4618      	mov	r0, r3
    25b4:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    25b6:	9b03      	ldr	r3, [sp, #12]
    25b8:	3301      	adds	r3, #1
    25ba:	9303      	str	r3, [sp, #12]
    25bc:	9b01      	ldr	r3, [sp, #4]
    25be:	7c5b      	ldrb	r3, [r3, #17]
    25c0:	461a      	mov	r2, r3
    25c2:	9b03      	ldr	r3, [sp, #12]
    25c4:	4293      	cmp	r3, r2
    25c6:	d3d0      	bcc.n	256a <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    25c8:	2300      	movs	r3, #0
    25ca:	9303      	str	r3, [sp, #12]
    25cc:	e026      	b.n	261c <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    25ce:	9901      	ldr	r1, [sp, #4]
    25d0:	9a03      	ldr	r2, [sp, #12]
    25d2:	4613      	mov	r3, r2
    25d4:	005b      	lsls	r3, r3, #1
    25d6:	4413      	add	r3, r2
    25d8:	009b      	lsls	r3, r3, #2
    25da:	440b      	add	r3, r1
    25dc:	f503 730e 	add.w	r3, r3, #568	; 0x238
    25e0:	681a      	ldr	r2, [r3, #0]
    25e2:	492c      	ldr	r1, [pc, #176]	; (2694 <Clock_Ip_InitClock+0x288>)
    25e4:	4613      	mov	r3, r2
    25e6:	00db      	lsls	r3, r3, #3
    25e8:	4413      	add	r3, r2
    25ea:	440b      	add	r3, r1
    25ec:	3301      	adds	r3, #1
    25ee:	781b      	ldrb	r3, [r3, #0]
    25f0:	461a      	mov	r2, r3
    25f2:	4b31      	ldr	r3, [pc, #196]	; (26b8 <Clock_Ip_InitClock+0x2ac>)
    25f4:	5c9b      	ldrb	r3, [r3, r2]
    25f6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    25f8:	4a30      	ldr	r2, [pc, #192]	; (26bc <Clock_Ip_InitClock+0x2b0>)
    25fa:	9b02      	ldr	r3, [sp, #8]
    25fc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2600:	9a03      	ldr	r2, [sp, #12]
    2602:	4613      	mov	r3, r2
    2604:	005b      	lsls	r3, r3, #1
    2606:	4413      	add	r3, r2
    2608:	009b      	lsls	r3, r3, #2
    260a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    260e:	9a01      	ldr	r2, [sp, #4]
    2610:	4413      	add	r3, r2
    2612:	4618      	mov	r0, r3
    2614:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2616:	9b03      	ldr	r3, [sp, #12]
    2618:	3301      	adds	r3, #1
    261a:	9303      	str	r3, [sp, #12]
    261c:	9b01      	ldr	r3, [sp, #4]
    261e:	7b5b      	ldrb	r3, [r3, #13]
    2620:	461a      	mov	r2, r3
    2622:	9b03      	ldr	r3, [sp, #12]
    2624:	4293      	cmp	r3, r2
    2626:	d3d2      	bcc.n	25ce <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2628:	2300      	movs	r3, #0
    262a:	9303      	str	r3, [sp, #12]
    262c:	e026      	b.n	267c <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    262e:	9901      	ldr	r1, [sp, #4]
    2630:	9a03      	ldr	r2, [sp, #12]
    2632:	4613      	mov	r3, r2
    2634:	005b      	lsls	r3, r3, #1
    2636:	4413      	add	r3, r2
    2638:	009b      	lsls	r3, r3, #2
    263a:	440b      	add	r3, r1
    263c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2640:	681a      	ldr	r2, [r3, #0]
    2642:	4914      	ldr	r1, [pc, #80]	; (2694 <Clock_Ip_InitClock+0x288>)
    2644:	4613      	mov	r3, r2
    2646:	00db      	lsls	r3, r3, #3
    2648:	4413      	add	r3, r2
    264a:	440b      	add	r3, r1
    264c:	3301      	adds	r3, #1
    264e:	781b      	ldrb	r3, [r3, #0]
    2650:	461a      	mov	r2, r3
    2652:	4b1b      	ldr	r3, [pc, #108]	; (26c0 <Clock_Ip_InitClock+0x2b4>)
    2654:	5c9b      	ldrb	r3, [r3, r2]
    2656:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2658:	4a1a      	ldr	r2, [pc, #104]	; (26c4 <Clock_Ip_InitClock+0x2b8>)
    265a:	9b02      	ldr	r3, [sp, #8]
    265c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2660:	9a03      	ldr	r2, [sp, #12]
    2662:	4613      	mov	r3, r2
    2664:	005b      	lsls	r3, r3, #1
    2666:	4413      	add	r3, r2
    2668:	009b      	lsls	r3, r3, #2
    266a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    266e:	9a01      	ldr	r2, [sp, #4]
    2670:	4413      	add	r3, r2
    2672:	4618      	mov	r0, r3
    2674:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2676:	9b03      	ldr	r3, [sp, #12]
    2678:	3301      	adds	r3, #1
    267a:	9303      	str	r3, [sp, #12]
    267c:	9b01      	ldr	r3, [sp, #4]
    267e:	7b1b      	ldrb	r3, [r3, #12]
    2680:	461a      	mov	r2, r3
    2682:	9b03      	ldr	r3, [sp, #12]
    2684:	4293      	cmp	r3, r2
    2686:	d3d2      	bcc.n	262e <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2688:	2300      	movs	r3, #0
    268a:	9303      	str	r3, [sp, #12]
    268c:	e044      	b.n	2718 <Clock_Ip_InitClock+0x30c>
    268e:	bf00      	nop
    2690:	1fff8b38 	.word	0x1fff8b38
    2694:	00017e78 	.word	0x00017e78
    2698:	00017e68 	.word	0x00017e68
    269c:	00018474 	.word	0x00018474
    26a0:	00017e08 	.word	0x00017e08
    26a4:	00018438 	.word	0x00018438
    26a8:	00017df8 	.word	0x00017df8
    26ac:	000183cc 	.word	0x000183cc
    26b0:	00017e58 	.word	0x00017e58
    26b4:	000184ac 	.word	0x000184ac
    26b8:	00017de8 	.word	0x00017de8
    26bc:	000183c4 	.word	0x000183c4
    26c0:	00017dd8 	.word	0x00017dd8
    26c4:	00018388 	.word	0x00018388
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    26c8:	9901      	ldr	r1, [sp, #4]
    26ca:	9a03      	ldr	r2, [sp, #12]
    26cc:	4613      	mov	r3, r2
    26ce:	005b      	lsls	r3, r3, #1
    26d0:	4413      	add	r3, r2
    26d2:	009b      	lsls	r3, r3, #2
    26d4:	440b      	add	r3, r1
    26d6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    26da:	681a      	ldr	r2, [r3, #0]
    26dc:	49ac      	ldr	r1, [pc, #688]	; (2990 <Clock_Ip_InitClock+0x584>)
    26de:	4613      	mov	r3, r2
    26e0:	00db      	lsls	r3, r3, #3
    26e2:	4413      	add	r3, r2
    26e4:	440b      	add	r3, r1
    26e6:	3301      	adds	r3, #1
    26e8:	781b      	ldrb	r3, [r3, #0]
    26ea:	461a      	mov	r2, r3
    26ec:	4ba9      	ldr	r3, [pc, #676]	; (2994 <Clock_Ip_InitClock+0x588>)
    26ee:	5c9b      	ldrb	r3, [r3, r2]
    26f0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    26f2:	4aa9      	ldr	r2, [pc, #676]	; (2998 <Clock_Ip_InitClock+0x58c>)
    26f4:	9b02      	ldr	r3, [sp, #8]
    26f6:	00db      	lsls	r3, r3, #3
    26f8:	4413      	add	r3, r2
    26fa:	6859      	ldr	r1, [r3, #4]
    26fc:	9a03      	ldr	r2, [sp, #12]
    26fe:	4613      	mov	r3, r2
    2700:	005b      	lsls	r3, r3, #1
    2702:	4413      	add	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	f503 730e 	add.w	r3, r3, #568	; 0x238
    270a:	9a01      	ldr	r2, [sp, #4]
    270c:	4413      	add	r3, r2
    270e:	4618      	mov	r0, r3
    2710:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2712:	9b03      	ldr	r3, [sp, #12]
    2714:	3301      	adds	r3, #1
    2716:	9303      	str	r3, [sp, #12]
    2718:	9b01      	ldr	r3, [sp, #4]
    271a:	7b5b      	ldrb	r3, [r3, #13]
    271c:	461a      	mov	r2, r3
    271e:	9b03      	ldr	r3, [sp, #12]
    2720:	4293      	cmp	r3, r2
    2722:	d3d1      	bcc.n	26c8 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2724:	2300      	movs	r3, #0
    2726:	9303      	str	r3, [sp, #12]
    2728:	e029      	b.n	277e <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    272a:	9901      	ldr	r1, [sp, #4]
    272c:	9a03      	ldr	r2, [sp, #12]
    272e:	4613      	mov	r3, r2
    2730:	009b      	lsls	r3, r3, #2
    2732:	4413      	add	r3, r2
    2734:	00db      	lsls	r3, r3, #3
    2736:	440b      	add	r3, r1
    2738:	3340      	adds	r3, #64	; 0x40
    273a:	681a      	ldr	r2, [r3, #0]
    273c:	4994      	ldr	r1, [pc, #592]	; (2990 <Clock_Ip_InitClock+0x584>)
    273e:	4613      	mov	r3, r2
    2740:	00db      	lsls	r3, r3, #3
    2742:	4413      	add	r3, r2
    2744:	440b      	add	r3, r1
    2746:	3301      	adds	r3, #1
    2748:	781b      	ldrb	r3, [r3, #0]
    274a:	461a      	mov	r2, r3
    274c:	4b93      	ldr	r3, [pc, #588]	; (299c <Clock_Ip_InitClock+0x590>)
    274e:	5c9b      	ldrb	r3, [r3, r2]
    2750:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2752:	4993      	ldr	r1, [pc, #588]	; (29a0 <Clock_Ip_InitClock+0x594>)
    2754:	9a02      	ldr	r2, [sp, #8]
    2756:	4613      	mov	r3, r2
    2758:	009b      	lsls	r3, r3, #2
    275a:	4413      	add	r3, r2
    275c:	009b      	lsls	r3, r3, #2
    275e:	440b      	add	r3, r1
    2760:	3304      	adds	r3, #4
    2762:	6819      	ldr	r1, [r3, #0]
    2764:	9a03      	ldr	r2, [sp, #12]
    2766:	4613      	mov	r3, r2
    2768:	009b      	lsls	r3, r3, #2
    276a:	4413      	add	r3, r2
    276c:	00db      	lsls	r3, r3, #3
    276e:	3340      	adds	r3, #64	; 0x40
    2770:	9a01      	ldr	r2, [sp, #4]
    2772:	4413      	add	r3, r2
    2774:	4618      	mov	r0, r3
    2776:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2778:	9b03      	ldr	r3, [sp, #12]
    277a:	3301      	adds	r3, #1
    277c:	9303      	str	r3, [sp, #12]
    277e:	9b01      	ldr	r3, [sp, #4]
    2780:	7a9b      	ldrb	r3, [r3, #10]
    2782:	461a      	mov	r2, r3
    2784:	9b03      	ldr	r3, [sp, #12]
    2786:	4293      	cmp	r3, r2
    2788:	d3cf      	bcc.n	272a <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    278a:	2300      	movs	r3, #0
    278c:	9303      	str	r3, [sp, #12]
    278e:	e029      	b.n	27e4 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2790:	9901      	ldr	r1, [sp, #4]
    2792:	9a03      	ldr	r2, [sp, #12]
    2794:	4613      	mov	r3, r2
    2796:	009b      	lsls	r3, r3, #2
    2798:	4413      	add	r3, r2
    279a:	009b      	lsls	r3, r3, #2
    279c:	440b      	add	r3, r1
    279e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27a2:	681a      	ldr	r2, [r3, #0]
    27a4:	497a      	ldr	r1, [pc, #488]	; (2990 <Clock_Ip_InitClock+0x584>)
    27a6:	4613      	mov	r3, r2
    27a8:	00db      	lsls	r3, r3, #3
    27aa:	4413      	add	r3, r2
    27ac:	440b      	add	r3, r1
    27ae:	3301      	adds	r3, #1
    27b0:	781b      	ldrb	r3, [r3, #0]
    27b2:	461a      	mov	r2, r3
    27b4:	4b7b      	ldr	r3, [pc, #492]	; (29a4 <Clock_Ip_InitClock+0x598>)
    27b6:	5c9b      	ldrb	r3, [r3, r2]
    27b8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    27ba:	4a7b      	ldr	r2, [pc, #492]	; (29a8 <Clock_Ip_InitClock+0x59c>)
    27bc:	9b02      	ldr	r3, [sp, #8]
    27be:	011b      	lsls	r3, r3, #4
    27c0:	4413      	add	r3, r2
    27c2:	3304      	adds	r3, #4
    27c4:	681c      	ldr	r4, [r3, #0]
    27c6:	9a03      	ldr	r2, [sp, #12]
    27c8:	4613      	mov	r3, r2
    27ca:	009b      	lsls	r3, r3, #2
    27cc:	4413      	add	r3, r2
    27ce:	009b      	lsls	r3, r3, #2
    27d0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27d4:	9a01      	ldr	r2, [sp, #4]
    27d6:	4413      	add	r3, r2
    27d8:	9903      	ldr	r1, [sp, #12]
    27da:	4618      	mov	r0, r3
    27dc:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    27de:	9b03      	ldr	r3, [sp, #12]
    27e0:	3301      	adds	r3, #1
    27e2:	9303      	str	r3, [sp, #12]
    27e4:	9b01      	ldr	r3, [sp, #4]
    27e6:	7c9b      	ldrb	r3, [r3, #18]
    27e8:	461a      	mov	r2, r3
    27ea:	9b03      	ldr	r3, [sp, #12]
    27ec:	4293      	cmp	r3, r2
    27ee:	d3cf      	bcc.n	2790 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    27f0:	2300      	movs	r3, #0
    27f2:	9303      	str	r3, [sp, #12]
    27f4:	e02a      	b.n	284c <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    27f6:	9901      	ldr	r1, [sp, #4]
    27f8:	9a03      	ldr	r2, [sp, #12]
    27fa:	4613      	mov	r3, r2
    27fc:	009b      	lsls	r3, r3, #2
    27fe:	4413      	add	r3, r2
    2800:	009b      	lsls	r3, r3, #2
    2802:	440b      	add	r3, r1
    2804:	332c      	adds	r3, #44	; 0x2c
    2806:	681a      	ldr	r2, [r3, #0]
    2808:	4961      	ldr	r1, [pc, #388]	; (2990 <Clock_Ip_InitClock+0x584>)
    280a:	4613      	mov	r3, r2
    280c:	00db      	lsls	r3, r3, #3
    280e:	4413      	add	r3, r2
    2810:	440b      	add	r3, r1
    2812:	3301      	adds	r3, #1
    2814:	781b      	ldrb	r3, [r3, #0]
    2816:	461a      	mov	r2, r3
    2818:	4b64      	ldr	r3, [pc, #400]	; (29ac <Clock_Ip_InitClock+0x5a0>)
    281a:	5c9b      	ldrb	r3, [r3, r2]
    281c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    281e:	4964      	ldr	r1, [pc, #400]	; (29b0 <Clock_Ip_InitClock+0x5a4>)
    2820:	9a02      	ldr	r2, [sp, #8]
    2822:	4613      	mov	r3, r2
    2824:	009b      	lsls	r3, r3, #2
    2826:	4413      	add	r3, r2
    2828:	009b      	lsls	r3, r3, #2
    282a:	440b      	add	r3, r1
    282c:	3308      	adds	r3, #8
    282e:	6819      	ldr	r1, [r3, #0]
    2830:	9a03      	ldr	r2, [sp, #12]
    2832:	4613      	mov	r3, r2
    2834:	009b      	lsls	r3, r3, #2
    2836:	4413      	add	r3, r2
    2838:	009b      	lsls	r3, r3, #2
    283a:	3328      	adds	r3, #40	; 0x28
    283c:	9a01      	ldr	r2, [sp, #4]
    283e:	4413      	add	r3, r2
    2840:	3304      	adds	r3, #4
    2842:	4618      	mov	r0, r3
    2844:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2846:	9b03      	ldr	r3, [sp, #12]
    2848:	3301      	adds	r3, #1
    284a:	9303      	str	r3, [sp, #12]
    284c:	9b01      	ldr	r3, [sp, #4]
    284e:	7a5b      	ldrb	r3, [r3, #9]
    2850:	461a      	mov	r2, r3
    2852:	9b03      	ldr	r3, [sp, #12]
    2854:	4293      	cmp	r3, r2
    2856:	d3ce      	bcc.n	27f6 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2858:	2300      	movs	r3, #0
    285a:	9303      	str	r3, [sp, #12]
    285c:	e029      	b.n	28b2 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    285e:	9901      	ldr	r1, [sp, #4]
    2860:	9a03      	ldr	r2, [sp, #12]
    2862:	4613      	mov	r3, r2
    2864:	009b      	lsls	r3, r3, #2
    2866:	4413      	add	r3, r2
    2868:	00db      	lsls	r3, r3, #3
    286a:	440b      	add	r3, r1
    286c:	3340      	adds	r3, #64	; 0x40
    286e:	681a      	ldr	r2, [r3, #0]
    2870:	4947      	ldr	r1, [pc, #284]	; (2990 <Clock_Ip_InitClock+0x584>)
    2872:	4613      	mov	r3, r2
    2874:	00db      	lsls	r3, r3, #3
    2876:	4413      	add	r3, r2
    2878:	440b      	add	r3, r1
    287a:	3301      	adds	r3, #1
    287c:	781b      	ldrb	r3, [r3, #0]
    287e:	461a      	mov	r2, r3
    2880:	4b46      	ldr	r3, [pc, #280]	; (299c <Clock_Ip_InitClock+0x590>)
    2882:	5c9b      	ldrb	r3, [r3, r2]
    2884:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2886:	4946      	ldr	r1, [pc, #280]	; (29a0 <Clock_Ip_InitClock+0x594>)
    2888:	9a02      	ldr	r2, [sp, #8]
    288a:	4613      	mov	r3, r2
    288c:	009b      	lsls	r3, r3, #2
    288e:	4413      	add	r3, r2
    2890:	009b      	lsls	r3, r3, #2
    2892:	440b      	add	r3, r1
    2894:	330c      	adds	r3, #12
    2896:	6819      	ldr	r1, [r3, #0]
    2898:	9a03      	ldr	r2, [sp, #12]
    289a:	4613      	mov	r3, r2
    289c:	009b      	lsls	r3, r3, #2
    289e:	4413      	add	r3, r2
    28a0:	00db      	lsls	r3, r3, #3
    28a2:	3340      	adds	r3, #64	; 0x40
    28a4:	9a01      	ldr	r2, [sp, #4]
    28a6:	4413      	add	r3, r2
    28a8:	4618      	mov	r0, r3
    28aa:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    28ac:	9b03      	ldr	r3, [sp, #12]
    28ae:	3301      	adds	r3, #1
    28b0:	9303      	str	r3, [sp, #12]
    28b2:	9b01      	ldr	r3, [sp, #4]
    28b4:	7a9b      	ldrb	r3, [r3, #10]
    28b6:	461a      	mov	r2, r3
    28b8:	9b03      	ldr	r3, [sp, #12]
    28ba:	4293      	cmp	r3, r2
    28bc:	d3cf      	bcc.n	285e <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    28be:	2300      	movs	r3, #0
    28c0:	9303      	str	r3, [sp, #12]
    28c2:	e025      	b.n	2910 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    28c4:	9a01      	ldr	r2, [sp, #4]
    28c6:	9b03      	ldr	r3, [sp, #12]
    28c8:	3324      	adds	r3, #36	; 0x24
    28ca:	011b      	lsls	r3, r3, #4
    28cc:	4413      	add	r3, r2
    28ce:	3304      	adds	r3, #4
    28d0:	681a      	ldr	r2, [r3, #0]
    28d2:	492f      	ldr	r1, [pc, #188]	; (2990 <Clock_Ip_InitClock+0x584>)
    28d4:	4613      	mov	r3, r2
    28d6:	00db      	lsls	r3, r3, #3
    28d8:	4413      	add	r3, r2
    28da:	440b      	add	r3, r1
    28dc:	3301      	adds	r3, #1
    28de:	781b      	ldrb	r3, [r3, #0]
    28e0:	461a      	mov	r2, r3
    28e2:	4b34      	ldr	r3, [pc, #208]	; (29b4 <Clock_Ip_InitClock+0x5a8>)
    28e4:	5c9b      	ldrb	r3, [r3, r2]
    28e6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    28e8:	4933      	ldr	r1, [pc, #204]	; (29b8 <Clock_Ip_InitClock+0x5ac>)
    28ea:	9a02      	ldr	r2, [sp, #8]
    28ec:	4613      	mov	r3, r2
    28ee:	005b      	lsls	r3, r3, #1
    28f0:	4413      	add	r3, r2
    28f2:	009b      	lsls	r3, r3, #2
    28f4:	440b      	add	r3, r1
    28f6:	3304      	adds	r3, #4
    28f8:	681b      	ldr	r3, [r3, #0]
    28fa:	9a03      	ldr	r2, [sp, #12]
    28fc:	3224      	adds	r2, #36	; 0x24
    28fe:	0112      	lsls	r2, r2, #4
    2900:	9901      	ldr	r1, [sp, #4]
    2902:	440a      	add	r2, r1
    2904:	3204      	adds	r2, #4
    2906:	4610      	mov	r0, r2
    2908:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    290a:	9b03      	ldr	r3, [sp, #12]
    290c:	3301      	adds	r3, #1
    290e:	9303      	str	r3, [sp, #12]
    2910:	9b01      	ldr	r3, [sp, #4]
    2912:	7b9b      	ldrb	r3, [r3, #14]
    2914:	461a      	mov	r2, r3
    2916:	9b03      	ldr	r3, [sp, #12]
    2918:	4293      	cmp	r3, r2
    291a:	d3d3      	bcc.n	28c4 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    291c:	4b27      	ldr	r3, [pc, #156]	; (29bc <Clock_Ip_InitClock+0x5b0>)
    291e:	2200      	movs	r2, #0
    2920:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2922:	4b26      	ldr	r3, [pc, #152]	; (29bc <Clock_Ip_InitClock+0x5b0>)
    2924:	2200      	movs	r2, #0
    2926:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2928:	4b24      	ldr	r3, [pc, #144]	; (29bc <Clock_Ip_InitClock+0x5b0>)
    292a:	2201      	movs	r2, #1
    292c:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    292e:	4b23      	ldr	r3, [pc, #140]	; (29bc <Clock_Ip_InitClock+0x5b0>)
    2930:	2200      	movs	r2, #0
    2932:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2934:	f000 fa9c 	bl	2e70 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2938:	2300      	movs	r3, #0
    293a:	9303      	str	r3, [sp, #12]
    293c:	e04c      	b.n	29d8 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    293e:	9a01      	ldr	r2, [sp, #4]
    2940:	9b03      	ldr	r3, [sp, #12]
    2942:	330d      	adds	r3, #13
    2944:	00db      	lsls	r3, r3, #3
    2946:	4413      	add	r3, r2
    2948:	685b      	ldr	r3, [r3, #4]
    294a:	4a1d      	ldr	r2, [pc, #116]	; (29c0 <Clock_Ip_InitClock+0x5b4>)
    294c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2950:	2b03      	cmp	r3, #3
    2952:	d03b      	beq.n	29cc <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2954:	9b01      	ldr	r3, [sp, #4]
    2956:	9a03      	ldr	r2, [sp, #12]
    2958:	320d      	adds	r2, #13
    295a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    295e:	490c      	ldr	r1, [pc, #48]	; (2990 <Clock_Ip_InitClock+0x584>)
    2960:	4613      	mov	r3, r2
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	440b      	add	r3, r1
    2968:	3301      	adds	r3, #1
    296a:	781b      	ldrb	r3, [r3, #0]
    296c:	461a      	mov	r2, r3
    296e:	4b15      	ldr	r3, [pc, #84]	; (29c4 <Clock_Ip_InitClock+0x5b8>)
    2970:	5c9b      	ldrb	r3, [r3, r2]
    2972:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2974:	4a14      	ldr	r2, [pc, #80]	; (29c8 <Clock_Ip_InitClock+0x5bc>)
    2976:	9b02      	ldr	r3, [sp, #8]
    2978:	00db      	lsls	r3, r3, #3
    297a:	4413      	add	r3, r2
    297c:	685b      	ldr	r3, [r3, #4]
    297e:	9a03      	ldr	r2, [sp, #12]
    2980:	320d      	adds	r2, #13
    2982:	00d2      	lsls	r2, r2, #3
    2984:	9901      	ldr	r1, [sp, #4]
    2986:	440a      	add	r2, r1
    2988:	4610      	mov	r0, r2
    298a:	4798      	blx	r3
    298c:	e021      	b.n	29d2 <Clock_Ip_InitClock+0x5c6>
    298e:	bf00      	nop
    2990:	00017e78 	.word	0x00017e78
    2994:	00017de8 	.word	0x00017de8
    2998:	000183c4 	.word	0x000183c4
    299c:	00017e38 	.word	0x00017e38
    29a0:	00018484 	.word	0x00018484
    29a4:	00017e68 	.word	0x00017e68
    29a8:	00018474 	.word	0x00018474
    29ac:	00017df8 	.word	0x00017df8
    29b0:	000183cc 	.word	0x000183cc
    29b4:	00017e28 	.word	0x00017e28
    29b8:	000183f4 	.word	0x000183f4
    29bc:	1fff8b40 	.word	0x1fff8b40
    29c0:	000182c4 	.word	0x000182c4
    29c4:	00017e48 	.word	0x00017e48
    29c8:	000184b0 	.word	0x000184b0
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    29cc:	4b3a      	ldr	r3, [pc, #232]	; (2ab8 <Clock_Ip_InitClock+0x6ac>)
    29ce:	2201      	movs	r2, #1
    29d0:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    29d2:	9b03      	ldr	r3, [sp, #12]
    29d4:	3301      	adds	r3, #1
    29d6:	9303      	str	r3, [sp, #12]
    29d8:	9b01      	ldr	r3, [sp, #4]
    29da:	7adb      	ldrb	r3, [r3, #11]
    29dc:	461a      	mov	r2, r3
    29de:	9b03      	ldr	r3, [sp, #12]
    29e0:	4293      	cmp	r3, r2
    29e2:	d3ac      	bcc.n	293e <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    29e4:	4b34      	ldr	r3, [pc, #208]	; (2ab8 <Clock_Ip_InitClock+0x6ac>)
    29e6:	781b      	ldrb	r3, [r3, #0]
    29e8:	f083 0301 	eor.w	r3, r3, #1
    29ec:	b2db      	uxtb	r3, r3
    29ee:	2b00      	cmp	r3, #0
    29f0:	d05e      	beq.n	2ab0 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29f2:	2300      	movs	r3, #0
    29f4:	9303      	str	r3, [sp, #12]
    29f6:	e01f      	b.n	2a38 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    29f8:	9a01      	ldr	r2, [sp, #4]
    29fa:	9b03      	ldr	r3, [sp, #12]
    29fc:	334e      	adds	r3, #78	; 0x4e
    29fe:	00db      	lsls	r3, r3, #3
    2a00:	4413      	add	r3, r2
    2a02:	685a      	ldr	r2, [r3, #4]
    2a04:	492d      	ldr	r1, [pc, #180]	; (2abc <Clock_Ip_InitClock+0x6b0>)
    2a06:	4613      	mov	r3, r2
    2a08:	00db      	lsls	r3, r3, #3
    2a0a:	4413      	add	r3, r2
    2a0c:	440b      	add	r3, r1
    2a0e:	3301      	adds	r3, #1
    2a10:	781b      	ldrb	r3, [r3, #0]
    2a12:	461a      	mov	r2, r3
    2a14:	4b2a      	ldr	r3, [pc, #168]	; (2ac0 <Clock_Ip_InitClock+0x6b4>)
    2a16:	5c9b      	ldrb	r3, [r3, r2]
    2a18:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2a1a:	4a2a      	ldr	r2, [pc, #168]	; (2ac4 <Clock_Ip_InitClock+0x6b8>)
    2a1c:	9b02      	ldr	r3, [sp, #8]
    2a1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2a22:	9a03      	ldr	r2, [sp, #12]
    2a24:	324e      	adds	r2, #78	; 0x4e
    2a26:	00d2      	lsls	r2, r2, #3
    2a28:	9901      	ldr	r1, [sp, #4]
    2a2a:	440a      	add	r2, r1
    2a2c:	3204      	adds	r2, #4
    2a2e:	4610      	mov	r0, r2
    2a30:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2a32:	9b03      	ldr	r3, [sp, #12]
    2a34:	3301      	adds	r3, #1
    2a36:	9303      	str	r3, [sp, #12]
    2a38:	9b01      	ldr	r3, [sp, #4]
    2a3a:	7c1b      	ldrb	r3, [r3, #16]
    2a3c:	461a      	mov	r2, r3
    2a3e:	9b03      	ldr	r3, [sp, #12]
    2a40:	4293      	cmp	r3, r2
    2a42:	d3d9      	bcc.n	29f8 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2a44:	2300      	movs	r3, #0
    2a46:	9303      	str	r3, [sp, #12]
    2a48:	e028      	b.n	2a9c <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2a4a:	9901      	ldr	r1, [sp, #4]
    2a4c:	9a03      	ldr	r2, [sp, #12]
    2a4e:	4613      	mov	r3, r2
    2a50:	009b      	lsls	r3, r3, #2
    2a52:	4413      	add	r3, r2
    2a54:	009b      	lsls	r3, r3, #2
    2a56:	440b      	add	r3, r1
    2a58:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a5c:	681a      	ldr	r2, [r3, #0]
    2a5e:	4917      	ldr	r1, [pc, #92]	; (2abc <Clock_Ip_InitClock+0x6b0>)
    2a60:	4613      	mov	r3, r2
    2a62:	00db      	lsls	r3, r3, #3
    2a64:	4413      	add	r3, r2
    2a66:	440b      	add	r3, r1
    2a68:	3301      	adds	r3, #1
    2a6a:	781b      	ldrb	r3, [r3, #0]
    2a6c:	461a      	mov	r2, r3
    2a6e:	4b16      	ldr	r3, [pc, #88]	; (2ac8 <Clock_Ip_InitClock+0x6bc>)
    2a70:	5c9b      	ldrb	r3, [r3, r2]
    2a72:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2a74:	4a15      	ldr	r2, [pc, #84]	; (2acc <Clock_Ip_InitClock+0x6c0>)
    2a76:	9b02      	ldr	r3, [sp, #8]
    2a78:	011b      	lsls	r3, r3, #4
    2a7a:	4413      	add	r3, r2
    2a7c:	330c      	adds	r3, #12
    2a7e:	6819      	ldr	r1, [r3, #0]
    2a80:	9a03      	ldr	r2, [sp, #12]
    2a82:	4613      	mov	r3, r2
    2a84:	009b      	lsls	r3, r3, #2
    2a86:	4413      	add	r3, r2
    2a88:	009b      	lsls	r3, r3, #2
    2a8a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a8e:	9a01      	ldr	r2, [sp, #4]
    2a90:	4413      	add	r3, r2
    2a92:	4618      	mov	r0, r3
    2a94:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2a96:	9b03      	ldr	r3, [sp, #12]
    2a98:	3301      	adds	r3, #1
    2a9a:	9303      	str	r3, [sp, #12]
    2a9c:	9b01      	ldr	r3, [sp, #4]
    2a9e:	7c9b      	ldrb	r3, [r3, #18]
    2aa0:	461a      	mov	r2, r3
    2aa2:	9b03      	ldr	r3, [sp, #12]
    2aa4:	4293      	cmp	r3, r2
    2aa6:	d3d0      	bcc.n	2a4a <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2aa8:	2104      	movs	r1, #4
    2aaa:	9801      	ldr	r0, [sp, #4]
    2aac:	f002 ff48 	bl	5940 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2ab0:	bf00      	nop
    2ab2:	b004      	add	sp, #16
    2ab4:	bd10      	pop	{r4, pc}
    2ab6:	bf00      	nop
    2ab8:	1fff8b40 	.word	0x1fff8b40
    2abc:	00017e78 	.word	0x00017e78
    2ac0:	00017e18 	.word	0x00017e18
    2ac4:	00018400 	.word	0x00018400
    2ac8:	00017e68 	.word	0x00017e68
    2acc:	00018474 	.word	0x00018474

00002ad0 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2ad0:	b500      	push	{lr}
    2ad2:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2ad4:	2302      	movs	r3, #2
    2ad6:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2ad8:	2300      	movs	r3, #0
    2ada:	9304      	str	r3, [sp, #16]
    2adc:	e02c      	b.n	2b38 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2ade:	4a36      	ldr	r2, [pc, #216]	; (2bb8 <Clock_Ip_GetPllStatus+0xe8>)
    2ae0:	9b04      	ldr	r3, [sp, #16]
    2ae2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2ae6:	4935      	ldr	r1, [pc, #212]	; (2bbc <Clock_Ip_GetPllStatus+0xec>)
    2ae8:	4613      	mov	r3, r2
    2aea:	00db      	lsls	r3, r3, #3
    2aec:	4413      	add	r3, r2
    2aee:	440b      	add	r3, r1
    2af0:	3301      	adds	r3, #1
    2af2:	781b      	ldrb	r3, [r3, #0]
    2af4:	461a      	mov	r2, r3
    2af6:	4b32      	ldr	r3, [pc, #200]	; (2bc0 <Clock_Ip_GetPllStatus+0xf0>)
    2af8:	5c9b      	ldrb	r3, [r3, r2]
    2afa:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2afc:	4931      	ldr	r1, [pc, #196]	; (2bc4 <Clock_Ip_GetPllStatus+0xf4>)
    2afe:	9a03      	ldr	r2, [sp, #12]
    2b00:	4613      	mov	r3, r2
    2b02:	009b      	lsls	r3, r3, #2
    2b04:	4413      	add	r3, r2
    2b06:	009b      	lsls	r3, r3, #2
    2b08:	440b      	add	r3, r1
    2b0a:	3308      	adds	r3, #8
    2b0c:	681b      	ldr	r3, [r3, #0]
    2b0e:	492a      	ldr	r1, [pc, #168]	; (2bb8 <Clock_Ip_GetPllStatus+0xe8>)
    2b10:	9a04      	ldr	r2, [sp, #16]
    2b12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2b16:	4610      	mov	r0, r2
    2b18:	4798      	blx	r3
    2b1a:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2b1c:	9b02      	ldr	r3, [sp, #8]
    2b1e:	2b01      	cmp	r3, #1
    2b20:	d102      	bne.n	2b28 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2b22:	2301      	movs	r3, #1
    2b24:	9305      	str	r3, [sp, #20]
            break;
    2b26:	e00d      	b.n	2b44 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2b28:	9b02      	ldr	r3, [sp, #8]
    2b2a:	2b02      	cmp	r3, #2
    2b2c:	d101      	bne.n	2b32 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2b2e:	2300      	movs	r3, #0
    2b30:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2b32:	9b04      	ldr	r3, [sp, #16]
    2b34:	3301      	adds	r3, #1
    2b36:	9304      	str	r3, [sp, #16]
    2b38:	4b23      	ldr	r3, [pc, #140]	; (2bc8 <Clock_Ip_GetPllStatus+0xf8>)
    2b3a:	789b      	ldrb	r3, [r3, #2]
    2b3c:	461a      	mov	r2, r3
    2b3e:	9b04      	ldr	r3, [sp, #16]
    2b40:	4293      	cmp	r3, r2
    2b42:	d3cc      	bcc.n	2ade <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2b44:	9b05      	ldr	r3, [sp, #20]
    2b46:	2b00      	cmp	r3, #0
    2b48:	d130      	bne.n	2bac <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2b4a:	2300      	movs	r3, #0
    2b4c:	9304      	str	r3, [sp, #16]
    2b4e:	e027      	b.n	2ba0 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2b50:	4a1e      	ldr	r2, [pc, #120]	; (2bcc <Clock_Ip_GetPllStatus+0xfc>)
    2b52:	9b04      	ldr	r3, [sp, #16]
    2b54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2b58:	4918      	ldr	r1, [pc, #96]	; (2bbc <Clock_Ip_GetPllStatus+0xec>)
    2b5a:	4613      	mov	r3, r2
    2b5c:	00db      	lsls	r3, r3, #3
    2b5e:	4413      	add	r3, r2
    2b60:	440b      	add	r3, r1
    2b62:	3301      	adds	r3, #1
    2b64:	781b      	ldrb	r3, [r3, #0]
    2b66:	461a      	mov	r2, r3
    2b68:	4b19      	ldr	r3, [pc, #100]	; (2bd0 <Clock_Ip_GetPllStatus+0x100>)
    2b6a:	5c9b      	ldrb	r3, [r3, r2]
    2b6c:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2b6e:	4919      	ldr	r1, [pc, #100]	; (2bd4 <Clock_Ip_GetPllStatus+0x104>)
    2b70:	9a03      	ldr	r2, [sp, #12]
    2b72:	4613      	mov	r3, r2
    2b74:	005b      	lsls	r3, r3, #1
    2b76:	4413      	add	r3, r2
    2b78:	009b      	lsls	r3, r3, #2
    2b7a:	440b      	add	r3, r1
    2b7c:	3308      	adds	r3, #8
    2b7e:	681b      	ldr	r3, [r3, #0]
    2b80:	4912      	ldr	r1, [pc, #72]	; (2bcc <Clock_Ip_GetPllStatus+0xfc>)
    2b82:	9a04      	ldr	r2, [sp, #16]
    2b84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2b88:	4610      	mov	r0, r2
    2b8a:	4798      	blx	r3
    2b8c:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2b8e:	9b01      	ldr	r3, [sp, #4]
    2b90:	2b01      	cmp	r3, #1
    2b92:	d102      	bne.n	2b9a <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2b94:	2301      	movs	r3, #1
    2b96:	9305      	str	r3, [sp, #20]
                break;
    2b98:	e008      	b.n	2bac <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2b9a:	9b04      	ldr	r3, [sp, #16]
    2b9c:	3301      	adds	r3, #1
    2b9e:	9304      	str	r3, [sp, #16]
    2ba0:	4b09      	ldr	r3, [pc, #36]	; (2bc8 <Clock_Ip_GetPllStatus+0xf8>)
    2ba2:	78db      	ldrb	r3, [r3, #3]
    2ba4:	461a      	mov	r2, r3
    2ba6:	9b04      	ldr	r3, [sp, #16]
    2ba8:	4293      	cmp	r3, r2
    2baa:	d3d1      	bcc.n	2b50 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2bac:	9b05      	ldr	r3, [sp, #20]
}
    2bae:	4618      	mov	r0, r3
    2bb0:	b007      	add	sp, #28
    2bb2:	f85d fb04 	ldr.w	pc, [sp], #4
    2bb6:	bf00      	nop
    2bb8:	00018380 	.word	0x00018380
    2bbc:	00017e78 	.word	0x00017e78
    2bc0:	00017e38 	.word	0x00017e38
    2bc4:	00018484 	.word	0x00018484
    2bc8:	1fff8b40 	.word	0x1fff8b40
    2bcc:	00018384 	.word	0x00018384
    2bd0:	00017e28 	.word	0x00017e28
    2bd4:	000183f4 	.word	0x000183f4

00002bd8 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2bd8:	b500      	push	{lr}
    2bda:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2bdc:	4b55      	ldr	r3, [pc, #340]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2bde:	681b      	ldr	r3, [r3, #0]
    2be0:	2b00      	cmp	r3, #0
    2be2:	f000 80a2 	beq.w	2d2a <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2be6:	2300      	movs	r3, #0
    2be8:	9301      	str	r3, [sp, #4]
    2bea:	e02c      	b.n	2c46 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2bec:	4b51      	ldr	r3, [pc, #324]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2bee:	681a      	ldr	r2, [r3, #0]
    2bf0:	9b01      	ldr	r3, [sp, #4]
    2bf2:	330d      	adds	r3, #13
    2bf4:	00db      	lsls	r3, r3, #3
    2bf6:	4413      	add	r3, r2
    2bf8:	685b      	ldr	r3, [r3, #4]
    2bfa:	4a4f      	ldr	r2, [pc, #316]	; (2d38 <Clock_Ip_DistributePll+0x160>)
    2bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2c00:	2b03      	cmp	r3, #3
    2c02:	d11d      	bne.n	2c40 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2c04:	4b4b      	ldr	r3, [pc, #300]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2c06:	681b      	ldr	r3, [r3, #0]
    2c08:	9a01      	ldr	r2, [sp, #4]
    2c0a:	320d      	adds	r2, #13
    2c0c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2c10:	494a      	ldr	r1, [pc, #296]	; (2d3c <Clock_Ip_DistributePll+0x164>)
    2c12:	4613      	mov	r3, r2
    2c14:	00db      	lsls	r3, r3, #3
    2c16:	4413      	add	r3, r2
    2c18:	440b      	add	r3, r1
    2c1a:	3301      	adds	r3, #1
    2c1c:	781b      	ldrb	r3, [r3, #0]
    2c1e:	461a      	mov	r2, r3
    2c20:	4b47      	ldr	r3, [pc, #284]	; (2d40 <Clock_Ip_DistributePll+0x168>)
    2c22:	5c9b      	ldrb	r3, [r3, r2]
    2c24:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2c26:	4a47      	ldr	r2, [pc, #284]	; (2d44 <Clock_Ip_DistributePll+0x16c>)
    2c28:	9b00      	ldr	r3, [sp, #0]
    2c2a:	00db      	lsls	r3, r3, #3
    2c2c:	4413      	add	r3, r2
    2c2e:	685b      	ldr	r3, [r3, #4]
    2c30:	4a40      	ldr	r2, [pc, #256]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2c32:	6811      	ldr	r1, [r2, #0]
    2c34:	9a01      	ldr	r2, [sp, #4]
    2c36:	320d      	adds	r2, #13
    2c38:	00d2      	lsls	r2, r2, #3
    2c3a:	440a      	add	r2, r1
    2c3c:	4610      	mov	r0, r2
    2c3e:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2c40:	9b01      	ldr	r3, [sp, #4]
    2c42:	3301      	adds	r3, #1
    2c44:	9301      	str	r3, [sp, #4]
    2c46:	4b3b      	ldr	r3, [pc, #236]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2c48:	681b      	ldr	r3, [r3, #0]
    2c4a:	7adb      	ldrb	r3, [r3, #11]
    2c4c:	461a      	mov	r2, r3
    2c4e:	9b01      	ldr	r3, [sp, #4]
    2c50:	4293      	cmp	r3, r2
    2c52:	d3cb      	bcc.n	2bec <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2c54:	4b3c      	ldr	r3, [pc, #240]	; (2d48 <Clock_Ip_DistributePll+0x170>)
    2c56:	781b      	ldrb	r3, [r3, #0]
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d066      	beq.n	2d2a <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2c5c:	2300      	movs	r3, #0
    2c5e:	9301      	str	r3, [sp, #4]
    2c60:	e021      	b.n	2ca6 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2c62:	4b34      	ldr	r3, [pc, #208]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2c64:	681a      	ldr	r2, [r3, #0]
    2c66:	9b01      	ldr	r3, [sp, #4]
    2c68:	334e      	adds	r3, #78	; 0x4e
    2c6a:	00db      	lsls	r3, r3, #3
    2c6c:	4413      	add	r3, r2
    2c6e:	685a      	ldr	r2, [r3, #4]
    2c70:	4932      	ldr	r1, [pc, #200]	; (2d3c <Clock_Ip_DistributePll+0x164>)
    2c72:	4613      	mov	r3, r2
    2c74:	00db      	lsls	r3, r3, #3
    2c76:	4413      	add	r3, r2
    2c78:	440b      	add	r3, r1
    2c7a:	3301      	adds	r3, #1
    2c7c:	781b      	ldrb	r3, [r3, #0]
    2c7e:	461a      	mov	r2, r3
    2c80:	4b32      	ldr	r3, [pc, #200]	; (2d4c <Clock_Ip_DistributePll+0x174>)
    2c82:	5c9b      	ldrb	r3, [r3, r2]
    2c84:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2c86:	4a32      	ldr	r2, [pc, #200]	; (2d50 <Clock_Ip_DistributePll+0x178>)
    2c88:	9b00      	ldr	r3, [sp, #0]
    2c8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2c8e:	4a29      	ldr	r2, [pc, #164]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2c90:	6811      	ldr	r1, [r2, #0]
    2c92:	9a01      	ldr	r2, [sp, #4]
    2c94:	324e      	adds	r2, #78	; 0x4e
    2c96:	00d2      	lsls	r2, r2, #3
    2c98:	440a      	add	r2, r1
    2c9a:	3204      	adds	r2, #4
    2c9c:	4610      	mov	r0, r2
    2c9e:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2ca0:	9b01      	ldr	r3, [sp, #4]
    2ca2:	3301      	adds	r3, #1
    2ca4:	9301      	str	r3, [sp, #4]
    2ca6:	4b23      	ldr	r3, [pc, #140]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2ca8:	681b      	ldr	r3, [r3, #0]
    2caa:	7c1b      	ldrb	r3, [r3, #16]
    2cac:	461a      	mov	r2, r3
    2cae:	9b01      	ldr	r3, [sp, #4]
    2cb0:	4293      	cmp	r3, r2
    2cb2:	d3d6      	bcc.n	2c62 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2cb4:	2300      	movs	r3, #0
    2cb6:	9301      	str	r3, [sp, #4]
    2cb8:	e02a      	b.n	2d10 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2cba:	4b1e      	ldr	r3, [pc, #120]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2cbc:	6819      	ldr	r1, [r3, #0]
    2cbe:	9a01      	ldr	r2, [sp, #4]
    2cc0:	4613      	mov	r3, r2
    2cc2:	009b      	lsls	r3, r3, #2
    2cc4:	4413      	add	r3, r2
    2cc6:	009b      	lsls	r3, r3, #2
    2cc8:	440b      	add	r3, r1
    2cca:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2cce:	681a      	ldr	r2, [r3, #0]
    2cd0:	491a      	ldr	r1, [pc, #104]	; (2d3c <Clock_Ip_DistributePll+0x164>)
    2cd2:	4613      	mov	r3, r2
    2cd4:	00db      	lsls	r3, r3, #3
    2cd6:	4413      	add	r3, r2
    2cd8:	440b      	add	r3, r1
    2cda:	3301      	adds	r3, #1
    2cdc:	781b      	ldrb	r3, [r3, #0]
    2cde:	461a      	mov	r2, r3
    2ce0:	4b1c      	ldr	r3, [pc, #112]	; (2d54 <Clock_Ip_DistributePll+0x17c>)
    2ce2:	5c9b      	ldrb	r3, [r3, r2]
    2ce4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2ce6:	4a1c      	ldr	r2, [pc, #112]	; (2d58 <Clock_Ip_DistributePll+0x180>)
    2ce8:	9b00      	ldr	r3, [sp, #0]
    2cea:	011b      	lsls	r3, r3, #4
    2cec:	4413      	add	r3, r2
    2cee:	330c      	adds	r3, #12
    2cf0:	6819      	ldr	r1, [r3, #0]
    2cf2:	4b10      	ldr	r3, [pc, #64]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2cf4:	6818      	ldr	r0, [r3, #0]
    2cf6:	9a01      	ldr	r2, [sp, #4]
    2cf8:	4613      	mov	r3, r2
    2cfa:	009b      	lsls	r3, r3, #2
    2cfc:	4413      	add	r3, r2
    2cfe:	009b      	lsls	r3, r3, #2
    2d00:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d04:	4403      	add	r3, r0
    2d06:	4618      	mov	r0, r3
    2d08:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2d0a:	9b01      	ldr	r3, [sp, #4]
    2d0c:	3301      	adds	r3, #1
    2d0e:	9301      	str	r3, [sp, #4]
    2d10:	4b08      	ldr	r3, [pc, #32]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2d12:	681b      	ldr	r3, [r3, #0]
    2d14:	7c9b      	ldrb	r3, [r3, #18]
    2d16:	461a      	mov	r2, r3
    2d18:	9b01      	ldr	r3, [sp, #4]
    2d1a:	4293      	cmp	r3, r2
    2d1c:	d3cd      	bcc.n	2cba <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2d1e:	4b05      	ldr	r3, [pc, #20]	; (2d34 <Clock_Ip_DistributePll+0x15c>)
    2d20:	681b      	ldr	r3, [r3, #0]
    2d22:	2104      	movs	r1, #4
    2d24:	4618      	mov	r0, r3
    2d26:	f002 fe0b 	bl	5940 <Clock_Ip_Command>
        }
    }
}
    2d2a:	bf00      	nop
    2d2c:	b003      	add	sp, #12
    2d2e:	f85d fb04 	ldr.w	pc, [sp], #4
    2d32:	bf00      	nop
    2d34:	1fff8b38 	.word	0x1fff8b38
    2d38:	000182c4 	.word	0x000182c4
    2d3c:	00017e78 	.word	0x00017e78
    2d40:	00017e48 	.word	0x00017e48
    2d44:	000184b0 	.word	0x000184b0
    2d48:	1fff8b40 	.word	0x1fff8b40
    2d4c:	00017e18 	.word	0x00017e18
    2d50:	00018400 	.word	0x00018400
    2d54:	00017e68 	.word	0x00017e68
    2d58:	00018474 	.word	0x00018474

00002d5c <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2d5c:	b500      	push	{lr}
    2d5e:	b085      	sub	sp, #20
    2d60:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2d62:	490c      	ldr	r1, [pc, #48]	; (2d94 <Clock_Ip_DisableClockMonitor+0x38>)
    2d64:	9a01      	ldr	r2, [sp, #4]
    2d66:	4613      	mov	r3, r2
    2d68:	00db      	lsls	r3, r3, #3
    2d6a:	4413      	add	r3, r2
    2d6c:	440b      	add	r3, r1
    2d6e:	3301      	adds	r3, #1
    2d70:	781b      	ldrb	r3, [r3, #0]
    2d72:	461a      	mov	r2, r3
    2d74:	4b08      	ldr	r3, [pc, #32]	; (2d98 <Clock_Ip_DisableClockMonitor+0x3c>)
    2d76:	5c9b      	ldrb	r3, [r3, r2]
    2d78:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2d7a:	4a08      	ldr	r2, [pc, #32]	; (2d9c <Clock_Ip_DisableClockMonitor+0x40>)
    2d7c:	9b03      	ldr	r3, [sp, #12]
    2d7e:	011b      	lsls	r3, r3, #4
    2d80:	4413      	add	r3, r2
    2d82:	3308      	adds	r3, #8
    2d84:	681b      	ldr	r3, [r3, #0]
    2d86:	9801      	ldr	r0, [sp, #4]
    2d88:	4798      	blx	r3
}
    2d8a:	bf00      	nop
    2d8c:	b005      	add	sp, #20
    2d8e:	f85d fb04 	ldr.w	pc, [sp], #4
    2d92:	bf00      	nop
    2d94:	00017e78 	.word	0x00017e78
    2d98:	00017e68 	.word	0x00017e68
    2d9c:	00018474 	.word	0x00018474

00002da0 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2da0:	b082      	sub	sp, #8
    2da2:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2da4:	4a02      	ldr	r2, [pc, #8]	; (2db0 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2da6:	9b01      	ldr	r3, [sp, #4]
    2da8:	6013      	str	r3, [r2, #0]
}
    2daa:	bf00      	nop
    2dac:	b002      	add	sp, #8
    2dae:	4770      	bx	lr
    2db0:	1fff8b14 	.word	0x1fff8b14

00002db4 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2db4:	b500      	push	{lr}
    2db6:	b085      	sub	sp, #20
    2db8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2dba:	490c      	ldr	r1, [pc, #48]	; (2dec <Clock_Ip_DisableModuleClock+0x38>)
    2dbc:	9a01      	ldr	r2, [sp, #4]
    2dbe:	4613      	mov	r3, r2
    2dc0:	00db      	lsls	r3, r3, #3
    2dc2:	4413      	add	r3, r2
    2dc4:	440b      	add	r3, r1
    2dc6:	3301      	adds	r3, #1
    2dc8:	781b      	ldrb	r3, [r3, #0]
    2dca:	461a      	mov	r2, r3
    2dcc:	4b08      	ldr	r3, [pc, #32]	; (2df0 <Clock_Ip_DisableModuleClock+0x3c>)
    2dce:	5c9b      	ldrb	r3, [r3, r2]
    2dd0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2dd2:	4a08      	ldr	r2, [pc, #32]	; (2df4 <Clock_Ip_DisableModuleClock+0x40>)
    2dd4:	9b03      	ldr	r3, [sp, #12]
    2dd6:	00db      	lsls	r3, r3, #3
    2dd8:	4413      	add	r3, r2
    2dda:	685b      	ldr	r3, [r3, #4]
    2ddc:	2101      	movs	r1, #1
    2dde:	9801      	ldr	r0, [sp, #4]
    2de0:	4798      	blx	r3
}
    2de2:	bf00      	nop
    2de4:	b005      	add	sp, #20
    2de6:	f85d fb04 	ldr.w	pc, [sp], #4
    2dea:	bf00      	nop
    2dec:	00017e78 	.word	0x00017e78
    2df0:	00017e18 	.word	0x00017e18
    2df4:	00018400 	.word	0x00018400

00002df8 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2df8:	b500      	push	{lr}
    2dfa:	b085      	sub	sp, #20
    2dfc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2dfe:	490c      	ldr	r1, [pc, #48]	; (2e30 <Clock_Ip_EnableModuleClock+0x38>)
    2e00:	9a01      	ldr	r2, [sp, #4]
    2e02:	4613      	mov	r3, r2
    2e04:	00db      	lsls	r3, r3, #3
    2e06:	4413      	add	r3, r2
    2e08:	440b      	add	r3, r1
    2e0a:	3301      	adds	r3, #1
    2e0c:	781b      	ldrb	r3, [r3, #0]
    2e0e:	461a      	mov	r2, r3
    2e10:	4b08      	ldr	r3, [pc, #32]	; (2e34 <Clock_Ip_EnableModuleClock+0x3c>)
    2e12:	5c9b      	ldrb	r3, [r3, r2]
    2e14:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2e16:	4a08      	ldr	r2, [pc, #32]	; (2e38 <Clock_Ip_EnableModuleClock+0x40>)
    2e18:	9b03      	ldr	r3, [sp, #12]
    2e1a:	00db      	lsls	r3, r3, #3
    2e1c:	4413      	add	r3, r2
    2e1e:	685b      	ldr	r3, [r3, #4]
    2e20:	2100      	movs	r1, #0
    2e22:	9801      	ldr	r0, [sp, #4]
    2e24:	4798      	blx	r3
}
    2e26:	bf00      	nop
    2e28:	b005      	add	sp, #20
    2e2a:	f85d fb04 	ldr.w	pc, [sp], #4
    2e2e:	bf00      	nop
    2e30:	00017e78 	.word	0x00017e78
    2e34:	00017e18 	.word	0x00017e18
    2e38:	00018400 	.word	0x00018400

00002e3c <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2e3c:	b500      	push	{lr}
    2e3e:	b083      	sub	sp, #12
    2e40:	9001      	str	r0, [sp, #4]
    2e42:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2e44:	4b08      	ldr	r3, [pc, #32]	; (2e68 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2e46:	2200      	movs	r2, #0
    2e48:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2e4a:	4b08      	ldr	r3, [pc, #32]	; (2e6c <Clock_Ip_PowerModeChangeNotification+0x30>)
    2e4c:	681b      	ldr	r3, [r3, #0]
    2e4e:	2102      	movs	r1, #2
    2e50:	4618      	mov	r0, r3
    2e52:	f002 fd75 	bl	5940 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2e56:	9900      	ldr	r1, [sp, #0]
    2e58:	9801      	ldr	r0, [sp, #4]
    2e5a:	f002 fc51 	bl	5700 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2e5e:	bf00      	nop
    2e60:	b003      	add	sp, #12
    2e62:	f85d fb04 	ldr.w	pc, [sp], #4
    2e66:	bf00      	nop
    2e68:	1fff8b10 	.word	0x1fff8b10
    2e6c:	1fff8b38 	.word	0x1fff8b38

00002e70 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2e70:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2e72:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2e76:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2e78:	4b06      	ldr	r3, [pc, #24]	; (2e94 <Clock_Ip_SetWaitStates+0x24>)
    2e7a:	785b      	ldrb	r3, [r3, #1]
    2e7c:	2b00      	cmp	r3, #0
    2e7e:	d005      	beq.n	2e8c <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2e80:	9b01      	ldr	r3, [sp, #4]
    2e82:	3b01      	subs	r3, #1
    2e84:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2e86:	9b01      	ldr	r3, [sp, #4]
    2e88:	2b00      	cmp	r3, #0
    2e8a:	d1f9      	bne.n	2e80 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2e8c:	bf00      	nop
    2e8e:	b002      	add	sp, #8
    2e90:	4770      	bx	lr
    2e92:	bf00      	nop
    2e94:	1fff8b40 	.word	0x1fff8b40

00002e98 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2e98:	b500      	push	{lr}
    2e9a:	b083      	sub	sp, #12
    2e9c:	9001      	str	r0, [sp, #4]
    2e9e:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2ea0:	4b04      	ldr	r3, [pc, #16]	; (2eb4 <Clock_Ip_ReportClockErrors+0x1c>)
    2ea2:	681b      	ldr	r3, [r3, #0]
    2ea4:	9900      	ldr	r1, [sp, #0]
    2ea6:	9801      	ldr	r0, [sp, #4]
    2ea8:	4798      	blx	r3
}
    2eaa:	bf00      	nop
    2eac:	b003      	add	sp, #12
    2eae:	f85d fb04 	ldr.w	pc, [sp], #4
    2eb2:	bf00      	nop
    2eb4:	1fff8b14 	.word	0x1fff8b14

00002eb8 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2eb8:	b500      	push	{lr}
    2eba:	b085      	sub	sp, #20
    2ebc:	9003      	str	r0, [sp, #12]
    2ebe:	9102      	str	r1, [sp, #8]
    2ec0:	9201      	str	r2, [sp, #4]
    2ec2:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2ec4:	2000      	movs	r0, #0
    2ec6:	f7fe ffd1 	bl	1e6c <OsIf_GetCounter>
    2eca:	4602      	mov	r2, r0
    2ecc:	9b03      	ldr	r3, [sp, #12]
    2ece:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2ed0:	9b02      	ldr	r3, [sp, #8]
    2ed2:	2200      	movs	r2, #0
    2ed4:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2ed6:	2100      	movs	r1, #0
    2ed8:	9800      	ldr	r0, [sp, #0]
    2eda:	f7ff f813 	bl	1f04 <OsIf_MicrosToTicks>
    2ede:	4602      	mov	r2, r0
    2ee0:	9b01      	ldr	r3, [sp, #4]
    2ee2:	601a      	str	r2, [r3, #0]
}
    2ee4:	bf00      	nop
    2ee6:	b005      	add	sp, #20
    2ee8:	f85d fb04 	ldr.w	pc, [sp], #4

00002eec <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2eec:	b500      	push	{lr}
    2eee:	b087      	sub	sp, #28
    2ef0:	9003      	str	r0, [sp, #12]
    2ef2:	9102      	str	r1, [sp, #8]
    2ef4:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2ef6:	2300      	movs	r3, #0
    2ef8:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2efc:	2100      	movs	r1, #0
    2efe:	9803      	ldr	r0, [sp, #12]
    2f00:	f7fe ffcd 	bl	1e9e <OsIf_GetElapsed>
    2f04:	4602      	mov	r2, r0
    2f06:	9b02      	ldr	r3, [sp, #8]
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	441a      	add	r2, r3
    2f0c:	9b02      	ldr	r3, [sp, #8]
    2f0e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2f10:	9b02      	ldr	r3, [sp, #8]
    2f12:	681b      	ldr	r3, [r3, #0]
    2f14:	9a01      	ldr	r2, [sp, #4]
    2f16:	429a      	cmp	r2, r3
    2f18:	d802      	bhi.n	2f20 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2f1a:	2301      	movs	r3, #1
    2f1c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2f20:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2f24:	4618      	mov	r0, r3
    2f26:	b007      	add	sp, #28
    2f28:	f85d fb04 	ldr.w	pc, [sp], #4

00002f2c <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2f2c:	b082      	sub	sp, #8
    2f2e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2f30:	bf00      	nop
    2f32:	b002      	add	sp, #8
    2f34:	4770      	bx	lr

00002f36 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2f36:	b500      	push	{lr}
    2f38:	b083      	sub	sp, #12
    2f3a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f3c:	9b01      	ldr	r3, [sp, #4]
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d002      	beq.n	2f48 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2f42:	9801      	ldr	r0, [sp, #4]
    2f44:	f000 f8ad 	bl	30a2 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f48:	bf00      	nop
    2f4a:	b003      	add	sp, #12
    2f4c:	f85d fb04 	ldr.w	pc, [sp], #4

00002f50 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2f50:	b500      	push	{lr}
    2f52:	b083      	sub	sp, #12
    2f54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f56:	9b01      	ldr	r3, [sp, #4]
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d002      	beq.n	2f62 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2f5c:	9801      	ldr	r0, [sp, #4]
    2f5e:	f000 f8cd 	bl	30fc <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f62:	bf00      	nop
    2f64:	b003      	add	sp, #12
    2f66:	f85d fb04 	ldr.w	pc, [sp], #4

00002f6a <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2f6a:	b500      	push	{lr}
    2f6c:	b083      	sub	sp, #12
    2f6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f70:	9b01      	ldr	r3, [sp, #4]
    2f72:	2b00      	cmp	r3, #0
    2f74:	d002      	beq.n	2f7c <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2f76:	9801      	ldr	r0, [sp, #4]
    2f78:	f000 f8ee 	bl	3158 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f7c:	bf00      	nop
    2f7e:	b003      	add	sp, #12
    2f80:	f85d fb04 	ldr.w	pc, [sp], #4

00002f84 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2f84:	b500      	push	{lr}
    2f86:	b083      	sub	sp, #12
    2f88:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f8a:	9b01      	ldr	r3, [sp, #4]
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d002      	beq.n	2f96 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2f90:	9801      	ldr	r0, [sp, #4]
    2f92:	f000 f8f9 	bl	3188 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f96:	bf00      	nop
    2f98:	b003      	add	sp, #12
    2f9a:	f85d fb04 	ldr.w	pc, [sp], #4

00002f9e <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2f9e:	b500      	push	{lr}
    2fa0:	b083      	sub	sp, #12
    2fa2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fa4:	9b01      	ldr	r3, [sp, #4]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d002      	beq.n	2fb0 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2faa:	9801      	ldr	r0, [sp, #4]
    2fac:	f000 f904 	bl	31b8 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fb0:	bf00      	nop
    2fb2:	b003      	add	sp, #12
    2fb4:	f85d fb04 	ldr.w	pc, [sp], #4

00002fb8 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2fb8:	b500      	push	{lr}
    2fba:	b083      	sub	sp, #12
    2fbc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fbe:	9b01      	ldr	r3, [sp, #4]
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	d002      	beq.n	2fca <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2fc4:	9801      	ldr	r0, [sp, #4]
    2fc6:	f000 f90f 	bl	31e8 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fca:	bf00      	nop
    2fcc:	b003      	add	sp, #12
    2fce:	f85d fb04 	ldr.w	pc, [sp], #4

00002fd2 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2fd2:	b500      	push	{lr}
    2fd4:	b083      	sub	sp, #12
    2fd6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fd8:	9b01      	ldr	r3, [sp, #4]
    2fda:	2b00      	cmp	r3, #0
    2fdc:	d002      	beq.n	2fe4 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2fde:	9801      	ldr	r0, [sp, #4]
    2fe0:	f000 f91a 	bl	3218 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fe4:	bf00      	nop
    2fe6:	b003      	add	sp, #12
    2fe8:	f85d fb04 	ldr.w	pc, [sp], #4

00002fec <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2fec:	b500      	push	{lr}
    2fee:	b083      	sub	sp, #12
    2ff0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ff2:	9b01      	ldr	r3, [sp, #4]
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d002      	beq.n	2ffe <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2ff8:	9801      	ldr	r0, [sp, #4]
    2ffa:	f000 f925 	bl	3248 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ffe:	bf00      	nop
    3000:	b003      	add	sp, #12
    3002:	f85d fb04 	ldr.w	pc, [sp], #4

00003006 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3006:	b500      	push	{lr}
    3008:	b083      	sub	sp, #12
    300a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    300c:	9b01      	ldr	r3, [sp, #4]
    300e:	2b00      	cmp	r3, #0
    3010:	d002      	beq.n	3018 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    3012:	9801      	ldr	r0, [sp, #4]
    3014:	f000 f930 	bl	3278 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3018:	bf00      	nop
    301a:	b003      	add	sp, #12
    301c:	f85d fb04 	ldr.w	pc, [sp], #4

00003020 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3020:	b500      	push	{lr}
    3022:	b083      	sub	sp, #12
    3024:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3026:	9b01      	ldr	r3, [sp, #4]
    3028:	2b00      	cmp	r3, #0
    302a:	d002      	beq.n	3032 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    302c:	9801      	ldr	r0, [sp, #4]
    302e:	f000 f93b 	bl	32a8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3032:	bf00      	nop
    3034:	b003      	add	sp, #12
    3036:	f85d fb04 	ldr.w	pc, [sp], #4

0000303a <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    303a:	b500      	push	{lr}
    303c:	b083      	sub	sp, #12
    303e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3040:	9b01      	ldr	r3, [sp, #4]
    3042:	2b00      	cmp	r3, #0
    3044:	d002      	beq.n	304c <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    3046:	9801      	ldr	r0, [sp, #4]
    3048:	f000 f946 	bl	32d8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    304c:	bf00      	nop
    304e:	b003      	add	sp, #12
    3050:	f85d fb04 	ldr.w	pc, [sp], #4

00003054 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    3054:	b500      	push	{lr}
    3056:	b083      	sub	sp, #12
    3058:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    305a:	9b01      	ldr	r3, [sp, #4]
    305c:	2b00      	cmp	r3, #0
    305e:	d002      	beq.n	3066 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    3060:	9801      	ldr	r0, [sp, #4]
    3062:	f000 f951 	bl	3308 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3066:	bf00      	nop
    3068:	b003      	add	sp, #12
    306a:	f85d fb04 	ldr.w	pc, [sp], #4

0000306e <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    306e:	b500      	push	{lr}
    3070:	b083      	sub	sp, #12
    3072:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3074:	9b01      	ldr	r3, [sp, #4]
    3076:	2b00      	cmp	r3, #0
    3078:	d002      	beq.n	3080 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    307a:	9801      	ldr	r0, [sp, #4]
    307c:	f000 f95e 	bl	333c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3080:	bf00      	nop
    3082:	b003      	add	sp, #12
    3084:	f85d fb04 	ldr.w	pc, [sp], #4

00003088 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    3088:	b500      	push	{lr}
    308a:	b083      	sub	sp, #12
    308c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    308e:	9b01      	ldr	r3, [sp, #4]
    3090:	2b00      	cmp	r3, #0
    3092:	d002      	beq.n	309a <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3094:	9801      	ldr	r0, [sp, #4]
    3096:	f000 f98b 	bl	33b0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    309a:	bf00      	nop
    309c:	b003      	add	sp, #12
    309e:	f85d fb04 	ldr.w	pc, [sp], #4

000030a2 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30a2:	b086      	sub	sp, #24
    30a4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    30a6:	9b01      	ldr	r3, [sp, #4]
    30a8:	681a      	ldr	r2, [r3, #0]
    30aa:	4911      	ldr	r1, [pc, #68]	; (30f0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    30ac:	4613      	mov	r3, r2
    30ae:	00db      	lsls	r3, r3, #3
    30b0:	4413      	add	r3, r2
    30b2:	440b      	add	r3, r1
    30b4:	781b      	ldrb	r3, [r3, #0]
    30b6:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    30b8:	9b01      	ldr	r3, [sp, #4]
    30ba:	685b      	ldr	r3, [r3, #4]
    30bc:	4a0d      	ldr	r2, [pc, #52]	; (30f4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    30be:	5cd3      	ldrb	r3, [r2, r3]
    30c0:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    30c2:	4a0d      	ldr	r2, [pc, #52]	; (30f8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    30c4:	9b05      	ldr	r3, [sp, #20]
    30c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    30ca:	681b      	ldr	r3, [r3, #0]
    30cc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    30ce:	9b03      	ldr	r3, [sp, #12]
    30d0:	f023 0307 	bic.w	r3, r3, #7
    30d4:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    30d6:	9a03      	ldr	r2, [sp, #12]
    30d8:	9b04      	ldr	r3, [sp, #16]
    30da:	4313      	orrs	r3, r2
    30dc:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    30de:	4a06      	ldr	r2, [pc, #24]	; (30f8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    30e0:	9b05      	ldr	r3, [sp, #20]
    30e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    30e6:	9a03      	ldr	r2, [sp, #12]
    30e8:	601a      	str	r2, [r3, #0]
}
    30ea:	bf00      	nop
    30ec:	b006      	add	sp, #24
    30ee:	4770      	bx	lr
    30f0:	00017e78 	.word	0x00017e78
    30f4:	00018270 	.word	0x00018270
    30f8:	000182b4 	.word	0x000182b4

000030fc <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30fc:	b086      	sub	sp, #24
    30fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3100:	9b01      	ldr	r3, [sp, #4]
    3102:	681a      	ldr	r2, [r3, #0]
    3104:	4911      	ldr	r1, [pc, #68]	; (314c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3106:	4613      	mov	r3, r2
    3108:	00db      	lsls	r3, r3, #3
    310a:	4413      	add	r3, r2
    310c:	440b      	add	r3, r1
    310e:	781b      	ldrb	r3, [r3, #0]
    3110:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3112:	9b01      	ldr	r3, [sp, #4]
    3114:	685b      	ldr	r3, [r3, #4]
    3116:	4a0e      	ldr	r2, [pc, #56]	; (3150 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3118:	5cd3      	ldrb	r3, [r2, r3]
    311a:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    311c:	4a0d      	ldr	r2, [pc, #52]	; (3154 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    311e:	9b05      	ldr	r3, [sp, #20]
    3120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3124:	681b      	ldr	r3, [r3, #0]
    3126:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3128:	9b03      	ldr	r3, [sp, #12]
    312a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    312e:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3130:	9b04      	ldr	r3, [sp, #16]
    3132:	021b      	lsls	r3, r3, #8
    3134:	9a03      	ldr	r2, [sp, #12]
    3136:	4313      	orrs	r3, r2
    3138:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    313a:	4a06      	ldr	r2, [pc, #24]	; (3154 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    313c:	9b05      	ldr	r3, [sp, #20]
    313e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3142:	9a03      	ldr	r2, [sp, #12]
    3144:	601a      	str	r2, [r3, #0]
}
    3146:	bf00      	nop
    3148:	b006      	add	sp, #24
    314a:	4770      	bx	lr
    314c:	00017e78 	.word	0x00017e78
    3150:	00018270 	.word	0x00018270
    3154:	000182b4 	.word	0x000182b4

00003158 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3158:	b084      	sub	sp, #16
    315a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    315c:	4b09      	ldr	r3, [pc, #36]	; (3184 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    315e:	695b      	ldr	r3, [r3, #20]
    3160:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3162:	9b03      	ldr	r3, [sp, #12]
    3164:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3168:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    316a:	9b01      	ldr	r3, [sp, #4]
    316c:	685b      	ldr	r3, [r3, #4]
    316e:	3b01      	subs	r3, #1
    3170:	041b      	lsls	r3, r3, #16
    3172:	9a03      	ldr	r2, [sp, #12]
    3174:	4313      	orrs	r3, r2
    3176:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3178:	4a02      	ldr	r2, [pc, #8]	; (3184 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    317a:	9b03      	ldr	r3, [sp, #12]
    317c:	6153      	str	r3, [r2, #20]
}
    317e:	bf00      	nop
    3180:	b004      	add	sp, #16
    3182:	4770      	bx	lr
    3184:	40064000 	.word	0x40064000

00003188 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3188:	b084      	sub	sp, #16
    318a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    318c:	4b09      	ldr	r3, [pc, #36]	; (31b4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    318e:	695b      	ldr	r3, [r3, #20]
    3190:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3192:	9b03      	ldr	r3, [sp, #12]
    3194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3198:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    319a:	9b01      	ldr	r3, [sp, #4]
    319c:	685b      	ldr	r3, [r3, #4]
    319e:	3b01      	subs	r3, #1
    31a0:	011b      	lsls	r3, r3, #4
    31a2:	9a03      	ldr	r2, [sp, #12]
    31a4:	4313      	orrs	r3, r2
    31a6:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    31a8:	4a02      	ldr	r2, [pc, #8]	; (31b4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    31aa:	9b03      	ldr	r3, [sp, #12]
    31ac:	6153      	str	r3, [r2, #20]
}
    31ae:	bf00      	nop
    31b0:	b004      	add	sp, #16
    31b2:	4770      	bx	lr
    31b4:	40064000 	.word	0x40064000

000031b8 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31b8:	b084      	sub	sp, #16
    31ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    31bc:	4b09      	ldr	r3, [pc, #36]	; (31e4 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    31be:	695b      	ldr	r3, [r3, #20]
    31c0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    31c2:	9b03      	ldr	r3, [sp, #12]
    31c4:	f023 030f 	bic.w	r3, r3, #15
    31c8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    31ca:	9b01      	ldr	r3, [sp, #4]
    31cc:	685b      	ldr	r3, [r3, #4]
    31ce:	3b01      	subs	r3, #1
    31d0:	9a03      	ldr	r2, [sp, #12]
    31d2:	4313      	orrs	r3, r2
    31d4:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    31d6:	4a03      	ldr	r2, [pc, #12]	; (31e4 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    31d8:	9b03      	ldr	r3, [sp, #12]
    31da:	6153      	str	r3, [r2, #20]
}
    31dc:	bf00      	nop
    31de:	b004      	add	sp, #16
    31e0:	4770      	bx	lr
    31e2:	bf00      	nop
    31e4:	40064000 	.word	0x40064000

000031e8 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31e8:	b084      	sub	sp, #16
    31ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    31ec:	4b09      	ldr	r3, [pc, #36]	; (3214 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    31ee:	699b      	ldr	r3, [r3, #24]
    31f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    31f2:	9b03      	ldr	r3, [sp, #12]
    31f4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    31f8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    31fa:	9b01      	ldr	r3, [sp, #4]
    31fc:	685b      	ldr	r3, [r3, #4]
    31fe:	3b01      	subs	r3, #1
    3200:	041b      	lsls	r3, r3, #16
    3202:	9a03      	ldr	r2, [sp, #12]
    3204:	4313      	orrs	r3, r2
    3206:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3208:	4a02      	ldr	r2, [pc, #8]	; (3214 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    320a:	9b03      	ldr	r3, [sp, #12]
    320c:	6193      	str	r3, [r2, #24]
}
    320e:	bf00      	nop
    3210:	b004      	add	sp, #16
    3212:	4770      	bx	lr
    3214:	40064000 	.word	0x40064000

00003218 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3218:	b084      	sub	sp, #16
    321a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    321c:	4b09      	ldr	r3, [pc, #36]	; (3244 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    321e:	699b      	ldr	r3, [r3, #24]
    3220:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3222:	9b03      	ldr	r3, [sp, #12]
    3224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3228:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    322a:	9b01      	ldr	r3, [sp, #4]
    322c:	685b      	ldr	r3, [r3, #4]
    322e:	3b01      	subs	r3, #1
    3230:	011b      	lsls	r3, r3, #4
    3232:	9a03      	ldr	r2, [sp, #12]
    3234:	4313      	orrs	r3, r2
    3236:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3238:	4a02      	ldr	r2, [pc, #8]	; (3244 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    323a:	9b03      	ldr	r3, [sp, #12]
    323c:	6193      	str	r3, [r2, #24]
}
    323e:	bf00      	nop
    3240:	b004      	add	sp, #16
    3242:	4770      	bx	lr
    3244:	40064000 	.word	0x40064000

00003248 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3248:	b084      	sub	sp, #16
    324a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    324c:	4b09      	ldr	r3, [pc, #36]	; (3274 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    324e:	699b      	ldr	r3, [r3, #24]
    3250:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3252:	9b03      	ldr	r3, [sp, #12]
    3254:	f023 030f 	bic.w	r3, r3, #15
    3258:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    325a:	9b01      	ldr	r3, [sp, #4]
    325c:	685b      	ldr	r3, [r3, #4]
    325e:	3b01      	subs	r3, #1
    3260:	9a03      	ldr	r2, [sp, #12]
    3262:	4313      	orrs	r3, r2
    3264:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3266:	4a03      	ldr	r2, [pc, #12]	; (3274 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3268:	9b03      	ldr	r3, [sp, #12]
    326a:	6193      	str	r3, [r2, #24]
}
    326c:	bf00      	nop
    326e:	b004      	add	sp, #16
    3270:	4770      	bx	lr
    3272:	bf00      	nop
    3274:	40064000 	.word	0x40064000

00003278 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3278:	b084      	sub	sp, #16
    327a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    327c:	4b09      	ldr	r3, [pc, #36]	; (32a4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    327e:	69db      	ldr	r3, [r3, #28]
    3280:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3282:	9b03      	ldr	r3, [sp, #12]
    3284:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3288:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    328a:	9b01      	ldr	r3, [sp, #4]
    328c:	685b      	ldr	r3, [r3, #4]
    328e:	3b01      	subs	r3, #1
    3290:	041b      	lsls	r3, r3, #16
    3292:	9a03      	ldr	r2, [sp, #12]
    3294:	4313      	orrs	r3, r2
    3296:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3298:	4a02      	ldr	r2, [pc, #8]	; (32a4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    329a:	9b03      	ldr	r3, [sp, #12]
    329c:	61d3      	str	r3, [r2, #28]
}
    329e:	bf00      	nop
    32a0:	b004      	add	sp, #16
    32a2:	4770      	bx	lr
    32a4:	40064000 	.word	0x40064000

000032a8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32a8:	b084      	sub	sp, #16
    32aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    32ac:	4b09      	ldr	r3, [pc, #36]	; (32d4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    32ae:	69db      	ldr	r3, [r3, #28]
    32b0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    32b2:	9b03      	ldr	r3, [sp, #12]
    32b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    32b8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    32ba:	9b01      	ldr	r3, [sp, #4]
    32bc:	685b      	ldr	r3, [r3, #4]
    32be:	3b01      	subs	r3, #1
    32c0:	011b      	lsls	r3, r3, #4
    32c2:	9a03      	ldr	r2, [sp, #12]
    32c4:	4313      	orrs	r3, r2
    32c6:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    32c8:	4a02      	ldr	r2, [pc, #8]	; (32d4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    32ca:	9b03      	ldr	r3, [sp, #12]
    32cc:	61d3      	str	r3, [r2, #28]
}
    32ce:	bf00      	nop
    32d0:	b004      	add	sp, #16
    32d2:	4770      	bx	lr
    32d4:	40064000 	.word	0x40064000

000032d8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32d8:	b084      	sub	sp, #16
    32da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    32dc:	4b09      	ldr	r3, [pc, #36]	; (3304 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    32de:	69db      	ldr	r3, [r3, #28]
    32e0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    32e2:	9b03      	ldr	r3, [sp, #12]
    32e4:	f023 030f 	bic.w	r3, r3, #15
    32e8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    32ea:	9b01      	ldr	r3, [sp, #4]
    32ec:	685b      	ldr	r3, [r3, #4]
    32ee:	3b01      	subs	r3, #1
    32f0:	9a03      	ldr	r2, [sp, #12]
    32f2:	4313      	orrs	r3, r2
    32f4:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    32f6:	4a03      	ldr	r2, [pc, #12]	; (3304 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    32f8:	9b03      	ldr	r3, [sp, #12]
    32fa:	61d3      	str	r3, [r2, #28]
}
    32fc:	bf00      	nop
    32fe:	b004      	add	sp, #16
    3300:	4770      	bx	lr
    3302:	bf00      	nop
    3304:	40064000 	.word	0x40064000

00003308 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3308:	b084      	sub	sp, #16
    330a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    330c:	4b0a      	ldr	r3, [pc, #40]	; (3338 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    330e:	685b      	ldr	r3, [r3, #4]
    3310:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3312:	9b03      	ldr	r3, [sp, #12]
    3314:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3318:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    331a:	9b01      	ldr	r3, [sp, #4]
    331c:	685b      	ldr	r3, [r3, #4]
    331e:	3b01      	subs	r3, #1
    3320:	021b      	lsls	r3, r3, #8
    3322:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3326:	9a03      	ldr	r2, [sp, #12]
    3328:	4313      	orrs	r3, r2
    332a:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    332c:	4a02      	ldr	r2, [pc, #8]	; (3338 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    332e:	9b03      	ldr	r3, [sp, #12]
    3330:	6053      	str	r3, [r2, #4]
}
    3332:	bf00      	nop
    3334:	b004      	add	sp, #16
    3336:	4770      	bx	lr
    3338:	40048000 	.word	0x40048000

0000333c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    333c:	b084      	sub	sp, #16
    333e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3340:	4919      	ldr	r1, [pc, #100]	; (33a8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3342:	9b01      	ldr	r3, [sp, #4]
    3344:	681a      	ldr	r2, [r3, #0]
    3346:	4819      	ldr	r0, [pc, #100]	; (33ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3348:	4613      	mov	r3, r2
    334a:	00db      	lsls	r3, r3, #3
    334c:	4413      	add	r3, r2
    334e:	4403      	add	r3, r0
    3350:	3305      	adds	r3, #5
    3352:	781b      	ldrb	r3, [r3, #0]
    3354:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3358:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    335a:	9b03      	ldr	r3, [sp, #12]
    335c:	f023 030f 	bic.w	r3, r3, #15
    3360:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3362:	9b01      	ldr	r3, [sp, #4]
    3364:	685b      	ldr	r3, [r3, #4]
    3366:	3b01      	subs	r3, #1
    3368:	f003 0307 	and.w	r3, r3, #7
    336c:	9a03      	ldr	r2, [sp, #12]
    336e:	4313      	orrs	r3, r2
    3370:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3372:	9b01      	ldr	r3, [sp, #4]
    3374:	7a1b      	ldrb	r3, [r3, #8]
    3376:	3b01      	subs	r3, #1
    3378:	00db      	lsls	r3, r3, #3
    337a:	f003 0308 	and.w	r3, r3, #8
    337e:	9a03      	ldr	r2, [sp, #12]
    3380:	4313      	orrs	r3, r2
    3382:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3384:	4908      	ldr	r1, [pc, #32]	; (33a8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3386:	9b01      	ldr	r3, [sp, #4]
    3388:	681a      	ldr	r2, [r3, #0]
    338a:	4808      	ldr	r0, [pc, #32]	; (33ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    338c:	4613      	mov	r3, r2
    338e:	00db      	lsls	r3, r3, #3
    3390:	4413      	add	r3, r2
    3392:	4403      	add	r3, r0
    3394:	3305      	adds	r3, #5
    3396:	781b      	ldrb	r3, [r3, #0]
    3398:	461a      	mov	r2, r3
    339a:	9b03      	ldr	r3, [sp, #12]
    339c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    33a0:	bf00      	nop
    33a2:	b004      	add	sp, #16
    33a4:	4770      	bx	lr
    33a6:	bf00      	nop
    33a8:	40065000 	.word	0x40065000
    33ac:	00017e78 	.word	0x00017e78

000033b0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    33b0:	b084      	sub	sp, #16
    33b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    33b4:	4b10      	ldr	r3, [pc, #64]	; (33f8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    33b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    33b8:	4a0f      	ldr	r2, [pc, #60]	; (33f8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    33ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    33be:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    33c0:	4b0d      	ldr	r3, [pc, #52]	; (33f8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    33c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    33c4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    33c6:	9b03      	ldr	r3, [sp, #12]
    33c8:	f023 030f 	bic.w	r3, r3, #15
    33cc:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    33ce:	9b01      	ldr	r3, [sp, #4]
    33d0:	685b      	ldr	r3, [r3, #4]
    33d2:	3b01      	subs	r3, #1
    33d4:	005b      	lsls	r3, r3, #1
    33d6:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    33da:	9b01      	ldr	r3, [sp, #4]
    33dc:	7a1b      	ldrb	r3, [r3, #8]
    33de:	3b01      	subs	r3, #1
    33e0:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    33e4:	4313      	orrs	r3, r2
    33e6:	9a03      	ldr	r2, [sp, #12]
    33e8:	4313      	orrs	r3, r2
    33ea:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    33ec:	4a02      	ldr	r2, [pc, #8]	; (33f8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    33ee:	9b03      	ldr	r3, [sp, #12]
    33f0:	6693      	str	r3, [r2, #104]	; 0x68
}
    33f2:	bf00      	nop
    33f4:	b004      	add	sp, #16
    33f6:	4770      	bx	lr
    33f8:	40048000 	.word	0x40048000

000033fc <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    33fc:	b082      	sub	sp, #8
    33fe:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3400:	bf00      	nop
    3402:	b002      	add	sp, #8
    3404:	4770      	bx	lr
	...

00003408 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3408:	b082      	sub	sp, #8
    340a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    340c:	bf00      	nop
    340e:	b002      	add	sp, #8
    3410:	4770      	bx	lr

00003412 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3412:	b082      	sub	sp, #8
    3414:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3416:	bf00      	nop
    3418:	b002      	add	sp, #8
    341a:	4770      	bx	lr

0000341c <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    341c:	b500      	push	{lr}
    341e:	b083      	sub	sp, #12
    3420:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3422:	9b01      	ldr	r3, [sp, #4]
    3424:	2b00      	cmp	r3, #0
    3426:	d002      	beq.n	342e <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3428:	9801      	ldr	r0, [sp, #4]
    342a:	f000 f86a 	bl	3502 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    342e:	bf00      	nop
    3430:	b003      	add	sp, #12
    3432:	f85d fb04 	ldr.w	pc, [sp], #4

00003436 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3436:	b500      	push	{lr}
    3438:	b083      	sub	sp, #12
    343a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    343c:	9b01      	ldr	r3, [sp, #4]
    343e:	2b00      	cmp	r3, #0
    3440:	d002      	beq.n	3448 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3442:	9801      	ldr	r0, [sp, #4]
    3444:	f000 f884 	bl	3550 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3448:	bf00      	nop
    344a:	b003      	add	sp, #12
    344c:	f85d fb04 	ldr.w	pc, [sp], #4

00003450 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3450:	b500      	push	{lr}
    3452:	b089      	sub	sp, #36	; 0x24
    3454:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3456:	2300      	movs	r3, #0
    3458:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    345c:	9b01      	ldr	r3, [sp, #4]
    345e:	2b00      	cmp	r3, #0
    3460:	d031      	beq.n	34c6 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3462:	4b1b      	ldr	r3, [pc, #108]	; (34d0 <Clock_Ip_CompleteSOSC+0x80>)
    3464:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3468:	f003 0301 	and.w	r3, r3, #1
    346c:	2b00      	cmp	r3, #0
    346e:	d02a      	beq.n	34c6 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3470:	aa03      	add	r2, sp, #12
    3472:	a904      	add	r1, sp, #16
    3474:	a805      	add	r0, sp, #20
    3476:	f24c 3350 	movw	r3, #50000	; 0xc350
    347a:	f7ff fd1d 	bl	2eb8 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    347e:	4b14      	ldr	r3, [pc, #80]	; (34d0 <Clock_Ip_CompleteSOSC+0x80>)
    3480:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3484:	0e1b      	lsrs	r3, r3, #24
    3486:	f003 0301 	and.w	r3, r3, #1
    348a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    348c:	9a03      	ldr	r2, [sp, #12]
    348e:	a904      	add	r1, sp, #16
    3490:	ab05      	add	r3, sp, #20
    3492:	4618      	mov	r0, r3
    3494:	f7ff fd2a 	bl	2eec <Clock_Ip_TimeoutExpired>
    3498:	4603      	mov	r3, r0
    349a:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    349e:	9b06      	ldr	r3, [sp, #24]
    34a0:	2b00      	cmp	r3, #0
    34a2:	d106      	bne.n	34b2 <Clock_Ip_CompleteSOSC+0x62>
    34a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34a8:	f083 0301 	eor.w	r3, r3, #1
    34ac:	b2db      	uxtb	r3, r3
    34ae:	2b00      	cmp	r3, #0
    34b0:	d1e5      	bne.n	347e <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    34b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34b6:	2b00      	cmp	r3, #0
    34b8:	d005      	beq.n	34c6 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    34ba:	9b01      	ldr	r3, [sp, #4]
    34bc:	681b      	ldr	r3, [r3, #0]
    34be:	4619      	mov	r1, r3
    34c0:	2001      	movs	r0, #1
    34c2:	f7ff fce9 	bl	2e98 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    34c6:	bf00      	nop
    34c8:	b009      	add	sp, #36	; 0x24
    34ca:	f85d fb04 	ldr.w	pc, [sp], #4
    34ce:	bf00      	nop
    34d0:	40064000 	.word	0x40064000

000034d4 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    34d4:	b500      	push	{lr}
    34d6:	b083      	sub	sp, #12
    34d8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    34da:	9801      	ldr	r0, [sp, #4]
    34dc:	f000 f8c0 	bl	3660 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    34e0:	bf00      	nop
    34e2:	b003      	add	sp, #12
    34e4:	f85d fb04 	ldr.w	pc, [sp], #4

000034e8 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    34e8:	b500      	push	{lr}
    34ea:	b083      	sub	sp, #12
    34ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34ee:	9b01      	ldr	r3, [sp, #4]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d002      	beq.n	34fa <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    34f4:	9801      	ldr	r0, [sp, #4]
    34f6:	f000 f8c3 	bl	3680 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34fa:	bf00      	nop
    34fc:	b003      	add	sp, #12
    34fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003502 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3502:	b082      	sub	sp, #8
    3504:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3506:	4b11      	ldr	r3, [pc, #68]	; (354c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3508:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    350c:	4a0f      	ldr	r2, [pc, #60]	; (354c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    350e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3512:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3516:	4b0d      	ldr	r3, [pc, #52]	; (354c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3518:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    351c:	4a0b      	ldr	r2, [pc, #44]	; (354c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    351e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3522:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3526:	4b09      	ldr	r3, [pc, #36]	; (354c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3528:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    352c:	4a07      	ldr	r2, [pc, #28]	; (354c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    352e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3532:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3536:	4b05      	ldr	r3, [pc, #20]	; (354c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3538:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    353c:	4a03      	ldr	r2, [pc, #12]	; (354c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    353e:	f023 0301 	bic.w	r3, r3, #1
    3542:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3546:	bf00      	nop
    3548:	b002      	add	sp, #8
    354a:	4770      	bx	lr
    354c:	40064000 	.word	0x40064000

00003550 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3550:	b082      	sub	sp, #8
    3552:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3554:	9b01      	ldr	r3, [sp, #4]
    3556:	891b      	ldrh	r3, [r3, #8]
    3558:	2b01      	cmp	r3, #1
    355a:	d174      	bne.n	3646 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    355c:	9b01      	ldr	r3, [sp, #4]
    355e:	7bdb      	ldrb	r3, [r3, #15]
    3560:	2b00      	cmp	r3, #0
    3562:	d002      	beq.n	356a <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3564:	2b01      	cmp	r3, #1
    3566:	d009      	beq.n	357c <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3568:	e011      	b.n	358e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    356a:	4b39      	ldr	r3, [pc, #228]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    356c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3570:	4a37      	ldr	r2, [pc, #220]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3572:	f023 0308 	bic.w	r3, r3, #8
    3576:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    357a:	e008      	b.n	358e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    357c:	4b34      	ldr	r3, [pc, #208]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    357e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3582:	4a33      	ldr	r2, [pc, #204]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3584:	f043 0308 	orr.w	r3, r3, #8
    3588:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    358c:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    358e:	4b30      	ldr	r3, [pc, #192]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3590:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3594:	4a2e      	ldr	r2, [pc, #184]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3596:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    359a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    359e:	9b01      	ldr	r3, [sp, #4]
    35a0:	685b      	ldr	r3, [r3, #4]
    35a2:	4a2c      	ldr	r2, [pc, #176]	; (3654 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    35a4:	4293      	cmp	r3, r2
    35a6:	d90d      	bls.n	35c4 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    35a8:	9b01      	ldr	r3, [sp, #4]
    35aa:	685b      	ldr	r3, [r3, #4]
    35ac:	4a2a      	ldr	r2, [pc, #168]	; (3658 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    35ae:	4293      	cmp	r3, r2
    35b0:	d208      	bcs.n	35c4 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    35b2:	4b27      	ldr	r3, [pc, #156]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    35b8:	4a25      	ldr	r2, [pc, #148]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35ba:	f043 0320 	orr.w	r3, r3, #32
    35be:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    35c2:	e007      	b.n	35d4 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    35c4:	4b22      	ldr	r3, [pc, #136]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    35ca:	4a21      	ldr	r2, [pc, #132]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    35d0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    35d4:	9b01      	ldr	r3, [sp, #4]
    35d6:	7b1b      	ldrb	r3, [r3, #12]
    35d8:	2b00      	cmp	r3, #0
    35da:	d108      	bne.n	35ee <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    35dc:	4b1c      	ldr	r3, [pc, #112]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    35e2:	4a1b      	ldr	r2, [pc, #108]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35e4:	f043 0304 	orr.w	r3, r3, #4
    35e8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    35ec:	e007      	b.n	35fe <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    35ee:	4b18      	ldr	r3, [pc, #96]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    35f4:	4a16      	ldr	r2, [pc, #88]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35f6:	f023 0304 	bic.w	r3, r3, #4
    35fa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    35fe:	9b01      	ldr	r3, [sp, #4]
    3600:	7c1b      	ldrb	r3, [r3, #16]
    3602:	2b02      	cmp	r3, #2
    3604:	d011      	beq.n	362a <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3606:	2b02      	cmp	r3, #2
    3608:	dc14      	bgt.n	3634 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    360a:	2b00      	cmp	r3, #0
    360c:	d002      	beq.n	3614 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    360e:	2b01      	cmp	r3, #1
    3610:	d005      	beq.n	361e <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3612:	e00f      	b.n	3634 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3614:	4b0e      	ldr	r3, [pc, #56]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3616:	2201      	movs	r2, #1
    3618:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    361c:	e014      	b.n	3648 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    361e:	4b0c      	ldr	r3, [pc, #48]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3620:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3624:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3628:	e00e      	b.n	3648 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    362a:	4b09      	ldr	r3, [pc, #36]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    362c:	4a0b      	ldr	r2, [pc, #44]	; (365c <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    362e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3632:	e009      	b.n	3648 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3634:	4b06      	ldr	r3, [pc, #24]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3636:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    363a:	4a05      	ldr	r2, [pc, #20]	; (3650 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    363c:	f043 0301 	orr.w	r3, r3, #1
    3640:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3644:	e000      	b.n	3648 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3646:	bf00      	nop
}
    3648:	bf00      	nop
    364a:	b002      	add	sp, #8
    364c:	4770      	bx	lr
    364e:	bf00      	nop
    3650:	40064000 	.word	0x40064000
    3654:	003d08ff 	.word	0x003d08ff
    3658:	007a1200 	.word	0x007a1200
    365c:	00030001 	.word	0x00030001

00003660 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3660:	b082      	sub	sp, #8
    3662:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3664:	4b05      	ldr	r3, [pc, #20]	; (367c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3666:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    366a:	4a04      	ldr	r2, [pc, #16]	; (367c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    366c:	f023 0301 	bic.w	r3, r3, #1
    3670:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3674:	bf00      	nop
    3676:	b002      	add	sp, #8
    3678:	4770      	bx	lr
    367a:	bf00      	nop
    367c:	40064000 	.word	0x40064000

00003680 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3680:	b082      	sub	sp, #8
    3682:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3684:	9b01      	ldr	r3, [sp, #4]
    3686:	891b      	ldrh	r3, [r3, #8]
    3688:	2b01      	cmp	r3, #1
    368a:	d107      	bne.n	369c <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    368c:	4b05      	ldr	r3, [pc, #20]	; (36a4 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    368e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3692:	4a04      	ldr	r2, [pc, #16]	; (36a4 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3694:	f043 0301 	orr.w	r3, r3, #1
    3698:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    369c:	bf00      	nop
    369e:	b002      	add	sp, #8
    36a0:	4770      	bx	lr
    36a2:	bf00      	nop
    36a4:	40064000 	.word	0x40064000

000036a8 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    36a8:	b082      	sub	sp, #8
    36aa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    36ac:	bf00      	nop
    36ae:	b002      	add	sp, #8
    36b0:	4770      	bx	lr

000036b2 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    36b2:	b082      	sub	sp, #8
    36b4:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    36b6:	2300      	movs	r3, #0
}
    36b8:	4618      	mov	r0, r3
    36ba:	b002      	add	sp, #8
    36bc:	4770      	bx	lr

000036be <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    36be:	b082      	sub	sp, #8
    36c0:	9001      	str	r0, [sp, #4]
    36c2:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    36c4:	bf00      	nop
    36c6:	b002      	add	sp, #8
    36c8:	4770      	bx	lr
	...

000036cc <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    36cc:	b082      	sub	sp, #8
    36ce:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    36d0:	bf00      	nop
    36d2:	b002      	add	sp, #8
    36d4:	4770      	bx	lr

000036d6 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    36d6:	b082      	sub	sp, #8
    36d8:	9001      	str	r0, [sp, #4]
    36da:	460b      	mov	r3, r1
    36dc:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    36e0:	bf00      	nop
    36e2:	b002      	add	sp, #8
    36e4:	4770      	bx	lr

000036e6 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    36e6:	b500      	push	{lr}
    36e8:	b083      	sub	sp, #12
    36ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36ec:	9b01      	ldr	r3, [sp, #4]
    36ee:	2b00      	cmp	r3, #0
    36f0:	d002      	beq.n	36f8 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    36f2:	9801      	ldr	r0, [sp, #4]
    36f4:	f000 f8e7 	bl	38c6 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36f8:	bf00      	nop
    36fa:	b003      	add	sp, #12
    36fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003700 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3700:	b500      	push	{lr}
    3702:	b085      	sub	sp, #20
    3704:	9001      	str	r0, [sp, #4]
    3706:	460b      	mov	r3, r1
    3708:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    370c:	9b01      	ldr	r3, [sp, #4]
    370e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3710:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3714:	2b00      	cmp	r3, #0
    3716:	d003      	beq.n	3720 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3718:	2300      	movs	r3, #0
    371a:	f8ad 300c 	strh.w	r3, [sp, #12]
    371e:	e002      	b.n	3726 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3720:	2301      	movs	r3, #1
    3722:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3726:	ab02      	add	r3, sp, #8
    3728:	4618      	mov	r0, r3
    372a:	f7ff ffdc 	bl	36e6 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    372e:	bf00      	nop
    3730:	b005      	add	sp, #20
    3732:	f85d fb04 	ldr.w	pc, [sp], #4

00003736 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    3736:	b500      	push	{lr}
    3738:	b083      	sub	sp, #12
    373a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    373c:	9b01      	ldr	r3, [sp, #4]
    373e:	2b00      	cmp	r3, #0
    3740:	d002      	beq.n	3748 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3742:	9801      	ldr	r0, [sp, #4]
    3744:	f000 f8d6 	bl	38f4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3748:	bf00      	nop
    374a:	b003      	add	sp, #12
    374c:	f85d fb04 	ldr.w	pc, [sp], #4

00003750 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3750:	b500      	push	{lr}
    3752:	b085      	sub	sp, #20
    3754:	9001      	str	r0, [sp, #4]
    3756:	460b      	mov	r3, r1
    3758:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    375c:	9b01      	ldr	r3, [sp, #4]
    375e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3760:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3764:	2b00      	cmp	r3, #0
    3766:	d003      	beq.n	3770 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3768:	2300      	movs	r3, #0
    376a:	f8ad 300c 	strh.w	r3, [sp, #12]
    376e:	e002      	b.n	3776 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3770:	2301      	movs	r3, #1
    3772:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3776:	ab02      	add	r3, sp, #8
    3778:	4618      	mov	r0, r3
    377a:	f7ff ffdc 	bl	3736 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    377e:	bf00      	nop
    3780:	b005      	add	sp, #20
    3782:	f85d fb04 	ldr.w	pc, [sp], #4

00003786 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3786:	b500      	push	{lr}
    3788:	b083      	sub	sp, #12
    378a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    378c:	9b01      	ldr	r3, [sp, #4]
    378e:	2b00      	cmp	r3, #0
    3790:	d002      	beq.n	3798 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3792:	9801      	ldr	r0, [sp, #4]
    3794:	f000 f8c6 	bl	3924 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3798:	bf00      	nop
    379a:	b003      	add	sp, #12
    379c:	f85d fb04 	ldr.w	pc, [sp], #4

000037a0 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    37a0:	b500      	push	{lr}
    37a2:	b085      	sub	sp, #20
    37a4:	9001      	str	r0, [sp, #4]
    37a6:	460b      	mov	r3, r1
    37a8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37ac:	9b01      	ldr	r3, [sp, #4]
    37ae:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    37b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37b4:	2b00      	cmp	r3, #0
    37b6:	d003      	beq.n	37c0 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    37b8:	2300      	movs	r3, #0
    37ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    37be:	e002      	b.n	37c6 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37c0:	2301      	movs	r3, #1
    37c2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    37c6:	ab02      	add	r3, sp, #8
    37c8:	4618      	mov	r0, r3
    37ca:	f7ff ffdc 	bl	3786 <Clock_Ip_ClockSetSimClkoutEnable>
}
    37ce:	bf00      	nop
    37d0:	b005      	add	sp, #20
    37d2:	f85d fb04 	ldr.w	pc, [sp], #4

000037d6 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    37d6:	b500      	push	{lr}
    37d8:	b083      	sub	sp, #12
    37da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37dc:	9b01      	ldr	r3, [sp, #4]
    37de:	2b00      	cmp	r3, #0
    37e0:	d002      	beq.n	37e8 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    37e2:	9801      	ldr	r0, [sp, #4]
    37e4:	f000 f8b6 	bl	3954 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37e8:	bf00      	nop
    37ea:	b003      	add	sp, #12
    37ec:	f85d fb04 	ldr.w	pc, [sp], #4

000037f0 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    37f0:	b500      	push	{lr}
    37f2:	b085      	sub	sp, #20
    37f4:	9001      	str	r0, [sp, #4]
    37f6:	460b      	mov	r3, r1
    37f8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37fc:	9b01      	ldr	r3, [sp, #4]
    37fe:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3800:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3804:	2b00      	cmp	r3, #0
    3806:	d003      	beq.n	3810 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3808:	2300      	movs	r3, #0
    380a:	f8ad 300c 	strh.w	r3, [sp, #12]
    380e:	e002      	b.n	3816 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3810:	2301      	movs	r3, #1
    3812:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3816:	ab02      	add	r3, sp, #8
    3818:	4618      	mov	r0, r3
    381a:	f7ff ffdc 	bl	37d6 <Clock_Ip_ClockSetPccCgcEnable>
}
    381e:	bf00      	nop
    3820:	b005      	add	sp, #20
    3822:	f85d fb04 	ldr.w	pc, [sp], #4

00003826 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3826:	b500      	push	{lr}
    3828:	b083      	sub	sp, #12
    382a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    382c:	9b01      	ldr	r3, [sp, #4]
    382e:	2b00      	cmp	r3, #0
    3830:	d002      	beq.n	3838 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3832:	9801      	ldr	r0, [sp, #4]
    3834:	f000 f8bc 	bl	39b0 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3838:	bf00      	nop
    383a:	b003      	add	sp, #12
    383c:	f85d fb04 	ldr.w	pc, [sp], #4

00003840 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3840:	b500      	push	{lr}
    3842:	b085      	sub	sp, #20
    3844:	9001      	str	r0, [sp, #4]
    3846:	460b      	mov	r3, r1
    3848:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    384c:	9b01      	ldr	r3, [sp, #4]
    384e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3850:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3854:	2b00      	cmp	r3, #0
    3856:	d003      	beq.n	3860 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3858:	2300      	movs	r3, #0
    385a:	f8ad 300c 	strh.w	r3, [sp, #12]
    385e:	e002      	b.n	3866 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3860:	2301      	movs	r3, #1
    3862:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3866:	ab02      	add	r3, sp, #8
    3868:	4618      	mov	r0, r3
    386a:	f7ff ffdc 	bl	3826 <Clock_Ip_ClockSetSimGate>
}
    386e:	bf00      	nop
    3870:	b005      	add	sp, #20
    3872:	f85d fb04 	ldr.w	pc, [sp], #4

00003876 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3876:	b500      	push	{lr}
    3878:	b083      	sub	sp, #12
    387a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    387c:	9b01      	ldr	r3, [sp, #4]
    387e:	2b00      	cmp	r3, #0
    3880:	d002      	beq.n	3888 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3882:	9801      	ldr	r0, [sp, #4]
    3884:	f000 f8c0 	bl	3a08 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3888:	bf00      	nop
    388a:	b003      	add	sp, #12
    388c:	f85d fb04 	ldr.w	pc, [sp], #4

00003890 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3890:	b500      	push	{lr}
    3892:	b085      	sub	sp, #20
    3894:	9001      	str	r0, [sp, #4]
    3896:	460b      	mov	r3, r1
    3898:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    389c:	9b01      	ldr	r3, [sp, #4]
    389e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    38a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    38a4:	2b00      	cmp	r3, #0
    38a6:	d003      	beq.n	38b0 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    38a8:	2300      	movs	r3, #0
    38aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    38ae:	e002      	b.n	38b6 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    38b0:	2301      	movs	r3, #1
    38b2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    38b6:	ab02      	add	r3, sp, #8
    38b8:	4618      	mov	r0, r3
    38ba:	f7ff ffdc 	bl	3876 <Clock_Ip_ClockSetSimTraceEnable>
}
    38be:	bf00      	nop
    38c0:	b005      	add	sp, #20
    38c2:	f85d fb04 	ldr.w	pc, [sp], #4

000038c6 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    38c6:	b084      	sub	sp, #16
    38c8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    38ca:	4b09      	ldr	r3, [pc, #36]	; (38f0 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    38cc:	691b      	ldr	r3, [r3, #16]
    38ce:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    38d0:	9b03      	ldr	r3, [sp, #12]
    38d2:	f023 0301 	bic.w	r3, r3, #1
    38d6:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    38d8:	9b01      	ldr	r3, [sp, #4]
    38da:	889b      	ldrh	r3, [r3, #4]
    38dc:	461a      	mov	r2, r3
    38de:	9b03      	ldr	r3, [sp, #12]
    38e0:	4313      	orrs	r3, r2
    38e2:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    38e4:	4a02      	ldr	r2, [pc, #8]	; (38f0 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    38e6:	9b03      	ldr	r3, [sp, #12]
    38e8:	6113      	str	r3, [r2, #16]
}
    38ea:	bf00      	nop
    38ec:	b004      	add	sp, #16
    38ee:	4770      	bx	lr
    38f0:	40048000 	.word	0x40048000

000038f4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    38f4:	b084      	sub	sp, #16
    38f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    38f8:	4b09      	ldr	r3, [pc, #36]	; (3920 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    38fa:	691b      	ldr	r3, [r3, #16]
    38fc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    38fe:	9b03      	ldr	r3, [sp, #12]
    3900:	f023 0302 	bic.w	r3, r3, #2
    3904:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3906:	9b01      	ldr	r3, [sp, #4]
    3908:	889b      	ldrh	r3, [r3, #4]
    390a:	005b      	lsls	r3, r3, #1
    390c:	9a03      	ldr	r2, [sp, #12]
    390e:	4313      	orrs	r3, r2
    3910:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3912:	4a03      	ldr	r2, [pc, #12]	; (3920 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3914:	9b03      	ldr	r3, [sp, #12]
    3916:	6113      	str	r3, [r2, #16]
}
    3918:	bf00      	nop
    391a:	b004      	add	sp, #16
    391c:	4770      	bx	lr
    391e:	bf00      	nop
    3920:	40048000 	.word	0x40048000

00003924 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3924:	b084      	sub	sp, #16
    3926:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3928:	4b09      	ldr	r3, [pc, #36]	; (3950 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    392a:	685b      	ldr	r3, [r3, #4]
    392c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    392e:	9b03      	ldr	r3, [sp, #12]
    3930:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3934:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    3936:	9b01      	ldr	r3, [sp, #4]
    3938:	889b      	ldrh	r3, [r3, #4]
    393a:	02db      	lsls	r3, r3, #11
    393c:	9a03      	ldr	r2, [sp, #12]
    393e:	4313      	orrs	r3, r2
    3940:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3942:	4a03      	ldr	r2, [pc, #12]	; (3950 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3944:	9b03      	ldr	r3, [sp, #12]
    3946:	6053      	str	r3, [r2, #4]
}
    3948:	bf00      	nop
    394a:	b004      	add	sp, #16
    394c:	4770      	bx	lr
    394e:	bf00      	nop
    3950:	40048000 	.word	0x40048000

00003954 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3954:	b084      	sub	sp, #16
    3956:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3958:	4913      	ldr	r1, [pc, #76]	; (39a8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    395a:	9b01      	ldr	r3, [sp, #4]
    395c:	681a      	ldr	r2, [r3, #0]
    395e:	4813      	ldr	r0, [pc, #76]	; (39ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3960:	4613      	mov	r3, r2
    3962:	00db      	lsls	r3, r3, #3
    3964:	4413      	add	r3, r2
    3966:	4403      	add	r3, r0
    3968:	3306      	adds	r3, #6
    396a:	781b      	ldrb	r3, [r3, #0]
    396c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3970:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3972:	9b03      	ldr	r3, [sp, #12]
    3974:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3978:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    397a:	9b01      	ldr	r3, [sp, #4]
    397c:	889b      	ldrh	r3, [r3, #4]
    397e:	079b      	lsls	r3, r3, #30
    3980:	9a03      	ldr	r2, [sp, #12]
    3982:	4313      	orrs	r3, r2
    3984:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3986:	4908      	ldr	r1, [pc, #32]	; (39a8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3988:	9b01      	ldr	r3, [sp, #4]
    398a:	681a      	ldr	r2, [r3, #0]
    398c:	4807      	ldr	r0, [pc, #28]	; (39ac <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    398e:	4613      	mov	r3, r2
    3990:	00db      	lsls	r3, r3, #3
    3992:	4413      	add	r3, r2
    3994:	4403      	add	r3, r0
    3996:	3306      	adds	r3, #6
    3998:	781b      	ldrb	r3, [r3, #0]
    399a:	461a      	mov	r2, r3
    399c:	9b03      	ldr	r3, [sp, #12]
    399e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    39a2:	bf00      	nop
    39a4:	b004      	add	sp, #16
    39a6:	4770      	bx	lr
    39a8:	40065000 	.word	0x40065000
    39ac:	00017e78 	.word	0x00017e78

000039b0 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    39b0:	b086      	sub	sp, #24
    39b2:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    39b4:	9b01      	ldr	r3, [sp, #4]
    39b6:	889b      	ldrh	r3, [r3, #4]
    39b8:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    39ba:	9b01      	ldr	r3, [sp, #4]
    39bc:	681a      	ldr	r2, [r3, #0]
    39be:	4910      	ldr	r1, [pc, #64]	; (3a00 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    39c0:	4613      	mov	r3, r2
    39c2:	00db      	lsls	r3, r3, #3
    39c4:	4413      	add	r3, r2
    39c6:	440b      	add	r3, r1
    39c8:	3306      	adds	r3, #6
    39ca:	781b      	ldrb	r3, [r3, #0]
    39cc:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    39ce:	4b0d      	ldr	r3, [pc, #52]	; (3a04 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    39d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    39d2:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    39d4:	2201      	movs	r2, #1
    39d6:	9b04      	ldr	r3, [sp, #16]
    39d8:	fa02 f303 	lsl.w	r3, r2, r3
    39dc:	43db      	mvns	r3, r3
    39de:	9a03      	ldr	r2, [sp, #12]
    39e0:	4013      	ands	r3, r2
    39e2:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    39e4:	9a05      	ldr	r2, [sp, #20]
    39e6:	9b04      	ldr	r3, [sp, #16]
    39e8:	fa02 f303 	lsl.w	r3, r2, r3
    39ec:	9a03      	ldr	r2, [sp, #12]
    39ee:	4313      	orrs	r3, r2
    39f0:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    39f2:	4a04      	ldr	r2, [pc, #16]	; (3a04 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    39f4:	9b03      	ldr	r3, [sp, #12]
    39f6:	6413      	str	r3, [r2, #64]	; 0x40
}
    39f8:	bf00      	nop
    39fa:	b006      	add	sp, #24
    39fc:	4770      	bx	lr
    39fe:	bf00      	nop
    3a00:	00017e78 	.word	0x00017e78
    3a04:	40048000 	.word	0x40048000

00003a08 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3a08:	b084      	sub	sp, #16
    3a0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3a0c:	4b0a      	ldr	r3, [pc, #40]	; (3a38 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3a10:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3a12:	9b01      	ldr	r3, [sp, #4]
    3a14:	889b      	ldrh	r3, [r3, #4]
    3a16:	2b01      	cmp	r3, #1
    3a18:	d104      	bne.n	3a24 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3a1a:	9b03      	ldr	r3, [sp, #12]
    3a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3a20:	9303      	str	r3, [sp, #12]
    3a22:	e003      	b.n	3a2c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3a24:	9b03      	ldr	r3, [sp, #12]
    3a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3a2a:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3a2c:	4a02      	ldr	r2, [pc, #8]	; (3a38 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3a2e:	9b03      	ldr	r3, [sp, #12]
    3a30:	6693      	str	r3, [r2, #104]	; 0x68
}
    3a32:	bf00      	nop
    3a34:	b004      	add	sp, #16
    3a36:	4770      	bx	lr
    3a38:	40048000 	.word	0x40048000

00003a3c <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3a3c:	b082      	sub	sp, #8
    3a3e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3a40:	bf00      	nop
    3a42:	b002      	add	sp, #8
    3a44:	4770      	bx	lr

00003a46 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3a46:	b082      	sub	sp, #8
    3a48:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3a4a:	bf00      	nop
    3a4c:	b002      	add	sp, #8
    3a4e:	4770      	bx	lr

00003a50 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3a50:	b500      	push	{lr}
    3a52:	b083      	sub	sp, #12
    3a54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a56:	9b01      	ldr	r3, [sp, #4]
    3a58:	2b00      	cmp	r3, #0
    3a5a:	d002      	beq.n	3a62 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3a5c:	9801      	ldr	r0, [sp, #4]
    3a5e:	f000 f8d1 	bl	3c04 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a62:	bf00      	nop
    3a64:	b003      	add	sp, #12
    3a66:	f85d fb04 	ldr.w	pc, [sp], #4

00003a6a <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3a6a:	b500      	push	{lr}
    3a6c:	b083      	sub	sp, #12
    3a6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a70:	9b01      	ldr	r3, [sp, #4]
    3a72:	2b00      	cmp	r3, #0
    3a74:	d002      	beq.n	3a7c <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3a76:	9801      	ldr	r0, [sp, #4]
    3a78:	f000 f950 	bl	3d1c <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a7c:	bf00      	nop
    3a7e:	b003      	add	sp, #12
    3a80:	f85d fb04 	ldr.w	pc, [sp], #4

00003a84 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3a84:	b500      	push	{lr}
    3a86:	b083      	sub	sp, #12
    3a88:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3a8a:	9801      	ldr	r0, [sp, #4]
    3a8c:	f000 f98e 	bl	3dac <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3a90:	bf00      	nop
    3a92:	b003      	add	sp, #12
    3a94:	f85d fb04 	ldr.w	pc, [sp], #4

00003a98 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3a98:	b500      	push	{lr}
    3a9a:	b083      	sub	sp, #12
    3a9c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a9e:	9b01      	ldr	r3, [sp, #4]
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	d002      	beq.n	3aaa <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3aa4:	9801      	ldr	r0, [sp, #4]
    3aa6:	f000 f999 	bl	3ddc <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3aaa:	bf00      	nop
    3aac:	b003      	add	sp, #12
    3aae:	f85d fb04 	ldr.w	pc, [sp], #4

00003ab2 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3ab2:	b500      	push	{lr}
    3ab4:	b083      	sub	sp, #12
    3ab6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ab8:	9b01      	ldr	r3, [sp, #4]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d002      	beq.n	3ac4 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3abe:	9801      	ldr	r0, [sp, #4]
    3ac0:	f000 f9b0 	bl	3e24 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ac4:	bf00      	nop
    3ac6:	b003      	add	sp, #12
    3ac8:	f85d fb04 	ldr.w	pc, [sp], #4

00003acc <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3acc:	b500      	push	{lr}
    3ace:	b083      	sub	sp, #12
    3ad0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3ad2:	9801      	ldr	r0, [sp, #4]
    3ad4:	f000 f9ba 	bl	3e4c <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3ad8:	bf00      	nop
    3ada:	b003      	add	sp, #12
    3adc:	f85d fb04 	ldr.w	pc, [sp], #4

00003ae0 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3ae0:	b500      	push	{lr}
    3ae2:	b083      	sub	sp, #12
    3ae4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ae6:	9b01      	ldr	r3, [sp, #4]
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d002      	beq.n	3af2 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3aec:	9801      	ldr	r0, [sp, #4]
    3aee:	f000 f9bd 	bl	3e6c <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3af2:	bf00      	nop
    3af4:	b003      	add	sp, #12
    3af6:	f85d fb04 	ldr.w	pc, [sp], #4

00003afa <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3afa:	b500      	push	{lr}
    3afc:	b083      	sub	sp, #12
    3afe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b00:	9b01      	ldr	r3, [sp, #4]
    3b02:	2b00      	cmp	r3, #0
    3b04:	d002      	beq.n	3b0c <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3b06:	9801      	ldr	r0, [sp, #4]
    3b08:	f000 f9d4 	bl	3eb4 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b0c:	bf00      	nop
    3b0e:	b003      	add	sp, #12
    3b10:	f85d fb04 	ldr.w	pc, [sp], #4

00003b14 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3b14:	b500      	push	{lr}
    3b16:	b083      	sub	sp, #12
    3b18:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3b1a:	9801      	ldr	r0, [sp, #4]
    3b1c:	f000 f9de 	bl	3edc <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b20:	bf00      	nop
    3b22:	b003      	add	sp, #12
    3b24:	f85d fb04 	ldr.w	pc, [sp], #4

00003b28 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3b28:	b500      	push	{lr}
    3b2a:	b089      	sub	sp, #36	; 0x24
    3b2c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3b2e:	2300      	movs	r3, #0
    3b30:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3b34:	4b20      	ldr	r3, [pc, #128]	; (3bb8 <SetInputSouceSytemClock+0x90>)
    3b36:	695b      	ldr	r3, [r3, #20]
    3b38:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3b3a:	9b06      	ldr	r3, [sp, #24]
    3b3c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3b40:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3b42:	9b01      	ldr	r3, [sp, #4]
    3b44:	061b      	lsls	r3, r3, #24
    3b46:	9a06      	ldr	r2, [sp, #24]
    3b48:	4313      	orrs	r3, r2
    3b4a:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3b4c:	4a1a      	ldr	r2, [pc, #104]	; (3bb8 <SetInputSouceSytemClock+0x90>)
    3b4e:	9b06      	ldr	r3, [sp, #24]
    3b50:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3b52:	aa02      	add	r2, sp, #8
    3b54:	a903      	add	r1, sp, #12
    3b56:	a804      	add	r0, sp, #16
    3b58:	f24c 3350 	movw	r3, #50000	; 0xc350
    3b5c:	f7ff f9ac 	bl	2eb8 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3b60:	4b15      	ldr	r3, [pc, #84]	; (3bb8 <SetInputSouceSytemClock+0x90>)
    3b62:	691b      	ldr	r3, [r3, #16]
    3b64:	0e1b      	lsrs	r3, r3, #24
    3b66:	f003 030f 	and.w	r3, r3, #15
    3b6a:	9a01      	ldr	r2, [sp, #4]
    3b6c:	429a      	cmp	r2, r3
    3b6e:	bf0c      	ite	eq
    3b70:	2301      	moveq	r3, #1
    3b72:	2300      	movne	r3, #0
    3b74:	b2db      	uxtb	r3, r3
    3b76:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3b78:	9a02      	ldr	r2, [sp, #8]
    3b7a:	a903      	add	r1, sp, #12
    3b7c:	ab04      	add	r3, sp, #16
    3b7e:	4618      	mov	r0, r3
    3b80:	f7ff f9b4 	bl	2eec <Clock_Ip_TimeoutExpired>
    3b84:	4603      	mov	r3, r0
    3b86:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3b8a:	9b05      	ldr	r3, [sp, #20]
    3b8c:	2b00      	cmp	r3, #0
    3b8e:	d106      	bne.n	3b9e <SetInputSouceSytemClock+0x76>
    3b90:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3b94:	f083 0301 	eor.w	r3, r3, #1
    3b98:	b2db      	uxtb	r3, r3
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d1e0      	bne.n	3b60 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3b9e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d003      	beq.n	3bae <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3ba6:	2105      	movs	r1, #5
    3ba8:	2001      	movs	r0, #1
    3baa:	f7ff f975 	bl	2e98 <Clock_Ip_ReportClockErrors>
    }
}
    3bae:	bf00      	nop
    3bb0:	b009      	add	sp, #36	; 0x24
    3bb2:	f85d fb04 	ldr.w	pc, [sp], #4
    3bb6:	bf00      	nop
    3bb8:	40064000 	.word	0x40064000

00003bbc <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3bbc:	b500      	push	{lr}
    3bbe:	b083      	sub	sp, #12
    3bc0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bc2:	9b01      	ldr	r3, [sp, #4]
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d002      	beq.n	3bce <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3bc8:	9801      	ldr	r0, [sp, #4]
    3bca:	f000 f997 	bl	3efc <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bce:	bf00      	nop
    3bd0:	b003      	add	sp, #12
    3bd2:	f85d fb04 	ldr.w	pc, [sp], #4

00003bd6 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3bd6:	b500      	push	{lr}
    3bd8:	b083      	sub	sp, #12
    3bda:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bdc:	9b01      	ldr	r3, [sp, #4]
    3bde:	2b00      	cmp	r3, #0
    3be0:	d002      	beq.n	3be8 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3be2:	9801      	ldr	r0, [sp, #4]
    3be4:	f000 fa7e 	bl	40e4 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3be8:	bf00      	nop
    3bea:	b003      	add	sp, #12
    3bec:	f85d fb04 	ldr.w	pc, [sp], #4

00003bf0 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3bf0:	b500      	push	{lr}
    3bf2:	b083      	sub	sp, #12
    3bf4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3bf6:	9801      	ldr	r0, [sp, #4]
    3bf8:	f000 fab8 	bl	416c <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3bfc:	bf00      	nop
    3bfe:	b003      	add	sp, #12
    3c00:	f85d fb04 	ldr.w	pc, [sp], #4

00003c04 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c04:	b500      	push	{lr}
    3c06:	b08b      	sub	sp, #44	; 0x2c
    3c08:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3c0a:	2300      	movs	r3, #0
    3c0c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3c10:	9b01      	ldr	r3, [sp, #4]
    3c12:	2b00      	cmp	r3, #0
    3c14:	d10b      	bne.n	3c2e <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3c16:	2305      	movs	r3, #5
    3c18:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3c1a:	2301      	movs	r3, #1
    3c1c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3c20:	2301      	movs	r3, #1
    3c22:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3c26:	2301      	movs	r3, #1
    3c28:	f88d 3010 	strb.w	r3, [sp, #16]
    3c2c:	e00e      	b.n	3c4c <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3c2e:	9b01      	ldr	r3, [sp, #4]
    3c30:	681b      	ldr	r3, [r3, #0]
    3c32:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3c34:	9b01      	ldr	r3, [sp, #4]
    3c36:	79db      	ldrb	r3, [r3, #7]
    3c38:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3c3c:	9b01      	ldr	r3, [sp, #4]
    3c3e:	889b      	ldrh	r3, [r3, #4]
    3c40:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3c44:	9b01      	ldr	r3, [sp, #4]
    3c46:	7a1b      	ldrb	r3, [r3, #8]
    3c48:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3c4c:	4b32      	ldr	r3, [pc, #200]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c52:	4a31      	ldr	r2, [pc, #196]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c58:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3c5c:	4b2e      	ldr	r3, [pc, #184]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c62:	4a2d      	ldr	r2, [pc, #180]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c64:	f023 0301 	bic.w	r3, r3, #1
    3c68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3c6c:	4b2a      	ldr	r3, [pc, #168]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c72:	4a29      	ldr	r2, [pc, #164]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c74:	f023 0304 	bic.w	r3, r3, #4
    3c78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3c7c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3c80:	2b01      	cmp	r3, #1
    3c82:	d144      	bne.n	3d0e <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3c84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3c88:	4a23      	ldr	r2, [pc, #140]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c8a:	f003 0301 	and.w	r3, r3, #1
    3c8e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3c92:	4b21      	ldr	r3, [pc, #132]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c98:	4a1f      	ldr	r2, [pc, #124]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c9a:	f043 0301 	orr.w	r3, r3, #1
    3c9e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3ca2:	4b1d      	ldr	r3, [pc, #116]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ca4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3ca8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3cac:	009b      	lsls	r3, r3, #2
    3cae:	f003 0304 	and.w	r3, r3, #4
    3cb2:	4919      	ldr	r1, [pc, #100]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cb4:	4313      	orrs	r3, r2
    3cb6:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3cba:	aa05      	add	r2, sp, #20
    3cbc:	a906      	add	r1, sp, #24
    3cbe:	a807      	add	r0, sp, #28
    3cc0:	f24c 3350 	movw	r3, #50000	; 0xc350
    3cc4:	f7ff f8f8 	bl	2eb8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3cc8:	4b13      	ldr	r3, [pc, #76]	; (3d18 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cce:	0e1b      	lsrs	r3, r3, #24
    3cd0:	f003 0301 	and.w	r3, r3, #1
    3cd4:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3cd6:	9a05      	ldr	r2, [sp, #20]
    3cd8:	a906      	add	r1, sp, #24
    3cda:	ab07      	add	r3, sp, #28
    3cdc:	4618      	mov	r0, r3
    3cde:	f7ff f905 	bl	2eec <Clock_Ip_TimeoutExpired>
    3ce2:	4603      	mov	r3, r0
    3ce4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3ce8:	9b08      	ldr	r3, [sp, #32]
    3cea:	2b00      	cmp	r3, #0
    3cec:	d106      	bne.n	3cfc <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3cee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3cf2:	f083 0301 	eor.w	r3, r3, #1
    3cf6:	b2db      	uxtb	r3, r3
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d1e5      	bne.n	3cc8 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3cfc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d00:	2b00      	cmp	r3, #0
    3d02:	d004      	beq.n	3d0e <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3d04:	9b02      	ldr	r3, [sp, #8]
    3d06:	4619      	mov	r1, r3
    3d08:	2001      	movs	r0, #1
    3d0a:	f7ff f8c5 	bl	2e98 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3d0e:	bf00      	nop
    3d10:	b00b      	add	sp, #44	; 0x2c
    3d12:	f85d fb04 	ldr.w	pc, [sp], #4
    3d16:	bf00      	nop
    3d18:	40064000 	.word	0x40064000

00003d1c <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d1c:	b500      	push	{lr}
    3d1e:	b089      	sub	sp, #36	; 0x24
    3d20:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3d22:	2300      	movs	r3, #0
    3d24:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3d28:	4b1f      	ldr	r3, [pc, #124]	; (3da8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3d2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d2e:	4a1e      	ldr	r2, [pc, #120]	; (3da8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3d30:	f043 0301 	orr.w	r3, r3, #1
    3d34:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3d38:	4b1b      	ldr	r3, [pc, #108]	; (3da8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3d3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d3e:	4a1a      	ldr	r2, [pc, #104]	; (3da8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3d40:	f043 0304 	orr.w	r3, r3, #4
    3d44:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d48:	aa03      	add	r2, sp, #12
    3d4a:	a904      	add	r1, sp, #16
    3d4c:	a805      	add	r0, sp, #20
    3d4e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d52:	f7ff f8b1 	bl	2eb8 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3d56:	4b14      	ldr	r3, [pc, #80]	; (3da8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3d58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d5c:	0e1b      	lsrs	r3, r3, #24
    3d5e:	f003 0301 	and.w	r3, r3, #1
    3d62:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d64:	9a03      	ldr	r2, [sp, #12]
    3d66:	a904      	add	r1, sp, #16
    3d68:	ab05      	add	r3, sp, #20
    3d6a:	4618      	mov	r0, r3
    3d6c:	f7ff f8be 	bl	2eec <Clock_Ip_TimeoutExpired>
    3d70:	4603      	mov	r3, r0
    3d72:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d76:	9b06      	ldr	r3, [sp, #24]
    3d78:	2b00      	cmp	r3, #0
    3d7a:	d106      	bne.n	3d8a <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3d7c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d80:	f083 0301 	eor.w	r3, r3, #1
    3d84:	b2db      	uxtb	r3, r3
    3d86:	2b00      	cmp	r3, #0
    3d88:	d1e5      	bne.n	3d56 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3d8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d005      	beq.n	3d9e <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d92:	9b01      	ldr	r3, [sp, #4]
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	4619      	mov	r1, r3
    3d98:	2001      	movs	r0, #1
    3d9a:	f7ff f87d 	bl	2e98 <Clock_Ip_ReportClockErrors>
    }
}
    3d9e:	bf00      	nop
    3da0:	b009      	add	sp, #36	; 0x24
    3da2:	f85d fb04 	ldr.w	pc, [sp], #4
    3da6:	bf00      	nop
    3da8:	40064000 	.word	0x40064000

00003dac <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3dac:	b082      	sub	sp, #8
    3dae:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3db0:	4b09      	ldr	r3, [pc, #36]	; (3dd8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3db2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3db6:	4a08      	ldr	r2, [pc, #32]	; (3dd8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3db8:	f023 0301 	bic.w	r3, r3, #1
    3dbc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3dc0:	4b05      	ldr	r3, [pc, #20]	; (3dd8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3dc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dc6:	4a04      	ldr	r2, [pc, #16]	; (3dd8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3dc8:	f023 0304 	bic.w	r3, r3, #4
    3dcc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3dd0:	bf00      	nop
    3dd2:	b002      	add	sp, #8
    3dd4:	4770      	bx	lr
    3dd6:	bf00      	nop
    3dd8:	40064000 	.word	0x40064000

00003ddc <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ddc:	b082      	sub	sp, #8
    3dde:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3de0:	4b0f      	ldr	r3, [pc, #60]	; (3e20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3de2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3de6:	4a0e      	ldr	r2, [pc, #56]	; (3e20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3de8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3dec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3df0:	4b0b      	ldr	r3, [pc, #44]	; (3e20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3df6:	4a0a      	ldr	r2, [pc, #40]	; (3e20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3df8:	f023 0304 	bic.w	r3, r3, #4
    3dfc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3e00:	4b07      	ldr	r3, [pc, #28]	; (3e20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e02:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3e06:	9b01      	ldr	r3, [sp, #4]
    3e08:	7a1b      	ldrb	r3, [r3, #8]
    3e0a:	009b      	lsls	r3, r3, #2
    3e0c:	f003 0304 	and.w	r3, r3, #4
    3e10:	4903      	ldr	r1, [pc, #12]	; (3e20 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e12:	4313      	orrs	r3, r2
    3e14:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3e18:	bf00      	nop
    3e1a:	b002      	add	sp, #8
    3e1c:	4770      	bx	lr
    3e1e:	bf00      	nop
    3e20:	40064000 	.word	0x40064000

00003e24 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e24:	b082      	sub	sp, #8
    3e26:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3e28:	9b01      	ldr	r3, [sp, #4]
    3e2a:	889b      	ldrh	r3, [r3, #4]
    3e2c:	2b01      	cmp	r3, #1
    3e2e:	d107      	bne.n	3e40 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3e30:	4b05      	ldr	r3, [pc, #20]	; (3e48 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3e32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e36:	4a04      	ldr	r2, [pc, #16]	; (3e48 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3e38:	f043 0304 	orr.w	r3, r3, #4
    3e3c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3e40:	bf00      	nop
    3e42:	b002      	add	sp, #8
    3e44:	4770      	bx	lr
    3e46:	bf00      	nop
    3e48:	40064000 	.word	0x40064000

00003e4c <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3e4c:	b082      	sub	sp, #8
    3e4e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3e50:	4b05      	ldr	r3, [pc, #20]	; (3e68 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3e52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e56:	4a04      	ldr	r2, [pc, #16]	; (3e68 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3e58:	f023 0304 	bic.w	r3, r3, #4
    3e5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3e60:	bf00      	nop
    3e62:	b002      	add	sp, #8
    3e64:	4770      	bx	lr
    3e66:	bf00      	nop
    3e68:	40064000 	.word	0x40064000

00003e6c <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e6c:	b082      	sub	sp, #8
    3e6e:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3e70:	4b0f      	ldr	r3, [pc, #60]	; (3eb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e76:	4a0e      	ldr	r2, [pc, #56]	; (3eb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3e80:	4b0b      	ldr	r3, [pc, #44]	; (3eb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e86:	4a0a      	ldr	r2, [pc, #40]	; (3eb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e88:	f023 0302 	bic.w	r3, r3, #2
    3e8c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3e90:	4b07      	ldr	r3, [pc, #28]	; (3eb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e92:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3e96:	9b01      	ldr	r3, [sp, #4]
    3e98:	7a5b      	ldrb	r3, [r3, #9]
    3e9a:	005b      	lsls	r3, r3, #1
    3e9c:	f003 0302 	and.w	r3, r3, #2
    3ea0:	4903      	ldr	r1, [pc, #12]	; (3eb0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ea2:	4313      	orrs	r3, r2
    3ea4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3ea8:	bf00      	nop
    3eaa:	b002      	add	sp, #8
    3eac:	4770      	bx	lr
    3eae:	bf00      	nop
    3eb0:	40064000 	.word	0x40064000

00003eb4 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3eb4:	b082      	sub	sp, #8
    3eb6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3eb8:	9b01      	ldr	r3, [sp, #4]
    3eba:	889b      	ldrh	r3, [r3, #4]
    3ebc:	2b01      	cmp	r3, #1
    3ebe:	d107      	bne.n	3ed0 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3ec0:	4b05      	ldr	r3, [pc, #20]	; (3ed8 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3ec2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ec6:	4a04      	ldr	r2, [pc, #16]	; (3ed8 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3ec8:	f043 0302 	orr.w	r3, r3, #2
    3ecc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3ed0:	bf00      	nop
    3ed2:	b002      	add	sp, #8
    3ed4:	4770      	bx	lr
    3ed6:	bf00      	nop
    3ed8:	40064000 	.word	0x40064000

00003edc <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3edc:	b082      	sub	sp, #8
    3ede:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3ee0:	4b05      	ldr	r3, [pc, #20]	; (3ef8 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3ee2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ee6:	4a04      	ldr	r2, [pc, #16]	; (3ef8 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3ee8:	f023 0302 	bic.w	r3, r3, #2
    3eec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3ef0:	bf00      	nop
    3ef2:	b002      	add	sp, #8
    3ef4:	4770      	bx	lr
    3ef6:	bf00      	nop
    3ef8:	40064000 	.word	0x40064000

00003efc <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3efc:	b500      	push	{lr}
    3efe:	b08b      	sub	sp, #44	; 0x2c
    3f00:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3f02:	9b01      	ldr	r3, [sp, #4]
    3f04:	681a      	ldr	r2, [r3, #0]
    3f06:	4975      	ldr	r1, [pc, #468]	; (40dc <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3f08:	4613      	mov	r3, r2
    3f0a:	00db      	lsls	r3, r3, #3
    3f0c:	4413      	add	r3, r2
    3f0e:	440b      	add	r3, r1
    3f10:	781b      	ldrb	r3, [r3, #0]
    3f12:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3f14:	2300      	movs	r3, #0
    3f16:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3f1a:	2300      	movs	r3, #0
    3f1c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3f20:	4b6f      	ldr	r3, [pc, #444]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f26:	4a6e      	ldr	r2, [pc, #440]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f2c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3f30:	4b6b      	ldr	r3, [pc, #428]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d07d      	beq.n	403a <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3f3e:	9b01      	ldr	r3, [sp, #4]
    3f40:	79db      	ldrb	r3, [r3, #7]
    3f42:	461a      	mov	r2, r3
    3f44:	4b66      	ldr	r3, [pc, #408]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f46:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3f4a:	f003 0303 	and.w	r3, r3, #3
    3f4e:	429a      	cmp	r2, r3
    3f50:	d10b      	bne.n	3f6a <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3f52:	9b01      	ldr	r3, [sp, #4]
    3f54:	799b      	ldrb	r3, [r3, #6]
    3f56:	461a      	mov	r2, r3
    3f58:	4b61      	ldr	r3, [pc, #388]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f5e:	08db      	lsrs	r3, r3, #3
    3f60:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3f64:	429a      	cmp	r2, r3
    3f66:	f000 80b4 	beq.w	40d2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3f6a:	4b5d      	ldr	r3, [pc, #372]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f70:	f003 0301 	and.w	r3, r3, #1
    3f74:	2b00      	cmp	r3, #0
    3f76:	d105      	bne.n	3f84 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3f78:	2301      	movs	r3, #1
    3f7a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3f7e:	2000      	movs	r0, #0
    3f80:	f7ff fd66 	bl	3a50 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3f84:	2002      	movs	r0, #2
    3f86:	f7ff fdcf 	bl	3b28 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3f8a:	4b55      	ldr	r3, [pc, #340]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f8c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f90:	4a53      	ldr	r2, [pc, #332]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f92:	f023 0301 	bic.w	r3, r3, #1
    3f96:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3f9a:	9b01      	ldr	r3, [sp, #4]
    3f9c:	889b      	ldrh	r3, [r3, #4]
    3f9e:	2b01      	cmp	r3, #1
    3fa0:	f040 8097 	bne.w	40d2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3fa4:	9b01      	ldr	r3, [sp, #4]
    3fa6:	79db      	ldrb	r3, [r3, #7]
    3fa8:	4a4d      	ldr	r2, [pc, #308]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3faa:	f003 0303 	and.w	r3, r3, #3
    3fae:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3fb2:	4b4b      	ldr	r3, [pc, #300]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fb4:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3fb8:	9b01      	ldr	r3, [sp, #4]
    3fba:	799b      	ldrb	r3, [r3, #6]
    3fbc:	00db      	lsls	r3, r3, #3
    3fbe:	f003 0308 	and.w	r3, r3, #8
    3fc2:	4313      	orrs	r3, r2
    3fc4:	4a46      	ldr	r2, [pc, #280]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fc6:	f043 0301 	orr.w	r3, r3, #1
    3fca:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3fce:	aa03      	add	r2, sp, #12
    3fd0:	a904      	add	r1, sp, #16
    3fd2:	a805      	add	r0, sp, #20
    3fd4:	f24c 3350 	movw	r3, #50000	; 0xc350
    3fd8:	f7fe ff6e 	bl	2eb8 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3fdc:	4b40      	ldr	r3, [pc, #256]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fe2:	0e1b      	lsrs	r3, r3, #24
    3fe4:	f003 0301 	and.w	r3, r3, #1
    3fe8:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3fea:	9a03      	ldr	r2, [sp, #12]
    3fec:	a904      	add	r1, sp, #16
    3fee:	ab05      	add	r3, sp, #20
    3ff0:	4618      	mov	r0, r3
    3ff2:	f7fe ff7b 	bl	2eec <Clock_Ip_TimeoutExpired>
    3ff6:	4603      	mov	r3, r0
    3ff8:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3ffc:	9b06      	ldr	r3, [sp, #24]
    3ffe:	2b00      	cmp	r3, #0
    4000:	d106      	bne.n	4010 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4002:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4006:	f083 0301 	eor.w	r3, r3, #1
    400a:	b2db      	uxtb	r3, r3
    400c:	2b00      	cmp	r3, #0
    400e:	d1e5      	bne.n	3fdc <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4010:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4014:	2b00      	cmp	r3, #0
    4016:	d005      	beq.n	4024 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4018:	9b01      	ldr	r3, [sp, #4]
    401a:	681b      	ldr	r3, [r3, #0]
    401c:	4619      	mov	r1, r3
    401e:	2001      	movs	r0, #1
    4020:	f7fe ff3a 	bl	2e98 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4024:	2003      	movs	r0, #3
    4026:	f7ff fd7f 	bl	3b28 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    402a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    402e:	2b00      	cmp	r3, #0
    4030:	d04f      	beq.n	40d2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    4032:	2002      	movs	r0, #2
    4034:	f7ff fd26 	bl	3a84 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    4038:	e04b      	b.n	40d2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    403a:	4b29      	ldr	r3, [pc, #164]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    403c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4040:	4a27      	ldr	r2, [pc, #156]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4042:	f023 0301 	bic.w	r3, r3, #1
    4046:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    404a:	9b01      	ldr	r3, [sp, #4]
    404c:	889b      	ldrh	r3, [r3, #4]
    404e:	2b01      	cmp	r3, #1
    4050:	d13f      	bne.n	40d2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4052:	9b01      	ldr	r3, [sp, #4]
    4054:	79db      	ldrb	r3, [r3, #7]
    4056:	4a22      	ldr	r2, [pc, #136]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4058:	f003 0303 	and.w	r3, r3, #3
    405c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4060:	4b1f      	ldr	r3, [pc, #124]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4062:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4066:	9b01      	ldr	r3, [sp, #4]
    4068:	799b      	ldrb	r3, [r3, #6]
    406a:	00db      	lsls	r3, r3, #3
    406c:	f003 0308 	and.w	r3, r3, #8
    4070:	4313      	orrs	r3, r2
    4072:	4a1b      	ldr	r2, [pc, #108]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4074:	f043 0301 	orr.w	r3, r3, #1
    4078:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    407c:	aa03      	add	r2, sp, #12
    407e:	a904      	add	r1, sp, #16
    4080:	a805      	add	r0, sp, #20
    4082:	f24c 3350 	movw	r3, #50000	; 0xc350
    4086:	f7fe ff17 	bl	2eb8 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    408a:	4b15      	ldr	r3, [pc, #84]	; (40e0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    408c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4090:	0e1b      	lsrs	r3, r3, #24
    4092:	f003 0301 	and.w	r3, r3, #1
    4096:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4098:	9a03      	ldr	r2, [sp, #12]
    409a:	a904      	add	r1, sp, #16
    409c:	ab05      	add	r3, sp, #20
    409e:	4618      	mov	r0, r3
    40a0:	f7fe ff24 	bl	2eec <Clock_Ip_TimeoutExpired>
    40a4:	4603      	mov	r3, r0
    40a6:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    40aa:	9b06      	ldr	r3, [sp, #24]
    40ac:	2b00      	cmp	r3, #0
    40ae:	d106      	bne.n	40be <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    40b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40b4:	f083 0301 	eor.w	r3, r3, #1
    40b8:	b2db      	uxtb	r3, r3
    40ba:	2b00      	cmp	r3, #0
    40bc:	d1e5      	bne.n	408a <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    40be:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40c2:	2b00      	cmp	r3, #0
    40c4:	d005      	beq.n	40d2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    40c6:	9b01      	ldr	r3, [sp, #4]
    40c8:	681b      	ldr	r3, [r3, #0]
    40ca:	4619      	mov	r1, r3
    40cc:	2001      	movs	r0, #1
    40ce:	f7fe fee3 	bl	2e98 <Clock_Ip_ReportClockErrors>
}
    40d2:	bf00      	nop
    40d4:	b00b      	add	sp, #44	; 0x2c
    40d6:	f85d fb04 	ldr.w	pc, [sp], #4
    40da:	bf00      	nop
    40dc:	00017e78 	.word	0x00017e78
    40e0:	40064000 	.word	0x40064000

000040e4 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    40e4:	b500      	push	{lr}
    40e6:	b089      	sub	sp, #36	; 0x24
    40e8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    40ea:	2300      	movs	r3, #0
    40ec:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    40f0:	9b01      	ldr	r3, [sp, #4]
    40f2:	889b      	ldrh	r3, [r3, #4]
    40f4:	2b01      	cmp	r3, #1
    40f6:	d132      	bne.n	415e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    40f8:	4b1b      	ldr	r3, [pc, #108]	; (4168 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    40fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40fe:	4a1a      	ldr	r2, [pc, #104]	; (4168 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4100:	f043 0301 	orr.w	r3, r3, #1
    4104:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4108:	aa03      	add	r2, sp, #12
    410a:	a904      	add	r1, sp, #16
    410c:	a805      	add	r0, sp, #20
    410e:	f24c 3350 	movw	r3, #50000	; 0xc350
    4112:	f7fe fed1 	bl	2eb8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4116:	4b14      	ldr	r3, [pc, #80]	; (4168 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4118:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    411c:	0e1b      	lsrs	r3, r3, #24
    411e:	f003 0301 	and.w	r3, r3, #1
    4122:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4124:	9a03      	ldr	r2, [sp, #12]
    4126:	a904      	add	r1, sp, #16
    4128:	ab05      	add	r3, sp, #20
    412a:	4618      	mov	r0, r3
    412c:	f7fe fede 	bl	2eec <Clock_Ip_TimeoutExpired>
    4130:	4603      	mov	r3, r0
    4132:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4136:	9b06      	ldr	r3, [sp, #24]
    4138:	2b00      	cmp	r3, #0
    413a:	d106      	bne.n	414a <Clock_Ip_EnableFirc_TrustedCall+0x66>
    413c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4140:	f083 0301 	eor.w	r3, r3, #1
    4144:	b2db      	uxtb	r3, r3
    4146:	2b00      	cmp	r3, #0
    4148:	d1e5      	bne.n	4116 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    414a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    414e:	2b00      	cmp	r3, #0
    4150:	d005      	beq.n	415e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4152:	9b01      	ldr	r3, [sp, #4]
    4154:	681b      	ldr	r3, [r3, #0]
    4156:	4619      	mov	r1, r3
    4158:	2001      	movs	r0, #1
    415a:	f7fe fe9d 	bl	2e98 <Clock_Ip_ReportClockErrors>
        }
    }
}
    415e:	bf00      	nop
    4160:	b009      	add	sp, #36	; 0x24
    4162:	f85d fb04 	ldr.w	pc, [sp], #4
    4166:	bf00      	nop
    4168:	40064000 	.word	0x40064000

0000416c <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    416c:	b082      	sub	sp, #8
    416e:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4170:	4b05      	ldr	r3, [pc, #20]	; (4188 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4172:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4176:	4a04      	ldr	r2, [pc, #16]	; (4188 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4178:	f023 0301 	bic.w	r3, r3, #1
    417c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4180:	bf00      	nop
    4182:	b002      	add	sp, #8
    4184:	4770      	bx	lr
    4186:	bf00      	nop
    4188:	40064000 	.word	0x40064000

0000418c <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    418c:	b082      	sub	sp, #8
    418e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4190:	bf00      	nop
    4192:	b002      	add	sp, #8
    4194:	4770      	bx	lr

00004196 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4196:	b082      	sub	sp, #8
    4198:	9001      	str	r0, [sp, #4]
    419a:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    419c:	bf00      	nop
    419e:	b002      	add	sp, #8
    41a0:	4770      	bx	lr

000041a2 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    41a2:	b082      	sub	sp, #8
    41a4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    41a6:	bf00      	nop
    41a8:	b002      	add	sp, #8
    41aa:	4770      	bx	lr

000041ac <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    41ac:	b082      	sub	sp, #8
    41ae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    41b0:	bf00      	nop
    41b2:	b002      	add	sp, #8
    41b4:	4770      	bx	lr

000041b6 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    41b6:	b082      	sub	sp, #8
    41b8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    41ba:	2302      	movs	r3, #2
}
    41bc:	4618      	mov	r0, r3
    41be:	b002      	add	sp, #8
    41c0:	4770      	bx	lr

000041c2 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    41c2:	b082      	sub	sp, #8
    41c4:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    41c6:	bf00      	nop
    41c8:	b002      	add	sp, #8
    41ca:	4770      	bx	lr

000041cc <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    41cc:	b500      	push	{lr}
    41ce:	b083      	sub	sp, #12
    41d0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41d2:	9b01      	ldr	r3, [sp, #4]
    41d4:	2b00      	cmp	r3, #0
    41d6:	d002      	beq.n	41de <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    41d8:	9801      	ldr	r0, [sp, #4]
    41da:	f000 f870 	bl	42be <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41de:	bf00      	nop
    41e0:	b003      	add	sp, #12
    41e2:	f85d fb04 	ldr.w	pc, [sp], #4

000041e6 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    41e6:	b500      	push	{lr}
    41e8:	b083      	sub	sp, #12
    41ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ec:	9b01      	ldr	r3, [sp, #4]
    41ee:	2b00      	cmp	r3, #0
    41f0:	d002      	beq.n	41f8 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    41f2:	9801      	ldr	r0, [sp, #4]
    41f4:	f000 f89a 	bl	432c <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41f8:	bf00      	nop
    41fa:	b003      	add	sp, #12
    41fc:	f85d fb04 	ldr.w	pc, [sp], #4

00004200 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4200:	b500      	push	{lr}
    4202:	b089      	sub	sp, #36	; 0x24
    4204:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4206:	2301      	movs	r3, #1
    4208:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    420a:	2300      	movs	r3, #0
    420c:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4210:	4b1e      	ldr	r3, [pc, #120]	; (428c <Clock_Ip_CompleteSpll+0x8c>)
    4212:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4216:	f003 0301 	and.w	r3, r3, #1
    421a:	2b00      	cmp	r3, #0
    421c:	d02f      	beq.n	427e <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    421e:	aa02      	add	r2, sp, #8
    4220:	a903      	add	r1, sp, #12
    4222:	a804      	add	r0, sp, #16
    4224:	f24c 3350 	movw	r3, #50000	; 0xc350
    4228:	f7fe fe46 	bl	2eb8 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    422c:	4b17      	ldr	r3, [pc, #92]	; (428c <Clock_Ip_CompleteSpll+0x8c>)
    422e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4232:	0e1b      	lsrs	r3, r3, #24
    4234:	f003 0301 	and.w	r3, r3, #1
    4238:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    423a:	9a02      	ldr	r2, [sp, #8]
    423c:	a903      	add	r1, sp, #12
    423e:	ab04      	add	r3, sp, #16
    4240:	4618      	mov	r0, r3
    4242:	f7fe fe53 	bl	2eec <Clock_Ip_TimeoutExpired>
    4246:	4603      	mov	r3, r0
    4248:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    424c:	9b05      	ldr	r3, [sp, #20]
    424e:	2b00      	cmp	r3, #0
    4250:	d106      	bne.n	4260 <Clock_Ip_CompleteSpll+0x60>
    4252:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4256:	f083 0301 	eor.w	r3, r3, #1
    425a:	b2db      	uxtb	r3, r3
    425c:	2b00      	cmp	r3, #0
    425e:	d1e5      	bne.n	422c <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4260:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4264:	f083 0301 	eor.w	r3, r3, #1
    4268:	b2db      	uxtb	r3, r3
    426a:	2b00      	cmp	r3, #0
    426c:	d002      	beq.n	4274 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    426e:	2302      	movs	r3, #2
    4270:	9307      	str	r3, [sp, #28]
    4272:	e006      	b.n	4282 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4274:	9901      	ldr	r1, [sp, #4]
    4276:	2001      	movs	r0, #1
    4278:	f7fe fe0e 	bl	2e98 <Clock_Ip_ReportClockErrors>
    427c:	e001      	b.n	4282 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    427e:	2300      	movs	r3, #0
    4280:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4282:	9b07      	ldr	r3, [sp, #28]
}
    4284:	4618      	mov	r0, r3
    4286:	b009      	add	sp, #36	; 0x24
    4288:	f85d fb04 	ldr.w	pc, [sp], #4
    428c:	40064000 	.word	0x40064000

00004290 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4290:	b500      	push	{lr}
    4292:	b083      	sub	sp, #12
    4294:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4296:	9801      	ldr	r0, [sp, #4]
    4298:	f000 f886 	bl	43a8 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    429c:	bf00      	nop
    429e:	b003      	add	sp, #12
    42a0:	f85d fb04 	ldr.w	pc, [sp], #4

000042a4 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    42a4:	b500      	push	{lr}
    42a6:	b083      	sub	sp, #12
    42a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42aa:	9b01      	ldr	r3, [sp, #4]
    42ac:	2b00      	cmp	r3, #0
    42ae:	d002      	beq.n	42b6 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    42b0:	9801      	ldr	r0, [sp, #4]
    42b2:	f000 f891 	bl	43d8 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42b6:	bf00      	nop
    42b8:	b003      	add	sp, #12
    42ba:	f85d fb04 	ldr.w	pc, [sp], #4

000042be <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    42be:	b082      	sub	sp, #8
    42c0:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    42c2:	4b19      	ldr	r3, [pc, #100]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42c4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42c8:	4a17      	ldr	r2, [pc, #92]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    42ce:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    42d2:	4b15      	ldr	r3, [pc, #84]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42d4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42d8:	4a13      	ldr	r2, [pc, #76]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    42de:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    42e2:	4b11      	ldr	r3, [pc, #68]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42e4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42e8:	4a0f      	ldr	r2, [pc, #60]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    42ee:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    42f2:	4b0d      	ldr	r3, [pc, #52]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42f4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42f8:	4a0b      	ldr	r2, [pc, #44]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42fa:	f023 0301 	bic.w	r3, r3, #1
    42fe:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4302:	4b09      	ldr	r3, [pc, #36]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4304:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4308:	4a07      	ldr	r2, [pc, #28]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    430a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    430e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4312:	4b05      	ldr	r3, [pc, #20]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4314:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4318:	4a03      	ldr	r2, [pc, #12]	; (4328 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    431a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    431e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4322:	bf00      	nop
    4324:	b002      	add	sp, #8
    4326:	4770      	bx	lr
    4328:	40064000 	.word	0x40064000

0000432c <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    432c:	b082      	sub	sp, #8
    432e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4330:	9b01      	ldr	r3, [sp, #4]
    4332:	889b      	ldrh	r3, [r3, #4]
    4334:	2b01      	cmp	r3, #1
    4336:	d12f      	bne.n	4398 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4338:	4b1a      	ldr	r3, [pc, #104]	; (43a4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    433a:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    433e:	9b01      	ldr	r3, [sp, #4]
    4340:	7b5b      	ldrb	r3, [r3, #13]
    4342:	3b01      	subs	r3, #1
    4344:	021b      	lsls	r3, r3, #8
    4346:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    434a:	9b01      	ldr	r3, [sp, #4]
    434c:	7d1b      	ldrb	r3, [r3, #20]
    434e:	3b10      	subs	r3, #16
    4350:	041b      	lsls	r3, r3, #16
    4352:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4356:	430b      	orrs	r3, r1
    4358:	4912      	ldr	r1, [pc, #72]	; (43a4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    435a:	4313      	orrs	r3, r2
    435c:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4360:	9b01      	ldr	r3, [sp, #4]
    4362:	7fdb      	ldrb	r3, [r3, #31]
    4364:	2b02      	cmp	r3, #2
    4366:	d011      	beq.n	438c <Clock_Ip_SetSpll_TrustedCall+0x60>
    4368:	2b02      	cmp	r3, #2
    436a:	dc17      	bgt.n	439c <Clock_Ip_SetSpll_TrustedCall+0x70>
    436c:	2b00      	cmp	r3, #0
    436e:	d002      	beq.n	4376 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4370:	2b01      	cmp	r3, #1
    4372:	d005      	beq.n	4380 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4374:	e012      	b.n	439c <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4376:	4b0b      	ldr	r3, [pc, #44]	; (43a4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4378:	2200      	movs	r2, #0
    437a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    437e:	e00e      	b.n	439e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4380:	4b08      	ldr	r3, [pc, #32]	; (43a4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4382:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4386:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    438a:	e008      	b.n	439e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    438c:	4b05      	ldr	r3, [pc, #20]	; (43a4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    438e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4392:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4396:	e002      	b.n	439e <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4398:	bf00      	nop
    439a:	e000      	b.n	439e <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    439c:	bf00      	nop
}
    439e:	bf00      	nop
    43a0:	b002      	add	sp, #8
    43a2:	4770      	bx	lr
    43a4:	40064000 	.word	0x40064000

000043a8 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    43a8:	b082      	sub	sp, #8
    43aa:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    43ac:	4b09      	ldr	r3, [pc, #36]	; (43d4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    43ae:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    43b2:	4a08      	ldr	r2, [pc, #32]	; (43d4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    43b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    43b8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    43bc:	4b05      	ldr	r3, [pc, #20]	; (43d4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    43be:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    43c2:	4a04      	ldr	r2, [pc, #16]	; (43d4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    43c4:	f023 0301 	bic.w	r3, r3, #1
    43c8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    43cc:	bf00      	nop
    43ce:	b002      	add	sp, #8
    43d0:	4770      	bx	lr
    43d2:	bf00      	nop
    43d4:	40064000 	.word	0x40064000

000043d8 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    43d8:	b082      	sub	sp, #8
    43da:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    43dc:	9b01      	ldr	r3, [sp, #4]
    43de:	889b      	ldrh	r3, [r3, #4]
    43e0:	2b01      	cmp	r3, #1
    43e2:	d107      	bne.n	43f4 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    43e4:	4b05      	ldr	r3, [pc, #20]	; (43fc <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    43e6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    43ea:	4a04      	ldr	r2, [pc, #16]	; (43fc <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    43ec:	f043 0301 	orr.w	r3, r3, #1
    43f0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    43f4:	bf00      	nop
    43f6:	b002      	add	sp, #8
    43f8:	4770      	bx	lr
    43fa:	bf00      	nop
    43fc:	40064000 	.word	0x40064000

00004400 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4400:	b082      	sub	sp, #8
    4402:	9001      	str	r0, [sp, #4]
    4404:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4406:	bf00      	nop
    4408:	b002      	add	sp, #8
    440a:	4770      	bx	lr

0000440c <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    440c:	b082      	sub	sp, #8
    440e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4410:	bf00      	nop
    4412:	b002      	add	sp, #8
    4414:	4770      	bx	lr

00004416 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4416:	b500      	push	{lr}
    4418:	b083      	sub	sp, #12
    441a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    441c:	9b01      	ldr	r3, [sp, #4]
    441e:	2b00      	cmp	r3, #0
    4420:	d002      	beq.n	4428 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4422:	9801      	ldr	r0, [sp, #4]
    4424:	f000 f8ee 	bl	4604 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4428:	bf00      	nop
    442a:	b003      	add	sp, #12
    442c:	f85d fb04 	ldr.w	pc, [sp], #4

00004430 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4430:	b500      	push	{lr}
    4432:	b083      	sub	sp, #12
    4434:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4436:	9b01      	ldr	r3, [sp, #4]
    4438:	2b00      	cmp	r3, #0
    443a:	d002      	beq.n	4442 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    443c:	9801      	ldr	r0, [sp, #4]
    443e:	f000 f8ff 	bl	4640 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4442:	bf00      	nop
    4444:	b003      	add	sp, #12
    4446:	f85d fb04 	ldr.w	pc, [sp], #4

0000444a <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    444a:	b500      	push	{lr}
    444c:	b083      	sub	sp, #12
    444e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4450:	9b01      	ldr	r3, [sp, #4]
    4452:	2b00      	cmp	r3, #0
    4454:	d002      	beq.n	445c <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4456:	9801      	ldr	r0, [sp, #4]
    4458:	f000 f912 	bl	4680 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    445c:	bf00      	nop
    445e:	b003      	add	sp, #12
    4460:	f85d fb04 	ldr.w	pc, [sp], #4

00004464 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4464:	b500      	push	{lr}
    4466:	b083      	sub	sp, #12
    4468:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    446a:	9b01      	ldr	r3, [sp, #4]
    446c:	2b00      	cmp	r3, #0
    446e:	d002      	beq.n	4476 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4470:	9801      	ldr	r0, [sp, #4]
    4472:	f000 f925 	bl	46c0 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4476:	bf00      	nop
    4478:	b003      	add	sp, #12
    447a:	f85d fb04 	ldr.w	pc, [sp], #4

0000447e <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    447e:	b500      	push	{lr}
    4480:	b083      	sub	sp, #12
    4482:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4484:	9b01      	ldr	r3, [sp, #4]
    4486:	2b00      	cmp	r3, #0
    4488:	d002      	beq.n	4490 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    448a:	9801      	ldr	r0, [sp, #4]
    448c:	f000 f936 	bl	46fc <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4490:	bf00      	nop
    4492:	b003      	add	sp, #12
    4494:	f85d fb04 	ldr.w	pc, [sp], #4

00004498 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4498:	b500      	push	{lr}
    449a:	b083      	sub	sp, #12
    449c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    449e:	9b01      	ldr	r3, [sp, #4]
    44a0:	2b00      	cmp	r3, #0
    44a2:	d002      	beq.n	44aa <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    44a4:	9801      	ldr	r0, [sp, #4]
    44a6:	f000 f949 	bl	473c <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44aa:	bf00      	nop
    44ac:	b003      	add	sp, #12
    44ae:	f85d fb04 	ldr.w	pc, [sp], #4

000044b2 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    44b2:	b500      	push	{lr}
    44b4:	b083      	sub	sp, #12
    44b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44b8:	9b01      	ldr	r3, [sp, #4]
    44ba:	2b00      	cmp	r3, #0
    44bc:	d002      	beq.n	44c4 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    44be:	9801      	ldr	r0, [sp, #4]
    44c0:	f000 f958 	bl	4774 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44c4:	bf00      	nop
    44c6:	b003      	add	sp, #12
    44c8:	f85d fb04 	ldr.w	pc, [sp], #4

000044cc <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    44cc:	b500      	push	{lr}
    44ce:	b083      	sub	sp, #12
    44d0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44d2:	9b01      	ldr	r3, [sp, #4]
    44d4:	2b00      	cmp	r3, #0
    44d6:	d002      	beq.n	44de <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    44d8:	9801      	ldr	r0, [sp, #4]
    44da:	f000 f969 	bl	47b0 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44de:	bf00      	nop
    44e0:	b003      	add	sp, #12
    44e2:	f85d fb04 	ldr.w	pc, [sp], #4

000044e6 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    44e6:	b500      	push	{lr}
    44e8:	b083      	sub	sp, #12
    44ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44ec:	9b01      	ldr	r3, [sp, #4]
    44ee:	2b00      	cmp	r3, #0
    44f0:	d002      	beq.n	44f8 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    44f2:	9801      	ldr	r0, [sp, #4]
    44f4:	f000 f978 	bl	47e8 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44f8:	bf00      	nop
    44fa:	b003      	add	sp, #12
    44fc:	f85d fb04 	ldr.w	pc, [sp], #4

00004500 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4500:	b500      	push	{lr}
    4502:	b083      	sub	sp, #12
    4504:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4506:	9b01      	ldr	r3, [sp, #4]
    4508:	2b00      	cmp	r3, #0
    450a:	d002      	beq.n	4512 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    450c:	9801      	ldr	r0, [sp, #4]
    450e:	f000 f989 	bl	4824 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4512:	bf00      	nop
    4514:	b003      	add	sp, #12
    4516:	f85d fb04 	ldr.w	pc, [sp], #4

0000451a <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    451a:	b500      	push	{lr}
    451c:	b083      	sub	sp, #12
    451e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4520:	9b01      	ldr	r3, [sp, #4]
    4522:	2b00      	cmp	r3, #0
    4524:	d002      	beq.n	452c <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4526:	9801      	ldr	r0, [sp, #4]
    4528:	f000 f998 	bl	485c <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    452c:	bf00      	nop
    452e:	b003      	add	sp, #12
    4530:	f85d fb04 	ldr.w	pc, [sp], #4

00004534 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4534:	b500      	push	{lr}
    4536:	b083      	sub	sp, #12
    4538:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    453a:	9b01      	ldr	r3, [sp, #4]
    453c:	2b00      	cmp	r3, #0
    453e:	d002      	beq.n	4546 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4540:	9801      	ldr	r0, [sp, #4]
    4542:	f000 f9a9 	bl	4898 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4546:	bf00      	nop
    4548:	b003      	add	sp, #12
    454a:	f85d fb04 	ldr.w	pc, [sp], #4

0000454e <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    454e:	b500      	push	{lr}
    4550:	b083      	sub	sp, #12
    4552:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4554:	9b01      	ldr	r3, [sp, #4]
    4556:	2b00      	cmp	r3, #0
    4558:	d002      	beq.n	4560 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    455a:	9801      	ldr	r0, [sp, #4]
    455c:	f000 f9e6 	bl	492c <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4560:	bf00      	nop
    4562:	b003      	add	sp, #12
    4564:	f85d fb04 	ldr.w	pc, [sp], #4

00004568 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4568:	b500      	push	{lr}
    456a:	b083      	sub	sp, #12
    456c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    456e:	9b01      	ldr	r3, [sp, #4]
    4570:	2b00      	cmp	r3, #0
    4572:	d002      	beq.n	457a <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4574:	9801      	ldr	r0, [sp, #4]
    4576:	f000 fa25 	bl	49c4 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    457a:	bf00      	nop
    457c:	b003      	add	sp, #12
    457e:	f85d fb04 	ldr.w	pc, [sp], #4

00004582 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4582:	b500      	push	{lr}
    4584:	b083      	sub	sp, #12
    4586:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4588:	9b01      	ldr	r3, [sp, #4]
    458a:	2b00      	cmp	r3, #0
    458c:	d002      	beq.n	4594 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    458e:	9801      	ldr	r0, [sp, #4]
    4590:	f000 fa2a 	bl	49e8 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4594:	bf00      	nop
    4596:	b003      	add	sp, #12
    4598:	f85d fb04 	ldr.w	pc, [sp], #4

0000459c <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    459c:	b500      	push	{lr}
    459e:	b083      	sub	sp, #12
    45a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45a2:	9b01      	ldr	r3, [sp, #4]
    45a4:	2b00      	cmp	r3, #0
    45a6:	d002      	beq.n	45ae <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    45a8:	9801      	ldr	r0, [sp, #4]
    45aa:	f000 fa3b 	bl	4a24 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45ae:	bf00      	nop
    45b0:	b003      	add	sp, #12
    45b2:	f85d fb04 	ldr.w	pc, [sp], #4

000045b6 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    45b6:	b500      	push	{lr}
    45b8:	b083      	sub	sp, #12
    45ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45bc:	9b01      	ldr	r3, [sp, #4]
    45be:	2b00      	cmp	r3, #0
    45c0:	d002      	beq.n	45c8 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    45c2:	9801      	ldr	r0, [sp, #4]
    45c4:	f000 fa56 	bl	4a74 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45c8:	bf00      	nop
    45ca:	b003      	add	sp, #12
    45cc:	f85d fb04 	ldr.w	pc, [sp], #4

000045d0 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    45d0:	b500      	push	{lr}
    45d2:	b083      	sub	sp, #12
    45d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45d6:	9b01      	ldr	r3, [sp, #4]
    45d8:	2b00      	cmp	r3, #0
    45da:	d002      	beq.n	45e2 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    45dc:	9801      	ldr	r0, [sp, #4]
    45de:	f000 fa79 	bl	4ad4 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45e2:	bf00      	nop
    45e4:	b003      	add	sp, #12
    45e6:	f85d fb04 	ldr.w	pc, [sp], #4

000045ea <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    45ea:	b500      	push	{lr}
    45ec:	b083      	sub	sp, #12
    45ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45f0:	9b01      	ldr	r3, [sp, #4]
    45f2:	2b00      	cmp	r3, #0
    45f4:	d002      	beq.n	45fc <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    45f6:	9801      	ldr	r0, [sp, #4]
    45f8:	f000 fa8a 	bl	4b10 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45fc:	bf00      	nop
    45fe:	b003      	add	sp, #12
    4600:	f85d fb04 	ldr.w	pc, [sp], #4

00004604 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4604:	b084      	sub	sp, #16
    4606:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4608:	4b0b      	ldr	r3, [pc, #44]	; (4638 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    460a:	795b      	ldrb	r3, [r3, #5]
    460c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    460e:	4b0b      	ldr	r3, [pc, #44]	; (463c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4610:	695b      	ldr	r3, [r3, #20]
    4612:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4614:	9b02      	ldr	r3, [sp, #8]
    4616:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    461a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    461c:	9b03      	ldr	r3, [sp, #12]
    461e:	061b      	lsls	r3, r3, #24
    4620:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4624:	9a02      	ldr	r2, [sp, #8]
    4626:	4313      	orrs	r3, r2
    4628:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    462a:	4a04      	ldr	r2, [pc, #16]	; (463c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    462c:	9b02      	ldr	r3, [sp, #8]
    462e:	6153      	str	r3, [r2, #20]
}
    4630:	bf00      	nop
    4632:	b004      	add	sp, #16
    4634:	4770      	bx	lr
    4636:	bf00      	nop
    4638:	000181e0 	.word	0x000181e0
    463c:	40064000 	.word	0x40064000

00004640 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4640:	b084      	sub	sp, #16
    4642:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4644:	9b01      	ldr	r3, [sp, #4]
    4646:	685b      	ldr	r3, [r3, #4]
    4648:	4a0b      	ldr	r2, [pc, #44]	; (4678 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    464a:	5cd3      	ldrb	r3, [r2, r3]
    464c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    464e:	4b0b      	ldr	r3, [pc, #44]	; (467c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4650:	695b      	ldr	r3, [r3, #20]
    4652:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4654:	9b02      	ldr	r3, [sp, #8]
    4656:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    465a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    465c:	9b03      	ldr	r3, [sp, #12]
    465e:	061b      	lsls	r3, r3, #24
    4660:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4664:	9a02      	ldr	r2, [sp, #8]
    4666:	4313      	orrs	r3, r2
    4668:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    466a:	4a04      	ldr	r2, [pc, #16]	; (467c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    466c:	9b02      	ldr	r3, [sp, #8]
    466e:	6153      	str	r3, [r2, #20]
}
    4670:	bf00      	nop
    4672:	b004      	add	sp, #16
    4674:	4770      	bx	lr
    4676:	bf00      	nop
    4678:	000181e0 	.word	0x000181e0
    467c:	40064000 	.word	0x40064000

00004680 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4680:	b084      	sub	sp, #16
    4682:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4684:	9b01      	ldr	r3, [sp, #4]
    4686:	685b      	ldr	r3, [r3, #4]
    4688:	4a0b      	ldr	r2, [pc, #44]	; (46b8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    468a:	5cd3      	ldrb	r3, [r2, r3]
    468c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    468e:	4b0b      	ldr	r3, [pc, #44]	; (46bc <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4690:	699b      	ldr	r3, [r3, #24]
    4692:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4694:	9b02      	ldr	r3, [sp, #8]
    4696:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    469a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    469c:	9b03      	ldr	r3, [sp, #12]
    469e:	061b      	lsls	r3, r3, #24
    46a0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    46a4:	9a02      	ldr	r2, [sp, #8]
    46a6:	4313      	orrs	r3, r2
    46a8:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    46aa:	4a04      	ldr	r2, [pc, #16]	; (46bc <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    46ac:	9b02      	ldr	r3, [sp, #8]
    46ae:	6193      	str	r3, [r2, #24]
}
    46b0:	bf00      	nop
    46b2:	b004      	add	sp, #16
    46b4:	4770      	bx	lr
    46b6:	bf00      	nop
    46b8:	000181e0 	.word	0x000181e0
    46bc:	40064000 	.word	0x40064000

000046c0 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46c0:	b084      	sub	sp, #16
    46c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46c4:	4b0b      	ldr	r3, [pc, #44]	; (46f4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    46c6:	795b      	ldrb	r3, [r3, #5]
    46c8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    46ca:	4b0b      	ldr	r3, [pc, #44]	; (46f8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    46cc:	69db      	ldr	r3, [r3, #28]
    46ce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    46d0:	9b02      	ldr	r3, [sp, #8]
    46d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    46d6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    46d8:	9b03      	ldr	r3, [sp, #12]
    46da:	061b      	lsls	r3, r3, #24
    46dc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    46e0:	9a02      	ldr	r2, [sp, #8]
    46e2:	4313      	orrs	r3, r2
    46e4:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    46e6:	4a04      	ldr	r2, [pc, #16]	; (46f8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    46e8:	9b02      	ldr	r3, [sp, #8]
    46ea:	61d3      	str	r3, [r2, #28]
}
    46ec:	bf00      	nop
    46ee:	b004      	add	sp, #16
    46f0:	4770      	bx	lr
    46f2:	bf00      	nop
    46f4:	000181e0 	.word	0x000181e0
    46f8:	40064000 	.word	0x40064000

000046fc <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46fc:	b084      	sub	sp, #16
    46fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4700:	9b01      	ldr	r3, [sp, #4]
    4702:	685b      	ldr	r3, [r3, #4]
    4704:	4a0b      	ldr	r2, [pc, #44]	; (4734 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4706:	5cd3      	ldrb	r3, [r2, r3]
    4708:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    470a:	4b0b      	ldr	r3, [pc, #44]	; (4738 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    470c:	69db      	ldr	r3, [r3, #28]
    470e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4710:	9b02      	ldr	r3, [sp, #8]
    4712:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4716:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4718:	9b03      	ldr	r3, [sp, #12]
    471a:	061b      	lsls	r3, r3, #24
    471c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4720:	9a02      	ldr	r2, [sp, #8]
    4722:	4313      	orrs	r3, r2
    4724:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4726:	4a04      	ldr	r2, [pc, #16]	; (4738 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4728:	9b02      	ldr	r3, [sp, #8]
    472a:	61d3      	str	r3, [r2, #28]
}
    472c:	bf00      	nop
    472e:	b004      	add	sp, #16
    4730:	4770      	bx	lr
    4732:	bf00      	nop
    4734:	000181e0 	.word	0x000181e0
    4738:	40064000 	.word	0x40064000

0000473c <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    473c:	b084      	sub	sp, #16
    473e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4740:	4b0a      	ldr	r3, [pc, #40]	; (476c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4742:	7b9b      	ldrb	r3, [r3, #14]
    4744:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4746:	4b0a      	ldr	r3, [pc, #40]	; (4770 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4748:	691b      	ldr	r3, [r3, #16]
    474a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    474c:	9b02      	ldr	r3, [sp, #8]
    474e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4752:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4754:	9b03      	ldr	r3, [sp, #12]
    4756:	011b      	lsls	r3, r3, #4
    4758:	9a02      	ldr	r2, [sp, #8]
    475a:	4313      	orrs	r3, r2
    475c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    475e:	4a04      	ldr	r2, [pc, #16]	; (4770 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4760:	9b02      	ldr	r3, [sp, #8]
    4762:	6113      	str	r3, [r2, #16]
}
    4764:	bf00      	nop
    4766:	b004      	add	sp, #16
    4768:	4770      	bx	lr
    476a:	bf00      	nop
    476c:	00018188 	.word	0x00018188
    4770:	40048000 	.word	0x40048000

00004774 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4774:	b084      	sub	sp, #16
    4776:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4778:	9b01      	ldr	r3, [sp, #4]
    477a:	685b      	ldr	r3, [r3, #4]
    477c:	4a0a      	ldr	r2, [pc, #40]	; (47a8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    477e:	5cd3      	ldrb	r3, [r2, r3]
    4780:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4782:	4b0a      	ldr	r3, [pc, #40]	; (47ac <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4784:	691b      	ldr	r3, [r3, #16]
    4786:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4788:	9b02      	ldr	r3, [sp, #8]
    478a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    478e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4790:	9b03      	ldr	r3, [sp, #12]
    4792:	011b      	lsls	r3, r3, #4
    4794:	9a02      	ldr	r2, [sp, #8]
    4796:	4313      	orrs	r3, r2
    4798:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    479a:	4a04      	ldr	r2, [pc, #16]	; (47ac <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    479c:	9b02      	ldr	r3, [sp, #8]
    479e:	6113      	str	r3, [r2, #16]
}
    47a0:	bf00      	nop
    47a2:	b004      	add	sp, #16
    47a4:	4770      	bx	lr
    47a6:	bf00      	nop
    47a8:	00018188 	.word	0x00018188
    47ac:	40048000 	.word	0x40048000

000047b0 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47b0:	b084      	sub	sp, #16
    47b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47b4:	4b0a      	ldr	r3, [pc, #40]	; (47e0 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    47b6:	785b      	ldrb	r3, [r3, #1]
    47b8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    47ba:	4b0a      	ldr	r3, [pc, #40]	; (47e4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    47bc:	691b      	ldr	r3, [r3, #16]
    47be:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    47c0:	9b02      	ldr	r3, [sp, #8]
    47c2:	f023 030c 	bic.w	r3, r3, #12
    47c6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    47c8:	9b03      	ldr	r3, [sp, #12]
    47ca:	009b      	lsls	r3, r3, #2
    47cc:	9a02      	ldr	r2, [sp, #8]
    47ce:	4313      	orrs	r3, r2
    47d0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    47d2:	4a04      	ldr	r2, [pc, #16]	; (47e4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    47d4:	9b02      	ldr	r3, [sp, #8]
    47d6:	6113      	str	r3, [r2, #16]
}
    47d8:	bf00      	nop
    47da:	b004      	add	sp, #16
    47dc:	4770      	bx	lr
    47de:	bf00      	nop
    47e0:	00018240 	.word	0x00018240
    47e4:	40048000 	.word	0x40048000

000047e8 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47e8:	b084      	sub	sp, #16
    47ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47ec:	9b01      	ldr	r3, [sp, #4]
    47ee:	685b      	ldr	r3, [r3, #4]
    47f0:	4a0a      	ldr	r2, [pc, #40]	; (481c <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    47f2:	5cd3      	ldrb	r3, [r2, r3]
    47f4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    47f6:	4b0a      	ldr	r3, [pc, #40]	; (4820 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    47f8:	691b      	ldr	r3, [r3, #16]
    47fa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    47fc:	9b02      	ldr	r3, [sp, #8]
    47fe:	f023 030c 	bic.w	r3, r3, #12
    4802:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4804:	9b03      	ldr	r3, [sp, #12]
    4806:	009b      	lsls	r3, r3, #2
    4808:	9a02      	ldr	r2, [sp, #8]
    480a:	4313      	orrs	r3, r2
    480c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    480e:	4a04      	ldr	r2, [pc, #16]	; (4820 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4810:	9b02      	ldr	r3, [sp, #8]
    4812:	6113      	str	r3, [r2, #16]
}
    4814:	bf00      	nop
    4816:	b004      	add	sp, #16
    4818:	4770      	bx	lr
    481a:	bf00      	nop
    481c:	00018240 	.word	0x00018240
    4820:	40048000 	.word	0x40048000

00004824 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4824:	b084      	sub	sp, #16
    4826:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4828:	4b0a      	ldr	r3, [pc, #40]	; (4854 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    482a:	795b      	ldrb	r3, [r3, #5]
    482c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    482e:	4b0a      	ldr	r3, [pc, #40]	; (4858 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4830:	6a1b      	ldr	r3, [r3, #32]
    4832:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4834:	9b02      	ldr	r3, [sp, #8]
    4836:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    483a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    483c:	9b03      	ldr	r3, [sp, #12]
    483e:	061b      	lsls	r3, r3, #24
    4840:	9a02      	ldr	r2, [sp, #8]
    4842:	4313      	orrs	r3, r2
    4844:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4846:	4a04      	ldr	r2, [pc, #16]	; (4858 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4848:	9b02      	ldr	r3, [sp, #8]
    484a:	6213      	str	r3, [r2, #32]
}
    484c:	bf00      	nop
    484e:	b004      	add	sp, #16
    4850:	4770      	bx	lr
    4852:	bf00      	nop
    4854:	000181e0 	.word	0x000181e0
    4858:	40064000 	.word	0x40064000

0000485c <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    485c:	b084      	sub	sp, #16
    485e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4860:	9b01      	ldr	r3, [sp, #4]
    4862:	685b      	ldr	r3, [r3, #4]
    4864:	4a0a      	ldr	r2, [pc, #40]	; (4890 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4866:	5cd3      	ldrb	r3, [r2, r3]
    4868:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    486a:	4b0a      	ldr	r3, [pc, #40]	; (4894 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    486c:	6a1b      	ldr	r3, [r3, #32]
    486e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4870:	9b02      	ldr	r3, [sp, #8]
    4872:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4876:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4878:	9b03      	ldr	r3, [sp, #12]
    487a:	061b      	lsls	r3, r3, #24
    487c:	9a02      	ldr	r2, [sp, #8]
    487e:	4313      	orrs	r3, r2
    4880:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4882:	4a04      	ldr	r2, [pc, #16]	; (4894 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4884:	9b02      	ldr	r3, [sp, #8]
    4886:	6213      	str	r3, [r2, #32]
}
    4888:	bf00      	nop
    488a:	b004      	add	sp, #16
    488c:	4770      	bx	lr
    488e:	bf00      	nop
    4890:	000181e0 	.word	0x000181e0
    4894:	40064000 	.word	0x40064000

00004898 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4898:	b086      	sub	sp, #24
    489a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    489c:	4b20      	ldr	r3, [pc, #128]	; (4920 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    489e:	795b      	ldrb	r3, [r3, #5]
    48a0:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    48a2:	9b01      	ldr	r3, [sp, #4]
    48a4:	681a      	ldr	r2, [r3, #0]
    48a6:	491f      	ldr	r1, [pc, #124]	; (4924 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    48a8:	4613      	mov	r3, r2
    48aa:	00db      	lsls	r3, r3, #3
    48ac:	4413      	add	r3, r2
    48ae:	440b      	add	r3, r1
    48b0:	781b      	ldrb	r3, [r3, #0]
    48b2:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    48b4:	4b1c      	ldr	r3, [pc, #112]	; (4928 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    48b6:	68db      	ldr	r3, [r3, #12]
    48b8:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    48ba:	9b03      	ldr	r3, [sp, #12]
    48bc:	2b03      	cmp	r3, #3
    48be:	d813      	bhi.n	48e8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    48c0:	9b03      	ldr	r3, [sp, #12]
    48c2:	005b      	lsls	r3, r3, #1
    48c4:	3318      	adds	r3, #24
    48c6:	2203      	movs	r2, #3
    48c8:	fa02 f303 	lsl.w	r3, r2, r3
    48cc:	43db      	mvns	r3, r3
    48ce:	9a05      	ldr	r2, [sp, #20]
    48d0:	4013      	ands	r3, r2
    48d2:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    48d4:	9b03      	ldr	r3, [sp, #12]
    48d6:	005b      	lsls	r3, r3, #1
    48d8:	3318      	adds	r3, #24
    48da:	9a04      	ldr	r2, [sp, #16]
    48dc:	fa02 f303 	lsl.w	r3, r2, r3
    48e0:	9a05      	ldr	r2, [sp, #20]
    48e2:	4313      	orrs	r3, r2
    48e4:	9305      	str	r3, [sp, #20]
    48e6:	e014      	b.n	4912 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    48e8:	9b03      	ldr	r3, [sp, #12]
    48ea:	3b04      	subs	r3, #4
    48ec:	005b      	lsls	r3, r3, #1
    48ee:	3310      	adds	r3, #16
    48f0:	2203      	movs	r2, #3
    48f2:	fa02 f303 	lsl.w	r3, r2, r3
    48f6:	43db      	mvns	r3, r3
    48f8:	9a05      	ldr	r2, [sp, #20]
    48fa:	4013      	ands	r3, r2
    48fc:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    48fe:	9b03      	ldr	r3, [sp, #12]
    4900:	3b04      	subs	r3, #4
    4902:	005b      	lsls	r3, r3, #1
    4904:	3310      	adds	r3, #16
    4906:	9a04      	ldr	r2, [sp, #16]
    4908:	fa02 f303 	lsl.w	r3, r2, r3
    490c:	9a05      	ldr	r2, [sp, #20]
    490e:	4313      	orrs	r3, r2
    4910:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4912:	4a05      	ldr	r2, [pc, #20]	; (4928 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4914:	9b05      	ldr	r3, [sp, #20]
    4916:	60d3      	str	r3, [r2, #12]
}
    4918:	bf00      	nop
    491a:	b006      	add	sp, #24
    491c:	4770      	bx	lr
    491e:	bf00      	nop
    4920:	00018188 	.word	0x00018188
    4924:	00017e78 	.word	0x00017e78
    4928:	40048000 	.word	0x40048000

0000492c <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    492c:	b086      	sub	sp, #24
    492e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4930:	9b01      	ldr	r3, [sp, #4]
    4932:	685b      	ldr	r3, [r3, #4]
    4934:	4a20      	ldr	r2, [pc, #128]	; (49b8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    4936:	5cd3      	ldrb	r3, [r2, r3]
    4938:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    493a:	9b01      	ldr	r3, [sp, #4]
    493c:	681a      	ldr	r2, [r3, #0]
    493e:	491f      	ldr	r1, [pc, #124]	; (49bc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4940:	4613      	mov	r3, r2
    4942:	00db      	lsls	r3, r3, #3
    4944:	4413      	add	r3, r2
    4946:	440b      	add	r3, r1
    4948:	781b      	ldrb	r3, [r3, #0]
    494a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    494c:	4b1c      	ldr	r3, [pc, #112]	; (49c0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    494e:	68db      	ldr	r3, [r3, #12]
    4950:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4952:	9b03      	ldr	r3, [sp, #12]
    4954:	2b03      	cmp	r3, #3
    4956:	d813      	bhi.n	4980 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4958:	9b03      	ldr	r3, [sp, #12]
    495a:	005b      	lsls	r3, r3, #1
    495c:	3318      	adds	r3, #24
    495e:	2203      	movs	r2, #3
    4960:	fa02 f303 	lsl.w	r3, r2, r3
    4964:	43db      	mvns	r3, r3
    4966:	9a05      	ldr	r2, [sp, #20]
    4968:	4013      	ands	r3, r2
    496a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    496c:	9b03      	ldr	r3, [sp, #12]
    496e:	005b      	lsls	r3, r3, #1
    4970:	3318      	adds	r3, #24
    4972:	9a04      	ldr	r2, [sp, #16]
    4974:	fa02 f303 	lsl.w	r3, r2, r3
    4978:	9a05      	ldr	r2, [sp, #20]
    497a:	4313      	orrs	r3, r2
    497c:	9305      	str	r3, [sp, #20]
    497e:	e014      	b.n	49aa <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4980:	9b03      	ldr	r3, [sp, #12]
    4982:	3b04      	subs	r3, #4
    4984:	005b      	lsls	r3, r3, #1
    4986:	3310      	adds	r3, #16
    4988:	2203      	movs	r2, #3
    498a:	fa02 f303 	lsl.w	r3, r2, r3
    498e:	43db      	mvns	r3, r3
    4990:	9a05      	ldr	r2, [sp, #20]
    4992:	4013      	ands	r3, r2
    4994:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4996:	9b03      	ldr	r3, [sp, #12]
    4998:	3b04      	subs	r3, #4
    499a:	005b      	lsls	r3, r3, #1
    499c:	3310      	adds	r3, #16
    499e:	9a04      	ldr	r2, [sp, #16]
    49a0:	fa02 f303 	lsl.w	r3, r2, r3
    49a4:	9a05      	ldr	r2, [sp, #20]
    49a6:	4313      	orrs	r3, r2
    49a8:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    49aa:	4a05      	ldr	r2, [pc, #20]	; (49c0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    49ac:	9b05      	ldr	r3, [sp, #20]
    49ae:	60d3      	str	r3, [r2, #12]
}
    49b0:	bf00      	nop
    49b2:	b006      	add	sp, #24
    49b4:	4770      	bx	lr
    49b6:	bf00      	nop
    49b8:	00018188 	.word	0x00018188
    49bc:	00017e78 	.word	0x00017e78
    49c0:	40048000 	.word	0x40048000

000049c4 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49c4:	b084      	sub	sp, #16
    49c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    49c8:	4b06      	ldr	r3, [pc, #24]	; (49e4 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    49ca:	685b      	ldr	r3, [r3, #4]
    49cc:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    49ce:	9b03      	ldr	r3, [sp, #12]
    49d0:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    49d4:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    49d6:	4a03      	ldr	r2, [pc, #12]	; (49e4 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    49d8:	9b03      	ldr	r3, [sp, #12]
    49da:	6053      	str	r3, [r2, #4]
}
    49dc:	bf00      	nop
    49de:	b004      	add	sp, #16
    49e0:	4770      	bx	lr
    49e2:	bf00      	nop
    49e4:	40048000 	.word	0x40048000

000049e8 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49e8:	b084      	sub	sp, #16
    49ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    49ec:	9b01      	ldr	r3, [sp, #4]
    49ee:	685b      	ldr	r3, [r3, #4]
    49f0:	4a0a      	ldr	r2, [pc, #40]	; (4a1c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    49f2:	5cd3      	ldrb	r3, [r2, r3]
    49f4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    49f6:	4b0a      	ldr	r3, [pc, #40]	; (4a20 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    49f8:	685b      	ldr	r3, [r3, #4]
    49fa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    49fc:	9b02      	ldr	r3, [sp, #8]
    49fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4a02:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4a04:	9b03      	ldr	r3, [sp, #12]
    4a06:	011b      	lsls	r3, r3, #4
    4a08:	9a02      	ldr	r2, [sp, #8]
    4a0a:	4313      	orrs	r3, r2
    4a0c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4a0e:	4a04      	ldr	r2, [pc, #16]	; (4a20 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4a10:	9b02      	ldr	r3, [sp, #8]
    4a12:	6053      	str	r3, [r2, #4]
}
    4a14:	bf00      	nop
    4a16:	b004      	add	sp, #16
    4a18:	4770      	bx	lr
    4a1a:	bf00      	nop
    4a1c:	00018188 	.word	0x00018188
    4a20:	40048000 	.word	0x40048000

00004a24 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a24:	b084      	sub	sp, #16
    4a26:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4a28:	9b01      	ldr	r3, [sp, #4]
    4a2a:	681a      	ldr	r2, [r3, #0]
    4a2c:	490f      	ldr	r1, [pc, #60]	; (4a6c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4a2e:	4613      	mov	r3, r2
    4a30:	00db      	lsls	r3, r3, #3
    4a32:	4413      	add	r3, r2
    4a34:	440b      	add	r3, r1
    4a36:	3304      	adds	r3, #4
    4a38:	781b      	ldrb	r3, [r3, #0]
    4a3a:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4a3c:	4a0c      	ldr	r2, [pc, #48]	; (4a70 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4a3e:	9b03      	ldr	r3, [sp, #12]
    4a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4a44:	490a      	ldr	r1, [pc, #40]	; (4a70 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4a46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4a4a:	9b03      	ldr	r3, [sp, #12]
    4a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4a50:	4a07      	ldr	r2, [pc, #28]	; (4a70 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4a52:	9b03      	ldr	r3, [sp, #12]
    4a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4a58:	4905      	ldr	r1, [pc, #20]	; (4a70 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4a5a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4a5e:	9b03      	ldr	r3, [sp, #12]
    4a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4a64:	bf00      	nop
    4a66:	b004      	add	sp, #16
    4a68:	4770      	bx	lr
    4a6a:	bf00      	nop
    4a6c:	00017e78 	.word	0x00017e78
    4a70:	40065000 	.word	0x40065000

00004a74 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a74:	b086      	sub	sp, #24
    4a76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4a78:	9b01      	ldr	r3, [sp, #4]
    4a7a:	681a      	ldr	r2, [r3, #0]
    4a7c:	4912      	ldr	r1, [pc, #72]	; (4ac8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4a7e:	4613      	mov	r3, r2
    4a80:	00db      	lsls	r3, r3, #3
    4a82:	4413      	add	r3, r2
    4a84:	440b      	add	r3, r1
    4a86:	3304      	adds	r3, #4
    4a88:	781b      	ldrb	r3, [r3, #0]
    4a8a:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a8c:	9b01      	ldr	r3, [sp, #4]
    4a8e:	685b      	ldr	r3, [r3, #4]
    4a90:	4a0e      	ldr	r2, [pc, #56]	; (4acc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4a92:	5cd3      	ldrb	r3, [r2, r3]
    4a94:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4a96:	4a0e      	ldr	r2, [pc, #56]	; (4ad0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4a98:	9b05      	ldr	r3, [sp, #20]
    4a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4a9e:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4aa0:	9b03      	ldr	r3, [sp, #12]
    4aa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4aa6:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4aa8:	9b04      	ldr	r3, [sp, #16]
    4aaa:	061b      	lsls	r3, r3, #24
    4aac:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4ab0:	9a03      	ldr	r2, [sp, #12]
    4ab2:	4313      	orrs	r3, r2
    4ab4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4ab6:	4906      	ldr	r1, [pc, #24]	; (4ad0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4ab8:	9b05      	ldr	r3, [sp, #20]
    4aba:	9a03      	ldr	r2, [sp, #12]
    4abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4ac0:	bf00      	nop
    4ac2:	b006      	add	sp, #24
    4ac4:	4770      	bx	lr
    4ac6:	bf00      	nop
    4ac8:	00017e78 	.word	0x00017e78
    4acc:	00018210 	.word	0x00018210
    4ad0:	40065000 	.word	0x40065000

00004ad4 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4ad4:	b084      	sub	sp, #16
    4ad6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4ad8:	4b0b      	ldr	r3, [pc, #44]	; (4b08 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4ada:	7f1b      	ldrb	r3, [r3, #28]
    4adc:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4ade:	4b0b      	ldr	r3, [pc, #44]	; (4b0c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4ae0:	685b      	ldr	r3, [r3, #4]
    4ae2:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4ae4:	9b02      	ldr	r3, [sp, #8]
    4ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4aea:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4aec:	9b03      	ldr	r3, [sp, #12]
    4aee:	031b      	lsls	r3, r3, #12
    4af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4af4:	9a02      	ldr	r2, [sp, #8]
    4af6:	4313      	orrs	r3, r2
    4af8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4afa:	4a04      	ldr	r2, [pc, #16]	; (4b0c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4afc:	9b02      	ldr	r3, [sp, #8]
    4afe:	6053      	str	r3, [r2, #4]
}
    4b00:	bf00      	nop
    4b02:	b004      	add	sp, #16
    4b04:	4770      	bx	lr
    4b06:	bf00      	nop
    4b08:	00018188 	.word	0x00018188
    4b0c:	40048000 	.word	0x40048000

00004b10 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b10:	b084      	sub	sp, #16
    4b12:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b14:	9b01      	ldr	r3, [sp, #4]
    4b16:	685b      	ldr	r3, [r3, #4]
    4b18:	4a0b      	ldr	r2, [pc, #44]	; (4b48 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4b1a:	5cd3      	ldrb	r3, [r2, r3]
    4b1c:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4b1e:	4b0b      	ldr	r3, [pc, #44]	; (4b4c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4b20:	685b      	ldr	r3, [r3, #4]
    4b22:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4b24:	9b02      	ldr	r3, [sp, #8]
    4b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4b2a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4b2c:	9b03      	ldr	r3, [sp, #12]
    4b2e:	031b      	lsls	r3, r3, #12
    4b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4b34:	9a02      	ldr	r2, [sp, #8]
    4b36:	4313      	orrs	r3, r2
    4b38:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4b3a:	4a04      	ldr	r2, [pc, #16]	; (4b4c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4b3c:	9b02      	ldr	r3, [sp, #8]
    4b3e:	6053      	str	r3, [r2, #4]
}
    4b40:	bf00      	nop
    4b42:	b004      	add	sp, #16
    4b44:	4770      	bx	lr
    4b46:	bf00      	nop
    4b48:	00018188 	.word	0x00018188
    4b4c:	40048000 	.word	0x40048000

00004b50 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4b50:	b500      	push	{lr}
    4b52:	b085      	sub	sp, #20
    4b54:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4b56:	2300      	movs	r3, #0
    4b58:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4b5c:	9b01      	ldr	r3, [sp, #4]
    4b5e:	2b00      	cmp	r3, #0
    4b60:	d037      	beq.n	4bd2 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b62:	2300      	movs	r3, #0
    4b64:	9303      	str	r3, [sp, #12]
    4b66:	e02b      	b.n	4bc0 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4b68:	4b29      	ldr	r3, [pc, #164]	; (4c10 <DisableSafeClock+0xc0>)
    4b6a:	6819      	ldr	r1, [r3, #0]
    4b6c:	9a03      	ldr	r2, [sp, #12]
    4b6e:	4613      	mov	r3, r2
    4b70:	005b      	lsls	r3, r3, #1
    4b72:	4413      	add	r3, r2
    4b74:	009b      	lsls	r3, r3, #2
    4b76:	440b      	add	r3, r1
    4b78:	3314      	adds	r3, #20
    4b7a:	681b      	ldr	r3, [r3, #0]
    4b7c:	2b05      	cmp	r3, #5
    4b7e:	d11c      	bne.n	4bba <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4b80:	2301      	movs	r3, #1
    4b82:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4b86:	4b22      	ldr	r3, [pc, #136]	; (4c10 <DisableSafeClock+0xc0>)
    4b88:	6819      	ldr	r1, [r3, #0]
    4b8a:	9a03      	ldr	r2, [sp, #12]
    4b8c:	4613      	mov	r3, r2
    4b8e:	005b      	lsls	r3, r3, #1
    4b90:	4413      	add	r3, r2
    4b92:	009b      	lsls	r3, r3, #2
    4b94:	440b      	add	r3, r1
    4b96:	3318      	adds	r3, #24
    4b98:	881b      	ldrh	r3, [r3, #0]
    4b9a:	2b00      	cmp	r3, #0
    4b9c:	d118      	bne.n	4bd0 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4b9e:	4b1d      	ldr	r3, [pc, #116]	; (4c14 <DisableSafeClock+0xc4>)
    4ba0:	791b      	ldrb	r3, [r3, #4]
    4ba2:	4619      	mov	r1, r3
    4ba4:	4a1c      	ldr	r2, [pc, #112]	; (4c18 <DisableSafeClock+0xc8>)
    4ba6:	460b      	mov	r3, r1
    4ba8:	005b      	lsls	r3, r3, #1
    4baa:	440b      	add	r3, r1
    4bac:	009b      	lsls	r3, r3, #2
    4bae:	4413      	add	r3, r2
    4bb0:	3308      	adds	r3, #8
    4bb2:	681b      	ldr	r3, [r3, #0]
    4bb4:	2005      	movs	r0, #5
    4bb6:	4798      	blx	r3
                }
                break;
    4bb8:	e00a      	b.n	4bd0 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4bba:	9b03      	ldr	r3, [sp, #12]
    4bbc:	3301      	adds	r3, #1
    4bbe:	9303      	str	r3, [sp, #12]
    4bc0:	4b13      	ldr	r3, [pc, #76]	; (4c10 <DisableSafeClock+0xc0>)
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	7a1b      	ldrb	r3, [r3, #8]
    4bc6:	461a      	mov	r2, r3
    4bc8:	9b03      	ldr	r3, [sp, #12]
    4bca:	4293      	cmp	r3, r2
    4bcc:	d3cc      	bcc.n	4b68 <DisableSafeClock+0x18>
    4bce:	e000      	b.n	4bd2 <DisableSafeClock+0x82>
                break;
    4bd0:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4bd2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4bd6:	f083 0301 	eor.w	r3, r3, #1
    4bda:	b2db      	uxtb	r3, r3
    4bdc:	2b00      	cmp	r3, #0
    4bde:	d013      	beq.n	4c08 <DisableSafeClock+0xb8>
    4be0:	4b0e      	ldr	r3, [pc, #56]	; (4c1c <DisableSafeClock+0xcc>)
    4be2:	781b      	ldrb	r3, [r3, #0]
    4be4:	f083 0301 	eor.w	r3, r3, #1
    4be8:	b2db      	uxtb	r3, r3
    4bea:	2b00      	cmp	r3, #0
    4bec:	d00c      	beq.n	4c08 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4bee:	4b09      	ldr	r3, [pc, #36]	; (4c14 <DisableSafeClock+0xc4>)
    4bf0:	791b      	ldrb	r3, [r3, #4]
    4bf2:	4619      	mov	r1, r3
    4bf4:	4a08      	ldr	r2, [pc, #32]	; (4c18 <DisableSafeClock+0xc8>)
    4bf6:	460b      	mov	r3, r1
    4bf8:	005b      	lsls	r3, r3, #1
    4bfa:	440b      	add	r3, r1
    4bfc:	009b      	lsls	r3, r3, #2
    4bfe:	4413      	add	r3, r2
    4c00:	3308      	adds	r3, #8
    4c02:	681b      	ldr	r3, [r3, #0]
    4c04:	2005      	movs	r0, #5
    4c06:	4798      	blx	r3
    }
}
    4c08:	bf00      	nop
    4c0a:	b005      	add	sp, #20
    4c0c:	f85d fb04 	ldr.w	pc, [sp], #4
    4c10:	1fff8b9c 	.word	0x1fff8b9c
    4c14:	00017e08 	.word	0x00017e08
    4c18:	00018438 	.word	0x00018438
    4c1c:	1fff8b18 	.word	0x1fff8b18

00004c20 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4c20:	4b06      	ldr	r3, [pc, #24]	; (4c3c <SetFircToResetValue_TrustedCall+0x1c>)
    4c22:	2200      	movs	r2, #0
    4c24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4c28:	4b04      	ldr	r3, [pc, #16]	; (4c3c <SetFircToResetValue_TrustedCall+0x1c>)
    4c2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c2e:	4a03      	ldr	r2, [pc, #12]	; (4c3c <SetFircToResetValue_TrustedCall+0x1c>)
    4c30:	f043 0301 	orr.w	r3, r3, #1
    4c34:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4c38:	bf00      	nop
    4c3a:	4770      	bx	lr
    4c3c:	40064000 	.word	0x40064000

00004c40 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4c40:	b084      	sub	sp, #16
    4c42:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4c44:	2303      	movs	r3, #3
    4c46:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4c48:	2300      	movs	r3, #0
    4c4a:	9302      	str	r3, [sp, #8]
    4c4c:	e028      	b.n	4ca0 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4c4e:	9b01      	ldr	r3, [sp, #4]
    4c50:	9a02      	ldr	r2, [sp, #8]
    4c52:	320d      	adds	r2, #13
    4c54:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4c58:	2b28      	cmp	r3, #40	; 0x28
    4c5a:	d10b      	bne.n	4c74 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4c5c:	9a01      	ldr	r2, [sp, #4]
    4c5e:	9b02      	ldr	r3, [sp, #8]
    4c60:	330d      	adds	r3, #13
    4c62:	00db      	lsls	r3, r3, #3
    4c64:	4413      	add	r3, r2
    4c66:	685b      	ldr	r3, [r3, #4]
    4c68:	4a2b      	ldr	r2, [pc, #172]	; (4d18 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4c6a:	5cd3      	ldrb	r3, [r2, r3]
    4c6c:	011b      	lsls	r3, r3, #4
    4c6e:	9a03      	ldr	r2, [sp, #12]
    4c70:	4313      	orrs	r3, r2
    4c72:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4c74:	9b01      	ldr	r3, [sp, #4]
    4c76:	9a02      	ldr	r2, [sp, #8]
    4c78:	320d      	adds	r2, #13
    4c7a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4c7e:	2b29      	cmp	r3, #41	; 0x29
    4c80:	d10b      	bne.n	4c9a <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4c82:	9a01      	ldr	r2, [sp, #4]
    4c84:	9b02      	ldr	r3, [sp, #8]
    4c86:	330d      	adds	r3, #13
    4c88:	00db      	lsls	r3, r3, #3
    4c8a:	4413      	add	r3, r2
    4c8c:	685b      	ldr	r3, [r3, #4]
    4c8e:	4a23      	ldr	r2, [pc, #140]	; (4d1c <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4c90:	5cd3      	ldrb	r3, [r2, r3]
    4c92:	009b      	lsls	r3, r3, #2
    4c94:	9a03      	ldr	r2, [sp, #12]
    4c96:	4313      	orrs	r3, r2
    4c98:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4c9a:	9b02      	ldr	r3, [sp, #8]
    4c9c:	3301      	adds	r3, #1
    4c9e:	9302      	str	r3, [sp, #8]
    4ca0:	9b01      	ldr	r3, [sp, #4]
    4ca2:	7adb      	ldrb	r3, [r3, #11]
    4ca4:	461a      	mov	r2, r3
    4ca6:	9b02      	ldr	r3, [sp, #8]
    4ca8:	4293      	cmp	r3, r2
    4caa:	d3d0      	bcc.n	4c4e <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4cac:	2300      	movs	r3, #0
    4cae:	9302      	str	r3, [sp, #8]
    4cb0:	e026      	b.n	4d00 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4cb2:	9a01      	ldr	r2, [sp, #4]
    4cb4:	9b02      	ldr	r3, [sp, #8]
    4cb6:	334e      	adds	r3, #78	; 0x4e
    4cb8:	00db      	lsls	r3, r3, #3
    4cba:	4413      	add	r3, r2
    4cbc:	685b      	ldr	r3, [r3, #4]
    4cbe:	2b12      	cmp	r3, #18
    4cc0:	d109      	bne.n	4cd6 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4cc2:	9a01      	ldr	r2, [sp, #4]
    4cc4:	9b02      	ldr	r3, [sp, #8]
    4cc6:	334e      	adds	r3, #78	; 0x4e
    4cc8:	00db      	lsls	r3, r3, #3
    4cca:	4413      	add	r3, r2
    4ccc:	891b      	ldrh	r3, [r3, #8]
    4cce:	005b      	lsls	r3, r3, #1
    4cd0:	9a03      	ldr	r2, [sp, #12]
    4cd2:	4313      	orrs	r3, r2
    4cd4:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4cd6:	9a01      	ldr	r2, [sp, #4]
    4cd8:	9b02      	ldr	r3, [sp, #8]
    4cda:	334e      	adds	r3, #78	; 0x4e
    4cdc:	00db      	lsls	r3, r3, #3
    4cde:	4413      	add	r3, r2
    4ce0:	685b      	ldr	r3, [r3, #4]
    4ce2:	2b13      	cmp	r3, #19
    4ce4:	d109      	bne.n	4cfa <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4ce6:	9a01      	ldr	r2, [sp, #4]
    4ce8:	9b02      	ldr	r3, [sp, #8]
    4cea:	334e      	adds	r3, #78	; 0x4e
    4cec:	00db      	lsls	r3, r3, #3
    4cee:	4413      	add	r3, r2
    4cf0:	891b      	ldrh	r3, [r3, #8]
    4cf2:	461a      	mov	r2, r3
    4cf4:	9b03      	ldr	r3, [sp, #12]
    4cf6:	4313      	orrs	r3, r2
    4cf8:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4cfa:	9b02      	ldr	r3, [sp, #8]
    4cfc:	3301      	adds	r3, #1
    4cfe:	9302      	str	r3, [sp, #8]
    4d00:	9b01      	ldr	r3, [sp, #4]
    4d02:	7c1b      	ldrb	r3, [r3, #16]
    4d04:	461a      	mov	r2, r3
    4d06:	9b02      	ldr	r3, [sp, #8]
    4d08:	4293      	cmp	r3, r2
    4d0a:	d3d2      	bcc.n	4cb2 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4d0c:	4a04      	ldr	r2, [pc, #16]	; (4d20 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4d0e:	9b03      	ldr	r3, [sp, #12]
    4d10:	6113      	str	r3, [r2, #16]
}
    4d12:	bf00      	nop
    4d14:	b004      	add	sp, #16
    4d16:	4770      	bx	lr
    4d18:	00018188 	.word	0x00018188
    4d1c:	00018240 	.word	0x00018240
    4d20:	40048000 	.word	0x40048000

00004d24 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4d24:	b500      	push	{lr}
    4d26:	b089      	sub	sp, #36	; 0x24
    4d28:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4d2a:	2300      	movs	r3, #0
    4d2c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4d30:	4a21      	ldr	r2, [pc, #132]	; (4db8 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4d32:	9b01      	ldr	r3, [sp, #4]
    4d34:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4d36:	4b21      	ldr	r3, [pc, #132]	; (4dbc <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4d38:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d3c:	f003 0301 	and.w	r3, r3, #1
    4d40:	2b00      	cmp	r3, #0
    4d42:	d12e      	bne.n	4da2 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4d44:	4b1e      	ldr	r3, [pc, #120]	; (4dc0 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4d46:	2200      	movs	r2, #0
    4d48:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4d4a:	f7ff ff69 	bl	4c20 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4d4e:	aa03      	add	r2, sp, #12
    4d50:	a904      	add	r1, sp, #16
    4d52:	a805      	add	r0, sp, #20
    4d54:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d58:	f7fe f8ae 	bl	2eb8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4d5c:	4b17      	ldr	r3, [pc, #92]	; (4dbc <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4d5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d62:	0e1b      	lsrs	r3, r3, #24
    4d64:	f003 0301 	and.w	r3, r3, #1
    4d68:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d6a:	9a03      	ldr	r2, [sp, #12]
    4d6c:	a904      	add	r1, sp, #16
    4d6e:	ab05      	add	r3, sp, #20
    4d70:	4618      	mov	r0, r3
    4d72:	f7fe f8bb 	bl	2eec <Clock_Ip_TimeoutExpired>
    4d76:	4603      	mov	r3, r0
    4d78:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4d7c:	9b06      	ldr	r3, [sp, #24]
    4d7e:	2b00      	cmp	r3, #0
    4d80:	d106      	bne.n	4d90 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4d82:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d86:	f083 0301 	eor.w	r3, r3, #1
    4d8a:	b2db      	uxtb	r3, r3
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d1e5      	bne.n	4d5c <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4d90:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d94:	2b00      	cmp	r3, #0
    4d96:	d007      	beq.n	4da8 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4d98:	2105      	movs	r1, #5
    4d9a:	2001      	movs	r0, #1
    4d9c:	f7fe f87c 	bl	2e98 <Clock_Ip_ReportClockErrors>
    4da0:	e002      	b.n	4da8 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4da2:	4b07      	ldr	r3, [pc, #28]	; (4dc0 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4da4:	2201      	movs	r2, #1
    4da6:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4da8:	9801      	ldr	r0, [sp, #4]
    4daa:	f7ff ff49 	bl	4c40 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4dae:	bf00      	nop
    4db0:	b009      	add	sp, #36	; 0x24
    4db2:	f85d fb04 	ldr.w	pc, [sp], #4
    4db6:	bf00      	nop
    4db8:	1fff8b9c 	.word	0x1fff8b9c
    4dbc:	40064000 	.word	0x40064000
    4dc0:	1fff8b18 	.word	0x1fff8b18

00004dc4 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4dc4:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4dc6:	2300      	movs	r3, #0
    4dc8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4dca:	4b29      	ldr	r3, [pc, #164]	; (4e70 <getFircConfig+0xac>)
    4dcc:	681b      	ldr	r3, [r3, #0]
    4dce:	2b00      	cmp	r3, #0
    4dd0:	d024      	beq.n	4e1c <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4dd2:	2300      	movs	r3, #0
    4dd4:	9301      	str	r3, [sp, #4]
    4dd6:	e01a      	b.n	4e0e <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4dd8:	4b25      	ldr	r3, [pc, #148]	; (4e70 <getFircConfig+0xac>)
    4dda:	6819      	ldr	r1, [r3, #0]
    4ddc:	9a01      	ldr	r2, [sp, #4]
    4dde:	4613      	mov	r3, r2
    4de0:	005b      	lsls	r3, r3, #1
    4de2:	4413      	add	r3, r2
    4de4:	009b      	lsls	r3, r3, #2
    4de6:	440b      	add	r3, r1
    4de8:	3314      	adds	r3, #20
    4dea:	681b      	ldr	r3, [r3, #0]
    4dec:	2b05      	cmp	r3, #5
    4dee:	d10b      	bne.n	4e08 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4df0:	4b1f      	ldr	r3, [pc, #124]	; (4e70 <getFircConfig+0xac>)
    4df2:	6819      	ldr	r1, [r3, #0]
    4df4:	9a01      	ldr	r2, [sp, #4]
    4df6:	4613      	mov	r3, r2
    4df8:	005b      	lsls	r3, r3, #1
    4dfa:	4413      	add	r3, r2
    4dfc:	009b      	lsls	r3, r3, #2
    4dfe:	3310      	adds	r3, #16
    4e00:	440b      	add	r3, r1
    4e02:	3304      	adds	r3, #4
    4e04:	9300      	str	r3, [sp, #0]
                break;
    4e06:	e009      	b.n	4e1c <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4e08:	9b01      	ldr	r3, [sp, #4]
    4e0a:	3301      	adds	r3, #1
    4e0c:	9301      	str	r3, [sp, #4]
    4e0e:	4b18      	ldr	r3, [pc, #96]	; (4e70 <getFircConfig+0xac>)
    4e10:	681b      	ldr	r3, [r3, #0]
    4e12:	7a1b      	ldrb	r3, [r3, #8]
    4e14:	461a      	mov	r2, r3
    4e16:	9b01      	ldr	r3, [sp, #4]
    4e18:	4293      	cmp	r3, r2
    4e1a:	d3dd      	bcc.n	4dd8 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e1c:	9b00      	ldr	r3, [sp, #0]
    4e1e:	2b00      	cmp	r3, #0
    4e20:	d121      	bne.n	4e66 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4e22:	4b14      	ldr	r3, [pc, #80]	; (4e74 <getFircConfig+0xb0>)
    4e24:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4e26:	4b13      	ldr	r3, [pc, #76]	; (4e74 <getFircConfig+0xb0>)
    4e28:	2205      	movs	r2, #5
    4e2a:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4e2c:	4b12      	ldr	r3, [pc, #72]	; (4e78 <getFircConfig+0xb4>)
    4e2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4e32:	b29b      	uxth	r3, r3
    4e34:	f003 0301 	and.w	r3, r3, #1
    4e38:	b29a      	uxth	r2, r3
    4e3a:	4b0e      	ldr	r3, [pc, #56]	; (4e74 <getFircConfig+0xb0>)
    4e3c:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4e3e:	4b0e      	ldr	r3, [pc, #56]	; (4e78 <getFircConfig+0xb4>)
    4e40:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4e44:	b2db      	uxtb	r3, r3
    4e46:	f003 0303 	and.w	r3, r3, #3
    4e4a:	b2da      	uxtb	r2, r3
    4e4c:	4b09      	ldr	r3, [pc, #36]	; (4e74 <getFircConfig+0xb0>)
    4e4e:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4e50:	4b09      	ldr	r3, [pc, #36]	; (4e78 <getFircConfig+0xb4>)
    4e52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4e56:	b2db      	uxtb	r3, r3
    4e58:	10db      	asrs	r3, r3, #3
    4e5a:	b2db      	uxtb	r3, r3
    4e5c:	f003 0301 	and.w	r3, r3, #1
    4e60:	b2da      	uxtb	r2, r3
    4e62:	4b04      	ldr	r3, [pc, #16]	; (4e74 <getFircConfig+0xb0>)
    4e64:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4e66:	9b00      	ldr	r3, [sp, #0]
}
    4e68:	4618      	mov	r0, r3
    4e6a:	b002      	add	sp, #8
    4e6c:	4770      	bx	lr
    4e6e:	bf00      	nop
    4e70:	1fff8b9c 	.word	0x1fff8b9c
    4e74:	1fff8c08 	.word	0x1fff8c08
    4e78:	40064000 	.word	0x40064000

00004e7c <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4e7c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4e7e:	2300      	movs	r3, #0
    4e80:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4e82:	4b20      	ldr	r3, [pc, #128]	; (4f04 <getSoscConfig+0x88>)
    4e84:	681b      	ldr	r3, [r3, #0]
    4e86:	2b00      	cmp	r3, #0
    4e88:	d024      	beq.n	4ed4 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4e8a:	2300      	movs	r3, #0
    4e8c:	9301      	str	r3, [sp, #4]
    4e8e:	e01a      	b.n	4ec6 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4e90:	4b1c      	ldr	r3, [pc, #112]	; (4f04 <getSoscConfig+0x88>)
    4e92:	6819      	ldr	r1, [r3, #0]
    4e94:	9a01      	ldr	r2, [sp, #4]
    4e96:	4613      	mov	r3, r2
    4e98:	009b      	lsls	r3, r3, #2
    4e9a:	4413      	add	r3, r2
    4e9c:	009b      	lsls	r3, r3, #2
    4e9e:	440b      	add	r3, r1
    4ea0:	332c      	adds	r3, #44	; 0x2c
    4ea2:	681b      	ldr	r3, [r3, #0]
    4ea4:	2b08      	cmp	r3, #8
    4ea6:	d10b      	bne.n	4ec0 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4ea8:	4b16      	ldr	r3, [pc, #88]	; (4f04 <getSoscConfig+0x88>)
    4eaa:	6819      	ldr	r1, [r3, #0]
    4eac:	9a01      	ldr	r2, [sp, #4]
    4eae:	4613      	mov	r3, r2
    4eb0:	009b      	lsls	r3, r3, #2
    4eb2:	4413      	add	r3, r2
    4eb4:	009b      	lsls	r3, r3, #2
    4eb6:	3328      	adds	r3, #40	; 0x28
    4eb8:	440b      	add	r3, r1
    4eba:	3304      	adds	r3, #4
    4ebc:	9300      	str	r3, [sp, #0]
                break;
    4ebe:	e009      	b.n	4ed4 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4ec0:	9b01      	ldr	r3, [sp, #4]
    4ec2:	3301      	adds	r3, #1
    4ec4:	9301      	str	r3, [sp, #4]
    4ec6:	4b0f      	ldr	r3, [pc, #60]	; (4f04 <getSoscConfig+0x88>)
    4ec8:	681b      	ldr	r3, [r3, #0]
    4eca:	7a5b      	ldrb	r3, [r3, #9]
    4ecc:	461a      	mov	r2, r3
    4ece:	9b01      	ldr	r3, [sp, #4]
    4ed0:	4293      	cmp	r3, r2
    4ed2:	d3dd      	bcc.n	4e90 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ed4:	9b00      	ldr	r3, [sp, #0]
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d110      	bne.n	4efc <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4eda:	4b0b      	ldr	r3, [pc, #44]	; (4f08 <getSoscConfig+0x8c>)
    4edc:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4ede:	4b0a      	ldr	r3, [pc, #40]	; (4f08 <getSoscConfig+0x8c>)
    4ee0:	2208      	movs	r2, #8
    4ee2:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4ee4:	4b09      	ldr	r3, [pc, #36]	; (4f0c <getSoscConfig+0x90>)
    4ee6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4eea:	b29b      	uxth	r3, r3
    4eec:	f003 0301 	and.w	r3, r3, #1
    4ef0:	b29a      	uxth	r2, r3
    4ef2:	4b05      	ldr	r3, [pc, #20]	; (4f08 <getSoscConfig+0x8c>)
    4ef4:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4ef6:	4b04      	ldr	r3, [pc, #16]	; (4f08 <getSoscConfig+0x8c>)
    4ef8:	4a05      	ldr	r2, [pc, #20]	; (4f10 <getSoscConfig+0x94>)
    4efa:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4efc:	9b00      	ldr	r3, [sp, #0]
}
    4efe:	4618      	mov	r0, r3
    4f00:	b002      	add	sp, #8
    4f02:	4770      	bx	lr
    4f04:	1fff8b9c 	.word	0x1fff8b9c
    4f08:	1fff8c14 	.word	0x1fff8c14
    4f0c:	40064000 	.word	0x40064000
    4f10:	02625a00 	.word	0x02625a00

00004f14 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4f14:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4f16:	2300      	movs	r3, #0
    4f18:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4f1a:	4b28      	ldr	r3, [pc, #160]	; (4fbc <getSpllConfig+0xa8>)
    4f1c:	681b      	ldr	r3, [r3, #0]
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d023      	beq.n	4f6a <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4f22:	2300      	movs	r3, #0
    4f24:	9301      	str	r3, [sp, #4]
    4f26:	e019      	b.n	4f5c <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4f28:	4b24      	ldr	r3, [pc, #144]	; (4fbc <getSpllConfig+0xa8>)
    4f2a:	6819      	ldr	r1, [r3, #0]
    4f2c:	9a01      	ldr	r2, [sp, #4]
    4f2e:	4613      	mov	r3, r2
    4f30:	009b      	lsls	r3, r3, #2
    4f32:	4413      	add	r3, r2
    4f34:	00db      	lsls	r3, r3, #3
    4f36:	440b      	add	r3, r1
    4f38:	3340      	adds	r3, #64	; 0x40
    4f3a:	681b      	ldr	r3, [r3, #0]
    4f3c:	2b09      	cmp	r3, #9
    4f3e:	d10a      	bne.n	4f56 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4f40:	4b1e      	ldr	r3, [pc, #120]	; (4fbc <getSpllConfig+0xa8>)
    4f42:	6819      	ldr	r1, [r3, #0]
    4f44:	9a01      	ldr	r2, [sp, #4]
    4f46:	4613      	mov	r3, r2
    4f48:	009b      	lsls	r3, r3, #2
    4f4a:	4413      	add	r3, r2
    4f4c:	00db      	lsls	r3, r3, #3
    4f4e:	3340      	adds	r3, #64	; 0x40
    4f50:	440b      	add	r3, r1
    4f52:	9300      	str	r3, [sp, #0]
                break;
    4f54:	e009      	b.n	4f6a <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4f56:	9b01      	ldr	r3, [sp, #4]
    4f58:	3301      	adds	r3, #1
    4f5a:	9301      	str	r3, [sp, #4]
    4f5c:	4b17      	ldr	r3, [pc, #92]	; (4fbc <getSpllConfig+0xa8>)
    4f5e:	681b      	ldr	r3, [r3, #0]
    4f60:	7a9b      	ldrb	r3, [r3, #10]
    4f62:	461a      	mov	r2, r3
    4f64:	9b01      	ldr	r3, [sp, #4]
    4f66:	4293      	cmp	r3, r2
    4f68:	d3de      	bcc.n	4f28 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f6a:	9b00      	ldr	r3, [sp, #0]
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	d121      	bne.n	4fb4 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4f70:	4b13      	ldr	r3, [pc, #76]	; (4fc0 <getSpllConfig+0xac>)
    4f72:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4f74:	4b12      	ldr	r3, [pc, #72]	; (4fc0 <getSpllConfig+0xac>)
    4f76:	2209      	movs	r2, #9
    4f78:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4f7a:	4b12      	ldr	r3, [pc, #72]	; (4fc4 <getSpllConfig+0xb0>)
    4f7c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4f80:	b29b      	uxth	r3, r3
    4f82:	f003 0301 	and.w	r3, r3, #1
    4f86:	b29a      	uxth	r2, r3
    4f88:	4b0d      	ldr	r3, [pc, #52]	; (4fc0 <getSpllConfig+0xac>)
    4f8a:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4f8c:	4b0d      	ldr	r3, [pc, #52]	; (4fc4 <getSpllConfig+0xb0>)
    4f8e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4f92:	0a1b      	lsrs	r3, r3, #8
    4f94:	b2db      	uxtb	r3, r3
    4f96:	f003 0307 	and.w	r3, r3, #7
    4f9a:	b2da      	uxtb	r2, r3
    4f9c:	4b08      	ldr	r3, [pc, #32]	; (4fc0 <getSpllConfig+0xac>)
    4f9e:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4fa0:	4b08      	ldr	r3, [pc, #32]	; (4fc4 <getSpllConfig+0xb0>)
    4fa2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4fa6:	0c1b      	lsrs	r3, r3, #16
    4fa8:	b2db      	uxtb	r3, r3
    4faa:	f003 031f 	and.w	r3, r3, #31
    4fae:	b2da      	uxtb	r2, r3
    4fb0:	4b03      	ldr	r3, [pc, #12]	; (4fc0 <getSpllConfig+0xac>)
    4fb2:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4fb4:	9b00      	ldr	r3, [sp, #0]
}
    4fb6:	4618      	mov	r0, r3
    4fb8:	b002      	add	sp, #8
    4fba:	4770      	bx	lr
    4fbc:	1fff8b9c 	.word	0x1fff8b9c
    4fc0:	1fff8c28 	.word	0x1fff8c28
    4fc4:	40064000 	.word	0x40064000

00004fc8 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4fc8:	b086      	sub	sp, #24
    4fca:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4fcc:	2300      	movs	r3, #0
    4fce:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4fd0:	9b01      	ldr	r3, [sp, #4]
    4fd2:	2b1b      	cmp	r3, #27
    4fd4:	d00f      	beq.n	4ff6 <getSelectorConfig+0x2e>
    4fd6:	9b01      	ldr	r3, [sp, #4]
    4fd8:	2b1b      	cmp	r3, #27
    4fda:	d80f      	bhi.n	4ffc <getSelectorConfig+0x34>
    4fdc:	9b01      	ldr	r3, [sp, #4]
    4fde:	2b19      	cmp	r3, #25
    4fe0:	d003      	beq.n	4fea <getSelectorConfig+0x22>
    4fe2:	9b01      	ldr	r3, [sp, #4]
    4fe4:	2b1a      	cmp	r3, #26
    4fe6:	d003      	beq.n	4ff0 <getSelectorConfig+0x28>
    4fe8:	e008      	b.n	4ffc <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4fea:	2300      	movs	r3, #0
    4fec:	9304      	str	r3, [sp, #16]
            break;
    4fee:	e008      	b.n	5002 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4ff0:	2301      	movs	r3, #1
    4ff2:	9304      	str	r3, [sp, #16]
            break;
    4ff4:	e005      	b.n	5002 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4ff6:	2302      	movs	r3, #2
    4ff8:	9304      	str	r3, [sp, #16]
            break;
    4ffa:	e002      	b.n	5002 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4ffc:	2300      	movs	r3, #0
    4ffe:	9304      	str	r3, [sp, #16]
            break;
    5000:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5002:	4b36      	ldr	r3, [pc, #216]	; (50dc <getSelectorConfig+0x114>)
    5004:	681b      	ldr	r3, [r3, #0]
    5006:	2b00      	cmp	r3, #0
    5008:	d01d      	beq.n	5046 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    500a:	2300      	movs	r3, #0
    500c:	9303      	str	r3, [sp, #12]
    500e:	e013      	b.n	5038 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5010:	4b32      	ldr	r3, [pc, #200]	; (50dc <getSelectorConfig+0x114>)
    5012:	681b      	ldr	r3, [r3, #0]
    5014:	9a03      	ldr	r2, [sp, #12]
    5016:	320d      	adds	r2, #13
    5018:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    501c:	9a01      	ldr	r2, [sp, #4]
    501e:	429a      	cmp	r2, r3
    5020:	d107      	bne.n	5032 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    5022:	4b2e      	ldr	r3, [pc, #184]	; (50dc <getSelectorConfig+0x114>)
    5024:	681a      	ldr	r2, [r3, #0]
    5026:	9b03      	ldr	r3, [sp, #12]
    5028:	330d      	adds	r3, #13
    502a:	00db      	lsls	r3, r3, #3
    502c:	4413      	add	r3, r2
    502e:	9305      	str	r3, [sp, #20]
                break;
    5030:	e009      	b.n	5046 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5032:	9b03      	ldr	r3, [sp, #12]
    5034:	3301      	adds	r3, #1
    5036:	9303      	str	r3, [sp, #12]
    5038:	4b28      	ldr	r3, [pc, #160]	; (50dc <getSelectorConfig+0x114>)
    503a:	681b      	ldr	r3, [r3, #0]
    503c:	7adb      	ldrb	r3, [r3, #11]
    503e:	461a      	mov	r2, r3
    5040:	9b03      	ldr	r3, [sp, #12]
    5042:	4293      	cmp	r3, r2
    5044:	d3e4      	bcc.n	5010 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5046:	9b05      	ldr	r3, [sp, #20]
    5048:	2b00      	cmp	r3, #0
    504a:	d140      	bne.n	50ce <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    504c:	9b04      	ldr	r3, [sp, #16]
    504e:	00db      	lsls	r3, r3, #3
    5050:	4a23      	ldr	r2, [pc, #140]	; (50e0 <getSelectorConfig+0x118>)
    5052:	4413      	add	r3, r2
    5054:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    5056:	4922      	ldr	r1, [pc, #136]	; (50e0 <getSelectorConfig+0x118>)
    5058:	9b04      	ldr	r3, [sp, #16]
    505a:	9a01      	ldr	r2, [sp, #4]
    505c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    5060:	9b01      	ldr	r3, [sp, #4]
    5062:	2b1b      	cmp	r3, #27
    5064:	d025      	beq.n	50b2 <getSelectorConfig+0xea>
    5066:	9b01      	ldr	r3, [sp, #4]
    5068:	2b1b      	cmp	r3, #27
    506a:	d832      	bhi.n	50d2 <getSelectorConfig+0x10a>
    506c:	9b01      	ldr	r3, [sp, #4]
    506e:	2b19      	cmp	r3, #25
    5070:	d003      	beq.n	507a <getSelectorConfig+0xb2>
    5072:	9b01      	ldr	r3, [sp, #4]
    5074:	2b1a      	cmp	r3, #26
    5076:	d00e      	beq.n	5096 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5078:	e02b      	b.n	50d2 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    507a:	4b1a      	ldr	r3, [pc, #104]	; (50e4 <getSelectorConfig+0x11c>)
    507c:	695b      	ldr	r3, [r3, #20]
    507e:	0e1b      	lsrs	r3, r3, #24
    5080:	f003 030f 	and.w	r3, r3, #15
    5084:	4a18      	ldr	r2, [pc, #96]	; (50e8 <getSelectorConfig+0x120>)
    5086:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    508a:	4915      	ldr	r1, [pc, #84]	; (50e0 <getSelectorConfig+0x118>)
    508c:	9b04      	ldr	r3, [sp, #16]
    508e:	00db      	lsls	r3, r3, #3
    5090:	440b      	add	r3, r1
    5092:	605a      	str	r2, [r3, #4]
                break;
    5094:	e01e      	b.n	50d4 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    5096:	4b13      	ldr	r3, [pc, #76]	; (50e4 <getSelectorConfig+0x11c>)
    5098:	699b      	ldr	r3, [r3, #24]
    509a:	0e1b      	lsrs	r3, r3, #24
    509c:	f003 030f 	and.w	r3, r3, #15
    50a0:	4a11      	ldr	r2, [pc, #68]	; (50e8 <getSelectorConfig+0x120>)
    50a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    50a6:	490e      	ldr	r1, [pc, #56]	; (50e0 <getSelectorConfig+0x118>)
    50a8:	9b04      	ldr	r3, [sp, #16]
    50aa:	00db      	lsls	r3, r3, #3
    50ac:	440b      	add	r3, r1
    50ae:	605a      	str	r2, [r3, #4]
                break;
    50b0:	e010      	b.n	50d4 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    50b2:	4b0c      	ldr	r3, [pc, #48]	; (50e4 <getSelectorConfig+0x11c>)
    50b4:	69db      	ldr	r3, [r3, #28]
    50b6:	0e1b      	lsrs	r3, r3, #24
    50b8:	f003 030f 	and.w	r3, r3, #15
    50bc:	4a0a      	ldr	r2, [pc, #40]	; (50e8 <getSelectorConfig+0x120>)
    50be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    50c2:	4907      	ldr	r1, [pc, #28]	; (50e0 <getSelectorConfig+0x118>)
    50c4:	9b04      	ldr	r3, [sp, #16]
    50c6:	00db      	lsls	r3, r3, #3
    50c8:	440b      	add	r3, r1
    50ca:	605a      	str	r2, [r3, #4]
                break;
    50cc:	e002      	b.n	50d4 <getSelectorConfig+0x10c>
        }
    }
    50ce:	bf00      	nop
    50d0:	e000      	b.n	50d4 <getSelectorConfig+0x10c>
                break;
    50d2:	bf00      	nop

    return ReturnValue;
    50d4:	9b05      	ldr	r3, [sp, #20]
}
    50d6:	4618      	mov	r0, r3
    50d8:	b006      	add	sp, #24
    50da:	4770      	bx	lr
    50dc:	1fff8b9c 	.word	0x1fff8b9c
    50e0:	1fff8c50 	.word	0x1fff8c50
    50e4:	40064000 	.word	0x40064000
    50e8:	00018508 	.word	0x00018508

000050ec <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    50ec:	b086      	sub	sp, #24
    50ee:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    50f0:	2300      	movs	r3, #0
    50f2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    50f4:	2300      	movs	r3, #0
    50f6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    50f8:	9b01      	ldr	r3, [sp, #4]
    50fa:	2b1f      	cmp	r3, #31
    50fc:	d00f      	beq.n	511e <getCoreDividerConfig+0x32>
    50fe:	9b01      	ldr	r3, [sp, #4]
    5100:	2b1f      	cmp	r3, #31
    5102:	d80f      	bhi.n	5124 <getCoreDividerConfig+0x38>
    5104:	9b01      	ldr	r3, [sp, #4]
    5106:	2b1d      	cmp	r3, #29
    5108:	d003      	beq.n	5112 <getCoreDividerConfig+0x26>
    510a:	9b01      	ldr	r3, [sp, #4]
    510c:	2b1e      	cmp	r3, #30
    510e:	d003      	beq.n	5118 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5110:	e008      	b.n	5124 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5112:	2300      	movs	r3, #0
    5114:	9304      	str	r3, [sp, #16]
            break;
    5116:	e006      	b.n	5126 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5118:	2301      	movs	r3, #1
    511a:	9304      	str	r3, [sp, #16]
            break;
    511c:	e003      	b.n	5126 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    511e:	2302      	movs	r3, #2
    5120:	9304      	str	r3, [sp, #16]
            break;
    5122:	e000      	b.n	5126 <getCoreDividerConfig+0x3a>
                break;
    5124:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5126:	4b41      	ldr	r3, [pc, #260]	; (522c <getCoreDividerConfig+0x140>)
    5128:	681b      	ldr	r3, [r3, #0]
    512a:	2b00      	cmp	r3, #0
    512c:	d026      	beq.n	517c <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    512e:	2300      	movs	r3, #0
    5130:	9303      	str	r3, [sp, #12]
    5132:	e01c      	b.n	516e <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5134:	4b3d      	ldr	r3, [pc, #244]	; (522c <getCoreDividerConfig+0x140>)
    5136:	6819      	ldr	r1, [r3, #0]
    5138:	9a03      	ldr	r2, [sp, #12]
    513a:	4613      	mov	r3, r2
    513c:	005b      	lsls	r3, r3, #1
    513e:	4413      	add	r3, r2
    5140:	009b      	lsls	r3, r3, #2
    5142:	440b      	add	r3, r1
    5144:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5148:	681b      	ldr	r3, [r3, #0]
    514a:	9a01      	ldr	r2, [sp, #4]
    514c:	429a      	cmp	r2, r3
    514e:	d10b      	bne.n	5168 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5150:	4b36      	ldr	r3, [pc, #216]	; (522c <getCoreDividerConfig+0x140>)
    5152:	6819      	ldr	r1, [r3, #0]
    5154:	9a03      	ldr	r2, [sp, #12]
    5156:	4613      	mov	r3, r2
    5158:	005b      	lsls	r3, r3, #1
    515a:	4413      	add	r3, r2
    515c:	009b      	lsls	r3, r3, #2
    515e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5162:	440b      	add	r3, r1
    5164:	9305      	str	r3, [sp, #20]
                break;
    5166:	e009      	b.n	517c <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5168:	9b03      	ldr	r3, [sp, #12]
    516a:	3301      	adds	r3, #1
    516c:	9303      	str	r3, [sp, #12]
    516e:	4b2f      	ldr	r3, [pc, #188]	; (522c <getCoreDividerConfig+0x140>)
    5170:	681b      	ldr	r3, [r3, #0]
    5172:	7b1b      	ldrb	r3, [r3, #12]
    5174:	461a      	mov	r2, r3
    5176:	9b03      	ldr	r3, [sp, #12]
    5178:	4293      	cmp	r3, r2
    517a:	d3db      	bcc.n	5134 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    517c:	9b05      	ldr	r3, [sp, #20]
    517e:	2b00      	cmp	r3, #0
    5180:	d14d      	bne.n	521e <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5182:	9a04      	ldr	r2, [sp, #16]
    5184:	4613      	mov	r3, r2
    5186:	005b      	lsls	r3, r3, #1
    5188:	4413      	add	r3, r2
    518a:	009b      	lsls	r3, r3, #2
    518c:	4a28      	ldr	r2, [pc, #160]	; (5230 <getCoreDividerConfig+0x144>)
    518e:	4413      	add	r3, r2
    5190:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5192:	4927      	ldr	r1, [pc, #156]	; (5230 <getCoreDividerConfig+0x144>)
    5194:	9a04      	ldr	r2, [sp, #16]
    5196:	4613      	mov	r3, r2
    5198:	005b      	lsls	r3, r3, #1
    519a:	4413      	add	r3, r2
    519c:	009b      	lsls	r3, r3, #2
    519e:	440b      	add	r3, r1
    51a0:	9a01      	ldr	r2, [sp, #4]
    51a2:	601a      	str	r2, [r3, #0]
        switch(Name)
    51a4:	9b01      	ldr	r3, [sp, #4]
    51a6:	2b1f      	cmp	r3, #31
    51a8:	d029      	beq.n	51fe <getCoreDividerConfig+0x112>
    51aa:	9b01      	ldr	r3, [sp, #4]
    51ac:	2b1f      	cmp	r3, #31
    51ae:	d838      	bhi.n	5222 <getCoreDividerConfig+0x136>
    51b0:	9b01      	ldr	r3, [sp, #4]
    51b2:	2b1d      	cmp	r3, #29
    51b4:	d003      	beq.n	51be <getCoreDividerConfig+0xd2>
    51b6:	9b01      	ldr	r3, [sp, #4]
    51b8:	2b1e      	cmp	r3, #30
    51ba:	d010      	beq.n	51de <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    51bc:	e031      	b.n	5222 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    51be:	4b1d      	ldr	r3, [pc, #116]	; (5234 <getCoreDividerConfig+0x148>)
    51c0:	695b      	ldr	r3, [r3, #20]
    51c2:	0c1b      	lsrs	r3, r3, #16
    51c4:	f003 030f 	and.w	r3, r3, #15
    51c8:	1c59      	adds	r1, r3, #1
    51ca:	4819      	ldr	r0, [pc, #100]	; (5230 <getCoreDividerConfig+0x144>)
    51cc:	9a04      	ldr	r2, [sp, #16]
    51ce:	4613      	mov	r3, r2
    51d0:	005b      	lsls	r3, r3, #1
    51d2:	4413      	add	r3, r2
    51d4:	009b      	lsls	r3, r3, #2
    51d6:	4403      	add	r3, r0
    51d8:	3304      	adds	r3, #4
    51da:	6019      	str	r1, [r3, #0]
                break;
    51dc:	e022      	b.n	5224 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    51de:	4b15      	ldr	r3, [pc, #84]	; (5234 <getCoreDividerConfig+0x148>)
    51e0:	699b      	ldr	r3, [r3, #24]
    51e2:	0c1b      	lsrs	r3, r3, #16
    51e4:	f003 030f 	and.w	r3, r3, #15
    51e8:	1c59      	adds	r1, r3, #1
    51ea:	4811      	ldr	r0, [pc, #68]	; (5230 <getCoreDividerConfig+0x144>)
    51ec:	9a04      	ldr	r2, [sp, #16]
    51ee:	4613      	mov	r3, r2
    51f0:	005b      	lsls	r3, r3, #1
    51f2:	4413      	add	r3, r2
    51f4:	009b      	lsls	r3, r3, #2
    51f6:	4403      	add	r3, r0
    51f8:	3304      	adds	r3, #4
    51fa:	6019      	str	r1, [r3, #0]
                break;
    51fc:	e012      	b.n	5224 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    51fe:	4b0d      	ldr	r3, [pc, #52]	; (5234 <getCoreDividerConfig+0x148>)
    5200:	69db      	ldr	r3, [r3, #28]
    5202:	0c1b      	lsrs	r3, r3, #16
    5204:	f003 030f 	and.w	r3, r3, #15
    5208:	1c59      	adds	r1, r3, #1
    520a:	4809      	ldr	r0, [pc, #36]	; (5230 <getCoreDividerConfig+0x144>)
    520c:	9a04      	ldr	r2, [sp, #16]
    520e:	4613      	mov	r3, r2
    5210:	005b      	lsls	r3, r3, #1
    5212:	4413      	add	r3, r2
    5214:	009b      	lsls	r3, r3, #2
    5216:	4403      	add	r3, r0
    5218:	3304      	adds	r3, #4
    521a:	6019      	str	r1, [r3, #0]
                break;
    521c:	e002      	b.n	5224 <getCoreDividerConfig+0x138>
        }
    }
    521e:	bf00      	nop
    5220:	e000      	b.n	5224 <getCoreDividerConfig+0x138>
                break;
    5222:	bf00      	nop

    return ReturnValue;
    5224:	9b05      	ldr	r3, [sp, #20]
}
    5226:	4618      	mov	r0, r3
    5228:	b006      	add	sp, #24
    522a:	4770      	bx	lr
    522c:	1fff8b9c 	.word	0x1fff8b9c
    5230:	1fff8c68 	.word	0x1fff8c68
    5234:	40064000 	.word	0x40064000

00005238 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5238:	b086      	sub	sp, #24
    523a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    523c:	2300      	movs	r3, #0
    523e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5240:	2300      	movs	r3, #0
    5242:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5244:	9b01      	ldr	r3, [sp, #4]
    5246:	2b23      	cmp	r3, #35	; 0x23
    5248:	d00f      	beq.n	526a <getBusDividerConfig+0x32>
    524a:	9b01      	ldr	r3, [sp, #4]
    524c:	2b23      	cmp	r3, #35	; 0x23
    524e:	d80f      	bhi.n	5270 <getBusDividerConfig+0x38>
    5250:	9b01      	ldr	r3, [sp, #4]
    5252:	2b21      	cmp	r3, #33	; 0x21
    5254:	d003      	beq.n	525e <getBusDividerConfig+0x26>
    5256:	9b01      	ldr	r3, [sp, #4]
    5258:	2b22      	cmp	r3, #34	; 0x22
    525a:	d003      	beq.n	5264 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    525c:	e008      	b.n	5270 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    525e:	2300      	movs	r3, #0
    5260:	9304      	str	r3, [sp, #16]
            break;
    5262:	e006      	b.n	5272 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5264:	2301      	movs	r3, #1
    5266:	9304      	str	r3, [sp, #16]
            break;
    5268:	e003      	b.n	5272 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    526a:	2302      	movs	r3, #2
    526c:	9304      	str	r3, [sp, #16]
            break;
    526e:	e000      	b.n	5272 <getBusDividerConfig+0x3a>
                break;
    5270:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5272:	4b41      	ldr	r3, [pc, #260]	; (5378 <getBusDividerConfig+0x140>)
    5274:	681b      	ldr	r3, [r3, #0]
    5276:	2b00      	cmp	r3, #0
    5278:	d026      	beq.n	52c8 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    527a:	2300      	movs	r3, #0
    527c:	9303      	str	r3, [sp, #12]
    527e:	e01c      	b.n	52ba <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5280:	4b3d      	ldr	r3, [pc, #244]	; (5378 <getBusDividerConfig+0x140>)
    5282:	6819      	ldr	r1, [r3, #0]
    5284:	9a03      	ldr	r2, [sp, #12]
    5286:	4613      	mov	r3, r2
    5288:	005b      	lsls	r3, r3, #1
    528a:	4413      	add	r3, r2
    528c:	009b      	lsls	r3, r3, #2
    528e:	440b      	add	r3, r1
    5290:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5294:	681b      	ldr	r3, [r3, #0]
    5296:	9a01      	ldr	r2, [sp, #4]
    5298:	429a      	cmp	r2, r3
    529a:	d10b      	bne.n	52b4 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    529c:	4b36      	ldr	r3, [pc, #216]	; (5378 <getBusDividerConfig+0x140>)
    529e:	6819      	ldr	r1, [r3, #0]
    52a0:	9a03      	ldr	r2, [sp, #12]
    52a2:	4613      	mov	r3, r2
    52a4:	005b      	lsls	r3, r3, #1
    52a6:	4413      	add	r3, r2
    52a8:	009b      	lsls	r3, r3, #2
    52aa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    52ae:	440b      	add	r3, r1
    52b0:	9305      	str	r3, [sp, #20]
                break;
    52b2:	e009      	b.n	52c8 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    52b4:	9b03      	ldr	r3, [sp, #12]
    52b6:	3301      	adds	r3, #1
    52b8:	9303      	str	r3, [sp, #12]
    52ba:	4b2f      	ldr	r3, [pc, #188]	; (5378 <getBusDividerConfig+0x140>)
    52bc:	681b      	ldr	r3, [r3, #0]
    52be:	7b1b      	ldrb	r3, [r3, #12]
    52c0:	461a      	mov	r2, r3
    52c2:	9b03      	ldr	r3, [sp, #12]
    52c4:	4293      	cmp	r3, r2
    52c6:	d3db      	bcc.n	5280 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    52c8:	9b05      	ldr	r3, [sp, #20]
    52ca:	2b00      	cmp	r3, #0
    52cc:	d14d      	bne.n	536a <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    52ce:	9a04      	ldr	r2, [sp, #16]
    52d0:	4613      	mov	r3, r2
    52d2:	005b      	lsls	r3, r3, #1
    52d4:	4413      	add	r3, r2
    52d6:	009b      	lsls	r3, r3, #2
    52d8:	4a28      	ldr	r2, [pc, #160]	; (537c <getBusDividerConfig+0x144>)
    52da:	4413      	add	r3, r2
    52dc:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    52de:	4927      	ldr	r1, [pc, #156]	; (537c <getBusDividerConfig+0x144>)
    52e0:	9a04      	ldr	r2, [sp, #16]
    52e2:	4613      	mov	r3, r2
    52e4:	005b      	lsls	r3, r3, #1
    52e6:	4413      	add	r3, r2
    52e8:	009b      	lsls	r3, r3, #2
    52ea:	440b      	add	r3, r1
    52ec:	9a01      	ldr	r2, [sp, #4]
    52ee:	601a      	str	r2, [r3, #0]
        switch(Name)
    52f0:	9b01      	ldr	r3, [sp, #4]
    52f2:	2b23      	cmp	r3, #35	; 0x23
    52f4:	d029      	beq.n	534a <getBusDividerConfig+0x112>
    52f6:	9b01      	ldr	r3, [sp, #4]
    52f8:	2b23      	cmp	r3, #35	; 0x23
    52fa:	d838      	bhi.n	536e <getBusDividerConfig+0x136>
    52fc:	9b01      	ldr	r3, [sp, #4]
    52fe:	2b21      	cmp	r3, #33	; 0x21
    5300:	d003      	beq.n	530a <getBusDividerConfig+0xd2>
    5302:	9b01      	ldr	r3, [sp, #4]
    5304:	2b22      	cmp	r3, #34	; 0x22
    5306:	d010      	beq.n	532a <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5308:	e031      	b.n	536e <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    530a:	4b1d      	ldr	r3, [pc, #116]	; (5380 <getBusDividerConfig+0x148>)
    530c:	695b      	ldr	r3, [r3, #20]
    530e:	091b      	lsrs	r3, r3, #4
    5310:	f003 030f 	and.w	r3, r3, #15
    5314:	1c59      	adds	r1, r3, #1
    5316:	4819      	ldr	r0, [pc, #100]	; (537c <getBusDividerConfig+0x144>)
    5318:	9a04      	ldr	r2, [sp, #16]
    531a:	4613      	mov	r3, r2
    531c:	005b      	lsls	r3, r3, #1
    531e:	4413      	add	r3, r2
    5320:	009b      	lsls	r3, r3, #2
    5322:	4403      	add	r3, r0
    5324:	3304      	adds	r3, #4
    5326:	6019      	str	r1, [r3, #0]
                break;
    5328:	e022      	b.n	5370 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    532a:	4b15      	ldr	r3, [pc, #84]	; (5380 <getBusDividerConfig+0x148>)
    532c:	699b      	ldr	r3, [r3, #24]
    532e:	091b      	lsrs	r3, r3, #4
    5330:	f003 030f 	and.w	r3, r3, #15
    5334:	1c59      	adds	r1, r3, #1
    5336:	4811      	ldr	r0, [pc, #68]	; (537c <getBusDividerConfig+0x144>)
    5338:	9a04      	ldr	r2, [sp, #16]
    533a:	4613      	mov	r3, r2
    533c:	005b      	lsls	r3, r3, #1
    533e:	4413      	add	r3, r2
    5340:	009b      	lsls	r3, r3, #2
    5342:	4403      	add	r3, r0
    5344:	3304      	adds	r3, #4
    5346:	6019      	str	r1, [r3, #0]
                break;
    5348:	e012      	b.n	5370 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    534a:	4b0d      	ldr	r3, [pc, #52]	; (5380 <getBusDividerConfig+0x148>)
    534c:	69db      	ldr	r3, [r3, #28]
    534e:	091b      	lsrs	r3, r3, #4
    5350:	f003 030f 	and.w	r3, r3, #15
    5354:	1c59      	adds	r1, r3, #1
    5356:	4809      	ldr	r0, [pc, #36]	; (537c <getBusDividerConfig+0x144>)
    5358:	9a04      	ldr	r2, [sp, #16]
    535a:	4613      	mov	r3, r2
    535c:	005b      	lsls	r3, r3, #1
    535e:	4413      	add	r3, r2
    5360:	009b      	lsls	r3, r3, #2
    5362:	4403      	add	r3, r0
    5364:	3304      	adds	r3, #4
    5366:	6019      	str	r1, [r3, #0]
                break;
    5368:	e002      	b.n	5370 <getBusDividerConfig+0x138>
        }
    }
    536a:	bf00      	nop
    536c:	e000      	b.n	5370 <getBusDividerConfig+0x138>
                break;
    536e:	bf00      	nop

    return ReturnValue;
    5370:	9b05      	ldr	r3, [sp, #20]
}
    5372:	4618      	mov	r0, r3
    5374:	b006      	add	sp, #24
    5376:	4770      	bx	lr
    5378:	1fff8b9c 	.word	0x1fff8b9c
    537c:	1fff8c8c 	.word	0x1fff8c8c
    5380:	40064000 	.word	0x40064000

00005384 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5384:	b086      	sub	sp, #24
    5386:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5388:	2300      	movs	r3, #0
    538a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    538c:	2300      	movs	r3, #0
    538e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5390:	9b01      	ldr	r3, [sp, #4]
    5392:	2b27      	cmp	r3, #39	; 0x27
    5394:	d00f      	beq.n	53b6 <getSlowDividerConfig+0x32>
    5396:	9b01      	ldr	r3, [sp, #4]
    5398:	2b27      	cmp	r3, #39	; 0x27
    539a:	d80f      	bhi.n	53bc <getSlowDividerConfig+0x38>
    539c:	9b01      	ldr	r3, [sp, #4]
    539e:	2b25      	cmp	r3, #37	; 0x25
    53a0:	d003      	beq.n	53aa <getSlowDividerConfig+0x26>
    53a2:	9b01      	ldr	r3, [sp, #4]
    53a4:	2b26      	cmp	r3, #38	; 0x26
    53a6:	d003      	beq.n	53b0 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    53a8:	e008      	b.n	53bc <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    53aa:	2300      	movs	r3, #0
    53ac:	9304      	str	r3, [sp, #16]
            break;
    53ae:	e006      	b.n	53be <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    53b0:	2301      	movs	r3, #1
    53b2:	9304      	str	r3, [sp, #16]
            break;
    53b4:	e003      	b.n	53be <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    53b6:	2302      	movs	r3, #2
    53b8:	9304      	str	r3, [sp, #16]
            break;
    53ba:	e000      	b.n	53be <getSlowDividerConfig+0x3a>
                break;
    53bc:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    53be:	4b40      	ldr	r3, [pc, #256]	; (54c0 <getSlowDividerConfig+0x13c>)
    53c0:	681b      	ldr	r3, [r3, #0]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d026      	beq.n	5414 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    53c6:	2300      	movs	r3, #0
    53c8:	9303      	str	r3, [sp, #12]
    53ca:	e01c      	b.n	5406 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    53cc:	4b3c      	ldr	r3, [pc, #240]	; (54c0 <getSlowDividerConfig+0x13c>)
    53ce:	6819      	ldr	r1, [r3, #0]
    53d0:	9a03      	ldr	r2, [sp, #12]
    53d2:	4613      	mov	r3, r2
    53d4:	005b      	lsls	r3, r3, #1
    53d6:	4413      	add	r3, r2
    53d8:	009b      	lsls	r3, r3, #2
    53da:	440b      	add	r3, r1
    53dc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    53e0:	681b      	ldr	r3, [r3, #0]
    53e2:	9a01      	ldr	r2, [sp, #4]
    53e4:	429a      	cmp	r2, r3
    53e6:	d10b      	bne.n	5400 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    53e8:	4b35      	ldr	r3, [pc, #212]	; (54c0 <getSlowDividerConfig+0x13c>)
    53ea:	6819      	ldr	r1, [r3, #0]
    53ec:	9a03      	ldr	r2, [sp, #12]
    53ee:	4613      	mov	r3, r2
    53f0:	005b      	lsls	r3, r3, #1
    53f2:	4413      	add	r3, r2
    53f4:	009b      	lsls	r3, r3, #2
    53f6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    53fa:	440b      	add	r3, r1
    53fc:	9305      	str	r3, [sp, #20]
                break;
    53fe:	e009      	b.n	5414 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5400:	9b03      	ldr	r3, [sp, #12]
    5402:	3301      	adds	r3, #1
    5404:	9303      	str	r3, [sp, #12]
    5406:	4b2e      	ldr	r3, [pc, #184]	; (54c0 <getSlowDividerConfig+0x13c>)
    5408:	681b      	ldr	r3, [r3, #0]
    540a:	7b1b      	ldrb	r3, [r3, #12]
    540c:	461a      	mov	r2, r3
    540e:	9b03      	ldr	r3, [sp, #12]
    5410:	4293      	cmp	r3, r2
    5412:	d3db      	bcc.n	53cc <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5414:	9b05      	ldr	r3, [sp, #20]
    5416:	2b00      	cmp	r3, #0
    5418:	d14a      	bne.n	54b0 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    541a:	9a04      	ldr	r2, [sp, #16]
    541c:	4613      	mov	r3, r2
    541e:	005b      	lsls	r3, r3, #1
    5420:	4413      	add	r3, r2
    5422:	009b      	lsls	r3, r3, #2
    5424:	4a27      	ldr	r2, [pc, #156]	; (54c4 <getSlowDividerConfig+0x140>)
    5426:	4413      	add	r3, r2
    5428:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    542a:	4926      	ldr	r1, [pc, #152]	; (54c4 <getSlowDividerConfig+0x140>)
    542c:	9a04      	ldr	r2, [sp, #16]
    542e:	4613      	mov	r3, r2
    5430:	005b      	lsls	r3, r3, #1
    5432:	4413      	add	r3, r2
    5434:	009b      	lsls	r3, r3, #2
    5436:	440b      	add	r3, r1
    5438:	9a01      	ldr	r2, [sp, #4]
    543a:	601a      	str	r2, [r3, #0]
        switch(Name)
    543c:	9b01      	ldr	r3, [sp, #4]
    543e:	2b27      	cmp	r3, #39	; 0x27
    5440:	d027      	beq.n	5492 <getSlowDividerConfig+0x10e>
    5442:	9b01      	ldr	r3, [sp, #4]
    5444:	2b27      	cmp	r3, #39	; 0x27
    5446:	d835      	bhi.n	54b4 <getSlowDividerConfig+0x130>
    5448:	9b01      	ldr	r3, [sp, #4]
    544a:	2b25      	cmp	r3, #37	; 0x25
    544c:	d003      	beq.n	5456 <getSlowDividerConfig+0xd2>
    544e:	9b01      	ldr	r3, [sp, #4]
    5450:	2b26      	cmp	r3, #38	; 0x26
    5452:	d00f      	beq.n	5474 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5454:	e02e      	b.n	54b4 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5456:	4b1c      	ldr	r3, [pc, #112]	; (54c8 <getSlowDividerConfig+0x144>)
    5458:	695b      	ldr	r3, [r3, #20]
    545a:	f003 030f 	and.w	r3, r3, #15
    545e:	1c59      	adds	r1, r3, #1
    5460:	4818      	ldr	r0, [pc, #96]	; (54c4 <getSlowDividerConfig+0x140>)
    5462:	9a04      	ldr	r2, [sp, #16]
    5464:	4613      	mov	r3, r2
    5466:	005b      	lsls	r3, r3, #1
    5468:	4413      	add	r3, r2
    546a:	009b      	lsls	r3, r3, #2
    546c:	4403      	add	r3, r0
    546e:	3304      	adds	r3, #4
    5470:	6019      	str	r1, [r3, #0]
                break;
    5472:	e020      	b.n	54b6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5474:	4b14      	ldr	r3, [pc, #80]	; (54c8 <getSlowDividerConfig+0x144>)
    5476:	699b      	ldr	r3, [r3, #24]
    5478:	f003 030f 	and.w	r3, r3, #15
    547c:	1c59      	adds	r1, r3, #1
    547e:	4811      	ldr	r0, [pc, #68]	; (54c4 <getSlowDividerConfig+0x140>)
    5480:	9a04      	ldr	r2, [sp, #16]
    5482:	4613      	mov	r3, r2
    5484:	005b      	lsls	r3, r3, #1
    5486:	4413      	add	r3, r2
    5488:	009b      	lsls	r3, r3, #2
    548a:	4403      	add	r3, r0
    548c:	3304      	adds	r3, #4
    548e:	6019      	str	r1, [r3, #0]
                break;
    5490:	e011      	b.n	54b6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5492:	4b0d      	ldr	r3, [pc, #52]	; (54c8 <getSlowDividerConfig+0x144>)
    5494:	69db      	ldr	r3, [r3, #28]
    5496:	f003 030f 	and.w	r3, r3, #15
    549a:	1c59      	adds	r1, r3, #1
    549c:	4809      	ldr	r0, [pc, #36]	; (54c4 <getSlowDividerConfig+0x140>)
    549e:	9a04      	ldr	r2, [sp, #16]
    54a0:	4613      	mov	r3, r2
    54a2:	005b      	lsls	r3, r3, #1
    54a4:	4413      	add	r3, r2
    54a6:	009b      	lsls	r3, r3, #2
    54a8:	4403      	add	r3, r0
    54aa:	3304      	adds	r3, #4
    54ac:	6019      	str	r1, [r3, #0]
                break;
    54ae:	e002      	b.n	54b6 <getSlowDividerConfig+0x132>
        }
    }
    54b0:	bf00      	nop
    54b2:	e000      	b.n	54b6 <getSlowDividerConfig+0x132>
                break;
    54b4:	bf00      	nop

    return ReturnValue;
    54b6:	9b05      	ldr	r3, [sp, #20]
}
    54b8:	4618      	mov	r0, r3
    54ba:	b006      	add	sp, #24
    54bc:	4770      	bx	lr
    54be:	bf00      	nop
    54c0:	1fff8b9c 	.word	0x1fff8b9c
    54c4:	1fff8cb0 	.word	0x1fff8cb0
    54c8:	40064000 	.word	0x40064000

000054cc <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    54cc:	b500      	push	{lr}
    54ce:	b083      	sub	sp, #12
    54d0:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    54d2:	4b64      	ldr	r3, [pc, #400]	; (5664 <Clock_Ip_ClockInitializeObjects+0x198>)
    54d4:	781b      	ldrb	r3, [r3, #0]
    54d6:	f083 0301 	eor.w	r3, r3, #1
    54da:	b2db      	uxtb	r3, r3
    54dc:	2b00      	cmp	r3, #0
    54de:	d05b      	beq.n	5598 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    54e0:	4b60      	ldr	r3, [pc, #384]	; (5664 <Clock_Ip_ClockInitializeObjects+0x198>)
    54e2:	2201      	movs	r2, #1
    54e4:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    54e6:	4b60      	ldr	r3, [pc, #384]	; (5668 <Clock_Ip_ClockInitializeObjects+0x19c>)
    54e8:	785b      	ldrb	r3, [r3, #1]
    54ea:	461a      	mov	r2, r3
    54ec:	4613      	mov	r3, r2
    54ee:	009b      	lsls	r3, r3, #2
    54f0:	4413      	add	r3, r2
    54f2:	009b      	lsls	r3, r3, #2
    54f4:	4a5d      	ldr	r2, [pc, #372]	; (566c <Clock_Ip_ClockInitializeObjects+0x1a0>)
    54f6:	4413      	add	r3, r2
    54f8:	4a5d      	ldr	r2, [pc, #372]	; (5670 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    54fa:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    54fc:	4b5d      	ldr	r3, [pc, #372]	; (5674 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    54fe:	785b      	ldrb	r3, [r3, #1]
    5500:	461a      	mov	r2, r3
    5502:	4613      	mov	r3, r2
    5504:	009b      	lsls	r3, r3, #2
    5506:	4413      	add	r3, r2
    5508:	009b      	lsls	r3, r3, #2
    550a:	4a5b      	ldr	r2, [pc, #364]	; (5678 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    550c:	4413      	add	r3, r2
    550e:	4a5b      	ldr	r2, [pc, #364]	; (567c <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5510:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5512:	4b5b      	ldr	r3, [pc, #364]	; (5680 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5514:	791b      	ldrb	r3, [r3, #4]
    5516:	461a      	mov	r2, r3
    5518:	4613      	mov	r3, r2
    551a:	005b      	lsls	r3, r3, #1
    551c:	4413      	add	r3, r2
    551e:	009b      	lsls	r3, r3, #2
    5520:	4a58      	ldr	r2, [pc, #352]	; (5684 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5522:	4413      	add	r3, r2
    5524:	4a58      	ldr	r2, [pc, #352]	; (5688 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5526:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5528:	4b58      	ldr	r3, [pc, #352]	; (568c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    552a:	795b      	ldrb	r3, [r3, #5]
    552c:	00db      	lsls	r3, r3, #3
    552e:	4a58      	ldr	r2, [pc, #352]	; (5690 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5530:	4413      	add	r3, r2
    5532:	4a58      	ldr	r2, [pc, #352]	; (5694 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5534:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5536:	4b55      	ldr	r3, [pc, #340]	; (568c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5538:	79db      	ldrb	r3, [r3, #7]
    553a:	00db      	lsls	r3, r3, #3
    553c:	4a54      	ldr	r2, [pc, #336]	; (5690 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    553e:	4413      	add	r3, r2
    5540:	4a55      	ldr	r2, [pc, #340]	; (5698 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5542:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5544:	4b55      	ldr	r3, [pc, #340]	; (569c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5546:	799b      	ldrb	r3, [r3, #6]
    5548:	009b      	lsls	r3, r3, #2
    554a:	4a55      	ldr	r2, [pc, #340]	; (56a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    554c:	4413      	add	r3, r2
    554e:	4a55      	ldr	r2, [pc, #340]	; (56a4 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5550:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5552:	4b52      	ldr	r3, [pc, #328]	; (569c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5554:	7a1b      	ldrb	r3, [r3, #8]
    5556:	009b      	lsls	r3, r3, #2
    5558:	4a51      	ldr	r2, [pc, #324]	; (56a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    555a:	4413      	add	r3, r2
    555c:	4a52      	ldr	r2, [pc, #328]	; (56a8 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    555e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5560:	4b4e      	ldr	r3, [pc, #312]	; (569c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5562:	7a5b      	ldrb	r3, [r3, #9]
    5564:	009b      	lsls	r3, r3, #2
    5566:	4a4e      	ldr	r2, [pc, #312]	; (56a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5568:	4413      	add	r3, r2
    556a:	4a50      	ldr	r2, [pc, #320]	; (56ac <Clock_Ip_ClockInitializeObjects+0x1e0>)
    556c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    556e:	4b4b      	ldr	r3, [pc, #300]	; (569c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5570:	7adb      	ldrb	r3, [r3, #11]
    5572:	009b      	lsls	r3, r3, #2
    5574:	4a4a      	ldr	r2, [pc, #296]	; (56a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5576:	4413      	add	r3, r2
    5578:	4a4d      	ldr	r2, [pc, #308]	; (56b0 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    557a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    557c:	4b47      	ldr	r3, [pc, #284]	; (569c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    557e:	7b1b      	ldrb	r3, [r3, #12]
    5580:	009b      	lsls	r3, r3, #2
    5582:	4a47      	ldr	r2, [pc, #284]	; (56a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5584:	4413      	add	r3, r2
    5586:	4a4b      	ldr	r2, [pc, #300]	; (56b4 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5588:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    558a:	4b44      	ldr	r3, [pc, #272]	; (569c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    558c:	7b9b      	ldrb	r3, [r3, #14]
    558e:	009b      	lsls	r3, r3, #2
    5590:	4a43      	ldr	r2, [pc, #268]	; (56a0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5592:	4413      	add	r3, r2
    5594:	4a48      	ldr	r2, [pc, #288]	; (56b8 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5596:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5598:	4b48      	ldr	r3, [pc, #288]	; (56bc <Clock_Ip_ClockInitializeObjects+0x1f0>)
    559a:	781b      	ldrb	r3, [r3, #0]
    559c:	2b00      	cmp	r3, #0
    559e:	d002      	beq.n	55a6 <Clock_Ip_ClockInitializeObjects+0xda>
    55a0:	9b01      	ldr	r3, [sp, #4]
    55a2:	2b00      	cmp	r3, #0
    55a4:	d003      	beq.n	55ae <Clock_Ip_ClockInitializeObjects+0xe2>
    55a6:	4b46      	ldr	r3, [pc, #280]	; (56c0 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    55a8:	781b      	ldrb	r3, [r3, #0]
    55aa:	2b00      	cmp	r3, #0
    55ac:	d056      	beq.n	565c <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    55ae:	f7ff fc09 	bl	4dc4 <getFircConfig>
    55b2:	4603      	mov	r3, r0
    55b4:	4a43      	ldr	r2, [pc, #268]	; (56c4 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    55b6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    55b8:	f7ff fc60 	bl	4e7c <getSoscConfig>
    55bc:	4603      	mov	r3, r0
    55be:	4a42      	ldr	r2, [pc, #264]	; (56c8 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    55c0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    55c2:	f7ff fca7 	bl	4f14 <getSpllConfig>
    55c6:	4603      	mov	r3, r0
    55c8:	4a40      	ldr	r2, [pc, #256]	; (56cc <Clock_Ip_ClockInitializeObjects+0x200>)
    55ca:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    55cc:	2019      	movs	r0, #25
    55ce:	f7ff fcfb 	bl	4fc8 <getSelectorConfig>
    55d2:	4603      	mov	r3, r0
    55d4:	4a3e      	ldr	r2, [pc, #248]	; (56d0 <Clock_Ip_ClockInitializeObjects+0x204>)
    55d6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    55d8:	201a      	movs	r0, #26
    55da:	f7ff fcf5 	bl	4fc8 <getSelectorConfig>
    55de:	4603      	mov	r3, r0
    55e0:	4a3c      	ldr	r2, [pc, #240]	; (56d4 <Clock_Ip_ClockInitializeObjects+0x208>)
    55e2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    55e4:	201b      	movs	r0, #27
    55e6:	f7ff fcef 	bl	4fc8 <getSelectorConfig>
    55ea:	4603      	mov	r3, r0
    55ec:	4a3a      	ldr	r2, [pc, #232]	; (56d8 <Clock_Ip_ClockInitializeObjects+0x20c>)
    55ee:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    55f0:	201d      	movs	r0, #29
    55f2:	f7ff fd7b 	bl	50ec <getCoreDividerConfig>
    55f6:	4603      	mov	r3, r0
    55f8:	4a38      	ldr	r2, [pc, #224]	; (56dc <Clock_Ip_ClockInitializeObjects+0x210>)
    55fa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    55fc:	201e      	movs	r0, #30
    55fe:	f7ff fd75 	bl	50ec <getCoreDividerConfig>
    5602:	4603      	mov	r3, r0
    5604:	4a36      	ldr	r2, [pc, #216]	; (56e0 <Clock_Ip_ClockInitializeObjects+0x214>)
    5606:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5608:	201f      	movs	r0, #31
    560a:	f7ff fd6f 	bl	50ec <getCoreDividerConfig>
    560e:	4603      	mov	r3, r0
    5610:	4a34      	ldr	r2, [pc, #208]	; (56e4 <Clock_Ip_ClockInitializeObjects+0x218>)
    5612:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5614:	2021      	movs	r0, #33	; 0x21
    5616:	f7ff fe0f 	bl	5238 <getBusDividerConfig>
    561a:	4603      	mov	r3, r0
    561c:	4a32      	ldr	r2, [pc, #200]	; (56e8 <Clock_Ip_ClockInitializeObjects+0x21c>)
    561e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5620:	2022      	movs	r0, #34	; 0x22
    5622:	f7ff fe09 	bl	5238 <getBusDividerConfig>
    5626:	4603      	mov	r3, r0
    5628:	4a30      	ldr	r2, [pc, #192]	; (56ec <Clock_Ip_ClockInitializeObjects+0x220>)
    562a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    562c:	2023      	movs	r0, #35	; 0x23
    562e:	f7ff fe03 	bl	5238 <getBusDividerConfig>
    5632:	4603      	mov	r3, r0
    5634:	4a2e      	ldr	r2, [pc, #184]	; (56f0 <Clock_Ip_ClockInitializeObjects+0x224>)
    5636:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5638:	2025      	movs	r0, #37	; 0x25
    563a:	f7ff fea3 	bl	5384 <getSlowDividerConfig>
    563e:	4603      	mov	r3, r0
    5640:	4a2c      	ldr	r2, [pc, #176]	; (56f4 <Clock_Ip_ClockInitializeObjects+0x228>)
    5642:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5644:	2026      	movs	r0, #38	; 0x26
    5646:	f7ff fe9d 	bl	5384 <getSlowDividerConfig>
    564a:	4603      	mov	r3, r0
    564c:	4a2a      	ldr	r2, [pc, #168]	; (56f8 <Clock_Ip_ClockInitializeObjects+0x22c>)
    564e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5650:	2027      	movs	r0, #39	; 0x27
    5652:	f7ff fe97 	bl	5384 <getSlowDividerConfig>
    5656:	4603      	mov	r3, r0
    5658:	4a28      	ldr	r2, [pc, #160]	; (56fc <Clock_Ip_ClockInitializeObjects+0x230>)
    565a:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    565c:	bf00      	nop
    565e:	b003      	add	sp, #12
    5660:	f85d fb04 	ldr.w	pc, [sp], #4
    5664:	1fff8cd4 	.word	0x1fff8cd4
    5668:	00017e38 	.word	0x00017e38
    566c:	00018484 	.word	0x00018484
    5670:	1fff8ba0 	.word	0x1fff8ba0
    5674:	00017df8 	.word	0x00017df8
    5678:	000183cc 	.word	0x000183cc
    567c:	1fff8ba4 	.word	0x1fff8ba4
    5680:	00017e08 	.word	0x00017e08
    5684:	00018438 	.word	0x00018438
    5688:	1fff8ba8 	.word	0x1fff8ba8
    568c:	00017e48 	.word	0x00017e48
    5690:	000184b0 	.word	0x000184b0
    5694:	1fff8bac 	.word	0x1fff8bac
    5698:	1fff8be8 	.word	0x1fff8be8
    569c:	00017dd8 	.word	0x00017dd8
    56a0:	00018388 	.word	0x00018388
    56a4:	1fff8bb0 	.word	0x1fff8bb0
    56a8:	1fff8bec 	.word	0x1fff8bec
    56ac:	1fff8bb4 	.word	0x1fff8bb4
    56b0:	1fff8bf0 	.word	0x1fff8bf0
    56b4:	1fff8bb8 	.word	0x1fff8bb8
    56b8:	1fff8bf4 	.word	0x1fff8bf4
    56bc:	1fff8b19 	.word	0x1fff8b19
    56c0:	1fff8b10 	.word	0x1fff8b10
    56c4:	1fff8bbc 	.word	0x1fff8bbc
    56c8:	1fff8bc0 	.word	0x1fff8bc0
    56cc:	1fff8bc4 	.word	0x1fff8bc4
    56d0:	1fff8bc8 	.word	0x1fff8bc8
    56d4:	1fff8bcc 	.word	0x1fff8bcc
    56d8:	1fff8bf8 	.word	0x1fff8bf8
    56dc:	1fff8bd0 	.word	0x1fff8bd0
    56e0:	1fff8bd4 	.word	0x1fff8bd4
    56e4:	1fff8bfc 	.word	0x1fff8bfc
    56e8:	1fff8bd8 	.word	0x1fff8bd8
    56ec:	1fff8bdc 	.word	0x1fff8bdc
    56f0:	1fff8c00 	.word	0x1fff8c00
    56f4:	1fff8be0 	.word	0x1fff8be0
    56f8:	1fff8be4 	.word	0x1fff8be4
    56fc:	1fff8c04 	.word	0x1fff8c04

00005700 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5700:	b500      	push	{lr}
    5702:	b083      	sub	sp, #12
    5704:	9001      	str	r0, [sp, #4]
    5706:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5708:	9b01      	ldr	r3, [sp, #4]
    570a:	2b03      	cmp	r3, #3
    570c:	f000 8090 	beq.w	5830 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5710:	9b01      	ldr	r3, [sp, #4]
    5712:	2b03      	cmp	r3, #3
    5714:	f200 80d3 	bhi.w	58be <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5718:	9b01      	ldr	r3, [sp, #4]
    571a:	2b00      	cmp	r3, #0
    571c:	d040      	beq.n	57a0 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    571e:	9b01      	ldr	r3, [sp, #4]
    5720:	3b01      	subs	r3, #1
    5722:	2b01      	cmp	r3, #1
    5724:	f200 80cb 	bhi.w	58be <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5728:	9b00      	ldr	r3, [sp, #0]
    572a:	2b00      	cmp	r3, #0
    572c:	f040 80c9 	bne.w	58c2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5730:	4b68      	ldr	r3, [pc, #416]	; (58d4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5732:	2200      	movs	r2, #0
    5734:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    5736:	4b68      	ldr	r3, [pc, #416]	; (58d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5738:	681b      	ldr	r3, [r3, #0]
    573a:	685b      	ldr	r3, [r3, #4]
    573c:	4a67      	ldr	r2, [pc, #412]	; (58dc <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    573e:	6812      	ldr	r2, [r2, #0]
    5740:	4610      	mov	r0, r2
    5742:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5744:	4b66      	ldr	r3, [pc, #408]	; (58e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5746:	681b      	ldr	r3, [r3, #0]
    5748:	681b      	ldr	r3, [r3, #0]
    574a:	4a66      	ldr	r2, [pc, #408]	; (58e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    574c:	6812      	ldr	r2, [r2, #0]
    574e:	4610      	mov	r0, r2
    5750:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5752:	4b65      	ldr	r3, [pc, #404]	; (58e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5754:	681b      	ldr	r3, [r3, #0]
    5756:	681b      	ldr	r3, [r3, #0]
    5758:	4a64      	ldr	r2, [pc, #400]	; (58ec <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    575a:	6812      	ldr	r2, [r2, #0]
    575c:	4610      	mov	r0, r2
    575e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5760:	4b63      	ldr	r3, [pc, #396]	; (58f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	681b      	ldr	r3, [r3, #0]
    5766:	4a63      	ldr	r2, [pc, #396]	; (58f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5768:	6812      	ldr	r2, [r2, #0]
    576a:	4610      	mov	r0, r2
    576c:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    576e:	4b62      	ldr	r3, [pc, #392]	; (58f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5770:	681b      	ldr	r3, [r3, #0]
    5772:	691b      	ldr	r3, [r3, #16]
    5774:	4a61      	ldr	r2, [pc, #388]	; (58fc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5776:	6812      	ldr	r2, [r2, #0]
    5778:	6812      	ldr	r2, [r2, #0]
    577a:	4610      	mov	r0, r2
    577c:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    577e:	4b60      	ldr	r3, [pc, #384]	; (5900 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5780:	681b      	ldr	r3, [r3, #0]
    5782:	68db      	ldr	r3, [r3, #12]
    5784:	4a5f      	ldr	r2, [pc, #380]	; (5904 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5786:	6812      	ldr	r2, [r2, #0]
    5788:	6812      	ldr	r2, [r2, #0]
    578a:	4610      	mov	r0, r2
    578c:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    578e:	4b5e      	ldr	r3, [pc, #376]	; (5908 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	689b      	ldr	r3, [r3, #8]
    5794:	4a5d      	ldr	r2, [pc, #372]	; (590c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5796:	6812      	ldr	r2, [r2, #0]
    5798:	6812      	ldr	r2, [r2, #0]
    579a:	4610      	mov	r0, r2
    579c:	4798      	blx	r3
            }
        }
        break;
    579e:	e090      	b.n	58c2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    57a0:	9b00      	ldr	r3, [sp, #0]
    57a2:	2b02      	cmp	r3, #2
    57a4:	f040 808f 	bne.w	58c6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    57a8:	4b4a      	ldr	r3, [pc, #296]	; (58d4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    57aa:	2201      	movs	r2, #1
    57ac:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    57ae:	4b56      	ldr	r3, [pc, #344]	; (5908 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    57b0:	681b      	ldr	r3, [r3, #0]
    57b2:	685b      	ldr	r3, [r3, #4]
    57b4:	4a55      	ldr	r2, [pc, #340]	; (590c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    57b6:	6812      	ldr	r2, [r2, #0]
    57b8:	4610      	mov	r0, r2
    57ba:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    57bc:	4b50      	ldr	r3, [pc, #320]	; (5900 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    57be:	681b      	ldr	r3, [r3, #0]
    57c0:	691b      	ldr	r3, [r3, #16]
    57c2:	4a50      	ldr	r2, [pc, #320]	; (5904 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    57c4:	6812      	ldr	r2, [r2, #0]
    57c6:	4610      	mov	r0, r2
    57c8:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    57ca:	4b4d      	ldr	r3, [pc, #308]	; (5900 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    57cc:	681b      	ldr	r3, [r3, #0]
    57ce:	689b      	ldr	r3, [r3, #8]
    57d0:	4a4c      	ldr	r2, [pc, #304]	; (5904 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    57d2:	6812      	ldr	r2, [r2, #0]
    57d4:	4610      	mov	r0, r2
    57d6:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    57d8:	4b47      	ldr	r3, [pc, #284]	; (58f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    57da:	681b      	ldr	r3, [r3, #0]
    57dc:	68db      	ldr	r3, [r3, #12]
    57de:	4a47      	ldr	r2, [pc, #284]	; (58fc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    57e0:	6812      	ldr	r2, [r2, #0]
    57e2:	4610      	mov	r0, r2
    57e4:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    57e6:	4b44      	ldr	r3, [pc, #272]	; (58f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	689b      	ldr	r3, [r3, #8]
    57ec:	4a43      	ldr	r2, [pc, #268]	; (58fc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    57ee:	6812      	ldr	r2, [r2, #0]
    57f0:	6812      	ldr	r2, [r2, #0]
    57f2:	4610      	mov	r0, r2
    57f4:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    57f6:	4b38      	ldr	r3, [pc, #224]	; (58d8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    57f8:	681b      	ldr	r3, [r3, #0]
    57fa:	685b      	ldr	r3, [r3, #4]
    57fc:	4a44      	ldr	r2, [pc, #272]	; (5910 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    57fe:	6812      	ldr	r2, [r2, #0]
    5800:	4610      	mov	r0, r2
    5802:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5804:	4b36      	ldr	r3, [pc, #216]	; (58e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5806:	681b      	ldr	r3, [r3, #0]
    5808:	681b      	ldr	r3, [r3, #0]
    580a:	4a42      	ldr	r2, [pc, #264]	; (5914 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    580c:	6812      	ldr	r2, [r2, #0]
    580e:	4610      	mov	r0, r2
    5810:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5812:	4b35      	ldr	r3, [pc, #212]	; (58e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5814:	681b      	ldr	r3, [r3, #0]
    5816:	681b      	ldr	r3, [r3, #0]
    5818:	4a3f      	ldr	r2, [pc, #252]	; (5918 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    581a:	6812      	ldr	r2, [r2, #0]
    581c:	4610      	mov	r0, r2
    581e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5820:	4b33      	ldr	r3, [pc, #204]	; (58f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5822:	681b      	ldr	r3, [r3, #0]
    5824:	681b      	ldr	r3, [r3, #0]
    5826:	4a3d      	ldr	r2, [pc, #244]	; (591c <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5828:	6812      	ldr	r2, [r2, #0]
    582a:	4610      	mov	r0, r2
    582c:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    582e:	e04a      	b.n	58c6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5830:	9b00      	ldr	r3, [sp, #0]
    5832:	2b02      	cmp	r3, #2
    5834:	d149      	bne.n	58ca <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5836:	4b27      	ldr	r3, [pc, #156]	; (58d4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5838:	2201      	movs	r2, #1
    583a:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    583c:	4b32      	ldr	r3, [pc, #200]	; (5908 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    583e:	681b      	ldr	r3, [r3, #0]
    5840:	685b      	ldr	r3, [r3, #4]
    5842:	4a32      	ldr	r2, [pc, #200]	; (590c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5844:	6812      	ldr	r2, [r2, #0]
    5846:	4610      	mov	r0, r2
    5848:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    584a:	4b2d      	ldr	r3, [pc, #180]	; (5900 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    584c:	681b      	ldr	r3, [r3, #0]
    584e:	691b      	ldr	r3, [r3, #16]
    5850:	4a2c      	ldr	r2, [pc, #176]	; (5904 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5852:	6812      	ldr	r2, [r2, #0]
    5854:	4610      	mov	r0, r2
    5856:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5858:	4b29      	ldr	r3, [pc, #164]	; (5900 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    585a:	681b      	ldr	r3, [r3, #0]
    585c:	689b      	ldr	r3, [r3, #8]
    585e:	4a29      	ldr	r2, [pc, #164]	; (5904 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5860:	6812      	ldr	r2, [r2, #0]
    5862:	4610      	mov	r0, r2
    5864:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5866:	4b24      	ldr	r3, [pc, #144]	; (58f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	68db      	ldr	r3, [r3, #12]
    586c:	4a23      	ldr	r2, [pc, #140]	; (58fc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    586e:	6812      	ldr	r2, [r2, #0]
    5870:	4610      	mov	r0, r2
    5872:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5874:	4b20      	ldr	r3, [pc, #128]	; (58f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5876:	681b      	ldr	r3, [r3, #0]
    5878:	689b      	ldr	r3, [r3, #8]
    587a:	4a20      	ldr	r2, [pc, #128]	; (58fc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    587c:	6812      	ldr	r2, [r2, #0]
    587e:	6812      	ldr	r2, [r2, #0]
    5880:	4610      	mov	r0, r2
    5882:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5884:	4b26      	ldr	r3, [pc, #152]	; (5920 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5886:	681b      	ldr	r3, [r3, #0]
    5888:	685b      	ldr	r3, [r3, #4]
    588a:	4a26      	ldr	r2, [pc, #152]	; (5924 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    588c:	6812      	ldr	r2, [r2, #0]
    588e:	4610      	mov	r0, r2
    5890:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5892:	4b25      	ldr	r3, [pc, #148]	; (5928 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5894:	681b      	ldr	r3, [r3, #0]
    5896:	681b      	ldr	r3, [r3, #0]
    5898:	4a24      	ldr	r2, [pc, #144]	; (592c <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    589a:	6812      	ldr	r2, [r2, #0]
    589c:	4610      	mov	r0, r2
    589e:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    58a0:	4b23      	ldr	r3, [pc, #140]	; (5930 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    58a2:	681b      	ldr	r3, [r3, #0]
    58a4:	681b      	ldr	r3, [r3, #0]
    58a6:	4a23      	ldr	r2, [pc, #140]	; (5934 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    58a8:	6812      	ldr	r2, [r2, #0]
    58aa:	4610      	mov	r0, r2
    58ac:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    58ae:	4b22      	ldr	r3, [pc, #136]	; (5938 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    58b0:	681b      	ldr	r3, [r3, #0]
    58b2:	681b      	ldr	r3, [r3, #0]
    58b4:	4a21      	ldr	r2, [pc, #132]	; (593c <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    58b6:	6812      	ldr	r2, [r2, #0]
    58b8:	4610      	mov	r0, r2
    58ba:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    58bc:	e005      	b.n	58ca <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    58be:	bf00      	nop
    58c0:	e004      	b.n	58cc <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    58c2:	bf00      	nop
    58c4:	e002      	b.n	58cc <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    58c6:	bf00      	nop
    58c8:	e000      	b.n	58cc <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    58ca:	bf00      	nop
    }

}
    58cc:	bf00      	nop
    58ce:	b003      	add	sp, #12
    58d0:	f85d fb04 	ldr.w	pc, [sp], #4
    58d4:	1fff8b19 	.word	0x1fff8b19
    58d8:	1fff8bac 	.word	0x1fff8bac
    58dc:	1fff8bcc 	.word	0x1fff8bcc
    58e0:	1fff8bb0 	.word	0x1fff8bb0
    58e4:	1fff8bd4 	.word	0x1fff8bd4
    58e8:	1fff8bb4 	.word	0x1fff8bb4
    58ec:	1fff8bdc 	.word	0x1fff8bdc
    58f0:	1fff8bb8 	.word	0x1fff8bb8
    58f4:	1fff8be4 	.word	0x1fff8be4
    58f8:	1fff8ba0 	.word	0x1fff8ba0
    58fc:	1fff8bc4 	.word	0x1fff8bc4
    5900:	1fff8ba4 	.word	0x1fff8ba4
    5904:	1fff8bc0 	.word	0x1fff8bc0
    5908:	1fff8ba8 	.word	0x1fff8ba8
    590c:	1fff8bbc 	.word	0x1fff8bbc
    5910:	1fff8bc8 	.word	0x1fff8bc8
    5914:	1fff8bd0 	.word	0x1fff8bd0
    5918:	1fff8bd8 	.word	0x1fff8bd8
    591c:	1fff8be0 	.word	0x1fff8be0
    5920:	1fff8be8 	.word	0x1fff8be8
    5924:	1fff8bf8 	.word	0x1fff8bf8
    5928:	1fff8bec 	.word	0x1fff8bec
    592c:	1fff8bfc 	.word	0x1fff8bfc
    5930:	1fff8bf0 	.word	0x1fff8bf0
    5934:	1fff8c00 	.word	0x1fff8c00
    5938:	1fff8bf4 	.word	0x1fff8bf4
    593c:	1fff8c04 	.word	0x1fff8c04

00005940 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5940:	b500      	push	{lr}
    5942:	b083      	sub	sp, #12
    5944:	9001      	str	r0, [sp, #4]
    5946:	9100      	str	r1, [sp, #0]
    switch(Command)
    5948:	9b00      	ldr	r3, [sp, #0]
    594a:	2b04      	cmp	r3, #4
    594c:	d010      	beq.n	5970 <Clock_Ip_Command+0x30>
    594e:	9b00      	ldr	r3, [sp, #0]
    5950:	2b04      	cmp	r3, #4
    5952:	d811      	bhi.n	5978 <Clock_Ip_Command+0x38>
    5954:	9b00      	ldr	r3, [sp, #0]
    5956:	2b01      	cmp	r3, #1
    5958:	d006      	beq.n	5968 <Clock_Ip_Command+0x28>
    595a:	9b00      	ldr	r3, [sp, #0]
    595c:	2b02      	cmp	r3, #2
    595e:	d10b      	bne.n	5978 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5960:	9801      	ldr	r0, [sp, #4]
    5962:	f7ff fdb3 	bl	54cc <Clock_Ip_ClockInitializeObjects>
            break;
    5966:	e008      	b.n	597a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5968:	9801      	ldr	r0, [sp, #4]
    596a:	f7ff f9db 	bl	4d24 <Clock_Ip_SpecificPlatformInitClock>
            break;
    596e:	e004      	b.n	597a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5970:	9801      	ldr	r0, [sp, #4]
    5972:	f7ff f8ed 	bl	4b50 <DisableSafeClock>
            break;
    5976:	e000      	b.n	597a <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5978:	bf00      	nop
    }
}
    597a:	bf00      	nop
    597c:	b003      	add	sp, #12
    597e:	f85d fb04 	ldr.w	pc, [sp], #4
    5982:	bf00      	nop

00005984 <Mcu_CheckInit>:
/**
* @brief Mcu_CheckInit - checks for Mcu_Init
* @implements Mcu_CheckInit_Activity
*/
static Std_ReturnType Mcu_CheckInit(const Mcu_ConfigType * ConfigPtr)
{
    5984:	b500      	push	{lr}
    5986:	b085      	sub	sp, #20
    5988:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    598a:	2300      	movs	r3, #0
    598c:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_PRECOMPILE_SUPPORT == STD_OFF)
    if (NULL_PTR == ConfigPtr)
    5990:	9b01      	ldr	r3, [sp, #4]
    5992:	2b00      	cmp	r3, #0
    5994:	d108      	bne.n	59a8 <Mcu_CheckInit+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5996:	2301      	movs	r3, #1
    5998:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    599c:	2311      	movs	r3, #17
    599e:	2200      	movs	r2, #0
    59a0:	2100      	movs	r1, #0
    59a2:	2065      	movs	r0, #101	; 0x65
    59a4:	f011 f996 	bl	16cd4 <Det_ReportError>

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    }
#endif /* (MCU_PRECOMPILE_SUPPORT == STD_ON) */

    return CheckStatus;
    59a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    59ac:	4618      	mov	r0, r3
    59ae:	b005      	add	sp, #20
    59b0:	f85d fb04 	ldr.w	pc, [sp], #4

000059b4 <Mcu_CheckInitClock>:
/**
* @brief Mcu_CheckInitClock - checks for Mcu_InitClock
* @implements Mcu_CheckInitClock_Activity
*/
static Std_ReturnType Mcu_CheckInitClock(Mcu_ClockType ClockSetting)
{
    59b4:	b500      	push	{lr}
    59b6:	b085      	sub	sp, #20
    59b8:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    59ba:	2300      	movs	r3, #0
    59bc:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ClockSetting >= Mcu_pConfigPtr->NoClkConfigs)
    59c0:	4b0a      	ldr	r3, [pc, #40]	; (59ec <Mcu_CheckInitClock+0x38>)
    59c2:	681b      	ldr	r3, [r3, #0]
    59c4:	68db      	ldr	r3, [r3, #12]
    59c6:	9a01      	ldr	r2, [sp, #4]
    59c8:	429a      	cmp	r2, r3
    59ca:	d308      	bcc.n	59de <Mcu_CheckInitClock+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    59cc:	2301      	movs	r3, #1
    59ce:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INITCLOCK_ID, MCU_E_PARAM_CLOCK);
    59d2:	230b      	movs	r3, #11
    59d4:	2202      	movs	r2, #2
    59d6:	2100      	movs	r1, #0
    59d8:	2065      	movs	r0, #101	; 0x65
    59da:	f011 f97b 	bl	16cd4 <Det_ReportError>
    }

    return CheckStatus;
    59de:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    59e2:	4618      	mov	r0, r3
    59e4:	b005      	add	sp, #20
    59e6:	f85d fb04 	ldr.w	pc, [sp], #4
    59ea:	bf00      	nop
    59ec:	1fff8ce0 	.word	0x1fff8ce0

000059f0 <Mcu_CheckSetMode>:
/**
* @brief Mcu_CheckSetMode - checks for Mcu_SetMode
* @implements Mcu_CheckSetMode_Activity
*/
static Std_ReturnType Mcu_CheckSetMode(Power_Ip_ModeType McuMode)
{
    59f0:	b500      	push	{lr}
    59f2:	b085      	sub	sp, #20
    59f4:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    59f6:	2300      	movs	r3, #0
    59f8:	f88d 300f 	strb.w	r3, [sp, #15]

    if (McuMode >= Mcu_pConfigPtr->NoModeConfigs)
    59fc:	4b0a      	ldr	r3, [pc, #40]	; (5a28 <Mcu_CheckSetMode+0x38>)
    59fe:	681b      	ldr	r3, [r3, #0]
    5a00:	689b      	ldr	r3, [r3, #8]
    5a02:	9a01      	ldr	r2, [sp, #4]
    5a04:	429a      	cmp	r2, r3
    5a06:	d308      	bcc.n	5a1a <Mcu_CheckSetMode+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a08:	2301      	movs	r3, #1
    5a0a:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_SETMODE_ID, MCU_E_PARAM_MODE);
    5a0e:	230c      	movs	r3, #12
    5a10:	2208      	movs	r2, #8
    5a12:	2100      	movs	r1, #0
    5a14:	2065      	movs	r0, #101	; 0x65
    5a16:	f011 f95d 	bl	16cd4 <Det_ReportError>
    }

    return CheckStatus;
    5a1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a1e:	4618      	mov	r0, r3
    5a20:	b005      	add	sp, #20
    5a22:	f85d fb04 	ldr.w	pc, [sp], #4
    5a26:	bf00      	nop
    5a28:	1fff8ce0 	.word	0x1fff8ce0

00005a2c <Mcu_CheckGetVersionInfo>:
/**
* @brief Mcu_CheckGetVersionInfo - checks for Mcu_GetVersionInfo
* @implements Mcu_CheckGetVersionInfo_Activity
*/
static Std_ReturnType Mcu_CheckGetVersionInfo(const Std_VersionInfoType * VersionInfo)
{
    5a2c:	b500      	push	{lr}
    5a2e:	b085      	sub	sp, #20
    5a30:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5a32:	2300      	movs	r3, #0
    5a34:	f88d 300f 	strb.w	r3, [sp, #15]

    if (NULL_PTR == VersionInfo)
    5a38:	9b01      	ldr	r3, [sp, #4]
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	d108      	bne.n	5a50 <Mcu_CheckGetVersionInfo+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a3e:	2301      	movs	r3, #1
    5a40:	f88d 300f 	strb.w	r3, [sp, #15]

        (void)Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_GETVERSIONINFO_ID, MCU_E_PARAM_POINTER);
    5a44:	2310      	movs	r3, #16
    5a46:	2209      	movs	r2, #9
    5a48:	2100      	movs	r1, #0
    5a4a:	2065      	movs	r0, #101	; 0x65
    5a4c:	f011 f942 	bl	16cd4 <Det_ReportError>
    }

    return CheckStatus;
    5a50:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a54:	4618      	mov	r0, r3
    5a56:	b005      	add	sp, #20
    5a58:	f85d fb04 	ldr.w	pc, [sp], #4

00005a5c <Mcu_HLDChecksEntry>:
/**
* @brief Mcu_HLDChecksEntry - checks for invalid mode transitions.
* @implements Mcu_HLDChecksEntry_Activity
*/
static Std_ReturnType Mcu_HLDChecksEntry(uint8 McuServiceID)
{
    5a5c:	b500      	push	{lr}
    5a5e:	b085      	sub	sp, #20
    5a60:	4603      	mov	r3, r0
    5a62:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5a66:	2300      	movs	r3, #0
    5a68:	f88d 300f 	strb.w	r3, [sp, #15]

    if (MCU_INIT_ID == McuServiceID)
    5a6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a70:	2b00      	cmp	r3, #0
    5a72:	d10e      	bne.n	5a92 <Mcu_HLDChecksEntry+0x36>
    {
        if (MCU_UNINIT != Mcu_eStatus) /* If "Mcu_Init" was already called (i.e. driver is initialized). */
    5a74:	4b13      	ldr	r3, [pc, #76]	; (5ac4 <Mcu_HLDChecksEntry+0x68>)
    5a76:	681b      	ldr	r3, [r3, #0]
    5a78:	2b03      	cmp	r3, #3
    5a7a:	d01c      	beq.n	5ab6 <Mcu_HLDChecksEntry+0x5a>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a7c:	2301      	movs	r3, #1
    5a7e:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_ALREADY_INITIALIZED);
    5a82:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5a86:	2313      	movs	r3, #19
    5a88:	2100      	movs	r1, #0
    5a8a:	2065      	movs	r0, #101	; 0x65
    5a8c:	f011 f922 	bl	16cd4 <Det_ReportError>
    5a90:	e011      	b.n	5ab6 <Mcu_HLDChecksEntry+0x5a>
        }
    }
    else
    {
        if (MCU_UNINIT == Mcu_eStatus) /* If "Mcu_Init" was not called (i.e driver is uninitialized). */
    5a92:	4b0c      	ldr	r3, [pc, #48]	; (5ac4 <Mcu_HLDChecksEntry+0x68>)
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	2b03      	cmp	r3, #3
    5a98:	d10a      	bne.n	5ab0 <Mcu_HLDChecksEntry+0x54>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a9a:	2301      	movs	r3, #1
    5a9c:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_UNINIT);
    5aa0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5aa4:	230f      	movs	r3, #15
    5aa6:	2100      	movs	r1, #0
    5aa8:	2065      	movs	r0, #101	; 0x65
    5aaa:	f011 f913 	bl	16cd4 <Det_ReportError>
    5aae:	e002      	b.n	5ab6 <Mcu_HLDChecksEntry+0x5a>
        }
        else
        {
            Mcu_eStatus = MCU_BUSY;
    5ab0:	4b04      	ldr	r3, [pc, #16]	; (5ac4 <Mcu_HLDChecksEntry+0x68>)
    5ab2:	220a      	movs	r2, #10
    5ab4:	601a      	str	r2, [r3, #0]
        }
    }

    return CheckStatus;
    5ab6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5aba:	4618      	mov	r0, r3
    5abc:	b005      	add	sp, #20
    5abe:	f85d fb04 	ldr.w	pc, [sp], #4
    5ac2:	bf00      	nop
    5ac4:	1fff8b1c 	.word	0x1fff8b1c

00005ac8 <Mcu_HLDChecksExit>:
* @implements Mcu_HLDChecksExit_Activity
*/
static void Mcu_HLDChecksExit(  Std_ReturnType RetStatus,
                                uint8 McuServiceID
                              )
{
    5ac8:	b082      	sub	sp, #8
    5aca:	4603      	mov	r3, r0
    5acc:	460a      	mov	r2, r1
    5ace:	f88d 3007 	strb.w	r3, [sp, #7]
    5ad2:	4613      	mov	r3, r2
    5ad4:	f88d 3006 	strb.w	r3, [sp, #6]
    if (MCU_INIT_ID == McuServiceID)
    5ad8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5adc:	2b00      	cmp	r3, #0
    5ade:	d10b      	bne.n	5af8 <Mcu_HLDChecksExit+0x30>
    {
        if ((Std_ReturnType)E_OK == (Std_ReturnType)RetStatus)
    5ae0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d103      	bne.n	5af0 <Mcu_HLDChecksExit+0x28>
        {
            Mcu_eStatus = MCU_IDLE;
    5ae8:	4b06      	ldr	r3, [pc, #24]	; (5b04 <Mcu_HLDChecksExit+0x3c>)
    5aea:	220c      	movs	r2, #12
    5aec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Mcu_eStatus = MCU_IDLE;
    }
}
    5aee:	e006      	b.n	5afe <Mcu_HLDChecksExit+0x36>
            Mcu_eStatus = MCU_UNINIT;
    5af0:	4b04      	ldr	r3, [pc, #16]	; (5b04 <Mcu_HLDChecksExit+0x3c>)
    5af2:	2203      	movs	r2, #3
    5af4:	601a      	str	r2, [r3, #0]
}
    5af6:	e002      	b.n	5afe <Mcu_HLDChecksExit+0x36>
        Mcu_eStatus = MCU_IDLE;
    5af8:	4b02      	ldr	r3, [pc, #8]	; (5b04 <Mcu_HLDChecksExit+0x3c>)
    5afa:	220c      	movs	r2, #12
    5afc:	601a      	str	r2, [r3, #0]
}
    5afe:	bf00      	nop
    5b00:	b002      	add	sp, #8
    5b02:	4770      	bx	lr
    5b04:	1fff8b1c 	.word	0x1fff8b1c

00005b08 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5b08:	b500      	push	{lr}
    5b0a:	b085      	sub	sp, #20
    5b0c:	9001      	str	r0, [sp, #4]
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType CheckStatus;
#endif /* ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) ) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    CheckStatus = (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INIT_ID);
    5b0e:	2000      	movs	r0, #0
    5b10:	f7ff ffa4 	bl	5a5c <Mcu_HLDChecksEntry>
    5b14:	4603      	mov	r3, r0
    5b16:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( (Std_ReturnType)E_OK == CheckStatus )
    5b1a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5b1e:	2b00      	cmp	r3, #0
    5b20:	d150      	bne.n	5bc4 <Mcu_Init+0xbc>

#if (MCU_PARAM_CHECK == STD_ON)
        /* When PostBuild is used and #(Variants) > 1, the input parameter 'ConfigPtr' is mandatory
         * to be different than NULL_PTR. */
        /* Check the config. In case of error, return immediately. The "Mcu_CheckInit" function will report DET errors. */
        CheckStatus = Mcu_CheckInit(ConfigPtr);
    5b22:	9801      	ldr	r0, [sp, #4]
    5b24:	f7ff ff2e 	bl	5984 <Mcu_CheckInit>
    5b28:	4603      	mov	r3, r0
    5b2a:	f88d 300b 	strb.w	r3, [sp, #11]

        if ((Std_ReturnType)E_OK == CheckStatus)
    5b2e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5b32:	2b00      	cmp	r3, #0
    5b34:	d13d      	bne.n	5bb2 <Mcu_Init+0xaa>

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5b36:	4a25      	ldr	r2, [pc, #148]	; (5bcc <Mcu_Init+0xc4>)
    5b38:	9b01      	ldr	r3, [sp, #4]
    5b3a:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5b3c:	2300      	movs	r3, #0
    5b3e:	9303      	str	r3, [sp, #12]
    5b40:	e010      	b.n	5b64 <Mcu_Init+0x5c>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5b42:	4b22      	ldr	r3, [pc, #136]	; (5bcc <Mcu_Init+0xc4>)
    5b44:	681b      	ldr	r3, [r3, #0]
    5b46:	6919      	ldr	r1, [r3, #16]
    5b48:	9a03      	ldr	r2, [sp, #12]
    5b4a:	4613      	mov	r3, r2
    5b4c:	005b      	lsls	r3, r3, #1
    5b4e:	4413      	add	r3, r2
    5b50:	009b      	lsls	r3, r3, #2
    5b52:	440b      	add	r3, r1
    5b54:	681b      	ldr	r3, [r3, #0]
    5b56:	9a03      	ldr	r2, [sp, #12]
    5b58:	b2d1      	uxtb	r1, r2
    5b5a:	4a1d      	ldr	r2, [pc, #116]	; (5bd0 <Mcu_Init+0xc8>)
    5b5c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5b5e:	9b03      	ldr	r3, [sp, #12]
    5b60:	3301      	adds	r3, #1
    5b62:	9303      	str	r3, [sp, #12]
    5b64:	4b19      	ldr	r3, [pc, #100]	; (5bcc <Mcu_Init+0xc4>)
    5b66:	681b      	ldr	r3, [r3, #0]
    5b68:	689b      	ldr	r3, [r3, #8]
    5b6a:	9a03      	ldr	r2, [sp, #12]
    5b6c:	429a      	cmp	r2, r3
    5b6e:	d3e8      	bcc.n	5b42 <Mcu_Init+0x3a>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5b70:	2300      	movs	r3, #0
    5b72:	9303      	str	r3, [sp, #12]
    5b74:	e010      	b.n	5b98 <Mcu_Init+0x90>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5b76:	4b15      	ldr	r3, [pc, #84]	; (5bcc <Mcu_Init+0xc4>)
    5b78:	681b      	ldr	r3, [r3, #0]
    5b7a:	6959      	ldr	r1, [r3, #20]
    5b7c:	9a03      	ldr	r2, [sp, #12]
    5b7e:	4613      	mov	r3, r2
    5b80:	01db      	lsls	r3, r3, #7
    5b82:	1a9b      	subs	r3, r3, r2
    5b84:	00db      	lsls	r3, r3, #3
    5b86:	440b      	add	r3, r1
    5b88:	681b      	ldr	r3, [r3, #0]
    5b8a:	9a03      	ldr	r2, [sp, #12]
    5b8c:	b2d1      	uxtb	r1, r2
    5b8e:	4a11      	ldr	r2, [pc, #68]	; (5bd4 <Mcu_Init+0xcc>)
    5b90:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5b92:	9b03      	ldr	r3, [sp, #12]
    5b94:	3301      	adds	r3, #1
    5b96:	9303      	str	r3, [sp, #12]
    5b98:	4b0c      	ldr	r3, [pc, #48]	; (5bcc <Mcu_Init+0xc4>)
    5b9a:	681b      	ldr	r3, [r3, #0]
    5b9c:	68db      	ldr	r3, [r3, #12]
    5b9e:	9a03      	ldr	r2, [sp, #12]
    5ba0:	429a      	cmp	r2, r3
    5ba2:	d3e8      	bcc.n	5b76 <Mcu_Init+0x6e>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5ba4:	4b09      	ldr	r3, [pc, #36]	; (5bcc <Mcu_Init+0xc4>)
    5ba6:	681b      	ldr	r3, [r3, #0]
    5ba8:	699b      	ldr	r3, [r3, #24]
    5baa:	4618      	mov	r0, r3
    5bac:	f000 f90c 	bl	5dc8 <Mcu_Ipw_Init>
    5bb0:	e002      	b.n	5bb8 <Mcu_Init+0xb0>
#if (MCU_PARAM_CHECK == STD_ON)
        }
        else
        {
            /* Clean the init pointer in case of an error. */
            Mcu_pConfigPtr = NULL_PTR;
    5bb2:	4b06      	ldr	r3, [pc, #24]	; (5bcc <Mcu_Init+0xc4>)
    5bb4:	2200      	movs	r2, #0
    5bb6:	601a      	str	r2, [r3, #0]
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    5bb8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5bbc:	2100      	movs	r1, #0
    5bbe:	4618      	mov	r0, r3
    5bc0:	f7ff ff82 	bl	5ac8 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5bc4:	bf00      	nop
    5bc6:	b005      	add	sp, #20
    5bc8:	f85d fb04 	ldr.w	pc, [sp], #4
    5bcc:	1fff8ce0 	.word	0x1fff8ce0
    5bd0:	1fff8cdc 	.word	0x1fff8cdc
    5bd4:	1fff8cd8 	.word	0x1fff8cd8

00005bd8 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5bd8:	b500      	push	{lr}
    5bda:	b085      	sub	sp, #20
    5bdc:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5bde:	2301      	movs	r3, #1
    5be0:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    /* Check if the driver is initialized. */
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITRAMSECTION_ID) )
    5be4:	2001      	movs	r0, #1
    5be6:	f7ff ff39 	bl	5a5c <Mcu_HLDChecksEntry>
    5bea:	4603      	mov	r3, r0
    5bec:	2b00      	cmp	r3, #0
    5bee:	d103      	bne.n	5bf8 <Mcu_InitRamSection+0x20>
        /* To avoid compiler warning. */
        MCU_PARAM_UNUSED(RamSection);
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    5bf0:	2101      	movs	r1, #1
    5bf2:	2000      	movs	r0, #0
    5bf4:	f7ff ff68 	bl	5ac8 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5bf8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5bfc:	4618      	mov	r0, r3
    5bfe:	b005      	add	sp, #20
    5c00:	f85d fb04 	ldr.w	pc, [sp], #4

00005c04 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5c04:	b500      	push	{lr}
    5c06:	b085      	sub	sp, #20
    5c08:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5c0a:	4a17      	ldr	r2, [pc, #92]	; (5c68 <Mcu_InitClock+0x64>)
    5c0c:	9b01      	ldr	r3, [sp, #4]
    5c0e:	4413      	add	r3, r2
    5c10:	781b      	ldrb	r3, [r3, #0]
    5c12:	f88d 300e 	strb.w	r3, [sp, #14]
    /* Return the success of the clock initalization operation. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType ClockStatus = (Std_ReturnType)E_NOT_OK;
    5c16:	2301      	movs	r3, #1
    5c18:	f88d 300f 	strb.w	r3, [sp, #15]
#else
    Std_ReturnType ClockStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITCLOCK_ID) )
    5c1c:	2002      	movs	r0, #2
    5c1e:	f7ff ff1d 	bl	5a5c <Mcu_HLDChecksEntry>
    5c22:	4603      	mov	r3, r0
    5c24:	2b00      	cmp	r3, #0
    5c26:	d119      	bne.n	5c5c <Mcu_InitClock+0x58>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
    5c28:	9801      	ldr	r0, [sp, #4]
    5c2a:	f7ff fec3 	bl	59b4 <Mcu_CheckInitClock>
    5c2e:	4603      	mov	r3, r0
    5c30:	2b00      	cmp	r3, #0
    5c32:	d10f      	bne.n	5c54 <Mcu_InitClock+0x50>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5c34:	4b0d      	ldr	r3, [pc, #52]	; (5c6c <Mcu_InitClock+0x68>)
    5c36:	681b      	ldr	r3, [r3, #0]
    5c38:	6959      	ldr	r1, [r3, #20]
    5c3a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5c3e:	4613      	mov	r3, r2
    5c40:	01db      	lsls	r3, r3, #7
    5c42:	1a9b      	subs	r3, r3, r2
    5c44:	00db      	lsls	r3, r3, #3
    5c46:	440b      	add	r3, r1
    5c48:	4618      	mov	r0, r3
    5c4a:	f000 f8c7 	bl	5ddc <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5c4e:	2300      	movs	r3, #0
    5c50:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_PARAM_CHECK == STD_ON)
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    5c54:	2102      	movs	r1, #2
    5c56:	2000      	movs	r0, #0
    5c58:	f7ff ff36 	bl	5ac8 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5c5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5c60:	4618      	mov	r0, r3
    5c62:	b005      	add	sp, #20
    5c64:	f85d fb04 	ldr.w	pc, [sp], #4
    5c68:	1fff8cd8 	.word	0x1fff8cd8
    5c6c:	1fff8ce0 	.word	0x1fff8ce0

00005c70 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5c70:	b500      	push	{lr}
    5c72:	b085      	sub	sp, #20
    5c74:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5c76:	4a15      	ldr	r2, [pc, #84]	; (5ccc <Mcu_SetMode+0x5c>)
    5c78:	9b01      	ldr	r3, [sp, #4]
    5c7a:	4413      	add	r3, r2
    5c7c:	781b      	ldrb	r3, [r3, #0]
    5c7e:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_SETMODE_ID) )
    5c82:	2008      	movs	r0, #8
    5c84:	f7ff feea 	bl	5a5c <Mcu_HLDChecksEntry>
    5c88:	4603      	mov	r3, r0
    5c8a:	2b00      	cmp	r3, #0
    5c8c:	d11a      	bne.n	5cc4 <Mcu_SetMode+0x54>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

#if (MCU_PARAM_CHECK == STD_ON)
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
    5c8e:	9801      	ldr	r0, [sp, #4]
    5c90:	f7ff feae 	bl	59f0 <Mcu_CheckSetMode>
    5c94:	4603      	mov	r3, r0
    5c96:	2b00      	cmp	r3, #0
    5c98:	d110      	bne.n	5cbc <Mcu_SetMode+0x4c>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5c9a:	f00e fed3 	bl	14a44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5c9e:	4b0c      	ldr	r3, [pc, #48]	; (5cd0 <Mcu_SetMode+0x60>)
    5ca0:	681b      	ldr	r3, [r3, #0]
    5ca2:	6919      	ldr	r1, [r3, #16]
    5ca4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5ca8:	4613      	mov	r3, r2
    5caa:	005b      	lsls	r3, r3, #1
    5cac:	4413      	add	r3, r2
    5cae:	009b      	lsls	r3, r3, #2
    5cb0:	440b      	add	r3, r1
    5cb2:	4618      	mov	r0, r3
    5cb4:	f000 f89c 	bl	5df0 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5cb8:	f00e fef0 	bl	14a9c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    5cbc:	2108      	movs	r1, #8
    5cbe:	2000      	movs	r0, #0
    5cc0:	f7ff ff02 	bl	5ac8 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5cc4:	bf00      	nop
    5cc6:	b005      	add	sp, #20
    5cc8:	f85d fb04 	ldr.w	pc, [sp], #4
    5ccc:	1fff8cdc 	.word	0x1fff8cdc
    5cd0:	1fff8ce0 	.word	0x1fff8ce0

00005cd4 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5cd4:	b500      	push	{lr}
    5cd6:	b083      	sub	sp, #12
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5cd8:	2302      	movs	r3, #2
    5cda:	9301      	str	r3, [sp, #4]
#else
    Mcu_PllStatusType PllStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETPLLSTATUS_ID) )
    5cdc:	2004      	movs	r0, #4
    5cde:	f7ff febd 	bl	5a5c <Mcu_HLDChecksEntry>
    5ce2:	4603      	mov	r3, r0
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d103      	bne.n	5cf0 <Mcu_GetPllStatus+0x1c>
           At this point, the return value can be only MCU_PLL_LOCKED or MCU_PLL_UNLOCKED. */
        PllStatus = Mcu_Ipw_GetPllStatus();
#endif /* (MCU_NO_PLL == STD_OFF) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    5ce8:	2104      	movs	r1, #4
    5cea:	2000      	movs	r0, #0
    5cec:	f7ff feec 	bl	5ac8 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5cf0:	9b01      	ldr	r3, [sp, #4]
}
    5cf2:	4618      	mov	r0, r3
    5cf4:	b003      	add	sp, #12
    5cf6:	f85d fb04 	ldr.w	pc, [sp], #4

00005cfa <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5cfa:	b500      	push	{lr}
    5cfc:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_ResetType ResetReason = MCU_RESET_UNDEFINED;
    5cfe:	230e      	movs	r3, #14
    5d00:	9301      	str	r3, [sp, #4]
#else
    Mcu_ResetType ResetReason;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    5d02:	2005      	movs	r0, #5
    5d04:	f7ff feaa 	bl	5a5c <Mcu_HLDChecksEntry>
    5d08:	4603      	mov	r3, r0
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	d106      	bne.n	5d1c <Mcu_GetResetReason+0x22>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5d0e:	f000 f879 	bl	5e04 <Mcu_Ipw_GetResetReason>
    5d12:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    5d14:	2105      	movs	r1, #5
    5d16:	2000      	movs	r0, #0
    5d18:	f7ff fed6 	bl	5ac8 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5d1c:	9b01      	ldr	r3, [sp, #4]
}
    5d1e:	4618      	mov	r0, r3
    5d20:	b003      	add	sp, #12
    5d22:	f85d fb04 	ldr.w	pc, [sp], #4

00005d26 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5d26:	b500      	push	{lr}
    5d28:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_RawResetType RawResetValue = MCU_RAW_RESET_DEFAULT;
    5d2a:	f04f 33ff 	mov.w	r3, #4294967295
    5d2e:	9301      	str	r3, [sp, #4]
#else
    Mcu_RawResetType RawResetValue;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    5d30:	2006      	movs	r0, #6
    5d32:	f7ff fe93 	bl	5a5c <Mcu_HLDChecksEntry>
    5d36:	4603      	mov	r3, r0
    5d38:	2b00      	cmp	r3, #0
    5d3a:	d106      	bne.n	5d4a <Mcu_GetResetRawValue+0x24>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5d3c:	f000 f868 	bl	5e10 <Mcu_Ipw_GetResetRawValue>
    5d40:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    5d42:	2106      	movs	r1, #6
    5d44:	2000      	movs	r0, #0
    5d46:	f7ff febf 	bl	5ac8 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5d4a:	9b01      	ldr	r3, [sp, #4]
}
    5d4c:	4618      	mov	r0, r3
    5d4e:	b003      	add	sp, #12
    5d50:	f85d fb04 	ldr.w	pc, [sp], #4

00005d54 <Mcu_GetVersionInfo>:
* @api
*
* @implements Mcu_GetVersionInfo_Activity
*/
void Mcu_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    5d54:	b500      	push	{lr}
    5d56:	b083      	sub	sp, #12
    5d58:	9001      	str	r0, [sp, #4]
#if (MCU_PARAM_CHECK == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckGetVersionInfo(versioninfo) )
    5d5a:	9801      	ldr	r0, [sp, #4]
    5d5c:	f7ff fe66 	bl	5a2c <Mcu_CheckGetVersionInfo>
    5d60:	4603      	mov	r3, r0
    5d62:	2b00      	cmp	r3, #0
    5d64:	d10e      	bne.n	5d84 <Mcu_GetVersionInfo+0x30>
    {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
        (versioninfo)->vendorID = (uint16)MCU_VENDOR_ID;
    5d66:	9b01      	ldr	r3, [sp, #4]
    5d68:	222b      	movs	r2, #43	; 0x2b
    5d6a:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint8)MCU_MODULE_ID;
    5d6c:	9b01      	ldr	r3, [sp, #4]
    5d6e:	2265      	movs	r2, #101	; 0x65
    5d70:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)MCU_SW_MAJOR_VERSION;
    5d72:	9b01      	ldr	r3, [sp, #4]
    5d74:	2202      	movs	r2, #2
    5d76:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)MCU_SW_MINOR_VERSION;
    5d78:	9b01      	ldr	r3, [sp, #4]
    5d7a:	2200      	movs	r2, #0
    5d7c:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)MCU_SW_PATCH_VERSION;
    5d7e:	9b01      	ldr	r3, [sp, #4]
    5d80:	2200      	movs	r2, #0
    5d82:	719a      	strb	r2, [r3, #6]
#if (MCU_PARAM_CHECK == STD_ON)
    }
#endif /* (MCU_PARAM_CHECK == STD_ON) */
}
    5d84:	bf00      	nop
    5d86:	b003      	add	sp, #12
    5d88:	f85d fb04 	ldr.w	pc, [sp], #4

00005d8c <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5d8c:	b500      	push	{lr}
    5d8e:	b083      	sub	sp, #12
    5d90:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    5d92:	201a      	movs	r0, #26
    5d94:	f7ff fe62 	bl	5a5c <Mcu_HLDChecksEntry>
    5d98:	4603      	mov	r3, r0
    5d9a:	2b00      	cmp	r3, #0
    5d9c:	d106      	bne.n	5dac <Mcu_SleepOnExit+0x20>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5d9e:	9801      	ldr	r0, [sp, #4]
    5da0:	f000 f83c 	bl	5e1c <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    5da4:	211a      	movs	r1, #26
    5da6:	2000      	movs	r0, #0
    5da8:	f7ff fe8e 	bl	5ac8 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5dac:	bf00      	nop
    5dae:	b003      	add	sp, #12
    5db0:	f85d fb04 	ldr.w	pc, [sp], #4

00005db4 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5db4:	b082      	sub	sp, #8
    5db6:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5db8:	4b02      	ldr	r3, [pc, #8]	; (5dc4 <Mcu_ClkSrcFailureNotification+0x10>)
    5dba:	681b      	ldr	r3, [r3, #0]
    5dbc:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5dbe:	bf00      	nop
    5dc0:	b002      	add	sp, #8
    5dc2:	4770      	bx	lr
    5dc4:	1fff8ce0 	.word	0x1fff8ce0

00005dc8 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5dc8:	b500      	push	{lr}
    5dca:	b083      	sub	sp, #12
    5dcc:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5dce:	9801      	ldr	r0, [sp, #4]
    5dd0:	f000 f882 	bl	5ed8 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5dd4:	bf00      	nop
    5dd6:	b003      	add	sp, #12
    5dd8:	f85d fb04 	ldr.w	pc, [sp], #4

00005ddc <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5ddc:	b500      	push	{lr}
    5dde:	b083      	sub	sp, #12
    5de0:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5de2:	9801      	ldr	r0, [sp, #4]
    5de4:	f7fc fb12 	bl	240c <Clock_Ip_InitClock>
}
    5de8:	bf00      	nop
    5dea:	b003      	add	sp, #12
    5dec:	f85d fb04 	ldr.w	pc, [sp], #4

00005df0 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5df0:	b500      	push	{lr}
    5df2:	b083      	sub	sp, #12
    5df4:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5df6:	9801      	ldr	r0, [sp, #4]
    5df8:	f000 f820 	bl	5e3c <Power_Ip_SetMode>
}
    5dfc:	bf00      	nop
    5dfe:	b003      	add	sp, #12
    5e00:	f85d fb04 	ldr.w	pc, [sp], #4

00005e04 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5e04:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5e06:	f000 f84f 	bl	5ea8 <Power_Ip_GetResetReason>
    5e0a:	4603      	mov	r3, r0
}
    5e0c:	4618      	mov	r0, r3
    5e0e:	bd08      	pop	{r3, pc}

00005e10 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5e10:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5e12:	f000 f857 	bl	5ec4 <Power_Ip_GetResetRawValue>
    5e16:	4603      	mov	r3, r0
}
    5e18:	4618      	mov	r0, r3
    5e1a:	bd08      	pop	{r3, pc}

00005e1c <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5e1c:	b500      	push	{lr}
    5e1e:	b083      	sub	sp, #12
    5e20:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5e22:	9b01      	ldr	r3, [sp, #4]
    5e24:	2b00      	cmp	r3, #0
    5e26:	d102      	bne.n	5e2e <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5e28:	f000 f86c 	bl	5f04 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5e2c:	e001      	b.n	5e32 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5e2e:	f000 f86e 	bl	5f0e <Power_Ip_EnableSleepOnExit>
}
    5e32:	bf00      	nop
    5e34:	b003      	add	sp, #12
    5e36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005e3c <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5e3c:	b500      	push	{lr}
    5e3e:	b085      	sub	sp, #20
    5e40:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5e42:	9b01      	ldr	r3, [sp, #4]
    5e44:	685b      	ldr	r3, [r3, #4]
    5e46:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5e48:	9802      	ldr	r0, [sp, #8]
    5e4a:	f000 f9f5 	bl	6238 <Power_Ip_SMC_ModeCheckEntry>
    5e4e:	4603      	mov	r3, r0
    5e50:	2b00      	cmp	r3, #0
    5e52:	d002      	beq.n	5e5a <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e54:	2301      	movs	r3, #1
    5e56:	9303      	str	r3, [sp, #12]
    5e58:	e003      	b.n	5e62 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5e5a:	9801      	ldr	r0, [sp, #4]
    5e5c:	f000 fa1e 	bl	629c <Power_Ip_SMC_ModeConfig>
    5e60:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5e62:	9b03      	ldr	r3, [sp, #12]
    5e64:	2b01      	cmp	r3, #1
    5e66:	d103      	bne.n	5e70 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e68:	21ff      	movs	r1, #255	; 0xff
    5e6a:	2003      	movs	r0, #3
    5e6c:	f000 f8f4 	bl	6058 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5e70:	bf00      	nop
    5e72:	b005      	add	sp, #20
    5e74:	f85d fb04 	ldr.w	pc, [sp], #4

00005e78 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5e78:	b084      	sub	sp, #16
    5e7a:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5e7c:	230c      	movs	r3, #12
    5e7e:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5e80:	4a08      	ldr	r2, [pc, #32]	; (5ea4 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5e82:	9b01      	ldr	r3, [sp, #4]
    5e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e88:	2b0e      	cmp	r3, #14
    5e8a:	d805      	bhi.n	5e98 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5e8c:	4a05      	ldr	r2, [pc, #20]	; (5ea4 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5e8e:	9b01      	ldr	r3, [sp, #4]
    5e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e94:	9303      	str	r3, [sp, #12]
    5e96:	e001      	b.n	5e9c <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5e98:	230c      	movs	r3, #12
    5e9a:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5e9c:	9b03      	ldr	r3, [sp, #12]
}
    5e9e:	4618      	mov	r0, r3
    5ea0:	b004      	add	sp, #16
    5ea2:	4770      	bx	lr
    5ea4:	00018524 	.word	0x00018524

00005ea8 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5ea8:	b500      	push	{lr}
    5eaa:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5eac:	f000 f940 	bl	6130 <Power_Ip_RCM_GetResetReason>
    5eb0:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5eb2:	9801      	ldr	r0, [sp, #4]
    5eb4:	f7ff ffe0 	bl	5e78 <Power_Ip_ConvertIntergeToResetType>
    5eb8:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5eba:	9b00      	ldr	r3, [sp, #0]
}
    5ebc:	4618      	mov	r0, r3
    5ebe:	b003      	add	sp, #12
    5ec0:	f85d fb04 	ldr.w	pc, [sp], #4

00005ec4 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5ec4:	b500      	push	{lr}
    5ec6:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5ec8:	f000 f98a 	bl	61e0 <Power_Ip_RCM_GetResetRawValue>
    5ecc:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5ece:	9b01      	ldr	r3, [sp, #4]
}
    5ed0:	4618      	mov	r0, r3
    5ed2:	b003      	add	sp, #12
    5ed4:	f85d fb04 	ldr.w	pc, [sp], #4

00005ed8 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5ed8:	b500      	push	{lr}
    5eda:	b083      	sub	sp, #12
    5edc:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5ede:	9b01      	ldr	r3, [sp, #4]
    5ee0:	681b      	ldr	r3, [r3, #0]
    5ee2:	4618      	mov	r0, r3
    5ee4:	f000 f90e 	bl	6104 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5ee8:	9b01      	ldr	r3, [sp, #4]
    5eea:	685b      	ldr	r3, [r3, #4]
    5eec:	4618      	mov	r0, r3
    5eee:	f000 f86d 	bl	5fcc <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5ef2:	9b01      	ldr	r3, [sp, #4]
    5ef4:	689b      	ldr	r3, [r3, #8]
    5ef6:	4618      	mov	r0, r3
    5ef8:	f000 f990 	bl	621c <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5efc:	bf00      	nop
    5efe:	b003      	add	sp, #12
    5f00:	f85d fb04 	ldr.w	pc, [sp], #4

00005f04 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5f04:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5f06:	f000 f811 	bl	5f2c <Power_Ip_CM4_DisableSleepOnExit>
}
    5f0a:	bf00      	nop
    5f0c:	bd08      	pop	{r3, pc}

00005f0e <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5f0e:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5f10:	f000 f820 	bl	5f54 <Power_Ip_CM4_EnableSleepOnExit>
}
    5f14:	bf00      	nop
    5f16:	bd08      	pop	{r3, pc}

00005f18 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5f18:	b082      	sub	sp, #8
    5f1a:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5f1c:	4a02      	ldr	r2, [pc, #8]	; (5f28 <Power_Ip_InstallNotificationsCallback+0x10>)
    5f1e:	9b01      	ldr	r3, [sp, #4]
    5f20:	6013      	str	r3, [r2, #0]
}
    5f22:	bf00      	nop
    5f24:	b002      	add	sp, #8
    5f26:	4770      	bx	lr
    5f28:	1fff8b20 	.word	0x1fff8b20

00005f2c <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5f2c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5f2e:	2300      	movs	r3, #0
    5f30:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5f32:	4b07      	ldr	r3, [pc, #28]	; (5f50 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5f34:	681b      	ldr	r3, [r3, #0]
    5f36:	685b      	ldr	r3, [r3, #4]
    5f38:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5f3a:	9b01      	ldr	r3, [sp, #4]
    5f3c:	f023 0302 	bic.w	r3, r3, #2
    5f40:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5f42:	4b03      	ldr	r3, [pc, #12]	; (5f50 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5f44:	681b      	ldr	r3, [r3, #0]
    5f46:	9a01      	ldr	r2, [sp, #4]
    5f48:	605a      	str	r2, [r3, #4]
}
    5f4a:	bf00      	nop
    5f4c:	b002      	add	sp, #8
    5f4e:	4770      	bx	lr
    5f50:	1fff8b24 	.word	0x1fff8b24

00005f54 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5f54:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5f56:	2300      	movs	r3, #0
    5f58:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5f5a:	4b07      	ldr	r3, [pc, #28]	; (5f78 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5f5c:	681b      	ldr	r3, [r3, #0]
    5f5e:	685b      	ldr	r3, [r3, #4]
    5f60:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5f62:	9b01      	ldr	r3, [sp, #4]
    5f64:	f043 0302 	orr.w	r3, r3, #2
    5f68:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5f6a:	4b03      	ldr	r3, [pc, #12]	; (5f78 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5f6c:	681b      	ldr	r3, [r3, #0]
    5f6e:	9a01      	ldr	r2, [sp, #4]
    5f70:	605a      	str	r2, [r3, #4]
}
    5f72:	bf00      	nop
    5f74:	b002      	add	sp, #8
    5f76:	4770      	bx	lr
    5f78:	1fff8b24 	.word	0x1fff8b24

00005f7c <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5f7c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5f7e:	2300      	movs	r3, #0
    5f80:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5f82:	4b07      	ldr	r3, [pc, #28]	; (5fa0 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5f84:	681b      	ldr	r3, [r3, #0]
    5f86:	685b      	ldr	r3, [r3, #4]
    5f88:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5f8a:	9b01      	ldr	r3, [sp, #4]
    5f8c:	f043 0304 	orr.w	r3, r3, #4
    5f90:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5f92:	4b03      	ldr	r3, [pc, #12]	; (5fa0 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5f94:	681b      	ldr	r3, [r3, #0]
    5f96:	9a01      	ldr	r2, [sp, #4]
    5f98:	605a      	str	r2, [r3, #4]
}
    5f9a:	bf00      	nop
    5f9c:	b002      	add	sp, #8
    5f9e:	4770      	bx	lr
    5fa0:	1fff8b24 	.word	0x1fff8b24

00005fa4 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5fa4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5fa6:	2300      	movs	r3, #0
    5fa8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5faa:	4b07      	ldr	r3, [pc, #28]	; (5fc8 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5fac:	681b      	ldr	r3, [r3, #0]
    5fae:	685b      	ldr	r3, [r3, #4]
    5fb0:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5fb2:	9b01      	ldr	r3, [sp, #4]
    5fb4:	f023 0304 	bic.w	r3, r3, #4
    5fb8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5fba:	4b03      	ldr	r3, [pc, #12]	; (5fc8 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5fbc:	681b      	ldr	r3, [r3, #0]
    5fbe:	9a01      	ldr	r2, [sp, #4]
    5fc0:	605a      	str	r2, [r3, #4]
}
    5fc2:	bf00      	nop
    5fc4:	b002      	add	sp, #8
    5fc6:	4770      	bx	lr
    5fc8:	1fff8b24 	.word	0x1fff8b24

00005fcc <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5fcc:	b084      	sub	sp, #16
    5fce:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5fd0:	4b20      	ldr	r3, [pc, #128]	; (6054 <Power_Ip_PMC_PowerInit+0x88>)
    5fd2:	781b      	ldrb	r3, [r3, #0]
    5fd4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5fd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fdc:	f003 030f 	and.w	r3, r3, #15
    5fe0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5fe4:	9b01      	ldr	r3, [sp, #4]
    5fe6:	781a      	ldrb	r2, [r3, #0]
    5fe8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fec:	4313      	orrs	r3, r2
    5fee:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5ff2:	4a18      	ldr	r2, [pc, #96]	; (6054 <Power_Ip_PMC_PowerInit+0x88>)
    5ff4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ff8:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5ffa:	4b16      	ldr	r3, [pc, #88]	; (6054 <Power_Ip_PMC_PowerInit+0x88>)
    5ffc:	785b      	ldrb	r3, [r3, #1]
    5ffe:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    6002:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6006:	f003 031f 	and.w	r3, r3, #31
    600a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    600e:	9b01      	ldr	r3, [sp, #4]
    6010:	785a      	ldrb	r2, [r3, #1]
    6012:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6016:	4313      	orrs	r3, r2
    6018:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    601c:	4a0d      	ldr	r2, [pc, #52]	; (6054 <Power_Ip_PMC_PowerInit+0x88>)
    601e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6022:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    6024:	4b0b      	ldr	r3, [pc, #44]	; (6054 <Power_Ip_PMC_PowerInit+0x88>)
    6026:	789b      	ldrb	r3, [r3, #2]
    6028:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    602c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6030:	f003 0338 	and.w	r3, r3, #56	; 0x38
    6034:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    6038:	9b01      	ldr	r3, [sp, #4]
    603a:	789a      	ldrb	r2, [r3, #2]
    603c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6040:	4313      	orrs	r3, r2
    6042:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    6046:	4a03      	ldr	r2, [pc, #12]	; (6054 <Power_Ip_PMC_PowerInit+0x88>)
    6048:	f89d 300f 	ldrb.w	r3, [sp, #15]
    604c:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    604e:	bf00      	nop
    6050:	b004      	add	sp, #16
    6052:	4770      	bx	lr
    6054:	4007d000 	.word	0x4007d000

00006058 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6058:	b500      	push	{lr}
    605a:	b083      	sub	sp, #12
    605c:	9001      	str	r0, [sp, #4]
    605e:	460b      	mov	r3, r1
    6060:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    6064:	4b05      	ldr	r3, [pc, #20]	; (607c <Power_Ip_ReportPowerErrors+0x24>)
    6066:	681b      	ldr	r3, [r3, #0]
    6068:	f89d 2003 	ldrb.w	r2, [sp, #3]
    606c:	4611      	mov	r1, r2
    606e:	9801      	ldr	r0, [sp, #4]
    6070:	4798      	blx	r3
}
    6072:	bf00      	nop
    6074:	b003      	add	sp, #12
    6076:	f85d fb04 	ldr.w	pc, [sp], #4
    607a:	bf00      	nop
    607c:	1fff8b20 	.word	0x1fff8b20

00006080 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6080:	b082      	sub	sp, #8
    6082:	9001      	str	r0, [sp, #4]
    6084:	460b      	mov	r3, r1
    6086:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    608a:	bf00      	nop
    608c:	b002      	add	sp, #8
    608e:	4770      	bx	lr

00006090 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6090:	b500      	push	{lr}
    6092:	b085      	sub	sp, #20
    6094:	9003      	str	r0, [sp, #12]
    6096:	9102      	str	r1, [sp, #8]
    6098:	9201      	str	r2, [sp, #4]
    609a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    609c:	2000      	movs	r0, #0
    609e:	f7fb fee5 	bl	1e6c <OsIf_GetCounter>
    60a2:	4602      	mov	r2, r0
    60a4:	9b03      	ldr	r3, [sp, #12]
    60a6:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    60a8:	9b02      	ldr	r3, [sp, #8]
    60aa:	2200      	movs	r2, #0
    60ac:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    60ae:	2100      	movs	r1, #0
    60b0:	9800      	ldr	r0, [sp, #0]
    60b2:	f7fb ff27 	bl	1f04 <OsIf_MicrosToTicks>
    60b6:	4602      	mov	r2, r0
    60b8:	9b01      	ldr	r3, [sp, #4]
    60ba:	601a      	str	r2, [r3, #0]
}
    60bc:	bf00      	nop
    60be:	b005      	add	sp, #20
    60c0:	f85d fb04 	ldr.w	pc, [sp], #4

000060c4 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    60c4:	b500      	push	{lr}
    60c6:	b087      	sub	sp, #28
    60c8:	9003      	str	r0, [sp, #12]
    60ca:	9102      	str	r1, [sp, #8]
    60cc:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    60ce:	2300      	movs	r3, #0
    60d0:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    60d4:	2100      	movs	r1, #0
    60d6:	9803      	ldr	r0, [sp, #12]
    60d8:	f7fb fee1 	bl	1e9e <OsIf_GetElapsed>
    60dc:	4602      	mov	r2, r0
    60de:	9b02      	ldr	r3, [sp, #8]
    60e0:	681b      	ldr	r3, [r3, #0]
    60e2:	441a      	add	r2, r3
    60e4:	9b02      	ldr	r3, [sp, #8]
    60e6:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    60e8:	9b02      	ldr	r3, [sp, #8]
    60ea:	681b      	ldr	r3, [r3, #0]
    60ec:	9a01      	ldr	r2, [sp, #4]
    60ee:	429a      	cmp	r2, r3
    60f0:	d802      	bhi.n	60f8 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    60f2:	2301      	movs	r3, #1
    60f4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    60f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    60fc:	4618      	mov	r0, r3
    60fe:	b007      	add	sp, #28
    6100:	f85d fb04 	ldr.w	pc, [sp], #4

00006104 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6104:	b082      	sub	sp, #8
    6106:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    6108:	9b01      	ldr	r3, [sp, #4]
    610a:	681a      	ldr	r2, [r3, #0]
    610c:	4907      	ldr	r1, [pc, #28]	; (612c <Power_Ip_RCM_ResetInit+0x28>)
    610e:	f641 7307 	movw	r3, #7943	; 0x1f07
    6112:	4013      	ands	r3, r2
    6114:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    6116:	9b01      	ldr	r3, [sp, #4]
    6118:	685a      	ldr	r2, [r3, #4]
    611a:	4904      	ldr	r1, [pc, #16]	; (612c <Power_Ip_RCM_ResetInit+0x28>)
    611c:	f642 73ff 	movw	r3, #12287	; 0x2fff
    6120:	4013      	ands	r3, r2
    6122:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    6124:	bf00      	nop
    6126:	b002      	add	sp, #8
    6128:	4770      	bx	lr
    612a:	bf00      	nop
    612c:	4007f000 	.word	0x4007f000

00006130 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    6130:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    6132:	230c      	movs	r3, #12
    6134:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    6136:	2300      	movs	r3, #0
    6138:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    613a:	2300      	movs	r3, #0
    613c:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    613e:	2300      	movs	r3, #0
    6140:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6142:	4b25      	ldr	r3, [pc, #148]	; (61d8 <Power_Ip_RCM_GetResetReason+0xa8>)
    6144:	699a      	ldr	r2, [r3, #24]
    6146:	f642 73ee 	movw	r3, #12270	; 0x2fee
    614a:	4013      	ands	r3, r2
    614c:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    614e:	9b03      	ldr	r3, [sp, #12]
    6150:	2b00      	cmp	r3, #0
    6152:	d008      	beq.n	6166 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6154:	4920      	ldr	r1, [pc, #128]	; (61d8 <Power_Ip_RCM_GetResetReason+0xa8>)
    6156:	9a03      	ldr	r2, [sp, #12]
    6158:	f642 73ee 	movw	r3, #12270	; 0x2fee
    615c:	4013      	ands	r3, r2
    615e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6160:	4a1e      	ldr	r2, [pc, #120]	; (61dc <Power_Ip_RCM_GetResetReason+0xac>)
    6162:	9b03      	ldr	r3, [sp, #12]
    6164:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    6166:	4b1d      	ldr	r3, [pc, #116]	; (61dc <Power_Ip_RCM_GetResetReason+0xac>)
    6168:	681b      	ldr	r3, [r3, #0]
    616a:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    616c:	9a02      	ldr	r2, [sp, #8]
    616e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6172:	4013      	ands	r3, r2
    6174:	2b82      	cmp	r3, #130	; 0x82
    6176:	d102      	bne.n	617e <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6178:	2305      	movs	r3, #5
    617a:	9307      	str	r3, [sp, #28]
    617c:	e027      	b.n	61ce <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    617e:	2300      	movs	r3, #0
    6180:	9306      	str	r3, [sp, #24]
    6182:	e021      	b.n	61c8 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6184:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6188:	9b06      	ldr	r3, [sp, #24]
    618a:	fa22 f303 	lsr.w	r3, r2, r3
    618e:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6190:	9a01      	ldr	r2, [sp, #4]
    6192:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6196:	4013      	ands	r3, r2
    6198:	2b00      	cmp	r3, #0
    619a:	d012      	beq.n	61c2 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    619c:	9a01      	ldr	r2, [sp, #4]
    619e:	9b02      	ldr	r3, [sp, #8]
    61a0:	4013      	ands	r3, r2
    61a2:	2b00      	cmp	r3, #0
    61a4:	d00a      	beq.n	61bc <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    61a6:	9b05      	ldr	r3, [sp, #20]
    61a8:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    61aa:	9b04      	ldr	r3, [sp, #16]
    61ac:	3301      	adds	r3, #1
    61ae:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    61b0:	9b04      	ldr	r3, [sp, #16]
    61b2:	2b01      	cmp	r3, #1
    61b4:	d902      	bls.n	61bc <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    61b6:	230d      	movs	r3, #13
    61b8:	9307      	str	r3, [sp, #28]
                        break;
    61ba:	e008      	b.n	61ce <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    61bc:	9b05      	ldr	r3, [sp, #20]
    61be:	3301      	adds	r3, #1
    61c0:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    61c2:	9b06      	ldr	r3, [sp, #24]
    61c4:	3301      	adds	r3, #1
    61c6:	9306      	str	r3, [sp, #24]
    61c8:	9b06      	ldr	r3, [sp, #24]
    61ca:	2b1f      	cmp	r3, #31
    61cc:	d9da      	bls.n	6184 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    61ce:	9b07      	ldr	r3, [sp, #28]
}
    61d0:	4618      	mov	r0, r3
    61d2:	b008      	add	sp, #32
    61d4:	4770      	bx	lr
    61d6:	bf00      	nop
    61d8:	4007f000 	.word	0x4007f000
    61dc:	1fff8ce4 	.word	0x1fff8ce4

000061e0 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    61e0:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    61e2:	4b0c      	ldr	r3, [pc, #48]	; (6214 <Power_Ip_RCM_GetResetRawValue+0x34>)
    61e4:	699a      	ldr	r2, [r3, #24]
    61e6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    61ea:	4013      	ands	r3, r2
    61ec:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    61ee:	9b01      	ldr	r3, [sp, #4]
    61f0:	2b00      	cmp	r3, #0
    61f2:	d008      	beq.n	6206 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    61f4:	4907      	ldr	r1, [pc, #28]	; (6214 <Power_Ip_RCM_GetResetRawValue+0x34>)
    61f6:	9a01      	ldr	r2, [sp, #4]
    61f8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    61fc:	4013      	ands	r3, r2
    61fe:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6200:	4a05      	ldr	r2, [pc, #20]	; (6218 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6202:	9b01      	ldr	r3, [sp, #4]
    6204:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    6206:	4b04      	ldr	r3, [pc, #16]	; (6218 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6208:	681b      	ldr	r3, [r3, #0]
    620a:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    620c:	9b00      	ldr	r3, [sp, #0]
}
    620e:	4618      	mov	r0, r3
    6210:	b002      	add	sp, #8
    6212:	4770      	bx	lr
    6214:	4007f000 	.word	0x4007f000
    6218:	1fff8ce4 	.word	0x1fff8ce4

0000621c <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    621c:	b082      	sub	sp, #8
    621e:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    6220:	9b01      	ldr	r3, [sp, #4]
    6222:	681b      	ldr	r3, [r3, #0]
    6224:	4a03      	ldr	r2, [pc, #12]	; (6234 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    6226:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    622a:	6093      	str	r3, [r2, #8]
}
    622c:	bf00      	nop
    622e:	b002      	add	sp, #8
    6230:	4770      	bx	lr
    6232:	bf00      	nop
    6234:	4007e000 	.word	0x4007e000

00006238 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    6238:	b084      	sub	sp, #16
    623a:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    623c:	2301      	movs	r3, #1
    623e:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6240:	4b15      	ldr	r3, [pc, #84]	; (6298 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    6242:	695b      	ldr	r3, [r3, #20]
    6244:	b2db      	uxtb	r3, r3
    6246:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    6248:	9b01      	ldr	r3, [sp, #4]
    624a:	2b02      	cmp	r3, #2
    624c:	d012      	beq.n	6274 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    624e:	9b01      	ldr	r3, [sp, #4]
    6250:	2b02      	cmp	r3, #2
    6252:	d818      	bhi.n	6286 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    6254:	9b01      	ldr	r3, [sp, #4]
    6256:	2b00      	cmp	r3, #0
    6258:	d003      	beq.n	6262 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    625a:	9b01      	ldr	r3, [sp, #4]
    625c:	2b01      	cmp	r3, #1
    625e:	d003      	beq.n	6268 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    6260:	e011      	b.n	6286 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    6262:	2300      	movs	r3, #0
    6264:	9303      	str	r3, [sp, #12]
            break;
    6266:	e013      	b.n	6290 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    6268:	9b02      	ldr	r3, [sp, #8]
    626a:	2b01      	cmp	r3, #1
    626c:	d10d      	bne.n	628a <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    626e:	2300      	movs	r3, #0
    6270:	9303      	str	r3, [sp, #12]
            break;
    6272:	e00a      	b.n	628a <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    6274:	9b02      	ldr	r3, [sp, #8]
    6276:	2b01      	cmp	r3, #1
    6278:	d002      	beq.n	6280 <Power_Ip_SMC_ModeCheckEntry+0x48>
    627a:	9b02      	ldr	r3, [sp, #8]
    627c:	2b10      	cmp	r3, #16
    627e:	d106      	bne.n	628e <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    6280:	2300      	movs	r3, #0
    6282:	9303      	str	r3, [sp, #12]
            break;
    6284:	e003      	b.n	628e <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    6286:	bf00      	nop
    6288:	e002      	b.n	6290 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    628a:	bf00      	nop
    628c:	e000      	b.n	6290 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    628e:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6290:	9b03      	ldr	r3, [sp, #12]
}
    6292:	4618      	mov	r0, r3
    6294:	b004      	add	sp, #16
    6296:	4770      	bx	lr
    6298:	4007e000 	.word	0x4007e000

0000629c <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    629c:	b500      	push	{lr}
    629e:	b08b      	sub	sp, #44	; 0x2c
    62a0:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    62a2:	2300      	movs	r3, #0
    62a4:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    62a6:	2300      	movs	r3, #0
    62a8:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    62aa:	2300      	movs	r3, #0
    62ac:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    62b0:	9b01      	ldr	r3, [sp, #4]
    62b2:	685b      	ldr	r3, [r3, #4]
    62b4:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    62b6:	9b08      	ldr	r3, [sp, #32]
    62b8:	2b02      	cmp	r3, #2
    62ba:	d076      	beq.n	63aa <Power_Ip_SMC_ModeConfig+0x10e>
    62bc:	9b08      	ldr	r3, [sp, #32]
    62be:	2b02      	cmp	r3, #2
    62c0:	f200 80ab 	bhi.w	641a <Power_Ip_SMC_ModeConfig+0x17e>
    62c4:	9b08      	ldr	r3, [sp, #32]
    62c6:	2b00      	cmp	r3, #0
    62c8:	d003      	beq.n	62d2 <Power_Ip_SMC_ModeConfig+0x36>
    62ca:	9b08      	ldr	r3, [sp, #32]
    62cc:	2b01      	cmp	r3, #1
    62ce:	d034      	beq.n	633a <Power_Ip_SMC_ModeConfig+0x9e>
    62d0:	e0a3      	b.n	641a <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    62d2:	4b58      	ldr	r3, [pc, #352]	; (6434 <Power_Ip_SMC_ModeConfig+0x198>)
    62d4:	68db      	ldr	r3, [r3, #12]
    62d6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    62d8:	9b06      	ldr	r3, [sp, #24]
    62da:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    62de:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    62e0:	4a54      	ldr	r2, [pc, #336]	; (6434 <Power_Ip_SMC_ModeConfig+0x198>)
    62e2:	9b06      	ldr	r3, [sp, #24]
    62e4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    62e6:	aa02      	add	r2, sp, #8
    62e8:	a903      	add	r1, sp, #12
    62ea:	a804      	add	r0, sp, #16
    62ec:	f24c 3350 	movw	r3, #50000	; 0xc350
    62f0:	f7ff fece 	bl	6090 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    62f4:	9a02      	ldr	r2, [sp, #8]
    62f6:	a903      	add	r1, sp, #12
    62f8:	ab04      	add	r3, sp, #16
    62fa:	4618      	mov	r0, r3
    62fc:	f7ff fee2 	bl	60c4 <Power_Ip_TimeoutExpired>
    6300:	4603      	mov	r3, r0
    6302:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    6306:	4b4b      	ldr	r3, [pc, #300]	; (6434 <Power_Ip_SMC_ModeConfig+0x198>)
    6308:	695b      	ldr	r3, [r3, #20]
    630a:	f003 0301 	and.w	r3, r3, #1
    630e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6310:	9b05      	ldr	r3, [sp, #20]
    6312:	2b01      	cmp	r3, #1
    6314:	d006      	beq.n	6324 <Power_Ip_SMC_ModeConfig+0x88>
    6316:	f89d 301f 	ldrb.w	r3, [sp, #31]
    631a:	f083 0301 	eor.w	r3, r3, #1
    631e:	b2db      	uxtb	r3, r3
    6320:	2b00      	cmp	r3, #0
    6322:	d1e7      	bne.n	62f4 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    6324:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6328:	2b00      	cmp	r3, #0
    632a:	d079      	beq.n	6420 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    632c:	2301      	movs	r3, #1
    632e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6330:	21ff      	movs	r1, #255	; 0xff
    6332:	2000      	movs	r0, #0
    6334:	f7ff fe90 	bl	6058 <Power_Ip_ReportPowerErrors>
            }

            break;
    6338:	e072      	b.n	6420 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    633a:	4b3e      	ldr	r3, [pc, #248]	; (6434 <Power_Ip_SMC_ModeConfig+0x198>)
    633c:	68db      	ldr	r3, [r3, #12]
    633e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6340:	9b06      	ldr	r3, [sp, #24]
    6342:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6346:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    6348:	9b06      	ldr	r3, [sp, #24]
    634a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    634e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6350:	4a38      	ldr	r2, [pc, #224]	; (6434 <Power_Ip_SMC_ModeConfig+0x198>)
    6352:	9b06      	ldr	r3, [sp, #24]
    6354:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6356:	aa02      	add	r2, sp, #8
    6358:	a903      	add	r1, sp, #12
    635a:	a804      	add	r0, sp, #16
    635c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6360:	f7ff fe96 	bl	6090 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6364:	9a02      	ldr	r2, [sp, #8]
    6366:	a903      	add	r1, sp, #12
    6368:	ab04      	add	r3, sp, #16
    636a:	4618      	mov	r0, r3
    636c:	f7ff feaa 	bl	60c4 <Power_Ip_TimeoutExpired>
    6370:	4603      	mov	r3, r0
    6372:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    6376:	4b2f      	ldr	r3, [pc, #188]	; (6434 <Power_Ip_SMC_ModeConfig+0x198>)
    6378:	695b      	ldr	r3, [r3, #20]
    637a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    637e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6380:	9b05      	ldr	r3, [sp, #20]
    6382:	2b80      	cmp	r3, #128	; 0x80
    6384:	d006      	beq.n	6394 <Power_Ip_SMC_ModeConfig+0xf8>
    6386:	f89d 301f 	ldrb.w	r3, [sp, #31]
    638a:	f083 0301 	eor.w	r3, r3, #1
    638e:	b2db      	uxtb	r3, r3
    6390:	2b00      	cmp	r3, #0
    6392:	d1e7      	bne.n	6364 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6394:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6398:	2b00      	cmp	r3, #0
    639a:	d043      	beq.n	6424 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    639c:	2301      	movs	r3, #1
    639e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    63a0:	21ff      	movs	r1, #255	; 0xff
    63a2:	2000      	movs	r0, #0
    63a4:	f7ff fe58 	bl	6058 <Power_Ip_ReportPowerErrors>
            }

            break;
    63a8:	e03c      	b.n	6424 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    63aa:	4b22      	ldr	r3, [pc, #136]	; (6434 <Power_Ip_SMC_ModeConfig+0x198>)
    63ac:	68db      	ldr	r3, [r3, #12]
    63ae:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    63b0:	9b06      	ldr	r3, [sp, #24]
    63b2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    63b6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    63b8:	9b06      	ldr	r3, [sp, #24]
    63ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    63be:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    63c0:	4a1c      	ldr	r2, [pc, #112]	; (6434 <Power_Ip_SMC_ModeConfig+0x198>)
    63c2:	9b06      	ldr	r3, [sp, #24]
    63c4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    63c6:	aa02      	add	r2, sp, #8
    63c8:	a903      	add	r1, sp, #12
    63ca:	a804      	add	r0, sp, #16
    63cc:	f24c 3350 	movw	r3, #50000	; 0xc350
    63d0:	f7ff fe5e 	bl	6090 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    63d4:	9a02      	ldr	r2, [sp, #8]
    63d6:	a903      	add	r1, sp, #12
    63d8:	ab04      	add	r3, sp, #16
    63da:	4618      	mov	r0, r3
    63dc:	f7ff fe72 	bl	60c4 <Power_Ip_TimeoutExpired>
    63e0:	4603      	mov	r3, r0
    63e2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    63e6:	4b13      	ldr	r3, [pc, #76]	; (6434 <Power_Ip_SMC_ModeConfig+0x198>)
    63e8:	695b      	ldr	r3, [r3, #20]
    63ea:	f003 0304 	and.w	r3, r3, #4
    63ee:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    63f0:	9b05      	ldr	r3, [sp, #20]
    63f2:	2b04      	cmp	r3, #4
    63f4:	d006      	beq.n	6404 <Power_Ip_SMC_ModeConfig+0x168>
    63f6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    63fa:	f083 0301 	eor.w	r3, r3, #1
    63fe:	b2db      	uxtb	r3, r3
    6400:	2b00      	cmp	r3, #0
    6402:	d1e7      	bne.n	63d4 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6404:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6408:	2b00      	cmp	r3, #0
    640a:	d00d      	beq.n	6428 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    640c:	2301      	movs	r3, #1
    640e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6410:	21ff      	movs	r1, #255	; 0xff
    6412:	2000      	movs	r0, #0
    6414:	f7ff fe20 	bl	6058 <Power_Ip_ReportPowerErrors>
            }

            break;
    6418:	e006      	b.n	6428 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    641a:	2301      	movs	r3, #1
    641c:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    641e:	e004      	b.n	642a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6420:	bf00      	nop
    6422:	e002      	b.n	642a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6424:	bf00      	nop
    6426:	e000      	b.n	642a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6428:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    642a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    642c:	4618      	mov	r0, r3
    642e:	b00b      	add	sp, #44	; 0x2c
    6430:	f85d fb04 	ldr.w	pc, [sp], #4
    6434:	4007e000 	.word	0x4007e000

00006438 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    6438:	b500      	push	{lr}
    643a:	b085      	sub	sp, #20
    643c:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    643e:	9b01      	ldr	r3, [sp, #4]
    6440:	9303      	str	r3, [sp, #12]
#endif /* (STD_ON == PORT_PRECOMPILE_SUPPORT) */

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    6442:	2300      	movs	r3, #0
    6444:	f88d 300b 	strb.w	r3, [sp, #11]
#if (STD_OFF == PORT_PRECOMPILE_SUPPORT)
    if (NULL_PTR == ConfigPtr)
    6448:	9b01      	ldr	r3, [sp, #4]
    644a:	2b00      	cmp	r3, #0
    644c:	d106      	bne.n	645c <Port_Init+0x24>
#else /*(STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    if (NULL_PTR != ConfigPtr)
#endif /* (STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_INIT_FAILED);
    644e:	230c      	movs	r3, #12
    6450:	2200      	movs	r2, #0
    6452:	2100      	movs	r1, #0
    6454:	207c      	movs	r0, #124	; 0x7c
    6456:	f010 fc3d 	bl	16cd4 <Det_ReportError>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
        }
    }
}
    645a:	e014      	b.n	6486 <Port_Init+0x4e>
        if ((uint32)1 != pLocalConfigPtr->pau8Port_PartitionList[CoreId])
    645c:	9b03      	ldr	r3, [sp, #12]
    645e:	69da      	ldr	r2, [r3, #28]
    6460:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6464:	4413      	add	r3, r2
    6466:	781b      	ldrb	r3, [r3, #0]
    6468:	2b01      	cmp	r3, #1
    646a:	d006      	beq.n	647a <Port_Init+0x42>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
    646c:	23f0      	movs	r3, #240	; 0xf0
    646e:	2200      	movs	r2, #0
    6470:	2100      	movs	r1, #0
    6472:	207c      	movs	r0, #124	; 0x7c
    6474:	f010 fc2e 	bl	16cd4 <Det_ReportError>
}
    6478:	e005      	b.n	6486 <Port_Init+0x4e>
            Port_Ipw_Init(pLocalConfigPtr);
    647a:	9803      	ldr	r0, [sp, #12]
    647c:	f000 fc64 	bl	6d48 <Port_Ipw_Init>
            Port_pConfigPtr = pLocalConfigPtr;
    6480:	4a03      	ldr	r2, [pc, #12]	; (6490 <Port_Init+0x58>)
    6482:	9b03      	ldr	r3, [sp, #12]
    6484:	6013      	str	r3, [r2, #0]
}
    6486:	bf00      	nop
    6488:	b005      	add	sp, #20
    648a:	f85d fb04 	ldr.w	pc, [sp], #4
    648e:	bf00      	nop
    6490:	1fff8ce8 	.word	0x1fff8ce8

00006494 <Port_SetPinDirection>:
void Port_SetPinDirection
(
    Port_PinType Pin,
    Port_PinDirectionType Direction
)
{
    6494:	b500      	push	{lr}
    6496:	b085      	sub	sp, #20
    6498:	9001      	str	r0, [sp, #4]
    649a:	9100      	str	r1, [sp, #0]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    /* Variable used to store current error status */
    Std_ReturnType ErrStatus;

    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    649c:	4b11      	ldr	r3, [pc, #68]	; (64e4 <Port_SetPinDirection+0x50>)
    649e:	681b      	ldr	r3, [r3, #0]
    64a0:	2b00      	cmp	r3, #0
    64a2:	d106      	bne.n	64b2 <Port_SetPinDirection+0x1e>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    64a4:	230f      	movs	r3, #15
    64a6:	2201      	movs	r2, #1
    64a8:	2100      	movs	r1, #0
    64aa:	207c      	movs	r0, #124	; 0x7c
    64ac:	f010 fc12 	bl	16cd4 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    64b0:	e013      	b.n	64da <Port_SetPinDirection+0x46>
        ErrStatus = Port_Ipw_SetPinDirection(Pin, Direction, Port_pConfigPtr);
    64b2:	4b0c      	ldr	r3, [pc, #48]	; (64e4 <Port_SetPinDirection+0x50>)
    64b4:	681b      	ldr	r3, [r3, #0]
    64b6:	461a      	mov	r2, r3
    64b8:	9900      	ldr	r1, [sp, #0]
    64ba:	9801      	ldr	r0, [sp, #4]
    64bc:	f000 fcb2 	bl	6e24 <Port_Ipw_SetPinDirection>
    64c0:	4603      	mov	r3, r0
    64c2:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_NOT_OK == ErrStatus)
    64c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    64ca:	2b01      	cmp	r3, #1
    64cc:	d105      	bne.n	64da <Port_SetPinDirection+0x46>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
    64ce:	230b      	movs	r3, #11
    64d0:	2201      	movs	r2, #1
    64d2:	2100      	movs	r1, #0
    64d4:	207c      	movs	r0, #124	; 0x7c
    64d6:	f010 fbfd 	bl	16cd4 <Det_ReportError>
}
    64da:	bf00      	nop
    64dc:	b005      	add	sp, #20
    64de:	f85d fb04 	ldr.w	pc, [sp], #4
    64e2:	bf00      	nop
    64e4:	1fff8ce8 	.word	0x1fff8ce8

000064e8 <Port_SetPinMode>:
void Port_SetPinMode
(
    Port_PinType Pin,
    Port_PinModeType Mode
)
{
    64e8:	b500      	push	{lr}
    64ea:	b085      	sub	sp, #20
    64ec:	9001      	str	r0, [sp, #4]
    64ee:	460b      	mov	r3, r1
    64f0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 u8PinModeError = (uint8)0U;
    64f4:	2300      	movs	r3, #0
    64f6:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if port is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    64fa:	4b12      	ldr	r3, [pc, #72]	; (6544 <Port_SetPinMode+0x5c>)
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	2b00      	cmp	r3, #0
    6500:	d106      	bne.n	6510 <Port_SetPinMode+0x28>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_UNINIT);
    6502:	230f      	movs	r3, #15
    6504:	2204      	movs	r2, #4
    6506:	2100      	movs	r1, #0
    6508:	207c      	movs	r0, #124	; 0x7c
    650a:	f010 fbe3 	bl	16cd4 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    650e:	e014      	b.n	653a <Port_SetPinMode+0x52>
        u8PinModeError = (uint8)Port_Ipw_SetPinMode(Pin, Mode, Port_pConfigPtr);
    6510:	4b0c      	ldr	r3, [pc, #48]	; (6544 <Port_SetPinMode+0x5c>)
    6512:	681a      	ldr	r2, [r3, #0]
    6514:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6518:	4619      	mov	r1, r3
    651a:	9801      	ldr	r0, [sp, #4]
    651c:	f000 fd7a 	bl	7014 <Port_Ipw_SetPinMode>
    6520:	4603      	mov	r3, r0
    6522:	f88d 300f 	strb.w	r3, [sp, #15]
        if (PORT_E_PARAM_INVALID_MODE == u8PinModeError)
    6526:	f89d 300f 	ldrb.w	r3, [sp, #15]
    652a:	2b0d      	cmp	r3, #13
    652c:	d105      	bne.n	653a <Port_SetPinMode+0x52>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
    652e:	230d      	movs	r3, #13
    6530:	2204      	movs	r2, #4
    6532:	2100      	movs	r1, #0
    6534:	207c      	movs	r0, #124	; 0x7c
    6536:	f010 fbcd 	bl	16cd4 <Det_ReportError>
}
    653a:	bf00      	nop
    653c:	b005      	add	sp, #20
    653e:	f85d fb04 	ldr.w	pc, [sp], #4
    6542:	bf00      	nop
    6544:	1fff8ce8 	.word	0x1fff8ce8

00006548 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    6548:	b500      	push	{lr}
    654a:	b083      	sub	sp, #12
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    654c:	2300      	movs	r3, #0
    654e:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    6552:	4b12      	ldr	r3, [pc, #72]	; (659c <Port_RefreshPortDirection+0x54>)
    6554:	681b      	ldr	r3, [r3, #0]
    6556:	2b00      	cmp	r3, #0
    6558:	d106      	bne.n	6568 <Port_RefreshPortDirection+0x20>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    655a:	230f      	movs	r3, #15
    655c:	2202      	movs	r2, #2
    655e:	2100      	movs	r1, #0
    6560:	207c      	movs	r0, #124	; 0x7c
    6562:	f010 fbb7 	bl	16cd4 <Det_ReportError>
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    }
}
    6566:	e014      	b.n	6592 <Port_RefreshPortDirection+0x4a>
    else if ((uint32)1 != Port_pConfigPtr->pau8Port_PartitionList[CoreId])
    6568:	4b0c      	ldr	r3, [pc, #48]	; (659c <Port_RefreshPortDirection+0x54>)
    656a:	681b      	ldr	r3, [r3, #0]
    656c:	69da      	ldr	r2, [r3, #28]
    656e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6572:	4413      	add	r3, r2
    6574:	781b      	ldrb	r3, [r3, #0]
    6576:	2b01      	cmp	r3, #1
    6578:	d006      	beq.n	6588 <Port_RefreshPortDirection+0x40>
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    657a:	23f0      	movs	r3, #240	; 0xf0
    657c:	2202      	movs	r2, #2
    657e:	2100      	movs	r1, #0
    6580:	207c      	movs	r0, #124	; 0x7c
    6582:	f010 fba7 	bl	16cd4 <Det_ReportError>
}
    6586:	e004      	b.n	6592 <Port_RefreshPortDirection+0x4a>
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    6588:	4b04      	ldr	r3, [pc, #16]	; (659c <Port_RefreshPortDirection+0x54>)
    658a:	681b      	ldr	r3, [r3, #0]
    658c:	4618      	mov	r0, r3
    658e:	f000 febf 	bl	7310 <Port_Ipw_RefreshPortDirection>
}
    6592:	bf00      	nop
    6594:	b003      	add	sp, #12
    6596:	f85d fb04 	ldr.w	pc, [sp], #4
    659a:	bf00      	nop
    659c:	1fff8ce8 	.word	0x1fff8ce8

000065a0 <Port_GetVersionInfo>:
*/
void Port_GetVersionInfo
(
    Std_VersionInfoType * versioninfo
)
{
    65a0:	b500      	push	{lr}
    65a2:	b083      	sub	sp, #12
    65a4:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    if (NULL_PTR == versioninfo)
    65a6:	9b01      	ldr	r3, [sp, #4]
    65a8:	2b00      	cmp	r3, #0
    65aa:	d106      	bne.n	65ba <Port_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_GETVERSIONINFO_ID, (uint8)PORT_E_PARAM_POINTER);
    65ac:	2310      	movs	r3, #16
    65ae:	2203      	movs	r2, #3
    65b0:	2100      	movs	r1, #0
    65b2:	207c      	movs	r0, #124	; 0x7c
    65b4:	f010 fb8e 	bl	16cd4 <Det_ReportError>
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    }
}
    65b8:	e00e      	b.n	65d8 <Port_GetVersionInfo+0x38>
        (versioninfo)->vendorID         = (uint16)PORT_VENDOR_ID;
    65ba:	9b01      	ldr	r3, [sp, #4]
    65bc:	222b      	movs	r2, #43	; 0x2b
    65be:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
    65c0:	9b01      	ldr	r3, [sp, #4]
    65c2:	227c      	movs	r2, #124	; 0x7c
    65c4:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
    65c6:	9b01      	ldr	r3, [sp, #4]
    65c8:	2202      	movs	r2, #2
    65ca:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
    65cc:	9b01      	ldr	r3, [sp, #4]
    65ce:	2200      	movs	r2, #0
    65d0:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    65d2:	9b01      	ldr	r3, [sp, #4]
    65d4:	2200      	movs	r2, #0
    65d6:	719a      	strb	r2, [r3, #6]
}
    65d8:	bf00      	nop
    65da:	b003      	add	sp, #12
    65dc:	f85d fb04 	ldr.w	pc, [sp], #4

000065e0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    65e0:	b086      	sub	sp, #24
    65e2:	9003      	str	r0, [sp, #12]
    65e4:	9102      	str	r1, [sp, #8]
    65e6:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    65e8:	23ff      	movs	r3, #255	; 0xff
    65ea:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    65ec:	9b03      	ldr	r3, [sp, #12]
    65ee:	4a39      	ldr	r2, [pc, #228]	; (66d4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    65f0:	4293      	cmp	r3, r2
    65f2:	d151      	bne.n	6698 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    65f4:	9b02      	ldr	r3, [sp, #8]
    65f6:	2b10      	cmp	r3, #16
    65f8:	d867      	bhi.n	66ca <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    65fa:	a201      	add	r2, pc, #4	; (adr r2, 6600 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    65fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6600:	00006645 	.word	0x00006645
    6604:	00006653 	.word	0x00006653
    6608:	000066cb 	.word	0x000066cb
    660c:	000066cb 	.word	0x000066cb
    6610:	000066cb 	.word	0x000066cb
    6614:	000066cb 	.word	0x000066cb
    6618:	000066cb 	.word	0x000066cb
    661c:	000066cb 	.word	0x000066cb
    6620:	000066cb 	.word	0x000066cb
    6624:	000066cb 	.word	0x000066cb
    6628:	000066cb 	.word	0x000066cb
    662c:	000066cb 	.word	0x000066cb
    6630:	000066cb 	.word	0x000066cb
    6634:	00006661 	.word	0x00006661
    6638:	0000666f 	.word	0x0000666f
    663c:	0000667d 	.word	0x0000667d
    6640:	0000668b 	.word	0x0000668b
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6644:	2301      	movs	r3, #1
    6646:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6648:	9a05      	ldr	r2, [sp, #20]
    664a:	9b01      	ldr	r3, [sp, #4]
    664c:	4313      	orrs	r3, r2
    664e:	9305      	str	r3, [sp, #20]
                break;
    6650:	e03c      	b.n	66cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6652:	2302      	movs	r3, #2
    6654:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6656:	9a05      	ldr	r2, [sp, #20]
    6658:	9b01      	ldr	r3, [sp, #4]
    665a:	4313      	orrs	r3, r2
    665c:	9305      	str	r3, [sp, #20]
                break;
    665e:	e035      	b.n	66cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6660:	2304      	movs	r3, #4
    6662:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6664:	9a05      	ldr	r2, [sp, #20]
    6666:	9b01      	ldr	r3, [sp, #4]
    6668:	4313      	orrs	r3, r2
    666a:	9305      	str	r3, [sp, #20]
                break;
    666c:	e02e      	b.n	66cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    666e:	2308      	movs	r3, #8
    6670:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6672:	9a05      	ldr	r2, [sp, #20]
    6674:	9b01      	ldr	r3, [sp, #4]
    6676:	4313      	orrs	r3, r2
    6678:	9305      	str	r3, [sp, #20]
                break;
    667a:	e027      	b.n	66cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    667c:	230e      	movs	r3, #14
    667e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6680:	9a05      	ldr	r2, [sp, #20]
    6682:	9b01      	ldr	r3, [sp, #4]
    6684:	4013      	ands	r3, r2
    6686:	9305      	str	r3, [sp, #20]
                break;
    6688:	e020      	b.n	66cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    668a:	230d      	movs	r3, #13
    668c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    668e:	9a05      	ldr	r2, [sp, #20]
    6690:	9b01      	ldr	r3, [sp, #4]
    6692:	4013      	ands	r3, r2
    6694:	9305      	str	r3, [sp, #20]
                break;
    6696:	e019      	b.n	66cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    6698:	9b03      	ldr	r3, [sp, #12]
    669a:	4a0f      	ldr	r2, [pc, #60]	; (66d8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    669c:	4293      	cmp	r3, r2
    669e:	d115      	bne.n	66cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    66a0:	9b02      	ldr	r3, [sp, #8]
    66a2:	2b00      	cmp	r3, #0
    66a4:	d003      	beq.n	66ae <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    66a6:	9b02      	ldr	r3, [sp, #8]
    66a8:	2b01      	cmp	r3, #1
    66aa:	d007      	beq.n	66bc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    66ac:	e00e      	b.n	66cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    66ae:	230b      	movs	r3, #11
    66b0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    66b2:	9a05      	ldr	r2, [sp, #20]
    66b4:	9b01      	ldr	r3, [sp, #4]
    66b6:	4013      	ands	r3, r2
    66b8:	9305      	str	r3, [sp, #20]
                break;
    66ba:	e007      	b.n	66cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    66bc:	2307      	movs	r3, #7
    66be:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    66c0:	9a05      	ldr	r2, [sp, #20]
    66c2:	9b01      	ldr	r3, [sp, #4]
    66c4:	4013      	ands	r3, r2
    66c6:	9305      	str	r3, [sp, #20]
                break;
    66c8:	e000      	b.n	66cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    66ca:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    66cc:	9b05      	ldr	r3, [sp, #20]
}
    66ce:	4618      	mov	r0, r3
    66d0:	b006      	add	sp, #24
    66d2:	4770      	bx	lr
    66d4:	4004a000 	.word	0x4004a000
    66d8:	4004b000 	.word	0x4004b000

000066dc <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    66dc:	b500      	push	{lr}
    66de:	b089      	sub	sp, #36	; 0x24
    66e0:	9003      	str	r0, [sp, #12]
    66e2:	9102      	str	r1, [sp, #8]
    66e4:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    66e6:	9b01      	ldr	r3, [sp, #4]
    66e8:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    66ea:	9b01      	ldr	r3, [sp, #4]
    66ec:	2b08      	cmp	r3, #8
    66ee:	d121      	bne.n	6734 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    66f0:	4b13      	ldr	r3, [pc, #76]	; (6740 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    66f2:	685b      	ldr	r3, [r3, #4]
    66f4:	f003 030f 	and.w	r3, r3, #15
    66f8:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    66fa:	9a06      	ldr	r2, [sp, #24]
    66fc:	9902      	ldr	r1, [sp, #8]
    66fe:	9803      	ldr	r0, [sp, #12]
    6700:	f7ff ff6e 	bl	65e0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6704:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6706:	9b05      	ldr	r3, [sp, #20]
    6708:	2bff      	cmp	r3, #255	; 0xff
    670a:	d011      	beq.n	6730 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    670c:	f00e fc2a 	bl	14f64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6710:	4b0b      	ldr	r3, [pc, #44]	; (6740 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6712:	685b      	ldr	r3, [r3, #4]
    6714:	4a0a      	ldr	r2, [pc, #40]	; (6740 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6716:	f023 030f 	bic.w	r3, r3, #15
    671a:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    671c:	4b08      	ldr	r3, [pc, #32]	; (6740 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    671e:	685a      	ldr	r2, [r3, #4]
    6720:	9b05      	ldr	r3, [sp, #20]
    6722:	f003 030f 	and.w	r3, r3, #15
    6726:	4906      	ldr	r1, [pc, #24]	; (6740 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6728:	4313      	orrs	r3, r2
    672a:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    672c:	f00e fc46 	bl	14fbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6730:	2300      	movs	r3, #0
    6732:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6734:	9b07      	ldr	r3, [sp, #28]
}
    6736:	4618      	mov	r0, r3
    6738:	b009      	add	sp, #36	; 0x24
    673a:	f85d fb04 	ldr.w	pc, [sp], #4
    673e:	bf00      	nop
    6740:	40048000 	.word	0x40048000

00006744 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6744:	b500      	push	{lr}
    6746:	b087      	sub	sp, #28
    6748:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    674a:	2300      	movs	r3, #0
    674c:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    674e:	2300      	movs	r3, #0
    6750:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6752:	2300      	movs	r3, #0
    6754:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6756:	9b01      	ldr	r3, [sp, #4]
    6758:	68db      	ldr	r3, [r3, #12]
    675a:	2b02      	cmp	r3, #2
    675c:	d00a      	beq.n	6774 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    675e:	9b05      	ldr	r3, [sp, #20]
    6760:	f043 0302 	orr.w	r3, r3, #2
    6764:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6766:	9b01      	ldr	r3, [sp, #4]
    6768:	68db      	ldr	r3, [r3, #12]
    676a:	f003 0301 	and.w	r3, r3, #1
    676e:	9a05      	ldr	r2, [sp, #20]
    6770:	4313      	orrs	r3, r2
    6772:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6774:	9b01      	ldr	r3, [sp, #4]
    6776:	699b      	ldr	r3, [r3, #24]
    6778:	019b      	lsls	r3, r3, #6
    677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    677e:	9a05      	ldr	r2, [sp, #20]
    6780:	4313      	orrs	r3, r2
    6782:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6784:	9b01      	ldr	r3, [sp, #4]
    6786:	6a1b      	ldr	r3, [r3, #32]
    6788:	03db      	lsls	r3, r3, #15
    678a:	b29b      	uxth	r3, r3
    678c:	9a05      	ldr	r2, [sp, #20]
    678e:	4313      	orrs	r3, r2
    6790:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6792:	9b01      	ldr	r3, [sp, #4]
    6794:	7f1b      	ldrb	r3, [r3, #28]
    6796:	2b00      	cmp	r3, #0
    6798:	d001      	beq.n	679e <Port_Ci_Port_Ip_PinInit+0x5a>
    679a:	2310      	movs	r3, #16
    679c:	e000      	b.n	67a0 <Port_Ci_Port_Ip_PinInit+0x5c>
    679e:	2300      	movs	r3, #0
    67a0:	9a05      	ldr	r2, [sp, #20]
    67a2:	4313      	orrs	r3, r2
    67a4:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    67a6:	9b01      	ldr	r3, [sp, #4]
    67a8:	691b      	ldr	r3, [r3, #16]
    67aa:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    67ac:	9b01      	ldr	r3, [sp, #4]
    67ae:	6818      	ldr	r0, [r3, #0]
    67b0:	9b01      	ldr	r3, [sp, #4]
    67b2:	689b      	ldr	r3, [r3, #8]
    67b4:	9a04      	ldr	r2, [sp, #16]
    67b6:	4619      	mov	r1, r3
    67b8:	f7ff ff90 	bl	66dc <Port_Ci_Port_Ip_ConfigureInterleave>
    67bc:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    67be:	9b03      	ldr	r3, [sp, #12]
    67c0:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    67c2:	9b04      	ldr	r3, [sp, #16]
    67c4:	021b      	lsls	r3, r3, #8
    67c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    67ca:	9a05      	ldr	r2, [sp, #20]
    67cc:	4313      	orrs	r3, r2
    67ce:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    67d0:	f00e fa2e 	bl	14c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    67d4:	9b01      	ldr	r3, [sp, #4]
    67d6:	681b      	ldr	r3, [r3, #0]
    67d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    67dc:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    67de:	9b01      	ldr	r3, [sp, #4]
    67e0:	689b      	ldr	r3, [r3, #8]
    67e2:	2201      	movs	r2, #1
    67e4:	fa02 f303 	lsl.w	r3, r2, r3
    67e8:	43db      	mvns	r3, r3
    67ea:	9a02      	ldr	r2, [sp, #8]
    67ec:	4013      	ands	r3, r2
    67ee:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    67f0:	9b01      	ldr	r3, [sp, #4]
    67f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    67f6:	2b00      	cmp	r3, #0
    67f8:	d001      	beq.n	67fe <Port_Ci_Port_Ip_PinInit+0xba>
    67fa:	2201      	movs	r2, #1
    67fc:	e000      	b.n	6800 <Port_Ci_Port_Ip_PinInit+0xbc>
    67fe:	2200      	movs	r2, #0
    6800:	9b01      	ldr	r3, [sp, #4]
    6802:	689b      	ldr	r3, [r3, #8]
    6804:	fa02 f303 	lsl.w	r3, r2, r3
    6808:	9a02      	ldr	r2, [sp, #8]
    680a:	4313      	orrs	r3, r2
    680c:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    680e:	9b01      	ldr	r3, [sp, #4]
    6810:	681b      	ldr	r3, [r3, #0]
    6812:	9a02      	ldr	r2, [sp, #8]
    6814:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6818:	f00e fa36 	bl	14c88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    681c:	9b04      	ldr	r3, [sp, #16]
    681e:	2b01      	cmp	r3, #1
    6820:	d16d      	bne.n	68fe <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6822:	9b01      	ldr	r3, [sp, #4]
    6824:	695b      	ldr	r3, [r3, #20]
    6826:	2b02      	cmp	r3, #2
    6828:	d138      	bne.n	689c <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    682a:	9b01      	ldr	r3, [sp, #4]
    682c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6830:	2b01      	cmp	r3, #1
    6832:	d10f      	bne.n	6854 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6834:	f00e fa4e 	bl	14cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6838:	9b01      	ldr	r3, [sp, #4]
    683a:	685b      	ldr	r3, [r3, #4]
    683c:	6859      	ldr	r1, [r3, #4]
    683e:	9b01      	ldr	r3, [sp, #4]
    6840:	689b      	ldr	r3, [r3, #8]
    6842:	2201      	movs	r2, #1
    6844:	409a      	lsls	r2, r3
    6846:	9b01      	ldr	r3, [sp, #4]
    6848:	685b      	ldr	r3, [r3, #4]
    684a:	430a      	orrs	r2, r1
    684c:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    684e:	f00e fa6d 	bl	14d2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6852:	e013      	b.n	687c <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6854:	9b01      	ldr	r3, [sp, #4]
    6856:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    685a:	2b00      	cmp	r3, #0
    685c:	d10e      	bne.n	687c <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    685e:	f00e fa8b 	bl	14d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6862:	9b01      	ldr	r3, [sp, #4]
    6864:	685b      	ldr	r3, [r3, #4]
    6866:	6899      	ldr	r1, [r3, #8]
    6868:	9b01      	ldr	r3, [sp, #4]
    686a:	689b      	ldr	r3, [r3, #8]
    686c:	2201      	movs	r2, #1
    686e:	409a      	lsls	r2, r3
    6870:	9b01      	ldr	r3, [sp, #4]
    6872:	685b      	ldr	r3, [r3, #4]
    6874:	430a      	orrs	r2, r1
    6876:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6878:	f00e faaa 	bl	14dd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    687c:	f00e face 	bl	14e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6880:	9b01      	ldr	r3, [sp, #4]
    6882:	685b      	ldr	r3, [r3, #4]
    6884:	6959      	ldr	r1, [r3, #20]
    6886:	9b01      	ldr	r3, [sp, #4]
    6888:	689b      	ldr	r3, [r3, #8]
    688a:	2201      	movs	r2, #1
    688c:	409a      	lsls	r2, r3
    688e:	9b01      	ldr	r3, [sp, #4]
    6890:	685b      	ldr	r3, [r3, #4]
    6892:	430a      	orrs	r2, r1
    6894:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6896:	f00e faed 	bl	14e74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    689a:	e030      	b.n	68fe <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    689c:	f00e fabe 	bl	14e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    68a0:	9b01      	ldr	r3, [sp, #4]
    68a2:	685b      	ldr	r3, [r3, #4]
    68a4:	6959      	ldr	r1, [r3, #20]
    68a6:	9b01      	ldr	r3, [sp, #4]
    68a8:	689b      	ldr	r3, [r3, #8]
    68aa:	2201      	movs	r2, #1
    68ac:	fa02 f303 	lsl.w	r3, r2, r3
    68b0:	43da      	mvns	r2, r3
    68b2:	9b01      	ldr	r3, [sp, #4]
    68b4:	685b      	ldr	r3, [r3, #4]
    68b6:	400a      	ands	r2, r1
    68b8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    68ba:	f00e fadb 	bl	14e74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    68be:	f00e faff 	bl	14ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    68c2:	9b01      	ldr	r3, [sp, #4]
    68c4:	685b      	ldr	r3, [r3, #4]
    68c6:	6999      	ldr	r1, [r3, #24]
    68c8:	9b01      	ldr	r3, [sp, #4]
    68ca:	689b      	ldr	r3, [r3, #8]
    68cc:	2201      	movs	r2, #1
    68ce:	fa02 f303 	lsl.w	r3, r2, r3
    68d2:	43da      	mvns	r2, r3
    68d4:	9b01      	ldr	r3, [sp, #4]
    68d6:	685b      	ldr	r3, [r3, #4]
    68d8:	400a      	ands	r2, r1
    68da:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    68dc:	9b01      	ldr	r3, [sp, #4]
    68de:	695b      	ldr	r3, [r3, #20]
    68e0:	2b03      	cmp	r3, #3
    68e2:	d10a      	bne.n	68fa <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    68e4:	9b01      	ldr	r3, [sp, #4]
    68e6:	685b      	ldr	r3, [r3, #4]
    68e8:	6999      	ldr	r1, [r3, #24]
    68ea:	9b01      	ldr	r3, [sp, #4]
    68ec:	689b      	ldr	r3, [r3, #8]
    68ee:	2201      	movs	r2, #1
    68f0:	409a      	lsls	r2, r3
    68f2:	9b01      	ldr	r3, [sp, #4]
    68f4:	685b      	ldr	r3, [r3, #4]
    68f6:	430a      	orrs	r2, r1
    68f8:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    68fa:	f00e fb0d 	bl	14f18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    68fe:	9b01      	ldr	r3, [sp, #4]
    6900:	681b      	ldr	r3, [r3, #0]
    6902:	9a01      	ldr	r2, [sp, #4]
    6904:	6892      	ldr	r2, [r2, #8]
    6906:	9905      	ldr	r1, [sp, #20]
    6908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    690c:	bf00      	nop
    690e:	b007      	add	sp, #28
    6910:	f85d fb04 	ldr.w	pc, [sp], #4

00006914 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6914:	b500      	push	{lr}
    6916:	b085      	sub	sp, #20
    6918:	9001      	str	r0, [sp, #4]
    691a:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    691c:	2300      	movs	r3, #0
    691e:	9303      	str	r3, [sp, #12]
    6920:	e00d      	b.n	693e <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6922:	9a03      	ldr	r2, [sp, #12]
    6924:	4613      	mov	r3, r2
    6926:	009b      	lsls	r3, r3, #2
    6928:	4413      	add	r3, r2
    692a:	00db      	lsls	r3, r3, #3
    692c:	461a      	mov	r2, r3
    692e:	9b00      	ldr	r3, [sp, #0]
    6930:	4413      	add	r3, r2
    6932:	4618      	mov	r0, r3
    6934:	f7ff ff06 	bl	6744 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6938:	9b03      	ldr	r3, [sp, #12]
    693a:	3301      	adds	r3, #1
    693c:	9303      	str	r3, [sp, #12]
    693e:	9a03      	ldr	r2, [sp, #12]
    6940:	9b01      	ldr	r3, [sp, #4]
    6942:	429a      	cmp	r2, r3
    6944:	d3ed      	bcc.n	6922 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6946:	2300      	movs	r3, #0
}
    6948:	4618      	mov	r0, r3
    694a:	b005      	add	sp, #20
    694c:	f85d fb04 	ldr.w	pc, [sp], #4

00006950 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6950:	b500      	push	{lr}
    6952:	b087      	sub	sp, #28
    6954:	9003      	str	r0, [sp, #12]
    6956:	9102      	str	r1, [sp, #8]
    6958:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    695a:	9a01      	ldr	r2, [sp, #4]
    695c:	9902      	ldr	r1, [sp, #8]
    695e:	9803      	ldr	r0, [sp, #12]
    6960:	f7ff febc 	bl	66dc <Port_Ci_Port_Ip_ConfigureInterleave>
    6964:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6966:	f00e fb4f 	bl	15008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    696a:	9b03      	ldr	r3, [sp, #12]
    696c:	9a02      	ldr	r2, [sp, #8]
    696e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6972:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6974:	9b04      	ldr	r3, [sp, #16]
    6976:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    697a:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    697c:	9b05      	ldr	r3, [sp, #20]
    697e:	021b      	lsls	r3, r3, #8
    6980:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6984:	9a04      	ldr	r2, [sp, #16]
    6986:	4313      	orrs	r3, r2
    6988:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    698a:	9b03      	ldr	r3, [sp, #12]
    698c:	9a02      	ldr	r2, [sp, #8]
    698e:	9904      	ldr	r1, [sp, #16]
    6990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6994:	f00e fb64 	bl	15060 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6998:	bf00      	nop
    699a:	b007      	add	sp, #28
    699c:	f85d fb04 	ldr.w	pc, [sp], #4

000069a0 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    69a0:	b500      	push	{lr}
    69a2:	b083      	sub	sp, #12
    69a4:	9001      	str	r0, [sp, #4]
    69a6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    69a8:	f00e fb80 	bl	150ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    69ac:	9b01      	ldr	r3, [sp, #4]
    69ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    69b2:	2101      	movs	r1, #1
    69b4:	9b00      	ldr	r3, [sp, #0]
    69b6:	fa01 f303 	lsl.w	r3, r1, r3
    69ba:	431a      	orrs	r2, r3
    69bc:	9b01      	ldr	r3, [sp, #4]
    69be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    69c2:	f00e fb9f 	bl	15104 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    69c6:	bf00      	nop
    69c8:	b003      	add	sp, #12
    69ca:	f85d fb04 	ldr.w	pc, [sp], #4

000069ce <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    69ce:	b500      	push	{lr}
    69d0:	b083      	sub	sp, #12
    69d2:	9001      	str	r0, [sp, #4]
    69d4:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    69d6:	f00e fbbb 	bl	15150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    69da:	9b01      	ldr	r3, [sp, #4]
    69dc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    69e0:	2101      	movs	r1, #1
    69e2:	9b00      	ldr	r3, [sp, #0]
    69e4:	fa01 f303 	lsl.w	r3, r1, r3
    69e8:	43db      	mvns	r3, r3
    69ea:	401a      	ands	r2, r3
    69ec:	9b01      	ldr	r3, [sp, #4]
    69ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    69f2:	f00e fbd9 	bl	151a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    69f6:	bf00      	nop
    69f8:	b003      	add	sp, #12
    69fa:	f85d fb04 	ldr.w	pc, [sp], #4

000069fe <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    69fe:	b082      	sub	sp, #8
    6a00:	9001      	str	r0, [sp, #4]
    6a02:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6a04:	9b00      	ldr	r3, [sp, #0]
    6a06:	785b      	ldrb	r3, [r3, #1]
    6a08:	f003 0201 	and.w	r2, r3, #1
    6a0c:	9b01      	ldr	r3, [sp, #4]
    6a0e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6a12:	9b00      	ldr	r3, [sp, #0]
    6a14:	789b      	ldrb	r3, [r3, #2]
    6a16:	f003 021f 	and.w	r2, r3, #31
    6a1a:	9b01      	ldr	r3, [sp, #4]
    6a1c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6a20:	bf00      	nop
    6a22:	b002      	add	sp, #8
    6a24:	4770      	bx	lr

00006a26 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6a26:	b086      	sub	sp, #24
    6a28:	9003      	str	r0, [sp, #12]
    6a2a:	9301      	str	r3, [sp, #4]
    6a2c:	460b      	mov	r3, r1
    6a2e:	f8ad 300a 	strh.w	r3, [sp, #10]
    6a32:	4613      	mov	r3, r2
    6a34:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6a38:	2300      	movs	r3, #0
    6a3a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6a3e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a42:	f043 0301 	orr.w	r3, r3, #1
    6a46:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6a4a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a4e:	f043 0302 	orr.w	r3, r3, #2
    6a52:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6a56:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a5a:	f043 0310 	orr.w	r3, r3, #16
    6a5e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6a62:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6a6a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6a6e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6a76:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6a7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6a86:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6a8a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6a8e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6a92:	4013      	ands	r3, r2
    6a94:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6a98:	9b01      	ldr	r3, [sp, #4]
    6a9a:	2b00      	cmp	r3, #0
    6a9c:	d003      	beq.n	6aa6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6a9e:	9b01      	ldr	r3, [sp, #4]
    6aa0:	2b01      	cmp	r3, #1
    6aa2:	d00a      	beq.n	6aba <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6aa4:	e013      	b.n	6ace <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6aa6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6aaa:	041a      	lsls	r2, r3, #16
    6aac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ab0:	431a      	orrs	r2, r3
    6ab2:	9b03      	ldr	r3, [sp, #12]
    6ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6ab8:	e009      	b.n	6ace <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6aba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6abe:	041a      	lsls	r2, r3, #16
    6ac0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ac4:	431a      	orrs	r2, r3
    6ac6:	9b03      	ldr	r3, [sp, #12]
    6ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6acc:	bf00      	nop
    }
}
    6ace:	bf00      	nop
    6ad0:	b006      	add	sp, #24
    6ad2:	4770      	bx	lr

00006ad4 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6ad4:	b500      	push	{lr}
    6ad6:	b087      	sub	sp, #28
    6ad8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6ada:	9b01      	ldr	r3, [sp, #4]
    6adc:	885b      	ldrh	r3, [r3, #2]
    6ade:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6ae2:	9b01      	ldr	r3, [sp, #4]
    6ae4:	689b      	ldr	r3, [r3, #8]
    6ae6:	7a1b      	ldrb	r3, [r3, #8]
    6ae8:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6aec:	9b01      	ldr	r3, [sp, #4]
    6aee:	689b      	ldr	r3, [r3, #8]
    6af0:	681b      	ldr	r3, [r3, #0]
    6af2:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6af4:	9b01      	ldr	r3, [sp, #4]
    6af6:	689b      	ldr	r3, [r3, #8]
    6af8:	685b      	ldr	r3, [r3, #4]
    6afa:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6afc:	2300      	movs	r3, #0
    6afe:	f8ad 3016 	strh.w	r3, [sp, #22]
    6b02:	e111      	b.n	6d28 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6b04:	9b02      	ldr	r3, [sp, #8]
    6b06:	2b02      	cmp	r3, #2
    6b08:	d169      	bne.n	6bde <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6b0a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6b0e:	2b01      	cmp	r3, #1
    6b10:	d11a      	bne.n	6b48 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b12:	9b01      	ldr	r3, [sp, #4]
    6b14:	685a      	ldr	r2, [r3, #4]
    6b16:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b1a:	005b      	lsls	r3, r3, #1
    6b1c:	4413      	add	r3, r2
    6b1e:	881b      	ldrh	r3, [r3, #0]
    6b20:	f003 021f 	and.w	r2, r3, #31
    6b24:	9b01      	ldr	r3, [sp, #4]
    6b26:	6859      	ldr	r1, [r3, #4]
    6b28:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b2c:	005b      	lsls	r3, r3, #1
    6b2e:	440b      	add	r3, r1
    6b30:	881b      	ldrh	r3, [r3, #0]
    6b32:	095b      	lsrs	r3, r3, #5
    6b34:	b29b      	uxth	r3, r3
    6b36:	4619      	mov	r1, r3
    6b38:	4b81      	ldr	r3, [pc, #516]	; (6d40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6b3e:	2101      	movs	r1, #1
    6b40:	fa01 f202 	lsl.w	r2, r1, r2
    6b44:	605a      	str	r2, [r3, #4]
    6b46:	e01d      	b.n	6b84 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6b48:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6b4c:	2b00      	cmp	r3, #0
    6b4e:	d119      	bne.n	6b84 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b50:	9b01      	ldr	r3, [sp, #4]
    6b52:	685a      	ldr	r2, [r3, #4]
    6b54:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b58:	005b      	lsls	r3, r3, #1
    6b5a:	4413      	add	r3, r2
    6b5c:	881b      	ldrh	r3, [r3, #0]
    6b5e:	f003 021f 	and.w	r2, r3, #31
    6b62:	9b01      	ldr	r3, [sp, #4]
    6b64:	6859      	ldr	r1, [r3, #4]
    6b66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b6a:	005b      	lsls	r3, r3, #1
    6b6c:	440b      	add	r3, r1
    6b6e:	881b      	ldrh	r3, [r3, #0]
    6b70:	095b      	lsrs	r3, r3, #5
    6b72:	b29b      	uxth	r3, r3
    6b74:	4619      	mov	r1, r3
    6b76:	4b72      	ldr	r3, [pc, #456]	; (6d40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6b7c:	2101      	movs	r1, #1
    6b7e:	fa01 f202 	lsl.w	r2, r1, r2
    6b82:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6b84:	f00e fb36 	bl	151f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b88:	9b01      	ldr	r3, [sp, #4]
    6b8a:	685a      	ldr	r2, [r3, #4]
    6b8c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b90:	005b      	lsls	r3, r3, #1
    6b92:	4413      	add	r3, r2
    6b94:	881b      	ldrh	r3, [r3, #0]
    6b96:	095b      	lsrs	r3, r3, #5
    6b98:	b29b      	uxth	r3, r3
    6b9a:	461a      	mov	r2, r3
    6b9c:	4b68      	ldr	r3, [pc, #416]	; (6d40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ba2:	6959      	ldr	r1, [r3, #20]
    6ba4:	9b01      	ldr	r3, [sp, #4]
    6ba6:	685a      	ldr	r2, [r3, #4]
    6ba8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bac:	005b      	lsls	r3, r3, #1
    6bae:	4413      	add	r3, r2
    6bb0:	881b      	ldrh	r3, [r3, #0]
    6bb2:	f003 031f 	and.w	r3, r3, #31
    6bb6:	2201      	movs	r2, #1
    6bb8:	409a      	lsls	r2, r3
    6bba:	9b01      	ldr	r3, [sp, #4]
    6bbc:	6858      	ldr	r0, [r3, #4]
    6bbe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bc2:	005b      	lsls	r3, r3, #1
    6bc4:	4403      	add	r3, r0
    6bc6:	881b      	ldrh	r3, [r3, #0]
    6bc8:	095b      	lsrs	r3, r3, #5
    6bca:	b29b      	uxth	r3, r3
    6bcc:	4618      	mov	r0, r3
    6bce:	4b5c      	ldr	r3, [pc, #368]	; (6d40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bd0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6bd4:	430a      	orrs	r2, r1
    6bd6:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6bd8:	f00e fb38 	bl	1524c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6bdc:	e086      	b.n	6cec <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6bde:	f00e fb09 	bl	151f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6be2:	9b01      	ldr	r3, [sp, #4]
    6be4:	685a      	ldr	r2, [r3, #4]
    6be6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bea:	005b      	lsls	r3, r3, #1
    6bec:	4413      	add	r3, r2
    6bee:	881b      	ldrh	r3, [r3, #0]
    6bf0:	095b      	lsrs	r3, r3, #5
    6bf2:	b29b      	uxth	r3, r3
    6bf4:	461a      	mov	r2, r3
    6bf6:	4b52      	ldr	r3, [pc, #328]	; (6d40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6bfc:	6959      	ldr	r1, [r3, #20]
    6bfe:	9b01      	ldr	r3, [sp, #4]
    6c00:	685a      	ldr	r2, [r3, #4]
    6c02:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c06:	005b      	lsls	r3, r3, #1
    6c08:	4413      	add	r3, r2
    6c0a:	881b      	ldrh	r3, [r3, #0]
    6c0c:	f003 031f 	and.w	r3, r3, #31
    6c10:	2201      	movs	r2, #1
    6c12:	fa02 f303 	lsl.w	r3, r2, r3
    6c16:	43da      	mvns	r2, r3
    6c18:	9b01      	ldr	r3, [sp, #4]
    6c1a:	6858      	ldr	r0, [r3, #4]
    6c1c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c20:	005b      	lsls	r3, r3, #1
    6c22:	4403      	add	r3, r0
    6c24:	881b      	ldrh	r3, [r3, #0]
    6c26:	095b      	lsrs	r3, r3, #5
    6c28:	b29b      	uxth	r3, r3
    6c2a:	4618      	mov	r0, r3
    6c2c:	4b44      	ldr	r3, [pc, #272]	; (6d40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c32:	400a      	ands	r2, r1
    6c34:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6c36:	f00e fb09 	bl	1524c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6c3a:	f00e fb2d 	bl	15298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6c3e:	9b01      	ldr	r3, [sp, #4]
    6c40:	685a      	ldr	r2, [r3, #4]
    6c42:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c46:	005b      	lsls	r3, r3, #1
    6c48:	4413      	add	r3, r2
    6c4a:	881b      	ldrh	r3, [r3, #0]
    6c4c:	095b      	lsrs	r3, r3, #5
    6c4e:	b29b      	uxth	r3, r3
    6c50:	461a      	mov	r2, r3
    6c52:	4b3b      	ldr	r3, [pc, #236]	; (6d40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c58:	6999      	ldr	r1, [r3, #24]
    6c5a:	9b01      	ldr	r3, [sp, #4]
    6c5c:	685a      	ldr	r2, [r3, #4]
    6c5e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c62:	005b      	lsls	r3, r3, #1
    6c64:	4413      	add	r3, r2
    6c66:	881b      	ldrh	r3, [r3, #0]
    6c68:	f003 031f 	and.w	r3, r3, #31
    6c6c:	2201      	movs	r2, #1
    6c6e:	fa02 f303 	lsl.w	r3, r2, r3
    6c72:	43da      	mvns	r2, r3
    6c74:	9b01      	ldr	r3, [sp, #4]
    6c76:	6858      	ldr	r0, [r3, #4]
    6c78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c7c:	005b      	lsls	r3, r3, #1
    6c7e:	4403      	add	r3, r0
    6c80:	881b      	ldrh	r3, [r3, #0]
    6c82:	095b      	lsrs	r3, r3, #5
    6c84:	b29b      	uxth	r3, r3
    6c86:	4618      	mov	r0, r3
    6c88:	4b2d      	ldr	r3, [pc, #180]	; (6d40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c8e:	400a      	ands	r2, r1
    6c90:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6c92:	9b02      	ldr	r3, [sp, #8]
    6c94:	2b03      	cmp	r3, #3
    6c96:	d127      	bne.n	6ce8 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6c98:	9b01      	ldr	r3, [sp, #4]
    6c9a:	685a      	ldr	r2, [r3, #4]
    6c9c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ca0:	005b      	lsls	r3, r3, #1
    6ca2:	4413      	add	r3, r2
    6ca4:	881b      	ldrh	r3, [r3, #0]
    6ca6:	095b      	lsrs	r3, r3, #5
    6ca8:	b29b      	uxth	r3, r3
    6caa:	461a      	mov	r2, r3
    6cac:	4b24      	ldr	r3, [pc, #144]	; (6d40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6cb2:	6999      	ldr	r1, [r3, #24]
    6cb4:	9b01      	ldr	r3, [sp, #4]
    6cb6:	685a      	ldr	r2, [r3, #4]
    6cb8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cbc:	005b      	lsls	r3, r3, #1
    6cbe:	4413      	add	r3, r2
    6cc0:	881b      	ldrh	r3, [r3, #0]
    6cc2:	f003 031f 	and.w	r3, r3, #31
    6cc6:	2201      	movs	r2, #1
    6cc8:	409a      	lsls	r2, r3
    6cca:	9b01      	ldr	r3, [sp, #4]
    6ccc:	6858      	ldr	r0, [r3, #4]
    6cce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cd2:	005b      	lsls	r3, r3, #1
    6cd4:	4403      	add	r3, r0
    6cd6:	881b      	ldrh	r3, [r3, #0]
    6cd8:	095b      	lsrs	r3, r3, #5
    6cda:	b29b      	uxth	r3, r3
    6cdc:	4618      	mov	r0, r3
    6cde:	4b18      	ldr	r3, [pc, #96]	; (6d40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6ce0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6ce4:	430a      	orrs	r2, r1
    6ce6:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6ce8:	f00e fb02 	bl	152f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6cec:	9b01      	ldr	r3, [sp, #4]
    6cee:	685a      	ldr	r2, [r3, #4]
    6cf0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cf4:	005b      	lsls	r3, r3, #1
    6cf6:	4413      	add	r3, r2
    6cf8:	881b      	ldrh	r3, [r3, #0]
    6cfa:	095b      	lsrs	r3, r3, #5
    6cfc:	b29b      	uxth	r3, r3
    6cfe:	461a      	mov	r2, r3
    6d00:	4b10      	ldr	r3, [pc, #64]	; (6d44 <Port_Ipw_Init_UnusedPins+0x270>)
    6d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6d06:	9a01      	ldr	r2, [sp, #4]
    6d08:	6851      	ldr	r1, [r2, #4]
    6d0a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6d0e:	0052      	lsls	r2, r2, #1
    6d10:	440a      	add	r2, r1
    6d12:	8812      	ldrh	r2, [r2, #0]
    6d14:	f002 021f 	and.w	r2, r2, #31
    6d18:	9903      	ldr	r1, [sp, #12]
    6d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6d1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d22:	3301      	adds	r3, #1
    6d24:	f8ad 3016 	strh.w	r3, [sp, #22]
    6d28:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6d2c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6d30:	429a      	cmp	r2, r3
    6d32:	f4ff aee7 	bcc.w	6b04 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6d36:	bf00      	nop
    6d38:	bf00      	nop
    6d3a:	b007      	add	sp, #28
    6d3c:	f85d fb04 	ldr.w	pc, [sp], #4
    6d40:	00018574 	.word	0x00018574
    6d44:	00018560 	.word	0x00018560

00006d48 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6d48:	b500      	push	{lr}
    6d4a:	b085      	sub	sp, #20
    6d4c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6d4e:	9b01      	ldr	r3, [sp, #4]
    6d50:	7c1b      	ldrb	r3, [r3, #16]
    6d52:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6d56:	2300      	movs	r3, #0
    6d58:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d5c:	e035      	b.n	6dca <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6d5e:	9b01      	ldr	r3, [sp, #4]
    6d60:	695a      	ldr	r2, [r3, #20]
    6d62:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d66:	00db      	lsls	r3, r3, #3
    6d68:	4413      	add	r3, r2
    6d6a:	781b      	ldrb	r3, [r3, #0]
    6d6c:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6d70:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6d74:	4a29      	ldr	r2, [pc, #164]	; (6e1c <Port_Ipw_Init+0xd4>)
    6d76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6d7a:	9b01      	ldr	r3, [sp, #4]
    6d7c:	695a      	ldr	r2, [r3, #20]
    6d7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d82:	00db      	lsls	r3, r3, #3
    6d84:	4413      	add	r3, r2
    6d86:	4619      	mov	r1, r3
    6d88:	f7ff fe39 	bl	69fe <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6d8c:	f00e fc1e 	bl	155cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6d90:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6d94:	4a21      	ldr	r2, [pc, #132]	; (6e1c <Port_Ipw_Init+0xd4>)
    6d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d9a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6d9e:	9b01      	ldr	r3, [sp, #4]
    6da0:	695a      	ldr	r2, [r3, #20]
    6da2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6da6:	00db      	lsls	r3, r3, #3
    6da8:	4413      	add	r3, r2
    6daa:	685a      	ldr	r2, [r3, #4]
    6dac:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6db0:	481a      	ldr	r0, [pc, #104]	; (6e1c <Port_Ipw_Init+0xd4>)
    6db2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6db6:	430a      	orrs	r2, r1
    6db8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6dbc:	f00e fc32 	bl	15624 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6dc0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6dc4:	3301      	adds	r3, #1
    6dc6:	f8ad 300e 	strh.w	r3, [sp, #14]
    6dca:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6dce:	b29b      	uxth	r3, r3
    6dd0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6dd4:	429a      	cmp	r2, r3
    6dd6:	d3c2      	bcc.n	6d5e <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6dd8:	9b01      	ldr	r3, [sp, #4]
    6dda:	6a1b      	ldr	r3, [r3, #32]
    6ddc:	4619      	mov	r1, r3
    6dde:	2014      	movs	r0, #20
    6de0:	f7ff fd98 	bl	6914 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6de4:	9801      	ldr	r0, [sp, #4]
    6de6:	f7ff fe75 	bl	6ad4 <Port_Ipw_Init_UnusedPins>
     (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
    )
    /* Port_Ipw_au16GpioDirChangeability is only used by Port_Ci_Port_Ip_SetPinDirection, Port_Ci_Port_Ip_Set2PinsDirection
       and Port_Ci_Port_Ip_SetPinMode functions */
    /* Initialize the Array with Change Direction Flags for GPIO */
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6dea:	2300      	movs	r3, #0
    6dec:	f8ad 300e 	strh.w	r3, [sp, #14]
    6df0:	e00a      	b.n	6e08 <Port_Ipw_Init+0xc0>
    {
        Port_Ipw_au16GpioDirChangeability[u16PinIndex] = (uint16)0UL;
    6df2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6df6:	4a0a      	ldr	r2, [pc, #40]	; (6e20 <Port_Ipw_Init+0xd8>)
    6df8:	2100      	movs	r1, #0
    6dfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6dfe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e02:	3301      	adds	r3, #1
    6e04:	f8ad 300e 	strh.w	r3, [sp, #14]
    6e08:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e0c:	2b09      	cmp	r3, #9
    6e0e:	d9f0      	bls.n	6df2 <Port_Ipw_Init+0xaa>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6e10:	bf00      	nop
    6e12:	bf00      	nop
    6e14:	b005      	add	sp, #20
    6e16:	f85d fb04 	ldr.w	pc, [sp], #4
    6e1a:	bf00      	nop
    6e1c:	00018560 	.word	0x00018560
    6e20:	1fff8cec 	.word	0x1fff8cec

00006e24 <Port_Ipw_SetPinDirection>:
(
    Port_PinType            PinIndex,
    Port_PinDirectionType   eDirection,
    const Port_ConfigType * pConfigPtr
)
{
    6e24:	b500      	push	{lr}
    6e26:	b087      	sub	sp, #28
    6e28:	9003      	str	r0, [sp, #12]
    6e2a:	9102      	str	r1, [sp, #8]
    6e2c:	9201      	str	r2, [sp, #4]
    /* Point to the Port Pin PCR register address */
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    6e2e:	9b01      	ldr	r3, [sp, #4]
    6e30:	68d9      	ldr	r1, [r3, #12]
    6e32:	9a03      	ldr	r2, [sp, #12]
    6e34:	4613      	mov	r3, r2
    6e36:	009b      	lsls	r3, r3, #2
    6e38:	4413      	add	r3, r2
    6e3a:	009b      	lsls	r3, r3, #2
    6e3c:	440b      	add	r3, r1
    6e3e:	881b      	ldrh	r3, [r3, #0]
    6e40:	f8ad 3014 	strh.w	r3, [sp, #20]
    /* Return value */
    Std_ReturnType PinDirError             = (Std_ReturnType)E_OK;
    6e44:	2300      	movs	r3, #0
    6e46:	f88d 3017 	strb.w	r3, [sp, #23]

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    6e4a:	2300      	movs	r3, #0
    6e4c:	f88d 3013 	strb.w	r3, [sp, #19]

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    6e50:	9b01      	ldr	r3, [sp, #4]
    6e52:	881b      	ldrh	r3, [r3, #0]
    6e54:	461a      	mov	r2, r3
    6e56:	9b03      	ldr	r3, [sp, #12]
    6e58:	4293      	cmp	r3, r2
    6e5a:	d306      	bcc.n	6e6a <Port_Ipw_SetPinDirection+0x46>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_PIN);
    6e5c:	230a      	movs	r3, #10
    6e5e:	2201      	movs	r2, #1
    6e60:	2100      	movs	r1, #0
    6e62:	207c      	movs	r0, #124	; 0x7c
    6e64:	f00f ff36 	bl	16cd4 <Det_ReportError>
    6e68:	e0c9      	b.n	6ffe <Port_Ipw_SetPinDirection+0x1da>
    }
    /* Check port pin validity */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    6e6a:	9b01      	ldr	r3, [sp, #4]
    6e6c:	699a      	ldr	r2, [r3, #24]
    6e6e:	9b03      	ldr	r3, [sp, #12]
    6e70:	009b      	lsls	r3, r3, #2
    6e72:	4413      	add	r3, r2
    6e74:	681a      	ldr	r2, [r3, #0]
    6e76:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6e7a:	2101      	movs	r1, #1
    6e7c:	fa01 f303 	lsl.w	r3, r1, r3
    6e80:	401a      	ands	r2, r3
    6e82:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6e86:	fa22 f303 	lsr.w	r3, r2, r3
    6e8a:	2b01      	cmp	r3, #1
    6e8c:	d006      	beq.n	6e9c <Port_Ipw_SetPinDirection+0x78>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    6e8e:	23f0      	movs	r3, #240	; 0xf0
    6e90:	2201      	movs	r2, #1
    6e92:	2100      	movs	r1, #0
    6e94:	207c      	movs	r0, #124	; 0x7c
    6e96:	f00f ff1d 	bl	16cd4 <Det_ReportError>
    6e9a:	e0b0      	b.n	6ffe <Port_Ipw_SetPinDirection+0x1da>
    }
    else
    {
        /* Bit Offset and Table value for change direction flag word */
        uint8 u8PinDescBitOffset       = (uint8)(Pin & PORT_CI_BIT_OFFSET_MASK_U8);
    6e9c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ea0:	b2db      	uxtb	r3, r3
    6ea2:	f003 030f 	and.w	r3, r3, #15
    6ea6:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Number of block 16 */
        uint16 u16PinChangeDirFlagWord  = Port_Ipw_au16GpioDirChangeability[(uint8)(Pin >> 4)];
    6eaa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6eae:	091b      	lsrs	r3, r3, #4
    6eb0:	b29b      	uxth	r3, r3
    6eb2:	b2db      	uxtb	r3, r3
    6eb4:	461a      	mov	r2, r3
    6eb6:	4b55      	ldr	r3, [pc, #340]	; (700c <Port_Ipw_SetPinDirection+0x1e8>)
    6eb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6ebc:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* Check the Direction changeability option */
        if ((TRUE == pConfigPtr->pUsedPadConfig[PinIndex].bDC) || ((uint16)0 != (u16PinChangeDirFlagWord & (uint16)(1UL << u8PinDescBitOffset))))
    6ec0:	9b01      	ldr	r3, [sp, #4]
    6ec2:	68d9      	ldr	r1, [r3, #12]
    6ec4:	9a03      	ldr	r2, [sp, #12]
    6ec6:	4613      	mov	r3, r2
    6ec8:	009b      	lsls	r3, r3, #2
    6eca:	4413      	add	r3, r2
    6ecc:	009b      	lsls	r3, r3, #2
    6ece:	440b      	add	r3, r1
    6ed0:	7c5b      	ldrb	r3, [r3, #17]
    6ed2:	2b00      	cmp	r3, #0
    6ed4:	d10c      	bne.n	6ef0 <Port_Ipw_SetPinDirection+0xcc>
    6ed6:	f89d 3012 	ldrb.w	r3, [sp, #18]
    6eda:	2201      	movs	r2, #1
    6edc:	fa02 f303 	lsl.w	r3, r2, r3
    6ee0:	b29a      	uxth	r2, r3
    6ee2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    6ee6:	4013      	ands	r3, r2
    6ee8:	b29b      	uxth	r3, r3
    6eea:	2b00      	cmp	r3, #0
    6eec:	f000 8082 	beq.w	6ff4 <Port_Ipw_SetPinDirection+0x1d0>
        {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
            /* Configures Port Pin as Output */
            if (PORT_PIN_OUT == eDirection)
    6ef0:	9b02      	ldr	r3, [sp, #8]
    6ef2:	2b02      	cmp	r3, #2
    6ef4:	d11d      	bne.n	6f32 <Port_Ipw_SetPinDirection+0x10e>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6ef6:	f00e fbbb 	bl	15670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR |= (uint32)(1UL << GPIO_CHANNEL_U32(Pin));
    6efa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6efe:	095b      	lsrs	r3, r3, #5
    6f00:	b29b      	uxth	r3, r3
    6f02:	461a      	mov	r2, r3
    6f04:	4b42      	ldr	r3, [pc, #264]	; (7010 <Port_Ipw_SetPinDirection+0x1ec>)
    6f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f0a:	6959      	ldr	r1, [r3, #20]
    6f0c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f10:	f003 031f 	and.w	r3, r3, #31
    6f14:	2201      	movs	r2, #1
    6f16:	409a      	lsls	r2, r3
    6f18:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f1c:	095b      	lsrs	r3, r3, #5
    6f1e:	b29b      	uxth	r3, r3
    6f20:	4618      	mov	r0, r3
    6f22:	4b3b      	ldr	r3, [pc, #236]	; (7010 <Port_Ipw_SetPinDirection+0x1ec>)
    6f24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f28:	430a      	orrs	r2, r1
    6f2a:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6f2c:	f00e fbcc 	bl	156c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>
            if (PORT_PIN_OUT == eDirection)
    6f30:	e064      	b.n	6ffc <Port_Ipw_SetPinDirection+0x1d8>
            }
            /* Configures Port Pin as Input or High-Z*/
            else if ((PORT_PIN_IN == eDirection) || (PORT_PIN_HIGH_Z == eDirection))
    6f32:	9b02      	ldr	r3, [sp, #8]
    6f34:	2b01      	cmp	r3, #1
    6f36:	d002      	beq.n	6f3e <Port_Ipw_SetPinDirection+0x11a>
    6f38:	9b02      	ldr	r3, [sp, #8]
    6f3a:	2b03      	cmp	r3, #3
    6f3c:	d15e      	bne.n	6ffc <Port_Ipw_SetPinDirection+0x1d8>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6f3e:	f00e fb97 	bl	15670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6f42:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f46:	095b      	lsrs	r3, r3, #5
    6f48:	b29b      	uxth	r3, r3
    6f4a:	461a      	mov	r2, r3
    6f4c:	4b30      	ldr	r3, [pc, #192]	; (7010 <Port_Ipw_SetPinDirection+0x1ec>)
    6f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f52:	6959      	ldr	r1, [r3, #20]
    6f54:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f58:	f003 031f 	and.w	r3, r3, #31
    6f5c:	2201      	movs	r2, #1
    6f5e:	fa02 f303 	lsl.w	r3, r2, r3
    6f62:	43da      	mvns	r2, r3
    6f64:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f68:	095b      	lsrs	r3, r3, #5
    6f6a:	b29b      	uxth	r3, r3
    6f6c:	4618      	mov	r0, r3
    6f6e:	4b28      	ldr	r3, [pc, #160]	; (7010 <Port_Ipw_SetPinDirection+0x1ec>)
    6f70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f74:	400a      	ands	r2, r1
    6f76:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6f78:	f00e fba6 	bl	156c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17();
    6f7c:	f00e fbca 	bl	15714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6f80:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f84:	095b      	lsrs	r3, r3, #5
    6f86:	b29b      	uxth	r3, r3
    6f88:	461a      	mov	r2, r3
    6f8a:	4b21      	ldr	r3, [pc, #132]	; (7010 <Port_Ipw_SetPinDirection+0x1ec>)
    6f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f90:	6999      	ldr	r1, [r3, #24]
    6f92:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f96:	f003 031f 	and.w	r3, r3, #31
    6f9a:	2201      	movs	r2, #1
    6f9c:	fa02 f303 	lsl.w	r3, r2, r3
    6fa0:	43da      	mvns	r2, r3
    6fa2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fa6:	095b      	lsrs	r3, r3, #5
    6fa8:	b29b      	uxth	r3, r3
    6faa:	4618      	mov	r0, r3
    6fac:	4b18      	ldr	r3, [pc, #96]	; (7010 <Port_Ipw_SetPinDirection+0x1ec>)
    6fae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6fb2:	400a      	ands	r2, r1
    6fb4:	619a      	str	r2, [r3, #24]

                /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                if (PORT_PIN_HIGH_Z == eDirection)
    6fb6:	9b02      	ldr	r3, [sp, #8]
    6fb8:	2b03      	cmp	r3, #3
    6fba:	d118      	bne.n	6fee <Port_Ipw_SetPinDirection+0x1ca>
                {
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR |= ((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6fbc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fc0:	095b      	lsrs	r3, r3, #5
    6fc2:	b29b      	uxth	r3, r3
    6fc4:	461a      	mov	r2, r3
    6fc6:	4b12      	ldr	r3, [pc, #72]	; (7010 <Port_Ipw_SetPinDirection+0x1ec>)
    6fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6fcc:	6999      	ldr	r1, [r3, #24]
    6fce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fd2:	f003 031f 	and.w	r3, r3, #31
    6fd6:	2201      	movs	r2, #1
    6fd8:	409a      	lsls	r2, r3
    6fda:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fde:	095b      	lsrs	r3, r3, #5
    6fe0:	b29b      	uxth	r3, r3
    6fe2:	4618      	mov	r0, r3
    6fe4:	4b0a      	ldr	r3, [pc, #40]	; (7010 <Port_Ipw_SetPinDirection+0x1ec>)
    6fe6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6fea:	430a      	orrs	r2, r1
    6fec:	619a      	str	r2, [r3, #24]
                }
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17();
    6fee:	f00e fbbd 	bl	1576c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>
            if (PORT_PIN_OUT == eDirection)
    6ff2:	e003      	b.n	6ffc <Port_Ipw_SetPinDirection+0x1d8>
#if (STD_ON == PORT_DEV_ERROR_DETECT)
        }
        /* Direction changeability is NOT supported */
        else
        {
            PinDirError = (Std_ReturnType)E_NOT_OK;
    6ff4:	2301      	movs	r3, #1
    6ff6:	f88d 3017 	strb.w	r3, [sp, #23]
    6ffa:	e000      	b.n	6ffe <Port_Ipw_SetPinDirection+0x1da>
            if (PORT_PIN_OUT == eDirection)
    6ffc:	bf00      	nop
        }
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinDirError;
    6ffe:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7002:	4618      	mov	r0, r3
    7004:	b007      	add	sp, #28
    7006:	f85d fb04 	ldr.w	pc, [sp], #4
    700a:	bf00      	nop
    700c:	1fff8cec 	.word	0x1fff8cec
    7010:	00018574 	.word	0x00018574

00007014 <Port_Ipw_SetPinMode>:
(
    Port_PinType PinIndex,
    Port_PinModeType PinMode,
    const Port_ConfigType * pConfigPtr
)
{
    7014:	b500      	push	{lr}
    7016:	b08b      	sub	sp, #44	; 0x2c
    7018:	9003      	str	r0, [sp, #12]
    701a:	460b      	mov	r3, r1
    701c:	9201      	str	r2, [sp, #4]
    701e:	f88d 300b 	strb.w	r3, [sp, #11]
    Std_ReturnType PinModeError             = (Std_ReturnType)0UL;
    7022:	2300      	movs	r3, #0
    7024:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint16 PinPad                           = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7028:	9b01      	ldr	r3, [sp, #4]
    702a:	68d9      	ldr	r1, [r3, #12]
    702c:	9a03      	ldr	r2, [sp, #12]
    702e:	4613      	mov	r3, r2
    7030:	009b      	lsls	r3, r3, #2
    7032:	4413      	add	r3, r2
    7034:	009b      	lsls	r3, r3, #2
    7036:	440b      	add	r3, r1
    7038:	881b      	ldrh	r3, [r3, #0]
    703a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Port_PinModeType PinCfgRegValue         = (Port_PinModeType)PinMode;
    703e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7042:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint16 u16PinDescBitOffset;
    /* Variable used to clear and updated PCR register */
    uint32 u32LocalPCR;
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    7046:	2300      	movs	r3, #0
    7048:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    704c:	9b01      	ldr	r3, [sp, #4]
    704e:	881b      	ldrh	r3, [r3, #0]
    7050:	461a      	mov	r2, r3
    7052:	9b03      	ldr	r3, [sp, #12]
    7054:	4293      	cmp	r3, r2
    7056:	d306      	bcc.n	7066 <Port_Ipw_SetPinMode+0x52>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_PIN);
    7058:	230a      	movs	r3, #10
    705a:	2204      	movs	r2, #4
    705c:	2100      	movs	r1, #0
    705e:	207c      	movs	r0, #124	; 0x7c
    7060:	f00f fe38 	bl	16cd4 <Det_ReportError>
    7064:	e0b3      	b.n	71ce <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check if this function was called with wrong core */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    7066:	9b01      	ldr	r3, [sp, #4]
    7068:	699a      	ldr	r2, [r3, #24]
    706a:	9b03      	ldr	r3, [sp, #12]
    706c:	009b      	lsls	r3, r3, #2
    706e:	4413      	add	r3, r2
    7070:	681a      	ldr	r2, [r3, #0]
    7072:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7076:	2101      	movs	r1, #1
    7078:	fa01 f303 	lsl.w	r3, r1, r3
    707c:	401a      	ands	r2, r3
    707e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7082:	fa22 f303 	lsr.w	r3, r2, r3
    7086:	2b01      	cmp	r3, #1
    7088:	d006      	beq.n	7098 <Port_Ipw_SetPinMode+0x84>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_CONFIG);
    708a:	23f0      	movs	r3, #240	; 0xf0
    708c:	2204      	movs	r2, #4
    708e:	2100      	movs	r1, #0
    7090:	207c      	movs	r0, #124	; 0x7c
    7092:	f00f fe1f 	bl	16cd4 <Det_ReportError>
    7096:	e09a      	b.n	71ce <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check port pin mode Unchangeable */
    else if (FALSE ==  pConfigPtr->pUsedPadConfig[PinIndex].bMC)
    7098:	9b01      	ldr	r3, [sp, #4]
    709a:	68d9      	ldr	r1, [r3, #12]
    709c:	9a03      	ldr	r2, [sp, #12]
    709e:	4613      	mov	r3, r2
    70a0:	009b      	lsls	r3, r3, #2
    70a2:	4413      	add	r3, r2
    70a4:	009b      	lsls	r3, r3, #2
    70a6:	440b      	add	r3, r1
    70a8:	7c9b      	ldrb	r3, [r3, #18]
    70aa:	f083 0301 	eor.w	r3, r3, #1
    70ae:	b2db      	uxtb	r3, r3
    70b0:	2b00      	cmp	r3, #0
    70b2:	d006      	beq.n	70c2 <Port_Ipw_SetPinMode+0xae>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_MODE_UNCHANGEABLE);
    70b4:	230e      	movs	r3, #14
    70b6:	2204      	movs	r2, #4
    70b8:	2100      	movs	r1, #0
    70ba:	207c      	movs	r0, #124	; 0x7c
    70bc:	f00f fe0a 	bl	16cd4 <Det_ReportError>
    70c0:	e085      	b.n	71ce <Port_Ipw_SetPinMode+0x1ba>
    }
    else
    {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

        if (PAD_MODE_OPTIONS_U8 <= PinMode)
    70c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    70c6:	2b07      	cmp	r3, #7
    70c8:	d903      	bls.n	70d2 <Port_Ipw_SetPinMode+0xbe>
        {
            PinModeError = PORT_E_PARAM_INVALID_MODE;
    70ca:	230d      	movs	r3, #13
    70cc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    70d0:	e07d      	b.n	71ce <Port_Ipw_SetPinMode+0x1ba>
        }
        else
        {
            Port_PinDirectionType ePadDirection = PORT_PIN_DISABLED;
    70d2:	2300      	movs	r3, #0
    70d4:	9307      	str	r3, [sp, #28]

            /* Bit offset of Pin index inside the pin description matrix */
            u16PinDescBitOffset = PinPad & PORT_MODE_BIT_OFFSET_MASK_U8;
    70d6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    70da:	f003 030f 	and.w	r3, r3, #15
    70de:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Selected word inside the pin description matrix */
            u16PinDescWord = (uint16)Port_au16PinDescription[(uint8)PinMode][PinPad >> 4U];
    70e2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    70e6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    70ea:	091b      	lsrs	r3, r3, #4
    70ec:	b29b      	uxth	r3, r3
    70ee:	4618      	mov	r0, r3
    70f0:	493a      	ldr	r1, [pc, #232]	; (71dc <Port_Ipw_SetPinMode+0x1c8>)
    70f2:	4613      	mov	r3, r2
    70f4:	009b      	lsls	r3, r3, #2
    70f6:	4413      	add	r3, r2
    70f8:	005b      	lsls	r3, r3, #1
    70fa:	4403      	add	r3, r0
    70fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7100:	f8ad 3018 	strh.w	r3, [sp, #24]

            /* Check if desired mode is valid for selected pin */
            if ((u16PinDescWord & ((uint16)1UL<<u16PinDescBitOffset)) != (uint16)0U)
    7104:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    7108:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    710c:	fa42 f303 	asr.w	r3, r2, r3
    7110:	f003 0301 	and.w	r3, r3, #1
    7114:	2b00      	cmp	r3, #0
    7116:	d057      	beq.n	71c8 <Port_Ipw_SetPinMode+0x1b4>
            {
                switch(PinMode)
    7118:	f89d 300b 	ldrb.w	r3, [sp, #11]
    711c:	2b01      	cmp	r3, #1
    711e:	d11f      	bne.n	7160 <Port_Ipw_SetPinMode+0x14c>
                {
                    case PORT_GPIO_MODE:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                        Port_Ipw_SetGpioDirChangeability(PinPad, TRUE);
    7120:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7124:	2101      	movs	r1, #1
    7126:	4618      	mov	r0, r3
    7128:	f000 f85c 	bl	71e4 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        ePadDirection = pConfigPtr->pUsedPadConfig[PinIndex].ePadDir;
    712c:	9b01      	ldr	r3, [sp, #4]
    712e:	68d9      	ldr	r1, [r3, #12]
    7130:	9a03      	ldr	r2, [sp, #12]
    7132:	4613      	mov	r3, r2
    7134:	009b      	lsls	r3, r3, #2
    7136:	4413      	add	r3, r2
    7138:	009b      	lsls	r3, r3, #2
    713a:	440b      	add	r3, r1
    713c:	68db      	ldr	r3, [r3, #12]
    713e:	9307      	str	r3, [sp, #28]
#if (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL)
                        if ((PORT_PIN_IN != ePadDirection) && (PORT_PIN_HIGH_Z != ePadDirection))
    7140:	9b07      	ldr	r3, [sp, #28]
    7142:	2b01      	cmp	r3, #1
    7144:	d006      	beq.n	7154 <Port_Ipw_SetPinMode+0x140>
    7146:	9b07      	ldr	r3, [sp, #28]
    7148:	2b03      	cmp	r3, #3
    714a:	d003      	beq.n	7154 <Port_Ipw_SetPinMode+0x140>
                        {
                            Port_Ipw_SetGpioPadOutput(PinIndex, pConfigPtr);
    714c:	9901      	ldr	r1, [sp, #4]
    714e:	9803      	ldr	r0, [sp, #12]
    7150:	f000 f896 	bl	7280 <Port_Ipw_SetGpioPadOutput>
                        }
#endif /* (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL) */
                        (void)Port_Ipw_SetPinDirection(PinIndex, ePadDirection, pConfigPtr);
    7154:	9a01      	ldr	r2, [sp, #4]
    7156:	9907      	ldr	r1, [sp, #28]
    7158:	9803      	ldr	r0, [sp, #12]
    715a:	f7ff fe63 	bl	6e24 <Port_Ipw_SetPinDirection>
                        break;
    715e:	e006      	b.n	716e <Port_Ipw_SetPinMode+0x15a>

                    default:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                    /* All the ALT modes except GPIO*/
                        Port_Ipw_SetGpioDirChangeability(PinPad,FALSE);
    7160:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7164:	2100      	movs	r1, #0
    7166:	4618      	mov	r0, r3
    7168:	f000 f83c 	bl	71e4 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        break;
    716c:	bf00      	nop
                }
                /* Sets the port pin mode */
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27();
    716e:	f00e fe05 	bl	15d7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>
                u32LocalPCR  = (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)];
    7172:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7176:	095b      	lsrs	r3, r3, #5
    7178:	b29b      	uxth	r3, r3
    717a:	461a      	mov	r2, r3
    717c:	4b18      	ldr	r3, [pc, #96]	; (71e0 <Port_Ipw_SetPinMode+0x1cc>)
    717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7182:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7186:	f002 021f 	and.w	r2, r2, #31
    718a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    718e:	9305      	str	r3, [sp, #20]

                u32LocalPCR &= ~(PORT_CI_PCR_ALT_MODE_U32);
    7190:	9b05      	ldr	r3, [sp, #20]
    7192:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    7196:	9305      	str	r3, [sp, #20]
                u32LocalPCR |= ((uint32)PinCfgRegValue << PORT_CI_PCR_ALT_MODE_OFFSET_U32);
    7198:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    719c:	021b      	lsls	r3, r3, #8
    719e:	9a05      	ldr	r2, [sp, #20]
    71a0:	4313      	orrs	r3, r2
    71a2:	9305      	str	r3, [sp, #20]

                (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)] = u32LocalPCR;
    71a4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    71a8:	095b      	lsrs	r3, r3, #5
    71aa:	b29b      	uxth	r3, r3
    71ac:	461a      	mov	r2, r3
    71ae:	4b0c      	ldr	r3, [pc, #48]	; (71e0 <Port_Ipw_SetPinMode+0x1cc>)
    71b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71b4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    71b8:	f002 021f 	and.w	r2, r2, #31
    71bc:	9905      	ldr	r1, [sp, #20]
    71be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27();
    71c2:	f00e fe07 	bl	15dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>
    71c6:	e002      	b.n	71ce <Port_Ipw_SetPinMode+0x1ba>
            }
            else
            {
                PinModeError = PORT_E_PARAM_INVALID_MODE;
    71c8:	230d      	movs	r3, #13
    71ca:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinModeError;
    71ce:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    71d2:	4618      	mov	r0, r3
    71d4:	b00b      	add	sp, #44	; 0x2c
    71d6:	f85d fb04 	ldr.w	pc, [sp], #4
    71da:	bf00      	nop
    71dc:	0001922c 	.word	0x0001922c
    71e0:	00018560 	.word	0x00018560

000071e4 <Port_Ipw_SetGpioDirChangeability>:
void Port_Ipw_SetGpioDirChangeability
(
    uint16 PadID,
    boolean bStatus
)
{
    71e4:	b500      	push	{lr}
    71e6:	b085      	sub	sp, #20
    71e8:	4603      	mov	r3, r0
    71ea:	460a      	mov	r2, r1
    71ec:	f8ad 3006 	strh.w	r3, [sp, #6]
    71f0:	4613      	mov	r3, r2
    71f2:	f88d 3005 	strb.w	r3, [sp, #5]
    /* Pin description variables */
    uint8 u8PinBitOffset;
    uint16 u16PinDirFlagWord;

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18();
    71f6:	f00e fadf 	bl	157b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>
    /* Bit offset of Pin index inside the pin description matrix */
    u8PinBitOffset      = (uint8)((uint8)PadID & PORT_CI_BIT_OFFSET_MASK_U8);
    71fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    71fe:	b2db      	uxtb	r3, r3
    7200:	f003 030f 	and.w	r3, r3, #15
    7204:	f88d 300d 	strb.w	r3, [sp, #13]
    u16PinDirFlagWord   = Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)];
    7208:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    720c:	b2db      	uxtb	r3, r3
    720e:	091b      	lsrs	r3, r3, #4
    7210:	b2db      	uxtb	r3, r3
    7212:	461a      	mov	r2, r3
    7214:	4b19      	ldr	r3, [pc, #100]	; (727c <Port_Ipw_SetGpioDirChangeability+0x98>)
    7216:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    721a:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (TRUE == bStatus)
    721e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7222:	2b00      	cmp	r3, #0
    7224:	d00b      	beq.n	723e <Port_Ipw_SetGpioDirChangeability+0x5a>
    {
        /* Set the change direction flag */
        u16PinDirFlagWord |= (uint16)(1UL<<u8PinBitOffset);
    7226:	f89d 300d 	ldrb.w	r3, [sp, #13]
    722a:	2201      	movs	r2, #1
    722c:	fa02 f303 	lsl.w	r3, r2, r3
    7230:	b29a      	uxth	r2, r3
    7232:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7236:	4313      	orrs	r3, r2
    7238:	f8ad 300e 	strh.w	r3, [sp, #14]
    723c:	e00c      	b.n	7258 <Port_Ipw_SetGpioDirChangeability+0x74>
    }
    else
    {
        /* Reset the change direction flag */
        u16PinDirFlagWord &= (uint16)(~((uint16)(1UL<<u8PinBitOffset)));
    723e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7242:	2201      	movs	r2, #1
    7244:	fa02 f303 	lsl.w	r3, r2, r3
    7248:	b29b      	uxth	r3, r3
    724a:	43db      	mvns	r3, r3
    724c:	b29a      	uxth	r2, r3
    724e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7252:	4013      	ands	r3, r2
    7254:	f8ad 300e 	strh.w	r3, [sp, #14]
    }
    Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)] = u16PinDirFlagWord;
    7258:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    725c:	b2db      	uxtb	r3, r3
    725e:	091b      	lsrs	r3, r3, #4
    7260:	b2db      	uxtb	r3, r3
    7262:	4619      	mov	r1, r3
    7264:	4a05      	ldr	r2, [pc, #20]	; (727c <Port_Ipw_SetGpioDirChangeability+0x98>)
    7266:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    726a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    /* Exit critical region */
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18();
    726e:	f00e facf 	bl	15810 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>
}
    7272:	bf00      	nop
    7274:	b005      	add	sp, #20
    7276:	f85d fb04 	ldr.w	pc, [sp], #4
    727a:	bf00      	nop
    727c:	1fff8cec 	.word	0x1fff8cec

00007280 <Port_Ipw_SetGpioPadOutput>:
void Port_Ipw_SetGpioPadOutput
(
    Port_PinType            PinIndex,
    const Port_ConfigType * pConfigPtr
)
{
    7280:	b084      	sub	sp, #16
    7282:	9001      	str	r0, [sp, #4]
    7284:	9100      	str	r1, [sp, #0]
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7286:	9b00      	ldr	r3, [sp, #0]
    7288:	68d9      	ldr	r1, [r3, #12]
    728a:	9a01      	ldr	r2, [sp, #4]
    728c:	4613      	mov	r3, r2
    728e:	009b      	lsls	r3, r3, #2
    7290:	4413      	add	r3, r2
    7292:	009b      	lsls	r3, r3, #2
    7294:	440b      	add	r3, r1
    7296:	881b      	ldrh	r3, [r3, #0]
    7298:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint8 u8LocalPDO = pConfigPtr->pUsedPadConfig[PinIndex].u8PDO;
    729c:	9b00      	ldr	r3, [sp, #0]
    729e:	68d9      	ldr	r1, [r3, #12]
    72a0:	9a01      	ldr	r2, [sp, #4]
    72a2:	4613      	mov	r3, r2
    72a4:	009b      	lsls	r3, r3, #2
    72a6:	4413      	add	r3, r2
    72a8:	009b      	lsls	r3, r3, #2
    72aa:	440b      	add	r3, r1
    72ac:	7a1b      	ldrb	r3, [r3, #8]
    72ae:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Set pin to High value */
    if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    72b2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    72b6:	2b01      	cmp	r3, #1
    72b8:	d110      	bne.n	72dc <Port_Ipw_SetGpioPadOutput+0x5c>
    {
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    72ba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72be:	f003 021f 	and.w	r2, r3, #31
    72c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72c6:	095b      	lsrs	r3, r3, #5
    72c8:	b29b      	uxth	r3, r3
    72ca:	4619      	mov	r1, r3
    72cc:	4b0f      	ldr	r3, [pc, #60]	; (730c <Port_Ipw_SetGpioPadOutput+0x8c>)
    72ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    72d2:	2101      	movs	r1, #1
    72d4:	fa01 f202 	lsl.w	r2, r1, r2
    72d8:	605a      	str	r2, [r3, #4]
    }
    else
    {
        /* No action to be done */
    }
}
    72da:	e013      	b.n	7304 <Port_Ipw_SetGpioPadOutput+0x84>
    else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    72dc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    72e0:	2b00      	cmp	r3, #0
    72e2:	d10f      	bne.n	7304 <Port_Ipw_SetGpioPadOutput+0x84>
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    72e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72e8:	f003 021f 	and.w	r2, r3, #31
    72ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72f0:	095b      	lsrs	r3, r3, #5
    72f2:	b29b      	uxth	r3, r3
    72f4:	4619      	mov	r1, r3
    72f6:	4b05      	ldr	r3, [pc, #20]	; (730c <Port_Ipw_SetGpioPadOutput+0x8c>)
    72f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    72fc:	2101      	movs	r1, #1
    72fe:	fa01 f202 	lsl.w	r2, r1, r2
    7302:	609a      	str	r2, [r3, #8]
}
    7304:	bf00      	nop
    7306:	b004      	add	sp, #16
    7308:	4770      	bx	lr
    730a:	bf00      	nop
    730c:	00018574 	.word	0x00018574

00007310 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    7310:	b500      	push	{lr}
    7312:	b085      	sub	sp, #20
    7314:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    7316:	9b01      	ldr	r3, [sp, #4]
    7318:	881b      	ldrh	r3, [r3, #0]
    731a:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    731e:	2300      	movs	r3, #0
    7320:	f8ad 300e 	strh.w	r3, [sp, #14]
    7324:	e0d2      	b.n	74cc <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    7326:	9b01      	ldr	r3, [sp, #4]
    7328:	68d9      	ldr	r1, [r3, #12]
    732a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    732e:	4613      	mov	r3, r2
    7330:	009b      	lsls	r3, r3, #2
    7332:	4413      	add	r3, r2
    7334:	009b      	lsls	r3, r3, #2
    7336:	440b      	add	r3, r1
    7338:	7c5b      	ldrb	r3, [r3, #17]
    733a:	f083 0301 	eor.w	r3, r3, #1
    733e:	b2db      	uxtb	r3, r3
    7340:	2b00      	cmp	r3, #0
    7342:	f000 80be 	beq.w	74c2 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    7346:	9b01      	ldr	r3, [sp, #4]
    7348:	68d9      	ldr	r1, [r3, #12]
    734a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    734e:	4613      	mov	r3, r2
    7350:	009b      	lsls	r3, r3, #2
    7352:	4413      	add	r3, r2
    7354:	009b      	lsls	r3, r3, #2
    7356:	440b      	add	r3, r1
    7358:	7c1b      	ldrb	r3, [r3, #16]
    735a:	2b00      	cmp	r3, #0
    735c:	f000 80b1 	beq.w	74c2 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    7360:	9b01      	ldr	r3, [sp, #4]
    7362:	68d9      	ldr	r1, [r3, #12]
    7364:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7368:	4613      	mov	r3, r2
    736a:	009b      	lsls	r3, r3, #2
    736c:	4413      	add	r3, r2
    736e:	009b      	lsls	r3, r3, #2
    7370:	440b      	add	r3, r1
    7372:	881b      	ldrh	r3, [r3, #0]
    7374:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7378:	9b01      	ldr	r3, [sp, #4]
    737a:	68d9      	ldr	r1, [r3, #12]
    737c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7380:	4613      	mov	r3, r2
    7382:	009b      	lsls	r3, r3, #2
    7384:	4413      	add	r3, r2
    7386:	009b      	lsls	r3, r3, #2
    7388:	440b      	add	r3, r1
    738a:	68db      	ldr	r3, [r3, #12]
    738c:	2b02      	cmp	r3, #2
    738e:	d11d      	bne.n	73cc <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7390:	f00e fa64 	bl	1585c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7394:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7398:	095b      	lsrs	r3, r3, #5
    739a:	b29b      	uxth	r3, r3
    739c:	461a      	mov	r2, r3
    739e:	4b51      	ldr	r3, [pc, #324]	; (74e4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    73a4:	6959      	ldr	r1, [r3, #20]
    73a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73aa:	f003 031f 	and.w	r3, r3, #31
    73ae:	2201      	movs	r2, #1
    73b0:	409a      	lsls	r2, r3
    73b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73b6:	095b      	lsrs	r3, r3, #5
    73b8:	b29b      	uxth	r3, r3
    73ba:	4618      	mov	r0, r3
    73bc:	4b49      	ldr	r3, [pc, #292]	; (74e4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    73c2:	430a      	orrs	r2, r1
    73c4:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    73c6:	f00e fa75 	bl	158b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    73ca:	e07a      	b.n	74c2 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    73cc:	9b01      	ldr	r3, [sp, #4]
    73ce:	68d9      	ldr	r1, [r3, #12]
    73d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73d4:	4613      	mov	r3, r2
    73d6:	009b      	lsls	r3, r3, #2
    73d8:	4413      	add	r3, r2
    73da:	009b      	lsls	r3, r3, #2
    73dc:	440b      	add	r3, r1
    73de:	68db      	ldr	r3, [r3, #12]
    73e0:	2b01      	cmp	r3, #1
    73e2:	d00b      	beq.n	73fc <Port_Ipw_RefreshPortDirection+0xec>
    73e4:	9b01      	ldr	r3, [sp, #4]
    73e6:	68d9      	ldr	r1, [r3, #12]
    73e8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73ec:	4613      	mov	r3, r2
    73ee:	009b      	lsls	r3, r3, #2
    73f0:	4413      	add	r3, r2
    73f2:	009b      	lsls	r3, r3, #2
    73f4:	440b      	add	r3, r1
    73f6:	68db      	ldr	r3, [r3, #12]
    73f8:	2b03      	cmp	r3, #3
    73fa:	d162      	bne.n	74c2 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    73fc:	f00e fa2e 	bl	1585c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7400:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7404:	095b      	lsrs	r3, r3, #5
    7406:	b29b      	uxth	r3, r3
    7408:	461a      	mov	r2, r3
    740a:	4b36      	ldr	r3, [pc, #216]	; (74e4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7410:	6959      	ldr	r1, [r3, #20]
    7412:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7416:	f003 031f 	and.w	r3, r3, #31
    741a:	2201      	movs	r2, #1
    741c:	fa02 f303 	lsl.w	r3, r2, r3
    7420:	43da      	mvns	r2, r3
    7422:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7426:	095b      	lsrs	r3, r3, #5
    7428:	b29b      	uxth	r3, r3
    742a:	4618      	mov	r0, r3
    742c:	4b2d      	ldr	r3, [pc, #180]	; (74e4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    742e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7432:	400a      	ands	r2, r1
    7434:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7436:	f00e fa3d 	bl	158b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    743a:	f00e fa61 	bl	15900 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    743e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7442:	095b      	lsrs	r3, r3, #5
    7444:	b29b      	uxth	r3, r3
    7446:	461a      	mov	r2, r3
    7448:	4b26      	ldr	r3, [pc, #152]	; (74e4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    744e:	6999      	ldr	r1, [r3, #24]
    7450:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7454:	f003 031f 	and.w	r3, r3, #31
    7458:	2201      	movs	r2, #1
    745a:	fa02 f303 	lsl.w	r3, r2, r3
    745e:	43da      	mvns	r2, r3
    7460:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7464:	095b      	lsrs	r3, r3, #5
    7466:	b29b      	uxth	r3, r3
    7468:	4618      	mov	r0, r3
    746a:	4b1e      	ldr	r3, [pc, #120]	; (74e4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    746c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7470:	400a      	ands	r2, r1
    7472:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7474:	9b01      	ldr	r3, [sp, #4]
    7476:	68d9      	ldr	r1, [r3, #12]
    7478:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    747c:	4613      	mov	r3, r2
    747e:	009b      	lsls	r3, r3, #2
    7480:	4413      	add	r3, r2
    7482:	009b      	lsls	r3, r3, #2
    7484:	440b      	add	r3, r1
    7486:	68db      	ldr	r3, [r3, #12]
    7488:	2b03      	cmp	r3, #3
    748a:	d118      	bne.n	74be <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    748c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7490:	095b      	lsrs	r3, r3, #5
    7492:	b29b      	uxth	r3, r3
    7494:	461a      	mov	r2, r3
    7496:	4b13      	ldr	r3, [pc, #76]	; (74e4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    749c:	6999      	ldr	r1, [r3, #24]
    749e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74a2:	f003 031f 	and.w	r3, r3, #31
    74a6:	2201      	movs	r2, #1
    74a8:	409a      	lsls	r2, r3
    74aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74ae:	095b      	lsrs	r3, r3, #5
    74b0:	b29b      	uxth	r3, r3
    74b2:	4618      	mov	r0, r3
    74b4:	4b0b      	ldr	r3, [pc, #44]	; (74e4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    74b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    74ba:	430a      	orrs	r2, r1
    74bc:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    74be:	f00e fa4b 	bl	15958 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    74c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74c6:	3301      	adds	r3, #1
    74c8:	f8ad 300e 	strh.w	r3, [sp, #14]
    74cc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    74d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    74d4:	429a      	cmp	r2, r3
    74d6:	f4ff af26 	bcc.w	7326 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    74da:	bf00      	nop
    74dc:	bf00      	nop
    74de:	b005      	add	sp, #20
    74e0:	f85d fb04 	ldr.w	pc, [sp], #4
    74e4:	00018574 	.word	0x00018574

000074e8 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    74e8:	b086      	sub	sp, #24
    74ea:	9003      	str	r0, [sp, #12]
    74ec:	9102      	str	r1, [sp, #8]
    74ee:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    74f0:	9b03      	ldr	r3, [sp, #12]
    74f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    74f6:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    74f8:	9b02      	ldr	r3, [sp, #8]
    74fa:	43db      	mvns	r3, r3
    74fc:	9a05      	ldr	r2, [sp, #20]
    74fe:	4013      	ands	r3, r2
    7500:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    7502:	9a05      	ldr	r2, [sp, #20]
    7504:	9b01      	ldr	r3, [sp, #4]
    7506:	4313      	orrs	r3, r2
    7508:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    750a:	9b03      	ldr	r3, [sp, #12]
    750c:	9a05      	ldr	r2, [sp, #20]
    750e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7512:	bf00      	nop
    7514:	b006      	add	sp, #24
    7516:	4770      	bx	lr

00007518 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    7518:	b086      	sub	sp, #24
    751a:	9003      	str	r0, [sp, #12]
    751c:	9102      	str	r1, [sp, #8]
    751e:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    7520:	9b03      	ldr	r3, [sp, #12]
    7522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7524:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    7526:	9b05      	ldr	r3, [sp, #20]
    7528:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    752c:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    752e:	9b02      	ldr	r3, [sp, #8]
    7530:	015b      	lsls	r3, r3, #5
    7532:	f003 0360 	and.w	r3, r3, #96	; 0x60
    7536:	9a05      	ldr	r2, [sp, #20]
    7538:	4313      	orrs	r3, r2
    753a:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    753c:	9b01      	ldr	r3, [sp, #4]
    753e:	f003 0303 	and.w	r3, r3, #3
    7542:	9a05      	ldr	r2, [sp, #20]
    7544:	4313      	orrs	r3, r2
    7546:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    7548:	9b03      	ldr	r3, [sp, #12]
    754a:	9a05      	ldr	r2, [sp, #20]
    754c:	641a      	str	r2, [r3, #64]	; 0x40
}
    754e:	bf00      	nop
    7550:	b006      	add	sp, #24
    7552:	4770      	bx	lr

00007554 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    7554:	b084      	sub	sp, #16
    7556:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    7558:	2300      	movs	r3, #0
    755a:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    755c:	9b01      	ldr	r3, [sp, #4]
    755e:	095b      	lsrs	r3, r3, #5
    7560:	f003 0303 	and.w	r3, r3, #3
    7564:	2b03      	cmp	r3, #3
    7566:	d00c      	beq.n	7582 <Adc_HwAcc_GetClockDivide+0x2e>
    7568:	2b03      	cmp	r3, #3
    756a:	d80d      	bhi.n	7588 <Adc_HwAcc_GetClockDivide+0x34>
    756c:	2b01      	cmp	r3, #1
    756e:	d002      	beq.n	7576 <Adc_HwAcc_GetClockDivide+0x22>
    7570:	2b02      	cmp	r3, #2
    7572:	d003      	beq.n	757c <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    7574:	e008      	b.n	7588 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    7576:	2301      	movs	r3, #1
    7578:	9303      	str	r3, [sp, #12]
            break;
    757a:	e006      	b.n	758a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    757c:	2302      	movs	r3, #2
    757e:	9303      	str	r3, [sp, #12]
            break;
    7580:	e003      	b.n	758a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    7582:	2303      	movs	r3, #3
    7584:	9303      	str	r3, [sp, #12]
            break;
    7586:	e000      	b.n	758a <Adc_HwAcc_GetClockDivide+0x36>
            break;
    7588:	bf00      	nop
    }
    return ReturnValue;
    758a:	9b03      	ldr	r3, [sp, #12]
}
    758c:	4618      	mov	r0, r3
    758e:	b004      	add	sp, #16
    7590:	4770      	bx	lr

00007592 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    7592:	b084      	sub	sp, #16
    7594:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    7596:	2300      	movs	r3, #0
    7598:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    759a:	9b01      	ldr	r3, [sp, #4]
    759c:	f003 0303 	and.w	r3, r3, #3
    75a0:	2b03      	cmp	r3, #3
    75a2:	d00c      	beq.n	75be <Adc_HwAcc_GetInputClock+0x2c>
    75a4:	2b03      	cmp	r3, #3
    75a6:	d80d      	bhi.n	75c4 <Adc_HwAcc_GetInputClock+0x32>
    75a8:	2b01      	cmp	r3, #1
    75aa:	d002      	beq.n	75b2 <Adc_HwAcc_GetInputClock+0x20>
    75ac:	2b02      	cmp	r3, #2
    75ae:	d003      	beq.n	75b8 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    75b0:	e008      	b.n	75c4 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    75b2:	2301      	movs	r3, #1
    75b4:	9303      	str	r3, [sp, #12]
            break;
    75b6:	e006      	b.n	75c6 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    75b8:	2302      	movs	r3, #2
    75ba:	9303      	str	r3, [sp, #12]
            break;
    75bc:	e003      	b.n	75c6 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    75be:	2303      	movs	r3, #3
    75c0:	9303      	str	r3, [sp, #12]
            break;
    75c2:	e000      	b.n	75c6 <Adc_HwAcc_GetInputClock+0x34>
            break;
    75c4:	bf00      	nop
    }
    return ReturnValue;
    75c6:	9b03      	ldr	r3, [sp, #12]
}
    75c8:	4618      	mov	r0, r3
    75ca:	b004      	add	sp, #16
    75cc:	4770      	bx	lr

000075ce <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    75ce:	b084      	sub	sp, #16
    75d0:	9001      	str	r0, [sp, #4]
    75d2:	460b      	mov	r3, r1
    75d4:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    75d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    75dc:	2b00      	cmp	r3, #0
    75de:	d002      	beq.n	75e6 <Adc_HwAcc_SetSampleTime+0x18>
    75e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    75e4:	e000      	b.n	75e8 <Adc_HwAcc_SetSampleTime+0x1a>
    75e6:	2301      	movs	r3, #1
    75e8:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    75ec:	9b01      	ldr	r3, [sp, #4]
    75ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    75f0:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    75f2:	9b02      	ldr	r3, [sp, #8]
    75f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    75f8:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    75fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    75fe:	9a02      	ldr	r2, [sp, #8]
    7600:	4313      	orrs	r3, r2
    7602:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    7604:	9b01      	ldr	r3, [sp, #4]
    7606:	9a02      	ldr	r2, [sp, #8]
    7608:	645a      	str	r2, [r3, #68]	; 0x44
}
    760a:	bf00      	nop
    760c:	b004      	add	sp, #16
    760e:	4770      	bx	lr

00007610 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    7610:	b086      	sub	sp, #24
    7612:	9003      	str	r0, [sp, #12]
    7614:	460b      	mov	r3, r1
    7616:	9201      	str	r2, [sp, #4]
    7618:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    761c:	9b03      	ldr	r3, [sp, #12]
    761e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7622:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    7624:	9b05      	ldr	r3, [sp, #20]
    7626:	f023 0307 	bic.w	r3, r3, #7
    762a:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    762c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7630:	2b00      	cmp	r3, #0
    7632:	d001      	beq.n	7638 <Adc_HwAcc_SetAveraging+0x28>
    7634:	2304      	movs	r3, #4
    7636:	e000      	b.n	763a <Adc_HwAcc_SetAveraging+0x2a>
    7638:	2300      	movs	r3, #0
    763a:	9a05      	ldr	r2, [sp, #20]
    763c:	4313      	orrs	r3, r2
    763e:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    7640:	9b01      	ldr	r3, [sp, #4]
    7642:	f003 0303 	and.w	r3, r3, #3
    7646:	9a05      	ldr	r2, [sp, #20]
    7648:	4313      	orrs	r3, r2
    764a:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    764c:	9b03      	ldr	r3, [sp, #12]
    764e:	9a05      	ldr	r2, [sp, #20]
    7650:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7654:	bf00      	nop
    7656:	b006      	add	sp, #24
    7658:	4770      	bx	lr

0000765a <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    765a:	b084      	sub	sp, #16
    765c:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    765e:	2300      	movs	r3, #0
    7660:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    7662:	9b01      	ldr	r3, [sp, #4]
    7664:	f003 0303 	and.w	r3, r3, #3
    7668:	2b03      	cmp	r3, #3
    766a:	d00c      	beq.n	7686 <Adc_HwAcc_GetAverageSelect+0x2c>
    766c:	2b03      	cmp	r3, #3
    766e:	d80d      	bhi.n	768c <Adc_HwAcc_GetAverageSelect+0x32>
    7670:	2b01      	cmp	r3, #1
    7672:	d002      	beq.n	767a <Adc_HwAcc_GetAverageSelect+0x20>
    7674:	2b02      	cmp	r3, #2
    7676:	d003      	beq.n	7680 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    7678:	e008      	b.n	768c <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    767a:	2301      	movs	r3, #1
    767c:	9303      	str	r3, [sp, #12]
            break;
    767e:	e006      	b.n	768e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    7680:	2302      	movs	r3, #2
    7682:	9303      	str	r3, [sp, #12]
            break;
    7684:	e003      	b.n	768e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    7686:	2303      	movs	r3, #3
    7688:	9303      	str	r3, [sp, #12]
            break;
    768a:	e000      	b.n	768e <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    768c:	bf00      	nop
    }
    return ReturnValue;
    768e:	9b03      	ldr	r3, [sp, #12]
}
    7690:	4618      	mov	r0, r3
    7692:	b004      	add	sp, #16
    7694:	4770      	bx	lr

00007696 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    7696:	b084      	sub	sp, #16
    7698:	9001      	str	r0, [sp, #4]
    769a:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    769c:	9b01      	ldr	r3, [sp, #4]
    769e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    76a2:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    76a4:	9b03      	ldr	r3, [sp, #12]
    76a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    76aa:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    76ac:	9b00      	ldr	r3, [sp, #0]
    76ae:	019b      	lsls	r3, r3, #6
    76b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    76b4:	9a03      	ldr	r2, [sp, #12]
    76b6:	4313      	orrs	r3, r2
    76b8:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    76ba:	9b01      	ldr	r3, [sp, #4]
    76bc:	9a03      	ldr	r2, [sp, #12]
    76be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    76c2:	bf00      	nop
    76c4:	b004      	add	sp, #16
    76c6:	4770      	bx	lr

000076c8 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    76c8:	b084      	sub	sp, #16
    76ca:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    76cc:	2300      	movs	r3, #0
    76ce:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    76d0:	9b01      	ldr	r3, [sp, #4]
    76d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    76d6:	2b00      	cmp	r3, #0
    76d8:	d001      	beq.n	76de <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    76da:	2301      	movs	r3, #1
    76dc:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    76de:	9b03      	ldr	r3, [sp, #12]
}
    76e0:	4618      	mov	r0, r3
    76e2:	b004      	add	sp, #16
    76e4:	4770      	bx	lr

000076e6 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    76e6:	b086      	sub	sp, #24
    76e8:	9003      	str	r0, [sp, #12]
    76ea:	9201      	str	r2, [sp, #4]
    76ec:	461a      	mov	r2, r3
    76ee:	460b      	mov	r3, r1
    76f0:	f88d 300b 	strb.w	r3, [sp, #11]
    76f4:	4613      	mov	r3, r2
    76f6:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    76fa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    76fe:	9b03      	ldr	r3, [sp, #12]
    7700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7704:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    7706:	9b05      	ldr	r3, [sp, #20]
    7708:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    770c:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    770e:	9b01      	ldr	r3, [sp, #4]
    7710:	f003 031f 	and.w	r3, r3, #31
    7714:	9a05      	ldr	r2, [sp, #20]
    7716:	4313      	orrs	r3, r2
    7718:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    771a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    771e:	2b00      	cmp	r3, #0
    7720:	d001      	beq.n	7726 <Adc_HwAcc_SetChannel+0x40>
    7722:	2340      	movs	r3, #64	; 0x40
    7724:	e000      	b.n	7728 <Adc_HwAcc_SetChannel+0x42>
    7726:	2300      	movs	r3, #0
    7728:	9a05      	ldr	r2, [sp, #20]
    772a:	4313      	orrs	r3, r2
    772c:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    772e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7732:	9b03      	ldr	r3, [sp, #12]
    7734:	9905      	ldr	r1, [sp, #20]
    7736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    773a:	bf00      	nop
    773c:	b006      	add	sp, #24
    773e:	4770      	bx	lr

00007740 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    7740:	b082      	sub	sp, #8
    7742:	9001      	str	r0, [sp, #4]
    7744:	460b      	mov	r3, r1
    7746:	f8ad 3002 	strh.w	r3, [sp, #2]
    774a:	4613      	mov	r3, r2
    774c:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    7750:	f8bd 3000 	ldrh.w	r3, [sp]
    7754:	b2da      	uxtb	r2, r3
    7756:	9b01      	ldr	r3, [sp, #4]
    7758:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    775c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7760:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7764:	9b01      	ldr	r3, [sp, #4]
    7766:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    776a:	bf00      	nop
    776c:	b002      	add	sp, #8
    776e:	4770      	bx	lr

00007770 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    7770:	b082      	sub	sp, #8
    7772:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    7774:	9b01      	ldr	r3, [sp, #4]
    7776:	099b      	lsrs	r3, r3, #6
    7778:	f003 0301 	and.w	r3, r3, #1
    777c:	2b00      	cmp	r3, #0
    777e:	bf14      	ite	ne
    7780:	2301      	movne	r3, #1
    7782:	2300      	moveq	r3, #0
    7784:	b2db      	uxtb	r3, r3
}
    7786:	4618      	mov	r0, r3
    7788:	b002      	add	sp, #8
    778a:	4770      	bx	lr

0000778c <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    778c:	b082      	sub	sp, #8
    778e:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    7790:	9b01      	ldr	r3, [sp, #4]
    7792:	09db      	lsrs	r3, r3, #7
    7794:	f003 0301 	and.w	r3, r3, #1
    7798:	2b00      	cmp	r3, #0
    779a:	bf14      	ite	ne
    779c:	2301      	movne	r3, #1
    779e:	2300      	moveq	r3, #0
    77a0:	b2db      	uxtb	r3, r3
}
    77a2:	4618      	mov	r0, r3
    77a4:	b002      	add	sp, #8
    77a6:	4770      	bx	lr

000077a8 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    77a8:	b084      	sub	sp, #16
    77aa:	9001      	str	r0, [sp, #4]
    77ac:	460b      	mov	r3, r1
    77ae:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    77b2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    77b6:	9b01      	ldr	r3, [sp, #4]
    77b8:	3212      	adds	r2, #18
    77ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77be:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    77c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    77c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    77ca:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    77ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    77d2:	4618      	mov	r0, r3
    77d4:	b004      	add	sp, #16
    77d6:	4770      	bx	lr

000077d8 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    77d8:	b500      	push	{lr}
    77da:	b085      	sub	sp, #20
    77dc:	9003      	str	r0, [sp, #12]
    77de:	9102      	str	r1, [sp, #8]
    77e0:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    77e2:	f009 fc5b 	bl	1109c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    77e6:	9b02      	ldr	r3, [sp, #8]
    77e8:	7a59      	ldrb	r1, [r3, #9]
    77ea:	9b02      	ldr	r3, [sp, #8]
    77ec:	68db      	ldr	r3, [r3, #12]
    77ee:	461a      	mov	r2, r3
    77f0:	9803      	ldr	r0, [sp, #12]
    77f2:	f7ff ff0d 	bl	7610 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    77f6:	f009 fc7d 	bl	110f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    77fa:	f009 fab5 	bl	10d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    77fe:	9901      	ldr	r1, [sp, #4]
    7800:	9803      	ldr	r0, [sp, #12]
    7802:	f7ff ff48 	bl	7696 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    7806:	f009 fadb 	bl	10dc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    780a:	f008 ffcb 	bl	107a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    780e:	9b02      	ldr	r3, [sp, #8]
    7810:	7a1b      	ldrb	r3, [r3, #8]
    7812:	4619      	mov	r1, r3
    7814:	9803      	ldr	r0, [sp, #12]
    7816:	f7ff feda 	bl	75ce <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    781a:	f008 ffef 	bl	107fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    781e:	f008 ff1d 	bl	1065c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7822:	9b02      	ldr	r3, [sp, #8]
    7824:	6819      	ldr	r1, [r3, #0]
    7826:	9b02      	ldr	r3, [sp, #8]
    7828:	685b      	ldr	r3, [r3, #4]
    782a:	461a      	mov	r2, r3
    782c:	9803      	ldr	r0, [sp, #12]
    782e:	f7ff fe73 	bl	7518 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    7832:	f008 ff3f 	bl	106b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    7836:	bf00      	nop
    7838:	b005      	add	sp, #20
    783a:	f85d fb04 	ldr.w	pc, [sp], #4

0000783e <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    783e:	b500      	push	{lr}
    7840:	b087      	sub	sp, #28
    7842:	9001      	str	r0, [sp, #4]
    7844:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7846:	4a67      	ldr	r2, [pc, #412]	; (79e4 <Adc_Ip_Init+0x1a6>)
    7848:	9b01      	ldr	r3, [sp, #4]
    784a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    784e:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    7850:	2300      	movs	r3, #0
    7852:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    7854:	2300      	movs	r3, #0
    7856:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7858:	9b00      	ldr	r3, [sp, #0]
    785a:	6819      	ldr	r1, [r3, #0]
    785c:	9b00      	ldr	r3, [sp, #0]
    785e:	689b      	ldr	r3, [r3, #8]
    7860:	461a      	mov	r2, r3
    7862:	9802      	ldr	r0, [sp, #8]
    7864:	f7ff fe58 	bl	7518 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7868:	9b00      	ldr	r3, [sp, #0]
    786a:	7b1b      	ldrb	r3, [r3, #12]
    786c:	4619      	mov	r1, r3
    786e:	9802      	ldr	r0, [sp, #8]
    7870:	f7ff fead 	bl	75ce <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7874:	9b00      	ldr	r3, [sp, #0]
    7876:	7b59      	ldrb	r1, [r3, #13]
    7878:	9b00      	ldr	r3, [sp, #0]
    787a:	691b      	ldr	r3, [r3, #16]
    787c:	461a      	mov	r2, r3
    787e:	9802      	ldr	r0, [sp, #8]
    7880:	f7ff fec6 	bl	7610 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    7884:	9b00      	ldr	r3, [sp, #0]
    7886:	695b      	ldr	r3, [r3, #20]
    7888:	4619      	mov	r1, r3
    788a:	9801      	ldr	r0, [sp, #4]
    788c:	f000 f9ea 	bl	7c64 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    7890:	9b04      	ldr	r3, [sp, #16]
    7892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7896:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    7898:	9b00      	ldr	r3, [sp, #0]
    789a:	699b      	ldr	r3, [r3, #24]
    789c:	019b      	lsls	r3, r3, #6
    789e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    78a2:	9a05      	ldr	r2, [sp, #20]
    78a4:	4313      	orrs	r3, r2
    78a6:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    78a8:	9b00      	ldr	r3, [sp, #0]
    78aa:	7f1b      	ldrb	r3, [r3, #28]
    78ac:	2b00      	cmp	r3, #0
    78ae:	d004      	beq.n	78ba <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    78b0:	9b05      	ldr	r3, [sp, #20]
    78b2:	f043 0304 	orr.w	r3, r3, #4
    78b6:	9305      	str	r3, [sp, #20]
    78b8:	e003      	b.n	78c2 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    78ba:	9b04      	ldr	r3, [sp, #16]
    78bc:	f043 0304 	orr.w	r3, r3, #4
    78c0:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    78c2:	9b04      	ldr	r3, [sp, #16]
    78c4:	f043 0303 	orr.w	r3, r3, #3
    78c8:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    78ca:	9b00      	ldr	r3, [sp, #0]
    78cc:	6a1b      	ldr	r3, [r3, #32]
    78ce:	f003 0303 	and.w	r3, r3, #3
    78d2:	9a05      	ldr	r2, [sp, #20]
    78d4:	4313      	orrs	r3, r2
    78d6:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    78d8:	9b04      	ldr	r3, [sp, #16]
    78da:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    78de:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    78e0:	9b00      	ldr	r3, [sp, #0]
    78e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    78e6:	2b00      	cmp	r3, #0
    78e8:	d001      	beq.n	78ee <Adc_Ip_Init+0xb0>
    78ea:	2320      	movs	r3, #32
    78ec:	e000      	b.n	78f0 <Adc_Ip_Init+0xb2>
    78ee:	2300      	movs	r3, #0
    78f0:	9a05      	ldr	r2, [sp, #20]
    78f2:	4313      	orrs	r3, r2
    78f4:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    78f6:	9b00      	ldr	r3, [sp, #0]
    78f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    78fc:	2b00      	cmp	r3, #0
    78fe:	d001      	beq.n	7904 <Adc_Ip_Init+0xc6>
    7900:	2310      	movs	r3, #16
    7902:	e000      	b.n	7906 <Adc_Ip_Init+0xc8>
    7904:	2300      	movs	r3, #0
    7906:	9a05      	ldr	r2, [sp, #20]
    7908:	4313      	orrs	r3, r2
    790a:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    790c:	9b00      	ldr	r3, [sp, #0]
    790e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    7912:	2b00      	cmp	r3, #0
    7914:	d001      	beq.n	791a <Adc_Ip_Init+0xdc>
    7916:	2308      	movs	r3, #8
    7918:	e000      	b.n	791c <Adc_Ip_Init+0xde>
    791a:	2300      	movs	r3, #0
    791c:	9a05      	ldr	r2, [sp, #20]
    791e:	4313      	orrs	r3, r2
    7920:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    7922:	9b00      	ldr	r3, [sp, #0]
    7924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    7926:	461a      	mov	r2, r3
    7928:	9b02      	ldr	r3, [sp, #8]
    792a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    792e:	9b00      	ldr	r3, [sp, #0]
    7930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    7932:	461a      	mov	r2, r3
    7934:	9b02      	ldr	r3, [sp, #8]
    7936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    793a:	9a05      	ldr	r2, [sp, #20]
    793c:	9904      	ldr	r1, [sp, #16]
    793e:	9802      	ldr	r0, [sp, #8]
    7940:	f7ff fdd2 	bl	74e8 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    7944:	9b00      	ldr	r3, [sp, #0]
    7946:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    7948:	9b00      	ldr	r3, [sp, #0]
    794a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    794c:	461a      	mov	r2, r3
    794e:	9802      	ldr	r0, [sp, #8]
    7950:	f7ff fef6 	bl	7740 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    7954:	9b00      	ldr	r3, [sp, #0]
    7956:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    795a:	4619      	mov	r1, r3
    795c:	9801      	ldr	r0, [sp, #4]
    795e:	f000 f955 	bl	7c0c <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    7962:	9b00      	ldr	r3, [sp, #0]
    7964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7966:	2b00      	cmp	r3, #0
    7968:	d01c      	beq.n	79a4 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    796a:	2300      	movs	r3, #0
    796c:	f88d 300f 	strb.w	r3, [sp, #15]
    7970:	e011      	b.n	7996 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    7972:	9b00      	ldr	r3, [sp, #0]
    7974:	6b59      	ldr	r1, [r3, #52]	; 0x34
    7976:	f89d 200f 	ldrb.w	r2, [sp, #15]
    797a:	4613      	mov	r3, r2
    797c:	005b      	lsls	r3, r3, #1
    797e:	4413      	add	r3, r2
    7980:	009b      	lsls	r3, r3, #2
    7982:	440b      	add	r3, r1
    7984:	4619      	mov	r1, r3
    7986:	9801      	ldr	r0, [sp, #4]
    7988:	f000 f9c2 	bl	7d10 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    798c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7990:	3301      	adds	r3, #1
    7992:	f88d 300f 	strb.w	r3, [sp, #15]
    7996:	9b00      	ldr	r3, [sp, #0]
    7998:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    799c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    79a0:	429a      	cmp	r2, r3
    79a2:	d3e6      	bcc.n	7972 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    79a4:	9b00      	ldr	r3, [sp, #0]
    79a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    79a8:	490f      	ldr	r1, [pc, #60]	; (79e8 <Adc_Ip_Init+0x1aa>)
    79aa:	9b01      	ldr	r3, [sp, #4]
    79ac:	204c      	movs	r0, #76	; 0x4c
    79ae:	fb00 f303 	mul.w	r3, r0, r3
    79b2:	440b      	add	r3, r1
    79b4:	3308      	adds	r3, #8
    79b6:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    79b8:	9b00      	ldr	r3, [sp, #0]
    79ba:	685a      	ldr	r2, [r3, #4]
    79bc:	490a      	ldr	r1, [pc, #40]	; (79e8 <Adc_Ip_Init+0x1aa>)
    79be:	9b01      	ldr	r3, [sp, #4]
    79c0:	204c      	movs	r0, #76	; 0x4c
    79c2:	fb00 f303 	mul.w	r3, r0, r3
    79c6:	440b      	add	r3, r1
    79c8:	3304      	adds	r3, #4
    79ca:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    79cc:	4a06      	ldr	r2, [pc, #24]	; (79e8 <Adc_Ip_Init+0x1aa>)
    79ce:	9b01      	ldr	r3, [sp, #4]
    79d0:	214c      	movs	r1, #76	; 0x4c
    79d2:	fb01 f303 	mul.w	r3, r1, r3
    79d6:	4413      	add	r3, r2
    79d8:	2201      	movs	r2, #1
    79da:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    79dc:	bf00      	nop
    79de:	b007      	add	sp, #28
    79e0:	f85d fb04 	ldr.w	pc, [sp], #4
    79e4:	00018588 	.word	0x00018588
    79e8:	1fff8d00 	.word	0x1fff8d00

000079ec <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    79ec:	b500      	push	{lr}
    79ee:	b0c3      	sub	sp, #268	; 0x10c
    79f0:	ab42      	add	r3, sp, #264	; 0x108
    79f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    79f6:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    79f8:	2300      	movs	r3, #0
    79fa:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    79fc:	2303      	movs	r3, #3
    79fe:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    7a00:	2300      	movs	r3, #0
    7a02:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    7a04:	230c      	movs	r3, #12
    7a06:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    7a0a:	2300      	movs	r3, #0
    7a0c:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    7a10:	2300      	movs	r3, #0
    7a12:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    7a14:	2300      	movs	r3, #0
    7a16:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    7a18:	2300      	movs	r3, #0
    7a1a:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    7a1c:	2300      	movs	r3, #0
    7a1e:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    7a22:	2300      	movs	r3, #0
    7a24:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    7a26:	2300      	movs	r3, #0
    7a28:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    7a2c:	2300      	movs	r3, #0
    7a2e:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    7a32:	2300      	movs	r3, #0
    7a34:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    7a38:	2300      	movs	r3, #0
    7a3a:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    7a3e:	2300      	movs	r3, #0
    7a40:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    7a44:	2300      	movs	r3, #0
    7a46:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    7a4a:	2304      	movs	r3, #4
    7a4c:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    7a50:	2300      	movs	r3, #0
    7a52:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    7a56:	2310      	movs	r3, #16
    7a58:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    7a5c:	2300      	movs	r3, #0
    7a5e:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    7a62:	e02b      	b.n	7abc <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    7a64:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7a68:	ab42      	add	r3, sp, #264	; 0x108
    7a6a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7a6e:	4613      	mov	r3, r2
    7a70:	005b      	lsls	r3, r3, #1
    7a72:	4413      	add	r3, r2
    7a74:	009b      	lsls	r3, r3, #2
    7a76:	440b      	add	r3, r1
    7a78:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7a7c:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    7a7e:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7a82:	ab42      	add	r3, sp, #264	; 0x108
    7a84:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7a88:	4613      	mov	r3, r2
    7a8a:	005b      	lsls	r3, r3, #1
    7a8c:	4413      	add	r3, r2
    7a8e:	009b      	lsls	r3, r3, #2
    7a90:	440b      	add	r3, r1
    7a92:	3304      	adds	r3, #4
    7a94:	221f      	movs	r2, #31
    7a96:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    7a98:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7a9c:	ab42      	add	r3, sp, #264	; 0x108
    7a9e:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7aa2:	4613      	mov	r3, r2
    7aa4:	005b      	lsls	r3, r3, #1
    7aa6:	4413      	add	r3, r2
    7aa8:	009b      	lsls	r3, r3, #2
    7aaa:	440b      	add	r3, r1
    7aac:	3308      	adds	r3, #8
    7aae:	2200      	movs	r2, #0
    7ab0:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    7ab2:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    7ab6:	3301      	adds	r3, #1
    7ab8:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    7abc:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    7ac0:	2b0f      	cmp	r3, #15
    7ac2:	d9cf      	bls.n	7a64 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    7ac4:	ab02      	add	r3, sp, #8
    7ac6:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    7ac8:	2300      	movs	r3, #0
    7aca:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    7acc:	aa32      	add	r2, sp, #200	; 0xc8
    7ace:	ab42      	add	r3, sp, #264	; 0x108
    7ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7ad4:	4611      	mov	r1, r2
    7ad6:	6818      	ldr	r0, [r3, #0]
    7ad8:	f7ff feb1 	bl	783e <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    7adc:	4a07      	ldr	r2, [pc, #28]	; (7afc <Adc_Ip_DeInit+0x110>)
    7ade:	ab42      	add	r3, sp, #264	; 0x108
    7ae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7ae4:	681b      	ldr	r3, [r3, #0]
    7ae6:	214c      	movs	r1, #76	; 0x4c
    7ae8:	fb01 f303 	mul.w	r3, r1, r3
    7aec:	4413      	add	r3, r2
    7aee:	2200      	movs	r2, #0
    7af0:	701a      	strb	r2, [r3, #0]
}
    7af2:	bf00      	nop
    7af4:	b043      	add	sp, #268	; 0x10c
    7af6:	f85d fb04 	ldr.w	pc, [sp], #4
    7afa:	bf00      	nop
    7afc:	1fff8d00 	.word	0x1fff8d00

00007b00 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    7b00:	b500      	push	{lr}
    7b02:	b087      	sub	sp, #28
    7b04:	9003      	str	r0, [sp, #12]
    7b06:	460b      	mov	r3, r1
    7b08:	9201      	str	r2, [sp, #4]
    7b0a:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b0e:	4a0a      	ldr	r2, [pc, #40]	; (7b38 <Adc_Ip_SetAveraging+0x38>)
    7b10:	9b03      	ldr	r3, [sp, #12]
    7b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b16:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    7b18:	f009 fa1c 	bl	10f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    7b1c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7b20:	9a01      	ldr	r2, [sp, #4]
    7b22:	4619      	mov	r1, r3
    7b24:	9805      	ldr	r0, [sp, #20]
    7b26:	f7ff fd73 	bl	7610 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    7b2a:	f009 fa3f 	bl	10fac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    7b2e:	bf00      	nop
    7b30:	b007      	add	sp, #28
    7b32:	f85d fb04 	ldr.w	pc, [sp], #4
    7b36:	bf00      	nop
    7b38:	00018588 	.word	0x00018588

00007b3c <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    7b3c:	b500      	push	{lr}
    7b3e:	b085      	sub	sp, #20
    7b40:	9001      	str	r0, [sp, #4]
    7b42:	460b      	mov	r3, r1
    7b44:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b48:	4a09      	ldr	r2, [pc, #36]	; (7b70 <Adc_Ip_SetSampleTime+0x34>)
    7b4a:	9b01      	ldr	r3, [sp, #4]
    7b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b50:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    7b52:	f008 fe79 	bl	10848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    7b56:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7b5a:	4619      	mov	r1, r3
    7b5c:	9803      	ldr	r0, [sp, #12]
    7b5e:	f7ff fd36 	bl	75ce <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    7b62:	f008 fe9d 	bl	108a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    7b66:	bf00      	nop
    7b68:	b005      	add	sp, #20
    7b6a:	f85d fb04 	ldr.w	pc, [sp], #4
    7b6e:	bf00      	nop
    7b70:	00018588 	.word	0x00018588

00007b74 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    7b74:	b500      	push	{lr}
    7b76:	b085      	sub	sp, #20
    7b78:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b7a:	4a0a      	ldr	r2, [pc, #40]	; (7ba4 <Adc_Ip_EnableDma+0x30>)
    7b7c:	9b01      	ldr	r3, [sp, #4]
    7b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b82:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    7b84:	f009 f994 	bl	10eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    7b88:	9b03      	ldr	r3, [sp, #12]
    7b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7b8e:	f043 0204 	orr.w	r2, r3, #4
    7b92:	9b03      	ldr	r3, [sp, #12]
    7b94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    7b98:	f009 f9b6 	bl	10f08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    7b9c:	bf00      	nop
    7b9e:	b005      	add	sp, #20
    7ba0:	f85d fb04 	ldr.w	pc, [sp], #4
    7ba4:	00018588 	.word	0x00018588

00007ba8 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    7ba8:	b500      	push	{lr}
    7baa:	b085      	sub	sp, #20
    7bac:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7bae:	4a0a      	ldr	r2, [pc, #40]	; (7bd8 <Adc_Ip_DisableDma+0x30>)
    7bb0:	9b01      	ldr	r3, [sp, #4]
    7bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bb6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    7bb8:	f009 f832 	bl	10c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    7bbc:	9b03      	ldr	r3, [sp, #12]
    7bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7bc2:	f023 0204 	bic.w	r2, r3, #4
    7bc6:	9b03      	ldr	r3, [sp, #12]
    7bc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    7bcc:	f009 f854 	bl	10c78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    7bd0:	bf00      	nop
    7bd2:	b005      	add	sp, #20
    7bd4:	f85d fb04 	ldr.w	pc, [sp], #4
    7bd8:	00018588 	.word	0x00018588

00007bdc <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    7bdc:	b500      	push	{lr}
    7bde:	b085      	sub	sp, #20
    7be0:	9001      	str	r0, [sp, #4]
    7be2:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7be4:	4a08      	ldr	r2, [pc, #32]	; (7c08 <Adc_Ip_SetTriggerMode+0x2c>)
    7be6:	9b01      	ldr	r3, [sp, #4]
    7be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bec:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    7bee:	f009 f869 	bl	10cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    7bf2:	9900      	ldr	r1, [sp, #0]
    7bf4:	9803      	ldr	r0, [sp, #12]
    7bf6:	f7ff fd4e 	bl	7696 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    7bfa:	f009 f88f 	bl	10d1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    7bfe:	bf00      	nop
    7c00:	b005      	add	sp, #20
    7c02:	f85d fb04 	ldr.w	pc, [sp], #4
    7c06:	bf00      	nop
    7c08:	00018588 	.word	0x00018588

00007c0c <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    7c0c:	b500      	push	{lr}
    7c0e:	b085      	sub	sp, #20
    7c10:	9001      	str	r0, [sp, #4]
    7c12:	460b      	mov	r3, r1
    7c14:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7c18:	4a11      	ldr	r2, [pc, #68]	; (7c60 <Adc_Ip_SetContinuousMode+0x54>)
    7c1a:	9b01      	ldr	r3, [sp, #4]
    7c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c20:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    7c22:	f009 fa8d 	bl	11140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    7c26:	9b03      	ldr	r3, [sp, #12]
    7c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7c2c:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    7c2e:	9b02      	ldr	r3, [sp, #8]
    7c30:	f023 0308 	bic.w	r3, r3, #8
    7c34:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    7c36:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7c3a:	2b00      	cmp	r3, #0
    7c3c:	d001      	beq.n	7c42 <Adc_Ip_SetContinuousMode+0x36>
    7c3e:	2308      	movs	r3, #8
    7c40:	e000      	b.n	7c44 <Adc_Ip_SetContinuousMode+0x38>
    7c42:	2300      	movs	r3, #0
    7c44:	9a02      	ldr	r2, [sp, #8]
    7c46:	4313      	orrs	r3, r2
    7c48:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    7c4a:	9b03      	ldr	r3, [sp, #12]
    7c4c:	9a02      	ldr	r2, [sp, #8]
    7c4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    7c52:	f009 faa1 	bl	11198 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    7c56:	bf00      	nop
    7c58:	b005      	add	sp, #20
    7c5a:	f85d fb04 	ldr.w	pc, [sp], #4
    7c5e:	bf00      	nop
    7c60:	00018588 	.word	0x00018588

00007c64 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    7c64:	b500      	push	{lr}
    7c66:	b085      	sub	sp, #20
    7c68:	9001      	str	r0, [sp, #4]
    7c6a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7c6c:	4a0e      	ldr	r2, [pc, #56]	; (7ca8 <Adc_Ip_SetResolution+0x44>)
    7c6e:	9b01      	ldr	r3, [sp, #4]
    7c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c74:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    7c76:	f008 fab3 	bl	101e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    7c7a:	9b03      	ldr	r3, [sp, #12]
    7c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7c7e:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    7c80:	9b02      	ldr	r3, [sp, #8]
    7c82:	f023 030c 	bic.w	r3, r3, #12
    7c86:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    7c88:	9b00      	ldr	r3, [sp, #0]
    7c8a:	009b      	lsls	r3, r3, #2
    7c8c:	f003 030c 	and.w	r3, r3, #12
    7c90:	9a02      	ldr	r2, [sp, #8]
    7c92:	4313      	orrs	r3, r2
    7c94:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    7c96:	9b03      	ldr	r3, [sp, #12]
    7c98:	9a02      	ldr	r2, [sp, #8]
    7c9a:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    7c9c:	f008 facc 	bl	10238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    7ca0:	bf00      	nop
    7ca2:	b005      	add	sp, #20
    7ca4:	f85d fb04 	ldr.w	pc, [sp], #4
    7ca8:	00018588 	.word	0x00018588

00007cac <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    7cac:	b500      	push	{lr}
    7cae:	b085      	sub	sp, #20
    7cb0:	9001      	str	r0, [sp, #4]
    7cb2:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7cb4:	4a15      	ldr	r2, [pc, #84]	; (7d0c <Adc_Ip_SetClockMode+0x60>)
    7cb6:	9b01      	ldr	r3, [sp, #4]
    7cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cbc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    7cbe:	f008 fc29 	bl	10514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7cc2:	9b00      	ldr	r3, [sp, #0]
    7cc4:	6819      	ldr	r1, [r3, #0]
    7cc6:	9b00      	ldr	r3, [sp, #0]
    7cc8:	685b      	ldr	r3, [r3, #4]
    7cca:	461a      	mov	r2, r3
    7ccc:	9803      	ldr	r0, [sp, #12]
    7cce:	f7ff fc23 	bl	7518 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    7cd2:	f008 fc4b 	bl	1056c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    7cd6:	f008 fd13 	bl	10700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7cda:	9b00      	ldr	r3, [sp, #0]
    7cdc:	7a1b      	ldrb	r3, [r3, #8]
    7cde:	4619      	mov	r1, r3
    7ce0:	9803      	ldr	r0, [sp, #12]
    7ce2:	f7ff fc74 	bl	75ce <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    7ce6:	f008 fd37 	bl	10758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    7cea:	f009 f985 	bl	10ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7cee:	9b00      	ldr	r3, [sp, #0]
    7cf0:	7a59      	ldrb	r1, [r3, #9]
    7cf2:	9b00      	ldr	r3, [sp, #0]
    7cf4:	68db      	ldr	r3, [r3, #12]
    7cf6:	461a      	mov	r2, r3
    7cf8:	9803      	ldr	r0, [sp, #12]
    7cfa:	f7ff fc89 	bl	7610 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    7cfe:	f009 f9a7 	bl	11050 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    7d02:	bf00      	nop
    7d04:	b005      	add	sp, #20
    7d06:	f85d fb04 	ldr.w	pc, [sp], #4
    7d0a:	bf00      	nop
    7d0c:	00018588 	.word	0x00018588

00007d10 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    7d10:	b510      	push	{r4, lr}
    7d12:	b084      	sub	sp, #16
    7d14:	9001      	str	r0, [sp, #4]
    7d16:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7d18:	4a13      	ldr	r2, [pc, #76]	; (7d68 <Adc_Ip_ConfigChannel+0x58>)
    7d1a:	9b01      	ldr	r3, [sp, #4]
    7d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d20:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    7d22:	9b00      	ldr	r3, [sp, #0]
    7d24:	685b      	ldr	r3, [r3, #4]
    7d26:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    7d28:	f008 ff28 	bl	10b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    7d2c:	9b00      	ldr	r3, [sp, #0]
    7d2e:	7819      	ldrb	r1, [r3, #0]
    7d30:	9b00      	ldr	r3, [sp, #0]
    7d32:	7a1b      	ldrb	r3, [r3, #8]
    7d34:	9a02      	ldr	r2, [sp, #8]
    7d36:	9803      	ldr	r0, [sp, #12]
    7d38:	f7ff fcd5 	bl	76e6 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    7d3c:	f008 ff4a 	bl	10bd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    7d40:	9b00      	ldr	r3, [sp, #0]
    7d42:	781b      	ldrb	r3, [r3, #0]
    7d44:	461c      	mov	r4, r3
    7d46:	9b00      	ldr	r3, [sp, #0]
    7d48:	6859      	ldr	r1, [r3, #4]
    7d4a:	4808      	ldr	r0, [pc, #32]	; (7d6c <Adc_Ip_ConfigChannel+0x5c>)
    7d4c:	9a01      	ldr	r2, [sp, #4]
    7d4e:	4613      	mov	r3, r2
    7d50:	00db      	lsls	r3, r3, #3
    7d52:	4413      	add	r3, r2
    7d54:	005b      	lsls	r3, r3, #1
    7d56:	4413      	add	r3, r2
    7d58:	4423      	add	r3, r4
    7d5a:	3302      	adds	r3, #2
    7d5c:	009b      	lsls	r3, r3, #2
    7d5e:	4403      	add	r3, r0
    7d60:	6059      	str	r1, [r3, #4]
}
    7d62:	bf00      	nop
    7d64:	b004      	add	sp, #16
    7d66:	bd10      	pop	{r4, pc}
    7d68:	00018588 	.word	0x00018588
    7d6c:	1fff8d00 	.word	0x1fff8d00

00007d70 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    7d70:	b500      	push	{lr}
    7d72:	b089      	sub	sp, #36	; 0x24
    7d74:	9001      	str	r0, [sp, #4]
    7d76:	460b      	mov	r3, r1
    7d78:	f88d 3003 	strb.w	r3, [sp, #3]
    7d7c:	4613      	mov	r3, r2
    7d7e:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7d82:	4a24      	ldr	r2, [pc, #144]	; (7e14 <Adc_Ip_SetDisabledChannel+0xa4>)
    7d84:	9b01      	ldr	r3, [sp, #4]
    7d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d8a:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7d8c:	2300      	movs	r3, #0
    7d8e:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7d90:	2100      	movs	r1, #0
    7d92:	4821      	ldr	r0, [pc, #132]	; (7e18 <Adc_Ip_SetDisabledChannel+0xa8>)
    7d94:	f7fa f8b6 	bl	1f04 <OsIf_MicrosToTicks>
    7d98:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7d9a:	2000      	movs	r0, #0
    7d9c:	f7fa f866 	bl	1e6c <OsIf_GetCounter>
    7da0:	4603      	mov	r3, r0
    7da2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    7da4:	2300      	movs	r3, #0
    7da6:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    7da8:	f008 fda0 	bl	108ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    7dac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7db0:	9b05      	ldr	r3, [sp, #20]
    7db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7db6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7dba:	f043 011f 	orr.w	r1, r3, #31
    7dbe:	9b05      	ldr	r3, [sp, #20]
    7dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    7dc4:	f008 fdbe 	bl	10944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    7dc8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7dcc:	2b00      	cmp	r3, #0
    7dce:	d01c      	beq.n	7e0a <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7dd0:	e008      	b.n	7de4 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    7dd2:	ab03      	add	r3, sp, #12
    7dd4:	2100      	movs	r1, #0
    7dd6:	4618      	mov	r0, r3
    7dd8:	f7fa f861 	bl	1e9e <OsIf_GetElapsed>
    7ddc:	4602      	mov	r2, r0
    7dde:	9b06      	ldr	r3, [sp, #24]
    7de0:	4413      	add	r3, r2
    7de2:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7de4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7de8:	9b05      	ldr	r3, [sp, #20]
    7dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7dee:	f003 031f 	and.w	r3, r3, #31
    7df2:	2b1f      	cmp	r3, #31
    7df4:	d003      	beq.n	7dfe <Adc_Ip_SetDisabledChannel+0x8e>
    7df6:	9a06      	ldr	r2, [sp, #24]
    7df8:	9b04      	ldr	r3, [sp, #16]
    7dfa:	429a      	cmp	r2, r3
    7dfc:	d3e9      	bcc.n	7dd2 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    7dfe:	9a06      	ldr	r2, [sp, #24]
    7e00:	9b04      	ldr	r3, [sp, #16]
    7e02:	429a      	cmp	r2, r3
    7e04:	d301      	bcc.n	7e0a <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    7e06:	2302      	movs	r3, #2
    7e08:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    7e0a:	9b07      	ldr	r3, [sp, #28]
}
    7e0c:	4618      	mov	r0, r3
    7e0e:	b009      	add	sp, #36	; 0x24
    7e10:	f85d fb04 	ldr.w	pc, [sp], #4
    7e14:	00018588 	.word	0x00018588
    7e18:	000186a0 	.word	0x000186a0

00007e1c <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    7e1c:	b500      	push	{lr}
    7e1e:	b087      	sub	sp, #28
    7e20:	9003      	str	r0, [sp, #12]
    7e22:	9102      	str	r1, [sp, #8]
    7e24:	4613      	mov	r3, r2
    7e26:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7e2a:	4a0a      	ldr	r2, [pc, #40]	; (7e54 <Adc_Ip_StartConversion+0x38>)
    7e2c:	9b03      	ldr	r3, [sp, #12]
    7e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e32:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    7e34:	f008 fdac 	bl	10990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    7e38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e3c:	9a02      	ldr	r2, [sp, #8]
    7e3e:	2100      	movs	r1, #0
    7e40:	9805      	ldr	r0, [sp, #20]
    7e42:	f7ff fc50 	bl	76e6 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    7e46:	f008 fdcf 	bl	109e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    7e4a:	bf00      	nop
    7e4c:	b007      	add	sp, #28
    7e4e:	f85d fb04 	ldr.w	pc, [sp], #4
    7e52:	bf00      	nop
    7e54:	00018588 	.word	0x00018588

00007e58 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    7e58:	b084      	sub	sp, #16
    7e5a:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7e5c:	4a0b      	ldr	r2, [pc, #44]	; (7e8c <Adc_Ip_GetConvActiveFlag+0x34>)
    7e5e:	9b01      	ldr	r3, [sp, #4]
    7e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e64:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    7e66:	9b03      	ldr	r3, [sp, #12]
    7e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7e6c:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    7e6e:	9b02      	ldr	r3, [sp, #8]
    7e70:	09db      	lsrs	r3, r3, #7
    7e72:	f003 0301 	and.w	r3, r3, #1
    7e76:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    7e78:	9b02      	ldr	r3, [sp, #8]
    7e7a:	2b00      	cmp	r3, #0
    7e7c:	bf14      	ite	ne
    7e7e:	2301      	movne	r3, #1
    7e80:	2300      	moveq	r3, #0
    7e82:	b2db      	uxtb	r3, r3
}
    7e84:	4618      	mov	r0, r3
    7e86:	b004      	add	sp, #16
    7e88:	4770      	bx	lr
    7e8a:	bf00      	nop
    7e8c:	00018588 	.word	0x00018588

00007e90 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    7e90:	b500      	push	{lr}
    7e92:	b085      	sub	sp, #20
    7e94:	9001      	str	r0, [sp, #4]
    7e96:	460b      	mov	r3, r1
    7e98:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7e9c:	4a08      	ldr	r2, [pc, #32]	; (7ec0 <Adc_Ip_GetChanInterrupt+0x30>)
    7e9e:	9b01      	ldr	r3, [sp, #4]
    7ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ea4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7eac:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    7eae:	9803      	ldr	r0, [sp, #12]
    7eb0:	f7ff fc5e 	bl	7770 <Adc_HwAcc_GetAIEN>
    7eb4:	4603      	mov	r3, r0
}
    7eb6:	4618      	mov	r0, r3
    7eb8:	b005      	add	sp, #20
    7eba:	f85d fb04 	ldr.w	pc, [sp], #4
    7ebe:	bf00      	nop
    7ec0:	00018588 	.word	0x00018588

00007ec4 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    7ec4:	b500      	push	{lr}
    7ec6:	b085      	sub	sp, #20
    7ec8:	9001      	str	r0, [sp, #4]
    7eca:	460b      	mov	r3, r1
    7ecc:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7ed0:	4a08      	ldr	r2, [pc, #32]	; (7ef4 <Adc_Ip_GetConvCompleteFlag+0x30>)
    7ed2:	9b01      	ldr	r3, [sp, #4]
    7ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ed8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ee0:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    7ee2:	9803      	ldr	r0, [sp, #12]
    7ee4:	f7ff fc52 	bl	778c <Adc_HwAcc_GetCOCO>
    7ee8:	4603      	mov	r3, r0
}
    7eea:	4618      	mov	r0, r3
    7eec:	b005      	add	sp, #20
    7eee:	f85d fb04 	ldr.w	pc, [sp], #4
    7ef2:	bf00      	nop
    7ef4:	00018588 	.word	0x00018588

00007ef8 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    7ef8:	b500      	push	{lr}
    7efa:	b085      	sub	sp, #20
    7efc:	9001      	str	r0, [sp, #4]
    7efe:	460b      	mov	r3, r1
    7f00:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7f04:	4a07      	ldr	r2, [pc, #28]	; (7f24 <Adc_Ip_GetConvData+0x2c>)
    7f06:	9b01      	ldr	r3, [sp, #4]
    7f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f0c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    7f0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7f12:	4619      	mov	r1, r3
    7f14:	9803      	ldr	r0, [sp, #12]
    7f16:	f7ff fc47 	bl	77a8 <Adc_HwAcc_GetData>
    7f1a:	4603      	mov	r3, r0
}
    7f1c:	4618      	mov	r0, r3
    7f1e:	b005      	add	sp, #20
    7f20:	f85d fb04 	ldr.w	pc, [sp], #4
    7f24:	00018588 	.word	0x00018588

00007f28 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    7f28:	b500      	push	{lr}
    7f2a:	b093      	sub	sp, #76	; 0x4c
    7f2c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7f2e:	4a59      	ldr	r2, [pc, #356]	; (8094 <Adc_Ip_DoCalibration+0x16c>)
    7f30:	9b01      	ldr	r3, [sp, #4]
    7f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f36:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7f38:	2300      	movs	r3, #0
    7f3a:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7f3c:	2100      	movs	r1, #0
    7f3e:	4856      	ldr	r0, [pc, #344]	; (8098 <Adc_Ip_DoCalibration+0x170>)
    7f40:	f7f9 ffe0 	bl	1f04 <OsIf_MicrosToTicks>
    7f44:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7f46:	2000      	movs	r0, #0
    7f48:	f7f9 ff90 	bl	1e6c <OsIf_GetCounter>
    7f4c:	4603      	mov	r3, r0
    7f4e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    7f50:	2300      	movs	r3, #0
    7f52:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    7f54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7f5a:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    7f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7f5e:	089b      	lsrs	r3, r3, #2
    7f60:	f003 0301 	and.w	r3, r3, #1
    7f64:	2b00      	cmp	r3, #0
    7f66:	bf14      	ite	ne
    7f68:	2301      	movne	r3, #1
    7f6a:	2300      	moveq	r3, #0
    7f6c:	b2db      	uxtb	r3, r3
    7f6e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    7f72:	980d      	ldr	r0, [sp, #52]	; 0x34
    7f74:	f7ff fb71 	bl	765a <Adc_HwAcc_GetAverageSelect>
    7f78:	4603      	mov	r3, r0
    7f7a:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    7f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7f80:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    7f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7f84:	b2db      	uxtb	r3, r3
    7f86:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    7f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7f90:	4618      	mov	r0, r3
    7f92:	f7ff fb99 	bl	76c8 <Adc_HwAcc_GetTriggerMode>
    7f96:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    7f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7f9c:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    7f9e:	980d      	ldr	r0, [sp, #52]	; 0x34
    7fa0:	f7ff fad8 	bl	7554 <Adc_HwAcc_GetClockDivide>
    7fa4:	4603      	mov	r3, r0
    7fa6:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    7fa8:	980d      	ldr	r0, [sp, #52]	; 0x34
    7faa:	f7ff faf2 	bl	7592 <Adc_HwAcc_GetInputClock>
    7fae:	4603      	mov	r3, r0
    7fb0:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    7fb2:	2301      	movs	r3, #1
    7fb4:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    7fb8:	2303      	movs	r3, #3
    7fba:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    7fbc:	230c      	movs	r3, #12
    7fbe:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    7fc2:	4a36      	ldr	r2, [pc, #216]	; (809c <Adc_Ip_DoCalibration+0x174>)
    7fc4:	9b01      	ldr	r3, [sp, #4]
    7fc6:	214c      	movs	r1, #76	; 0x4c
    7fc8:	fb01 f303 	mul.w	r3, r1, r3
    7fcc:	4413      	add	r3, r2
    7fce:	3304      	adds	r3, #4
    7fd0:	681b      	ldr	r3, [r3, #0]
    7fd2:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    7fd4:	9b08      	ldr	r3, [sp, #32]
    7fd6:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    7fd8:	ab03      	add	r3, sp, #12
    7fda:	2200      	movs	r2, #0
    7fdc:	4619      	mov	r1, r3
    7fde:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7fe0:	f7ff fbfa 	bl	77d8 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    7fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fe6:	2200      	movs	r2, #0
    7fe8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    7fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fee:	2200      	movs	r2, #0
    7ff0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    7ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ff6:	2200      	movs	r2, #0
    7ff8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    7ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ffe:	2200      	movs	r2, #0
    8000:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    8004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8006:	2200      	movs	r2, #0
    8008:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    800c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    800e:	2200      	movs	r2, #0
    8010:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    8014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8016:	2200      	movs	r2, #0
    8018:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    801c:	f009 f83e 	bl	1109c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    8020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8026:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    8028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    802a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    802e:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    8030:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8036:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    8038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    803a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    803c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8040:	f009 f858 	bl	110f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8044:	e008      	b.n	8058 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8046:	ab0b      	add	r3, sp, #44	; 0x2c
    8048:	2100      	movs	r1, #0
    804a:	4618      	mov	r0, r3
    804c:	f7f9 ff27 	bl	1e9e <OsIf_GetElapsed>
    8050:	4602      	mov	r2, r0
    8052:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8054:	4413      	add	r3, r2
    8056:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    805a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    805e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8062:	2b00      	cmp	r3, #0
    8064:	d003      	beq.n	806e <Adc_Ip_DoCalibration+0x146>
    8066:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    806a:	429a      	cmp	r2, r3
    806c:	d3eb      	bcc.n	8046 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    806e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8072:	429a      	cmp	r2, r3
    8074:	d301      	bcc.n	807a <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8076:	2302      	movs	r3, #2
    8078:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    807a:	ab07      	add	r3, sp, #28
    807c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    807e:	4619      	mov	r1, r3
    8080:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8082:	f7ff fba9 	bl	77d8 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    8086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8088:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    808a:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    808c:	4618      	mov	r0, r3
    808e:	b013      	add	sp, #76	; 0x4c
    8090:	f85d fb04 	ldr.w	pc, [sp], #4
    8094:	00018588 	.word	0x00018588
    8098:	000186a0 	.word	0x000186a0
    809c:	1fff8d00 	.word	0x1fff8d00

000080a0 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    80a0:	b500      	push	{lr}
    80a2:	b089      	sub	sp, #36	; 0x24
    80a4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    80a6:	4a1e      	ldr	r2, [pc, #120]	; (8120 <Adc_Ip_ClearLatchedTriggers+0x80>)
    80a8:	9b01      	ldr	r3, [sp, #4]
    80aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80ae:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    80b0:	2300      	movs	r3, #0
    80b2:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    80b4:	2100      	movs	r1, #0
    80b6:	481b      	ldr	r0, [pc, #108]	; (8124 <Adc_Ip_ClearLatchedTriggers+0x84>)
    80b8:	f7f9 ff24 	bl	1f04 <OsIf_MicrosToTicks>
    80bc:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    80be:	2000      	movs	r0, #0
    80c0:	f7f9 fed4 	bl	1e6c <OsIf_GetCounter>
    80c4:	4603      	mov	r3, r0
    80c6:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    80c8:	2300      	movs	r3, #0
    80ca:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    80cc:	f008 fa74 	bl	105b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    80d0:	9b05      	ldr	r3, [sp, #20]
    80d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    80d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    80d8:	9b05      	ldr	r3, [sp, #20]
    80da:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    80dc:	f008 fa98 	bl	10610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    80e0:	e008      	b.n	80f4 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    80e2:	ab03      	add	r3, sp, #12
    80e4:	2100      	movs	r1, #0
    80e6:	4618      	mov	r0, r3
    80e8:	f7f9 fed9 	bl	1e9e <OsIf_GetElapsed>
    80ec:	4602      	mov	r2, r0
    80ee:	9b06      	ldr	r3, [sp, #24]
    80f0:	4413      	add	r3, r2
    80f2:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    80f4:	9b05      	ldr	r3, [sp, #20]
    80f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    80fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    80fe:	2b00      	cmp	r3, #0
    8100:	d003      	beq.n	810a <Adc_Ip_ClearLatchedTriggers+0x6a>
    8102:	9a06      	ldr	r2, [sp, #24]
    8104:	9b04      	ldr	r3, [sp, #16]
    8106:	429a      	cmp	r2, r3
    8108:	d3eb      	bcc.n	80e2 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    810a:	9a06      	ldr	r2, [sp, #24]
    810c:	9b04      	ldr	r3, [sp, #16]
    810e:	429a      	cmp	r2, r3
    8110:	d301      	bcc.n	8116 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8112:	2302      	movs	r3, #2
    8114:	9307      	str	r3, [sp, #28]
    }

    return Status;
    8116:	9b07      	ldr	r3, [sp, #28]
}
    8118:	4618      	mov	r0, r3
    811a:	b009      	add	sp, #36	; 0x24
    811c:	f85d fb04 	ldr.w	pc, [sp], #4
    8120:	00018588 	.word	0x00018588
    8124:	000186a0 	.word	0x000186a0

00008128 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    8128:	b500      	push	{lr}
    812a:	b085      	sub	sp, #20
    812c:	9001      	str	r0, [sp, #4]
    812e:	460b      	mov	r3, r1
    8130:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8134:	4a0c      	ldr	r2, [pc, #48]	; (8168 <Adc_Ip_EnableChannelNotification+0x40>)
    8136:	9b01      	ldr	r3, [sp, #4]
    8138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    813c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    813e:	f008 fc79 	bl	10a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    8142:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8146:	9b03      	ldr	r3, [sp, #12]
    8148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    814c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8150:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    8154:	9b03      	ldr	r3, [sp, #12]
    8156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    815a:	f008 fc97 	bl	10a8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    815e:	bf00      	nop
    8160:	b005      	add	sp, #20
    8162:	f85d fb04 	ldr.w	pc, [sp], #4
    8166:	bf00      	nop
    8168:	00018588 	.word	0x00018588

0000816c <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    816c:	b500      	push	{lr}
    816e:	b085      	sub	sp, #20
    8170:	9001      	str	r0, [sp, #4]
    8172:	460b      	mov	r3, r1
    8174:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8178:	4a0c      	ldr	r2, [pc, #48]	; (81ac <Adc_Ip_DisableChannelNotification+0x40>)
    817a:	9b01      	ldr	r3, [sp, #4]
    817c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8180:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    8182:	f008 fca9 	bl	10ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    8186:	f89d 2003 	ldrb.w	r2, [sp, #3]
    818a:	9b03      	ldr	r3, [sp, #12]
    818c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8190:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8194:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    8198:	9b03      	ldr	r3, [sp, #12]
    819a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    819e:	f008 fcc7 	bl	10b30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    81a2:	bf00      	nop
    81a4:	b005      	add	sp, #20
    81a6:	f85d fb04 	ldr.w	pc, [sp], #4
    81aa:	bf00      	nop
    81ac:	00018588 	.word	0x00018588

000081b0 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    81b0:	b500      	push	{lr}
    81b2:	b085      	sub	sp, #20
    81b4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    81b6:	4a0a      	ldr	r2, [pc, #40]	; (81e0 <Adc_Ip_ClearTrigErrReg+0x30>)
    81b8:	9b01      	ldr	r3, [sp, #4]
    81ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81be:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    81c0:	f008 fe24 	bl	10e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    81c4:	9b03      	ldr	r3, [sp, #12]
    81c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    81ca:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    81ce:	9b03      	ldr	r3, [sp, #12]
    81d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    81d4:	f008 fe46 	bl	10e64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    81d8:	bf00      	nop
    81da:	b005      	add	sp, #20
    81dc:	f85d fb04 	ldr.w	pc, [sp], #4
    81e0:	00018588 	.word	0x00018588

000081e4 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    81e4:	b084      	sub	sp, #16
    81e6:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    81e8:	4a06      	ldr	r2, [pc, #24]	; (8204 <Adc_Ip_GetTrigErrReg+0x20>)
    81ea:	9b01      	ldr	r3, [sp, #4]
    81ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81f0:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    81f2:	9b03      	ldr	r3, [sp, #12]
    81f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    81f8:	0e1b      	lsrs	r3, r3, #24
    81fa:	f003 030f 	and.w	r3, r3, #15
}
    81fe:	4618      	mov	r0, r3
    8200:	b004      	add	sp, #16
    8202:	4770      	bx	lr
    8204:	00018588 	.word	0x00018588

00008208 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8208:	b082      	sub	sp, #8
    820a:	9001      	str	r0, [sp, #4]
    820c:	460b      	mov	r3, r1
    820e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    8212:	4a06      	ldr	r2, [pc, #24]	; (822c <Adc_Ip_GetDataAddress+0x24>)
    8214:	9b01      	ldr	r3, [sp, #4]
    8216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    821a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    821e:	3312      	adds	r3, #18
    8220:	009b      	lsls	r3, r3, #2
    8222:	4413      	add	r3, r2
}
    8224:	4618      	mov	r0, r3
    8226:	b002      	add	sp, #8
    8228:	4770      	bx	lr
    822a:	bf00      	nop
    822c:	00018588 	.word	0x00018588

00008230 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    8230:	b088      	sub	sp, #32
    8232:	9003      	str	r0, [sp, #12]
    8234:	9102      	str	r1, [sp, #8]
    8236:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8238:	4a25      	ldr	r2, [pc, #148]	; (82d0 <Adc_Ip_GetChanData+0xa0>)
    823a:	9b03      	ldr	r3, [sp, #12]
    823c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8240:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8242:	2300      	movs	r3, #0
    8244:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    8246:	2300      	movs	r3, #0
    8248:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    824c:	2300      	movs	r3, #0
    824e:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8252:	2300      	movs	r3, #0
    8254:	f88d 3019 	strb.w	r3, [sp, #25]
    8258:	e019      	b.n	828e <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    825a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    825e:	481d      	ldr	r0, [pc, #116]	; (82d4 <Adc_Ip_GetChanData+0xa4>)
    8260:	9a03      	ldr	r2, [sp, #12]
    8262:	4613      	mov	r3, r2
    8264:	00db      	lsls	r3, r3, #3
    8266:	4413      	add	r3, r2
    8268:	005b      	lsls	r3, r3, #1
    826a:	4413      	add	r3, r2
    826c:	440b      	add	r3, r1
    826e:	3302      	adds	r3, #2
    8270:	009b      	lsls	r3, r3, #2
    8272:	4403      	add	r3, r0
    8274:	685b      	ldr	r3, [r3, #4]
    8276:	9a02      	ldr	r2, [sp, #8]
    8278:	429a      	cmp	r2, r3
    827a:	d103      	bne.n	8284 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    827c:	2301      	movs	r3, #1
    827e:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    8282:	e008      	b.n	8296 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8284:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8288:	3301      	adds	r3, #1
    828a:	f88d 3019 	strb.w	r3, [sp, #25]
    828e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8292:	2b0f      	cmp	r3, #15
    8294:	d9e1      	bls.n	825a <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8296:	f89d 3018 	ldrb.w	r3, [sp, #24]
    829a:	2b00      	cmp	r3, #0
    829c:	d00e      	beq.n	82bc <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    829e:	f89d 2019 	ldrb.w	r2, [sp, #25]
    82a2:	9b05      	ldr	r3, [sp, #20]
    82a4:	3212      	adds	r2, #18
    82a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    82aa:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    82ae:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    82b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    82b6:	f8ad 301a 	strh.w	r3, [sp, #26]
    82ba:	e001      	b.n	82c0 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    82bc:	2301      	movs	r3, #1
    82be:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    82c0:	9b01      	ldr	r3, [sp, #4]
    82c2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    82c6:	801a      	strh	r2, [r3, #0]

    return Status;
    82c8:	9b07      	ldr	r3, [sp, #28]
}
    82ca:	4618      	mov	r0, r3
    82cc:	b008      	add	sp, #32
    82ce:	4770      	bx	lr
    82d0:	00018588 	.word	0x00018588
    82d4:	1fff8d00 	.word	0x1fff8d00

000082d8 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    82d8:	b500      	push	{lr}
    82da:	b085      	sub	sp, #20
    82dc:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    82de:	2300      	movs	r3, #0
    82e0:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    82e4:	2300      	movs	r3, #0
    82e6:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    82ea:	4a32      	ldr	r2, [pc, #200]	; (83b4 <Adc_Ip_IRQHandler+0xdc>)
    82ec:	9b01      	ldr	r3, [sp, #4]
    82ee:	214c      	movs	r1, #76	; 0x4c
    82f0:	fb01 f303 	mul.w	r3, r1, r3
    82f4:	4413      	add	r3, r2
    82f6:	781b      	ldrb	r3, [r3, #0]
    82f8:	2b00      	cmp	r3, #0
    82fa:	d040      	beq.n	837e <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    82fc:	4a2d      	ldr	r2, [pc, #180]	; (83b4 <Adc_Ip_IRQHandler+0xdc>)
    82fe:	9b01      	ldr	r3, [sp, #4]
    8300:	214c      	movs	r1, #76	; 0x4c
    8302:	fb01 f303 	mul.w	r3, r1, r3
    8306:	4413      	add	r3, r2
    8308:	3308      	adds	r3, #8
    830a:	681b      	ldr	r3, [r3, #0]
    830c:	2b00      	cmp	r3, #0
    830e:	d04d      	beq.n	83ac <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8310:	2300      	movs	r3, #0
    8312:	f88d 300f 	strb.w	r3, [sp, #15]
    8316:	e02d      	b.n	8374 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8318:	4a27      	ldr	r2, [pc, #156]	; (83b8 <Adc_Ip_IRQHandler+0xe0>)
    831a:	9b01      	ldr	r3, [sp, #4]
    831c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8320:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8328:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    832a:	9802      	ldr	r0, [sp, #8]
    832c:	f7ff fa20 	bl	7770 <Adc_HwAcc_GetAIEN>
    8330:	4603      	mov	r3, r0
    8332:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    8336:	9802      	ldr	r0, [sp, #8]
    8338:	f7ff fa28 	bl	778c <Adc_HwAcc_GetCOCO>
    833c:	4603      	mov	r3, r0
    833e:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    8342:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8346:	2b00      	cmp	r3, #0
    8348:	d00f      	beq.n	836a <Adc_Ip_IRQHandler+0x92>
    834a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    834e:	2b00      	cmp	r3, #0
    8350:	d00b      	beq.n	836a <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    8352:	4a18      	ldr	r2, [pc, #96]	; (83b4 <Adc_Ip_IRQHandler+0xdc>)
    8354:	9b01      	ldr	r3, [sp, #4]
    8356:	214c      	movs	r1, #76	; 0x4c
    8358:	fb01 f303 	mul.w	r3, r1, r3
    835c:	4413      	add	r3, r2
    835e:	3308      	adds	r3, #8
    8360:	681b      	ldr	r3, [r3, #0]
    8362:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8366:	4610      	mov	r0, r2
    8368:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    836a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    836e:	3301      	adds	r3, #1
    8370:	f88d 300f 	strb.w	r3, [sp, #15]
    8374:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8378:	2b0f      	cmp	r3, #15
    837a:	d9cd      	bls.n	8318 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    837c:	e016      	b.n	83ac <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    837e:	2300      	movs	r3, #0
    8380:	f88d 300f 	strb.w	r3, [sp, #15]
    8384:	e00e      	b.n	83a4 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8386:	4a0c      	ldr	r2, [pc, #48]	; (83b8 <Adc_Ip_IRQHandler+0xe0>)
    8388:	9b01      	ldr	r3, [sp, #4]
    838a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    838e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8392:	4611      	mov	r1, r2
    8394:	4618      	mov	r0, r3
    8396:	f7ff fa07 	bl	77a8 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    839a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    839e:	3301      	adds	r3, #1
    83a0:	f88d 300f 	strb.w	r3, [sp, #15]
    83a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83a8:	2b0f      	cmp	r3, #15
    83aa:	d9ec      	bls.n	8386 <Adc_Ip_IRQHandler+0xae>
}
    83ac:	bf00      	nop
    83ae:	b005      	add	sp, #20
    83b0:	f85d fb04 	ldr.w	pc, [sp], #4
    83b4:	1fff8d00 	.word	0x1fff8d00
    83b8:	00018588 	.word	0x00018588

000083bc <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    83bc:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    83be:	2000      	movs	r0, #0
    83c0:	f7ff ff8a 	bl	82d8 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    83c4:	f3bf 8f4f 	dsb	sy
}
    83c8:	bf00      	nop
    83ca:	bd08      	pop	{r3, pc}

000083cc <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    83cc:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    83ce:	2001      	movs	r0, #1
    83d0:	f7ff ff82 	bl	82d8 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    83d4:	f3bf 8f4f 	dsb	sy
}
    83d8:	bf00      	nop
    83da:	bd08      	pop	{r3, pc}

000083dc <Lpspi_Ip_ChannelFinished>:
* @param[in]     Instance            Index of the hardware instance.
* @param[in]     ErrorFlag           Save the status of transfer error flags
* @return void
*/
static void Lpspi_Ip_ChannelFinished(uint8 Instance, boolean ErrorFlag)
{
    83dc:	b500      	push	{lr}
    83de:	b085      	sub	sp, #20
    83e0:	4603      	mov	r3, r0
    83e2:	460a      	mov	r2, r1
    83e4:	f88d 3007 	strb.w	r3, [sp, #7]
    83e8:	4613      	mov	r3, r2
    83ea:	f88d 3006 	strb.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    83ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    83f2:	4a12      	ldr	r2, [pc, #72]	; (843c <Lpspi_Ip_ChannelFinished+0x60>)
    83f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83f8:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_EventType EventState = LPSPI_IP_EVENT_FAULT;
    83fa:	2301      	movs	r3, #1
    83fc:	9303      	str	r3, [sp, #12]
    
    if(TRUE == ErrorFlag)
    83fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8402:	2b00      	cmp	r3, #0
    8404:	d005      	beq.n	8412 <Lpspi_Ip_ChannelFinished+0x36>
    {
        State->Status = LPSPI_IP_FAULT;
    8406:	9b02      	ldr	r3, [sp, #8]
    8408:	2203      	movs	r2, #3
    840a:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_FAULT;
    840c:	2301      	movs	r3, #1
    840e:	9303      	str	r3, [sp, #12]
    8410:	e004      	b.n	841c <Lpspi_Ip_ChannelFinished+0x40>
    }
    else
    {
        State->Status = LPSPI_IP_IDLE;
    8412:	9b02      	ldr	r3, [sp, #8]
    8414:	2201      	movs	r2, #1
    8416:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_END_TRANSFER;
    8418:	2300      	movs	r3, #0
    841a:	9303      	str	r3, [sp, #12]
    }

    if (NULL_PTR != State->Callback)
    841c:	9b02      	ldr	r3, [sp, #8]
    841e:	691b      	ldr	r3, [r3, #16]
    8420:	2b00      	cmp	r3, #0
    8422:	d006      	beq.n	8432 <Lpspi_Ip_ChannelFinished+0x56>
    {
        State->Callback(Instance, EventState);
    8424:	9b02      	ldr	r3, [sp, #8]
    8426:	691b      	ldr	r3, [r3, #16]
    8428:	f89d 2007 	ldrb.w	r2, [sp, #7]
    842c:	9903      	ldr	r1, [sp, #12]
    842e:	4610      	mov	r0, r2
    8430:	4798      	blx	r3
    }
}
    8432:	bf00      	nop
    8434:	b005      	add	sp, #20
    8436:	f85d fb04 	ldr.w	pc, [sp], #4
    843a:	bf00      	nop
    843c:	1fff8dd8 	.word	0x1fff8dd8

00008440 <Lpspi_Ip_TransferProcess>:
*
* @param[in]     Instance      Index of the hardware instance.
* @return void
*/
static void Lpspi_Ip_TransferProcess(uint8 Instance)
{
    8440:	b510      	push	{r4, lr}
    8442:	b092      	sub	sp, #72	; 0x48
    8444:	4603      	mov	r3, r0
    8446:	f88d 300f 	strb.w	r3, [sp, #15]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    844a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    844e:	4aad      	ldr	r2, [pc, #692]	; (8704 <Lpspi_Ip_TransferProcess+0x2c4>)
    8450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8454:	9310      	str	r3, [sp, #64]	; 0x40
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8456:	f89d 300f 	ldrb.w	r3, [sp, #15]
    845a:	4aab      	ldr	r2, [pc, #684]	; (8708 <Lpspi_Ip_TransferProcess+0x2c8>)
    845c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8460:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32 SrStatusRegister;
    uint8 NumberOfWrites = 0u;
    8462:	2300      	movs	r3, #0
    8464:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    uint8 NumberOfReads = 0u;
    8468:	2300      	movs	r3, #0
    846a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    boolean ErrorFlag = FALSE;
    846e:	2300      	movs	r3, #0
    8470:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45

    if (LPSPI_IP_BUSY == State->Status)
    8474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8476:	685b      	ldr	r3, [r3, #4]
    8478:	2b02      	cmp	r3, #2
    847a:	f040 821e 	bne.w	88ba <Lpspi_Ip_TransferProcess+0x47a>
    {
        /* Read Status and clear all flags. */
        SrStatusRegister = Base->SR;
    847e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8480:	695b      	ldr	r3, [r3, #20]
    8482:	930e      	str	r3, [sp, #56]	; 0x38
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    8484:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8486:	695b      	ldr	r3, [r3, #20]
    8488:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    848c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    848e:	615a      	str	r2, [r3, #20]
        
        if ((SrStatusRegister & (LPSPI_SR_REF_MASK | LPSPI_SR_TEF_MASK)) != 0u)
    8490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8492:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    8496:	2b00      	cmp	r3, #0
    8498:	d003      	beq.n	84a2 <Lpspi_Ip_TransferProcess+0x62>
        {
            /* mark error flag */
            ErrorFlag = TRUE;
    849a:	2301      	movs	r3, #1
    849c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    84a0:	e1f6      	b.n	8890 <Lpspi_Ip_TransferProcess+0x450>
        }
        else
        {
            /* RECEIVE */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    84a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    84a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    84a6:	0c1b      	lsrs	r3, r3, #16
    84a8:	b2db      	uxtb	r3, r3
    84aa:	f003 0307 	and.w	r3, r3, #7
    84ae:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if (NumberOfReads != 0u)
    84b2:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    84b6:	2b00      	cmp	r3, #0
    84b8:	f000 80cb 	beq.w	8652 <Lpspi_Ip_TransferProcess+0x212>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    84bc:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    84c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84c2:	8b1b      	ldrh	r3, [r3, #24]
    84c4:	4619      	mov	r1, r3
    84c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84c8:	8a9b      	ldrh	r3, [r3, #20]
    84ca:	1acb      	subs	r3, r1, r3
    84cc:	429a      	cmp	r2, r3
    84ce:	dd08      	ble.n	84e2 <Lpspi_Ip_TransferProcess+0xa2>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    84d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84d2:	8b1b      	ldrh	r3, [r3, #24]
    84d4:	b2da      	uxtb	r2, r3
    84d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84d8:	8a9b      	ldrh	r3, [r3, #20]
    84da:	b2db      	uxtb	r3, r3
    84dc:	1ad3      	subs	r3, r2, r3
    84de:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out and
                  CurrentTxFifoSlot was minus 1 when prepare TX channel */
                if (0u == State->RxIndex)
    84e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84e4:	8a9b      	ldrh	r3, [r3, #20]
    84e6:	2b00      	cmp	r3, #0
    84e8:	d107      	bne.n	84fa <Lpspi_Ip_TransferProcess+0xba>
                {
                    State->CurrentTxFifoSlot += 1u;
    84ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    84f0:	3301      	adds	r3, #1
    84f2:	b2da      	uxtb	r2, r3
    84f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    84fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84fe:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    8502:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    8506:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    850a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    850e:	4a7d      	ldr	r2, [pc, #500]	; (8704 <Lpspi_Ip_TransferProcess+0x2c4>)
    8510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8514:	930c      	str	r3, [sp, #48]	; 0x30
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8516:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    851a:	4a7b      	ldr	r2, [pc, #492]	; (8708 <Lpspi_Ip_TransferProcess+0x2c8>)
    851c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8520:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 Data = 0u;
    8522:	2300      	movs	r3, #0
    8524:	930a      	str	r3, [sp, #40]	; 0x28
    uint8 Index = 0u;
    8526:	2300      	movs	r3, #0
    8528:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    if (NULL_PTR != State->RxBuffer)
    852c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    852e:	689b      	ldr	r3, [r3, #8]
    8530:	2b00      	cmp	r3, #0
    8532:	d069      	beq.n	8608 <Lpspi_Ip_TransferProcess+0x1c8>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    8534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8538:	68db      	ldr	r3, [r3, #12]
    853a:	881b      	ldrh	r3, [r3, #0]
    853c:	2b08      	cmp	r3, #8
    853e:	d81e      	bhi.n	857e <Lpspi_Ip_TransferProcess+0x13e>
            for (Index = 0; Index < NumberOfReads; Index++)
    8540:	2300      	movs	r3, #0
    8542:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8546:	e013      	b.n	8570 <Lpspi_Ip_TransferProcess+0x130>
                Data = Base->RDR;
    8548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    854a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    854c:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    854e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8550:	689b      	ldr	r3, [r3, #8]
    8552:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8554:	8a92      	ldrh	r2, [r2, #20]
    8556:	4611      	mov	r1, r2
    8558:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    855c:	440a      	add	r2, r1
    855e:	4413      	add	r3, r2
    8560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8562:	b2d2      	uxtb	r2, r2
    8564:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8566:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    856a:	3301      	adds	r3, #1
    856c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8570:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    8574:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8578:	429a      	cmp	r2, r3
    857a:	d8e5      	bhi.n	8548 <Lpspi_Ip_TransferProcess+0x108>
    857c:	e055      	b.n	862a <Lpspi_Ip_TransferProcess+0x1ea>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    857e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8582:	68db      	ldr	r3, [r3, #12]
    8584:	881b      	ldrh	r3, [r3, #0]
    8586:	2b10      	cmp	r3, #16
    8588:	d81f      	bhi.n	85ca <Lpspi_Ip_TransferProcess+0x18a>
            for (Index = 0; Index < NumberOfReads; Index++)
    858a:	2300      	movs	r3, #0
    858c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8590:	e014      	b.n	85bc <Lpspi_Ip_TransferProcess+0x17c>
                Data = Base->RDR;
    8592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8596:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    8598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    859a:	689a      	ldr	r2, [r3, #8]
    859c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    859e:	8a9b      	ldrh	r3, [r3, #20]
    85a0:	4619      	mov	r1, r3
    85a2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85a6:	440b      	add	r3, r1
    85a8:	005b      	lsls	r3, r3, #1
    85aa:	4413      	add	r3, r2
    85ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    85ae:	b292      	uxth	r2, r2
    85b0:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    85b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85b6:	3301      	adds	r3, #1
    85b8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    85bc:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    85c0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85c4:	429a      	cmp	r2, r3
    85c6:	d8e4      	bhi.n	8592 <Lpspi_Ip_TransferProcess+0x152>
    85c8:	e02f      	b.n	862a <Lpspi_Ip_TransferProcess+0x1ea>
            for (Index = 0; Index < NumberOfReads; Index++)
    85ca:	2300      	movs	r3, #0
    85cc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    85d0:	e013      	b.n	85fa <Lpspi_Ip_TransferProcess+0x1ba>
                Data = Base->RDR;
    85d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    85d6:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    85d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85da:	689a      	ldr	r2, [r3, #8]
    85dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85de:	8a9b      	ldrh	r3, [r3, #20]
    85e0:	4619      	mov	r1, r3
    85e2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85e6:	440b      	add	r3, r1
    85e8:	009b      	lsls	r3, r3, #2
    85ea:	4413      	add	r3, r2
    85ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    85ee:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    85f0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85f4:	3301      	adds	r3, #1
    85f6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    85fa:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    85fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8602:	429a      	cmp	r2, r3
    8604:	d8e5      	bhi.n	85d2 <Lpspi_Ip_TransferProcess+0x192>
    8606:	e010      	b.n	862a <Lpspi_Ip_TransferProcess+0x1ea>
        for (Index = 0; Index < NumberOfReads; Index++)
    8608:	2300      	movs	r3, #0
    860a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    860e:	e006      	b.n	861e <Lpspi_Ip_TransferProcess+0x1de>
            (void)Base->RDR;
    8610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    8614:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8618:	3301      	adds	r3, #1
    861a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    861e:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    8622:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8626:	429a      	cmp	r2, r3
    8628:	d8f2      	bhi.n	8610 <Lpspi_Ip_TransferProcess+0x1d0>
    State->RxIndex += NumberOfReads;
    862a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    862c:	8a9a      	ldrh	r2, [r3, #20]
    862e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    8632:	b29b      	uxth	r3, r3
    8634:	4413      	add	r3, r2
    8636:	b29a      	uxth	r2, r3
    8638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    863a:	829a      	strh	r2, [r3, #20]
}
    863c:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    863e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8640:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8644:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    8648:	4413      	add	r3, r2
    864a:	b2da      	uxtb	r2, r3
    864c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    864e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            to fill TX FIFO. At that time, another interrupt occurred and preemptive current interrupt, and the time to process that interrupt is longer than the time to transfer all frames 
            in TX FIFO. So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from that interrupt and fill TX FIFO until full and exist SPI interrupt function. 
            And if there is a interrupt occurred with higher priority of SPI interrupt and the time to process that interrupt is longer than the time to transfer all frames in TX FIFO. 
            So, RX FIFO can be overflow due to SPI interrupt function is not serviced to read RX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (State->TxDoneFlag != TRUE))
    8652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8658:	2b00      	cmp	r3, #0
    865a:	f000 8119 	beq.w	8890 <Lpspi_Ip_TransferProcess+0x450>
    865e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    8664:	f083 0301 	eor.w	r3, r3, #1
    8668:	b2db      	uxtb	r3, r3
    866a:	2b00      	cmp	r3, #0
    866c:	f000 8110 	beq.w	8890 <Lpspi_Ip_TransferProcess+0x450>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    8670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8672:	8b5a      	ldrh	r2, [r3, #26]
    8674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8676:	8adb      	ldrh	r3, [r3, #22]
    8678:	429a      	cmp	r2, r3
    867a:	f000 80ca 	beq.w	8812 <Lpspi_Ip_TransferProcess+0x3d2>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    867e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8684:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    8688:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
    868c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    868e:	8b5b      	ldrh	r3, [r3, #26]
    8690:	4619      	mov	r1, r3
    8692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8694:	8adb      	ldrh	r3, [r3, #22]
    8696:	1acb      	subs	r3, r1, r3
    8698:	429a      	cmp	r2, r3
    869a:	dd08      	ble.n	86ae <Lpspi_Ip_TransferProcess+0x26e>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    869c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    869e:	8b5b      	ldrh	r3, [r3, #26]
    86a0:	b2da      	uxtb	r2, r3
    86a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86a4:	8adb      	ldrh	r3, [r3, #22]
    86a6:	b2db      	uxtb	r3, r3
    86a8:	1ad3      	subs	r3, r2, r3
    86aa:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    86ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    86b2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    86b6:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    86ba:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    86be:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    86c2:	4a10      	ldr	r2, [pc, #64]	; (8704 <Lpspi_Ip_TransferProcess+0x2c4>)
    86c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86c8:	9308      	str	r3, [sp, #32]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    86ca:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    86ce:	4a0e      	ldr	r2, [pc, #56]	; (8708 <Lpspi_Ip_TransferProcess+0x2c8>)
    86d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86d4:	9307      	str	r3, [sp, #28]
    uint32 Data = 0u;
    86d6:	2300      	movs	r3, #0
    86d8:	9306      	str	r3, [sp, #24]
    uint8 Index = 0u;
    86da:	2300      	movs	r3, #0
    86dc:	f88d 3017 	strb.w	r3, [sp, #23]
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    86e0:	9b07      	ldr	r3, [sp, #28]
    86e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    86e4:	68db      	ldr	r3, [r3, #12]
    86e6:	685b      	ldr	r3, [r3, #4]
    86e8:	9306      	str	r3, [sp, #24]
    if (NULL_PTR != State->TxBuffer)
    86ea:	9b07      	ldr	r3, [sp, #28]
    86ec:	68db      	ldr	r3, [r3, #12]
    86ee:	2b00      	cmp	r3, #0
    86f0:	d068      	beq.n	87c4 <Lpspi_Ip_TransferProcess+0x384>
        if (State->TxFrameSize < 9u)
    86f2:	9b07      	ldr	r3, [sp, #28]
    86f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    86f6:	2b08      	cmp	r3, #8
    86f8:	d822      	bhi.n	8740 <Lpspi_Ip_TransferProcess+0x300>
            for (Index = 0; Index < NumberOfWrites; Index++)
    86fa:	2300      	movs	r3, #0
    86fc:	f88d 3017 	strb.w	r3, [sp, #23]
    8700:	e017      	b.n	8732 <Lpspi_Ip_TransferProcess+0x2f2>
    8702:	bf00      	nop
    8704:	00018590 	.word	0x00018590
    8708:	1fff8dd8 	.word	0x1fff8dd8
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    870c:	9b07      	ldr	r3, [sp, #28]
    870e:	68db      	ldr	r3, [r3, #12]
    8710:	9a07      	ldr	r2, [sp, #28]
    8712:	8ad2      	ldrh	r2, [r2, #22]
    8714:	4611      	mov	r1, r2
    8716:	f89d 2017 	ldrb.w	r2, [sp, #23]
    871a:	440a      	add	r2, r1
    871c:	4413      	add	r3, r2
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    8722:	9b08      	ldr	r3, [sp, #32]
    8724:	9a06      	ldr	r2, [sp, #24]
    8726:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8728:	f89d 3017 	ldrb.w	r3, [sp, #23]
    872c:	3301      	adds	r3, #1
    872e:	f88d 3017 	strb.w	r3, [sp, #23]
    8732:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    8736:	f89d 3017 	ldrb.w	r3, [sp, #23]
    873a:	429a      	cmp	r2, r3
    873c:	d8e6      	bhi.n	870c <Lpspi_Ip_TransferProcess+0x2cc>
    873e:	e053      	b.n	87e8 <Lpspi_Ip_TransferProcess+0x3a8>
        else if (State->TxFrameSize < 17u)
    8740:	9b07      	ldr	r3, [sp, #28]
    8742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8744:	2b10      	cmp	r3, #16
    8746:	d81e      	bhi.n	8786 <Lpspi_Ip_TransferProcess+0x346>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8748:	2300      	movs	r3, #0
    874a:	f88d 3017 	strb.w	r3, [sp, #23]
    874e:	e013      	b.n	8778 <Lpspi_Ip_TransferProcess+0x338>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    8750:	9b07      	ldr	r3, [sp, #28]
    8752:	68da      	ldr	r2, [r3, #12]
    8754:	9b07      	ldr	r3, [sp, #28]
    8756:	8adb      	ldrh	r3, [r3, #22]
    8758:	4619      	mov	r1, r3
    875a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    875e:	440b      	add	r3, r1
    8760:	005b      	lsls	r3, r3, #1
    8762:	4413      	add	r3, r2
    8764:	881b      	ldrh	r3, [r3, #0]
    8766:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    8768:	9b08      	ldr	r3, [sp, #32]
    876a:	9a06      	ldr	r2, [sp, #24]
    876c:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    876e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8772:	3301      	adds	r3, #1
    8774:	f88d 3017 	strb.w	r3, [sp, #23]
    8778:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    877c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8780:	429a      	cmp	r2, r3
    8782:	d8e5      	bhi.n	8750 <Lpspi_Ip_TransferProcess+0x310>
    8784:	e030      	b.n	87e8 <Lpspi_Ip_TransferProcess+0x3a8>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8786:	2300      	movs	r3, #0
    8788:	f88d 3017 	strb.w	r3, [sp, #23]
    878c:	e013      	b.n	87b6 <Lpspi_Ip_TransferProcess+0x376>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    878e:	9b07      	ldr	r3, [sp, #28]
    8790:	68da      	ldr	r2, [r3, #12]
    8792:	9b07      	ldr	r3, [sp, #28]
    8794:	8adb      	ldrh	r3, [r3, #22]
    8796:	4619      	mov	r1, r3
    8798:	f89d 3017 	ldrb.w	r3, [sp, #23]
    879c:	440b      	add	r3, r1
    879e:	009b      	lsls	r3, r3, #2
    87a0:	4413      	add	r3, r2
    87a2:	681b      	ldr	r3, [r3, #0]
    87a4:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    87a6:	9b08      	ldr	r3, [sp, #32]
    87a8:	9a06      	ldr	r2, [sp, #24]
    87aa:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    87ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87b0:	3301      	adds	r3, #1
    87b2:	f88d 3017 	strb.w	r3, [sp, #23]
    87b6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    87ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87be:	429a      	cmp	r2, r3
    87c0:	d8e5      	bhi.n	878e <Lpspi_Ip_TransferProcess+0x34e>
    87c2:	e011      	b.n	87e8 <Lpspi_Ip_TransferProcess+0x3a8>
        for (Index = 0; Index < NumberOfWrites; Index++)
    87c4:	2300      	movs	r3, #0
    87c6:	f88d 3017 	strb.w	r3, [sp, #23]
    87ca:	e007      	b.n	87dc <Lpspi_Ip_TransferProcess+0x39c>
            Base->TDR = Data;
    87cc:	9b08      	ldr	r3, [sp, #32]
    87ce:	9a06      	ldr	r2, [sp, #24]
    87d0:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    87d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87d6:	3301      	adds	r3, #1
    87d8:	f88d 3017 	strb.w	r3, [sp, #23]
    87dc:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    87e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87e4:	429a      	cmp	r2, r3
    87e6:	d8f1      	bhi.n	87cc <Lpspi_Ip_TransferProcess+0x38c>
    State->TxIndex += NumberOfWrites;
    87e8:	9b07      	ldr	r3, [sp, #28]
    87ea:	8ada      	ldrh	r2, [r3, #22]
    87ec:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    87f0:	b29b      	uxth	r3, r3
    87f2:	4413      	add	r3, r2
    87f4:	b29a      	uxth	r2, r3
    87f6:	9b07      	ldr	r3, [sp, #28]
    87f8:	82da      	strh	r2, [r3, #22]
}
    87fa:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    87fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87fe:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8802:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    8806:	1ad3      	subs	r3, r2, r3
    8808:	b2da      	uxtb	r2, r3
    880a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    880c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    8810:	e03e      	b.n	8890 <Lpspi_Ip_TransferProcess+0x450>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    8812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8814:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    8818:	2b00      	cmp	r3, #0
    881a:	d01c      	beq.n	8856 <Lpspi_Ip_TransferProcess+0x416>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    881c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    881e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8820:	68db      	ldr	r3, [r3, #12]
    8822:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8824:	6b52      	ldr	r2, [r2, #52]	; 0x34
    8826:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    8828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    882a:	2200      	movs	r2, #0
    882c:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    882e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    8832:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8834:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    8836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8838:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    883c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    883e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    8840:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8844:	9300      	str	r3, [sp, #0]
    8846:	4623      	mov	r3, r4
    8848:	f000 fb7a 	bl	8f40 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    884c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    884e:	2200      	movs	r2, #0
    8850:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    8854:	e01c      	b.n	8890 <Lpspi_Ip_TransferProcess+0x450>
                    }
                    else
                    {
                        State->TxDoneFlag = TRUE;
    8856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8858:	2201      	movs	r2, #1
    885a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        /* Disable TX interrupt */
                        Base->IER &= ~LPSPI_IER_TDIE_MASK;
    885e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8860:	699b      	ldr	r3, [r3, #24]
    8862:	f023 0201 	bic.w	r2, r3, #1
    8866:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8868:	619a      	str	r2, [r3, #24]
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    886a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    886c:	7f1b      	ldrb	r3, [r3, #28]
    886e:	f083 0301 	eor.w	r3, r3, #1
    8872:	b2db      	uxtb	r3, r3
    8874:	2b00      	cmp	r3, #0
    8876:	d00b      	beq.n	8890 <Lpspi_Ip_TransferProcess+0x450>
    8878:	9b10      	ldr	r3, [sp, #64]	; 0x40
    887a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    887c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8880:	2b00      	cmp	r3, #0
    8882:	d005      	beq.n	8890 <Lpspi_Ip_TransferProcess+0x450>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    8884:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    888c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    888e:	661a      	str	r2, [r3, #96]	; 0x60
                }
            }
        }
        
        /* End of transfer */
        if((State->RxIndex == State->ExpectedFifoReads) || (TRUE == ErrorFlag))
    8890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8892:	8a9a      	ldrh	r2, [r3, #20]
    8894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8896:	8b1b      	ldrh	r3, [r3, #24]
    8898:	429a      	cmp	r2, r3
    889a:	d003      	beq.n	88a4 <Lpspi_Ip_TransferProcess+0x464>
    889c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    88a0:	2b00      	cmp	r3, #0
    88a2:	d00a      	beq.n	88ba <Lpspi_Ip_TransferProcess+0x47a>
                Base->TCR |= LPSPI_TCR_RXMSK(1);
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12();
            }
            #endif
            /* Disable interrupts */
            Base->IER = 0u;
    88a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88a6:	2200      	movs	r2, #0
    88a8:	619a      	str	r2, [r3, #24]
            Lpspi_Ip_ChannelFinished(Instance, ErrorFlag);
    88aa:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    88ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    88b2:	4611      	mov	r1, r2
    88b4:	4618      	mov	r0, r3
    88b6:	f7ff fd91 	bl	83dc <Lpspi_Ip_ChannelFinished>
        }
    }
}
    88ba:	bf00      	nop
    88bc:	b012      	add	sp, #72	; 0x48
    88be:	bd10      	pop	{r4, pc}

000088c0 <Lpspi_Ip_Init>:
    OsIf_Trusted_Call1param(Lpspi_Ip_SetUserAccess, Instance);
}
#endif /* LPSPI_IP_ENABLE_USER_MODE_SUPPORT */
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_Init(const Lpspi_Ip_ConfigType *PhyUnitConfigPtr)
{
    88c0:	b500      	push	{lr}
    88c2:	b087      	sub	sp, #28
    88c4:	9001      	str	r0, [sp, #4]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    88c6:	2300      	movs	r3, #0
    88c8:	9305      	str	r3, [sp, #20]
    uint8 Instance = 0u;
    88ca:	2300      	movs	r3, #0
    88cc:	f88d 3013 	strb.w	r3, [sp, #19]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(PhyUnitConfigPtr != NULL_PTR);
    #endif
    Instance = PhyUnitConfigPtr->Instance;
    88d0:	9b01      	ldr	r3, [sp, #4]
    88d2:	781b      	ldrb	r3, [r3, #0]
    88d4:	f88d 3013 	strb.w	r3, [sp, #19]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    88d8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    88dc:	4a23      	ldr	r2, [pc, #140]	; (896c <Lpspi_Ip_Init+0xac>)
    88de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88e2:	9303      	str	r3, [sp, #12]
    Base = Lpspi_Ip_apxBases[Instance];
    88e4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    88e8:	4a21      	ldr	r2, [pc, #132]	; (8970 <Lpspi_Ip_Init+0xb0>)
    88ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88ee:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State == NULL_PTR);
    #endif
    Lpspi_Ip_apxStateStructureArray[Instance] = &Lpspi_Ip_axStateStructure[PhyUnitConfigPtr->StateIndex];
    88f0:	9b01      	ldr	r3, [sp, #4]
    88f2:	7c1b      	ldrb	r3, [r3, #16]
    88f4:	461a      	mov	r2, r3
    88f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    88fa:	0192      	lsls	r2, r2, #6
    88fc:	491d      	ldr	r1, [pc, #116]	; (8974 <Lpspi_Ip_Init+0xb4>)
    88fe:	440a      	add	r2, r1
    8900:	491a      	ldr	r1, [pc, #104]	; (896c <Lpspi_Ip_Init+0xac>)
    8902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8906:	f89d 3013 	ldrb.w	r3, [sp, #19]
    890a:	4a18      	ldr	r2, [pc, #96]	; (896c <Lpspi_Ip_Init+0xac>)
    890c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8910:	9303      	str	r3, [sp, #12]
    State->PhyUnitConfig = PhyUnitConfigPtr;
    8912:	9b03      	ldr	r3, [sp, #12]
    8914:	9a01      	ldr	r2, [sp, #4]
    8916:	621a      	str	r2, [r3, #32]
    /* enable in debug mode to ensure CS will be kept when CPU halts at breakpoint */
    Base->CR = PhyUnitConfigPtr->Cr | LPSPI_CR_DBGEN_MASK;
    8918:	9b01      	ldr	r3, [sp, #4]
    891a:	685b      	ldr	r3, [r3, #4]
    891c:	f043 0208 	orr.w	r2, r3, #8
    8920:	9b02      	ldr	r3, [sp, #8]
    8922:	611a      	str	r2, [r3, #16]
    Base->CFGR1 = PhyUnitConfigPtr->Cfgr1;
    8924:	9b01      	ldr	r3, [sp, #4]
    8926:	689a      	ldr	r2, [r3, #8]
    8928:	9b02      	ldr	r3, [sp, #8]
    892a:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set TX WATER. it will be set again in DMA mode */
    Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    892c:	9b02      	ldr	r3, [sp, #8]
    892e:	2203      	movs	r2, #3
    8930:	659a      	str	r2, [r3, #88]	; 0x58
    #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    State->ClockMode = LPSPI_IP_NORMAL_CLOCK;
    #endif
    State->KeepCs = FALSE;
    8932:	9b03      	ldr	r3, [sp, #12]
    8934:	2200      	movs	r2, #0
    8936:	771a      	strb	r2, [r3, #28]
    State->FirstCmd = TRUE;
    8938:	9b03      	ldr	r3, [sp, #12]
    893a:	2201      	movs	r2, #1
    893c:	775a      	strb	r2, [r3, #29]
    #if ((STD_ON == LPSPI_IP_DMA_USED) && (STD_ON == LPSPI_IP_ENABLE_DMAFASTTRANSFER_SUPPORT))
    Lpspi_Ip_TxDmaTcdSGInit(Instance);
    Lpspi_Ip_RxDmaTcdSGInit(Instance);
    #endif
    /* set State to idle */
    State->Status = LPSPI_IP_IDLE;
    893e:	9b03      	ldr	r3, [sp, #12]
    8940:	2201      	movs	r2, #1
    8942:	605a      	str	r2, [r3, #4]
    (void)Lpspi_Ip_UpdateTransferMode(Instance, PhyUnitConfigPtr->TransferMode);
    8944:	9b01      	ldr	r3, [sp, #4]
    8946:	68da      	ldr	r2, [r3, #12]
    8948:	f89d 3013 	ldrb.w	r3, [sp, #19]
    894c:	4611      	mov	r1, r2
    894e:	4618      	mov	r0, r3
    8950:	f000 fd10 	bl	9374 <Lpspi_Ip_UpdateTransferMode>
    
    /* Enable SPI module */
    Base->CR |= LPSPI_CR_MEN_MASK;
    8954:	9b02      	ldr	r3, [sp, #8]
    8956:	691b      	ldr	r3, [r3, #16]
    8958:	f043 0201 	orr.w	r2, r3, #1
    895c:	9b02      	ldr	r3, [sp, #8]
    895e:	611a      	str	r2, [r3, #16]
    return Status;
    8960:	9b05      	ldr	r3, [sp, #20]
}
    8962:	4618      	mov	r0, r3
    8964:	b007      	add	sp, #28
    8966:	f85d fb04 	ldr.w	pc, [sp], #4
    896a:	bf00      	nop
    896c:	1fff8dd8 	.word	0x1fff8dd8
    8970:	00018590 	.word	0x00018590
    8974:	1fff8d98 	.word	0x1fff8d98

00008978 <Lpspi_Ip_DeInit>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_DeInit(uint8 Instance)
{
    8978:	b086      	sub	sp, #24
    897a:	4603      	mov	r3, r0
    897c:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    8980:	2300      	movs	r3, #0
    8982:	9305      	str	r3, [sp, #20]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    8984:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8988:	4a11      	ldr	r2, [pc, #68]	; (89d0 <Lpspi_Ip_DeInit+0x58>)
    898a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    898e:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8990:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8994:	4a0f      	ldr	r2, [pc, #60]	; (89d4 <Lpspi_Ip_DeInit+0x5c>)
    8996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    899a:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_BUSY == State->Status)
    899c:	9b03      	ldr	r3, [sp, #12]
    899e:	685b      	ldr	r3, [r3, #4]
    89a0:	2b02      	cmp	r3, #2
    89a2:	d102      	bne.n	89aa <Lpspi_Ip_DeInit+0x32>
    {
        Status = LPSPI_IP_STATUS_FAIL;
    89a4:	2301      	movs	r3, #1
    89a6:	9305      	str	r3, [sp, #20]
    89a8:	e00e      	b.n	89c8 <Lpspi_Ip_DeInit+0x50>
    }
    else
    {
        /* Use reset hardware feature. */
        Base->CR |= LPSPI_CR_RST(1u);
    89aa:	9b04      	ldr	r3, [sp, #16]
    89ac:	691b      	ldr	r3, [r3, #16]
    89ae:	f043 0202 	orr.w	r2, r3, #2
    89b2:	9b04      	ldr	r3, [sp, #16]
    89b4:	611a      	str	r2, [r3, #16]
        Base->CR = 0;
    89b6:	9b04      	ldr	r3, [sp, #16]
    89b8:	2200      	movs	r2, #0
    89ba:	611a      	str	r2, [r3, #16]

        Lpspi_Ip_apxStateStructureArray[Instance] = NULL_PTR;
    89bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89c0:	4a04      	ldr	r2, [pc, #16]	; (89d4 <Lpspi_Ip_DeInit+0x5c>)
    89c2:	2100      	movs	r1, #0
    89c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    return Status;
    89c8:	9b05      	ldr	r3, [sp, #20]
}
    89ca:	4618      	mov	r0, r3
    89cc:	b006      	add	sp, #24
    89ce:	4770      	bx	lr
    89d0:	00018590 	.word	0x00018590
    89d4:	1fff8dd8 	.word	0x1fff8dd8

000089d8 <Lpspi_Ip_SyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            uint32 TimeOut
                                         )
{
    89d8:	b510      	push	{r4, lr}
    89da:	b09a      	sub	sp, #104	; 0x68
    89dc:	9005      	str	r0, [sp, #20]
    89de:	9104      	str	r1, [sp, #16]
    89e0:	9203      	str	r2, [sp, #12]
    89e2:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type *Base;
    Lpspi_Ip_StateStructureType *State;
    uint8 NumberOfWrites, NumberOfReads;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    89e6:	2300      	movs	r3, #0
    89e8:	9318      	str	r3, [sp, #96]	; 0x60
    uint32 TimeoutTicks = OsIf_MicrosToTicks(TimeOut, LPSPI_IP_TIMEOUT_METHOD);
    89ea:	2100      	movs	r1, #0
    89ec:	981c      	ldr	r0, [sp, #112]	; 0x70
    89ee:	f7f9 fa89 	bl	1f04 <OsIf_MicrosToTicks>
    89f2:	9015      	str	r0, [sp, #84]	; 0x54
    uint32 CurrentTicks = 0u; /* initialize current counter */
    89f4:	2300      	movs	r3, #0
    89f6:	9307      	str	r3, [sp, #28]
    uint32 ElapsedTicks = 0u; /* elapsed will give timeout */
    89f8:	2300      	movs	r3, #0
    89fa:	9317      	str	r3, [sp, #92]	; 0x5c
    uint8 Instance = 0u;
    89fc:	2300      	movs	r3, #0
    89fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    uint32 Cfgr1 = 0u;
    8a02:	2300      	movs	r3, #0
    8a04:	9313      	str	r3, [sp, #76]	; 0x4c
    boolean TxDoneFlag = FALSE;
    8a06:	2300      	movs	r3, #0
    8a08:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    DevAssert(0u != TimeOut);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    8a0c:	9b05      	ldr	r3, [sp, #20]
    8a0e:	781b      	ldrb	r3, [r3, #0]
    8a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8a14:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8a18:	4a92      	ldr	r2, [pc, #584]	; (8c64 <Lpspi_Ip_SyncTransmit+0x28c>)
    8a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a1e:	9312      	str	r3, [sp, #72]	; 0x48
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];    
    8a20:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8a24:	4a90      	ldr	r2, [pc, #576]	; (8c68 <Lpspi_Ip_SyncTransmit+0x290>)
    8a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a2a:	9311      	str	r3, [sp, #68]	; 0x44
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08();
    8a2c:	f00d fc88 	bl	16340 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>
    if (LPSPI_IP_BUSY == State->Status)
    8a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a32:	685b      	ldr	r3, [r3, #4]
    8a34:	2b02      	cmp	r3, #2
    8a36:	d104      	bne.n	8a42 <Lpspi_Ip_SyncTransmit+0x6a>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    8a38:	f00d fcae 	bl	16398 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        Status = LPSPI_IP_STATUS_FAIL;
    8a3c:	2301      	movs	r3, #1
    8a3e:	9318      	str	r3, [sp, #96]	; 0x60
    8a40:	e276      	b.n	8f30 <Lpspi_Ip_SyncTransmit+0x558>
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    8a42:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a44:	2202      	movs	r2, #2
    8a46:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    8a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a4a:	9a05      	ldr	r2, [sp, #20]
    8a4c:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    8a4e:	f00d fca3 	bl	16398 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        
        /* Disable DMA requests and all interrupts */
        Base->DER = 0u;
    8a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a54:	2200      	movs	r2, #0
    8a56:	61da      	str	r2, [r3, #28]
        Base->IER = 0u;
    8a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a5a:	2200      	movs	r2, #0
    8a5c:	619a      	str	r2, [r3, #24]
        
        /* Update State structure. */
        State->NextTransferConfigAvailable = State->KeepCs;
    8a5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a60:	7f1a      	ldrb	r2, [r3, #28]
    8a62:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    8a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a6a:	7f5b      	ldrb	r3, [r3, #29]
    8a6c:	2b00      	cmp	r3, #0
    8a6e:	d030      	beq.n	8ad2 <Lpspi_Ip_SyncTransmit+0xfa>
            /* Makes sure that FIFOs will be empty before start new transfer session. 
            There is maybe a frame in RX shifter register (previous transfer is broken and CS did not de-assert).
            So use reset FIFO do not prevent the potential issue. So reset module by software reset bit should be used here */
            /* Reset FIFOs using CR[RST] bit */
            /* store CFGR1 and restore after all registers are reset */
            Cfgr1 = Base->CFGR1;
    8a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a74:	9313      	str	r3, [sp, #76]	; 0x4c
            Base->CR |= LPSPI_CR_RST_MASK;
    8a76:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a78:	691b      	ldr	r3, [r3, #16]
    8a7a:	f043 0202 	orr.w	r2, r3, #2
    8a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a80:	611a      	str	r2, [r3, #16]
            Base->CR &= ~LPSPI_CR_RST_MASK;
    8a82:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a84:	691b      	ldr	r3, [r3, #16]
    8a86:	f023 0202 	bic.w	r2, r3, #2
    8a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a8c:	611a      	str	r2, [r3, #16]
            /* restore CFGR1 */
            Base->CFGR1 = Cfgr1;
    8a8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8a92:	625a      	str	r2, [r3, #36]	; 0x24
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    8a94:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a96:	695b      	ldr	r3, [r3, #20]
    8a98:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    8a9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a9e:	615a      	str	r2, [r3, #20]

            #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
            Base->CCR = ExternalDevice->Ccr[State->ClockMode];
            #else
            Base->CCR = ExternalDevice->Ccr;
    8aa0:	9b05      	ldr	r3, [sp, #20]
    8aa2:	685a      	ldr	r2, [r3, #4]
    8aa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8aa6:	641a      	str	r2, [r3, #64]	; 0x40
            #endif
                /* Reset current FIFO slots are available to fill at beginning of job (HLD).*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    8aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8aaa:	2204      	movs	r2, #4
    8aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    8ab0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ab4:	68db      	ldr	r3, [r3, #12]
    8ab6:	881a      	ldrh	r2, [r3, #0]
    8ab8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8abc:	68db      	ldr	r3, [r3, #12]
    8abe:	7899      	ldrb	r1, [r3, #2]
    8ac0:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8ac4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8ac8:	9300      	str	r3, [sp, #0]
    8aca:	460b      	mov	r3, r1
    8acc:	9904      	ldr	r1, [sp, #16]
    8ace:	f000 fa37 	bl	8f40 <Lpspi_TransmitTxInit>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    8ad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ad6:	68db      	ldr	r3, [r3, #12]
    8ad8:	881a      	ldrh	r2, [r3, #0]
    8ada:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8ade:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8ae2:	9903      	ldr	r1, [sp, #12]
    8ae4:	f000 facc 	bl	9080 <Lpspi_TransmitRxInit>
        /* initialize current counter */
        CurrentTicks = OsIf_GetCounter(LPSPI_IP_TIMEOUT_METHOD);
    8ae8:	2000      	movs	r0, #0
    8aea:	f7f9 f9bf 	bl	1e6c <OsIf_GetCounter>
    8aee:	4603      	mov	r3, r0
    8af0:	9307      	str	r3, [sp, #28]
        while(State->RxIndex != State->ExpectedFifoReads)
    8af2:	e202      	b.n	8efa <Lpspi_Ip_SyncTransmit+0x522>
        {
            /* RECEIVE DATA */
            /* The receiving should be performed first because maybe have a last frame in RX FIFO from previous channel
                , it should be read to clear RXFIFO before start a new write to TXFIFO */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    8af4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8af8:	0c1b      	lsrs	r3, r3, #16
    8afa:	b2db      	uxtb	r3, r3
    8afc:	f003 0307 	and.w	r3, r3, #7
    8b00:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            /* Limits to remaining frames. */
            
            if (NumberOfReads != 0u)
    8b04:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8b08:	2b00      	cmp	r3, #0
    8b0a:	f000 80d2 	beq.w	8cb2 <Lpspi_Ip_SyncTransmit+0x2da>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    8b0e:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
    8b12:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b14:	8b1b      	ldrh	r3, [r3, #24]
    8b16:	4619      	mov	r1, r3
    8b18:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b1a:	8a9b      	ldrh	r3, [r3, #20]
    8b1c:	1acb      	subs	r3, r1, r3
    8b1e:	429a      	cmp	r2, r3
    8b20:	dd08      	ble.n	8b34 <Lpspi_Ip_SyncTransmit+0x15c>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    8b22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b24:	8b1b      	ldrh	r3, [r3, #24]
    8b26:	b2da      	uxtb	r2, r3
    8b28:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b2a:	8a9b      	ldrh	r3, [r3, #20]
    8b2c:	b2db      	uxtb	r3, r3
    8b2e:	1ad3      	subs	r3, r2, r3
    8b30:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out */
                if (0u == State->RxIndex)
    8b34:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b36:	8a9b      	ldrh	r3, [r3, #20]
    8b38:	2b00      	cmp	r3, #0
    8b3a:	d107      	bne.n	8b4c <Lpspi_Ip_SyncTransmit+0x174>
                {
                    State->CurrentTxFifoSlot += 1u;
    8b3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8b42:	3301      	adds	r3, #1
    8b44:	b2da      	uxtb	r2, r3
    8b46:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    8b4c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8b50:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8b54:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8b58:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8b5c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8b60:	4a41      	ldr	r2, [pc, #260]	; (8c68 <Lpspi_Ip_SyncTransmit+0x290>)
    8b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b66:	930f      	str	r3, [sp, #60]	; 0x3c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8b68:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8b6c:	4a3d      	ldr	r2, [pc, #244]	; (8c64 <Lpspi_Ip_SyncTransmit+0x28c>)
    8b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b72:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 Data = 0u;
    8b74:	2300      	movs	r3, #0
    8b76:	930d      	str	r3, [sp, #52]	; 0x34
    uint8 Index = 0u;
    8b78:	2300      	movs	r3, #0
    8b7a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if (NULL_PTR != State->RxBuffer)
    8b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b80:	689b      	ldr	r3, [r3, #8]
    8b82:	2b00      	cmp	r3, #0
    8b84:	d069      	beq.n	8c5a <Lpspi_Ip_SyncTransmit+0x282>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    8b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b8a:	68db      	ldr	r3, [r3, #12]
    8b8c:	881b      	ldrh	r3, [r3, #0]
    8b8e:	2b08      	cmp	r3, #8
    8b90:	d81e      	bhi.n	8bd0 <Lpspi_Ip_SyncTransmit+0x1f8>
            for (Index = 0; Index < NumberOfReads; Index++)
    8b92:	2300      	movs	r3, #0
    8b94:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b98:	e013      	b.n	8bc2 <Lpspi_Ip_SyncTransmit+0x1ea>
                Data = Base->RDR;
    8b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8b9e:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    8ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ba2:	689b      	ldr	r3, [r3, #8]
    8ba4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8ba6:	8a92      	ldrh	r2, [r2, #20]
    8ba8:	4611      	mov	r1, r2
    8baa:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    8bae:	440a      	add	r2, r1
    8bb0:	4413      	add	r3, r2
    8bb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8bb4:	b2d2      	uxtb	r2, r2
    8bb6:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8bb8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8bbc:	3301      	adds	r3, #1
    8bbe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8bc2:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8bc6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8bca:	429a      	cmp	r2, r3
    8bcc:	d8e5      	bhi.n	8b9a <Lpspi_Ip_SyncTransmit+0x1c2>
    8bce:	e05a      	b.n	8c86 <Lpspi_Ip_SyncTransmit+0x2ae>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    8bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8bd4:	68db      	ldr	r3, [r3, #12]
    8bd6:	881b      	ldrh	r3, [r3, #0]
    8bd8:	2b10      	cmp	r3, #16
    8bda:	d81f      	bhi.n	8c1c <Lpspi_Ip_SyncTransmit+0x244>
            for (Index = 0; Index < NumberOfReads; Index++)
    8bdc:	2300      	movs	r3, #0
    8bde:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8be2:	e014      	b.n	8c0e <Lpspi_Ip_SyncTransmit+0x236>
                Data = Base->RDR;
    8be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8be8:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    8bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bec:	689a      	ldr	r2, [r3, #8]
    8bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bf0:	8a9b      	ldrh	r3, [r3, #20]
    8bf2:	4619      	mov	r1, r3
    8bf4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8bf8:	440b      	add	r3, r1
    8bfa:	005b      	lsls	r3, r3, #1
    8bfc:	4413      	add	r3, r2
    8bfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8c00:	b292      	uxth	r2, r2
    8c02:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8c04:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c08:	3301      	adds	r3, #1
    8c0a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c0e:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8c12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c16:	429a      	cmp	r2, r3
    8c18:	d8e4      	bhi.n	8be4 <Lpspi_Ip_SyncTransmit+0x20c>
    8c1a:	e034      	b.n	8c86 <Lpspi_Ip_SyncTransmit+0x2ae>
            for (Index = 0; Index < NumberOfReads; Index++)
    8c1c:	2300      	movs	r3, #0
    8c1e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c22:	e013      	b.n	8c4c <Lpspi_Ip_SyncTransmit+0x274>
                Data = Base->RDR;
    8c24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8c28:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    8c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c2c:	689a      	ldr	r2, [r3, #8]
    8c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c30:	8a9b      	ldrh	r3, [r3, #20]
    8c32:	4619      	mov	r1, r3
    8c34:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c38:	440b      	add	r3, r1
    8c3a:	009b      	lsls	r3, r3, #2
    8c3c:	4413      	add	r3, r2
    8c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8c40:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8c42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c46:	3301      	adds	r3, #1
    8c48:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c4c:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8c50:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c54:	429a      	cmp	r2, r3
    8c56:	d8e5      	bhi.n	8c24 <Lpspi_Ip_SyncTransmit+0x24c>
    8c58:	e015      	b.n	8c86 <Lpspi_Ip_SyncTransmit+0x2ae>
        for (Index = 0; Index < NumberOfReads; Index++)
    8c5a:	2300      	movs	r3, #0
    8c5c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c60:	e00b      	b.n	8c7a <Lpspi_Ip_SyncTransmit+0x2a2>
    8c62:	bf00      	nop
    8c64:	1fff8dd8 	.word	0x1fff8dd8
    8c68:	00018590 	.word	0x00018590
            (void)Base->RDR;
    8c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    8c70:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c74:	3301      	adds	r3, #1
    8c76:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c7a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8c7e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c82:	429a      	cmp	r2, r3
    8c84:	d8f2      	bhi.n	8c6c <Lpspi_Ip_SyncTransmit+0x294>
    State->RxIndex += NumberOfReads;
    8c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c88:	8a9a      	ldrh	r2, [r3, #20]
    8c8a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8c8e:	b29b      	uxth	r3, r3
    8c90:	4413      	add	r3, r2
    8c92:	b29a      	uxth	r2, r3
    8c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c96:	829a      	strh	r2, [r3, #20]
}
    8c98:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    8c9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c9c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8ca0:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8ca4:	4413      	add	r3, r2
    8ca6:	b2da      	uxtb	r2, r3
    8ca8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                ElapsedTicks = 0u;
    8cae:	2300      	movs	r3, #0
    8cb0:	9317      	str	r3, [sp, #92]	; 0x5c
            /* After driver code read all frames in RX FIFO, if there are still some frames in TX FIFO, at the time before driver code check number of frames available in TX FIFO 
            to prepare to fill TX FIFO. At that time, interrupt occurred, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO. 
            So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from interrupt and fill TX FIFO until full. 
            And there is a interrupt occurred after that before read all frames in RX FIFO, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (TxDoneFlag != TRUE))
    8cb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8cb8:	2b00      	cmp	r3, #0
    8cba:	f000 810e 	beq.w	8eda <Lpspi_Ip_SyncTransmit+0x502>
    8cbe:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
    8cc2:	f083 0301 	eor.w	r3, r3, #1
    8cc6:	b2db      	uxtb	r3, r3
    8cc8:	2b00      	cmp	r3, #0
    8cca:	f000 8106 	beq.w	8eda <Lpspi_Ip_SyncTransmit+0x502>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    8cce:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cd0:	8b5a      	ldrh	r2, [r3, #26]
    8cd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cd4:	8adb      	ldrh	r3, [r3, #22]
    8cd6:	429a      	cmp	r2, r3
    8cd8:	f000 80c7 	beq.w	8e6a <Lpspi_Ip_SyncTransmit+0x492>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    8cdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8ce2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    8ce6:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    8cea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cec:	8b5b      	ldrh	r3, [r3, #26]
    8cee:	4619      	mov	r1, r3
    8cf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cf2:	8adb      	ldrh	r3, [r3, #22]
    8cf4:	1acb      	subs	r3, r1, r3
    8cf6:	429a      	cmp	r2, r3
    8cf8:	dd08      	ble.n	8d0c <Lpspi_Ip_SyncTransmit+0x334>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    8cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cfc:	8b5b      	ldrh	r3, [r3, #26]
    8cfe:	b2da      	uxtb	r2, r3
    8d00:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d02:	8adb      	ldrh	r3, [r3, #22]
    8d04:	b2db      	uxtb	r3, r3
    8d06:	1ad3      	subs	r3, r2, r3
    8d08:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    8d0c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8d10:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    8d14:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8d18:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8d1c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8d20:	4a85      	ldr	r2, [pc, #532]	; (8f38 <Lpspi_Ip_SyncTransmit+0x560>)
    8d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d26:	930b      	str	r3, [sp, #44]	; 0x2c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8d28:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8d2c:	4a83      	ldr	r2, [pc, #524]	; (8f3c <Lpspi_Ip_SyncTransmit+0x564>)
    8d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d32:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 Data = 0u;
    8d34:	2300      	movs	r3, #0
    8d36:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Index = 0u;
    8d38:	2300      	movs	r3, #0
    8d3a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    8d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d42:	68db      	ldr	r3, [r3, #12]
    8d44:	685b      	ldr	r3, [r3, #4]
    8d46:	9309      	str	r3, [sp, #36]	; 0x24
    if (NULL_PTR != State->TxBuffer)
    8d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d4a:	68db      	ldr	r3, [r3, #12]
    8d4c:	2b00      	cmp	r3, #0
    8d4e:	d063      	beq.n	8e18 <Lpspi_Ip_SyncTransmit+0x440>
        if (State->TxFrameSize < 9u)
    8d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8d54:	2b08      	cmp	r3, #8
    8d56:	d81d      	bhi.n	8d94 <Lpspi_Ip_SyncTransmit+0x3bc>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d58:	2300      	movs	r3, #0
    8d5a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d5e:	e012      	b.n	8d86 <Lpspi_Ip_SyncTransmit+0x3ae>
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    8d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d62:	68db      	ldr	r3, [r3, #12]
    8d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8d66:	8ad2      	ldrh	r2, [r2, #22]
    8d68:	4611      	mov	r1, r2
    8d6a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    8d6e:	440a      	add	r2, r1
    8d70:	4413      	add	r3, r2
    8d72:	781b      	ldrb	r3, [r3, #0]
    8d74:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d7a:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d80:	3301      	adds	r3, #1
    8d82:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d86:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8d8a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d8e:	429a      	cmp	r2, r3
    8d90:	d8e6      	bhi.n	8d60 <Lpspi_Ip_SyncTransmit+0x388>
    8d92:	e053      	b.n	8e3c <Lpspi_Ip_SyncTransmit+0x464>
        else if (State->TxFrameSize < 17u)
    8d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8d98:	2b10      	cmp	r3, #16
    8d9a:	d81e      	bhi.n	8dda <Lpspi_Ip_SyncTransmit+0x402>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d9c:	2300      	movs	r3, #0
    8d9e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8da2:	e013      	b.n	8dcc <Lpspi_Ip_SyncTransmit+0x3f4>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    8da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8da6:	68da      	ldr	r2, [r3, #12]
    8da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8daa:	8adb      	ldrh	r3, [r3, #22]
    8dac:	4619      	mov	r1, r3
    8dae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8db2:	440b      	add	r3, r1
    8db4:	005b      	lsls	r3, r3, #1
    8db6:	4413      	add	r3, r2
    8db8:	881b      	ldrh	r3, [r3, #0]
    8dba:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8dc0:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8dc2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8dc6:	3301      	adds	r3, #1
    8dc8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8dcc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8dd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8dd4:	429a      	cmp	r2, r3
    8dd6:	d8e5      	bhi.n	8da4 <Lpspi_Ip_SyncTransmit+0x3cc>
    8dd8:	e030      	b.n	8e3c <Lpspi_Ip_SyncTransmit+0x464>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8dda:	2300      	movs	r3, #0
    8ddc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8de0:	e013      	b.n	8e0a <Lpspi_Ip_SyncTransmit+0x432>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    8de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8de4:	68da      	ldr	r2, [r3, #12]
    8de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8de8:	8adb      	ldrh	r3, [r3, #22]
    8dea:	4619      	mov	r1, r3
    8dec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8df0:	440b      	add	r3, r1
    8df2:	009b      	lsls	r3, r3, #2
    8df4:	4413      	add	r3, r2
    8df6:	681b      	ldr	r3, [r3, #0]
    8df8:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8dfe:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8e00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e04:	3301      	adds	r3, #1
    8e06:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e0a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8e0e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e12:	429a      	cmp	r2, r3
    8e14:	d8e5      	bhi.n	8de2 <Lpspi_Ip_SyncTransmit+0x40a>
    8e16:	e011      	b.n	8e3c <Lpspi_Ip_SyncTransmit+0x464>
        for (Index = 0; Index < NumberOfWrites; Index++)
    8e18:	2300      	movs	r3, #0
    8e1a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e1e:	e007      	b.n	8e30 <Lpspi_Ip_SyncTransmit+0x458>
            Base->TDR = Data;
    8e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8e24:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    8e26:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e2a:	3301      	adds	r3, #1
    8e2c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e30:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8e34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e38:	429a      	cmp	r2, r3
    8e3a:	d8f1      	bhi.n	8e20 <Lpspi_Ip_SyncTransmit+0x448>
    State->TxIndex += NumberOfWrites;
    8e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e3e:	8ada      	ldrh	r2, [r3, #22]
    8e40:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    8e44:	b29b      	uxth	r3, r3
    8e46:	4413      	add	r3, r2
    8e48:	b29a      	uxth	r2, r3
    8e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e4c:	82da      	strh	r2, [r3, #22]
}
    8e4e:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    8e50:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e52:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8e56:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8e5a:	1ad3      	subs	r3, r2, r3
    8e5c:	b2da      	uxtb	r2, r3
    8e5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                    ElapsedTicks = 0u;
    8e64:	2300      	movs	r3, #0
    8e66:	9317      	str	r3, [sp, #92]	; 0x5c
    8e68:	e037      	b.n	8eda <Lpspi_Ip_SyncTransmit+0x502>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    8e6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    8e70:	2b00      	cmp	r3, #0
    8e72:	d01c      	beq.n	8eae <Lpspi_Ip_SyncTransmit+0x4d6>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    8e74:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e78:	68db      	ldr	r3, [r3, #12]
    8e7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8e7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
    8e7e:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    8e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e82:	2200      	movs	r2, #0
    8e84:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    8e86:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    8e8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e8c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    8e8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e90:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    8e94:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e96:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    8e98:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8e9c:	9300      	str	r3, [sp, #0]
    8e9e:	4623      	mov	r3, r4
    8ea0:	f000 f84e 	bl	8f40 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    8ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ea6:	2200      	movs	r2, #0
    8ea8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    8eac:	e015      	b.n	8eda <Lpspi_Ip_SyncTransmit+0x502>
                    }
                    else
                    {
                        TxDoneFlag = TRUE;
    8eae:	2301      	movs	r3, #1
    8eb0:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    8eb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8eb6:	7f1b      	ldrb	r3, [r3, #28]
    8eb8:	f083 0301 	eor.w	r3, r3, #1
    8ebc:	b2db      	uxtb	r3, r3
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	d00b      	beq.n	8eda <Lpspi_Ip_SyncTransmit+0x502>
    8ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8eca:	2b00      	cmp	r3, #0
    8ecc:	d005      	beq.n	8eda <Lpspi_Ip_SyncTransmit+0x502>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    8ece:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8ed2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    8ed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ed8:	661a      	str	r2, [r3, #96]	; 0x60
                        }
                    }
                }
            }
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, LPSPI_IP_TIMEOUT_METHOD);
    8eda:	ab07      	add	r3, sp, #28
    8edc:	2100      	movs	r1, #0
    8ede:	4618      	mov	r0, r3
    8ee0:	f7f8 ffdd 	bl	1e9e <OsIf_GetElapsed>
    8ee4:	4602      	mov	r2, r0
    8ee6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8ee8:	4413      	add	r3, r2
    8eea:	9317      	str	r3, [sp, #92]	; 0x5c
            if (ElapsedTicks >= TimeoutTicks)
    8eec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8ef0:	429a      	cmp	r2, r3
    8ef2:	d302      	bcc.n	8efa <Lpspi_Ip_SyncTransmit+0x522>
            {
                Status = LPSPI_IP_TIMEOUT;
    8ef4:	2303      	movs	r3, #3
    8ef6:	9318      	str	r3, [sp, #96]	; 0x60
                break;
    8ef8:	e006      	b.n	8f08 <Lpspi_Ip_SyncTransmit+0x530>
        while(State->RxIndex != State->ExpectedFifoReads)
    8efa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8efc:	8a9a      	ldrh	r2, [r3, #20]
    8efe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f00:	8b1b      	ldrh	r3, [r3, #24]
    8f02:	429a      	cmp	r2, r3
    8f04:	f47f adf6 	bne.w	8af4 <Lpspi_Ip_SyncTransmit+0x11c>
            }
        }
        if ((LPSPI_IP_STATUS_SUCCESS != Status) || (0u == Length))
    8f08:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8f0a:	2b00      	cmp	r3, #0
    8f0c:	d103      	bne.n	8f16 <Lpspi_Ip_SyncTransmit+0x53e>
    8f0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8f12:	2b00      	cmp	r3, #0
    8f14:	d109      	bne.n	8f2a <Lpspi_Ip_SyncTransmit+0x552>
        {
#if (STD_OFF == LPSPI_IP_DEV_ERROR_DETECT)
            /* Return Fail status if length is 0. Error Detect is enabled, nothing need to be done here */
            if (0u == Length)
    8f16:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8f1a:	2b00      	cmp	r3, #0
    8f1c:	d101      	bne.n	8f22 <Lpspi_Ip_SyncTransmit+0x54a>
            {
                Status = LPSPI_IP_STATUS_FAIL;
    8f1e:	2301      	movs	r3, #1
    8f20:	9318      	str	r3, [sp, #96]	; 0x60
            }
#endif
            State->Status = LPSPI_IP_FAULT;
    8f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f24:	2203      	movs	r2, #3
    8f26:	605a      	str	r2, [r3, #4]
    8f28:	e002      	b.n	8f30 <Lpspi_Ip_SyncTransmit+0x558>
        }
        else
        {
            State->Status = LPSPI_IP_IDLE;
    8f2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f2c:	2201      	movs	r2, #1
    8f2e:	605a      	str	r2, [r3, #4]
        }
    }
    return Status;
    8f30:	9b18      	ldr	r3, [sp, #96]	; 0x60
}
    8f32:	4618      	mov	r0, r3
    8f34:	b01a      	add	sp, #104	; 0x68
    8f36:	bd10      	pop	{r4, pc}
    8f38:	00018590 	.word	0x00018590
    8f3c:	1fff8dd8 	.word	0x1fff8dd8

00008f40 <Lpspi_TransmitTxInit>:
                                 const uint8* TxBuffer,
                                 uint16 TxFrameSize,
                                 boolean TxLsb,
                                 uint16 BufLen
                                )
{
    8f40:	b088      	sub	sp, #32
    8f42:	9100      	str	r1, [sp, #0]
    8f44:	4611      	mov	r1, r2
    8f46:	461a      	mov	r2, r3
    8f48:	4603      	mov	r3, r0
    8f4a:	f88d 3007 	strb.w	r3, [sp, #7]
    8f4e:	460b      	mov	r3, r1
    8f50:	f8ad 3004 	strh.w	r3, [sp, #4]
    8f54:	4613      	mov	r3, r2
    8f56:	f88d 3006 	strb.w	r3, [sp, #6]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8f5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f5e:	4a46      	ldr	r2, [pc, #280]	; (9078 <Lpspi_TransmitTxInit+0x138>)
    8f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f64:	9307      	str	r3, [sp, #28]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8f66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f6a:	4a44      	ldr	r2, [pc, #272]	; (907c <Lpspi_TransmitTxInit+0x13c>)
    8f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f70:	9306      	str	r3, [sp, #24]
    uint32 TransferCommand = 0u;
    8f72:	2300      	movs	r3, #0
    8f74:	9305      	str	r3, [sp, #20]
    uint8 LsbWriteValue = TxLsb ? 1U : 0U;
    8f76:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d001      	beq.n	8f82 <Lpspi_TransmitTxInit+0x42>
    8f7e:	2301      	movs	r3, #1
    8f80:	e000      	b.n	8f84 <Lpspi_TransmitTxInit+0x44>
    8f82:	2300      	movs	r3, #0
    8f84:	f88d 3013 	strb.w	r3, [sp, #19]

    State->TxFrameSize = TxFrameSize;
    8f88:	9b06      	ldr	r3, [sp, #24]
    8f8a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8f8e:	851a      	strh	r2, [r3, #40]	; 0x28
    State->TxLsb = TxLsb;
    8f90:	9b06      	ldr	r3, [sp, #24]
    8f92:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8f96:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    /* Get transfer command */
#if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    TransferCommand = State->ExternalDevice->Tcr[State->ClockMode] | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
#else
    TransferCommand = State->ExternalDevice->Tcr | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
    8f9a:	9b06      	ldr	r3, [sp, #24]
    8f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f9e:	689a      	ldr	r2, [r3, #8]
    8fa0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8fa4:	3b01      	subs	r3, #1
    8fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8faa:	431a      	orrs	r2, r3
    8fac:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8fb0:	05db      	lsls	r3, r3, #23
    8fb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    8fb6:	4313      	orrs	r3, r2
    8fb8:	9305      	str	r3, [sp, #20]
        {
            TransferCommand &= ~LPSPI_TCR_CONT_MASK;
        }
        #endif
        
        if(TRUE == State->FirstCmd)
    8fba:	9b06      	ldr	r3, [sp, #24]
    8fbc:	7f5b      	ldrb	r3, [r3, #29]
    8fbe:	2b00      	cmp	r3, #0
    8fc0:	d003      	beq.n	8fca <Lpspi_TransmitTxInit+0x8a>
        {
            /* Set transfer command */
            Base->TCR = TransferCommand;
    8fc2:	9b07      	ldr	r3, [sp, #28]
    8fc4:	9a05      	ldr	r2, [sp, #20]
    8fc6:	661a      	str	r2, [r3, #96]	; 0x60
    8fc8:	e00d      	b.n	8fe6 <Lpspi_TransmitTxInit+0xa6>
        }
        else
        {
            if (0u != (TransferCommand & LPSPI_TCR_CONT_MASK))
    8fca:	9b05      	ldr	r3, [sp, #20]
    8fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8fd0:	2b00      	cmp	r3, #0
    8fd2:	d005      	beq.n	8fe0 <Lpspi_TransmitTxInit+0xa0>
            {
                Base->TCR = TransferCommand | LPSPI_TCR_CONTC_MASK;
    8fd4:	9b05      	ldr	r3, [sp, #20]
    8fd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    8fda:	9b07      	ldr	r3, [sp, #28]
    8fdc:	661a      	str	r2, [r3, #96]	; 0x60
    8fde:	e002      	b.n	8fe6 <Lpspi_TransmitTxInit+0xa6>
            }
            else
            {
                Base->TCR = TransferCommand;
    8fe0:	9b07      	ldr	r3, [sp, #28]
    8fe2:	9a05      	ldr	r2, [sp, #20]
    8fe4:	661a      	str	r2, [r3, #96]	; 0x60
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        if (LPSPI_IP_FULL_DUPLEX == State->ExternalDevice->DeviceParams->TransferType)
        #endif
        {
            /* CMD will take 1 slot in TXFIFO, update current TX FIFO slot. it will be plus 1 when the first frames of channel have recieved */
            State->CurrentTxFifoSlot -= 1u;
    8fe6:	9b06      	ldr	r3, [sp, #24]
    8fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8fec:	3b01      	subs	r3, #1
    8fee:	b2da      	uxtb	r2, r3
    8ff0:	9b06      	ldr	r3, [sp, #24]
    8ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        }
    }
    
    /* Update State structure. */
    State->TxIndex = 0u;
    8ff6:	9b06      	ldr	r3, [sp, #24]
    8ff8:	2200      	movs	r2, #0
    8ffa:	82da      	strh	r2, [r3, #22]
        (void)TxBuffer;
    }
    else
    #endif
    {
        State->TxBuffer = TxBuffer;
    8ffc:	9b06      	ldr	r3, [sp, #24]
    8ffe:	9a00      	ldr	r2, [sp, #0]
    9000:	60da      	str	r2, [r3, #12]
    9002:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    9006:	f8ad 3010 	strh.w	r3, [sp, #16]
    900a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    900e:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (FrameSize < 9u)
    9012:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9016:	2b08      	cmp	r3, #8
    9018:	d804      	bhi.n	9024 <Lpspi_TransmitTxInit+0xe4>
        Ret = Length;
    901a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    901e:	f8ad 300c 	strh.w	r3, [sp, #12]
    9022:	e022      	b.n	906a <Lpspi_TransmitTxInit+0x12a>
    else if (FrameSize < 17u)
    9024:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9028:	2b10      	cmp	r3, #16
    902a:	d80c      	bhi.n	9046 <Lpspi_TransmitTxInit+0x106>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    902c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9030:	085b      	lsrs	r3, r3, #1
    9032:	b29a      	uxth	r2, r3
    9034:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9038:	f003 0301 	and.w	r3, r3, #1
    903c:	b29b      	uxth	r3, r3
    903e:	4413      	add	r3, r2
    9040:	f8ad 300c 	strh.w	r3, [sp, #12]
    9044:	e011      	b.n	906a <Lpspi_TransmitTxInit+0x12a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    9046:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    904a:	089b      	lsrs	r3, r3, #2
    904c:	b29a      	uxth	r2, r3
    904e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9052:	f003 0303 	and.w	r3, r3, #3
    9056:	b29b      	uxth	r3, r3
    9058:	2b00      	cmp	r3, #0
    905a:	bf14      	ite	ne
    905c:	2301      	movne	r3, #1
    905e:	2300      	moveq	r3, #0
    9060:	b2db      	uxtb	r3, r3
    9062:	b29b      	uxth	r3, r3
    9064:	4413      	add	r3, r2
    9066:	f8ad 300c 	strh.w	r3, [sp, #12]
    return Ret;
    906a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    }

    State->ExpectedFifoWrites = Lpspi_Ip_GetWordsFromLength(BufLen, TxFrameSize);
    906e:	9b06      	ldr	r3, [sp, #24]
    9070:	835a      	strh	r2, [r3, #26]
}
    9072:	bf00      	nop
    9074:	b008      	add	sp, #32
    9076:	4770      	bx	lr
    9078:	00018590 	.word	0x00018590
    907c:	1fff8dd8 	.word	0x1fff8dd8

00009080 <Lpspi_TransmitRxInit>:
static void Lpspi_TransmitRxInit(uint8 Instance,
                                      uint8* RxBuffer,
                                      uint16 RxFrameSize,
                                      uint16 BufLen
                                     )
{
    9080:	b088      	sub	sp, #32
    9082:	9102      	str	r1, [sp, #8]
    9084:	4611      	mov	r1, r2
    9086:	461a      	mov	r2, r3
    9088:	4603      	mov	r3, r0
    908a:	f88d 300f 	strb.w	r3, [sp, #15]
    908e:	460b      	mov	r3, r1
    9090:	f8ad 300c 	strh.w	r3, [sp, #12]
    9094:	4613      	mov	r3, r2
    9096:	f8ad 3006 	strh.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    909a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    909e:	4a22      	ldr	r2, [pc, #136]	; (9128 <Lpspi_TransmitRxInit+0xa8>)
    90a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90a4:	9307      	str	r3, [sp, #28]
    
    /* Update State structure. */
    State->RxIndex = 0u;
    90a6:	9b07      	ldr	r3, [sp, #28]
    90a8:	2200      	movs	r2, #0
    90aa:	829a      	strh	r2, [r3, #20]
        (void)RxBuffer; 
    }
    else
    #endif        
    {
        State->RxBuffer = RxBuffer; 
    90ac:	9b07      	ldr	r3, [sp, #28]
    90ae:	9a02      	ldr	r2, [sp, #8]
    90b0:	609a      	str	r2, [r3, #8]
    90b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    90b6:	f8ad 301a 	strh.w	r3, [sp, #26]
    90ba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    90be:	f8ad 3018 	strh.w	r3, [sp, #24]
    if (FrameSize < 9u)
    90c2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    90c6:	2b08      	cmp	r3, #8
    90c8:	d804      	bhi.n	90d4 <Lpspi_TransmitRxInit+0x54>
        Ret = Length;
    90ca:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    90ce:	f8ad 3016 	strh.w	r3, [sp, #22]
    90d2:	e022      	b.n	911a <Lpspi_TransmitRxInit+0x9a>
    else if (FrameSize < 17u)
    90d4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    90d8:	2b10      	cmp	r3, #16
    90da:	d80c      	bhi.n	90f6 <Lpspi_TransmitRxInit+0x76>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    90dc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    90e0:	085b      	lsrs	r3, r3, #1
    90e2:	b29a      	uxth	r2, r3
    90e4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    90e8:	f003 0301 	and.w	r3, r3, #1
    90ec:	b29b      	uxth	r3, r3
    90ee:	4413      	add	r3, r2
    90f0:	f8ad 3016 	strh.w	r3, [sp, #22]
    90f4:	e011      	b.n	911a <Lpspi_TransmitRxInit+0x9a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    90f6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    90fa:	089b      	lsrs	r3, r3, #2
    90fc:	b29a      	uxth	r2, r3
    90fe:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9102:	f003 0303 	and.w	r3, r3, #3
    9106:	b29b      	uxth	r3, r3
    9108:	2b00      	cmp	r3, #0
    910a:	bf14      	ite	ne
    910c:	2301      	movne	r3, #1
    910e:	2300      	moveq	r3, #0
    9110:	b2db      	uxtb	r3, r3
    9112:	b29b      	uxth	r3, r3
    9114:	4413      	add	r3, r2
    9116:	f8ad 3016 	strh.w	r3, [sp, #22]
    return Ret;
    911a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    }

    State->ExpectedFifoReads = Lpspi_Ip_GetWordsFromLength(BufLen, RxFrameSize);
    911e:	9b07      	ldr	r3, [sp, #28]
    9120:	831a      	strh	r2, [r3, #24]
}
    9122:	bf00      	nop
    9124:	b008      	add	sp, #32
    9126:	4770      	bx	lr
    9128:	1fff8dd8 	.word	0x1fff8dd8

0000912c <Lpspi_Ip_AsyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            Lpspi_Ip_CallbackType EndCallback
                                          )
{
    912c:	b500      	push	{lr}
    912e:	b08b      	sub	sp, #44	; 0x2c
    9130:	9005      	str	r0, [sp, #20]
    9132:	9104      	str	r1, [sp, #16]
    9134:	9203      	str	r2, [sp, #12]
    9136:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    913a:	2300      	movs	r3, #0
    913c:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Instance = 0u;
    913e:	2300      	movs	r3, #0
    9140:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    9144:	9b05      	ldr	r3, [sp, #20]
    9146:	781b      	ldrb	r3, [r3, #0]
    9148:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    914c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9150:	4a3d      	ldr	r2, [pc, #244]	; (9248 <Lpspi_Ip_AsyncTransmit+0x11c>)
    9152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9156:	9307      	str	r3, [sp, #28]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];
    9158:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    915c:	4a3b      	ldr	r2, [pc, #236]	; (924c <Lpspi_Ip_AsyncTransmit+0x120>)
    915e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9162:	9306      	str	r3, [sp, #24]
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09();
    9164:	f00d f93e 	bl	163e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>
    if (LPSPI_IP_BUSY == State->Status)
    9168:	9b07      	ldr	r3, [sp, #28]
    916a:	685b      	ldr	r3, [r3, #4]
    916c:	2b02      	cmp	r3, #2
    916e:	d104      	bne.n	917a <Lpspi_Ip_AsyncTransmit+0x4e>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    9170:	f00d f964 	bl	1643c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        Status = LPSPI_IP_STATUS_FAIL;
    9174:	2301      	movs	r3, #1
    9176:	9309      	str	r3, [sp, #36]	; 0x24
    9178:	e061      	b.n	923e <Lpspi_Ip_AsyncTransmit+0x112>
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    917a:	9b07      	ldr	r3, [sp, #28]
    917c:	2202      	movs	r2, #2
    917e:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    9180:	9b07      	ldr	r3, [sp, #28]
    9182:	9a05      	ldr	r2, [sp, #20]
    9184:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    9186:	f00d f959 	bl	1643c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        
        /* Update State structure. */
        State->Callback = EndCallback;
    918a:	9b07      	ldr	r3, [sp, #28]
    918c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    918e:	611a      	str	r2, [r3, #16]
        State->NextTransferConfigAvailable = State->KeepCs;
    9190:	9b07      	ldr	r3, [sp, #28]
    9192:	7f1a      	ldrb	r2, [r3, #28]
    9194:	9b07      	ldr	r3, [sp, #28]
    9196:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Reset TX done flag */
        State->TxDoneFlag = FALSE;
    919a:	9b07      	ldr	r3, [sp, #28]
    919c:	2200      	movs	r2, #0
    919e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    91a2:	9b07      	ldr	r3, [sp, #28]
    91a4:	7f5b      	ldrb	r3, [r3, #29]
    91a6:	2b00      	cmp	r3, #0
    91a8:	d028      	beq.n	91fc <Lpspi_Ip_AsyncTransmit+0xd0>
        {
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11();
    91aa:	f00d f9bf 	bl	1652c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>
            /* Make sure that FIFOs will be empty before start new transfer session */
            Base->CR |= LPSPI_CR_RTF_MASK|LPSPI_CR_RRF_MASK;
    91ae:	9b06      	ldr	r3, [sp, #24]
    91b0:	691b      	ldr	r3, [r3, #16]
    91b2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
    91b6:	9b06      	ldr	r3, [sp, #24]
    91b8:	611a      	str	r2, [r3, #16]
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    91ba:	9b06      	ldr	r3, [sp, #24]
    91bc:	695b      	ldr	r3, [r3, #20]
    91be:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    91c2:	9b06      	ldr	r3, [sp, #24]
    91c4:	615a      	str	r2, [r3, #20]
            #endif
            {
                #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
                Base->CCR = ExternalDevice->Ccr[State->ClockMode];
                #else
                Base->CCR = ExternalDevice->Ccr;
    91c6:	9b05      	ldr	r3, [sp, #20]
    91c8:	685a      	ldr	r2, [r3, #4]
    91ca:	9b06      	ldr	r3, [sp, #24]
    91cc:	641a      	str	r2, [r3, #64]	; 0x40
                #endif
            }
            /* Update current FIFO slots are available to fill .*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    91ce:	9b07      	ldr	r3, [sp, #28]
    91d0:	2204      	movs	r2, #4
    91d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            /* In setting up Transmit command register, the RXMSK is also cleared */
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    91d6:	9b07      	ldr	r3, [sp, #28]
    91d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91da:	68db      	ldr	r3, [r3, #12]
    91dc:	881a      	ldrh	r2, [r3, #0]
    91de:	9b07      	ldr	r3, [sp, #28]
    91e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91e2:	68db      	ldr	r3, [r3, #12]
    91e4:	7899      	ldrb	r1, [r3, #2]
    91e6:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    91ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    91ee:	9300      	str	r3, [sp, #0]
    91f0:	460b      	mov	r3, r1
    91f2:	9904      	ldr	r1, [sp, #16]
    91f4:	f7ff fea4 	bl	8f40 <Lpspi_TransmitTxInit>
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11();
    91f8:	f00d f9c4 	bl	16584 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    91fc:	9b07      	ldr	r3, [sp, #28]
    91fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9200:	68db      	ldr	r3, [r3, #12]
    9202:	881a      	ldrh	r2, [r3, #0]
    9204:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    9208:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    920c:	9903      	ldr	r1, [sp, #12]
    920e:	f7ff ff37 	bl	9080 <Lpspi_TransmitRxInit>
            }
            else
            #endif
            {
                /* Set TX water */
                Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    9212:	9b06      	ldr	r3, [sp, #24]
    9214:	2203      	movs	r2, #3
    9216:	659a      	str	r2, [r3, #88]	; 0x58
            }
            
            /* Disable DMA requests */
            Base->DER = 0u;
    9218:	9b06      	ldr	r3, [sp, #24]
    921a:	2200      	movs	r2, #0
    921c:	61da      	str	r2, [r3, #28]
            switch (State->TransferMode)
    921e:	9b07      	ldr	r3, [sp, #28]
    9220:	681b      	ldr	r3, [r3, #0]
    9222:	2b00      	cmp	r3, #0
    9224:	d002      	beq.n	922c <Lpspi_Ip_AsyncTransmit+0x100>
    9226:	2b01      	cmp	r3, #1
    9228:	d004      	beq.n	9234 <Lpspi_Ip_AsyncTransmit+0x108>
                case LPSPI_IP_INTERRUPT:
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
                    break;
                default:
                    /* Nothing to do */
                    break;
    922a:	e008      	b.n	923e <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = 0u;
    922c:	9b06      	ldr	r3, [sp, #24]
    922e:	2200      	movs	r2, #0
    9230:	619a      	str	r2, [r3, #24]
                    break;
    9232:	e004      	b.n	923e <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
    9234:	9b06      	ldr	r3, [sp, #24]
    9236:	f641 0203 	movw	r2, #6147	; 0x1803
    923a:	619a      	str	r2, [r3, #24]
                    break;
    923c:	bf00      	nop
            /* Enable DMA request. */
            Base->DER = LPSPI_DER_RDDE_MASK | LPSPI_DER_TDDE_MASK;
        }
        #endif
    }
    return Status;
    923e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9240:	4618      	mov	r0, r3
    9242:	b00b      	add	sp, #44	; 0x2c
    9244:	f85d fb04 	ldr.w	pc, [sp], #4
    9248:	1fff8dd8 	.word	0x1fff8dd8
    924c:	00018590 	.word	0x00018590

00009250 <Lpspi_Ip_ManageBuffers>:
}
#endif
#endif

void Lpspi_Ip_ManageBuffers(uint8 Instance)
{
    9250:	b500      	push	{lr}
    9252:	b085      	sub	sp, #20
    9254:	4603      	mov	r3, r0
    9256:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    925a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    925e:	4a14      	ldr	r2, [pc, #80]	; (92b0 <Lpspi_Ip_ManageBuffers+0x60>)
    9260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9264:	9303      	str	r3, [sp, #12]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    9266:	f89d 3007 	ldrb.w	r3, [sp, #7]
    926a:	4a12      	ldr	r2, [pc, #72]	; (92b4 <Lpspi_Ip_ManageBuffers+0x64>)
    926c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9270:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_POLLING == State->TransferMode)
    9272:	9b02      	ldr	r3, [sp, #8]
    9274:	681b      	ldr	r3, [r3, #0]
    9276:	2b00      	cmp	r3, #0
    9278:	d115      	bne.n	92a6 <Lpspi_Ip_ManageBuffers+0x56>
                - Receive: Both TDF (push CDM) and DRF (receive data) are set.
               In half duplex Slave mode:
                - Transmit: TDF is set only, RDF will never be set by RX FIFO have masked.
                - Receive: Both TDF and RDF are set. But only process for RDF to receive data. In this case, State->CurrentTxFifoSlot will be set to 0 */
            if(
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    927a:	9b03      	ldr	r3, [sp, #12]
    927c:	695b      	ldr	r3, [r3, #20]
    927e:	f003 0302 	and.w	r3, r3, #2
            if(
    9282:	2b00      	cmp	r3, #0
    9284:	d10a      	bne.n	929c <Lpspi_Ip_ManageBuffers+0x4c>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    9286:	9b03      	ldr	r3, [sp, #12]
    9288:	695b      	ldr	r3, [r3, #20]
    928a:	f003 0301 	and.w	r3, r3, #1
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    928e:	2b00      	cmp	r3, #0
    9290:	d009      	beq.n	92a6 <Lpspi_Ip_ManageBuffers+0x56>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    9292:	9b02      	ldr	r3, [sp, #8]
    9294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    9298:	2b00      	cmp	r3, #0
    929a:	d004      	beq.n	92a6 <Lpspi_Ip_ManageBuffers+0x56>
                    Lpspi_Ip_TransferProcessHalfDuplex(Instance);
                }
                else
                #endif
                {
                    Lpspi_Ip_TransferProcess(Instance); 
    929c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92a0:	4618      	mov	r0, r3
    92a2:	f7ff f8cd 	bl	8440 <Lpspi_Ip_TransferProcess>
                Lpspi_Ip_IrqTxDmaHandler(Instance);
            }
        }
        #endif
    }
}
    92a6:	bf00      	nop
    92a8:	b005      	add	sp, #20
    92aa:	f85d fb04 	ldr.w	pc, [sp], #4
    92ae:	bf00      	nop
    92b0:	00018590 	.word	0x00018590
    92b4:	1fff8dd8 	.word	0x1fff8dd8

000092b8 <Lpspi_Ip_UpdateFrameSize>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_UpdateFrameSize(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint16 FrameSize)
{
    92b8:	b084      	sub	sp, #16
    92ba:	9001      	str	r0, [sp, #4]
    92bc:	460b      	mov	r3, r1
    92be:	f8ad 3002 	strh.w	r3, [sp, #2]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    92c2:	2300      	movs	r3, #0
    92c4:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    DevAssert(LPSPI_IP_FRAMESIZE_MAX_U16 >= FrameSize);
    DevAssert(LPSPI_IP_FRAMESIZE_MIN_U16 <= FrameSize);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    92c6:	9b01      	ldr	r3, [sp, #4]
    92c8:	781b      	ldrb	r3, [r3, #0]
    92ca:	461a      	mov	r2, r3
    92cc:	4b09      	ldr	r3, [pc, #36]	; (92f4 <Lpspi_Ip_UpdateFrameSize+0x3c>)
    92ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    92d2:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Frame size can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    92d4:	9b02      	ldr	r3, [sp, #8]
    92d6:	685b      	ldr	r3, [r3, #4]
    92d8:	2b02      	cmp	r3, #2
    92da:	d005      	beq.n	92e8 <Lpspi_Ip_UpdateFrameSize+0x30>
    {
        ExternalDevice->DeviceParams->FrameSize = FrameSize;
    92dc:	9b01      	ldr	r3, [sp, #4]
    92de:	68db      	ldr	r3, [r3, #12]
    92e0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    92e4:	801a      	strh	r2, [r3, #0]
    92e6:	e001      	b.n	92ec <Lpspi_Ip_UpdateFrameSize+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    92e8:	2301      	movs	r3, #1
    92ea:	9303      	str	r3, [sp, #12]
    }
    return Status;
    92ec:	9b03      	ldr	r3, [sp, #12]
}
    92ee:	4618      	mov	r0, r3
    92f0:	b004      	add	sp, #16
    92f2:	4770      	bx	lr
    92f4:	1fff8dd8 	.word	0x1fff8dd8

000092f8 <Lpspi_Ip_UpdateLsb>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateLsb(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, boolean Lsb)
{
    92f8:	b084      	sub	sp, #16
    92fa:	9001      	str	r0, [sp, #4]
    92fc:	460b      	mov	r3, r1
    92fe:	f88d 3003 	strb.w	r3, [sp, #3]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    9302:	2300      	movs	r3, #0
    9304:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    9306:	9b01      	ldr	r3, [sp, #4]
    9308:	781b      	ldrb	r3, [r3, #0]
    930a:	461a      	mov	r2, r3
    930c:	4b09      	ldr	r3, [pc, #36]	; (9334 <Lpspi_Ip_UpdateLsb+0x3c>)
    930e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9312:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    9314:	9b02      	ldr	r3, [sp, #8]
    9316:	685b      	ldr	r3, [r3, #4]
    9318:	2b02      	cmp	r3, #2
    931a:	d005      	beq.n	9328 <Lpspi_Ip_UpdateLsb+0x30>
    {
        ExternalDevice->DeviceParams->Lsb = Lsb;
    931c:	9b01      	ldr	r3, [sp, #4]
    931e:	68db      	ldr	r3, [r3, #12]
    9320:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9324:	709a      	strb	r2, [r3, #2]
    9326:	e001      	b.n	932c <Lpspi_Ip_UpdateLsb+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    9328:	2301      	movs	r3, #1
    932a:	9303      	str	r3, [sp, #12]
    }
    return Status;
    932c:	9b03      	ldr	r3, [sp, #12]
}
    932e:	4618      	mov	r0, r3
    9330:	b004      	add	sp, #16
    9332:	4770      	bx	lr
    9334:	1fff8dd8 	.word	0x1fff8dd8

00009338 <Lpspi_Ip_UpdateDefaultTransmitData>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateDefaultTransmitData(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint32 DefaultData)
{
    9338:	b084      	sub	sp, #16
    933a:	9001      	str	r0, [sp, #4]
    933c:	9100      	str	r1, [sp, #0]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    933e:	2300      	movs	r3, #0
    9340:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    9342:	9b01      	ldr	r3, [sp, #4]
    9344:	781b      	ldrb	r3, [r3, #0]
    9346:	461a      	mov	r2, r3
    9348:	4b09      	ldr	r3, [pc, #36]	; (9370 <Lpspi_Ip_UpdateDefaultTransmitData+0x38>)
    934a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    934e:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    9350:	9b02      	ldr	r3, [sp, #8]
    9352:	685b      	ldr	r3, [r3, #4]
    9354:	2b02      	cmp	r3, #2
    9356:	d004      	beq.n	9362 <Lpspi_Ip_UpdateDefaultTransmitData+0x2a>
    {
        ExternalDevice->DeviceParams->DefaultData = DefaultData;
    9358:	9b01      	ldr	r3, [sp, #4]
    935a:	68db      	ldr	r3, [r3, #12]
    935c:	9a00      	ldr	r2, [sp, #0]
    935e:	605a      	str	r2, [r3, #4]
    9360:	e001      	b.n	9366 <Lpspi_Ip_UpdateDefaultTransmitData+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    9362:	2301      	movs	r3, #1
    9364:	9303      	str	r3, [sp, #12]
    }
    return Status;
    9366:	9b03      	ldr	r3, [sp, #12]
}
    9368:	4618      	mov	r0, r3
    936a:	b004      	add	sp, #16
    936c:	4770      	bx	lr
    936e:	bf00      	nop
    9370:	1fff8dd8 	.word	0x1fff8dd8

00009374 <Lpspi_Ip_UpdateTransferMode>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateTransferMode(uint8 Instance, Lpspi_Ip_ModeType Mode)
{
    9374:	b084      	sub	sp, #16
    9376:	4603      	mov	r3, r0
    9378:	9100      	str	r1, [sp, #0]
    937a:	f88d 3007 	strb.w	r3, [sp, #7]
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    937e:	2300      	movs	r3, #0
    9380:	9303      	str	r3, [sp, #12]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    9382:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9386:	4a09      	ldr	r2, [pc, #36]	; (93ac <Lpspi_Ip_UpdateTransferMode+0x38>)
    9388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    938c:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Transfer mode can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    938e:	9b02      	ldr	r3, [sp, #8]
    9390:	685b      	ldr	r3, [r3, #4]
    9392:	2b02      	cmp	r3, #2
    9394:	d003      	beq.n	939e <Lpspi_Ip_UpdateTransferMode+0x2a>
    {
        State->TransferMode = Mode;
    9396:	9b02      	ldr	r3, [sp, #8]
    9398:	9a00      	ldr	r2, [sp, #0]
    939a:	601a      	str	r2, [r3, #0]
    939c:	e001      	b.n	93a2 <Lpspi_Ip_UpdateTransferMode+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    939e:	2301      	movs	r3, #1
    93a0:	9303      	str	r3, [sp, #12]
    }
    return Status;
    93a2:	9b03      	ldr	r3, [sp, #12]
}
    93a4:	4618      	mov	r0, r3
    93a6:	b004      	add	sp, #16
    93a8:	4770      	bx	lr
    93aa:	bf00      	nop
    93ac:	1fff8dd8 	.word	0x1fff8dd8

000093b0 <Lpspi_Ip_Cancel>:

void Lpspi_Ip_Cancel(uint8 Instance)
{
    93b0:	b500      	push	{lr}
    93b2:	b087      	sub	sp, #28
    93b4:	4603      	mov	r3, r0
    93b6:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    uint32 Cfgr1 = 0u;
    93ba:	2300      	movs	r3, #0
    93bc:	9305      	str	r3, [sp, #20]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    93be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93c2:	4a18      	ldr	r2, [pc, #96]	; (9424 <Lpspi_Ip_Cancel+0x74>)
    93c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93c8:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    93ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93ce:	4a16      	ldr	r2, [pc, #88]	; (9428 <Lpspi_Ip_Cancel+0x78>)
    93d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93d4:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10();
    93d6:	f00d f857 	bl	16488 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>
    if (LPSPI_IP_BUSY == State->Status)
    93da:	9b03      	ldr	r3, [sp, #12]
    93dc:	685b      	ldr	r3, [r3, #4]
    93de:	2b02      	cmp	r3, #2
    93e0:	d11a      	bne.n	9418 <Lpspi_Ip_Cancel+0x68>
    {
        /* Mask Rx to discard received data */
        Base->TCR |= LPSPI_TCR_RXMSK(1);
    93e2:	9b04      	ldr	r3, [sp, #16]
    93e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    93e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    93ea:	9b04      	ldr	r3, [sp, #16]
    93ec:	661a      	str	r2, [r3, #96]	; 0x60
        /* store CFGR1 and restore after all registers are reset */
        Cfgr1 = Base->CFGR1;
    93ee:	9b04      	ldr	r3, [sp, #16]
    93f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    93f2:	9305      	str	r3, [sp, #20]
        /* Disable interrupts and DMA requests. */
        /* Clear FIFO */
        /* RTF and RRF will not clear shifter, so RST must be used to ensure old Data in shifter will also be cleared. */
        Base->CR |= LPSPI_CR_RST_MASK;
    93f4:	9b04      	ldr	r3, [sp, #16]
    93f6:	691b      	ldr	r3, [r3, #16]
    93f8:	f043 0202 	orr.w	r2, r3, #2
    93fc:	9b04      	ldr	r3, [sp, #16]
    93fe:	611a      	str	r2, [r3, #16]
        Base->CR &= ~LPSPI_CR_RST_MASK;
    9400:	9b04      	ldr	r3, [sp, #16]
    9402:	691b      	ldr	r3, [r3, #16]
    9404:	f023 0202 	bic.w	r2, r3, #2
    9408:	9b04      	ldr	r3, [sp, #16]
    940a:	611a      	str	r2, [r3, #16]
        /* restore CFGR1 */
        Base->CFGR1 = Cfgr1;
    940c:	9b04      	ldr	r3, [sp, #16]
    940e:	9a05      	ldr	r2, [sp, #20]
    9410:	625a      	str	r2, [r3, #36]	; 0x24
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->RxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->TxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
        #endif
        /* set State to idle */
        State->Status = LPSPI_IP_IDLE;
    9412:	9b03      	ldr	r3, [sp, #12]
    9414:	2201      	movs	r2, #1
    9416:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10();
    9418:	f00d f862 	bl	164e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>
}
    941c:	bf00      	nop
    941e:	b007      	add	sp, #28
    9420:	f85d fb04 	ldr.w	pc, [sp], #4
    9424:	00018590 	.word	0x00018590
    9428:	1fff8dd8 	.word	0x1fff8dd8

0000942c <Lpspi_Ip_IrqHandler>:
* @param[in]     Instance            Instance of the hardware unit.
*
* @implements Lpspi_Ip_IrqHandler_Activity
*/
void Lpspi_Ip_IrqHandler(uint8 Instance)
{
    942c:	b500      	push	{lr}
    942e:	b087      	sub	sp, #28
    9430:	4603      	mov	r3, r0
    9432:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    9436:	f89d 3007 	ldrb.w	r3, [sp, #7]
    943a:	4a18      	ldr	r2, [pc, #96]	; (949c <Lpspi_Ip_IrqHandler+0x70>)
    943c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9440:	9305      	str	r3, [sp, #20]
    const Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    9442:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9446:	4a16      	ldr	r2, [pc, #88]	; (94a0 <Lpspi_Ip_IrqHandler+0x74>)
    9448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    944c:	9304      	str	r3, [sp, #16]
    uint32 IrqFlags = 0u;
    944e:	2300      	movs	r3, #0
    9450:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != State)
    9452:	9b04      	ldr	r3, [sp, #16]
    9454:	2b00      	cmp	r3, #0
    9456:	d016      	beq.n	9486 <Lpspi_Ip_IrqHandler+0x5a>
    {
        /* the driver has been initialized */
        IrqFlags = Base->SR & (LPSPI_SR_TDF_MASK | LPSPI_SR_RDF_MASK | LPSPI_SR_TEF_MASK | LPSPI_SR_REF_MASK);
    9458:	9b05      	ldr	r3, [sp, #20]
    945a:	695a      	ldr	r2, [r3, #20]
    945c:	f641 0303 	movw	r3, #6147	; 0x1803
    9460:	4013      	ands	r3, r2
    9462:	9303      	str	r3, [sp, #12]
        IrqFlags &= Base->IER & (LPSPI_IER_TDIE_MASK | LPSPI_IER_RDIE_MASK | LPSPI_IER_TEIE_MASK | LPSPI_IER_REIE_MASK);
    9464:	9b05      	ldr	r3, [sp, #20]
    9466:	699a      	ldr	r2, [r3, #24]
    9468:	f641 0303 	movw	r3, #6147	; 0x1803
    946c:	4013      	ands	r3, r2
    946e:	9a03      	ldr	r2, [sp, #12]
    9470:	4013      	ands	r3, r2
    9472:	9303      	str	r3, [sp, #12]
        if (0u != IrqFlags)
    9474:	9b03      	ldr	r3, [sp, #12]
    9476:	2b00      	cmp	r3, #0
    9478:	d00b      	beq.n	9492 <Lpspi_Ip_IrqHandler+0x66>
                Lpspi_Ip_TransferProcessHalfDuplex(Instance);    
            }
            else
            #endif
            {
                Lpspi_Ip_TransferProcess(Instance); 
    947a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    947e:	4618      	mov	r0, r3
    9480:	f7fe ffde 	bl	8440 <Lpspi_Ip_TransferProcess>
    {
        /* the driver has not been initialized */
        /* clear all flags */
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    }
}
    9484:	e005      	b.n	9492 <Lpspi_Ip_IrqHandler+0x66>
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    9486:	9b05      	ldr	r3, [sp, #20]
    9488:	695b      	ldr	r3, [r3, #20]
    948a:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    948e:	9b05      	ldr	r3, [sp, #20]
    9490:	615a      	str	r2, [r3, #20]
}
    9492:	bf00      	nop
    9494:	b007      	add	sp, #28
    9496:	f85d fb04 	ldr.w	pc, [sp], #4
    949a:	bf00      	nop
    949c:	00018590 	.word	0x00018590
    94a0:	1fff8dd8 	.word	0x1fff8dd8

000094a4 <Lpspi_Ip_GetStatus>:
* @param[in]        Instance - SPI peripheral instance number.
*
* @return           Lpspi_Ip_HwStatusType
*/
Lpspi_Ip_HwStatusType Lpspi_Ip_GetStatus(uint8 Instance)
{
    94a4:	b084      	sub	sp, #16
    94a6:	4603      	mov	r3, r0
    94a8:	f88d 3007 	strb.w	r3, [sp, #7]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_HwStatusType Status = LPSPI_IP_UNINIT;
    94ac:	2300      	movs	r3, #0
    94ae:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    94b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94b4:	4a06      	ldr	r2, [pc, #24]	; (94d0 <Lpspi_Ip_GetStatus+0x2c>)
    94b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94ba:	9302      	str	r3, [sp, #8]
    if (State != NULL_PTR)
    94bc:	9b02      	ldr	r3, [sp, #8]
    94be:	2b00      	cmp	r3, #0
    94c0:	d002      	beq.n	94c8 <Lpspi_Ip_GetStatus+0x24>
    {
        Status = State->Status;
    94c2:	9b02      	ldr	r3, [sp, #8]
    94c4:	685b      	ldr	r3, [r3, #4]
    94c6:	9303      	str	r3, [sp, #12]
    }
    
    return Status;
    94c8:	9b03      	ldr	r3, [sp, #12]
}
    94ca:	4618      	mov	r0, r3
    94cc:	b004      	add	sp, #16
    94ce:	4770      	bx	lr
    94d0:	1fff8dd8 	.word	0x1fff8dd8

000094d4 <Spi_CheckInit>:
static inline Std_ReturnType Spi_CheckInit
    ( 
        const Spi_ConfigType *ConfigPtr,
        uint32 SpiCoreID
    )
{
    94d4:	b086      	sub	sp, #24
    94d6:	9001      	str	r0, [sp, #4]
    94d8:	9100      	str	r1, [sp, #0]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    94da:	2300      	movs	r3, #0
    94dc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 Sequence;
#endif

#if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
    /* Configuration sizes must be checked for Post Build & Link Time configurations */
    Channel  = (uint32)(ConfigPtr->SpiMaxChannel);
    94e0:	9b01      	ldr	r3, [sp, #4]
    94e2:	789b      	ldrb	r3, [r3, #2]
    94e4:	9304      	str	r3, [sp, #16]
    Job      = (uint32)(ConfigPtr->SpiMaxJob);
    94e6:	9b01      	ldr	r3, [sp, #4]
    94e8:	889b      	ldrh	r3, [r3, #4]
    94ea:	9303      	str	r3, [sp, #12]
    Sequence = (uint32)(ConfigPtr->SpiMaxSequence);
    94ec:	9b01      	ldr	r3, [sp, #4]
    94ee:	799b      	ldrb	r3, [r3, #6]
    94f0:	9302      	str	r3, [sp, #8]

    if ((Channel >= SPI_MAX_CHANNEL) || (Job >= SPI_MAX_JOB) || (Sequence >= SPI_MAX_SEQUENCE))
    94f2:	9b04      	ldr	r3, [sp, #16]
    94f4:	2b01      	cmp	r3, #1
    94f6:	d805      	bhi.n	9504 <Spi_CheckInit+0x30>
    94f8:	9b03      	ldr	r3, [sp, #12]
    94fa:	2b00      	cmp	r3, #0
    94fc:	d102      	bne.n	9504 <Spi_CheckInit+0x30>
    94fe:	9b02      	ldr	r3, [sp, #8]
    9500:	2b00      	cmp	r3, #0
    9502:	d002      	beq.n	950a <Spi_CheckInit+0x36>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    9504:	2301      	movs	r3, #1
    9506:	f88d 3017 	strb.w	r3, [sp, #23]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_CONFIG_OUT_OF_RANGE);
#endif
    }
    if (SpiCoreID != ConfigPtr->SpiCoreUse)
    950a:	9b01      	ldr	r3, [sp, #4]
    950c:	689b      	ldr	r3, [r3, #8]
    950e:	9a00      	ldr	r2, [sp, #0]
    9510:	429a      	cmp	r2, r3
    9512:	d002      	beq.n	951a <Spi_CheckInit+0x46>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    9514:	2301      	movs	r3, #1
    9516:	f88d 3017 	strb.w	r3, [sp, #23]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_INVALID_POINTER);
#endif
    }
#endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */

    return CheckStatus;
    951a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    951e:	4618      	mov	r0, r3
    9520:	b006      	add	sp, #24
    9522:	4770      	bx	lr

00009524 <Spi_SyncJobsTranfer>:
static Std_ReturnType Spi_SyncJobsTranfer
    (
        const Spi_SequenceConfigType *SequenceConfig,
        uint32 SpiCoreID
    )
{
    9524:	b500      	push	{lr}
    9526:	b089      	sub	sp, #36	; 0x24
    9528:	9001      	str	r0, [sp, #4]
    952a:	9100      	str	r1, [sp, #0]
    Spi_JobType JobsCount;
    const Spi_JobType *JobIndexList;
    Spi_JobType Job;
    Spi_JobStateType *JobState;
    const Spi_JobConfigType *JobConfig;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    952c:	2300      	movs	r3, #0
    952e:	f88d 3017 	strb.w	r3, [sp, #23]
    
    /* Get the number of jobs in the sequence */
    JobsCount = SequenceConfig->NumJobs;
    9532:	9b01      	ldr	r3, [sp, #4]
    9534:	881b      	ldrh	r3, [r3, #0]
    9536:	f8ad 301e 	strh.w	r3, [sp, #30]
    JobIndexList = SequenceConfig->JobIndexList;
    953a:	9b01      	ldr	r3, [sp, #4]
    953c:	689b      	ldr	r3, [r3, #8]
    953e:	9306      	str	r3, [sp, #24]
    while (0u < JobsCount)
    9540:	e072      	b.n	9628 <Spi_SyncJobsTranfer+0x104>
    {
        /* Get the job id */
        Job = *JobIndexList;
    9542:	9b06      	ldr	r3, [sp, #24]
    9544:	881b      	ldrh	r3, [r3, #0]
    9546:	f8ad 3014 	strh.w	r3, [sp, #20]
        /* Set the job status as pending */
        JobState = &Spi_axSpiJobState[Job];
    954a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    954e:	009b      	lsls	r3, r3, #2
    9550:	4a3a      	ldr	r2, [pc, #232]	; (963c <Spi_SyncJobsTranfer+0x118>)
    9552:	4413      	add	r3, r2
    9554:	9304      	str	r3, [sp, #16]
        JobState->Result = SPI_JOB_PENDING;
    9556:	9b04      	ldr	r3, [sp, #16]
    9558:	2201      	movs	r2, #1
    955a:	601a      	str	r2, [r3, #0]
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    955c:	4a38      	ldr	r2, [pc, #224]	; (9640 <Spi_SyncJobsTranfer+0x11c>)
    955e:	9b00      	ldr	r3, [sp, #0]
    9560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9564:	691a      	ldr	r2, [r3, #16]
    9566:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    956a:	009b      	lsls	r3, r3, #2
    956c:	4413      	add	r3, r2
    956e:	681b      	ldr	r3, [r3, #0]
    9570:	9303      	str	r3, [sp, #12]
        
        /* start job notification to assert the non-cs pin,
        when non-cs pin is used as chipselect*/
        if (NULL_PTR != JobConfig->StartNotification)
    9572:	9b03      	ldr	r3, [sp, #12]
    9574:	68db      	ldr	r3, [r3, #12]
    9576:	2b00      	cmp	r3, #0
    9578:	d002      	beq.n	9580 <Spi_SyncJobsTranfer+0x5c>
        {
            JobConfig->StartNotification();
    957a:	9b03      	ldr	r3, [sp, #12]
    957c:	68db      	ldr	r3, [r3, #12]
    957e:	4798      	blx	r3
        else
        {
            /* Do nothing */
        }
        /* Mark HWUnit as busy */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_BUSY;
    9580:	9b03      	ldr	r3, [sp, #12]
    9582:	7f1b      	ldrb	r3, [r3, #28]
    9584:	4619      	mov	r1, r3
    9586:	4b2f      	ldr	r3, [pc, #188]	; (9644 <Spi_SyncJobsTranfer+0x120>)
    9588:	2202      	movs	r2, #2
    958a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        Status = Spi_Ipw_SyncTransmit(JobConfig, SpiCoreID);
    958e:	9900      	ldr	r1, [sp, #0]
    9590:	9803      	ldr	r0, [sp, #12]
    9592:	f000 fc5f 	bl	9e54 <Spi_Ipw_SyncTransmit>
    9596:	4603      	mov	r3, r0
    9598:	f88d 3017 	strb.w	r3, [sp, #23]
        
        /* release HWUnit */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_IDLE;
    959c:	9b03      	ldr	r3, [sp, #12]
    959e:	7f1b      	ldrb	r3, [r3, #28]
    95a0:	4619      	mov	r1, r3
    95a2:	4b28      	ldr	r3, [pc, #160]	; (9644 <Spi_SyncJobsTranfer+0x120>)
    95a4:	2201      	movs	r2, #1
    95a6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        if ((Std_ReturnType)E_OK == Status)
    95aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    95ae:	2b00      	cmp	r3, #0
    95b0:	d10a      	bne.n	95c8 <Spi_SyncJobsTranfer+0xa4>
        {
            /* Job is done set the status as OK */
            JobState->Result = SPI_JOB_OK;
    95b2:	9b04      	ldr	r3, [sp, #16]
    95b4:	2200      	movs	r2, #0
    95b6:	601a      	str	r2, [r3, #0]
            /* Perform job EndNotification (if there is one) */
            if (NULL_PTR != JobConfig->EndNotification)
    95b8:	9b03      	ldr	r3, [sp, #12]
    95ba:	689b      	ldr	r3, [r3, #8]
    95bc:	2b00      	cmp	r3, #0
    95be:	d02b      	beq.n	9618 <Spi_SyncJobsTranfer+0xf4>
            {
                JobConfig->EndNotification();
    95c0:	9b03      	ldr	r3, [sp, #12]
    95c2:	689b      	ldr	r3, [r3, #8]
    95c4:	4798      	blx	r3
    95c6:	e027      	b.n	9618 <Spi_SyncJobsTranfer+0xf4>
            /* transmission failed */
            /* set the remaining job status (including the current one) as FAILED */
            do
            {
                /* Set the job status as FAILED */
                Spi_axSpiJobState[*JobIndexList].Result = SPI_JOB_FAILED;
    95c8:	9b06      	ldr	r3, [sp, #24]
    95ca:	881b      	ldrh	r3, [r3, #0]
    95cc:	4619      	mov	r1, r3
    95ce:	4b1b      	ldr	r3, [pc, #108]	; (963c <Spi_SyncJobsTranfer+0x118>)
    95d0:	2202      	movs	r2, #2
    95d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                /* Update pointer position for JobConfig */
                JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[*JobIndexList].JobCfg;
    95d6:	4a1a      	ldr	r2, [pc, #104]	; (9640 <Spi_SyncJobsTranfer+0x11c>)
    95d8:	9b00      	ldr	r3, [sp, #0]
    95da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95de:	691a      	ldr	r2, [r3, #16]
    95e0:	9b06      	ldr	r3, [sp, #24]
    95e2:	881b      	ldrh	r3, [r3, #0]
    95e4:	009b      	lsls	r3, r3, #2
    95e6:	4413      	add	r3, r2
    95e8:	681b      	ldr	r3, [r3, #0]
    95ea:	9303      	str	r3, [sp, #12]
                /* Perform job EndNotification (if there is one) */
                if (NULL_PTR != JobConfig->EndNotification)
    95ec:	9b03      	ldr	r3, [sp, #12]
    95ee:	689b      	ldr	r3, [r3, #8]
    95f0:	2b00      	cmp	r3, #0
    95f2:	d002      	beq.n	95fa <Spi_SyncJobsTranfer+0xd6>
                {
                    JobConfig->EndNotification();
    95f4:	9b03      	ldr	r3, [sp, #12]
    95f6:	689b      	ldr	r3, [r3, #8]
    95f8:	4798      	blx	r3
                }
                else
                {
                    /* Do nothing */
                }
                JobIndexList++;
    95fa:	9b06      	ldr	r3, [sp, #24]
    95fc:	3302      	adds	r3, #2
    95fe:	9306      	str	r3, [sp, #24]
                JobsCount--;
    9600:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9604:	3b01      	subs	r3, #1
    9606:	f8ad 301e 	strh.w	r3, [sp, #30]
            } while (0u < JobsCount);
    960a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    960e:	2b00      	cmp	r3, #0
    9610:	d1da      	bne.n	95c8 <Spi_SyncJobsTranfer+0xa4>
            JobsCount = 1u;  /* needed to end correctly the outer loop */
    9612:	2301      	movs	r3, #1
    9614:	f8ad 301e 	strh.w	r3, [sp, #30]
        }
        /* iterate to next job in sequence */
        JobIndexList++;
    9618:	9b06      	ldr	r3, [sp, #24]
    961a:	3302      	adds	r3, #2
    961c:	9306      	str	r3, [sp, #24]
        JobsCount--;
    961e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9622:	3b01      	subs	r3, #1
    9624:	f8ad 301e 	strh.w	r3, [sp, #30]
    while (0u < JobsCount)
    9628:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    962c:	2b00      	cmp	r3, #0
    962e:	d188      	bne.n	9542 <Spi_SyncJobsTranfer+0x1e>
    } /* while (JobsCount > 0u) */
    return Status;
    9630:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9634:	4618      	mov	r0, r3
    9636:	b009      	add	sp, #36	; 0x24
    9638:	f85d fb04 	ldr.w	pc, [sp], #4
    963c:	1fff8df4 	.word	0x1fff8df4
    9640:	1fff8dec 	.word	0x1fff8dec
    9644:	1fff8de4 	.word	0x1fff8de4

00009648 <Spi_InitChannelsJobsSeqsState>:
*/
static void Spi_InitChannelsJobsSeqsState
    (
        uint32 SpiCoreID      
    )
{
    9648:	b088      	sub	sp, #32
    964a:	9001      	str	r0, [sp, #4]
#endif
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_JobConfigType *JobConfig;
    const Spi_SequenceConfigType *SequenceConfig;
    
    for (Channel = 0u;
    964c:	2300      	movs	r3, #0
    964e:	9307      	str	r3, [sp, #28]
    9650:	e034      	b.n	96bc <Spi_InitChannelsJobsSeqsState+0x74>
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
        Channel++)
    {
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    9652:	4a4a      	ldr	r2, [pc, #296]	; (977c <Spi_InitChannelsJobsSeqsState+0x134>)
    9654:	9b01      	ldr	r3, [sp, #4]
    9656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    965a:	68da      	ldr	r2, [r3, #12]
    965c:	9b07      	ldr	r3, [sp, #28]
    965e:	009b      	lsls	r3, r3, #2
    9660:	4413      	add	r3, r2
    9662:	681b      	ldr	r3, [r3, #0]
    9664:	9302      	str	r3, [sp, #8]
        /* Check which channel has assigned for current core */
        if((NULL_PTR != ChannelConfig) && (SpiCoreID == ChannelConfig->SpiCoreUse))
    9666:	9b02      	ldr	r3, [sp, #8]
    9668:	2b00      	cmp	r3, #0
    966a:	d024      	beq.n	96b6 <Spi_InitChannelsJobsSeqsState+0x6e>
    966c:	9b02      	ldr	r3, [sp, #8]
    966e:	695b      	ldr	r3, [r3, #20]
    9670:	9a01      	ldr	r2, [sp, #4]
    9672:	429a      	cmp	r2, r3
    9674:	d11f      	bne.n	96b6 <Spi_InitChannelsJobsSeqsState+0x6e>
        {
            /* Check if configured buffers are External (EB) */
            if (EB == ChannelConfig->BufferType)
    9676:	9b02      	ldr	r3, [sp, #8]
    9678:	681b      	ldr	r3, [r3, #0]
    967a:	2b01      	cmp	r3, #1
    967c:	d10e      	bne.n	969c <Spi_InitChannelsJobsSeqsState+0x54>
            {
                /* Initialize all buffers */
                ChannelConfig->BufferDescriptor->ExternalBufferTX = NULL_PTR;
    967e:	9b02      	ldr	r3, [sp, #8]
    9680:	691b      	ldr	r3, [r3, #16]
    9682:	2200      	movs	r2, #0
    9684:	601a      	str	r2, [r3, #0]
                ChannelConfig->BufferDescriptor->BufferRX = NULL_PTR;
    9686:	9b02      	ldr	r3, [sp, #8]
    9688:	691b      	ldr	r3, [r3, #16]
    968a:	2200      	movs	r2, #0
    968c:	609a      	str	r2, [r3, #8]
    
                /* Channel length is zero for unconfigured external buffers */
                Spi_axSpiChannelState[Channel].Length = (Spi_NumberOfDataType) 0;
    968e:	4a3c      	ldr	r2, [pc, #240]	; (9780 <Spi_InitChannelsJobsSeqsState+0x138>)
    9690:	9b07      	ldr	r3, [sp, #28]
    9692:	009b      	lsls	r3, r3, #2
    9694:	4413      	add	r3, r2
    9696:	2200      	movs	r2, #0
    9698:	805a      	strh	r2, [r3, #2]
    969a:	e007      	b.n	96ac <Spi_InitChannelsJobsSeqsState+0x64>
            }
            else
            {
                /* Setup channel length according to configuration */
                Spi_axSpiChannelState[Channel].Length = ChannelConfig->Length;
    969c:	9b02      	ldr	r3, [sp, #8]
    969e:	8999      	ldrh	r1, [r3, #12]
    96a0:	4a37      	ldr	r2, [pc, #220]	; (9780 <Spi_InitChannelsJobsSeqsState+0x138>)
    96a2:	9b07      	ldr	r3, [sp, #28]
    96a4:	009b      	lsls	r3, r3, #2
    96a6:	4413      	add	r3, r2
    96a8:	460a      	mov	r2, r1
    96aa:	805a      	strh	r2, [r3, #2]
            }
            Spi_axSpiChannelState[Channel].Flags = SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    96ac:	4a34      	ldr	r2, [pc, #208]	; (9780 <Spi_InitChannelsJobsSeqsState+0x138>)
    96ae:	9b07      	ldr	r3, [sp, #28]
    96b0:	2101      	movs	r1, #1
    96b2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        Channel++)
    96b6:	9b07      	ldr	r3, [sp, #28]
    96b8:	3301      	adds	r3, #1
    96ba:	9307      	str	r3, [sp, #28]
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
    96bc:	4a2f      	ldr	r2, [pc, #188]	; (977c <Spi_InitChannelsJobsSeqsState+0x134>)
    96be:	9b01      	ldr	r3, [sp, #4]
    96c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96c4:	789b      	ldrb	r3, [r3, #2]
    96c6:	461a      	mov	r2, r3
    for (Channel = 0u;
    96c8:	9b07      	ldr	r3, [sp, #28]
    96ca:	4293      	cmp	r3, r2
    96cc:	d9c1      	bls.n	9652 <Spi_InitChannelsJobsSeqsState+0xa>
        }
    }
    
    /* initialize job results */
    for (Job = 0u;
    96ce:	2300      	movs	r3, #0
    96d0:	9306      	str	r3, [sp, #24]
    96d2:	e019      	b.n	9708 <Spi_InitChannelsJobsSeqsState+0xc0>
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
        Job++)
    {
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    96d4:	4a29      	ldr	r2, [pc, #164]	; (977c <Spi_InitChannelsJobsSeqsState+0x134>)
    96d6:	9b01      	ldr	r3, [sp, #4]
    96d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96dc:	691a      	ldr	r2, [r3, #16]
    96de:	9b06      	ldr	r3, [sp, #24]
    96e0:	009b      	lsls	r3, r3, #2
    96e2:	4413      	add	r3, r2
    96e4:	681b      	ldr	r3, [r3, #0]
    96e6:	9303      	str	r3, [sp, #12]
        if((NULL_PTR != JobConfig) && (SpiCoreID == JobConfig->SpiCoreUse))
    96e8:	9b03      	ldr	r3, [sp, #12]
    96ea:	2b00      	cmp	r3, #0
    96ec:	d009      	beq.n	9702 <Spi_InitChannelsJobsSeqsState+0xba>
    96ee:	9b03      	ldr	r3, [sp, #12]
    96f0:	695b      	ldr	r3, [r3, #20]
    96f2:	9a01      	ldr	r2, [sp, #4]
    96f4:	429a      	cmp	r2, r3
    96f6:	d104      	bne.n	9702 <Spi_InitChannelsJobsSeqsState+0xba>
        {
            Spi_axSpiJobState[Job].Result = SPI_JOB_OK;
    96f8:	4a22      	ldr	r2, [pc, #136]	; (9784 <Spi_InitChannelsJobsSeqsState+0x13c>)
    96fa:	9b06      	ldr	r3, [sp, #24]
    96fc:	2100      	movs	r1, #0
    96fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Job++)
    9702:	9b06      	ldr	r3, [sp, #24]
    9704:	3301      	adds	r3, #1
    9706:	9306      	str	r3, [sp, #24]
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
    9708:	4a1c      	ldr	r2, [pc, #112]	; (977c <Spi_InitChannelsJobsSeqsState+0x134>)
    970a:	9b01      	ldr	r3, [sp, #4]
    970c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9710:	889b      	ldrh	r3, [r3, #4]
    9712:	461a      	mov	r2, r3
    for (Job = 0u;
    9714:	9b06      	ldr	r3, [sp, #24]
    9716:	4293      	cmp	r3, r2
    9718:	d9dc      	bls.n	96d4 <Spi_InitChannelsJobsSeqsState+0x8c>
            Spi_axSpiJobState[Job].AsyncCrtSequenceState = NULL_PTR;
        #endif
        }
    }
    
    for (Sequence = 0u;
    971a:	2300      	movs	r3, #0
    971c:	9305      	str	r3, [sp, #20]
    971e:	e01f      	b.n	9760 <Spi_InitChannelsJobsSeqsState+0x118>
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
        Sequence++)
    {
        SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    9720:	4a16      	ldr	r2, [pc, #88]	; (977c <Spi_InitChannelsJobsSeqsState+0x134>)
    9722:	9b01      	ldr	r3, [sp, #4]
    9724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9728:	695a      	ldr	r2, [r3, #20]
    972a:	9b05      	ldr	r3, [sp, #20]
    972c:	009b      	lsls	r3, r3, #2
    972e:	4413      	add	r3, r2
    9730:	681b      	ldr	r3, [r3, #0]
    9732:	9304      	str	r3, [sp, #16]
        if ((NULL_PTR != SequenceConfig) && (SpiCoreID == SequenceConfig->SpiCoreUse))
    9734:	9b04      	ldr	r3, [sp, #16]
    9736:	2b00      	cmp	r3, #0
    9738:	d00f      	beq.n	975a <Spi_InitChannelsJobsSeqsState+0x112>
    973a:	9b04      	ldr	r3, [sp, #16]
    973c:	685b      	ldr	r3, [r3, #4]
    973e:	9a01      	ldr	r2, [sp, #4]
    9740:	429a      	cmp	r2, r3
    9742:	d10a      	bne.n	975a <Spi_InitChannelsJobsSeqsState+0x112>
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
            Spi_axSpiSequenceState[Sequence].Sequence = SequenceConfig;
            #endif
    
            /* initialize sequence results */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_OK;
    9744:	4a10      	ldr	r2, [pc, #64]	; (9788 <Spi_InitChannelsJobsSeqsState+0x140>)
    9746:	9b05      	ldr	r3, [sp, #20]
    9748:	2100      	movs	r1, #0
    974a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* SPI135: Spi_SyncTransmit() must fail if an other sync transmission
                    is ongoing.*/
            /* mark all HW units as used by the sync transmission, in order to
                force the mutual exclusion of Spi_SyncTransmit() calls */
    
            Spi_au32SpiSeqUsedHWUnits[Sequence] = 0xFFFFFFFFU;
    974e:	4a0f      	ldr	r2, [pc, #60]	; (978c <Spi_InitChannelsJobsSeqsState+0x144>)
    9750:	9b05      	ldr	r3, [sp, #20]
    9752:	f04f 31ff 	mov.w	r1, #4294967295
    9756:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Sequence++)
    975a:	9b05      	ldr	r3, [sp, #20]
    975c:	3301      	adds	r3, #1
    975e:	9305      	str	r3, [sp, #20]
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
    9760:	4a06      	ldr	r2, [pc, #24]	; (977c <Spi_InitChannelsJobsSeqsState+0x134>)
    9762:	9b01      	ldr	r3, [sp, #4]
    9764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9768:	799b      	ldrb	r3, [r3, #6]
    976a:	461a      	mov	r2, r3
    for (Sequence = 0u;
    976c:	9b05      	ldr	r3, [sp, #20]
    976e:	4293      	cmp	r3, r2
    9770:	d9d6      	bls.n	9720 <Spi_InitChannelsJobsSeqsState+0xd8>
        else
        {
            /* Do nothing */
        }
    }
}
    9772:	bf00      	nop
    9774:	bf00      	nop
    9776:	b008      	add	sp, #32
    9778:	4770      	bx	lr
    977a:	bf00      	nop
    977c:	1fff8dec 	.word	0x1fff8dec
    9780:	1fff8df8 	.word	0x1fff8df8
    9784:	1fff8df4 	.word	0x1fff8df4
    9788:	1fff8df0 	.word	0x1fff8df0
    978c:	1fff8e00 	.word	0x1fff8e00

00009790 <Spi_GetStatusAsyncCheckHwBusy>:
*/
static Spi_StatusType Spi_GetStatusAsyncCheckHwBusy
    (
        uint32 SpiCoreID
    )
{
    9790:	b084      	sub	sp, #16
    9792:	9001      	str	r0, [sp, #4]
    Spi_StatusType StatusFlag = SPI_IDLE;
    9794:	2301      	movs	r3, #1
    9796:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9798:	2300      	movs	r3, #0
    979a:	f88d 300b 	strb.w	r3, [sp, #11]
    979e:	e028      	b.n	97f2 <Spi_GetStatusAsyncCheckHwBusy+0x62>
    {
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    97a0:	4a18      	ldr	r2, [pc, #96]	; (9804 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    97a2:	9b01      	ldr	r3, [sp, #4]
    97a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97a8:	69da      	ldr	r2, [r3, #28]
    97aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    97ae:	009b      	lsls	r3, r3, #2
    97b0:	4413      	add	r3, r2
    97b2:	681b      	ldr	r3, [r3, #0]
    97b4:	2b00      	cmp	r3, #0
    97b6:	d017      	beq.n	97e8 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    97b8:	4a12      	ldr	r2, [pc, #72]	; (9804 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    97ba:	9b01      	ldr	r3, [sp, #4]
    97bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97c0:	69da      	ldr	r2, [r3, #28]
    97c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    97c6:	009b      	lsls	r3, r3, #2
    97c8:	4413      	add	r3, r2
    97ca:	681b      	ldr	r3, [r3, #0]
    97cc:	689b      	ldr	r3, [r3, #8]
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    97ce:	9a01      	ldr	r2, [sp, #4]
    97d0:	429a      	cmp	r2, r3
    97d2:	d109      	bne.n	97e8 <Spi_GetStatusAsyncCheckHwBusy+0x58>
           )
        {
            if (SPI_BUSY == Spi_axSpiHwUnitQueueArray[HWUnit].Status)
    97d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    97d8:	4a0b      	ldr	r2, [pc, #44]	; (9808 <Spi_GetStatusAsyncCheckHwBusy+0x78>)
    97da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    97de:	2b02      	cmp	r3, #2
    97e0:	d102      	bne.n	97e8 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            {
                StatusFlag = SPI_BUSY;
    97e2:	2302      	movs	r3, #2
    97e4:	9303      	str	r3, [sp, #12]
                break;
    97e6:	e008      	b.n	97fa <Spi_GetStatusAsyncCheckHwBusy+0x6a>
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    97e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    97ec:	3301      	adds	r3, #1
    97ee:	f88d 300b 	strb.w	r3, [sp, #11]
    97f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    97f6:	2b00      	cmp	r3, #0
    97f8:	d0d2      	beq.n	97a0 <Spi_GetStatusAsyncCheckHwBusy+0x10>
        else
        {
            /* Do nothing */
        }
    }
    return StatusFlag;
    97fa:	9b03      	ldr	r3, [sp, #12]
}
    97fc:	4618      	mov	r0, r3
    97fe:	b004      	add	sp, #16
    9800:	4770      	bx	lr
    9802:	bf00      	nop
    9804:	1fff8dec 	.word	0x1fff8dec
    9808:	1fff8de4 	.word	0x1fff8de4

0000980c <Spi_GetVersionInfo>:
/** @implements Spi_GetVersionInfo_Activity */
void Spi_GetVersionInfo 
    (
        Std_VersionInfoType *versioninfo
    )
{
    980c:	b082      	sub	sp, #8
    980e:	9001      	str	r0, [sp, #4]
        (void)Det_ReportError((uint16)SPI_MODULE_ID,(uint8)0,SPI_GETVERSIONINFO_ID,SPI_E_PARAM_POINTER);
    }
    else
    {
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
    versioninfo->vendorID = (uint16)SPI_VENDOR_ID;
    9810:	9b01      	ldr	r3, [sp, #4]
    9812:	222b      	movs	r2, #43	; 0x2b
    9814:	801a      	strh	r2, [r3, #0]
    versioninfo->moduleID = (uint8)SPI_MODULE_ID;
    9816:	9b01      	ldr	r3, [sp, #4]
    9818:	2253      	movs	r2, #83	; 0x53
    981a:	805a      	strh	r2, [r3, #2]
    versioninfo->sw_major_version = (uint8)SPI_SW_MAJOR_VERSION;
    981c:	9b01      	ldr	r3, [sp, #4]
    981e:	2202      	movs	r2, #2
    9820:	711a      	strb	r2, [r3, #4]
    versioninfo->sw_minor_version = (uint8)SPI_SW_MINOR_VERSION;
    9822:	9b01      	ldr	r3, [sp, #4]
    9824:	2200      	movs	r2, #0
    9826:	715a      	strb	r2, [r3, #5]
    versioninfo->sw_patch_version = (uint8)SPI_SW_PATCH_VERSION;
    9828:	9b01      	ldr	r3, [sp, #4]
    982a:	2200      	movs	r2, #0
    982c:	719a      	strb	r2, [r3, #6]
#if(SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
}
    982e:	bf00      	nop
    9830:	b002      	add	sp, #8
    9832:	4770      	bx	lr

00009834 <Spi_Init>:
/** @implements Spi_Init_Activity */
void Spi_Init
    (
        const Spi_ConfigType *ConfigPtr
    )
{
    9834:	b500      	push	{lr}
    9836:	b085      	sub	sp, #20
    9838:	9001      	str	r0, [sp, #4]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    983a:	2300      	movs	r3, #0
    983c:	f88d 300e 	strb.w	r3, [sp, #14]

    SpiCoreID = Spi_GetCoreID;
    9840:	2300      	movs	r3, #0
    9842:	9302      	str	r3, [sp, #8]
    CheckStatus = Spi_InitCheckDemError(SpiCoreID, ConfigPtr);
    if ((Std_ReturnType)E_OK == CheckStatus) 
    {
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/

    CheckStatus = Spi_CheckInit(ConfigPtr, SpiCoreID);
    9844:	9902      	ldr	r1, [sp, #8]
    9846:	9801      	ldr	r0, [sp, #4]
    9848:	f7ff fe44 	bl	94d4 <Spi_CheckInit>
    984c:	4603      	mov	r3, r0
    984e:	f88d 300e 	strb.w	r3, [sp, #14]

    if((Std_ReturnType)E_OK == CheckStatus )
    9852:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9856:	2b00      	cmp	r3, #0
    9858:	d144      	bne.n	98e4 <Spi_Init+0xb0>
    {
    #if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
        Spi_apxSpiConfigPtr[SpiCoreID] = ConfigPtr;
    985a:	4924      	ldr	r1, [pc, #144]	; (98ec <Spi_Init+0xb8>)
    985c:	9b02      	ldr	r3, [sp, #8]
    985e:	9a01      	ldr	r2, [sp, #4]
    9860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #else /* (SPI_CONFIG_VARIANT == SPI_VARIANT_PRECOMPILE) */
        Spi_apxSpiConfigPtr[SpiCoreID] = Spi_PBCfgVariantPredefined[SpiCoreID];
    #endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */
    /* Initiate Channels, Jobs, Sequences state */
    Spi_InitChannelsJobsSeqsState(SpiCoreID);
    9864:	9802      	ldr	r0, [sp, #8]
    9866:	f7ff feef 	bl	9648 <Spi_InitChannelsJobsSeqsState>
        
        /* initialize all physical HWUnits */
        for (HWUnit = (Spi_HWUnitType) 0;
    986a:	2300      	movs	r3, #0
    986c:	f88d 300f 	strb.w	r3, [sp, #15]
    9870:	e034      	b.n	98dc <Spi_Init+0xa8>
            HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
            HWUnit++)
        {
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9872:	4a1e      	ldr	r2, [pc, #120]	; (98ec <Spi_Init+0xb8>)
    9874:	9b02      	ldr	r3, [sp, #8]
    9876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    987a:	69da      	ldr	r2, [r3, #28]
    987c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9880:	009b      	lsls	r3, r3, #2
    9882:	4413      	add	r3, r2
    9884:	681b      	ldr	r3, [r3, #0]
    9886:	2b00      	cmp	r3, #0
    9888:	d023      	beq.n	98d2 <Spi_Init+0x9e>
               (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    988a:	4a18      	ldr	r2, [pc, #96]	; (98ec <Spi_Init+0xb8>)
    988c:	9b02      	ldr	r3, [sp, #8]
    988e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9892:	69da      	ldr	r2, [r3, #28]
    9894:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9898:	009b      	lsls	r3, r3, #2
    989a:	4413      	add	r3, r2
    989c:	681b      	ldr	r3, [r3, #0]
    989e:	689b      	ldr	r3, [r3, #8]
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    98a0:	9a02      	ldr	r2, [sp, #8]
    98a2:	429a      	cmp	r2, r3
    98a4:	d115      	bne.n	98d2 <Spi_Init+0x9e>
              )
            {
                Spi_Ipw_Init(HWUnit, Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig);
    98a6:	4a11      	ldr	r2, [pc, #68]	; (98ec <Spi_Init+0xb8>)
    98a8:	9b02      	ldr	r3, [sp, #8]
    98aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98ae:	69da      	ldr	r2, [r3, #28]
    98b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98b4:	009b      	lsls	r3, r3, #2
    98b6:	4413      	add	r3, r2
    98b8:	681a      	ldr	r2, [r3, #0]
    98ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98be:	4611      	mov	r1, r2
    98c0:	4618      	mov	r0, r3
    98c2:	f000 fa8c 	bl	9dde <Spi_Ipw_Init>

#if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
                /* initialize the Job lists => no scheduled job for the unit */
                Spi_InitJobsList(HWUnit);
#endif
                Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_IDLE;
    98c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98ca:	4a09      	ldr	r2, [pc, #36]	; (98f0 <Spi_Init+0xbc>)
    98cc:	2101      	movs	r1, #1
    98ce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            HWUnit++)
    98d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98d6:	3301      	adds	r3, #1
    98d8:	f88d 300f 	strb.w	r3, [sp, #15]
        for (HWUnit = (Spi_HWUnitType) 0;
    98dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98e0:	2b00      	cmp	r3, #0
    98e2:	d0c6      	beq.n	9872 <Spi_Init+0x3e>
    }

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/
}
    98e4:	bf00      	nop
    98e6:	b005      	add	sp, #20
    98e8:	f85d fb04 	ldr.w	pc, [sp], #4
    98ec:	1fff8dec 	.word	0x1fff8dec
    98f0:	1fff8de4 	.word	0x1fff8de4

000098f4 <Spi_DeInit>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_DeInit_Activity
*/
Std_ReturnType Spi_DeInit(void)
{
    98f4:	b500      	push	{lr}
    98f6:	b083      	sub	sp, #12
    Std_ReturnType TempExit = (Std_ReturnType)E_OK;
    98f8:	2300      	movs	r3, #0
    98fa:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;

    SpiCoreID = Spi_GetCoreID;
    98fe:	2300      	movs	r3, #0
    9900:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Check if Spi Status is Busy */
        if (SPI_BUSY == Spi_GetStatus())
    9902:	f000 f8b1 	bl	9a68 <Spi_GetStatus>
    9906:	4603      	mov	r3, r0
    9908:	2b02      	cmp	r3, #2
    990a:	d103      	bne.n	9914 <Spi_DeInit+0x20>
        {
            TempExit = E_NOT_OK;
    990c:	2301      	movs	r3, #1
    990e:	f88d 3007 	strb.w	r3, [sp, #7]
    9912:	e037      	b.n	9984 <Spi_DeInit+0x90>
        }
        else
        {
            /* De-initialize all physical HWUnits */
            for (HWUnit = (Spi_HWUnitType) 0;
    9914:	2300      	movs	r3, #0
    9916:	f88d 3006 	strb.w	r3, [sp, #6]
    991a:	e02a      	b.n	9972 <Spi_DeInit+0x7e>
                 HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
                 HWUnit++)
            {
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    991c:	4a1c      	ldr	r2, [pc, #112]	; (9990 <Spi_DeInit+0x9c>)
    991e:	9b00      	ldr	r3, [sp, #0]
    9920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9924:	69da      	ldr	r2, [r3, #28]
    9926:	f89d 3006 	ldrb.w	r3, [sp, #6]
    992a:	009b      	lsls	r3, r3, #2
    992c:	4413      	add	r3, r2
    992e:	681b      	ldr	r3, [r3, #0]
    9930:	2b00      	cmp	r3, #0
    9932:	d019      	beq.n	9968 <Spi_DeInit+0x74>
                    (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9934:	4a16      	ldr	r2, [pc, #88]	; (9990 <Spi_DeInit+0x9c>)
    9936:	9b00      	ldr	r3, [sp, #0]
    9938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    993c:	69da      	ldr	r2, [r3, #28]
    993e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9942:	009b      	lsls	r3, r3, #2
    9944:	4413      	add	r3, r2
    9946:	681b      	ldr	r3, [r3, #0]
    9948:	689b      	ldr	r3, [r3, #8]
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    994a:	9a00      	ldr	r2, [sp, #0]
    994c:	429a      	cmp	r2, r3
    994e:	d10b      	bne.n	9968 <Spi_DeInit+0x74>
                   )
                {
                    Spi_Ipw_DeInit(HWUnit, SpiCoreID);
    9950:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9954:	9900      	ldr	r1, [sp, #0]
    9956:	4618      	mov	r0, r3
    9958:	f000 fa54 	bl	9e04 <Spi_Ipw_DeInit>
    
                    Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_UNINIT;
    995c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9960:	4a0c      	ldr	r2, [pc, #48]	; (9994 <Spi_DeInit+0xa0>)
    9962:	2100      	movs	r1, #0
    9964:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                 HWUnit++)
    9968:	f89d 3006 	ldrb.w	r3, [sp, #6]
    996c:	3301      	adds	r3, #1
    996e:	f88d 3006 	strb.w	r3, [sp, #6]
            for (HWUnit = (Spi_HWUnitType) 0;
    9972:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9976:	2b00      	cmp	r3, #0
    9978:	d0d0      	beq.n	991c <Spi_DeInit+0x28>
                {
                    /* Do nothing */
                }
            }
            /* Reset configuration pointer */
            Spi_apxSpiConfigPtr[SpiCoreID] = NULL_PTR;
    997a:	4a05      	ldr	r2, [pc, #20]	; (9990 <Spi_DeInit+0x9c>)
    997c:	9b00      	ldr	r3, [sp, #0]
    997e:	2100      	movs	r1, #0
    9980:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return TempExit;
    9984:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
    9988:	4618      	mov	r0, r3
    998a:	b003      	add	sp, #12
    998c:	f85d fb04 	ldr.w	pc, [sp], #4
    9990:	1fff8dec 	.word	0x1fff8dec
    9994:	1fff8de4 	.word	0x1fff8de4

00009998 <Spi_SetupEB>:
        Spi_ChannelType Channel,
        const Spi_DataBufferType  *SrcDataBufferPtr,
        Spi_DataBufferType *DesDataBufferPtr,
        Spi_NumberOfDataType Length
    )
{
    9998:	b500      	push	{lr}
    999a:	b089      	sub	sp, #36	; 0x24
    999c:	9102      	str	r1, [sp, #8]
    999e:	9201      	str	r2, [sp, #4]
    99a0:	461a      	mov	r2, r3
    99a2:	4603      	mov	r3, r0
    99a4:	f88d 300f 	strb.w	r3, [sp, #15]
    99a8:	4613      	mov	r3, r2
    99aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    99ae:	2300      	movs	r3, #0
    99b0:	f88d 301f 	strb.w	r3, [sp, #31]
    Spi_ChannelStateType *ChannelState;
    const Spi_ChannelConfigType *ChannelConfig;
    uint32 SpiCoreID;

    /* get current coreID */
    SpiCoreID = Spi_GetCoreID;
    99b4:	2300      	movs	r3, #0
    99b6:	9306      	str	r3, [sp, #24]
        Status = (Std_ReturnType)E_NOT_OK;
    }
    else
    {
#endif
        ChannelState = &Spi_axSpiChannelState[Channel];
    99b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99bc:	009b      	lsls	r3, r3, #2
    99be:	4a28      	ldr	r2, [pc, #160]	; (9a60 <Spi_SetupEB+0xc8>)
    99c0:	4413      	add	r3, r2
    99c2:	9305      	str	r3, [sp, #20]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    99c4:	4a27      	ldr	r2, [pc, #156]	; (9a64 <Spi_SetupEB+0xcc>)
    99c6:	9b06      	ldr	r3, [sp, #24]
    99c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99cc:	68da      	ldr	r2, [r3, #12]
    99ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99d2:	009b      	lsls	r3, r3, #2
    99d4:	4413      	add	r3, r2
    99d6:	681b      	ldr	r3, [r3, #0]
    99d8:	9304      	str	r3, [sp, #16]
        /* exit early if this is the wrong buffer type */
        if (IB == ChannelConfig->BufferType)
    99da:	9b04      	ldr	r3, [sp, #16]
    99dc:	681b      	ldr	r3, [r3, #0]
    99de:	2b00      	cmp	r3, #0
    99e0:	d103      	bne.n	99ea <Spi_SetupEB+0x52>
        {
            /* Call Det_ReportError */
#if (SPI_DEV_ERROR_DETECT == STD_ON)
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_SETUPEB_ID,SPI_E_PARAM_CHANNEL);
#endif
            Status = (Std_ReturnType)E_NOT_OK;
    99e2:	2301      	movs	r3, #1
    99e4:	f88d 301f 	strb.w	r3, [sp, #31]
    99e8:	e033      	b.n	9a52 <Spi_SetupEB+0xba>
            /* Length and Framesize - aren't compatible */
            /* If 8 < Framesize =< 16: Length must be divisible by 2 */
            /* If 16 < Framesize =< 32: Length must be divisible by 4 */
            Status = Spi_SetupEbCheckLength(ChannelConfig, Length);
#endif
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05();
    99ea:	f00c fbb3 	bl	16154 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>
            /* save the new parameters */
            ChannelConfig->BufferDescriptor->ExternalBufferTX = SrcDataBufferPtr;
    99ee:	9b04      	ldr	r3, [sp, #16]
    99f0:	691b      	ldr	r3, [r3, #16]
    99f2:	9a02      	ldr	r2, [sp, #8]
    99f4:	601a      	str	r2, [r3, #0]
            ChannelConfig->BufferDescriptor->BufferRX = DesDataBufferPtr;
    99f6:	9b04      	ldr	r3, [sp, #16]
    99f8:	691b      	ldr	r3, [r3, #16]
    99fa:	9a01      	ldr	r2, [sp, #4]
    99fc:	609a      	str	r2, [r3, #8]

            ChannelState->Length = Length;
    99fe:	9b05      	ldr	r3, [sp, #20]
    9a00:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9a04:	805a      	strh	r2, [r3, #2]

            /* if source data pointer is zero, transmit default value */
            if (NULL_PTR == SrcDataBufferPtr)
    9a06:	9b02      	ldr	r3, [sp, #8]
    9a08:	2b00      	cmp	r3, #0
    9a0a:	d107      	bne.n	9a1c <Spi_SetupEB+0x84>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    9a0c:	9b05      	ldr	r3, [sp, #20]
    9a0e:	781b      	ldrb	r3, [r3, #0]
    9a10:	f043 0301 	orr.w	r3, r3, #1
    9a14:	b2da      	uxtb	r2, r3
    9a16:	9b05      	ldr	r3, [sp, #20]
    9a18:	701a      	strb	r2, [r3, #0]
    9a1a:	e006      	b.n	9a2a <Spi_SetupEB+0x92>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_TX_DEFAULT_U8);
    9a1c:	9b05      	ldr	r3, [sp, #20]
    9a1e:	781b      	ldrb	r3, [r3, #0]
    9a20:	f023 0301 	bic.w	r3, r3, #1
    9a24:	b2da      	uxtb	r2, r3
    9a26:	9b05      	ldr	r3, [sp, #20]
    9a28:	701a      	strb	r2, [r3, #0]
            }

            /* if destination data pointer is zero, discard receiving data */
            if (NULL_PTR == DesDataBufferPtr)
    9a2a:	9b01      	ldr	r3, [sp, #4]
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d107      	bne.n	9a40 <Spi_SetupEB+0xa8>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_RX_DISCARD_U8;
    9a30:	9b05      	ldr	r3, [sp, #20]
    9a32:	781b      	ldrb	r3, [r3, #0]
    9a34:	f043 0302 	orr.w	r3, r3, #2
    9a38:	b2da      	uxtb	r2, r3
    9a3a:	9b05      	ldr	r3, [sp, #20]
    9a3c:	701a      	strb	r2, [r3, #0]
    9a3e:	e006      	b.n	9a4e <Spi_SetupEB+0xb6>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_RX_DISCARD_U8);
    9a40:	9b05      	ldr	r3, [sp, #20]
    9a42:	781b      	ldrb	r3, [r3, #0]
    9a44:	f023 0302 	bic.w	r3, r3, #2
    9a48:	b2da      	uxtb	r2, r3
    9a4a:	9b05      	ldr	r3, [sp, #20]
    9a4c:	701a      	strb	r2, [r3, #0]
            }
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05();
    9a4e:	f00c fbad 	bl	161ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>
        }
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return Status;
    9a52:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9a56:	4618      	mov	r0, r3
    9a58:	b009      	add	sp, #36	; 0x24
    9a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    9a5e:	bf00      	nop
    9a60:	1fff8df8 	.word	0x1fff8df8
    9a64:	1fff8dec 	.word	0x1fff8dec

00009a68 <Spi_GetStatus>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_GetStatus_Activity
*/
Spi_StatusType Spi_GetStatus(void)
{
    9a68:	b500      	push	{lr}
    9a6a:	b085      	sub	sp, #20
    Spi_StatusType StatusFlag = SPI_IDLE;
    9a6c:	2301      	movs	r3, #1
    9a6e:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    
    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9a70:	2300      	movs	r3, #0
    9a72:	9301      	str	r3, [sp, #4]

    if (NULL_PTR == Spi_apxSpiConfigPtr[SpiCoreID])
    9a74:	4a22      	ldr	r2, [pc, #136]	; (9b00 <Spi_GetStatus+0x98>)
    9a76:	9b01      	ldr	r3, [sp, #4]
    9a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	d102      	bne.n	9a86 <Spi_GetStatus+0x1e>
        /* If Development Error Detection is enabled, report error if not */
        /* initialized */
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSTATUS_ID,SPI_E_UNINIT);
#endif
        StatusFlag = SPI_UNINIT;
    9a80:	2300      	movs	r3, #0
    9a82:	9303      	str	r3, [sp, #12]
    9a84:	e037      	b.n	9af6 <Spi_GetStatus+0x8e>
    }
    else
    {
        /* The SPI Handler Driver software module shall be busy when any
           HWUnit is busy */
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9a86:	2300      	movs	r3, #0
    9a88:	f88d 300b 	strb.w	r3, [sp, #11]
    9a8c:	e028      	b.n	9ae0 <Spi_GetStatus+0x78>
        {
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9a8e:	4a1c      	ldr	r2, [pc, #112]	; (9b00 <Spi_GetStatus+0x98>)
    9a90:	9b01      	ldr	r3, [sp, #4]
    9a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a96:	69da      	ldr	r2, [r3, #28]
    9a98:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a9c:	009b      	lsls	r3, r3, #2
    9a9e:	4413      	add	r3, r2
    9aa0:	681b      	ldr	r3, [r3, #0]
    9aa2:	2b00      	cmp	r3, #0
    9aa4:	d017      	beq.n	9ad6 <Spi_GetStatus+0x6e>
                (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9aa6:	4a16      	ldr	r2, [pc, #88]	; (9b00 <Spi_GetStatus+0x98>)
    9aa8:	9b01      	ldr	r3, [sp, #4]
    9aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aae:	69da      	ldr	r2, [r3, #28]
    9ab0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9ab4:	009b      	lsls	r3, r3, #2
    9ab6:	4413      	add	r3, r2
    9ab8:	681b      	ldr	r3, [r3, #0]
    9aba:	689b      	ldr	r3, [r3, #8]
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9abc:	9a01      	ldr	r2, [sp, #4]
    9abe:	429a      	cmp	r2, r3
    9ac0:	d109      	bne.n	9ad6 <Spi_GetStatus+0x6e>
               )
            {
                if (1u == Spi_au32SpiBusySyncHWUnitsStatus[HWUnit])
    9ac2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9ac6:	4a0f      	ldr	r2, [pc, #60]	; (9b04 <Spi_GetStatus+0x9c>)
    9ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9acc:	2b01      	cmp	r3, #1
    9ace:	d102      	bne.n	9ad6 <Spi_GetStatus+0x6e>
                {
                    StatusFlag = SPI_BUSY;
    9ad0:	2302      	movs	r3, #2
    9ad2:	9303      	str	r3, [sp, #12]
                    break;
    9ad4:	e008      	b.n	9ae8 <Spi_GetStatus+0x80>
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9ad6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9ada:	3301      	adds	r3, #1
    9adc:	f88d 300b 	strb.w	r3, [sp, #11]
    9ae0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9ae4:	2b00      	cmp	r3, #0
    9ae6:	d0d2      	beq.n	9a8e <Spi_GetStatus+0x26>
            {
                /* Do nothing */
            }
        }
        /* check for busy HWUnit in async transmissions */
        if (SPI_BUSY != StatusFlag)
    9ae8:	9b03      	ldr	r3, [sp, #12]
    9aea:	2b02      	cmp	r3, #2
    9aec:	d003      	beq.n	9af6 <Spi_GetStatus+0x8e>
        {
            /* Note: Checking for IsSync attribute for HWUnit is not really needed
                 It is preferable to skip this check in order to have a more compact code
            */
            StatusFlag = Spi_GetStatusAsyncCheckHwBusy(SpiCoreID);
    9aee:	9801      	ldr	r0, [sp, #4]
    9af0:	f7ff fe4e 	bl	9790 <Spi_GetStatusAsyncCheckHwBusy>
    9af4:	9003      	str	r0, [sp, #12]
        else
        {
            /* Do notthing */
        }
    }
    return StatusFlag;
    9af6:	9b03      	ldr	r3, [sp, #12]
}
    9af8:	4618      	mov	r0, r3
    9afa:	b005      	add	sp, #20
    9afc:	f85d fb04 	ldr.w	pc, [sp], #4
    9b00:	1fff8dec 	.word	0x1fff8dec
    9b04:	1fff8e04 	.word	0x1fff8e04

00009b08 <Spi_GetJobResult>:
/** @implements Spi_GetJobResult_Activity */
Spi_JobResultType Spi_GetJobResult
    (
        Spi_JobType Job
    )
{
    9b08:	b084      	sub	sp, #16
    9b0a:	4603      	mov	r3, r0
    9b0c:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETJOBRESULT_ID,SPI_E_PARAM_CONFIG);
    }
    else
    {
#endif
        JobResult = Spi_axSpiJobState[Job].Result;
    9b10:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9b14:	4a03      	ldr	r2, [pc, #12]	; (9b24 <Spi_GetJobResult+0x1c>)
    9b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b1a:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return JobResult;
    9b1c:	9b03      	ldr	r3, [sp, #12]
}
    9b1e:	4618      	mov	r0, r3
    9b20:	b004      	add	sp, #16
    9b22:	4770      	bx	lr
    9b24:	1fff8df4 	.word	0x1fff8df4

00009b28 <Spi_GetSequenceResult>:
/** @implements Spi_GetSequenceResult_Activity */
Spi_SeqResultType Spi_GetSequenceResult
    (
        Spi_SequenceType Sequence
    )
{
    9b28:	b084      	sub	sp, #16
    9b2a:	4603      	mov	r3, r0
    9b2c:	f88d 3007 	strb.w	r3, [sp, #7]
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSEQUENCERESULT_ID,SPI_E_PARAM_CONFIG);
        }
        else
        {
#endif
           SequenceResult = Spi_axSpiSequenceState[Sequence].Result;
    9b30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b34:	4a03      	ldr	r2, [pc, #12]	; (9b44 <Spi_GetSequenceResult+0x1c>)
    9b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b3a:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif

    return SequenceResult;
    9b3c:	9b03      	ldr	r3, [sp, #12]
}
    9b3e:	4618      	mov	r0, r3
    9b40:	b004      	add	sp, #16
    9b42:	4770      	bx	lr
    9b44:	1fff8df0 	.word	0x1fff8df0

00009b48 <Spi_SyncTransmit>:
/** @implements Spi_SyncTransmit_Activity */
Std_ReturnType Spi_SyncTransmit
    (
        Spi_SequenceType Sequence
    )
{
    9b48:	b500      	push	{lr}
    9b4a:	b08b      	sub	sp, #44	; 0x2c
    9b4c:	4603      	mov	r3, r0
    9b4e:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SequenceStateType *SequenceState;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9b52:	2300      	movs	r3, #0
    9b54:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Spi_JobType Job;
    const Spi_JobConfigType *JobConfig;
    uint32 SpiCoreID;

    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9b58:	2300      	movs	r3, #0
    9b5a:	9308      	str	r3, [sp, #32]
        Status = Spi_SynctransmitCheckJobsIsValid(SequenceConfig, SpiCoreID);

        if ((Std_ReturnType)E_NOT_OK != Status)
        {
#endif /* (SPI_DEV_ERROR_DETECT == STD_ON) */
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    9b5c:	4a60      	ldr	r2, [pc, #384]	; (9ce0 <Spi_SyncTransmit+0x198>)
    9b5e:	9b08      	ldr	r3, [sp, #32]
    9b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b64:	695a      	ldr	r2, [r3, #20]
    9b66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b6a:	009b      	lsls	r3, r3, #2
    9b6c:	4413      	add	r3, r2
    9b6e:	681b      	ldr	r3, [r3, #0]
    9b70:	9307      	str	r3, [sp, #28]
            /* Get the number of jobs in the sequence */
            NumJobsInSequence = SequenceConfig->NumJobs;
    9b72:	9b07      	ldr	r3, [sp, #28]
    9b74:	881b      	ldrh	r3, [r3, #0]
    9b76:	f8ad 301a 	strh.w	r3, [sp, #26]

            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06();
    9b7a:	f00c fb3d 	bl	161f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>
            /* check if there are HW units already running */
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9b7e:	2300      	movs	r3, #0
    9b80:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9b84:	e017      	b.n	9bb6 <Spi_SyncTransmit+0x6e>
            {
                if (0u != ((Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] << HWUnit) & Spi_au32SpiSeqUsedHWUnits[Sequence]))
    9b86:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9b8a:	4a56      	ldr	r2, [pc, #344]	; (9ce4 <Spi_SyncTransmit+0x19c>)
    9b8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9b90:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9b94:	409a      	lsls	r2, r3
    9b96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b9a:	4953      	ldr	r1, [pc, #332]	; (9ce8 <Spi_SyncTransmit+0x1a0>)
    9b9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    9ba0:	4013      	ands	r3, r2
    9ba2:	2b00      	cmp	r3, #0
    9ba4:	d002      	beq.n	9bac <Spi_SyncTransmit+0x64>
                {
                    Status = (Std_ReturnType)E_NOT_OK;
    9ba6:	2301      	movs	r3, #1
    9ba8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9bac:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9bb0:	3301      	adds	r3, #1
    9bb2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9bb6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9bba:	2b00      	cmp	r3, #0
    9bbc:	d0e3      	beq.n	9b86 <Spi_SyncTransmit+0x3e>
                {
                    /* Do notthing */
                }
            }
            
            if ((Std_ReturnType)E_NOT_OK != Status)
    9bbe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9bc2:	2b01      	cmp	r3, #1
    9bc4:	f000 8083 	beq.w	9cce <Spi_SyncTransmit+0x186>
            {
                /* Set the sequence as pending */
                SequenceState = &Spi_axSpiSequenceState[Sequence];
    9bc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bcc:	009b      	lsls	r3, r3, #2
    9bce:	4a47      	ldr	r2, [pc, #284]	; (9cec <Spi_SyncTransmit+0x1a4>)
    9bd0:	4413      	add	r3, r2
    9bd2:	9305      	str	r3, [sp, #20]
                SequenceState->Result = SPI_SEQ_PENDING;
    9bd4:	9b05      	ldr	r3, [sp, #20]
    9bd6:	2201      	movs	r2, #1
    9bd8:	601a      	str	r2, [r3, #0]
                /* set used HW units as busy */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9bda:	2300      	movs	r3, #0
    9bdc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9be0:	e022      	b.n	9c28 <Spi_SyncTransmit+0xe0>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9be2:	9b07      	ldr	r3, [sp, #28]
    9be4:	689a      	ldr	r2, [r3, #8]
    9be6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9bea:	005b      	lsls	r3, r3, #1
    9bec:	4413      	add	r3, r2
    9bee:	881b      	ldrh	r3, [r3, #0]
    9bf0:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9bf4:	4a3a      	ldr	r2, [pc, #232]	; (9ce0 <Spi_SyncTransmit+0x198>)
    9bf6:	9b08      	ldr	r3, [sp, #32]
    9bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bfc:	691a      	ldr	r2, [r3, #16]
    9bfe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9c02:	009b      	lsls	r3, r3, #2
    9c04:	4413      	add	r3, r2
    9c06:	681b      	ldr	r3, [r3, #0]
    9c08:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9c0a:	9b03      	ldr	r3, [sp, #12]
    9c0c:	7f1b      	ldrb	r3, [r3, #28]
    9c0e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 1u;
    9c12:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9c16:	4a33      	ldr	r2, [pc, #204]	; (9ce4 <Spi_SyncTransmit+0x19c>)
    9c18:	2101      	movs	r1, #1
    9c1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9c1e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c22:	3301      	adds	r3, #1
    9c24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9c28:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9c2c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9c30:	429a      	cmp	r2, r3
    9c32:	d3d6      	bcc.n	9be2 <Spi_SyncTransmit+0x9a>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9c34:	f00c fb0c 	bl	16250 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
                /* Transmit Jobs */
                Status = Spi_SyncJobsTranfer(SequenceConfig, SpiCoreID);
    9c38:	9908      	ldr	r1, [sp, #32]
    9c3a:	9807      	ldr	r0, [sp, #28]
    9c3c:	f7ff fc72 	bl	9524 <Spi_SyncJobsTranfer>
    9c40:	4603      	mov	r3, r0
    9c42:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                
                if ((Std_ReturnType)E_OK == Status)
    9c46:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9c4a:	2b00      	cmp	r3, #0
    9c4c:	d103      	bne.n	9c56 <Spi_SyncTransmit+0x10e>
                {
                    /* Set the sequence as OK */
                    SequenceState->Result = SPI_SEQ_OK;
    9c4e:	9b05      	ldr	r3, [sp, #20]
    9c50:	2200      	movs	r2, #0
    9c52:	601a      	str	r2, [r3, #0]
    9c54:	e002      	b.n	9c5c <Spi_SyncTransmit+0x114>
#endif
                }
                else
                {
                    /* Set the sequence as FAILED */
                    SequenceState->Result = SPI_SEQ_FAILED;
    9c56:	9b05      	ldr	r3, [sp, #20]
    9c58:	2202      	movs	r2, #2
    9c5a:	601a      	str	r2, [r3, #0]
                    /* Report to DEM */
                    Spi_DemReportStatus(SpiCoreID, DEM_EVENT_STATUS_FAILED);
#endif
                }
                
                SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07();
    9c5c:	f00c fb1e 	bl	1629c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>
                /* set used HW units as idle */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9c60:	2300      	movs	r3, #0
    9c62:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9c66:	e022      	b.n	9cae <Spi_SyncTransmit+0x166>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9c68:	9b07      	ldr	r3, [sp, #28]
    9c6a:	689a      	ldr	r2, [r3, #8]
    9c6c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c70:	005b      	lsls	r3, r3, #1
    9c72:	4413      	add	r3, r2
    9c74:	881b      	ldrh	r3, [r3, #0]
    9c76:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9c7a:	4a19      	ldr	r2, [pc, #100]	; (9ce0 <Spi_SyncTransmit+0x198>)
    9c7c:	9b08      	ldr	r3, [sp, #32]
    9c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c82:	691a      	ldr	r2, [r3, #16]
    9c84:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9c88:	009b      	lsls	r3, r3, #2
    9c8a:	4413      	add	r3, r2
    9c8c:	681b      	ldr	r3, [r3, #0]
    9c8e:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9c90:	9b03      	ldr	r3, [sp, #12]
    9c92:	7f1b      	ldrb	r3, [r3, #28]
    9c94:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 0u;
    9c98:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9c9c:	4a11      	ldr	r2, [pc, #68]	; (9ce4 <Spi_SyncTransmit+0x19c>)
    9c9e:	2100      	movs	r1, #0
    9ca0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9ca4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9ca8:	3301      	adds	r3, #1
    9caa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9cae:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9cb2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9cb6:	429a      	cmp	r2, r3
    9cb8:	d3d6      	bcc.n	9c68 <Spi_SyncTransmit+0x120>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07();
    9cba:	f00c fb1b 	bl	162f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>
                
                /* End Sequence Notification */
                if (NULL_PTR != SequenceConfig->EndNotification)
    9cbe:	9b07      	ldr	r3, [sp, #28]
    9cc0:	68db      	ldr	r3, [r3, #12]
    9cc2:	2b00      	cmp	r3, #0
    9cc4:	d005      	beq.n	9cd2 <Spi_SyncTransmit+0x18a>
                {
                    SequenceConfig->EndNotification();
    9cc6:	9b07      	ldr	r3, [sp, #28]
    9cc8:	68db      	ldr	r3, [r3, #12]
    9cca:	4798      	blx	r3
    9ccc:	e001      	b.n	9cd2 <Spi_SyncTransmit+0x18a>
                    /* Do nothing */
                }
            }
            else
            {
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9cce:	f00c fabf 	bl	16250 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
            /* Do nothing */
        }
    }
#endif

    return Status;
    9cd2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    9cd6:	4618      	mov	r0, r3
    9cd8:	b00b      	add	sp, #44	; 0x2c
    9cda:	f85d fb04 	ldr.w	pc, [sp], #4
    9cde:	bf00      	nop
    9ce0:	1fff8dec 	.word	0x1fff8dec
    9ce4:	1fff8e04 	.word	0x1fff8e04
    9ce8:	1fff8e00 	.word	0x1fff8e00
    9cec:	1fff8df0 	.word	0x1fff8df0

00009cf0 <Spi_GetHWUnitStatus>:
/** @implements Spi_GetHWUnitStatus_Activity */
Spi_StatusType Spi_GetHWUnitStatus
    (
        Spi_HWUnitType HWUnit
    )
{
    9cf0:	b084      	sub	sp, #16
    9cf2:	4603      	mov	r3, r0
    9cf4:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_StatusType Status = SPI_UNINIT;
    9cf8:	2300      	movs	r3, #0
    9cfa:	9303      	str	r3, [sp, #12]
        /* Do nothing */
    }
    else
    {
#endif
        Status = Spi_axSpiHwUnitQueueArray[HWUnit].Status;
    9cfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d00:	4a03      	ldr	r2, [pc, #12]	; (9d10 <Spi_GetHWUnitStatus+0x20>)
    9d02:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    9d06:	9303      	str	r3, [sp, #12]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return Status;
    9d08:	9b03      	ldr	r3, [sp, #12]
}
    9d0a:	4618      	mov	r0, r3
    9d0c:	b004      	add	sp, #16
    9d0e:	4770      	bx	lr
    9d10:	1fff8de4 	.word	0x1fff8de4

00009d14 <Spi_Cancel>:
*       undefined state due to cancelling a sequence transmission.
*
*/
/**  @implements Spi_Cancel_Activity */
void Spi_Cancel(Spi_SequenceType Sequence)
{
    9d14:	b082      	sub	sp, #8
    9d16:	4603      	mov	r3, r0
    9d18:	f88d 3007 	strb.w	r3, [sp, #7]
        }
        else
        {
#endif
            /* Set sequence state to Cancel */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_CANCELLED;
    9d1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d20:	4a03      	ldr	r2, [pc, #12]	; (9d30 <Spi_Cancel+0x1c>)
    9d22:	2103      	movs	r1, #3
    9d24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            #endif
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif
}
    9d28:	bf00      	nop
    9d2a:	b002      	add	sp, #8
    9d2c:	4770      	bx	lr
    9d2e:	bf00      	nop
    9d30:	1fff8df0 	.word	0x1fff8df0

00009d34 <Spi_MainFunction_Handling>:
                /*Do nothing */
            }
        }
    }
#endif /* #if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2) ) */
}
    9d34:	bf00      	nop
    9d36:	4770      	bx	lr

00009d38 <Spi_Ipw_SyncTransmitProcess>:
        const Spi_JobConfigType *JobConfig,
        const Spi_ChannelConfigType *ChannelConfig,
        Spi_DataBufferType *RxBuffer,
        const Spi_DataBufferType *TxBuffer
    )
{
    9d38:	b500      	push	{lr}
    9d3a:	b08d      	sub	sp, #52	; 0x34
    9d3c:	9005      	str	r0, [sp, #20]
    9d3e:	9104      	str	r1, [sp, #16]
    9d40:	9203      	str	r2, [sp, #12]
    9d42:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_StatusType Lpspi_spiStatus = LPSPI_IP_STATUS_SUCCESS;
    9d44:	2300      	movs	r3, #0
    9d46:	930b      	str	r3, [sp, #44]	; 0x2c
    const Lpspi_Ip_ExternalDeviceType* LpspiExternalDevice;
#if (SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)
    Flexio_Spi_Ip_StatusType Flexio_spiStatus = FLEXIO_SPI_IP_STATUS_SUCCESS;
    const Flexio_Spi_Ip_ExternalDeviceType* Flexio_SpiExternalDevice;
#endif
    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9d48:	2300      	movs	r3, #0
    9d4a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    Spi_NumberOfDataType NumberOfBytes;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9d4e:	9b05      	ldr	r3, [sp, #20]
    9d50:	6a1b      	ldr	r3, [r3, #32]
    9d52:	681b      	ldr	r3, [r3, #0]
    9d54:	681b      	ldr	r3, [r3, #0]
    9d56:	9309      	str	r3, [sp, #36]	; 0x24
        HalfDuplexMode = LPSPI_IP_FULL_DUPLEX;
        HalfDuplexModeSupport = FALSE;
    }
#endif
    
    NumberOfBytes = ChannelConfig->ChannelState->Length;
    9d58:	9b04      	ldr	r3, [sp, #16]
    9d5a:	699b      	ldr	r3, [r3, #24]
    9d5c:	885b      	ldrh	r3, [r3, #2]
    9d5e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    if (SPI_OVER_LPSPI == IpType)
    9d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d64:	2b00      	cmp	r3, #0
    9d66:	d12e      	bne.n	9dc6 <Spi_Ipw_SyncTransmitProcess+0x8e>
    {
        LpspiExternalDevice = JobConfig->ExternalDeviceConfig->ExDeviceConfig->ExternalDeviceConfig.LpspiExternalDeviceConfig;
    9d68:	9b05      	ldr	r3, [sp, #20]
    9d6a:	6a1b      	ldr	r3, [r3, #32]
    9d6c:	681b      	ldr	r3, [r3, #0]
    9d6e:	689b      	ldr	r3, [r3, #8]
    9d70:	9307      	str	r3, [sp, #28]
        Lpspi_spiStatus = Lpspi_Ip_UpdateDefaultTransmitData(LpspiExternalDevice, ChannelConfig->DefaultTransmitValue);
    9d72:	9b04      	ldr	r3, [sp, #16]
    9d74:	689b      	ldr	r3, [r3, #8]
    9d76:	4619      	mov	r1, r3
    9d78:	9807      	ldr	r0, [sp, #28]
    9d7a:	f7ff fadd 	bl	9338 <Lpspi_Ip_UpdateDefaultTransmitData>
    9d7e:	900b      	str	r0, [sp, #44]	; 0x2c
        if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d82:	2b00      	cmp	r3, #0
    9d84:	d11f      	bne.n	9dc6 <Spi_Ipw_SyncTransmitProcess+0x8e>
        {
            Lpspi_spiStatus = Lpspi_Ip_UpdateFrameSize(LpspiExternalDevice, ChannelConfig->FrameSize);
    9d86:	9b04      	ldr	r3, [sp, #16]
    9d88:	791b      	ldrb	r3, [r3, #4]
    9d8a:	b29b      	uxth	r3, r3
    9d8c:	4619      	mov	r1, r3
    9d8e:	9807      	ldr	r0, [sp, #28]
    9d90:	f7ff fa92 	bl	92b8 <Lpspi_Ip_UpdateFrameSize>
    9d94:	900b      	str	r0, [sp, #44]	; 0x2c
            if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d98:	2b00      	cmp	r3, #0
    9d9a:	d114      	bne.n	9dc6 <Spi_Ipw_SyncTransmitProcess+0x8e>
            {
                Lpspi_spiStatus = Lpspi_Ip_UpdateLsb(LpspiExternalDevice, ChannelConfig->Lsb);
    9d9c:	9b04      	ldr	r3, [sp, #16]
    9d9e:	795b      	ldrb	r3, [r3, #5]
    9da0:	4619      	mov	r1, r3
    9da2:	9807      	ldr	r0, [sp, #28]
    9da4:	f7ff faa8 	bl	92f8 <Lpspi_Ip_UpdateLsb>
    9da8:	900b      	str	r0, [sp, #44]	; 0x2c
                if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9dac:	2b00      	cmp	r3, #0
    9dae:	d10a      	bne.n	9dc6 <Spi_Ipw_SyncTransmitProcess+0x8e>
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmitHalfDuplex(LpspiExternalDevice, Buffer, NumberOfBytes, HalfDuplexMode, SPI_TIMEOUT_COUNTER_U32);
                    }
                    else
                    #endif
                    {
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmit(LpspiExternalDevice, (const uint8*)TxBuffer, RxBuffer, NumberOfBytes, SPI_TIMEOUT_COUNTER_U32);
    9db0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    9db4:	f24c 3250 	movw	r2, #50000	; 0xc350
    9db8:	9200      	str	r2, [sp, #0]
    9dba:	9a03      	ldr	r2, [sp, #12]
    9dbc:	9902      	ldr	r1, [sp, #8]
    9dbe:	9807      	ldr	r0, [sp, #28]
    9dc0:	f7fe fe0a 	bl	89d8 <Lpspi_Ip_SyncTransmit>
    9dc4:	900b      	str	r0, [sp, #44]	; 0x2c
            }
        }
    }
    if( (LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus) || (FLEXIO_SPI_IP_STATUS_SUCCESS != Flexio_spiStatus))
#else
    if(LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus)
    9dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9dc8:	2b00      	cmp	r3, #0
    9dca:	d002      	beq.n	9dd2 <Spi_Ipw_SyncTransmitProcess+0x9a>
#endif /*(SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)*/
    {
        Ipw_Status = (Std_ReturnType)E_NOT_OK;
    9dcc:	2301      	movs	r3, #1
    9dce:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
    return Ipw_Status;
    9dd2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
}
    9dd6:	4618      	mov	r0, r3
    9dd8:	b00d      	add	sp, #52	; 0x34
    9dda:	f85d fb04 	ldr.w	pc, [sp], #4

00009dde <Spi_Ipw_Init>:
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* Spi_Ipw_Init */
void Spi_Ipw_Init(const Spi_HWUnitType HWUnitId, const Spi_HWUnitConfigType *HWUnit)
{
    9dde:	b500      	push	{lr}
    9de0:	b083      	sub	sp, #12
    9de2:	4603      	mov	r3, r0
    9de4:	9100      	str	r1, [sp, #0]
    9de6:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == HWUnit->IpType)
    9dea:	9b00      	ldr	r3, [sp, #0]
    9dec:	681b      	ldr	r3, [r3, #0]
    9dee:	2b00      	cmp	r3, #0
    9df0:	d104      	bne.n	9dfc <Spi_Ipw_Init+0x1e>
    #if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
        Spi_Ipw_au8LpspiHWUnitMapping[HWUnit->Instance] = HWUnitId;
    #else
        (void)HWUnitId;
    #endif
        (void)Lpspi_Ip_Init(HWUnit->IpConfig.LpspiIpConfig);
    9df2:	9b00      	ldr	r3, [sp, #0]
    9df4:	68db      	ldr	r3, [r3, #12]
    9df6:	4618      	mov	r0, r3
    9df8:	f7fe fd62 	bl	88c0 <Lpspi_Ip_Init>
        (void)HWUnitId;
    #endif
        (void)Flexio_Spi_Ip_Init(HWUnit->IpConfig.FlexioSpiIpConfig);
    }
#endif
}
    9dfc:	bf00      	nop
    9dfe:	b003      	add	sp, #12
    9e00:	f85d fb04 	ldr.w	pc, [sp], #4

00009e04 <Spi_Ipw_DeInit>:

/* Spi_Ipw_DeInit */
void Spi_Ipw_DeInit(Spi_HWUnitType HWUnit, uint32 SpiCoreID)
{
    9e04:	b500      	push	{lr}
    9e06:	b083      	sub	sp, #12
    9e08:	4603      	mov	r3, r0
    9e0a:	9100      	str	r1, [sp, #0]
    9e0c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->IpType)
    9e10:	4a0f      	ldr	r2, [pc, #60]	; (9e50 <Spi_Ipw_DeInit+0x4c>)
    9e12:	9b00      	ldr	r3, [sp, #0]
    9e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e18:	69da      	ldr	r2, [r3, #28]
    9e1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e1e:	009b      	lsls	r3, r3, #2
    9e20:	4413      	add	r3, r2
    9e22:	681b      	ldr	r3, [r3, #0]
    9e24:	681b      	ldr	r3, [r3, #0]
    9e26:	2b00      	cmp	r3, #0
    9e28:	d10d      	bne.n	9e46 <Spi_Ipw_DeInit+0x42>
    {
        (void)Lpspi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    9e2a:	4a09      	ldr	r2, [pc, #36]	; (9e50 <Spi_Ipw_DeInit+0x4c>)
    9e2c:	9b00      	ldr	r3, [sp, #0]
    9e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e32:	69da      	ldr	r2, [r3, #28]
    9e34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e38:	009b      	lsls	r3, r3, #2
    9e3a:	4413      	add	r3, r2
    9e3c:	681b      	ldr	r3, [r3, #0]
    9e3e:	791b      	ldrb	r3, [r3, #4]
    9e40:	4618      	mov	r0, r3
    9e42:	f7fe fd99 	bl	8978 <Lpspi_Ip_DeInit>
    else
    {
        (void)Flexio_Spi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    }
#endif
}
    9e46:	bf00      	nop
    9e48:	b003      	add	sp, #12
    9e4a:	f85d fb04 	ldr.w	pc, [sp], #4
    9e4e:	bf00      	nop
    9e50:	1fff8dec 	.word	0x1fff8dec

00009e54 <Spi_Ipw_SyncTransmit>:

/* Spi_Ipw_SyncTransmit */
#if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL2) || (SPI_LEVEL_DELIVERED == SPI_LEVEL0) )
Std_ReturnType Spi_Ipw_SyncTransmit(const Spi_JobConfigType *JobConfig, uint32 SpiCoreID)
{
    9e54:	b500      	push	{lr}
    9e56:	b08b      	sub	sp, #44	; 0x2c
    9e58:	9001      	str	r0, [sp, #4]
    9e5a:	9100      	str	r1, [sp, #0]

    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9e5c:	2300      	movs	r3, #0
    9e5e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_ChannelConfigType *NextChannelConfig;
    Spi_ChannelType ChannelID;
    Spi_ChannelType NumChannelsInJob;
    Spi_ChannelType ChannelIndex;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9e62:	9b01      	ldr	r3, [sp, #4]
    9e64:	6a1b      	ldr	r3, [r3, #32]
    9e66:	681b      	ldr	r3, [r3, #0]
    9e68:	681b      	ldr	r3, [r3, #0]
    9e6a:	9306      	str	r3, [sp, #24]
    
    NumChannelsInJob = JobConfig->NumChannels;
    9e6c:	9b01      	ldr	r3, [sp, #4]
    9e6e:	781b      	ldrb	r3, [r3, #0]
    9e70:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    9e74:	2300      	movs	r3, #0
    9e76:	f88d 301f 	strb.w	r3, [sp, #31]
    9e7a:	e0e6      	b.n	a04a <Spi_Ipw_SyncTransmit+0x1f6>
    {
        ChannelID = JobConfig->ChannelIndexList[ChannelIndex];
    9e7c:	9b01      	ldr	r3, [sp, #4]
    9e7e:	685a      	ldr	r2, [r3, #4]
    9e80:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9e84:	4413      	add	r3, r2
    9e86:	781b      	ldrb	r3, [r3, #0]
    9e88:	f88d 3016 	strb.w	r3, [sp, #22]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[ChannelID].ChannelCfg;
    9e8c:	4a75      	ldr	r2, [pc, #468]	; (a064 <Spi_Ipw_SyncTransmit+0x210>)
    9e8e:	9b00      	ldr	r3, [sp, #0]
    9e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e94:	68da      	ldr	r2, [r3, #12]
    9e96:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9e9a:	009b      	lsls	r3, r3, #2
    9e9c:	4413      	add	r3, r2
    9e9e:	681b      	ldr	r3, [r3, #0]
    9ea0:	9304      	str	r3, [sp, #16]
        RxBuffer = ChannelConfig->BufferDescriptor->BufferRX;
    9ea2:	9b04      	ldr	r3, [sp, #16]
    9ea4:	691b      	ldr	r3, [r3, #16]
    9ea6:	689b      	ldr	r3, [r3, #8]
    9ea8:	9303      	str	r3, [sp, #12]
        if(0u != (ChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9eaa:	9b04      	ldr	r3, [sp, #16]
    9eac:	699b      	ldr	r3, [r3, #24]
    9eae:	781b      	ldrb	r3, [r3, #0]
    9eb0:	f003 0301 	and.w	r3, r3, #1
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	d002      	beq.n	9ebe <Spi_Ipw_SyncTransmit+0x6a>
        {
            TxBuffer = NULL_PTR;
    9eb8:	2300      	movs	r3, #0
    9eba:	9308      	str	r3, [sp, #32]
    9ebc:	e00c      	b.n	9ed8 <Spi_Ipw_SyncTransmit+0x84>
        }
        else
        {
            if(EB == ChannelConfig->BufferType)
    9ebe:	9b04      	ldr	r3, [sp, #16]
    9ec0:	681b      	ldr	r3, [r3, #0]
    9ec2:	2b01      	cmp	r3, #1
    9ec4:	d104      	bne.n	9ed0 <Spi_Ipw_SyncTransmit+0x7c>
            {
                TxBuffer = ChannelConfig->BufferDescriptor->ExternalBufferTX;
    9ec6:	9b04      	ldr	r3, [sp, #16]
    9ec8:	691b      	ldr	r3, [r3, #16]
    9eca:	681b      	ldr	r3, [r3, #0]
    9ecc:	9308      	str	r3, [sp, #32]
    9ece:	e003      	b.n	9ed8 <Spi_Ipw_SyncTransmit+0x84>
            }
            else
            {
                TxBuffer = (const uint8*)(ChannelConfig->BufferDescriptor->InternalBufferTX);
    9ed0:	9b04      	ldr	r3, [sp, #16]
    9ed2:	691b      	ldr	r3, [r3, #16]
    9ed4:	685b      	ldr	r3, [r3, #4]
    9ed6:	9308      	str	r3, [sp, #32]
            }
        }
        
        if (SPI_OVER_LPSPI == IpType)
    9ed8:	9b06      	ldr	r3, [sp, #24]
    9eda:	2b00      	cmp	r3, #0
    9edc:	f040 80a7 	bne.w	a02e <Spi_Ipw_SyncTransmit+0x1da>
        {
            if(ChannelIndex == (NumChannelsInJob - 1u))
    9ee0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9ee4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9ee8:	3b01      	subs	r3, #1
    9eea:	429a      	cmp	r2, r3
    9eec:	d10a      	bne.n	9f04 <Spi_Ipw_SyncTransmit+0xb0>
            {
                /* Clear CS after current channel */
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = FALSE;
    9eee:	9b01      	ldr	r3, [sp, #4]
    9ef0:	6a1b      	ldr	r3, [r3, #32]
    9ef2:	681b      	ldr	r3, [r3, #0]
    9ef4:	791b      	ldrb	r3, [r3, #4]
    9ef6:	461a      	mov	r2, r3
    9ef8:	4b5b      	ldr	r3, [pc, #364]	; (a068 <Spi_Ipw_SyncTransmit+0x214>)
    9efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9efe:	2200      	movs	r2, #0
    9f00:	771a      	strb	r2, [r3, #28]
    9f02:	e07b      	b.n	9ffc <Spi_Ipw_SyncTransmit+0x1a8>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = TRUE;
    9f04:	9b01      	ldr	r3, [sp, #4]
    9f06:	6a1b      	ldr	r3, [r3, #32]
    9f08:	681b      	ldr	r3, [r3, #0]
    9f0a:	791b      	ldrb	r3, [r3, #4]
    9f0c:	461a      	mov	r2, r3
    9f0e:	4b56      	ldr	r3, [pc, #344]	; (a068 <Spi_Ipw_SyncTransmit+0x214>)
    9f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f14:	2201      	movs	r2, #1
    9f16:	771a      	strb	r2, [r3, #28]
                MCAL_DATA_SYNC_BARRIER();
    9f18:	f3bf 8f4f 	dsb	sy
                /* update data for next transfer */
                NextChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[JobConfig->ChannelIndexList[ChannelIndex + 1u]].ChannelCfg;
    9f1c:	4a51      	ldr	r2, [pc, #324]	; (a064 <Spi_Ipw_SyncTransmit+0x210>)
    9f1e:	9b00      	ldr	r3, [sp, #0]
    9f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f24:	68da      	ldr	r2, [r3, #12]
    9f26:	9b01      	ldr	r3, [sp, #4]
    9f28:	6859      	ldr	r1, [r3, #4]
    9f2a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9f2e:	3301      	adds	r3, #1
    9f30:	440b      	add	r3, r1
    9f32:	781b      	ldrb	r3, [r3, #0]
    9f34:	009b      	lsls	r3, r3, #2
    9f36:	4413      	add	r3, r2
    9f38:	681b      	ldr	r3, [r3, #0]
    9f3a:	9302      	str	r3, [sp, #8]
                MCAL_DATA_SYNC_BARRIER();
    9f3c:	f3bf 8f4f 	dsb	sy
                if(0u != (NextChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9f40:	9b02      	ldr	r3, [sp, #8]
    9f42:	699b      	ldr	r3, [r3, #24]
    9f44:	781b      	ldrb	r3, [r3, #0]
    9f46:	f003 0301 	and.w	r3, r3, #1
    9f4a:	2b00      	cmp	r3, #0
    9f4c:	d00a      	beq.n	9f64 <Spi_Ipw_SyncTransmit+0x110>
                {
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NULL_PTR;
    9f4e:	9b01      	ldr	r3, [sp, #4]
    9f50:	6a1b      	ldr	r3, [r3, #32]
    9f52:	681b      	ldr	r3, [r3, #0]
    9f54:	791b      	ldrb	r3, [r3, #4]
    9f56:	461a      	mov	r2, r3
    9f58:	4b43      	ldr	r3, [pc, #268]	; (a068 <Spi_Ipw_SyncTransmit+0x214>)
    9f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f5e:	2200      	movs	r2, #0
    9f60:	62da      	str	r2, [r3, #44]	; 0x2c
    9f62:	e01c      	b.n	9f9e <Spi_Ipw_SyncTransmit+0x14a>
                }
                else
                {
                    if(EB == NextChannelConfig->BufferType)
    9f64:	9b02      	ldr	r3, [sp, #8]
    9f66:	681b      	ldr	r3, [r3, #0]
    9f68:	2b01      	cmp	r3, #1
    9f6a:	d10c      	bne.n	9f86 <Spi_Ipw_SyncTransmit+0x132>
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->ExternalBufferTX;
    9f6c:	9b02      	ldr	r3, [sp, #8]
    9f6e:	691a      	ldr	r2, [r3, #16]
    9f70:	9b01      	ldr	r3, [sp, #4]
    9f72:	6a1b      	ldr	r3, [r3, #32]
    9f74:	681b      	ldr	r3, [r3, #0]
    9f76:	791b      	ldrb	r3, [r3, #4]
    9f78:	4619      	mov	r1, r3
    9f7a:	4b3b      	ldr	r3, [pc, #236]	; (a068 <Spi_Ipw_SyncTransmit+0x214>)
    9f7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9f80:	6812      	ldr	r2, [r2, #0]
    9f82:	62da      	str	r2, [r3, #44]	; 0x2c
    9f84:	e00b      	b.n	9f9e <Spi_Ipw_SyncTransmit+0x14a>
                    }
                    else
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->InternalBufferTX;
    9f86:	9b02      	ldr	r3, [sp, #8]
    9f88:	691a      	ldr	r2, [r3, #16]
    9f8a:	9b01      	ldr	r3, [sp, #4]
    9f8c:	6a1b      	ldr	r3, [r3, #32]
    9f8e:	681b      	ldr	r3, [r3, #0]
    9f90:	791b      	ldrb	r3, [r3, #4]
    9f92:	4619      	mov	r1, r3
    9f94:	4b34      	ldr	r3, [pc, #208]	; (a068 <Spi_Ipw_SyncTransmit+0x214>)
    9f96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9f9a:	6852      	ldr	r2, [r2, #4]
    9f9c:	62da      	str	r2, [r3, #44]	; 0x2c
                    }
                }
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FrameSizeNext = NextChannelConfig->FrameSize;
    9f9e:	9b02      	ldr	r3, [sp, #8]
    9fa0:	791a      	ldrb	r2, [r3, #4]
    9fa2:	9b01      	ldr	r3, [sp, #4]
    9fa4:	6a1b      	ldr	r3, [r3, #32]
    9fa6:	681b      	ldr	r3, [r3, #0]
    9fa8:	791b      	ldrb	r3, [r3, #4]
    9faa:	4619      	mov	r1, r3
    9fac:	4b2e      	ldr	r3, [pc, #184]	; (a068 <Spi_Ipw_SyncTransmit+0x214>)
    9fae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9fb2:	b292      	uxth	r2, r2
    9fb4:	861a      	strh	r2, [r3, #48]	; 0x30
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LsbNext = NextChannelConfig->Lsb;
    9fb6:	9b01      	ldr	r3, [sp, #4]
    9fb8:	6a1b      	ldr	r3, [r3, #32]
    9fba:	681b      	ldr	r3, [r3, #0]
    9fbc:	791b      	ldrb	r3, [r3, #4]
    9fbe:	461a      	mov	r2, r3
    9fc0:	4b29      	ldr	r3, [pc, #164]	; (a068 <Spi_Ipw_SyncTransmit+0x214>)
    9fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9fc6:	9a02      	ldr	r2, [sp, #8]
    9fc8:	7952      	ldrb	r2, [r2, #5]
    9fca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->DefaultDataNext = NextChannelConfig->DefaultTransmitValue;
    9fce:	9b01      	ldr	r3, [sp, #4]
    9fd0:	6a1b      	ldr	r3, [r3, #32]
    9fd2:	681b      	ldr	r3, [r3, #0]
    9fd4:	791b      	ldrb	r3, [r3, #4]
    9fd6:	461a      	mov	r2, r3
    9fd8:	4b23      	ldr	r3, [pc, #140]	; (a068 <Spi_Ipw_SyncTransmit+0x214>)
    9fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9fde:	9a02      	ldr	r2, [sp, #8]
    9fe0:	6892      	ldr	r2, [r2, #8]
    9fe2:	635a      	str	r2, [r3, #52]	; 0x34
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LengthNext = NextChannelConfig->ChannelState->Length;
    9fe4:	9b02      	ldr	r3, [sp, #8]
    9fe6:	699a      	ldr	r2, [r3, #24]
    9fe8:	9b01      	ldr	r3, [sp, #4]
    9fea:	6a1b      	ldr	r3, [r3, #32]
    9fec:	681b      	ldr	r3, [r3, #0]
    9fee:	791b      	ldrb	r3, [r3, #4]
    9ff0:	4619      	mov	r1, r3
    9ff2:	4b1d      	ldr	r3, [pc, #116]	; (a068 <Spi_Ipw_SyncTransmit+0x214>)
    9ff4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9ff8:	8852      	ldrh	r2, [r2, #2]
    9ffa:	871a      	strh	r2, [r3, #56]	; 0x38
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->NextChannelIsRX = FALSE;
                }
                #endif
            }
            
            if(0u == ChannelIndex)
    9ffc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a000:	2b00      	cmp	r3, #0
    a002:	d10a      	bne.n	a01a <Spi_Ipw_SyncTransmit+0x1c6>
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = TRUE;
    a004:	9b01      	ldr	r3, [sp, #4]
    a006:	6a1b      	ldr	r3, [r3, #32]
    a008:	681b      	ldr	r3, [r3, #0]
    a00a:	791b      	ldrb	r3, [r3, #4]
    a00c:	461a      	mov	r2, r3
    a00e:	4b16      	ldr	r3, [pc, #88]	; (a068 <Spi_Ipw_SyncTransmit+0x214>)
    a010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a014:	2201      	movs	r2, #1
    a016:	775a      	strb	r2, [r3, #29]
    a018:	e009      	b.n	a02e <Spi_Ipw_SyncTransmit+0x1da>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = FALSE;
    a01a:	9b01      	ldr	r3, [sp, #4]
    a01c:	6a1b      	ldr	r3, [r3, #32]
    a01e:	681b      	ldr	r3, [r3, #0]
    a020:	791b      	ldrb	r3, [r3, #4]
    a022:	461a      	mov	r2, r3
    a024:	4b10      	ldr	r3, [pc, #64]	; (a068 <Spi_Ipw_SyncTransmit+0x214>)
    a026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a02a:	2200      	movs	r2, #0
    a02c:	775a      	strb	r2, [r3, #29]
            }
        }
        Ipw_Status = Spi_Ipw_SyncTransmitProcess(JobConfig, ChannelConfig, RxBuffer, (const uint8*)TxBuffer);
    a02e:	9b08      	ldr	r3, [sp, #32]
    a030:	9a03      	ldr	r2, [sp, #12]
    a032:	9904      	ldr	r1, [sp, #16]
    a034:	9801      	ldr	r0, [sp, #4]
    a036:	f7ff fe7f 	bl	9d38 <Spi_Ipw_SyncTransmitProcess>
    a03a:	4603      	mov	r3, r0
    a03c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    a040:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a044:	3301      	adds	r3, #1
    a046:	f88d 301f 	strb.w	r3, [sp, #31]
    a04a:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a04e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a052:	429a      	cmp	r2, r3
    a054:	f4ff af12 	bcc.w	9e7c <Spi_Ipw_SyncTransmit+0x28>
    }
    return Ipw_Status;
    a058:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    a05c:	4618      	mov	r0, r3
    a05e:	b00b      	add	sp, #44	; 0x2c
    a060:	f85d fb04 	ldr.w	pc, [sp], #4
    a064:	1fff8dec 	.word	0x1fff8dec
    a068:	1fff8dd8 	.word	0x1fff8dd8

0000a06c <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    a06c:	b084      	sub	sp, #16
    a06e:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    a070:	2300      	movs	r3, #0
    a072:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    a076:	2300      	movs	r3, #0
    a078:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a07c:	2300      	movs	r3, #0
    a07e:	f88d 300e 	strb.w	r3, [sp, #14]
    a082:	e01b      	b.n	a0bc <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a084:	4a12      	ldr	r2, [pc, #72]	; (a0d0 <Can_IsControllersBusy+0x64>)
    a086:	9b01      	ldr	r3, [sp, #4]
    a088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a08c:	695a      	ldr	r2, [r3, #20]
    a08e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a092:	009b      	lsls	r3, r3, #2
    a094:	4413      	add	r3, r2
    a096:	681b      	ldr	r3, [r3, #0]
    a098:	2b00      	cmp	r3, #0
    a09a:	d00a      	beq.n	a0b2 <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    a09c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0a0:	4a0c      	ldr	r2, [pc, #48]	; (a0d4 <Can_IsControllersBusy+0x68>)
    a0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0a6:	2b00      	cmp	r3, #0
    a0a8:	d003      	beq.n	a0b2 <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    a0aa:	2301      	movs	r3, #1
    a0ac:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a0b0:	e008      	b.n	a0c4 <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a0b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0b6:	3301      	adds	r3, #1
    a0b8:	f88d 300e 	strb.w	r3, [sp, #14]
    a0bc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0c0:	2b01      	cmp	r3, #1
    a0c2:	d9df      	bls.n	a084 <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    a0c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a0c8:	4618      	mov	r0, r3
    a0ca:	b004      	add	sp, #16
    a0cc:	4770      	bx	lr
    a0ce:	bf00      	nop
    a0d0:	1fff8e14 	.word	0x1fff8e14
    a0d4:	1fff8e0c 	.word	0x1fff8e0c

0000a0d8 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    a0d8:	b500      	push	{lr}
    a0da:	b085      	sub	sp, #20
    a0dc:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    a0de:	2300      	movs	r3, #0
    a0e0:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    a0e4:	2300      	movs	r3, #0
    a0e6:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a0ea:	2300      	movs	r3, #0
    a0ec:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a0ee:	2300      	movs	r3, #0
    a0f0:	f88d 300e 	strb.w	r3, [sp, #14]
    a0f4:	e035      	b.n	a162 <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a0f6:	4a30      	ldr	r2, [pc, #192]	; (a1b8 <Can_InitControllers+0xe0>)
    a0f8:	9b01      	ldr	r3, [sp, #4]
    a0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0fe:	695a      	ldr	r2, [r3, #20]
    a100:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a104:	009b      	lsls	r3, r3, #2
    a106:	4413      	add	r3, r2
    a108:	681b      	ldr	r3, [r3, #0]
    a10a:	2b00      	cmp	r3, #0
    a10c:	d024      	beq.n	a158 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a10e:	4a2a      	ldr	r2, [pc, #168]	; (a1b8 <Can_InitControllers+0xe0>)
    a110:	9b01      	ldr	r3, [sp, #4]
    a112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a116:	695a      	ldr	r2, [r3, #20]
    a118:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a11c:	009b      	lsls	r3, r3, #2
    a11e:	4413      	add	r3, r2
    a120:	681b      	ldr	r3, [r3, #0]
    a122:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a124:	9b02      	ldr	r3, [sp, #8]
    a126:	7a1b      	ldrb	r3, [r3, #8]
    a128:	2b00      	cmp	r3, #0
    a12a:	d015      	beq.n	a158 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    a12c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a130:	4a22      	ldr	r2, [pc, #136]	; (a1bc <Can_InitControllers+0xe4>)
    a132:	2100      	movs	r1, #0
    a134:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    a136:	9802      	ldr	r0, [sp, #8]
    a138:	f000 ff82 	bl	b040 <Can_43_FLEXCAN_Ipw_Init>
    a13c:	4603      	mov	r3, r0
    a13e:	2b00      	cmp	r3, #0
    a140:	d106      	bne.n	a150 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a142:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a146:	4a1e      	ldr	r2, [pc, #120]	; (a1c0 <Can_InitControllers+0xe8>)
    a148:	2102      	movs	r1, #2
    a14a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a14e:	e003      	b.n	a158 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    a150:	2301      	movs	r3, #1
    a152:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    a156:	e008      	b.n	a16a <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a158:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a15c:	3301      	adds	r3, #1
    a15e:	f88d 300e 	strb.w	r3, [sp, #14]
    a162:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a166:	2b01      	cmp	r3, #1
    a168:	d9c5      	bls.n	a0f6 <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    a16a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a16e:	2b00      	cmp	r3, #0
    a170:	d01e      	beq.n	a1b0 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a172:	2300      	movs	r3, #0
    a174:	f88d 300e 	strb.w	r3, [sp, #14]
    a178:	e016      	b.n	a1a8 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a17a:	4a0f      	ldr	r2, [pc, #60]	; (a1b8 <Can_InitControllers+0xe0>)
    a17c:	9b01      	ldr	r3, [sp, #4]
    a17e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a182:	695a      	ldr	r2, [r3, #20]
    a184:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a188:	009b      	lsls	r3, r3, #2
    a18a:	4413      	add	r3, r2
    a18c:	681b      	ldr	r3, [r3, #0]
    a18e:	2b00      	cmp	r3, #0
    a190:	d005      	beq.n	a19e <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a192:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a196:	4a0a      	ldr	r2, [pc, #40]	; (a1c0 <Can_InitControllers+0xe8>)
    a198:	2100      	movs	r1, #0
    a19a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a19e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1a2:	3301      	adds	r3, #1
    a1a4:	f88d 300e 	strb.w	r3, [sp, #14]
    a1a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1ac:	2b01      	cmp	r3, #1
    a1ae:	d9e4      	bls.n	a17a <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    a1b0:	bf00      	nop
    a1b2:	b005      	add	sp, #20
    a1b4:	f85d fb04 	ldr.w	pc, [sp], #4
    a1b8:	1fff8e14 	.word	0x1fff8e14
    a1bc:	1fff8e08 	.word	0x1fff8e08
    a1c0:	1fff8e0c 	.word	0x1fff8e0c

0000a1c4 <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    a1c4:	b500      	push	{lr}
    a1c6:	b085      	sub	sp, #20
    a1c8:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    a1ca:	2300      	movs	r3, #0
    a1cc:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a1d0:	2300      	movs	r3, #0
    a1d2:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a1d4:	2300      	movs	r3, #0
    a1d6:	f88d 300f 	strb.w	r3, [sp, #15]
    a1da:	e028      	b.n	a22e <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a1dc:	4a18      	ldr	r2, [pc, #96]	; (a240 <Can_DeInitControllers+0x7c>)
    a1de:	9b01      	ldr	r3, [sp, #4]
    a1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1e4:	695a      	ldr	r2, [r3, #20]
    a1e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1ea:	009b      	lsls	r3, r3, #2
    a1ec:	4413      	add	r3, r2
    a1ee:	681b      	ldr	r3, [r3, #0]
    a1f0:	2b00      	cmp	r3, #0
    a1f2:	d017      	beq.n	a224 <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a1f4:	4a12      	ldr	r2, [pc, #72]	; (a240 <Can_DeInitControllers+0x7c>)
    a1f6:	9b01      	ldr	r3, [sp, #4]
    a1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1fc:	695a      	ldr	r2, [r3, #20]
    a1fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a202:	009b      	lsls	r3, r3, #2
    a204:	4413      	add	r3, r2
    a206:	681b      	ldr	r3, [r3, #0]
    a208:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a20a:	9b02      	ldr	r3, [sp, #8]
    a20c:	7a1b      	ldrb	r3, [r3, #8]
    a20e:	2b00      	cmp	r3, #0
    a210:	d008      	beq.n	a224 <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a212:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a216:	4a0b      	ldr	r2, [pc, #44]	; (a244 <Can_DeInitControllers+0x80>)
    a218:	2100      	movs	r1, #0
    a21a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    a21e:	9802      	ldr	r0, [sp, #8]
    a220:	f001 f81a 	bl	b258 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a224:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a228:	3301      	adds	r3, #1
    a22a:	f88d 300f 	strb.w	r3, [sp, #15]
    a22e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a232:	2b01      	cmp	r3, #1
    a234:	d9d2      	bls.n	a1dc <Can_DeInitControllers+0x18>
            }
        }
    }
}
    a236:	bf00      	nop
    a238:	bf00      	nop
    a23a:	b005      	add	sp, #20
    a23c:	f85d fb04 	ldr.w	pc, [sp], #4
    a240:	1fff8e14 	.word	0x1fff8e14
    a244:	1fff8e0c 	.word	0x1fff8e0c

0000a248 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    a248:	b500      	push	{lr}
    a24a:	b085      	sub	sp, #20
    a24c:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    a24e:	2300      	movs	r3, #0
    a250:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    a252:	2300      	movs	r3, #0
    a254:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    a258:	2300      	movs	r3, #0
    a25a:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    a25c:	490c      	ldr	r1, [pc, #48]	; (a290 <Can_43_FLEXCAN_Init+0x48>)
    a25e:	9b03      	ldr	r3, [sp, #12]
    a260:	9a01      	ldr	r2, [sp, #4]
    a262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    a266:	9803      	ldr	r0, [sp, #12]
    a268:	f7ff ff00 	bl	a06c <Can_IsControllersBusy>
    a26c:	4603      	mov	r3, r0
    a26e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    a272:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a276:	f083 0301 	eor.w	r3, r3, #1
    a27a:	b2db      	uxtb	r3, r3
    a27c:	2b00      	cmp	r3, #0
    a27e:	d002      	beq.n	a286 <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    a280:	9803      	ldr	r0, [sp, #12]
    a282:	f7ff ff29 	bl	a0d8 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    a286:	bf00      	nop
    a288:	b005      	add	sp, #20
    a28a:	f85d fb04 	ldr.w	pc, [sp], #4
    a28e:	bf00      	nop
    a290:	1fff8e14 	.word	0x1fff8e14

0000a294 <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    a294:	b500      	push	{lr}
    a296:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    a298:	2300      	movs	r3, #0
    a29a:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    a29e:	2300      	movs	r3, #0
    a2a0:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    a2a4:	2300      	movs	r3, #0
    a2a6:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    a2a8:	2300      	movs	r3, #0
    a2aa:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a2ac:	2300      	movs	r3, #0
    a2ae:	f88d 3007 	strb.w	r3, [sp, #7]
    a2b2:	e01b      	b.n	a2ec <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a2b4:	4a19      	ldr	r2, [pc, #100]	; (a31c <Can_43_FLEXCAN_DeInit+0x88>)
    a2b6:	9b00      	ldr	r3, [sp, #0]
    a2b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2bc:	695a      	ldr	r2, [r3, #20]
    a2be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2c2:	009b      	lsls	r3, r3, #2
    a2c4:	4413      	add	r3, r2
    a2c6:	681b      	ldr	r3, [r3, #0]
    a2c8:	2b00      	cmp	r3, #0
    a2ca:	d00a      	beq.n	a2e2 <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a2cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2d0:	4a13      	ldr	r2, [pc, #76]	; (a320 <Can_43_FLEXCAN_DeInit+0x8c>)
    a2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2d6:	2b01      	cmp	r3, #1
    a2d8:	d103      	bne.n	a2e2 <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    a2da:	2301      	movs	r3, #1
    a2dc:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    a2e0:	e008      	b.n	a2f4 <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a2e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2e6:	3301      	adds	r3, #1
    a2e8:	f88d 3007 	strb.w	r3, [sp, #7]
    a2ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2f0:	2b01      	cmp	r3, #1
    a2f2:	d9df      	bls.n	a2b4 <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    a2f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a2f8:	f083 0301 	eor.w	r3, r3, #1
    a2fc:	b2db      	uxtb	r3, r3
    a2fe:	2b00      	cmp	r3, #0
    a300:	d007      	beq.n	a312 <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    a302:	9800      	ldr	r0, [sp, #0]
    a304:	f7ff ff5e 	bl	a1c4 <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    a308:	4a04      	ldr	r2, [pc, #16]	; (a31c <Can_43_FLEXCAN_DeInit+0x88>)
    a30a:	9b00      	ldr	r3, [sp, #0]
    a30c:	2100      	movs	r1, #0
    a30e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    a312:	bf00      	nop
    a314:	b003      	add	sp, #12
    a316:	f85d fb04 	ldr.w	pc, [sp], #4
    a31a:	bf00      	nop
    a31c:	1fff8e14 	.word	0x1fff8e14
    a320:	1fff8e0c 	.word	0x1fff8e0c

0000a324 <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    a324:	b500      	push	{lr}
    a326:	b087      	sub	sp, #28
    a328:	4603      	mov	r3, r0
    a32a:	9100      	str	r1, [sp, #0]
    a32c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a330:	2301      	movs	r3, #1
    a332:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a336:	2300      	movs	r3, #0
    a338:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a33a:	2300      	movs	r3, #0
    a33c:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a33e:	2300      	movs	r3, #0
    a340:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a342:	4a47      	ldr	r2, [pc, #284]	; (a460 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    a344:	9b04      	ldr	r3, [sp, #16]
    a346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a34a:	695a      	ldr	r2, [r3, #20]
    a34c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a350:	009b      	lsls	r3, r3, #2
    a352:	4413      	add	r3, r2
    a354:	681b      	ldr	r3, [r3, #0]
    a356:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    a358:	9b00      	ldr	r3, [sp, #0]
    a35a:	2b03      	cmp	r3, #3
    a35c:	d05d      	beq.n	a41a <Can_43_FLEXCAN_SetControllerMode+0xf6>
    a35e:	9b00      	ldr	r3, [sp, #0]
    a360:	2b03      	cmp	r3, #3
    a362:	d874      	bhi.n	a44e <Can_43_FLEXCAN_SetControllerMode+0x12a>
    a364:	9b00      	ldr	r3, [sp, #0]
    a366:	2b01      	cmp	r3, #1
    a368:	d003      	beq.n	a372 <Can_43_FLEXCAN_SetControllerMode+0x4e>
    a36a:	9b00      	ldr	r3, [sp, #0]
    a36c:	2b02      	cmp	r3, #2
    a36e:	d01d      	beq.n	a3ac <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    a370:	e06d      	b.n	a44e <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    a372:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a376:	4a3b      	ldr	r2, [pc, #236]	; (a464 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a37c:	2b02      	cmp	r3, #2
    a37e:	d168      	bne.n	a452 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    a380:	9803      	ldr	r0, [sp, #12]
    a382:	f000 ffa3 	bl	b2cc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    a386:	4603      	mov	r3, r0
    a388:	2b00      	cmp	r3, #0
    a38a:	d162      	bne.n	a452 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    a38c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a390:	4a34      	ldr	r2, [pc, #208]	; (a464 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a392:	2101      	movs	r1, #1
    a394:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    a398:	9b03      	ldr	r3, [sp, #12]
    a39a:	781b      	ldrb	r3, [r3, #0]
    a39c:	2101      	movs	r1, #1
    a39e:	4618      	mov	r0, r3
    a3a0:	f00c fe94 	bl	170cc <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a3a4:	2300      	movs	r3, #0
    a3a6:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    a3aa:	e052      	b.n	a452 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    a3ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3b0:	4a2c      	ldr	r2, [pc, #176]	; (a464 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3b6:	2b01      	cmp	r3, #1
    a3b8:	d005      	beq.n	a3c6 <Can_43_FLEXCAN_SetControllerMode+0xa2>
    a3ba:	2b00      	cmp	r3, #0
    a3bc:	d029      	beq.n	a412 <Can_43_FLEXCAN_SetControllerMode+0xee>
    a3be:	3b02      	subs	r3, #2
    a3c0:	2b01      	cmp	r3, #1
    a3c2:	d826      	bhi.n	a412 <Can_43_FLEXCAN_SetControllerMode+0xee>
    a3c4:	e015      	b.n	a3f2 <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a3c6:	9803      	ldr	r0, [sp, #12]
    a3c8:	f000 fff2 	bl	b3b0 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a3cc:	4603      	mov	r3, r0
    a3ce:	2b00      	cmp	r3, #0
    a3d0:	d121      	bne.n	a416 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a3d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3d6:	4a23      	ldr	r2, [pc, #140]	; (a464 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3d8:	2102      	movs	r1, #2
    a3da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a3de:	9b03      	ldr	r3, [sp, #12]
    a3e0:	781b      	ldrb	r3, [r3, #0]
    a3e2:	2102      	movs	r1, #2
    a3e4:	4618      	mov	r0, r3
    a3e6:	f00c fe71 	bl	170cc <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    a3ea:	2300      	movs	r3, #0
    a3ec:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a3f0:	e011      	b.n	a416 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a3f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3f6:	4a1b      	ldr	r2, [pc, #108]	; (a464 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3f8:	2102      	movs	r1, #2
    a3fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a3fe:	9b03      	ldr	r3, [sp, #12]
    a400:	781b      	ldrb	r3, [r3, #0]
    a402:	2102      	movs	r1, #2
    a404:	4618      	mov	r0, r3
    a406:	f00c fe61 	bl	170cc <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a40a:	2300      	movs	r3, #0
    a40c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a410:	e002      	b.n	a418 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    a412:	bf00      	nop
    a414:	e01e      	b.n	a454 <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    a416:	bf00      	nop
                        break;
    a418:	e01c      	b.n	a454 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    a41a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a41e:	4a11      	ldr	r2, [pc, #68]	; (a464 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a424:	3b02      	subs	r3, #2
    a426:	2b01      	cmp	r3, #1
    a428:	d80f      	bhi.n	a44a <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    a42a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a42e:	4a0d      	ldr	r2, [pc, #52]	; (a464 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a430:	2103      	movs	r1, #3
    a432:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    a436:	9b03      	ldr	r3, [sp, #12]
    a438:	781b      	ldrb	r3, [r3, #0]
    a43a:	2103      	movs	r1, #3
    a43c:	4618      	mov	r0, r3
    a43e:	f00c fe45 	bl	170cc <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a442:	2300      	movs	r3, #0
    a444:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a448:	e000      	b.n	a44c <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    a44a:	bf00      	nop
                        break;
    a44c:	e002      	b.n	a454 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a44e:	bf00      	nop
    a450:	e000      	b.n	a454 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a452:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    a454:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a458:	4618      	mov	r0, r3
    a45a:	b007      	add	sp, #28
    a45c:	f85d fb04 	ldr.w	pc, [sp], #4
    a460:	1fff8e14 	.word	0x1fff8e14
    a464:	1fff8e0c 	.word	0x1fff8e0c

0000a468 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    a468:	b500      	push	{lr}
    a46a:	b085      	sub	sp, #20
    a46c:	4603      	mov	r3, r0
    a46e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a472:	2300      	movs	r3, #0
    a474:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a476:	2300      	movs	r3, #0
    a478:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a47a:	2300      	movs	r3, #0
    a47c:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a47e:	4a10      	ldr	r2, [pc, #64]	; (a4c0 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    a480:	9b03      	ldr	r3, [sp, #12]
    a482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a486:	695a      	ldr	r2, [r3, #20]
    a488:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a48c:	009b      	lsls	r3, r3, #2
    a48e:	4413      	add	r3, r2
    a490:	681b      	ldr	r3, [r3, #0]
    a492:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a494:	f009 fc1c 	bl	13cd0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    a498:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a49c:	4a09      	ldr	r2, [pc, #36]	; (a4c4 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a49e:	5cd2      	ldrb	r2, [r2, r3]
    a4a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4a4:	3201      	adds	r2, #1
    a4a6:	b2d1      	uxtb	r1, r2
    a4a8:	4a06      	ldr	r2, [pc, #24]	; (a4c4 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a4aa:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a4ac:	f009 fc3c 	bl	13d28 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    a4b0:	9802      	ldr	r0, [sp, #8]
    a4b2:	f000 fffb 	bl	b4ac <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a4b6:	bf00      	nop
    a4b8:	b005      	add	sp, #20
    a4ba:	f85d fb04 	ldr.w	pc, [sp], #4
    a4be:	bf00      	nop
    a4c0:	1fff8e14 	.word	0x1fff8e14
    a4c4:	1fff8e08 	.word	0x1fff8e08

0000a4c8 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    a4c8:	b500      	push	{lr}
    a4ca:	b085      	sub	sp, #20
    a4cc:	4603      	mov	r3, r0
    a4ce:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a4d2:	2300      	movs	r3, #0
    a4d4:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a4d6:	2300      	movs	r3, #0
    a4d8:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a4da:	2300      	movs	r3, #0
    a4dc:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a4de:	4a16      	ldr	r2, [pc, #88]	; (a538 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    a4e0:	9b03      	ldr	r3, [sp, #12]
    a4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4e6:	695a      	ldr	r2, [r3, #20]
    a4e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4ec:	009b      	lsls	r3, r3, #2
    a4ee:	4413      	add	r3, r2
    a4f0:	681b      	ldr	r3, [r3, #0]
    a4f2:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a4f4:	f009 fc3e 	bl	13d74 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    a4f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4fc:	4a0f      	ldr	r2, [pc, #60]	; (a53c <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a4fe:	5cd3      	ldrb	r3, [r2, r3]
    a500:	2b00      	cmp	r3, #0
    a502:	d009      	beq.n	a518 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    a504:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a508:	4a0c      	ldr	r2, [pc, #48]	; (a53c <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a50a:	5cd2      	ldrb	r2, [r2, r3]
    a50c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a510:	3a01      	subs	r2, #1
    a512:	b2d1      	uxtb	r1, r2
    a514:	4a09      	ldr	r2, [pc, #36]	; (a53c <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a516:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a518:	f009 fc58 	bl	13dcc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    a51c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a520:	4a06      	ldr	r2, [pc, #24]	; (a53c <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a522:	5cd3      	ldrb	r3, [r2, r3]
    a524:	2b00      	cmp	r3, #0
    a526:	d102      	bne.n	a52e <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    a528:	9802      	ldr	r0, [sp, #8]
    a52a:	f000 ffe9 	bl	b500 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a52e:	bf00      	nop
    a530:	b005      	add	sp, #20
    a532:	f85d fb04 	ldr.w	pc, [sp], #4
    a536:	bf00      	nop
    a538:	1fff8e14 	.word	0x1fff8e14
    a53c:	1fff8e08 	.word	0x1fff8e08

0000a540 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    a540:	b500      	push	{lr}
    a542:	b087      	sub	sp, #28
    a544:	4603      	mov	r3, r0
    a546:	9100      	str	r1, [sp, #0]
    a548:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a54c:	2301      	movs	r3, #1
    a54e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    a552:	2300      	movs	r3, #0
    a554:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    a558:	2300      	movs	r3, #0
    a55a:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a55c:	2300      	movs	r3, #0
    a55e:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a560:	2300      	movs	r3, #0
    a562:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a564:	4a18      	ldr	r2, [pc, #96]	; (a5c8 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    a566:	9b04      	ldr	r3, [sp, #16]
    a568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a56c:	695a      	ldr	r2, [r3, #20]
    a56e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a572:	009b      	lsls	r3, r3, #2
    a574:	4413      	add	r3, r2
    a576:	681b      	ldr	r3, [r3, #0]
    a578:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    a57a:	f10d 030b 	add.w	r3, sp, #11
    a57e:	4619      	mov	r1, r3
    a580:	9803      	ldr	r0, [sp, #12]
    a582:	f000 ffe9 	bl	b558 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    a586:	4603      	mov	r3, r0
    a588:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    a58c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a590:	2b00      	cmp	r3, #0
    a592:	d112      	bne.n	a5ba <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    a594:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a598:	2b00      	cmp	r3, #0
    a59a:	d002      	beq.n	a5a2 <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    a59c:	2b01      	cmp	r3, #1
    a59e:	d004      	beq.n	a5aa <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    a5a0:	e007      	b.n	a5b2 <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    a5a2:	9b00      	ldr	r3, [sp, #0]
    a5a4:	2200      	movs	r2, #0
    a5a6:	601a      	str	r2, [r3, #0]
                                break;
    a5a8:	e008      	b.n	a5bc <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    a5aa:	9b00      	ldr	r3, [sp, #0]
    a5ac:	2201      	movs	r2, #1
    a5ae:	601a      	str	r2, [r3, #0]
                                break;
    a5b0:	e004      	b.n	a5bc <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    a5b2:	9b00      	ldr	r3, [sp, #0]
    a5b4:	2202      	movs	r2, #2
    a5b6:	601a      	str	r2, [r3, #0]
                                break;
    a5b8:	e000      	b.n	a5bc <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    a5ba:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    a5bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a5c0:	4618      	mov	r0, r3
    a5c2:	b007      	add	sp, #28
    a5c4:	f85d fb04 	ldr.w	pc, [sp], #4
    a5c8:	1fff8e14 	.word	0x1fff8e14

0000a5cc <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    a5cc:	b084      	sub	sp, #16
    a5ce:	4603      	mov	r3, r0
    a5d0:	9100      	str	r1, [sp, #0]
    a5d2:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a5d6:	2301      	movs	r3, #1
    a5d8:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    a5dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5e0:	4a06      	ldr	r2, [pc, #24]	; (a5fc <Can_43_FLEXCAN_GetControllerMode+0x30>)
    a5e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a5e6:	9b00      	ldr	r3, [sp, #0]
    a5e8:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    a5ea:	2300      	movs	r3, #0
    a5ec:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a5f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a5f4:	4618      	mov	r0, r3
    a5f6:	b004      	add	sp, #16
    a5f8:	4770      	bx	lr
    a5fa:	bf00      	nop
    a5fc:	1fff8e0c 	.word	0x1fff8e0c

0000a600 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    a600:	b500      	push	{lr}
    a602:	b087      	sub	sp, #28
    a604:	4603      	mov	r3, r0
    a606:	9100      	str	r1, [sp, #0]
    a608:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a60c:	2301      	movs	r3, #1
    a60e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a612:	2300      	movs	r3, #0
    a614:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a616:	2300      	movs	r3, #0
    a618:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a61a:	2300      	movs	r3, #0
    a61c:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a61e:	4a0c      	ldr	r2, [pc, #48]	; (a650 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    a620:	9b04      	ldr	r3, [sp, #16]
    a622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a626:	695a      	ldr	r2, [r3, #20]
    a628:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a62c:	009b      	lsls	r3, r3, #2
    a62e:	4413      	add	r3, r2
    a630:	681b      	ldr	r3, [r3, #0]
    a632:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    a634:	9900      	ldr	r1, [sp, #0]
    a636:	9803      	ldr	r0, [sp, #12]
    a638:	f000 ffb9 	bl	b5ae <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    a63c:	4603      	mov	r3, r0
    a63e:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a642:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a646:	4618      	mov	r0, r3
    a648:	b007      	add	sp, #28
    a64a:	f85d fb04 	ldr.w	pc, [sp], #4
    a64e:	bf00      	nop
    a650:	1fff8e14 	.word	0x1fff8e14

0000a654 <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    a654:	b500      	push	{lr}
    a656:	b087      	sub	sp, #28
    a658:	4603      	mov	r3, r0
    a65a:	9100      	str	r1, [sp, #0]
    a65c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a660:	2301      	movs	r3, #1
    a662:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a666:	2300      	movs	r3, #0
    a668:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a66a:	2300      	movs	r3, #0
    a66c:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a66e:	2300      	movs	r3, #0
    a670:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a672:	4a0c      	ldr	r2, [pc, #48]	; (a6a4 <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    a674:	9b04      	ldr	r3, [sp, #16]
    a676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a67a:	695a      	ldr	r2, [r3, #20]
    a67c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a680:	009b      	lsls	r3, r3, #2
    a682:	4413      	add	r3, r2
    a684:	681b      	ldr	r3, [r3, #0]
    a686:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    a688:	9900      	ldr	r1, [sp, #0]
    a68a:	9803      	ldr	r0, [sp, #12]
    a68c:	f000 ff7d 	bl	b58a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    a690:	4603      	mov	r3, r0
    a692:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a696:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a69a:	4618      	mov	r0, r3
    a69c:	b007      	add	sp, #28
    a69e:	f85d fb04 	ldr.w	pc, [sp], #4
    a6a2:	bf00      	nop
    a6a4:	1fff8e14 	.word	0x1fff8e14

0000a6a8 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    a6a8:	b500      	push	{lr}
    a6aa:	b089      	sub	sp, #36	; 0x24
    a6ac:	4603      	mov	r3, r0
    a6ae:	9100      	str	r1, [sp, #0]
    a6b0:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    a6b4:	2301      	movs	r3, #1
    a6b6:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    a6ba:	2300      	movs	r3, #0
    a6bc:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    a6c0:	2300      	movs	r3, #0
    a6c2:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    a6c4:	2300      	movs	r3, #0
    a6c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a6ca:	2300      	movs	r3, #0
    a6cc:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    a6ce:	2300      	movs	r3, #0
    a6d0:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a6d2:	2300      	movs	r3, #0
    a6d4:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    a6d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a6da:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    a6de:	4a1d      	ldr	r2, [pc, #116]	; (a754 <Can_43_FLEXCAN_Write+0xac>)
    a6e0:	9b06      	ldr	r3, [sp, #24]
    a6e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6e6:	68da      	ldr	r2, [r3, #12]
    a6e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a6ec:	4413      	add	r3, r2
    a6ee:	781b      	ldrb	r3, [r3, #0]
    a6f0:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a6f4:	4a17      	ldr	r2, [pc, #92]	; (a754 <Can_43_FLEXCAN_Write+0xac>)
    a6f6:	9b06      	ldr	r3, [sp, #24]
    a6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6fc:	695a      	ldr	r2, [r3, #20]
    a6fe:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a702:	009b      	lsls	r3, r3, #2
    a704:	4413      	add	r3, r2
    a706:	681b      	ldr	r3, [r3, #0]
    a708:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    a70a:	9b04      	ldr	r3, [sp, #16]
    a70c:	2b00      	cmp	r3, #0
    a70e:	d01b      	beq.n	a748 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    a710:	4a10      	ldr	r2, [pc, #64]	; (a754 <Can_43_FLEXCAN_Write+0xac>)
    a712:	9b06      	ldr	r3, [sp, #24]
    a714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a718:	6919      	ldr	r1, [r3, #16]
    a71a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a71e:	4613      	mov	r3, r2
    a720:	00db      	lsls	r3, r3, #3
    a722:	4413      	add	r3, r2
    a724:	009b      	lsls	r3, r3, #2
    a726:	440b      	add	r3, r1
    a728:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a72a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a72e:	4a0a      	ldr	r2, [pc, #40]	; (a758 <Can_43_FLEXCAN_Write+0xb0>)
    a730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a734:	2b01      	cmp	r3, #1
    a736:	d107      	bne.n	a748 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    a738:	9a00      	ldr	r2, [sp, #0]
    a73a:	9903      	ldr	r1, [sp, #12]
    a73c:	9804      	ldr	r0, [sp, #16]
    a73e:	f000 ff48 	bl	b5d2 <Can_43_FLEXCAN_Ipw_Write>
    a742:	4603      	mov	r3, r0
    a744:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    a748:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a74c:	4618      	mov	r0, r3
    a74e:	b009      	add	sp, #36	; 0x24
    a750:	f85d fb04 	ldr.w	pc, [sp], #4
    a754:	1fff8e14 	.word	0x1fff8e14
    a758:	1fff8e0c 	.word	0x1fff8e0c

0000a75c <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    a75c:	bf00      	nop
    a75e:	4770      	bx	lr

0000a760 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    a760:	bf00      	nop
    a762:	4770      	bx	lr

0000a764 <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    a764:	bf00      	nop
    a766:	4770      	bx	lr

0000a768 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    a768:	b500      	push	{lr}
    a76a:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    a76c:	2300      	movs	r3, #0
    a76e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    a772:	2300      	movs	r3, #0
    a774:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a776:	2300      	movs	r3, #0
    a778:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    a77a:	2300      	movs	r3, #0
    a77c:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    a77e:	4a17      	ldr	r2, [pc, #92]	; (a7dc <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a780:	9b02      	ldr	r3, [sp, #8]
    a782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a786:	2b00      	cmp	r3, #0
    a788:	d024      	beq.n	a7d4 <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a78a:	e01f      	b.n	a7cc <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a78c:	4a13      	ldr	r2, [pc, #76]	; (a7dc <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a78e:	9b02      	ldr	r3, [sp, #8]
    a790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a794:	695a      	ldr	r2, [r3, #20]
    a796:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a79a:	009b      	lsls	r3, r3, #2
    a79c:	4413      	add	r3, r2
    a79e:	681b      	ldr	r3, [r3, #0]
    a7a0:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    a7a2:	9b01      	ldr	r3, [sp, #4]
    a7a4:	2b00      	cmp	r3, #0
    a7a6:	d00c      	beq.n	a7c2 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    a7a8:	9b01      	ldr	r3, [sp, #4]
    a7aa:	7a1b      	ldrb	r3, [r3, #8]
    a7ac:	2b00      	cmp	r3, #0
    a7ae:	d008      	beq.n	a7c2 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    a7b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a7b4:	009b      	lsls	r3, r3, #2
    a7b6:	4a0a      	ldr	r2, [pc, #40]	; (a7e0 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    a7b8:	4413      	add	r3, r2
    a7ba:	4619      	mov	r1, r3
    a7bc:	9801      	ldr	r0, [sp, #4]
    a7be:	f001 f808 	bl	b7d2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    a7c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a7c6:	3301      	adds	r3, #1
    a7c8:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a7cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a7d0:	2b01      	cmp	r3, #1
    a7d2:	d9db      	bls.n	a78c <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    a7d4:	bf00      	nop
    a7d6:	b005      	add	sp, #20
    a7d8:	f85d fb04 	ldr.w	pc, [sp], #4
    a7dc:	1fff8e14 	.word	0x1fff8e14
    a7e0:	1fff8e0c 	.word	0x1fff8e0c

0000a7e4 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    a7e4:	b500      	push	{lr}
    a7e6:	b087      	sub	sp, #28
    a7e8:	4603      	mov	r3, r0
    a7ea:	9200      	str	r2, [sp, #0]
    a7ec:	f88d 3007 	strb.w	r3, [sp, #7]
    a7f0:	460b      	mov	r3, r1
    a7f2:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    a7f6:	2300      	movs	r3, #0
    a7f8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a7fc:	2300      	movs	r3, #0
    a7fe:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a800:	2300      	movs	r3, #0
    a802:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    a804:	2300      	movs	r3, #0
    a806:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a808:	4a16      	ldr	r2, [pc, #88]	; (a864 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a80a:	9b04      	ldr	r3, [sp, #16]
    a80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a810:	2b00      	cmp	r3, #0
    a812:	d022      	beq.n	a85a <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a814:	4a13      	ldr	r2, [pc, #76]	; (a864 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a816:	9b04      	ldr	r3, [sp, #16]
    a818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a81c:	689a      	ldr	r2, [r3, #8]
    a81e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a822:	4413      	add	r3, r2
    a824:	781b      	ldrb	r3, [r3, #0]
    a826:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a82a:	4a0e      	ldr	r2, [pc, #56]	; (a864 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a82c:	9b04      	ldr	r3, [sp, #16]
    a82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a832:	695a      	ldr	r2, [r3, #20]
    a834:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a838:	009b      	lsls	r3, r3, #2
    a83a:	4413      	add	r3, r2
    a83c:	681b      	ldr	r3, [r3, #0]
    a83e:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a840:	9b03      	ldr	r3, [sp, #12]
    a842:	2b00      	cmp	r3, #0
    a844:	d009      	beq.n	a85a <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    a846:	4a07      	ldr	r2, [pc, #28]	; (a864 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a848:	9b04      	ldr	r3, [sp, #16]
    a84a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a84e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a852:	9b00      	ldr	r3, [sp, #0]
    a854:	9803      	ldr	r0, [sp, #12]
    a856:	f000 fff2 	bl	b83e <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    a85a:	bf00      	nop
    a85c:	b007      	add	sp, #28
    a85e:	f85d fb04 	ldr.w	pc, [sp], #4
    a862:	bf00      	nop
    a864:	1fff8e14 	.word	0x1fff8e14

0000a868 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    a868:	b500      	push	{lr}
    a86a:	b087      	sub	sp, #28
    a86c:	4603      	mov	r3, r0
    a86e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    a872:	2300      	movs	r3, #0
    a874:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a878:	2300      	movs	r3, #0
    a87a:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a87c:	2300      	movs	r3, #0
    a87e:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a880:	2300      	movs	r3, #0
    a882:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a884:	4a19      	ldr	r2, [pc, #100]	; (a8ec <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a886:	9b04      	ldr	r3, [sp, #16]
    a888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a88c:	2b00      	cmp	r3, #0
    a88e:	d029      	beq.n	a8e4 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a890:	4a16      	ldr	r2, [pc, #88]	; (a8ec <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a892:	9b04      	ldr	r3, [sp, #16]
    a894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a898:	689a      	ldr	r2, [r3, #8]
    a89a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a89e:	4413      	add	r3, r2
    a8a0:	781b      	ldrb	r3, [r3, #0]
    a8a2:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a8a6:	4a11      	ldr	r2, [pc, #68]	; (a8ec <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a8a8:	9b04      	ldr	r3, [sp, #16]
    a8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ae:	695a      	ldr	r2, [r3, #20]
    a8b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a8b4:	009b      	lsls	r3, r3, #2
    a8b6:	4413      	add	r3, r2
    a8b8:	681b      	ldr	r3, [r3, #0]
    a8ba:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a8bc:	9b03      	ldr	r3, [sp, #12]
    a8be:	2b00      	cmp	r3, #0
    a8c0:	d010      	beq.n	a8e4 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a8c2:	9803      	ldr	r0, [sp, #12]
    a8c4:	f000 fd74 	bl	b3b0 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a8c8:	4603      	mov	r3, r0
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	d10a      	bne.n	a8e4 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a8ce:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a8d2:	4a07      	ldr	r2, [pc, #28]	; (a8f0 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    a8d4:	2102      	movs	r1, #2
    a8d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    a8da:	9b03      	ldr	r3, [sp, #12]
    a8dc:	781b      	ldrb	r3, [r3, #0]
    a8de:	4618      	mov	r0, r3
    a8e0:	f00c fbfc 	bl	170dc <CanIf_ControllerBusOff>
            }
        }
    }
}
    a8e4:	bf00      	nop
    a8e6:	b007      	add	sp, #28
    a8e8:	f85d fb04 	ldr.w	pc, [sp], #4
    a8ec:	1fff8e14 	.word	0x1fff8e14
    a8f0:	1fff8e0c 	.word	0x1fff8e0c

0000a8f4 <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    a8f4:	b500      	push	{lr}
    a8f6:	b085      	sub	sp, #20
    a8f8:	9003      	str	r0, [sp, #12]
    a8fa:	9102      	str	r1, [sp, #8]
    a8fc:	9201      	str	r2, [sp, #4]
    a8fe:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    a900:	9b01      	ldr	r3, [sp, #4]
    a902:	685a      	ldr	r2, [r3, #4]
    a904:	9b03      	ldr	r3, [sp, #12]
    a906:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    a908:	9b01      	ldr	r3, [sp, #4]
    a90a:	681b      	ldr	r3, [r3, #0]
    a90c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    a910:	2b00      	cmp	r3, #0
    a912:	d005      	beq.n	a920 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    a914:	9b03      	ldr	r3, [sp, #12]
    a916:	681b      	ldr	r3, [r3, #0]
    a918:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    a91c:	9b03      	ldr	r3, [sp, #12]
    a91e:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    a920:	9b06      	ldr	r3, [sp, #24]
    a922:	699b      	ldr	r3, [r3, #24]
    a924:	2b00      	cmp	r3, #0
    a926:	d10c      	bne.n	a942 <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    a928:	9b01      	ldr	r3, [sp, #4]
    a92a:	681b      	ldr	r3, [r3, #0]
    a92c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    a930:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    a934:	d105      	bne.n	a942 <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    a936:	2301      	movs	r3, #1
    a938:	2208      	movs	r2, #8
    a93a:	2100      	movs	r1, #0
    a93c:	2050      	movs	r0, #80	; 0x50
    a93e:	f00c fa2d 	bl	16d9c <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    a942:	9b06      	ldr	r3, [sp, #24]
    a944:	699b      	ldr	r3, [r3, #24]
    a946:	2b01      	cmp	r3, #1
    a948:	d009      	beq.n	a95e <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    a94a:	9b01      	ldr	r3, [sp, #4]
    a94c:	681b      	ldr	r3, [r3, #0]
    a94e:	2b00      	cmp	r3, #0
    a950:	da05      	bge.n	a95e <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    a952:	9b03      	ldr	r3, [sp, #12]
    a954:	681b      	ldr	r3, [r3, #0]
    a956:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a95a:	9b03      	ldr	r3, [sp, #12]
    a95c:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    a95e:	9b06      	ldr	r3, [sp, #24]
    a960:	7c1a      	ldrb	r2, [r3, #16]
    a962:	9b01      	ldr	r3, [sp, #4]
    a964:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a968:	429a      	cmp	r2, r3
    a96a:	d805      	bhi.n	a978 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    a96c:	9b06      	ldr	r3, [sp, #24]
    a96e:	7c1b      	ldrb	r3, [r3, #16]
    a970:	461a      	mov	r2, r3
    a972:	9b02      	ldr	r3, [sp, #8]
    a974:	609a      	str	r2, [r3, #8]
    a976:	e005      	b.n	a984 <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    a978:	9b01      	ldr	r3, [sp, #4]
    a97a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a97e:	461a      	mov	r2, r3
    a980:	9b02      	ldr	r3, [sp, #8]
    a982:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    a984:	9b06      	ldr	r3, [sp, #24]
    a986:	881a      	ldrh	r2, [r3, #0]
    a988:	9b03      	ldr	r3, [sp, #12]
    a98a:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    a98c:	9b00      	ldr	r3, [sp, #0]
    a98e:	781a      	ldrb	r2, [r3, #0]
    a990:	9b03      	ldr	r3, [sp, #12]
    a992:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    a994:	9b01      	ldr	r3, [sp, #4]
    a996:	f103 0208 	add.w	r2, r3, #8
    a99a:	9b02      	ldr	r3, [sp, #8]
    a99c:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    a99e:	9902      	ldr	r1, [sp, #8]
    a9a0:	9803      	ldr	r0, [sp, #12]
    a9a2:	f00c fb29 	bl	16ff8 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    a9a6:	bf00      	nop
    a9a8:	b005      	add	sp, #20
    a9aa:	f85d fb04 	ldr.w	pc, [sp], #4

0000a9ae <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    a9ae:	b500      	push	{lr}
    a9b0:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    a9b4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9b8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    a9bc:	6018      	str	r0, [r3, #0]
    a9be:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9c2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a9c6:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    a9c8:	2300      	movs	r3, #0
    a9ca:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    a9ce:	2300      	movs	r3, #0
    a9d0:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    a9d4:	2300      	movs	r3, #0
    a9d6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    a9da:	2300      	movs	r3, #0
    a9dc:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    a9e0:	2300      	movs	r3, #0
    a9e2:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    a9e6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9ea:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a9ee:	681b      	ldr	r3, [r3, #0]
    a9f0:	7c9b      	ldrb	r3, [r3, #18]
    a9f2:	089b      	lsrs	r3, r3, #2
    a9f4:	b2db      	uxtb	r3, r3
    a9f6:	3306      	adds	r3, #6
    a9f8:	2b20      	cmp	r3, #32
    a9fa:	d80b      	bhi.n	aa14 <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    a9fc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa00:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa04:	681b      	ldr	r3, [r3, #0]
    aa06:	7c9b      	ldrb	r3, [r3, #18]
    aa08:	089b      	lsrs	r3, r3, #2
    aa0a:	b2db      	uxtb	r3, r3
    aa0c:	3306      	adds	r3, #6
    aa0e:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    aa12:	e002      	b.n	aa1a <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    aa14:	2320      	movs	r3, #32
    aa16:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    aa1a:	2300      	movs	r3, #0
    aa1c:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    aa20:	e169      	b.n	acf6 <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    aa22:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa26:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    aa2a:	681b      	ldr	r3, [r3, #0]
    aa2c:	691b      	ldr	r3, [r3, #16]
    aa2e:	2b00      	cmp	r3, #0
    aa30:	d13a      	bne.n	aaa8 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    aa32:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa36:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa3a:	681b      	ldr	r3, [r3, #0]
    aa3c:	7c9b      	ldrb	r3, [r3, #18]
    aa3e:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    aa42:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    aa46:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    aa4a:	2300      	movs	r3, #0
    aa4c:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    aa50:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa54:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa58:	681b      	ldr	r3, [r3, #0]
    aa5a:	689b      	ldr	r3, [r3, #8]
    aa5c:	2b00      	cmp	r3, #0
    aa5e:	d011      	beq.n	aa84 <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    aa60:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa64:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa68:	681b      	ldr	r3, [r3, #0]
    aa6a:	695a      	ldr	r2, [r3, #20]
    aa6c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aa70:	00db      	lsls	r3, r3, #3
    aa72:	4413      	add	r3, r2
    aa74:	685b      	ldr	r3, [r3, #4]
    aa76:	005b      	lsls	r3, r3, #1
    aa78:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aa7c:	4313      	orrs	r3, r2
    aa7e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aa82:	e126      	b.n	acd2 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    aa84:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa88:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa8c:	681b      	ldr	r3, [r3, #0]
    aa8e:	695a      	ldr	r2, [r3, #20]
    aa90:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aa94:	00db      	lsls	r3, r3, #3
    aa96:	4413      	add	r3, r2
    aa98:	685b      	ldr	r3, [r3, #4]
    aa9a:	04db      	lsls	r3, r3, #19
    aa9c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aaa0:	4313      	orrs	r3, r2
    aaa2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aaa6:	e114      	b.n	acd2 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    aaa8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aaac:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    aab0:	681b      	ldr	r3, [r3, #0]
    aab2:	691b      	ldr	r3, [r3, #16]
    aab4:	2b01      	cmp	r3, #1
    aab6:	d160      	bne.n	ab7a <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    aab8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aabc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aac0:	681b      	ldr	r3, [r3, #0]
    aac2:	7c9b      	ldrb	r3, [r3, #18]
    aac4:	005b      	lsls	r3, r3, #1
    aac6:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    aaca:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    aace:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    aad2:	2301      	movs	r3, #1
    aad4:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    aad8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aadc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aae0:	681b      	ldr	r3, [r3, #0]
    aae2:	689b      	ldr	r3, [r3, #8]
    aae4:	2b00      	cmp	r3, #0
    aae6:	d024      	beq.n	ab32 <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    aae8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aaec:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aaf0:	681b      	ldr	r3, [r3, #0]
    aaf2:	695a      	ldr	r2, [r3, #20]
    aaf4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aaf8:	011b      	lsls	r3, r3, #4
    aafa:	4413      	add	r3, r2
    aafc:	685b      	ldr	r3, [r3, #4]
    aafe:	0bdb      	lsrs	r3, r3, #15
    ab00:	041b      	lsls	r3, r3, #16
    ab02:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab06:	4313      	orrs	r3, r2
    ab08:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    ab0c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab10:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab14:	681b      	ldr	r3, [r3, #0]
    ab16:	695a      	ldr	r2, [r3, #20]
    ab18:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab1c:	011b      	lsls	r3, r3, #4
    ab1e:	3308      	adds	r3, #8
    ab20:	4413      	add	r3, r2
    ab22:	685b      	ldr	r3, [r3, #4]
    ab24:	0bdb      	lsrs	r3, r3, #15
    ab26:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab2a:	4313      	orrs	r3, r2
    ab2c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    ab30:	e0cf      	b.n	acd2 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    ab32:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab36:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab3a:	681b      	ldr	r3, [r3, #0]
    ab3c:	695a      	ldr	r2, [r3, #20]
    ab3e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab42:	011b      	lsls	r3, r3, #4
    ab44:	4413      	add	r3, r2
    ab46:	685b      	ldr	r3, [r3, #4]
    ab48:	04db      	lsls	r3, r3, #19
    ab4a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab4e:	4313      	orrs	r3, r2
    ab50:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    ab54:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab58:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab5c:	681b      	ldr	r3, [r3, #0]
    ab5e:	695a      	ldr	r2, [r3, #20]
    ab60:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab64:	011b      	lsls	r3, r3, #4
    ab66:	3308      	adds	r3, #8
    ab68:	4413      	add	r3, r2
    ab6a:	685b      	ldr	r3, [r3, #4]
    ab6c:	00db      	lsls	r3, r3, #3
    ab6e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab72:	4313      	orrs	r3, r2
    ab74:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    ab78:	e0ab      	b.n	acd2 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    ab7a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab7e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab82:	681b      	ldr	r3, [r3, #0]
    ab84:	7c9b      	ldrb	r3, [r3, #18]
    ab86:	009b      	lsls	r3, r3, #2
    ab88:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    ab8c:	2300      	movs	r3, #0
    ab8e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    ab92:	2302      	movs	r3, #2
    ab94:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    ab98:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab9c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aba0:	681b      	ldr	r3, [r3, #0]
    aba2:	689b      	ldr	r3, [r3, #8]
    aba4:	2b00      	cmp	r3, #0
    aba6:	d04a      	beq.n	ac3e <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    aba8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abb0:	681b      	ldr	r3, [r3, #0]
    abb2:	695a      	ldr	r2, [r3, #20]
    abb4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abb8:	015b      	lsls	r3, r3, #5
    abba:	4413      	add	r3, r2
    abbc:	685b      	ldr	r3, [r3, #4]
    abbe:	0d5b      	lsrs	r3, r3, #21
    abc0:	061b      	lsls	r3, r3, #24
    abc2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    abc6:	4313      	orrs	r3, r2
    abc8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    abcc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abd0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abd4:	681b      	ldr	r3, [r3, #0]
    abd6:	695a      	ldr	r2, [r3, #20]
    abd8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abdc:	015b      	lsls	r3, r3, #5
    abde:	3308      	adds	r3, #8
    abe0:	4413      	add	r3, r2
    abe2:	685b      	ldr	r3, [r3, #4]
    abe4:	0d5b      	lsrs	r3, r3, #21
    abe6:	041b      	lsls	r3, r3, #16
    abe8:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    abec:	4313      	orrs	r3, r2
    abee:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    abf2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abf6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abfa:	681b      	ldr	r3, [r3, #0]
    abfc:	695a      	ldr	r2, [r3, #20]
    abfe:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac02:	015b      	lsls	r3, r3, #5
    ac04:	3310      	adds	r3, #16
    ac06:	4413      	add	r3, r2
    ac08:	685b      	ldr	r3, [r3, #4]
    ac0a:	0d5b      	lsrs	r3, r3, #21
    ac0c:	021b      	lsls	r3, r3, #8
    ac0e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac12:	4313      	orrs	r3, r2
    ac14:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    ac18:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac1c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac20:	681b      	ldr	r3, [r3, #0]
    ac22:	695a      	ldr	r2, [r3, #20]
    ac24:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac28:	015b      	lsls	r3, r3, #5
    ac2a:	3318      	adds	r3, #24
    ac2c:	4413      	add	r3, r2
    ac2e:	685b      	ldr	r3, [r3, #4]
    ac30:	0d5b      	lsrs	r3, r3, #21
    ac32:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac36:	4313      	orrs	r3, r2
    ac38:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    ac3c:	e049      	b.n	acd2 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    ac3e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac42:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac46:	681b      	ldr	r3, [r3, #0]
    ac48:	695a      	ldr	r2, [r3, #20]
    ac4a:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac4e:	015b      	lsls	r3, r3, #5
    ac50:	4413      	add	r3, r2
    ac52:	685b      	ldr	r3, [r3, #4]
    ac54:	08db      	lsrs	r3, r3, #3
    ac56:	061b      	lsls	r3, r3, #24
    ac58:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac5c:	4313      	orrs	r3, r2
    ac5e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    ac62:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac66:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac6a:	681b      	ldr	r3, [r3, #0]
    ac6c:	695a      	ldr	r2, [r3, #20]
    ac6e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac72:	015b      	lsls	r3, r3, #5
    ac74:	3308      	adds	r3, #8
    ac76:	4413      	add	r3, r2
    ac78:	685b      	ldr	r3, [r3, #4]
    ac7a:	08db      	lsrs	r3, r3, #3
    ac7c:	041b      	lsls	r3, r3, #16
    ac7e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac82:	4313      	orrs	r3, r2
    ac84:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    ac88:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac8c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac90:	681b      	ldr	r3, [r3, #0]
    ac92:	695a      	ldr	r2, [r3, #20]
    ac94:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac98:	015b      	lsls	r3, r3, #5
    ac9a:	3310      	adds	r3, #16
    ac9c:	4413      	add	r3, r2
    ac9e:	685b      	ldr	r3, [r3, #4]
    aca0:	08db      	lsrs	r3, r3, #3
    aca2:	021b      	lsls	r3, r3, #8
    aca4:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aca8:	4313      	orrs	r3, r2
    acaa:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    acae:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acb2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    acb6:	681b      	ldr	r3, [r3, #0]
    acb8:	695a      	ldr	r2, [r3, #20]
    acba:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    acbe:	015b      	lsls	r3, r3, #5
    acc0:	3318      	adds	r3, #24
    acc2:	4413      	add	r3, r2
    acc4:	685b      	ldr	r3, [r3, #4]
    acc6:	08db      	lsrs	r3, r3, #3
    acc8:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    accc:	4313      	orrs	r3, r2
    acce:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    acd2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acd6:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    acda:	681b      	ldr	r3, [r3, #0]
    acdc:	789b      	ldrb	r3, [r3, #2]
    acde:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    ace2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ace6:	4618      	mov	r0, r3
    ace8:	f002 fd22 	bl	d730 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    acec:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    acf0:	3301      	adds	r3, #1
    acf2:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    acf6:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    acfa:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    acfe:	429a      	cmp	r2, r3
    ad00:	d20a      	bcs.n	ad18 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    ad02:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad06:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ad0a:	681b      	ldr	r3, [r3, #0]
    ad0c:	7c9b      	ldrb	r3, [r3, #18]
    ad0e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ad12:	429a      	cmp	r2, r3
    ad14:	f4ff ae85 	bcc.w	aa22 <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    ad18:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad1c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ad20:	681b      	ldr	r3, [r3, #0]
    ad22:	789a      	ldrb	r2, [r3, #2]
    ad24:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad28:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ad2c:	681b      	ldr	r3, [r3, #0]
    ad2e:	68db      	ldr	r3, [r3, #12]
    ad30:	4619      	mov	r1, r3
    ad32:	4610      	mov	r0, r2
    ad34:	f002 fd4a 	bl	d7cc <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    ad38:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    ad3c:	2b00      	cmp	r3, #0
    ad3e:	d054      	beq.n	adea <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    ad40:	2300      	movs	r3, #0
    ad42:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ad46:	e03e      	b.n	adc6 <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    ad48:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad4c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ad50:	681b      	ldr	r3, [r3, #0]
    ad52:	695a      	ldr	r2, [r3, #20]
    ad54:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad58:	00db      	lsls	r3, r3, #3
    ad5a:	441a      	add	r2, r3
    ad5c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad60:	6812      	ldr	r2, [r2, #0]
    ad62:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    ad66:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    ad6a:	00db      	lsls	r3, r3, #3
    ad6c:	440b      	add	r3, r1
    ad6e:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    ad70:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad74:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ad78:	681b      	ldr	r3, [r3, #0]
    ad7a:	689b      	ldr	r3, [r3, #8]
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	d00a      	beq.n	ad96 <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    ad80:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad84:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    ad88:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    ad8c:	00db      	lsls	r3, r3, #3
    ad8e:	4413      	add	r3, r2
    ad90:	2201      	movs	r2, #1
    ad92:	705a      	strb	r2, [r3, #1]
    ad94:	e009      	b.n	adaa <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    ad96:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad9a:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    ad9e:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    ada2:	00db      	lsls	r3, r3, #3
    ada4:	4413      	add	r3, r2
    ada6:	2200      	movs	r2, #0
    ada8:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    adaa:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    adae:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    adb2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    adb6:	2100      	movs	r1, #0
    adb8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    adbc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    adc0:	3301      	adds	r3, #1
    adc2:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    adc6:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    adca:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    adce:	429a      	cmp	r2, r3
    add0:	d3ba      	bcc.n	ad48 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    add2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    add6:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    adda:	681b      	ldr	r3, [r3, #0]
    addc:	789b      	ldrb	r3, [r3, #2]
    adde:	aa02      	add	r2, sp, #8
    ade0:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    ade4:	4618      	mov	r0, r3
    ade6:	f002 f886 	bl	cef6 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    adea:	bf00      	nop
    adec:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    adf0:	f85d fb04 	ldr.w	pc, [sp], #4

0000adf4 <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    adf4:	b510      	push	{r4, lr}
    adf6:	b084      	sub	sp, #16
    adf8:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
#else
    uint16 BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
    adfa:	9b01      	ldr	r3, [sp, #4]
    adfc:	8b9b      	ldrh	r3, [r3, #28]
    adfe:	f8ad 300e 	strh.w	r3, [sp, #14]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    ae02:	9b01      	ldr	r3, [sp, #4]
    ae04:	6a1a      	ldr	r2, [r3, #32]
    ae06:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ae0a:	2116      	movs	r1, #22
    ae0c:	fb01 f303 	mul.w	r3, r1, r3
    ae10:	4413      	add	r3, r2
    ae12:	785b      	ldrb	r3, [r3, #1]
    ae14:	2b00      	cmp	r3, #0
    ae16:	d016      	beq.n	ae46 <Can_Ipw_InitBaudrate+0x52>
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    ae18:	9b01      	ldr	r3, [sp, #4]
    ae1a:	7898      	ldrb	r0, [r3, #2]
    ae1c:	9b01      	ldr	r3, [sp, #4]
    ae1e:	6a1a      	ldr	r2, [r3, #32]
    ae20:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ae24:	2116      	movs	r1, #22
    ae26:	fb01 f303 	mul.w	r3, r1, r3
    ae2a:	4413      	add	r3, r2
    ae2c:	7cd9      	ldrb	r1, [r3, #19]
    ae2e:	9b01      	ldr	r3, [sp, #4]
    ae30:	6a1a      	ldr	r2, [r3, #32]
    ae32:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ae36:	2416      	movs	r4, #22
    ae38:	fb04 f303 	mul.w	r3, r4, r3
    ae3c:	4413      	add	r3, r2
    ae3e:	7d1b      	ldrb	r3, [r3, #20]
    ae40:	461a      	mov	r2, r3
    ae42:	f003 f83d 	bl	dec0 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    ae46:	9b01      	ldr	r3, [sp, #4]
    ae48:	7898      	ldrb	r0, [r3, #2]
    ae4a:	9b01      	ldr	r3, [sp, #4]
    ae4c:	6a1a      	ldr	r2, [r3, #32]
    ae4e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ae52:	2116      	movs	r1, #22
    ae54:	fb01 f303 	mul.w	r3, r1, r3
    ae58:	4413      	add	r3, r2
    ae5a:	7c9b      	ldrb	r3, [r3, #18]
    ae5c:	4619      	mov	r1, r3
    ae5e:	f003 f883 	bl	df68 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    ae62:	bf00      	nop
    ae64:	b004      	add	sp, #16
    ae66:	bd10      	pop	{r4, pc}

0000ae68 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    ae68:	b500      	push	{lr}
    ae6a:	b087      	sub	sp, #28
    ae6c:	9003      	str	r0, [sp, #12]
    ae6e:	9102      	str	r1, [sp, #8]
    ae70:	4613      	mov	r3, r2
    ae72:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    ae76:	2300      	movs	r3, #0
    ae78:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    ae7c:	9b03      	ldr	r3, [sp, #12]
    ae7e:	785b      	ldrb	r3, [r3, #1]
    ae80:	461a      	mov	r2, r3
    ae82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae86:	491c      	ldr	r1, [pc, #112]	; (aef8 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    ae88:	0152      	lsls	r2, r2, #5
    ae8a:	4413      	add	r3, r2
    ae8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    ae90:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    ae94:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ae98:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ae9c:	4293      	cmp	r3, r2
    ae9e:	d027      	beq.n	aef0 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    aea0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    aea4:	4613      	mov	r3, r2
    aea6:	00db      	lsls	r3, r3, #3
    aea8:	4413      	add	r3, r2
    aeaa:	009b      	lsls	r3, r3, #2
    aeac:	461a      	mov	r2, r3
    aeae:	9b02      	ldr	r3, [sp, #8]
    aeb0:	4413      	add	r3, r2
    aeb2:	7b1b      	ldrb	r3, [r3, #12]
    aeb4:	f083 0301 	eor.w	r3, r3, #1
    aeb8:	b2db      	uxtb	r3, r3
    aeba:	2b00      	cmp	r3, #0
    aebc:	d018      	beq.n	aef0 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    aebe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    aec2:	4613      	mov	r3, r2
    aec4:	00db      	lsls	r3, r3, #3
    aec6:	4413      	add	r3, r2
    aec8:	009b      	lsls	r3, r3, #2
    aeca:	461a      	mov	r2, r3
    aecc:	9b02      	ldr	r3, [sp, #8]
    aece:	4413      	add	r3, r2
    aed0:	699b      	ldr	r3, [r3, #24]
    aed2:	2b03      	cmp	r3, #3
    aed4:	d10c      	bne.n	aef0 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    aed6:	9b03      	ldr	r3, [sp, #12]
    aed8:	785b      	ldrb	r3, [r3, #1]
    aeda:	461a      	mov	r2, r3
    aedc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aee0:	4906      	ldr	r1, [pc, #24]	; (aefc <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    aee2:	0152      	lsls	r2, r2, #5
    aee4:	4413      	add	r3, r2
    aee6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    aeea:	4618      	mov	r0, r3
    aeec:	f00c f850 	bl	16f90 <CanIf_TxConfirmation>
            }
        }
    }
    aef0:	bf00      	nop
    aef2:	b007      	add	sp, #28
    aef4:	f85d fb04 	ldr.w	pc, [sp], #4
    aef8:	1fff92d8 	.word	0x1fff92d8
    aefc:	1fff9258 	.word	0x1fff9258

0000af00 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    af00:	b500      	push	{lr}
    af02:	b08f      	sub	sp, #60	; 0x3c
    af04:	9005      	str	r0, [sp, #20]
    af06:	9104      	str	r1, [sp, #16]
    af08:	4613      	mov	r3, r2
    af0a:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    af0e:	2300      	movs	r3, #0
    af10:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    af14:	2300      	movs	r3, #0
    af16:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    af18:	2300      	movs	r3, #0
    af1a:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    af1c:	9b05      	ldr	r3, [sp, #20]
    af1e:	785b      	ldrb	r3, [r3, #1]
    af20:	461a      	mov	r2, r3
    af22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    af26:	4944      	ldr	r1, [pc, #272]	; (b038 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x138>)
    af28:	0152      	lsls	r2, r2, #5
    af2a:	4413      	add	r3, r2
    af2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    af30:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    af34:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    af38:	f64f 72ff 	movw	r2, #65535	; 0xffff
    af3c:	4293      	cmp	r3, r2
    af3e:	d076      	beq.n	b02e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
    af40:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    af44:	4613      	mov	r3, r2
    af46:	00db      	lsls	r3, r3, #3
    af48:	4413      	add	r3, r2
    af4a:	009b      	lsls	r3, r3, #2
    af4c:	461a      	mov	r2, r3
    af4e:	9b04      	ldr	r3, [sp, #16]
    af50:	4413      	add	r3, r2
    af52:	7b1b      	ldrb	r3, [r3, #12]
    af54:	f083 0301 	eor.w	r3, r3, #1
    af58:	b2db      	uxtb	r3, r3
    af5a:	2b00      	cmp	r3, #0
    af5c:	d067      	beq.n	b02e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    af5e:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    af62:	4613      	mov	r3, r2
    af64:	00db      	lsls	r3, r3, #3
    af66:	4413      	add	r3, r2
    af68:	009b      	lsls	r3, r3, #2
    af6a:	461a      	mov	r2, r3
    af6c:	9b04      	ldr	r3, [sp, #16]
    af6e:	4413      	add	r3, r2
    af70:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    af72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af74:	699b      	ldr	r3, [r3, #24]
    af76:	2b00      	cmp	r3, #0
    af78:	d11d      	bne.n	afb6 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xb6>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    af7a:	9b05      	ldr	r3, [sp, #20]
    af7c:	785b      	ldrb	r3, [r3, #1]
    af7e:	461a      	mov	r2, r3
    af80:	4b2e      	ldr	r3, [pc, #184]	; (b03c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    af82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    af86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af88:	7f1b      	ldrb	r3, [r3, #28]
    af8a:	011b      	lsls	r3, r3, #4
    af8c:	4413      	add	r3, r2
    af8e:	681b      	ldr	r3, [r3, #0]
    af90:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    af92:	a906      	add	r1, sp, #24
    af94:	a809      	add	r0, sp, #36	; 0x24
    af96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af98:	9300      	str	r3, [sp, #0]
    af9a:	9b05      	ldr	r3, [sp, #20]
    af9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    af9e:	f7ff fca9 	bl	a8f4 <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    afa2:	9b05      	ldr	r3, [sp, #20]
    afa4:	7898      	ldrb	r0, [r3, #2]
    afa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afa8:	7f19      	ldrb	r1, [r3, #28]
    afaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afac:	7b1b      	ldrb	r3, [r3, #12]
    afae:	2200      	movs	r2, #0
    afb0:	f001 fe70 	bl	cc94 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    afb4:	e03b      	b.n	b02e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    afb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afb8:	699b      	ldr	r3, [r3, #24]
    afba:	2b01      	cmp	r3, #1
    afbc:	d137      	bne.n	b02e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                if ((uint8)7U == u8MbIdx)
    afbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    afc2:	2b07      	cmp	r3, #7
    afc4:	d10d      	bne.n	afe2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xe2>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    afc6:	2301      	movs	r3, #1
    afc8:	2208      	movs	r2, #8
    afca:	2100      	movs	r1, #0
    afcc:	2050      	movs	r0, #80	; 0x50
    afce:	f00b fee5 	bl	16d9c <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    afd2:	9b05      	ldr	r3, [sp, #20]
    afd4:	699b      	ldr	r3, [r3, #24]
    afd6:	2b00      	cmp	r3, #0
    afd8:	d029      	beq.n	b02e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    afda:	9b05      	ldr	r3, [sp, #20]
    afdc:	699b      	ldr	r3, [r3, #24]
    afde:	4798      	blx	r3
    }
    afe0:	e025      	b.n	b02e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                else if ((uint8)6U == u8MbIdx)
    afe2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    afe6:	2b06      	cmp	r3, #6
    afe8:	d107      	bne.n	affa <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xfa>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    afea:	9b05      	ldr	r3, [sp, #20]
    afec:	695b      	ldr	r3, [r3, #20]
    afee:	2b00      	cmp	r3, #0
    aff0:	d01d      	beq.n	b02e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    aff2:	9b05      	ldr	r3, [sp, #20]
    aff4:	695b      	ldr	r3, [r3, #20]
    aff6:	4798      	blx	r3
    }
    aff8:	e019      	b.n	b02e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    affa:	9b05      	ldr	r3, [sp, #20]
    affc:	785b      	ldrb	r3, [r3, #1]
    affe:	461a      	mov	r2, r3
    b000:	4b0e      	ldr	r3, [pc, #56]	; (b03c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    b002:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b008:	7f1b      	ldrb	r3, [r3, #28]
    b00a:	011b      	lsls	r3, r3, #4
    b00c:	4413      	add	r3, r2
    b00e:	681b      	ldr	r3, [r3, #0]
    b010:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    b012:	a906      	add	r1, sp, #24
    b014:	a809      	add	r0, sp, #36	; 0x24
    b016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b018:	9300      	str	r3, [sp, #0]
    b01a:	9b05      	ldr	r3, [sp, #20]
    b01c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b01e:	f7ff fc69 	bl	a8f4 <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    b022:	9b05      	ldr	r3, [sp, #20]
    b024:	789b      	ldrb	r3, [r3, #2]
    b026:	2100      	movs	r1, #0
    b028:	4618      	mov	r0, r3
    b02a:	f001 ff31 	bl	ce90 <FlexCAN_Ip_RxFifo>
    }
    b02e:	bf00      	nop
    b030:	b00f      	add	sp, #60	; 0x3c
    b032:	f85d fb04 	ldr.w	pc, [sp], #4
    b036:	bf00      	nop
    b038:	1fff92d8 	.word	0x1fff92d8
    b03c:	0001859c 	.word	0x0001859c

0000b040 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b040:	b510      	push	{r4, lr}
    b042:	b084      	sub	sp, #16
    b044:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    b046:	2301      	movs	r3, #1
    b048:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    b04c:	2300      	movs	r3, #0
    b04e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    b052:	2300      	movs	r3, #0
    b054:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    b058:	2300      	movs	r3, #0
    b05a:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    b05c:	2300      	movs	r3, #0
    b05e:	f88d 300d 	strb.w	r3, [sp, #13]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    b062:	9b01      	ldr	r3, [sp, #4]
    b064:	7898      	ldrb	r0, [r3, #2]
    b066:	9b01      	ldr	r3, [sp, #4]
    b068:	785b      	ldrb	r3, [r3, #1]
    b06a:	461a      	mov	r2, r3
    b06c:	4b77      	ldr	r3, [pc, #476]	; (b24c <Can_43_FLEXCAN_Ipw_Init+0x20c>)
    b06e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    b072:	9b01      	ldr	r3, [sp, #4]
    b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b076:	681b      	ldr	r3, [r3, #0]
    b078:	461a      	mov	r2, r3
    b07a:	f001 fcff 	bl	ca7c <FlexCAN_Ip_Init_Privileged>
    b07e:	4603      	mov	r3, r0
    b080:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    b084:	9b01      	ldr	r3, [sp, #4]
    b086:	785b      	ldrb	r3, [r3, #1]
    b088:	461a      	mov	r2, r3
    b08a:	4b71      	ldr	r3, [pc, #452]	; (b250 <Can_43_FLEXCAN_Ipw_Init+0x210>)
    b08c:	2101      	movs	r1, #1
    b08e:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    b090:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b094:	2b00      	cmp	r3, #0
    b096:	d13b      	bne.n	b110 <Can_43_FLEXCAN_Ipw_Init+0xd0>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b098:	9b01      	ldr	r3, [sp, #4]
    b09a:	789b      	ldrb	r3, [r3, #2]
    b09c:	4618      	mov	r0, r3
    b09e:	f003 f821 	bl	e0e4 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    b0a2:	9b01      	ldr	r3, [sp, #4]
    b0a4:	6a1a      	ldr	r2, [r3, #32]
    b0a6:	9b01      	ldr	r3, [sp, #4]
    b0a8:	8b9b      	ldrh	r3, [r3, #28]
    b0aa:	4619      	mov	r1, r3
    b0ac:	2316      	movs	r3, #22
    b0ae:	fb01 f303 	mul.w	r3, r1, r3
    b0b2:	4413      	add	r3, r2
    b0b4:	785b      	ldrb	r3, [r3, #1]
    b0b6:	2b00      	cmp	r3, #0
    b0b8:	d018      	beq.n	b0ec <Can_43_FLEXCAN_Ipw_Init+0xac>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    b0ba:	9b01      	ldr	r3, [sp, #4]
    b0bc:	7898      	ldrb	r0, [r3, #2]
    b0be:	9b01      	ldr	r3, [sp, #4]
    b0c0:	6a1a      	ldr	r2, [r3, #32]
    b0c2:	9b01      	ldr	r3, [sp, #4]
    b0c4:	8b9b      	ldrh	r3, [r3, #28]
    b0c6:	4619      	mov	r1, r3
    b0c8:	2316      	movs	r3, #22
    b0ca:	fb01 f303 	mul.w	r3, r1, r3
    b0ce:	4413      	add	r3, r2
    b0d0:	7cd9      	ldrb	r1, [r3, #19]
    b0d2:	9b01      	ldr	r3, [sp, #4]
    b0d4:	6a1a      	ldr	r2, [r3, #32]
    b0d6:	9b01      	ldr	r3, [sp, #4]
    b0d8:	8b9b      	ldrh	r3, [r3, #28]
    b0da:	461c      	mov	r4, r3
    b0dc:	2316      	movs	r3, #22
    b0de:	fb04 f303 	mul.w	r3, r4, r3
    b0e2:	4413      	add	r3, r2
    b0e4:	7d1b      	ldrb	r3, [r3, #20]
    b0e6:	461a      	mov	r2, r3
    b0e8:	f002 feea 	bl	dec0 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    b0ec:	9b01      	ldr	r3, [sp, #4]
    b0ee:	7898      	ldrb	r0, [r3, #2]
    b0f0:	9b01      	ldr	r3, [sp, #4]
    b0f2:	6a1a      	ldr	r2, [r3, #32]
    b0f4:	9b01      	ldr	r3, [sp, #4]
    b0f6:	8b9b      	ldrh	r3, [r3, #28]
    b0f8:	4619      	mov	r1, r3
    b0fa:	2316      	movs	r3, #22
    b0fc:	fb01 f303 	mul.w	r3, r1, r3
    b100:	4413      	add	r3, r2
    b102:	7c9b      	ldrb	r3, [r3, #18]
    b104:	4619      	mov	r1, r3
    b106:	f002 ff2f 	bl	df68 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b10a:	9801      	ldr	r0, [sp, #4]
    b10c:	f000 fb0a 	bl	b724 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b110:	2300      	movs	r3, #0
    b112:	f88d 300d 	strb.w	r3, [sp, #13]
    b116:	e010      	b.n	b13a <Can_43_FLEXCAN_Ipw_Init+0xfa>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    b118:	9b01      	ldr	r3, [sp, #4]
    b11a:	785b      	ldrb	r3, [r3, #1]
    b11c:	461a      	mov	r2, r3
    b11e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b122:	494c      	ldr	r1, [pc, #304]	; (b254 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b124:	0152      	lsls	r2, r2, #5
    b126:	4413      	add	r3, r2
    b128:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b12c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b130:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b134:	3301      	adds	r3, #1
    b136:	f88d 300d 	strb.w	r3, [sp, #13]
    b13a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b13e:	2b1f      	cmp	r3, #31
    b140:	d9ea      	bls.n	b118 <Can_43_FLEXCAN_Ipw_Init+0xd8>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b142:	2300      	movs	r3, #0
    b144:	f88d 300f 	strb.w	r3, [sp, #15]
    b148:	e06b      	b.n	b222 <Can_43_FLEXCAN_Ipw_Init+0x1e2>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b14a:	9b01      	ldr	r3, [sp, #4]
    b14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b14e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b152:	009b      	lsls	r3, r3, #2
    b154:	4413      	add	r3, r2
    b156:	681b      	ldr	r3, [r3, #0]
    b158:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    b15a:	9b02      	ldr	r3, [sp, #8]
    b15c:	699b      	ldr	r3, [r3, #24]
    b15e:	2b03      	cmp	r3, #3
    b160:	d006      	beq.n	b170 <Can_43_FLEXCAN_Ipw_Init+0x130>
    b162:	2b03      	cmp	r3, #3
    b164:	d857      	bhi.n	b216 <Can_43_FLEXCAN_Ipw_Init+0x1d6>
    b166:	2b00      	cmp	r3, #0
    b168:	d023      	beq.n	b1b2 <Can_43_FLEXCAN_Ipw_Init+0x172>
    b16a:	2b01      	cmp	r3, #1
    b16c:	d02f      	beq.n	b1ce <Can_43_FLEXCAN_Ipw_Init+0x18e>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    b16e:	e052      	b.n	b216 <Can_43_FLEXCAN_Ipw_Init+0x1d6>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b170:	2300      	movs	r3, #0
    b172:	f88d 300e 	strb.w	r3, [sp, #14]
    b176:	e015      	b.n	b1a4 <Can_43_FLEXCAN_Ipw_Init+0x164>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    b178:	9b01      	ldr	r3, [sp, #4]
    b17a:	785b      	ldrb	r3, [r3, #1]
    b17c:	461c      	mov	r4, r3
    b17e:	9b02      	ldr	r3, [sp, #8]
    b180:	7f1b      	ldrb	r3, [r3, #28]
    b182:	461a      	mov	r2, r3
    b184:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b188:	4413      	add	r3, r2
    b18a:	9a02      	ldr	r2, [sp, #8]
    b18c:	8810      	ldrh	r0, [r2, #0]
    b18e:	4931      	ldr	r1, [pc, #196]	; (b254 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b190:	0162      	lsls	r2, r4, #5
    b192:	4413      	add	r3, r2
    b194:	4602      	mov	r2, r0
    b196:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b19a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b19e:	3301      	adds	r3, #1
    b1a0:	f88d 300e 	strb.w	r3, [sp, #14]
    b1a4:	9b02      	ldr	r3, [sp, #8]
    b1a6:	7b9b      	ldrb	r3, [r3, #14]
    b1a8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b1ac:	429a      	cmp	r2, r3
    b1ae:	d3e3      	bcc.n	b178 <Can_43_FLEXCAN_Ipw_Init+0x138>
                break;
    b1b0:	e032      	b.n	b218 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b1b2:	9b01      	ldr	r3, [sp, #4]
    b1b4:	785b      	ldrb	r3, [r3, #1]
    b1b6:	461c      	mov	r4, r3
    b1b8:	9b02      	ldr	r3, [sp, #8]
    b1ba:	7f1b      	ldrb	r3, [r3, #28]
    b1bc:	4618      	mov	r0, r3
    b1be:	9b02      	ldr	r3, [sp, #8]
    b1c0:	8819      	ldrh	r1, [r3, #0]
    b1c2:	4a24      	ldr	r2, [pc, #144]	; (b254 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b1c4:	0163      	lsls	r3, r4, #5
    b1c6:	4403      	add	r3, r0
    b1c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    b1cc:	e024      	b.n	b218 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b1ce:	9b01      	ldr	r3, [sp, #4]
    b1d0:	785b      	ldrb	r3, [r3, #1]
    b1d2:	461c      	mov	r4, r3
    b1d4:	9b02      	ldr	r3, [sp, #8]
    b1d6:	7f1b      	ldrb	r3, [r3, #28]
    b1d8:	4618      	mov	r0, r3
    b1da:	9b02      	ldr	r3, [sp, #8]
    b1dc:	8819      	ldrh	r1, [r3, #0]
    b1de:	4a1d      	ldr	r2, [pc, #116]	; (b254 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b1e0:	0163      	lsls	r3, r4, #5
    b1e2:	4403      	add	r3, r0
    b1e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    b1e8:	9b01      	ldr	r3, [sp, #4]
    b1ea:	785b      	ldrb	r3, [r3, #1]
    b1ec:	4618      	mov	r0, r3
    b1ee:	9b02      	ldr	r3, [sp, #8]
    b1f0:	8819      	ldrh	r1, [r3, #0]
    b1f2:	4a18      	ldr	r2, [pc, #96]	; (b254 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b1f4:	0183      	lsls	r3, r0, #6
    b1f6:	4413      	add	r3, r2
    b1f8:	330c      	adds	r3, #12
    b1fa:	460a      	mov	r2, r1
    b1fc:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    b1fe:	9b01      	ldr	r3, [sp, #4]
    b200:	785b      	ldrb	r3, [r3, #1]
    b202:	4618      	mov	r0, r3
    b204:	9b02      	ldr	r3, [sp, #8]
    b206:	8819      	ldrh	r1, [r3, #0]
    b208:	4a12      	ldr	r2, [pc, #72]	; (b254 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b20a:	0183      	lsls	r3, r0, #6
    b20c:	4413      	add	r3, r2
    b20e:	330e      	adds	r3, #14
    b210:	460a      	mov	r2, r1
    b212:	801a      	strh	r2, [r3, #0]
                break;
    b214:	e000      	b.n	b218 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                break;
    b216:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b218:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b21c:	3301      	adds	r3, #1
    b21e:	f88d 300f 	strb.w	r3, [sp, #15]
    b222:	9b01      	ldr	r3, [sp, #4]
    b224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b228:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b22c:	429a      	cmp	r2, r3
    b22e:	d38c      	bcc.n	b14a <Can_43_FLEXCAN_Ipw_Init+0x10a>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b230:	9b01      	ldr	r3, [sp, #4]
    b232:	789b      	ldrb	r3, [r3, #2]
    b234:	4618      	mov	r0, r3
    b236:	f002 fca5 	bl	db84 <FlexCAN_Ip_SetStopMode_Privileged>
    b23a:	4603      	mov	r3, r0
    b23c:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b240:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    b244:	4618      	mov	r0, r3
    b246:	b004      	add	sp, #16
    b248:	bd10      	pop	{r4, pc}
    b24a:	bf00      	nop
    b24c:	0001859c 	.word	0x0001859c
    b250:	1fff9358 	.word	0x1fff9358
    b254:	1fff92d8 	.word	0x1fff92d8

0000b258 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b258:	b500      	push	{lr}
    b25a:	b083      	sub	sp, #12
    b25c:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    b25e:	9b01      	ldr	r3, [sp, #4]
    b260:	789b      	ldrb	r3, [r3, #2]
    b262:	4618      	mov	r0, r3
    b264:	f002 fafa 	bl	d85c <FlexCAN_Ip_Deinit_Privileged>
}
    b268:	bf00      	nop
    b26a:	b003      	add	sp, #12
    b26c:	f85d fb04 	ldr.w	pc, [sp], #4

0000b270 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b270:	b500      	push	{lr}
    b272:	b085      	sub	sp, #20
    b274:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    b276:	2300      	movs	r3, #0
    b278:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b27a:	9b01      	ldr	r3, [sp, #4]
    b27c:	785b      	ldrb	r3, [r3, #1]
    b27e:	461a      	mov	r2, r3
    b280:	4b11      	ldr	r3, [pc, #68]	; (b2c8 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    b282:	5c9b      	ldrb	r3, [r3, r2]
    b284:	2b00      	cmp	r3, #0
    b286:	d012      	beq.n	b2ae <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b288:	9b01      	ldr	r3, [sp, #4]
    b28a:	7a5b      	ldrb	r3, [r3, #9]
    b28c:	f083 0301 	eor.w	r3, r3, #1
    b290:	b2db      	uxtb	r3, r3
    b292:	2b00      	cmp	r3, #0
    b294:	d006      	beq.n	b2a4 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b296:	9b01      	ldr	r3, [sp, #4]
    b298:	789b      	ldrb	r3, [r3, #2]
    b29a:	2201      	movs	r2, #1
    b29c:	2104      	movs	r1, #4
    b29e:	4618      	mov	r0, r3
    b2a0:	f002 ff4c 	bl	e13c <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b2a4:	9b01      	ldr	r3, [sp, #4]
    b2a6:	789b      	ldrb	r3, [r3, #2]
    b2a8:	4618      	mov	r0, r3
    b2aa:	f002 feed 	bl	e088 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b2ae:	9b01      	ldr	r3, [sp, #4]
    b2b0:	789b      	ldrb	r3, [r3, #2]
    b2b2:	4618      	mov	r0, r3
    b2b4:	f002 fc46 	bl	db44 <FlexCAN_Ip_SetStartMode_Privileged>
    b2b8:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b2ba:	9b03      	ldr	r3, [sp, #12]
    b2bc:	b2db      	uxtb	r3, r3
}
    b2be:	4618      	mov	r0, r3
    b2c0:	b005      	add	sp, #20
    b2c2:	f85d fb04 	ldr.w	pc, [sp], #4
    b2c6:	bf00      	nop
    b2c8:	1fff9358 	.word	0x1fff9358

0000b2cc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b2cc:	b500      	push	{lr}
    b2ce:	b087      	sub	sp, #28
    b2d0:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    b2d2:	2300      	movs	r3, #0
    b2d4:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    b2d8:	2300      	movs	r3, #0
    b2da:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    b2dc:	9b01      	ldr	r3, [sp, #4]
    b2de:	7898      	ldrb	r0, [r3, #2]
    b2e0:	9b01      	ldr	r3, [sp, #4]
    b2e2:	785b      	ldrb	r3, [r3, #1]
    b2e4:	461a      	mov	r2, r3
    b2e6:	4b31      	ldr	r3, [pc, #196]	; (b3ac <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xe0>)
    b2e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    b2ec:	9b01      	ldr	r3, [sp, #4]
    b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b2f0:	681b      	ldr	r3, [r3, #0]
    b2f2:	461a      	mov	r2, r3
    b2f4:	f001 fbc2 	bl	ca7c <FlexCAN_Ip_Init_Privileged>
    b2f8:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b2fa:	9b04      	ldr	r3, [sp, #16]
    b2fc:	2b00      	cmp	r3, #0
    b2fe:	d14f      	bne.n	b3a0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd4>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b300:	9b01      	ldr	r3, [sp, #4]
    b302:	789b      	ldrb	r3, [r3, #2]
    b304:	4618      	mov	r0, r3
    b306:	f002 feed 	bl	e0e4 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    b30a:	9801      	ldr	r0, [sp, #4]
    b30c:	f7ff fd72 	bl	adf4 <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b310:	9801      	ldr	r0, [sp, #4]
    b312:	f000 fa07 	bl	b724 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b316:	2300      	movs	r3, #0
    b318:	f88d 3017 	strb.w	r3, [sp, #23]
    b31c:	e02f      	b.n	b37e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xb2>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b31e:	9b01      	ldr	r3, [sp, #4]
    b320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b322:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b326:	009b      	lsls	r3, r3, #2
    b328:	4413      	add	r3, r2
    b32a:	681b      	ldr	r3, [r3, #0]
    b32c:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    b32e:	9b03      	ldr	r3, [sp, #12]
    b330:	7b1b      	ldrb	r3, [r3, #12]
    b332:	f083 0301 	eor.w	r3, r3, #1
    b336:	b2db      	uxtb	r3, r3
    b338:	2b00      	cmp	r3, #0
    b33a:	d018      	beq.n	b36e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa2>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    b33c:	9b03      	ldr	r3, [sp, #12]
    b33e:	699b      	ldr	r3, [r3, #24]
    b340:	2b00      	cmp	r3, #0
    b342:	d003      	beq.n	b34c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x80>
    b344:	3b01      	subs	r3, #1
    b346:	2b01      	cmp	r3, #1
    b348:	d813      	bhi.n	b372 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa6>
    b34a:	e009      	b.n	b360 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x94>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    b34c:	9b01      	ldr	r3, [sp, #4]
    b34e:	7898      	ldrb	r0, [r3, #2]
    b350:	9b03      	ldr	r3, [sp, #12]
    b352:	7f19      	ldrb	r1, [r3, #28]
    b354:	9b03      	ldr	r3, [sp, #12]
    b356:	7b1b      	ldrb	r3, [r3, #12]
    b358:	2200      	movs	r2, #0
    b35a:	f001 fc9b 	bl	cc94 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    b35e:	e009      	b.n	b374 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    b360:	9b01      	ldr	r3, [sp, #4]
    b362:	789b      	ldrb	r3, [r3, #2]
    b364:	2100      	movs	r1, #0
    b366:	4618      	mov	r0, r3
    b368:	f001 fd92 	bl	ce90 <FlexCAN_Ip_RxFifo>
                        }
                        break;
    b36c:	e002      	b.n	b374 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    b36e:	bf00      	nop
    b370:	e000      	b.n	b374 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                        break;
    b372:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b374:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b378:	3301      	adds	r3, #1
    b37a:	f88d 3017 	strb.w	r3, [sp, #23]
    b37e:	9b01      	ldr	r3, [sp, #4]
    b380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b384:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b388:	429a      	cmp	r2, r3
    b38a:	d3c8      	bcc.n	b31e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x52>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    b38c:	9801      	ldr	r0, [sp, #4]
    b38e:	f7ff ff6f 	bl	b270 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    b392:	4603      	mov	r3, r0
    b394:	2b00      	cmp	r3, #0
    b396:	bf14      	ite	ne
    b398:	2301      	movne	r3, #1
    b39a:	2300      	moveq	r3, #0
    b39c:	b2db      	uxtb	r3, r3
    b39e:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    b3a0:	9b04      	ldr	r3, [sp, #16]
    b3a2:	b2db      	uxtb	r3, r3
}
    b3a4:	4618      	mov	r0, r3
    b3a6:	b007      	add	sp, #28
    b3a8:	f85d fb04 	ldr.w	pc, [sp], #4
    b3ac:	0001859c 	.word	0x0001859c

0000b3b0 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b3b0:	b500      	push	{lr}
    b3b2:	b085      	sub	sp, #20
    b3b4:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    b3b6:	2300      	movs	r3, #0
    b3b8:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    b3bc:	2300      	movs	r3, #0
    b3be:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b3c2:	9b01      	ldr	r3, [sp, #4]
    b3c4:	789b      	ldrb	r3, [r3, #2]
    b3c6:	4618      	mov	r0, r3
    b3c8:	f002 f986 	bl	d6d8 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    b3cc:	4603      	mov	r3, r0
    b3ce:	2b00      	cmp	r3, #0
    b3d0:	d160      	bne.n	b494 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b3d2:	9b01      	ldr	r3, [sp, #4]
    b3d4:	785b      	ldrb	r3, [r3, #1]
    b3d6:	461a      	mov	r2, r3
    b3d8:	4b33      	ldr	r3, [pc, #204]	; (b4a8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    b3da:	5c9b      	ldrb	r3, [r3, r2]
    b3dc:	2b00      	cmp	r3, #0
    b3de:	d012      	beq.n	b406 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b3e0:	9b01      	ldr	r3, [sp, #4]
    b3e2:	789b      	ldrb	r3, [r3, #2]
    b3e4:	4618      	mov	r0, r3
    b3e6:	f002 fe7d 	bl	e0e4 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b3ea:	9b01      	ldr	r3, [sp, #4]
    b3ec:	7a5b      	ldrb	r3, [r3, #9]
    b3ee:	f083 0301 	eor.w	r3, r3, #1
    b3f2:	b2db      	uxtb	r3, r3
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	d006      	beq.n	b406 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b3f8:	9b01      	ldr	r3, [sp, #4]
    b3fa:	789b      	ldrb	r3, [r3, #2]
    b3fc:	2200      	movs	r2, #0
    b3fe:	2104      	movs	r1, #4
    b400:	4618      	mov	r0, r3
    b402:	f002 fe9b 	bl	e13c <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b406:	2300      	movs	r3, #0
    b408:	f88d 300e 	strb.w	r3, [sp, #14]
    b40c:	e032      	b.n	b474 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b40e:	9b01      	ldr	r3, [sp, #4]
    b410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b412:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b416:	009b      	lsls	r3, r3, #2
    b418:	4413      	add	r3, r2
    b41a:	681b      	ldr	r3, [r3, #0]
    b41c:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b41e:	9b02      	ldr	r3, [sp, #8]
    b420:	699b      	ldr	r3, [r3, #24]
    b422:	2b03      	cmp	r3, #3
    b424:	d119      	bne.n	b45a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    b426:	2300      	movs	r3, #0
    b428:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    b42c:	9b01      	ldr	r3, [sp, #4]
    b42e:	7898      	ldrb	r0, [r3, #2]
    b430:	9b02      	ldr	r3, [sp, #8]
    b432:	7f1a      	ldrb	r2, [r3, #28]
    b434:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b438:	4413      	add	r3, r2
    b43a:	b2db      	uxtb	r3, r3
    b43c:	4619      	mov	r1, r3
    b43e:	f002 ff03 	bl	e248 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    b442:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b446:	3301      	adds	r3, #1
    b448:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    b44c:	9b02      	ldr	r3, [sp, #8]
    b44e:	7b9b      	ldrb	r3, [r3, #14]
    b450:	f89d 200d 	ldrb.w	r2, [sp, #13]
    b454:	429a      	cmp	r2, r3
    b456:	d3e9      	bcc.n	b42c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    b458:	e007      	b.n	b46a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    b45a:	9b01      	ldr	r3, [sp, #4]
    b45c:	789a      	ldrb	r2, [r3, #2]
    b45e:	9b02      	ldr	r3, [sp, #8]
    b460:	7f1b      	ldrb	r3, [r3, #28]
    b462:	4619      	mov	r1, r3
    b464:	4610      	mov	r0, r2
    b466:	f002 feef 	bl	e248 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b46a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b46e:	3301      	adds	r3, #1
    b470:	f88d 300e 	strb.w	r3, [sp, #14]
    b474:	9b01      	ldr	r3, [sp, #4]
    b476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b47a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b47e:	429a      	cmp	r2, r3
    b480:	d3c5      	bcc.n	b40e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b482:	9b01      	ldr	r3, [sp, #4]
    b484:	789b      	ldrb	r3, [r3, #2]
    b486:	4618      	mov	r0, r3
    b488:	f002 fb7c 	bl	db84 <FlexCAN_Ip_SetStopMode_Privileged>
    b48c:	4603      	mov	r3, r0
    b48e:	f88d 300f 	strb.w	r3, [sp, #15]
    b492:	e002      	b.n	b49a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    b494:	2301      	movs	r3, #1
    b496:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    b49a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b49e:	4618      	mov	r0, r3
    b4a0:	b005      	add	sp, #20
    b4a2:	f85d fb04 	ldr.w	pc, [sp], #4
    b4a6:	bf00      	nop
    b4a8:	1fff9358 	.word	0x1fff9358

0000b4ac <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b4ac:	b500      	push	{lr}
    b4ae:	b083      	sub	sp, #12
    b4b0:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b4b2:	9b01      	ldr	r3, [sp, #4]
    b4b4:	785b      	ldrb	r3, [r3, #1]
    b4b6:	461a      	mov	r2, r3
    b4b8:	4b10      	ldr	r3, [pc, #64]	; (b4fc <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b4ba:	5c9b      	ldrb	r3, [r3, r2]
    b4bc:	2b00      	cmp	r3, #0
    b4be:	d018      	beq.n	b4f2 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b4c0:	9b01      	ldr	r3, [sp, #4]
    b4c2:	789b      	ldrb	r3, [r3, #2]
    b4c4:	4618      	mov	r0, r3
    b4c6:	f002 fe0d 	bl	e0e4 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    b4ca:	9b01      	ldr	r3, [sp, #4]
    b4cc:	785b      	ldrb	r3, [r3, #1]
    b4ce:	461a      	mov	r2, r3
    b4d0:	4b0a      	ldr	r3, [pc, #40]	; (b4fc <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b4d2:	2100      	movs	r1, #0
    b4d4:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b4d6:	9b01      	ldr	r3, [sp, #4]
    b4d8:	7a5b      	ldrb	r3, [r3, #9]
    b4da:	f083 0301 	eor.w	r3, r3, #1
    b4de:	b2db      	uxtb	r3, r3
    b4e0:	2b00      	cmp	r3, #0
    b4e2:	d006      	beq.n	b4f2 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b4e4:	9b01      	ldr	r3, [sp, #4]
    b4e6:	789b      	ldrb	r3, [r3, #2]
    b4e8:	2200      	movs	r2, #0
    b4ea:	2104      	movs	r1, #4
    b4ec:	4618      	mov	r0, r3
    b4ee:	f002 fe25 	bl	e13c <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    b4f2:	bf00      	nop
    b4f4:	b003      	add	sp, #12
    b4f6:	f85d fb04 	ldr.w	pc, [sp], #4
    b4fa:	bf00      	nop
    b4fc:	1fff9358 	.word	0x1fff9358

0000b500 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b500:	b500      	push	{lr}
    b502:	b083      	sub	sp, #12
    b504:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b506:	9b01      	ldr	r3, [sp, #4]
    b508:	785b      	ldrb	r3, [r3, #1]
    b50a:	461a      	mov	r2, r3
    b50c:	4b11      	ldr	r3, [pc, #68]	; (b554 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b50e:	5c9b      	ldrb	r3, [r3, r2]
    b510:	f083 0301 	eor.w	r3, r3, #1
    b514:	b2db      	uxtb	r3, r3
    b516:	2b00      	cmp	r3, #0
    b518:	d018      	beq.n	b54c <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b51a:	9b01      	ldr	r3, [sp, #4]
    b51c:	789b      	ldrb	r3, [r3, #2]
    b51e:	4618      	mov	r0, r3
    b520:	f002 fdb2 	bl	e088 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b524:	9b01      	ldr	r3, [sp, #4]
    b526:	7a5b      	ldrb	r3, [r3, #9]
    b528:	f083 0301 	eor.w	r3, r3, #1
    b52c:	b2db      	uxtb	r3, r3
    b52e:	2b00      	cmp	r3, #0
    b530:	d006      	beq.n	b540 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b532:	9b01      	ldr	r3, [sp, #4]
    b534:	789b      	ldrb	r3, [r3, #2]
    b536:	2201      	movs	r2, #1
    b538:	2104      	movs	r1, #4
    b53a:	4618      	mov	r0, r3
    b53c:	f002 fdfe 	bl	e13c <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    b540:	9b01      	ldr	r3, [sp, #4]
    b542:	785b      	ldrb	r3, [r3, #1]
    b544:	461a      	mov	r2, r3
    b546:	4b03      	ldr	r3, [pc, #12]	; (b554 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b548:	2101      	movs	r1, #1
    b54a:	5499      	strb	r1, [r3, r2]
    }
}
    b54c:	bf00      	nop
    b54e:	b003      	add	sp, #12
    b550:	f85d fb04 	ldr.w	pc, [sp], #4
    b554:	1fff9358 	.word	0x1fff9358

0000b558 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b558:	b500      	push	{lr}
    b55a:	b085      	sub	sp, #20
    b55c:	9001      	str	r0, [sp, #4]
    b55e:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    b560:	2300      	movs	r3, #0
    b562:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    b564:	9b01      	ldr	r3, [sp, #4]
    b566:	789b      	ldrb	r3, [r3, #2]
    b568:	4618      	mov	r0, r3
    b56a:	f001 fe81 	bl	d270 <FlexCAN_Ip_GetErrorStatus>
    b56e:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    b570:	9b03      	ldr	r3, [sp, #12]
    b572:	091b      	lsrs	r3, r3, #4
    b574:	b2db      	uxtb	r3, r3
    b576:	f003 0303 	and.w	r3, r3, #3
    b57a:	b2da      	uxtb	r2, r3
    b57c:	9b00      	ldr	r3, [sp, #0]
    b57e:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b580:	2300      	movs	r3, #0
}
    b582:	4618      	mov	r0, r3
    b584:	b005      	add	sp, #20
    b586:	f85d fb04 	ldr.w	pc, [sp], #4

0000b58a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b58a:	b500      	push	{lr}
    b58c:	b083      	sub	sp, #12
    b58e:	9001      	str	r0, [sp, #4]
    b590:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b592:	9b01      	ldr	r3, [sp, #4]
    b594:	789b      	ldrb	r3, [r3, #2]
    b596:	4618      	mov	r0, r3
    b598:	f001 fe7c 	bl	d294 <FlexCAN_Ip_GetControllerTxErrorCounter>
    b59c:	4603      	mov	r3, r0
    b59e:	461a      	mov	r2, r3
    b5a0:	9b00      	ldr	r3, [sp, #0]
    b5a2:	701a      	strb	r2, [r3, #0]
     return E_OK;
    b5a4:	2300      	movs	r3, #0
}
    b5a6:	4618      	mov	r0, r3
    b5a8:	b003      	add	sp, #12
    b5aa:	f85d fb04 	ldr.w	pc, [sp], #4

0000b5ae <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b5ae:	b500      	push	{lr}
    b5b0:	b083      	sub	sp, #12
    b5b2:	9001      	str	r0, [sp, #4]
    b5b4:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b5b6:	9b01      	ldr	r3, [sp, #4]
    b5b8:	789b      	ldrb	r3, [r3, #2]
    b5ba:	4618      	mov	r0, r3
    b5bc:	f001 fe7c 	bl	d2b8 <FlexCAN_Ip_GetControllerRxErrorCounter>
    b5c0:	4603      	mov	r3, r0
    b5c2:	461a      	mov	r2, r3
    b5c4:	9b00      	ldr	r3, [sp, #0]
    b5c6:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b5c8:	2300      	movs	r3, #0
}
    b5ca:	4618      	mov	r0, r3
    b5cc:	b003      	add	sp, #12
    b5ce:	f85d fb04 	ldr.w	pc, [sp], #4

0000b5d2 <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    b5d2:	b510      	push	{r4, lr}
    b5d4:	b08c      	sub	sp, #48	; 0x30
    b5d6:	9005      	str	r0, [sp, #20]
    b5d8:	9104      	str	r1, [sp, #16]
    b5da:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    b5dc:	2301      	movs	r3, #1
    b5de:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    b5e0:	2300      	movs	r3, #0
    b5e2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b5e6:	2300      	movs	r3, #0
    b5e8:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    b5ea:	2300      	movs	r3, #0
    b5ec:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    b5ee:	2300      	movs	r3, #0
    b5f0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    b5f4:	2300      	movs	r3, #0
    b5f6:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    b5fa:	2300      	movs	r3, #0
    b5fc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    b600:	2300      	movs	r3, #0
    b602:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    b606:	2300      	movs	r3, #0
    b608:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    b60c:	9b04      	ldr	r3, [sp, #16]
    b60e:	699b      	ldr	r3, [r3, #24]
    b610:	2b03      	cmp	r3, #3
    b612:	d173      	bne.n	b6fc <Can_43_FLEXCAN_Ipw_Write+0x12a>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    b614:	9b03      	ldr	r3, [sp, #12]
    b616:	681b      	ldr	r3, [r3, #0]
    b618:	0fdb      	lsrs	r3, r3, #31
    b61a:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    b61c:	9b04      	ldr	r3, [sp, #16]
    b61e:	7c1a      	ldrb	r2, [r3, #16]
    b620:	9b03      	ldr	r3, [sp, #12]
    b622:	799b      	ldrb	r3, [r3, #6]
    b624:	429a      	cmp	r2, r3
    b626:	d803      	bhi.n	b630 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    b628:	9b04      	ldr	r3, [sp, #16]
    b62a:	7c1b      	ldrb	r3, [r3, #16]
    b62c:	9307      	str	r3, [sp, #28]
    b62e:	e002      	b.n	b636 <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    b630:	9b03      	ldr	r3, [sp, #12]
    b632:	799b      	ldrb	r3, [r3, #6]
    b634:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    b636:	9b04      	ldr	r3, [sp, #16]
    b638:	7c5b      	ldrb	r3, [r3, #17]
    b63a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    b63e:	9b03      	ldr	r3, [sp, #12]
    b640:	681b      	ldr	r3, [r3, #0]
    b642:	0f9b      	lsrs	r3, r3, #30
    b644:	f003 0301 	and.w	r3, r3, #1
    b648:	2b00      	cmp	r3, #0
    b64a:	bf14      	ite	ne
    b64c:	2301      	movne	r3, #1
    b64e:	2300      	moveq	r3, #0
    b650:	b2db      	uxtb	r3, r3
    b652:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    b656:	9b05      	ldr	r3, [sp, #20]
    b658:	6a1a      	ldr	r2, [r3, #32]
    b65a:	9b05      	ldr	r3, [sp, #20]
    b65c:	8b9b      	ldrh	r3, [r3, #28]
    b65e:	4619      	mov	r1, r3
    b660:	2316      	movs	r3, #22
    b662:	fb01 f303 	mul.w	r3, r1, r3
    b666:	4413      	add	r3, r2
    b668:	781b      	ldrb	r3, [r3, #0]
    b66a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #endif
#endif
        DataInfo.is_remote = FALSE;
    b66e:	2300      	movs	r3, #0
    b670:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    b674:	9b04      	ldr	r3, [sp, #16]
    b676:	7b1b      	ldrb	r3, [r3, #12]
    b678:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    b67c:	9b05      	ldr	r3, [sp, #20]
    b67e:	7898      	ldrb	r0, [r3, #2]
    b680:	9b04      	ldr	r3, [sp, #16]
    b682:	7f1a      	ldrb	r2, [r3, #28]
    b684:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b688:	4413      	add	r3, r2
    b68a:	b2db      	uxtb	r3, r3
    b68c:	4619      	mov	r1, r3
    b68e:	f001 fcdd 	bl	d04c <FlexCAN_Ip_GetTransferStatus>
    b692:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b696:	2b00      	cmp	r3, #0
    b698:	d122      	bne.n	b6e0 <Can_43_FLEXCAN_Ipw_Write+0x10e>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    b69a:	9b05      	ldr	r3, [sp, #20]
    b69c:	785b      	ldrb	r3, [r3, #1]
    b69e:	461c      	mov	r4, r3
    b6a0:	9b04      	ldr	r3, [sp, #16]
    b6a2:	7f1b      	ldrb	r3, [r3, #28]
    b6a4:	461a      	mov	r2, r3
    b6a6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b6aa:	4413      	add	r3, r2
    b6ac:	9a03      	ldr	r2, [sp, #12]
    b6ae:	8890      	ldrh	r0, [r2, #4]
    b6b0:	491b      	ldr	r1, [pc, #108]	; (b720 <Can_43_FLEXCAN_Ipw_Write+0x14e>)
    b6b2:	0162      	lsls	r2, r4, #5
    b6b4:	4413      	add	r3, r2
    b6b6:	4602      	mov	r2, r0
    b6b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    b6bc:	9b05      	ldr	r3, [sp, #20]
    b6be:	7898      	ldrb	r0, [r3, #2]
    b6c0:	9b04      	ldr	r3, [sp, #16]
    b6c2:	7f1a      	ldrb	r2, [r3, #28]
    b6c4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b6c8:	4413      	add	r3, r2
    b6ca:	b2d9      	uxtb	r1, r3
    b6cc:	9b03      	ldr	r3, [sp, #12]
    b6ce:	681c      	ldr	r4, [r3, #0]
    b6d0:	9b03      	ldr	r3, [sp, #12]
    b6d2:	689b      	ldr	r3, [r3, #8]
    b6d4:	aa06      	add	r2, sp, #24
    b6d6:	9300      	str	r3, [sp, #0]
    b6d8:	4623      	mov	r3, r4
    b6da:	f001 fa4b 	bl	cb74 <FlexCAN_Ip_Send>
    b6de:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    b6e0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b6e4:	3301      	adds	r3, #1
    b6e6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    b6ea:	9b04      	ldr	r3, [sp, #16]
    b6ec:	7b9b      	ldrb	r3, [r3, #14]
    b6ee:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    b6f2:	429a      	cmp	r2, r3
    b6f4:	d202      	bcs.n	b6fc <Can_43_FLEXCAN_Ipw_Write+0x12a>
    b6f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6f8:	2b02      	cmp	r3, #2
    b6fa:	d0bf      	beq.n	b67c <Can_43_FLEXCAN_Ipw_Write+0xaa>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    b6fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6fe:	2b00      	cmp	r3, #0
    b700:	d004      	beq.n	b70c <Can_43_FLEXCAN_Ipw_Write+0x13a>
    b702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b704:	2b02      	cmp	r3, #2
    b706:	d001      	beq.n	b70c <Can_43_FLEXCAN_Ipw_Write+0x13a>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    b708:	2301      	movs	r3, #1
    b70a:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    b70c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b70e:	2b02      	cmp	r3, #2
    b710:	d002      	beq.n	b718 <Can_43_FLEXCAN_Ipw_Write+0x146>
    b712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b714:	b2db      	uxtb	r3, r3
    b716:	e000      	b.n	b71a <Can_43_FLEXCAN_Ipw_Write+0x148>
    b718:	2302      	movs	r3, #2
}
    b71a:	4618      	mov	r0, r3
    b71c:	b00c      	add	sp, #48	; 0x30
    b71e:	bd10      	pop	{r4, pc}
    b720:	1fff9258 	.word	0x1fff9258

0000b724 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    b724:	b500      	push	{lr}
    b726:	b089      	sub	sp, #36	; 0x24
    b728:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    b72a:	2300      	movs	r3, #0
    b72c:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    b730:	9b01      	ldr	r3, [sp, #4]
    b732:	789b      	ldrb	r3, [r3, #2]
    b734:	2101      	movs	r1, #1
    b736:	4618      	mov	r0, r3
    b738:	f002 fa42 	bl	dbc0 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b73c:	2300      	movs	r3, #0
    b73e:	f88d 301f 	strb.w	r3, [sp, #31]
    b742:	e03a      	b.n	b7ba <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    b744:	9b01      	ldr	r3, [sp, #4]
    b746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b748:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b74c:	009b      	lsls	r3, r3, #2
    b74e:	4413      	add	r3, r2
    b750:	681b      	ldr	r3, [r3, #0]
    b752:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b754:	9b06      	ldr	r3, [sp, #24]
    b756:	699b      	ldr	r3, [r3, #24]
    b758:	2b00      	cmp	r3, #0
    b75a:	d121      	bne.n	b7a0 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    b75c:	2300      	movs	r3, #0
    b75e:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    b762:	2300      	movs	r3, #0
    b764:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    b766:	9b06      	ldr	r3, [sp, #24]
    b768:	689b      	ldr	r3, [r3, #8]
    b76a:	2b00      	cmp	r3, #0
    b76c:	d002      	beq.n	b774 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    b76e:	2301      	movs	r3, #1
    b770:	9302      	str	r3, [sp, #8]
    b772:	e001      	b.n	b778 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b774:	2300      	movs	r3, #0
    b776:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    b778:	9b01      	ldr	r3, [sp, #4]
    b77a:	7898      	ldrb	r0, [r3, #2]
    b77c:	9b06      	ldr	r3, [sp, #24]
    b77e:	7f19      	ldrb	r1, [r3, #28]
    b780:	9b06      	ldr	r3, [sp, #24]
    b782:	695b      	ldr	r3, [r3, #20]
    b784:	681b      	ldr	r3, [r3, #0]
    b786:	aa02      	add	r2, sp, #8
    b788:	f001 fa40 	bl	cc0c <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    b78c:	9b01      	ldr	r3, [sp, #4]
    b78e:	7898      	ldrb	r0, [r3, #2]
    b790:	9b06      	ldr	r3, [sp, #24]
    b792:	7f19      	ldrb	r1, [r3, #28]
    b794:	9b06      	ldr	r3, [sp, #24]
    b796:	695b      	ldr	r3, [r3, #20]
    b798:	685b      	ldr	r3, [r3, #4]
    b79a:	461a      	mov	r2, r3
    b79c:	f001 ffc8 	bl	d730 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    b7a0:	9b06      	ldr	r3, [sp, #24]
    b7a2:	699b      	ldr	r3, [r3, #24]
    b7a4:	2b01      	cmp	r3, #1
    b7a6:	d103      	bne.n	b7b0 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    b7a8:	9906      	ldr	r1, [sp, #24]
    b7aa:	9801      	ldr	r0, [sp, #4]
    b7ac:	f7ff f8ff 	bl	a9ae <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b7b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b7b4:	3301      	adds	r3, #1
    b7b6:	f88d 301f 	strb.w	r3, [sp, #31]
    b7ba:	9b01      	ldr	r3, [sp, #4]
    b7bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b7c0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b7c4:	429a      	cmp	r2, r3
    b7c6:	d3bd      	bcc.n	b744 <Can_Ipw_InitRx+0x20>
        }
    }
}
    b7c8:	bf00      	nop
    b7ca:	bf00      	nop
    b7cc:	b009      	add	sp, #36	; 0x24
    b7ce:	f85d fb04 	ldr.w	pc, [sp], #4

0000b7d2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    b7d2:	b500      	push	{lr}
    b7d4:	b083      	sub	sp, #12
    b7d6:	9001      	str	r0, [sp, #4]
    b7d8:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    b7da:	9b00      	ldr	r3, [sp, #0]
    b7dc:	681b      	ldr	r3, [r3, #0]
    b7de:	2b01      	cmp	r3, #1
    b7e0:	d114      	bne.n	b80c <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b7e2:	9b01      	ldr	r3, [sp, #4]
    b7e4:	789b      	ldrb	r3, [r3, #2]
    b7e6:	4618      	mov	r0, r3
    b7e8:	f002 f994 	bl	db14 <FlexCAN_Ip_GetStartMode_Privileged>
    b7ec:	4603      	mov	r3, r0
    b7ee:	f083 0301 	eor.w	r3, r3, #1
    b7f2:	b2db      	uxtb	r3, r3
    b7f4:	2b00      	cmp	r3, #0
    b7f6:	d01e      	beq.n	b836 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    b7f8:	9b00      	ldr	r3, [sp, #0]
    b7fa:	2202      	movs	r2, #2
    b7fc:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    b7fe:	9b01      	ldr	r3, [sp, #4]
    b800:	781b      	ldrb	r3, [r3, #0]
    b802:	2102      	movs	r1, #2
    b804:	4618      	mov	r0, r3
    b806:	f00b fc61 	bl	170cc <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    b80a:	e014      	b.n	b836 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    b80c:	9b00      	ldr	r3, [sp, #0]
    b80e:	681b      	ldr	r3, [r3, #0]
    b810:	2b02      	cmp	r3, #2
    b812:	d110      	bne.n	b836 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b814:	9b01      	ldr	r3, [sp, #4]
    b816:	789b      	ldrb	r3, [r3, #2]
    b818:	4618      	mov	r0, r3
    b81a:	f002 f97b 	bl	db14 <FlexCAN_Ip_GetStartMode_Privileged>
    b81e:	4603      	mov	r3, r0
    b820:	2b00      	cmp	r3, #0
    b822:	d008      	beq.n	b836 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    b824:	9b00      	ldr	r3, [sp, #0]
    b826:	2201      	movs	r2, #1
    b828:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    b82a:	9b01      	ldr	r3, [sp, #4]
    b82c:	781b      	ldrb	r3, [r3, #0]
    b82e:	2101      	movs	r1, #1
    b830:	4618      	mov	r0, r3
    b832:	f00b fc4b 	bl	170cc <CanIf_ControllerModeIndication>
}
    b836:	bf00      	nop
    b838:	b003      	add	sp, #12
    b83a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b83e <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    b83e:	b500      	push	{lr}
    b840:	b085      	sub	sp, #20
    b842:	9003      	str	r0, [sp, #12]
    b844:	9102      	str	r1, [sp, #8]
    b846:	9300      	str	r3, [sp, #0]
    b848:	4613      	mov	r3, r2
    b84a:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    b84e:	9b00      	ldr	r3, [sp, #0]
    b850:	2b03      	cmp	r3, #3
    b852:	d009      	beq.n	b868 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    b854:	9b00      	ldr	r3, [sp, #0]
    b856:	2b03      	cmp	r3, #3
    b858:	d821      	bhi.n	b89e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    b85a:	9b00      	ldr	r3, [sp, #0]
    b85c:	2b00      	cmp	r3, #0
    b85e:	d00c      	beq.n	b87a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    b860:	9b00      	ldr	r3, [sp, #0]
    b862:	2b01      	cmp	r3, #1
    b864:	d012      	beq.n	b88c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    b866:	e01a      	b.n	b89e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b868:	9b02      	ldr	r3, [sp, #8]
    b86a:	691b      	ldr	r3, [r3, #16]
    b86c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b870:	4619      	mov	r1, r3
    b872:	9803      	ldr	r0, [sp, #12]
    b874:	f7ff faf8 	bl	ae68 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    b878:	e012      	b.n	b8a0 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b87a:	9b02      	ldr	r3, [sp, #8]
    b87c:	691b      	ldr	r3, [r3, #16]
    b87e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b882:	4619      	mov	r1, r3
    b884:	9803      	ldr	r0, [sp, #12]
    b886:	f7ff fb3b 	bl	af00 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b88a:	e009      	b.n	b8a0 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b88c:	9b02      	ldr	r3, [sp, #8]
    b88e:	691b      	ldr	r3, [r3, #16]
    b890:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b894:	4619      	mov	r1, r3
    b896:	9803      	ldr	r0, [sp, #12]
    b898:	f7ff fb32 	bl	af00 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b89c:	e000      	b.n	b8a0 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    b89e:	bf00      	nop
            }
        }
    }
    b8a0:	bf00      	nop
    b8a2:	b005      	add	sp, #20
    b8a4:	f85d fb04 	ldr.w	pc, [sp], #4

0000b8a8 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    b8a8:	b500      	push	{lr}
    b8aa:	b085      	sub	sp, #20
    b8ac:	9102      	str	r1, [sp, #8]
    b8ae:	9201      	str	r2, [sp, #4]
    b8b0:	9300      	str	r3, [sp, #0]
    b8b2:	4603      	mov	r3, r0
    b8b4:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    b8b8:	9a00      	ldr	r2, [sp, #0]
    b8ba:	9b01      	ldr	r3, [sp, #4]
    b8bc:	011b      	lsls	r3, r3, #4
    b8be:	4413      	add	r3, r2
    b8c0:	3308      	adds	r3, #8
    b8c2:	781b      	ldrb	r3, [r3, #0]
    b8c4:	f083 0301 	eor.w	r3, r3, #1
    b8c8:	b2db      	uxtb	r3, r3
    b8ca:	2b00      	cmp	r3, #0
    b8cc:	d03b      	beq.n	b946 <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    b8ce:	9b02      	ldr	r3, [sp, #8]
    b8d0:	2b04      	cmp	r3, #4
    b8d2:	d83a      	bhi.n	b94a <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    b8d4:	a201      	add	r2, pc, #4	; (adr r2, b8dc <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    b8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b8da:	bf00      	nop
    b8dc:	0000b903 	.word	0x0000b903
    b8e0:	0000b915 	.word	0x0000b915
    b8e4:	0000b927 	.word	0x0000b927
    b8e8:	0000b937 	.word	0x0000b937
    b8ec:	0000b8f1 	.word	0x0000b8f1
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    b8f0:	9b01      	ldr	r3, [sp, #4]
    b8f2:	b2d9      	uxtb	r1, r3
    b8f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8f8:	2203      	movs	r2, #3
    b8fa:	4618      	mov	r0, r3
    b8fc:	f7fe ff72 	bl	a7e4 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b900:	e024      	b.n	b94c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    b902:	9b01      	ldr	r3, [sp, #4]
    b904:	b2d9      	uxtb	r1, r3
    b906:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b90a:	2200      	movs	r2, #0
    b90c:	4618      	mov	r0, r3
    b90e:	f7fe ff69 	bl	a7e4 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b912:	e01b      	b.n	b94c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    b914:	9b01      	ldr	r3, [sp, #4]
    b916:	b2d9      	uxtb	r1, r3
    b918:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b91c:	2201      	movs	r2, #1
    b91e:	4618      	mov	r0, r3
    b920:	f7fe ff60 	bl	a7e4 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b924:	e012      	b.n	b94c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    b926:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b92a:	2201      	movs	r2, #1
    b92c:	2106      	movs	r1, #6
    b92e:	4618      	mov	r0, r3
    b930:	f7fe ff58 	bl	a7e4 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b934:	e00a      	b.n	b94c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    b936:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b93a:	2201      	movs	r2, #1
    b93c:	2107      	movs	r1, #7
    b93e:	4618      	mov	r0, r3
    b940:	f7fe ff50 	bl	a7e4 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b944:	e002      	b.n	b94c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    b946:	bf00      	nop
    b948:	e000      	b.n	b94c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    b94a:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    b94c:	bf00      	nop
    b94e:	b005      	add	sp, #20
    b950:	f85d fb04 	ldr.w	pc, [sp], #4

0000b954 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    b954:	b500      	push	{lr}
    b956:	b085      	sub	sp, #20
    b958:	9102      	str	r1, [sp, #8]
    b95a:	9201      	str	r2, [sp, #4]
    b95c:	9300      	str	r3, [sp, #0]
    b95e:	4603      	mov	r3, r0
    b960:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    b964:	9b02      	ldr	r3, [sp, #8]
    b966:	2b07      	cmp	r3, #7
    b968:	d105      	bne.n	b976 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    b96a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b96e:	4618      	mov	r0, r3
    b970:	f7fe ff7a 	bl	a868 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    b974:	e000      	b.n	b978 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    b976:	bf00      	nop
        }
    }
}
    b978:	bf00      	nop
    b97a:	b005      	add	sp, #20
    b97c:	f85d fb04 	ldr.w	pc, [sp], #4

0000b980 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    b980:	b082      	sub	sp, #8
    b982:	9001      	str	r0, [sp, #4]
    b984:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    b986:	9b01      	ldr	r3, [sp, #4]
    b988:	9a00      	ldr	r2, [sp, #0]
    b98a:	649a      	str	r2, [r3, #72]	; 0x48
}
    b98c:	bf00      	nop
    b98e:	b002      	add	sp, #8
    b990:	4770      	bx	lr

0000b992 <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    b992:	b084      	sub	sp, #16
    b994:	9001      	str	r0, [sp, #4]
    b996:	460b      	mov	r3, r1
    b998:	f88d 3003 	strb.w	r3, [sp, #3]
    b99c:	4613      	mov	r3, r2
    b99e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    b9a2:	9b01      	ldr	r3, [sp, #4]
    b9a4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b9a8:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    b9aa:	9b03      	ldr	r3, [sp, #12]
    b9ac:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    b9b0:	9303      	str	r3, [sp, #12]

    if (enable)
    b9b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b9b6:	2b00      	cmp	r3, #0
    b9b8:	d00b      	beq.n	b9d2 <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    b9ba:	9b03      	ldr	r3, [sp, #12]
    b9bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b9c0:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    b9c2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b9c6:	021b      	lsls	r3, r3, #8
    b9c8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    b9cc:	9a03      	ldr	r2, [sp, #12]
    b9ce:	4313      	orrs	r3, r2
    b9d0:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    b9d2:	9b01      	ldr	r3, [sp, #4]
    b9d4:	9a03      	ldr	r2, [sp, #12]
    b9d6:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    b9da:	bf00      	nop
    b9dc:	b004      	add	sp, #16
    b9de:	4770      	bx	lr

0000b9e0 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    b9e0:	b082      	sub	sp, #8
    b9e2:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    b9e4:	9b01      	ldr	r3, [sp, #4]
    b9e6:	681b      	ldr	r3, [r3, #0]
    b9e8:	43db      	mvns	r3, r3
    b9ea:	0fdb      	lsrs	r3, r3, #31
    b9ec:	b2db      	uxtb	r3, r3
}
    b9ee:	4618      	mov	r0, r3
    b9f0:	b002      	add	sp, #8
    b9f2:	4770      	bx	lr

0000b9f4 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    b9f4:	b082      	sub	sp, #8
    b9f6:	9001      	str	r0, [sp, #4]
    b9f8:	460b      	mov	r3, r1
    b9fa:	f88d 3003 	strb.w	r3, [sp, #3]
    b9fe:	4613      	mov	r3, r2
    ba00:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    ba04:	9b01      	ldr	r3, [sp, #4]
    ba06:	681b      	ldr	r3, [r3, #0]
    ba08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    ba0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba10:	2a00      	cmp	r2, #0
    ba12:	d002      	beq.n	ba1a <FlexCAN_SetFDEnabled+0x26>
    ba14:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ba18:	e000      	b.n	ba1c <FlexCAN_SetFDEnabled+0x28>
    ba1a:	2200      	movs	r2, #0
    ba1c:	431a      	orrs	r2, r3
    ba1e:	9b01      	ldr	r3, [sp, #4]
    ba20:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    ba22:	9b01      	ldr	r3, [sp, #4]
    ba24:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ba28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    ba2c:	f89d 2002 	ldrb.w	r2, [sp, #2]
    ba30:	2a00      	cmp	r2, #0
    ba32:	d002      	beq.n	ba3a <FlexCAN_SetFDEnabled+0x46>
    ba34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    ba38:	e000      	b.n	ba3c <FlexCAN_SetFDEnabled+0x48>
    ba3a:	2200      	movs	r2, #0
    ba3c:	431a      	orrs	r2, r3
    ba3e:	9b01      	ldr	r3, [sp, #4]
    ba40:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    ba44:	9b01      	ldr	r3, [sp, #4]
    ba46:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ba4a:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    ba4e:	9b01      	ldr	r3, [sp, #4]
    ba50:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    ba54:	bf00      	nop
    ba56:	b002      	add	sp, #8
    ba58:	4770      	bx	lr

0000ba5a <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    ba5a:	b082      	sub	sp, #8
    ba5c:	9001      	str	r0, [sp, #4]
    ba5e:	460b      	mov	r3, r1
    ba60:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    ba64:	9b01      	ldr	r3, [sp, #4]
    ba66:	685b      	ldr	r3, [r3, #4]
    ba68:	f023 0308 	bic.w	r3, r3, #8
    ba6c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba70:	2a00      	cmp	r2, #0
    ba72:	d001      	beq.n	ba78 <FlexCAN_SetListenOnlyMode+0x1e>
    ba74:	2208      	movs	r2, #8
    ba76:	e000      	b.n	ba7a <FlexCAN_SetListenOnlyMode+0x20>
    ba78:	2200      	movs	r2, #0
    ba7a:	431a      	orrs	r2, r3
    ba7c:	9b01      	ldr	r3, [sp, #4]
    ba7e:	605a      	str	r2, [r3, #4]
}
    ba80:	bf00      	nop
    ba82:	b002      	add	sp, #8
    ba84:	4770      	bx	lr

0000ba86 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    ba86:	b082      	sub	sp, #8
    ba88:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    ba8a:	9b01      	ldr	r3, [sp, #4]
    ba8c:	689b      	ldr	r3, [r3, #8]
}
    ba8e:	bf00      	nop
    ba90:	b002      	add	sp, #8
    ba92:	4770      	bx	lr

0000ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    ba94:	b084      	sub	sp, #16
    ba96:	9001      	str	r0, [sp, #4]
    ba98:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    ba9a:	9b00      	ldr	r3, [sp, #0]
    ba9c:	f003 031f 	and.w	r3, r3, #31
    baa0:	2201      	movs	r2, #1
    baa2:	fa02 f303 	lsl.w	r3, r2, r3
    baa6:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    baa8:	9b00      	ldr	r3, [sp, #0]
    baaa:	2b1f      	cmp	r3, #31
    baac:	d802      	bhi.n	bab4 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    baae:	9b01      	ldr	r3, [sp, #4]
    bab0:	9a03      	ldr	r2, [sp, #12]
    bab2:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    bab4:	bf00      	nop
    bab6:	b004      	add	sp, #16
    bab8:	4770      	bx	lr

0000baba <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    baba:	b084      	sub	sp, #16
    babc:	9001      	str	r0, [sp, #4]
    babe:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    bac0:	2300      	movs	r3, #0
    bac2:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    bac4:	9b00      	ldr	r3, [sp, #0]
    bac6:	2b1f      	cmp	r3, #31
    bac8:	d80e      	bhi.n	bae8 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    baca:	9b01      	ldr	r3, [sp, #4]
    bacc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    bace:	9b00      	ldr	r3, [sp, #0]
    bad0:	f003 031f 	and.w	r3, r3, #31
    bad4:	2101      	movs	r1, #1
    bad6:	fa01 f303 	lsl.w	r3, r1, r3
    bada:	401a      	ands	r2, r3
    badc:	9b00      	ldr	r3, [sp, #0]
    bade:	f003 031f 	and.w	r3, r3, #31
    bae2:	fa22 f303 	lsr.w	r3, r2, r3
    bae6:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    bae8:	9b03      	ldr	r3, [sp, #12]
    baea:	b2db      	uxtb	r3, r3
}
    baec:	4618      	mov	r0, r3
    baee:	b004      	add	sp, #16
    baf0:	4770      	bx	lr

0000baf2 <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    baf2:	b082      	sub	sp, #8
    baf4:	9001      	str	r0, [sp, #4]
    baf6:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    baf8:	9b01      	ldr	r3, [sp, #4]
    bafa:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    bafe:	4b15      	ldr	r3, [pc, #84]	; (bb54 <FlexCAN_SetFDTimeSegments+0x62>)
    bb00:	4013      	ands	r3, r2
    bb02:	9a01      	ldr	r2, [sp, #4]
    bb04:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bb08:	9b01      	ldr	r3, [sp, #4]
    bb0a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    bb0e:	9b00      	ldr	r3, [sp, #0]
    bb10:	681b      	ldr	r3, [r3, #0]
    bb12:	029b      	lsls	r3, r3, #10
    bb14:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    bb18:	9b00      	ldr	r3, [sp, #0]
    bb1a:	689b      	ldr	r3, [r3, #8]
    bb1c:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bb20:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    bb22:	9b00      	ldr	r3, [sp, #0]
    bb24:	685b      	ldr	r3, [r3, #4]
    bb26:	015b      	lsls	r3, r3, #5
    bb28:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    bb2a:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    bb2c:	9b00      	ldr	r3, [sp, #0]
    bb2e:	68db      	ldr	r3, [r3, #12]
    bb30:	0518      	lsls	r0, r3, #20
    bb32:	4b09      	ldr	r3, [pc, #36]	; (bb58 <FlexCAN_SetFDTimeSegments+0x66>)
    bb34:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    bb36:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    bb38:	9b00      	ldr	r3, [sp, #0]
    bb3a:	691b      	ldr	r3, [r3, #16]
    bb3c:	041b      	lsls	r3, r3, #16
    bb3e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    bb42:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bb44:	431a      	orrs	r2, r3
    bb46:	9b01      	ldr	r3, [sp, #4]
    bb48:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    bb4c:	bf00      	nop
    bb4e:	b002      	add	sp, #8
    bb50:	4770      	bx	lr
    bb52:	bf00      	nop
    bb54:	c0088318 	.word	0xc0088318
    bb58:	3ff00000 	.word	0x3ff00000

0000bb5c <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bb5c:	b082      	sub	sp, #8
    bb5e:	9001      	str	r0, [sp, #4]
    bb60:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    bb62:	9b01      	ldr	r3, [sp, #4]
    bb64:	685a      	ldr	r2, [r3, #4]
    bb66:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    bb6a:	4013      	ands	r3, r2
    bb6c:	9a01      	ldr	r2, [sp, #4]
    bb6e:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bb70:	9b01      	ldr	r3, [sp, #4]
    bb72:	685a      	ldr	r2, [r3, #4]
    bb74:	9b00      	ldr	r3, [sp, #0]
    bb76:	681b      	ldr	r3, [r3, #0]
    bb78:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bb7c:	9b00      	ldr	r3, [sp, #0]
    bb7e:	689b      	ldr	r3, [r3, #8]
    bb80:	041b      	lsls	r3, r3, #16
    bb82:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bb86:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bb88:	9b00      	ldr	r3, [sp, #0]
    bb8a:	685b      	ldr	r3, [r3, #4]
    bb8c:	04db      	lsls	r3, r3, #19
    bb8e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bb92:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    bb94:	9b00      	ldr	r3, [sp, #0]
    bb96:	68db      	ldr	r3, [r3, #12]
    bb98:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bb9a:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    bb9c:	9b00      	ldr	r3, [sp, #0]
    bb9e:	691b      	ldr	r3, [r3, #16]
    bba0:	059b      	lsls	r3, r3, #22
    bba2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    bba6:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bba8:	431a      	orrs	r2, r3
    bbaa:	9b01      	ldr	r3, [sp, #4]
    bbac:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    bbae:	bf00      	nop
    bbb0:	b002      	add	sp, #8
    bbb2:	4770      	bx	lr

0000bbb4 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bbb4:	b082      	sub	sp, #8
    bbb6:	9001      	str	r0, [sp, #4]
    bbb8:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    bbba:	9b01      	ldr	r3, [sp, #4]
    bbbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bbbe:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    bbc2:	9b01      	ldr	r3, [sp, #4]
    bbc4:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bbc6:	9b01      	ldr	r3, [sp, #4]
    bbc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    bbca:	9b00      	ldr	r3, [sp, #0]
    bbcc:	681b      	ldr	r3, [r3, #0]
    bbce:	029b      	lsls	r3, r3, #10
    bbd0:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bbd2:	9b00      	ldr	r3, [sp, #0]
    bbd4:	689b      	ldr	r3, [r3, #8]
    bbd6:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bbda:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bbdc:	9b00      	ldr	r3, [sp, #0]
    bbde:	685b      	ldr	r3, [r3, #4]
    bbe0:	015b      	lsls	r3, r3, #5
    bbe2:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bbe6:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bbe8:	9b00      	ldr	r3, [sp, #0]
    bbea:	68db      	ldr	r3, [r3, #12]
    bbec:	0558      	lsls	r0, r3, #21
    bbee:	4b07      	ldr	r3, [pc, #28]	; (bc0c <FlexCAN_SetExtendedTimeSegments+0x58>)
    bbf0:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bbf2:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    bbf4:	9b00      	ldr	r3, [sp, #0]
    bbf6:	691b      	ldr	r3, [r3, #16]
    bbf8:	041b      	lsls	r3, r3, #16
    bbfa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bbfe:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bc00:	431a      	orrs	r2, r3
    bc02:	9b01      	ldr	r3, [sp, #4]
    bc04:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    bc06:	bf00      	nop
    bc08:	b002      	add	sp, #8
    bc0a:	4770      	bx	lr
    bc0c:	7fe00000 	.word	0x7fe00000

0000bc10 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bc10:	b082      	sub	sp, #8
    bc12:	9001      	str	r0, [sp, #4]
    bc14:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    bc16:	9b01      	ldr	r3, [sp, #4]
    bc18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc1a:	0d5b      	lsrs	r3, r3, #21
    bc1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bc20:	9b00      	ldr	r3, [sp, #0]
    bc22:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    bc24:	9b01      	ldr	r3, [sp, #4]
    bc26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc28:	0a9b      	lsrs	r3, r3, #10
    bc2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    bc2e:	9b00      	ldr	r3, [sp, #0]
    bc30:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    bc32:	9b01      	ldr	r3, [sp, #4]
    bc34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc36:	095b      	lsrs	r3, r3, #5
    bc38:	f003 021f 	and.w	r2, r3, #31
    bc3c:	9b00      	ldr	r3, [sp, #0]
    bc3e:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    bc40:	9b01      	ldr	r3, [sp, #4]
    bc42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc44:	f003 021f 	and.w	r2, r3, #31
    bc48:	9b00      	ldr	r3, [sp, #0]
    bc4a:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    bc4c:	9b01      	ldr	r3, [sp, #4]
    bc4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc50:	0c1b      	lsrs	r3, r3, #16
    bc52:	f003 021f 	and.w	r2, r3, #31
    bc56:	9b00      	ldr	r3, [sp, #0]
    bc58:	611a      	str	r2, [r3, #16]
}
    bc5a:	bf00      	nop
    bc5c:	b002      	add	sp, #8
    bc5e:	4770      	bx	lr

0000bc60 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bc60:	b082      	sub	sp, #8
    bc62:	9001      	str	r0, [sp, #4]
    bc64:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    bc66:	9b01      	ldr	r3, [sp, #4]
    bc68:	685b      	ldr	r3, [r3, #4]
    bc6a:	0e1b      	lsrs	r3, r3, #24
    bc6c:	b2da      	uxtb	r2, r3
    bc6e:	9b00      	ldr	r3, [sp, #0]
    bc70:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    bc72:	9b01      	ldr	r3, [sp, #4]
    bc74:	685b      	ldr	r3, [r3, #4]
    bc76:	f003 0207 	and.w	r2, r3, #7
    bc7a:	9b00      	ldr	r3, [sp, #0]
    bc7c:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    bc7e:	9b01      	ldr	r3, [sp, #4]
    bc80:	685b      	ldr	r3, [r3, #4]
    bc82:	0cdb      	lsrs	r3, r3, #19
    bc84:	f003 0207 	and.w	r2, r3, #7
    bc88:	9b00      	ldr	r3, [sp, #0]
    bc8a:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    bc8c:	9b01      	ldr	r3, [sp, #4]
    bc8e:	685b      	ldr	r3, [r3, #4]
    bc90:	0c1b      	lsrs	r3, r3, #16
    bc92:	f003 0207 	and.w	r2, r3, #7
    bc96:	9b00      	ldr	r3, [sp, #0]
    bc98:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    bc9a:	9b01      	ldr	r3, [sp, #4]
    bc9c:	685b      	ldr	r3, [r3, #4]
    bc9e:	0d9b      	lsrs	r3, r3, #22
    bca0:	f003 0203 	and.w	r2, r3, #3
    bca4:	9b00      	ldr	r3, [sp, #0]
    bca6:	611a      	str	r2, [r3, #16]
}
    bca8:	bf00      	nop
    bcaa:	b002      	add	sp, #8
    bcac:	4770      	bx	lr

0000bcae <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bcae:	b082      	sub	sp, #8
    bcb0:	9001      	str	r0, [sp, #4]
    bcb2:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    bcb4:	9b01      	ldr	r3, [sp, #4]
    bcb6:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bcba:	0d1b      	lsrs	r3, r3, #20
    bcbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bcc0:	9b00      	ldr	r3, [sp, #0]
    bcc2:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    bcc4:	9b01      	ldr	r3, [sp, #4]
    bcc6:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bcca:	0a9b      	lsrs	r3, r3, #10
    bccc:	f003 021f 	and.w	r2, r3, #31
    bcd0:	9b00      	ldr	r3, [sp, #0]
    bcd2:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    bcd4:	9b01      	ldr	r3, [sp, #4]
    bcd6:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bcda:	095b      	lsrs	r3, r3, #5
    bcdc:	f003 0207 	and.w	r2, r3, #7
    bce0:	9b00      	ldr	r3, [sp, #0]
    bce2:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    bce4:	9b01      	ldr	r3, [sp, #4]
    bce6:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bcea:	f003 0207 	and.w	r2, r3, #7
    bcee:	9b00      	ldr	r3, [sp, #0]
    bcf0:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    bcf2:	9b01      	ldr	r3, [sp, #4]
    bcf4:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bcf8:	0c1b      	lsrs	r3, r3, #16
    bcfa:	f003 0207 	and.w	r2, r3, #7
    bcfe:	9b00      	ldr	r3, [sp, #0]
    bd00:	611a      	str	r2, [r3, #16]
}
    bd02:	bf00      	nop
    bd04:	b002      	add	sp, #8
    bd06:	4770      	bx	lr

0000bd08 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    bd08:	b082      	sub	sp, #8
    bd0a:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    bd0c:	9b01      	ldr	r3, [sp, #4]
    bd0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bd10:	0fdb      	lsrs	r3, r3, #31
    bd12:	b2db      	uxtb	r3, r3
}
    bd14:	4618      	mov	r0, r3
    bd16:	b002      	add	sp, #8
    bd18:	4770      	bx	lr

0000bd1a <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    bd1a:	b082      	sub	sp, #8
    bd1c:	9001      	str	r0, [sp, #4]
    bd1e:	460b      	mov	r3, r1
    bd20:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    bd24:	9b01      	ldr	r3, [sp, #4]
    bd26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bd28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    bd2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bd30:	2a00      	cmp	r2, #0
    bd32:	d002      	beq.n	bd3a <FlexCAN_EnableExtCbt+0x20>
    bd34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    bd38:	e000      	b.n	bd3c <FlexCAN_EnableExtCbt+0x22>
    bd3a:	2200      	movs	r2, #0
    bd3c:	431a      	orrs	r2, r3
    bd3e:	9b01      	ldr	r3, [sp, #4]
    bd40:	651a      	str	r2, [r3, #80]	; 0x50
}
    bd42:	bf00      	nop
    bd44:	b002      	add	sp, #8
    bd46:	4770      	bx	lr

0000bd48 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    bd48:	b082      	sub	sp, #8
    bd4a:	9001      	str	r0, [sp, #4]
    bd4c:	460b      	mov	r3, r1
    bd4e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    bd52:	9b01      	ldr	r3, [sp, #4]
    bd54:	681b      	ldr	r3, [r3, #0]
    bd56:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    bd5a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bd5e:	2a00      	cmp	r2, #0
    bd60:	d001      	beq.n	bd66 <FlexCAN_SetSelfReception+0x1e>
    bd62:	2200      	movs	r2, #0
    bd64:	e001      	b.n	bd6a <FlexCAN_SetSelfReception+0x22>
    bd66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bd6a:	431a      	orrs	r2, r3
    bd6c:	9b01      	ldr	r3, [sp, #4]
    bd6e:	601a      	str	r2, [r3, #0]
}
    bd70:	bf00      	nop
    bd72:	b002      	add	sp, #8
    bd74:	4770      	bx	lr

0000bd76 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    bd76:	b082      	sub	sp, #8
    bd78:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    bd7a:	9b01      	ldr	r3, [sp, #4]
    bd7c:	681b      	ldr	r3, [r3, #0]
    bd7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bd82:	2b00      	cmp	r3, #0
    bd84:	bf14      	ite	ne
    bd86:	2301      	movne	r3, #1
    bd88:	2300      	moveq	r3, #0
    bd8a:	b2db      	uxtb	r3, r3
}
    bd8c:	4618      	mov	r0, r3
    bd8e:	b002      	add	sp, #8
    bd90:	4770      	bx	lr

0000bd92 <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    bd92:	b082      	sub	sp, #8
    bd94:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    bd96:	9b01      	ldr	r3, [sp, #4]
    bd98:	685b      	ldr	r3, [r3, #4]
    bd9a:	f003 0308 	and.w	r3, r3, #8
    bd9e:	2b00      	cmp	r3, #0
    bda0:	bf14      	ite	ne
    bda2:	2301      	movne	r3, #1
    bda4:	2300      	moveq	r3, #0
    bda6:	b2db      	uxtb	r3, r3
}
    bda8:	4618      	mov	r0, r3
    bdaa:	b002      	add	sp, #8
    bdac:	4770      	bx	lr

0000bdae <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    bdae:	b082      	sub	sp, #8
    bdb0:	4603      	mov	r3, r0
    bdb2:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    bdb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bdba:	3301      	adds	r3, #1
    bdbc:	00db      	lsls	r3, r3, #3
    bdbe:	089b      	lsrs	r3, r3, #2
    bdc0:	3305      	adds	r3, #5
}
    bdc2:	4618      	mov	r0, r3
    bdc4:	b002      	add	sp, #8
    bdc6:	4770      	bx	lr

0000bdc8 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    bdc8:	b082      	sub	sp, #8
    bdca:	9001      	str	r0, [sp, #4]
    bdcc:	460b      	mov	r3, r1
    bdce:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    bdd2:	9b01      	ldr	r3, [sp, #4]
    bdd4:	685b      	ldr	r3, [r3, #4]
    bdd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    bdda:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bdde:	2a00      	cmp	r2, #0
    bde0:	d002      	beq.n	bde8 <FlexCAN_SetClkSrc+0x20>
    bde2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    bde6:	e000      	b.n	bdea <FlexCAN_SetClkSrc+0x22>
    bde8:	2200      	movs	r2, #0
    bdea:	431a      	orrs	r2, r3
    bdec:	9b01      	ldr	r3, [sp, #4]
    bdee:	605a      	str	r2, [r3, #4]
}
    bdf0:	bf00      	nop
    bdf2:	b002      	add	sp, #8
    bdf4:	4770      	bx	lr

0000bdf6 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bdf6:	b084      	sub	sp, #16
    bdf8:	9001      	str	r0, [sp, #4]
    bdfa:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    bdfc:	2300      	movs	r3, #0
    bdfe:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    be02:	9b00      	ldr	r3, [sp, #0]
    be04:	2b1f      	cmp	r3, #31
    be06:	d810      	bhi.n	be2a <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    be08:	9b01      	ldr	r3, [sp, #4]
    be0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    be0c:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    be0e:	9b01      	ldr	r3, [sp, #4]
    be10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    be12:	9b02      	ldr	r3, [sp, #8]
    be14:	401a      	ands	r2, r3
    be16:	9b00      	ldr	r3, [sp, #0]
    be18:	f003 031f 	and.w	r3, r3, #31
    be1c:	fa22 f303 	lsr.w	r3, r2, r3
    be20:	b2db      	uxtb	r3, r3
    be22:	f003 0301 	and.w	r3, r3, #1
    be26:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    be2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    be2e:	4618      	mov	r0, r3
    be30:	b004      	add	sp, #16
    be32:	4770      	bx	lr

0000be34 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    be34:	b082      	sub	sp, #8
    be36:	9001      	str	r0, [sp, #4]
    be38:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    be3a:	9b01      	ldr	r3, [sp, #4]
    be3c:	9a00      	ldr	r2, [sp, #0]
    be3e:	611a      	str	r2, [r3, #16]
}
    be40:	bf00      	nop
    be42:	b002      	add	sp, #8
    be44:	4770      	bx	lr

0000be46 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    be46:	b084      	sub	sp, #16
    be48:	9003      	str	r0, [sp, #12]
    be4a:	9102      	str	r1, [sp, #8]
    be4c:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    be4e:	9b03      	ldr	r3, [sp, #12]
    be50:	9a02      	ldr	r2, [sp, #8]
    be52:	f502 7208 	add.w	r2, r2, #544	; 0x220
    be56:	9901      	ldr	r1, [sp, #4]
    be58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    be5c:	bf00      	nop
    be5e:	b004      	add	sp, #16
    be60:	4770      	bx	lr

0000be62 <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    be62:	b082      	sub	sp, #8
    be64:	9001      	str	r0, [sp, #4]
    be66:	460b      	mov	r3, r1
    be68:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    be6c:	9b01      	ldr	r3, [sp, #4]
    be6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    be70:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    be74:	f89d 3003 	ldrb.w	r3, [sp, #3]
    be78:	04db      	lsls	r3, r3, #19
    be7a:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    be7e:	431a      	orrs	r2, r3
    be80:	9b01      	ldr	r3, [sp, #4]
    be82:	635a      	str	r2, [r3, #52]	; 0x34
}
    be84:	bf00      	nop
    be86:	b002      	add	sp, #8
    be88:	4770      	bx	lr

0000be8a <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    be8a:	b082      	sub	sp, #8
    be8c:	9001      	str	r0, [sp, #4]
    be8e:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    be90:	9b00      	ldr	r3, [sp, #0]
    be92:	2b00      	cmp	r3, #0
    be94:	d106      	bne.n	bea4 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    be96:	9b01      	ldr	r3, [sp, #4]
    be98:	681b      	ldr	r3, [r3, #0]
    be9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    be9e:	9b01      	ldr	r3, [sp, #4]
    bea0:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    bea2:	e005      	b.n	beb0 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    bea4:	9b01      	ldr	r3, [sp, #4]
    bea6:	681b      	ldr	r3, [r3, #0]
    bea8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    beac:	9b01      	ldr	r3, [sp, #4]
    beae:	601a      	str	r2, [r3, #0]
}
    beb0:	bf00      	nop
    beb2:	b002      	add	sp, #8
    beb4:	4770      	bx	lr

0000beb6 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    beb6:	b500      	push	{lr}
    beb8:	b083      	sub	sp, #12
    beba:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    bebc:	9801      	ldr	r0, [sp, #4]
    bebe:	f002 ff85 	bl	edcc <FlexCAN_IsFDAvailable>
    bec2:	4603      	mov	r3, r0
    bec4:	2b00      	cmp	r3, #0
    bec6:	d007      	beq.n	bed8 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    bec8:	9b01      	ldr	r3, [sp, #4]
    beca:	2200      	movs	r2, #0
    becc:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    bed0:	9b01      	ldr	r3, [sp, #4]
    bed2:	4a12      	ldr	r2, [pc, #72]	; (bf1c <FlexCAN_SetRegDefaultVal+0x66>)
    bed4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    bed8:	9b01      	ldr	r3, [sp, #4]
    beda:	f04f 32ff 	mov.w	r2, #4294967295
    bede:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    bee0:	9b01      	ldr	r3, [sp, #4]
    bee2:	2200      	movs	r2, #0
    bee4:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    bee6:	9b01      	ldr	r3, [sp, #4]
    bee8:	2200      	movs	r2, #0
    beea:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    beec:	9b01      	ldr	r3, [sp, #4]
    beee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    bef2:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    bef4:	9b01      	ldr	r3, [sp, #4]
    bef6:	4a0a      	ldr	r2, [pc, #40]	; (bf20 <FlexCAN_SetRegDefaultVal+0x6a>)
    bef8:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    befa:	9b01      	ldr	r3, [sp, #4]
    befc:	2200      	movs	r2, #0
    befe:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    bf00:	9b01      	ldr	r3, [sp, #4]
    bf02:	2200      	movs	r2, #0
    bf04:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    bf06:	9b01      	ldr	r3, [sp, #4]
    bf08:	2200      	movs	r2, #0
    bf0a:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    bf0c:	9b01      	ldr	r3, [sp, #4]
    bf0e:	4a05      	ldr	r2, [pc, #20]	; (bf24 <FlexCAN_SetRegDefaultVal+0x6e>)
    bf10:	601a      	str	r2, [r3, #0]
}
    bf12:	bf00      	nop
    bf14:	b003      	add	sp, #12
    bf16:	f85d fb04 	ldr.w	pc, [sp], #4
    bf1a:	bf00      	nop
    bf1c:	80004100 	.word	0x80004100
    bf20:	0003b006 	.word	0x0003b006
    bf24:	d890000f 	.word	0xd890000f

0000bf28 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bf28:	b500      	push	{lr}
    bf2a:	b085      	sub	sp, #20
    bf2c:	9001      	str	r0, [sp, #4]
    bf2e:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bf30:	2300      	movs	r3, #0
    bf32:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    bf34:	9b00      	ldr	r3, [sp, #0]
    bf36:	7a1b      	ldrb	r3, [r3, #8]
    bf38:	2b00      	cmp	r3, #0
    bf3a:	d006      	beq.n	bf4a <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    bf3c:	9b00      	ldr	r3, [sp, #0]
    bf3e:	685b      	ldr	r3, [r3, #4]
    bf40:	4619      	mov	r1, r3
    bf42:	9801      	ldr	r0, [sp, #4]
    bf44:	f002 fefe 	bl	ed44 <FlexCAN_EnableRxFifo>
    bf48:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    bf4a:	9b03      	ldr	r3, [sp, #12]
}
    bf4c:	4618      	mov	r0, r3
    bf4e:	b005      	add	sp, #20
    bf50:	f85d fb04 	ldr.w	pc, [sp], #4

0000bf54 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bf54:	b500      	push	{lr}
    bf56:	b085      	sub	sp, #20
    bf58:	9001      	str	r0, [sp, #4]
    bf5a:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bf5c:	2300      	movs	r3, #0
    bf5e:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    bf60:	9b00      	ldr	r3, [sp, #0]
    bf62:	68db      	ldr	r3, [r3, #12]
    bf64:	2b02      	cmp	r3, #2
    bf66:	d003      	beq.n	bf70 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    bf68:	2100      	movs	r1, #0
    bf6a:	9801      	ldr	r0, [sp, #4]
    bf6c:	f7ff feec 	bl	bd48 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    bf70:	9900      	ldr	r1, [sp, #0]
    bf72:	9801      	ldr	r0, [sp, #4]
    bf74:	f7ff ffd8 	bl	bf28 <FlexCAN_InitRxFifo>
    bf78:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    bf7a:	9b03      	ldr	r3, [sp, #12]
    bf7c:	2b00      	cmp	r3, #0
    bf7e:	d006      	beq.n	bf8e <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    bf80:	9801      	ldr	r0, [sp, #4]
    bf82:	f002 fd03 	bl	e98c <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    bf86:	9801      	ldr	r0, [sp, #4]
    bf88:	f002 fdca 	bl	eb20 <FlexCAN_Disable>
    bf8c:	e00b      	b.n	bfa6 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    bf8e:	9b00      	ldr	r3, [sp, #0]
    bf90:	3314      	adds	r3, #20
    bf92:	4619      	mov	r1, r3
    bf94:	9801      	ldr	r0, [sp, #4]
    bf96:	f002 ff3b 	bl	ee10 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    bf9a:	9b00      	ldr	r3, [sp, #0]
    bf9c:	681b      	ldr	r3, [r3, #0]
    bf9e:	4619      	mov	r1, r3
    bfa0:	9801      	ldr	r0, [sp, #4]
    bfa2:	f003 fab7 	bl	f514 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    bfa6:	9b03      	ldr	r3, [sp, #12]
}
    bfa8:	4618      	mov	r0, r3
    bfaa:	b005      	add	sp, #20
    bfac:	f85d fb04 	ldr.w	pc, [sp], #4

0000bfb0 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bfb0:	b500      	push	{lr}
    bfb2:	b087      	sub	sp, #28
    bfb4:	4603      	mov	r3, r0
    bfb6:	9102      	str	r1, [sp, #8]
    bfb8:	9201      	str	r2, [sp, #4]
    bfba:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bfbe:	2300      	movs	r3, #0
    bfc0:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    bfc2:	9802      	ldr	r0, [sp, #8]
    bfc4:	f7ff fd0c 	bl	b9e0 <FlexCAN_IsEnabled>
    bfc8:	4603      	mov	r3, r0
    bfca:	2b00      	cmp	r3, #0
    bfcc:	d00a      	beq.n	bfe4 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    bfce:	9802      	ldr	r0, [sp, #8]
    bfd0:	f002 fcdc 	bl	e98c <FlexCAN_EnterFreezeMode>
    bfd4:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    bfd6:	9b05      	ldr	r3, [sp, #20]
    bfd8:	2b00      	cmp	r3, #0
    bfda:	d103      	bne.n	bfe4 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    bfdc:	9802      	ldr	r0, [sp, #8]
    bfde:	f002 fd9f 	bl	eb20 <FlexCAN_Disable>
    bfe2:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    bfe4:	9b05      	ldr	r3, [sp, #20]
    bfe6:	2b00      	cmp	r3, #0
    bfe8:	d137      	bne.n	c05a <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    bfea:	9b01      	ldr	r3, [sp, #4]
    bfec:	7e5b      	ldrb	r3, [r3, #25]
    bfee:	4619      	mov	r1, r3
    bff0:	9802      	ldr	r0, [sp, #8]
    bff2:	f7ff fee9 	bl	bdc8 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bff6:	9b02      	ldr	r3, [sp, #8]
    bff8:	681b      	ldr	r3, [r3, #0]
    bffa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bffe:	9b02      	ldr	r3, [sp, #8]
    c000:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    c002:	9802      	ldr	r0, [sp, #8]
    c004:	f002 fe28 	bl	ec58 <FlexCAN_Init>
    c008:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    c00a:	9b05      	ldr	r3, [sp, #20]
    c00c:	2b00      	cmp	r3, #0
    c00e:	d006      	beq.n	c01e <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    c010:	9802      	ldr	r0, [sp, #8]
    c012:	f002 fcbb 	bl	e98c <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    c016:	9802      	ldr	r0, [sp, #8]
    c018:	f002 fd82 	bl	eb20 <FlexCAN_Disable>
    c01c:	e01d      	b.n	c05a <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    c01e:	9802      	ldr	r0, [sp, #8]
    c020:	f002 fed4 	bl	edcc <FlexCAN_IsFDAvailable>
    c024:	4603      	mov	r3, r0
    c026:	2b00      	cmp	r3, #0
    c028:	d007      	beq.n	c03a <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    c02a:	9b01      	ldr	r3, [sp, #4]
    c02c:	7e19      	ldrb	r1, [r3, #24]
    c02e:	9b01      	ldr	r3, [sp, #4]
    c030:	7edb      	ldrb	r3, [r3, #27]
    c032:	461a      	mov	r2, r3
    c034:	9802      	ldr	r0, [sp, #8]
    c036:	f7ff fcdd 	bl	b9f4 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    c03a:	9b01      	ldr	r3, [sp, #4]
    c03c:	691b      	ldr	r3, [r3, #16]
    c03e:	4619      	mov	r1, r3
    c040:	9802      	ldr	r0, [sp, #8]
    c042:	f003 fdeb 	bl	fc1c <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    c046:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c04a:	4618      	mov	r0, r3
    c04c:	f003 fe56 	bl	fcfc <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    c050:	9901      	ldr	r1, [sp, #4]
    c052:	9802      	ldr	r0, [sp, #8]
    c054:	f7ff ff7e 	bl	bf54 <FlexCAN_InitCtroll>
    c058:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    c05a:	9b05      	ldr	r3, [sp, #20]
}
    c05c:	4618      	mov	r0, r3
    c05e:	b007      	add	sp, #28
    c060:	f85d fb04 	ldr.w	pc, [sp], #4

0000c064 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    c064:	b500      	push	{lr}
    c066:	b083      	sub	sp, #12
    c068:	9001      	str	r0, [sp, #4]
    c06a:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    c06c:	9b00      	ldr	r3, [sp, #0]
    c06e:	7e1b      	ldrb	r3, [r3, #24]
    c070:	4619      	mov	r1, r3
    c072:	9801      	ldr	r0, [sp, #4]
    c074:	f7ff fe51 	bl	bd1a <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    c078:	9b00      	ldr	r3, [sp, #0]
    c07a:	7e1b      	ldrb	r3, [r3, #24]
    c07c:	2b00      	cmp	r3, #0
    c07e:	d00c      	beq.n	c09a <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    c080:	9b00      	ldr	r3, [sp, #0]
    c082:	331c      	adds	r3, #28
    c084:	4619      	mov	r1, r3
    c086:	9801      	ldr	r0, [sp, #4]
    c088:	f7ff fd94 	bl	bbb4 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    c08c:	9b00      	ldr	r3, [sp, #0]
    c08e:	3330      	adds	r3, #48	; 0x30
    c090:	4619      	mov	r1, r3
    c092:	9801      	ldr	r0, [sp, #4]
    c094:	f7ff fd2d 	bl	baf2 <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    c098:	e005      	b.n	c0a6 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    c09a:	9b00      	ldr	r3, [sp, #0]
    c09c:	331c      	adds	r3, #28
    c09e:	4619      	mov	r1, r3
    c0a0:	9801      	ldr	r0, [sp, #4]
    c0a2:	f7ff fd5b 	bl	bb5c <FlexCAN_SetTimeSegments>
}
    c0a6:	bf00      	nop
    c0a8:	b003      	add	sp, #12
    c0aa:	f85d fb04 	ldr.w	pc, [sp], #4

0000c0ae <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    c0ae:	b500      	push	{lr}
    c0b0:	b08d      	sub	sp, #52	; 0x34
    c0b2:	4603      	mov	r3, r0
    c0b4:	9102      	str	r1, [sp, #8]
    c0b6:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c0ba:	2300      	movs	r3, #0
    c0bc:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c0be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c0c2:	4a46      	ldr	r2, [pc, #280]	; (c1dc <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    c0c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0c8:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c0ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c0ce:	4a44      	ldr	r2, [pc, #272]	; (c1e0 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    c0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0d4:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    c0d6:	2300      	movs	r3, #0
    c0d8:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    c0da:	2300      	movs	r3, #0
    c0dc:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c0de:	9b02      	ldr	r3, [sp, #8]
    c0e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c0e4:	fb02 f303 	mul.w	r3, r2, r3
    c0e8:	2100      	movs	r1, #0
    c0ea:	4618      	mov	r0, r3
    c0ec:	f7f5 ff0a 	bl	1f04 <OsIf_MicrosToTicks>
    c0f0:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    c0f2:	2300      	movs	r3, #0
    c0f4:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c0f6:	2000      	movs	r0, #0
    c0f8:	f7f5 feb8 	bl	1e6c <OsIf_GetCounter>
    c0fc:	4603      	mov	r3, r0
    c0fe:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c100:	e02a      	b.n	c158 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    c102:	9b08      	ldr	r3, [sp, #32]
    c104:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c108:	2b01      	cmp	r3, #1
    c10a:	d115      	bne.n	c138 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c10c:	2307      	movs	r3, #7
    c10e:	9309      	str	r3, [sp, #36]	; 0x24
    c110:	e00f      	b.n	c132 <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    c112:	9909      	ldr	r1, [sp, #36]	; 0x24
    c114:	9807      	ldr	r0, [sp, #28]
    c116:	f7ff fcd0 	bl	baba <FlexCAN_GetBuffStatusFlag>
    c11a:	4603      	mov	r3, r0
    c11c:	2b00      	cmp	r3, #0
    c11e:	d005      	beq.n	c12c <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    c120:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c124:	9909      	ldr	r1, [sp, #36]	; 0x24
    c126:	4618      	mov	r0, r3
    c128:	f000 fb06 	bl	c738 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    c12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c12e:	3b01      	subs	r3, #1
    c130:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c132:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c134:	2b04      	cmp	r3, #4
    c136:	d8ec      	bhi.n	c112 <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c138:	ab05      	add	r3, sp, #20
    c13a:	2100      	movs	r1, #0
    c13c:	4618      	mov	r0, r3
    c13e:	f7f5 feae 	bl	1e9e <OsIf_GetElapsed>
    c142:	4602      	mov	r2, r0
    c144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c146:	4413      	add	r3, r2
    c148:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    c14a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c14c:	9b06      	ldr	r3, [sp, #24]
    c14e:	429a      	cmp	r2, r3
    c150:	d302      	bcc.n	c158 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    c152:	2303      	movs	r3, #3
    c154:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c156:	e003      	b.n	c160 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c158:	9b08      	ldr	r3, [sp, #32]
    c15a:	685b      	ldr	r3, [r3, #4]
    c15c:	2b01      	cmp	r3, #1
    c15e:	d0d0      	beq.n	c102 <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    c160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c162:	2b03      	cmp	r3, #3
    c164:	d125      	bne.n	c1b2 <FlexCAN_ProccessLegacyRxFIFO+0x104>
    c166:	9b08      	ldr	r3, [sp, #32]
    c168:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c16c:	2b01      	cmp	r3, #1
    c16e:	d020      	beq.n	c1b2 <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    c170:	9b08      	ldr	r3, [sp, #32]
    c172:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c176:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c17a:	9300      	str	r3, [sp, #0]
    c17c:	2300      	movs	r3, #0
    c17e:	2205      	movs	r2, #5
    c180:	9807      	ldr	r0, [sp, #28]
    c182:	f002 feef 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    c186:	9b08      	ldr	r3, [sp, #32]
    c188:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c18c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c190:	9300      	str	r3, [sp, #0]
    c192:	2300      	movs	r3, #0
    c194:	2206      	movs	r2, #6
    c196:	9807      	ldr	r0, [sp, #28]
    c198:	f002 fee4 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    c19c:	9b08      	ldr	r3, [sp, #32]
    c19e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c1a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c1a6:	9300      	str	r3, [sp, #0]
    c1a8:	2300      	movs	r3, #0
    c1aa:	2207      	movs	r2, #7
    c1ac:	9807      	ldr	r0, [sp, #28]
    c1ae:	f002 fed9 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c1b2:	9b08      	ldr	r3, [sp, #32]
    c1b4:	685b      	ldr	r3, [r3, #4]
    c1b6:	2b00      	cmp	r3, #0
    c1b8:	d005      	beq.n	c1c6 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    c1ba:	2b01      	cmp	r3, #1
    c1bc:	d106      	bne.n	c1cc <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c1be:	9b08      	ldr	r3, [sp, #32]
    c1c0:	2200      	movs	r2, #0
    c1c2:	605a      	str	r2, [r3, #4]
                break;
    c1c4:	e005      	b.n	c1d2 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    c1c6:	2300      	movs	r3, #0
    c1c8:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c1ca:	e002      	b.n	c1d2 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    c1cc:	2301      	movs	r3, #1
    c1ce:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c1d0:	bf00      	nop
        }

    return eResult;
    c1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    c1d4:	4618      	mov	r0, r3
    c1d6:	b00d      	add	sp, #52	; 0x34
    c1d8:	f85d fb04 	ldr.w	pc, [sp], #4
    c1dc:	1fff935c 	.word	0x1fff935c
    c1e0:	000185a4 	.word	0x000185a4

0000c1e4 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    c1e4:	b084      	sub	sp, #16
    c1e6:	9200      	str	r2, [sp, #0]
    c1e8:	461a      	mov	r2, r3
    c1ea:	4603      	mov	r3, r0
    c1ec:	f88d 3007 	strb.w	r3, [sp, #7]
    c1f0:	460b      	mov	r3, r1
    c1f2:	f88d 3006 	strb.w	r3, [sp, #6]
    c1f6:	4613      	mov	r3, r2
    c1f8:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c1fc:	2300      	movs	r3, #0
    c1fe:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c200:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c204:	4a15      	ldr	r2, [pc, #84]	; (c25c <FlexCAN_StartRxMessageBufferData+0x78>)
    c206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c20a:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c20c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c210:	9a02      	ldr	r2, [sp, #8]
    c212:	011b      	lsls	r3, r3, #4
    c214:	4413      	add	r3, r2
    c216:	3304      	adds	r3, #4
    c218:	681b      	ldr	r3, [r3, #0]
    c21a:	2b00      	cmp	r3, #0
    c21c:	d002      	beq.n	c224 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    c21e:	2302      	movs	r3, #2
    c220:	9303      	str	r3, [sp, #12]
    c222:	e017      	b.n	c254 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    c224:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c228:	9a02      	ldr	r2, [sp, #8]
    c22a:	011b      	lsls	r3, r3, #4
    c22c:	4413      	add	r3, r2
    c22e:	3304      	adds	r3, #4
    c230:	2201      	movs	r2, #1
    c232:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    c234:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c238:	9a02      	ldr	r2, [sp, #8]
    c23a:	011b      	lsls	r3, r3, #4
    c23c:	4413      	add	r3, r2
    c23e:	9a00      	ldr	r2, [sp, #0]
    c240:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    c242:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c246:	9a02      	ldr	r2, [sp, #8]
    c248:	011b      	lsls	r3, r3, #4
    c24a:	4413      	add	r3, r2
    c24c:	3308      	adds	r3, #8
    c24e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c252:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    c254:	9b03      	ldr	r3, [sp, #12]
}
    c256:	4618      	mov	r0, r3
    c258:	b004      	add	sp, #16
    c25a:	4770      	bx	lr
    c25c:	1fff935c 	.word	0x1fff935c

0000c260 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    c260:	b500      	push	{lr}
    c262:	b08f      	sub	sp, #60	; 0x3c
    c264:	9204      	str	r2, [sp, #16]
    c266:	9303      	str	r3, [sp, #12]
    c268:	4603      	mov	r3, r0
    c26a:	f88d 3017 	strb.w	r3, [sp, #23]
    c26e:	460b      	mov	r3, r1
    c270:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c274:	2300      	movs	r3, #0
    c276:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    c278:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c27c:	4a38      	ldr	r2, [pc, #224]	; (c360 <FlexCAN_StartSendData+0x100>)
    c27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c282:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    c284:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c288:	4a36      	ldr	r2, [pc, #216]	; (c364 <FlexCAN_StartSendData+0x104>)
    c28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c28e:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    c290:	2300      	movs	r3, #0
    c292:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c294:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c29a:	011b      	lsls	r3, r3, #4
    c29c:	4413      	add	r3, r2
    c29e:	3304      	adds	r3, #4
    c2a0:	681b      	ldr	r3, [r3, #0]
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	d002      	beq.n	c2ac <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    c2a6:	2302      	movs	r3, #2
    c2a8:	930d      	str	r3, [sp, #52]	; 0x34
    c2aa:	e053      	b.n	c354 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c2ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c2b0:	4619      	mov	r1, r3
    c2b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c2b4:	f7ff fbee 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    c2b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c2bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c2be:	011b      	lsls	r3, r3, #4
    c2c0:	4413      	add	r3, r2
    c2c2:	3304      	adds	r3, #4
    c2c4:	2202      	movs	r2, #2
    c2c6:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    c2c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c2cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c2ce:	011b      	lsls	r3, r3, #4
    c2d0:	4413      	add	r3, r2
    c2d2:	330c      	adds	r3, #12
    c2d4:	2200      	movs	r2, #0
    c2d6:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    c2d8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c2dc:	9a04      	ldr	r2, [sp, #16]
    c2de:	7b11      	ldrb	r1, [r2, #12]
    c2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c2e2:	011b      	lsls	r3, r3, #4
    c2e4:	4413      	add	r3, r2
    c2e6:	3308      	adds	r3, #8
    c2e8:	460a      	mov	r2, r1
    c2ea:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    c2ec:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c2f0:	9a04      	ldr	r2, [sp, #16]
    c2f2:	7ad1      	ldrb	r1, [r2, #11]
    c2f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c2f6:	011b      	lsls	r3, r3, #4
    c2f8:	4413      	add	r3, r2
    c2fa:	3309      	adds	r3, #9
    c2fc:	460a      	mov	r2, r1
    c2fe:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    c300:	9b04      	ldr	r3, [sp, #16]
    c302:	685b      	ldr	r3, [r3, #4]
    c304:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    c306:	9b04      	ldr	r3, [sp, #16]
    c308:	681b      	ldr	r3, [r3, #0]
    c30a:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    c30c:	9b04      	ldr	r3, [sp, #16]
    c30e:	7a1b      	ldrb	r3, [r3, #8]
    c310:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    c314:	9b04      	ldr	r3, [sp, #16]
    c316:	7a5b      	ldrb	r3, [r3, #9]
    c318:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    c31c:	9b04      	ldr	r3, [sp, #16]
    c31e:	7a9b      	ldrb	r3, [r3, #10]
    c320:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    c324:	9b04      	ldr	r3, [sp, #16]
    c326:	7adb      	ldrb	r3, [r3, #11]
    c328:	2b00      	cmp	r3, #0
    c32a:	d002      	beq.n	c332 <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    c32c:	231c      	movs	r3, #28
    c32e:	9306      	str	r3, [sp, #24]
    c330:	e001      	b.n	c336 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    c332:	230c      	movs	r3, #12
    c334:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c336:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c33a:	4619      	mov	r1, r3
    c33c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c33e:	f002 fa89 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    c342:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    c344:	a906      	add	r1, sp, #24
    c346:	2300      	movs	r3, #0
    c348:	9300      	str	r3, [sp, #0]
    c34a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c34c:	9a03      	ldr	r2, [sp, #12]
    c34e:	980a      	ldr	r0, [sp, #40]	; 0x28
    c350:	f002 ffd2 	bl	f2f8 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    c356:	4618      	mov	r0, r3
    c358:	b00f      	add	sp, #60	; 0x3c
    c35a:	f85d fb04 	ldr.w	pc, [sp], #4
    c35e:	bf00      	nop
    c360:	1fff935c 	.word	0x1fff935c
    c364:	000185a4 	.word	0x000185a4

0000c368 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    c368:	b500      	push	{lr}
    c36a:	b089      	sub	sp, #36	; 0x24
    c36c:	4603      	mov	r3, r0
    c36e:	9102      	str	r1, [sp, #8]
    c370:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    c374:	2300      	movs	r3, #0
    c376:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    c378:	2300      	movs	r3, #0
    c37a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c37c:	2300      	movs	r3, #0
    c37e:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    c380:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c384:	4a26      	ldr	r2, [pc, #152]	; (c420 <FlexCAN_StartRxMessageFifoData+0xb8>)
    c386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c38a:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    c38c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c390:	4a24      	ldr	r2, [pc, #144]	; (c424 <FlexCAN_StartRxMessageFifoData+0xbc>)
    c392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c396:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    c398:	9b05      	ldr	r3, [sp, #20]
    c39a:	685b      	ldr	r3, [r3, #4]
    c39c:	2b01      	cmp	r3, #1
    c39e:	d102      	bne.n	c3a6 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    c3a0:	2302      	movs	r3, #2
    c3a2:	9307      	str	r3, [sp, #28]
    c3a4:	e036      	b.n	c414 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    c3a6:	9b05      	ldr	r3, [sp, #20]
    c3a8:	2201      	movs	r2, #1
    c3aa:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    c3ac:	9b05      	ldr	r3, [sp, #20]
    c3ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c3b2:	2b01      	cmp	r3, #1
    c3b4:	d102      	bne.n	c3bc <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c3b6:	9b05      	ldr	r3, [sp, #20]
    c3b8:	2201      	movs	r2, #1
    c3ba:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    c3bc:	9b05      	ldr	r3, [sp, #20]
    c3be:	9a02      	ldr	r2, [sp, #8]
    c3c0:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    c3c2:	9b05      	ldr	r3, [sp, #20]
    c3c4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c3c8:	2b00      	cmp	r3, #0
    c3ca:	d123      	bne.n	c414 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    c3cc:	9b05      	ldr	r3, [sp, #20]
    c3ce:	2200      	movs	r2, #0
    c3d0:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    c3d2:	9b05      	ldr	r3, [sp, #20]
    c3d4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c3d8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c3dc:	9300      	str	r3, [sp, #0]
    c3de:	2301      	movs	r3, #1
    c3e0:	2206      	movs	r2, #6
    c3e2:	9806      	ldr	r0, [sp, #24]
    c3e4:	f002 fdbe 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    c3e8:	9b05      	ldr	r3, [sp, #20]
    c3ea:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c3ee:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c3f2:	9300      	str	r3, [sp, #0]
    c3f4:	2301      	movs	r3, #1
    c3f6:	2207      	movs	r2, #7
    c3f8:	9806      	ldr	r0, [sp, #24]
    c3fa:	f002 fdb3 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    c3fe:	9b05      	ldr	r3, [sp, #20]
    c400:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c404:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c408:	9300      	str	r3, [sp, #0]
    c40a:	2301      	movs	r3, #1
    c40c:	2205      	movs	r2, #5
    c40e:	9806      	ldr	r0, [sp, #24]
    c410:	f002 fda8 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c414:	9b07      	ldr	r3, [sp, #28]
}
    c416:	4618      	mov	r0, r3
    c418:	b009      	add	sp, #36	; 0x24
    c41a:	f85d fb04 	ldr.w	pc, [sp], #4
    c41e:	bf00      	nop
    c420:	000185a4 	.word	0x000185a4
    c424:	1fff935c 	.word	0x1fff935c

0000c428 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    c428:	b510      	push	{r4, lr}
    c42a:	b09e      	sub	sp, #120	; 0x78
    c42c:	4603      	mov	r3, r0
    c42e:	9102      	str	r1, [sp, #8]
    c430:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c434:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c438:	4a70      	ldr	r2, [pc, #448]	; (c5fc <FlexCAN_IRQHandlerRxMB+0x1d4>)
    c43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c43e:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c440:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c444:	4a6e      	ldr	r2, [pc, #440]	; (c600 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    c446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c44a:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    c44c:	2300      	movs	r3, #0
    c44e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    c452:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c454:	9b02      	ldr	r3, [sp, #8]
    c456:	011b      	lsls	r3, r3, #4
    c458:	4413      	add	r3, r2
    c45a:	681b      	ldr	r3, [r3, #0]
    c45c:	2b00      	cmp	r3, #0
    c45e:	d105      	bne.n	c46c <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    c460:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c462:	9b02      	ldr	r3, [sp, #8]
    c464:	011b      	lsls	r3, r3, #4
    c466:	4413      	add	r3, r2
    c468:	aa05      	add	r2, sp, #20
    c46a:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    c46c:	2300      	movs	r3, #0
    c46e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    c472:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c474:	9b02      	ldr	r3, [sp, #8]
    c476:	011b      	lsls	r3, r3, #4
    c478:	4413      	add	r3, r2
    c47a:	3308      	adds	r3, #8
    c47c:	781b      	ldrb	r3, [r3, #0]
    c47e:	2b00      	cmp	r3, #0
    c480:	d008      	beq.n	c494 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    c482:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c484:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c488:	2b00      	cmp	r3, #0
    c48a:	d003      	beq.n	c494 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    c48c:	2301      	movs	r3, #1
    c48e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    c492:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    c494:	9902      	ldr	r1, [sp, #8]
    c496:	981c      	ldr	r0, [sp, #112]	; 0x70
    c498:	f002 fd55 	bl	ef46 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    c49c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c49e:	9b02      	ldr	r3, [sp, #8]
    c4a0:	011b      	lsls	r3, r3, #4
    c4a2:	4413      	add	r3, r2
    c4a4:	681b      	ldr	r3, [r3, #0]
    c4a6:	461a      	mov	r2, r3
    c4a8:	9902      	ldr	r1, [sp, #8]
    c4aa:	981c      	ldr	r0, [sp, #112]	; 0x70
    c4ac:	f002 fe7a 	bl	f1a4 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c4b0:	9902      	ldr	r1, [sp, #8]
    c4b2:	981c      	ldr	r0, [sp, #112]	; 0x70
    c4b4:	f7ff faee 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    c4b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c4ba:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c4be:	2b00      	cmp	r3, #0
    c4c0:	d032      	beq.n	c528 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c4c2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4c4:	9b02      	ldr	r3, [sp, #8]
    c4c6:	011b      	lsls	r3, r3, #4
    c4c8:	4413      	add	r3, r2
    c4ca:	681b      	ldr	r3, [r3, #0]
    c4cc:	681b      	ldr	r3, [r3, #0]
    c4ce:	0e1b      	lsrs	r3, r3, #24
    c4d0:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    c4d4:	2b02      	cmp	r3, #2
    c4d6:	d027      	beq.n	c528 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c4d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4da:	9b02      	ldr	r3, [sp, #8]
    c4dc:	011b      	lsls	r3, r3, #4
    c4de:	4413      	add	r3, r2
    c4e0:	681b      	ldr	r3, [r3, #0]
    c4e2:	681b      	ldr	r3, [r3, #0]
    c4e4:	0e1b      	lsrs	r3, r3, #24
    c4e6:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c4ea:	2b04      	cmp	r3, #4
    c4ec:	d01c      	beq.n	c528 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    c4ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4f0:	9b02      	ldr	r3, [sp, #8]
    c4f2:	011b      	lsls	r3, r3, #4
    c4f4:	4413      	add	r3, r2
    c4f6:	681b      	ldr	r3, [r3, #0]
    c4f8:	681b      	ldr	r3, [r3, #0]
    c4fa:	0e1b      	lsrs	r3, r3, #24
    c4fc:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c500:	2b06      	cmp	r3, #6
    c502:	d011      	beq.n	c528 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c504:	9902      	ldr	r1, [sp, #8]
    c506:	981c      	ldr	r0, [sp, #112]	; 0x70
    c508:	f002 f9a4 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    c50c:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    c50e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c510:	681b      	ldr	r3, [r3, #0]
    c512:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c516:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c518:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c51a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c51c:	681b      	ldr	r3, [r3, #0]
    c51e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    c522:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c524:	601a      	str	r2, [r3, #0]
    {
    c526:	e002      	b.n	c52e <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    c528:	981c      	ldr	r0, [sp, #112]	; 0x70
    c52a:	f7ff faac 	bl	ba86 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    c52e:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    c532:	2b00      	cmp	r3, #0
    c534:	d000      	beq.n	c538 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    c536:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c538:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c53a:	9b02      	ldr	r3, [sp, #8]
    c53c:	011b      	lsls	r3, r3, #4
    c53e:	4413      	add	r3, r2
    c540:	3304      	adds	r3, #4
    c542:	2200      	movs	r2, #0
    c544:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    c546:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c548:	9b02      	ldr	r3, [sp, #8]
    c54a:	011b      	lsls	r3, r3, #4
    c54c:	4413      	add	r3, r2
    c54e:	3308      	adds	r3, #8
    c550:	781b      	ldrb	r3, [r3, #0]
    c552:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    c556:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c558:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c55c:	2b00      	cmp	r3, #0
    c55e:	d008      	beq.n	c572 <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    c560:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c562:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c566:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c56a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c56c:	9a02      	ldr	r2, [sp, #8]
    c56e:	2100      	movs	r1, #0
    c570:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    c572:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c574:	9b02      	ldr	r3, [sp, #8]
    c576:	011b      	lsls	r3, r3, #4
    c578:	4413      	add	r3, r2
    c57a:	3304      	adds	r3, #4
    c57c:	681b      	ldr	r3, [r3, #0]
    c57e:	2b00      	cmp	r3, #0
    c580:	d11e      	bne.n	c5c0 <FlexCAN_IRQHandlerRxMB+0x198>
    c582:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c584:	9b02      	ldr	r3, [sp, #8]
    c586:	011b      	lsls	r3, r3, #4
    c588:	4413      	add	r3, r2
    c58a:	3308      	adds	r3, #8
    c58c:	781b      	ldrb	r3, [r3, #0]
    c58e:	f083 0301 	eor.w	r3, r3, #1
    c592:	b2db      	uxtb	r3, r3
    c594:	2b00      	cmp	r3, #0
    c596:	d013      	beq.n	c5c0 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    c598:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c59a:	9b02      	ldr	r3, [sp, #8]
    c59c:	011b      	lsls	r3, r3, #4
    c59e:	4413      	add	r3, r2
    c5a0:	3308      	adds	r3, #8
    c5a2:	2201      	movs	r2, #1
    c5a4:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c5a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c5a8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c5ac:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c5b0:	9300      	str	r3, [sp, #0]
    c5b2:	2300      	movs	r3, #0
    c5b4:	9a02      	ldr	r2, [sp, #8]
    c5b6:	981c      	ldr	r0, [sp, #112]	; 0x70
    c5b8:	f002 fcd4 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
    c5bc:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c5be:	e019      	b.n	c5f4 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    c5c0:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    c5c4:	f083 0301 	eor.w	r3, r3, #1
    c5c8:	b2db      	uxtb	r3, r3
    c5ca:	2b00      	cmp	r3, #0
    c5cc:	d012      	beq.n	c5f4 <FlexCAN_IRQHandlerRxMB+0x1cc>
    c5ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c5d0:	9b02      	ldr	r3, [sp, #8]
    c5d2:	011b      	lsls	r3, r3, #4
    c5d4:	4413      	add	r3, r2
    c5d6:	3308      	adds	r3, #8
    c5d8:	781b      	ldrb	r3, [r3, #0]
    c5da:	2b00      	cmp	r3, #0
    c5dc:	d00a      	beq.n	c5f4 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c5de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c5e0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c5e4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c5e8:	9300      	str	r3, [sp, #0]
    c5ea:	2300      	movs	r3, #0
    c5ec:	9a02      	ldr	r2, [sp, #8]
    c5ee:	981c      	ldr	r0, [sp, #112]	; 0x70
    c5f0:	f002 fcb8 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
}
    c5f4:	bf00      	nop
    c5f6:	b01e      	add	sp, #120	; 0x78
    c5f8:	bd10      	pop	{r4, pc}
    c5fa:	bf00      	nop
    c5fc:	000185a4 	.word	0x000185a4
    c600:	1fff935c 	.word	0x1fff935c

0000c604 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    c604:	b510      	push	{r4, lr}
    c606:	b09a      	sub	sp, #104	; 0x68
    c608:	4603      	mov	r3, r0
    c60a:	9102      	str	r1, [sp, #8]
    c60c:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c610:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c614:	4a46      	ldr	r2, [pc, #280]	; (c730 <FlexCAN_IRQHandlerTxMB+0x12c>)
    c616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c61a:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c61c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c620:	4a44      	ldr	r2, [pc, #272]	; (c734 <FlexCAN_IRQHandlerTxMB+0x130>)
    c622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c626:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    c628:	2300      	movs	r3, #0
    c62a:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    c62c:	2300      	movs	r3, #0
    c62e:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    c630:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c632:	9b02      	ldr	r3, [sp, #8]
    c634:	011b      	lsls	r3, r3, #4
    c636:	4413      	add	r3, r2
    c638:	3309      	adds	r3, #9
    c63a:	781b      	ldrb	r3, [r3, #0]
    c63c:	2b00      	cmp	r3, #0
    c63e:	d01e      	beq.n	c67e <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    c640:	9902      	ldr	r1, [sp, #8]
    c642:	9819      	ldr	r0, [sp, #100]	; 0x64
    c644:	f002 fc7f 	bl	ef46 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    c648:	ab04      	add	r3, sp, #16
    c64a:	461a      	mov	r2, r3
    c64c:	9902      	ldr	r1, [sp, #8]
    c64e:	9819      	ldr	r0, [sp, #100]	; 0x64
    c650:	f002 fda8 	bl	f1a4 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    c654:	9819      	ldr	r0, [sp, #100]	; 0x64
    c656:	f7ff fa16 	bl	ba86 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    c65a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c65c:	9918      	ldr	r1, [sp, #96]	; 0x60
    c65e:	9b02      	ldr	r3, [sp, #8]
    c660:	011b      	lsls	r3, r3, #4
    c662:	440b      	add	r3, r1
    c664:	330c      	adds	r3, #12
    c666:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c668:	9b04      	ldr	r3, [sp, #16]
    c66a:	0e1b      	lsrs	r3, r3, #24
    c66c:	f003 030f 	and.w	r3, r3, #15
    c670:	2b04      	cmp	r3, #4
    c672:	d116      	bne.n	c6a2 <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c674:	9902      	ldr	r1, [sp, #8]
    c676:	9819      	ldr	r0, [sp, #100]	; 0x64
    c678:	f7ff fa0c 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
    c67c:	e011      	b.n	c6a2 <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    c67e:	9902      	ldr	r1, [sp, #8]
    c680:	9819      	ldr	r0, [sp, #100]	; 0x64
    c682:	f002 fd7b 	bl	f17c <FlexCAN_GetMsgBuffTimestamp>
    c686:	4601      	mov	r1, r0
    c688:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c68a:	9b02      	ldr	r3, [sp, #8]
    c68c:	011b      	lsls	r3, r3, #4
    c68e:	4413      	add	r3, r2
    c690:	330c      	adds	r3, #12
    c692:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    c694:	9819      	ldr	r0, [sp, #100]	; 0x64
    c696:	f7ff f9f6 	bl	ba86 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c69a:	9902      	ldr	r1, [sp, #8]
    c69c:	9819      	ldr	r0, [sp, #100]	; 0x64
    c69e:	f7ff f9f9 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    c6a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c6a4:	9b02      	ldr	r3, [sp, #8]
    c6a6:	011b      	lsls	r3, r3, #4
    c6a8:	4413      	add	r3, r2
    c6aa:	3304      	adds	r3, #4
    c6ac:	2200      	movs	r2, #0
    c6ae:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    c6b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c6b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c6b6:	2b00      	cmp	r3, #0
    c6b8:	d008      	beq.n	c6cc <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    c6ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c6bc:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c6c0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c6c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c6c6:	9a02      	ldr	r2, [sp, #8]
    c6c8:	2104      	movs	r1, #4
    c6ca:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    c6cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c6ce:	9b02      	ldr	r3, [sp, #8]
    c6d0:	011b      	lsls	r3, r3, #4
    c6d2:	4413      	add	r3, r2
    c6d4:	3304      	adds	r3, #4
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	2b00      	cmp	r3, #0
    c6da:	d112      	bne.n	c702 <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    c6dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c6de:	9b02      	ldr	r3, [sp, #8]
    c6e0:	011b      	lsls	r3, r3, #4
    c6e2:	4413      	add	r3, r2
    c6e4:	3308      	adds	r3, #8
    c6e6:	2201      	movs	r2, #1
    c6e8:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c6ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c6ec:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c6f0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c6f4:	9300      	str	r3, [sp, #0]
    c6f6:	2300      	movs	r3, #0
    c6f8:	9a02      	ldr	r2, [sp, #8]
    c6fa:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6fc:	f002 fc32 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c700:	e012      	b.n	c728 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    c702:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c704:	9b02      	ldr	r3, [sp, #8]
    c706:	011b      	lsls	r3, r3, #4
    c708:	4413      	add	r3, r2
    c70a:	3308      	adds	r3, #8
    c70c:	781b      	ldrb	r3, [r3, #0]
    c70e:	2b00      	cmp	r3, #0
    c710:	d00a      	beq.n	c728 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c712:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c714:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c718:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c71c:	9300      	str	r3, [sp, #0]
    c71e:	2300      	movs	r3, #0
    c720:	9a02      	ldr	r2, [sp, #8]
    c722:	9819      	ldr	r0, [sp, #100]	; 0x64
    c724:	f002 fc1e 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
}
    c728:	bf00      	nop
    c72a:	b01a      	add	sp, #104	; 0x68
    c72c:	bd10      	pop	{r4, pc}
    c72e:	bf00      	nop
    c730:	000185a4 	.word	0x000185a4
    c734:	1fff935c 	.word	0x1fff935c

0000c738 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    c738:	b510      	push	{r4, lr}
    c73a:	b098      	sub	sp, #96	; 0x60
    c73c:	4603      	mov	r3, r0
    c73e:	9100      	str	r1, [sp, #0]
    c740:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c744:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c748:	4a3c      	ldr	r2, [pc, #240]	; (c83c <FlexCAN_IRQHandlerRxFIFO+0x104>)
    c74a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c74e:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c750:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c754:	4a3a      	ldr	r2, [pc, #232]	; (c840 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    c756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c75a:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    c75c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c75e:	681b      	ldr	r3, [r3, #0]
    c760:	2b00      	cmp	r3, #0
    c762:	d102      	bne.n	c76a <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    c764:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c766:	aa02      	add	r2, sp, #8
    c768:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    c76a:	9b00      	ldr	r3, [sp, #0]
    c76c:	2b07      	cmp	r3, #7
    c76e:	d048      	beq.n	c802 <FlexCAN_IRQHandlerRxFIFO+0xca>
    c770:	9b00      	ldr	r3, [sp, #0]
    c772:	2b07      	cmp	r3, #7
    c774:	d858      	bhi.n	c828 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    c776:	9b00      	ldr	r3, [sp, #0]
    c778:	2b05      	cmp	r3, #5
    c77a:	d003      	beq.n	c784 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    c77c:	9b00      	ldr	r3, [sp, #0]
    c77e:	2b06      	cmp	r3, #6
    c780:	d02c      	beq.n	c7dc <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    c782:	e051      	b.n	c828 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c784:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c786:	685b      	ldr	r3, [r3, #4]
    c788:	2b01      	cmp	r3, #1
    c78a:	d14f      	bne.n	c82c <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    c78c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c78e:	681b      	ldr	r3, [r3, #0]
    c790:	4619      	mov	r1, r3
    c792:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c794:	f003 f98d 	bl	fab2 <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c798:	9900      	ldr	r1, [sp, #0]
    c79a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c79c:	f7ff f97a 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c7a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7a2:	2200      	movs	r2, #0
    c7a4:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    c7a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c7ac:	2b00      	cmp	r3, #0
    c7ae:	d008      	beq.n	c7c2 <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c7b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7b2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c7b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c7ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7bc:	2200      	movs	r2, #0
    c7be:	2101      	movs	r1, #1
    c7c0:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c7c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7c4:	685b      	ldr	r3, [r3, #4]
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	d130      	bne.n	c82c <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c7ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7cc:	2201      	movs	r2, #1
    c7ce:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    c7d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7d4:	4618      	mov	r0, r3
    c7d6:	f000 fc61 	bl	d09c <FlexCAN_CompleteRxMessageFifoData>
            break;
    c7da:	e027      	b.n	c82c <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c7dc:	9900      	ldr	r1, [sp, #0]
    c7de:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c7e0:	f7ff f958 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c7e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c7ea:	2b00      	cmp	r3, #0
    c7ec:	d020      	beq.n	c830 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c7ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7f0:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c7f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c7f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7fa:	2200      	movs	r2, #0
    c7fc:	2102      	movs	r1, #2
    c7fe:	47a0      	blx	r4
            break;
    c800:	e016      	b.n	c830 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c802:	9900      	ldr	r1, [sp, #0]
    c804:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c806:	f7ff f945 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c80a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c80c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c810:	2b00      	cmp	r3, #0
    c812:	d00f      	beq.n	c834 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c814:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c816:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c81a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c81e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c820:	2200      	movs	r2, #0
    c822:	2103      	movs	r1, #3
    c824:	47a0      	blx	r4
            break;
    c826:	e005      	b.n	c834 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    c828:	bf00      	nop
    c82a:	e004      	b.n	c836 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c82c:	bf00      	nop
    c82e:	e002      	b.n	c836 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c830:	bf00      	nop
    c832:	e000      	b.n	c836 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c834:	bf00      	nop
    }
}
    c836:	bf00      	nop
    c838:	b018      	add	sp, #96	; 0x60
    c83a:	bd10      	pop	{r4, pc}
    c83c:	000185a4 	.word	0x000185a4
    c840:	1fff935c 	.word	0x1fff935c

0000c844 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c844:	b500      	push	{lr}
    c846:	b08b      	sub	sp, #44	; 0x2c
    c848:	4603      	mov	r3, r0
    c84a:	460a      	mov	r2, r1
    c84c:	f88d 3007 	strb.w	r3, [sp, #7]
    c850:	4613      	mov	r3, r2
    c852:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c856:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c85a:	4a3c      	ldr	r2, [pc, #240]	; (c94c <FlexCAN_AbortTxTransfer+0x108>)
    c85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c860:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c862:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c866:	4a3a      	ldr	r2, [pc, #232]	; (c950 <FlexCAN_AbortTxTransfer+0x10c>)
    c868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c86c:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c86e:	2300      	movs	r3, #0
    c870:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    c872:	2300      	movs	r3, #0
    c874:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c876:	2300      	movs	r3, #0
    c878:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    c87a:	2300      	movs	r3, #0
    c87c:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    c87e:	2300      	movs	r3, #0
    c880:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    c882:	2300      	movs	r3, #0
    c884:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c886:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c88a:	4619      	mov	r1, r3
    c88c:	9807      	ldr	r0, [sp, #28]
    c88e:	f001 ffe1 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    c892:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    c894:	9b03      	ldr	r3, [sp, #12]
    c896:	681b      	ldr	r3, [r3, #0]
    c898:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c89a:	9b05      	ldr	r3, [sp, #20]
    c89c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c8a0:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c8a2:	9b05      	ldr	r3, [sp, #20]
    c8a4:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    c8a8:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    c8aa:	9b03      	ldr	r3, [sp, #12]
    c8ac:	9a05      	ldr	r2, [sp, #20]
    c8ae:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c8b0:	2100      	movs	r1, #0
    c8b2:	4828      	ldr	r0, [pc, #160]	; (c954 <FlexCAN_AbortTxTransfer+0x110>)
    c8b4:	f7f5 fb26 	bl	1f04 <OsIf_MicrosToTicks>
    c8b8:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c8ba:	2000      	movs	r0, #0
    c8bc:	f7f5 fad6 	bl	1e6c <OsIf_GetCounter>
    c8c0:	4603      	mov	r3, r0
    c8c2:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c8c4:	e00f      	b.n	c8e6 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c8c6:	ab02      	add	r3, sp, #8
    c8c8:	2100      	movs	r1, #0
    c8ca:	4618      	mov	r0, r3
    c8cc:	f7f5 fae7 	bl	1e9e <OsIf_GetElapsed>
    c8d0:	4602      	mov	r2, r0
    c8d2:	9b08      	ldr	r3, [sp, #32]
    c8d4:	4413      	add	r3, r2
    c8d6:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    c8d8:	9a08      	ldr	r2, [sp, #32]
    c8da:	9b04      	ldr	r3, [sp, #16]
    c8dc:	429a      	cmp	r2, r3
    c8de:	d302      	bcc.n	c8e6 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    c8e0:	2303      	movs	r3, #3
    c8e2:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    c8e4:	e008      	b.n	c8f8 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c8e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c8ea:	4619      	mov	r1, r3
    c8ec:	9807      	ldr	r0, [sp, #28]
    c8ee:	f7ff f8e4 	bl	baba <FlexCAN_GetBuffStatusFlag>
    c8f2:	4603      	mov	r3, r0
    c8f4:	2b00      	cmp	r3, #0
    c8f6:	d0e6      	beq.n	c8c6 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    c8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8fa:	2b03      	cmp	r3, #3
    c8fc:	d012      	beq.n	c924 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    c8fe:	9b03      	ldr	r3, [sp, #12]
    c900:	681b      	ldr	r3, [r3, #0]
    c902:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c904:	9b05      	ldr	r3, [sp, #20]
    c906:	0e1b      	lsrs	r3, r3, #24
    c908:	f003 030f 	and.w	r3, r3, #15
    c90c:	2b08      	cmp	r3, #8
    c90e:	d101      	bne.n	c914 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    c910:	2305      	movs	r3, #5
    c912:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c914:	9b05      	ldr	r3, [sp, #20]
    c916:	0e1b      	lsrs	r3, r3, #24
    c918:	f003 030f 	and.w	r3, r3, #15
    c91c:	2b09      	cmp	r3, #9
    c91e:	d101      	bne.n	c924 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    c920:	2300      	movs	r3, #0
    c922:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    c924:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c928:	4619      	mov	r1, r3
    c92a:	9807      	ldr	r0, [sp, #28]
    c92c:	f7ff f8b2 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c930:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c934:	9a06      	ldr	r2, [sp, #24]
    c936:	011b      	lsls	r3, r3, #4
    c938:	4413      	add	r3, r2
    c93a:	3304      	adds	r3, #4
    c93c:	2200      	movs	r2, #0
    c93e:	601a      	str	r2, [r3, #0]

    return result;
    c940:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c942:	4618      	mov	r0, r3
    c944:	b00b      	add	sp, #44	; 0x2c
    c946:	f85d fb04 	ldr.w	pc, [sp], #4
    c94a:	bf00      	nop
    c94c:	000185a4 	.word	0x000185a4
    c950:	1fff935c 	.word	0x1fff935c
    c954:	000f4240 	.word	0x000f4240

0000c958 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c958:	b500      	push	{lr}
    c95a:	b089      	sub	sp, #36	; 0x24
    c95c:	4603      	mov	r3, r0
    c95e:	460a      	mov	r2, r1
    c960:	f88d 3007 	strb.w	r3, [sp, #7]
    c964:	4613      	mov	r3, r2
    c966:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c96a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c96e:	4a41      	ldr	r2, [pc, #260]	; (ca74 <FlexCAN_AbortRxTransfer+0x11c>)
    c970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c974:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c976:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c97a:	4a3f      	ldr	r2, [pc, #252]	; (ca78 <FlexCAN_AbortRxTransfer+0x120>)
    c97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c980:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    c982:	2300      	movs	r3, #0
    c984:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    c988:	2300      	movs	r3, #0
    c98a:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    c98c:	2300      	movs	r3, #0
    c98e:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    c990:	2300      	movs	r3, #0
    c992:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c994:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c998:	9a06      	ldr	r2, [sp, #24]
    c99a:	011b      	lsls	r3, r3, #4
    c99c:	4413      	add	r3, r2
    c99e:	3304      	adds	r3, #4
    c9a0:	2200      	movs	r2, #0
    c9a2:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    c9a4:	9b06      	ldr	r3, [sp, #24]
    c9a6:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c9aa:	2b00      	cmp	r3, #0
    c9ac:	d03c      	beq.n	ca28 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    c9ae:	9b07      	ldr	r3, [sp, #28]
    c9b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c9b2:	0e1b      	lsrs	r3, r3, #24
    c9b4:	b2db      	uxtb	r3, r3
    c9b6:	f003 030f 	and.w	r3, r3, #15
    c9ba:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    c9be:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c9c2:	4618      	mov	r0, r3
    c9c4:	f7ff f9f3 	bl	bdae <RxFifoOcuppiedLastMsgBuff>
    c9c8:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    c9ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9ce:	9a04      	ldr	r2, [sp, #16]
    c9d0:	429a      	cmp	r2, r3
    c9d2:	d21b      	bcs.n	ca0c <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c9d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9d8:	4619      	mov	r1, r3
    c9da:	9807      	ldr	r0, [sp, #28]
    c9dc:	f001 ff3a 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    c9e0:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    c9e2:	9b02      	ldr	r3, [sp, #8]
    c9e4:	681b      	ldr	r3, [r3, #0]
    c9e6:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    c9e8:	9b03      	ldr	r3, [sp, #12]
    c9ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c9ee:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    c9f0:	9b02      	ldr	r3, [sp, #8]
    c9f2:	9a03      	ldr	r2, [sp, #12]
    c9f4:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c9f6:	9b03      	ldr	r3, [sp, #12]
    c9f8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c9fc:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c9fe:	9b03      	ldr	r3, [sp, #12]
    ca00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    ca04:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    ca06:	9b02      	ldr	r3, [sp, #8]
    ca08:	9a03      	ldr	r2, [sp, #12]
    ca0a:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    ca0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca10:	2b00      	cmp	r3, #0
    ca12:	d125      	bne.n	ca60 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    ca14:	9b06      	ldr	r3, [sp, #24]
    ca16:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    ca1a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    ca1e:	2205      	movs	r2, #5
    ca20:	9807      	ldr	r0, [sp, #28]
    ca22:	f002 faf5 	bl	f010 <FLEXCAN_ClearMsgBuffIntCmd>
    ca26:	e01b      	b.n	ca60 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    ca28:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca2c:	4619      	mov	r1, r3
    ca2e:	9807      	ldr	r0, [sp, #28]
    ca30:	f001 ff10 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    ca34:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    ca36:	9b02      	ldr	r3, [sp, #8]
    ca38:	681b      	ldr	r3, [r3, #0]
    ca3a:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    ca3c:	9b03      	ldr	r3, [sp, #12]
    ca3e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ca42:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    ca44:	9b02      	ldr	r3, [sp, #8]
    ca46:	9a03      	ldr	r2, [sp, #12]
    ca48:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    ca4a:	9b03      	ldr	r3, [sp, #12]
    ca4c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ca50:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    ca52:	9b03      	ldr	r3, [sp, #12]
    ca54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    ca58:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    ca5a:	9b02      	ldr	r3, [sp, #8]
    ca5c:	9a03      	ldr	r2, [sp, #12]
    ca5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    ca60:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca64:	4619      	mov	r1, r3
    ca66:	9807      	ldr	r0, [sp, #28]
    ca68:	f7ff f814 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    ca6c:	bf00      	nop
    ca6e:	b009      	add	sp, #36	; 0x24
    ca70:	f85d fb04 	ldr.w	pc, [sp], #4
    ca74:	000185a4 	.word	0x000185a4
    ca78:	1fff935c 	.word	0x1fff935c

0000ca7c <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    ca7c:	b500      	push	{lr}
    ca7e:	b089      	sub	sp, #36	; 0x24
    ca80:	4603      	mov	r3, r0
    ca82:	9102      	str	r1, [sp, #8]
    ca84:	9201      	str	r2, [sp, #4]
    ca86:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    ca8a:	2300      	movs	r3, #0
    ca8c:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    ca8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca92:	4a36      	ldr	r2, [pc, #216]	; (cb6c <FlexCAN_Ip_Init_Privileged+0xf0>)
    ca94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca98:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    ca9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca9e:	9a01      	ldr	r2, [sp, #4]
    caa0:	9905      	ldr	r1, [sp, #20]
    caa2:	4618      	mov	r0, r3
    caa4:	f7ff fa84 	bl	bfb0 <FlexCAN_InitController>
    caa8:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    caaa:	9b06      	ldr	r3, [sp, #24]
    caac:	2b00      	cmp	r3, #0
    caae:	d158      	bne.n	cb62 <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    cab0:	9901      	ldr	r1, [sp, #4]
    cab2:	9805      	ldr	r0, [sp, #20]
    cab4:	f7ff fad6 	bl	c064 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    cab8:	9b01      	ldr	r3, [sp, #4]
    caba:	68db      	ldr	r3, [r3, #12]
    cabc:	4619      	mov	r1, r3
    cabe:	9805      	ldr	r0, [sp, #20]
    cac0:	f002 fdb8 	bl	f634 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    cac4:	2300      	movs	r3, #0
    cac6:	9307      	str	r3, [sp, #28]
    cac8:	e01d      	b.n	cb06 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    caca:	9a02      	ldr	r2, [sp, #8]
    cacc:	9b07      	ldr	r3, [sp, #28]
    cace:	011b      	lsls	r3, r3, #4
    cad0:	4413      	add	r3, r2
    cad2:	3308      	adds	r3, #8
    cad4:	2201      	movs	r2, #1
    cad6:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    cad8:	9a02      	ldr	r2, [sp, #8]
    cada:	9b07      	ldr	r3, [sp, #28]
    cadc:	011b      	lsls	r3, r3, #4
    cade:	4413      	add	r3, r2
    cae0:	2200      	movs	r2, #0
    cae2:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    cae4:	9a02      	ldr	r2, [sp, #8]
    cae6:	9b07      	ldr	r3, [sp, #28]
    cae8:	011b      	lsls	r3, r3, #4
    caea:	4413      	add	r3, r2
    caec:	3304      	adds	r3, #4
    caee:	2200      	movs	r2, #0
    caf0:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    caf2:	9a02      	ldr	r2, [sp, #8]
    caf4:	9b07      	ldr	r3, [sp, #28]
    caf6:	011b      	lsls	r3, r3, #4
    caf8:	4413      	add	r3, r2
    cafa:	330c      	adds	r3, #12
    cafc:	2200      	movs	r2, #0
    cafe:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    cb00:	9b07      	ldr	r3, [sp, #28]
    cb02:	3301      	adds	r3, #1
    cb04:	9307      	str	r3, [sp, #28]
    cb06:	9b07      	ldr	r3, [sp, #28]
    cb08:	2b1f      	cmp	r3, #31
    cb0a:	d9de      	bls.n	caca <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    cb0c:	9b01      	ldr	r3, [sp, #4]
    cb0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    cb10:	9b02      	ldr	r3, [sp, #8]
    cb12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    cb16:	9b01      	ldr	r3, [sp, #4]
    cb18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    cb1a:	9b02      	ldr	r3, [sp, #8]
    cb1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    cb20:	9b02      	ldr	r3, [sp, #8]
    cb22:	2200      	movs	r2, #0
    cb24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    cb28:	9b01      	ldr	r3, [sp, #4]
    cb2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    cb2c:	9b02      	ldr	r3, [sp, #8]
    cb2e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    cb32:	9b02      	ldr	r3, [sp, #8]
    cb34:	2200      	movs	r2, #0
    cb36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    cb3a:	9b01      	ldr	r3, [sp, #4]
    cb3c:	7a1a      	ldrb	r2, [r3, #8]
    cb3e:	9b02      	ldr	r3, [sp, #8]
    cb40:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    cb44:	9b01      	ldr	r3, [sp, #4]
    cb46:	681a      	ldr	r2, [r3, #0]
    cb48:	9b02      	ldr	r3, [sp, #8]
    cb4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    cb4e:	9b02      	ldr	r3, [sp, #8]
    cb50:	2201      	movs	r2, #1
    cb52:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    cb56:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cb5a:	4905      	ldr	r1, [pc, #20]	; (cb70 <FlexCAN_Ip_Init_Privileged+0xf4>)
    cb5c:	9a02      	ldr	r2, [sp, #8]
    cb5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    cb62:	9b06      	ldr	r3, [sp, #24]
}
    cb64:	4618      	mov	r0, r3
    cb66:	b009      	add	sp, #36	; 0x24
    cb68:	f85d fb04 	ldr.w	pc, [sp], #4
    cb6c:	000185a4 	.word	0x000185a4
    cb70:	1fff935c 	.word	0x1fff935c

0000cb74 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    cb74:	b500      	push	{lr}
    cb76:	b08b      	sub	sp, #44	; 0x2c
    cb78:	9204      	str	r2, [sp, #16]
    cb7a:	9303      	str	r3, [sp, #12]
    cb7c:	4603      	mov	r3, r0
    cb7e:	f88d 3017 	strb.w	r3, [sp, #23]
    cb82:	460b      	mov	r3, r1
    cb84:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    cb88:	2301      	movs	r3, #1
    cb8a:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cb8c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cb90:	4a1c      	ldr	r2, [pc, #112]	; (cc04 <FlexCAN_Ip_Send+0x90>)
    cb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb96:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cb98:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cb9c:	4a1a      	ldr	r2, [pc, #104]	; (cc08 <FlexCAN_Ip_Send+0x94>)
    cb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cba2:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    cba4:	9808      	ldr	r0, [sp, #32]
    cba6:	f7ff f8f4 	bl	bd92 <FlexCAN_IsListenOnlyModeEnabled>
    cbaa:	4603      	mov	r3, r0
    cbac:	f083 0301 	eor.w	r3, r3, #1
    cbb0:	b2db      	uxtb	r3, r3
    cbb2:	2b00      	cmp	r3, #0
    cbb4:	d021      	beq.n	cbfa <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    cbb6:	f89d 1016 	ldrb.w	r1, [sp, #22]
    cbba:	f89d 0017 	ldrb.w	r0, [sp, #23]
    cbbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbc0:	9300      	str	r3, [sp, #0]
    cbc2:	9b03      	ldr	r3, [sp, #12]
    cbc4:	9a04      	ldr	r2, [sp, #16]
    cbc6:	f7ff fb4b 	bl	c260 <FlexCAN_StartSendData>
    cbca:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    cbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbce:	2b00      	cmp	r3, #0
    cbd0:	d113      	bne.n	cbfa <FlexCAN_Ip_Send+0x86>
    cbd2:	9b04      	ldr	r3, [sp, #16]
    cbd4:	7b1b      	ldrb	r3, [r3, #12]
    cbd6:	f083 0301 	eor.w	r3, r3, #1
    cbda:	b2db      	uxtb	r3, r3
    cbdc:	2b00      	cmp	r3, #0
    cbde:	d00c      	beq.n	cbfa <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cbe0:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cbe4:	9b07      	ldr	r3, [sp, #28]
    cbe6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cbea:	f89d 1017 	ldrb.w	r1, [sp, #23]
    cbee:	9300      	str	r3, [sp, #0]
    cbf0:	2301      	movs	r3, #1
    cbf2:	9808      	ldr	r0, [sp, #32]
    cbf4:	f002 f9b6 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
    cbf8:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    cbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cbfc:	4618      	mov	r0, r3
    cbfe:	b00b      	add	sp, #44	; 0x2c
    cc00:	f85d fb04 	ldr.w	pc, [sp], #4
    cc04:	000185a4 	.word	0x000185a4
    cc08:	1fff935c 	.word	0x1fff935c

0000cc0c <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    cc0c:	b500      	push	{lr}
    cc0e:	b08b      	sub	sp, #44	; 0x2c
    cc10:	9202      	str	r2, [sp, #8]
    cc12:	9301      	str	r3, [sp, #4]
    cc14:	4603      	mov	r3, r0
    cc16:	f88d 300f 	strb.w	r3, [sp, #15]
    cc1a:	460b      	mov	r3, r1
    cc1c:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    cc20:	2300      	movs	r3, #0
    cc22:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cc24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc28:	4a19      	ldr	r2, [pc, #100]	; (cc90 <FlexCAN_Ip_ConfigRxMb+0x84>)
    cc2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc2e:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    cc30:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cc34:	4619      	mov	r1, r3
    cc36:	9808      	ldr	r0, [sp, #32]
    cc38:	f7fe ff2c 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    cc3c:	9b02      	ldr	r3, [sp, #8]
    cc3e:	685b      	ldr	r3, [r3, #4]
    cc40:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    cc42:	9b02      	ldr	r3, [sp, #8]
    cc44:	681b      	ldr	r3, [r3, #0]
    cc46:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    cc48:	9b02      	ldr	r3, [sp, #8]
    cc4a:	7a1b      	ldrb	r3, [r3, #8]
    cc4c:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    cc50:	230f      	movs	r3, #15
    cc52:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cc54:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cc58:	aa04      	add	r2, sp, #16
    cc5a:	9b01      	ldr	r3, [sp, #4]
    cc5c:	9808      	ldr	r0, [sp, #32]
    cc5e:	f002 fa25 	bl	f0ac <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    cc62:	2300      	movs	r3, #0
    cc64:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cc66:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cc6a:	aa04      	add	r2, sp, #16
    cc6c:	9b01      	ldr	r3, [sp, #4]
    cc6e:	9808      	ldr	r0, [sp, #32]
    cc70:	f002 fa1c 	bl	f0ac <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    cc74:	2304      	movs	r3, #4
    cc76:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cc78:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cc7c:	aa04      	add	r2, sp, #16
    cc7e:	9b01      	ldr	r3, [sp, #4]
    cc80:	9808      	ldr	r0, [sp, #32]
    cc82:	f002 fa13 	bl	f0ac <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    cc86:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cc88:	4618      	mov	r0, r3
    cc8a:	b00b      	add	sp, #44	; 0x2c
    cc8c:	f85d fb04 	ldr.w	pc, [sp], #4
    cc90:	000185a4 	.word	0x000185a4

0000cc94 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    cc94:	b500      	push	{lr}
    cc96:	b089      	sub	sp, #36	; 0x24
    cc98:	9202      	str	r2, [sp, #8]
    cc9a:	461a      	mov	r2, r3
    cc9c:	4603      	mov	r3, r0
    cc9e:	f88d 300f 	strb.w	r3, [sp, #15]
    cca2:	460b      	mov	r3, r1
    cca4:	f88d 300e 	strb.w	r3, [sp, #14]
    cca8:	4613      	mov	r3, r2
    ccaa:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ccae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ccb2:	4a18      	ldr	r2, [pc, #96]	; (cd14 <FlexCAN_Ip_Receive+0x80>)
    ccb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccb8:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    ccba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ccbe:	4a16      	ldr	r2, [pc, #88]	; (cd18 <FlexCAN_Ip_Receive+0x84>)
    ccc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccc4:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    ccc6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ccca:	f89d 100e 	ldrb.w	r1, [sp, #14]
    ccce:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ccd2:	9a02      	ldr	r2, [sp, #8]
    ccd4:	f7ff fa86 	bl	c1e4 <FlexCAN_StartRxMessageBufferData>
    ccd8:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    ccda:	9b07      	ldr	r3, [sp, #28]
    ccdc:	2b00      	cmp	r3, #0
    ccde:	d113      	bne.n	cd08 <FlexCAN_Ip_Receive+0x74>
    cce0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cce4:	f083 0301 	eor.w	r3, r3, #1
    cce8:	b2db      	uxtb	r3, r3
    ccea:	2b00      	cmp	r3, #0
    ccec:	d00c      	beq.n	cd08 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    ccee:	f89d 200e 	ldrb.w	r2, [sp, #14]
    ccf2:	9b05      	ldr	r3, [sp, #20]
    ccf4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    ccf8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ccfc:	9300      	str	r3, [sp, #0]
    ccfe:	2301      	movs	r3, #1
    cd00:	9806      	ldr	r0, [sp, #24]
    cd02:	f002 f92f 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
    cd06:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    cd08:	9b07      	ldr	r3, [sp, #28]
}
    cd0a:	4618      	mov	r0, r3
    cd0c:	b009      	add	sp, #36	; 0x24
    cd0e:	f85d fb04 	ldr.w	pc, [sp], #4
    cd12:	bf00      	nop
    cd14:	000185a4 	.word	0x000185a4
    cd18:	1fff935c 	.word	0x1fff935c

0000cd1c <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    cd1c:	b500      	push	{lr}
    cd1e:	b08b      	sub	sp, #44	; 0x2c
    cd20:	9202      	str	r2, [sp, #8]
    cd22:	461a      	mov	r2, r3
    cd24:	4603      	mov	r3, r0
    cd26:	f88d 300f 	strb.w	r3, [sp, #15]
    cd2a:	460b      	mov	r3, r1
    cd2c:	f88d 300e 	strb.w	r3, [sp, #14]
    cd30:	4613      	mov	r3, r2
    cd32:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    cd36:	2300      	movs	r3, #0
    cd38:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    cd3a:	2300      	movs	r3, #0
    cd3c:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cd3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cd44:	fb02 f303 	mul.w	r3, r2, r3
    cd48:	2100      	movs	r1, #0
    cd4a:	4618      	mov	r0, r3
    cd4c:	f7f5 f8da 	bl	1f04 <OsIf_MicrosToTicks>
    cd50:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cd52:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd56:	4a4c      	ldr	r2, [pc, #304]	; (ce88 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    cd58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd5c:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cd5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd62:	4a4a      	ldr	r2, [pc, #296]	; (ce8c <FlexCAN_Ip_ReceiveBlocking+0x170>)
    cd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd68:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    cd6a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd6e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cd72:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cd76:	9a02      	ldr	r2, [sp, #8]
    cd78:	f7ff fa34 	bl	c1e4 <FlexCAN_StartRxMessageBufferData>
    cd7c:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    cd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd80:	2b00      	cmp	r3, #0
    cd82:	d113      	bne.n	cdac <FlexCAN_Ip_ReceiveBlocking+0x90>
    cd84:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd88:	f083 0301 	eor.w	r3, r3, #1
    cd8c:	b2db      	uxtb	r3, r3
    cd8e:	2b00      	cmp	r3, #0
    cd90:	d00c      	beq.n	cdac <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cd92:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cd96:	9b06      	ldr	r3, [sp, #24]
    cd98:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cd9c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cda0:	9300      	str	r3, [sp, #0]
    cda2:	2301      	movs	r3, #1
    cda4:	9805      	ldr	r0, [sp, #20]
    cda6:	f002 f8dd 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
    cdaa:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    cdac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d133      	bne.n	ce1a <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cdb2:	2000      	movs	r0, #0
    cdb4:	f7f5 f85a 	bl	1e6c <OsIf_GetCounter>
    cdb8:	4603      	mov	r3, r0
    cdba:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    cdbc:	e024      	b.n	ce08 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    cdbe:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cdc2:	2b00      	cmp	r3, #0
    cdc4:	d010      	beq.n	cde8 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    cdc6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cdca:	4619      	mov	r1, r3
    cdcc:	9805      	ldr	r0, [sp, #20]
    cdce:	f7fe fe74 	bl	baba <FlexCAN_GetBuffStatusFlag>
    cdd2:	4603      	mov	r3, r0
    cdd4:	2b00      	cmp	r3, #0
    cdd6:	d007      	beq.n	cde8 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    cdd8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cddc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cde0:	4611      	mov	r1, r2
    cde2:	4618      	mov	r0, r3
    cde4:	f7ff fb20 	bl	c428 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cde8:	ab04      	add	r3, sp, #16
    cdea:	2100      	movs	r1, #0
    cdec:	4618      	mov	r0, r3
    cdee:	f7f5 f856 	bl	1e9e <OsIf_GetElapsed>
    cdf2:	4602      	mov	r2, r0
    cdf4:	9b08      	ldr	r3, [sp, #32]
    cdf6:	4413      	add	r3, r2
    cdf8:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    cdfa:	9a08      	ldr	r2, [sp, #32]
    cdfc:	9b07      	ldr	r3, [sp, #28]
    cdfe:	429a      	cmp	r2, r3
    ce00:	d302      	bcc.n	ce08 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    ce02:	2303      	movs	r3, #3
    ce04:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    ce06:	e008      	b.n	ce1a <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    ce08:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ce0c:	9a06      	ldr	r2, [sp, #24]
    ce0e:	011b      	lsls	r3, r3, #4
    ce10:	4413      	add	r3, r2
    ce12:	3304      	adds	r3, #4
    ce14:	681b      	ldr	r3, [r3, #0]
    ce16:	2b01      	cmp	r3, #1
    ce18:	d0d1      	beq.n	cdbe <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    ce1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce1c:	2b03      	cmp	r3, #3
    ce1e:	d112      	bne.n	ce46 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    ce20:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ce24:	f083 0301 	eor.w	r3, r3, #1
    ce28:	b2db      	uxtb	r3, r3
    ce2a:	2b00      	cmp	r3, #0
    ce2c:	d00b      	beq.n	ce46 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    ce2e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    ce32:	9b06      	ldr	r3, [sp, #24]
    ce34:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    ce38:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ce3c:	9300      	str	r3, [sp, #0]
    ce3e:	2300      	movs	r3, #0
    ce40:	9805      	ldr	r0, [sp, #20]
    ce42:	f002 f88f 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    ce46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce48:	2b04      	cmp	r3, #4
    ce4a:	d018      	beq.n	ce7e <FlexCAN_Ip_ReceiveBlocking+0x162>
    ce4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce4e:	2b02      	cmp	r3, #2
    ce50:	d015      	beq.n	ce7e <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    ce52:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ce56:	9a06      	ldr	r2, [sp, #24]
    ce58:	011b      	lsls	r3, r3, #4
    ce5a:	4413      	add	r3, r2
    ce5c:	3304      	adds	r3, #4
    ce5e:	681b      	ldr	r3, [r3, #0]
    ce60:	2b00      	cmp	r3, #0
    ce62:	d102      	bne.n	ce6a <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    ce64:	2300      	movs	r3, #0
    ce66:	9309      	str	r3, [sp, #36]	; 0x24
    ce68:	e009      	b.n	ce7e <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    ce6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ce6e:	9a06      	ldr	r2, [sp, #24]
    ce70:	011b      	lsls	r3, r3, #4
    ce72:	4413      	add	r3, r2
    ce74:	3304      	adds	r3, #4
    ce76:	2200      	movs	r2, #0
    ce78:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    ce7a:	2303      	movs	r3, #3
    ce7c:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    ce7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    ce80:	4618      	mov	r0, r3
    ce82:	b00b      	add	sp, #44	; 0x2c
    ce84:	f85d fb04 	ldr.w	pc, [sp], #4
    ce88:	1fff935c 	.word	0x1fff935c
    ce8c:	000185a4 	.word	0x000185a4

0000ce90 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    ce90:	b500      	push	{lr}
    ce92:	b085      	sub	sp, #20
    ce94:	4603      	mov	r3, r0
    ce96:	9100      	str	r1, [sp, #0]
    ce98:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ce9c:	2300      	movs	r3, #0
    ce9e:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    cea0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cea4:	9900      	ldr	r1, [sp, #0]
    cea6:	4618      	mov	r0, r3
    cea8:	f7ff fa5e 	bl	c368 <FlexCAN_StartRxMessageFifoData>
    ceac:	9003      	str	r0, [sp, #12]
    }
    return result;
    ceae:	9b03      	ldr	r3, [sp, #12]
}
    ceb0:	4618      	mov	r0, r3
    ceb2:	b005      	add	sp, #20
    ceb4:	f85d fb04 	ldr.w	pc, [sp], #4

0000ceb8 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    ceb8:	b500      	push	{lr}
    ceba:	b087      	sub	sp, #28
    cebc:	4603      	mov	r3, r0
    cebe:	9102      	str	r1, [sp, #8]
    cec0:	9201      	str	r2, [sp, #4]
    cec2:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cec6:	2300      	movs	r3, #0
    cec8:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    ceca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cece:	9902      	ldr	r1, [sp, #8]
    ced0:	4618      	mov	r0, r3
    ced2:	f7ff fa49 	bl	c368 <FlexCAN_StartRxMessageFifoData>
    ced6:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    ced8:	9b05      	ldr	r3, [sp, #20]
    ceda:	2b00      	cmp	r3, #0
    cedc:	d106      	bne.n	ceec <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    cede:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cee2:	9901      	ldr	r1, [sp, #4]
    cee4:	4618      	mov	r0, r3
    cee6:	f7ff f8e2 	bl	c0ae <FlexCAN_ProccessLegacyRxFIFO>
    ceea:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    ceec:	9b05      	ldr	r3, [sp, #20]
}
    ceee:	4618      	mov	r0, r3
    cef0:	b007      	add	sp, #28
    cef2:	f85d fb04 	ldr.w	pc, [sp], #4

0000cef6 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    cef6:	b500      	push	{lr}
    cef8:	b089      	sub	sp, #36	; 0x24
    cefa:	4603      	mov	r3, r0
    cefc:	9102      	str	r1, [sp, #8]
    cefe:	9201      	str	r2, [sp, #4]
    cf00:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cf04:	2300      	movs	r3, #0
    cf06:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    cf08:	2300      	movs	r3, #0
    cf0a:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    cf0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cf10:	4a1c      	ldr	r2, [pc, #112]	; (cf84 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    cf12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf16:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    cf18:	9805      	ldr	r0, [sp, #20]
    cf1a:	f7fe fd61 	bl	b9e0 <FlexCAN_IsEnabled>
    cf1e:	4603      	mov	r3, r0
    cf20:	2b00      	cmp	r3, #0
    cf22:	bf14      	ite	ne
    cf24:	2301      	movne	r3, #1
    cf26:	2300      	moveq	r3, #0
    cf28:	b2db      	uxtb	r3, r3
    cf2a:	f083 0301 	eor.w	r3, r3, #1
    cf2e:	b2db      	uxtb	r3, r3
    cf30:	f88d 3013 	strb.w	r3, [sp, #19]
    cf34:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cf38:	f003 0301 	and.w	r3, r3, #1
    cf3c:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    cf40:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cf44:	2b00      	cmp	r3, #0
    cf46:	d003      	beq.n	cf50 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    cf48:	9805      	ldr	r0, [sp, #20]
    cf4a:	f001 fd6b 	bl	ea24 <FlexCAN_Enable>
    cf4e:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    cf50:	9b07      	ldr	r3, [sp, #28]
    cf52:	2b00      	cmp	r3, #0
    cf54:	d104      	bne.n	cf60 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    cf56:	9a01      	ldr	r2, [sp, #4]
    cf58:	9902      	ldr	r1, [sp, #8]
    cf5a:	9805      	ldr	r0, [sp, #20]
    cf5c:	f002 fba5 	bl	f6aa <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    cf60:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cf64:	2b00      	cmp	r3, #0
    cf66:	d008      	beq.n	cf7a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    cf68:	9805      	ldr	r0, [sp, #20]
    cf6a:	f001 fdd9 	bl	eb20 <FlexCAN_Disable>
    cf6e:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    cf70:	9b06      	ldr	r3, [sp, #24]
    cf72:	2b00      	cmp	r3, #0
    cf74:	d001      	beq.n	cf7a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    cf76:	9b06      	ldr	r3, [sp, #24]
    cf78:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    cf7a:	9b07      	ldr	r3, [sp, #28]
}
    cf7c:	4618      	mov	r0, r3
    cf7e:	b009      	add	sp, #36	; 0x24
    cf80:	f85d fb04 	ldr.w	pc, [sp], #4
    cf84:	000185a4 	.word	0x000185a4

0000cf88 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    cf88:	b500      	push	{lr}
    cf8a:	b08f      	sub	sp, #60	; 0x3c
    cf8c:	9204      	str	r2, [sp, #16]
    cf8e:	9303      	str	r3, [sp, #12]
    cf90:	4603      	mov	r3, r0
    cf92:	f88d 3017 	strb.w	r3, [sp, #23]
    cf96:	460b      	mov	r3, r1
    cf98:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cf9c:	2300      	movs	r3, #0
    cf9e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    cfa0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cfa4:	4a27      	ldr	r2, [pc, #156]	; (d044 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    cfa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfaa:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    cfac:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cfb0:	4a25      	ldr	r2, [pc, #148]	; (d048 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    cfb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfb6:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    cfb8:	2300      	movs	r3, #0
    cfba:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    cfbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cfbe:	2b00      	cmp	r3, #0
    cfc0:	d13a      	bne.n	d038 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    cfc2:	9b04      	ldr	r3, [sp, #16]
    cfc4:	685b      	ldr	r3, [r3, #4]
    cfc6:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    cfc8:	9b04      	ldr	r3, [sp, #16]
    cfca:	681b      	ldr	r3, [r3, #0]
    cfcc:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    cfce:	230a      	movs	r3, #10
    cfd0:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    cfd2:	2300      	movs	r3, #0
    cfd4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    cfd8:	2300      	movs	r3, #0
    cfda:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    cfde:	2300      	movs	r3, #0
    cfe0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    cfe4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cfe8:	4619      	mov	r1, r3
    cfea:	980c      	ldr	r0, [sp, #48]	; 0x30
    cfec:	f7fe fd52 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    cff0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cff4:	4619      	mov	r1, r3
    cff6:	980c      	ldr	r0, [sp, #48]	; 0x30
    cff8:	f001 fc2c 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    cffc:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    cffe:	9b04      	ldr	r3, [sp, #16]
    d000:	7adb      	ldrb	r3, [r3, #11]
    d002:	a906      	add	r1, sp, #24
    d004:	9300      	str	r3, [sp, #0]
    d006:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d008:	9a03      	ldr	r2, [sp, #12]
    d00a:	980a      	ldr	r0, [sp, #40]	; 0x28
    d00c:	f002 f974 	bl	f2f8 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    d010:	9b04      	ldr	r3, [sp, #16]
    d012:	7b1b      	ldrb	r3, [r3, #12]
    d014:	f083 0301 	eor.w	r3, r3, #1
    d018:	b2db      	uxtb	r3, r3
    d01a:	2b00      	cmp	r3, #0
    d01c:	d00c      	beq.n	d038 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    d01e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    d022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d024:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d028:	f89d 1017 	ldrb.w	r1, [sp, #23]
    d02c:	9300      	str	r3, [sp, #0]
    d02e:	2301      	movs	r3, #1
    d030:	980c      	ldr	r0, [sp, #48]	; 0x30
    d032:	f001 ff97 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
    d036:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    d038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    d03a:	4618      	mov	r0, r3
    d03c:	b00f      	add	sp, #60	; 0x3c
    d03e:	f85d fb04 	ldr.w	pc, [sp], #4
    d042:	bf00      	nop
    d044:	000185a4 	.word	0x000185a4
    d048:	1fff935c 	.word	0x1fff935c

0000d04c <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    d04c:	b084      	sub	sp, #16
    d04e:	4603      	mov	r3, r0
    d050:	460a      	mov	r2, r1
    d052:	f88d 3007 	strb.w	r3, [sp, #7]
    d056:	4613      	mov	r3, r2
    d058:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d05c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d060:	4a0d      	ldr	r2, [pc, #52]	; (d098 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    d062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d066:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    d068:	2301      	movs	r3, #1
    d06a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    d06c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d070:	2b1f      	cmp	r3, #31
    d072:	d80d      	bhi.n	d090 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    d074:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d078:	9a02      	ldr	r2, [sp, #8]
    d07a:	011b      	lsls	r3, r3, #4
    d07c:	4413      	add	r3, r2
    d07e:	3304      	adds	r3, #4
    d080:	681b      	ldr	r3, [r3, #0]
    d082:	2b00      	cmp	r3, #0
    d084:	d102      	bne.n	d08c <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    d086:	2300      	movs	r3, #0
    d088:	9303      	str	r3, [sp, #12]
    d08a:	e001      	b.n	d090 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    d08c:	2302      	movs	r3, #2
    d08e:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    d090:	9b03      	ldr	r3, [sp, #12]
}
    d092:	4618      	mov	r0, r3
    d094:	b004      	add	sp, #16
    d096:	4770      	bx	lr
    d098:	1fff935c 	.word	0x1fff935c

0000d09c <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    d09c:	b500      	push	{lr}
    d09e:	b087      	sub	sp, #28
    d0a0:	4603      	mov	r3, r0
    d0a2:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d0a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d0aa:	4a1d      	ldr	r2, [pc, #116]	; (d120 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    d0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0b0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d0b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d0b6:	4a1b      	ldr	r2, [pc, #108]	; (d124 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    d0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0bc:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    d0be:	9b04      	ldr	r3, [sp, #16]
    d0c0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    d0c4:	2b00      	cmp	r3, #0
    d0c6:	d120      	bne.n	d10a <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    d0c8:	9b04      	ldr	r3, [sp, #16]
    d0ca:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d0ce:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d0d2:	9300      	str	r3, [sp, #0]
    d0d4:	2300      	movs	r3, #0
    d0d6:	2205      	movs	r2, #5
    d0d8:	9805      	ldr	r0, [sp, #20]
    d0da:	f001 ff43 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    d0de:	9b04      	ldr	r3, [sp, #16]
    d0e0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d0e4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d0e8:	9300      	str	r3, [sp, #0]
    d0ea:	2300      	movs	r3, #0
    d0ec:	2206      	movs	r2, #6
    d0ee:	9805      	ldr	r0, [sp, #20]
    d0f0:	f001 ff38 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    d0f4:	9b04      	ldr	r3, [sp, #16]
    d0f6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d0fa:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d0fe:	9300      	str	r3, [sp, #0]
    d100:	2300      	movs	r3, #0
    d102:	2207      	movs	r2, #7
    d104:	9805      	ldr	r0, [sp, #20]
    d106:	f001 ff2d 	bl	ef64 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    d10a:	9b04      	ldr	r3, [sp, #16]
    d10c:	2200      	movs	r2, #0
    d10e:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    d110:	9b04      	ldr	r3, [sp, #16]
    d112:	2200      	movs	r2, #0
    d114:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    d116:	bf00      	nop
    d118:	b007      	add	sp, #28
    d11a:	f85d fb04 	ldr.w	pc, [sp], #4
    d11e:	bf00      	nop
    d120:	000185a4 	.word	0x000185a4
    d124:	1fff935c 	.word	0x1fff935c

0000d128 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    d128:	b500      	push	{lr}
    d12a:	b08b      	sub	sp, #44	; 0x2c
    d12c:	4603      	mov	r3, r0
    d12e:	9102      	str	r1, [sp, #8]
    d130:	9201      	str	r2, [sp, #4]
    d132:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    d136:	2300      	movs	r3, #0
    d138:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    d13a:	2300      	movs	r3, #0
    d13c:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d13e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d142:	4a3f      	ldr	r2, [pc, #252]	; (d240 <FlexCAN_IRQHandler+0x118>)
    d144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d148:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d14a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d14e:	4a3d      	ldr	r2, [pc, #244]	; (d244 <FlexCAN_IRQHandler+0x11c>)
    d150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d154:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    d156:	9b01      	ldr	r3, [sp, #4]
    d158:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    d15a:	9b05      	ldr	r3, [sp, #20]
    d15c:	2b00      	cmp	r3, #0
    d15e:	d05c      	beq.n	d21a <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d160:	9907      	ldr	r1, [sp, #28]
    d162:	9806      	ldr	r0, [sp, #24]
    d164:	f7fe fe47 	bl	bdf6 <FlexCAN_GetMsgBuffIntStatusFlag>
    d168:	4603      	mov	r3, r0
    d16a:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d16c:	e008      	b.n	d180 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    d16e:	9b07      	ldr	r3, [sp, #28]
    d170:	3b01      	subs	r3, #1
    d172:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d174:	9907      	ldr	r1, [sp, #28]
    d176:	9806      	ldr	r0, [sp, #24]
    d178:	f7fe fe3d 	bl	bdf6 <FlexCAN_GetMsgBuffIntStatusFlag>
    d17c:	4603      	mov	r3, r0
    d17e:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d180:	9b08      	ldr	r3, [sp, #32]
    d182:	2b00      	cmp	r3, #0
    d184:	d103      	bne.n	d18e <FlexCAN_IRQHandler+0x66>
    d186:	9a07      	ldr	r2, [sp, #28]
    d188:	9b02      	ldr	r3, [sp, #8]
    d18a:	429a      	cmp	r2, r3
    d18c:	d8ef      	bhi.n	d16e <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    d18e:	9b08      	ldr	r3, [sp, #32]
    d190:	2b00      	cmp	r3, #0
    d192:	d050      	beq.n	d236 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    d194:	9b07      	ldr	r3, [sp, #28]
    d196:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d198:	9b05      	ldr	r3, [sp, #20]
    d19a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d19e:	2b00      	cmp	r3, #0
    d1a0:	d00b      	beq.n	d1ba <FlexCAN_IRQHandler+0x92>
    d1a2:	9b07      	ldr	r3, [sp, #28]
    d1a4:	2b07      	cmp	r3, #7
    d1a6:	d808      	bhi.n	d1ba <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    d1a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d1ac:	9907      	ldr	r1, [sp, #28]
    d1ae:	4618      	mov	r0, r3
    d1b0:	f7ff fac2 	bl	c738 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    d1b4:	2300      	movs	r3, #0
    d1b6:	9309      	str	r3, [sp, #36]	; 0x24
    d1b8:	e00d      	b.n	d1d6 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    d1ba:	9a05      	ldr	r2, [sp, #20]
    d1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d1be:	011b      	lsls	r3, r3, #4
    d1c0:	4413      	add	r3, r2
    d1c2:	3304      	adds	r3, #4
    d1c4:	681b      	ldr	r3, [r3, #0]
    d1c6:	2b01      	cmp	r3, #1
    d1c8:	d105      	bne.n	d1d6 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d1ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d1ce:	9907      	ldr	r1, [sp, #28]
    d1d0:	4618      	mov	r0, r3
    d1d2:	f7ff f929 	bl	c428 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    d1d6:	9a05      	ldr	r2, [sp, #20]
    d1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d1da:	011b      	lsls	r3, r3, #4
    d1dc:	4413      	add	r3, r2
    d1de:	3304      	adds	r3, #4
    d1e0:	681b      	ldr	r3, [r3, #0]
    d1e2:	2b02      	cmp	r3, #2
    d1e4:	d105      	bne.n	d1f2 <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    d1e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d1ea:	9907      	ldr	r1, [sp, #28]
    d1ec:	4618      	mov	r0, r3
    d1ee:	f7ff fa09 	bl	c604 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    d1f2:	9907      	ldr	r1, [sp, #28]
    d1f4:	9806      	ldr	r0, [sp, #24]
    d1f6:	f7fe fdfe 	bl	bdf6 <FlexCAN_GetMsgBuffIntStatusFlag>
    d1fa:	4603      	mov	r3, r0
    d1fc:	2b00      	cmp	r3, #0
    d1fe:	d01a      	beq.n	d236 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    d200:	9a05      	ldr	r2, [sp, #20]
    d202:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d204:	011b      	lsls	r3, r3, #4
    d206:	4413      	add	r3, r2
    d208:	3304      	adds	r3, #4
    d20a:	681b      	ldr	r3, [r3, #0]
    d20c:	2b00      	cmp	r3, #0
    d20e:	d112      	bne.n	d236 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d210:	9907      	ldr	r1, [sp, #28]
    d212:	9806      	ldr	r0, [sp, #24]
    d214:	f7fe fc3e 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    d218:	e00d      	b.n	d236 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d21a:	9b02      	ldr	r3, [sp, #8]
    d21c:	9307      	str	r3, [sp, #28]
    d21e:	e006      	b.n	d22e <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d220:	9907      	ldr	r1, [sp, #28]
    d222:	9806      	ldr	r0, [sp, #24]
    d224:	f7fe fc36 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d228:	9b07      	ldr	r3, [sp, #28]
    d22a:	3301      	adds	r3, #1
    d22c:	9307      	str	r3, [sp, #28]
    d22e:	9a07      	ldr	r2, [sp, #28]
    d230:	9b01      	ldr	r3, [sp, #4]
    d232:	429a      	cmp	r2, r3
    d234:	d9f4      	bls.n	d220 <FlexCAN_IRQHandler+0xf8>
}
    d236:	bf00      	nop
    d238:	b00b      	add	sp, #44	; 0x2c
    d23a:	f85d fb04 	ldr.w	pc, [sp], #4
    d23e:	bf00      	nop
    d240:	000185a4 	.word	0x000185a4
    d244:	1fff935c 	.word	0x1fff935c

0000d248 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    d248:	b084      	sub	sp, #16
    d24a:	4603      	mov	r3, r0
    d24c:	9100      	str	r1, [sp, #0]
    d24e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d252:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d256:	4a05      	ldr	r2, [pc, #20]	; (d26c <FlexCAN_Ip_ClearErrorStatus+0x24>)
    d258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d25c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    d25e:	9b03      	ldr	r3, [sp, #12]
    d260:	9a00      	ldr	r2, [sp, #0]
    d262:	621a      	str	r2, [r3, #32]
}
    d264:	bf00      	nop
    d266:	b004      	add	sp, #16
    d268:	4770      	bx	lr
    d26a:	bf00      	nop
    d26c:	000185a4 	.word	0x000185a4

0000d270 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    d270:	b084      	sub	sp, #16
    d272:	4603      	mov	r3, r0
    d274:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d278:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d27c:	4a04      	ldr	r2, [pc, #16]	; (d290 <FlexCAN_Ip_GetErrorStatus+0x20>)
    d27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d282:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    d284:	9b03      	ldr	r3, [sp, #12]
    d286:	6a1b      	ldr	r3, [r3, #32]
}
    d288:	4618      	mov	r0, r3
    d28a:	b004      	add	sp, #16
    d28c:	4770      	bx	lr
    d28e:	bf00      	nop
    d290:	000185a4 	.word	0x000185a4

0000d294 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    d294:	b084      	sub	sp, #16
    d296:	4603      	mov	r3, r0
    d298:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d29c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2a0:	4a04      	ldr	r2, [pc, #16]	; (d2b4 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    d2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2a6:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    d2a8:	9b03      	ldr	r3, [sp, #12]
    d2aa:	69db      	ldr	r3, [r3, #28]
    d2ac:	b2db      	uxtb	r3, r3
}
    d2ae:	4618      	mov	r0, r3
    d2b0:	b004      	add	sp, #16
    d2b2:	4770      	bx	lr
    d2b4:	000185a4 	.word	0x000185a4

0000d2b8 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    d2b8:	b084      	sub	sp, #16
    d2ba:	4603      	mov	r3, r0
    d2bc:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d2c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2c4:	4a05      	ldr	r2, [pc, #20]	; (d2dc <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    d2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2ca:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    d2cc:	9b03      	ldr	r3, [sp, #12]
    d2ce:	69db      	ldr	r3, [r3, #28]
    d2d0:	0a1b      	lsrs	r3, r3, #8
    d2d2:	b2db      	uxtb	r3, r3
}
    d2d4:	4618      	mov	r0, r3
    d2d6:	b004      	add	sp, #16
    d2d8:	4770      	bx	lr
    d2da:	bf00      	nop
    d2dc:	000185a4 	.word	0x000185a4

0000d2e0 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    d2e0:	b510      	push	{r4, lr}
    d2e2:	b086      	sub	sp, #24
    d2e4:	4603      	mov	r3, r0
    d2e6:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d2ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2ee:	4a29      	ldr	r2, [pc, #164]	; (d394 <FlexCAN_Error_IRQHandler+0xb4>)
    d2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2f4:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d2f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2fa:	4a27      	ldr	r2, [pc, #156]	; (d398 <FlexCAN_Error_IRQHandler+0xb8>)
    d2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d300:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d302:	2300      	movs	r3, #0
    d304:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    d306:	9b03      	ldr	r3, [sp, #12]
    d308:	2b00      	cmp	r3, #0
    d30a:	d03d      	beq.n	d388 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    d30c:	9b04      	ldr	r3, [sp, #16]
    d30e:	6a1b      	ldr	r3, [r3, #32]
    d310:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    d312:	9b05      	ldr	r3, [sp, #20]
    d314:	f003 0302 	and.w	r3, r3, #2
    d318:	2b00      	cmp	r3, #0
    d31a:	d019      	beq.n	d350 <FlexCAN_Error_IRQHandler+0x70>
    d31c:	9b04      	ldr	r3, [sp, #16]
    d31e:	685b      	ldr	r3, [r3, #4]
    d320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    d324:	2b00      	cmp	r3, #0
    d326:	d013      	beq.n	d350 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    d328:	9b04      	ldr	r3, [sp, #16]
    d32a:	2202      	movs	r2, #2
    d32c:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d32e:	9b03      	ldr	r3, [sp, #12]
    d330:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d334:	2b00      	cmp	r3, #0
    d336:	d00b      	beq.n	d350 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    d338:	9b03      	ldr	r3, [sp, #12]
    d33a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d33e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d342:	9b03      	ldr	r3, [sp, #12]
    d344:	9a05      	ldr	r2, [sp, #20]
    d346:	2105      	movs	r1, #5
    d348:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    d34a:	9b04      	ldr	r3, [sp, #16]
    d34c:	6a1b      	ldr	r3, [r3, #32]
    d34e:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    d350:	9b05      	ldr	r3, [sp, #20]
    d352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    d356:	2b00      	cmp	r3, #0
    d358:	d019      	beq.n	d38e <FlexCAN_Error_IRQHandler+0xae>
    d35a:	9b04      	ldr	r3, [sp, #16]
    d35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d35e:	2b00      	cmp	r3, #0
    d360:	da15      	bge.n	d38e <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    d362:	9b04      	ldr	r3, [sp, #16]
    d364:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    d368:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d36a:	9b03      	ldr	r3, [sp, #12]
    d36c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d370:	2b00      	cmp	r3, #0
    d372:	d00c      	beq.n	d38e <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    d374:	9b03      	ldr	r3, [sp, #12]
    d376:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d37a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d37e:	9b03      	ldr	r3, [sp, #12]
    d380:	9a05      	ldr	r2, [sp, #20]
    d382:	2106      	movs	r1, #6
    d384:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    d386:	e002      	b.n	d38e <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    d388:	9b04      	ldr	r3, [sp, #16]
    d38a:	4a04      	ldr	r2, [pc, #16]	; (d39c <FlexCAN_Error_IRQHandler+0xbc>)
    d38c:	621a      	str	r2, [r3, #32]
}
    d38e:	bf00      	nop
    d390:	b006      	add	sp, #24
    d392:	bd10      	pop	{r4, pc}
    d394:	000185a4 	.word	0x000185a4
    d398:	1fff935c 	.word	0x1fff935c
    d39c:	00300002 	.word	0x00300002

0000d3a0 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    d3a0:	b510      	push	{r4, lr}
    d3a2:	b086      	sub	sp, #24
    d3a4:	4603      	mov	r3, r0
    d3a6:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d3aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d3ae:	4a3a      	ldr	r2, [pc, #232]	; (d498 <FlexCAN_BusOff_IRQHandler+0xf8>)
    d3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3b4:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d3b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d3ba:	4a38      	ldr	r2, [pc, #224]	; (d49c <FlexCAN_BusOff_IRQHandler+0xfc>)
    d3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3c0:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d3c2:	2300      	movs	r3, #0
    d3c4:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    d3c6:	9b03      	ldr	r3, [sp, #12]
    d3c8:	2b00      	cmp	r3, #0
    d3ca:	d05f      	beq.n	d48c <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    d3cc:	9b04      	ldr	r3, [sp, #16]
    d3ce:	6a1b      	ldr	r3, [r3, #32]
    d3d0:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    d3d2:	9b05      	ldr	r3, [sp, #20]
    d3d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d3d8:	2b00      	cmp	r3, #0
    d3da:	d01a      	beq.n	d412 <FlexCAN_BusOff_IRQHandler+0x72>
    d3dc:	9b04      	ldr	r3, [sp, #16]
    d3de:	685b      	ldr	r3, [r3, #4]
    d3e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    d3e4:	2b00      	cmp	r3, #0
    d3e6:	d014      	beq.n	d412 <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    d3e8:	9b04      	ldr	r3, [sp, #16]
    d3ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    d3ee:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d3f0:	9b03      	ldr	r3, [sp, #12]
    d3f2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d3f6:	2b00      	cmp	r3, #0
    d3f8:	d00b      	beq.n	d412 <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    d3fa:	9b03      	ldr	r3, [sp, #12]
    d3fc:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d400:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d404:	9b03      	ldr	r3, [sp, #12]
    d406:	9a05      	ldr	r2, [sp, #20]
    d408:	2109      	movs	r1, #9
    d40a:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d40c:	9b04      	ldr	r3, [sp, #16]
    d40e:	6a1b      	ldr	r3, [r3, #32]
    d410:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    d412:	9b05      	ldr	r3, [sp, #20]
    d414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    d418:	2b00      	cmp	r3, #0
    d41a:	d01a      	beq.n	d452 <FlexCAN_BusOff_IRQHandler+0xb2>
    d41c:	9b04      	ldr	r3, [sp, #16]
    d41e:	685b      	ldr	r3, [r3, #4]
    d420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d424:	2b00      	cmp	r3, #0
    d426:	d014      	beq.n	d452 <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    d428:	9b04      	ldr	r3, [sp, #16]
    d42a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    d42e:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d430:	9b03      	ldr	r3, [sp, #12]
    d432:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d436:	2b00      	cmp	r3, #0
    d438:	d00b      	beq.n	d452 <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    d43a:	9b03      	ldr	r3, [sp, #12]
    d43c:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d440:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d444:	9b03      	ldr	r3, [sp, #12]
    d446:	9a05      	ldr	r2, [sp, #20]
    d448:	2108      	movs	r1, #8
    d44a:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d44c:	9b04      	ldr	r3, [sp, #16]
    d44e:	6a1b      	ldr	r3, [r3, #32]
    d450:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    d452:	9b05      	ldr	r3, [sp, #20]
    d454:	f003 0304 	and.w	r3, r3, #4
    d458:	2b00      	cmp	r3, #0
    d45a:	d01a      	beq.n	d492 <FlexCAN_BusOff_IRQHandler+0xf2>
    d45c:	9b04      	ldr	r3, [sp, #16]
    d45e:	685b      	ldr	r3, [r3, #4]
    d460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d464:	2b00      	cmp	r3, #0
    d466:	d014      	beq.n	d492 <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    d468:	9b04      	ldr	r3, [sp, #16]
    d46a:	2204      	movs	r2, #4
    d46c:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d46e:	9b03      	ldr	r3, [sp, #12]
    d470:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d474:	2b00      	cmp	r3, #0
    d476:	d00c      	beq.n	d492 <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    d478:	9b03      	ldr	r3, [sp, #12]
    d47a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d47e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d482:	9b03      	ldr	r3, [sp, #12]
    d484:	9a05      	ldr	r2, [sp, #20]
    d486:	2107      	movs	r1, #7
    d488:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    d48a:	e002      	b.n	d492 <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    d48c:	9b04      	ldr	r3, [sp, #16]
    d48e:	4a04      	ldr	r2, [pc, #16]	; (d4a0 <FlexCAN_BusOff_IRQHandler+0x100>)
    d490:	621a      	str	r2, [r3, #32]
}
    d492:	bf00      	nop
    d494:	b006      	add	sp, #24
    d496:	bd10      	pop	{r4, pc}
    d498:	000185a4 	.word	0x000185a4
    d49c:	1fff935c 	.word	0x1fff935c
    d4a0:	000b0004 	.word	0x000b0004

0000d4a4 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    d4a4:	b500      	push	{lr}
    d4a6:	b091      	sub	sp, #68	; 0x44
    d4a8:	9204      	str	r2, [sp, #16]
    d4aa:	9303      	str	r3, [sp, #12]
    d4ac:	4603      	mov	r3, r0
    d4ae:	f88d 3017 	strb.w	r3, [sp, #23]
    d4b2:	460b      	mov	r3, r1
    d4b4:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d4b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d4bc:	4a5f      	ldr	r2, [pc, #380]	; (d63c <FlexCAN_Ip_SendBlocking+0x198>)
    d4be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4c2:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d4c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d4c8:	4a5d      	ldr	r2, [pc, #372]	; (d640 <FlexCAN_Ip_SendBlocking+0x19c>)
    d4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4ce:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    d4d0:	2300      	movs	r3, #0
    d4d2:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    d4d4:	2300      	movs	r3, #0
    d4d6:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d4d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d4da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d4de:	fb02 f303 	mul.w	r3, r2, r3
    d4e2:	2100      	movs	r1, #0
    d4e4:	4618      	mov	r0, r3
    d4e6:	f7f4 fd0d 	bl	1f04 <OsIf_MicrosToTicks>
    d4ea:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    d4ec:	2300      	movs	r3, #0
    d4ee:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    d4f0:	2300      	movs	r3, #0
    d4f2:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    d4f4:	2300      	movs	r3, #0
    d4f6:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    d4f8:	f89d 1016 	ldrb.w	r1, [sp, #22]
    d4fc:	f89d 0017 	ldrb.w	r0, [sp, #23]
    d500:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d502:	9300      	str	r3, [sp, #0]
    d504:	9b03      	ldr	r3, [sp, #12]
    d506:	9a04      	ldr	r2, [sp, #16]
    d508:	f7fe feaa 	bl	c260 <FlexCAN_StartSendData>
    d50c:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    d50e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d510:	2b00      	cmp	r3, #0
    d512:	f040 808d 	bne.w	d630 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d516:	2000      	movs	r0, #0
    d518:	f7f4 fca8 	bl	1e6c <OsIf_GetCounter>
    d51c:	4603      	mov	r3, r0
    d51e:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d520:	e00f      	b.n	d542 <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d522:	ab07      	add	r3, sp, #28
    d524:	2100      	movs	r1, #0
    d526:	4618      	mov	r0, r3
    d528:	f7f4 fcb9 	bl	1e9e <OsIf_GetElapsed>
    d52c:	4602      	mov	r2, r0
    d52e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d530:	4413      	add	r3, r2
    d532:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    d534:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d538:	429a      	cmp	r2, r3
    d53a:	d302      	bcc.n	d542 <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    d53c:	2303      	movs	r3, #3
    d53e:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    d540:	e008      	b.n	d554 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d542:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d546:	4619      	mov	r1, r3
    d548:	980d      	ldr	r0, [sp, #52]	; 0x34
    d54a:	f7fe fab6 	bl	baba <FlexCAN_GetBuffStatusFlag>
    d54e:	4603      	mov	r3, r0
    d550:	2b01      	cmp	r3, #1
    d552:	d1e6      	bne.n	d522 <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    d554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d556:	2b03      	cmp	r3, #3
    d558:	d15c      	bne.n	d614 <FlexCAN_Ip_SendBlocking+0x170>
    d55a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d55e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d560:	011b      	lsls	r3, r3, #4
    d562:	4413      	add	r3, r2
    d564:	3304      	adds	r3, #4
    d566:	681b      	ldr	r3, [r3, #0]
    d568:	2b00      	cmp	r3, #0
    d56a:	d053      	beq.n	d614 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d56c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d570:	4619      	mov	r1, r3
    d572:	980d      	ldr	r0, [sp, #52]	; 0x34
    d574:	f7fe fa8e 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    d578:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d57c:	4619      	mov	r1, r3
    d57e:	980d      	ldr	r0, [sp, #52]	; 0x34
    d580:	f001 f968 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    d584:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    d586:	9b08      	ldr	r3, [sp, #32]
    d588:	681b      	ldr	r3, [r3, #0]
    d58a:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    d58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d58e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    d592:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    d594:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d596:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    d59a:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    d59c:	9b08      	ldr	r3, [sp, #32]
    d59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d5a0:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d5a2:	2100      	movs	r1, #0
    d5a4:	4827      	ldr	r0, [pc, #156]	; (d644 <FlexCAN_Ip_SendBlocking+0x1a0>)
    d5a6:	f7f4 fcad 	bl	1f04 <OsIf_MicrosToTicks>
    d5aa:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d5ac:	2000      	movs	r0, #0
    d5ae:	f7f4 fc5d 	bl	1e6c <OsIf_GetCounter>
    d5b2:	4603      	mov	r3, r0
    d5b4:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    d5b6:	2300      	movs	r3, #0
    d5b8:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d5ba:	e00f      	b.n	d5dc <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d5bc:	ab07      	add	r3, sp, #28
    d5be:	2100      	movs	r1, #0
    d5c0:	4618      	mov	r0, r3
    d5c2:	f7f4 fc6c 	bl	1e9e <OsIf_GetElapsed>
    d5c6:	4602      	mov	r2, r0
    d5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d5ca:	4413      	add	r3, r2
    d5cc:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    d5ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d5d2:	429a      	cmp	r2, r3
    d5d4:	d302      	bcc.n	d5dc <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    d5d6:	2303      	movs	r3, #3
    d5d8:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    d5da:	e008      	b.n	d5ee <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d5dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5e0:	4619      	mov	r1, r3
    d5e2:	980d      	ldr	r0, [sp, #52]	; 0x34
    d5e4:	f7fe fa69 	bl	baba <FlexCAN_GetBuffStatusFlag>
    d5e8:	4603      	mov	r3, r0
    d5ea:	2b00      	cmp	r3, #0
    d5ec:	d0e6      	beq.n	d5bc <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    d5ee:	9b08      	ldr	r3, [sp, #32]
    d5f0:	681b      	ldr	r3, [r3, #0]
    d5f2:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5f6:	0e1b      	lsrs	r3, r3, #24
    d5f8:	f003 030f 	and.w	r3, r3, #15
    d5fc:	2b08      	cmp	r3, #8
    d5fe:	d101      	bne.n	d604 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    d600:	2300      	movs	r3, #0
    d602:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d604:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d606:	0e1b      	lsrs	r3, r3, #24
    d608:	f003 030f 	and.w	r3, r3, #15
    d60c:	2b09      	cmp	r3, #9
    d60e:	d101      	bne.n	d614 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    d610:	2303      	movs	r3, #3
    d612:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d614:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d618:	4619      	mov	r1, r3
    d61a:	980d      	ldr	r0, [sp, #52]	; 0x34
    d61c:	f7fe fa3a 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    d620:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d626:	011b      	lsls	r3, r3, #4
    d628:	4413      	add	r3, r2
    d62a:	3304      	adds	r3, #4
    d62c:	2200      	movs	r2, #0
    d62e:	601a      	str	r2, [r3, #0]
    }
    return result;
    d630:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    d632:	4618      	mov	r0, r3
    d634:	b011      	add	sp, #68	; 0x44
    d636:	f85d fb04 	ldr.w	pc, [sp], #4
    d63a:	bf00      	nop
    d63c:	000185a4 	.word	0x000185a4
    d640:	1fff935c 	.word	0x1fff935c
    d644:	000f4240 	.word	0x000f4240

0000d648 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d648:	b500      	push	{lr}
    d64a:	b087      	sub	sp, #28
    d64c:	4603      	mov	r3, r0
    d64e:	9100      	str	r1, [sp, #0]
    d650:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d654:	2300      	movs	r3, #0
    d656:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d658:	2300      	movs	r3, #0
    d65a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d65c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d660:	4a1c      	ldr	r2, [pc, #112]	; (d6d4 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    d662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d666:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d668:	9803      	ldr	r0, [sp, #12]
    d66a:	f7fe f9b9 	bl	b9e0 <FlexCAN_IsEnabled>
    d66e:	4603      	mov	r3, r0
    d670:	2b00      	cmp	r3, #0
    d672:	bf14      	ite	ne
    d674:	2301      	movne	r3, #1
    d676:	2300      	moveq	r3, #0
    d678:	b2db      	uxtb	r3, r3
    d67a:	f083 0301 	eor.w	r3, r3, #1
    d67e:	b2db      	uxtb	r3, r3
    d680:	f88d 300b 	strb.w	r3, [sp, #11]
    d684:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d688:	f003 0301 	and.w	r3, r3, #1
    d68c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d690:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d694:	2b00      	cmp	r3, #0
    d696:	d003      	beq.n	d6a0 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d698:	9803      	ldr	r0, [sp, #12]
    d69a:	f001 f9c3 	bl	ea24 <FlexCAN_Enable>
    d69e:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d6a0:	9b05      	ldr	r3, [sp, #20]
    d6a2:	2b00      	cmp	r3, #0
    d6a4:	d103      	bne.n	d6ae <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    d6a6:	9900      	ldr	r1, [sp, #0]
    d6a8:	9803      	ldr	r0, [sp, #12]
    d6aa:	f7fe fbc3 	bl	be34 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    d6ae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d008      	beq.n	d6c8 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d6b6:	9803      	ldr	r0, [sp, #12]
    d6b8:	f001 fa32 	bl	eb20 <FlexCAN_Disable>
    d6bc:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d6be:	9b04      	ldr	r3, [sp, #16]
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	d001      	beq.n	d6c8 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    d6c4:	9b04      	ldr	r3, [sp, #16]
    d6c6:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    d6c8:	9b05      	ldr	r3, [sp, #20]
}
    d6ca:	4618      	mov	r0, r3
    d6cc:	b007      	add	sp, #28
    d6ce:	f85d fb04 	ldr.w	pc, [sp], #4
    d6d2:	bf00      	nop
    d6d4:	000185a4 	.word	0x000185a4

0000d6d8 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    d6d8:	b500      	push	{lr}
    d6da:	b085      	sub	sp, #20
    d6dc:	4603      	mov	r3, r0
    d6de:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d6e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6e6:	4a06      	ldr	r2, [pc, #24]	; (d700 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    d6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6ec:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    d6ee:	9803      	ldr	r0, [sp, #12]
    d6f0:	f001 f94c 	bl	e98c <FlexCAN_EnterFreezeMode>
    d6f4:	4603      	mov	r3, r0
}
    d6f6:	4618      	mov	r0, r3
    d6f8:	b005      	add	sp, #20
    d6fa:	f85d fb04 	ldr.w	pc, [sp], #4
    d6fe:	bf00      	nop
    d700:	000185a4 	.word	0x000185a4

0000d704 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    d704:	b500      	push	{lr}
    d706:	b085      	sub	sp, #20
    d708:	4603      	mov	r3, r0
    d70a:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d70e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d712:	4a06      	ldr	r2, [pc, #24]	; (d72c <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    d714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d718:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    d71a:	9803      	ldr	r0, [sp, #12]
    d71c:	f001 f9be 	bl	ea9c <FlexCAN_ExitFreezeMode>
    d720:	4603      	mov	r3, r0
}
    d722:	4618      	mov	r0, r3
    d724:	b005      	add	sp, #20
    d726:	f85d fb04 	ldr.w	pc, [sp], #4
    d72a:	bf00      	nop
    d72c:	000185a4 	.word	0x000185a4

0000d730 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    d730:	b500      	push	{lr}
    d732:	b087      	sub	sp, #28
    d734:	4603      	mov	r3, r0
    d736:	9200      	str	r2, [sp, #0]
    d738:	f88d 3007 	strb.w	r3, [sp, #7]
    d73c:	460b      	mov	r3, r1
    d73e:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d742:	2300      	movs	r3, #0
    d744:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d746:	2300      	movs	r3, #0
    d748:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d74a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d74e:	4a1e      	ldr	r2, [pc, #120]	; (d7c8 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    d750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d754:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d756:	9803      	ldr	r0, [sp, #12]
    d758:	f7fe f942 	bl	b9e0 <FlexCAN_IsEnabled>
    d75c:	4603      	mov	r3, r0
    d75e:	2b00      	cmp	r3, #0
    d760:	bf14      	ite	ne
    d762:	2301      	movne	r3, #1
    d764:	2300      	moveq	r3, #0
    d766:	b2db      	uxtb	r3, r3
    d768:	f083 0301 	eor.w	r3, r3, #1
    d76c:	b2db      	uxtb	r3, r3
    d76e:	f88d 300b 	strb.w	r3, [sp, #11]
    d772:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d776:	f003 0301 	and.w	r3, r3, #1
    d77a:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d77e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d782:	2b00      	cmp	r3, #0
    d784:	d003      	beq.n	d78e <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    d786:	9803      	ldr	r0, [sp, #12]
    d788:	f001 f94c 	bl	ea24 <FlexCAN_Enable>
    d78c:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d78e:	9b05      	ldr	r3, [sp, #20]
    d790:	2b00      	cmp	r3, #0
    d792:	d106      	bne.n	d7a2 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    d794:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d798:	9a00      	ldr	r2, [sp, #0]
    d79a:	4619      	mov	r1, r3
    d79c:	9803      	ldr	r0, [sp, #12]
    d79e:	f7fe fb52 	bl	be46 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    d7a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d008      	beq.n	d7bc <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    d7aa:	9803      	ldr	r0, [sp, #12]
    d7ac:	f001 f9b8 	bl	eb20 <FlexCAN_Disable>
    d7b0:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d7b2:	9b04      	ldr	r3, [sp, #16]
    d7b4:	2b00      	cmp	r3, #0
    d7b6:	d001      	beq.n	d7bc <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    d7b8:	9b04      	ldr	r3, [sp, #16]
    d7ba:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    d7bc:	9b05      	ldr	r3, [sp, #20]
}
    d7be:	4618      	mov	r0, r3
    d7c0:	b007      	add	sp, #28
    d7c2:	f85d fb04 	ldr.w	pc, [sp], #4
    d7c6:	bf00      	nop
    d7c8:	000185a4 	.word	0x000185a4

0000d7cc <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d7cc:	b500      	push	{lr}
    d7ce:	b087      	sub	sp, #28
    d7d0:	4603      	mov	r3, r0
    d7d2:	9100      	str	r1, [sp, #0]
    d7d4:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d7d8:	2300      	movs	r3, #0
    d7da:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d7dc:	2300      	movs	r3, #0
    d7de:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d7e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d7e4:	4a1c      	ldr	r2, [pc, #112]	; (d858 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    d7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7ea:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d7ec:	9803      	ldr	r0, [sp, #12]
    d7ee:	f7fe f8f7 	bl	b9e0 <FlexCAN_IsEnabled>
    d7f2:	4603      	mov	r3, r0
    d7f4:	2b00      	cmp	r3, #0
    d7f6:	bf14      	ite	ne
    d7f8:	2301      	movne	r3, #1
    d7fa:	2300      	moveq	r3, #0
    d7fc:	b2db      	uxtb	r3, r3
    d7fe:	f083 0301 	eor.w	r3, r3, #1
    d802:	b2db      	uxtb	r3, r3
    d804:	f88d 300b 	strb.w	r3, [sp, #11]
    d808:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d80c:	f003 0301 	and.w	r3, r3, #1
    d810:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d814:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d818:	2b00      	cmp	r3, #0
    d81a:	d003      	beq.n	d824 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d81c:	9803      	ldr	r0, [sp, #12]
    d81e:	f001 f901 	bl	ea24 <FlexCAN_Enable>
    d822:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    d824:	9b05      	ldr	r3, [sp, #20]
    d826:	2b00      	cmp	r3, #0
    d828:	d103      	bne.n	d832 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    d82a:	9900      	ldr	r1, [sp, #0]
    d82c:	9803      	ldr	r0, [sp, #12]
    d82e:	f7fe f8a7 	bl	b980 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    d832:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d836:	2b00      	cmp	r3, #0
    d838:	d008      	beq.n	d84c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d83a:	9803      	ldr	r0, [sp, #12]
    d83c:	f001 f970 	bl	eb20 <FlexCAN_Disable>
    d840:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d842:	9b04      	ldr	r3, [sp, #16]
    d844:	2b00      	cmp	r3, #0
    d846:	d001      	beq.n	d84c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    d848:	9b04      	ldr	r3, [sp, #16]
    d84a:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    d84c:	9b05      	ldr	r3, [sp, #20]
}
    d84e:	4618      	mov	r0, r3
    d850:	b007      	add	sp, #28
    d852:	f85d fb04 	ldr.w	pc, [sp], #4
    d856:	bf00      	nop
    d858:	000185a4 	.word	0x000185a4

0000d85c <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    d85c:	b500      	push	{lr}
    d85e:	b085      	sub	sp, #20
    d860:	4603      	mov	r3, r0
    d862:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d866:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d86a:	4a0e      	ldr	r2, [pc, #56]	; (d8a4 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    d86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d870:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    d872:	9803      	ldr	r0, [sp, #12]
    d874:	f001 f88a 	bl	e98c <FlexCAN_EnterFreezeMode>
    d878:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    d87a:	9b02      	ldr	r3, [sp, #8]
    d87c:	2b00      	cmp	r3, #0
    d87e:	d10b      	bne.n	d898 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    d880:	9803      	ldr	r0, [sp, #12]
    d882:	f7fe fb18 	bl	beb6 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    d886:	9803      	ldr	r0, [sp, #12]
    d888:	f001 f94a 	bl	eb20 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    d88c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d890:	4a05      	ldr	r2, [pc, #20]	; (d8a8 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    d892:	2100      	movs	r1, #0
    d894:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    d898:	9b02      	ldr	r3, [sp, #8]
}
    d89a:	4618      	mov	r0, r3
    d89c:	b005      	add	sp, #20
    d89e:	f85d fb04 	ldr.w	pc, [sp], #4
    d8a2:	bf00      	nop
    d8a4:	000185a4 	.word	0x000185a4
    d8a8:	1fff935c 	.word	0x1fff935c

0000d8ac <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    d8ac:	b500      	push	{lr}
    d8ae:	b085      	sub	sp, #20
    d8b0:	4603      	mov	r3, r0
    d8b2:	460a      	mov	r2, r1
    d8b4:	f88d 3007 	strb.w	r3, [sp, #7]
    d8b8:	4613      	mov	r3, r2
    d8ba:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d8be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8c2:	4a22      	ldr	r2, [pc, #136]	; (d94c <FlexCAN_Ip_MainFunctionRead+0xa0>)
    d8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8c8:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d8ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8ce:	4a20      	ldr	r2, [pc, #128]	; (d950 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    d8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8d4:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d8d6:	9b02      	ldr	r3, [sp, #8]
    d8d8:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d8dc:	2b00      	cmp	r3, #0
    d8de:	d015      	beq.n	d90c <FlexCAN_Ip_MainFunctionRead+0x60>
    d8e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d8e4:	2b07      	cmp	r3, #7
    d8e6:	d811      	bhi.n	d90c <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d8e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d8ec:	2b00      	cmp	r3, #0
    d8ee:	d128      	bne.n	d942 <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    d8f0:	2105      	movs	r1, #5
    d8f2:	9803      	ldr	r0, [sp, #12]
    d8f4:	f7fe f8e1 	bl	baba <FlexCAN_GetBuffStatusFlag>
    d8f8:	4603      	mov	r3, r0
    d8fa:	2b00      	cmp	r3, #0
    d8fc:	d021      	beq.n	d942 <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    d8fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d902:	2105      	movs	r1, #5
    d904:	4618      	mov	r0, r3
    d906:	f7fe ff17 	bl	c738 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d90a:	e01a      	b.n	d942 <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    d90c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d910:	4619      	mov	r1, r3
    d912:	9803      	ldr	r0, [sp, #12]
    d914:	f7fe f8d1 	bl	baba <FlexCAN_GetBuffStatusFlag>
    d918:	4603      	mov	r3, r0
    d91a:	2b00      	cmp	r3, #0
    d91c:	d012      	beq.n	d944 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    d91e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d922:	9a02      	ldr	r2, [sp, #8]
    d924:	011b      	lsls	r3, r3, #4
    d926:	4413      	add	r3, r2
    d928:	3304      	adds	r3, #4
    d92a:	681b      	ldr	r3, [r3, #0]
    d92c:	2b01      	cmp	r3, #1
    d92e:	d109      	bne.n	d944 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d930:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d934:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d938:	4611      	mov	r1, r2
    d93a:	4618      	mov	r0, r3
    d93c:	f7fe fd74 	bl	c428 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    d940:	e000      	b.n	d944 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d942:	bf00      	nop
}
    d944:	bf00      	nop
    d946:	b005      	add	sp, #20
    d948:	f85d fb04 	ldr.w	pc, [sp], #4
    d94c:	000185a4 	.word	0x000185a4
    d950:	1fff935c 	.word	0x1fff935c

0000d954 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    d954:	b510      	push	{r4, lr}
    d956:	b086      	sub	sp, #24
    d958:	4603      	mov	r3, r0
    d95a:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    d95e:	2301      	movs	r3, #1
    d960:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d962:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d966:	4a15      	ldr	r2, [pc, #84]	; (d9bc <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    d968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d96c:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d96e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d972:	4a13      	ldr	r2, [pc, #76]	; (d9c0 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    d974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d978:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d97a:	2300      	movs	r3, #0
    d97c:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    d97e:	9b04      	ldr	r3, [sp, #16]
    d980:	6a1b      	ldr	r3, [r3, #32]
    d982:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    d984:	9b02      	ldr	r3, [sp, #8]
    d986:	f003 0304 	and.w	r3, r3, #4
    d98a:	2b00      	cmp	r3, #0
    d98c:	d012      	beq.n	d9b4 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    d98e:	9b03      	ldr	r3, [sp, #12]
    d990:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d994:	2b00      	cmp	r3, #0
    d996:	d008      	beq.n	d9aa <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    d998:	9b03      	ldr	r3, [sp, #12]
    d99a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d99e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d9a2:	9b03      	ldr	r3, [sp, #12]
    d9a4:	9a02      	ldr	r2, [sp, #8]
    d9a6:	2107      	movs	r1, #7
    d9a8:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    d9aa:	9b04      	ldr	r3, [sp, #16]
    d9ac:	2204      	movs	r2, #4
    d9ae:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    d9b0:	2300      	movs	r3, #0
    d9b2:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    d9b4:	9b05      	ldr	r3, [sp, #20]
}
    d9b6:	4618      	mov	r0, r3
    d9b8:	b006      	add	sp, #24
    d9ba:	bd10      	pop	{r4, pc}
    d9bc:	000185a4 	.word	0x000185a4
    d9c0:	1fff935c 	.word	0x1fff935c

0000d9c4 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    d9c4:	b510      	push	{r4, lr}
    d9c6:	b098      	sub	sp, #96	; 0x60
    d9c8:	4603      	mov	r3, r0
    d9ca:	460a      	mov	r2, r1
    d9cc:	f88d 3007 	strb.w	r3, [sp, #7]
    d9d0:	4613      	mov	r3, r2
    d9d2:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d9d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9da:	4a3f      	ldr	r2, [pc, #252]	; (dad8 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    d9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9e0:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d9e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9e6:	4a3d      	ldr	r2, [pc, #244]	; (dadc <FlexCAN_Ip_MainFunctionWrite+0x118>)
    d9e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9ec:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    d9ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9f2:	4619      	mov	r1, r3
    d9f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9f6:	f7fe f860 	bl	baba <FlexCAN_GetBuffStatusFlag>
    d9fa:	4603      	mov	r3, r0
    d9fc:	2b00      	cmp	r3, #0
    d9fe:	d068      	beq.n	dad2 <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    da00:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da04:	9a16      	ldr	r2, [sp, #88]	; 0x58
    da06:	011b      	lsls	r3, r3, #4
    da08:	4413      	add	r3, r2
    da0a:	3304      	adds	r3, #4
    da0c:	681b      	ldr	r3, [r3, #0]
    da0e:	2b02      	cmp	r3, #2
    da10:	d15f      	bne.n	dad2 <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    da12:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da16:	9a16      	ldr	r2, [sp, #88]	; 0x58
    da18:	011b      	lsls	r3, r3, #4
    da1a:	4413      	add	r3, r2
    da1c:	3309      	adds	r3, #9
    da1e:	781b      	ldrb	r3, [r3, #0]
    da20:	2b00      	cmp	r3, #0
    da22:	d028      	beq.n	da76 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    da24:	2300      	movs	r3, #0
    da26:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    da28:	2300      	movs	r3, #0
    da2a:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    da2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da30:	4619      	mov	r1, r3
    da32:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da34:	f001 fa87 	bl	ef46 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    da38:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da3c:	aa02      	add	r2, sp, #8
    da3e:	4619      	mov	r1, r3
    da40:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da42:	f001 fbaf 	bl	f1a4 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    da46:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da48:	f7fe f81d 	bl	ba86 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    da4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da50:	9a15      	ldr	r2, [sp, #84]	; 0x54
    da52:	9916      	ldr	r1, [sp, #88]	; 0x58
    da54:	011b      	lsls	r3, r3, #4
    da56:	440b      	add	r3, r1
    da58:	330c      	adds	r3, #12
    da5a:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    da5c:	9b02      	ldr	r3, [sp, #8]
    da5e:	0e1b      	lsrs	r3, r3, #24
    da60:	f003 030f 	and.w	r3, r3, #15
    da64:	2b04      	cmp	r3, #4
    da66:	d11d      	bne.n	daa4 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    da68:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da6c:	4619      	mov	r1, r3
    da6e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da70:	f7fe f810 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
    da74:	e016      	b.n	daa4 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    da76:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da7a:	f89d 4006 	ldrb.w	r4, [sp, #6]
    da7e:	4619      	mov	r1, r3
    da80:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da82:	f001 fb7b 	bl	f17c <FlexCAN_GetMsgBuffTimestamp>
    da86:	4601      	mov	r1, r0
    da88:	9a16      	ldr	r2, [sp, #88]	; 0x58
    da8a:	0123      	lsls	r3, r4, #4
    da8c:	4413      	add	r3, r2
    da8e:	330c      	adds	r3, #12
    da90:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    da92:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da94:	f7fd fff7 	bl	ba86 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    da98:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da9c:	4619      	mov	r1, r3
    da9e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    daa0:	f7fd fff8 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    daa4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    daa8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    daaa:	011b      	lsls	r3, r3, #4
    daac:	4413      	add	r3, r2
    daae:	3304      	adds	r3, #4
    dab0:	2200      	movs	r2, #0
    dab2:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    dab4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dab6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    daba:	2b00      	cmp	r3, #0
    dabc:	d009      	beq.n	dad2 <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    dabe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dac0:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    dac4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    dac8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    dacc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dace:	2104      	movs	r1, #4
    dad0:	47a0      	blx	r4
            }
        }
    }
}
    dad2:	bf00      	nop
    dad4:	b018      	add	sp, #96	; 0x60
    dad6:	bd10      	pop	{r4, pc}
    dad8:	000185a4 	.word	0x000185a4
    dadc:	1fff935c 	.word	0x1fff935c

0000dae0 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    dae0:	b084      	sub	sp, #16
    dae2:	4603      	mov	r3, r0
    dae4:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    dae8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    daec:	4a08      	ldr	r2, [pc, #32]	; (db10 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    daee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daf2:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    daf4:	9b03      	ldr	r3, [sp, #12]
    daf6:	681b      	ldr	r3, [r3, #0]
    daf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    dafc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    db00:	bf0c      	ite	eq
    db02:	2301      	moveq	r3, #1
    db04:	2300      	movne	r3, #0
    db06:	b2db      	uxtb	r3, r3
}
    db08:	4618      	mov	r0, r3
    db0a:	b004      	add	sp, #16
    db0c:	4770      	bx	lr
    db0e:	bf00      	nop
    db10:	000185a4 	.word	0x000185a4

0000db14 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    db14:	b084      	sub	sp, #16
    db16:	4603      	mov	r3, r0
    db18:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    db1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db20:	4a07      	ldr	r2, [pc, #28]	; (db40 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    db22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db26:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    db28:	9b03      	ldr	r3, [sp, #12]
    db2a:	681b      	ldr	r3, [r3, #0]
    db2c:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    db30:	2b00      	cmp	r3, #0
    db32:	bf0c      	ite	eq
    db34:	2301      	moveq	r3, #1
    db36:	2300      	movne	r3, #0
    db38:	b2db      	uxtb	r3, r3
}
    db3a:	4618      	mov	r0, r3
    db3c:	b004      	add	sp, #16
    db3e:	4770      	bx	lr
    db40:	000185a4 	.word	0x000185a4

0000db44 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    db44:	b500      	push	{lr}
    db46:	b085      	sub	sp, #20
    db48:	4603      	mov	r3, r0
    db4a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    db4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db52:	4a0b      	ldr	r2, [pc, #44]	; (db80 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    db54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db58:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    db5a:	f006 faf7 	bl	1414c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    db5e:	9b03      	ldr	r3, [sp, #12]
    db60:	681b      	ldr	r3, [r3, #0]
    db62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    db66:	9b03      	ldr	r3, [sp, #12]
    db68:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    db6a:	f006 fb1b 	bl	141a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    db6e:	9803      	ldr	r0, [sp, #12]
    db70:	f000 ff94 	bl	ea9c <FlexCAN_ExitFreezeMode>
    db74:	4603      	mov	r3, r0
}
    db76:	4618      	mov	r0, r3
    db78:	b005      	add	sp, #20
    db7a:	f85d fb04 	ldr.w	pc, [sp], #4
    db7e:	bf00      	nop
    db80:	000185a4 	.word	0x000185a4

0000db84 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    db84:	b500      	push	{lr}
    db86:	b085      	sub	sp, #20
    db88:	4603      	mov	r3, r0
    db8a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    db8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db92:	4a0a      	ldr	r2, [pc, #40]	; (dbbc <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    db94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db98:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    db9a:	9802      	ldr	r0, [sp, #8]
    db9c:	f000 fef6 	bl	e98c <FlexCAN_EnterFreezeMode>
    dba0:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    dba2:	9b03      	ldr	r3, [sp, #12]
    dba4:	2b00      	cmp	r3, #0
    dba6:	d103      	bne.n	dbb0 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    dba8:	9802      	ldr	r0, [sp, #8]
    dbaa:	f000 ffb9 	bl	eb20 <FlexCAN_Disable>
    dbae:	9003      	str	r0, [sp, #12]
    }
    return status;
    dbb0:	9b03      	ldr	r3, [sp, #12]
}
    dbb2:	4618      	mov	r0, r3
    dbb4:	b005      	add	sp, #20
    dbb6:	f85d fb04 	ldr.w	pc, [sp], #4
    dbba:	bf00      	nop
    dbbc:	000185a4 	.word	0x000185a4

0000dbc0 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    dbc0:	b500      	push	{lr}
    dbc2:	b087      	sub	sp, #28
    dbc4:	4603      	mov	r3, r0
    dbc6:	9100      	str	r1, [sp, #0]
    dbc8:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dbcc:	2300      	movs	r3, #0
    dbce:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dbd0:	2300      	movs	r3, #0
    dbd2:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dbd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbd8:	4a1e      	ldr	r2, [pc, #120]	; (dc54 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    dbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbde:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    dbe0:	9803      	ldr	r0, [sp, #12]
    dbe2:	f7fd fefd 	bl	b9e0 <FlexCAN_IsEnabled>
    dbe6:	4603      	mov	r3, r0
    dbe8:	2b00      	cmp	r3, #0
    dbea:	bf14      	ite	ne
    dbec:	2301      	movne	r3, #1
    dbee:	2300      	moveq	r3, #0
    dbf0:	b2db      	uxtb	r3, r3
    dbf2:	f083 0301 	eor.w	r3, r3, #1
    dbf6:	b2db      	uxtb	r3, r3
    dbf8:	f88d 300b 	strb.w	r3, [sp, #11]
    dbfc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc00:	f003 0301 	and.w	r3, r3, #1
    dc04:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    dc08:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc0c:	2b00      	cmp	r3, #0
    dc0e:	d003      	beq.n	dc18 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    dc10:	9803      	ldr	r0, [sp, #12]
    dc12:	f000 ff07 	bl	ea24 <FlexCAN_Enable>
    dc16:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dc18:	9b05      	ldr	r3, [sp, #20]
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d107      	bne.n	dc2e <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    dc1e:	f006 fae7 	bl	141f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    dc22:	9900      	ldr	r1, [sp, #0]
    dc24:	9803      	ldr	r0, [sp, #12]
    dc26:	f7fe f930 	bl	be8a <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    dc2a:	f006 fb0d 	bl	14248 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    dc2e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc32:	2b00      	cmp	r3, #0
    dc34:	d008      	beq.n	dc48 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    dc36:	9803      	ldr	r0, [sp, #12]
    dc38:	f000 ff72 	bl	eb20 <FlexCAN_Disable>
    dc3c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dc3e:	9b04      	ldr	r3, [sp, #16]
    dc40:	2b00      	cmp	r3, #0
    dc42:	d001      	beq.n	dc48 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    dc44:	9b04      	ldr	r3, [sp, #16]
    dc46:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dc48:	9b05      	ldr	r3, [sp, #20]
}
    dc4a:	4618      	mov	r0, r3
    dc4c:	b007      	add	sp, #28
    dc4e:	f85d fb04 	ldr.w	pc, [sp], #4
    dc52:	bf00      	nop
    dc54:	000185a4 	.word	0x000185a4

0000dc58 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    dc58:	b500      	push	{lr}
    dc5a:	b087      	sub	sp, #28
    dc5c:	4603      	mov	r3, r0
    dc5e:	9100      	str	r1, [sp, #0]
    dc60:	f88d 3007 	strb.w	r3, [sp, #7]
    dc64:	4613      	mov	r3, r2
    dc66:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dc6a:	2300      	movs	r3, #0
    dc6c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dc6e:	2300      	movs	r3, #0
    dc70:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dc72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc76:	4a1c      	ldr	r2, [pc, #112]	; (dce8 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    dc78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc7c:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    dc7e:	9b03      	ldr	r3, [sp, #12]
    dc80:	681b      	ldr	r3, [r3, #0]
    dc82:	0fdb      	lsrs	r3, r3, #31
    dc84:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    dc88:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc8c:	2b00      	cmp	r3, #0
    dc8e:	d003      	beq.n	dc98 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    dc90:	9803      	ldr	r0, [sp, #12]
    dc92:	f000 fec7 	bl	ea24 <FlexCAN_Enable>
    dc96:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dc98:	9b05      	ldr	r3, [sp, #20]
    dc9a:	2b00      	cmp	r3, #0
    dc9c:	d112      	bne.n	dcc4 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dc9e:	f006 fc93 	bl	145c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dca2:	9803      	ldr	r0, [sp, #12]
    dca4:	f7fe f830 	bl	bd08 <FlexCAN_IsExCbtEnabled>
    dca8:	4603      	mov	r3, r0
    dcaa:	2b00      	cmp	r3, #0
    dcac:	d004      	beq.n	dcb8 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    dcae:	9900      	ldr	r1, [sp, #0]
    dcb0:	9803      	ldr	r0, [sp, #12]
    dcb2:	f7fd ff7f 	bl	bbb4 <FlexCAN_SetExtendedTimeSegments>
    dcb6:	e003      	b.n	dcc0 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    dcb8:	9900      	ldr	r1, [sp, #0]
    dcba:	9803      	ldr	r0, [sp, #12]
    dcbc:	f7fd ff4e 	bl	bb5c <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dcc0:	f006 fcae 	bl	14620 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    dcc4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dcc8:	2b00      	cmp	r3, #0
    dcca:	d008      	beq.n	dcde <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    dccc:	9803      	ldr	r0, [sp, #12]
    dcce:	f000 ff27 	bl	eb20 <FlexCAN_Disable>
    dcd2:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dcd4:	9b04      	ldr	r3, [sp, #16]
    dcd6:	2b00      	cmp	r3, #0
    dcd8:	d001      	beq.n	dcde <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    dcda:	9b04      	ldr	r3, [sp, #16]
    dcdc:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dcde:	9b05      	ldr	r3, [sp, #20]
}
    dce0:	4618      	mov	r0, r3
    dce2:	b007      	add	sp, #28
    dce4:	f85d fb04 	ldr.w	pc, [sp], #4
    dce8:	000185a4 	.word	0x000185a4

0000dcec <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    dcec:	b500      	push	{lr}
    dcee:	b085      	sub	sp, #20
    dcf0:	4603      	mov	r3, r0
    dcf2:	9100      	str	r1, [sp, #0]
    dcf4:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dcf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dcfc:	4a0d      	ldr	r2, [pc, #52]	; (dd34 <FlexCAN_Ip_GetBitrate+0x48>)
    dcfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd02:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    dd04:	2300      	movs	r3, #0
    dd06:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dd0a:	9803      	ldr	r0, [sp, #12]
    dd0c:	f7fd fffc 	bl	bd08 <FlexCAN_IsExCbtEnabled>
    dd10:	4603      	mov	r3, r0
    dd12:	2b00      	cmp	r3, #0
    dd14:	d004      	beq.n	dd20 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    dd16:	9900      	ldr	r1, [sp, #0]
    dd18:	9803      	ldr	r0, [sp, #12]
    dd1a:	f7fd ff79 	bl	bc10 <FlexCAN_GetExtendedTimeSegments>
    dd1e:	e003      	b.n	dd28 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    dd20:	9900      	ldr	r1, [sp, #0]
    dd22:	9803      	ldr	r0, [sp, #12]
    dd24:	f7fd ff9c 	bl	bc60 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    dd28:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    dd2c:	4618      	mov	r0, r3
    dd2e:	b005      	add	sp, #20
    dd30:	f85d fb04 	ldr.w	pc, [sp], #4
    dd34:	000185a4 	.word	0x000185a4

0000dd38 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    dd38:	b500      	push	{lr}
    dd3a:	b085      	sub	sp, #20
    dd3c:	4603      	mov	r3, r0
    dd3e:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dd42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd46:	4a0a      	ldr	r2, [pc, #40]	; (dd70 <FlexCAN_Ip_ClearTDCFail+0x38>)
    dd48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd4c:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    dd4e:	f006 faa1 	bl	14294 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    dd52:	9b03      	ldr	r3, [sp, #12]
    dd54:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dd58:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    dd5c:	9b03      	ldr	r3, [sp, #12]
    dd5e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    dd62:	f006 fac3 	bl	142ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    dd66:	bf00      	nop
    dd68:	b005      	add	sp, #20
    dd6a:	f85d fb04 	ldr.w	pc, [sp], #4
    dd6e:	bf00      	nop
    dd70:	000185a4 	.word	0x000185a4

0000dd74 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    dd74:	b084      	sub	sp, #16
    dd76:	4603      	mov	r3, r0
    dd78:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    dd7c:	2300      	movs	r3, #0
    dd7e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dd82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd86:	4a0a      	ldr	r2, [pc, #40]	; (ddb0 <FlexCAN_Ip_GetTDCFail+0x3c>)
    dd88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd8c:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    dd8e:	9b02      	ldr	r3, [sp, #8]
    dd90:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dd94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    dd98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    dd9c:	bf0c      	ite	eq
    dd9e:	2301      	moveq	r3, #1
    dda0:	2300      	movne	r3, #0
    dda2:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    dda6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    ddaa:	4618      	mov	r0, r3
    ddac:	b004      	add	sp, #16
    ddae:	4770      	bx	lr
    ddb0:	000185a4 	.word	0x000185a4

0000ddb4 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    ddb4:	b084      	sub	sp, #16
    ddb6:	4603      	mov	r3, r0
    ddb8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    ddbc:	2300      	movs	r3, #0
    ddbe:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    ddc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ddc6:	4a08      	ldr	r2, [pc, #32]	; (dde8 <FlexCAN_Ip_GetTDCValue+0x34>)
    ddc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddcc:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    ddce:	9b02      	ldr	r3, [sp, #8]
    ddd0:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ddd4:	b2db      	uxtb	r3, r3
    ddd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ddda:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    ddde:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    dde2:	4618      	mov	r0, r3
    dde4:	b004      	add	sp, #16
    dde6:	4770      	bx	lr
    dde8:	000185a4 	.word	0x000185a4

0000ddec <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    ddec:	b500      	push	{lr}
    ddee:	b087      	sub	sp, #28
    ddf0:	4603      	mov	r3, r0
    ddf2:	9100      	str	r1, [sp, #0]
    ddf4:	f88d 3007 	strb.w	r3, [sp, #7]
    ddf8:	4613      	mov	r3, r2
    ddfa:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ddfe:	2300      	movs	r3, #0
    de00:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    de02:	2300      	movs	r3, #0
    de04:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    de06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de0a:	4a1e      	ldr	r2, [pc, #120]	; (de84 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    de0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de10:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    de12:	9803      	ldr	r0, [sp, #12]
    de14:	f7fd ffaf 	bl	bd76 <FlexCAN_IsFDEnabled>
    de18:	4603      	mov	r3, r0
    de1a:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    de1e:	9b03      	ldr	r3, [sp, #12]
    de20:	681b      	ldr	r3, [r3, #0]
    de22:	0fdb      	lsrs	r3, r3, #31
    de24:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    de28:	f89d 300a 	ldrb.w	r3, [sp, #10]
    de2c:	2b00      	cmp	r3, #0
    de2e:	d003      	beq.n	de38 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    de30:	9803      	ldr	r0, [sp, #12]
    de32:	f000 fdf7 	bl	ea24 <FlexCAN_Enable>
    de36:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    de38:	9b05      	ldr	r3, [sp, #20]
    de3a:	2b00      	cmp	r3, #0
    de3c:	d10f      	bne.n	de5e <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    de3e:	f006 fc15 	bl	1466c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    de42:	f89d 2006 	ldrb.w	r2, [sp, #6]
    de46:	f89d 300b 	ldrb.w	r3, [sp, #11]
    de4a:	4619      	mov	r1, r3
    de4c:	9803      	ldr	r0, [sp, #12]
    de4e:	f7fd fdd1 	bl	b9f4 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    de52:	9900      	ldr	r1, [sp, #0]
    de54:	9803      	ldr	r0, [sp, #12]
    de56:	f7fd fe4c 	bl	baf2 <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    de5a:	f006 fc33 	bl	146c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    de5e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    de62:	2b00      	cmp	r3, #0
    de64:	d008      	beq.n	de78 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    de66:	9803      	ldr	r0, [sp, #12]
    de68:	f000 fe5a 	bl	eb20 <FlexCAN_Disable>
    de6c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    de6e:	9b04      	ldr	r3, [sp, #16]
    de70:	2b00      	cmp	r3, #0
    de72:	d001      	beq.n	de78 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    de74:	9b04      	ldr	r3, [sp, #16]
    de76:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    de78:	9b05      	ldr	r3, [sp, #20]
}
    de7a:	4618      	mov	r0, r3
    de7c:	b007      	add	sp, #28
    de7e:	f85d fb04 	ldr.w	pc, [sp], #4
    de82:	bf00      	nop
    de84:	000185a4 	.word	0x000185a4

0000de88 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    de88:	b500      	push	{lr}
    de8a:	b085      	sub	sp, #20
    de8c:	4603      	mov	r3, r0
    de8e:	9100      	str	r1, [sp, #0]
    de90:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    de94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de98:	4a08      	ldr	r2, [pc, #32]	; (debc <FlexCAN_Ip_GetBitrateFD+0x34>)
    de9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de9e:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    dea0:	2300      	movs	r3, #0
    dea2:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    dea6:	9900      	ldr	r1, [sp, #0]
    dea8:	9803      	ldr	r0, [sp, #12]
    deaa:	f7fd ff00 	bl	bcae <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    deae:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    deb2:	4618      	mov	r0, r3
    deb4:	b005      	add	sp, #20
    deb6:	f85d fb04 	ldr.w	pc, [sp], #4
    deba:	bf00      	nop
    debc:	000185a4 	.word	0x000185a4

0000dec0 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    dec0:	b500      	push	{lr}
    dec2:	b087      	sub	sp, #28
    dec4:	4603      	mov	r3, r0
    dec6:	f88d 3007 	strb.w	r3, [sp, #7]
    deca:	460b      	mov	r3, r1
    decc:	f88d 3006 	strb.w	r3, [sp, #6]
    ded0:	4613      	mov	r3, r2
    ded2:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ded6:	2300      	movs	r3, #0
    ded8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    deda:	2300      	movs	r3, #0
    dedc:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dede:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dee2:	4a20      	ldr	r2, [pc, #128]	; (df64 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    dee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dee8:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    deea:	9803      	ldr	r0, [sp, #12]
    deec:	f7fd fd78 	bl	b9e0 <FlexCAN_IsEnabled>
    def0:	4603      	mov	r3, r0
    def2:	2b00      	cmp	r3, #0
    def4:	bf14      	ite	ne
    def6:	2301      	movne	r3, #1
    def8:	2300      	moveq	r3, #0
    defa:	b2db      	uxtb	r3, r3
    defc:	f083 0301 	eor.w	r3, r3, #1
    df00:	b2db      	uxtb	r3, r3
    df02:	f88d 300b 	strb.w	r3, [sp, #11]
    df06:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df0a:	f003 0301 	and.w	r3, r3, #1
    df0e:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    df12:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df16:	2b00      	cmp	r3, #0
    df18:	d003      	beq.n	df22 <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    df1a:	9803      	ldr	r0, [sp, #12]
    df1c:	f000 fd82 	bl	ea24 <FlexCAN_Enable>
    df20:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    df22:	9b05      	ldr	r3, [sp, #20]
    df24:	2b00      	cmp	r3, #0
    df26:	d10b      	bne.n	df40 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    df28:	f006 fbf2 	bl	14710 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    df2c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    df30:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df34:	4619      	mov	r1, r3
    df36:	9803      	ldr	r0, [sp, #12]
    df38:	f7fd fd2b 	bl	b992 <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    df3c:	f006 fc14 	bl	14768 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    df40:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df44:	2b00      	cmp	r3, #0
    df46:	d008      	beq.n	df5a <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    df48:	9803      	ldr	r0, [sp, #12]
    df4a:	f000 fde9 	bl	eb20 <FlexCAN_Disable>
    df4e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    df50:	9b04      	ldr	r3, [sp, #16]
    df52:	2b00      	cmp	r3, #0
    df54:	d001      	beq.n	df5a <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    df56:	9b04      	ldr	r3, [sp, #16]
    df58:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    df5a:	9b05      	ldr	r3, [sp, #20]
}
    df5c:	4618      	mov	r0, r3
    df5e:	b007      	add	sp, #28
    df60:	f85d fb04 	ldr.w	pc, [sp], #4
    df64:	000185a4 	.word	0x000185a4

0000df68 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    df68:	b500      	push	{lr}
    df6a:	b087      	sub	sp, #28
    df6c:	4603      	mov	r3, r0
    df6e:	460a      	mov	r2, r1
    df70:	f88d 3007 	strb.w	r3, [sp, #7]
    df74:	4613      	mov	r3, r2
    df76:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    df7a:	2300      	movs	r3, #0
    df7c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    df7e:	2300      	movs	r3, #0
    df80:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    df82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df86:	4a1f      	ldr	r2, [pc, #124]	; (e004 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    df88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df8c:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    df8e:	9803      	ldr	r0, [sp, #12]
    df90:	f7fd fd26 	bl	b9e0 <FlexCAN_IsEnabled>
    df94:	4603      	mov	r3, r0
    df96:	2b00      	cmp	r3, #0
    df98:	bf14      	ite	ne
    df9a:	2301      	movne	r3, #1
    df9c:	2300      	moveq	r3, #0
    df9e:	b2db      	uxtb	r3, r3
    dfa0:	f083 0301 	eor.w	r3, r3, #1
    dfa4:	b2db      	uxtb	r3, r3
    dfa6:	f88d 300b 	strb.w	r3, [sp, #11]
    dfaa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dfae:	f003 0301 	and.w	r3, r3, #1
    dfb2:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    dfb6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dfba:	2b00      	cmp	r3, #0
    dfbc:	d003      	beq.n	dfc6 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    dfbe:	9803      	ldr	r0, [sp, #12]
    dfc0:	f000 fd30 	bl	ea24 <FlexCAN_Enable>
    dfc4:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dfc6:	9b05      	ldr	r3, [sp, #20]
    dfc8:	2b00      	cmp	r3, #0
    dfca:	d109      	bne.n	dfe0 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    dfcc:	f006 fbf2 	bl	147b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    dfd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfd4:	4619      	mov	r1, r3
    dfd6:	9803      	ldr	r0, [sp, #12]
    dfd8:	f7fd ff43 	bl	be62 <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    dfdc:	f006 fc16 	bl	1480c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    dfe0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dfe4:	2b00      	cmp	r3, #0
    dfe6:	d008      	beq.n	dffa <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    dfe8:	9803      	ldr	r0, [sp, #12]
    dfea:	f000 fd99 	bl	eb20 <FlexCAN_Disable>
    dfee:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dff0:	9b04      	ldr	r3, [sp, #16]
    dff2:	2b00      	cmp	r3, #0
    dff4:	d001      	beq.n	dffa <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    dff6:	9b04      	ldr	r3, [sp, #16]
    dff8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dffa:	9b05      	ldr	r3, [sp, #20]
}
    dffc:	4618      	mov	r0, r3
    dffe:	b007      	add	sp, #28
    e000:	f85d fb04 	ldr.w	pc, [sp], #4
    e004:	000185a4 	.word	0x000185a4

0000e008 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    e008:	b500      	push	{lr}
    e00a:	b085      	sub	sp, #20
    e00c:	4603      	mov	r3, r0
    e00e:	460a      	mov	r2, r1
    e010:	f88d 3007 	strb.w	r3, [sp, #7]
    e014:	4613      	mov	r3, r2
    e016:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e01a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e01e:	4a0b      	ldr	r2, [pc, #44]	; (e04c <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    e020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e024:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    e026:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e02a:	4619      	mov	r1, r3
    e02c:	9803      	ldr	r0, [sp, #12]
    e02e:	f7fd fd44 	bl	baba <FlexCAN_GetBuffStatusFlag>
    e032:	4603      	mov	r3, r0
    e034:	2b01      	cmp	r3, #1
    e036:	bf0c      	ite	eq
    e038:	2301      	moveq	r3, #1
    e03a:	2300      	movne	r3, #0
    e03c:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    e040:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    e044:	4618      	mov	r0, r3
    e046:	b005      	add	sp, #20
    e048:	f85d fb04 	ldr.w	pc, [sp], #4
    e04c:	000185a4 	.word	0x000185a4

0000e050 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    e050:	b500      	push	{lr}
    e052:	b085      	sub	sp, #20
    e054:	4603      	mov	r3, r0
    e056:	460a      	mov	r2, r1
    e058:	f88d 3007 	strb.w	r3, [sp, #7]
    e05c:	4613      	mov	r3, r2
    e05e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e062:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e066:	4a07      	ldr	r2, [pc, #28]	; (e084 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    e068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e06c:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    e06e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e072:	4619      	mov	r1, r3
    e074:	9803      	ldr	r0, [sp, #12]
    e076:	f7fd fd0d 	bl	ba94 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    e07a:	bf00      	nop
    e07c:	b005      	add	sp, #20
    e07e:	f85d fb04 	ldr.w	pc, [sp], #4
    e082:	bf00      	nop
    e084:	000185a4 	.word	0x000185a4

0000e088 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    e088:	b500      	push	{lr}
    e08a:	b087      	sub	sp, #28
    e08c:	4603      	mov	r3, r0
    e08e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e092:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e096:	4a11      	ldr	r2, [pc, #68]	; (e0dc <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    e098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e09c:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    e09e:	2301      	movs	r3, #1
    e0a0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e0a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0a6:	4a0e      	ldr	r2, [pc, #56]	; (e0e0 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    e0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0ac:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    e0ae:	9804      	ldr	r0, [sp, #16]
    e0b0:	f7fd fc96 	bl	b9e0 <FlexCAN_IsEnabled>
    e0b4:	4603      	mov	r3, r0
    e0b6:	2b00      	cmp	r3, #0
    e0b8:	d00b      	beq.n	e0d2 <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    e0ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0be:	4619      	mov	r1, r3
    e0c0:	9804      	ldr	r0, [sp, #16]
    e0c2:	f000 ffe1 	bl	f088 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    e0c6:	9b03      	ldr	r3, [sp, #12]
    e0c8:	2201      	movs	r2, #1
    e0ca:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e0ce:	2300      	movs	r3, #0
    e0d0:	9305      	str	r3, [sp, #20]
    }

    return result;
    e0d2:	9b05      	ldr	r3, [sp, #20]
}
    e0d4:	4618      	mov	r0, r3
    e0d6:	b007      	add	sp, #28
    e0d8:	f85d fb04 	ldr.w	pc, [sp], #4
    e0dc:	000185a4 	.word	0x000185a4
    e0e0:	1fff935c 	.word	0x1fff935c

0000e0e4 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    e0e4:	b500      	push	{lr}
    e0e6:	b087      	sub	sp, #28
    e0e8:	4603      	mov	r3, r0
    e0ea:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e0ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0f2:	4a10      	ldr	r2, [pc, #64]	; (e134 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    e0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0f8:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    e0fa:	2301      	movs	r3, #1
    e0fc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e0fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e102:	4a0d      	ldr	r2, [pc, #52]	; (e138 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    e104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e108:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    e10a:	9804      	ldr	r0, [sp, #16]
    e10c:	f7fd fc68 	bl	b9e0 <FlexCAN_IsEnabled>
    e110:	4603      	mov	r3, r0
    e112:	2b00      	cmp	r3, #0
    e114:	d008      	beq.n	e128 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    e116:	9804      	ldr	r0, [sp, #16]
    e118:	f000 ffae 	bl	f078 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    e11c:	9b03      	ldr	r3, [sp, #12]
    e11e:	2200      	movs	r2, #0
    e120:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e124:	2300      	movs	r3, #0
    e126:	9305      	str	r3, [sp, #20]
    }

    return result;
    e128:	9b05      	ldr	r3, [sp, #20]
}
    e12a:	4618      	mov	r0, r3
    e12c:	b007      	add	sp, #28
    e12e:	f85d fb04 	ldr.w	pc, [sp], #4
    e132:	bf00      	nop
    e134:	000185a4 	.word	0x000185a4
    e138:	1fff935c 	.word	0x1fff935c

0000e13c <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    e13c:	b500      	push	{lr}
    e13e:	b087      	sub	sp, #28
    e140:	4603      	mov	r3, r0
    e142:	9100      	str	r1, [sp, #0]
    e144:	f88d 3007 	strb.w	r3, [sp, #7]
    e148:	4613      	mov	r3, r2
    e14a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e14e:	2300      	movs	r3, #0
    e150:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e152:	2300      	movs	r3, #0
    e154:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e156:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e15a:	4a3a      	ldr	r2, [pc, #232]	; (e244 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    e15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e160:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e162:	9803      	ldr	r0, [sp, #12]
    e164:	f7fd fc3c 	bl	b9e0 <FlexCAN_IsEnabled>
    e168:	4603      	mov	r3, r0
    e16a:	2b00      	cmp	r3, #0
    e16c:	bf14      	ite	ne
    e16e:	2301      	movne	r3, #1
    e170:	2300      	moveq	r3, #0
    e172:	b2db      	uxtb	r3, r3
    e174:	f083 0301 	eor.w	r3, r3, #1
    e178:	b2db      	uxtb	r3, r3
    e17a:	f88d 300b 	strb.w	r3, [sp, #11]
    e17e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e182:	f003 0301 	and.w	r3, r3, #1
    e186:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e18a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e18e:	2b00      	cmp	r3, #0
    e190:	d003      	beq.n	e19a <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e192:	9803      	ldr	r0, [sp, #12]
    e194:	f000 fc46 	bl	ea24 <FlexCAN_Enable>
    e198:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    e19a:	9b05      	ldr	r3, [sp, #20]
    e19c:	2b00      	cmp	r3, #0
    e19e:	d13c      	bne.n	e21a <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    e1a0:	9b00      	ldr	r3, [sp, #0]
    e1a2:	2b04      	cmp	r3, #4
    e1a4:	d83b      	bhi.n	e21e <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    e1a6:	a201      	add	r2, pc, #4	; (adr r2, e1ac <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    e1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e1ac:	0000e1f7 	.word	0x0000e1f7
    e1b0:	0000e209 	.word	0x0000e209
    e1b4:	0000e1d3 	.word	0x0000e1d3
    e1b8:	0000e1e5 	.word	0x0000e1e5
    e1bc:	0000e1c1 	.word	0x0000e1c1
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    e1c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1c4:	461a      	mov	r2, r3
    e1c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e1ca:	9803      	ldr	r0, [sp, #12]
    e1cc:	f000 fce8 	bl	eba0 <FlexCAN_SetErrIntCmd>
                break;
    e1d0:	e026      	b.n	e220 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    e1d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1d6:	461a      	mov	r2, r3
    e1d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    e1dc:	9803      	ldr	r0, [sp, #12]
    e1de:	f000 fcdf 	bl	eba0 <FlexCAN_SetErrIntCmd>
                break;
    e1e2:	e01d      	b.n	e220 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    e1e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1e8:	461a      	mov	r2, r3
    e1ea:	f244 0101 	movw	r1, #16385	; 0x4001
    e1ee:	9803      	ldr	r0, [sp, #12]
    e1f0:	f000 fcd6 	bl	eba0 <FlexCAN_SetErrIntCmd>
                break;
    e1f4:	e014      	b.n	e220 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    e1f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1fa:	461a      	mov	r2, r3
    e1fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e200:	9803      	ldr	r0, [sp, #12]
    e202:	f000 fccd 	bl	eba0 <FlexCAN_SetErrIntCmd>
                }
                break;
    e206:	e00b      	b.n	e220 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    e208:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e20c:	461a      	mov	r2, r3
    e20e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e212:	9803      	ldr	r0, [sp, #12]
    e214:	f000 fcc4 	bl	eba0 <FlexCAN_SetErrIntCmd>
                }
                break;
    e218:	e002      	b.n	e220 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    e21a:	bf00      	nop
    e21c:	e000      	b.n	e220 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    e21e:	bf00      	nop

    if (TRUE == disabled)
    e220:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e224:	2b00      	cmp	r3, #0
    e226:	d008      	beq.n	e23a <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    e228:	9803      	ldr	r0, [sp, #12]
    e22a:	f000 fc79 	bl	eb20 <FlexCAN_Disable>
    e22e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e230:	9b04      	ldr	r3, [sp, #16]
    e232:	2b00      	cmp	r3, #0
    e234:	d001      	beq.n	e23a <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    e236:	9b04      	ldr	r3, [sp, #16]
    e238:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e23a:	9b05      	ldr	r3, [sp, #20]
}
    e23c:	4618      	mov	r0, r3
    e23e:	b007      	add	sp, #28
    e240:	f85d fb04 	ldr.w	pc, [sp], #4
    e244:	000185a4 	.word	0x000185a4

0000e248 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    e248:	b500      	push	{lr}
    e24a:	b087      	sub	sp, #28
    e24c:	4603      	mov	r3, r0
    e24e:	460a      	mov	r2, r1
    e250:	f88d 3007 	strb.w	r3, [sp, #7]
    e254:	4613      	mov	r3, r2
    e256:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e25a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e25e:	4a27      	ldr	r2, [pc, #156]	; (e2fc <FlexCAN_Ip_AbortTransfer+0xb4>)
    e260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e264:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e266:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e26a:	4a25      	ldr	r2, [pc, #148]	; (e300 <FlexCAN_Ip_AbortTransfer+0xb8>)
    e26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e270:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e272:	2300      	movs	r3, #0
    e274:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    e276:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e27a:	2b1f      	cmp	r3, #31
    e27c:	d838      	bhi.n	e2f0 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    e27e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e282:	9a03      	ldr	r2, [sp, #12]
    e284:	011b      	lsls	r3, r3, #4
    e286:	4413      	add	r3, r2
    e288:	3304      	adds	r3, #4
    e28a:	681b      	ldr	r3, [r3, #0]
    e28c:	2b00      	cmp	r3, #0
    e28e:	d102      	bne.n	e296 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    e290:	2305      	movs	r3, #5
    e292:	9305      	str	r3, [sp, #20]
    e294:	e02c      	b.n	e2f0 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    e296:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e29a:	9b03      	ldr	r3, [sp, #12]
    e29c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    e2a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    e2a4:	9804      	ldr	r0, [sp, #16]
    e2a6:	f000 feb3 	bl	f010 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    e2aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e2ae:	9a03      	ldr	r2, [sp, #12]
    e2b0:	011b      	lsls	r3, r3, #4
    e2b2:	4413      	add	r3, r2
    e2b4:	3304      	adds	r3, #4
    e2b6:	681b      	ldr	r3, [r3, #0]
    e2b8:	2b02      	cmp	r3, #2
    e2ba:	d108      	bne.n	e2ce <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    e2bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e2c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2c4:	4611      	mov	r1, r2
    e2c6:	4618      	mov	r0, r3
    e2c8:	f7fe fabc 	bl	c844 <FlexCAN_AbortTxTransfer>
    e2cc:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    e2ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e2d2:	9a03      	ldr	r2, [sp, #12]
    e2d4:	011b      	lsls	r3, r3, #4
    e2d6:	4413      	add	r3, r2
    e2d8:	3304      	adds	r3, #4
    e2da:	681b      	ldr	r3, [r3, #0]
    e2dc:	2b01      	cmp	r3, #1
    e2de:	d107      	bne.n	e2f0 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    e2e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e2e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2e8:	4611      	mov	r1, r2
    e2ea:	4618      	mov	r0, r3
    e2ec:	f7fe fb34 	bl	c958 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    e2f0:	9b05      	ldr	r3, [sp, #20]
}
    e2f2:	4618      	mov	r0, r3
    e2f4:	b007      	add	sp, #28
    e2f6:	f85d fb04 	ldr.w	pc, [sp], #4
    e2fa:	bf00      	nop
    e2fc:	000185a4 	.word	0x000185a4
    e300:	1fff935c 	.word	0x1fff935c

0000e304 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    e304:	b500      	push	{lr}
    e306:	b087      	sub	sp, #28
    e308:	4603      	mov	r3, r0
    e30a:	9100      	str	r1, [sp, #0]
    e30c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e310:	2300      	movs	r3, #0
    e312:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e314:	2300      	movs	r3, #0
    e316:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e31c:	4a1b      	ldr	r2, [pc, #108]	; (e38c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    e31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e322:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e324:	9803      	ldr	r0, [sp, #12]
    e326:	f7fd fb5b 	bl	b9e0 <FlexCAN_IsEnabled>
    e32a:	4603      	mov	r3, r0
    e32c:	2b00      	cmp	r3, #0
    e32e:	bf14      	ite	ne
    e330:	2301      	movne	r3, #1
    e332:	2300      	moveq	r3, #0
    e334:	b2db      	uxtb	r3, r3
    e336:	f083 0301 	eor.w	r3, r3, #1
    e33a:	b2db      	uxtb	r3, r3
    e33c:	f88d 300b 	strb.w	r3, [sp, #11]
    e340:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e344:	f003 0301 	and.w	r3, r3, #1
    e348:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e34c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e350:	2b00      	cmp	r3, #0
    e352:	d003      	beq.n	e35c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e354:	9803      	ldr	r0, [sp, #12]
    e356:	f000 fb65 	bl	ea24 <FlexCAN_Enable>
    e35a:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e35c:	9b05      	ldr	r3, [sp, #20]
    e35e:	2b00      	cmp	r3, #0
    e360:	d102      	bne.n	e368 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    e362:	9b03      	ldr	r3, [sp, #12]
    e364:	9a00      	ldr	r2, [sp, #0]
    e366:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    e368:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e36c:	2b00      	cmp	r3, #0
    e36e:	d008      	beq.n	e382 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e370:	9803      	ldr	r0, [sp, #12]
    e372:	f000 fbd5 	bl	eb20 <FlexCAN_Disable>
    e376:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e378:	9b04      	ldr	r3, [sp, #16]
    e37a:	2b00      	cmp	r3, #0
    e37c:	d001      	beq.n	e382 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    e37e:	9b04      	ldr	r3, [sp, #16]
    e380:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e382:	9b05      	ldr	r3, [sp, #20]
}
    e384:	4618      	mov	r0, r3
    e386:	b007      	add	sp, #28
    e388:	f85d fb04 	ldr.w	pc, [sp], #4
    e38c:	000185a4 	.word	0x000185a4

0000e390 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    e390:	b500      	push	{lr}
    e392:	b087      	sub	sp, #28
    e394:	4603      	mov	r3, r0
    e396:	9100      	str	r1, [sp, #0]
    e398:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e39c:	2300      	movs	r3, #0
    e39e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e3a0:	2300      	movs	r3, #0
    e3a2:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e3a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e3a8:	4a1b      	ldr	r2, [pc, #108]	; (e418 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    e3aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3ae:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e3b0:	9803      	ldr	r0, [sp, #12]
    e3b2:	f7fd fb15 	bl	b9e0 <FlexCAN_IsEnabled>
    e3b6:	4603      	mov	r3, r0
    e3b8:	2b00      	cmp	r3, #0
    e3ba:	bf14      	ite	ne
    e3bc:	2301      	movne	r3, #1
    e3be:	2300      	moveq	r3, #0
    e3c0:	b2db      	uxtb	r3, r3
    e3c2:	f083 0301 	eor.w	r3, r3, #1
    e3c6:	b2db      	uxtb	r3, r3
    e3c8:	f88d 300b 	strb.w	r3, [sp, #11]
    e3cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3d0:	f003 0301 	and.w	r3, r3, #1
    e3d4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e3d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d003      	beq.n	e3e8 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e3e0:	9803      	ldr	r0, [sp, #12]
    e3e2:	f000 fb1f 	bl	ea24 <FlexCAN_Enable>
    e3e6:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e3e8:	9b05      	ldr	r3, [sp, #20]
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	d102      	bne.n	e3f4 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    e3ee:	9b03      	ldr	r3, [sp, #12]
    e3f0:	9a00      	ldr	r2, [sp, #0]
    e3f2:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    e3f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3f8:	2b00      	cmp	r3, #0
    e3fa:	d008      	beq.n	e40e <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e3fc:	9803      	ldr	r0, [sp, #12]
    e3fe:	f000 fb8f 	bl	eb20 <FlexCAN_Disable>
    e402:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e404:	9b04      	ldr	r3, [sp, #16]
    e406:	2b00      	cmp	r3, #0
    e408:	d001      	beq.n	e40e <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    e40a:	9b04      	ldr	r3, [sp, #16]
    e40c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e40e:	9b05      	ldr	r3, [sp, #20]
}
    e410:	4618      	mov	r0, r3
    e412:	b007      	add	sp, #28
    e414:	f85d fb04 	ldr.w	pc, [sp], #4
    e418:	000185a4 	.word	0x000185a4

0000e41c <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    e41c:	b500      	push	{lr}
    e41e:	b087      	sub	sp, #28
    e420:	4603      	mov	r3, r0
    e422:	460a      	mov	r2, r1
    e424:	f88d 3007 	strb.w	r3, [sp, #7]
    e428:	4613      	mov	r3, r2
    e42a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e42e:	2300      	movs	r3, #0
    e430:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e432:	2300      	movs	r3, #0
    e434:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e436:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e43a:	4a1f      	ldr	r2, [pc, #124]	; (e4b8 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    e43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e440:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e442:	9803      	ldr	r0, [sp, #12]
    e444:	f7fd facc 	bl	b9e0 <FlexCAN_IsEnabled>
    e448:	4603      	mov	r3, r0
    e44a:	2b00      	cmp	r3, #0
    e44c:	bf14      	ite	ne
    e44e:	2301      	movne	r3, #1
    e450:	2300      	moveq	r3, #0
    e452:	b2db      	uxtb	r3, r3
    e454:	f083 0301 	eor.w	r3, r3, #1
    e458:	b2db      	uxtb	r3, r3
    e45a:	f88d 300b 	strb.w	r3, [sp, #11]
    e45e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e462:	f003 0301 	and.w	r3, r3, #1
    e466:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e46a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e46e:	2b00      	cmp	r3, #0
    e470:	d003      	beq.n	e47a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e472:	9803      	ldr	r0, [sp, #12]
    e474:	f000 fad6 	bl	ea24 <FlexCAN_Enable>
    e478:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    e47a:	9b05      	ldr	r3, [sp, #20]
    e47c:	2b00      	cmp	r3, #0
    e47e:	d109      	bne.n	e494 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e480:	f005 ff5a 	bl	14338 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    e484:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e488:	4619      	mov	r1, r3
    e48a:	9803      	ldr	r0, [sp, #12]
    e48c:	f7fd fae5 	bl	ba5a <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e490:	f005 ff7e 	bl	14390 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    e494:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e498:	2b00      	cmp	r3, #0
    e49a:	d008      	beq.n	e4ae <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    e49c:	9803      	ldr	r0, [sp, #12]
    e49e:	f000 fb3f 	bl	eb20 <FlexCAN_Disable>
    e4a2:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e4a4:	9b04      	ldr	r3, [sp, #16]
    e4a6:	2b00      	cmp	r3, #0
    e4a8:	d001      	beq.n	e4ae <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    e4aa:	9b04      	ldr	r3, [sp, #16]
    e4ac:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e4ae:	9b05      	ldr	r3, [sp, #20]
}
    e4b0:	4618      	mov	r0, r3
    e4b2:	b007      	add	sp, #28
    e4b4:	f85d fb04 	ldr.w	pc, [sp], #4
    e4b8:	000185a4 	.word	0x000185a4

0000e4bc <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    e4bc:	b500      	push	{lr}
    e4be:	b085      	sub	sp, #20
    e4c0:	4603      	mov	r3, r0
    e4c2:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    e4c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4ca:	4a06      	ldr	r2, [pc, #24]	; (e4e4 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    e4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4d0:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    e4d2:	9803      	ldr	r0, [sp, #12]
    e4d4:	f7fd fc5d 	bl	bd92 <FlexCAN_IsListenOnlyModeEnabled>
    e4d8:	4603      	mov	r3, r0
}
    e4da:	4618      	mov	r0, r3
    e4dc:	b005      	add	sp, #20
    e4de:	f85d fb04 	ldr.w	pc, [sp], #4
    e4e2:	bf00      	nop
    e4e4:	000185a4 	.word	0x000185a4

0000e4e8 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    e4e8:	b500      	push	{lr}
    e4ea:	b089      	sub	sp, #36	; 0x24
    e4ec:	4603      	mov	r3, r0
    e4ee:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    e4f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4f6:	4a27      	ldr	r2, [pc, #156]	; (e594 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    e4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4fc:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    e4fe:	2300      	movs	r3, #0
    e500:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    e502:	2300      	movs	r3, #0
    e504:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e506:	2100      	movs	r1, #0
    e508:	4823      	ldr	r0, [pc, #140]	; (e598 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    e50a:	f7f3 fcfb 	bl	1f04 <OsIf_MicrosToTicks>
    e50e:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    e510:	2301      	movs	r3, #1
    e512:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    e514:	9b05      	ldr	r3, [sp, #20]
    e516:	685b      	ldr	r3, [r3, #4]
    e518:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e51c:	2b00      	cmp	r3, #0
    e51e:	d033      	beq.n	e588 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    e520:	2300      	movs	r3, #0
    e522:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e524:	9b05      	ldr	r3, [sp, #20]
    e526:	6a1b      	ldr	r3, [r3, #32]
    e528:	f003 0320 	and.w	r3, r3, #32
    e52c:	2b00      	cmp	r3, #0
    e52e:	d02b      	beq.n	e588 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e530:	f006 fa36 	bl	149a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    e534:	9b05      	ldr	r3, [sp, #20]
    e536:	685b      	ldr	r3, [r3, #4]
    e538:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    e53c:	9b05      	ldr	r3, [sp, #20]
    e53e:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    e540:	9b05      	ldr	r3, [sp, #20]
    e542:	685b      	ldr	r3, [r3, #4]
    e544:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e548:	9b05      	ldr	r3, [sp, #20]
    e54a:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e54c:	f006 fa54 	bl	149f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e550:	2000      	movs	r0, #0
    e552:	f7f3 fc8b 	bl	1e6c <OsIf_GetCounter>
    e556:	4603      	mov	r3, r0
    e558:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e55a:	e00f      	b.n	e57c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e55c:	ab03      	add	r3, sp, #12
    e55e:	2100      	movs	r1, #0
    e560:	4618      	mov	r0, r3
    e562:	f7f3 fc9c 	bl	1e9e <OsIf_GetElapsed>
    e566:	4602      	mov	r2, r0
    e568:	9b07      	ldr	r3, [sp, #28]
    e56a:	4413      	add	r3, r2
    e56c:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    e56e:	9a07      	ldr	r2, [sp, #28]
    e570:	9b04      	ldr	r3, [sp, #16]
    e572:	429a      	cmp	r2, r3
    e574:	d302      	bcc.n	e57c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    e576:	2303      	movs	r3, #3
    e578:	9306      	str	r3, [sp, #24]
                    break;
    e57a:	e005      	b.n	e588 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e57c:	9b05      	ldr	r3, [sp, #20]
    e57e:	6a1b      	ldr	r3, [r3, #32]
    e580:	f003 0320 	and.w	r3, r3, #32
    e584:	2b00      	cmp	r3, #0
    e586:	d1e9      	bne.n	e55c <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    e588:	9b06      	ldr	r3, [sp, #24]
}
    e58a:	4618      	mov	r0, r3
    e58c:	b009      	add	sp, #36	; 0x24
    e58e:	f85d fb04 	ldr.w	pc, [sp], #4
    e592:	bf00      	nop
    e594:	000185a4 	.word	0x000185a4
    e598:	000f4240 	.word	0x000f4240

0000e59c <FlexCAN_SetSelfReception>:
{
    e59c:	b082      	sub	sp, #8
    e59e:	9001      	str	r0, [sp, #4]
    e5a0:	460b      	mov	r3, r1
    e5a2:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    e5a6:	9b01      	ldr	r3, [sp, #4]
    e5a8:	681b      	ldr	r3, [r3, #0]
    e5aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e5ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e5b2:	2a00      	cmp	r2, #0
    e5b4:	d001      	beq.n	e5ba <FlexCAN_SetSelfReception+0x1e>
    e5b6:	2200      	movs	r2, #0
    e5b8:	e001      	b.n	e5be <FlexCAN_SetSelfReception+0x22>
    e5ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e5be:	431a      	orrs	r2, r3
    e5c0:	9b01      	ldr	r3, [sp, #4]
    e5c2:	601a      	str	r2, [r3, #0]
}
    e5c4:	bf00      	nop
    e5c6:	b002      	add	sp, #8
    e5c8:	4770      	bx	lr

0000e5ca <FlexCAN_IsFDEnabled>:
{
    e5ca:	b082      	sub	sp, #8
    e5cc:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    e5ce:	9b01      	ldr	r3, [sp, #4]
    e5d0:	681b      	ldr	r3, [r3, #0]
    e5d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    e5d6:	2b00      	cmp	r3, #0
    e5d8:	bf14      	ite	ne
    e5da:	2301      	movne	r3, #1
    e5dc:	2300      	moveq	r3, #0
    e5de:	b2db      	uxtb	r3, r3
}
    e5e0:	4618      	mov	r0, r3
    e5e2:	b002      	add	sp, #8
    e5e4:	4770      	bx	lr

0000e5e6 <FlexCAN_SetIsoCan>:
{
    e5e6:	b082      	sub	sp, #8
    e5e8:	9001      	str	r0, [sp, #4]
    e5ea:	460b      	mov	r3, r1
    e5ec:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    e5f0:	9b01      	ldr	r3, [sp, #4]
    e5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e5f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e5f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e5fc:	2a00      	cmp	r2, #0
    e5fe:	d002      	beq.n	e606 <FlexCAN_SetIsoCan+0x20>
    e600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e604:	e000      	b.n	e608 <FlexCAN_SetIsoCan+0x22>
    e606:	2200      	movs	r2, #0
    e608:	431a      	orrs	r2, r3
    e60a:	9b01      	ldr	r3, [sp, #4]
    e60c:	635a      	str	r2, [r3, #52]	; 0x34
}
    e60e:	bf00      	nop
    e610:	b002      	add	sp, #8
    e612:	4770      	bx	lr

0000e614 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    e614:	b082      	sub	sp, #8
    e616:	9001      	str	r0, [sp, #4]
    e618:	460b      	mov	r3, r1
    e61a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    e61e:	9b01      	ldr	r3, [sp, #4]
    e620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    e626:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e62a:	2a00      	cmp	r2, #0
    e62c:	d002      	beq.n	e634 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    e62e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e632:	e000      	b.n	e636 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    e634:	2200      	movs	r2, #0
    e636:	431a      	orrs	r2, r3
    e638:	9b01      	ldr	r3, [sp, #4]
    e63a:	635a      	str	r2, [r3, #52]	; 0x34
}
    e63c:	bf00      	nop
    e63e:	b002      	add	sp, #8
    e640:	4770      	bx	lr

0000e642 <FlexCAN_SetProtocolException>:
{
    e642:	b082      	sub	sp, #8
    e644:	9001      	str	r0, [sp, #4]
    e646:	460b      	mov	r3, r1
    e648:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    e64c:	9b01      	ldr	r3, [sp, #4]
    e64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    e654:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e658:	2a00      	cmp	r2, #0
    e65a:	d002      	beq.n	e662 <FlexCAN_SetProtocolException+0x20>
    e65c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e660:	e000      	b.n	e664 <FlexCAN_SetProtocolException+0x22>
    e662:	2200      	movs	r2, #0
    e664:	431a      	orrs	r2, r3
    e666:	9b01      	ldr	r3, [sp, #4]
    e668:	635a      	str	r2, [r3, #52]	; 0x34
}
    e66a:	bf00      	nop
    e66c:	b002      	add	sp, #8
    e66e:	4770      	bx	lr

0000e670 <FlexCAN_SetRemoteReqStore>:
{
    e670:	b082      	sub	sp, #8
    e672:	9001      	str	r0, [sp, #4]
    e674:	460b      	mov	r3, r1
    e676:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    e67a:	9b01      	ldr	r3, [sp, #4]
    e67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e67e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e682:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e686:	2a00      	cmp	r2, #0
    e688:	d002      	beq.n	e690 <FlexCAN_SetRemoteReqStore+0x20>
    e68a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e68e:	e000      	b.n	e692 <FlexCAN_SetRemoteReqStore+0x22>
    e690:	2200      	movs	r2, #0
    e692:	431a      	orrs	r2, r3
    e694:	9b01      	ldr	r3, [sp, #4]
    e696:	635a      	str	r2, [r3, #52]	; 0x34
}
    e698:	bf00      	nop
    e69a:	b002      	add	sp, #8
    e69c:	4770      	bx	lr

0000e69e <FlexCAN_SetBusOffAutorecovery>:
{
    e69e:	b082      	sub	sp, #8
    e6a0:	9001      	str	r0, [sp, #4]
    e6a2:	460b      	mov	r3, r1
    e6a4:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    e6a8:	9b01      	ldr	r3, [sp, #4]
    e6aa:	685b      	ldr	r3, [r3, #4]
    e6ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    e6b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e6b4:	2a00      	cmp	r2, #0
    e6b6:	d001      	beq.n	e6bc <FlexCAN_SetBusOffAutorecovery+0x1e>
    e6b8:	2200      	movs	r2, #0
    e6ba:	e000      	b.n	e6be <FlexCAN_SetBusOffAutorecovery+0x20>
    e6bc:	2240      	movs	r2, #64	; 0x40
    e6be:	431a      	orrs	r2, r3
    e6c0:	9b01      	ldr	r3, [sp, #4]
    e6c2:	605a      	str	r2, [r3, #4]
}
    e6c4:	bf00      	nop
    e6c6:	b002      	add	sp, #8
    e6c8:	4770      	bx	lr

0000e6ca <FlexCAN_SetEdgeFilter>:
{
    e6ca:	b082      	sub	sp, #8
    e6cc:	9001      	str	r0, [sp, #4]
    e6ce:	460b      	mov	r3, r1
    e6d0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    e6d4:	9b01      	ldr	r3, [sp, #4]
    e6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e6d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e6dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e6e0:	2a00      	cmp	r2, #0
    e6e2:	d001      	beq.n	e6e8 <FlexCAN_SetEdgeFilter+0x1e>
    e6e4:	2200      	movs	r2, #0
    e6e6:	e001      	b.n	e6ec <FlexCAN_SetEdgeFilter+0x22>
    e6e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e6ec:	431a      	orrs	r2, r3
    e6ee:	9b01      	ldr	r3, [sp, #4]
    e6f0:	635a      	str	r2, [r3, #52]	; 0x34
}
    e6f2:	bf00      	nop
    e6f4:	b002      	add	sp, #8
    e6f6:	4770      	bx	lr

0000e6f8 <FlexCAN_CanBitSampling>:
{
    e6f8:	b082      	sub	sp, #8
    e6fa:	9001      	str	r0, [sp, #4]
    e6fc:	460b      	mov	r3, r1
    e6fe:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    e702:	9b01      	ldr	r3, [sp, #4]
    e704:	685b      	ldr	r3, [r3, #4]
    e706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e70a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e70e:	2a00      	cmp	r2, #0
    e710:	d001      	beq.n	e716 <FlexCAN_CanBitSampling+0x1e>
    e712:	2280      	movs	r2, #128	; 0x80
    e714:	e000      	b.n	e718 <FlexCAN_CanBitSampling+0x20>
    e716:	2200      	movs	r2, #0
    e718:	431a      	orrs	r2, r3
    e71a:	9b01      	ldr	r3, [sp, #4]
    e71c:	605a      	str	r2, [r3, #4]
}
    e71e:	bf00      	nop
    e720:	b002      	add	sp, #8
    e722:	4770      	bx	lr

0000e724 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    e724:	b084      	sub	sp, #16
    e726:	4603      	mov	r3, r0
    e728:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    e72c:	23ff      	movs	r3, #255	; 0xff
    e72e:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    e730:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e734:	2b40      	cmp	r3, #64	; 0x40
    e736:	d804      	bhi.n	e742 <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    e738:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e73c:	4a03      	ldr	r2, [pc, #12]	; (e74c <FlexCAN_ComputeDLCValue+0x28>)
    e73e:	5cd3      	ldrb	r3, [r2, r3]
    e740:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    e742:	9b03      	ldr	r3, [sp, #12]
    e744:	b2db      	uxtb	r3, r3
}
    e746:	4618      	mov	r0, r3
    e748:	b004      	add	sp, #16
    e74a:	4770      	bx	lr
    e74c:	000185b0 	.word	0x000185b0

0000e750 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    e750:	b500      	push	{lr}
    e752:	b087      	sub	sp, #28
    e754:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    e756:	9801      	ldr	r0, [sp, #4]
    e758:	f000 f8f6 	bl	e948 <FlexCAN_GetMaxMbNum>
    e75c:	4603      	mov	r3, r0
    e75e:	009b      	lsls	r3, r3, #2
    e760:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    e762:	9801      	ldr	r0, [sp, #4]
    e764:	f000 f8f0 	bl	e948 <FlexCAN_GetMaxMbNum>
    e768:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e76a:	9b01      	ldr	r3, [sp, #4]
    e76c:	3380      	adds	r3, #128	; 0x80
    e76e:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e770:	2300      	movs	r3, #0
    e772:	9305      	str	r3, [sp, #20]
    e774:	e008      	b.n	e788 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    e776:	9b05      	ldr	r3, [sp, #20]
    e778:	009b      	lsls	r3, r3, #2
    e77a:	9a02      	ldr	r2, [sp, #8]
    e77c:	4413      	add	r3, r2
    e77e:	2200      	movs	r2, #0
    e780:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e782:	9b05      	ldr	r3, [sp, #20]
    e784:	3301      	adds	r3, #1
    e786:	9305      	str	r3, [sp, #20]
    e788:	9a05      	ldr	r2, [sp, #20]
    e78a:	9b04      	ldr	r3, [sp, #16]
    e78c:	429a      	cmp	r2, r3
    e78e:	d3f2      	bcc.n	e776 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    e790:	9b01      	ldr	r3, [sp, #4]
    e792:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    e796:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e798:	2300      	movs	r3, #0
    e79a:	9305      	str	r3, [sp, #20]
    e79c:	e008      	b.n	e7b0 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    e79e:	9b05      	ldr	r3, [sp, #20]
    e7a0:	009b      	lsls	r3, r3, #2
    e7a2:	9a02      	ldr	r2, [sp, #8]
    e7a4:	4413      	add	r3, r2
    e7a6:	2200      	movs	r2, #0
    e7a8:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e7aa:	9b05      	ldr	r3, [sp, #20]
    e7ac:	3301      	adds	r3, #1
    e7ae:	9305      	str	r3, [sp, #20]
    e7b0:	9a05      	ldr	r2, [sp, #20]
    e7b2:	9b03      	ldr	r3, [sp, #12]
    e7b4:	429a      	cmp	r2, r3
    e7b6:	d3f2      	bcc.n	e79e <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    e7b8:	bf00      	nop
    e7ba:	bf00      	nop
    e7bc:	b007      	add	sp, #28
    e7be:	f85d fb04 	ldr.w	pc, [sp], #4

0000e7c2 <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    e7c2:	b084      	sub	sp, #16
    e7c4:	4603      	mov	r3, r0
    e7c6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    e7ca:	2308      	movs	r3, #8
    e7cc:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    e7d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e7d4:	2b08      	cmp	r3, #8
    e7d6:	d804      	bhi.n	e7e2 <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    e7d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e7dc:	f88d 300f 	strb.w	r3, [sp, #15]
    e7e0:	e033      	b.n	e84a <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    e7e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e7e6:	3b09      	subs	r3, #9
    e7e8:	2b06      	cmp	r3, #6
    e7ea:	d82d      	bhi.n	e848 <FlexCAN_ComputePayloadSize+0x86>
    e7ec:	a201      	add	r2, pc, #4	; (adr r2, e7f4 <FlexCAN_ComputePayloadSize+0x32>)
    e7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e7f2:	bf00      	nop
    e7f4:	0000e811 	.word	0x0000e811
    e7f8:	0000e819 	.word	0x0000e819
    e7fc:	0000e821 	.word	0x0000e821
    e800:	0000e829 	.word	0x0000e829
    e804:	0000e831 	.word	0x0000e831
    e808:	0000e839 	.word	0x0000e839
    e80c:	0000e841 	.word	0x0000e841
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    e810:	230c      	movs	r3, #12
    e812:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e816:	e018      	b.n	e84a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    e818:	2310      	movs	r3, #16
    e81a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e81e:	e014      	b.n	e84a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    e820:	2314      	movs	r3, #20
    e822:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e826:	e010      	b.n	e84a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    e828:	2318      	movs	r3, #24
    e82a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e82e:	e00c      	b.n	e84a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    e830:	2320      	movs	r3, #32
    e832:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e836:	e008      	b.n	e84a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    e838:	2330      	movs	r3, #48	; 0x30
    e83a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e83e:	e004      	b.n	e84a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    e840:	2340      	movs	r3, #64	; 0x40
    e842:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e846:	e000      	b.n	e84a <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    e848:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    e84a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    e84e:	4618      	mov	r0, r3
    e850:	b004      	add	sp, #16
    e852:	4770      	bx	lr

0000e854 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    e854:	b500      	push	{lr}
    e856:	b08b      	sub	sp, #44	; 0x2c
    e858:	9001      	str	r0, [sp, #4]
    e85a:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    e85c:	2308      	movs	r3, #8
    e85e:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    e862:	2300      	movs	r3, #0
    e864:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    e868:	f44f 7300 	mov.w	r3, #512	; 0x200
    e86c:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    e86e:	2300      	movs	r3, #0
    e870:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    e874:	9b00      	ldr	r3, [sp, #0]
    e876:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    e87a:	2300      	movs	r3, #0
    e87c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    e880:	2300      	movs	r3, #0
    e882:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    e886:	2300      	movs	r3, #0
    e888:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    e88a:	2300      	movs	r3, #0
    e88c:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e890:	9b01      	ldr	r3, [sp, #4]
    e892:	3380      	adds	r3, #128	; 0x80
    e894:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    e896:	2300      	movs	r3, #0
    e898:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e89a:	2300      	movs	r3, #0
    e89c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e8a0:	e02d      	b.n	e8fe <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    e8a2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e8a6:	4619      	mov	r1, r3
    e8a8:	9801      	ldr	r0, [sp, #4]
    e8aa:	f000 fad1 	bl	ee50 <FlexCAN_GetPayloadSize>
    e8ae:	4603      	mov	r3, r0
    e8b0:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    e8b4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e8b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e8bc:	4413      	add	r3, r2
    e8be:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    e8c2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e8c6:	9a07      	ldr	r2, [sp, #28]
    e8c8:	fbb2 f3f3 	udiv	r3, r2, r3
    e8cc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    e8d0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e8d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e8d8:	429a      	cmp	r2, r3
    e8da:	d815      	bhi.n	e908 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    e8dc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    e8e0:	3380      	adds	r3, #128	; 0x80
    e8e2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    e8e6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    e8ea:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e8ee:	1ad3      	subs	r3, r2, r3
    e8f0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e8f4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e8f8:	3301      	adds	r3, #1
    e8fa:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e8fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e902:	2b00      	cmp	r3, #0
    e904:	d0cd      	beq.n	e8a2 <FlexCAN_GetMsgBuffRegion+0x4e>
    e906:	e000      	b.n	e90a <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    e908:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    e90a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    e90e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e912:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e916:	fbb3 f0f2 	udiv	r0, r3, r2
    e91a:	fb00 f202 	mul.w	r2, r0, r2
    e91e:	1a9b      	subs	r3, r3, r2
    e920:	b2db      	uxtb	r3, r3
    e922:	461a      	mov	r2, r3
    e924:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e928:	089b      	lsrs	r3, r3, #2
    e92a:	b2db      	uxtb	r3, r3
    e92c:	fb02 f303 	mul.w	r3, r2, r3
    e930:	440b      	add	r3, r1
    e932:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    e934:	9b06      	ldr	r3, [sp, #24]
    e936:	009b      	lsls	r3, r3, #2
    e938:	9a04      	ldr	r2, [sp, #16]
    e93a:	4413      	add	r3, r2
    e93c:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    e93e:	9b03      	ldr	r3, [sp, #12]
}
    e940:	4618      	mov	r0, r3
    e942:	b00b      	add	sp, #44	; 0x2c
    e944:	f85d fb04 	ldr.w	pc, [sp], #4

0000e948 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    e948:	b084      	sub	sp, #16
    e94a:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    e94c:	2300      	movs	r3, #0
    e94e:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e950:	2300      	movs	r3, #0
    e952:	9303      	str	r3, [sp, #12]
    e954:	e00e      	b.n	e974 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    e956:	4a0b      	ldr	r2, [pc, #44]	; (e984 <FlexCAN_GetMaxMbNum+0x3c>)
    e958:	9b03      	ldr	r3, [sp, #12]
    e95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e95e:	9a01      	ldr	r2, [sp, #4]
    e960:	429a      	cmp	r2, r3
    e962:	d104      	bne.n	e96e <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    e964:	4a08      	ldr	r2, [pc, #32]	; (e988 <FlexCAN_GetMaxMbNum+0x40>)
    e966:	9b03      	ldr	r3, [sp, #12]
    e968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e96c:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e96e:	9b03      	ldr	r3, [sp, #12]
    e970:	3301      	adds	r3, #1
    e972:	9303      	str	r3, [sp, #12]
    e974:	9b03      	ldr	r3, [sp, #12]
    e976:	2b02      	cmp	r3, #2
    e978:	d9ed      	bls.n	e956 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    e97a:	9b02      	ldr	r3, [sp, #8]
}
    e97c:	4618      	mov	r0, r3
    e97e:	b004      	add	sp, #16
    e980:	4770      	bx	lr
    e982:	bf00      	nop
    e984:	000185f4 	.word	0x000185f4
    e988:	00018600 	.word	0x00018600

0000e98c <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    e98c:	b500      	push	{lr}
    e98e:	b087      	sub	sp, #28
    e990:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    e992:	2300      	movs	r3, #0
    e994:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    e996:	2300      	movs	r3, #0
    e998:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e99a:	2100      	movs	r1, #0
    e99c:	4820      	ldr	r0, [pc, #128]	; (ea20 <FlexCAN_EnterFreezeMode+0x94>)
    e99e:	f7f3 fab1 	bl	1f04 <OsIf_MicrosToTicks>
    e9a2:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    e9a4:	2300      	movs	r3, #0
    e9a6:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    e9a8:	f005 fa36 	bl	13e18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    e9ac:	9b01      	ldr	r3, [sp, #4]
    e9ae:	681b      	ldr	r3, [r3, #0]
    e9b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e9b4:	9b01      	ldr	r3, [sp, #4]
    e9b6:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    e9b8:	9b01      	ldr	r3, [sp, #4]
    e9ba:	681b      	ldr	r3, [r3, #0]
    e9bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    e9c0:	9b01      	ldr	r3, [sp, #4]
    e9c2:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    e9c4:	9b01      	ldr	r3, [sp, #4]
    e9c6:	681b      	ldr	r3, [r3, #0]
    e9c8:	2b00      	cmp	r3, #0
    e9ca:	da05      	bge.n	e9d8 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    e9cc:	9b01      	ldr	r3, [sp, #4]
    e9ce:	681b      	ldr	r3, [r3, #0]
    e9d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    e9d4:	9b01      	ldr	r3, [sp, #4]
    e9d6:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    e9d8:	f005 fa4a 	bl	13e70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e9dc:	2000      	movs	r0, #0
    e9de:	f7f3 fa45 	bl	1e6c <OsIf_GetCounter>
    e9e2:	4603      	mov	r3, r0
    e9e4:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    e9e6:	e00f      	b.n	ea08 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e9e8:	ab02      	add	r3, sp, #8
    e9ea:	2100      	movs	r1, #0
    e9ec:	4618      	mov	r0, r3
    e9ee:	f7f3 fa56 	bl	1e9e <OsIf_GetElapsed>
    e9f2:	4602      	mov	r2, r0
    e9f4:	9b05      	ldr	r3, [sp, #20]
    e9f6:	4413      	add	r3, r2
    e9f8:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    e9fa:	9a05      	ldr	r2, [sp, #20]
    e9fc:	9b03      	ldr	r3, [sp, #12]
    e9fe:	429a      	cmp	r2, r3
    ea00:	d302      	bcc.n	ea08 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    ea02:	2303      	movs	r3, #3
    ea04:	9304      	str	r3, [sp, #16]
            break;
    ea06:	e005      	b.n	ea14 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    ea08:	9b01      	ldr	r3, [sp, #4]
    ea0a:	681b      	ldr	r3, [r3, #0]
    ea0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ea10:	2b00      	cmp	r3, #0
    ea12:	d0e9      	beq.n	e9e8 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    ea14:	9b04      	ldr	r3, [sp, #16]
}
    ea16:	4618      	mov	r0, r3
    ea18:	b007      	add	sp, #28
    ea1a:	f85d fb04 	ldr.w	pc, [sp], #4
    ea1e:	bf00      	nop
    ea20:	000f4240 	.word	0x000f4240

0000ea24 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    ea24:	b500      	push	{lr}
    ea26:	b087      	sub	sp, #28
    ea28:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    ea2a:	2300      	movs	r3, #0
    ea2c:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    ea2e:	2300      	movs	r3, #0
    ea30:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea32:	2100      	movs	r1, #0
    ea34:	4818      	ldr	r0, [pc, #96]	; (ea98 <FlexCAN_Enable+0x74>)
    ea36:	f7f3 fa65 	bl	1f04 <OsIf_MicrosToTicks>
    ea3a:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    ea3c:	2300      	movs	r3, #0
    ea3e:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    ea40:	f005 fa3c 	bl	13ebc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    ea44:	9b01      	ldr	r3, [sp, #4]
    ea46:	681b      	ldr	r3, [r3, #0]
    ea48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    ea4c:	9b01      	ldr	r3, [sp, #4]
    ea4e:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    ea50:	f005 fa60 	bl	13f14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea54:	2000      	movs	r0, #0
    ea56:	f7f3 fa09 	bl	1e6c <OsIf_GetCounter>
    ea5a:	4603      	mov	r3, r0
    ea5c:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    ea5e:	e00f      	b.n	ea80 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea60:	ab02      	add	r3, sp, #8
    ea62:	2100      	movs	r1, #0
    ea64:	4618      	mov	r0, r3
    ea66:	f7f3 fa1a 	bl	1e9e <OsIf_GetElapsed>
    ea6a:	4602      	mov	r2, r0
    ea6c:	9b05      	ldr	r3, [sp, #20]
    ea6e:	4413      	add	r3, r2
    ea70:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ea72:	9a05      	ldr	r2, [sp, #20]
    ea74:	9b03      	ldr	r3, [sp, #12]
    ea76:	429a      	cmp	r2, r3
    ea78:	d302      	bcc.n	ea80 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    ea7a:	2303      	movs	r3, #3
    ea7c:	9304      	str	r3, [sp, #16]
            break;
    ea7e:	e005      	b.n	ea8c <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    ea80:	9b01      	ldr	r3, [sp, #4]
    ea82:	681b      	ldr	r3, [r3, #0]
    ea84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ea88:	2b00      	cmp	r3, #0
    ea8a:	d0e9      	beq.n	ea60 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    ea8c:	9b04      	ldr	r3, [sp, #16]
}
    ea8e:	4618      	mov	r0, r3
    ea90:	b007      	add	sp, #28
    ea92:	f85d fb04 	ldr.w	pc, [sp], #4
    ea96:	bf00      	nop
    ea98:	000f4240 	.word	0x000f4240

0000ea9c <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    ea9c:	b500      	push	{lr}
    ea9e:	b087      	sub	sp, #28
    eaa0:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    eaa2:	2300      	movs	r3, #0
    eaa4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    eaa6:	2300      	movs	r3, #0
    eaa8:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eaaa:	2100      	movs	r1, #0
    eaac:	481b      	ldr	r0, [pc, #108]	; (eb1c <FlexCAN_ExitFreezeMode+0x80>)
    eaae:	f7f3 fa29 	bl	1f04 <OsIf_MicrosToTicks>
    eab2:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    eab4:	2300      	movs	r3, #0
    eab6:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    eab8:	f005 fa52 	bl	13f60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    eabc:	9b01      	ldr	r3, [sp, #4]
    eabe:	681b      	ldr	r3, [r3, #0]
    eac0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    eac4:	9b01      	ldr	r3, [sp, #4]
    eac6:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    eac8:	9b01      	ldr	r3, [sp, #4]
    eaca:	681b      	ldr	r3, [r3, #0]
    eacc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    ead0:	9b01      	ldr	r3, [sp, #4]
    ead2:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    ead4:	f005 fa70 	bl	13fb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ead8:	2000      	movs	r0, #0
    eada:	f7f3 f9c7 	bl	1e6c <OsIf_GetCounter>
    eade:	4603      	mov	r3, r0
    eae0:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    eae2:	e00f      	b.n	eb04 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eae4:	ab02      	add	r3, sp, #8
    eae6:	2100      	movs	r1, #0
    eae8:	4618      	mov	r0, r3
    eaea:	f7f3 f9d8 	bl	1e9e <OsIf_GetElapsed>
    eaee:	4602      	mov	r2, r0
    eaf0:	9b05      	ldr	r3, [sp, #20]
    eaf2:	4413      	add	r3, r2
    eaf4:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    eaf6:	9a05      	ldr	r2, [sp, #20]
    eaf8:	9b03      	ldr	r3, [sp, #12]
    eafa:	429a      	cmp	r2, r3
    eafc:	d302      	bcc.n	eb04 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    eafe:	2303      	movs	r3, #3
    eb00:	9304      	str	r3, [sp, #16]
            break;
    eb02:	e005      	b.n	eb10 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    eb04:	9b01      	ldr	r3, [sp, #4]
    eb06:	681b      	ldr	r3, [r3, #0]
    eb08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    eb0c:	2b00      	cmp	r3, #0
    eb0e:	d1e9      	bne.n	eae4 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    eb10:	9b04      	ldr	r3, [sp, #16]
}
    eb12:	4618      	mov	r0, r3
    eb14:	b007      	add	sp, #28
    eb16:	f85d fb04 	ldr.w	pc, [sp], #4
    eb1a:	bf00      	nop
    eb1c:	000f4240 	.word	0x000f4240

0000eb20 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    eb20:	b500      	push	{lr}
    eb22:	b087      	sub	sp, #28
    eb24:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    eb26:	2300      	movs	r3, #0
    eb28:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    eb2a:	2300      	movs	r3, #0
    eb2c:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eb2e:	2100      	movs	r1, #0
    eb30:	481a      	ldr	r0, [pc, #104]	; (eb9c <FlexCAN_Disable+0x7c>)
    eb32:	f7f3 f9e7 	bl	1f04 <OsIf_MicrosToTicks>
    eb36:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    eb38:	2300      	movs	r3, #0
    eb3a:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    eb3c:	9b01      	ldr	r3, [sp, #4]
    eb3e:	681b      	ldr	r3, [r3, #0]
    eb40:	2b00      	cmp	r3, #0
    eb42:	db25      	blt.n	eb90 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    eb44:	f005 fa5e 	bl	14004 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    eb48:	9b01      	ldr	r3, [sp, #4]
    eb4a:	681b      	ldr	r3, [r3, #0]
    eb4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    eb50:	9b01      	ldr	r3, [sp, #4]
    eb52:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    eb54:	f005 fa82 	bl	1405c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eb58:	2000      	movs	r0, #0
    eb5a:	f7f3 f987 	bl	1e6c <OsIf_GetCounter>
    eb5e:	4603      	mov	r3, r0
    eb60:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    eb62:	e00f      	b.n	eb84 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eb64:	ab02      	add	r3, sp, #8
    eb66:	2100      	movs	r1, #0
    eb68:	4618      	mov	r0, r3
    eb6a:	f7f3 f998 	bl	1e9e <OsIf_GetElapsed>
    eb6e:	4602      	mov	r2, r0
    eb70:	9b05      	ldr	r3, [sp, #20]
    eb72:	4413      	add	r3, r2
    eb74:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    eb76:	9a05      	ldr	r2, [sp, #20]
    eb78:	9b03      	ldr	r3, [sp, #12]
    eb7a:	429a      	cmp	r2, r3
    eb7c:	d302      	bcc.n	eb84 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    eb7e:	2303      	movs	r3, #3
    eb80:	9304      	str	r3, [sp, #16]
                break;
    eb82:	e005      	b.n	eb90 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    eb84:	9b01      	ldr	r3, [sp, #4]
    eb86:	681b      	ldr	r3, [r3, #0]
    eb88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    eb8c:	2b00      	cmp	r3, #0
    eb8e:	d0e9      	beq.n	eb64 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    eb90:	9b04      	ldr	r3, [sp, #16]
}
    eb92:	4618      	mov	r0, r3
    eb94:	b007      	add	sp, #28
    eb96:	f85d fb04 	ldr.w	pc, [sp], #4
    eb9a:	bf00      	nop
    eb9c:	000f4240 	.word	0x000f4240

0000eba0 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    eba0:	b500      	push	{lr}
    eba2:	b087      	sub	sp, #28
    eba4:	9003      	str	r0, [sp, #12]
    eba6:	9102      	str	r1, [sp, #8]
    eba8:	4613      	mov	r3, r2
    ebaa:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    ebae:	9b02      	ldr	r3, [sp, #8]
    ebb0:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    ebb2:	f005 fa79 	bl	140a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    ebb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ebba:	2b00      	cmp	r3, #0
    ebbc:	d020      	beq.n	ec00 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    ebbe:	9b02      	ldr	r3, [sp, #8]
    ebc0:	f244 0201 	movw	r2, #16385	; 0x4001
    ebc4:	4293      	cmp	r3, r2
    ebc6:	d106      	bne.n	ebd6 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    ebc8:	9b03      	ldr	r3, [sp, #12]
    ebca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ebcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    ebd0:	9b03      	ldr	r3, [sp, #12]
    ebd2:	635a      	str	r2, [r3, #52]	; 0x34
    ebd4:	e03a      	b.n	ec4c <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    ebd6:	9b02      	ldr	r3, [sp, #8]
    ebd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    ebdc:	d003      	beq.n	ebe6 <FlexCAN_SetErrIntCmd+0x46>
    ebde:	9b02      	ldr	r3, [sp, #8]
    ebe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    ebe4:	d105      	bne.n	ebf2 <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    ebe6:	9b03      	ldr	r3, [sp, #12]
    ebe8:	681b      	ldr	r3, [r3, #0]
    ebea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    ebee:	9b03      	ldr	r3, [sp, #12]
    ebf0:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    ebf2:	9b03      	ldr	r3, [sp, #12]
    ebf4:	685a      	ldr	r2, [r3, #4]
    ebf6:	9b05      	ldr	r3, [sp, #20]
    ebf8:	431a      	orrs	r2, r3
    ebfa:	9b03      	ldr	r3, [sp, #12]
    ebfc:	605a      	str	r2, [r3, #4]
    ebfe:	e025      	b.n	ec4c <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    ec00:	9b02      	ldr	r3, [sp, #8]
    ec02:	f244 0201 	movw	r2, #16385	; 0x4001
    ec06:	4293      	cmp	r3, r2
    ec08:	d106      	bne.n	ec18 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    ec0a:	9b03      	ldr	r3, [sp, #12]
    ec0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ec0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    ec12:	9b03      	ldr	r3, [sp, #12]
    ec14:	635a      	str	r2, [r3, #52]	; 0x34
    ec16:	e019      	b.n	ec4c <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    ec18:	9b03      	ldr	r3, [sp, #12]
    ec1a:	685a      	ldr	r2, [r3, #4]
    ec1c:	9b05      	ldr	r3, [sp, #20]
    ec1e:	43db      	mvns	r3, r3
    ec20:	401a      	ands	r2, r3
    ec22:	9b03      	ldr	r3, [sp, #12]
    ec24:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    ec26:	9b03      	ldr	r3, [sp, #12]
    ec28:	685b      	ldr	r3, [r3, #4]
    ec2a:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    ec2c:	9b05      	ldr	r3, [sp, #20]
    ec2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ec32:	2b00      	cmp	r3, #0
    ec34:	d10a      	bne.n	ec4c <FlexCAN_SetErrIntCmd+0xac>
    ec36:	9b05      	ldr	r3, [sp, #20]
    ec38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ec3c:	2b00      	cmp	r3, #0
    ec3e:	d105      	bne.n	ec4c <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    ec40:	9b03      	ldr	r3, [sp, #12]
    ec42:	681b      	ldr	r3, [r3, #0]
    ec44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    ec48:	9b03      	ldr	r3, [sp, #12]
    ec4a:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    ec4c:	f005 fa58 	bl	14100 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    ec50:	bf00      	nop
    ec52:	b007      	add	sp, #28
    ec54:	f85d fb04 	ldr.w	pc, [sp], #4

0000ec58 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    ec58:	b500      	push	{lr}
    ec5a:	b087      	sub	sp, #28
    ec5c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    ec5e:	2300      	movs	r3, #0
    ec60:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    ec62:	2300      	movs	r3, #0
    ec64:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ec66:	2100      	movs	r1, #0
    ec68:	4833      	ldr	r0, [pc, #204]	; (ed38 <FlexCAN_Init+0xe0>)
    ec6a:	f7f3 f94b 	bl	1f04 <OsIf_MicrosToTicks>
    ec6e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    ec70:	2300      	movs	r3, #0
    ec72:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    ec74:	9b01      	ldr	r3, [sp, #4]
    ec76:	681b      	ldr	r3, [r3, #0]
    ec78:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    ec7c:	9b01      	ldr	r3, [sp, #4]
    ec7e:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ec80:	2000      	movs	r0, #0
    ec82:	f7f3 f8f3 	bl	1e6c <OsIf_GetCounter>
    ec86:	4603      	mov	r3, r0
    ec88:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ec8a:	e00f      	b.n	ecac <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ec8c:	ab02      	add	r3, sp, #8
    ec8e:	2100      	movs	r1, #0
    ec90:	4618      	mov	r0, r3
    ec92:	f7f3 f904 	bl	1e9e <OsIf_GetElapsed>
    ec96:	4602      	mov	r2, r0
    ec98:	9b05      	ldr	r3, [sp, #20]
    ec9a:	4413      	add	r3, r2
    ec9c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ec9e:	9a05      	ldr	r2, [sp, #20]
    eca0:	9b03      	ldr	r3, [sp, #12]
    eca2:	429a      	cmp	r2, r3
    eca4:	d302      	bcc.n	ecac <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    eca6:	2303      	movs	r3, #3
    eca8:	9304      	str	r3, [sp, #16]
            break;
    ecaa:	e005      	b.n	ecb8 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ecac:	9b01      	ldr	r3, [sp, #4]
    ecae:	681b      	ldr	r3, [r3, #0]
    ecb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    ecb4:	2b00      	cmp	r3, #0
    ecb6:	d1e9      	bne.n	ec8c <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    ecb8:	9b04      	ldr	r3, [sp, #16]
    ecba:	2b00      	cmp	r3, #0
    ecbc:	d136      	bne.n	ed2c <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    ecbe:	9b01      	ldr	r3, [sp, #4]
    ecc0:	681b      	ldr	r3, [r3, #0]
    ecc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    ecc6:	9b01      	ldr	r3, [sp, #4]
    ecc8:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    ecca:	9801      	ldr	r0, [sp, #4]
    eccc:	f7ff fd40 	bl	e750 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    ecd0:	9b01      	ldr	r3, [sp, #4]
    ecd2:	f04f 32ff 	mov.w	r2, #4294967295
    ecd6:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    ecd8:	9b01      	ldr	r3, [sp, #4]
    ecda:	f04f 32ff 	mov.w	r2, #4294967295
    ecde:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    ece0:	9b01      	ldr	r3, [sp, #4]
    ece2:	f04f 32ff 	mov.w	r2, #4294967295
    ece6:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    ece8:	9b01      	ldr	r3, [sp, #4]
    ecea:	2200      	movs	r2, #0
    ecec:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    ecee:	9b01      	ldr	r3, [sp, #4]
    ecf0:	f04f 32ff 	mov.w	r2, #4294967295
    ecf4:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    ecf6:	9b01      	ldr	r3, [sp, #4]
    ecf8:	4a10      	ldr	r2, [pc, #64]	; (ed3c <FlexCAN_Init+0xe4>)
    ecfa:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    ecfc:	9b01      	ldr	r3, [sp, #4]
    ecfe:	2200      	movs	r2, #0
    ed00:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    ed02:	9b01      	ldr	r3, [sp, #4]
    ed04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    ed08:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    ed0a:	9b01      	ldr	r3, [sp, #4]
    ed0c:	2200      	movs	r2, #0
    ed0e:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ed10:	9801      	ldr	r0, [sp, #4]
    ed12:	f000 f85b 	bl	edcc <FlexCAN_IsFDAvailable>
    ed16:	4603      	mov	r3, r0
    ed18:	2b00      	cmp	r3, #0
    ed1a:	d007      	beq.n	ed2c <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    ed1c:	9b01      	ldr	r3, [sp, #4]
    ed1e:	2200      	movs	r2, #0
    ed20:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    ed24:	9b01      	ldr	r3, [sp, #4]
    ed26:	4a06      	ldr	r2, [pc, #24]	; (ed40 <FlexCAN_Init+0xe8>)
    ed28:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    ed2c:	9b04      	ldr	r3, [sp, #16]
}
    ed2e:	4618      	mov	r0, r3
    ed30:	b007      	add	sp, #28
    ed32:	f85d fb04 	ldr.w	pc, [sp], #4
    ed36:	bf00      	nop
    ed38:	000f4240 	.word	0x000f4240
    ed3c:	003b0006 	.word	0x003b0006
    ed40:	80004100 	.word	0x80004100

0000ed44 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    ed44:	b500      	push	{lr}
    ed46:	b087      	sub	sp, #28
    ed48:	9001      	str	r0, [sp, #4]
    ed4a:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    ed4c:	9801      	ldr	r0, [sp, #4]
    ed4e:	f7ff fdfb 	bl	e948 <FlexCAN_GetMaxMbNum>
    ed52:	4603      	mov	r3, r0
    ed54:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    ed58:	2300      	movs	r3, #0
    ed5a:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    ed5c:	9b01      	ldr	r3, [sp, #4]
    ed5e:	681b      	ldr	r3, [r3, #0]
    ed60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ed64:	2b00      	cmp	r3, #0
    ed66:	d001      	beq.n	ed6c <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    ed68:	2301      	movs	r3, #1
    ed6a:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    ed6c:	9b04      	ldr	r3, [sp, #16]
    ed6e:	2b00      	cmp	r3, #0
    ed70:	d127      	bne.n	edc2 <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    ed72:	9b01      	ldr	r3, [sp, #4]
    ed74:	681b      	ldr	r3, [r3, #0]
    ed76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    ed7a:	9b01      	ldr	r3, [sp, #4]
    ed7c:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    ed7e:	9b01      	ldr	r3, [sp, #4]
    ed80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ed82:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    ed86:	9b00      	ldr	r3, [sp, #0]
    ed88:	061b      	lsls	r3, r3, #24
    ed8a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    ed8e:	431a      	orrs	r2, r3
    ed90:	9b01      	ldr	r3, [sp, #4]
    ed92:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    ed94:	9b01      	ldr	r3, [sp, #4]
    ed96:	f04f 32ff 	mov.w	r2, #4294967295
    ed9a:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    ed9c:	2300      	movs	r3, #0
    ed9e:	9305      	str	r3, [sp, #20]
    eda0:	e00a      	b.n	edb8 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    eda2:	9b01      	ldr	r3, [sp, #4]
    eda4:	9a05      	ldr	r2, [sp, #20]
    eda6:	f502 7208 	add.w	r2, r2, #544	; 0x220
    edaa:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    edae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    edb2:	9b05      	ldr	r3, [sp, #20]
    edb4:	3301      	adds	r3, #1
    edb6:	9305      	str	r3, [sp, #20]
    edb8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    edbc:	9a05      	ldr	r2, [sp, #20]
    edbe:	429a      	cmp	r2, r3
    edc0:	d3ef      	bcc.n	eda2 <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    edc2:	9b04      	ldr	r3, [sp, #16]
}
    edc4:	4618      	mov	r0, r3
    edc6:	b007      	add	sp, #28
    edc8:	f85d fb04 	ldr.w	pc, [sp], #4

0000edcc <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    edcc:	b084      	sub	sp, #16
    edce:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    edd0:	2300      	movs	r3, #0
    edd2:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    edd4:	2300      	movs	r3, #0
    edd6:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    edda:	2300      	movs	r3, #0
    eddc:	9303      	str	r3, [sp, #12]
    edde:	e00d      	b.n	edfc <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    ede0:	4a0a      	ldr	r2, [pc, #40]	; (ee0c <FlexCAN_IsFDAvailable+0x40>)
    ede2:	9b03      	ldr	r3, [sp, #12]
    ede4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede8:	9a01      	ldr	r2, [sp, #4]
    edea:	429a      	cmp	r2, r3
    edec:	d103      	bne.n	edf6 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    edee:	2301      	movs	r3, #1
    edf0:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    edf4:	e005      	b.n	ee02 <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    edf6:	9b03      	ldr	r3, [sp, #12]
    edf8:	3301      	adds	r3, #1
    edfa:	9303      	str	r3, [sp, #12]
    edfc:	9b03      	ldr	r3, [sp, #12]
    edfe:	2b00      	cmp	r3, #0
    ee00:	d0ee      	beq.n	ede0 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    ee02:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    ee06:	4618      	mov	r0, r3
    ee08:	b004      	add	sp, #16
    ee0a:	4770      	bx	lr
    ee0c:	0001860c 	.word	0x0001860c

0000ee10 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    ee10:	b500      	push	{lr}
    ee12:	b085      	sub	sp, #20
    ee14:	9001      	str	r0, [sp, #4]
    ee16:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    ee18:	9801      	ldr	r0, [sp, #4]
    ee1a:	f7ff fbd6 	bl	e5ca <FlexCAN_IsFDEnabled>
    ee1e:	4603      	mov	r3, r0
    ee20:	2b00      	cmp	r3, #0
    ee22:	d011      	beq.n	ee48 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    ee24:	9b01      	ldr	r3, [sp, #4]
    ee26:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ee2a:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    ee2c:	9b03      	ldr	r3, [sp, #12]
    ee2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    ee32:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    ee34:	9b00      	ldr	r3, [sp, #0]
    ee36:	681b      	ldr	r3, [r3, #0]
    ee38:	041b      	lsls	r3, r3, #16
    ee3a:	9a03      	ldr	r2, [sp, #12]
    ee3c:	4313      	orrs	r3, r2
    ee3e:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    ee40:	9b01      	ldr	r3, [sp, #4]
    ee42:	9a03      	ldr	r2, [sp, #12]
    ee44:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    ee48:	bf00      	nop
    ee4a:	b005      	add	sp, #20
    ee4c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ee50 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    ee50:	b500      	push	{lr}
    ee52:	b085      	sub	sp, #20
    ee54:	9001      	str	r0, [sp, #4]
    ee56:	460b      	mov	r3, r1
    ee58:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    ee5c:	2300      	movs	r3, #0
    ee5e:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ee60:	9801      	ldr	r0, [sp, #4]
    ee62:	f7ff ffb3 	bl	edcc <FlexCAN_IsFDAvailable>
    ee66:	4603      	mov	r3, r0
    ee68:	2b00      	cmp	r3, #0
    ee6a:	d019      	beq.n	eea0 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    ee6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ee70:	2b00      	cmp	r3, #0
    ee72:	d10a      	bne.n	ee8a <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ee74:	9b01      	ldr	r3, [sp, #4]
    ee76:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ee7a:	0c1b      	lsrs	r3, r3, #16
    ee7c:	f003 0303 	and.w	r3, r3, #3
    ee80:	2208      	movs	r2, #8
    ee82:	fa02 f303 	lsl.w	r3, r2, r3
    ee86:	9303      	str	r3, [sp, #12]
    ee88:	e00c      	b.n	eea4 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ee8a:	9b01      	ldr	r3, [sp, #4]
    ee8c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ee90:	0c1b      	lsrs	r3, r3, #16
    ee92:	f003 0303 	and.w	r3, r3, #3
    ee96:	2208      	movs	r2, #8
    ee98:	fa02 f303 	lsl.w	r3, r2, r3
    ee9c:	9303      	str	r3, [sp, #12]
    ee9e:	e001      	b.n	eea4 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    eea0:	2308      	movs	r3, #8
    eea2:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    eea4:	9b03      	ldr	r3, [sp, #12]
    eea6:	b2db      	uxtb	r3, r3
}
    eea8:	4618      	mov	r0, r3
    eeaa:	b005      	add	sp, #20
    eeac:	f85d fb04 	ldr.w	pc, [sp], #4

0000eeb0 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    eeb0:	b500      	push	{lr}
    eeb2:	b087      	sub	sp, #28
    eeb4:	9001      	str	r0, [sp, #4]
    eeb6:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    eeb8:	2308      	movs	r3, #8
    eeba:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    eebe:	f44f 7300 	mov.w	r3, #512	; 0x200
    eec2:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    eec4:	2308      	movs	r3, #8
    eec6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    eeca:	2300      	movs	r3, #0
    eecc:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    eed0:	2300      	movs	r3, #0
    eed2:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    eed6:	2300      	movs	r3, #0
    eed8:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    eedc:	2300      	movs	r3, #0
    eede:	f88d 3015 	strb.w	r3, [sp, #21]
    eee2:	e024      	b.n	ef2e <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    eee4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    eee8:	4619      	mov	r1, r3
    eeea:	9801      	ldr	r0, [sp, #4]
    eeec:	f7ff ffb0 	bl	ee50 <FlexCAN_GetPayloadSize>
    eef0:	4603      	mov	r3, r0
    eef2:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    eef6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    eefa:	f89d 3014 	ldrb.w	r3, [sp, #20]
    eefe:	4413      	add	r3, r2
    ef00:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    ef04:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ef08:	9a04      	ldr	r2, [sp, #16]
    ef0a:	fbb2 f3f3 	udiv	r3, r2, r3
    ef0e:	b2da      	uxtb	r2, r3
    ef10:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ef14:	4413      	add	r3, r2
    ef16:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    ef1a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ef1e:	9a00      	ldr	r2, [sp, #0]
    ef20:	429a      	cmp	r2, r3
    ef22:	d309      	bcc.n	ef38 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ef24:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ef28:	3301      	adds	r3, #1
    ef2a:	f88d 3015 	strb.w	r3, [sp, #21]
    ef2e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ef32:	2b00      	cmp	r3, #0
    ef34:	d0d6      	beq.n	eee4 <FlexCAN_GetMbPayloadSize+0x34>
    ef36:	e000      	b.n	ef3a <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    ef38:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    ef3a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    ef3e:	4618      	mov	r0, r3
    ef40:	b007      	add	sp, #28
    ef42:	f85d fb04 	ldr.w	pc, [sp], #4

0000ef46 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    ef46:	b500      	push	{lr}
    ef48:	b085      	sub	sp, #20
    ef4a:	9001      	str	r0, [sp, #4]
    ef4c:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    ef4e:	9900      	ldr	r1, [sp, #0]
    ef50:	9801      	ldr	r0, [sp, #4]
    ef52:	f7ff fc7f 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    ef56:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    ef58:	9b03      	ldr	r3, [sp, #12]
    ef5a:	681b      	ldr	r3, [r3, #0]
}
    ef5c:	bf00      	nop
    ef5e:	b005      	add	sp, #20
    ef60:	f85d fb04 	ldr.w	pc, [sp], #4

0000ef64 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    ef64:	b500      	push	{lr}
    ef66:	b087      	sub	sp, #28
    ef68:	9003      	str	r0, [sp, #12]
    ef6a:	9201      	str	r2, [sp, #4]
    ef6c:	461a      	mov	r2, r3
    ef6e:	460b      	mov	r3, r1
    ef70:	f88d 300b 	strb.w	r3, [sp, #11]
    ef74:	4613      	mov	r3, r2
    ef76:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    ef7a:	2300      	movs	r3, #0
    ef7c:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    ef7e:	9b01      	ldr	r3, [sp, #4]
    ef80:	f003 031f 	and.w	r3, r3, #31
    ef84:	2201      	movs	r2, #1
    ef86:	fa02 f303 	lsl.w	r3, r2, r3
    ef8a:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    ef8c:	9b01      	ldr	r3, [sp, #4]
    ef8e:	2b1f      	cmp	r3, #31
    ef90:	d837      	bhi.n	f002 <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    ef92:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ef96:	2b00      	cmp	r3, #0
    ef98:	d01b      	beq.n	efd2 <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ef9a:	f005 fc5d 	bl	14858 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    ef9e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    efa2:	4a1a      	ldr	r2, [pc, #104]	; (f00c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    efa4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    efa8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    efac:	9a04      	ldr	r2, [sp, #16]
    efae:	430a      	orrs	r2, r1
    efb0:	4916      	ldr	r1, [pc, #88]	; (f00c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    efb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    efb6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    efba:	2b00      	cmp	r3, #0
    efbc:	d006      	beq.n	efcc <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    efbe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    efc2:	4a12      	ldr	r2, [pc, #72]	; (f00c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    efc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    efc8:	9b03      	ldr	r3, [sp, #12]
    efca:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    efcc:	f005 fc70 	bl	148b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    efd0:	e017      	b.n	f002 <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    efd2:	f005 fc41 	bl	14858 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    efd6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    efda:	4a0c      	ldr	r2, [pc, #48]	; (f00c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    efdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    efe0:	9b04      	ldr	r3, [sp, #16]
    efe2:	43da      	mvns	r2, r3
    efe4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    efe8:	400a      	ands	r2, r1
    efea:	4908      	ldr	r1, [pc, #32]	; (f00c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    efec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    eff0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    eff4:	4a05      	ldr	r2, [pc, #20]	; (f00c <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    eff6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    effa:	9b03      	ldr	r3, [sp, #12]
    effc:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    effe:	f005 fc57 	bl	148b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    f002:	9b05      	ldr	r3, [sp, #20]
}
    f004:	4618      	mov	r0, r3
    f006:	b007      	add	sp, #28
    f008:	f85d fb04 	ldr.w	pc, [sp], #4
    f00c:	1fff9368 	.word	0x1fff9368

0000f010 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    f010:	b500      	push	{lr}
    f012:	b087      	sub	sp, #28
    f014:	9003      	str	r0, [sp, #12]
    f016:	9201      	str	r2, [sp, #4]
    f018:	461a      	mov	r2, r3
    f01a:	460b      	mov	r3, r1
    f01c:	f88d 300b 	strb.w	r3, [sp, #11]
    f020:	4613      	mov	r3, r2
    f022:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    f026:	9b01      	ldr	r3, [sp, #4]
    f028:	f003 031f 	and.w	r3, r3, #31
    f02c:	2201      	movs	r2, #1
    f02e:	fa02 f303 	lsl.w	r3, r2, r3
    f032:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    f034:	9b01      	ldr	r3, [sp, #4]
    f036:	2b1f      	cmp	r3, #31
    f038:	d818      	bhi.n	f06c <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    f03a:	f005 f9cf 	bl	143dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    f03e:	9b03      	ldr	r3, [sp, #12]
    f040:	6a99      	ldr	r1, [r3, #40]	; 0x28
    f042:	9b05      	ldr	r3, [sp, #20]
    f044:	43da      	mvns	r2, r3
    f046:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f04a:	400a      	ands	r2, r1
    f04c:	4909      	ldr	r1, [pc, #36]	; (f074 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    f04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    f052:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f056:	2b00      	cmp	r3, #0
    f058:	d006      	beq.n	f068 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f05a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f05e:	4a05      	ldr	r2, [pc, #20]	; (f074 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    f060:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f064:	9b03      	ldr	r3, [sp, #12]
    f066:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    f068:	f005 f9e4 	bl	14434 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    f06c:	bf00      	nop
    f06e:	b007      	add	sp, #28
    f070:	f85d fb04 	ldr.w	pc, [sp], #4
    f074:	1fff9368 	.word	0x1fff9368

0000f078 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    f078:	b082      	sub	sp, #8
    f07a:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    f07c:	9b01      	ldr	r3, [sp, #4]
    f07e:	2200      	movs	r2, #0
    f080:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    f082:	bf00      	nop
    f084:	b002      	add	sp, #8
    f086:	4770      	bx	lr

0000f088 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    f088:	b082      	sub	sp, #8
    f08a:	9001      	str	r0, [sp, #4]
    f08c:	460b      	mov	r3, r1
    f08e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f092:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f096:	4a04      	ldr	r2, [pc, #16]	; (f0a8 <FlexCAN_EnableInterrupts+0x20>)
    f098:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f09c:	9b01      	ldr	r3, [sp, #4]
    f09e:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    f0a0:	bf00      	nop
    f0a2:	b002      	add	sp, #8
    f0a4:	4770      	bx	lr
    f0a6:	bf00      	nop
    f0a8:	1fff9368 	.word	0x1fff9368

0000f0ac <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    f0ac:	b500      	push	{lr}
    f0ae:	b087      	sub	sp, #28
    f0b0:	9003      	str	r0, [sp, #12]
    f0b2:	9102      	str	r1, [sp, #8]
    f0b4:	9201      	str	r2, [sp, #4]
    f0b6:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f0b8:	9902      	ldr	r1, [sp, #8]
    f0ba:	9803      	ldr	r0, [sp, #12]
    f0bc:	f7ff fbca 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    f0c0:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    f0c2:	9b05      	ldr	r3, [sp, #20]
    f0c4:	3304      	adds	r3, #4
    f0c6:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    f0c8:	9b05      	ldr	r3, [sp, #20]
    f0ca:	2200      	movs	r2, #0
    f0cc:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    f0ce:	9b04      	ldr	r3, [sp, #16]
    f0d0:	2200      	movs	r2, #0
    f0d2:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f0d4:	9b01      	ldr	r3, [sp, #4]
    f0d6:	685b      	ldr	r3, [r3, #4]
    f0d8:	2b01      	cmp	r3, #1
    f0da:	d119      	bne.n	f110 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    f0dc:	9b05      	ldr	r3, [sp, #20]
    f0de:	681b      	ldr	r3, [r3, #0]
    f0e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    f0e4:	9b05      	ldr	r3, [sp, #20]
    f0e6:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    f0e8:	9b05      	ldr	r3, [sp, #20]
    f0ea:	681b      	ldr	r3, [r3, #0]
    f0ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    f0f0:	9b05      	ldr	r3, [sp, #20]
    f0f2:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f0f4:	9b04      	ldr	r3, [sp, #16]
    f0f6:	681b      	ldr	r3, [r3, #0]
    f0f8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f0fc:	9b04      	ldr	r3, [sp, #16]
    f0fe:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f100:	9b04      	ldr	r3, [sp, #16]
    f102:	681a      	ldr	r2, [r3, #0]
    f104:	9b00      	ldr	r3, [sp, #0]
    f106:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f10a:	431a      	orrs	r2, r3
    f10c:	9b04      	ldr	r3, [sp, #16]
    f10e:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f110:	9b01      	ldr	r3, [sp, #4]
    f112:	685b      	ldr	r3, [r3, #4]
    f114:	2b00      	cmp	r3, #0
    f116:	d116      	bne.n	f146 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f118:	9b05      	ldr	r3, [sp, #20]
    f11a:	681b      	ldr	r3, [r3, #0]
    f11c:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    f120:	9b05      	ldr	r3, [sp, #20]
    f122:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    f124:	9b04      	ldr	r3, [sp, #16]
    f126:	681b      	ldr	r3, [r3, #0]
    f128:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f12c:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f130:	9a04      	ldr	r2, [sp, #16]
    f132:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f134:	9b04      	ldr	r3, [sp, #16]
    f136:	681a      	ldr	r2, [r3, #0]
    f138:	9b00      	ldr	r3, [sp, #0]
    f13a:	0499      	lsls	r1, r3, #18
    f13c:	4b0e      	ldr	r3, [pc, #56]	; (f178 <FlexCAN_SetRxMsgBuff+0xcc>)
    f13e:	400b      	ands	r3, r1
    f140:	431a      	orrs	r2, r3
    f142:	9b04      	ldr	r3, [sp, #16]
    f144:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    f146:	9b01      	ldr	r3, [sp, #4]
    f148:	681b      	ldr	r3, [r3, #0]
    f14a:	2b0f      	cmp	r3, #15
    f14c:	d00f      	beq.n	f16e <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    f14e:	9b05      	ldr	r3, [sp, #20]
    f150:	681b      	ldr	r3, [r3, #0]
    f152:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    f156:	9b05      	ldr	r3, [sp, #20]
    f158:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f15a:	9b05      	ldr	r3, [sp, #20]
    f15c:	681a      	ldr	r2, [r3, #0]
    f15e:	9b01      	ldr	r3, [sp, #4]
    f160:	681b      	ldr	r3, [r3, #0]
    f162:	061b      	lsls	r3, r3, #24
    f164:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f168:	431a      	orrs	r2, r3
    f16a:	9b05      	ldr	r3, [sp, #20]
    f16c:	601a      	str	r2, [r3, #0]
    }
}
    f16e:	bf00      	nop
    f170:	b007      	add	sp, #28
    f172:	f85d fb04 	ldr.w	pc, [sp], #4
    f176:	bf00      	nop
    f178:	1ffc0000 	.word	0x1ffc0000

0000f17c <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    f17c:	b500      	push	{lr}
    f17e:	b085      	sub	sp, #20
    f180:	9001      	str	r0, [sp, #4]
    f182:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    f184:	2300      	movs	r3, #0
    f186:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f188:	9900      	ldr	r1, [sp, #0]
    f18a:	9801      	ldr	r0, [sp, #4]
    f18c:	f7ff fb62 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    f190:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f192:	9b02      	ldr	r3, [sp, #8]
    f194:	681b      	ldr	r3, [r3, #0]
    f196:	b29b      	uxth	r3, r3
    f198:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    f19a:	9b03      	ldr	r3, [sp, #12]
}
    f19c:	4618      	mov	r0, r3
    f19e:	b005      	add	sp, #20
    f1a0:	f85d fb04 	ldr.w	pc, [sp], #4

0000f1a4 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    f1a4:	b500      	push	{lr}
    f1a6:	b08d      	sub	sp, #52	; 0x34
    f1a8:	9003      	str	r0, [sp, #12]
    f1aa:	9102      	str	r1, [sp, #8]
    f1ac:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f1ae:	9902      	ldr	r1, [sp, #8]
    f1b0:	9803      	ldr	r0, [sp, #12]
    f1b2:	f7ff fb4f 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    f1b6:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1ba:	3304      	adds	r3, #4
    f1bc:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    f1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1c0:	3308      	adds	r3, #8
    f1c2:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1c6:	3308      	adds	r3, #8
    f1c8:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    f1ca:	2300      	movs	r3, #0
    f1cc:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    f1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1d0:	681b      	ldr	r3, [r3, #0]
    f1d2:	0c1b      	lsrs	r3, r3, #16
    f1d4:	b2db      	uxtb	r3, r3
    f1d6:	f003 030f 	and.w	r3, r3, #15
    f1da:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    f1de:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f1e2:	4618      	mov	r0, r3
    f1e4:	f7ff faed 	bl	e7c2 <FlexCAN_ComputePayloadSize>
    f1e8:	4603      	mov	r3, r0
    f1ea:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    f1ee:	9b01      	ldr	r3, [sp, #4]
    f1f0:	3308      	adds	r3, #8
    f1f2:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    f1f4:	9902      	ldr	r1, [sp, #8]
    f1f6:	9803      	ldr	r0, [sp, #12]
    f1f8:	f7ff fe5a 	bl	eeb0 <FlexCAN_GetMbPayloadSize>
    f1fc:	4603      	mov	r3, r0
    f1fe:	461a      	mov	r2, r3
    f200:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f204:	4293      	cmp	r3, r2
    f206:	d906      	bls.n	f216 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    f208:	9902      	ldr	r1, [sp, #8]
    f20a:	9803      	ldr	r0, [sp, #12]
    f20c:	f7ff fe50 	bl	eeb0 <FlexCAN_GetMbPayloadSize>
    f210:	4603      	mov	r3, r0
    f212:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    f216:	9b01      	ldr	r3, [sp, #4]
    f218:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    f21c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    f220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f222:	681a      	ldr	r2, [r3, #0]
    f224:	9b01      	ldr	r3, [sp, #4]
    f226:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    f228:	9b01      	ldr	r3, [sp, #4]
    f22a:	681b      	ldr	r3, [r3, #0]
    f22c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    f230:	2b00      	cmp	r3, #0
    f232:	d004      	beq.n	f23e <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    f234:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f236:	681a      	ldr	r2, [r3, #0]
    f238:	9b01      	ldr	r3, [sp, #4]
    f23a:	605a      	str	r2, [r3, #4]
    f23c:	e004      	b.n	f248 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    f23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f240:	681b      	ldr	r3, [r3, #0]
    f242:	0c9a      	lsrs	r2, r3, #18
    f244:	9b01      	ldr	r3, [sp, #4]
    f246:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f248:	9b01      	ldr	r3, [sp, #4]
    f24a:	681b      	ldr	r3, [r3, #0]
    f24c:	b29a      	uxth	r2, r3
    f24e:	9b01      	ldr	r3, [sp, #4]
    f250:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f252:	2300      	movs	r3, #0
    f254:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f258:	e025      	b.n	f2a6 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    f25a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f25e:	089b      	lsrs	r3, r3, #2
    f260:	b2db      	uxtb	r3, r3
    f262:	009b      	lsls	r3, r3, #2
    f264:	9a07      	ldr	r2, [sp, #28]
    f266:	4413      	add	r3, r2
    f268:	681b      	ldr	r3, [r3, #0]
    f26a:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    f26c:	9b04      	ldr	r3, [sp, #16]
    f26e:	0e1a      	lsrs	r2, r3, #24
    f270:	9b04      	ldr	r3, [sp, #16]
    f272:	0a1b      	lsrs	r3, r3, #8
    f274:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f278:	431a      	orrs	r2, r3
    f27a:	9b04      	ldr	r3, [sp, #16]
    f27c:	021b      	lsls	r3, r3, #8
    f27e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f282:	ea42 0103 	orr.w	r1, r2, r3
    f286:	9b04      	ldr	r3, [sp, #16]
    f288:	061a      	lsls	r2, r3, #24
    f28a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f28e:	089b      	lsrs	r3, r3, #2
    f290:	b2db      	uxtb	r3, r3
    f292:	009b      	lsls	r3, r3, #2
    f294:	9806      	ldr	r0, [sp, #24]
    f296:	4403      	add	r3, r0
    f298:	430a      	orrs	r2, r1
    f29a:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f29c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f2a0:	3304      	adds	r3, #4
    f2a2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f2a6:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f2aa:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f2ae:	f023 0303 	bic.w	r3, r3, #3
    f2b2:	429a      	cmp	r2, r3
    f2b4:	d3d1      	bcc.n	f25a <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    f2b6:	e014      	b.n	f2e2 <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    f2b8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f2bc:	f083 0303 	eor.w	r3, r3, #3
    f2c0:	b2db      	uxtb	r3, r3
    f2c2:	461a      	mov	r2, r3
    f2c4:	9b08      	ldr	r3, [sp, #32]
    f2c6:	441a      	add	r2, r3
    f2c8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f2cc:	7812      	ldrb	r2, [r2, #0]
    f2ce:	b2d1      	uxtb	r1, r2
    f2d0:	9a01      	ldr	r2, [sp, #4]
    f2d2:	4413      	add	r3, r2
    f2d4:	460a      	mov	r2, r1
    f2d6:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    f2d8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f2dc:	3301      	adds	r3, #1
    f2de:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f2e2:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f2e6:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f2ea:	429a      	cmp	r2, r3
    f2ec:	d3e4      	bcc.n	f2b8 <FlexCAN_GetMsgBuff+0x114>
    }
}
    f2ee:	bf00      	nop
    f2f0:	bf00      	nop
    f2f2:	b00d      	add	sp, #52	; 0x34
    f2f4:	f85d fb04 	ldr.w	pc, [sp], #4

0000f2f8 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    f2f8:	b500      	push	{lr}
    f2fa:	b08d      	sub	sp, #52	; 0x34
    f2fc:	9003      	str	r0, [sp, #12]
    f2fe:	9102      	str	r1, [sp, #8]
    f300:	9201      	str	r2, [sp, #4]
    f302:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    f304:	2300      	movs	r3, #0
    f306:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    f308:	9b03      	ldr	r3, [sp, #12]
    f30a:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f30e:	3304      	adds	r3, #4
    f310:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f312:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f314:	3308      	adds	r3, #8
    f316:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f318:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f31a:	3308      	adds	r3, #8
    f31c:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    f31e:	9b00      	ldr	r3, [sp, #0]
    f320:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    f322:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f324:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    f328:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    f32a:	9b08      	ldr	r3, [sp, #32]
    f32c:	2200      	movs	r2, #0
    f32e:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    f330:	9b02      	ldr	r3, [sp, #8]
    f332:	689b      	ldr	r3, [r3, #8]
    f334:	b2db      	uxtb	r3, r3
    f336:	4618      	mov	r0, r3
    f338:	f7ff f9f4 	bl	e724 <FlexCAN_ComputeDLCValue>
    f33c:	4603      	mov	r3, r0
    f33e:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    f342:	9b00      	ldr	r3, [sp, #0]
    f344:	2b00      	cmp	r3, #0
    f346:	d065      	beq.n	f414 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f348:	2300      	movs	r3, #0
    f34a:	930a      	str	r3, [sp, #40]	; 0x28
    f34c:	e02c      	b.n	f3a8 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    f34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f350:	089b      	lsrs	r3, r3, #2
    f352:	009b      	lsls	r3, r3, #2
    f354:	9a05      	ldr	r2, [sp, #20]
    f356:	4413      	add	r3, r2
    f358:	681b      	ldr	r3, [r3, #0]
    f35a:	0e1a      	lsrs	r2, r3, #24
    f35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f35e:	089b      	lsrs	r3, r3, #2
    f360:	009b      	lsls	r3, r3, #2
    f362:	9905      	ldr	r1, [sp, #20]
    f364:	440b      	add	r3, r1
    f366:	681b      	ldr	r3, [r3, #0]
    f368:	0a1b      	lsrs	r3, r3, #8
    f36a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f36e:	431a      	orrs	r2, r3
    f370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f372:	089b      	lsrs	r3, r3, #2
    f374:	009b      	lsls	r3, r3, #2
    f376:	9905      	ldr	r1, [sp, #20]
    f378:	440b      	add	r3, r1
    f37a:	681b      	ldr	r3, [r3, #0]
    f37c:	021b      	lsls	r3, r3, #8
    f37e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f382:	ea42 0103 	orr.w	r1, r2, r3
    f386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f388:	089b      	lsrs	r3, r3, #2
    f38a:	009b      	lsls	r3, r3, #2
    f38c:	9a05      	ldr	r2, [sp, #20]
    f38e:	4413      	add	r3, r2
    f390:	681b      	ldr	r3, [r3, #0]
    f392:	061a      	lsls	r2, r3, #24
    f394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f396:	089b      	lsrs	r3, r3, #2
    f398:	009b      	lsls	r3, r3, #2
    f39a:	9806      	ldr	r0, [sp, #24]
    f39c:	4403      	add	r3, r0
    f39e:	430a      	orrs	r2, r1
    f3a0:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3a4:	3304      	adds	r3, #4
    f3a6:	930a      	str	r3, [sp, #40]	; 0x28
    f3a8:	9b02      	ldr	r3, [sp, #8]
    f3aa:	689b      	ldr	r3, [r3, #8]
    f3ac:	f023 0303 	bic.w	r3, r3, #3
    f3b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f3b2:	429a      	cmp	r2, r3
    f3b4:	d3cb      	bcc.n	f34e <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    f3b6:	e00c      	b.n	f3d2 <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    f3b8:	9a00      	ldr	r2, [sp, #0]
    f3ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3bc:	441a      	add	r2, r3
    f3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3c0:	f083 0303 	eor.w	r3, r3, #3
    f3c4:	9907      	ldr	r1, [sp, #28]
    f3c6:	440b      	add	r3, r1
    f3c8:	7812      	ldrb	r2, [r2, #0]
    f3ca:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    f3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3ce:	3301      	adds	r3, #1
    f3d0:	930a      	str	r3, [sp, #40]	; 0x28
    f3d2:	9b02      	ldr	r3, [sp, #8]
    f3d4:	689b      	ldr	r3, [r3, #8]
    f3d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f3d8:	429a      	cmp	r2, r3
    f3da:	d3ed      	bcc.n	f3b8 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    f3dc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f3e0:	4618      	mov	r0, r3
    f3e2:	f7ff f9ee 	bl	e7c2 <FlexCAN_ComputePayloadSize>
    f3e6:	4603      	mov	r3, r0
    f3e8:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f3ec:	9b02      	ldr	r3, [sp, #8]
    f3ee:	689b      	ldr	r3, [r3, #8]
    f3f0:	930a      	str	r3, [sp, #40]	; 0x28
    f3f2:	e00a      	b.n	f40a <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    f3f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3f6:	f083 0303 	eor.w	r3, r3, #3
    f3fa:	9a07      	ldr	r2, [sp, #28]
    f3fc:	4413      	add	r3, r2
    f3fe:	9a02      	ldr	r2, [sp, #8]
    f400:	7b52      	ldrb	r2, [r2, #13]
    f402:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f406:	3301      	adds	r3, #1
    f408:	930a      	str	r3, [sp, #40]	; 0x28
    f40a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    f40e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f410:	429a      	cmp	r2, r3
    f412:	d3ef      	bcc.n	f3f4 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f414:	9b02      	ldr	r3, [sp, #8]
    f416:	685b      	ldr	r3, [r3, #4]
    f418:	2b01      	cmp	r3, #1
    f41a:	d111      	bne.n	f440 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f41c:	9b08      	ldr	r3, [sp, #32]
    f41e:	681b      	ldr	r3, [r3, #0]
    f420:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f424:	9b08      	ldr	r3, [sp, #32]
    f426:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f428:	9b08      	ldr	r3, [sp, #32]
    f42a:	681a      	ldr	r2, [r3, #0]
    f42c:	9b01      	ldr	r3, [sp, #4]
    f42e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f432:	431a      	orrs	r2, r3
    f434:	9b08      	ldr	r3, [sp, #32]
    f436:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f43a:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    f43e:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f440:	9b02      	ldr	r3, [sp, #8]
    f442:	685b      	ldr	r3, [r3, #4]
    f444:	2b00      	cmp	r3, #0
    f446:	d114      	bne.n	f472 <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    f448:	9b08      	ldr	r3, [sp, #32]
    f44a:	681b      	ldr	r3, [r3, #0]
    f44c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f450:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f454:	9a08      	ldr	r2, [sp, #32]
    f456:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f458:	9b08      	ldr	r3, [sp, #32]
    f45a:	681a      	ldr	r2, [r3, #0]
    f45c:	9b01      	ldr	r3, [sp, #4]
    f45e:	0499      	lsls	r1, r3, #18
    f460:	4b2b      	ldr	r3, [pc, #172]	; (f510 <FlexCAN_SetTxMsgBuff+0x218>)
    f462:	400b      	ands	r3, r1
    f464:	431a      	orrs	r2, r3
    f466:	9b08      	ldr	r3, [sp, #32]
    f468:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f46c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    f470:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    f472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f474:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    f478:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    f47a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f47e:	041b      	lsls	r3, r3, #16
    f480:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    f484:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f486:	4313      	orrs	r3, r2
    f488:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    f48a:	9b02      	ldr	r3, [sp, #8]
    f48c:	681b      	ldr	r3, [r3, #0]
    f48e:	2b0f      	cmp	r3, #15
    f490:	d03a      	beq.n	f508 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    f492:	9b02      	ldr	r3, [sp, #8]
    f494:	681b      	ldr	r3, [r3, #0]
    f496:	2b1c      	cmp	r3, #28
    f498:	d104      	bne.n	f4a4 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f49a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f49c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f4a0:	930b      	str	r3, [sp, #44]	; 0x2c
    f4a2:	e007      	b.n	f4b4 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    f4a4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    f4a8:	2b00      	cmp	r3, #0
    f4aa:	d003      	beq.n	f4b4 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f4ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f4b2:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    f4b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4b6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    f4ba:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    f4bc:	9b02      	ldr	r3, [sp, #8]
    f4be:	7b1b      	ldrb	r3, [r3, #12]
    f4c0:	2b00      	cmp	r3, #0
    f4c2:	d00e      	beq.n	f4e2 <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    f4c4:	9b02      	ldr	r3, [sp, #8]
    f4c6:	681b      	ldr	r3, [r3, #0]
    f4c8:	061b      	lsls	r3, r3, #24
    f4ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    f4ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4d0:	4313      	orrs	r3, r2
    f4d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f4d6:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    f4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    f4de:	930b      	str	r3, [sp, #44]	; 0x2c
    f4e0:	e007      	b.n	f4f2 <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f4e2:	9b02      	ldr	r3, [sp, #8]
    f4e4:	681b      	ldr	r3, [r3, #0]
    f4e6:	061b      	lsls	r3, r3, #24
    f4e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f4ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f4ee:	4313      	orrs	r3, r2
    f4f0:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    f4f2:	9b02      	ldr	r3, [sp, #8]
    f4f4:	7b9b      	ldrb	r3, [r3, #14]
    f4f6:	2b00      	cmp	r3, #0
    f4f8:	d003      	beq.n	f502 <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    f4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f500:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    f502:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f506:	601a      	str	r2, [r3, #0]
        }
}
    f508:	bf00      	nop
    f50a:	b00d      	add	sp, #52	; 0x34
    f50c:	f85d fb04 	ldr.w	pc, [sp], #4
    f510:	1ffc0000 	.word	0x1ffc0000

0000f514 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    f514:	b500      	push	{lr}
    f516:	b08f      	sub	sp, #60	; 0x3c
    f518:	9001      	str	r0, [sp, #4]
    f51a:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    f51c:	9b01      	ldr	r3, [sp, #4]
    f51e:	3380      	adds	r3, #128	; 0x80
    f520:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    f522:	2300      	movs	r3, #0
    f524:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    f526:	2300      	movs	r3, #0
    f528:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    f52a:	2300      	movs	r3, #0
    f52c:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    f52e:	2300      	movs	r3, #0
    f530:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    f532:	2308      	movs	r3, #8
    f534:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    f538:	9b00      	ldr	r3, [sp, #0]
    f53a:	3b01      	subs	r3, #1
    f53c:	4619      	mov	r1, r3
    f53e:	9801      	ldr	r0, [sp, #4]
    f540:	f7ff fcb6 	bl	eeb0 <FlexCAN_GetMbPayloadSize>
    f544:	4603      	mov	r3, r0
    f546:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    f54a:	2300      	movs	r3, #0
    f54c:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    f54e:	2300      	movs	r3, #0
    f550:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    f552:	2300      	movs	r3, #0
    f554:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    f556:	9b00      	ldr	r3, [sp, #0]
    f558:	3b01      	subs	r3, #1
    f55a:	4619      	mov	r1, r3
    f55c:	9801      	ldr	r0, [sp, #4]
    f55e:	f7ff f979 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    f562:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    f564:	f89d 2016 	ldrb.w	r2, [sp, #22]
    f568:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f56a:	441a      	add	r2, r3
    f56c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f570:	4413      	add	r3, r2
    f572:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    f574:	9801      	ldr	r0, [sp, #4]
    f576:	f7ff f9e7 	bl	e948 <FlexCAN_GetMaxMbNum>
    f57a:	4603      	mov	r3, r0
    f57c:	011b      	lsls	r3, r3, #4
    f57e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f580:	4413      	add	r3, r2
    f582:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    f584:	9a04      	ldr	r2, [sp, #16]
    f586:	9b03      	ldr	r3, [sp, #12]
    f588:	429a      	cmp	r2, r3
    f58a:	d806      	bhi.n	f59a <FlexCAN_SetMaxMsgBuffNum+0x86>
    f58c:	9801      	ldr	r0, [sp, #4]
    f58e:	f7ff f9db 	bl	e948 <FlexCAN_GetMaxMbNum>
    f592:	4602      	mov	r2, r0
    f594:	9b00      	ldr	r3, [sp, #0]
    f596:	4293      	cmp	r3, r2
    f598:	d901      	bls.n	f59e <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    f59a:	2304      	movs	r3, #4
    f59c:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    f59e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5a0:	2b00      	cmp	r3, #0
    f5a2:	d142      	bne.n	f62a <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    f5a4:	9b01      	ldr	r3, [sp, #4]
    f5a6:	681b      	ldr	r3, [r3, #0]
    f5a8:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    f5ac:	9b00      	ldr	r3, [sp, #0]
    f5ae:	3b01      	subs	r3, #1
    f5b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f5b4:	431a      	orrs	r2, r3
    f5b6:	9b01      	ldr	r3, [sp, #4]
    f5b8:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    f5ba:	9b01      	ldr	r3, [sp, #4]
    f5bc:	681b      	ldr	r3, [r3, #0]
    f5be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    f5c2:	2b00      	cmp	r3, #0
    f5c4:	d131      	bne.n	f62a <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f5c6:	2300      	movs	r3, #0
    f5c8:	930d      	str	r3, [sp, #52]	; 0x34
    f5ca:	e02a      	b.n	f622 <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    f5cc:	990d      	ldr	r1, [sp, #52]	; 0x34
    f5ce:	9801      	ldr	r0, [sp, #4]
    f5d0:	f7ff f940 	bl	e854 <FlexCAN_GetMsgBuffRegion>
    f5d4:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f5d6:	9b08      	ldr	r3, [sp, #32]
    f5d8:	3304      	adds	r3, #4
    f5da:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f5dc:	9b08      	ldr	r3, [sp, #32]
    f5de:	3308      	adds	r3, #8
    f5e0:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    f5e2:	9b08      	ldr	r3, [sp, #32]
    f5e4:	2200      	movs	r2, #0
    f5e6:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    f5e8:	9b07      	ldr	r3, [sp, #28]
    f5ea:	2200      	movs	r2, #0
    f5ec:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    f5ee:	990d      	ldr	r1, [sp, #52]	; 0x34
    f5f0:	9801      	ldr	r0, [sp, #4]
    f5f2:	f7ff fc5d 	bl	eeb0 <FlexCAN_GetMbPayloadSize>
    f5f6:	4603      	mov	r3, r0
    f5f8:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f5fc:	2300      	movs	r3, #0
    f5fe:	930c      	str	r3, [sp, #48]	; 0x30
    f600:	e007      	b.n	f612 <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    f602:	9a06      	ldr	r2, [sp, #24]
    f604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f606:	4413      	add	r3, r2
    f608:	2200      	movs	r2, #0
    f60a:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f60c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f60e:	3301      	adds	r3, #1
    f610:	930c      	str	r3, [sp, #48]	; 0x30
    f612:	f89d 3016 	ldrb.w	r3, [sp, #22]
    f616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f618:	429a      	cmp	r2, r3
    f61a:	d3f2      	bcc.n	f602 <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f61c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f61e:	3301      	adds	r3, #1
    f620:	930d      	str	r3, [sp, #52]	; 0x34
    f622:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f624:	9b00      	ldr	r3, [sp, #0]
    f626:	429a      	cmp	r2, r3
    f628:	d3d0      	bcc.n	f5cc <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    f62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    f62c:	4618      	mov	r0, r3
    f62e:	b00f      	add	sp, #60	; 0x3c
    f630:	f85d fb04 	ldr.w	pc, [sp], #4

0000f634 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    f634:	b500      	push	{lr}
    f636:	b083      	sub	sp, #12
    f638:	9001      	str	r0, [sp, #4]
    f63a:	9100      	str	r1, [sp, #0]
    switch (mode)
    f63c:	9b00      	ldr	r3, [sp, #0]
    f63e:	2b02      	cmp	r3, #2
    f640:	d01d      	beq.n	f67e <FlexCAN_SetOperationMode+0x4a>
    f642:	9b00      	ldr	r3, [sp, #0]
    f644:	2b02      	cmp	r3, #2
    f646:	d82b      	bhi.n	f6a0 <FlexCAN_SetOperationMode+0x6c>
    f648:	9b00      	ldr	r3, [sp, #0]
    f64a:	2b00      	cmp	r3, #0
    f64c:	d003      	beq.n	f656 <FlexCAN_SetOperationMode+0x22>
    f64e:	9b00      	ldr	r3, [sp, #0]
    f650:	2b01      	cmp	r3, #1
    f652:	d00d      	beq.n	f670 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    f654:	e024      	b.n	f6a0 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f656:	9b01      	ldr	r3, [sp, #4]
    f658:	685b      	ldr	r3, [r3, #4]
    f65a:	f023 0208 	bic.w	r2, r3, #8
    f65e:	9b01      	ldr	r3, [sp, #4]
    f660:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    f662:	9b01      	ldr	r3, [sp, #4]
    f664:	685b      	ldr	r3, [r3, #4]
    f666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    f66a:	9b01      	ldr	r3, [sp, #4]
    f66c:	605a      	str	r2, [r3, #4]
            break;
    f66e:	e018      	b.n	f6a2 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    f670:	9b01      	ldr	r3, [sp, #4]
    f672:	685b      	ldr	r3, [r3, #4]
    f674:	f043 0208 	orr.w	r2, r3, #8
    f678:	9b01      	ldr	r3, [sp, #4]
    f67a:	605a      	str	r2, [r3, #4]
            break;
    f67c:	e011      	b.n	f6a2 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    f67e:	9b01      	ldr	r3, [sp, #4]
    f680:	685b      	ldr	r3, [r3, #4]
    f682:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    f686:	9b01      	ldr	r3, [sp, #4]
    f688:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f68a:	9b01      	ldr	r3, [sp, #4]
    f68c:	685b      	ldr	r3, [r3, #4]
    f68e:	f023 0208 	bic.w	r2, r3, #8
    f692:	9b01      	ldr	r3, [sp, #4]
    f694:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    f696:	2101      	movs	r1, #1
    f698:	9801      	ldr	r0, [sp, #4]
    f69a:	f7fe ff7f 	bl	e59c <FlexCAN_SetSelfReception>
            break;
    f69e:	e000      	b.n	f6a2 <FlexCAN_SetOperationMode+0x6e>
            break;
    f6a0:	bf00      	nop
    }
}
    f6a2:	bf00      	nop
    f6a4:	b003      	add	sp, #12
    f6a6:	f85d fb04 	ldr.w	pc, [sp], #4

0000f6aa <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    f6aa:	b500      	push	{lr}
    f6ac:	b08d      	sub	sp, #52	; 0x34
    f6ae:	9003      	str	r0, [sp, #12]
    f6b0:	9102      	str	r1, [sp, #8]
    f6b2:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    f6b4:	2300      	movs	r3, #0
    f6b6:	9309      	str	r3, [sp, #36]	; 0x24
    f6b8:	2300      	movs	r3, #0
    f6ba:	9308      	str	r3, [sp, #32]
    f6bc:	2300      	movs	r3, #0
    f6be:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    f6c0:	9b03      	ldr	r3, [sp, #12]
    f6c2:	33e0      	adds	r3, #224	; 0xe0
    f6c4:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    f6c6:	9b03      	ldr	r3, [sp, #12]
    f6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f6ca:	0e1b      	lsrs	r3, r3, #24
    f6cc:	f003 030f 	and.w	r3, r3, #15
    f6d0:	9305      	str	r3, [sp, #20]
    f6d2:	9b02      	ldr	r3, [sp, #8]
    f6d4:	2b03      	cmp	r3, #3
    f6d6:	f200 81e7 	bhi.w	faa8 <FlexCAN_SetRxFifoFilter+0x3fe>
    f6da:	a201      	add	r2, pc, #4	; (adr r2, f6e0 <FlexCAN_SetRxFifoFilter+0x36>)
    f6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f6e0:	0000f6f1 	.word	0x0000f6f1
    f6e4:	0000f78b 	.word	0x0000f78b
    f6e8:	0000f8c5 	.word	0x0000f8c5
    f6ec:	0000fa93 	.word	0x0000fa93
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f6f0:	f004 ff18 	bl	14524 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f6f4:	9b03      	ldr	r3, [sp, #12]
    f6f6:	681b      	ldr	r3, [r3, #0]
    f6f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    f6fc:	9b03      	ldr	r3, [sp, #12]
    f6fe:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f700:	f004 ff3c 	bl	1457c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f704:	2300      	movs	r3, #0
    f706:	930b      	str	r3, [sp, #44]	; 0x2c
    f708:	e038      	b.n	f77c <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    f70a:	2300      	movs	r3, #0
    f70c:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    f70e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f710:	00db      	lsls	r3, r3, #3
    f712:	9a01      	ldr	r2, [sp, #4]
    f714:	4413      	add	r3, r2
    f716:	781b      	ldrb	r3, [r3, #0]
    f718:	2b00      	cmp	r3, #0
    f71a:	d002      	beq.n	f722 <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f71c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f720:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    f722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f724:	00db      	lsls	r3, r3, #3
    f726:	9a01      	ldr	r2, [sp, #4]
    f728:	4413      	add	r3, r2
    f72a:	785b      	ldrb	r3, [r3, #1]
    f72c:	2b00      	cmp	r3, #0
    f72e:	d013      	beq.n	f758 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f730:	9b07      	ldr	r3, [sp, #28]
    f732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f736:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    f738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f73a:	00db      	lsls	r3, r3, #3
    f73c:	9a01      	ldr	r2, [sp, #4]
    f73e:	4413      	add	r3, r2
    f740:	685b      	ldr	r3, [r3, #4]
    f742:	005b      	lsls	r3, r3, #1
    f744:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    f748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f74a:	009b      	lsls	r3, r3, #2
    f74c:	9a06      	ldr	r2, [sp, #24]
    f74e:	4413      	add	r3, r2
    f750:	9a07      	ldr	r2, [sp, #28]
    f752:	440a      	add	r2, r1
    f754:	601a      	str	r2, [r3, #0]
    f756:	e00e      	b.n	f776 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    f758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f75a:	00db      	lsls	r3, r3, #3
    f75c:	9a01      	ldr	r2, [sp, #4]
    f75e:	4413      	add	r3, r2
    f760:	685b      	ldr	r3, [r3, #4]
    f762:	04da      	lsls	r2, r3, #19
    f764:	4b9d      	ldr	r3, [pc, #628]	; (f9dc <FlexCAN_SetRxFifoFilter+0x332>)
    f766:	4013      	ands	r3, r2
    f768:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f76a:	0092      	lsls	r2, r2, #2
    f76c:	9906      	ldr	r1, [sp, #24]
    f76e:	440a      	add	r2, r1
    f770:	9907      	ldr	r1, [sp, #28]
    f772:	440b      	add	r3, r1
    f774:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f778:	3301      	adds	r3, #1
    f77a:	930b      	str	r3, [sp, #44]	; 0x2c
    f77c:	9b05      	ldr	r3, [sp, #20]
    f77e:	3301      	adds	r3, #1
    f780:	00db      	lsls	r3, r3, #3
    f782:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f784:	429a      	cmp	r2, r3
    f786:	d3c0      	bcc.n	f70a <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    f788:	e18f      	b.n	faaa <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f78a:	f004 fecb 	bl	14524 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    f78e:	9b03      	ldr	r3, [sp, #12]
    f790:	681b      	ldr	r3, [r3, #0]
    f792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f796:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    f79a:	9b03      	ldr	r3, [sp, #12]
    f79c:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f79e:	f004 feed 	bl	1457c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f7a2:	2300      	movs	r3, #0
    f7a4:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f7a6:	2300      	movs	r3, #0
    f7a8:	930b      	str	r3, [sp, #44]	; 0x2c
    f7aa:	e083      	b.n	f8b4 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    f7ac:	2300      	movs	r3, #0
    f7ae:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    f7b0:	2300      	movs	r3, #0
    f7b2:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    f7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7b6:	00db      	lsls	r3, r3, #3
    f7b8:	9a01      	ldr	r2, [sp, #4]
    f7ba:	4413      	add	r3, r2
    f7bc:	781b      	ldrb	r3, [r3, #0]
    f7be:	2b00      	cmp	r3, #0
    f7c0:	d002      	beq.n	f7c8 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f7c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f7c6:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    f7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7ca:	3301      	adds	r3, #1
    f7cc:	00db      	lsls	r3, r3, #3
    f7ce:	9a01      	ldr	r2, [sp, #4]
    f7d0:	4413      	add	r3, r2
    f7d2:	781b      	ldrb	r3, [r3, #0]
    f7d4:	2b00      	cmp	r3, #0
    f7d6:	d002      	beq.n	f7de <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    f7d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f7dc:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    f7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7e0:	00db      	lsls	r3, r3, #3
    f7e2:	9a01      	ldr	r2, [sp, #4]
    f7e4:	4413      	add	r3, r2
    f7e6:	785b      	ldrb	r3, [r3, #1]
    f7e8:	2b00      	cmp	r3, #0
    f7ea:	d014      	beq.n	f816 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f7ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f7f2:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7f6:	00db      	lsls	r3, r3, #3
    f7f8:	9a01      	ldr	r2, [sp, #4]
    f7fa:	4413      	add	r3, r2
    f7fc:	685b      	ldr	r3, [r3, #4]
    f7fe:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    f800:	041a      	lsls	r2, r3, #16
    f802:	4b77      	ldr	r3, [pc, #476]	; (f9e0 <FlexCAN_SetRxFifoFilter+0x336>)
    f804:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f806:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f808:	0092      	lsls	r2, r2, #2
    f80a:	9906      	ldr	r1, [sp, #24]
    f80c:	440a      	add	r2, r1
    f80e:	9909      	ldr	r1, [sp, #36]	; 0x24
    f810:	440b      	add	r3, r1
    f812:	6013      	str	r3, [r2, #0]
    f814:	e00e      	b.n	f834 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f818:	00db      	lsls	r3, r3, #3
    f81a:	9a01      	ldr	r2, [sp, #4]
    f81c:	4413      	add	r3, r2
    f81e:	685b      	ldr	r3, [r3, #4]
    f820:	04da      	lsls	r2, r3, #19
    f822:	4b6e      	ldr	r3, [pc, #440]	; (f9dc <FlexCAN_SetRxFifoFilter+0x332>)
    f824:	4013      	ands	r3, r2
    f826:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f828:	0092      	lsls	r2, r2, #2
    f82a:	9906      	ldr	r1, [sp, #24]
    f82c:	440a      	add	r2, r1
    f82e:	9909      	ldr	r1, [sp, #36]	; 0x24
    f830:	440b      	add	r3, r1
    f832:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f836:	3301      	adds	r3, #1
    f838:	00db      	lsls	r3, r3, #3
    f83a:	9a01      	ldr	r2, [sp, #4]
    f83c:	4413      	add	r3, r2
    f83e:	785b      	ldrb	r3, [r3, #1]
    f840:	2b00      	cmp	r3, #0
    f842:	d01a      	beq.n	f87a <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    f844:	9b08      	ldr	r3, [sp, #32]
    f846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f84a:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f84c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f84e:	009b      	lsls	r3, r3, #2
    f850:	9a06      	ldr	r2, [sp, #24]
    f852:	4413      	add	r3, r2
    f854:	6819      	ldr	r1, [r3, #0]
    f856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f858:	3301      	adds	r3, #1
    f85a:	00db      	lsls	r3, r3, #3
    f85c:	9a01      	ldr	r2, [sp, #4]
    f85e:	4413      	add	r3, r2
    f860:	685b      	ldr	r3, [r3, #4]
    f862:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    f864:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f868:	9b08      	ldr	r3, [sp, #32]
    f86a:	441a      	add	r2, r3
    f86c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f86e:	009b      	lsls	r3, r3, #2
    f870:	9806      	ldr	r0, [sp, #24]
    f872:	4403      	add	r3, r0
    f874:	430a      	orrs	r2, r1
    f876:	601a      	str	r2, [r3, #0]
    f878:	e016      	b.n	f8a8 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f87a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f87c:	009b      	lsls	r3, r3, #2
    f87e:	9a06      	ldr	r2, [sp, #24]
    f880:	4413      	add	r3, r2
    f882:	6819      	ldr	r1, [r3, #0]
    f884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f886:	3301      	adds	r3, #1
    f888:	00db      	lsls	r3, r3, #3
    f88a:	9a01      	ldr	r2, [sp, #4]
    f88c:	4413      	add	r3, r2
    f88e:	685b      	ldr	r3, [r3, #4]
    f890:	00da      	lsls	r2, r3, #3
    f892:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    f896:	4013      	ands	r3, r2
    f898:	9a08      	ldr	r2, [sp, #32]
    f89a:	441a      	add	r2, r3
    f89c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f89e:	009b      	lsls	r3, r3, #2
    f8a0:	9806      	ldr	r0, [sp, #24]
    f8a2:	4403      	add	r3, r0
    f8a4:	430a      	orrs	r2, r1
    f8a6:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    f8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8aa:	3302      	adds	r3, #2
    f8ac:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f8ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8b0:	3301      	adds	r3, #1
    f8b2:	930b      	str	r3, [sp, #44]	; 0x2c
    f8b4:	9b05      	ldr	r3, [sp, #20]
    f8b6:	3301      	adds	r3, #1
    f8b8:	00db      	lsls	r3, r3, #3
    f8ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f8bc:	429a      	cmp	r2, r3
    f8be:	f4ff af75 	bcc.w	f7ac <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    f8c2:	e0f2      	b.n	faaa <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f8c4:	f004 fe2e 	bl	14524 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f8c8:	9b03      	ldr	r3, [sp, #12]
    f8ca:	681b      	ldr	r3, [r3, #0]
    f8cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f8d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    f8d4:	9b03      	ldr	r3, [sp, #12]
    f8d6:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f8d8:	f004 fe50 	bl	1457c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f8dc:	2300      	movs	r3, #0
    f8de:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f8e0:	2300      	movs	r3, #0
    f8e2:	930b      	str	r3, [sp, #44]	; 0x2c
    f8e4:	e0cd      	b.n	fa82 <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    f8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8e8:	00db      	lsls	r3, r3, #3
    f8ea:	9a01      	ldr	r2, [sp, #4]
    f8ec:	4413      	add	r3, r2
    f8ee:	785b      	ldrb	r3, [r3, #1]
    f8f0:	2b00      	cmp	r3, #0
    f8f2:	d00e      	beq.n	f912 <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8f6:	00db      	lsls	r3, r3, #3
    f8f8:	9a01      	ldr	r2, [sp, #4]
    f8fa:	4413      	add	r3, r2
    f8fc:	685b      	ldr	r3, [r3, #4]
    f8fe:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f900:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f904:	009b      	lsls	r3, r3, #2
    f906:	9a06      	ldr	r2, [sp, #24]
    f908:	4413      	add	r3, r2
    f90a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f90c:	440a      	add	r2, r1
    f90e:	601a      	str	r2, [r3, #0]
    f910:	e00d      	b.n	f92e <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f914:	00db      	lsls	r3, r3, #3
    f916:	9a01      	ldr	r2, [sp, #4]
    f918:	4413      	add	r3, r2
    f91a:	685b      	ldr	r3, [r3, #4]
    f91c:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f91e:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f922:	009b      	lsls	r3, r3, #2
    f924:	9a06      	ldr	r2, [sp, #24]
    f926:	4413      	add	r3, r2
    f928:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f92a:	440a      	add	r2, r1
    f92c:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f930:	3301      	adds	r3, #1
    f932:	00db      	lsls	r3, r3, #3
    f934:	9a01      	ldr	r2, [sp, #4]
    f936:	4413      	add	r3, r2
    f938:	785b      	ldrb	r3, [r3, #1]
    f93a:	2b00      	cmp	r3, #0
    f93c:	d017      	beq.n	f96e <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f93e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f940:	009b      	lsls	r3, r3, #2
    f942:	9a06      	ldr	r2, [sp, #24]
    f944:	4413      	add	r3, r2
    f946:	6819      	ldr	r1, [r3, #0]
    f948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f94a:	3301      	adds	r3, #1
    f94c:	00db      	lsls	r3, r3, #3
    f94e:	9a01      	ldr	r2, [sp, #4]
    f950:	4413      	add	r3, r2
    f952:	685b      	ldr	r3, [r3, #4]
    f954:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    f956:	041b      	lsls	r3, r3, #16
    f958:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f95e:	441a      	add	r2, r3
    f960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f962:	009b      	lsls	r3, r3, #2
    f964:	9806      	ldr	r0, [sp, #24]
    f966:	4403      	add	r3, r0
    f968:	430a      	orrs	r2, r1
    f96a:	601a      	str	r2, [r3, #0]
    f96c:	e016      	b.n	f99c <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f970:	009b      	lsls	r3, r3, #2
    f972:	9a06      	ldr	r2, [sp, #24]
    f974:	4413      	add	r3, r2
    f976:	6819      	ldr	r1, [r3, #0]
    f978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f97a:	3301      	adds	r3, #1
    f97c:	00db      	lsls	r3, r3, #3
    f97e:	9a01      	ldr	r2, [sp, #4]
    f980:	4413      	add	r3, r2
    f982:	685b      	ldr	r3, [r3, #4]
    f984:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    f986:	041b      	lsls	r3, r3, #16
    f988:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f98e:	441a      	add	r2, r3
    f990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f992:	009b      	lsls	r3, r3, #2
    f994:	9806      	ldr	r0, [sp, #24]
    f996:	4403      	add	r3, r0
    f998:	430a      	orrs	r2, r1
    f99a:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    f99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f99e:	3302      	adds	r3, #2
    f9a0:	00db      	lsls	r3, r3, #3
    f9a2:	9a01      	ldr	r2, [sp, #4]
    f9a4:	4413      	add	r3, r2
    f9a6:	785b      	ldrb	r3, [r3, #1]
    f9a8:	2b00      	cmp	r3, #0
    f9aa:	d01b      	beq.n	f9e4 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f9ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9ae:	009b      	lsls	r3, r3, #2
    f9b0:	9a06      	ldr	r2, [sp, #24]
    f9b2:	4413      	add	r3, r2
    f9b4:	6819      	ldr	r1, [r3, #0]
    f9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9b8:	3302      	adds	r3, #2
    f9ba:	00db      	lsls	r3, r3, #3
    f9bc:	9a01      	ldr	r2, [sp, #4]
    f9be:	4413      	add	r3, r2
    f9c0:	685b      	ldr	r3, [r3, #4]
    f9c2:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    f9c4:	021b      	lsls	r3, r3, #8
    f9c6:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9ca:	441a      	add	r2, r3
    f9cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9ce:	009b      	lsls	r3, r3, #2
    f9d0:	9806      	ldr	r0, [sp, #24]
    f9d2:	4403      	add	r3, r0
    f9d4:	430a      	orrs	r2, r1
    f9d6:	601a      	str	r2, [r3, #0]
    f9d8:	e01a      	b.n	fa10 <FlexCAN_SetRxFifoFilter+0x366>
    f9da:	bf00      	nop
    f9dc:	3ff80000 	.word	0x3ff80000
    f9e0:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9e6:	009b      	lsls	r3, r3, #2
    f9e8:	9a06      	ldr	r2, [sp, #24]
    f9ea:	4413      	add	r3, r2
    f9ec:	6819      	ldr	r1, [r3, #0]
    f9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9f0:	3302      	adds	r3, #2
    f9f2:	00db      	lsls	r3, r3, #3
    f9f4:	9a01      	ldr	r2, [sp, #4]
    f9f6:	4413      	add	r3, r2
    f9f8:	685b      	ldr	r3, [r3, #4]
    f9fa:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    f9fc:	021b      	lsls	r3, r3, #8
    f9fe:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    fa00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa02:	441a      	add	r2, r3
    fa04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa06:	009b      	lsls	r3, r3, #2
    fa08:	9806      	ldr	r0, [sp, #24]
    fa0a:	4403      	add	r3, r0
    fa0c:	430a      	orrs	r2, r1
    fa0e:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    fa10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa12:	3303      	adds	r3, #3
    fa14:	00db      	lsls	r3, r3, #3
    fa16:	9a01      	ldr	r2, [sp, #4]
    fa18:	4413      	add	r3, r2
    fa1a:	785b      	ldrb	r3, [r3, #1]
    fa1c:	2b00      	cmp	r3, #0
    fa1e:	d015      	beq.n	fa4c <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    fa20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa22:	009b      	lsls	r3, r3, #2
    fa24:	9a06      	ldr	r2, [sp, #24]
    fa26:	4413      	add	r3, r2
    fa28:	6819      	ldr	r1, [r3, #0]
    fa2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa2c:	3303      	adds	r3, #3
    fa2e:	00db      	lsls	r3, r3, #3
    fa30:	9a01      	ldr	r2, [sp, #4]
    fa32:	4413      	add	r3, r2
    fa34:	685b      	ldr	r3, [r3, #4]
    fa36:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    fa38:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    fa3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa3c:	441a      	add	r2, r3
    fa3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa40:	009b      	lsls	r3, r3, #2
    fa42:	9806      	ldr	r0, [sp, #24]
    fa44:	4403      	add	r3, r0
    fa46:	430a      	orrs	r2, r1
    fa48:	601a      	str	r2, [r3, #0]
    fa4a:	e014      	b.n	fa76 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    fa4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa4e:	009b      	lsls	r3, r3, #2
    fa50:	9a06      	ldr	r2, [sp, #24]
    fa52:	4413      	add	r3, r2
    fa54:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    fa56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa58:	3303      	adds	r3, #3
    fa5a:	00db      	lsls	r3, r3, #3
    fa5c:	9a01      	ldr	r2, [sp, #4]
    fa5e:	4413      	add	r3, r2
    fa60:	685b      	ldr	r3, [r3, #4]
    fa62:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    fa64:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    fa66:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa68:	441a      	add	r2, r3
    fa6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa6c:	009b      	lsls	r3, r3, #2
    fa6e:	9806      	ldr	r0, [sp, #24]
    fa70:	4403      	add	r3, r0
    fa72:	430a      	orrs	r2, r1
    fa74:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    fa76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa78:	3304      	adds	r3, #4
    fa7a:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    fa7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa7e:	3301      	adds	r3, #1
    fa80:	930b      	str	r3, [sp, #44]	; 0x2c
    fa82:	9b05      	ldr	r3, [sp, #20]
    fa84:	3301      	adds	r3, #1
    fa86:	00db      	lsls	r3, r3, #3
    fa88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fa8a:	429a      	cmp	r2, r3
    fa8c:	f4ff af2b 	bcc.w	f8e6 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    fa90:	e00b      	b.n	faaa <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    fa92:	f004 fd47 	bl	14524 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    fa96:	9b03      	ldr	r3, [sp, #12]
    fa98:	681b      	ldr	r3, [r3, #0]
    fa9a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    fa9e:	9b03      	ldr	r3, [sp, #12]
    faa0:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    faa2:	f004 fd6b 	bl	1457c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    faa6:	e000      	b.n	faaa <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    faa8:	bf00      	nop
    }
}
    faaa:	bf00      	nop
    faac:	b00d      	add	sp, #52	; 0x34
    faae:	f85d fb04 	ldr.w	pc, [sp], #4

0000fab2 <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    fab2:	b500      	push	{lr}
    fab4:	b08b      	sub	sp, #44	; 0x2c
    fab6:	9001      	str	r0, [sp, #4]
    fab8:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    faba:	9b01      	ldr	r3, [sp, #4]
    fabc:	3380      	adds	r3, #128	; 0x80
    fabe:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    fac0:	9b07      	ldr	r3, [sp, #28]
    fac2:	3304      	adds	r3, #4
    fac4:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    fac6:	9b07      	ldr	r3, [sp, #28]
    fac8:	3308      	adds	r3, #8
    faca:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    facc:	2300      	movs	r3, #0
    face:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    fad0:	9b07      	ldr	r3, [sp, #28]
    fad2:	681b      	ldr	r3, [r3, #0]
    fad4:	0c1b      	lsrs	r3, r3, #16
    fad6:	b2db      	uxtb	r3, r3
    fad8:	f003 030f 	and.w	r3, r3, #15
    fadc:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    fae0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fae4:	4618      	mov	r0, r3
    fae6:	f7fe fe6c 	bl	e7c2 <FlexCAN_ComputePayloadSize>
    faea:	4603      	mov	r3, r0
    faec:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    faf0:	9b00      	ldr	r3, [sp, #0]
    faf2:	3308      	adds	r3, #8
    faf4:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    faf6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fafa:	2b08      	cmp	r3, #8
    fafc:	d902      	bls.n	fb04 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    fafe:	2308      	movs	r3, #8
    fb00:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    fb04:	9b00      	ldr	r3, [sp, #0]
    fb06:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    fb0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    fb0e:	9b07      	ldr	r3, [sp, #28]
    fb10:	681a      	ldr	r2, [r3, #0]
    fb12:	9b00      	ldr	r3, [sp, #0]
    fb14:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    fb16:	9b00      	ldr	r3, [sp, #0]
    fb18:	681b      	ldr	r3, [r3, #0]
    fb1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    fb1e:	2b00      	cmp	r3, #0
    fb20:	d004      	beq.n	fb2c <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    fb22:	9b06      	ldr	r3, [sp, #24]
    fb24:	681a      	ldr	r2, [r3, #0]
    fb26:	9b00      	ldr	r3, [sp, #0]
    fb28:	605a      	str	r2, [r3, #4]
    fb2a:	e004      	b.n	fb36 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    fb2c:	9b06      	ldr	r3, [sp, #24]
    fb2e:	681b      	ldr	r3, [r3, #0]
    fb30:	0c9a      	lsrs	r2, r3, #18
    fb32:	9b00      	ldr	r3, [sp, #0]
    fb34:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    fb36:	9b01      	ldr	r3, [sp, #4]
    fb38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fb3a:	b2da      	uxtb	r2, r3
    fb3c:	9b00      	ldr	r3, [sp, #0]
    fb3e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    fb42:	9b00      	ldr	r3, [sp, #0]
    fb44:	681b      	ldr	r3, [r3, #0]
    fb46:	b29a      	uxth	r2, r3
    fb48:	9b00      	ldr	r3, [sp, #0]
    fb4a:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fb4c:	2300      	movs	r3, #0
    fb4e:	9309      	str	r3, [sp, #36]	; 0x24
    fb50:	e01f      	b.n	fb92 <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    fb52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb54:	089b      	lsrs	r3, r3, #2
    fb56:	009b      	lsls	r3, r3, #2
    fb58:	9a05      	ldr	r2, [sp, #20]
    fb5a:	4413      	add	r3, r2
    fb5c:	681b      	ldr	r3, [r3, #0]
    fb5e:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    fb60:	9b02      	ldr	r3, [sp, #8]
    fb62:	0e1a      	lsrs	r2, r3, #24
    fb64:	9b02      	ldr	r3, [sp, #8]
    fb66:	0a1b      	lsrs	r3, r3, #8
    fb68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    fb6c:	431a      	orrs	r2, r3
    fb6e:	9b02      	ldr	r3, [sp, #8]
    fb70:	021b      	lsls	r3, r3, #8
    fb72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    fb76:	ea42 0103 	orr.w	r1, r2, r3
    fb7a:	9b02      	ldr	r3, [sp, #8]
    fb7c:	061a      	lsls	r2, r3, #24
    fb7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb80:	089b      	lsrs	r3, r3, #2
    fb82:	009b      	lsls	r3, r3, #2
    fb84:	9804      	ldr	r0, [sp, #16]
    fb86:	4403      	add	r3, r0
    fb88:	430a      	orrs	r2, r1
    fb8a:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fb8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb8e:	3304      	adds	r3, #4
    fb90:	9309      	str	r3, [sp, #36]	; 0x24
    fb92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fb96:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fb98:	429a      	cmp	r2, r3
    fb9a:	d3da      	bcc.n	fb52 <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    fb9c:	bf00      	nop
    fb9e:	bf00      	nop
    fba0:	b00b      	add	sp, #44	; 0x2c
    fba2:	f85d fb04 	ldr.w	pc, [sp], #4

0000fba6 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    fba6:	b088      	sub	sp, #32
    fba8:	9003      	str	r0, [sp, #12]
    fbaa:	9301      	str	r3, [sp, #4]
    fbac:	460b      	mov	r3, r1
    fbae:	f88d 300b 	strb.w	r3, [sp, #11]
    fbb2:	4613      	mov	r3, r2
    fbb4:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    fbb8:	2300      	movs	r3, #0
    fbba:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    fbbe:	2300      	movs	r3, #0
    fbc0:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    fbc2:	2300      	movs	r3, #0
    fbc4:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    fbc6:	9b01      	ldr	r3, [sp, #4]
    fbc8:	b2db      	uxtb	r3, r3
    fbca:	f89d 200b 	ldrb.w	r2, [sp, #11]
    fbce:	429a      	cmp	r2, r3
    fbd0:	d303      	bcc.n	fbda <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    fbd2:	2301      	movs	r3, #1
    fbd4:	f88d 301f 	strb.w	r3, [sp, #31]
    fbd8:	e01b      	b.n	fc12 <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    fbda:	f89d 300a 	ldrb.w	r3, [sp, #10]
    fbde:	2b00      	cmp	r3, #0
    fbe0:	d014      	beq.n	fc0c <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    fbe2:	9b03      	ldr	r3, [sp, #12]
    fbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fbe6:	0e1b      	lsrs	r3, r3, #24
    fbe8:	f003 030f 	and.w	r3, r3, #15
    fbec:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    fbee:	9b06      	ldr	r3, [sp, #24]
    fbf0:	3301      	adds	r3, #1
    fbf2:	00db      	lsls	r3, r3, #3
    fbf4:	089b      	lsrs	r3, r3, #2
    fbf6:	3305      	adds	r3, #5
    fbf8:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    fbfa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    fbfe:	9a05      	ldr	r2, [sp, #20]
    fc00:	429a      	cmp	r2, r3
    fc02:	d306      	bcc.n	fc12 <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    fc04:	2301      	movs	r3, #1
    fc06:	f88d 301f 	strb.w	r3, [sp, #31]
    fc0a:	e002      	b.n	fc12 <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    fc0c:	2300      	movs	r3, #0
    fc0e:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    fc12:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    fc16:	4618      	mov	r0, r3
    fc18:	b008      	add	sp, #32
    fc1a:	4770      	bx	lr

0000fc1c <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    fc1c:	b500      	push	{lr}
    fc1e:	b083      	sub	sp, #12
    fc20:	9001      	str	r0, [sp, #4]
    fc22:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    fc24:	9b00      	ldr	r3, [sp, #0]
    fc26:	f003 0320 	and.w	r3, r3, #32
    fc2a:	2b00      	cmp	r3, #0
    fc2c:	d004      	beq.n	fc38 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    fc2e:	2101      	movs	r1, #1
    fc30:	9801      	ldr	r0, [sp, #4]
    fc32:	f7fe fcd8 	bl	e5e6 <FlexCAN_SetIsoCan>
    fc36:	e003      	b.n	fc40 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    fc38:	2100      	movs	r1, #0
    fc3a:	9801      	ldr	r0, [sp, #4]
    fc3c:	f7fe fcd3 	bl	e5e6 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    fc40:	9b00      	ldr	r3, [sp, #0]
    fc42:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fc46:	2b00      	cmp	r3, #0
    fc48:	d004      	beq.n	fc54 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    fc4a:	2101      	movs	r1, #1
    fc4c:	9801      	ldr	r0, [sp, #4]
    fc4e:	f7fe fce1 	bl	e614 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    fc52:	e003      	b.n	fc5c <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    fc54:	2100      	movs	r1, #0
    fc56:	9801      	ldr	r0, [sp, #4]
    fc58:	f7fe fcdc 	bl	e614 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    fc5c:	9b00      	ldr	r3, [sp, #0]
    fc5e:	f003 0308 	and.w	r3, r3, #8
    fc62:	2b00      	cmp	r3, #0
    fc64:	d004      	beq.n	fc70 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    fc66:	2101      	movs	r1, #1
    fc68:	9801      	ldr	r0, [sp, #4]
    fc6a:	f7fe fcea 	bl	e642 <FlexCAN_SetProtocolException>
    fc6e:	e003      	b.n	fc78 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    fc70:	2100      	movs	r1, #0
    fc72:	9801      	ldr	r0, [sp, #4]
    fc74:	f7fe fce5 	bl	e642 <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    fc78:	9b00      	ldr	r3, [sp, #0]
    fc7a:	f003 0302 	and.w	r3, r3, #2
    fc7e:	2b00      	cmp	r3, #0
    fc80:	d00a      	beq.n	fc98 <FlexCAN_ConfigCtrlOptions+0x7c>
    fc82:	9b01      	ldr	r3, [sp, #4]
    fc84:	681b      	ldr	r3, [r3, #0]
    fc86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    fc8a:	2b00      	cmp	r3, #0
    fc8c:	d104      	bne.n	fc98 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    fc8e:	2101      	movs	r1, #1
    fc90:	9801      	ldr	r0, [sp, #4]
    fc92:	f7fe fd31 	bl	e6f8 <FlexCAN_CanBitSampling>
    fc96:	e003      	b.n	fca0 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    fc98:	2100      	movs	r1, #0
    fc9a:	9801      	ldr	r0, [sp, #4]
    fc9c:	f7fe fd2c 	bl	e6f8 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    fca0:	9b00      	ldr	r3, [sp, #0]
    fca2:	f003 0304 	and.w	r3, r3, #4
    fca6:	2b00      	cmp	r3, #0
    fca8:	d004      	beq.n	fcb4 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    fcaa:	2101      	movs	r1, #1
    fcac:	9801      	ldr	r0, [sp, #4]
    fcae:	f7fe fcf6 	bl	e69e <FlexCAN_SetBusOffAutorecovery>
    fcb2:	e003      	b.n	fcbc <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    fcb4:	2100      	movs	r1, #0
    fcb6:	9801      	ldr	r0, [sp, #4]
    fcb8:	f7fe fcf1 	bl	e69e <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    fcbc:	9b00      	ldr	r3, [sp, #0]
    fcbe:	f003 0301 	and.w	r3, r3, #1
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	d004      	beq.n	fcd0 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    fcc6:	2101      	movs	r1, #1
    fcc8:	9801      	ldr	r0, [sp, #4]
    fcca:	f7fe fcd1 	bl	e670 <FlexCAN_SetRemoteReqStore>
    fcce:	e003      	b.n	fcd8 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    fcd0:	2100      	movs	r1, #0
    fcd2:	9801      	ldr	r0, [sp, #4]
    fcd4:	f7fe fccc 	bl	e670 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    fcd8:	9b00      	ldr	r3, [sp, #0]
    fcda:	f003 0310 	and.w	r3, r3, #16
    fcde:	2b00      	cmp	r3, #0
    fce0:	d004      	beq.n	fcec <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    fce2:	2101      	movs	r1, #1
    fce4:	9801      	ldr	r0, [sp, #4]
    fce6:	f7fe fcf0 	bl	e6ca <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    fcea:	e003      	b.n	fcf4 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    fcec:	2100      	movs	r1, #0
    fcee:	9801      	ldr	r0, [sp, #4]
    fcf0:	f7fe fceb 	bl	e6ca <FlexCAN_SetEdgeFilter>
}
    fcf4:	bf00      	nop
    fcf6:	b003      	add	sp, #12
    fcf8:	f85d fb04 	ldr.w	pc, [sp], #4

0000fcfc <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    fcfc:	b084      	sub	sp, #16
    fcfe:	4603      	mov	r3, r0
    fd00:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    fd04:	2300      	movs	r3, #0
    fd06:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fd0a:	2300      	movs	r3, #0
    fd0c:	f88d 300f 	strb.w	r3, [sp, #15]
    fd10:	e00d      	b.n	fd2e <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    fd12:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fd16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fd1a:	4909      	ldr	r1, [pc, #36]	; (fd40 <FlexCAN_ResetImaskBuff+0x44>)
    fd1c:	4413      	add	r3, r2
    fd1e:	2200      	movs	r2, #0
    fd20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fd24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fd28:	3301      	adds	r3, #1
    fd2a:	f88d 300f 	strb.w	r3, [sp, #15]
    fd2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fd32:	2b00      	cmp	r3, #0
    fd34:	d0ed      	beq.n	fd12 <FlexCAN_ResetImaskBuff+0x16>
    }
}
    fd36:	bf00      	nop
    fd38:	bf00      	nop
    fd3a:	b004      	add	sp, #16
    fd3c:	4770      	bx	lr
    fd3e:	bf00      	nop
    fd40:	1fff9368 	.word	0x1fff9368

0000fd44 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    fd44:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    fd46:	2000      	movs	r0, #0
    fd48:	f7fd fb2a 	bl	d3a0 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fd4c:	f3bf 8f4f 	dsb	sy
}
    fd50:	bf00      	nop
    fd52:	bd08      	pop	{r3, pc}

0000fd54 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    fd54:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    fd56:	2000      	movs	r0, #0
    fd58:	f7fd fac2 	bl	d2e0 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fd5c:	f3bf 8f4f 	dsb	sy
}
    fd60:	bf00      	nop
    fd62:	bd08      	pop	{r3, pc}

0000fd64 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    fd64:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    fd66:	220f      	movs	r2, #15
    fd68:	2100      	movs	r1, #0
    fd6a:	2000      	movs	r0, #0
    fd6c:	f7fd f9dc 	bl	d128 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd70:	f3bf 8f4f 	dsb	sy
}
    fd74:	bf00      	nop
    fd76:	bd08      	pop	{r3, pc}

0000fd78 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    fd78:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    fd7a:	221f      	movs	r2, #31
    fd7c:	2110      	movs	r1, #16
    fd7e:	2000      	movs	r0, #0
    fd80:	f7fd f9d2 	bl	d128 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd84:	f3bf 8f4f 	dsb	sy
}
    fd88:	bf00      	nop
    fd8a:	bd08      	pop	{r3, pc}

0000fd8c <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    fd8c:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    fd8e:	2001      	movs	r0, #1
    fd90:	f7fd fb06 	bl	d3a0 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fd94:	f3bf 8f4f 	dsb	sy
}
    fd98:	bf00      	nop
    fd9a:	bd08      	pop	{r3, pc}

0000fd9c <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    fd9c:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    fd9e:	2001      	movs	r0, #1
    fda0:	f7fd fa9e 	bl	d2e0 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fda4:	f3bf 8f4f 	dsb	sy
}
    fda8:	bf00      	nop
    fdaa:	bd08      	pop	{r3, pc}

0000fdac <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    fdac:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    fdae:	220f      	movs	r2, #15
    fdb0:	2100      	movs	r1, #0
    fdb2:	2001      	movs	r0, #1
    fdb4:	f7fd f9b8 	bl	d128 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fdb8:	f3bf 8f4f 	dsb	sy
}
    fdbc:	bf00      	nop
    fdbe:	bd08      	pop	{r3, pc}

0000fdc0 <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    fdc0:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    fdc2:	221f      	movs	r2, #31
    fdc4:	2110      	movs	r1, #16
    fdc6:	2001      	movs	r0, #1
    fdc8:	f7fd f9ae 	bl	d128 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fdcc:	f3bf 8f4f 	dsb	sy
}
    fdd0:	bf00      	nop
    fdd2:	bd08      	pop	{r3, pc}

0000fdd4 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    fdd4:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    fdd6:	2002      	movs	r0, #2
    fdd8:	f7fd fae2 	bl	d3a0 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fddc:	f3bf 8f4f 	dsb	sy
}
    fde0:	bf00      	nop
    fde2:	bd08      	pop	{r3, pc}

0000fde4 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    fde4:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    fde6:	2002      	movs	r0, #2
    fde8:	f7fd fa7a 	bl	d2e0 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fdec:	f3bf 8f4f 	dsb	sy
}
    fdf0:	bf00      	nop
    fdf2:	bd08      	pop	{r3, pc}

0000fdf4 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    fdf4:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    fdf6:	220f      	movs	r2, #15
    fdf8:	2100      	movs	r1, #0
    fdfa:	2002      	movs	r0, #2
    fdfc:	f7fd f994 	bl	d128 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fe00:	f3bf 8f4f 	dsb	sy
}
    fe04:	bf00      	nop
    fe06:	bd08      	pop	{r3, pc}

0000fe08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fe08:	b500      	push	{lr}
    fe0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe0c:	f7f0 ff26 	bl	c5c <Sys_GetCoreID>
    fe10:	4603      	mov	r3, r0
    fe12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    fe14:	4a10      	ldr	r2, [pc, #64]	; (fe58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fe16:	9b01      	ldr	r3, [sp, #4]
    fe18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe1c:	2b00      	cmp	r3, #0
    fe1e:	d10d      	bne.n	fe3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe20:	f7f0 fd84 	bl	92c <Adc_schm_read_msr>
    fe24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe26:	9b00      	ldr	r3, [sp, #0]
    fe28:	f003 0301 	and.w	r3, r3, #1
    fe2c:	2b00      	cmp	r3, #0
    fe2e:	d100      	bne.n	fe32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    fe32:	490a      	ldr	r1, [pc, #40]	; (fe5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    fe34:	9b01      	ldr	r3, [sp, #4]
    fe36:	9a00      	ldr	r2, [sp, #0]
    fe38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    fe3c:	4a06      	ldr	r2, [pc, #24]	; (fe58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fe3e:	9b01      	ldr	r3, [sp, #4]
    fe40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe44:	1c5a      	adds	r2, r3, #1
    fe46:	4904      	ldr	r1, [pc, #16]	; (fe58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fe48:	9b01      	ldr	r3, [sp, #4]
    fe4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe4e:	bf00      	nop
    fe50:	b003      	add	sp, #12
    fe52:	f85d fb04 	ldr.w	pc, [sp], #4
    fe56:	bf00      	nop
    fe58:	1fff9378 	.word	0x1fff9378
    fe5c:	1fff9374 	.word	0x1fff9374

0000fe60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fe60:	b500      	push	{lr}
    fe62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe64:	f7f0 fefa 	bl	c5c <Sys_GetCoreID>
    fe68:	4603      	mov	r3, r0
    fe6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    fe6c:	4a0d      	ldr	r2, [pc, #52]	; (fea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fe6e:	9b01      	ldr	r3, [sp, #4]
    fe70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe74:	1e5a      	subs	r2, r3, #1
    fe76:	490b      	ldr	r1, [pc, #44]	; (fea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fe78:	9b01      	ldr	r3, [sp, #4]
    fe7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    fe7e:	4a0a      	ldr	r2, [pc, #40]	; (fea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    fe80:	9b01      	ldr	r3, [sp, #4]
    fe82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe86:	f003 0301 	and.w	r3, r3, #1
    fe8a:	2b00      	cmp	r3, #0
    fe8c:	d106      	bne.n	fe9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    fe8e:	4a05      	ldr	r2, [pc, #20]	; (fea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fe90:	9b01      	ldr	r3, [sp, #4]
    fe92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe96:	2b00      	cmp	r3, #0
    fe98:	d100      	bne.n	fe9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe9c:	bf00      	nop
    fe9e:	b003      	add	sp, #12
    fea0:	f85d fb04 	ldr.w	pc, [sp], #4
    fea4:	1fff9378 	.word	0x1fff9378
    fea8:	1fff9374 	.word	0x1fff9374

0000feac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    feac:	b500      	push	{lr}
    feae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    feb0:	f7f0 fed4 	bl	c5c <Sys_GetCoreID>
    feb4:	4603      	mov	r3, r0
    feb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    feb8:	4a10      	ldr	r2, [pc, #64]	; (fefc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    feba:	9b01      	ldr	r3, [sp, #4]
    febc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fec0:	2b00      	cmp	r3, #0
    fec2:	d10d      	bne.n	fee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fec4:	f7f0 fd32 	bl	92c <Adc_schm_read_msr>
    fec8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    feca:	9b00      	ldr	r3, [sp, #0]
    fecc:	f003 0301 	and.w	r3, r3, #1
    fed0:	2b00      	cmp	r3, #0
    fed2:	d100      	bne.n	fed6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fed4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    fed6:	490a      	ldr	r1, [pc, #40]	; (ff00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    fed8:	9b01      	ldr	r3, [sp, #4]
    feda:	9a00      	ldr	r2, [sp, #0]
    fedc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    fee0:	4a06      	ldr	r2, [pc, #24]	; (fefc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    fee2:	9b01      	ldr	r3, [sp, #4]
    fee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fee8:	1c5a      	adds	r2, r3, #1
    feea:	4904      	ldr	r1, [pc, #16]	; (fefc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    feec:	9b01      	ldr	r3, [sp, #4]
    feee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fef2:	bf00      	nop
    fef4:	b003      	add	sp, #12
    fef6:	f85d fb04 	ldr.w	pc, [sp], #4
    fefa:	bf00      	nop
    fefc:	1fff9380 	.word	0x1fff9380
    ff00:	1fff937c 	.word	0x1fff937c

0000ff04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    ff04:	b500      	push	{lr}
    ff06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff08:	f7f0 fea8 	bl	c5c <Sys_GetCoreID>
    ff0c:	4603      	mov	r3, r0
    ff0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    ff10:	4a0d      	ldr	r2, [pc, #52]	; (ff48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ff12:	9b01      	ldr	r3, [sp, #4]
    ff14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff18:	1e5a      	subs	r2, r3, #1
    ff1a:	490b      	ldr	r1, [pc, #44]	; (ff48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ff1c:	9b01      	ldr	r3, [sp, #4]
    ff1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ff22:	4a0a      	ldr	r2, [pc, #40]	; (ff4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    ff24:	9b01      	ldr	r3, [sp, #4]
    ff26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff2a:	f003 0301 	and.w	r3, r3, #1
    ff2e:	2b00      	cmp	r3, #0
    ff30:	d106      	bne.n	ff40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    ff32:	4a05      	ldr	r2, [pc, #20]	; (ff48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ff34:	9b01      	ldr	r3, [sp, #4]
    ff36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff3a:	2b00      	cmp	r3, #0
    ff3c:	d100      	bne.n	ff40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff40:	bf00      	nop
    ff42:	b003      	add	sp, #12
    ff44:	f85d fb04 	ldr.w	pc, [sp], #4
    ff48:	1fff9380 	.word	0x1fff9380
    ff4c:	1fff937c 	.word	0x1fff937c

0000ff50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ff50:	b500      	push	{lr}
    ff52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff54:	f7f0 fe82 	bl	c5c <Sys_GetCoreID>
    ff58:	4603      	mov	r3, r0
    ff5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    ff5c:	4a10      	ldr	r2, [pc, #64]	; (ffa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ff5e:	9b01      	ldr	r3, [sp, #4]
    ff60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff64:	2b00      	cmp	r3, #0
    ff66:	d10d      	bne.n	ff84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff68:	f7f0 fce0 	bl	92c <Adc_schm_read_msr>
    ff6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff6e:	9b00      	ldr	r3, [sp, #0]
    ff70:	f003 0301 	and.w	r3, r3, #1
    ff74:	2b00      	cmp	r3, #0
    ff76:	d100      	bne.n	ff7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ff7a:	490a      	ldr	r1, [pc, #40]	; (ffa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    ff7c:	9b01      	ldr	r3, [sp, #4]
    ff7e:	9a00      	ldr	r2, [sp, #0]
    ff80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    ff84:	4a06      	ldr	r2, [pc, #24]	; (ffa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ff86:	9b01      	ldr	r3, [sp, #4]
    ff88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff8c:	1c5a      	adds	r2, r3, #1
    ff8e:	4904      	ldr	r1, [pc, #16]	; (ffa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ff90:	9b01      	ldr	r3, [sp, #4]
    ff92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff96:	bf00      	nop
    ff98:	b003      	add	sp, #12
    ff9a:	f85d fb04 	ldr.w	pc, [sp], #4
    ff9e:	bf00      	nop
    ffa0:	1fff9388 	.word	0x1fff9388
    ffa4:	1fff9384 	.word	0x1fff9384

0000ffa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ffa8:	b500      	push	{lr}
    ffaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffac:	f7f0 fe56 	bl	c5c <Sys_GetCoreID>
    ffb0:	4603      	mov	r3, r0
    ffb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    ffb4:	4a0d      	ldr	r2, [pc, #52]	; (ffec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ffb6:	9b01      	ldr	r3, [sp, #4]
    ffb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffbc:	1e5a      	subs	r2, r3, #1
    ffbe:	490b      	ldr	r1, [pc, #44]	; (ffec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ffc0:	9b01      	ldr	r3, [sp, #4]
    ffc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ffc6:	4a0a      	ldr	r2, [pc, #40]	; (fff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    ffc8:	9b01      	ldr	r3, [sp, #4]
    ffca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffce:	f003 0301 	and.w	r3, r3, #1
    ffd2:	2b00      	cmp	r3, #0
    ffd4:	d106      	bne.n	ffe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    ffd6:	4a05      	ldr	r2, [pc, #20]	; (ffec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ffd8:	9b01      	ldr	r3, [sp, #4]
    ffda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffde:	2b00      	cmp	r3, #0
    ffe0:	d100      	bne.n	ffe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ffe2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ffe4:	bf00      	nop
    ffe6:	b003      	add	sp, #12
    ffe8:	f85d fb04 	ldr.w	pc, [sp], #4
    ffec:	1fff9388 	.word	0x1fff9388
    fff0:	1fff9384 	.word	0x1fff9384

0000fff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    fff4:	b500      	push	{lr}
    fff6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fff8:	f7f0 fe30 	bl	c5c <Sys_GetCoreID>
    fffc:	4603      	mov	r3, r0
    fffe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
   10000:	4a10      	ldr	r2, [pc, #64]	; (10044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   10002:	9b01      	ldr	r3, [sp, #4]
   10004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10008:	2b00      	cmp	r3, #0
   1000a:	d10d      	bne.n	10028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1000c:	f7f0 fc8e 	bl	92c <Adc_schm_read_msr>
   10010:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10012:	9b00      	ldr	r3, [sp, #0]
   10014:	f003 0301 	and.w	r3, r3, #1
   10018:	2b00      	cmp	r3, #0
   1001a:	d100      	bne.n	1001e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1001c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1001e:	490a      	ldr	r1, [pc, #40]	; (10048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
   10020:	9b01      	ldr	r3, [sp, #4]
   10022:	9a00      	ldr	r2, [sp, #0]
   10024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
   10028:	4a06      	ldr	r2, [pc, #24]	; (10044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   1002a:	9b01      	ldr	r3, [sp, #4]
   1002c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10030:	1c5a      	adds	r2, r3, #1
   10032:	4904      	ldr	r1, [pc, #16]	; (10044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   10034:	9b01      	ldr	r3, [sp, #4]
   10036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1003a:	bf00      	nop
   1003c:	b003      	add	sp, #12
   1003e:	f85d fb04 	ldr.w	pc, [sp], #4
   10042:	bf00      	nop
   10044:	1fff9390 	.word	0x1fff9390
   10048:	1fff938c 	.word	0x1fff938c

0001004c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   1004c:	b500      	push	{lr}
   1004e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10050:	f7f0 fe04 	bl	c5c <Sys_GetCoreID>
   10054:	4603      	mov	r3, r0
   10056:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
   10058:	4a0d      	ldr	r2, [pc, #52]	; (10090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   1005a:	9b01      	ldr	r3, [sp, #4]
   1005c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10060:	1e5a      	subs	r2, r3, #1
   10062:	490b      	ldr	r1, [pc, #44]	; (10090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   10064:	9b01      	ldr	r3, [sp, #4]
   10066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   1006a:	4a0a      	ldr	r2, [pc, #40]	; (10094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
   1006c:	9b01      	ldr	r3, [sp, #4]
   1006e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10072:	f003 0301 	and.w	r3, r3, #1
   10076:	2b00      	cmp	r3, #0
   10078:	d106      	bne.n	10088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
   1007a:	4a05      	ldr	r2, [pc, #20]	; (10090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   1007c:	9b01      	ldr	r3, [sp, #4]
   1007e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10082:	2b00      	cmp	r3, #0
   10084:	d100      	bne.n	10088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10086:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10088:	bf00      	nop
   1008a:	b003      	add	sp, #12
   1008c:	f85d fb04 	ldr.w	pc, [sp], #4
   10090:	1fff9390 	.word	0x1fff9390
   10094:	1fff938c 	.word	0x1fff938c

00010098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   10098:	b500      	push	{lr}
   1009a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1009c:	f7f0 fdde 	bl	c5c <Sys_GetCoreID>
   100a0:	4603      	mov	r3, r0
   100a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
   100a4:	4a10      	ldr	r2, [pc, #64]	; (100e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   100a6:	9b01      	ldr	r3, [sp, #4]
   100a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100ac:	2b00      	cmp	r3, #0
   100ae:	d10d      	bne.n	100cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   100b0:	f7f0 fc3c 	bl	92c <Adc_schm_read_msr>
   100b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   100b6:	9b00      	ldr	r3, [sp, #0]
   100b8:	f003 0301 	and.w	r3, r3, #1
   100bc:	2b00      	cmp	r3, #0
   100be:	d100      	bne.n	100c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   100c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   100c2:	490a      	ldr	r1, [pc, #40]	; (100ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
   100c4:	9b01      	ldr	r3, [sp, #4]
   100c6:	9a00      	ldr	r2, [sp, #0]
   100c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
   100cc:	4a06      	ldr	r2, [pc, #24]	; (100e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   100ce:	9b01      	ldr	r3, [sp, #4]
   100d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100d4:	1c5a      	adds	r2, r3, #1
   100d6:	4904      	ldr	r1, [pc, #16]	; (100e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   100d8:	9b01      	ldr	r3, [sp, #4]
   100da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   100de:	bf00      	nop
   100e0:	b003      	add	sp, #12
   100e2:	f85d fb04 	ldr.w	pc, [sp], #4
   100e6:	bf00      	nop
   100e8:	1fff9398 	.word	0x1fff9398
   100ec:	1fff9394 	.word	0x1fff9394

000100f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   100f0:	b500      	push	{lr}
   100f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100f4:	f7f0 fdb2 	bl	c5c <Sys_GetCoreID>
   100f8:	4603      	mov	r3, r0
   100fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
   100fc:	4a0d      	ldr	r2, [pc, #52]	; (10134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   100fe:	9b01      	ldr	r3, [sp, #4]
   10100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10104:	1e5a      	subs	r2, r3, #1
   10106:	490b      	ldr	r1, [pc, #44]	; (10134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   10108:	9b01      	ldr	r3, [sp, #4]
   1010a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1010e:	4a0a      	ldr	r2, [pc, #40]	; (10138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
   10110:	9b01      	ldr	r3, [sp, #4]
   10112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10116:	f003 0301 	and.w	r3, r3, #1
   1011a:	2b00      	cmp	r3, #0
   1011c:	d106      	bne.n	1012c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
   1011e:	4a05      	ldr	r2, [pc, #20]	; (10134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   10120:	9b01      	ldr	r3, [sp, #4]
   10122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10126:	2b00      	cmp	r3, #0
   10128:	d100      	bne.n	1012c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1012a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1012c:	bf00      	nop
   1012e:	b003      	add	sp, #12
   10130:	f85d fb04 	ldr.w	pc, [sp], #4
   10134:	1fff9398 	.word	0x1fff9398
   10138:	1fff9394 	.word	0x1fff9394

0001013c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   1013c:	b500      	push	{lr}
   1013e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10140:	f7f0 fd8c 	bl	c5c <Sys_GetCoreID>
   10144:	4603      	mov	r3, r0
   10146:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
   10148:	4a10      	ldr	r2, [pc, #64]	; (1018c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   1014a:	9b01      	ldr	r3, [sp, #4]
   1014c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10150:	2b00      	cmp	r3, #0
   10152:	d10d      	bne.n	10170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10154:	f7f0 fbea 	bl	92c <Adc_schm_read_msr>
   10158:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1015a:	9b00      	ldr	r3, [sp, #0]
   1015c:	f003 0301 	and.w	r3, r3, #1
   10160:	2b00      	cmp	r3, #0
   10162:	d100      	bne.n	10166 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10164:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   10166:	490a      	ldr	r1, [pc, #40]	; (10190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
   10168:	9b01      	ldr	r3, [sp, #4]
   1016a:	9a00      	ldr	r2, [sp, #0]
   1016c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
   10170:	4a06      	ldr	r2, [pc, #24]	; (1018c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   10172:	9b01      	ldr	r3, [sp, #4]
   10174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10178:	1c5a      	adds	r2, r3, #1
   1017a:	4904      	ldr	r1, [pc, #16]	; (1018c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   1017c:	9b01      	ldr	r3, [sp, #4]
   1017e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10182:	bf00      	nop
   10184:	b003      	add	sp, #12
   10186:	f85d fb04 	ldr.w	pc, [sp], #4
   1018a:	bf00      	nop
   1018c:	1fff93a0 	.word	0x1fff93a0
   10190:	1fff939c 	.word	0x1fff939c

00010194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   10194:	b500      	push	{lr}
   10196:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10198:	f7f0 fd60 	bl	c5c <Sys_GetCoreID>
   1019c:	4603      	mov	r3, r0
   1019e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
   101a0:	4a0d      	ldr	r2, [pc, #52]	; (101d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   101a2:	9b01      	ldr	r3, [sp, #4]
   101a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101a8:	1e5a      	subs	r2, r3, #1
   101aa:	490b      	ldr	r1, [pc, #44]	; (101d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   101ac:	9b01      	ldr	r3, [sp, #4]
   101ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   101b2:	4a0a      	ldr	r2, [pc, #40]	; (101dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
   101b4:	9b01      	ldr	r3, [sp, #4]
   101b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101ba:	f003 0301 	and.w	r3, r3, #1
   101be:	2b00      	cmp	r3, #0
   101c0:	d106      	bne.n	101d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
   101c2:	4a05      	ldr	r2, [pc, #20]	; (101d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   101c4:	9b01      	ldr	r3, [sp, #4]
   101c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101ca:	2b00      	cmp	r3, #0
   101cc:	d100      	bne.n	101d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   101ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   101d0:	bf00      	nop
   101d2:	b003      	add	sp, #12
   101d4:	f85d fb04 	ldr.w	pc, [sp], #4
   101d8:	1fff93a0 	.word	0x1fff93a0
   101dc:	1fff939c 	.word	0x1fff939c

000101e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   101e0:	b500      	push	{lr}
   101e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101e4:	f7f0 fd3a 	bl	c5c <Sys_GetCoreID>
   101e8:	4603      	mov	r3, r0
   101ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
   101ec:	4a10      	ldr	r2, [pc, #64]	; (10230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   101ee:	9b01      	ldr	r3, [sp, #4]
   101f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101f4:	2b00      	cmp	r3, #0
   101f6:	d10d      	bne.n	10214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   101f8:	f7f0 fb98 	bl	92c <Adc_schm_read_msr>
   101fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   101fe:	9b00      	ldr	r3, [sp, #0]
   10200:	f003 0301 	and.w	r3, r3, #1
   10204:	2b00      	cmp	r3, #0
   10206:	d100      	bne.n	1020a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10208:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   1020a:	490a      	ldr	r1, [pc, #40]	; (10234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
   1020c:	9b01      	ldr	r3, [sp, #4]
   1020e:	9a00      	ldr	r2, [sp, #0]
   10210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
   10214:	4a06      	ldr	r2, [pc, #24]	; (10230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   10216:	9b01      	ldr	r3, [sp, #4]
   10218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1021c:	1c5a      	adds	r2, r3, #1
   1021e:	4904      	ldr	r1, [pc, #16]	; (10230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   10220:	9b01      	ldr	r3, [sp, #4]
   10222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10226:	bf00      	nop
   10228:	b003      	add	sp, #12
   1022a:	f85d fb04 	ldr.w	pc, [sp], #4
   1022e:	bf00      	nop
   10230:	1fff93a8 	.word	0x1fff93a8
   10234:	1fff93a4 	.word	0x1fff93a4

00010238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   10238:	b500      	push	{lr}
   1023a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1023c:	f7f0 fd0e 	bl	c5c <Sys_GetCoreID>
   10240:	4603      	mov	r3, r0
   10242:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
   10244:	4a0d      	ldr	r2, [pc, #52]	; (1027c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   10246:	9b01      	ldr	r3, [sp, #4]
   10248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1024c:	1e5a      	subs	r2, r3, #1
   1024e:	490b      	ldr	r1, [pc, #44]	; (1027c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   10250:	9b01      	ldr	r3, [sp, #4]
   10252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   10256:	4a0a      	ldr	r2, [pc, #40]	; (10280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
   10258:	9b01      	ldr	r3, [sp, #4]
   1025a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1025e:	f003 0301 	and.w	r3, r3, #1
   10262:	2b00      	cmp	r3, #0
   10264:	d106      	bne.n	10274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
   10266:	4a05      	ldr	r2, [pc, #20]	; (1027c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   10268:	9b01      	ldr	r3, [sp, #4]
   1026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1026e:	2b00      	cmp	r3, #0
   10270:	d100      	bne.n	10274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10272:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10274:	bf00      	nop
   10276:	b003      	add	sp, #12
   10278:	f85d fb04 	ldr.w	pc, [sp], #4
   1027c:	1fff93a8 	.word	0x1fff93a8
   10280:	1fff93a4 	.word	0x1fff93a4

00010284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   10284:	b500      	push	{lr}
   10286:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10288:	f7f0 fce8 	bl	c5c <Sys_GetCoreID>
   1028c:	4603      	mov	r3, r0
   1028e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
   10290:	4a10      	ldr	r2, [pc, #64]	; (102d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   10292:	9b01      	ldr	r3, [sp, #4]
   10294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10298:	2b00      	cmp	r3, #0
   1029a:	d10d      	bne.n	102b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1029c:	f7f0 fb46 	bl	92c <Adc_schm_read_msr>
   102a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   102a2:	9b00      	ldr	r3, [sp, #0]
   102a4:	f003 0301 	and.w	r3, r3, #1
   102a8:	2b00      	cmp	r3, #0
   102aa:	d100      	bne.n	102ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   102ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
   102ae:	490a      	ldr	r1, [pc, #40]	; (102d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
   102b0:	9b01      	ldr	r3, [sp, #4]
   102b2:	9a00      	ldr	r2, [sp, #0]
   102b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
   102b8:	4a06      	ldr	r2, [pc, #24]	; (102d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   102ba:	9b01      	ldr	r3, [sp, #4]
   102bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102c0:	1c5a      	adds	r2, r3, #1
   102c2:	4904      	ldr	r1, [pc, #16]	; (102d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   102c4:	9b01      	ldr	r3, [sp, #4]
   102c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   102ca:	bf00      	nop
   102cc:	b003      	add	sp, #12
   102ce:	f85d fb04 	ldr.w	pc, [sp], #4
   102d2:	bf00      	nop
   102d4:	1fff93b0 	.word	0x1fff93b0
   102d8:	1fff93ac 	.word	0x1fff93ac

000102dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   102dc:	b500      	push	{lr}
   102de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102e0:	f7f0 fcbc 	bl	c5c <Sys_GetCoreID>
   102e4:	4603      	mov	r3, r0
   102e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
   102e8:	4a0d      	ldr	r2, [pc, #52]	; (10320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   102ea:	9b01      	ldr	r3, [sp, #4]
   102ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102f0:	1e5a      	subs	r2, r3, #1
   102f2:	490b      	ldr	r1, [pc, #44]	; (10320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   102f4:	9b01      	ldr	r3, [sp, #4]
   102f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
   102fa:	4a0a      	ldr	r2, [pc, #40]	; (10324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
   102fc:	9b01      	ldr	r3, [sp, #4]
   102fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10302:	f003 0301 	and.w	r3, r3, #1
   10306:	2b00      	cmp	r3, #0
   10308:	d106      	bne.n	10318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
   1030a:	4a05      	ldr	r2, [pc, #20]	; (10320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   1030c:	9b01      	ldr	r3, [sp, #4]
   1030e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10312:	2b00      	cmp	r3, #0
   10314:	d100      	bne.n	10318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10316:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10318:	bf00      	nop
   1031a:	b003      	add	sp, #12
   1031c:	f85d fb04 	ldr.w	pc, [sp], #4
   10320:	1fff93b0 	.word	0x1fff93b0
   10324:	1fff93ac 	.word	0x1fff93ac

00010328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   10328:	b500      	push	{lr}
   1032a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1032c:	f7f0 fc96 	bl	c5c <Sys_GetCoreID>
   10330:	4603      	mov	r3, r0
   10332:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
   10334:	4a10      	ldr	r2, [pc, #64]	; (10378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   10336:	9b01      	ldr	r3, [sp, #4]
   10338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1033c:	2b00      	cmp	r3, #0
   1033e:	d10d      	bne.n	1035c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10340:	f7f0 faf4 	bl	92c <Adc_schm_read_msr>
   10344:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10346:	9b00      	ldr	r3, [sp, #0]
   10348:	f003 0301 	and.w	r3, r3, #1
   1034c:	2b00      	cmp	r3, #0
   1034e:	d100      	bne.n	10352 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10350:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
   10352:	490a      	ldr	r1, [pc, #40]	; (1037c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
   10354:	9b01      	ldr	r3, [sp, #4]
   10356:	9a00      	ldr	r2, [sp, #0]
   10358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
   1035c:	4a06      	ldr	r2, [pc, #24]	; (10378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   1035e:	9b01      	ldr	r3, [sp, #4]
   10360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10364:	1c5a      	adds	r2, r3, #1
   10366:	4904      	ldr	r1, [pc, #16]	; (10378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   10368:	9b01      	ldr	r3, [sp, #4]
   1036a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1036e:	bf00      	nop
   10370:	b003      	add	sp, #12
   10372:	f85d fb04 	ldr.w	pc, [sp], #4
   10376:	bf00      	nop
   10378:	1fff93b8 	.word	0x1fff93b8
   1037c:	1fff93b4 	.word	0x1fff93b4

00010380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   10380:	b500      	push	{lr}
   10382:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10384:	f7f0 fc6a 	bl	c5c <Sys_GetCoreID>
   10388:	4603      	mov	r3, r0
   1038a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
   1038c:	4a0d      	ldr	r2, [pc, #52]	; (103c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   1038e:	9b01      	ldr	r3, [sp, #4]
   10390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10394:	1e5a      	subs	r2, r3, #1
   10396:	490b      	ldr	r1, [pc, #44]	; (103c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   10398:	9b01      	ldr	r3, [sp, #4]
   1039a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
   1039e:	4a0a      	ldr	r2, [pc, #40]	; (103c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
   103a0:	9b01      	ldr	r3, [sp, #4]
   103a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103a6:	f003 0301 	and.w	r3, r3, #1
   103aa:	2b00      	cmp	r3, #0
   103ac:	d106      	bne.n	103bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
   103ae:	4a05      	ldr	r2, [pc, #20]	; (103c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   103b0:	9b01      	ldr	r3, [sp, #4]
   103b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103b6:	2b00      	cmp	r3, #0
   103b8:	d100      	bne.n	103bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   103ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   103bc:	bf00      	nop
   103be:	b003      	add	sp, #12
   103c0:	f85d fb04 	ldr.w	pc, [sp], #4
   103c4:	1fff93b8 	.word	0x1fff93b8
   103c8:	1fff93b4 	.word	0x1fff93b4

000103cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   103cc:	b500      	push	{lr}
   103ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103d0:	f7f0 fc44 	bl	c5c <Sys_GetCoreID>
   103d4:	4603      	mov	r3, r0
   103d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
   103d8:	4a10      	ldr	r2, [pc, #64]	; (1041c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   103da:	9b01      	ldr	r3, [sp, #4]
   103dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103e0:	2b00      	cmp	r3, #0
   103e2:	d10d      	bne.n	10400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   103e4:	f7f0 faa2 	bl	92c <Adc_schm_read_msr>
   103e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   103ea:	9b00      	ldr	r3, [sp, #0]
   103ec:	f003 0301 	and.w	r3, r3, #1
   103f0:	2b00      	cmp	r3, #0
   103f2:	d100      	bne.n	103f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   103f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
   103f6:	490a      	ldr	r1, [pc, #40]	; (10420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
   103f8:	9b01      	ldr	r3, [sp, #4]
   103fa:	9a00      	ldr	r2, [sp, #0]
   103fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
   10400:	4a06      	ldr	r2, [pc, #24]	; (1041c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   10402:	9b01      	ldr	r3, [sp, #4]
   10404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10408:	1c5a      	adds	r2, r3, #1
   1040a:	4904      	ldr	r1, [pc, #16]	; (1041c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   1040c:	9b01      	ldr	r3, [sp, #4]
   1040e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10412:	bf00      	nop
   10414:	b003      	add	sp, #12
   10416:	f85d fb04 	ldr.w	pc, [sp], #4
   1041a:	bf00      	nop
   1041c:	1fff93c0 	.word	0x1fff93c0
   10420:	1fff93bc 	.word	0x1fff93bc

00010424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   10424:	b500      	push	{lr}
   10426:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10428:	f7f0 fc18 	bl	c5c <Sys_GetCoreID>
   1042c:	4603      	mov	r3, r0
   1042e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
   10430:	4a0d      	ldr	r2, [pc, #52]	; (10468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   10432:	9b01      	ldr	r3, [sp, #4]
   10434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10438:	1e5a      	subs	r2, r3, #1
   1043a:	490b      	ldr	r1, [pc, #44]	; (10468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   1043c:	9b01      	ldr	r3, [sp, #4]
   1043e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
   10442:	4a0a      	ldr	r2, [pc, #40]	; (1046c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
   10444:	9b01      	ldr	r3, [sp, #4]
   10446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1044a:	f003 0301 	and.w	r3, r3, #1
   1044e:	2b00      	cmp	r3, #0
   10450:	d106      	bne.n	10460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
   10452:	4a05      	ldr	r2, [pc, #20]	; (10468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   10454:	9b01      	ldr	r3, [sp, #4]
   10456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1045a:	2b00      	cmp	r3, #0
   1045c:	d100      	bne.n	10460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1045e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10460:	bf00      	nop
   10462:	b003      	add	sp, #12
   10464:	f85d fb04 	ldr.w	pc, [sp], #4
   10468:	1fff93c0 	.word	0x1fff93c0
   1046c:	1fff93bc 	.word	0x1fff93bc

00010470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   10470:	b500      	push	{lr}
   10472:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10474:	f7f0 fbf2 	bl	c5c <Sys_GetCoreID>
   10478:	4603      	mov	r3, r0
   1047a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
   1047c:	4a10      	ldr	r2, [pc, #64]	; (104c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   1047e:	9b01      	ldr	r3, [sp, #4]
   10480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10484:	2b00      	cmp	r3, #0
   10486:	d10d      	bne.n	104a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10488:	f7f0 fa50 	bl	92c <Adc_schm_read_msr>
   1048c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1048e:	9b00      	ldr	r3, [sp, #0]
   10490:	f003 0301 	and.w	r3, r3, #1
   10494:	2b00      	cmp	r3, #0
   10496:	d100      	bne.n	1049a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10498:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
   1049a:	490a      	ldr	r1, [pc, #40]	; (104c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
   1049c:	9b01      	ldr	r3, [sp, #4]
   1049e:	9a00      	ldr	r2, [sp, #0]
   104a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
   104a4:	4a06      	ldr	r2, [pc, #24]	; (104c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   104a6:	9b01      	ldr	r3, [sp, #4]
   104a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104ac:	1c5a      	adds	r2, r3, #1
   104ae:	4904      	ldr	r1, [pc, #16]	; (104c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   104b0:	9b01      	ldr	r3, [sp, #4]
   104b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   104b6:	bf00      	nop
   104b8:	b003      	add	sp, #12
   104ba:	f85d fb04 	ldr.w	pc, [sp], #4
   104be:	bf00      	nop
   104c0:	1fff93c8 	.word	0x1fff93c8
   104c4:	1fff93c4 	.word	0x1fff93c4

000104c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   104c8:	b500      	push	{lr}
   104ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104cc:	f7f0 fbc6 	bl	c5c <Sys_GetCoreID>
   104d0:	4603      	mov	r3, r0
   104d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
   104d4:	4a0d      	ldr	r2, [pc, #52]	; (1050c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   104d6:	9b01      	ldr	r3, [sp, #4]
   104d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104dc:	1e5a      	subs	r2, r3, #1
   104de:	490b      	ldr	r1, [pc, #44]	; (1050c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   104e0:	9b01      	ldr	r3, [sp, #4]
   104e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
   104e6:	4a0a      	ldr	r2, [pc, #40]	; (10510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
   104e8:	9b01      	ldr	r3, [sp, #4]
   104ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104ee:	f003 0301 	and.w	r3, r3, #1
   104f2:	2b00      	cmp	r3, #0
   104f4:	d106      	bne.n	10504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
   104f6:	4a05      	ldr	r2, [pc, #20]	; (1050c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   104f8:	9b01      	ldr	r3, [sp, #4]
   104fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104fe:	2b00      	cmp	r3, #0
   10500:	d100      	bne.n	10504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10502:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10504:	bf00      	nop
   10506:	b003      	add	sp, #12
   10508:	f85d fb04 	ldr.w	pc, [sp], #4
   1050c:	1fff93c8 	.word	0x1fff93c8
   10510:	1fff93c4 	.word	0x1fff93c4

00010514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   10514:	b500      	push	{lr}
   10516:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10518:	f7f0 fba0 	bl	c5c <Sys_GetCoreID>
   1051c:	4603      	mov	r3, r0
   1051e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
   10520:	4a10      	ldr	r2, [pc, #64]	; (10564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   10522:	9b01      	ldr	r3, [sp, #4]
   10524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10528:	2b00      	cmp	r3, #0
   1052a:	d10d      	bne.n	10548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1052c:	f7f0 f9fe 	bl	92c <Adc_schm_read_msr>
   10530:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10532:	9b00      	ldr	r3, [sp, #0]
   10534:	f003 0301 	and.w	r3, r3, #1
   10538:	2b00      	cmp	r3, #0
   1053a:	d100      	bne.n	1053e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1053c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   1053e:	490a      	ldr	r1, [pc, #40]	; (10568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
   10540:	9b01      	ldr	r3, [sp, #4]
   10542:	9a00      	ldr	r2, [sp, #0]
   10544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
   10548:	4a06      	ldr	r2, [pc, #24]	; (10564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   1054a:	9b01      	ldr	r3, [sp, #4]
   1054c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10550:	1c5a      	adds	r2, r3, #1
   10552:	4904      	ldr	r1, [pc, #16]	; (10564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   10554:	9b01      	ldr	r3, [sp, #4]
   10556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1055a:	bf00      	nop
   1055c:	b003      	add	sp, #12
   1055e:	f85d fb04 	ldr.w	pc, [sp], #4
   10562:	bf00      	nop
   10564:	1fff93d0 	.word	0x1fff93d0
   10568:	1fff93cc 	.word	0x1fff93cc

0001056c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   1056c:	b500      	push	{lr}
   1056e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10570:	f7f0 fb74 	bl	c5c <Sys_GetCoreID>
   10574:	4603      	mov	r3, r0
   10576:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
   10578:	4a0d      	ldr	r2, [pc, #52]	; (105b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   1057a:	9b01      	ldr	r3, [sp, #4]
   1057c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10580:	1e5a      	subs	r2, r3, #1
   10582:	490b      	ldr	r1, [pc, #44]	; (105b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   10584:	9b01      	ldr	r3, [sp, #4]
   10586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   1058a:	4a0a      	ldr	r2, [pc, #40]	; (105b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
   1058c:	9b01      	ldr	r3, [sp, #4]
   1058e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10592:	f003 0301 	and.w	r3, r3, #1
   10596:	2b00      	cmp	r3, #0
   10598:	d106      	bne.n	105a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
   1059a:	4a05      	ldr	r2, [pc, #20]	; (105b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   1059c:	9b01      	ldr	r3, [sp, #4]
   1059e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105a2:	2b00      	cmp	r3, #0
   105a4:	d100      	bne.n	105a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   105a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   105a8:	bf00      	nop
   105aa:	b003      	add	sp, #12
   105ac:	f85d fb04 	ldr.w	pc, [sp], #4
   105b0:	1fff93d0 	.word	0x1fff93d0
   105b4:	1fff93cc 	.word	0x1fff93cc

000105b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   105b8:	b500      	push	{lr}
   105ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105bc:	f7f0 fb4e 	bl	c5c <Sys_GetCoreID>
   105c0:	4603      	mov	r3, r0
   105c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
   105c4:	4a10      	ldr	r2, [pc, #64]	; (10608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   105c6:	9b01      	ldr	r3, [sp, #4]
   105c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105cc:	2b00      	cmp	r3, #0
   105ce:	d10d      	bne.n	105ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   105d0:	f7f0 f9ac 	bl	92c <Adc_schm_read_msr>
   105d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   105d6:	9b00      	ldr	r3, [sp, #0]
   105d8:	f003 0301 	and.w	r3, r3, #1
   105dc:	2b00      	cmp	r3, #0
   105de:	d100      	bne.n	105e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   105e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   105e2:	490a      	ldr	r1, [pc, #40]	; (1060c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
   105e4:	9b01      	ldr	r3, [sp, #4]
   105e6:	9a00      	ldr	r2, [sp, #0]
   105e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
   105ec:	4a06      	ldr	r2, [pc, #24]	; (10608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   105ee:	9b01      	ldr	r3, [sp, #4]
   105f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105f4:	1c5a      	adds	r2, r3, #1
   105f6:	4904      	ldr	r1, [pc, #16]	; (10608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   105f8:	9b01      	ldr	r3, [sp, #4]
   105fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   105fe:	bf00      	nop
   10600:	b003      	add	sp, #12
   10602:	f85d fb04 	ldr.w	pc, [sp], #4
   10606:	bf00      	nop
   10608:	1fff93d8 	.word	0x1fff93d8
   1060c:	1fff93d4 	.word	0x1fff93d4

00010610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   10610:	b500      	push	{lr}
   10612:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10614:	f7f0 fb22 	bl	c5c <Sys_GetCoreID>
   10618:	4603      	mov	r3, r0
   1061a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
   1061c:	4a0d      	ldr	r2, [pc, #52]	; (10654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   1061e:	9b01      	ldr	r3, [sp, #4]
   10620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10624:	1e5a      	subs	r2, r3, #1
   10626:	490b      	ldr	r1, [pc, #44]	; (10654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   10628:	9b01      	ldr	r3, [sp, #4]
   1062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   1062e:	4a0a      	ldr	r2, [pc, #40]	; (10658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
   10630:	9b01      	ldr	r3, [sp, #4]
   10632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10636:	f003 0301 	and.w	r3, r3, #1
   1063a:	2b00      	cmp	r3, #0
   1063c:	d106      	bne.n	1064c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
   1063e:	4a05      	ldr	r2, [pc, #20]	; (10654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   10640:	9b01      	ldr	r3, [sp, #4]
   10642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10646:	2b00      	cmp	r3, #0
   10648:	d100      	bne.n	1064c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1064a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1064c:	bf00      	nop
   1064e:	b003      	add	sp, #12
   10650:	f85d fb04 	ldr.w	pc, [sp], #4
   10654:	1fff93d8 	.word	0x1fff93d8
   10658:	1fff93d4 	.word	0x1fff93d4

0001065c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   1065c:	b500      	push	{lr}
   1065e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10660:	f7f0 fafc 	bl	c5c <Sys_GetCoreID>
   10664:	4603      	mov	r3, r0
   10666:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
   10668:	4a10      	ldr	r2, [pc, #64]	; (106ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   1066a:	9b01      	ldr	r3, [sp, #4]
   1066c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10670:	2b00      	cmp	r3, #0
   10672:	d10d      	bne.n	10690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10674:	f7f0 f95a 	bl	92c <Adc_schm_read_msr>
   10678:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1067a:	9b00      	ldr	r3, [sp, #0]
   1067c:	f003 0301 	and.w	r3, r3, #1
   10680:	2b00      	cmp	r3, #0
   10682:	d100      	bne.n	10686 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10684:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   10686:	490a      	ldr	r1, [pc, #40]	; (106b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
   10688:	9b01      	ldr	r3, [sp, #4]
   1068a:	9a00      	ldr	r2, [sp, #0]
   1068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
   10690:	4a06      	ldr	r2, [pc, #24]	; (106ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   10692:	9b01      	ldr	r3, [sp, #4]
   10694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10698:	1c5a      	adds	r2, r3, #1
   1069a:	4904      	ldr	r1, [pc, #16]	; (106ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   1069c:	9b01      	ldr	r3, [sp, #4]
   1069e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   106a2:	bf00      	nop
   106a4:	b003      	add	sp, #12
   106a6:	f85d fb04 	ldr.w	pc, [sp], #4
   106aa:	bf00      	nop
   106ac:	1fff93e0 	.word	0x1fff93e0
   106b0:	1fff93dc 	.word	0x1fff93dc

000106b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   106b4:	b500      	push	{lr}
   106b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106b8:	f7f0 fad0 	bl	c5c <Sys_GetCoreID>
   106bc:	4603      	mov	r3, r0
   106be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
   106c0:	4a0d      	ldr	r2, [pc, #52]	; (106f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   106c2:	9b01      	ldr	r3, [sp, #4]
   106c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106c8:	1e5a      	subs	r2, r3, #1
   106ca:	490b      	ldr	r1, [pc, #44]	; (106f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   106cc:	9b01      	ldr	r3, [sp, #4]
   106ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   106d2:	4a0a      	ldr	r2, [pc, #40]	; (106fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
   106d4:	9b01      	ldr	r3, [sp, #4]
   106d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106da:	f003 0301 	and.w	r3, r3, #1
   106de:	2b00      	cmp	r3, #0
   106e0:	d106      	bne.n	106f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
   106e2:	4a05      	ldr	r2, [pc, #20]	; (106f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   106e4:	9b01      	ldr	r3, [sp, #4]
   106e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106ea:	2b00      	cmp	r3, #0
   106ec:	d100      	bne.n	106f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   106ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   106f0:	bf00      	nop
   106f2:	b003      	add	sp, #12
   106f4:	f85d fb04 	ldr.w	pc, [sp], #4
   106f8:	1fff93e0 	.word	0x1fff93e0
   106fc:	1fff93dc 	.word	0x1fff93dc

00010700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   10700:	b500      	push	{lr}
   10702:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10704:	f7f0 faaa 	bl	c5c <Sys_GetCoreID>
   10708:	4603      	mov	r3, r0
   1070a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
   1070c:	4a10      	ldr	r2, [pc, #64]	; (10750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   1070e:	9b01      	ldr	r3, [sp, #4]
   10710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10714:	2b00      	cmp	r3, #0
   10716:	d10d      	bne.n	10734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10718:	f7f0 f908 	bl	92c <Adc_schm_read_msr>
   1071c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1071e:	9b00      	ldr	r3, [sp, #0]
   10720:	f003 0301 	and.w	r3, r3, #1
   10724:	2b00      	cmp	r3, #0
   10726:	d100      	bne.n	1072a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10728:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   1072a:	490a      	ldr	r1, [pc, #40]	; (10754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
   1072c:	9b01      	ldr	r3, [sp, #4]
   1072e:	9a00      	ldr	r2, [sp, #0]
   10730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
   10734:	4a06      	ldr	r2, [pc, #24]	; (10750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   10736:	9b01      	ldr	r3, [sp, #4]
   10738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1073c:	1c5a      	adds	r2, r3, #1
   1073e:	4904      	ldr	r1, [pc, #16]	; (10750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   10740:	9b01      	ldr	r3, [sp, #4]
   10742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10746:	bf00      	nop
   10748:	b003      	add	sp, #12
   1074a:	f85d fb04 	ldr.w	pc, [sp], #4
   1074e:	bf00      	nop
   10750:	1fff93e8 	.word	0x1fff93e8
   10754:	1fff93e4 	.word	0x1fff93e4

00010758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   10758:	b500      	push	{lr}
   1075a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1075c:	f7f0 fa7e 	bl	c5c <Sys_GetCoreID>
   10760:	4603      	mov	r3, r0
   10762:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
   10764:	4a0d      	ldr	r2, [pc, #52]	; (1079c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   10766:	9b01      	ldr	r3, [sp, #4]
   10768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1076c:	1e5a      	subs	r2, r3, #1
   1076e:	490b      	ldr	r1, [pc, #44]	; (1079c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   10770:	9b01      	ldr	r3, [sp, #4]
   10772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   10776:	4a0a      	ldr	r2, [pc, #40]	; (107a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
   10778:	9b01      	ldr	r3, [sp, #4]
   1077a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1077e:	f003 0301 	and.w	r3, r3, #1
   10782:	2b00      	cmp	r3, #0
   10784:	d106      	bne.n	10794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
   10786:	4a05      	ldr	r2, [pc, #20]	; (1079c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   10788:	9b01      	ldr	r3, [sp, #4]
   1078a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1078e:	2b00      	cmp	r3, #0
   10790:	d100      	bne.n	10794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10792:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10794:	bf00      	nop
   10796:	b003      	add	sp, #12
   10798:	f85d fb04 	ldr.w	pc, [sp], #4
   1079c:	1fff93e8 	.word	0x1fff93e8
   107a0:	1fff93e4 	.word	0x1fff93e4

000107a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   107a4:	b500      	push	{lr}
   107a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107a8:	f7f0 fa58 	bl	c5c <Sys_GetCoreID>
   107ac:	4603      	mov	r3, r0
   107ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
   107b0:	4a10      	ldr	r2, [pc, #64]	; (107f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   107b2:	9b01      	ldr	r3, [sp, #4]
   107b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107b8:	2b00      	cmp	r3, #0
   107ba:	d10d      	bne.n	107d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   107bc:	f7f0 f8b6 	bl	92c <Adc_schm_read_msr>
   107c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   107c2:	9b00      	ldr	r3, [sp, #0]
   107c4:	f003 0301 	and.w	r3, r3, #1
   107c8:	2b00      	cmp	r3, #0
   107ca:	d100      	bne.n	107ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   107cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   107ce:	490a      	ldr	r1, [pc, #40]	; (107f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
   107d0:	9b01      	ldr	r3, [sp, #4]
   107d2:	9a00      	ldr	r2, [sp, #0]
   107d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
   107d8:	4a06      	ldr	r2, [pc, #24]	; (107f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   107da:	9b01      	ldr	r3, [sp, #4]
   107dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107e0:	1c5a      	adds	r2, r3, #1
   107e2:	4904      	ldr	r1, [pc, #16]	; (107f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   107e4:	9b01      	ldr	r3, [sp, #4]
   107e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   107ea:	bf00      	nop
   107ec:	b003      	add	sp, #12
   107ee:	f85d fb04 	ldr.w	pc, [sp], #4
   107f2:	bf00      	nop
   107f4:	1fff93f0 	.word	0x1fff93f0
   107f8:	1fff93ec 	.word	0x1fff93ec

000107fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   107fc:	b500      	push	{lr}
   107fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10800:	f7f0 fa2c 	bl	c5c <Sys_GetCoreID>
   10804:	4603      	mov	r3, r0
   10806:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
   10808:	4a0d      	ldr	r2, [pc, #52]	; (10840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   1080a:	9b01      	ldr	r3, [sp, #4]
   1080c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10810:	1e5a      	subs	r2, r3, #1
   10812:	490b      	ldr	r1, [pc, #44]	; (10840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   10814:	9b01      	ldr	r3, [sp, #4]
   10816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   1081a:	4a0a      	ldr	r2, [pc, #40]	; (10844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
   1081c:	9b01      	ldr	r3, [sp, #4]
   1081e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10822:	f003 0301 	and.w	r3, r3, #1
   10826:	2b00      	cmp	r3, #0
   10828:	d106      	bne.n	10838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
   1082a:	4a05      	ldr	r2, [pc, #20]	; (10840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   1082c:	9b01      	ldr	r3, [sp, #4]
   1082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10832:	2b00      	cmp	r3, #0
   10834:	d100      	bne.n	10838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10836:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10838:	bf00      	nop
   1083a:	b003      	add	sp, #12
   1083c:	f85d fb04 	ldr.w	pc, [sp], #4
   10840:	1fff93f0 	.word	0x1fff93f0
   10844:	1fff93ec 	.word	0x1fff93ec

00010848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   10848:	b500      	push	{lr}
   1084a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1084c:	f7f0 fa06 	bl	c5c <Sys_GetCoreID>
   10850:	4603      	mov	r3, r0
   10852:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
   10854:	4a10      	ldr	r2, [pc, #64]	; (10898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   10856:	9b01      	ldr	r3, [sp, #4]
   10858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1085c:	2b00      	cmp	r3, #0
   1085e:	d10d      	bne.n	1087c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10860:	f7f0 f864 	bl	92c <Adc_schm_read_msr>
   10864:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10866:	9b00      	ldr	r3, [sp, #0]
   10868:	f003 0301 	and.w	r3, r3, #1
   1086c:	2b00      	cmp	r3, #0
   1086e:	d100      	bne.n	10872 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10870:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   10872:	490a      	ldr	r1, [pc, #40]	; (1089c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
   10874:	9b01      	ldr	r3, [sp, #4]
   10876:	9a00      	ldr	r2, [sp, #0]
   10878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
   1087c:	4a06      	ldr	r2, [pc, #24]	; (10898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   1087e:	9b01      	ldr	r3, [sp, #4]
   10880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10884:	1c5a      	adds	r2, r3, #1
   10886:	4904      	ldr	r1, [pc, #16]	; (10898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   10888:	9b01      	ldr	r3, [sp, #4]
   1088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1088e:	bf00      	nop
   10890:	b003      	add	sp, #12
   10892:	f85d fb04 	ldr.w	pc, [sp], #4
   10896:	bf00      	nop
   10898:	1fff93f8 	.word	0x1fff93f8
   1089c:	1fff93f4 	.word	0x1fff93f4

000108a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   108a0:	b500      	push	{lr}
   108a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108a4:	f7f0 f9da 	bl	c5c <Sys_GetCoreID>
   108a8:	4603      	mov	r3, r0
   108aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
   108ac:	4a0d      	ldr	r2, [pc, #52]	; (108e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   108ae:	9b01      	ldr	r3, [sp, #4]
   108b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108b4:	1e5a      	subs	r2, r3, #1
   108b6:	490b      	ldr	r1, [pc, #44]	; (108e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   108b8:	9b01      	ldr	r3, [sp, #4]
   108ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   108be:	4a0a      	ldr	r2, [pc, #40]	; (108e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
   108c0:	9b01      	ldr	r3, [sp, #4]
   108c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108c6:	f003 0301 	and.w	r3, r3, #1
   108ca:	2b00      	cmp	r3, #0
   108cc:	d106      	bne.n	108dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
   108ce:	4a05      	ldr	r2, [pc, #20]	; (108e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   108d0:	9b01      	ldr	r3, [sp, #4]
   108d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108d6:	2b00      	cmp	r3, #0
   108d8:	d100      	bne.n	108dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   108da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   108dc:	bf00      	nop
   108de:	b003      	add	sp, #12
   108e0:	f85d fb04 	ldr.w	pc, [sp], #4
   108e4:	1fff93f8 	.word	0x1fff93f8
   108e8:	1fff93f4 	.word	0x1fff93f4

000108ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   108ec:	b500      	push	{lr}
   108ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108f0:	f7f0 f9b4 	bl	c5c <Sys_GetCoreID>
   108f4:	4603      	mov	r3, r0
   108f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
   108f8:	4a10      	ldr	r2, [pc, #64]	; (1093c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   108fa:	9b01      	ldr	r3, [sp, #4]
   108fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10900:	2b00      	cmp	r3, #0
   10902:	d10d      	bne.n	10920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10904:	f7f0 f812 	bl	92c <Adc_schm_read_msr>
   10908:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1090a:	9b00      	ldr	r3, [sp, #0]
   1090c:	f003 0301 	and.w	r3, r3, #1
   10910:	2b00      	cmp	r3, #0
   10912:	d100      	bne.n	10916 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10914:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   10916:	490a      	ldr	r1, [pc, #40]	; (10940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
   10918:	9b01      	ldr	r3, [sp, #4]
   1091a:	9a00      	ldr	r2, [sp, #0]
   1091c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
   10920:	4a06      	ldr	r2, [pc, #24]	; (1093c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   10922:	9b01      	ldr	r3, [sp, #4]
   10924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10928:	1c5a      	adds	r2, r3, #1
   1092a:	4904      	ldr	r1, [pc, #16]	; (1093c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   1092c:	9b01      	ldr	r3, [sp, #4]
   1092e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10932:	bf00      	nop
   10934:	b003      	add	sp, #12
   10936:	f85d fb04 	ldr.w	pc, [sp], #4
   1093a:	bf00      	nop
   1093c:	1fff9400 	.word	0x1fff9400
   10940:	1fff93fc 	.word	0x1fff93fc

00010944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   10944:	b500      	push	{lr}
   10946:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10948:	f7f0 f988 	bl	c5c <Sys_GetCoreID>
   1094c:	4603      	mov	r3, r0
   1094e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
   10950:	4a0d      	ldr	r2, [pc, #52]	; (10988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   10952:	9b01      	ldr	r3, [sp, #4]
   10954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10958:	1e5a      	subs	r2, r3, #1
   1095a:	490b      	ldr	r1, [pc, #44]	; (10988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   1095c:	9b01      	ldr	r3, [sp, #4]
   1095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   10962:	4a0a      	ldr	r2, [pc, #40]	; (1098c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
   10964:	9b01      	ldr	r3, [sp, #4]
   10966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1096a:	f003 0301 	and.w	r3, r3, #1
   1096e:	2b00      	cmp	r3, #0
   10970:	d106      	bne.n	10980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
   10972:	4a05      	ldr	r2, [pc, #20]	; (10988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   10974:	9b01      	ldr	r3, [sp, #4]
   10976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1097a:	2b00      	cmp	r3, #0
   1097c:	d100      	bne.n	10980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1097e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10980:	bf00      	nop
   10982:	b003      	add	sp, #12
   10984:	f85d fb04 	ldr.w	pc, [sp], #4
   10988:	1fff9400 	.word	0x1fff9400
   1098c:	1fff93fc 	.word	0x1fff93fc

00010990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   10990:	b500      	push	{lr}
   10992:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10994:	f7f0 f962 	bl	c5c <Sys_GetCoreID>
   10998:	4603      	mov	r3, r0
   1099a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
   1099c:	4a10      	ldr	r2, [pc, #64]	; (109e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   1099e:	9b01      	ldr	r3, [sp, #4]
   109a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109a4:	2b00      	cmp	r3, #0
   109a6:	d10d      	bne.n	109c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   109a8:	f7ef ffc0 	bl	92c <Adc_schm_read_msr>
   109ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   109ae:	9b00      	ldr	r3, [sp, #0]
   109b0:	f003 0301 	and.w	r3, r3, #1
   109b4:	2b00      	cmp	r3, #0
   109b6:	d100      	bne.n	109ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   109b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   109ba:	490a      	ldr	r1, [pc, #40]	; (109e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
   109bc:	9b01      	ldr	r3, [sp, #4]
   109be:	9a00      	ldr	r2, [sp, #0]
   109c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
   109c4:	4a06      	ldr	r2, [pc, #24]	; (109e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   109c6:	9b01      	ldr	r3, [sp, #4]
   109c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109cc:	1c5a      	adds	r2, r3, #1
   109ce:	4904      	ldr	r1, [pc, #16]	; (109e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   109d0:	9b01      	ldr	r3, [sp, #4]
   109d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   109d6:	bf00      	nop
   109d8:	b003      	add	sp, #12
   109da:	f85d fb04 	ldr.w	pc, [sp], #4
   109de:	bf00      	nop
   109e0:	1fff9408 	.word	0x1fff9408
   109e4:	1fff9404 	.word	0x1fff9404

000109e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   109e8:	b500      	push	{lr}
   109ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109ec:	f7f0 f936 	bl	c5c <Sys_GetCoreID>
   109f0:	4603      	mov	r3, r0
   109f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
   109f4:	4a0d      	ldr	r2, [pc, #52]	; (10a2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   109f6:	9b01      	ldr	r3, [sp, #4]
   109f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109fc:	1e5a      	subs	r2, r3, #1
   109fe:	490b      	ldr	r1, [pc, #44]	; (10a2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   10a00:	9b01      	ldr	r3, [sp, #4]
   10a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   10a06:	4a0a      	ldr	r2, [pc, #40]	; (10a30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
   10a08:	9b01      	ldr	r3, [sp, #4]
   10a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a0e:	f003 0301 	and.w	r3, r3, #1
   10a12:	2b00      	cmp	r3, #0
   10a14:	d106      	bne.n	10a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
   10a16:	4a05      	ldr	r2, [pc, #20]	; (10a2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   10a18:	9b01      	ldr	r3, [sp, #4]
   10a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a1e:	2b00      	cmp	r3, #0
   10a20:	d100      	bne.n	10a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10a24:	bf00      	nop
   10a26:	b003      	add	sp, #12
   10a28:	f85d fb04 	ldr.w	pc, [sp], #4
   10a2c:	1fff9408 	.word	0x1fff9408
   10a30:	1fff9404 	.word	0x1fff9404

00010a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   10a34:	b500      	push	{lr}
   10a36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a38:	f7f0 f910 	bl	c5c <Sys_GetCoreID>
   10a3c:	4603      	mov	r3, r0
   10a3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
   10a40:	4a10      	ldr	r2, [pc, #64]	; (10a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10a42:	9b01      	ldr	r3, [sp, #4]
   10a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a48:	2b00      	cmp	r3, #0
   10a4a:	d10d      	bne.n	10a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a4c:	f7ef ff6e 	bl	92c <Adc_schm_read_msr>
   10a50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a52:	9b00      	ldr	r3, [sp, #0]
   10a54:	f003 0301 	and.w	r3, r3, #1
   10a58:	2b00      	cmp	r3, #0
   10a5a:	d100      	bne.n	10a5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   10a5e:	490a      	ldr	r1, [pc, #40]	; (10a88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
   10a60:	9b01      	ldr	r3, [sp, #4]
   10a62:	9a00      	ldr	r2, [sp, #0]
   10a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
   10a68:	4a06      	ldr	r2, [pc, #24]	; (10a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10a6a:	9b01      	ldr	r3, [sp, #4]
   10a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a70:	1c5a      	adds	r2, r3, #1
   10a72:	4904      	ldr	r1, [pc, #16]	; (10a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10a74:	9b01      	ldr	r3, [sp, #4]
   10a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a7a:	bf00      	nop
   10a7c:	b003      	add	sp, #12
   10a7e:	f85d fb04 	ldr.w	pc, [sp], #4
   10a82:	bf00      	nop
   10a84:	1fff9410 	.word	0x1fff9410
   10a88:	1fff940c 	.word	0x1fff940c

00010a8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   10a8c:	b500      	push	{lr}
   10a8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a90:	f7f0 f8e4 	bl	c5c <Sys_GetCoreID>
   10a94:	4603      	mov	r3, r0
   10a96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
   10a98:	4a0d      	ldr	r2, [pc, #52]	; (10ad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10a9a:	9b01      	ldr	r3, [sp, #4]
   10a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aa0:	1e5a      	subs	r2, r3, #1
   10aa2:	490b      	ldr	r1, [pc, #44]	; (10ad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10aa4:	9b01      	ldr	r3, [sp, #4]
   10aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   10aaa:	4a0a      	ldr	r2, [pc, #40]	; (10ad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
   10aac:	9b01      	ldr	r3, [sp, #4]
   10aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ab2:	f003 0301 	and.w	r3, r3, #1
   10ab6:	2b00      	cmp	r3, #0
   10ab8:	d106      	bne.n	10ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
   10aba:	4a05      	ldr	r2, [pc, #20]	; (10ad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10abc:	9b01      	ldr	r3, [sp, #4]
   10abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ac2:	2b00      	cmp	r3, #0
   10ac4:	d100      	bne.n	10ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ac6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ac8:	bf00      	nop
   10aca:	b003      	add	sp, #12
   10acc:	f85d fb04 	ldr.w	pc, [sp], #4
   10ad0:	1fff9410 	.word	0x1fff9410
   10ad4:	1fff940c 	.word	0x1fff940c

00010ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10ad8:	b500      	push	{lr}
   10ada:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10adc:	f7f0 f8be 	bl	c5c <Sys_GetCoreID>
   10ae0:	4603      	mov	r3, r0
   10ae2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
   10ae4:	4a10      	ldr	r2, [pc, #64]	; (10b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10ae6:	9b01      	ldr	r3, [sp, #4]
   10ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aec:	2b00      	cmp	r3, #0
   10aee:	d10d      	bne.n	10b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10af0:	f7ef ff1c 	bl	92c <Adc_schm_read_msr>
   10af4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10af6:	9b00      	ldr	r3, [sp, #0]
   10af8:	f003 0301 	and.w	r3, r3, #1
   10afc:	2b00      	cmp	r3, #0
   10afe:	d100      	bne.n	10b02 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   10b02:	490a      	ldr	r1, [pc, #40]	; (10b2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
   10b04:	9b01      	ldr	r3, [sp, #4]
   10b06:	9a00      	ldr	r2, [sp, #0]
   10b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
   10b0c:	4a06      	ldr	r2, [pc, #24]	; (10b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10b0e:	9b01      	ldr	r3, [sp, #4]
   10b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b14:	1c5a      	adds	r2, r3, #1
   10b16:	4904      	ldr	r1, [pc, #16]	; (10b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10b18:	9b01      	ldr	r3, [sp, #4]
   10b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b1e:	bf00      	nop
   10b20:	b003      	add	sp, #12
   10b22:	f85d fb04 	ldr.w	pc, [sp], #4
   10b26:	bf00      	nop
   10b28:	1fff9418 	.word	0x1fff9418
   10b2c:	1fff9414 	.word	0x1fff9414

00010b30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10b30:	b500      	push	{lr}
   10b32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b34:	f7f0 f892 	bl	c5c <Sys_GetCoreID>
   10b38:	4603      	mov	r3, r0
   10b3a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
   10b3c:	4a0d      	ldr	r2, [pc, #52]	; (10b74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10b3e:	9b01      	ldr	r3, [sp, #4]
   10b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b44:	1e5a      	subs	r2, r3, #1
   10b46:	490b      	ldr	r1, [pc, #44]	; (10b74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10b48:	9b01      	ldr	r3, [sp, #4]
   10b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   10b4e:	4a0a      	ldr	r2, [pc, #40]	; (10b78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
   10b50:	9b01      	ldr	r3, [sp, #4]
   10b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b56:	f003 0301 	and.w	r3, r3, #1
   10b5a:	2b00      	cmp	r3, #0
   10b5c:	d106      	bne.n	10b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
   10b5e:	4a05      	ldr	r2, [pc, #20]	; (10b74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10b60:	9b01      	ldr	r3, [sp, #4]
   10b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b66:	2b00      	cmp	r3, #0
   10b68:	d100      	bne.n	10b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b6c:	bf00      	nop
   10b6e:	b003      	add	sp, #12
   10b70:	f85d fb04 	ldr.w	pc, [sp], #4
   10b74:	1fff9418 	.word	0x1fff9418
   10b78:	1fff9414 	.word	0x1fff9414

00010b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10b7c:	b500      	push	{lr}
   10b7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b80:	f7f0 f86c 	bl	c5c <Sys_GetCoreID>
   10b84:	4603      	mov	r3, r0
   10b86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
   10b88:	4a10      	ldr	r2, [pc, #64]	; (10bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10b8a:	9b01      	ldr	r3, [sp, #4]
   10b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b90:	2b00      	cmp	r3, #0
   10b92:	d10d      	bne.n	10bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b94:	f7ef feca 	bl	92c <Adc_schm_read_msr>
   10b98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b9a:	9b00      	ldr	r3, [sp, #0]
   10b9c:	f003 0301 	and.w	r3, r3, #1
   10ba0:	2b00      	cmp	r3, #0
   10ba2:	d100      	bne.n	10ba6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ba4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   10ba6:	490a      	ldr	r1, [pc, #40]	; (10bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
   10ba8:	9b01      	ldr	r3, [sp, #4]
   10baa:	9a00      	ldr	r2, [sp, #0]
   10bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
   10bb0:	4a06      	ldr	r2, [pc, #24]	; (10bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10bb2:	9b01      	ldr	r3, [sp, #4]
   10bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bb8:	1c5a      	adds	r2, r3, #1
   10bba:	4904      	ldr	r1, [pc, #16]	; (10bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10bbc:	9b01      	ldr	r3, [sp, #4]
   10bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10bc2:	bf00      	nop
   10bc4:	b003      	add	sp, #12
   10bc6:	f85d fb04 	ldr.w	pc, [sp], #4
   10bca:	bf00      	nop
   10bcc:	1fff9420 	.word	0x1fff9420
   10bd0:	1fff941c 	.word	0x1fff941c

00010bd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10bd4:	b500      	push	{lr}
   10bd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bd8:	f7f0 f840 	bl	c5c <Sys_GetCoreID>
   10bdc:	4603      	mov	r3, r0
   10bde:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
   10be0:	4a0d      	ldr	r2, [pc, #52]	; (10c18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10be2:	9b01      	ldr	r3, [sp, #4]
   10be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10be8:	1e5a      	subs	r2, r3, #1
   10bea:	490b      	ldr	r1, [pc, #44]	; (10c18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10bec:	9b01      	ldr	r3, [sp, #4]
   10bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   10bf2:	4a0a      	ldr	r2, [pc, #40]	; (10c1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
   10bf4:	9b01      	ldr	r3, [sp, #4]
   10bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bfa:	f003 0301 	and.w	r3, r3, #1
   10bfe:	2b00      	cmp	r3, #0
   10c00:	d106      	bne.n	10c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
   10c02:	4a05      	ldr	r2, [pc, #20]	; (10c18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10c04:	9b01      	ldr	r3, [sp, #4]
   10c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c0a:	2b00      	cmp	r3, #0
   10c0c:	d100      	bne.n	10c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c10:	bf00      	nop
   10c12:	b003      	add	sp, #12
   10c14:	f85d fb04 	ldr.w	pc, [sp], #4
   10c18:	1fff9420 	.word	0x1fff9420
   10c1c:	1fff941c 	.word	0x1fff941c

00010c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10c20:	b500      	push	{lr}
   10c22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c24:	f7f0 f81a 	bl	c5c <Sys_GetCoreID>
   10c28:	4603      	mov	r3, r0
   10c2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
   10c2c:	4a10      	ldr	r2, [pc, #64]	; (10c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10c2e:	9b01      	ldr	r3, [sp, #4]
   10c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c34:	2b00      	cmp	r3, #0
   10c36:	d10d      	bne.n	10c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c38:	f7ef fe78 	bl	92c <Adc_schm_read_msr>
   10c3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c3e:	9b00      	ldr	r3, [sp, #0]
   10c40:	f003 0301 	and.w	r3, r3, #1
   10c44:	2b00      	cmp	r3, #0
   10c46:	d100      	bne.n	10c4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   10c4a:	490a      	ldr	r1, [pc, #40]	; (10c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
   10c4c:	9b01      	ldr	r3, [sp, #4]
   10c4e:	9a00      	ldr	r2, [sp, #0]
   10c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
   10c54:	4a06      	ldr	r2, [pc, #24]	; (10c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10c56:	9b01      	ldr	r3, [sp, #4]
   10c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c5c:	1c5a      	adds	r2, r3, #1
   10c5e:	4904      	ldr	r1, [pc, #16]	; (10c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10c60:	9b01      	ldr	r3, [sp, #4]
   10c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c66:	bf00      	nop
   10c68:	b003      	add	sp, #12
   10c6a:	f85d fb04 	ldr.w	pc, [sp], #4
   10c6e:	bf00      	nop
   10c70:	1fff9428 	.word	0x1fff9428
   10c74:	1fff9424 	.word	0x1fff9424

00010c78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10c78:	b500      	push	{lr}
   10c7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c7c:	f7ef ffee 	bl	c5c <Sys_GetCoreID>
   10c80:	4603      	mov	r3, r0
   10c82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
   10c84:	4a0d      	ldr	r2, [pc, #52]	; (10cbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10c86:	9b01      	ldr	r3, [sp, #4]
   10c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c8c:	1e5a      	subs	r2, r3, #1
   10c8e:	490b      	ldr	r1, [pc, #44]	; (10cbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10c90:	9b01      	ldr	r3, [sp, #4]
   10c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   10c96:	4a0a      	ldr	r2, [pc, #40]	; (10cc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
   10c98:	9b01      	ldr	r3, [sp, #4]
   10c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c9e:	f003 0301 	and.w	r3, r3, #1
   10ca2:	2b00      	cmp	r3, #0
   10ca4:	d106      	bne.n	10cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
   10ca6:	4a05      	ldr	r2, [pc, #20]	; (10cbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10ca8:	9b01      	ldr	r3, [sp, #4]
   10caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cae:	2b00      	cmp	r3, #0
   10cb0:	d100      	bne.n	10cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10cb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10cb4:	bf00      	nop
   10cb6:	b003      	add	sp, #12
   10cb8:	f85d fb04 	ldr.w	pc, [sp], #4
   10cbc:	1fff9428 	.word	0x1fff9428
   10cc0:	1fff9424 	.word	0x1fff9424

00010cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10cc4:	b500      	push	{lr}
   10cc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10cc8:	f7ef ffc8 	bl	c5c <Sys_GetCoreID>
   10ccc:	4603      	mov	r3, r0
   10cce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
   10cd0:	4a10      	ldr	r2, [pc, #64]	; (10d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10cd2:	9b01      	ldr	r3, [sp, #4]
   10cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cd8:	2b00      	cmp	r3, #0
   10cda:	d10d      	bne.n	10cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10cdc:	f7ef fe26 	bl	92c <Adc_schm_read_msr>
   10ce0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ce2:	9b00      	ldr	r3, [sp, #0]
   10ce4:	f003 0301 	and.w	r3, r3, #1
   10ce8:	2b00      	cmp	r3, #0
   10cea:	d100      	bne.n	10cee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10cec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   10cee:	490a      	ldr	r1, [pc, #40]	; (10d18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
   10cf0:	9b01      	ldr	r3, [sp, #4]
   10cf2:	9a00      	ldr	r2, [sp, #0]
   10cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
   10cf8:	4a06      	ldr	r2, [pc, #24]	; (10d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10cfa:	9b01      	ldr	r3, [sp, #4]
   10cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d00:	1c5a      	adds	r2, r3, #1
   10d02:	4904      	ldr	r1, [pc, #16]	; (10d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10d04:	9b01      	ldr	r3, [sp, #4]
   10d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d0a:	bf00      	nop
   10d0c:	b003      	add	sp, #12
   10d0e:	f85d fb04 	ldr.w	pc, [sp], #4
   10d12:	bf00      	nop
   10d14:	1fff9430 	.word	0x1fff9430
   10d18:	1fff942c 	.word	0x1fff942c

00010d1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10d1c:	b500      	push	{lr}
   10d1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d20:	f7ef ff9c 	bl	c5c <Sys_GetCoreID>
   10d24:	4603      	mov	r3, r0
   10d26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
   10d28:	4a0d      	ldr	r2, [pc, #52]	; (10d60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10d2a:	9b01      	ldr	r3, [sp, #4]
   10d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d30:	1e5a      	subs	r2, r3, #1
   10d32:	490b      	ldr	r1, [pc, #44]	; (10d60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10d34:	9b01      	ldr	r3, [sp, #4]
   10d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   10d3a:	4a0a      	ldr	r2, [pc, #40]	; (10d64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
   10d3c:	9b01      	ldr	r3, [sp, #4]
   10d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d42:	f003 0301 	and.w	r3, r3, #1
   10d46:	2b00      	cmp	r3, #0
   10d48:	d106      	bne.n	10d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
   10d4a:	4a05      	ldr	r2, [pc, #20]	; (10d60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10d4c:	9b01      	ldr	r3, [sp, #4]
   10d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d52:	2b00      	cmp	r3, #0
   10d54:	d100      	bne.n	10d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d58:	bf00      	nop
   10d5a:	b003      	add	sp, #12
   10d5c:	f85d fb04 	ldr.w	pc, [sp], #4
   10d60:	1fff9430 	.word	0x1fff9430
   10d64:	1fff942c 	.word	0x1fff942c

00010d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10d68:	b500      	push	{lr}
   10d6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d6c:	f7ef ff76 	bl	c5c <Sys_GetCoreID>
   10d70:	4603      	mov	r3, r0
   10d72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
   10d74:	4a10      	ldr	r2, [pc, #64]	; (10db8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10d76:	9b01      	ldr	r3, [sp, #4]
   10d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d7c:	2b00      	cmp	r3, #0
   10d7e:	d10d      	bne.n	10d9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d80:	f7ef fdd4 	bl	92c <Adc_schm_read_msr>
   10d84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d86:	9b00      	ldr	r3, [sp, #0]
   10d88:	f003 0301 	and.w	r3, r3, #1
   10d8c:	2b00      	cmp	r3, #0
   10d8e:	d100      	bne.n	10d92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   10d92:	490a      	ldr	r1, [pc, #40]	; (10dbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   10d94:	9b01      	ldr	r3, [sp, #4]
   10d96:	9a00      	ldr	r2, [sp, #0]
   10d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   10d9c:	4a06      	ldr	r2, [pc, #24]	; (10db8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10d9e:	9b01      	ldr	r3, [sp, #4]
   10da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10da4:	1c5a      	adds	r2, r3, #1
   10da6:	4904      	ldr	r1, [pc, #16]	; (10db8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10da8:	9b01      	ldr	r3, [sp, #4]
   10daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10dae:	bf00      	nop
   10db0:	b003      	add	sp, #12
   10db2:	f85d fb04 	ldr.w	pc, [sp], #4
   10db6:	bf00      	nop
   10db8:	1fff9438 	.word	0x1fff9438
   10dbc:	1fff9434 	.word	0x1fff9434

00010dc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10dc0:	b500      	push	{lr}
   10dc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10dc4:	f7ef ff4a 	bl	c5c <Sys_GetCoreID>
   10dc8:	4603      	mov	r3, r0
   10dca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   10dcc:	4a0d      	ldr	r2, [pc, #52]	; (10e04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10dce:	9b01      	ldr	r3, [sp, #4]
   10dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dd4:	1e5a      	subs	r2, r3, #1
   10dd6:	490b      	ldr	r1, [pc, #44]	; (10e04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10dd8:	9b01      	ldr	r3, [sp, #4]
   10dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   10dde:	4a0a      	ldr	r2, [pc, #40]	; (10e08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   10de0:	9b01      	ldr	r3, [sp, #4]
   10de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10de6:	f003 0301 	and.w	r3, r3, #1
   10dea:	2b00      	cmp	r3, #0
   10dec:	d106      	bne.n	10dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   10dee:	4a05      	ldr	r2, [pc, #20]	; (10e04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10df0:	9b01      	ldr	r3, [sp, #4]
   10df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10df6:	2b00      	cmp	r3, #0
   10df8:	d100      	bne.n	10dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10dfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10dfc:	bf00      	nop
   10dfe:	b003      	add	sp, #12
   10e00:	f85d fb04 	ldr.w	pc, [sp], #4
   10e04:	1fff9438 	.word	0x1fff9438
   10e08:	1fff9434 	.word	0x1fff9434

00010e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10e0c:	b500      	push	{lr}
   10e0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e10:	f7ef ff24 	bl	c5c <Sys_GetCoreID>
   10e14:	4603      	mov	r3, r0
   10e16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   10e18:	4a10      	ldr	r2, [pc, #64]	; (10e5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10e1a:	9b01      	ldr	r3, [sp, #4]
   10e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e20:	2b00      	cmp	r3, #0
   10e22:	d10d      	bne.n	10e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10e24:	f7ef fd82 	bl	92c <Adc_schm_read_msr>
   10e28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e2a:	9b00      	ldr	r3, [sp, #0]
   10e2c:	f003 0301 	and.w	r3, r3, #1
   10e30:	2b00      	cmp	r3, #0
   10e32:	d100      	bne.n	10e36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   10e36:	490a      	ldr	r1, [pc, #40]	; (10e60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   10e38:	9b01      	ldr	r3, [sp, #4]
   10e3a:	9a00      	ldr	r2, [sp, #0]
   10e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   10e40:	4a06      	ldr	r2, [pc, #24]	; (10e5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10e42:	9b01      	ldr	r3, [sp, #4]
   10e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e48:	1c5a      	adds	r2, r3, #1
   10e4a:	4904      	ldr	r1, [pc, #16]	; (10e5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10e4c:	9b01      	ldr	r3, [sp, #4]
   10e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e52:	bf00      	nop
   10e54:	b003      	add	sp, #12
   10e56:	f85d fb04 	ldr.w	pc, [sp], #4
   10e5a:	bf00      	nop
   10e5c:	1fff9440 	.word	0x1fff9440
   10e60:	1fff943c 	.word	0x1fff943c

00010e64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10e64:	b500      	push	{lr}
   10e66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e68:	f7ef fef8 	bl	c5c <Sys_GetCoreID>
   10e6c:	4603      	mov	r3, r0
   10e6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   10e70:	4a0d      	ldr	r2, [pc, #52]	; (10ea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10e72:	9b01      	ldr	r3, [sp, #4]
   10e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e78:	1e5a      	subs	r2, r3, #1
   10e7a:	490b      	ldr	r1, [pc, #44]	; (10ea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10e7c:	9b01      	ldr	r3, [sp, #4]
   10e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   10e82:	4a0a      	ldr	r2, [pc, #40]	; (10eac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   10e84:	9b01      	ldr	r3, [sp, #4]
   10e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e8a:	f003 0301 	and.w	r3, r3, #1
   10e8e:	2b00      	cmp	r3, #0
   10e90:	d106      	bne.n	10ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   10e92:	4a05      	ldr	r2, [pc, #20]	; (10ea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10e94:	9b01      	ldr	r3, [sp, #4]
   10e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e9a:	2b00      	cmp	r3, #0
   10e9c:	d100      	bne.n	10ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ea0:	bf00      	nop
   10ea2:	b003      	add	sp, #12
   10ea4:	f85d fb04 	ldr.w	pc, [sp], #4
   10ea8:	1fff9440 	.word	0x1fff9440
   10eac:	1fff943c 	.word	0x1fff943c

00010eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10eb0:	b500      	push	{lr}
   10eb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10eb4:	f7ef fed2 	bl	c5c <Sys_GetCoreID>
   10eb8:	4603      	mov	r3, r0
   10eba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   10ebc:	4a10      	ldr	r2, [pc, #64]	; (10f00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10ebe:	9b01      	ldr	r3, [sp, #4]
   10ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ec4:	2b00      	cmp	r3, #0
   10ec6:	d10d      	bne.n	10ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ec8:	f7ef fd30 	bl	92c <Adc_schm_read_msr>
   10ecc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ece:	9b00      	ldr	r3, [sp, #0]
   10ed0:	f003 0301 	and.w	r3, r3, #1
   10ed4:	2b00      	cmp	r3, #0
   10ed6:	d100      	bne.n	10eda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ed8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   10eda:	490a      	ldr	r1, [pc, #40]	; (10f04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   10edc:	9b01      	ldr	r3, [sp, #4]
   10ede:	9a00      	ldr	r2, [sp, #0]
   10ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   10ee4:	4a06      	ldr	r2, [pc, #24]	; (10f00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10ee6:	9b01      	ldr	r3, [sp, #4]
   10ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10eec:	1c5a      	adds	r2, r3, #1
   10eee:	4904      	ldr	r1, [pc, #16]	; (10f00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10ef0:	9b01      	ldr	r3, [sp, #4]
   10ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ef6:	bf00      	nop
   10ef8:	b003      	add	sp, #12
   10efa:	f85d fb04 	ldr.w	pc, [sp], #4
   10efe:	bf00      	nop
   10f00:	1fff9448 	.word	0x1fff9448
   10f04:	1fff9444 	.word	0x1fff9444

00010f08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10f08:	b500      	push	{lr}
   10f0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f0c:	f7ef fea6 	bl	c5c <Sys_GetCoreID>
   10f10:	4603      	mov	r3, r0
   10f12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   10f14:	4a0d      	ldr	r2, [pc, #52]	; (10f4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10f16:	9b01      	ldr	r3, [sp, #4]
   10f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f1c:	1e5a      	subs	r2, r3, #1
   10f1e:	490b      	ldr	r1, [pc, #44]	; (10f4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10f20:	9b01      	ldr	r3, [sp, #4]
   10f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   10f26:	4a0a      	ldr	r2, [pc, #40]	; (10f50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   10f28:	9b01      	ldr	r3, [sp, #4]
   10f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f2e:	f003 0301 	and.w	r3, r3, #1
   10f32:	2b00      	cmp	r3, #0
   10f34:	d106      	bne.n	10f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   10f36:	4a05      	ldr	r2, [pc, #20]	; (10f4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10f38:	9b01      	ldr	r3, [sp, #4]
   10f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f3e:	2b00      	cmp	r3, #0
   10f40:	d100      	bne.n	10f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f44:	bf00      	nop
   10f46:	b003      	add	sp, #12
   10f48:	f85d fb04 	ldr.w	pc, [sp], #4
   10f4c:	1fff9448 	.word	0x1fff9448
   10f50:	1fff9444 	.word	0x1fff9444

00010f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10f54:	b500      	push	{lr}
   10f56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f58:	f7ef fe80 	bl	c5c <Sys_GetCoreID>
   10f5c:	4603      	mov	r3, r0
   10f5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   10f60:	4a10      	ldr	r2, [pc, #64]	; (10fa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10f62:	9b01      	ldr	r3, [sp, #4]
   10f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f68:	2b00      	cmp	r3, #0
   10f6a:	d10d      	bne.n	10f88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f6c:	f7ef fcde 	bl	92c <Adc_schm_read_msr>
   10f70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f72:	9b00      	ldr	r3, [sp, #0]
   10f74:	f003 0301 	and.w	r3, r3, #1
   10f78:	2b00      	cmp	r3, #0
   10f7a:	d100      	bne.n	10f7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   10f7e:	490a      	ldr	r1, [pc, #40]	; (10fa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   10f80:	9b01      	ldr	r3, [sp, #4]
   10f82:	9a00      	ldr	r2, [sp, #0]
   10f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   10f88:	4a06      	ldr	r2, [pc, #24]	; (10fa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10f8a:	9b01      	ldr	r3, [sp, #4]
   10f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f90:	1c5a      	adds	r2, r3, #1
   10f92:	4904      	ldr	r1, [pc, #16]	; (10fa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10f94:	9b01      	ldr	r3, [sp, #4]
   10f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f9a:	bf00      	nop
   10f9c:	b003      	add	sp, #12
   10f9e:	f85d fb04 	ldr.w	pc, [sp], #4
   10fa2:	bf00      	nop
   10fa4:	1fff9450 	.word	0x1fff9450
   10fa8:	1fff944c 	.word	0x1fff944c

00010fac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10fac:	b500      	push	{lr}
   10fae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fb0:	f7ef fe54 	bl	c5c <Sys_GetCoreID>
   10fb4:	4603      	mov	r3, r0
   10fb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   10fb8:	4a0d      	ldr	r2, [pc, #52]	; (10ff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10fba:	9b01      	ldr	r3, [sp, #4]
   10fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fc0:	1e5a      	subs	r2, r3, #1
   10fc2:	490b      	ldr	r1, [pc, #44]	; (10ff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10fc4:	9b01      	ldr	r3, [sp, #4]
   10fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   10fca:	4a0a      	ldr	r2, [pc, #40]	; (10ff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   10fcc:	9b01      	ldr	r3, [sp, #4]
   10fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fd2:	f003 0301 	and.w	r3, r3, #1
   10fd6:	2b00      	cmp	r3, #0
   10fd8:	d106      	bne.n	10fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   10fda:	4a05      	ldr	r2, [pc, #20]	; (10ff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10fdc:	9b01      	ldr	r3, [sp, #4]
   10fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fe2:	2b00      	cmp	r3, #0
   10fe4:	d100      	bne.n	10fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10fe6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10fe8:	bf00      	nop
   10fea:	b003      	add	sp, #12
   10fec:	f85d fb04 	ldr.w	pc, [sp], #4
   10ff0:	1fff9450 	.word	0x1fff9450
   10ff4:	1fff944c 	.word	0x1fff944c

00010ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   10ff8:	b500      	push	{lr}
   10ffa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ffc:	f7ef fe2e 	bl	c5c <Sys_GetCoreID>
   11000:	4603      	mov	r3, r0
   11002:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   11004:	4a10      	ldr	r2, [pc, #64]	; (11048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   11006:	9b01      	ldr	r3, [sp, #4]
   11008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1100c:	2b00      	cmp	r3, #0
   1100e:	d10d      	bne.n	1102c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11010:	f7ef fc8c 	bl	92c <Adc_schm_read_msr>
   11014:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11016:	9b00      	ldr	r3, [sp, #0]
   11018:	f003 0301 	and.w	r3, r3, #1
   1101c:	2b00      	cmp	r3, #0
   1101e:	d100      	bne.n	11022 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11020:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   11022:	490a      	ldr	r1, [pc, #40]	; (1104c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   11024:	9b01      	ldr	r3, [sp, #4]
   11026:	9a00      	ldr	r2, [sp, #0]
   11028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   1102c:	4a06      	ldr	r2, [pc, #24]	; (11048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   1102e:	9b01      	ldr	r3, [sp, #4]
   11030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11034:	1c5a      	adds	r2, r3, #1
   11036:	4904      	ldr	r1, [pc, #16]	; (11048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   11038:	9b01      	ldr	r3, [sp, #4]
   1103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1103e:	bf00      	nop
   11040:	b003      	add	sp, #12
   11042:	f85d fb04 	ldr.w	pc, [sp], #4
   11046:	bf00      	nop
   11048:	1fff9458 	.word	0x1fff9458
   1104c:	1fff9454 	.word	0x1fff9454

00011050 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   11050:	b500      	push	{lr}
   11052:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11054:	f7ef fe02 	bl	c5c <Sys_GetCoreID>
   11058:	4603      	mov	r3, r0
   1105a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   1105c:	4a0d      	ldr	r2, [pc, #52]	; (11094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   1105e:	9b01      	ldr	r3, [sp, #4]
   11060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11064:	1e5a      	subs	r2, r3, #1
   11066:	490b      	ldr	r1, [pc, #44]	; (11094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   11068:	9b01      	ldr	r3, [sp, #4]
   1106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   1106e:	4a0a      	ldr	r2, [pc, #40]	; (11098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   11070:	9b01      	ldr	r3, [sp, #4]
   11072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11076:	f003 0301 	and.w	r3, r3, #1
   1107a:	2b00      	cmp	r3, #0
   1107c:	d106      	bne.n	1108c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   1107e:	4a05      	ldr	r2, [pc, #20]	; (11094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   11080:	9b01      	ldr	r3, [sp, #4]
   11082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11086:	2b00      	cmp	r3, #0
   11088:	d100      	bne.n	1108c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1108a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1108c:	bf00      	nop
   1108e:	b003      	add	sp, #12
   11090:	f85d fb04 	ldr.w	pc, [sp], #4
   11094:	1fff9458 	.word	0x1fff9458
   11098:	1fff9454 	.word	0x1fff9454

0001109c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   1109c:	b500      	push	{lr}
   1109e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110a0:	f7ef fddc 	bl	c5c <Sys_GetCoreID>
   110a4:	4603      	mov	r3, r0
   110a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   110a8:	4a10      	ldr	r2, [pc, #64]	; (110ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   110aa:	9b01      	ldr	r3, [sp, #4]
   110ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110b0:	2b00      	cmp	r3, #0
   110b2:	d10d      	bne.n	110d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   110b4:	f7ef fc3a 	bl	92c <Adc_schm_read_msr>
   110b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   110ba:	9b00      	ldr	r3, [sp, #0]
   110bc:	f003 0301 	and.w	r3, r3, #1
   110c0:	2b00      	cmp	r3, #0
   110c2:	d100      	bne.n	110c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   110c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   110c6:	490a      	ldr	r1, [pc, #40]	; (110f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   110c8:	9b01      	ldr	r3, [sp, #4]
   110ca:	9a00      	ldr	r2, [sp, #0]
   110cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   110d0:	4a06      	ldr	r2, [pc, #24]	; (110ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   110d2:	9b01      	ldr	r3, [sp, #4]
   110d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110d8:	1c5a      	adds	r2, r3, #1
   110da:	4904      	ldr	r1, [pc, #16]	; (110ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   110dc:	9b01      	ldr	r3, [sp, #4]
   110de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   110e2:	bf00      	nop
   110e4:	b003      	add	sp, #12
   110e6:	f85d fb04 	ldr.w	pc, [sp], #4
   110ea:	bf00      	nop
   110ec:	1fff9460 	.word	0x1fff9460
   110f0:	1fff945c 	.word	0x1fff945c

000110f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   110f4:	b500      	push	{lr}
   110f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110f8:	f7ef fdb0 	bl	c5c <Sys_GetCoreID>
   110fc:	4603      	mov	r3, r0
   110fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   11100:	4a0d      	ldr	r2, [pc, #52]	; (11138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   11102:	9b01      	ldr	r3, [sp, #4]
   11104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11108:	1e5a      	subs	r2, r3, #1
   1110a:	490b      	ldr	r1, [pc, #44]	; (11138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   1110c:	9b01      	ldr	r3, [sp, #4]
   1110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   11112:	4a0a      	ldr	r2, [pc, #40]	; (1113c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   11114:	9b01      	ldr	r3, [sp, #4]
   11116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1111a:	f003 0301 	and.w	r3, r3, #1
   1111e:	2b00      	cmp	r3, #0
   11120:	d106      	bne.n	11130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   11122:	4a05      	ldr	r2, [pc, #20]	; (11138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   11124:	9b01      	ldr	r3, [sp, #4]
   11126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1112a:	2b00      	cmp	r3, #0
   1112c:	d100      	bne.n	11130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1112e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11130:	bf00      	nop
   11132:	b003      	add	sp, #12
   11134:	f85d fb04 	ldr.w	pc, [sp], #4
   11138:	1fff9460 	.word	0x1fff9460
   1113c:	1fff945c 	.word	0x1fff945c

00011140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   11140:	b500      	push	{lr}
   11142:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11144:	f7ef fd8a 	bl	c5c <Sys_GetCoreID>
   11148:	4603      	mov	r3, r0
   1114a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   1114c:	4a10      	ldr	r2, [pc, #64]	; (11190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   1114e:	9b01      	ldr	r3, [sp, #4]
   11150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11154:	2b00      	cmp	r3, #0
   11156:	d10d      	bne.n	11174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11158:	f7ef fbe8 	bl	92c <Adc_schm_read_msr>
   1115c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1115e:	9b00      	ldr	r3, [sp, #0]
   11160:	f003 0301 	and.w	r3, r3, #1
   11164:	2b00      	cmp	r3, #0
   11166:	d100      	bne.n	1116a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11168:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   1116a:	490a      	ldr	r1, [pc, #40]	; (11194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   1116c:	9b01      	ldr	r3, [sp, #4]
   1116e:	9a00      	ldr	r2, [sp, #0]
   11170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   11174:	4a06      	ldr	r2, [pc, #24]	; (11190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   11176:	9b01      	ldr	r3, [sp, #4]
   11178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1117c:	1c5a      	adds	r2, r3, #1
   1117e:	4904      	ldr	r1, [pc, #16]	; (11190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   11180:	9b01      	ldr	r3, [sp, #4]
   11182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11186:	bf00      	nop
   11188:	b003      	add	sp, #12
   1118a:	f85d fb04 	ldr.w	pc, [sp], #4
   1118e:	bf00      	nop
   11190:	1fff9468 	.word	0x1fff9468
   11194:	1fff9464 	.word	0x1fff9464

00011198 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   11198:	b500      	push	{lr}
   1119a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1119c:	f7ef fd5e 	bl	c5c <Sys_GetCoreID>
   111a0:	4603      	mov	r3, r0
   111a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   111a4:	4a0d      	ldr	r2, [pc, #52]	; (111dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   111a6:	9b01      	ldr	r3, [sp, #4]
   111a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111ac:	1e5a      	subs	r2, r3, #1
   111ae:	490b      	ldr	r1, [pc, #44]	; (111dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   111b0:	9b01      	ldr	r3, [sp, #4]
   111b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   111b6:	4a0a      	ldr	r2, [pc, #40]	; (111e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   111b8:	9b01      	ldr	r3, [sp, #4]
   111ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111be:	f003 0301 	and.w	r3, r3, #1
   111c2:	2b00      	cmp	r3, #0
   111c4:	d106      	bne.n	111d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   111c6:	4a05      	ldr	r2, [pc, #20]	; (111dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   111c8:	9b01      	ldr	r3, [sp, #4]
   111ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111ce:	2b00      	cmp	r3, #0
   111d0:	d100      	bne.n	111d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   111d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   111d4:	bf00      	nop
   111d6:	b003      	add	sp, #12
   111d8:	f85d fb04 	ldr.w	pc, [sp], #4
   111dc:	1fff9468 	.word	0x1fff9468
   111e0:	1fff9464 	.word	0x1fff9464

000111e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   111e4:	b500      	push	{lr}
   111e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111e8:	f7ef fd38 	bl	c5c <Sys_GetCoreID>
   111ec:	4603      	mov	r3, r0
   111ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   111f0:	4a10      	ldr	r2, [pc, #64]	; (11234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   111f2:	9b01      	ldr	r3, [sp, #4]
   111f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111f8:	2b00      	cmp	r3, #0
   111fa:	d10d      	bne.n	11218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   111fc:	f7ef fb96 	bl	92c <Adc_schm_read_msr>
   11200:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11202:	9b00      	ldr	r3, [sp, #0]
   11204:	f003 0301 	and.w	r3, r3, #1
   11208:	2b00      	cmp	r3, #0
   1120a:	d100      	bne.n	1120e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1120c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   1120e:	490a      	ldr	r1, [pc, #40]	; (11238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   11210:	9b01      	ldr	r3, [sp, #4]
   11212:	9a00      	ldr	r2, [sp, #0]
   11214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   11218:	4a06      	ldr	r2, [pc, #24]	; (11234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   1121a:	9b01      	ldr	r3, [sp, #4]
   1121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11220:	1c5a      	adds	r2, r3, #1
   11222:	4904      	ldr	r1, [pc, #16]	; (11234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   11224:	9b01      	ldr	r3, [sp, #4]
   11226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1122a:	bf00      	nop
   1122c:	b003      	add	sp, #12
   1122e:	f85d fb04 	ldr.w	pc, [sp], #4
   11232:	bf00      	nop
   11234:	1fff9470 	.word	0x1fff9470
   11238:	1fff946c 	.word	0x1fff946c

0001123c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   1123c:	b500      	push	{lr}
   1123e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11240:	f7ef fd0c 	bl	c5c <Sys_GetCoreID>
   11244:	4603      	mov	r3, r0
   11246:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   11248:	4a0d      	ldr	r2, [pc, #52]	; (11280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   1124a:	9b01      	ldr	r3, [sp, #4]
   1124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11250:	1e5a      	subs	r2, r3, #1
   11252:	490b      	ldr	r1, [pc, #44]	; (11280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   11254:	9b01      	ldr	r3, [sp, #4]
   11256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   1125a:	4a0a      	ldr	r2, [pc, #40]	; (11284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   1125c:	9b01      	ldr	r3, [sp, #4]
   1125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11262:	f003 0301 	and.w	r3, r3, #1
   11266:	2b00      	cmp	r3, #0
   11268:	d106      	bne.n	11278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   1126a:	4a05      	ldr	r2, [pc, #20]	; (11280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   1126c:	9b01      	ldr	r3, [sp, #4]
   1126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11272:	2b00      	cmp	r3, #0
   11274:	d100      	bne.n	11278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11276:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11278:	bf00      	nop
   1127a:	b003      	add	sp, #12
   1127c:	f85d fb04 	ldr.w	pc, [sp], #4
   11280:	1fff9470 	.word	0x1fff9470
   11284:	1fff946c 	.word	0x1fff946c

00011288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   11288:	b500      	push	{lr}
   1128a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1128c:	f7ef fce6 	bl	c5c <Sys_GetCoreID>
   11290:	4603      	mov	r3, r0
   11292:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   11294:	4a10      	ldr	r2, [pc, #64]	; (112d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   11296:	9b01      	ldr	r3, [sp, #4]
   11298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1129c:	2b00      	cmp	r3, #0
   1129e:	d10d      	bne.n	112bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   112a0:	f7ef fb44 	bl	92c <Adc_schm_read_msr>
   112a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   112a6:	9b00      	ldr	r3, [sp, #0]
   112a8:	f003 0301 	and.w	r3, r3, #1
   112ac:	2b00      	cmp	r3, #0
   112ae:	d100      	bne.n	112b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   112b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   112b2:	490a      	ldr	r1, [pc, #40]	; (112dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   112b4:	9b01      	ldr	r3, [sp, #4]
   112b6:	9a00      	ldr	r2, [sp, #0]
   112b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   112bc:	4a06      	ldr	r2, [pc, #24]	; (112d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   112be:	9b01      	ldr	r3, [sp, #4]
   112c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112c4:	1c5a      	adds	r2, r3, #1
   112c6:	4904      	ldr	r1, [pc, #16]	; (112d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   112c8:	9b01      	ldr	r3, [sp, #4]
   112ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   112ce:	bf00      	nop
   112d0:	b003      	add	sp, #12
   112d2:	f85d fb04 	ldr.w	pc, [sp], #4
   112d6:	bf00      	nop
   112d8:	1fff9478 	.word	0x1fff9478
   112dc:	1fff9474 	.word	0x1fff9474

000112e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   112e0:	b500      	push	{lr}
   112e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112e4:	f7ef fcba 	bl	c5c <Sys_GetCoreID>
   112e8:	4603      	mov	r3, r0
   112ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   112ec:	4a0d      	ldr	r2, [pc, #52]	; (11324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   112ee:	9b01      	ldr	r3, [sp, #4]
   112f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112f4:	1e5a      	subs	r2, r3, #1
   112f6:	490b      	ldr	r1, [pc, #44]	; (11324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   112f8:	9b01      	ldr	r3, [sp, #4]
   112fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   112fe:	4a0a      	ldr	r2, [pc, #40]	; (11328 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   11300:	9b01      	ldr	r3, [sp, #4]
   11302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11306:	f003 0301 	and.w	r3, r3, #1
   1130a:	2b00      	cmp	r3, #0
   1130c:	d106      	bne.n	1131c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   1130e:	4a05      	ldr	r2, [pc, #20]	; (11324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   11310:	9b01      	ldr	r3, [sp, #4]
   11312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11316:	2b00      	cmp	r3, #0
   11318:	d100      	bne.n	1131c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1131a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1131c:	bf00      	nop
   1131e:	b003      	add	sp, #12
   11320:	f85d fb04 	ldr.w	pc, [sp], #4
   11324:	1fff9478 	.word	0x1fff9478
   11328:	1fff9474 	.word	0x1fff9474

0001132c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   1132c:	b500      	push	{lr}
   1132e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11330:	f7ef fc94 	bl	c5c <Sys_GetCoreID>
   11334:	4603      	mov	r3, r0
   11336:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   11338:	4a10      	ldr	r2, [pc, #64]	; (1137c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   1133a:	9b01      	ldr	r3, [sp, #4]
   1133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11340:	2b00      	cmp	r3, #0
   11342:	d10d      	bne.n	11360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11344:	f7ef faf2 	bl	92c <Adc_schm_read_msr>
   11348:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1134a:	9b00      	ldr	r3, [sp, #0]
   1134c:	f003 0301 	and.w	r3, r3, #1
   11350:	2b00      	cmp	r3, #0
   11352:	d100      	bne.n	11356 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11354:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   11356:	490a      	ldr	r1, [pc, #40]	; (11380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   11358:	9b01      	ldr	r3, [sp, #4]
   1135a:	9a00      	ldr	r2, [sp, #0]
   1135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   11360:	4a06      	ldr	r2, [pc, #24]	; (1137c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   11362:	9b01      	ldr	r3, [sp, #4]
   11364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11368:	1c5a      	adds	r2, r3, #1
   1136a:	4904      	ldr	r1, [pc, #16]	; (1137c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   1136c:	9b01      	ldr	r3, [sp, #4]
   1136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11372:	bf00      	nop
   11374:	b003      	add	sp, #12
   11376:	f85d fb04 	ldr.w	pc, [sp], #4
   1137a:	bf00      	nop
   1137c:	1fff9480 	.word	0x1fff9480
   11380:	1fff947c 	.word	0x1fff947c

00011384 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   11384:	b500      	push	{lr}
   11386:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11388:	f7ef fc68 	bl	c5c <Sys_GetCoreID>
   1138c:	4603      	mov	r3, r0
   1138e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   11390:	4a0d      	ldr	r2, [pc, #52]	; (113c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   11392:	9b01      	ldr	r3, [sp, #4]
   11394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11398:	1e5a      	subs	r2, r3, #1
   1139a:	490b      	ldr	r1, [pc, #44]	; (113c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   1139c:	9b01      	ldr	r3, [sp, #4]
   1139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   113a2:	4a0a      	ldr	r2, [pc, #40]	; (113cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   113a4:	9b01      	ldr	r3, [sp, #4]
   113a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113aa:	f003 0301 	and.w	r3, r3, #1
   113ae:	2b00      	cmp	r3, #0
   113b0:	d106      	bne.n	113c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   113b2:	4a05      	ldr	r2, [pc, #20]	; (113c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   113b4:	9b01      	ldr	r3, [sp, #4]
   113b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113ba:	2b00      	cmp	r3, #0
   113bc:	d100      	bne.n	113c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   113be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   113c0:	bf00      	nop
   113c2:	b003      	add	sp, #12
   113c4:	f85d fb04 	ldr.w	pc, [sp], #4
   113c8:	1fff9480 	.word	0x1fff9480
   113cc:	1fff947c 	.word	0x1fff947c

000113d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   113d0:	b500      	push	{lr}
   113d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113d4:	f7ef fc42 	bl	c5c <Sys_GetCoreID>
   113d8:	4603      	mov	r3, r0
   113da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   113dc:	4a10      	ldr	r2, [pc, #64]	; (11420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   113de:	9b01      	ldr	r3, [sp, #4]
   113e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113e4:	2b00      	cmp	r3, #0
   113e6:	d10d      	bne.n	11404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   113e8:	f7ef faa0 	bl	92c <Adc_schm_read_msr>
   113ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   113ee:	9b00      	ldr	r3, [sp, #0]
   113f0:	f003 0301 	and.w	r3, r3, #1
   113f4:	2b00      	cmp	r3, #0
   113f6:	d100      	bne.n	113fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   113f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   113fa:	490a      	ldr	r1, [pc, #40]	; (11424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   113fc:	9b01      	ldr	r3, [sp, #4]
   113fe:	9a00      	ldr	r2, [sp, #0]
   11400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   11404:	4a06      	ldr	r2, [pc, #24]	; (11420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   11406:	9b01      	ldr	r3, [sp, #4]
   11408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1140c:	1c5a      	adds	r2, r3, #1
   1140e:	4904      	ldr	r1, [pc, #16]	; (11420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   11410:	9b01      	ldr	r3, [sp, #4]
   11412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11416:	bf00      	nop
   11418:	b003      	add	sp, #12
   1141a:	f85d fb04 	ldr.w	pc, [sp], #4
   1141e:	bf00      	nop
   11420:	1fff9488 	.word	0x1fff9488
   11424:	1fff9484 	.word	0x1fff9484

00011428 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   11428:	b500      	push	{lr}
   1142a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1142c:	f7ef fc16 	bl	c5c <Sys_GetCoreID>
   11430:	4603      	mov	r3, r0
   11432:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   11434:	4a0d      	ldr	r2, [pc, #52]	; (1146c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   11436:	9b01      	ldr	r3, [sp, #4]
   11438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1143c:	1e5a      	subs	r2, r3, #1
   1143e:	490b      	ldr	r1, [pc, #44]	; (1146c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   11440:	9b01      	ldr	r3, [sp, #4]
   11442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   11446:	4a0a      	ldr	r2, [pc, #40]	; (11470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   11448:	9b01      	ldr	r3, [sp, #4]
   1144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1144e:	f003 0301 	and.w	r3, r3, #1
   11452:	2b00      	cmp	r3, #0
   11454:	d106      	bne.n	11464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   11456:	4a05      	ldr	r2, [pc, #20]	; (1146c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   11458:	9b01      	ldr	r3, [sp, #4]
   1145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1145e:	2b00      	cmp	r3, #0
   11460:	d100      	bne.n	11464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11462:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11464:	bf00      	nop
   11466:	b003      	add	sp, #12
   11468:	f85d fb04 	ldr.w	pc, [sp], #4
   1146c:	1fff9488 	.word	0x1fff9488
   11470:	1fff9484 	.word	0x1fff9484

00011474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   11474:	b500      	push	{lr}
   11476:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11478:	f7ef fbf0 	bl	c5c <Sys_GetCoreID>
   1147c:	4603      	mov	r3, r0
   1147e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   11480:	4a10      	ldr	r2, [pc, #64]	; (114c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   11482:	9b01      	ldr	r3, [sp, #4]
   11484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11488:	2b00      	cmp	r3, #0
   1148a:	d10d      	bne.n	114a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1148c:	f7ef fa4e 	bl	92c <Adc_schm_read_msr>
   11490:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11492:	9b00      	ldr	r3, [sp, #0]
   11494:	f003 0301 	and.w	r3, r3, #1
   11498:	2b00      	cmp	r3, #0
   1149a:	d100      	bne.n	1149e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1149c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   1149e:	490a      	ldr	r1, [pc, #40]	; (114c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   114a0:	9b01      	ldr	r3, [sp, #4]
   114a2:	9a00      	ldr	r2, [sp, #0]
   114a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   114a8:	4a06      	ldr	r2, [pc, #24]	; (114c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   114aa:	9b01      	ldr	r3, [sp, #4]
   114ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114b0:	1c5a      	adds	r2, r3, #1
   114b2:	4904      	ldr	r1, [pc, #16]	; (114c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   114b4:	9b01      	ldr	r3, [sp, #4]
   114b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   114ba:	bf00      	nop
   114bc:	b003      	add	sp, #12
   114be:	f85d fb04 	ldr.w	pc, [sp], #4
   114c2:	bf00      	nop
   114c4:	1fff9490 	.word	0x1fff9490
   114c8:	1fff948c 	.word	0x1fff948c

000114cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   114cc:	b500      	push	{lr}
   114ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114d0:	f7ef fbc4 	bl	c5c <Sys_GetCoreID>
   114d4:	4603      	mov	r3, r0
   114d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   114d8:	4a0d      	ldr	r2, [pc, #52]	; (11510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   114da:	9b01      	ldr	r3, [sp, #4]
   114dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114e0:	1e5a      	subs	r2, r3, #1
   114e2:	490b      	ldr	r1, [pc, #44]	; (11510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   114e4:	9b01      	ldr	r3, [sp, #4]
   114e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   114ea:	4a0a      	ldr	r2, [pc, #40]	; (11514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   114ec:	9b01      	ldr	r3, [sp, #4]
   114ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114f2:	f003 0301 	and.w	r3, r3, #1
   114f6:	2b00      	cmp	r3, #0
   114f8:	d106      	bne.n	11508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   114fa:	4a05      	ldr	r2, [pc, #20]	; (11510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   114fc:	9b01      	ldr	r3, [sp, #4]
   114fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11502:	2b00      	cmp	r3, #0
   11504:	d100      	bne.n	11508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11506:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11508:	bf00      	nop
   1150a:	b003      	add	sp, #12
   1150c:	f85d fb04 	ldr.w	pc, [sp], #4
   11510:	1fff9490 	.word	0x1fff9490
   11514:	1fff948c 	.word	0x1fff948c

00011518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   11518:	b500      	push	{lr}
   1151a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1151c:	f7ef fb9e 	bl	c5c <Sys_GetCoreID>
   11520:	4603      	mov	r3, r0
   11522:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   11524:	4a10      	ldr	r2, [pc, #64]	; (11568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   11526:	9b01      	ldr	r3, [sp, #4]
   11528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1152c:	2b00      	cmp	r3, #0
   1152e:	d10d      	bne.n	1154c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11530:	f7ef f9fc 	bl	92c <Adc_schm_read_msr>
   11534:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11536:	9b00      	ldr	r3, [sp, #0]
   11538:	f003 0301 	and.w	r3, r3, #1
   1153c:	2b00      	cmp	r3, #0
   1153e:	d100      	bne.n	11542 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11540:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   11542:	490a      	ldr	r1, [pc, #40]	; (1156c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   11544:	9b01      	ldr	r3, [sp, #4]
   11546:	9a00      	ldr	r2, [sp, #0]
   11548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   1154c:	4a06      	ldr	r2, [pc, #24]	; (11568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   1154e:	9b01      	ldr	r3, [sp, #4]
   11550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11554:	1c5a      	adds	r2, r3, #1
   11556:	4904      	ldr	r1, [pc, #16]	; (11568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   11558:	9b01      	ldr	r3, [sp, #4]
   1155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1155e:	bf00      	nop
   11560:	b003      	add	sp, #12
   11562:	f85d fb04 	ldr.w	pc, [sp], #4
   11566:	bf00      	nop
   11568:	1fff9498 	.word	0x1fff9498
   1156c:	1fff9494 	.word	0x1fff9494

00011570 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   11570:	b500      	push	{lr}
   11572:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11574:	f7ef fb72 	bl	c5c <Sys_GetCoreID>
   11578:	4603      	mov	r3, r0
   1157a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   1157c:	4a0d      	ldr	r2, [pc, #52]	; (115b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   1157e:	9b01      	ldr	r3, [sp, #4]
   11580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11584:	1e5a      	subs	r2, r3, #1
   11586:	490b      	ldr	r1, [pc, #44]	; (115b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   11588:	9b01      	ldr	r3, [sp, #4]
   1158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   1158e:	4a0a      	ldr	r2, [pc, #40]	; (115b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   11590:	9b01      	ldr	r3, [sp, #4]
   11592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11596:	f003 0301 	and.w	r3, r3, #1
   1159a:	2b00      	cmp	r3, #0
   1159c:	d106      	bne.n	115ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   1159e:	4a05      	ldr	r2, [pc, #20]	; (115b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   115a0:	9b01      	ldr	r3, [sp, #4]
   115a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115a6:	2b00      	cmp	r3, #0
   115a8:	d100      	bne.n	115ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   115aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   115ac:	bf00      	nop
   115ae:	b003      	add	sp, #12
   115b0:	f85d fb04 	ldr.w	pc, [sp], #4
   115b4:	1fff9498 	.word	0x1fff9498
   115b8:	1fff9494 	.word	0x1fff9494

000115bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   115bc:	b500      	push	{lr}
   115be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115c0:	f7ef fb4c 	bl	c5c <Sys_GetCoreID>
   115c4:	4603      	mov	r3, r0
   115c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   115c8:	4a10      	ldr	r2, [pc, #64]	; (1160c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   115ca:	9b01      	ldr	r3, [sp, #4]
   115cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115d0:	2b00      	cmp	r3, #0
   115d2:	d10d      	bne.n	115f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   115d4:	f7ef f9aa 	bl	92c <Adc_schm_read_msr>
   115d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   115da:	9b00      	ldr	r3, [sp, #0]
   115dc:	f003 0301 	and.w	r3, r3, #1
   115e0:	2b00      	cmp	r3, #0
   115e2:	d100      	bne.n	115e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   115e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   115e6:	490a      	ldr	r1, [pc, #40]	; (11610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   115e8:	9b01      	ldr	r3, [sp, #4]
   115ea:	9a00      	ldr	r2, [sp, #0]
   115ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   115f0:	4a06      	ldr	r2, [pc, #24]	; (1160c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   115f2:	9b01      	ldr	r3, [sp, #4]
   115f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115f8:	1c5a      	adds	r2, r3, #1
   115fa:	4904      	ldr	r1, [pc, #16]	; (1160c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   115fc:	9b01      	ldr	r3, [sp, #4]
   115fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11602:	bf00      	nop
   11604:	b003      	add	sp, #12
   11606:	f85d fb04 	ldr.w	pc, [sp], #4
   1160a:	bf00      	nop
   1160c:	1fff94a0 	.word	0x1fff94a0
   11610:	1fff949c 	.word	0x1fff949c

00011614 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   11614:	b500      	push	{lr}
   11616:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11618:	f7ef fb20 	bl	c5c <Sys_GetCoreID>
   1161c:	4603      	mov	r3, r0
   1161e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   11620:	4a0d      	ldr	r2, [pc, #52]	; (11658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   11622:	9b01      	ldr	r3, [sp, #4]
   11624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11628:	1e5a      	subs	r2, r3, #1
   1162a:	490b      	ldr	r1, [pc, #44]	; (11658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   1162c:	9b01      	ldr	r3, [sp, #4]
   1162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   11632:	4a0a      	ldr	r2, [pc, #40]	; (1165c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   11634:	9b01      	ldr	r3, [sp, #4]
   11636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1163a:	f003 0301 	and.w	r3, r3, #1
   1163e:	2b00      	cmp	r3, #0
   11640:	d106      	bne.n	11650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   11642:	4a05      	ldr	r2, [pc, #20]	; (11658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   11644:	9b01      	ldr	r3, [sp, #4]
   11646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1164a:	2b00      	cmp	r3, #0
   1164c:	d100      	bne.n	11650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1164e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11650:	bf00      	nop
   11652:	b003      	add	sp, #12
   11654:	f85d fb04 	ldr.w	pc, [sp], #4
   11658:	1fff94a0 	.word	0x1fff94a0
   1165c:	1fff949c 	.word	0x1fff949c

00011660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   11660:	b500      	push	{lr}
   11662:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11664:	f7ef fafa 	bl	c5c <Sys_GetCoreID>
   11668:	4603      	mov	r3, r0
   1166a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   1166c:	4a10      	ldr	r2, [pc, #64]	; (116b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   1166e:	9b01      	ldr	r3, [sp, #4]
   11670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11674:	2b00      	cmp	r3, #0
   11676:	d10d      	bne.n	11694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11678:	f7ef f958 	bl	92c <Adc_schm_read_msr>
   1167c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1167e:	9b00      	ldr	r3, [sp, #0]
   11680:	f003 0301 	and.w	r3, r3, #1
   11684:	2b00      	cmp	r3, #0
   11686:	d100      	bne.n	1168a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11688:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   1168a:	490a      	ldr	r1, [pc, #40]	; (116b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   1168c:	9b01      	ldr	r3, [sp, #4]
   1168e:	9a00      	ldr	r2, [sp, #0]
   11690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   11694:	4a06      	ldr	r2, [pc, #24]	; (116b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   11696:	9b01      	ldr	r3, [sp, #4]
   11698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1169c:	1c5a      	adds	r2, r3, #1
   1169e:	4904      	ldr	r1, [pc, #16]	; (116b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   116a0:	9b01      	ldr	r3, [sp, #4]
   116a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   116a6:	bf00      	nop
   116a8:	b003      	add	sp, #12
   116aa:	f85d fb04 	ldr.w	pc, [sp], #4
   116ae:	bf00      	nop
   116b0:	1fff94a8 	.word	0x1fff94a8
   116b4:	1fff94a4 	.word	0x1fff94a4

000116b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   116b8:	b500      	push	{lr}
   116ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116bc:	f7ef face 	bl	c5c <Sys_GetCoreID>
   116c0:	4603      	mov	r3, r0
   116c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   116c4:	4a0d      	ldr	r2, [pc, #52]	; (116fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   116c6:	9b01      	ldr	r3, [sp, #4]
   116c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116cc:	1e5a      	subs	r2, r3, #1
   116ce:	490b      	ldr	r1, [pc, #44]	; (116fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   116d0:	9b01      	ldr	r3, [sp, #4]
   116d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   116d6:	4a0a      	ldr	r2, [pc, #40]	; (11700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   116d8:	9b01      	ldr	r3, [sp, #4]
   116da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116de:	f003 0301 	and.w	r3, r3, #1
   116e2:	2b00      	cmp	r3, #0
   116e4:	d106      	bne.n	116f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   116e6:	4a05      	ldr	r2, [pc, #20]	; (116fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   116e8:	9b01      	ldr	r3, [sp, #4]
   116ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116ee:	2b00      	cmp	r3, #0
   116f0:	d100      	bne.n	116f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   116f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   116f4:	bf00      	nop
   116f6:	b003      	add	sp, #12
   116f8:	f85d fb04 	ldr.w	pc, [sp], #4
   116fc:	1fff94a8 	.word	0x1fff94a8
   11700:	1fff94a4 	.word	0x1fff94a4

00011704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   11704:	b500      	push	{lr}
   11706:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11708:	f7ef faa8 	bl	c5c <Sys_GetCoreID>
   1170c:	4603      	mov	r3, r0
   1170e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   11710:	4a10      	ldr	r2, [pc, #64]	; (11754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   11712:	9b01      	ldr	r3, [sp, #4]
   11714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11718:	2b00      	cmp	r3, #0
   1171a:	d10d      	bne.n	11738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1171c:	f7ef f906 	bl	92c <Adc_schm_read_msr>
   11720:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11722:	9b00      	ldr	r3, [sp, #0]
   11724:	f003 0301 	and.w	r3, r3, #1
   11728:	2b00      	cmp	r3, #0
   1172a:	d100      	bne.n	1172e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1172c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   1172e:	490a      	ldr	r1, [pc, #40]	; (11758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   11730:	9b01      	ldr	r3, [sp, #4]
   11732:	9a00      	ldr	r2, [sp, #0]
   11734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   11738:	4a06      	ldr	r2, [pc, #24]	; (11754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   1173a:	9b01      	ldr	r3, [sp, #4]
   1173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11740:	1c5a      	adds	r2, r3, #1
   11742:	4904      	ldr	r1, [pc, #16]	; (11754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   11744:	9b01      	ldr	r3, [sp, #4]
   11746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1174a:	bf00      	nop
   1174c:	b003      	add	sp, #12
   1174e:	f85d fb04 	ldr.w	pc, [sp], #4
   11752:	bf00      	nop
   11754:	1fff94b0 	.word	0x1fff94b0
   11758:	1fff94ac 	.word	0x1fff94ac

0001175c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   1175c:	b500      	push	{lr}
   1175e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11760:	f7ef fa7c 	bl	c5c <Sys_GetCoreID>
   11764:	4603      	mov	r3, r0
   11766:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   11768:	4a0d      	ldr	r2, [pc, #52]	; (117a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   1176a:	9b01      	ldr	r3, [sp, #4]
   1176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11770:	1e5a      	subs	r2, r3, #1
   11772:	490b      	ldr	r1, [pc, #44]	; (117a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   11774:	9b01      	ldr	r3, [sp, #4]
   11776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   1177a:	4a0a      	ldr	r2, [pc, #40]	; (117a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   1177c:	9b01      	ldr	r3, [sp, #4]
   1177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11782:	f003 0301 	and.w	r3, r3, #1
   11786:	2b00      	cmp	r3, #0
   11788:	d106      	bne.n	11798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   1178a:	4a05      	ldr	r2, [pc, #20]	; (117a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   1178c:	9b01      	ldr	r3, [sp, #4]
   1178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11792:	2b00      	cmp	r3, #0
   11794:	d100      	bne.n	11798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11796:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11798:	bf00      	nop
   1179a:	b003      	add	sp, #12
   1179c:	f85d fb04 	ldr.w	pc, [sp], #4
   117a0:	1fff94b0 	.word	0x1fff94b0
   117a4:	1fff94ac 	.word	0x1fff94ac

000117a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   117a8:	b500      	push	{lr}
   117aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117ac:	f7ef fa56 	bl	c5c <Sys_GetCoreID>
   117b0:	4603      	mov	r3, r0
   117b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   117b4:	4a10      	ldr	r2, [pc, #64]	; (117f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   117b6:	9b01      	ldr	r3, [sp, #4]
   117b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117bc:	2b00      	cmp	r3, #0
   117be:	d10d      	bne.n	117dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   117c0:	f7ef f8b4 	bl	92c <Adc_schm_read_msr>
   117c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   117c6:	9b00      	ldr	r3, [sp, #0]
   117c8:	f003 0301 	and.w	r3, r3, #1
   117cc:	2b00      	cmp	r3, #0
   117ce:	d100      	bne.n	117d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   117d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   117d2:	490a      	ldr	r1, [pc, #40]	; (117fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   117d4:	9b01      	ldr	r3, [sp, #4]
   117d6:	9a00      	ldr	r2, [sp, #0]
   117d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   117dc:	4a06      	ldr	r2, [pc, #24]	; (117f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   117de:	9b01      	ldr	r3, [sp, #4]
   117e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117e4:	1c5a      	adds	r2, r3, #1
   117e6:	4904      	ldr	r1, [pc, #16]	; (117f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   117e8:	9b01      	ldr	r3, [sp, #4]
   117ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   117ee:	bf00      	nop
   117f0:	b003      	add	sp, #12
   117f2:	f85d fb04 	ldr.w	pc, [sp], #4
   117f6:	bf00      	nop
   117f8:	1fff94b8 	.word	0x1fff94b8
   117fc:	1fff94b4 	.word	0x1fff94b4

00011800 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   11800:	b500      	push	{lr}
   11802:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11804:	f7ef fa2a 	bl	c5c <Sys_GetCoreID>
   11808:	4603      	mov	r3, r0
   1180a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   1180c:	4a0d      	ldr	r2, [pc, #52]	; (11844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   1180e:	9b01      	ldr	r3, [sp, #4]
   11810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11814:	1e5a      	subs	r2, r3, #1
   11816:	490b      	ldr	r1, [pc, #44]	; (11844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   11818:	9b01      	ldr	r3, [sp, #4]
   1181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   1181e:	4a0a      	ldr	r2, [pc, #40]	; (11848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   11820:	9b01      	ldr	r3, [sp, #4]
   11822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11826:	f003 0301 	and.w	r3, r3, #1
   1182a:	2b00      	cmp	r3, #0
   1182c:	d106      	bne.n	1183c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   1182e:	4a05      	ldr	r2, [pc, #20]	; (11844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   11830:	9b01      	ldr	r3, [sp, #4]
   11832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11836:	2b00      	cmp	r3, #0
   11838:	d100      	bne.n	1183c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1183a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1183c:	bf00      	nop
   1183e:	b003      	add	sp, #12
   11840:	f85d fb04 	ldr.w	pc, [sp], #4
   11844:	1fff94b8 	.word	0x1fff94b8
   11848:	1fff94b4 	.word	0x1fff94b4

0001184c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   1184c:	b500      	push	{lr}
   1184e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11850:	f7ef fa04 	bl	c5c <Sys_GetCoreID>
   11854:	4603      	mov	r3, r0
   11856:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   11858:	4a10      	ldr	r2, [pc, #64]	; (1189c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   1185a:	9b01      	ldr	r3, [sp, #4]
   1185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11860:	2b00      	cmp	r3, #0
   11862:	d10d      	bne.n	11880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11864:	f7ef f862 	bl	92c <Adc_schm_read_msr>
   11868:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1186a:	9b00      	ldr	r3, [sp, #0]
   1186c:	f003 0301 	and.w	r3, r3, #1
   11870:	2b00      	cmp	r3, #0
   11872:	d100      	bne.n	11876 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11874:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   11876:	490a      	ldr	r1, [pc, #40]	; (118a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   11878:	9b01      	ldr	r3, [sp, #4]
   1187a:	9a00      	ldr	r2, [sp, #0]
   1187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   11880:	4a06      	ldr	r2, [pc, #24]	; (1189c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   11882:	9b01      	ldr	r3, [sp, #4]
   11884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11888:	1c5a      	adds	r2, r3, #1
   1188a:	4904      	ldr	r1, [pc, #16]	; (1189c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   1188c:	9b01      	ldr	r3, [sp, #4]
   1188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11892:	bf00      	nop
   11894:	b003      	add	sp, #12
   11896:	f85d fb04 	ldr.w	pc, [sp], #4
   1189a:	bf00      	nop
   1189c:	1fff94c0 	.word	0x1fff94c0
   118a0:	1fff94bc 	.word	0x1fff94bc

000118a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   118a4:	b500      	push	{lr}
   118a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118a8:	f7ef f9d8 	bl	c5c <Sys_GetCoreID>
   118ac:	4603      	mov	r3, r0
   118ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   118b0:	4a0d      	ldr	r2, [pc, #52]	; (118e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   118b2:	9b01      	ldr	r3, [sp, #4]
   118b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118b8:	1e5a      	subs	r2, r3, #1
   118ba:	490b      	ldr	r1, [pc, #44]	; (118e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   118bc:	9b01      	ldr	r3, [sp, #4]
   118be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   118c2:	4a0a      	ldr	r2, [pc, #40]	; (118ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   118c4:	9b01      	ldr	r3, [sp, #4]
   118c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118ca:	f003 0301 	and.w	r3, r3, #1
   118ce:	2b00      	cmp	r3, #0
   118d0:	d106      	bne.n	118e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   118d2:	4a05      	ldr	r2, [pc, #20]	; (118e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   118d4:	9b01      	ldr	r3, [sp, #4]
   118d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118da:	2b00      	cmp	r3, #0
   118dc:	d100      	bne.n	118e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   118de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   118e0:	bf00      	nop
   118e2:	b003      	add	sp, #12
   118e4:	f85d fb04 	ldr.w	pc, [sp], #4
   118e8:	1fff94c0 	.word	0x1fff94c0
   118ec:	1fff94bc 	.word	0x1fff94bc

000118f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   118f0:	b500      	push	{lr}
   118f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118f4:	f7ef f9b2 	bl	c5c <Sys_GetCoreID>
   118f8:	4603      	mov	r3, r0
   118fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   118fc:	4a10      	ldr	r2, [pc, #64]	; (11940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   118fe:	9b01      	ldr	r3, [sp, #4]
   11900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11904:	2b00      	cmp	r3, #0
   11906:	d10d      	bne.n	11924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11908:	f7ef f810 	bl	92c <Adc_schm_read_msr>
   1190c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1190e:	9b00      	ldr	r3, [sp, #0]
   11910:	f003 0301 	and.w	r3, r3, #1
   11914:	2b00      	cmp	r3, #0
   11916:	d100      	bne.n	1191a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11918:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   1191a:	490a      	ldr	r1, [pc, #40]	; (11944 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   1191c:	9b01      	ldr	r3, [sp, #4]
   1191e:	9a00      	ldr	r2, [sp, #0]
   11920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   11924:	4a06      	ldr	r2, [pc, #24]	; (11940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   11926:	9b01      	ldr	r3, [sp, #4]
   11928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1192c:	1c5a      	adds	r2, r3, #1
   1192e:	4904      	ldr	r1, [pc, #16]	; (11940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   11930:	9b01      	ldr	r3, [sp, #4]
   11932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11936:	bf00      	nop
   11938:	b003      	add	sp, #12
   1193a:	f85d fb04 	ldr.w	pc, [sp], #4
   1193e:	bf00      	nop
   11940:	1fff94c8 	.word	0x1fff94c8
   11944:	1fff94c4 	.word	0x1fff94c4

00011948 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   11948:	b500      	push	{lr}
   1194a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1194c:	f7ef f986 	bl	c5c <Sys_GetCoreID>
   11950:	4603      	mov	r3, r0
   11952:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   11954:	4a0d      	ldr	r2, [pc, #52]	; (1198c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   11956:	9b01      	ldr	r3, [sp, #4]
   11958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1195c:	1e5a      	subs	r2, r3, #1
   1195e:	490b      	ldr	r1, [pc, #44]	; (1198c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   11960:	9b01      	ldr	r3, [sp, #4]
   11962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   11966:	4a0a      	ldr	r2, [pc, #40]	; (11990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   11968:	9b01      	ldr	r3, [sp, #4]
   1196a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1196e:	f003 0301 	and.w	r3, r3, #1
   11972:	2b00      	cmp	r3, #0
   11974:	d106      	bne.n	11984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   11976:	4a05      	ldr	r2, [pc, #20]	; (1198c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   11978:	9b01      	ldr	r3, [sp, #4]
   1197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1197e:	2b00      	cmp	r3, #0
   11980:	d100      	bne.n	11984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11982:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11984:	bf00      	nop
   11986:	b003      	add	sp, #12
   11988:	f85d fb04 	ldr.w	pc, [sp], #4
   1198c:	1fff94c8 	.word	0x1fff94c8
   11990:	1fff94c4 	.word	0x1fff94c4

00011994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   11994:	b500      	push	{lr}
   11996:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11998:	f7ef f960 	bl	c5c <Sys_GetCoreID>
   1199c:	4603      	mov	r3, r0
   1199e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   119a0:	4a10      	ldr	r2, [pc, #64]	; (119e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   119a2:	9b01      	ldr	r3, [sp, #4]
   119a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119a8:	2b00      	cmp	r3, #0
   119aa:	d10d      	bne.n	119c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   119ac:	f7ee ffbe 	bl	92c <Adc_schm_read_msr>
   119b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   119b2:	9b00      	ldr	r3, [sp, #0]
   119b4:	f003 0301 	and.w	r3, r3, #1
   119b8:	2b00      	cmp	r3, #0
   119ba:	d100      	bne.n	119be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   119bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   119be:	490a      	ldr	r1, [pc, #40]	; (119e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   119c0:	9b01      	ldr	r3, [sp, #4]
   119c2:	9a00      	ldr	r2, [sp, #0]
   119c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   119c8:	4a06      	ldr	r2, [pc, #24]	; (119e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   119ca:	9b01      	ldr	r3, [sp, #4]
   119cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119d0:	1c5a      	adds	r2, r3, #1
   119d2:	4904      	ldr	r1, [pc, #16]	; (119e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   119d4:	9b01      	ldr	r3, [sp, #4]
   119d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   119da:	bf00      	nop
   119dc:	b003      	add	sp, #12
   119de:	f85d fb04 	ldr.w	pc, [sp], #4
   119e2:	bf00      	nop
   119e4:	1fff94d0 	.word	0x1fff94d0
   119e8:	1fff94cc 	.word	0x1fff94cc

000119ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   119ec:	b500      	push	{lr}
   119ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119f0:	f7ef f934 	bl	c5c <Sys_GetCoreID>
   119f4:	4603      	mov	r3, r0
   119f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   119f8:	4a0d      	ldr	r2, [pc, #52]	; (11a30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   119fa:	9b01      	ldr	r3, [sp, #4]
   119fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a00:	1e5a      	subs	r2, r3, #1
   11a02:	490b      	ldr	r1, [pc, #44]	; (11a30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   11a04:	9b01      	ldr	r3, [sp, #4]
   11a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   11a0a:	4a0a      	ldr	r2, [pc, #40]	; (11a34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   11a0c:	9b01      	ldr	r3, [sp, #4]
   11a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a12:	f003 0301 	and.w	r3, r3, #1
   11a16:	2b00      	cmp	r3, #0
   11a18:	d106      	bne.n	11a28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   11a1a:	4a05      	ldr	r2, [pc, #20]	; (11a30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   11a1c:	9b01      	ldr	r3, [sp, #4]
   11a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a22:	2b00      	cmp	r3, #0
   11a24:	d100      	bne.n	11a28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a28:	bf00      	nop
   11a2a:	b003      	add	sp, #12
   11a2c:	f85d fb04 	ldr.w	pc, [sp], #4
   11a30:	1fff94d0 	.word	0x1fff94d0
   11a34:	1fff94cc 	.word	0x1fff94cc

00011a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   11a38:	b500      	push	{lr}
   11a3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a3c:	f7ef f90e 	bl	c5c <Sys_GetCoreID>
   11a40:	4603      	mov	r3, r0
   11a42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   11a44:	4a10      	ldr	r2, [pc, #64]	; (11a88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11a46:	9b01      	ldr	r3, [sp, #4]
   11a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a4c:	2b00      	cmp	r3, #0
   11a4e:	d10d      	bne.n	11a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a50:	f7ee ff6c 	bl	92c <Adc_schm_read_msr>
   11a54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a56:	9b00      	ldr	r3, [sp, #0]
   11a58:	f003 0301 	and.w	r3, r3, #1
   11a5c:	2b00      	cmp	r3, #0
   11a5e:	d100      	bne.n	11a62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   11a62:	490a      	ldr	r1, [pc, #40]	; (11a8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   11a64:	9b01      	ldr	r3, [sp, #4]
   11a66:	9a00      	ldr	r2, [sp, #0]
   11a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   11a6c:	4a06      	ldr	r2, [pc, #24]	; (11a88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11a6e:	9b01      	ldr	r3, [sp, #4]
   11a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a74:	1c5a      	adds	r2, r3, #1
   11a76:	4904      	ldr	r1, [pc, #16]	; (11a88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11a78:	9b01      	ldr	r3, [sp, #4]
   11a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a7e:	bf00      	nop
   11a80:	b003      	add	sp, #12
   11a82:	f85d fb04 	ldr.w	pc, [sp], #4
   11a86:	bf00      	nop
   11a88:	1fff94d8 	.word	0x1fff94d8
   11a8c:	1fff94d4 	.word	0x1fff94d4

00011a90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   11a90:	b500      	push	{lr}
   11a92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a94:	f7ef f8e2 	bl	c5c <Sys_GetCoreID>
   11a98:	4603      	mov	r3, r0
   11a9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   11a9c:	4a0d      	ldr	r2, [pc, #52]	; (11ad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11a9e:	9b01      	ldr	r3, [sp, #4]
   11aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11aa4:	1e5a      	subs	r2, r3, #1
   11aa6:	490b      	ldr	r1, [pc, #44]	; (11ad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11aa8:	9b01      	ldr	r3, [sp, #4]
   11aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   11aae:	4a0a      	ldr	r2, [pc, #40]	; (11ad8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   11ab0:	9b01      	ldr	r3, [sp, #4]
   11ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ab6:	f003 0301 	and.w	r3, r3, #1
   11aba:	2b00      	cmp	r3, #0
   11abc:	d106      	bne.n	11acc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   11abe:	4a05      	ldr	r2, [pc, #20]	; (11ad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11ac0:	9b01      	ldr	r3, [sp, #4]
   11ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ac6:	2b00      	cmp	r3, #0
   11ac8:	d100      	bne.n	11acc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11aca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11acc:	bf00      	nop
   11ace:	b003      	add	sp, #12
   11ad0:	f85d fb04 	ldr.w	pc, [sp], #4
   11ad4:	1fff94d8 	.word	0x1fff94d8
   11ad8:	1fff94d4 	.word	0x1fff94d4

00011adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11adc:	b500      	push	{lr}
   11ade:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ae0:	f7ef f8bc 	bl	c5c <Sys_GetCoreID>
   11ae4:	4603      	mov	r3, r0
   11ae6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   11ae8:	4a10      	ldr	r2, [pc, #64]	; (11b2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11aea:	9b01      	ldr	r3, [sp, #4]
   11aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11af0:	2b00      	cmp	r3, #0
   11af2:	d10d      	bne.n	11b10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11af4:	f7ee ff1a 	bl	92c <Adc_schm_read_msr>
   11af8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11afa:	9b00      	ldr	r3, [sp, #0]
   11afc:	f003 0301 	and.w	r3, r3, #1
   11b00:	2b00      	cmp	r3, #0
   11b02:	d100      	bne.n	11b06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   11b06:	490a      	ldr	r1, [pc, #40]	; (11b30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   11b08:	9b01      	ldr	r3, [sp, #4]
   11b0a:	9a00      	ldr	r2, [sp, #0]
   11b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   11b10:	4a06      	ldr	r2, [pc, #24]	; (11b2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11b12:	9b01      	ldr	r3, [sp, #4]
   11b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b18:	1c5a      	adds	r2, r3, #1
   11b1a:	4904      	ldr	r1, [pc, #16]	; (11b2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11b1c:	9b01      	ldr	r3, [sp, #4]
   11b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b22:	bf00      	nop
   11b24:	b003      	add	sp, #12
   11b26:	f85d fb04 	ldr.w	pc, [sp], #4
   11b2a:	bf00      	nop
   11b2c:	1fff94e0 	.word	0x1fff94e0
   11b30:	1fff94dc 	.word	0x1fff94dc

00011b34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11b34:	b500      	push	{lr}
   11b36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b38:	f7ef f890 	bl	c5c <Sys_GetCoreID>
   11b3c:	4603      	mov	r3, r0
   11b3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   11b40:	4a0d      	ldr	r2, [pc, #52]	; (11b78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11b42:	9b01      	ldr	r3, [sp, #4]
   11b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b48:	1e5a      	subs	r2, r3, #1
   11b4a:	490b      	ldr	r1, [pc, #44]	; (11b78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11b4c:	9b01      	ldr	r3, [sp, #4]
   11b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   11b52:	4a0a      	ldr	r2, [pc, #40]	; (11b7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   11b54:	9b01      	ldr	r3, [sp, #4]
   11b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b5a:	f003 0301 	and.w	r3, r3, #1
   11b5e:	2b00      	cmp	r3, #0
   11b60:	d106      	bne.n	11b70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   11b62:	4a05      	ldr	r2, [pc, #20]	; (11b78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11b64:	9b01      	ldr	r3, [sp, #4]
   11b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b6a:	2b00      	cmp	r3, #0
   11b6c:	d100      	bne.n	11b70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b70:	bf00      	nop
   11b72:	b003      	add	sp, #12
   11b74:	f85d fb04 	ldr.w	pc, [sp], #4
   11b78:	1fff94e0 	.word	0x1fff94e0
   11b7c:	1fff94dc 	.word	0x1fff94dc

00011b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11b80:	b500      	push	{lr}
   11b82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b84:	f7ef f86a 	bl	c5c <Sys_GetCoreID>
   11b88:	4603      	mov	r3, r0
   11b8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   11b8c:	4a10      	ldr	r2, [pc, #64]	; (11bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11b8e:	9b01      	ldr	r3, [sp, #4]
   11b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b94:	2b00      	cmp	r3, #0
   11b96:	d10d      	bne.n	11bb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b98:	f7ee fec8 	bl	92c <Adc_schm_read_msr>
   11b9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b9e:	9b00      	ldr	r3, [sp, #0]
   11ba0:	f003 0301 	and.w	r3, r3, #1
   11ba4:	2b00      	cmp	r3, #0
   11ba6:	d100      	bne.n	11baa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ba8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   11baa:	490a      	ldr	r1, [pc, #40]	; (11bd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   11bac:	9b01      	ldr	r3, [sp, #4]
   11bae:	9a00      	ldr	r2, [sp, #0]
   11bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   11bb4:	4a06      	ldr	r2, [pc, #24]	; (11bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11bb6:	9b01      	ldr	r3, [sp, #4]
   11bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bbc:	1c5a      	adds	r2, r3, #1
   11bbe:	4904      	ldr	r1, [pc, #16]	; (11bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11bc0:	9b01      	ldr	r3, [sp, #4]
   11bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11bc6:	bf00      	nop
   11bc8:	b003      	add	sp, #12
   11bca:	f85d fb04 	ldr.w	pc, [sp], #4
   11bce:	bf00      	nop
   11bd0:	1fff94e8 	.word	0x1fff94e8
   11bd4:	1fff94e4 	.word	0x1fff94e4

00011bd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11bd8:	b500      	push	{lr}
   11bda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bdc:	f7ef f83e 	bl	c5c <Sys_GetCoreID>
   11be0:	4603      	mov	r3, r0
   11be2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   11be4:	4a0d      	ldr	r2, [pc, #52]	; (11c1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11be6:	9b01      	ldr	r3, [sp, #4]
   11be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bec:	1e5a      	subs	r2, r3, #1
   11bee:	490b      	ldr	r1, [pc, #44]	; (11c1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11bf0:	9b01      	ldr	r3, [sp, #4]
   11bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   11bf6:	4a0a      	ldr	r2, [pc, #40]	; (11c20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   11bf8:	9b01      	ldr	r3, [sp, #4]
   11bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bfe:	f003 0301 	and.w	r3, r3, #1
   11c02:	2b00      	cmp	r3, #0
   11c04:	d106      	bne.n	11c14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   11c06:	4a05      	ldr	r2, [pc, #20]	; (11c1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11c08:	9b01      	ldr	r3, [sp, #4]
   11c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c0e:	2b00      	cmp	r3, #0
   11c10:	d100      	bne.n	11c14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c14:	bf00      	nop
   11c16:	b003      	add	sp, #12
   11c18:	f85d fb04 	ldr.w	pc, [sp], #4
   11c1c:	1fff94e8 	.word	0x1fff94e8
   11c20:	1fff94e4 	.word	0x1fff94e4

00011c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11c24:	b500      	push	{lr}
   11c26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c28:	f7ef f818 	bl	c5c <Sys_GetCoreID>
   11c2c:	4603      	mov	r3, r0
   11c2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   11c30:	4a10      	ldr	r2, [pc, #64]	; (11c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11c32:	9b01      	ldr	r3, [sp, #4]
   11c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c38:	2b00      	cmp	r3, #0
   11c3a:	d10d      	bne.n	11c58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c3c:	f7ee fe76 	bl	92c <Adc_schm_read_msr>
   11c40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c42:	9b00      	ldr	r3, [sp, #0]
   11c44:	f003 0301 	and.w	r3, r3, #1
   11c48:	2b00      	cmp	r3, #0
   11c4a:	d100      	bne.n	11c4e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   11c4e:	490a      	ldr	r1, [pc, #40]	; (11c78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   11c50:	9b01      	ldr	r3, [sp, #4]
   11c52:	9a00      	ldr	r2, [sp, #0]
   11c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   11c58:	4a06      	ldr	r2, [pc, #24]	; (11c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11c5a:	9b01      	ldr	r3, [sp, #4]
   11c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c60:	1c5a      	adds	r2, r3, #1
   11c62:	4904      	ldr	r1, [pc, #16]	; (11c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11c64:	9b01      	ldr	r3, [sp, #4]
   11c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c6a:	bf00      	nop
   11c6c:	b003      	add	sp, #12
   11c6e:	f85d fb04 	ldr.w	pc, [sp], #4
   11c72:	bf00      	nop
   11c74:	1fff94f0 	.word	0x1fff94f0
   11c78:	1fff94ec 	.word	0x1fff94ec

00011c7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11c7c:	b500      	push	{lr}
   11c7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c80:	f7ee ffec 	bl	c5c <Sys_GetCoreID>
   11c84:	4603      	mov	r3, r0
   11c86:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   11c88:	4a0d      	ldr	r2, [pc, #52]	; (11cc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11c8a:	9b01      	ldr	r3, [sp, #4]
   11c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c90:	1e5a      	subs	r2, r3, #1
   11c92:	490b      	ldr	r1, [pc, #44]	; (11cc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11c94:	9b01      	ldr	r3, [sp, #4]
   11c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   11c9a:	4a0a      	ldr	r2, [pc, #40]	; (11cc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   11c9c:	9b01      	ldr	r3, [sp, #4]
   11c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ca2:	f003 0301 	and.w	r3, r3, #1
   11ca6:	2b00      	cmp	r3, #0
   11ca8:	d106      	bne.n	11cb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   11caa:	4a05      	ldr	r2, [pc, #20]	; (11cc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11cac:	9b01      	ldr	r3, [sp, #4]
   11cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cb2:	2b00      	cmp	r3, #0
   11cb4:	d100      	bne.n	11cb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11cb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11cb8:	bf00      	nop
   11cba:	b003      	add	sp, #12
   11cbc:	f85d fb04 	ldr.w	pc, [sp], #4
   11cc0:	1fff94f0 	.word	0x1fff94f0
   11cc4:	1fff94ec 	.word	0x1fff94ec

00011cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11cc8:	b500      	push	{lr}
   11cca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ccc:	f7ee ffc6 	bl	c5c <Sys_GetCoreID>
   11cd0:	4603      	mov	r3, r0
   11cd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   11cd4:	4a10      	ldr	r2, [pc, #64]	; (11d18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11cd6:	9b01      	ldr	r3, [sp, #4]
   11cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cdc:	2b00      	cmp	r3, #0
   11cde:	d10d      	bne.n	11cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ce0:	f7ee fe24 	bl	92c <Adc_schm_read_msr>
   11ce4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ce6:	9b00      	ldr	r3, [sp, #0]
   11ce8:	f003 0301 	and.w	r3, r3, #1
   11cec:	2b00      	cmp	r3, #0
   11cee:	d100      	bne.n	11cf2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11cf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   11cf2:	490a      	ldr	r1, [pc, #40]	; (11d1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   11cf4:	9b01      	ldr	r3, [sp, #4]
   11cf6:	9a00      	ldr	r2, [sp, #0]
   11cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   11cfc:	4a06      	ldr	r2, [pc, #24]	; (11d18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11cfe:	9b01      	ldr	r3, [sp, #4]
   11d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d04:	1c5a      	adds	r2, r3, #1
   11d06:	4904      	ldr	r1, [pc, #16]	; (11d18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11d08:	9b01      	ldr	r3, [sp, #4]
   11d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d0e:	bf00      	nop
   11d10:	b003      	add	sp, #12
   11d12:	f85d fb04 	ldr.w	pc, [sp], #4
   11d16:	bf00      	nop
   11d18:	1fff94f8 	.word	0x1fff94f8
   11d1c:	1fff94f4 	.word	0x1fff94f4

00011d20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11d20:	b500      	push	{lr}
   11d22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d24:	f7ee ff9a 	bl	c5c <Sys_GetCoreID>
   11d28:	4603      	mov	r3, r0
   11d2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   11d2c:	4a0d      	ldr	r2, [pc, #52]	; (11d64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11d2e:	9b01      	ldr	r3, [sp, #4]
   11d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d34:	1e5a      	subs	r2, r3, #1
   11d36:	490b      	ldr	r1, [pc, #44]	; (11d64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11d38:	9b01      	ldr	r3, [sp, #4]
   11d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   11d3e:	4a0a      	ldr	r2, [pc, #40]	; (11d68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   11d40:	9b01      	ldr	r3, [sp, #4]
   11d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d46:	f003 0301 	and.w	r3, r3, #1
   11d4a:	2b00      	cmp	r3, #0
   11d4c:	d106      	bne.n	11d5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   11d4e:	4a05      	ldr	r2, [pc, #20]	; (11d64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11d50:	9b01      	ldr	r3, [sp, #4]
   11d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d56:	2b00      	cmp	r3, #0
   11d58:	d100      	bne.n	11d5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d5c:	bf00      	nop
   11d5e:	b003      	add	sp, #12
   11d60:	f85d fb04 	ldr.w	pc, [sp], #4
   11d64:	1fff94f8 	.word	0x1fff94f8
   11d68:	1fff94f4 	.word	0x1fff94f4

00011d6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11d6c:	b500      	push	{lr}
   11d6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d70:	f7ee ff74 	bl	c5c <Sys_GetCoreID>
   11d74:	4603      	mov	r3, r0
   11d76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   11d78:	4a10      	ldr	r2, [pc, #64]	; (11dbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11d7a:	9b01      	ldr	r3, [sp, #4]
   11d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d80:	2b00      	cmp	r3, #0
   11d82:	d10d      	bne.n	11da0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d84:	f7ee fdd2 	bl	92c <Adc_schm_read_msr>
   11d88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d8a:	9b00      	ldr	r3, [sp, #0]
   11d8c:	f003 0301 	and.w	r3, r3, #1
   11d90:	2b00      	cmp	r3, #0
   11d92:	d100      	bne.n	11d96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   11d96:	490a      	ldr	r1, [pc, #40]	; (11dc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   11d98:	9b01      	ldr	r3, [sp, #4]
   11d9a:	9a00      	ldr	r2, [sp, #0]
   11d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   11da0:	4a06      	ldr	r2, [pc, #24]	; (11dbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11da2:	9b01      	ldr	r3, [sp, #4]
   11da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11da8:	1c5a      	adds	r2, r3, #1
   11daa:	4904      	ldr	r1, [pc, #16]	; (11dbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11dac:	9b01      	ldr	r3, [sp, #4]
   11dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11db2:	bf00      	nop
   11db4:	b003      	add	sp, #12
   11db6:	f85d fb04 	ldr.w	pc, [sp], #4
   11dba:	bf00      	nop
   11dbc:	1fff9500 	.word	0x1fff9500
   11dc0:	1fff94fc 	.word	0x1fff94fc

00011dc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11dc4:	b500      	push	{lr}
   11dc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11dc8:	f7ee ff48 	bl	c5c <Sys_GetCoreID>
   11dcc:	4603      	mov	r3, r0
   11dce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   11dd0:	4a0d      	ldr	r2, [pc, #52]	; (11e08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11dd2:	9b01      	ldr	r3, [sp, #4]
   11dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dd8:	1e5a      	subs	r2, r3, #1
   11dda:	490b      	ldr	r1, [pc, #44]	; (11e08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11ddc:	9b01      	ldr	r3, [sp, #4]
   11dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   11de2:	4a0a      	ldr	r2, [pc, #40]	; (11e0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   11de4:	9b01      	ldr	r3, [sp, #4]
   11de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dea:	f003 0301 	and.w	r3, r3, #1
   11dee:	2b00      	cmp	r3, #0
   11df0:	d106      	bne.n	11e00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   11df2:	4a05      	ldr	r2, [pc, #20]	; (11e08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11df4:	9b01      	ldr	r3, [sp, #4]
   11df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dfa:	2b00      	cmp	r3, #0
   11dfc:	d100      	bne.n	11e00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11dfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e00:	bf00      	nop
   11e02:	b003      	add	sp, #12
   11e04:	f85d fb04 	ldr.w	pc, [sp], #4
   11e08:	1fff9500 	.word	0x1fff9500
   11e0c:	1fff94fc 	.word	0x1fff94fc

00011e10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11e10:	b500      	push	{lr}
   11e12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e14:	f7ee ff22 	bl	c5c <Sys_GetCoreID>
   11e18:	4603      	mov	r3, r0
   11e1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   11e1c:	4a10      	ldr	r2, [pc, #64]	; (11e60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11e1e:	9b01      	ldr	r3, [sp, #4]
   11e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e24:	2b00      	cmp	r3, #0
   11e26:	d10d      	bne.n	11e44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e28:	f7ee fd80 	bl	92c <Adc_schm_read_msr>
   11e2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e2e:	9b00      	ldr	r3, [sp, #0]
   11e30:	f003 0301 	and.w	r3, r3, #1
   11e34:	2b00      	cmp	r3, #0
   11e36:	d100      	bne.n	11e3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   11e3a:	490a      	ldr	r1, [pc, #40]	; (11e64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   11e3c:	9b01      	ldr	r3, [sp, #4]
   11e3e:	9a00      	ldr	r2, [sp, #0]
   11e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   11e44:	4a06      	ldr	r2, [pc, #24]	; (11e60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11e46:	9b01      	ldr	r3, [sp, #4]
   11e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e4c:	1c5a      	adds	r2, r3, #1
   11e4e:	4904      	ldr	r1, [pc, #16]	; (11e60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11e50:	9b01      	ldr	r3, [sp, #4]
   11e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e56:	bf00      	nop
   11e58:	b003      	add	sp, #12
   11e5a:	f85d fb04 	ldr.w	pc, [sp], #4
   11e5e:	bf00      	nop
   11e60:	1fff9508 	.word	0x1fff9508
   11e64:	1fff9504 	.word	0x1fff9504

00011e68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11e68:	b500      	push	{lr}
   11e6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e6c:	f7ee fef6 	bl	c5c <Sys_GetCoreID>
   11e70:	4603      	mov	r3, r0
   11e72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   11e74:	4a0d      	ldr	r2, [pc, #52]	; (11eac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11e76:	9b01      	ldr	r3, [sp, #4]
   11e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e7c:	1e5a      	subs	r2, r3, #1
   11e7e:	490b      	ldr	r1, [pc, #44]	; (11eac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11e80:	9b01      	ldr	r3, [sp, #4]
   11e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   11e86:	4a0a      	ldr	r2, [pc, #40]	; (11eb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   11e88:	9b01      	ldr	r3, [sp, #4]
   11e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e8e:	f003 0301 	and.w	r3, r3, #1
   11e92:	2b00      	cmp	r3, #0
   11e94:	d106      	bne.n	11ea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   11e96:	4a05      	ldr	r2, [pc, #20]	; (11eac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11e98:	9b01      	ldr	r3, [sp, #4]
   11e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e9e:	2b00      	cmp	r3, #0
   11ea0:	d100      	bne.n	11ea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ea2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ea4:	bf00      	nop
   11ea6:	b003      	add	sp, #12
   11ea8:	f85d fb04 	ldr.w	pc, [sp], #4
   11eac:	1fff9508 	.word	0x1fff9508
   11eb0:	1fff9504 	.word	0x1fff9504

00011eb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11eb4:	b500      	push	{lr}
   11eb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11eb8:	f7ee fed0 	bl	c5c <Sys_GetCoreID>
   11ebc:	4603      	mov	r3, r0
   11ebe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   11ec0:	4a10      	ldr	r2, [pc, #64]	; (11f04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11ec2:	9b01      	ldr	r3, [sp, #4]
   11ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ec8:	2b00      	cmp	r3, #0
   11eca:	d10d      	bne.n	11ee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ecc:	f7ee fd2e 	bl	92c <Adc_schm_read_msr>
   11ed0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ed2:	9b00      	ldr	r3, [sp, #0]
   11ed4:	f003 0301 	and.w	r3, r3, #1
   11ed8:	2b00      	cmp	r3, #0
   11eda:	d100      	bne.n	11ede <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11edc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   11ede:	490a      	ldr	r1, [pc, #40]	; (11f08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   11ee0:	9b01      	ldr	r3, [sp, #4]
   11ee2:	9a00      	ldr	r2, [sp, #0]
   11ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   11ee8:	4a06      	ldr	r2, [pc, #24]	; (11f04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11eea:	9b01      	ldr	r3, [sp, #4]
   11eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ef0:	1c5a      	adds	r2, r3, #1
   11ef2:	4904      	ldr	r1, [pc, #16]	; (11f04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11ef4:	9b01      	ldr	r3, [sp, #4]
   11ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11efa:	bf00      	nop
   11efc:	b003      	add	sp, #12
   11efe:	f85d fb04 	ldr.w	pc, [sp], #4
   11f02:	bf00      	nop
   11f04:	1fff9510 	.word	0x1fff9510
   11f08:	1fff950c 	.word	0x1fff950c

00011f0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11f0c:	b500      	push	{lr}
   11f0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f10:	f7ee fea4 	bl	c5c <Sys_GetCoreID>
   11f14:	4603      	mov	r3, r0
   11f16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   11f18:	4a0d      	ldr	r2, [pc, #52]	; (11f50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11f1a:	9b01      	ldr	r3, [sp, #4]
   11f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f20:	1e5a      	subs	r2, r3, #1
   11f22:	490b      	ldr	r1, [pc, #44]	; (11f50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11f24:	9b01      	ldr	r3, [sp, #4]
   11f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   11f2a:	4a0a      	ldr	r2, [pc, #40]	; (11f54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   11f2c:	9b01      	ldr	r3, [sp, #4]
   11f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f32:	f003 0301 	and.w	r3, r3, #1
   11f36:	2b00      	cmp	r3, #0
   11f38:	d106      	bne.n	11f48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   11f3a:	4a05      	ldr	r2, [pc, #20]	; (11f50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11f3c:	9b01      	ldr	r3, [sp, #4]
   11f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f42:	2b00      	cmp	r3, #0
   11f44:	d100      	bne.n	11f48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f48:	bf00      	nop
   11f4a:	b003      	add	sp, #12
   11f4c:	f85d fb04 	ldr.w	pc, [sp], #4
   11f50:	1fff9510 	.word	0x1fff9510
   11f54:	1fff950c 	.word	0x1fff950c

00011f58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11f58:	b500      	push	{lr}
   11f5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f5c:	f7ee fe7e 	bl	c5c <Sys_GetCoreID>
   11f60:	4603      	mov	r3, r0
   11f62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   11f64:	4a10      	ldr	r2, [pc, #64]	; (11fa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11f66:	9b01      	ldr	r3, [sp, #4]
   11f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f6c:	2b00      	cmp	r3, #0
   11f6e:	d10d      	bne.n	11f8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f70:	f7ee fcdc 	bl	92c <Adc_schm_read_msr>
   11f74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f76:	9b00      	ldr	r3, [sp, #0]
   11f78:	f003 0301 	and.w	r3, r3, #1
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	d100      	bne.n	11f82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   11f82:	490a      	ldr	r1, [pc, #40]	; (11fac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   11f84:	9b01      	ldr	r3, [sp, #4]
   11f86:	9a00      	ldr	r2, [sp, #0]
   11f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   11f8c:	4a06      	ldr	r2, [pc, #24]	; (11fa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11f8e:	9b01      	ldr	r3, [sp, #4]
   11f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f94:	1c5a      	adds	r2, r3, #1
   11f96:	4904      	ldr	r1, [pc, #16]	; (11fa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11f98:	9b01      	ldr	r3, [sp, #4]
   11f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f9e:	bf00      	nop
   11fa0:	b003      	add	sp, #12
   11fa2:	f85d fb04 	ldr.w	pc, [sp], #4
   11fa6:	bf00      	nop
   11fa8:	1fff9518 	.word	0x1fff9518
   11fac:	1fff9514 	.word	0x1fff9514

00011fb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11fb0:	b500      	push	{lr}
   11fb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fb4:	f7ee fe52 	bl	c5c <Sys_GetCoreID>
   11fb8:	4603      	mov	r3, r0
   11fba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   11fbc:	4a0d      	ldr	r2, [pc, #52]	; (11ff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11fbe:	9b01      	ldr	r3, [sp, #4]
   11fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fc4:	1e5a      	subs	r2, r3, #1
   11fc6:	490b      	ldr	r1, [pc, #44]	; (11ff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11fc8:	9b01      	ldr	r3, [sp, #4]
   11fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   11fce:	4a0a      	ldr	r2, [pc, #40]	; (11ff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   11fd0:	9b01      	ldr	r3, [sp, #4]
   11fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fd6:	f003 0301 	and.w	r3, r3, #1
   11fda:	2b00      	cmp	r3, #0
   11fdc:	d106      	bne.n	11fec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   11fde:	4a05      	ldr	r2, [pc, #20]	; (11ff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11fe0:	9b01      	ldr	r3, [sp, #4]
   11fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fe6:	2b00      	cmp	r3, #0
   11fe8:	d100      	bne.n	11fec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11fea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11fec:	bf00      	nop
   11fee:	b003      	add	sp, #12
   11ff0:	f85d fb04 	ldr.w	pc, [sp], #4
   11ff4:	1fff9518 	.word	0x1fff9518
   11ff8:	1fff9514 	.word	0x1fff9514

00011ffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   11ffc:	b500      	push	{lr}
   11ffe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12000:	f7ee fe2c 	bl	c5c <Sys_GetCoreID>
   12004:	4603      	mov	r3, r0
   12006:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   12008:	4a10      	ldr	r2, [pc, #64]	; (1204c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1200a:	9b01      	ldr	r3, [sp, #4]
   1200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12010:	2b00      	cmp	r3, #0
   12012:	d10d      	bne.n	12030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12014:	f7ee fc8a 	bl	92c <Adc_schm_read_msr>
   12018:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1201a:	9b00      	ldr	r3, [sp, #0]
   1201c:	f003 0301 	and.w	r3, r3, #1
   12020:	2b00      	cmp	r3, #0
   12022:	d100      	bne.n	12026 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12024:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   12026:	490a      	ldr	r1, [pc, #40]	; (12050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   12028:	9b01      	ldr	r3, [sp, #4]
   1202a:	9a00      	ldr	r2, [sp, #0]
   1202c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   12030:	4a06      	ldr	r2, [pc, #24]	; (1204c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   12032:	9b01      	ldr	r3, [sp, #4]
   12034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12038:	1c5a      	adds	r2, r3, #1
   1203a:	4904      	ldr	r1, [pc, #16]	; (1204c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1203c:	9b01      	ldr	r3, [sp, #4]
   1203e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12042:	bf00      	nop
   12044:	b003      	add	sp, #12
   12046:	f85d fb04 	ldr.w	pc, [sp], #4
   1204a:	bf00      	nop
   1204c:	1fff9520 	.word	0x1fff9520
   12050:	1fff951c 	.word	0x1fff951c

00012054 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   12054:	b500      	push	{lr}
   12056:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12058:	f7ee fe00 	bl	c5c <Sys_GetCoreID>
   1205c:	4603      	mov	r3, r0
   1205e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   12060:	4a0d      	ldr	r2, [pc, #52]	; (12098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   12062:	9b01      	ldr	r3, [sp, #4]
   12064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12068:	1e5a      	subs	r2, r3, #1
   1206a:	490b      	ldr	r1, [pc, #44]	; (12098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   1206c:	9b01      	ldr	r3, [sp, #4]
   1206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   12072:	4a0a      	ldr	r2, [pc, #40]	; (1209c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   12074:	9b01      	ldr	r3, [sp, #4]
   12076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1207a:	f003 0301 	and.w	r3, r3, #1
   1207e:	2b00      	cmp	r3, #0
   12080:	d106      	bne.n	12090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   12082:	4a05      	ldr	r2, [pc, #20]	; (12098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   12084:	9b01      	ldr	r3, [sp, #4]
   12086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1208a:	2b00      	cmp	r3, #0
   1208c:	d100      	bne.n	12090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1208e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12090:	bf00      	nop
   12092:	b003      	add	sp, #12
   12094:	f85d fb04 	ldr.w	pc, [sp], #4
   12098:	1fff9520 	.word	0x1fff9520
   1209c:	1fff951c 	.word	0x1fff951c

000120a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   120a0:	b500      	push	{lr}
   120a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120a4:	f7ee fdda 	bl	c5c <Sys_GetCoreID>
   120a8:	4603      	mov	r3, r0
   120aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   120ac:	4a10      	ldr	r2, [pc, #64]	; (120f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   120ae:	9b01      	ldr	r3, [sp, #4]
   120b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120b4:	2b00      	cmp	r3, #0
   120b6:	d10d      	bne.n	120d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   120b8:	f7ee fc38 	bl	92c <Adc_schm_read_msr>
   120bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   120be:	9b00      	ldr	r3, [sp, #0]
   120c0:	f003 0301 	and.w	r3, r3, #1
   120c4:	2b00      	cmp	r3, #0
   120c6:	d100      	bne.n	120ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   120ca:	490a      	ldr	r1, [pc, #40]	; (120f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   120cc:	9b01      	ldr	r3, [sp, #4]
   120ce:	9a00      	ldr	r2, [sp, #0]
   120d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   120d4:	4a06      	ldr	r2, [pc, #24]	; (120f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   120d6:	9b01      	ldr	r3, [sp, #4]
   120d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120dc:	1c5a      	adds	r2, r3, #1
   120de:	4904      	ldr	r1, [pc, #16]	; (120f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   120e0:	9b01      	ldr	r3, [sp, #4]
   120e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   120e6:	bf00      	nop
   120e8:	b003      	add	sp, #12
   120ea:	f85d fb04 	ldr.w	pc, [sp], #4
   120ee:	bf00      	nop
   120f0:	1fff9528 	.word	0x1fff9528
   120f4:	1fff9524 	.word	0x1fff9524

000120f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   120f8:	b500      	push	{lr}
   120fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120fc:	f7ee fdae 	bl	c5c <Sys_GetCoreID>
   12100:	4603      	mov	r3, r0
   12102:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   12104:	4a0d      	ldr	r2, [pc, #52]	; (1213c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   12106:	9b01      	ldr	r3, [sp, #4]
   12108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1210c:	1e5a      	subs	r2, r3, #1
   1210e:	490b      	ldr	r1, [pc, #44]	; (1213c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   12110:	9b01      	ldr	r3, [sp, #4]
   12112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   12116:	4a0a      	ldr	r2, [pc, #40]	; (12140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   12118:	9b01      	ldr	r3, [sp, #4]
   1211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1211e:	f003 0301 	and.w	r3, r3, #1
   12122:	2b00      	cmp	r3, #0
   12124:	d106      	bne.n	12134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   12126:	4a05      	ldr	r2, [pc, #20]	; (1213c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   12128:	9b01      	ldr	r3, [sp, #4]
   1212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1212e:	2b00      	cmp	r3, #0
   12130:	d100      	bne.n	12134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12132:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12134:	bf00      	nop
   12136:	b003      	add	sp, #12
   12138:	f85d fb04 	ldr.w	pc, [sp], #4
   1213c:	1fff9528 	.word	0x1fff9528
   12140:	1fff9524 	.word	0x1fff9524

00012144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   12144:	b500      	push	{lr}
   12146:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12148:	f7ee fd88 	bl	c5c <Sys_GetCoreID>
   1214c:	4603      	mov	r3, r0
   1214e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   12150:	4a10      	ldr	r2, [pc, #64]	; (12194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   12152:	9b01      	ldr	r3, [sp, #4]
   12154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12158:	2b00      	cmp	r3, #0
   1215a:	d10d      	bne.n	12178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1215c:	f7ee fbe6 	bl	92c <Adc_schm_read_msr>
   12160:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12162:	9b00      	ldr	r3, [sp, #0]
   12164:	f003 0301 	and.w	r3, r3, #1
   12168:	2b00      	cmp	r3, #0
   1216a:	d100      	bne.n	1216e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1216c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   1216e:	490a      	ldr	r1, [pc, #40]	; (12198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   12170:	9b01      	ldr	r3, [sp, #4]
   12172:	9a00      	ldr	r2, [sp, #0]
   12174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   12178:	4a06      	ldr	r2, [pc, #24]	; (12194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   1217a:	9b01      	ldr	r3, [sp, #4]
   1217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12180:	1c5a      	adds	r2, r3, #1
   12182:	4904      	ldr	r1, [pc, #16]	; (12194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   12184:	9b01      	ldr	r3, [sp, #4]
   12186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1218a:	bf00      	nop
   1218c:	b003      	add	sp, #12
   1218e:	f85d fb04 	ldr.w	pc, [sp], #4
   12192:	bf00      	nop
   12194:	1fff9530 	.word	0x1fff9530
   12198:	1fff952c 	.word	0x1fff952c

0001219c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   1219c:	b500      	push	{lr}
   1219e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121a0:	f7ee fd5c 	bl	c5c <Sys_GetCoreID>
   121a4:	4603      	mov	r3, r0
   121a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   121a8:	4a0d      	ldr	r2, [pc, #52]	; (121e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   121aa:	9b01      	ldr	r3, [sp, #4]
   121ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121b0:	1e5a      	subs	r2, r3, #1
   121b2:	490b      	ldr	r1, [pc, #44]	; (121e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   121b4:	9b01      	ldr	r3, [sp, #4]
   121b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   121ba:	4a0a      	ldr	r2, [pc, #40]	; (121e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   121bc:	9b01      	ldr	r3, [sp, #4]
   121be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121c2:	f003 0301 	and.w	r3, r3, #1
   121c6:	2b00      	cmp	r3, #0
   121c8:	d106      	bne.n	121d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   121ca:	4a05      	ldr	r2, [pc, #20]	; (121e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   121cc:	9b01      	ldr	r3, [sp, #4]
   121ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121d2:	2b00      	cmp	r3, #0
   121d4:	d100      	bne.n	121d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   121d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   121d8:	bf00      	nop
   121da:	b003      	add	sp, #12
   121dc:	f85d fb04 	ldr.w	pc, [sp], #4
   121e0:	1fff9530 	.word	0x1fff9530
   121e4:	1fff952c 	.word	0x1fff952c

000121e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   121e8:	b500      	push	{lr}
   121ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121ec:	f7ee fd36 	bl	c5c <Sys_GetCoreID>
   121f0:	4603      	mov	r3, r0
   121f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   121f4:	4a10      	ldr	r2, [pc, #64]	; (12238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   121f6:	9b01      	ldr	r3, [sp, #4]
   121f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121fc:	2b00      	cmp	r3, #0
   121fe:	d10d      	bne.n	1221c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12200:	f7ee fb94 	bl	92c <Adc_schm_read_msr>
   12204:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12206:	9b00      	ldr	r3, [sp, #0]
   12208:	f003 0301 	and.w	r3, r3, #1
   1220c:	2b00      	cmp	r3, #0
   1220e:	d100      	bne.n	12212 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12210:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   12212:	490a      	ldr	r1, [pc, #40]	; (1223c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   12214:	9b01      	ldr	r3, [sp, #4]
   12216:	9a00      	ldr	r2, [sp, #0]
   12218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   1221c:	4a06      	ldr	r2, [pc, #24]	; (12238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1221e:	9b01      	ldr	r3, [sp, #4]
   12220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12224:	1c5a      	adds	r2, r3, #1
   12226:	4904      	ldr	r1, [pc, #16]	; (12238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   12228:	9b01      	ldr	r3, [sp, #4]
   1222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1222e:	bf00      	nop
   12230:	b003      	add	sp, #12
   12232:	f85d fb04 	ldr.w	pc, [sp], #4
   12236:	bf00      	nop
   12238:	1fff9538 	.word	0x1fff9538
   1223c:	1fff9534 	.word	0x1fff9534

00012240 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   12240:	b500      	push	{lr}
   12242:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12244:	f7ee fd0a 	bl	c5c <Sys_GetCoreID>
   12248:	4603      	mov	r3, r0
   1224a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   1224c:	4a0d      	ldr	r2, [pc, #52]	; (12284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   1224e:	9b01      	ldr	r3, [sp, #4]
   12250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12254:	1e5a      	subs	r2, r3, #1
   12256:	490b      	ldr	r1, [pc, #44]	; (12284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   12258:	9b01      	ldr	r3, [sp, #4]
   1225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   1225e:	4a0a      	ldr	r2, [pc, #40]	; (12288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   12260:	9b01      	ldr	r3, [sp, #4]
   12262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12266:	f003 0301 	and.w	r3, r3, #1
   1226a:	2b00      	cmp	r3, #0
   1226c:	d106      	bne.n	1227c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   1226e:	4a05      	ldr	r2, [pc, #20]	; (12284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   12270:	9b01      	ldr	r3, [sp, #4]
   12272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12276:	2b00      	cmp	r3, #0
   12278:	d100      	bne.n	1227c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1227a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1227c:	bf00      	nop
   1227e:	b003      	add	sp, #12
   12280:	f85d fb04 	ldr.w	pc, [sp], #4
   12284:	1fff9538 	.word	0x1fff9538
   12288:	1fff9534 	.word	0x1fff9534

0001228c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   1228c:	b500      	push	{lr}
   1228e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12290:	f7ee fce4 	bl	c5c <Sys_GetCoreID>
   12294:	4603      	mov	r3, r0
   12296:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   12298:	4a10      	ldr	r2, [pc, #64]	; (122dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1229a:	9b01      	ldr	r3, [sp, #4]
   1229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122a0:	2b00      	cmp	r3, #0
   122a2:	d10d      	bne.n	122c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   122a4:	f7ee fb42 	bl	92c <Adc_schm_read_msr>
   122a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   122aa:	9b00      	ldr	r3, [sp, #0]
   122ac:	f003 0301 	and.w	r3, r3, #1
   122b0:	2b00      	cmp	r3, #0
   122b2:	d100      	bne.n	122b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   122b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   122b6:	490a      	ldr	r1, [pc, #40]	; (122e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   122b8:	9b01      	ldr	r3, [sp, #4]
   122ba:	9a00      	ldr	r2, [sp, #0]
   122bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   122c0:	4a06      	ldr	r2, [pc, #24]	; (122dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   122c2:	9b01      	ldr	r3, [sp, #4]
   122c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122c8:	1c5a      	adds	r2, r3, #1
   122ca:	4904      	ldr	r1, [pc, #16]	; (122dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   122cc:	9b01      	ldr	r3, [sp, #4]
   122ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   122d2:	bf00      	nop
   122d4:	b003      	add	sp, #12
   122d6:	f85d fb04 	ldr.w	pc, [sp], #4
   122da:	bf00      	nop
   122dc:	1fff9540 	.word	0x1fff9540
   122e0:	1fff953c 	.word	0x1fff953c

000122e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   122e4:	b500      	push	{lr}
   122e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122e8:	f7ee fcb8 	bl	c5c <Sys_GetCoreID>
   122ec:	4603      	mov	r3, r0
   122ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   122f0:	4a0d      	ldr	r2, [pc, #52]	; (12328 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   122f2:	9b01      	ldr	r3, [sp, #4]
   122f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122f8:	1e5a      	subs	r2, r3, #1
   122fa:	490b      	ldr	r1, [pc, #44]	; (12328 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   122fc:	9b01      	ldr	r3, [sp, #4]
   122fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   12302:	4a0a      	ldr	r2, [pc, #40]	; (1232c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   12304:	9b01      	ldr	r3, [sp, #4]
   12306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1230a:	f003 0301 	and.w	r3, r3, #1
   1230e:	2b00      	cmp	r3, #0
   12310:	d106      	bne.n	12320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   12312:	4a05      	ldr	r2, [pc, #20]	; (12328 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   12314:	9b01      	ldr	r3, [sp, #4]
   12316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1231a:	2b00      	cmp	r3, #0
   1231c:	d100      	bne.n	12320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1231e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12320:	bf00      	nop
   12322:	b003      	add	sp, #12
   12324:	f85d fb04 	ldr.w	pc, [sp], #4
   12328:	1fff9540 	.word	0x1fff9540
   1232c:	1fff953c 	.word	0x1fff953c

00012330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   12330:	b500      	push	{lr}
   12332:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12334:	f7ee fc92 	bl	c5c <Sys_GetCoreID>
   12338:	4603      	mov	r3, r0
   1233a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   1233c:	4a10      	ldr	r2, [pc, #64]	; (12380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   1233e:	9b01      	ldr	r3, [sp, #4]
   12340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12344:	2b00      	cmp	r3, #0
   12346:	d10d      	bne.n	12364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12348:	f7ee faf0 	bl	92c <Adc_schm_read_msr>
   1234c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1234e:	9b00      	ldr	r3, [sp, #0]
   12350:	f003 0301 	and.w	r3, r3, #1
   12354:	2b00      	cmp	r3, #0
   12356:	d100      	bne.n	1235a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12358:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   1235a:	490a      	ldr	r1, [pc, #40]	; (12384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   1235c:	9b01      	ldr	r3, [sp, #4]
   1235e:	9a00      	ldr	r2, [sp, #0]
   12360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   12364:	4a06      	ldr	r2, [pc, #24]	; (12380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   12366:	9b01      	ldr	r3, [sp, #4]
   12368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1236c:	1c5a      	adds	r2, r3, #1
   1236e:	4904      	ldr	r1, [pc, #16]	; (12380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   12370:	9b01      	ldr	r3, [sp, #4]
   12372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12376:	bf00      	nop
   12378:	b003      	add	sp, #12
   1237a:	f85d fb04 	ldr.w	pc, [sp], #4
   1237e:	bf00      	nop
   12380:	1fff9548 	.word	0x1fff9548
   12384:	1fff9544 	.word	0x1fff9544

00012388 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   12388:	b500      	push	{lr}
   1238a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1238c:	f7ee fc66 	bl	c5c <Sys_GetCoreID>
   12390:	4603      	mov	r3, r0
   12392:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   12394:	4a0d      	ldr	r2, [pc, #52]	; (123cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   12396:	9b01      	ldr	r3, [sp, #4]
   12398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1239c:	1e5a      	subs	r2, r3, #1
   1239e:	490b      	ldr	r1, [pc, #44]	; (123cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   123a0:	9b01      	ldr	r3, [sp, #4]
   123a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   123a6:	4a0a      	ldr	r2, [pc, #40]	; (123d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   123a8:	9b01      	ldr	r3, [sp, #4]
   123aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123ae:	f003 0301 	and.w	r3, r3, #1
   123b2:	2b00      	cmp	r3, #0
   123b4:	d106      	bne.n	123c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   123b6:	4a05      	ldr	r2, [pc, #20]	; (123cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   123b8:	9b01      	ldr	r3, [sp, #4]
   123ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123be:	2b00      	cmp	r3, #0
   123c0:	d100      	bne.n	123c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   123c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   123c4:	bf00      	nop
   123c6:	b003      	add	sp, #12
   123c8:	f85d fb04 	ldr.w	pc, [sp], #4
   123cc:	1fff9548 	.word	0x1fff9548
   123d0:	1fff9544 	.word	0x1fff9544

000123d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   123d4:	b500      	push	{lr}
   123d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123d8:	f7ee fc40 	bl	c5c <Sys_GetCoreID>
   123dc:	4603      	mov	r3, r0
   123de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   123e0:	4a10      	ldr	r2, [pc, #64]	; (12424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   123e2:	9b01      	ldr	r3, [sp, #4]
   123e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123e8:	2b00      	cmp	r3, #0
   123ea:	d10d      	bne.n	12408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   123ec:	f7ee fa9e 	bl	92c <Adc_schm_read_msr>
   123f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   123f2:	9b00      	ldr	r3, [sp, #0]
   123f4:	f003 0301 	and.w	r3, r3, #1
   123f8:	2b00      	cmp	r3, #0
   123fa:	d100      	bne.n	123fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   123fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   123fe:	490a      	ldr	r1, [pc, #40]	; (12428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   12400:	9b01      	ldr	r3, [sp, #4]
   12402:	9a00      	ldr	r2, [sp, #0]
   12404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   12408:	4a06      	ldr	r2, [pc, #24]	; (12424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1240a:	9b01      	ldr	r3, [sp, #4]
   1240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12410:	1c5a      	adds	r2, r3, #1
   12412:	4904      	ldr	r1, [pc, #16]	; (12424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   12414:	9b01      	ldr	r3, [sp, #4]
   12416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1241a:	bf00      	nop
   1241c:	b003      	add	sp, #12
   1241e:	f85d fb04 	ldr.w	pc, [sp], #4
   12422:	bf00      	nop
   12424:	1fff9550 	.word	0x1fff9550
   12428:	1fff954c 	.word	0x1fff954c

0001242c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   1242c:	b500      	push	{lr}
   1242e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12430:	f7ee fc14 	bl	c5c <Sys_GetCoreID>
   12434:	4603      	mov	r3, r0
   12436:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   12438:	4a0d      	ldr	r2, [pc, #52]	; (12470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   1243a:	9b01      	ldr	r3, [sp, #4]
   1243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12440:	1e5a      	subs	r2, r3, #1
   12442:	490b      	ldr	r1, [pc, #44]	; (12470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   12444:	9b01      	ldr	r3, [sp, #4]
   12446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   1244a:	4a0a      	ldr	r2, [pc, #40]	; (12474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   1244c:	9b01      	ldr	r3, [sp, #4]
   1244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12452:	f003 0301 	and.w	r3, r3, #1
   12456:	2b00      	cmp	r3, #0
   12458:	d106      	bne.n	12468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   1245a:	4a05      	ldr	r2, [pc, #20]	; (12470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   1245c:	9b01      	ldr	r3, [sp, #4]
   1245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12462:	2b00      	cmp	r3, #0
   12464:	d100      	bne.n	12468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12466:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12468:	bf00      	nop
   1246a:	b003      	add	sp, #12
   1246c:	f85d fb04 	ldr.w	pc, [sp], #4
   12470:	1fff9550 	.word	0x1fff9550
   12474:	1fff954c 	.word	0x1fff954c

00012478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   12478:	b500      	push	{lr}
   1247a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1247c:	f7ee fbee 	bl	c5c <Sys_GetCoreID>
   12480:	4603      	mov	r3, r0
   12482:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   12484:	4a10      	ldr	r2, [pc, #64]	; (124c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   12486:	9b01      	ldr	r3, [sp, #4]
   12488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1248c:	2b00      	cmp	r3, #0
   1248e:	d10d      	bne.n	124ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12490:	f7ee fa4c 	bl	92c <Adc_schm_read_msr>
   12494:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12496:	9b00      	ldr	r3, [sp, #0]
   12498:	f003 0301 	and.w	r3, r3, #1
   1249c:	2b00      	cmp	r3, #0
   1249e:	d100      	bne.n	124a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   124a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   124a2:	490a      	ldr	r1, [pc, #40]	; (124cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   124a4:	9b01      	ldr	r3, [sp, #4]
   124a6:	9a00      	ldr	r2, [sp, #0]
   124a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   124ac:	4a06      	ldr	r2, [pc, #24]	; (124c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   124ae:	9b01      	ldr	r3, [sp, #4]
   124b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124b4:	1c5a      	adds	r2, r3, #1
   124b6:	4904      	ldr	r1, [pc, #16]	; (124c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   124b8:	9b01      	ldr	r3, [sp, #4]
   124ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   124be:	bf00      	nop
   124c0:	b003      	add	sp, #12
   124c2:	f85d fb04 	ldr.w	pc, [sp], #4
   124c6:	bf00      	nop
   124c8:	1fff9558 	.word	0x1fff9558
   124cc:	1fff9554 	.word	0x1fff9554

000124d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   124d0:	b500      	push	{lr}
   124d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124d4:	f7ee fbc2 	bl	c5c <Sys_GetCoreID>
   124d8:	4603      	mov	r3, r0
   124da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   124dc:	4a0d      	ldr	r2, [pc, #52]	; (12514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   124de:	9b01      	ldr	r3, [sp, #4]
   124e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124e4:	1e5a      	subs	r2, r3, #1
   124e6:	490b      	ldr	r1, [pc, #44]	; (12514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   124e8:	9b01      	ldr	r3, [sp, #4]
   124ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   124ee:	4a0a      	ldr	r2, [pc, #40]	; (12518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   124f0:	9b01      	ldr	r3, [sp, #4]
   124f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124f6:	f003 0301 	and.w	r3, r3, #1
   124fa:	2b00      	cmp	r3, #0
   124fc:	d106      	bne.n	1250c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   124fe:	4a05      	ldr	r2, [pc, #20]	; (12514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   12500:	9b01      	ldr	r3, [sp, #4]
   12502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12506:	2b00      	cmp	r3, #0
   12508:	d100      	bne.n	1250c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1250a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1250c:	bf00      	nop
   1250e:	b003      	add	sp, #12
   12510:	f85d fb04 	ldr.w	pc, [sp], #4
   12514:	1fff9558 	.word	0x1fff9558
   12518:	1fff9554 	.word	0x1fff9554

0001251c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   1251c:	b500      	push	{lr}
   1251e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12520:	f7ee fb9c 	bl	c5c <Sys_GetCoreID>
   12524:	4603      	mov	r3, r0
   12526:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   12528:	4a10      	ldr	r2, [pc, #64]	; (1256c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   1252a:	9b01      	ldr	r3, [sp, #4]
   1252c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12530:	2b00      	cmp	r3, #0
   12532:	d10d      	bne.n	12550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12534:	f7ee f9fa 	bl	92c <Adc_schm_read_msr>
   12538:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1253a:	9b00      	ldr	r3, [sp, #0]
   1253c:	f003 0301 	and.w	r3, r3, #1
   12540:	2b00      	cmp	r3, #0
   12542:	d100      	bne.n	12546 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12544:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   12546:	490a      	ldr	r1, [pc, #40]	; (12570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   12548:	9b01      	ldr	r3, [sp, #4]
   1254a:	9a00      	ldr	r2, [sp, #0]
   1254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   12550:	4a06      	ldr	r2, [pc, #24]	; (1256c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   12552:	9b01      	ldr	r3, [sp, #4]
   12554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12558:	1c5a      	adds	r2, r3, #1
   1255a:	4904      	ldr	r1, [pc, #16]	; (1256c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   1255c:	9b01      	ldr	r3, [sp, #4]
   1255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12562:	bf00      	nop
   12564:	b003      	add	sp, #12
   12566:	f85d fb04 	ldr.w	pc, [sp], #4
   1256a:	bf00      	nop
   1256c:	1fff9560 	.word	0x1fff9560
   12570:	1fff955c 	.word	0x1fff955c

00012574 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   12574:	b500      	push	{lr}
   12576:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12578:	f7ee fb70 	bl	c5c <Sys_GetCoreID>
   1257c:	4603      	mov	r3, r0
   1257e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   12580:	4a0d      	ldr	r2, [pc, #52]	; (125b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   12582:	9b01      	ldr	r3, [sp, #4]
   12584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12588:	1e5a      	subs	r2, r3, #1
   1258a:	490b      	ldr	r1, [pc, #44]	; (125b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   1258c:	9b01      	ldr	r3, [sp, #4]
   1258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   12592:	4a0a      	ldr	r2, [pc, #40]	; (125bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   12594:	9b01      	ldr	r3, [sp, #4]
   12596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1259a:	f003 0301 	and.w	r3, r3, #1
   1259e:	2b00      	cmp	r3, #0
   125a0:	d106      	bne.n	125b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   125a2:	4a05      	ldr	r2, [pc, #20]	; (125b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   125a4:	9b01      	ldr	r3, [sp, #4]
   125a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125aa:	2b00      	cmp	r3, #0
   125ac:	d100      	bne.n	125b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   125ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   125b0:	bf00      	nop
   125b2:	b003      	add	sp, #12
   125b4:	f85d fb04 	ldr.w	pc, [sp], #4
   125b8:	1fff9560 	.word	0x1fff9560
   125bc:	1fff955c 	.word	0x1fff955c

000125c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   125c0:	b500      	push	{lr}
   125c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125c4:	f7ee fb4a 	bl	c5c <Sys_GetCoreID>
   125c8:	4603      	mov	r3, r0
   125ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   125cc:	4a10      	ldr	r2, [pc, #64]	; (12610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   125ce:	9b01      	ldr	r3, [sp, #4]
   125d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125d4:	2b00      	cmp	r3, #0
   125d6:	d10d      	bne.n	125f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   125d8:	f7ee f9a8 	bl	92c <Adc_schm_read_msr>
   125dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   125de:	9b00      	ldr	r3, [sp, #0]
   125e0:	f003 0301 	and.w	r3, r3, #1
   125e4:	2b00      	cmp	r3, #0
   125e6:	d100      	bne.n	125ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   125e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   125ea:	490a      	ldr	r1, [pc, #40]	; (12614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   125ec:	9b01      	ldr	r3, [sp, #4]
   125ee:	9a00      	ldr	r2, [sp, #0]
   125f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   125f4:	4a06      	ldr	r2, [pc, #24]	; (12610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   125f6:	9b01      	ldr	r3, [sp, #4]
   125f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125fc:	1c5a      	adds	r2, r3, #1
   125fe:	4904      	ldr	r1, [pc, #16]	; (12610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   12600:	9b01      	ldr	r3, [sp, #4]
   12602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12606:	bf00      	nop
   12608:	b003      	add	sp, #12
   1260a:	f85d fb04 	ldr.w	pc, [sp], #4
   1260e:	bf00      	nop
   12610:	1fff9568 	.word	0x1fff9568
   12614:	1fff9564 	.word	0x1fff9564

00012618 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   12618:	b500      	push	{lr}
   1261a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1261c:	f7ee fb1e 	bl	c5c <Sys_GetCoreID>
   12620:	4603      	mov	r3, r0
   12622:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   12624:	4a0d      	ldr	r2, [pc, #52]	; (1265c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   12626:	9b01      	ldr	r3, [sp, #4]
   12628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1262c:	1e5a      	subs	r2, r3, #1
   1262e:	490b      	ldr	r1, [pc, #44]	; (1265c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   12630:	9b01      	ldr	r3, [sp, #4]
   12632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   12636:	4a0a      	ldr	r2, [pc, #40]	; (12660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   12638:	9b01      	ldr	r3, [sp, #4]
   1263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1263e:	f003 0301 	and.w	r3, r3, #1
   12642:	2b00      	cmp	r3, #0
   12644:	d106      	bne.n	12654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   12646:	4a05      	ldr	r2, [pc, #20]	; (1265c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   12648:	9b01      	ldr	r3, [sp, #4]
   1264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1264e:	2b00      	cmp	r3, #0
   12650:	d100      	bne.n	12654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12652:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12654:	bf00      	nop
   12656:	b003      	add	sp, #12
   12658:	f85d fb04 	ldr.w	pc, [sp], #4
   1265c:	1fff9568 	.word	0x1fff9568
   12660:	1fff9564 	.word	0x1fff9564

00012664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   12664:	b500      	push	{lr}
   12666:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12668:	f7ee faf8 	bl	c5c <Sys_GetCoreID>
   1266c:	4603      	mov	r3, r0
   1266e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   12670:	4a10      	ldr	r2, [pc, #64]	; (126b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   12672:	9b01      	ldr	r3, [sp, #4]
   12674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12678:	2b00      	cmp	r3, #0
   1267a:	d10d      	bne.n	12698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1267c:	f7ee f956 	bl	92c <Adc_schm_read_msr>
   12680:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12682:	9b00      	ldr	r3, [sp, #0]
   12684:	f003 0301 	and.w	r3, r3, #1
   12688:	2b00      	cmp	r3, #0
   1268a:	d100      	bne.n	1268e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1268c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   1268e:	490a      	ldr	r1, [pc, #40]	; (126b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   12690:	9b01      	ldr	r3, [sp, #4]
   12692:	9a00      	ldr	r2, [sp, #0]
   12694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   12698:	4a06      	ldr	r2, [pc, #24]	; (126b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   1269a:	9b01      	ldr	r3, [sp, #4]
   1269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126a0:	1c5a      	adds	r2, r3, #1
   126a2:	4904      	ldr	r1, [pc, #16]	; (126b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   126a4:	9b01      	ldr	r3, [sp, #4]
   126a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   126aa:	bf00      	nop
   126ac:	b003      	add	sp, #12
   126ae:	f85d fb04 	ldr.w	pc, [sp], #4
   126b2:	bf00      	nop
   126b4:	1fff9570 	.word	0x1fff9570
   126b8:	1fff956c 	.word	0x1fff956c

000126bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   126bc:	b500      	push	{lr}
   126be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126c0:	f7ee facc 	bl	c5c <Sys_GetCoreID>
   126c4:	4603      	mov	r3, r0
   126c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   126c8:	4a0d      	ldr	r2, [pc, #52]	; (12700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   126ca:	9b01      	ldr	r3, [sp, #4]
   126cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126d0:	1e5a      	subs	r2, r3, #1
   126d2:	490b      	ldr	r1, [pc, #44]	; (12700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   126d4:	9b01      	ldr	r3, [sp, #4]
   126d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   126da:	4a0a      	ldr	r2, [pc, #40]	; (12704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   126dc:	9b01      	ldr	r3, [sp, #4]
   126de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126e2:	f003 0301 	and.w	r3, r3, #1
   126e6:	2b00      	cmp	r3, #0
   126e8:	d106      	bne.n	126f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   126ea:	4a05      	ldr	r2, [pc, #20]	; (12700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   126ec:	9b01      	ldr	r3, [sp, #4]
   126ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d100      	bne.n	126f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   126f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   126f8:	bf00      	nop
   126fa:	b003      	add	sp, #12
   126fc:	f85d fb04 	ldr.w	pc, [sp], #4
   12700:	1fff9570 	.word	0x1fff9570
   12704:	1fff956c 	.word	0x1fff956c

00012708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   12708:	b500      	push	{lr}
   1270a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1270c:	f7ee faa6 	bl	c5c <Sys_GetCoreID>
   12710:	4603      	mov	r3, r0
   12712:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   12714:	4a10      	ldr	r2, [pc, #64]	; (12758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   12716:	9b01      	ldr	r3, [sp, #4]
   12718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1271c:	2b00      	cmp	r3, #0
   1271e:	d10d      	bne.n	1273c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12720:	f7ee f904 	bl	92c <Adc_schm_read_msr>
   12724:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12726:	9b00      	ldr	r3, [sp, #0]
   12728:	f003 0301 	and.w	r3, r3, #1
   1272c:	2b00      	cmp	r3, #0
   1272e:	d100      	bne.n	12732 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12730:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   12732:	490a      	ldr	r1, [pc, #40]	; (1275c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   12734:	9b01      	ldr	r3, [sp, #4]
   12736:	9a00      	ldr	r2, [sp, #0]
   12738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   1273c:	4a06      	ldr	r2, [pc, #24]	; (12758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   1273e:	9b01      	ldr	r3, [sp, #4]
   12740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12744:	1c5a      	adds	r2, r3, #1
   12746:	4904      	ldr	r1, [pc, #16]	; (12758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   12748:	9b01      	ldr	r3, [sp, #4]
   1274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1274e:	bf00      	nop
   12750:	b003      	add	sp, #12
   12752:	f85d fb04 	ldr.w	pc, [sp], #4
   12756:	bf00      	nop
   12758:	1fff9578 	.word	0x1fff9578
   1275c:	1fff9574 	.word	0x1fff9574

00012760 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   12760:	b500      	push	{lr}
   12762:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12764:	f7ee fa7a 	bl	c5c <Sys_GetCoreID>
   12768:	4603      	mov	r3, r0
   1276a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   1276c:	4a0d      	ldr	r2, [pc, #52]	; (127a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   1276e:	9b01      	ldr	r3, [sp, #4]
   12770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12774:	1e5a      	subs	r2, r3, #1
   12776:	490b      	ldr	r1, [pc, #44]	; (127a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   12778:	9b01      	ldr	r3, [sp, #4]
   1277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   1277e:	4a0a      	ldr	r2, [pc, #40]	; (127a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   12780:	9b01      	ldr	r3, [sp, #4]
   12782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12786:	f003 0301 	and.w	r3, r3, #1
   1278a:	2b00      	cmp	r3, #0
   1278c:	d106      	bne.n	1279c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   1278e:	4a05      	ldr	r2, [pc, #20]	; (127a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   12790:	9b01      	ldr	r3, [sp, #4]
   12792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12796:	2b00      	cmp	r3, #0
   12798:	d100      	bne.n	1279c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1279a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1279c:	bf00      	nop
   1279e:	b003      	add	sp, #12
   127a0:	f85d fb04 	ldr.w	pc, [sp], #4
   127a4:	1fff9578 	.word	0x1fff9578
   127a8:	1fff9574 	.word	0x1fff9574

000127ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   127ac:	b500      	push	{lr}
   127ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127b0:	f7ee fa54 	bl	c5c <Sys_GetCoreID>
   127b4:	4603      	mov	r3, r0
   127b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   127b8:	4a10      	ldr	r2, [pc, #64]	; (127fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   127ba:	9b01      	ldr	r3, [sp, #4]
   127bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127c0:	2b00      	cmp	r3, #0
   127c2:	d10d      	bne.n	127e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   127c4:	f7ee f8b2 	bl	92c <Adc_schm_read_msr>
   127c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127ca:	9b00      	ldr	r3, [sp, #0]
   127cc:	f003 0301 	and.w	r3, r3, #1
   127d0:	2b00      	cmp	r3, #0
   127d2:	d100      	bne.n	127d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   127d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   127d6:	490a      	ldr	r1, [pc, #40]	; (12800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   127d8:	9b01      	ldr	r3, [sp, #4]
   127da:	9a00      	ldr	r2, [sp, #0]
   127dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   127e0:	4a06      	ldr	r2, [pc, #24]	; (127fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   127e2:	9b01      	ldr	r3, [sp, #4]
   127e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127e8:	1c5a      	adds	r2, r3, #1
   127ea:	4904      	ldr	r1, [pc, #16]	; (127fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   127ec:	9b01      	ldr	r3, [sp, #4]
   127ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   127f2:	bf00      	nop
   127f4:	b003      	add	sp, #12
   127f6:	f85d fb04 	ldr.w	pc, [sp], #4
   127fa:	bf00      	nop
   127fc:	1fff9580 	.word	0x1fff9580
   12800:	1fff957c 	.word	0x1fff957c

00012804 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   12804:	b500      	push	{lr}
   12806:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12808:	f7ee fa28 	bl	c5c <Sys_GetCoreID>
   1280c:	4603      	mov	r3, r0
   1280e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   12810:	4a0d      	ldr	r2, [pc, #52]	; (12848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   12812:	9b01      	ldr	r3, [sp, #4]
   12814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12818:	1e5a      	subs	r2, r3, #1
   1281a:	490b      	ldr	r1, [pc, #44]	; (12848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   1281c:	9b01      	ldr	r3, [sp, #4]
   1281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   12822:	4a0a      	ldr	r2, [pc, #40]	; (1284c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   12824:	9b01      	ldr	r3, [sp, #4]
   12826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1282a:	f003 0301 	and.w	r3, r3, #1
   1282e:	2b00      	cmp	r3, #0
   12830:	d106      	bne.n	12840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   12832:	4a05      	ldr	r2, [pc, #20]	; (12848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   12834:	9b01      	ldr	r3, [sp, #4]
   12836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1283a:	2b00      	cmp	r3, #0
   1283c:	d100      	bne.n	12840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1283e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12840:	bf00      	nop
   12842:	b003      	add	sp, #12
   12844:	f85d fb04 	ldr.w	pc, [sp], #4
   12848:	1fff9580 	.word	0x1fff9580
   1284c:	1fff957c 	.word	0x1fff957c

00012850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   12850:	b500      	push	{lr}
   12852:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12854:	f7ee fa02 	bl	c5c <Sys_GetCoreID>
   12858:	4603      	mov	r3, r0
   1285a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   1285c:	4a10      	ldr	r2, [pc, #64]	; (128a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   1285e:	9b01      	ldr	r3, [sp, #4]
   12860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12864:	2b00      	cmp	r3, #0
   12866:	d10d      	bne.n	12884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12868:	f7ee f860 	bl	92c <Adc_schm_read_msr>
   1286c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1286e:	9b00      	ldr	r3, [sp, #0]
   12870:	f003 0301 	and.w	r3, r3, #1
   12874:	2b00      	cmp	r3, #0
   12876:	d100      	bne.n	1287a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12878:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   1287a:	490a      	ldr	r1, [pc, #40]	; (128a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   1287c:	9b01      	ldr	r3, [sp, #4]
   1287e:	9a00      	ldr	r2, [sp, #0]
   12880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   12884:	4a06      	ldr	r2, [pc, #24]	; (128a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   12886:	9b01      	ldr	r3, [sp, #4]
   12888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1288c:	1c5a      	adds	r2, r3, #1
   1288e:	4904      	ldr	r1, [pc, #16]	; (128a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   12890:	9b01      	ldr	r3, [sp, #4]
   12892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12896:	bf00      	nop
   12898:	b003      	add	sp, #12
   1289a:	f85d fb04 	ldr.w	pc, [sp], #4
   1289e:	bf00      	nop
   128a0:	1fff9588 	.word	0x1fff9588
   128a4:	1fff9584 	.word	0x1fff9584

000128a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   128a8:	b500      	push	{lr}
   128aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128ac:	f7ee f9d6 	bl	c5c <Sys_GetCoreID>
   128b0:	4603      	mov	r3, r0
   128b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   128b4:	4a0d      	ldr	r2, [pc, #52]	; (128ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   128b6:	9b01      	ldr	r3, [sp, #4]
   128b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128bc:	1e5a      	subs	r2, r3, #1
   128be:	490b      	ldr	r1, [pc, #44]	; (128ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   128c0:	9b01      	ldr	r3, [sp, #4]
   128c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   128c6:	4a0a      	ldr	r2, [pc, #40]	; (128f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   128c8:	9b01      	ldr	r3, [sp, #4]
   128ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128ce:	f003 0301 	and.w	r3, r3, #1
   128d2:	2b00      	cmp	r3, #0
   128d4:	d106      	bne.n	128e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   128d6:	4a05      	ldr	r2, [pc, #20]	; (128ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   128d8:	9b01      	ldr	r3, [sp, #4]
   128da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128de:	2b00      	cmp	r3, #0
   128e0:	d100      	bne.n	128e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   128e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   128e4:	bf00      	nop
   128e6:	b003      	add	sp, #12
   128e8:	f85d fb04 	ldr.w	pc, [sp], #4
   128ec:	1fff9588 	.word	0x1fff9588
   128f0:	1fff9584 	.word	0x1fff9584

000128f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   128f4:	b500      	push	{lr}
   128f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128f8:	f7ee f9b0 	bl	c5c <Sys_GetCoreID>
   128fc:	4603      	mov	r3, r0
   128fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   12900:	4a10      	ldr	r2, [pc, #64]	; (12944 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   12902:	9b01      	ldr	r3, [sp, #4]
   12904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12908:	2b00      	cmp	r3, #0
   1290a:	d10d      	bne.n	12928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1290c:	f7ee f80e 	bl	92c <Adc_schm_read_msr>
   12910:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12912:	9b00      	ldr	r3, [sp, #0]
   12914:	f003 0301 	and.w	r3, r3, #1
   12918:	2b00      	cmp	r3, #0
   1291a:	d100      	bne.n	1291e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1291c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   1291e:	490a      	ldr	r1, [pc, #40]	; (12948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   12920:	9b01      	ldr	r3, [sp, #4]
   12922:	9a00      	ldr	r2, [sp, #0]
   12924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   12928:	4a06      	ldr	r2, [pc, #24]	; (12944 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   1292a:	9b01      	ldr	r3, [sp, #4]
   1292c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12930:	1c5a      	adds	r2, r3, #1
   12932:	4904      	ldr	r1, [pc, #16]	; (12944 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   12934:	9b01      	ldr	r3, [sp, #4]
   12936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1293a:	bf00      	nop
   1293c:	b003      	add	sp, #12
   1293e:	f85d fb04 	ldr.w	pc, [sp], #4
   12942:	bf00      	nop
   12944:	1fff9590 	.word	0x1fff9590
   12948:	1fff958c 	.word	0x1fff958c

0001294c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   1294c:	b500      	push	{lr}
   1294e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12950:	f7ee f984 	bl	c5c <Sys_GetCoreID>
   12954:	4603      	mov	r3, r0
   12956:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   12958:	4a0d      	ldr	r2, [pc, #52]	; (12990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   1295a:	9b01      	ldr	r3, [sp, #4]
   1295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12960:	1e5a      	subs	r2, r3, #1
   12962:	490b      	ldr	r1, [pc, #44]	; (12990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   12964:	9b01      	ldr	r3, [sp, #4]
   12966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   1296a:	4a0a      	ldr	r2, [pc, #40]	; (12994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   1296c:	9b01      	ldr	r3, [sp, #4]
   1296e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12972:	f003 0301 	and.w	r3, r3, #1
   12976:	2b00      	cmp	r3, #0
   12978:	d106      	bne.n	12988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   1297a:	4a05      	ldr	r2, [pc, #20]	; (12990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   1297c:	9b01      	ldr	r3, [sp, #4]
   1297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12982:	2b00      	cmp	r3, #0
   12984:	d100      	bne.n	12988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12986:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12988:	bf00      	nop
   1298a:	b003      	add	sp, #12
   1298c:	f85d fb04 	ldr.w	pc, [sp], #4
   12990:	1fff9590 	.word	0x1fff9590
   12994:	1fff958c 	.word	0x1fff958c

00012998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   12998:	b500      	push	{lr}
   1299a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1299c:	f7ee f95e 	bl	c5c <Sys_GetCoreID>
   129a0:	4603      	mov	r3, r0
   129a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   129a4:	4a10      	ldr	r2, [pc, #64]	; (129e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   129a6:	9b01      	ldr	r3, [sp, #4]
   129a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129ac:	2b00      	cmp	r3, #0
   129ae:	d10d      	bne.n	129cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   129b0:	f7ed ffbc 	bl	92c <Adc_schm_read_msr>
   129b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   129b6:	9b00      	ldr	r3, [sp, #0]
   129b8:	f003 0301 	and.w	r3, r3, #1
   129bc:	2b00      	cmp	r3, #0
   129be:	d100      	bne.n	129c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   129c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   129c2:	490a      	ldr	r1, [pc, #40]	; (129ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   129c4:	9b01      	ldr	r3, [sp, #4]
   129c6:	9a00      	ldr	r2, [sp, #0]
   129c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   129cc:	4a06      	ldr	r2, [pc, #24]	; (129e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   129ce:	9b01      	ldr	r3, [sp, #4]
   129d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129d4:	1c5a      	adds	r2, r3, #1
   129d6:	4904      	ldr	r1, [pc, #16]	; (129e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   129d8:	9b01      	ldr	r3, [sp, #4]
   129da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   129de:	bf00      	nop
   129e0:	b003      	add	sp, #12
   129e2:	f85d fb04 	ldr.w	pc, [sp], #4
   129e6:	bf00      	nop
   129e8:	1fff9598 	.word	0x1fff9598
   129ec:	1fff9594 	.word	0x1fff9594

000129f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   129f0:	b500      	push	{lr}
   129f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129f4:	f7ee f932 	bl	c5c <Sys_GetCoreID>
   129f8:	4603      	mov	r3, r0
   129fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   129fc:	4a0d      	ldr	r2, [pc, #52]	; (12a34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   129fe:	9b01      	ldr	r3, [sp, #4]
   12a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a04:	1e5a      	subs	r2, r3, #1
   12a06:	490b      	ldr	r1, [pc, #44]	; (12a34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   12a08:	9b01      	ldr	r3, [sp, #4]
   12a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   12a0e:	4a0a      	ldr	r2, [pc, #40]	; (12a38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   12a10:	9b01      	ldr	r3, [sp, #4]
   12a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a16:	f003 0301 	and.w	r3, r3, #1
   12a1a:	2b00      	cmp	r3, #0
   12a1c:	d106      	bne.n	12a2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   12a1e:	4a05      	ldr	r2, [pc, #20]	; (12a34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   12a20:	9b01      	ldr	r3, [sp, #4]
   12a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a26:	2b00      	cmp	r3, #0
   12a28:	d100      	bne.n	12a2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a2c:	bf00      	nop
   12a2e:	b003      	add	sp, #12
   12a30:	f85d fb04 	ldr.w	pc, [sp], #4
   12a34:	1fff9598 	.word	0x1fff9598
   12a38:	1fff9594 	.word	0x1fff9594

00012a3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   12a3c:	b500      	push	{lr}
   12a3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a40:	f7ee f90c 	bl	c5c <Sys_GetCoreID>
   12a44:	4603      	mov	r3, r0
   12a46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   12a48:	4a10      	ldr	r2, [pc, #64]	; (12a8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12a4a:	9b01      	ldr	r3, [sp, #4]
   12a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a50:	2b00      	cmp	r3, #0
   12a52:	d10d      	bne.n	12a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a54:	f7ed ff6a 	bl	92c <Adc_schm_read_msr>
   12a58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a5a:	9b00      	ldr	r3, [sp, #0]
   12a5c:	f003 0301 	and.w	r3, r3, #1
   12a60:	2b00      	cmp	r3, #0
   12a62:	d100      	bne.n	12a66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   12a66:	490a      	ldr	r1, [pc, #40]	; (12a90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   12a68:	9b01      	ldr	r3, [sp, #4]
   12a6a:	9a00      	ldr	r2, [sp, #0]
   12a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   12a70:	4a06      	ldr	r2, [pc, #24]	; (12a8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12a72:	9b01      	ldr	r3, [sp, #4]
   12a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a78:	1c5a      	adds	r2, r3, #1
   12a7a:	4904      	ldr	r1, [pc, #16]	; (12a8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12a7c:	9b01      	ldr	r3, [sp, #4]
   12a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a82:	bf00      	nop
   12a84:	b003      	add	sp, #12
   12a86:	f85d fb04 	ldr.w	pc, [sp], #4
   12a8a:	bf00      	nop
   12a8c:	1fff95a0 	.word	0x1fff95a0
   12a90:	1fff959c 	.word	0x1fff959c

00012a94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   12a94:	b500      	push	{lr}
   12a96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a98:	f7ee f8e0 	bl	c5c <Sys_GetCoreID>
   12a9c:	4603      	mov	r3, r0
   12a9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   12aa0:	4a0d      	ldr	r2, [pc, #52]	; (12ad8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12aa2:	9b01      	ldr	r3, [sp, #4]
   12aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aa8:	1e5a      	subs	r2, r3, #1
   12aaa:	490b      	ldr	r1, [pc, #44]	; (12ad8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12aac:	9b01      	ldr	r3, [sp, #4]
   12aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   12ab2:	4a0a      	ldr	r2, [pc, #40]	; (12adc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   12ab4:	9b01      	ldr	r3, [sp, #4]
   12ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aba:	f003 0301 	and.w	r3, r3, #1
   12abe:	2b00      	cmp	r3, #0
   12ac0:	d106      	bne.n	12ad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   12ac2:	4a05      	ldr	r2, [pc, #20]	; (12ad8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12ac4:	9b01      	ldr	r3, [sp, #4]
   12ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aca:	2b00      	cmp	r3, #0
   12acc:	d100      	bne.n	12ad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ace:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ad0:	bf00      	nop
   12ad2:	b003      	add	sp, #12
   12ad4:	f85d fb04 	ldr.w	pc, [sp], #4
   12ad8:	1fff95a0 	.word	0x1fff95a0
   12adc:	1fff959c 	.word	0x1fff959c

00012ae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12ae0:	b500      	push	{lr}
   12ae2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ae4:	f7ee f8ba 	bl	c5c <Sys_GetCoreID>
   12ae8:	4603      	mov	r3, r0
   12aea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   12aec:	4a10      	ldr	r2, [pc, #64]	; (12b30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12aee:	9b01      	ldr	r3, [sp, #4]
   12af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12af4:	2b00      	cmp	r3, #0
   12af6:	d10d      	bne.n	12b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12af8:	f7ed ff18 	bl	92c <Adc_schm_read_msr>
   12afc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12afe:	9b00      	ldr	r3, [sp, #0]
   12b00:	f003 0301 	and.w	r3, r3, #1
   12b04:	2b00      	cmp	r3, #0
   12b06:	d100      	bne.n	12b0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   12b0a:	490a      	ldr	r1, [pc, #40]	; (12b34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   12b0c:	9b01      	ldr	r3, [sp, #4]
   12b0e:	9a00      	ldr	r2, [sp, #0]
   12b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   12b14:	4a06      	ldr	r2, [pc, #24]	; (12b30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12b16:	9b01      	ldr	r3, [sp, #4]
   12b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b1c:	1c5a      	adds	r2, r3, #1
   12b1e:	4904      	ldr	r1, [pc, #16]	; (12b30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12b20:	9b01      	ldr	r3, [sp, #4]
   12b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b26:	bf00      	nop
   12b28:	b003      	add	sp, #12
   12b2a:	f85d fb04 	ldr.w	pc, [sp], #4
   12b2e:	bf00      	nop
   12b30:	1fff95a8 	.word	0x1fff95a8
   12b34:	1fff95a4 	.word	0x1fff95a4

00012b38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12b38:	b500      	push	{lr}
   12b3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b3c:	f7ee f88e 	bl	c5c <Sys_GetCoreID>
   12b40:	4603      	mov	r3, r0
   12b42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   12b44:	4a0d      	ldr	r2, [pc, #52]	; (12b7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12b46:	9b01      	ldr	r3, [sp, #4]
   12b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b4c:	1e5a      	subs	r2, r3, #1
   12b4e:	490b      	ldr	r1, [pc, #44]	; (12b7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12b50:	9b01      	ldr	r3, [sp, #4]
   12b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   12b56:	4a0a      	ldr	r2, [pc, #40]	; (12b80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   12b58:	9b01      	ldr	r3, [sp, #4]
   12b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b5e:	f003 0301 	and.w	r3, r3, #1
   12b62:	2b00      	cmp	r3, #0
   12b64:	d106      	bne.n	12b74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   12b66:	4a05      	ldr	r2, [pc, #20]	; (12b7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12b68:	9b01      	ldr	r3, [sp, #4]
   12b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b6e:	2b00      	cmp	r3, #0
   12b70:	d100      	bne.n	12b74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b74:	bf00      	nop
   12b76:	b003      	add	sp, #12
   12b78:	f85d fb04 	ldr.w	pc, [sp], #4
   12b7c:	1fff95a8 	.word	0x1fff95a8
   12b80:	1fff95a4 	.word	0x1fff95a4

00012b84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12b84:	b500      	push	{lr}
   12b86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b88:	f7ee f868 	bl	c5c <Sys_GetCoreID>
   12b8c:	4603      	mov	r3, r0
   12b8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   12b90:	4a10      	ldr	r2, [pc, #64]	; (12bd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12b92:	9b01      	ldr	r3, [sp, #4]
   12b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b98:	2b00      	cmp	r3, #0
   12b9a:	d10d      	bne.n	12bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b9c:	f7ed fec6 	bl	92c <Adc_schm_read_msr>
   12ba0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ba2:	9b00      	ldr	r3, [sp, #0]
   12ba4:	f003 0301 	and.w	r3, r3, #1
   12ba8:	2b00      	cmp	r3, #0
   12baa:	d100      	bne.n	12bae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12bac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   12bae:	490a      	ldr	r1, [pc, #40]	; (12bd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   12bb0:	9b01      	ldr	r3, [sp, #4]
   12bb2:	9a00      	ldr	r2, [sp, #0]
   12bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   12bb8:	4a06      	ldr	r2, [pc, #24]	; (12bd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12bba:	9b01      	ldr	r3, [sp, #4]
   12bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bc0:	1c5a      	adds	r2, r3, #1
   12bc2:	4904      	ldr	r1, [pc, #16]	; (12bd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12bc4:	9b01      	ldr	r3, [sp, #4]
   12bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12bca:	bf00      	nop
   12bcc:	b003      	add	sp, #12
   12bce:	f85d fb04 	ldr.w	pc, [sp], #4
   12bd2:	bf00      	nop
   12bd4:	1fff95b0 	.word	0x1fff95b0
   12bd8:	1fff95ac 	.word	0x1fff95ac

00012bdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12bdc:	b500      	push	{lr}
   12bde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12be0:	f7ee f83c 	bl	c5c <Sys_GetCoreID>
   12be4:	4603      	mov	r3, r0
   12be6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   12be8:	4a0d      	ldr	r2, [pc, #52]	; (12c20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12bea:	9b01      	ldr	r3, [sp, #4]
   12bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bf0:	1e5a      	subs	r2, r3, #1
   12bf2:	490b      	ldr	r1, [pc, #44]	; (12c20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12bf4:	9b01      	ldr	r3, [sp, #4]
   12bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   12bfa:	4a0a      	ldr	r2, [pc, #40]	; (12c24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   12bfc:	9b01      	ldr	r3, [sp, #4]
   12bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c02:	f003 0301 	and.w	r3, r3, #1
   12c06:	2b00      	cmp	r3, #0
   12c08:	d106      	bne.n	12c18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   12c0a:	4a05      	ldr	r2, [pc, #20]	; (12c20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12c0c:	9b01      	ldr	r3, [sp, #4]
   12c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c12:	2b00      	cmp	r3, #0
   12c14:	d100      	bne.n	12c18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c18:	bf00      	nop
   12c1a:	b003      	add	sp, #12
   12c1c:	f85d fb04 	ldr.w	pc, [sp], #4
   12c20:	1fff95b0 	.word	0x1fff95b0
   12c24:	1fff95ac 	.word	0x1fff95ac

00012c28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12c28:	b500      	push	{lr}
   12c2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c2c:	f7ee f816 	bl	c5c <Sys_GetCoreID>
   12c30:	4603      	mov	r3, r0
   12c32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   12c34:	4a10      	ldr	r2, [pc, #64]	; (12c78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12c36:	9b01      	ldr	r3, [sp, #4]
   12c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c3c:	2b00      	cmp	r3, #0
   12c3e:	d10d      	bne.n	12c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c40:	f7ed fe74 	bl	92c <Adc_schm_read_msr>
   12c44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c46:	9b00      	ldr	r3, [sp, #0]
   12c48:	f003 0301 	and.w	r3, r3, #1
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d100      	bne.n	12c52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   12c52:	490a      	ldr	r1, [pc, #40]	; (12c7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   12c54:	9b01      	ldr	r3, [sp, #4]
   12c56:	9a00      	ldr	r2, [sp, #0]
   12c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   12c5c:	4a06      	ldr	r2, [pc, #24]	; (12c78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12c5e:	9b01      	ldr	r3, [sp, #4]
   12c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c64:	1c5a      	adds	r2, r3, #1
   12c66:	4904      	ldr	r1, [pc, #16]	; (12c78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12c68:	9b01      	ldr	r3, [sp, #4]
   12c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c6e:	bf00      	nop
   12c70:	b003      	add	sp, #12
   12c72:	f85d fb04 	ldr.w	pc, [sp], #4
   12c76:	bf00      	nop
   12c78:	1fff95b8 	.word	0x1fff95b8
   12c7c:	1fff95b4 	.word	0x1fff95b4

00012c80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12c80:	b500      	push	{lr}
   12c82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c84:	f7ed ffea 	bl	c5c <Sys_GetCoreID>
   12c88:	4603      	mov	r3, r0
   12c8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   12c8c:	4a0d      	ldr	r2, [pc, #52]	; (12cc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12c8e:	9b01      	ldr	r3, [sp, #4]
   12c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c94:	1e5a      	subs	r2, r3, #1
   12c96:	490b      	ldr	r1, [pc, #44]	; (12cc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12c98:	9b01      	ldr	r3, [sp, #4]
   12c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   12c9e:	4a0a      	ldr	r2, [pc, #40]	; (12cc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   12ca0:	9b01      	ldr	r3, [sp, #4]
   12ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ca6:	f003 0301 	and.w	r3, r3, #1
   12caa:	2b00      	cmp	r3, #0
   12cac:	d106      	bne.n	12cbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   12cae:	4a05      	ldr	r2, [pc, #20]	; (12cc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12cb0:	9b01      	ldr	r3, [sp, #4]
   12cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cb6:	2b00      	cmp	r3, #0
   12cb8:	d100      	bne.n	12cbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12cba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12cbc:	bf00      	nop
   12cbe:	b003      	add	sp, #12
   12cc0:	f85d fb04 	ldr.w	pc, [sp], #4
   12cc4:	1fff95b8 	.word	0x1fff95b8
   12cc8:	1fff95b4 	.word	0x1fff95b4

00012ccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12ccc:	b500      	push	{lr}
   12cce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12cd0:	f7ed ffc4 	bl	c5c <Sys_GetCoreID>
   12cd4:	4603      	mov	r3, r0
   12cd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   12cd8:	4a10      	ldr	r2, [pc, #64]	; (12d1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12cda:	9b01      	ldr	r3, [sp, #4]
   12cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ce0:	2b00      	cmp	r3, #0
   12ce2:	d10d      	bne.n	12d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ce4:	f7ed fe22 	bl	92c <Adc_schm_read_msr>
   12ce8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12cea:	9b00      	ldr	r3, [sp, #0]
   12cec:	f003 0301 	and.w	r3, r3, #1
   12cf0:	2b00      	cmp	r3, #0
   12cf2:	d100      	bne.n	12cf6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12cf4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   12cf6:	490a      	ldr	r1, [pc, #40]	; (12d20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   12cf8:	9b01      	ldr	r3, [sp, #4]
   12cfa:	9a00      	ldr	r2, [sp, #0]
   12cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   12d00:	4a06      	ldr	r2, [pc, #24]	; (12d1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12d02:	9b01      	ldr	r3, [sp, #4]
   12d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d08:	1c5a      	adds	r2, r3, #1
   12d0a:	4904      	ldr	r1, [pc, #16]	; (12d1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12d0c:	9b01      	ldr	r3, [sp, #4]
   12d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d12:	bf00      	nop
   12d14:	b003      	add	sp, #12
   12d16:	f85d fb04 	ldr.w	pc, [sp], #4
   12d1a:	bf00      	nop
   12d1c:	1fff95c0 	.word	0x1fff95c0
   12d20:	1fff95bc 	.word	0x1fff95bc

00012d24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12d24:	b500      	push	{lr}
   12d26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d28:	f7ed ff98 	bl	c5c <Sys_GetCoreID>
   12d2c:	4603      	mov	r3, r0
   12d2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   12d30:	4a0d      	ldr	r2, [pc, #52]	; (12d68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12d32:	9b01      	ldr	r3, [sp, #4]
   12d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d38:	1e5a      	subs	r2, r3, #1
   12d3a:	490b      	ldr	r1, [pc, #44]	; (12d68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12d3c:	9b01      	ldr	r3, [sp, #4]
   12d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   12d42:	4a0a      	ldr	r2, [pc, #40]	; (12d6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   12d44:	9b01      	ldr	r3, [sp, #4]
   12d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d4a:	f003 0301 	and.w	r3, r3, #1
   12d4e:	2b00      	cmp	r3, #0
   12d50:	d106      	bne.n	12d60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   12d52:	4a05      	ldr	r2, [pc, #20]	; (12d68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12d54:	9b01      	ldr	r3, [sp, #4]
   12d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d5a:	2b00      	cmp	r3, #0
   12d5c:	d100      	bne.n	12d60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d60:	bf00      	nop
   12d62:	b003      	add	sp, #12
   12d64:	f85d fb04 	ldr.w	pc, [sp], #4
   12d68:	1fff95c0 	.word	0x1fff95c0
   12d6c:	1fff95bc 	.word	0x1fff95bc

00012d70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12d70:	b500      	push	{lr}
   12d72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d74:	f7ed ff72 	bl	c5c <Sys_GetCoreID>
   12d78:	4603      	mov	r3, r0
   12d7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   12d7c:	4a10      	ldr	r2, [pc, #64]	; (12dc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12d7e:	9b01      	ldr	r3, [sp, #4]
   12d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d84:	2b00      	cmp	r3, #0
   12d86:	d10d      	bne.n	12da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d88:	f7ed fdd0 	bl	92c <Adc_schm_read_msr>
   12d8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d8e:	9b00      	ldr	r3, [sp, #0]
   12d90:	f003 0301 	and.w	r3, r3, #1
   12d94:	2b00      	cmp	r3, #0
   12d96:	d100      	bne.n	12d9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   12d9a:	490a      	ldr	r1, [pc, #40]	; (12dc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   12d9c:	9b01      	ldr	r3, [sp, #4]
   12d9e:	9a00      	ldr	r2, [sp, #0]
   12da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   12da4:	4a06      	ldr	r2, [pc, #24]	; (12dc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12da6:	9b01      	ldr	r3, [sp, #4]
   12da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dac:	1c5a      	adds	r2, r3, #1
   12dae:	4904      	ldr	r1, [pc, #16]	; (12dc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12db0:	9b01      	ldr	r3, [sp, #4]
   12db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12db6:	bf00      	nop
   12db8:	b003      	add	sp, #12
   12dba:	f85d fb04 	ldr.w	pc, [sp], #4
   12dbe:	bf00      	nop
   12dc0:	1fff95c8 	.word	0x1fff95c8
   12dc4:	1fff95c4 	.word	0x1fff95c4

00012dc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12dc8:	b500      	push	{lr}
   12dca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12dcc:	f7ed ff46 	bl	c5c <Sys_GetCoreID>
   12dd0:	4603      	mov	r3, r0
   12dd2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   12dd4:	4a0d      	ldr	r2, [pc, #52]	; (12e0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12dd6:	9b01      	ldr	r3, [sp, #4]
   12dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ddc:	1e5a      	subs	r2, r3, #1
   12dde:	490b      	ldr	r1, [pc, #44]	; (12e0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12de0:	9b01      	ldr	r3, [sp, #4]
   12de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   12de6:	4a0a      	ldr	r2, [pc, #40]	; (12e10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   12de8:	9b01      	ldr	r3, [sp, #4]
   12dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dee:	f003 0301 	and.w	r3, r3, #1
   12df2:	2b00      	cmp	r3, #0
   12df4:	d106      	bne.n	12e04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   12df6:	4a05      	ldr	r2, [pc, #20]	; (12e0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12df8:	9b01      	ldr	r3, [sp, #4]
   12dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dfe:	2b00      	cmp	r3, #0
   12e00:	d100      	bne.n	12e04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e04:	bf00      	nop
   12e06:	b003      	add	sp, #12
   12e08:	f85d fb04 	ldr.w	pc, [sp], #4
   12e0c:	1fff95c8 	.word	0x1fff95c8
   12e10:	1fff95c4 	.word	0x1fff95c4

00012e14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12e14:	b500      	push	{lr}
   12e16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e18:	f7ed ff20 	bl	c5c <Sys_GetCoreID>
   12e1c:	4603      	mov	r3, r0
   12e1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   12e20:	4a10      	ldr	r2, [pc, #64]	; (12e64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12e22:	9b01      	ldr	r3, [sp, #4]
   12e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e28:	2b00      	cmp	r3, #0
   12e2a:	d10d      	bne.n	12e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e2c:	f7ed fd7e 	bl	92c <Adc_schm_read_msr>
   12e30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e32:	9b00      	ldr	r3, [sp, #0]
   12e34:	f003 0301 	and.w	r3, r3, #1
   12e38:	2b00      	cmp	r3, #0
   12e3a:	d100      	bne.n	12e3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   12e3e:	490a      	ldr	r1, [pc, #40]	; (12e68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   12e40:	9b01      	ldr	r3, [sp, #4]
   12e42:	9a00      	ldr	r2, [sp, #0]
   12e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   12e48:	4a06      	ldr	r2, [pc, #24]	; (12e64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12e4a:	9b01      	ldr	r3, [sp, #4]
   12e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e50:	1c5a      	adds	r2, r3, #1
   12e52:	4904      	ldr	r1, [pc, #16]	; (12e64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12e54:	9b01      	ldr	r3, [sp, #4]
   12e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e5a:	bf00      	nop
   12e5c:	b003      	add	sp, #12
   12e5e:	f85d fb04 	ldr.w	pc, [sp], #4
   12e62:	bf00      	nop
   12e64:	1fff95d0 	.word	0x1fff95d0
   12e68:	1fff95cc 	.word	0x1fff95cc

00012e6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12e6c:	b500      	push	{lr}
   12e6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e70:	f7ed fef4 	bl	c5c <Sys_GetCoreID>
   12e74:	4603      	mov	r3, r0
   12e76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   12e78:	4a0d      	ldr	r2, [pc, #52]	; (12eb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12e7a:	9b01      	ldr	r3, [sp, #4]
   12e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e80:	1e5a      	subs	r2, r3, #1
   12e82:	490b      	ldr	r1, [pc, #44]	; (12eb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12e84:	9b01      	ldr	r3, [sp, #4]
   12e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   12e8a:	4a0a      	ldr	r2, [pc, #40]	; (12eb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   12e8c:	9b01      	ldr	r3, [sp, #4]
   12e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e92:	f003 0301 	and.w	r3, r3, #1
   12e96:	2b00      	cmp	r3, #0
   12e98:	d106      	bne.n	12ea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   12e9a:	4a05      	ldr	r2, [pc, #20]	; (12eb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12e9c:	9b01      	ldr	r3, [sp, #4]
   12e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ea2:	2b00      	cmp	r3, #0
   12ea4:	d100      	bne.n	12ea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ea6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ea8:	bf00      	nop
   12eaa:	b003      	add	sp, #12
   12eac:	f85d fb04 	ldr.w	pc, [sp], #4
   12eb0:	1fff95d0 	.word	0x1fff95d0
   12eb4:	1fff95cc 	.word	0x1fff95cc

00012eb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12eb8:	b500      	push	{lr}
   12eba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ebc:	f7ed fece 	bl	c5c <Sys_GetCoreID>
   12ec0:	4603      	mov	r3, r0
   12ec2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   12ec4:	4a10      	ldr	r2, [pc, #64]	; (12f08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12ec6:	9b01      	ldr	r3, [sp, #4]
   12ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ecc:	2b00      	cmp	r3, #0
   12ece:	d10d      	bne.n	12eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ed0:	f7ed fd2c 	bl	92c <Adc_schm_read_msr>
   12ed4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ed6:	9b00      	ldr	r3, [sp, #0]
   12ed8:	f003 0301 	and.w	r3, r3, #1
   12edc:	2b00      	cmp	r3, #0
   12ede:	d100      	bne.n	12ee2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ee0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   12ee2:	490a      	ldr	r1, [pc, #40]	; (12f0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   12ee4:	9b01      	ldr	r3, [sp, #4]
   12ee6:	9a00      	ldr	r2, [sp, #0]
   12ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   12eec:	4a06      	ldr	r2, [pc, #24]	; (12f08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12eee:	9b01      	ldr	r3, [sp, #4]
   12ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ef4:	1c5a      	adds	r2, r3, #1
   12ef6:	4904      	ldr	r1, [pc, #16]	; (12f08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12ef8:	9b01      	ldr	r3, [sp, #4]
   12efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12efe:	bf00      	nop
   12f00:	b003      	add	sp, #12
   12f02:	f85d fb04 	ldr.w	pc, [sp], #4
   12f06:	bf00      	nop
   12f08:	1fff95d8 	.word	0x1fff95d8
   12f0c:	1fff95d4 	.word	0x1fff95d4

00012f10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12f10:	b500      	push	{lr}
   12f12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f14:	f7ed fea2 	bl	c5c <Sys_GetCoreID>
   12f18:	4603      	mov	r3, r0
   12f1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   12f1c:	4a0d      	ldr	r2, [pc, #52]	; (12f54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12f1e:	9b01      	ldr	r3, [sp, #4]
   12f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f24:	1e5a      	subs	r2, r3, #1
   12f26:	490b      	ldr	r1, [pc, #44]	; (12f54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12f28:	9b01      	ldr	r3, [sp, #4]
   12f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   12f2e:	4a0a      	ldr	r2, [pc, #40]	; (12f58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   12f30:	9b01      	ldr	r3, [sp, #4]
   12f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f36:	f003 0301 	and.w	r3, r3, #1
   12f3a:	2b00      	cmp	r3, #0
   12f3c:	d106      	bne.n	12f4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   12f3e:	4a05      	ldr	r2, [pc, #20]	; (12f54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12f40:	9b01      	ldr	r3, [sp, #4]
   12f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f46:	2b00      	cmp	r3, #0
   12f48:	d100      	bne.n	12f4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f4c:	bf00      	nop
   12f4e:	b003      	add	sp, #12
   12f50:	f85d fb04 	ldr.w	pc, [sp], #4
   12f54:	1fff95d8 	.word	0x1fff95d8
   12f58:	1fff95d4 	.word	0x1fff95d4

00012f5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12f5c:	b500      	push	{lr}
   12f5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f60:	f7ed fe7c 	bl	c5c <Sys_GetCoreID>
   12f64:	4603      	mov	r3, r0
   12f66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   12f68:	4a10      	ldr	r2, [pc, #64]	; (12fac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12f6a:	9b01      	ldr	r3, [sp, #4]
   12f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f70:	2b00      	cmp	r3, #0
   12f72:	d10d      	bne.n	12f90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f74:	f7ed fcda 	bl	92c <Adc_schm_read_msr>
   12f78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f7a:	9b00      	ldr	r3, [sp, #0]
   12f7c:	f003 0301 	and.w	r3, r3, #1
   12f80:	2b00      	cmp	r3, #0
   12f82:	d100      	bne.n	12f86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   12f86:	490a      	ldr	r1, [pc, #40]	; (12fb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   12f88:	9b01      	ldr	r3, [sp, #4]
   12f8a:	9a00      	ldr	r2, [sp, #0]
   12f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   12f90:	4a06      	ldr	r2, [pc, #24]	; (12fac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12f92:	9b01      	ldr	r3, [sp, #4]
   12f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f98:	1c5a      	adds	r2, r3, #1
   12f9a:	4904      	ldr	r1, [pc, #16]	; (12fac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12f9c:	9b01      	ldr	r3, [sp, #4]
   12f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12fa2:	bf00      	nop
   12fa4:	b003      	add	sp, #12
   12fa6:	f85d fb04 	ldr.w	pc, [sp], #4
   12faa:	bf00      	nop
   12fac:	1fff95e0 	.word	0x1fff95e0
   12fb0:	1fff95dc 	.word	0x1fff95dc

00012fb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12fb4:	b500      	push	{lr}
   12fb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fb8:	f7ed fe50 	bl	c5c <Sys_GetCoreID>
   12fbc:	4603      	mov	r3, r0
   12fbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   12fc0:	4a0d      	ldr	r2, [pc, #52]	; (12ff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12fc2:	9b01      	ldr	r3, [sp, #4]
   12fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fc8:	1e5a      	subs	r2, r3, #1
   12fca:	490b      	ldr	r1, [pc, #44]	; (12ff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12fcc:	9b01      	ldr	r3, [sp, #4]
   12fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   12fd2:	4a0a      	ldr	r2, [pc, #40]	; (12ffc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   12fd4:	9b01      	ldr	r3, [sp, #4]
   12fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fda:	f003 0301 	and.w	r3, r3, #1
   12fde:	2b00      	cmp	r3, #0
   12fe0:	d106      	bne.n	12ff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   12fe2:	4a05      	ldr	r2, [pc, #20]	; (12ff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12fe4:	9b01      	ldr	r3, [sp, #4]
   12fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fea:	2b00      	cmp	r3, #0
   12fec:	d100      	bne.n	12ff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12fee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ff0:	bf00      	nop
   12ff2:	b003      	add	sp, #12
   12ff4:	f85d fb04 	ldr.w	pc, [sp], #4
   12ff8:	1fff95e0 	.word	0x1fff95e0
   12ffc:	1fff95dc 	.word	0x1fff95dc

00013000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   13000:	b500      	push	{lr}
   13002:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13004:	f7ed fe2a 	bl	c5c <Sys_GetCoreID>
   13008:	4603      	mov	r3, r0
   1300a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   1300c:	4a10      	ldr	r2, [pc, #64]	; (13050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1300e:	9b01      	ldr	r3, [sp, #4]
   13010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13014:	2b00      	cmp	r3, #0
   13016:	d10d      	bne.n	13034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13018:	f7ed fc88 	bl	92c <Adc_schm_read_msr>
   1301c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1301e:	9b00      	ldr	r3, [sp, #0]
   13020:	f003 0301 	and.w	r3, r3, #1
   13024:	2b00      	cmp	r3, #0
   13026:	d100      	bne.n	1302a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13028:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   1302a:	490a      	ldr	r1, [pc, #40]	; (13054 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   1302c:	9b01      	ldr	r3, [sp, #4]
   1302e:	9a00      	ldr	r2, [sp, #0]
   13030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   13034:	4a06      	ldr	r2, [pc, #24]	; (13050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   13036:	9b01      	ldr	r3, [sp, #4]
   13038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1303c:	1c5a      	adds	r2, r3, #1
   1303e:	4904      	ldr	r1, [pc, #16]	; (13050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   13040:	9b01      	ldr	r3, [sp, #4]
   13042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13046:	bf00      	nop
   13048:	b003      	add	sp, #12
   1304a:	f85d fb04 	ldr.w	pc, [sp], #4
   1304e:	bf00      	nop
   13050:	1fff95e8 	.word	0x1fff95e8
   13054:	1fff95e4 	.word	0x1fff95e4

00013058 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   13058:	b500      	push	{lr}
   1305a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1305c:	f7ed fdfe 	bl	c5c <Sys_GetCoreID>
   13060:	4603      	mov	r3, r0
   13062:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   13064:	4a0d      	ldr	r2, [pc, #52]	; (1309c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   13066:	9b01      	ldr	r3, [sp, #4]
   13068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1306c:	1e5a      	subs	r2, r3, #1
   1306e:	490b      	ldr	r1, [pc, #44]	; (1309c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   13070:	9b01      	ldr	r3, [sp, #4]
   13072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   13076:	4a0a      	ldr	r2, [pc, #40]	; (130a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   13078:	9b01      	ldr	r3, [sp, #4]
   1307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1307e:	f003 0301 	and.w	r3, r3, #1
   13082:	2b00      	cmp	r3, #0
   13084:	d106      	bne.n	13094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   13086:	4a05      	ldr	r2, [pc, #20]	; (1309c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   13088:	9b01      	ldr	r3, [sp, #4]
   1308a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1308e:	2b00      	cmp	r3, #0
   13090:	d100      	bne.n	13094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13092:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13094:	bf00      	nop
   13096:	b003      	add	sp, #12
   13098:	f85d fb04 	ldr.w	pc, [sp], #4
   1309c:	1fff95e8 	.word	0x1fff95e8
   130a0:	1fff95e4 	.word	0x1fff95e4

000130a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   130a4:	b500      	push	{lr}
   130a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130a8:	f7ed fdd8 	bl	c5c <Sys_GetCoreID>
   130ac:	4603      	mov	r3, r0
   130ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   130b0:	4a10      	ldr	r2, [pc, #64]	; (130f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   130b2:	9b01      	ldr	r3, [sp, #4]
   130b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130b8:	2b00      	cmp	r3, #0
   130ba:	d10d      	bne.n	130d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   130bc:	f7ed fc36 	bl	92c <Adc_schm_read_msr>
   130c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   130c2:	9b00      	ldr	r3, [sp, #0]
   130c4:	f003 0301 	and.w	r3, r3, #1
   130c8:	2b00      	cmp	r3, #0
   130ca:	d100      	bne.n	130ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   130cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   130ce:	490a      	ldr	r1, [pc, #40]	; (130f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   130d0:	9b01      	ldr	r3, [sp, #4]
   130d2:	9a00      	ldr	r2, [sp, #0]
   130d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   130d8:	4a06      	ldr	r2, [pc, #24]	; (130f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   130da:	9b01      	ldr	r3, [sp, #4]
   130dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130e0:	1c5a      	adds	r2, r3, #1
   130e2:	4904      	ldr	r1, [pc, #16]	; (130f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   130e4:	9b01      	ldr	r3, [sp, #4]
   130e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   130ea:	bf00      	nop
   130ec:	b003      	add	sp, #12
   130ee:	f85d fb04 	ldr.w	pc, [sp], #4
   130f2:	bf00      	nop
   130f4:	1fff95f0 	.word	0x1fff95f0
   130f8:	1fff95ec 	.word	0x1fff95ec

000130fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   130fc:	b500      	push	{lr}
   130fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13100:	f7ed fdac 	bl	c5c <Sys_GetCoreID>
   13104:	4603      	mov	r3, r0
   13106:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   13108:	4a0d      	ldr	r2, [pc, #52]	; (13140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   1310a:	9b01      	ldr	r3, [sp, #4]
   1310c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13110:	1e5a      	subs	r2, r3, #1
   13112:	490b      	ldr	r1, [pc, #44]	; (13140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   13114:	9b01      	ldr	r3, [sp, #4]
   13116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   1311a:	4a0a      	ldr	r2, [pc, #40]	; (13144 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   1311c:	9b01      	ldr	r3, [sp, #4]
   1311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13122:	f003 0301 	and.w	r3, r3, #1
   13126:	2b00      	cmp	r3, #0
   13128:	d106      	bne.n	13138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   1312a:	4a05      	ldr	r2, [pc, #20]	; (13140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   1312c:	9b01      	ldr	r3, [sp, #4]
   1312e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13132:	2b00      	cmp	r3, #0
   13134:	d100      	bne.n	13138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13136:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13138:	bf00      	nop
   1313a:	b003      	add	sp, #12
   1313c:	f85d fb04 	ldr.w	pc, [sp], #4
   13140:	1fff95f0 	.word	0x1fff95f0
   13144:	1fff95ec 	.word	0x1fff95ec

00013148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   13148:	b500      	push	{lr}
   1314a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1314c:	f7ed fd86 	bl	c5c <Sys_GetCoreID>
   13150:	4603      	mov	r3, r0
   13152:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   13154:	4a10      	ldr	r2, [pc, #64]	; (13198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   13156:	9b01      	ldr	r3, [sp, #4]
   13158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1315c:	2b00      	cmp	r3, #0
   1315e:	d10d      	bne.n	1317c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13160:	f7ed fbe4 	bl	92c <Adc_schm_read_msr>
   13164:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13166:	9b00      	ldr	r3, [sp, #0]
   13168:	f003 0301 	and.w	r3, r3, #1
   1316c:	2b00      	cmp	r3, #0
   1316e:	d100      	bne.n	13172 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13170:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   13172:	490a      	ldr	r1, [pc, #40]	; (1319c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   13174:	9b01      	ldr	r3, [sp, #4]
   13176:	9a00      	ldr	r2, [sp, #0]
   13178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   1317c:	4a06      	ldr	r2, [pc, #24]	; (13198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   1317e:	9b01      	ldr	r3, [sp, #4]
   13180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13184:	1c5a      	adds	r2, r3, #1
   13186:	4904      	ldr	r1, [pc, #16]	; (13198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   13188:	9b01      	ldr	r3, [sp, #4]
   1318a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1318e:	bf00      	nop
   13190:	b003      	add	sp, #12
   13192:	f85d fb04 	ldr.w	pc, [sp], #4
   13196:	bf00      	nop
   13198:	1fff95f8 	.word	0x1fff95f8
   1319c:	1fff95f4 	.word	0x1fff95f4

000131a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   131a0:	b500      	push	{lr}
   131a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131a4:	f7ed fd5a 	bl	c5c <Sys_GetCoreID>
   131a8:	4603      	mov	r3, r0
   131aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   131ac:	4a0d      	ldr	r2, [pc, #52]	; (131e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   131ae:	9b01      	ldr	r3, [sp, #4]
   131b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131b4:	1e5a      	subs	r2, r3, #1
   131b6:	490b      	ldr	r1, [pc, #44]	; (131e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   131b8:	9b01      	ldr	r3, [sp, #4]
   131ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   131be:	4a0a      	ldr	r2, [pc, #40]	; (131e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   131c0:	9b01      	ldr	r3, [sp, #4]
   131c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131c6:	f003 0301 	and.w	r3, r3, #1
   131ca:	2b00      	cmp	r3, #0
   131cc:	d106      	bne.n	131dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   131ce:	4a05      	ldr	r2, [pc, #20]	; (131e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   131d0:	9b01      	ldr	r3, [sp, #4]
   131d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131d6:	2b00      	cmp	r3, #0
   131d8:	d100      	bne.n	131dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   131da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   131dc:	bf00      	nop
   131de:	b003      	add	sp, #12
   131e0:	f85d fb04 	ldr.w	pc, [sp], #4
   131e4:	1fff95f8 	.word	0x1fff95f8
   131e8:	1fff95f4 	.word	0x1fff95f4

000131ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   131ec:	b500      	push	{lr}
   131ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131f0:	f7ed fd34 	bl	c5c <Sys_GetCoreID>
   131f4:	4603      	mov	r3, r0
   131f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   131f8:	4a10      	ldr	r2, [pc, #64]	; (1323c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   131fa:	9b01      	ldr	r3, [sp, #4]
   131fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13200:	2b00      	cmp	r3, #0
   13202:	d10d      	bne.n	13220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13204:	f7ed fb92 	bl	92c <Adc_schm_read_msr>
   13208:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1320a:	9b00      	ldr	r3, [sp, #0]
   1320c:	f003 0301 	and.w	r3, r3, #1
   13210:	2b00      	cmp	r3, #0
   13212:	d100      	bne.n	13216 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13214:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   13216:	490a      	ldr	r1, [pc, #40]	; (13240 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   13218:	9b01      	ldr	r3, [sp, #4]
   1321a:	9a00      	ldr	r2, [sp, #0]
   1321c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   13220:	4a06      	ldr	r2, [pc, #24]	; (1323c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   13222:	9b01      	ldr	r3, [sp, #4]
   13224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13228:	1c5a      	adds	r2, r3, #1
   1322a:	4904      	ldr	r1, [pc, #16]	; (1323c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1322c:	9b01      	ldr	r3, [sp, #4]
   1322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13232:	bf00      	nop
   13234:	b003      	add	sp, #12
   13236:	f85d fb04 	ldr.w	pc, [sp], #4
   1323a:	bf00      	nop
   1323c:	1fff9600 	.word	0x1fff9600
   13240:	1fff95fc 	.word	0x1fff95fc

00013244 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   13244:	b500      	push	{lr}
   13246:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13248:	f7ed fd08 	bl	c5c <Sys_GetCoreID>
   1324c:	4603      	mov	r3, r0
   1324e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   13250:	4a0d      	ldr	r2, [pc, #52]	; (13288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   13252:	9b01      	ldr	r3, [sp, #4]
   13254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13258:	1e5a      	subs	r2, r3, #1
   1325a:	490b      	ldr	r1, [pc, #44]	; (13288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   1325c:	9b01      	ldr	r3, [sp, #4]
   1325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   13262:	4a0a      	ldr	r2, [pc, #40]	; (1328c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   13264:	9b01      	ldr	r3, [sp, #4]
   13266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1326a:	f003 0301 	and.w	r3, r3, #1
   1326e:	2b00      	cmp	r3, #0
   13270:	d106      	bne.n	13280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   13272:	4a05      	ldr	r2, [pc, #20]	; (13288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   13274:	9b01      	ldr	r3, [sp, #4]
   13276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1327a:	2b00      	cmp	r3, #0
   1327c:	d100      	bne.n	13280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1327e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13280:	bf00      	nop
   13282:	b003      	add	sp, #12
   13284:	f85d fb04 	ldr.w	pc, [sp], #4
   13288:	1fff9600 	.word	0x1fff9600
   1328c:	1fff95fc 	.word	0x1fff95fc

00013290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   13290:	b500      	push	{lr}
   13292:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13294:	f7ed fce2 	bl	c5c <Sys_GetCoreID>
   13298:	4603      	mov	r3, r0
   1329a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   1329c:	4a10      	ldr	r2, [pc, #64]	; (132e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1329e:	9b01      	ldr	r3, [sp, #4]
   132a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132a4:	2b00      	cmp	r3, #0
   132a6:	d10d      	bne.n	132c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   132a8:	f7ed fb40 	bl	92c <Adc_schm_read_msr>
   132ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   132ae:	9b00      	ldr	r3, [sp, #0]
   132b0:	f003 0301 	and.w	r3, r3, #1
   132b4:	2b00      	cmp	r3, #0
   132b6:	d100      	bne.n	132ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   132b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   132ba:	490a      	ldr	r1, [pc, #40]	; (132e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   132bc:	9b01      	ldr	r3, [sp, #4]
   132be:	9a00      	ldr	r2, [sp, #0]
   132c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   132c4:	4a06      	ldr	r2, [pc, #24]	; (132e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   132c6:	9b01      	ldr	r3, [sp, #4]
   132c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132cc:	1c5a      	adds	r2, r3, #1
   132ce:	4904      	ldr	r1, [pc, #16]	; (132e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   132d0:	9b01      	ldr	r3, [sp, #4]
   132d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   132d6:	bf00      	nop
   132d8:	b003      	add	sp, #12
   132da:	f85d fb04 	ldr.w	pc, [sp], #4
   132de:	bf00      	nop
   132e0:	1fff9608 	.word	0x1fff9608
   132e4:	1fff9604 	.word	0x1fff9604

000132e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   132e8:	b500      	push	{lr}
   132ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132ec:	f7ed fcb6 	bl	c5c <Sys_GetCoreID>
   132f0:	4603      	mov	r3, r0
   132f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   132f4:	4a0d      	ldr	r2, [pc, #52]	; (1332c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   132f6:	9b01      	ldr	r3, [sp, #4]
   132f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132fc:	1e5a      	subs	r2, r3, #1
   132fe:	490b      	ldr	r1, [pc, #44]	; (1332c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   13300:	9b01      	ldr	r3, [sp, #4]
   13302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   13306:	4a0a      	ldr	r2, [pc, #40]	; (13330 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   13308:	9b01      	ldr	r3, [sp, #4]
   1330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1330e:	f003 0301 	and.w	r3, r3, #1
   13312:	2b00      	cmp	r3, #0
   13314:	d106      	bne.n	13324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   13316:	4a05      	ldr	r2, [pc, #20]	; (1332c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   13318:	9b01      	ldr	r3, [sp, #4]
   1331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1331e:	2b00      	cmp	r3, #0
   13320:	d100      	bne.n	13324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13322:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13324:	bf00      	nop
   13326:	b003      	add	sp, #12
   13328:	f85d fb04 	ldr.w	pc, [sp], #4
   1332c:	1fff9608 	.word	0x1fff9608
   13330:	1fff9604 	.word	0x1fff9604

00013334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   13334:	b500      	push	{lr}
   13336:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13338:	f7ed fc90 	bl	c5c <Sys_GetCoreID>
   1333c:	4603      	mov	r3, r0
   1333e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   13340:	4a10      	ldr	r2, [pc, #64]	; (13384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   13342:	9b01      	ldr	r3, [sp, #4]
   13344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13348:	2b00      	cmp	r3, #0
   1334a:	d10d      	bne.n	13368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1334c:	f7ed faee 	bl	92c <Adc_schm_read_msr>
   13350:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13352:	9b00      	ldr	r3, [sp, #0]
   13354:	f003 0301 	and.w	r3, r3, #1
   13358:	2b00      	cmp	r3, #0
   1335a:	d100      	bne.n	1335e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1335c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   1335e:	490a      	ldr	r1, [pc, #40]	; (13388 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   13360:	9b01      	ldr	r3, [sp, #4]
   13362:	9a00      	ldr	r2, [sp, #0]
   13364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   13368:	4a06      	ldr	r2, [pc, #24]	; (13384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   1336a:	9b01      	ldr	r3, [sp, #4]
   1336c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13370:	1c5a      	adds	r2, r3, #1
   13372:	4904      	ldr	r1, [pc, #16]	; (13384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   13374:	9b01      	ldr	r3, [sp, #4]
   13376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1337a:	bf00      	nop
   1337c:	b003      	add	sp, #12
   1337e:	f85d fb04 	ldr.w	pc, [sp], #4
   13382:	bf00      	nop
   13384:	1fff9610 	.word	0x1fff9610
   13388:	1fff960c 	.word	0x1fff960c

0001338c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   1338c:	b500      	push	{lr}
   1338e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13390:	f7ed fc64 	bl	c5c <Sys_GetCoreID>
   13394:	4603      	mov	r3, r0
   13396:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   13398:	4a0d      	ldr	r2, [pc, #52]	; (133d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   1339a:	9b01      	ldr	r3, [sp, #4]
   1339c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133a0:	1e5a      	subs	r2, r3, #1
   133a2:	490b      	ldr	r1, [pc, #44]	; (133d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   133a4:	9b01      	ldr	r3, [sp, #4]
   133a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   133aa:	4a0a      	ldr	r2, [pc, #40]	; (133d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   133ac:	9b01      	ldr	r3, [sp, #4]
   133ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133b2:	f003 0301 	and.w	r3, r3, #1
   133b6:	2b00      	cmp	r3, #0
   133b8:	d106      	bne.n	133c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   133ba:	4a05      	ldr	r2, [pc, #20]	; (133d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   133bc:	9b01      	ldr	r3, [sp, #4]
   133be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133c2:	2b00      	cmp	r3, #0
   133c4:	d100      	bne.n	133c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   133c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133c8:	bf00      	nop
   133ca:	b003      	add	sp, #12
   133cc:	f85d fb04 	ldr.w	pc, [sp], #4
   133d0:	1fff9610 	.word	0x1fff9610
   133d4:	1fff960c 	.word	0x1fff960c

000133d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   133d8:	b500      	push	{lr}
   133da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133dc:	f7ed fc3e 	bl	c5c <Sys_GetCoreID>
   133e0:	4603      	mov	r3, r0
   133e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   133e4:	4a10      	ldr	r2, [pc, #64]	; (13428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   133e6:	9b01      	ldr	r3, [sp, #4]
   133e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133ec:	2b00      	cmp	r3, #0
   133ee:	d10d      	bne.n	1340c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   133f0:	f7ed fa9c 	bl	92c <Adc_schm_read_msr>
   133f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   133f6:	9b00      	ldr	r3, [sp, #0]
   133f8:	f003 0301 	and.w	r3, r3, #1
   133fc:	2b00      	cmp	r3, #0
   133fe:	d100      	bne.n	13402 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13400:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   13402:	490a      	ldr	r1, [pc, #40]	; (1342c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   13404:	9b01      	ldr	r3, [sp, #4]
   13406:	9a00      	ldr	r2, [sp, #0]
   13408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   1340c:	4a06      	ldr	r2, [pc, #24]	; (13428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1340e:	9b01      	ldr	r3, [sp, #4]
   13410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13414:	1c5a      	adds	r2, r3, #1
   13416:	4904      	ldr	r1, [pc, #16]	; (13428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   13418:	9b01      	ldr	r3, [sp, #4]
   1341a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1341e:	bf00      	nop
   13420:	b003      	add	sp, #12
   13422:	f85d fb04 	ldr.w	pc, [sp], #4
   13426:	bf00      	nop
   13428:	1fff9618 	.word	0x1fff9618
   1342c:	1fff9614 	.word	0x1fff9614

00013430 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   13430:	b500      	push	{lr}
   13432:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13434:	f7ed fc12 	bl	c5c <Sys_GetCoreID>
   13438:	4603      	mov	r3, r0
   1343a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   1343c:	4a0d      	ldr	r2, [pc, #52]	; (13474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   1343e:	9b01      	ldr	r3, [sp, #4]
   13440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13444:	1e5a      	subs	r2, r3, #1
   13446:	490b      	ldr	r1, [pc, #44]	; (13474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   13448:	9b01      	ldr	r3, [sp, #4]
   1344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   1344e:	4a0a      	ldr	r2, [pc, #40]	; (13478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   13450:	9b01      	ldr	r3, [sp, #4]
   13452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13456:	f003 0301 	and.w	r3, r3, #1
   1345a:	2b00      	cmp	r3, #0
   1345c:	d106      	bne.n	1346c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   1345e:	4a05      	ldr	r2, [pc, #20]	; (13474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   13460:	9b01      	ldr	r3, [sp, #4]
   13462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13466:	2b00      	cmp	r3, #0
   13468:	d100      	bne.n	1346c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1346a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1346c:	bf00      	nop
   1346e:	b003      	add	sp, #12
   13470:	f85d fb04 	ldr.w	pc, [sp], #4
   13474:	1fff9618 	.word	0x1fff9618
   13478:	1fff9614 	.word	0x1fff9614

0001347c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   1347c:	b500      	push	{lr}
   1347e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13480:	f7ed fbec 	bl	c5c <Sys_GetCoreID>
   13484:	4603      	mov	r3, r0
   13486:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   13488:	4a10      	ldr	r2, [pc, #64]	; (134cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   1348a:	9b01      	ldr	r3, [sp, #4]
   1348c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13490:	2b00      	cmp	r3, #0
   13492:	d10d      	bne.n	134b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13494:	f7ed fa4a 	bl	92c <Adc_schm_read_msr>
   13498:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1349a:	9b00      	ldr	r3, [sp, #0]
   1349c:	f003 0301 	and.w	r3, r3, #1
   134a0:	2b00      	cmp	r3, #0
   134a2:	d100      	bne.n	134a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   134a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   134a6:	490a      	ldr	r1, [pc, #40]	; (134d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   134a8:	9b01      	ldr	r3, [sp, #4]
   134aa:	9a00      	ldr	r2, [sp, #0]
   134ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   134b0:	4a06      	ldr	r2, [pc, #24]	; (134cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   134b2:	9b01      	ldr	r3, [sp, #4]
   134b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134b8:	1c5a      	adds	r2, r3, #1
   134ba:	4904      	ldr	r1, [pc, #16]	; (134cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   134bc:	9b01      	ldr	r3, [sp, #4]
   134be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   134c2:	bf00      	nop
   134c4:	b003      	add	sp, #12
   134c6:	f85d fb04 	ldr.w	pc, [sp], #4
   134ca:	bf00      	nop
   134cc:	1fff9620 	.word	0x1fff9620
   134d0:	1fff961c 	.word	0x1fff961c

000134d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   134d4:	b500      	push	{lr}
   134d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134d8:	f7ed fbc0 	bl	c5c <Sys_GetCoreID>
   134dc:	4603      	mov	r3, r0
   134de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   134e0:	4a0d      	ldr	r2, [pc, #52]	; (13518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   134e2:	9b01      	ldr	r3, [sp, #4]
   134e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134e8:	1e5a      	subs	r2, r3, #1
   134ea:	490b      	ldr	r1, [pc, #44]	; (13518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   134ec:	9b01      	ldr	r3, [sp, #4]
   134ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   134f2:	4a0a      	ldr	r2, [pc, #40]	; (1351c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   134f4:	9b01      	ldr	r3, [sp, #4]
   134f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134fa:	f003 0301 	and.w	r3, r3, #1
   134fe:	2b00      	cmp	r3, #0
   13500:	d106      	bne.n	13510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   13502:	4a05      	ldr	r2, [pc, #20]	; (13518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   13504:	9b01      	ldr	r3, [sp, #4]
   13506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1350a:	2b00      	cmp	r3, #0
   1350c:	d100      	bne.n	13510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1350e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13510:	bf00      	nop
   13512:	b003      	add	sp, #12
   13514:	f85d fb04 	ldr.w	pc, [sp], #4
   13518:	1fff9620 	.word	0x1fff9620
   1351c:	1fff961c 	.word	0x1fff961c

00013520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   13520:	b500      	push	{lr}
   13522:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13524:	f7ed fb9a 	bl	c5c <Sys_GetCoreID>
   13528:	4603      	mov	r3, r0
   1352a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   1352c:	4a10      	ldr	r2, [pc, #64]	; (13570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   1352e:	9b01      	ldr	r3, [sp, #4]
   13530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13534:	2b00      	cmp	r3, #0
   13536:	d10d      	bne.n	13554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13538:	f7ed f9f8 	bl	92c <Adc_schm_read_msr>
   1353c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1353e:	9b00      	ldr	r3, [sp, #0]
   13540:	f003 0301 	and.w	r3, r3, #1
   13544:	2b00      	cmp	r3, #0
   13546:	d100      	bne.n	1354a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13548:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   1354a:	490a      	ldr	r1, [pc, #40]	; (13574 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   1354c:	9b01      	ldr	r3, [sp, #4]
   1354e:	9a00      	ldr	r2, [sp, #0]
   13550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   13554:	4a06      	ldr	r2, [pc, #24]	; (13570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   13556:	9b01      	ldr	r3, [sp, #4]
   13558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1355c:	1c5a      	adds	r2, r3, #1
   1355e:	4904      	ldr	r1, [pc, #16]	; (13570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   13560:	9b01      	ldr	r3, [sp, #4]
   13562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13566:	bf00      	nop
   13568:	b003      	add	sp, #12
   1356a:	f85d fb04 	ldr.w	pc, [sp], #4
   1356e:	bf00      	nop
   13570:	1fff9628 	.word	0x1fff9628
   13574:	1fff9624 	.word	0x1fff9624

00013578 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   13578:	b500      	push	{lr}
   1357a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1357c:	f7ed fb6e 	bl	c5c <Sys_GetCoreID>
   13580:	4603      	mov	r3, r0
   13582:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   13584:	4a0d      	ldr	r2, [pc, #52]	; (135bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   13586:	9b01      	ldr	r3, [sp, #4]
   13588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1358c:	1e5a      	subs	r2, r3, #1
   1358e:	490b      	ldr	r1, [pc, #44]	; (135bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   13590:	9b01      	ldr	r3, [sp, #4]
   13592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   13596:	4a0a      	ldr	r2, [pc, #40]	; (135c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   13598:	9b01      	ldr	r3, [sp, #4]
   1359a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1359e:	f003 0301 	and.w	r3, r3, #1
   135a2:	2b00      	cmp	r3, #0
   135a4:	d106      	bne.n	135b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   135a6:	4a05      	ldr	r2, [pc, #20]	; (135bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   135a8:	9b01      	ldr	r3, [sp, #4]
   135aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135ae:	2b00      	cmp	r3, #0
   135b0:	d100      	bne.n	135b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   135b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   135b4:	bf00      	nop
   135b6:	b003      	add	sp, #12
   135b8:	f85d fb04 	ldr.w	pc, [sp], #4
   135bc:	1fff9628 	.word	0x1fff9628
   135c0:	1fff9624 	.word	0x1fff9624

000135c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   135c4:	b500      	push	{lr}
   135c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135c8:	f7ed fb48 	bl	c5c <Sys_GetCoreID>
   135cc:	4603      	mov	r3, r0
   135ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   135d0:	4a10      	ldr	r2, [pc, #64]	; (13614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   135d2:	9b01      	ldr	r3, [sp, #4]
   135d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135d8:	2b00      	cmp	r3, #0
   135da:	d10d      	bne.n	135f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   135dc:	f7ed f9a6 	bl	92c <Adc_schm_read_msr>
   135e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   135e2:	9b00      	ldr	r3, [sp, #0]
   135e4:	f003 0301 	and.w	r3, r3, #1
   135e8:	2b00      	cmp	r3, #0
   135ea:	d100      	bne.n	135ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   135ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   135ee:	490a      	ldr	r1, [pc, #40]	; (13618 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   135f0:	9b01      	ldr	r3, [sp, #4]
   135f2:	9a00      	ldr	r2, [sp, #0]
   135f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   135f8:	4a06      	ldr	r2, [pc, #24]	; (13614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   135fa:	9b01      	ldr	r3, [sp, #4]
   135fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13600:	1c5a      	adds	r2, r3, #1
   13602:	4904      	ldr	r1, [pc, #16]	; (13614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   13604:	9b01      	ldr	r3, [sp, #4]
   13606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1360a:	bf00      	nop
   1360c:	b003      	add	sp, #12
   1360e:	f85d fb04 	ldr.w	pc, [sp], #4
   13612:	bf00      	nop
   13614:	1fff9630 	.word	0x1fff9630
   13618:	1fff962c 	.word	0x1fff962c

0001361c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   1361c:	b500      	push	{lr}
   1361e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13620:	f7ed fb1c 	bl	c5c <Sys_GetCoreID>
   13624:	4603      	mov	r3, r0
   13626:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   13628:	4a0d      	ldr	r2, [pc, #52]	; (13660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   1362a:	9b01      	ldr	r3, [sp, #4]
   1362c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13630:	1e5a      	subs	r2, r3, #1
   13632:	490b      	ldr	r1, [pc, #44]	; (13660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   13634:	9b01      	ldr	r3, [sp, #4]
   13636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   1363a:	4a0a      	ldr	r2, [pc, #40]	; (13664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   1363c:	9b01      	ldr	r3, [sp, #4]
   1363e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13642:	f003 0301 	and.w	r3, r3, #1
   13646:	2b00      	cmp	r3, #0
   13648:	d106      	bne.n	13658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   1364a:	4a05      	ldr	r2, [pc, #20]	; (13660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   1364c:	9b01      	ldr	r3, [sp, #4]
   1364e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13652:	2b00      	cmp	r3, #0
   13654:	d100      	bne.n	13658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13656:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13658:	bf00      	nop
   1365a:	b003      	add	sp, #12
   1365c:	f85d fb04 	ldr.w	pc, [sp], #4
   13660:	1fff9630 	.word	0x1fff9630
   13664:	1fff962c 	.word	0x1fff962c

00013668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   13668:	b500      	push	{lr}
   1366a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1366c:	f7ed faf6 	bl	c5c <Sys_GetCoreID>
   13670:	4603      	mov	r3, r0
   13672:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   13674:	4a10      	ldr	r2, [pc, #64]	; (136b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   13676:	9b01      	ldr	r3, [sp, #4]
   13678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1367c:	2b00      	cmp	r3, #0
   1367e:	d10d      	bne.n	1369c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13680:	f7ed f954 	bl	92c <Adc_schm_read_msr>
   13684:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13686:	9b00      	ldr	r3, [sp, #0]
   13688:	f003 0301 	and.w	r3, r3, #1
   1368c:	2b00      	cmp	r3, #0
   1368e:	d100      	bne.n	13692 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13690:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   13692:	490a      	ldr	r1, [pc, #40]	; (136bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   13694:	9b01      	ldr	r3, [sp, #4]
   13696:	9a00      	ldr	r2, [sp, #0]
   13698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   1369c:	4a06      	ldr	r2, [pc, #24]	; (136b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   1369e:	9b01      	ldr	r3, [sp, #4]
   136a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136a4:	1c5a      	adds	r2, r3, #1
   136a6:	4904      	ldr	r1, [pc, #16]	; (136b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   136a8:	9b01      	ldr	r3, [sp, #4]
   136aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   136ae:	bf00      	nop
   136b0:	b003      	add	sp, #12
   136b2:	f85d fb04 	ldr.w	pc, [sp], #4
   136b6:	bf00      	nop
   136b8:	1fff9638 	.word	0x1fff9638
   136bc:	1fff9634 	.word	0x1fff9634

000136c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   136c0:	b500      	push	{lr}
   136c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136c4:	f7ed faca 	bl	c5c <Sys_GetCoreID>
   136c8:	4603      	mov	r3, r0
   136ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   136cc:	4a0d      	ldr	r2, [pc, #52]	; (13704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   136ce:	9b01      	ldr	r3, [sp, #4]
   136d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136d4:	1e5a      	subs	r2, r3, #1
   136d6:	490b      	ldr	r1, [pc, #44]	; (13704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   136d8:	9b01      	ldr	r3, [sp, #4]
   136da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   136de:	4a0a      	ldr	r2, [pc, #40]	; (13708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   136e0:	9b01      	ldr	r3, [sp, #4]
   136e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136e6:	f003 0301 	and.w	r3, r3, #1
   136ea:	2b00      	cmp	r3, #0
   136ec:	d106      	bne.n	136fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   136ee:	4a05      	ldr	r2, [pc, #20]	; (13704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   136f0:	9b01      	ldr	r3, [sp, #4]
   136f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136f6:	2b00      	cmp	r3, #0
   136f8:	d100      	bne.n	136fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   136fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   136fc:	bf00      	nop
   136fe:	b003      	add	sp, #12
   13700:	f85d fb04 	ldr.w	pc, [sp], #4
   13704:	1fff9638 	.word	0x1fff9638
   13708:	1fff9634 	.word	0x1fff9634

0001370c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   1370c:	b500      	push	{lr}
   1370e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13710:	f7ed faa4 	bl	c5c <Sys_GetCoreID>
   13714:	4603      	mov	r3, r0
   13716:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   13718:	4a10      	ldr	r2, [pc, #64]	; (1375c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   1371a:	9b01      	ldr	r3, [sp, #4]
   1371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13720:	2b00      	cmp	r3, #0
   13722:	d10d      	bne.n	13740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13724:	f7ed f902 	bl	92c <Adc_schm_read_msr>
   13728:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1372a:	9b00      	ldr	r3, [sp, #0]
   1372c:	f003 0301 	and.w	r3, r3, #1
   13730:	2b00      	cmp	r3, #0
   13732:	d100      	bne.n	13736 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13734:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   13736:	490a      	ldr	r1, [pc, #40]	; (13760 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   13738:	9b01      	ldr	r3, [sp, #4]
   1373a:	9a00      	ldr	r2, [sp, #0]
   1373c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   13740:	4a06      	ldr	r2, [pc, #24]	; (1375c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   13742:	9b01      	ldr	r3, [sp, #4]
   13744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13748:	1c5a      	adds	r2, r3, #1
   1374a:	4904      	ldr	r1, [pc, #16]	; (1375c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   1374c:	9b01      	ldr	r3, [sp, #4]
   1374e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13752:	bf00      	nop
   13754:	b003      	add	sp, #12
   13756:	f85d fb04 	ldr.w	pc, [sp], #4
   1375a:	bf00      	nop
   1375c:	1fff9640 	.word	0x1fff9640
   13760:	1fff963c 	.word	0x1fff963c

00013764 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   13764:	b500      	push	{lr}
   13766:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13768:	f7ed fa78 	bl	c5c <Sys_GetCoreID>
   1376c:	4603      	mov	r3, r0
   1376e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   13770:	4a0d      	ldr	r2, [pc, #52]	; (137a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   13772:	9b01      	ldr	r3, [sp, #4]
   13774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13778:	1e5a      	subs	r2, r3, #1
   1377a:	490b      	ldr	r1, [pc, #44]	; (137a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   1377c:	9b01      	ldr	r3, [sp, #4]
   1377e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   13782:	4a0a      	ldr	r2, [pc, #40]	; (137ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   13784:	9b01      	ldr	r3, [sp, #4]
   13786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1378a:	f003 0301 	and.w	r3, r3, #1
   1378e:	2b00      	cmp	r3, #0
   13790:	d106      	bne.n	137a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   13792:	4a05      	ldr	r2, [pc, #20]	; (137a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   13794:	9b01      	ldr	r3, [sp, #4]
   13796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1379a:	2b00      	cmp	r3, #0
   1379c:	d100      	bne.n	137a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1379e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   137a0:	bf00      	nop
   137a2:	b003      	add	sp, #12
   137a4:	f85d fb04 	ldr.w	pc, [sp], #4
   137a8:	1fff9640 	.word	0x1fff9640
   137ac:	1fff963c 	.word	0x1fff963c

000137b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   137b0:	b500      	push	{lr}
   137b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137b4:	f7ed fa52 	bl	c5c <Sys_GetCoreID>
   137b8:	4603      	mov	r3, r0
   137ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   137bc:	4a10      	ldr	r2, [pc, #64]	; (13800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   137be:	9b01      	ldr	r3, [sp, #4]
   137c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137c4:	2b00      	cmp	r3, #0
   137c6:	d10d      	bne.n	137e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137c8:	f7ed f8b0 	bl	92c <Adc_schm_read_msr>
   137cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   137ce:	9b00      	ldr	r3, [sp, #0]
   137d0:	f003 0301 	and.w	r3, r3, #1
   137d4:	2b00      	cmp	r3, #0
   137d6:	d100      	bne.n	137da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   137d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   137da:	490a      	ldr	r1, [pc, #40]	; (13804 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   137dc:	9b01      	ldr	r3, [sp, #4]
   137de:	9a00      	ldr	r2, [sp, #0]
   137e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   137e4:	4a06      	ldr	r2, [pc, #24]	; (13800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   137e6:	9b01      	ldr	r3, [sp, #4]
   137e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137ec:	1c5a      	adds	r2, r3, #1
   137ee:	4904      	ldr	r1, [pc, #16]	; (13800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   137f0:	9b01      	ldr	r3, [sp, #4]
   137f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   137f6:	bf00      	nop
   137f8:	b003      	add	sp, #12
   137fa:	f85d fb04 	ldr.w	pc, [sp], #4
   137fe:	bf00      	nop
   13800:	1fff9648 	.word	0x1fff9648
   13804:	1fff9644 	.word	0x1fff9644

00013808 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   13808:	b500      	push	{lr}
   1380a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1380c:	f7ed fa26 	bl	c5c <Sys_GetCoreID>
   13810:	4603      	mov	r3, r0
   13812:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   13814:	4a0d      	ldr	r2, [pc, #52]	; (1384c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   13816:	9b01      	ldr	r3, [sp, #4]
   13818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1381c:	1e5a      	subs	r2, r3, #1
   1381e:	490b      	ldr	r1, [pc, #44]	; (1384c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   13820:	9b01      	ldr	r3, [sp, #4]
   13822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   13826:	4a0a      	ldr	r2, [pc, #40]	; (13850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   13828:	9b01      	ldr	r3, [sp, #4]
   1382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1382e:	f003 0301 	and.w	r3, r3, #1
   13832:	2b00      	cmp	r3, #0
   13834:	d106      	bne.n	13844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   13836:	4a05      	ldr	r2, [pc, #20]	; (1384c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   13838:	9b01      	ldr	r3, [sp, #4]
   1383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1383e:	2b00      	cmp	r3, #0
   13840:	d100      	bne.n	13844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13842:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13844:	bf00      	nop
   13846:	b003      	add	sp, #12
   13848:	f85d fb04 	ldr.w	pc, [sp], #4
   1384c:	1fff9648 	.word	0x1fff9648
   13850:	1fff9644 	.word	0x1fff9644

00013854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   13854:	b500      	push	{lr}
   13856:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13858:	f7ed fa00 	bl	c5c <Sys_GetCoreID>
   1385c:	4603      	mov	r3, r0
   1385e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   13860:	4a10      	ldr	r2, [pc, #64]	; (138a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   13862:	9b01      	ldr	r3, [sp, #4]
   13864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13868:	2b00      	cmp	r3, #0
   1386a:	d10d      	bne.n	13888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1386c:	f7ed f85e 	bl	92c <Adc_schm_read_msr>
   13870:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13872:	9b00      	ldr	r3, [sp, #0]
   13874:	f003 0301 	and.w	r3, r3, #1
   13878:	2b00      	cmp	r3, #0
   1387a:	d100      	bne.n	1387e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1387c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   1387e:	490a      	ldr	r1, [pc, #40]	; (138a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   13880:	9b01      	ldr	r3, [sp, #4]
   13882:	9a00      	ldr	r2, [sp, #0]
   13884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   13888:	4a06      	ldr	r2, [pc, #24]	; (138a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   1388a:	9b01      	ldr	r3, [sp, #4]
   1388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13890:	1c5a      	adds	r2, r3, #1
   13892:	4904      	ldr	r1, [pc, #16]	; (138a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   13894:	9b01      	ldr	r3, [sp, #4]
   13896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1389a:	bf00      	nop
   1389c:	b003      	add	sp, #12
   1389e:	f85d fb04 	ldr.w	pc, [sp], #4
   138a2:	bf00      	nop
   138a4:	1fff9650 	.word	0x1fff9650
   138a8:	1fff964c 	.word	0x1fff964c

000138ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   138ac:	b500      	push	{lr}
   138ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138b0:	f7ed f9d4 	bl	c5c <Sys_GetCoreID>
   138b4:	4603      	mov	r3, r0
   138b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   138b8:	4a0d      	ldr	r2, [pc, #52]	; (138f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   138ba:	9b01      	ldr	r3, [sp, #4]
   138bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138c0:	1e5a      	subs	r2, r3, #1
   138c2:	490b      	ldr	r1, [pc, #44]	; (138f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   138c4:	9b01      	ldr	r3, [sp, #4]
   138c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   138ca:	4a0a      	ldr	r2, [pc, #40]	; (138f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   138cc:	9b01      	ldr	r3, [sp, #4]
   138ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138d2:	f003 0301 	and.w	r3, r3, #1
   138d6:	2b00      	cmp	r3, #0
   138d8:	d106      	bne.n	138e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   138da:	4a05      	ldr	r2, [pc, #20]	; (138f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   138dc:	9b01      	ldr	r3, [sp, #4]
   138de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138e2:	2b00      	cmp	r3, #0
   138e4:	d100      	bne.n	138e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   138e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   138e8:	bf00      	nop
   138ea:	b003      	add	sp, #12
   138ec:	f85d fb04 	ldr.w	pc, [sp], #4
   138f0:	1fff9650 	.word	0x1fff9650
   138f4:	1fff964c 	.word	0x1fff964c

000138f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   138f8:	b500      	push	{lr}
   138fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138fc:	f7ed f9ae 	bl	c5c <Sys_GetCoreID>
   13900:	4603      	mov	r3, r0
   13902:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   13904:	4a10      	ldr	r2, [pc, #64]	; (13948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   13906:	9b01      	ldr	r3, [sp, #4]
   13908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1390c:	2b00      	cmp	r3, #0
   1390e:	d10d      	bne.n	1392c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13910:	f7ed f80c 	bl	92c <Adc_schm_read_msr>
   13914:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13916:	9b00      	ldr	r3, [sp, #0]
   13918:	f003 0301 	and.w	r3, r3, #1
   1391c:	2b00      	cmp	r3, #0
   1391e:	d100      	bne.n	13922 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13920:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   13922:	490a      	ldr	r1, [pc, #40]	; (1394c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   13924:	9b01      	ldr	r3, [sp, #4]
   13926:	9a00      	ldr	r2, [sp, #0]
   13928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   1392c:	4a06      	ldr	r2, [pc, #24]	; (13948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   1392e:	9b01      	ldr	r3, [sp, #4]
   13930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13934:	1c5a      	adds	r2, r3, #1
   13936:	4904      	ldr	r1, [pc, #16]	; (13948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   13938:	9b01      	ldr	r3, [sp, #4]
   1393a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1393e:	bf00      	nop
   13940:	b003      	add	sp, #12
   13942:	f85d fb04 	ldr.w	pc, [sp], #4
   13946:	bf00      	nop
   13948:	1fff9658 	.word	0x1fff9658
   1394c:	1fff9654 	.word	0x1fff9654

00013950 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   13950:	b500      	push	{lr}
   13952:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13954:	f7ed f982 	bl	c5c <Sys_GetCoreID>
   13958:	4603      	mov	r3, r0
   1395a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   1395c:	4a0d      	ldr	r2, [pc, #52]	; (13994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   1395e:	9b01      	ldr	r3, [sp, #4]
   13960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13964:	1e5a      	subs	r2, r3, #1
   13966:	490b      	ldr	r1, [pc, #44]	; (13994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   13968:	9b01      	ldr	r3, [sp, #4]
   1396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   1396e:	4a0a      	ldr	r2, [pc, #40]	; (13998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   13970:	9b01      	ldr	r3, [sp, #4]
   13972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13976:	f003 0301 	and.w	r3, r3, #1
   1397a:	2b00      	cmp	r3, #0
   1397c:	d106      	bne.n	1398c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   1397e:	4a05      	ldr	r2, [pc, #20]	; (13994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   13980:	9b01      	ldr	r3, [sp, #4]
   13982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13986:	2b00      	cmp	r3, #0
   13988:	d100      	bne.n	1398c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1398a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1398c:	bf00      	nop
   1398e:	b003      	add	sp, #12
   13990:	f85d fb04 	ldr.w	pc, [sp], #4
   13994:	1fff9658 	.word	0x1fff9658
   13998:	1fff9654 	.word	0x1fff9654

0001399c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   1399c:	b500      	push	{lr}
   1399e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139a0:	f7ed f95c 	bl	c5c <Sys_GetCoreID>
   139a4:	4603      	mov	r3, r0
   139a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   139a8:	4a10      	ldr	r2, [pc, #64]	; (139ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   139aa:	9b01      	ldr	r3, [sp, #4]
   139ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139b0:	2b00      	cmp	r3, #0
   139b2:	d10d      	bne.n	139d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   139b4:	f7ec ffba 	bl	92c <Adc_schm_read_msr>
   139b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   139ba:	9b00      	ldr	r3, [sp, #0]
   139bc:	f003 0301 	and.w	r3, r3, #1
   139c0:	2b00      	cmp	r3, #0
   139c2:	d100      	bne.n	139c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   139c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   139c6:	490a      	ldr	r1, [pc, #40]	; (139f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   139c8:	9b01      	ldr	r3, [sp, #4]
   139ca:	9a00      	ldr	r2, [sp, #0]
   139cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   139d0:	4a06      	ldr	r2, [pc, #24]	; (139ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   139d2:	9b01      	ldr	r3, [sp, #4]
   139d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139d8:	1c5a      	adds	r2, r3, #1
   139da:	4904      	ldr	r1, [pc, #16]	; (139ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   139dc:	9b01      	ldr	r3, [sp, #4]
   139de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   139e2:	bf00      	nop
   139e4:	b003      	add	sp, #12
   139e6:	f85d fb04 	ldr.w	pc, [sp], #4
   139ea:	bf00      	nop
   139ec:	1fff9660 	.word	0x1fff9660
   139f0:	1fff965c 	.word	0x1fff965c

000139f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   139f4:	b500      	push	{lr}
   139f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139f8:	f7ed f930 	bl	c5c <Sys_GetCoreID>
   139fc:	4603      	mov	r3, r0
   139fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   13a00:	4a0d      	ldr	r2, [pc, #52]	; (13a38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13a02:	9b01      	ldr	r3, [sp, #4]
   13a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a08:	1e5a      	subs	r2, r3, #1
   13a0a:	490b      	ldr	r1, [pc, #44]	; (13a38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13a0c:	9b01      	ldr	r3, [sp, #4]
   13a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   13a12:	4a0a      	ldr	r2, [pc, #40]	; (13a3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   13a14:	9b01      	ldr	r3, [sp, #4]
   13a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a1a:	f003 0301 	and.w	r3, r3, #1
   13a1e:	2b00      	cmp	r3, #0
   13a20:	d106      	bne.n	13a30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   13a22:	4a05      	ldr	r2, [pc, #20]	; (13a38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13a24:	9b01      	ldr	r3, [sp, #4]
   13a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a2a:	2b00      	cmp	r3, #0
   13a2c:	d100      	bne.n	13a30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a30:	bf00      	nop
   13a32:	b003      	add	sp, #12
   13a34:	f85d fb04 	ldr.w	pc, [sp], #4
   13a38:	1fff9660 	.word	0x1fff9660
   13a3c:	1fff965c 	.word	0x1fff965c

00013a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   13a40:	b500      	push	{lr}
   13a42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a44:	f7ed f90a 	bl	c5c <Sys_GetCoreID>
   13a48:	4603      	mov	r3, r0
   13a4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   13a4c:	4a10      	ldr	r2, [pc, #64]	; (13a90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13a4e:	9b01      	ldr	r3, [sp, #4]
   13a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a54:	2b00      	cmp	r3, #0
   13a56:	d10d      	bne.n	13a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a58:	f7ec ff68 	bl	92c <Adc_schm_read_msr>
   13a5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a5e:	9b00      	ldr	r3, [sp, #0]
   13a60:	f003 0301 	and.w	r3, r3, #1
   13a64:	2b00      	cmp	r3, #0
   13a66:	d100      	bne.n	13a6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   13a6a:	490a      	ldr	r1, [pc, #40]	; (13a94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   13a6c:	9b01      	ldr	r3, [sp, #4]
   13a6e:	9a00      	ldr	r2, [sp, #0]
   13a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   13a74:	4a06      	ldr	r2, [pc, #24]	; (13a90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13a76:	9b01      	ldr	r3, [sp, #4]
   13a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a7c:	1c5a      	adds	r2, r3, #1
   13a7e:	4904      	ldr	r1, [pc, #16]	; (13a90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13a80:	9b01      	ldr	r3, [sp, #4]
   13a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a86:	bf00      	nop
   13a88:	b003      	add	sp, #12
   13a8a:	f85d fb04 	ldr.w	pc, [sp], #4
   13a8e:	bf00      	nop
   13a90:	1fff9668 	.word	0x1fff9668
   13a94:	1fff9664 	.word	0x1fff9664

00013a98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   13a98:	b500      	push	{lr}
   13a9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a9c:	f7ed f8de 	bl	c5c <Sys_GetCoreID>
   13aa0:	4603      	mov	r3, r0
   13aa2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   13aa4:	4a0d      	ldr	r2, [pc, #52]	; (13adc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13aa6:	9b01      	ldr	r3, [sp, #4]
   13aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aac:	1e5a      	subs	r2, r3, #1
   13aae:	490b      	ldr	r1, [pc, #44]	; (13adc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13ab0:	9b01      	ldr	r3, [sp, #4]
   13ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   13ab6:	4a0a      	ldr	r2, [pc, #40]	; (13ae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   13ab8:	9b01      	ldr	r3, [sp, #4]
   13aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13abe:	f003 0301 	and.w	r3, r3, #1
   13ac2:	2b00      	cmp	r3, #0
   13ac4:	d106      	bne.n	13ad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   13ac6:	4a05      	ldr	r2, [pc, #20]	; (13adc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13ac8:	9b01      	ldr	r3, [sp, #4]
   13aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ace:	2b00      	cmp	r3, #0
   13ad0:	d100      	bne.n	13ad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ad2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ad4:	bf00      	nop
   13ad6:	b003      	add	sp, #12
   13ad8:	f85d fb04 	ldr.w	pc, [sp], #4
   13adc:	1fff9668 	.word	0x1fff9668
   13ae0:	1fff9664 	.word	0x1fff9664

00013ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13ae4:	b500      	push	{lr}
   13ae6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ae8:	f7ed f8b8 	bl	c5c <Sys_GetCoreID>
   13aec:	4603      	mov	r3, r0
   13aee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   13af0:	4a10      	ldr	r2, [pc, #64]	; (13b34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13af2:	9b01      	ldr	r3, [sp, #4]
   13af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13af8:	2b00      	cmp	r3, #0
   13afa:	d10d      	bne.n	13b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13afc:	f7ec ff16 	bl	92c <Adc_schm_read_msr>
   13b00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b02:	9b00      	ldr	r3, [sp, #0]
   13b04:	f003 0301 	and.w	r3, r3, #1
   13b08:	2b00      	cmp	r3, #0
   13b0a:	d100      	bne.n	13b0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   13b0e:	490a      	ldr	r1, [pc, #40]	; (13b38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   13b10:	9b01      	ldr	r3, [sp, #4]
   13b12:	9a00      	ldr	r2, [sp, #0]
   13b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   13b18:	4a06      	ldr	r2, [pc, #24]	; (13b34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13b1a:	9b01      	ldr	r3, [sp, #4]
   13b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b20:	1c5a      	adds	r2, r3, #1
   13b22:	4904      	ldr	r1, [pc, #16]	; (13b34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13b24:	9b01      	ldr	r3, [sp, #4]
   13b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b2a:	bf00      	nop
   13b2c:	b003      	add	sp, #12
   13b2e:	f85d fb04 	ldr.w	pc, [sp], #4
   13b32:	bf00      	nop
   13b34:	1fff9670 	.word	0x1fff9670
   13b38:	1fff966c 	.word	0x1fff966c

00013b3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13b3c:	b500      	push	{lr}
   13b3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b40:	f7ed f88c 	bl	c5c <Sys_GetCoreID>
   13b44:	4603      	mov	r3, r0
   13b46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   13b48:	4a0d      	ldr	r2, [pc, #52]	; (13b80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13b4a:	9b01      	ldr	r3, [sp, #4]
   13b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b50:	1e5a      	subs	r2, r3, #1
   13b52:	490b      	ldr	r1, [pc, #44]	; (13b80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13b54:	9b01      	ldr	r3, [sp, #4]
   13b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   13b5a:	4a0a      	ldr	r2, [pc, #40]	; (13b84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   13b5c:	9b01      	ldr	r3, [sp, #4]
   13b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b62:	f003 0301 	and.w	r3, r3, #1
   13b66:	2b00      	cmp	r3, #0
   13b68:	d106      	bne.n	13b78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   13b6a:	4a05      	ldr	r2, [pc, #20]	; (13b80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13b6c:	9b01      	ldr	r3, [sp, #4]
   13b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b72:	2b00      	cmp	r3, #0
   13b74:	d100      	bne.n	13b78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b78:	bf00      	nop
   13b7a:	b003      	add	sp, #12
   13b7c:	f85d fb04 	ldr.w	pc, [sp], #4
   13b80:	1fff9670 	.word	0x1fff9670
   13b84:	1fff966c 	.word	0x1fff966c

00013b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13b88:	b500      	push	{lr}
   13b8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b8c:	f7ed f866 	bl	c5c <Sys_GetCoreID>
   13b90:	4603      	mov	r3, r0
   13b92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   13b94:	4a10      	ldr	r2, [pc, #64]	; (13bd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13b96:	9b01      	ldr	r3, [sp, #4]
   13b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b9c:	2b00      	cmp	r3, #0
   13b9e:	d10d      	bne.n	13bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ba0:	f7ec fec4 	bl	92c <Adc_schm_read_msr>
   13ba4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ba6:	9b00      	ldr	r3, [sp, #0]
   13ba8:	f003 0301 	and.w	r3, r3, #1
   13bac:	2b00      	cmp	r3, #0
   13bae:	d100      	bne.n	13bb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13bb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   13bb2:	490a      	ldr	r1, [pc, #40]	; (13bdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   13bb4:	9b01      	ldr	r3, [sp, #4]
   13bb6:	9a00      	ldr	r2, [sp, #0]
   13bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   13bbc:	4a06      	ldr	r2, [pc, #24]	; (13bd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13bbe:	9b01      	ldr	r3, [sp, #4]
   13bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bc4:	1c5a      	adds	r2, r3, #1
   13bc6:	4904      	ldr	r1, [pc, #16]	; (13bd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13bc8:	9b01      	ldr	r3, [sp, #4]
   13bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13bce:	bf00      	nop
   13bd0:	b003      	add	sp, #12
   13bd2:	f85d fb04 	ldr.w	pc, [sp], #4
   13bd6:	bf00      	nop
   13bd8:	1fff9678 	.word	0x1fff9678
   13bdc:	1fff9674 	.word	0x1fff9674

00013be0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13be0:	b500      	push	{lr}
   13be2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13be4:	f7ed f83a 	bl	c5c <Sys_GetCoreID>
   13be8:	4603      	mov	r3, r0
   13bea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   13bec:	4a0d      	ldr	r2, [pc, #52]	; (13c24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13bee:	9b01      	ldr	r3, [sp, #4]
   13bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bf4:	1e5a      	subs	r2, r3, #1
   13bf6:	490b      	ldr	r1, [pc, #44]	; (13c24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13bf8:	9b01      	ldr	r3, [sp, #4]
   13bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   13bfe:	4a0a      	ldr	r2, [pc, #40]	; (13c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   13c00:	9b01      	ldr	r3, [sp, #4]
   13c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c06:	f003 0301 	and.w	r3, r3, #1
   13c0a:	2b00      	cmp	r3, #0
   13c0c:	d106      	bne.n	13c1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   13c0e:	4a05      	ldr	r2, [pc, #20]	; (13c24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13c10:	9b01      	ldr	r3, [sp, #4]
   13c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c16:	2b00      	cmp	r3, #0
   13c18:	d100      	bne.n	13c1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c1c:	bf00      	nop
   13c1e:	b003      	add	sp, #12
   13c20:	f85d fb04 	ldr.w	pc, [sp], #4
   13c24:	1fff9678 	.word	0x1fff9678
   13c28:	1fff9674 	.word	0x1fff9674

00013c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13c2c:	b500      	push	{lr}
   13c2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c30:	f7ed f814 	bl	c5c <Sys_GetCoreID>
   13c34:	4603      	mov	r3, r0
   13c36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   13c38:	4a10      	ldr	r2, [pc, #64]	; (13c7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13c3a:	9b01      	ldr	r3, [sp, #4]
   13c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c40:	2b00      	cmp	r3, #0
   13c42:	d10d      	bne.n	13c60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c44:	f7ec fe72 	bl	92c <Adc_schm_read_msr>
   13c48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c4a:	9b00      	ldr	r3, [sp, #0]
   13c4c:	f003 0301 	and.w	r3, r3, #1
   13c50:	2b00      	cmp	r3, #0
   13c52:	d100      	bne.n	13c56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   13c56:	490a      	ldr	r1, [pc, #40]	; (13c80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   13c58:	9b01      	ldr	r3, [sp, #4]
   13c5a:	9a00      	ldr	r2, [sp, #0]
   13c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   13c60:	4a06      	ldr	r2, [pc, #24]	; (13c7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13c62:	9b01      	ldr	r3, [sp, #4]
   13c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c68:	1c5a      	adds	r2, r3, #1
   13c6a:	4904      	ldr	r1, [pc, #16]	; (13c7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13c6c:	9b01      	ldr	r3, [sp, #4]
   13c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c72:	bf00      	nop
   13c74:	b003      	add	sp, #12
   13c76:	f85d fb04 	ldr.w	pc, [sp], #4
   13c7a:	bf00      	nop
   13c7c:	1fff9680 	.word	0x1fff9680
   13c80:	1fff967c 	.word	0x1fff967c

00013c84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13c84:	b500      	push	{lr}
   13c86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c88:	f7ec ffe8 	bl	c5c <Sys_GetCoreID>
   13c8c:	4603      	mov	r3, r0
   13c8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   13c90:	4a0d      	ldr	r2, [pc, #52]	; (13cc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13c92:	9b01      	ldr	r3, [sp, #4]
   13c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c98:	1e5a      	subs	r2, r3, #1
   13c9a:	490b      	ldr	r1, [pc, #44]	; (13cc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13c9c:	9b01      	ldr	r3, [sp, #4]
   13c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   13ca2:	4a0a      	ldr	r2, [pc, #40]	; (13ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   13ca4:	9b01      	ldr	r3, [sp, #4]
   13ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13caa:	f003 0301 	and.w	r3, r3, #1
   13cae:	2b00      	cmp	r3, #0
   13cb0:	d106      	bne.n	13cc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   13cb2:	4a05      	ldr	r2, [pc, #20]	; (13cc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13cb4:	9b01      	ldr	r3, [sp, #4]
   13cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cba:	2b00      	cmp	r3, #0
   13cbc:	d100      	bne.n	13cc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13cbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13cc0:	bf00      	nop
   13cc2:	b003      	add	sp, #12
   13cc4:	f85d fb04 	ldr.w	pc, [sp], #4
   13cc8:	1fff9680 	.word	0x1fff9680
   13ccc:	1fff967c 	.word	0x1fff967c

00013cd0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13cd0:	b500      	push	{lr}
   13cd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cd4:	f7ec ffc2 	bl	c5c <Sys_GetCoreID>
   13cd8:	4603      	mov	r3, r0
   13cda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
   13cdc:	4a10      	ldr	r2, [pc, #64]	; (13d20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13cde:	9b01      	ldr	r3, [sp, #4]
   13ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ce4:	2b00      	cmp	r3, #0
   13ce6:	d10d      	bne.n	13d04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ce8:	f7ec fe29 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13cec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13cee:	9b00      	ldr	r3, [sp, #0]
   13cf0:	f003 0301 	and.w	r3, r3, #1
   13cf4:	2b00      	cmp	r3, #0
   13cf6:	d100      	bne.n	13cfa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13cf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   13cfa:	490a      	ldr	r1, [pc, #40]	; (13d24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
   13cfc:	9b01      	ldr	r3, [sp, #4]
   13cfe:	9a00      	ldr	r2, [sp, #0]
   13d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
   13d04:	4a06      	ldr	r2, [pc, #24]	; (13d20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13d06:	9b01      	ldr	r3, [sp, #4]
   13d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d0c:	1c5a      	adds	r2, r3, #1
   13d0e:	4904      	ldr	r1, [pc, #16]	; (13d20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13d10:	9b01      	ldr	r3, [sp, #4]
   13d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d16:	bf00      	nop
   13d18:	b003      	add	sp, #12
   13d1a:	f85d fb04 	ldr.w	pc, [sp], #4
   13d1e:	bf00      	nop
   13d20:	1fff9688 	.word	0x1fff9688
   13d24:	1fff9684 	.word	0x1fff9684

00013d28 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13d28:	b500      	push	{lr}
   13d2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d2c:	f7ec ff96 	bl	c5c <Sys_GetCoreID>
   13d30:	4603      	mov	r3, r0
   13d32:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
   13d34:	4a0d      	ldr	r2, [pc, #52]	; (13d6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13d36:	9b01      	ldr	r3, [sp, #4]
   13d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d3c:	1e5a      	subs	r2, r3, #1
   13d3e:	490b      	ldr	r1, [pc, #44]	; (13d6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13d40:	9b01      	ldr	r3, [sp, #4]
   13d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   13d46:	4a0a      	ldr	r2, [pc, #40]	; (13d70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
   13d48:	9b01      	ldr	r3, [sp, #4]
   13d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d4e:	f003 0301 	and.w	r3, r3, #1
   13d52:	2b00      	cmp	r3, #0
   13d54:	d106      	bne.n	13d64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
   13d56:	4a05      	ldr	r2, [pc, #20]	; (13d6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13d58:	9b01      	ldr	r3, [sp, #4]
   13d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d5e:	2b00      	cmp	r3, #0
   13d60:	d100      	bne.n	13d64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d64:	bf00      	nop
   13d66:	b003      	add	sp, #12
   13d68:	f85d fb04 	ldr.w	pc, [sp], #4
   13d6c:	1fff9688 	.word	0x1fff9688
   13d70:	1fff9684 	.word	0x1fff9684

00013d74 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13d74:	b500      	push	{lr}
   13d76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d78:	f7ec ff70 	bl	c5c <Sys_GetCoreID>
   13d7c:	4603      	mov	r3, r0
   13d7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
   13d80:	4a10      	ldr	r2, [pc, #64]	; (13dc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13d82:	9b01      	ldr	r3, [sp, #4]
   13d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d88:	2b00      	cmp	r3, #0
   13d8a:	d10d      	bne.n	13da8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d8c:	f7ec fdd7 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13d90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d92:	9b00      	ldr	r3, [sp, #0]
   13d94:	f003 0301 	and.w	r3, r3, #1
   13d98:	2b00      	cmp	r3, #0
   13d9a:	d100      	bne.n	13d9e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   13d9e:	490a      	ldr	r1, [pc, #40]	; (13dc8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
   13da0:	9b01      	ldr	r3, [sp, #4]
   13da2:	9a00      	ldr	r2, [sp, #0]
   13da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
   13da8:	4a06      	ldr	r2, [pc, #24]	; (13dc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13daa:	9b01      	ldr	r3, [sp, #4]
   13dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13db0:	1c5a      	adds	r2, r3, #1
   13db2:	4904      	ldr	r1, [pc, #16]	; (13dc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13db4:	9b01      	ldr	r3, [sp, #4]
   13db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13dba:	bf00      	nop
   13dbc:	b003      	add	sp, #12
   13dbe:	f85d fb04 	ldr.w	pc, [sp], #4
   13dc2:	bf00      	nop
   13dc4:	1fff9690 	.word	0x1fff9690
   13dc8:	1fff968c 	.word	0x1fff968c

00013dcc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13dcc:	b500      	push	{lr}
   13dce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13dd0:	f7ec ff44 	bl	c5c <Sys_GetCoreID>
   13dd4:	4603      	mov	r3, r0
   13dd6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
   13dd8:	4a0d      	ldr	r2, [pc, #52]	; (13e10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13dda:	9b01      	ldr	r3, [sp, #4]
   13ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13de0:	1e5a      	subs	r2, r3, #1
   13de2:	490b      	ldr	r1, [pc, #44]	; (13e10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13de4:	9b01      	ldr	r3, [sp, #4]
   13de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   13dea:	4a0a      	ldr	r2, [pc, #40]	; (13e14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
   13dec:	9b01      	ldr	r3, [sp, #4]
   13dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13df2:	f003 0301 	and.w	r3, r3, #1
   13df6:	2b00      	cmp	r3, #0
   13df8:	d106      	bne.n	13e08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
   13dfa:	4a05      	ldr	r2, [pc, #20]	; (13e10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13dfc:	9b01      	ldr	r3, [sp, #4]
   13dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e02:	2b00      	cmp	r3, #0
   13e04:	d100      	bne.n	13e08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e08:	bf00      	nop
   13e0a:	b003      	add	sp, #12
   13e0c:	f85d fb04 	ldr.w	pc, [sp], #4
   13e10:	1fff9690 	.word	0x1fff9690
   13e14:	1fff968c 	.word	0x1fff968c

00013e18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13e18:	b500      	push	{lr}
   13e1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e1c:	f7ec ff1e 	bl	c5c <Sys_GetCoreID>
   13e20:	4603      	mov	r3, r0
   13e22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
   13e24:	4a10      	ldr	r2, [pc, #64]	; (13e68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13e26:	9b01      	ldr	r3, [sp, #4]
   13e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e2c:	2b00      	cmp	r3, #0
   13e2e:	d10d      	bne.n	13e4c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e30:	f7ec fd85 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13e34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e36:	9b00      	ldr	r3, [sp, #0]
   13e38:	f003 0301 	and.w	r3, r3, #1
   13e3c:	2b00      	cmp	r3, #0
   13e3e:	d100      	bne.n	13e42 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   13e42:	490a      	ldr	r1, [pc, #40]	; (13e6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
   13e44:	9b01      	ldr	r3, [sp, #4]
   13e46:	9a00      	ldr	r2, [sp, #0]
   13e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
   13e4c:	4a06      	ldr	r2, [pc, #24]	; (13e68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13e4e:	9b01      	ldr	r3, [sp, #4]
   13e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e54:	1c5a      	adds	r2, r3, #1
   13e56:	4904      	ldr	r1, [pc, #16]	; (13e68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13e58:	9b01      	ldr	r3, [sp, #4]
   13e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e5e:	bf00      	nop
   13e60:	b003      	add	sp, #12
   13e62:	f85d fb04 	ldr.w	pc, [sp], #4
   13e66:	bf00      	nop
   13e68:	1fff9698 	.word	0x1fff9698
   13e6c:	1fff9694 	.word	0x1fff9694

00013e70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13e70:	b500      	push	{lr}
   13e72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e74:	f7ec fef2 	bl	c5c <Sys_GetCoreID>
   13e78:	4603      	mov	r3, r0
   13e7a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
   13e7c:	4a0d      	ldr	r2, [pc, #52]	; (13eb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13e7e:	9b01      	ldr	r3, [sp, #4]
   13e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e84:	1e5a      	subs	r2, r3, #1
   13e86:	490b      	ldr	r1, [pc, #44]	; (13eb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13e88:	9b01      	ldr	r3, [sp, #4]
   13e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   13e8e:	4a0a      	ldr	r2, [pc, #40]	; (13eb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
   13e90:	9b01      	ldr	r3, [sp, #4]
   13e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e96:	f003 0301 	and.w	r3, r3, #1
   13e9a:	2b00      	cmp	r3, #0
   13e9c:	d106      	bne.n	13eac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
   13e9e:	4a05      	ldr	r2, [pc, #20]	; (13eb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13ea0:	9b01      	ldr	r3, [sp, #4]
   13ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ea6:	2b00      	cmp	r3, #0
   13ea8:	d100      	bne.n	13eac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13eaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13eac:	bf00      	nop
   13eae:	b003      	add	sp, #12
   13eb0:	f85d fb04 	ldr.w	pc, [sp], #4
   13eb4:	1fff9698 	.word	0x1fff9698
   13eb8:	1fff9694 	.word	0x1fff9694

00013ebc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13ebc:	b500      	push	{lr}
   13ebe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ec0:	f7ec fecc 	bl	c5c <Sys_GetCoreID>
   13ec4:	4603      	mov	r3, r0
   13ec6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
   13ec8:	4a10      	ldr	r2, [pc, #64]	; (13f0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13eca:	9b01      	ldr	r3, [sp, #4]
   13ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ed0:	2b00      	cmp	r3, #0
   13ed2:	d10d      	bne.n	13ef0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ed4:	f7ec fd33 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13ed8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13eda:	9b00      	ldr	r3, [sp, #0]
   13edc:	f003 0301 	and.w	r3, r3, #1
   13ee0:	2b00      	cmp	r3, #0
   13ee2:	d100      	bne.n	13ee6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ee4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   13ee6:	490a      	ldr	r1, [pc, #40]	; (13f10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
   13ee8:	9b01      	ldr	r3, [sp, #4]
   13eea:	9a00      	ldr	r2, [sp, #0]
   13eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
   13ef0:	4a06      	ldr	r2, [pc, #24]	; (13f0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13ef2:	9b01      	ldr	r3, [sp, #4]
   13ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ef8:	1c5a      	adds	r2, r3, #1
   13efa:	4904      	ldr	r1, [pc, #16]	; (13f0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13efc:	9b01      	ldr	r3, [sp, #4]
   13efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f02:	bf00      	nop
   13f04:	b003      	add	sp, #12
   13f06:	f85d fb04 	ldr.w	pc, [sp], #4
   13f0a:	bf00      	nop
   13f0c:	1fff96a0 	.word	0x1fff96a0
   13f10:	1fff969c 	.word	0x1fff969c

00013f14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13f14:	b500      	push	{lr}
   13f16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f18:	f7ec fea0 	bl	c5c <Sys_GetCoreID>
   13f1c:	4603      	mov	r3, r0
   13f1e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
   13f20:	4a0d      	ldr	r2, [pc, #52]	; (13f58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13f22:	9b01      	ldr	r3, [sp, #4]
   13f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f28:	1e5a      	subs	r2, r3, #1
   13f2a:	490b      	ldr	r1, [pc, #44]	; (13f58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13f2c:	9b01      	ldr	r3, [sp, #4]
   13f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   13f32:	4a0a      	ldr	r2, [pc, #40]	; (13f5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
   13f34:	9b01      	ldr	r3, [sp, #4]
   13f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f3a:	f003 0301 	and.w	r3, r3, #1
   13f3e:	2b00      	cmp	r3, #0
   13f40:	d106      	bne.n	13f50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
   13f42:	4a05      	ldr	r2, [pc, #20]	; (13f58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13f44:	9b01      	ldr	r3, [sp, #4]
   13f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f4a:	2b00      	cmp	r3, #0
   13f4c:	d100      	bne.n	13f50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f50:	bf00      	nop
   13f52:	b003      	add	sp, #12
   13f54:	f85d fb04 	ldr.w	pc, [sp], #4
   13f58:	1fff96a0 	.word	0x1fff96a0
   13f5c:	1fff969c 	.word	0x1fff969c

00013f60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   13f60:	b500      	push	{lr}
   13f62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f64:	f7ec fe7a 	bl	c5c <Sys_GetCoreID>
   13f68:	4603      	mov	r3, r0
   13f6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
   13f6c:	4a10      	ldr	r2, [pc, #64]	; (13fb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13f6e:	9b01      	ldr	r3, [sp, #4]
   13f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f74:	2b00      	cmp	r3, #0
   13f76:	d10d      	bne.n	13f94 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f78:	f7ec fce1 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13f7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f7e:	9b00      	ldr	r3, [sp, #0]
   13f80:	f003 0301 	and.w	r3, r3, #1
   13f84:	2b00      	cmp	r3, #0
   13f86:	d100      	bne.n	13f8a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   13f8a:	490a      	ldr	r1, [pc, #40]	; (13fb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
   13f8c:	9b01      	ldr	r3, [sp, #4]
   13f8e:	9a00      	ldr	r2, [sp, #0]
   13f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
   13f94:	4a06      	ldr	r2, [pc, #24]	; (13fb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13f96:	9b01      	ldr	r3, [sp, #4]
   13f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f9c:	1c5a      	adds	r2, r3, #1
   13f9e:	4904      	ldr	r1, [pc, #16]	; (13fb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13fa0:	9b01      	ldr	r3, [sp, #4]
   13fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13fa6:	bf00      	nop
   13fa8:	b003      	add	sp, #12
   13faa:	f85d fb04 	ldr.w	pc, [sp], #4
   13fae:	bf00      	nop
   13fb0:	1fff96a8 	.word	0x1fff96a8
   13fb4:	1fff96a4 	.word	0x1fff96a4

00013fb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   13fb8:	b500      	push	{lr}
   13fba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fbc:	f7ec fe4e 	bl	c5c <Sys_GetCoreID>
   13fc0:	4603      	mov	r3, r0
   13fc2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
   13fc4:	4a0d      	ldr	r2, [pc, #52]	; (13ffc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13fc6:	9b01      	ldr	r3, [sp, #4]
   13fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fcc:	1e5a      	subs	r2, r3, #1
   13fce:	490b      	ldr	r1, [pc, #44]	; (13ffc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13fd0:	9b01      	ldr	r3, [sp, #4]
   13fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   13fd6:	4a0a      	ldr	r2, [pc, #40]	; (14000 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
   13fd8:	9b01      	ldr	r3, [sp, #4]
   13fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fde:	f003 0301 	and.w	r3, r3, #1
   13fe2:	2b00      	cmp	r3, #0
   13fe4:	d106      	bne.n	13ff4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
   13fe6:	4a05      	ldr	r2, [pc, #20]	; (13ffc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13fe8:	9b01      	ldr	r3, [sp, #4]
   13fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fee:	2b00      	cmp	r3, #0
   13ff0:	d100      	bne.n	13ff4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ff2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ff4:	bf00      	nop
   13ff6:	b003      	add	sp, #12
   13ff8:	f85d fb04 	ldr.w	pc, [sp], #4
   13ffc:	1fff96a8 	.word	0x1fff96a8
   14000:	1fff96a4 	.word	0x1fff96a4

00014004 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   14004:	b500      	push	{lr}
   14006:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14008:	f7ec fe28 	bl	c5c <Sys_GetCoreID>
   1400c:	4603      	mov	r3, r0
   1400e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
   14010:	4a10      	ldr	r2, [pc, #64]	; (14054 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   14012:	9b01      	ldr	r3, [sp, #4]
   14014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14018:	2b00      	cmp	r3, #0
   1401a:	d10d      	bne.n	14038 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1401c:	f7ec fc8f 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14020:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14022:	9b00      	ldr	r3, [sp, #0]
   14024:	f003 0301 	and.w	r3, r3, #1
   14028:	2b00      	cmp	r3, #0
   1402a:	d100      	bne.n	1402e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1402c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   1402e:	490a      	ldr	r1, [pc, #40]	; (14058 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
   14030:	9b01      	ldr	r3, [sp, #4]
   14032:	9a00      	ldr	r2, [sp, #0]
   14034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
   14038:	4a06      	ldr	r2, [pc, #24]	; (14054 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   1403a:	9b01      	ldr	r3, [sp, #4]
   1403c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14040:	1c5a      	adds	r2, r3, #1
   14042:	4904      	ldr	r1, [pc, #16]	; (14054 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   14044:	9b01      	ldr	r3, [sp, #4]
   14046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1404a:	bf00      	nop
   1404c:	b003      	add	sp, #12
   1404e:	f85d fb04 	ldr.w	pc, [sp], #4
   14052:	bf00      	nop
   14054:	1fff96b0 	.word	0x1fff96b0
   14058:	1fff96ac 	.word	0x1fff96ac

0001405c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   1405c:	b500      	push	{lr}
   1405e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14060:	f7ec fdfc 	bl	c5c <Sys_GetCoreID>
   14064:	4603      	mov	r3, r0
   14066:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
   14068:	4a0d      	ldr	r2, [pc, #52]	; (140a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   1406a:	9b01      	ldr	r3, [sp, #4]
   1406c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14070:	1e5a      	subs	r2, r3, #1
   14072:	490b      	ldr	r1, [pc, #44]	; (140a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   14074:	9b01      	ldr	r3, [sp, #4]
   14076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1407a:	4a0a      	ldr	r2, [pc, #40]	; (140a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
   1407c:	9b01      	ldr	r3, [sp, #4]
   1407e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14082:	f003 0301 	and.w	r3, r3, #1
   14086:	2b00      	cmp	r3, #0
   14088:	d106      	bne.n	14098 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
   1408a:	4a05      	ldr	r2, [pc, #20]	; (140a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   1408c:	9b01      	ldr	r3, [sp, #4]
   1408e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14092:	2b00      	cmp	r3, #0
   14094:	d100      	bne.n	14098 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14096:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14098:	bf00      	nop
   1409a:	b003      	add	sp, #12
   1409c:	f85d fb04 	ldr.w	pc, [sp], #4
   140a0:	1fff96b0 	.word	0x1fff96b0
   140a4:	1fff96ac 	.word	0x1fff96ac

000140a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   140a8:	b500      	push	{lr}
   140aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140ac:	f7ec fdd6 	bl	c5c <Sys_GetCoreID>
   140b0:	4603      	mov	r3, r0
   140b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
   140b4:	4a10      	ldr	r2, [pc, #64]	; (140f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   140b6:	9b01      	ldr	r3, [sp, #4]
   140b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140bc:	2b00      	cmp	r3, #0
   140be:	d10d      	bne.n	140dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   140c0:	f7ec fc3d 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   140c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   140c6:	9b00      	ldr	r3, [sp, #0]
   140c8:	f003 0301 	and.w	r3, r3, #1
   140cc:	2b00      	cmp	r3, #0
   140ce:	d100      	bne.n	140d2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   140d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   140d2:	490a      	ldr	r1, [pc, #40]	; (140fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
   140d4:	9b01      	ldr	r3, [sp, #4]
   140d6:	9a00      	ldr	r2, [sp, #0]
   140d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
   140dc:	4a06      	ldr	r2, [pc, #24]	; (140f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   140de:	9b01      	ldr	r3, [sp, #4]
   140e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140e4:	1c5a      	adds	r2, r3, #1
   140e6:	4904      	ldr	r1, [pc, #16]	; (140f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   140e8:	9b01      	ldr	r3, [sp, #4]
   140ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   140ee:	bf00      	nop
   140f0:	b003      	add	sp, #12
   140f2:	f85d fb04 	ldr.w	pc, [sp], #4
   140f6:	bf00      	nop
   140f8:	1fff96b8 	.word	0x1fff96b8
   140fc:	1fff96b4 	.word	0x1fff96b4

00014100 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   14100:	b500      	push	{lr}
   14102:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14104:	f7ec fdaa 	bl	c5c <Sys_GetCoreID>
   14108:	4603      	mov	r3, r0
   1410a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
   1410c:	4a0d      	ldr	r2, [pc, #52]	; (14144 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   1410e:	9b01      	ldr	r3, [sp, #4]
   14110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14114:	1e5a      	subs	r2, r3, #1
   14116:	490b      	ldr	r1, [pc, #44]	; (14144 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   14118:	9b01      	ldr	r3, [sp, #4]
   1411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   1411e:	4a0a      	ldr	r2, [pc, #40]	; (14148 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
   14120:	9b01      	ldr	r3, [sp, #4]
   14122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14126:	f003 0301 	and.w	r3, r3, #1
   1412a:	2b00      	cmp	r3, #0
   1412c:	d106      	bne.n	1413c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
   1412e:	4a05      	ldr	r2, [pc, #20]	; (14144 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   14130:	9b01      	ldr	r3, [sp, #4]
   14132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14136:	2b00      	cmp	r3, #0
   14138:	d100      	bne.n	1413c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1413a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1413c:	bf00      	nop
   1413e:	b003      	add	sp, #12
   14140:	f85d fb04 	ldr.w	pc, [sp], #4
   14144:	1fff96b8 	.word	0x1fff96b8
   14148:	1fff96b4 	.word	0x1fff96b4

0001414c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   1414c:	b500      	push	{lr}
   1414e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14150:	f7ec fd84 	bl	c5c <Sys_GetCoreID>
   14154:	4603      	mov	r3, r0
   14156:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
   14158:	4a10      	ldr	r2, [pc, #64]	; (1419c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   1415a:	9b01      	ldr	r3, [sp, #4]
   1415c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14160:	2b00      	cmp	r3, #0
   14162:	d10d      	bne.n	14180 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14164:	f7ec fbeb 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14168:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1416a:	9b00      	ldr	r3, [sp, #0]
   1416c:	f003 0301 	and.w	r3, r3, #1
   14170:	2b00      	cmp	r3, #0
   14172:	d100      	bne.n	14176 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14174:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   14176:	490a      	ldr	r1, [pc, #40]	; (141a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
   14178:	9b01      	ldr	r3, [sp, #4]
   1417a:	9a00      	ldr	r2, [sp, #0]
   1417c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
   14180:	4a06      	ldr	r2, [pc, #24]	; (1419c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   14182:	9b01      	ldr	r3, [sp, #4]
   14184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14188:	1c5a      	adds	r2, r3, #1
   1418a:	4904      	ldr	r1, [pc, #16]	; (1419c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   1418c:	9b01      	ldr	r3, [sp, #4]
   1418e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14192:	bf00      	nop
   14194:	b003      	add	sp, #12
   14196:	f85d fb04 	ldr.w	pc, [sp], #4
   1419a:	bf00      	nop
   1419c:	1fff96c0 	.word	0x1fff96c0
   141a0:	1fff96bc 	.word	0x1fff96bc

000141a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   141a4:	b500      	push	{lr}
   141a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141a8:	f7ec fd58 	bl	c5c <Sys_GetCoreID>
   141ac:	4603      	mov	r3, r0
   141ae:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
   141b0:	4a0d      	ldr	r2, [pc, #52]	; (141e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   141b2:	9b01      	ldr	r3, [sp, #4]
   141b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141b8:	1e5a      	subs	r2, r3, #1
   141ba:	490b      	ldr	r1, [pc, #44]	; (141e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   141bc:	9b01      	ldr	r3, [sp, #4]
   141be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   141c2:	4a0a      	ldr	r2, [pc, #40]	; (141ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
   141c4:	9b01      	ldr	r3, [sp, #4]
   141c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141ca:	f003 0301 	and.w	r3, r3, #1
   141ce:	2b00      	cmp	r3, #0
   141d0:	d106      	bne.n	141e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
   141d2:	4a05      	ldr	r2, [pc, #20]	; (141e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   141d4:	9b01      	ldr	r3, [sp, #4]
   141d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141da:	2b00      	cmp	r3, #0
   141dc:	d100      	bne.n	141e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   141de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   141e0:	bf00      	nop
   141e2:	b003      	add	sp, #12
   141e4:	f85d fb04 	ldr.w	pc, [sp], #4
   141e8:	1fff96c0 	.word	0x1fff96c0
   141ec:	1fff96bc 	.word	0x1fff96bc

000141f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   141f0:	b500      	push	{lr}
   141f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141f4:	f7ec fd32 	bl	c5c <Sys_GetCoreID>
   141f8:	4603      	mov	r3, r0
   141fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
   141fc:	4a10      	ldr	r2, [pc, #64]	; (14240 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   141fe:	9b01      	ldr	r3, [sp, #4]
   14200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14204:	2b00      	cmp	r3, #0
   14206:	d10d      	bne.n	14224 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14208:	f7ec fb99 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   1420c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1420e:	9b00      	ldr	r3, [sp, #0]
   14210:	f003 0301 	and.w	r3, r3, #1
   14214:	2b00      	cmp	r3, #0
   14216:	d100      	bne.n	1421a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14218:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1421a:	490a      	ldr	r1, [pc, #40]	; (14244 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
   1421c:	9b01      	ldr	r3, [sp, #4]
   1421e:	9a00      	ldr	r2, [sp, #0]
   14220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
   14224:	4a06      	ldr	r2, [pc, #24]	; (14240 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   14226:	9b01      	ldr	r3, [sp, #4]
   14228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1422c:	1c5a      	adds	r2, r3, #1
   1422e:	4904      	ldr	r1, [pc, #16]	; (14240 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   14230:	9b01      	ldr	r3, [sp, #4]
   14232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14236:	bf00      	nop
   14238:	b003      	add	sp, #12
   1423a:	f85d fb04 	ldr.w	pc, [sp], #4
   1423e:	bf00      	nop
   14240:	1fff96c8 	.word	0x1fff96c8
   14244:	1fff96c4 	.word	0x1fff96c4

00014248 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   14248:	b500      	push	{lr}
   1424a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1424c:	f7ec fd06 	bl	c5c <Sys_GetCoreID>
   14250:	4603      	mov	r3, r0
   14252:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
   14254:	4a0d      	ldr	r2, [pc, #52]	; (1428c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   14256:	9b01      	ldr	r3, [sp, #4]
   14258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1425c:	1e5a      	subs	r2, r3, #1
   1425e:	490b      	ldr	r1, [pc, #44]	; (1428c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   14260:	9b01      	ldr	r3, [sp, #4]
   14262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   14266:	4a0a      	ldr	r2, [pc, #40]	; (14290 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
   14268:	9b01      	ldr	r3, [sp, #4]
   1426a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1426e:	f003 0301 	and.w	r3, r3, #1
   14272:	2b00      	cmp	r3, #0
   14274:	d106      	bne.n	14284 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
   14276:	4a05      	ldr	r2, [pc, #20]	; (1428c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   14278:	9b01      	ldr	r3, [sp, #4]
   1427a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1427e:	2b00      	cmp	r3, #0
   14280:	d100      	bne.n	14284 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14282:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14284:	bf00      	nop
   14286:	b003      	add	sp, #12
   14288:	f85d fb04 	ldr.w	pc, [sp], #4
   1428c:	1fff96c8 	.word	0x1fff96c8
   14290:	1fff96c4 	.word	0x1fff96c4

00014294 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   14294:	b500      	push	{lr}
   14296:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14298:	f7ec fce0 	bl	c5c <Sys_GetCoreID>
   1429c:	4603      	mov	r3, r0
   1429e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
   142a0:	4a10      	ldr	r2, [pc, #64]	; (142e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   142a2:	9b01      	ldr	r3, [sp, #4]
   142a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142a8:	2b00      	cmp	r3, #0
   142aa:	d10d      	bne.n	142c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   142ac:	f7ec fb47 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   142b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   142b2:	9b00      	ldr	r3, [sp, #0]
   142b4:	f003 0301 	and.w	r3, r3, #1
   142b8:	2b00      	cmp	r3, #0
   142ba:	d100      	bne.n	142be <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   142bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   142be:	490a      	ldr	r1, [pc, #40]	; (142e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
   142c0:	9b01      	ldr	r3, [sp, #4]
   142c2:	9a00      	ldr	r2, [sp, #0]
   142c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
   142c8:	4a06      	ldr	r2, [pc, #24]	; (142e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   142ca:	9b01      	ldr	r3, [sp, #4]
   142cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142d0:	1c5a      	adds	r2, r3, #1
   142d2:	4904      	ldr	r1, [pc, #16]	; (142e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   142d4:	9b01      	ldr	r3, [sp, #4]
   142d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   142da:	bf00      	nop
   142dc:	b003      	add	sp, #12
   142de:	f85d fb04 	ldr.w	pc, [sp], #4
   142e2:	bf00      	nop
   142e4:	1fff96d0 	.word	0x1fff96d0
   142e8:	1fff96cc 	.word	0x1fff96cc

000142ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   142ec:	b500      	push	{lr}
   142ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142f0:	f7ec fcb4 	bl	c5c <Sys_GetCoreID>
   142f4:	4603      	mov	r3, r0
   142f6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
   142f8:	4a0d      	ldr	r2, [pc, #52]	; (14330 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   142fa:	9b01      	ldr	r3, [sp, #4]
   142fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14300:	1e5a      	subs	r2, r3, #1
   14302:	490b      	ldr	r1, [pc, #44]	; (14330 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   14304:	9b01      	ldr	r3, [sp, #4]
   14306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1430a:	4a0a      	ldr	r2, [pc, #40]	; (14334 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
   1430c:	9b01      	ldr	r3, [sp, #4]
   1430e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14312:	f003 0301 	and.w	r3, r3, #1
   14316:	2b00      	cmp	r3, #0
   14318:	d106      	bne.n	14328 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
   1431a:	4a05      	ldr	r2, [pc, #20]	; (14330 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   1431c:	9b01      	ldr	r3, [sp, #4]
   1431e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14322:	2b00      	cmp	r3, #0
   14324:	d100      	bne.n	14328 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14326:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14328:	bf00      	nop
   1432a:	b003      	add	sp, #12
   1432c:	f85d fb04 	ldr.w	pc, [sp], #4
   14330:	1fff96d0 	.word	0x1fff96d0
   14334:	1fff96cc 	.word	0x1fff96cc

00014338 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   14338:	b500      	push	{lr}
   1433a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1433c:	f7ec fc8e 	bl	c5c <Sys_GetCoreID>
   14340:	4603      	mov	r3, r0
   14342:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
   14344:	4a10      	ldr	r2, [pc, #64]	; (14388 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   14346:	9b01      	ldr	r3, [sp, #4]
   14348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1434c:	2b00      	cmp	r3, #0
   1434e:	d10d      	bne.n	1436c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14350:	f7ec faf5 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14354:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14356:	9b00      	ldr	r3, [sp, #0]
   14358:	f003 0301 	and.w	r3, r3, #1
   1435c:	2b00      	cmp	r3, #0
   1435e:	d100      	bne.n	14362 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14360:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   14362:	490a      	ldr	r1, [pc, #40]	; (1438c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
   14364:	9b01      	ldr	r3, [sp, #4]
   14366:	9a00      	ldr	r2, [sp, #0]
   14368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
   1436c:	4a06      	ldr	r2, [pc, #24]	; (14388 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   1436e:	9b01      	ldr	r3, [sp, #4]
   14370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14374:	1c5a      	adds	r2, r3, #1
   14376:	4904      	ldr	r1, [pc, #16]	; (14388 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   14378:	9b01      	ldr	r3, [sp, #4]
   1437a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1437e:	bf00      	nop
   14380:	b003      	add	sp, #12
   14382:	f85d fb04 	ldr.w	pc, [sp], #4
   14386:	bf00      	nop
   14388:	1fff96d8 	.word	0x1fff96d8
   1438c:	1fff96d4 	.word	0x1fff96d4

00014390 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   14390:	b500      	push	{lr}
   14392:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14394:	f7ec fc62 	bl	c5c <Sys_GetCoreID>
   14398:	4603      	mov	r3, r0
   1439a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
   1439c:	4a0d      	ldr	r2, [pc, #52]	; (143d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   1439e:	9b01      	ldr	r3, [sp, #4]
   143a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143a4:	1e5a      	subs	r2, r3, #1
   143a6:	490b      	ldr	r1, [pc, #44]	; (143d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   143a8:	9b01      	ldr	r3, [sp, #4]
   143aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   143ae:	4a0a      	ldr	r2, [pc, #40]	; (143d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
   143b0:	9b01      	ldr	r3, [sp, #4]
   143b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143b6:	f003 0301 	and.w	r3, r3, #1
   143ba:	2b00      	cmp	r3, #0
   143bc:	d106      	bne.n	143cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
   143be:	4a05      	ldr	r2, [pc, #20]	; (143d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   143c0:	9b01      	ldr	r3, [sp, #4]
   143c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143c6:	2b00      	cmp	r3, #0
   143c8:	d100      	bne.n	143cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   143cc:	bf00      	nop
   143ce:	b003      	add	sp, #12
   143d0:	f85d fb04 	ldr.w	pc, [sp], #4
   143d4:	1fff96d8 	.word	0x1fff96d8
   143d8:	1fff96d4 	.word	0x1fff96d4

000143dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   143dc:	b500      	push	{lr}
   143de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143e0:	f7ec fc3c 	bl	c5c <Sys_GetCoreID>
   143e4:	4603      	mov	r3, r0
   143e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
   143e8:	4a10      	ldr	r2, [pc, #64]	; (1442c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   143ea:	9b01      	ldr	r3, [sp, #4]
   143ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143f0:	2b00      	cmp	r3, #0
   143f2:	d10d      	bne.n	14410 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   143f4:	f7ec faa3 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   143f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   143fa:	9b00      	ldr	r3, [sp, #0]
   143fc:	f003 0301 	and.w	r3, r3, #1
   14400:	2b00      	cmp	r3, #0
   14402:	d100      	bne.n	14406 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14404:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   14406:	490a      	ldr	r1, [pc, #40]	; (14430 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
   14408:	9b01      	ldr	r3, [sp, #4]
   1440a:	9a00      	ldr	r2, [sp, #0]
   1440c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
   14410:	4a06      	ldr	r2, [pc, #24]	; (1442c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   14412:	9b01      	ldr	r3, [sp, #4]
   14414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14418:	1c5a      	adds	r2, r3, #1
   1441a:	4904      	ldr	r1, [pc, #16]	; (1442c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   1441c:	9b01      	ldr	r3, [sp, #4]
   1441e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14422:	bf00      	nop
   14424:	b003      	add	sp, #12
   14426:	f85d fb04 	ldr.w	pc, [sp], #4
   1442a:	bf00      	nop
   1442c:	1fff96e0 	.word	0x1fff96e0
   14430:	1fff96dc 	.word	0x1fff96dc

00014434 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   14434:	b500      	push	{lr}
   14436:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14438:	f7ec fc10 	bl	c5c <Sys_GetCoreID>
   1443c:	4603      	mov	r3, r0
   1443e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
   14440:	4a0d      	ldr	r2, [pc, #52]	; (14478 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   14442:	9b01      	ldr	r3, [sp, #4]
   14444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14448:	1e5a      	subs	r2, r3, #1
   1444a:	490b      	ldr	r1, [pc, #44]	; (14478 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   1444c:	9b01      	ldr	r3, [sp, #4]
   1444e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   14452:	4a0a      	ldr	r2, [pc, #40]	; (1447c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
   14454:	9b01      	ldr	r3, [sp, #4]
   14456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1445a:	f003 0301 	and.w	r3, r3, #1
   1445e:	2b00      	cmp	r3, #0
   14460:	d106      	bne.n	14470 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
   14462:	4a05      	ldr	r2, [pc, #20]	; (14478 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   14464:	9b01      	ldr	r3, [sp, #4]
   14466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1446a:	2b00      	cmp	r3, #0
   1446c:	d100      	bne.n	14470 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1446e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14470:	bf00      	nop
   14472:	b003      	add	sp, #12
   14474:	f85d fb04 	ldr.w	pc, [sp], #4
   14478:	1fff96e0 	.word	0x1fff96e0
   1447c:	1fff96dc 	.word	0x1fff96dc

00014480 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   14480:	b500      	push	{lr}
   14482:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14484:	f7ec fbea 	bl	c5c <Sys_GetCoreID>
   14488:	4603      	mov	r3, r0
   1448a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
   1448c:	4a10      	ldr	r2, [pc, #64]	; (144d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   1448e:	9b01      	ldr	r3, [sp, #4]
   14490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14494:	2b00      	cmp	r3, #0
   14496:	d10d      	bne.n	144b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14498:	f7ec fa51 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   1449c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1449e:	9b00      	ldr	r3, [sp, #0]
   144a0:	f003 0301 	and.w	r3, r3, #1
   144a4:	2b00      	cmp	r3, #0
   144a6:	d100      	bne.n	144aa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   144a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   144aa:	490a      	ldr	r1, [pc, #40]	; (144d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
   144ac:	9b01      	ldr	r3, [sp, #4]
   144ae:	9a00      	ldr	r2, [sp, #0]
   144b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
   144b4:	4a06      	ldr	r2, [pc, #24]	; (144d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   144b6:	9b01      	ldr	r3, [sp, #4]
   144b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144bc:	1c5a      	adds	r2, r3, #1
   144be:	4904      	ldr	r1, [pc, #16]	; (144d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   144c0:	9b01      	ldr	r3, [sp, #4]
   144c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   144c6:	bf00      	nop
   144c8:	b003      	add	sp, #12
   144ca:	f85d fb04 	ldr.w	pc, [sp], #4
   144ce:	bf00      	nop
   144d0:	1fff96e8 	.word	0x1fff96e8
   144d4:	1fff96e4 	.word	0x1fff96e4

000144d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   144d8:	b500      	push	{lr}
   144da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144dc:	f7ec fbbe 	bl	c5c <Sys_GetCoreID>
   144e0:	4603      	mov	r3, r0
   144e2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
   144e4:	4a0d      	ldr	r2, [pc, #52]	; (1451c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   144e6:	9b01      	ldr	r3, [sp, #4]
   144e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144ec:	1e5a      	subs	r2, r3, #1
   144ee:	490b      	ldr	r1, [pc, #44]	; (1451c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   144f0:	9b01      	ldr	r3, [sp, #4]
   144f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   144f6:	4a0a      	ldr	r2, [pc, #40]	; (14520 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
   144f8:	9b01      	ldr	r3, [sp, #4]
   144fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144fe:	f003 0301 	and.w	r3, r3, #1
   14502:	2b00      	cmp	r3, #0
   14504:	d106      	bne.n	14514 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
   14506:	4a05      	ldr	r2, [pc, #20]	; (1451c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   14508:	9b01      	ldr	r3, [sp, #4]
   1450a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1450e:	2b00      	cmp	r3, #0
   14510:	d100      	bne.n	14514 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14512:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14514:	bf00      	nop
   14516:	b003      	add	sp, #12
   14518:	f85d fb04 	ldr.w	pc, [sp], #4
   1451c:	1fff96e8 	.word	0x1fff96e8
   14520:	1fff96e4 	.word	0x1fff96e4

00014524 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   14524:	b500      	push	{lr}
   14526:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14528:	f7ec fb98 	bl	c5c <Sys_GetCoreID>
   1452c:	4603      	mov	r3, r0
   1452e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
   14530:	4a10      	ldr	r2, [pc, #64]	; (14574 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   14532:	9b01      	ldr	r3, [sp, #4]
   14534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14538:	2b00      	cmp	r3, #0
   1453a:	d10d      	bne.n	14558 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1453c:	f7ec f9ff 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14540:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14542:	9b00      	ldr	r3, [sp, #0]
   14544:	f003 0301 	and.w	r3, r3, #1
   14548:	2b00      	cmp	r3, #0
   1454a:	d100      	bne.n	1454e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1454c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1454e:	490a      	ldr	r1, [pc, #40]	; (14578 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
   14550:	9b01      	ldr	r3, [sp, #4]
   14552:	9a00      	ldr	r2, [sp, #0]
   14554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
   14558:	4a06      	ldr	r2, [pc, #24]	; (14574 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   1455a:	9b01      	ldr	r3, [sp, #4]
   1455c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14560:	1c5a      	adds	r2, r3, #1
   14562:	4904      	ldr	r1, [pc, #16]	; (14574 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   14564:	9b01      	ldr	r3, [sp, #4]
   14566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1456a:	bf00      	nop
   1456c:	b003      	add	sp, #12
   1456e:	f85d fb04 	ldr.w	pc, [sp], #4
   14572:	bf00      	nop
   14574:	1fff96f0 	.word	0x1fff96f0
   14578:	1fff96ec 	.word	0x1fff96ec

0001457c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   1457c:	b500      	push	{lr}
   1457e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14580:	f7ec fb6c 	bl	c5c <Sys_GetCoreID>
   14584:	4603      	mov	r3, r0
   14586:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
   14588:	4a0d      	ldr	r2, [pc, #52]	; (145c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   1458a:	9b01      	ldr	r3, [sp, #4]
   1458c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14590:	1e5a      	subs	r2, r3, #1
   14592:	490b      	ldr	r1, [pc, #44]	; (145c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   14594:	9b01      	ldr	r3, [sp, #4]
   14596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1459a:	4a0a      	ldr	r2, [pc, #40]	; (145c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
   1459c:	9b01      	ldr	r3, [sp, #4]
   1459e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145a2:	f003 0301 	and.w	r3, r3, #1
   145a6:	2b00      	cmp	r3, #0
   145a8:	d106      	bne.n	145b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
   145aa:	4a05      	ldr	r2, [pc, #20]	; (145c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   145ac:	9b01      	ldr	r3, [sp, #4]
   145ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145b2:	2b00      	cmp	r3, #0
   145b4:	d100      	bne.n	145b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   145b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   145b8:	bf00      	nop
   145ba:	b003      	add	sp, #12
   145bc:	f85d fb04 	ldr.w	pc, [sp], #4
   145c0:	1fff96f0 	.word	0x1fff96f0
   145c4:	1fff96ec 	.word	0x1fff96ec

000145c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   145c8:	b500      	push	{lr}
   145ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145cc:	f7ec fb46 	bl	c5c <Sys_GetCoreID>
   145d0:	4603      	mov	r3, r0
   145d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
   145d4:	4a10      	ldr	r2, [pc, #64]	; (14618 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   145d6:	9b01      	ldr	r3, [sp, #4]
   145d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145dc:	2b00      	cmp	r3, #0
   145de:	d10d      	bne.n	145fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   145e0:	f7ec f9ad 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   145e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   145e6:	9b00      	ldr	r3, [sp, #0]
   145e8:	f003 0301 	and.w	r3, r3, #1
   145ec:	2b00      	cmp	r3, #0
   145ee:	d100      	bne.n	145f2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   145f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   145f2:	490a      	ldr	r1, [pc, #40]	; (1461c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
   145f4:	9b01      	ldr	r3, [sp, #4]
   145f6:	9a00      	ldr	r2, [sp, #0]
   145f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
   145fc:	4a06      	ldr	r2, [pc, #24]	; (14618 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   145fe:	9b01      	ldr	r3, [sp, #4]
   14600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14604:	1c5a      	adds	r2, r3, #1
   14606:	4904      	ldr	r1, [pc, #16]	; (14618 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   14608:	9b01      	ldr	r3, [sp, #4]
   1460a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1460e:	bf00      	nop
   14610:	b003      	add	sp, #12
   14612:	f85d fb04 	ldr.w	pc, [sp], #4
   14616:	bf00      	nop
   14618:	1fff96f8 	.word	0x1fff96f8
   1461c:	1fff96f4 	.word	0x1fff96f4

00014620 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   14620:	b500      	push	{lr}
   14622:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14624:	f7ec fb1a 	bl	c5c <Sys_GetCoreID>
   14628:	4603      	mov	r3, r0
   1462a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
   1462c:	4a0d      	ldr	r2, [pc, #52]	; (14664 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   1462e:	9b01      	ldr	r3, [sp, #4]
   14630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14634:	1e5a      	subs	r2, r3, #1
   14636:	490b      	ldr	r1, [pc, #44]	; (14664 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   14638:	9b01      	ldr	r3, [sp, #4]
   1463a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1463e:	4a0a      	ldr	r2, [pc, #40]	; (14668 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
   14640:	9b01      	ldr	r3, [sp, #4]
   14642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14646:	f003 0301 	and.w	r3, r3, #1
   1464a:	2b00      	cmp	r3, #0
   1464c:	d106      	bne.n	1465c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
   1464e:	4a05      	ldr	r2, [pc, #20]	; (14664 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   14650:	9b01      	ldr	r3, [sp, #4]
   14652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14656:	2b00      	cmp	r3, #0
   14658:	d100      	bne.n	1465c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1465a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1465c:	bf00      	nop
   1465e:	b003      	add	sp, #12
   14660:	f85d fb04 	ldr.w	pc, [sp], #4
   14664:	1fff96f8 	.word	0x1fff96f8
   14668:	1fff96f4 	.word	0x1fff96f4

0001466c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   1466c:	b500      	push	{lr}
   1466e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14670:	f7ec faf4 	bl	c5c <Sys_GetCoreID>
   14674:	4603      	mov	r3, r0
   14676:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
   14678:	4a10      	ldr	r2, [pc, #64]	; (146bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   1467a:	9b01      	ldr	r3, [sp, #4]
   1467c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14680:	2b00      	cmp	r3, #0
   14682:	d10d      	bne.n	146a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14684:	f7ec f95b 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14688:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1468a:	9b00      	ldr	r3, [sp, #0]
   1468c:	f003 0301 	and.w	r3, r3, #1
   14690:	2b00      	cmp	r3, #0
   14692:	d100      	bne.n	14696 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14694:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   14696:	490a      	ldr	r1, [pc, #40]	; (146c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
   14698:	9b01      	ldr	r3, [sp, #4]
   1469a:	9a00      	ldr	r2, [sp, #0]
   1469c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
   146a0:	4a06      	ldr	r2, [pc, #24]	; (146bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   146a2:	9b01      	ldr	r3, [sp, #4]
   146a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146a8:	1c5a      	adds	r2, r3, #1
   146aa:	4904      	ldr	r1, [pc, #16]	; (146bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   146ac:	9b01      	ldr	r3, [sp, #4]
   146ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   146b2:	bf00      	nop
   146b4:	b003      	add	sp, #12
   146b6:	f85d fb04 	ldr.w	pc, [sp], #4
   146ba:	bf00      	nop
   146bc:	1fff9700 	.word	0x1fff9700
   146c0:	1fff96fc 	.word	0x1fff96fc

000146c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   146c4:	b500      	push	{lr}
   146c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146c8:	f7ec fac8 	bl	c5c <Sys_GetCoreID>
   146cc:	4603      	mov	r3, r0
   146ce:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
   146d0:	4a0d      	ldr	r2, [pc, #52]	; (14708 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   146d2:	9b01      	ldr	r3, [sp, #4]
   146d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146d8:	1e5a      	subs	r2, r3, #1
   146da:	490b      	ldr	r1, [pc, #44]	; (14708 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   146dc:	9b01      	ldr	r3, [sp, #4]
   146de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   146e2:	4a0a      	ldr	r2, [pc, #40]	; (1470c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
   146e4:	9b01      	ldr	r3, [sp, #4]
   146e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146ea:	f003 0301 	and.w	r3, r3, #1
   146ee:	2b00      	cmp	r3, #0
   146f0:	d106      	bne.n	14700 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
   146f2:	4a05      	ldr	r2, [pc, #20]	; (14708 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   146f4:	9b01      	ldr	r3, [sp, #4]
   146f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146fa:	2b00      	cmp	r3, #0
   146fc:	d100      	bne.n	14700 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   146fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14700:	bf00      	nop
   14702:	b003      	add	sp, #12
   14704:	f85d fb04 	ldr.w	pc, [sp], #4
   14708:	1fff9700 	.word	0x1fff9700
   1470c:	1fff96fc 	.word	0x1fff96fc

00014710 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   14710:	b500      	push	{lr}
   14712:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14714:	f7ec faa2 	bl	c5c <Sys_GetCoreID>
   14718:	4603      	mov	r3, r0
   1471a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
   1471c:	4a10      	ldr	r2, [pc, #64]	; (14760 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   1471e:	9b01      	ldr	r3, [sp, #4]
   14720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14724:	2b00      	cmp	r3, #0
   14726:	d10d      	bne.n	14744 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14728:	f7ec f909 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   1472c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1472e:	9b00      	ldr	r3, [sp, #0]
   14730:	f003 0301 	and.w	r3, r3, #1
   14734:	2b00      	cmp	r3, #0
   14736:	d100      	bne.n	1473a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14738:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1473a:	490a      	ldr	r1, [pc, #40]	; (14764 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
   1473c:	9b01      	ldr	r3, [sp, #4]
   1473e:	9a00      	ldr	r2, [sp, #0]
   14740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
   14744:	4a06      	ldr	r2, [pc, #24]	; (14760 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   14746:	9b01      	ldr	r3, [sp, #4]
   14748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1474c:	1c5a      	adds	r2, r3, #1
   1474e:	4904      	ldr	r1, [pc, #16]	; (14760 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   14750:	9b01      	ldr	r3, [sp, #4]
   14752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14756:	bf00      	nop
   14758:	b003      	add	sp, #12
   1475a:	f85d fb04 	ldr.w	pc, [sp], #4
   1475e:	bf00      	nop
   14760:	1fff9708 	.word	0x1fff9708
   14764:	1fff9704 	.word	0x1fff9704

00014768 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   14768:	b500      	push	{lr}
   1476a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1476c:	f7ec fa76 	bl	c5c <Sys_GetCoreID>
   14770:	4603      	mov	r3, r0
   14772:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
   14774:	4a0d      	ldr	r2, [pc, #52]	; (147ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   14776:	9b01      	ldr	r3, [sp, #4]
   14778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1477c:	1e5a      	subs	r2, r3, #1
   1477e:	490b      	ldr	r1, [pc, #44]	; (147ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   14780:	9b01      	ldr	r3, [sp, #4]
   14782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   14786:	4a0a      	ldr	r2, [pc, #40]	; (147b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
   14788:	9b01      	ldr	r3, [sp, #4]
   1478a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1478e:	f003 0301 	and.w	r3, r3, #1
   14792:	2b00      	cmp	r3, #0
   14794:	d106      	bne.n	147a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
   14796:	4a05      	ldr	r2, [pc, #20]	; (147ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   14798:	9b01      	ldr	r3, [sp, #4]
   1479a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1479e:	2b00      	cmp	r3, #0
   147a0:	d100      	bne.n	147a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   147a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   147a4:	bf00      	nop
   147a6:	b003      	add	sp, #12
   147a8:	f85d fb04 	ldr.w	pc, [sp], #4
   147ac:	1fff9708 	.word	0x1fff9708
   147b0:	1fff9704 	.word	0x1fff9704

000147b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   147b4:	b500      	push	{lr}
   147b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147b8:	f7ec fa50 	bl	c5c <Sys_GetCoreID>
   147bc:	4603      	mov	r3, r0
   147be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
   147c0:	4a10      	ldr	r2, [pc, #64]	; (14804 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   147c2:	9b01      	ldr	r3, [sp, #4]
   147c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147c8:	2b00      	cmp	r3, #0
   147ca:	d10d      	bne.n	147e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   147cc:	f7ec f8b7 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   147d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   147d2:	9b00      	ldr	r3, [sp, #0]
   147d4:	f003 0301 	and.w	r3, r3, #1
   147d8:	2b00      	cmp	r3, #0
   147da:	d100      	bne.n	147de <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   147dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   147de:	490a      	ldr	r1, [pc, #40]	; (14808 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
   147e0:	9b01      	ldr	r3, [sp, #4]
   147e2:	9a00      	ldr	r2, [sp, #0]
   147e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
   147e8:	4a06      	ldr	r2, [pc, #24]	; (14804 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   147ea:	9b01      	ldr	r3, [sp, #4]
   147ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147f0:	1c5a      	adds	r2, r3, #1
   147f2:	4904      	ldr	r1, [pc, #16]	; (14804 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   147f4:	9b01      	ldr	r3, [sp, #4]
   147f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   147fa:	bf00      	nop
   147fc:	b003      	add	sp, #12
   147fe:	f85d fb04 	ldr.w	pc, [sp], #4
   14802:	bf00      	nop
   14804:	1fff9710 	.word	0x1fff9710
   14808:	1fff970c 	.word	0x1fff970c

0001480c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   1480c:	b500      	push	{lr}
   1480e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14810:	f7ec fa24 	bl	c5c <Sys_GetCoreID>
   14814:	4603      	mov	r3, r0
   14816:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
   14818:	4a0d      	ldr	r2, [pc, #52]	; (14850 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   1481a:	9b01      	ldr	r3, [sp, #4]
   1481c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14820:	1e5a      	subs	r2, r3, #1
   14822:	490b      	ldr	r1, [pc, #44]	; (14850 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   14824:	9b01      	ldr	r3, [sp, #4]
   14826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1482a:	4a0a      	ldr	r2, [pc, #40]	; (14854 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
   1482c:	9b01      	ldr	r3, [sp, #4]
   1482e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14832:	f003 0301 	and.w	r3, r3, #1
   14836:	2b00      	cmp	r3, #0
   14838:	d106      	bne.n	14848 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
   1483a:	4a05      	ldr	r2, [pc, #20]	; (14850 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   1483c:	9b01      	ldr	r3, [sp, #4]
   1483e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14842:	2b00      	cmp	r3, #0
   14844:	d100      	bne.n	14848 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14846:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14848:	bf00      	nop
   1484a:	b003      	add	sp, #12
   1484c:	f85d fb04 	ldr.w	pc, [sp], #4
   14850:	1fff9710 	.word	0x1fff9710
   14854:	1fff970c 	.word	0x1fff970c

00014858 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   14858:	b500      	push	{lr}
   1485a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1485c:	f7ec f9fe 	bl	c5c <Sys_GetCoreID>
   14860:	4603      	mov	r3, r0
   14862:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
   14864:	4a10      	ldr	r2, [pc, #64]	; (148a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   14866:	9b01      	ldr	r3, [sp, #4]
   14868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1486c:	2b00      	cmp	r3, #0
   1486e:	d10d      	bne.n	1488c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14870:	f7ec f865 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14874:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14876:	9b00      	ldr	r3, [sp, #0]
   14878:	f003 0301 	and.w	r3, r3, #1
   1487c:	2b00      	cmp	r3, #0
   1487e:	d100      	bne.n	14882 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14880:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   14882:	490a      	ldr	r1, [pc, #40]	; (148ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
   14884:	9b01      	ldr	r3, [sp, #4]
   14886:	9a00      	ldr	r2, [sp, #0]
   14888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
   1488c:	4a06      	ldr	r2, [pc, #24]	; (148a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   1488e:	9b01      	ldr	r3, [sp, #4]
   14890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14894:	1c5a      	adds	r2, r3, #1
   14896:	4904      	ldr	r1, [pc, #16]	; (148a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   14898:	9b01      	ldr	r3, [sp, #4]
   1489a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1489e:	bf00      	nop
   148a0:	b003      	add	sp, #12
   148a2:	f85d fb04 	ldr.w	pc, [sp], #4
   148a6:	bf00      	nop
   148a8:	1fff9718 	.word	0x1fff9718
   148ac:	1fff9714 	.word	0x1fff9714

000148b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   148b0:	b500      	push	{lr}
   148b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148b4:	f7ec f9d2 	bl	c5c <Sys_GetCoreID>
   148b8:	4603      	mov	r3, r0
   148ba:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
   148bc:	4a0d      	ldr	r2, [pc, #52]	; (148f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   148be:	9b01      	ldr	r3, [sp, #4]
   148c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148c4:	1e5a      	subs	r2, r3, #1
   148c6:	490b      	ldr	r1, [pc, #44]	; (148f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   148c8:	9b01      	ldr	r3, [sp, #4]
   148ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   148ce:	4a0a      	ldr	r2, [pc, #40]	; (148f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
   148d0:	9b01      	ldr	r3, [sp, #4]
   148d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148d6:	f003 0301 	and.w	r3, r3, #1
   148da:	2b00      	cmp	r3, #0
   148dc:	d106      	bne.n	148ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
   148de:	4a05      	ldr	r2, [pc, #20]	; (148f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   148e0:	9b01      	ldr	r3, [sp, #4]
   148e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148e6:	2b00      	cmp	r3, #0
   148e8:	d100      	bne.n	148ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   148ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   148ec:	bf00      	nop
   148ee:	b003      	add	sp, #12
   148f0:	f85d fb04 	ldr.w	pc, [sp], #4
   148f4:	1fff9718 	.word	0x1fff9718
   148f8:	1fff9714 	.word	0x1fff9714

000148fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   148fc:	b500      	push	{lr}
   148fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14900:	f7ec f9ac 	bl	c5c <Sys_GetCoreID>
   14904:	4603      	mov	r3, r0
   14906:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
   14908:	4a10      	ldr	r2, [pc, #64]	; (1494c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   1490a:	9b01      	ldr	r3, [sp, #4]
   1490c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14910:	2b00      	cmp	r3, #0
   14912:	d10d      	bne.n	14930 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14914:	f7ec f813 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14918:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1491a:	9b00      	ldr	r3, [sp, #0]
   1491c:	f003 0301 	and.w	r3, r3, #1
   14920:	2b00      	cmp	r3, #0
   14922:	d100      	bne.n	14926 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14924:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   14926:	490a      	ldr	r1, [pc, #40]	; (14950 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
   14928:	9b01      	ldr	r3, [sp, #4]
   1492a:	9a00      	ldr	r2, [sp, #0]
   1492c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
   14930:	4a06      	ldr	r2, [pc, #24]	; (1494c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   14932:	9b01      	ldr	r3, [sp, #4]
   14934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14938:	1c5a      	adds	r2, r3, #1
   1493a:	4904      	ldr	r1, [pc, #16]	; (1494c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   1493c:	9b01      	ldr	r3, [sp, #4]
   1493e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14942:	bf00      	nop
   14944:	b003      	add	sp, #12
   14946:	f85d fb04 	ldr.w	pc, [sp], #4
   1494a:	bf00      	nop
   1494c:	1fff9720 	.word	0x1fff9720
   14950:	1fff971c 	.word	0x1fff971c

00014954 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   14954:	b500      	push	{lr}
   14956:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14958:	f7ec f980 	bl	c5c <Sys_GetCoreID>
   1495c:	4603      	mov	r3, r0
   1495e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
   14960:	4a0d      	ldr	r2, [pc, #52]	; (14998 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   14962:	9b01      	ldr	r3, [sp, #4]
   14964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14968:	1e5a      	subs	r2, r3, #1
   1496a:	490b      	ldr	r1, [pc, #44]	; (14998 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   1496c:	9b01      	ldr	r3, [sp, #4]
   1496e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   14972:	4a0a      	ldr	r2, [pc, #40]	; (1499c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
   14974:	9b01      	ldr	r3, [sp, #4]
   14976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1497a:	f003 0301 	and.w	r3, r3, #1
   1497e:	2b00      	cmp	r3, #0
   14980:	d106      	bne.n	14990 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
   14982:	4a05      	ldr	r2, [pc, #20]	; (14998 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   14984:	9b01      	ldr	r3, [sp, #4]
   14986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1498a:	2b00      	cmp	r3, #0
   1498c:	d100      	bne.n	14990 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1498e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14990:	bf00      	nop
   14992:	b003      	add	sp, #12
   14994:	f85d fb04 	ldr.w	pc, [sp], #4
   14998:	1fff9720 	.word	0x1fff9720
   1499c:	1fff971c 	.word	0x1fff971c

000149a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   149a0:	b500      	push	{lr}
   149a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149a4:	f7ec f95a 	bl	c5c <Sys_GetCoreID>
   149a8:	4603      	mov	r3, r0
   149aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
   149ac:	4a10      	ldr	r2, [pc, #64]	; (149f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   149ae:	9b01      	ldr	r3, [sp, #4]
   149b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149b4:	2b00      	cmp	r3, #0
   149b6:	d10d      	bne.n	149d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   149b8:	f7eb ffc1 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   149bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   149be:	9b00      	ldr	r3, [sp, #0]
   149c0:	f003 0301 	and.w	r3, r3, #1
   149c4:	2b00      	cmp	r3, #0
   149c6:	d100      	bne.n	149ca <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   149c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   149ca:	490a      	ldr	r1, [pc, #40]	; (149f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
   149cc:	9b01      	ldr	r3, [sp, #4]
   149ce:	9a00      	ldr	r2, [sp, #0]
   149d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
   149d4:	4a06      	ldr	r2, [pc, #24]	; (149f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   149d6:	9b01      	ldr	r3, [sp, #4]
   149d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149dc:	1c5a      	adds	r2, r3, #1
   149de:	4904      	ldr	r1, [pc, #16]	; (149f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   149e0:	9b01      	ldr	r3, [sp, #4]
   149e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   149e6:	bf00      	nop
   149e8:	b003      	add	sp, #12
   149ea:	f85d fb04 	ldr.w	pc, [sp], #4
   149ee:	bf00      	nop
   149f0:	1fff9728 	.word	0x1fff9728
   149f4:	1fff9724 	.word	0x1fff9724

000149f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   149f8:	b500      	push	{lr}
   149fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149fc:	f7ec f92e 	bl	c5c <Sys_GetCoreID>
   14a00:	4603      	mov	r3, r0
   14a02:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
   14a04:	4a0d      	ldr	r2, [pc, #52]	; (14a3c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   14a06:	9b01      	ldr	r3, [sp, #4]
   14a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a0c:	1e5a      	subs	r2, r3, #1
   14a0e:	490b      	ldr	r1, [pc, #44]	; (14a3c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   14a10:	9b01      	ldr	r3, [sp, #4]
   14a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   14a16:	4a0a      	ldr	r2, [pc, #40]	; (14a40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
   14a18:	9b01      	ldr	r3, [sp, #4]
   14a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a1e:	f003 0301 	and.w	r3, r3, #1
   14a22:	2b00      	cmp	r3, #0
   14a24:	d106      	bne.n	14a34 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
   14a26:	4a05      	ldr	r2, [pc, #20]	; (14a3c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   14a28:	9b01      	ldr	r3, [sp, #4]
   14a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a2e:	2b00      	cmp	r3, #0
   14a30:	d100      	bne.n	14a34 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a34:	bf00      	nop
   14a36:	b003      	add	sp, #12
   14a38:	f85d fb04 	ldr.w	pc, [sp], #4
   14a3c:	1fff9728 	.word	0x1fff9728
   14a40:	1fff9724 	.word	0x1fff9724

00014a44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   14a44:	b500      	push	{lr}
   14a46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a48:	f7ec f908 	bl	c5c <Sys_GetCoreID>
   14a4c:	4603      	mov	r3, r0
   14a4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   14a50:	4a10      	ldr	r2, [pc, #64]	; (14a94 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14a52:	9b01      	ldr	r3, [sp, #4]
   14a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a58:	2b00      	cmp	r3, #0
   14a5a:	d10d      	bne.n	14a78 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a5c:	f7eb ff78 	bl	950 <Mcu_schm_read_msr>
   14a60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a62:	9b00      	ldr	r3, [sp, #0]
   14a64:	f003 0301 	and.w	r3, r3, #1
   14a68:	2b00      	cmp	r3, #0
   14a6a:	d100      	bne.n	14a6e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   14a6e:	490a      	ldr	r1, [pc, #40]	; (14a98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   14a70:	9b01      	ldr	r3, [sp, #4]
   14a72:	9a00      	ldr	r2, [sp, #0]
   14a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   14a78:	4a06      	ldr	r2, [pc, #24]	; (14a94 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14a7a:	9b01      	ldr	r3, [sp, #4]
   14a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a80:	1c5a      	adds	r2, r3, #1
   14a82:	4904      	ldr	r1, [pc, #16]	; (14a94 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14a84:	9b01      	ldr	r3, [sp, #4]
   14a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a8a:	bf00      	nop
   14a8c:	b003      	add	sp, #12
   14a8e:	f85d fb04 	ldr.w	pc, [sp], #4
   14a92:	bf00      	nop
   14a94:	1fff9730 	.word	0x1fff9730
   14a98:	1fff972c 	.word	0x1fff972c

00014a9c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   14a9c:	b500      	push	{lr}
   14a9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14aa0:	f7ec f8dc 	bl	c5c <Sys_GetCoreID>
   14aa4:	4603      	mov	r3, r0
   14aa6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   14aa8:	4a0d      	ldr	r2, [pc, #52]	; (14ae0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14aaa:	9b01      	ldr	r3, [sp, #4]
   14aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ab0:	1e5a      	subs	r2, r3, #1
   14ab2:	490b      	ldr	r1, [pc, #44]	; (14ae0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14ab4:	9b01      	ldr	r3, [sp, #4]
   14ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   14aba:	4a0a      	ldr	r2, [pc, #40]	; (14ae4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   14abc:	9b01      	ldr	r3, [sp, #4]
   14abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ac2:	f003 0301 	and.w	r3, r3, #1
   14ac6:	2b00      	cmp	r3, #0
   14ac8:	d106      	bne.n	14ad8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   14aca:	4a05      	ldr	r2, [pc, #20]	; (14ae0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14acc:	9b01      	ldr	r3, [sp, #4]
   14ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ad2:	2b00      	cmp	r3, #0
   14ad4:	d100      	bne.n	14ad8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14ad6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ad8:	bf00      	nop
   14ada:	b003      	add	sp, #12
   14adc:	f85d fb04 	ldr.w	pc, [sp], #4
   14ae0:	1fff9730 	.word	0x1fff9730
   14ae4:	1fff972c 	.word	0x1fff972c

00014ae8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14ae8:	b500      	push	{lr}
   14aea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14aec:	f7ec f8b6 	bl	c5c <Sys_GetCoreID>
   14af0:	4603      	mov	r3, r0
   14af2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   14af4:	4a10      	ldr	r2, [pc, #64]	; (14b38 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14af6:	9b01      	ldr	r3, [sp, #4]
   14af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14afc:	2b00      	cmp	r3, #0
   14afe:	d10d      	bne.n	14b1c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b00:	f7eb ff26 	bl	950 <Mcu_schm_read_msr>
   14b04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b06:	9b00      	ldr	r3, [sp, #0]
   14b08:	f003 0301 	and.w	r3, r3, #1
   14b0c:	2b00      	cmp	r3, #0
   14b0e:	d100      	bne.n	14b12 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14b12:	490a      	ldr	r1, [pc, #40]	; (14b3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   14b14:	9b01      	ldr	r3, [sp, #4]
   14b16:	9a00      	ldr	r2, [sp, #0]
   14b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   14b1c:	4a06      	ldr	r2, [pc, #24]	; (14b38 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14b1e:	9b01      	ldr	r3, [sp, #4]
   14b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b24:	1c5a      	adds	r2, r3, #1
   14b26:	4904      	ldr	r1, [pc, #16]	; (14b38 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14b28:	9b01      	ldr	r3, [sp, #4]
   14b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b2e:	bf00      	nop
   14b30:	b003      	add	sp, #12
   14b32:	f85d fb04 	ldr.w	pc, [sp], #4
   14b36:	bf00      	nop
   14b38:	1fff9738 	.word	0x1fff9738
   14b3c:	1fff9734 	.word	0x1fff9734

00014b40 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14b40:	b500      	push	{lr}
   14b42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b44:	f7ec f88a 	bl	c5c <Sys_GetCoreID>
   14b48:	4603      	mov	r3, r0
   14b4a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   14b4c:	4a0d      	ldr	r2, [pc, #52]	; (14b84 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14b4e:	9b01      	ldr	r3, [sp, #4]
   14b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b54:	1e5a      	subs	r2, r3, #1
   14b56:	490b      	ldr	r1, [pc, #44]	; (14b84 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14b58:	9b01      	ldr	r3, [sp, #4]
   14b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14b5e:	4a0a      	ldr	r2, [pc, #40]	; (14b88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   14b60:	9b01      	ldr	r3, [sp, #4]
   14b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b66:	f003 0301 	and.w	r3, r3, #1
   14b6a:	2b00      	cmp	r3, #0
   14b6c:	d106      	bne.n	14b7c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   14b6e:	4a05      	ldr	r2, [pc, #20]	; (14b84 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14b70:	9b01      	ldr	r3, [sp, #4]
   14b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b76:	2b00      	cmp	r3, #0
   14b78:	d100      	bne.n	14b7c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b7c:	bf00      	nop
   14b7e:	b003      	add	sp, #12
   14b80:	f85d fb04 	ldr.w	pc, [sp], #4
   14b84:	1fff9738 	.word	0x1fff9738
   14b88:	1fff9734 	.word	0x1fff9734

00014b8c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14b8c:	b500      	push	{lr}
   14b8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b90:	f7ec f864 	bl	c5c <Sys_GetCoreID>
   14b94:	4603      	mov	r3, r0
   14b96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   14b98:	4a10      	ldr	r2, [pc, #64]	; (14bdc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14b9a:	9b01      	ldr	r3, [sp, #4]
   14b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ba0:	2b00      	cmp	r3, #0
   14ba2:	d10d      	bne.n	14bc0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ba4:	f7eb fed4 	bl	950 <Mcu_schm_read_msr>
   14ba8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14baa:	9b00      	ldr	r3, [sp, #0]
   14bac:	f003 0301 	and.w	r3, r3, #1
   14bb0:	2b00      	cmp	r3, #0
   14bb2:	d100      	bne.n	14bb6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14bb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14bb6:	490a      	ldr	r1, [pc, #40]	; (14be0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   14bb8:	9b01      	ldr	r3, [sp, #4]
   14bba:	9a00      	ldr	r2, [sp, #0]
   14bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   14bc0:	4a06      	ldr	r2, [pc, #24]	; (14bdc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14bc2:	9b01      	ldr	r3, [sp, #4]
   14bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bc8:	1c5a      	adds	r2, r3, #1
   14bca:	4904      	ldr	r1, [pc, #16]	; (14bdc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14bcc:	9b01      	ldr	r3, [sp, #4]
   14bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14bd2:	bf00      	nop
   14bd4:	b003      	add	sp, #12
   14bd6:	f85d fb04 	ldr.w	pc, [sp], #4
   14bda:	bf00      	nop
   14bdc:	1fff9740 	.word	0x1fff9740
   14be0:	1fff973c 	.word	0x1fff973c

00014be4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14be4:	b500      	push	{lr}
   14be6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14be8:	f7ec f838 	bl	c5c <Sys_GetCoreID>
   14bec:	4603      	mov	r3, r0
   14bee:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   14bf0:	4a0d      	ldr	r2, [pc, #52]	; (14c28 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14bf2:	9b01      	ldr	r3, [sp, #4]
   14bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bf8:	1e5a      	subs	r2, r3, #1
   14bfa:	490b      	ldr	r1, [pc, #44]	; (14c28 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14bfc:	9b01      	ldr	r3, [sp, #4]
   14bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14c02:	4a0a      	ldr	r2, [pc, #40]	; (14c2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   14c04:	9b01      	ldr	r3, [sp, #4]
   14c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c0a:	f003 0301 	and.w	r3, r3, #1
   14c0e:	2b00      	cmp	r3, #0
   14c10:	d106      	bne.n	14c20 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   14c12:	4a05      	ldr	r2, [pc, #20]	; (14c28 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14c14:	9b01      	ldr	r3, [sp, #4]
   14c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c1a:	2b00      	cmp	r3, #0
   14c1c:	d100      	bne.n	14c20 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c20:	bf00      	nop
   14c22:	b003      	add	sp, #12
   14c24:	f85d fb04 	ldr.w	pc, [sp], #4
   14c28:	1fff9740 	.word	0x1fff9740
   14c2c:	1fff973c 	.word	0x1fff973c

00014c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14c30:	b500      	push	{lr}
   14c32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c34:	f7ec f812 	bl	c5c <Sys_GetCoreID>
   14c38:	4603      	mov	r3, r0
   14c3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   14c3c:	4a10      	ldr	r2, [pc, #64]	; (14c80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14c3e:	9b01      	ldr	r3, [sp, #4]
   14c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c44:	2b00      	cmp	r3, #0
   14c46:	d10d      	bne.n	14c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c48:	f7eb fe8b 	bl	962 <Port_schm_read_msr>
   14c4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c4e:	9b00      	ldr	r3, [sp, #0]
   14c50:	f003 0301 	and.w	r3, r3, #1
   14c54:	2b00      	cmp	r3, #0
   14c56:	d100      	bne.n	14c5a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   14c5a:	490a      	ldr	r1, [pc, #40]	; (14c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   14c5c:	9b01      	ldr	r3, [sp, #4]
   14c5e:	9a00      	ldr	r2, [sp, #0]
   14c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   14c64:	4a06      	ldr	r2, [pc, #24]	; (14c80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14c66:	9b01      	ldr	r3, [sp, #4]
   14c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c6c:	1c5a      	adds	r2, r3, #1
   14c6e:	4904      	ldr	r1, [pc, #16]	; (14c80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14c70:	9b01      	ldr	r3, [sp, #4]
   14c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c76:	bf00      	nop
   14c78:	b003      	add	sp, #12
   14c7a:	f85d fb04 	ldr.w	pc, [sp], #4
   14c7e:	bf00      	nop
   14c80:	1fff9748 	.word	0x1fff9748
   14c84:	1fff9744 	.word	0x1fff9744

00014c88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14c88:	b500      	push	{lr}
   14c8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c8c:	f7eb ffe6 	bl	c5c <Sys_GetCoreID>
   14c90:	4603      	mov	r3, r0
   14c92:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   14c94:	4a0d      	ldr	r2, [pc, #52]	; (14ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14c96:	9b01      	ldr	r3, [sp, #4]
   14c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c9c:	1e5a      	subs	r2, r3, #1
   14c9e:	490b      	ldr	r1, [pc, #44]	; (14ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14ca0:	9b01      	ldr	r3, [sp, #4]
   14ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   14ca6:	4a0a      	ldr	r2, [pc, #40]	; (14cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   14ca8:	9b01      	ldr	r3, [sp, #4]
   14caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cae:	f003 0301 	and.w	r3, r3, #1
   14cb2:	2b00      	cmp	r3, #0
   14cb4:	d106      	bne.n	14cc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   14cb6:	4a05      	ldr	r2, [pc, #20]	; (14ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14cb8:	9b01      	ldr	r3, [sp, #4]
   14cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cbe:	2b00      	cmp	r3, #0
   14cc0:	d100      	bne.n	14cc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14cc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14cc4:	bf00      	nop
   14cc6:	b003      	add	sp, #12
   14cc8:	f85d fb04 	ldr.w	pc, [sp], #4
   14ccc:	1fff9748 	.word	0x1fff9748
   14cd0:	1fff9744 	.word	0x1fff9744

00014cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14cd4:	b500      	push	{lr}
   14cd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cd8:	f7eb ffc0 	bl	c5c <Sys_GetCoreID>
   14cdc:	4603      	mov	r3, r0
   14cde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   14ce0:	4a10      	ldr	r2, [pc, #64]	; (14d24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14ce2:	9b01      	ldr	r3, [sp, #4]
   14ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ce8:	2b00      	cmp	r3, #0
   14cea:	d10d      	bne.n	14d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14cec:	f7eb fe39 	bl	962 <Port_schm_read_msr>
   14cf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14cf2:	9b00      	ldr	r3, [sp, #0]
   14cf4:	f003 0301 	and.w	r3, r3, #1
   14cf8:	2b00      	cmp	r3, #0
   14cfa:	d100      	bne.n	14cfe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14cfc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14cfe:	490a      	ldr	r1, [pc, #40]	; (14d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   14d00:	9b01      	ldr	r3, [sp, #4]
   14d02:	9a00      	ldr	r2, [sp, #0]
   14d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   14d08:	4a06      	ldr	r2, [pc, #24]	; (14d24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14d0a:	9b01      	ldr	r3, [sp, #4]
   14d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d10:	1c5a      	adds	r2, r3, #1
   14d12:	4904      	ldr	r1, [pc, #16]	; (14d24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14d14:	9b01      	ldr	r3, [sp, #4]
   14d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d1a:	bf00      	nop
   14d1c:	b003      	add	sp, #12
   14d1e:	f85d fb04 	ldr.w	pc, [sp], #4
   14d22:	bf00      	nop
   14d24:	1fff9750 	.word	0x1fff9750
   14d28:	1fff974c 	.word	0x1fff974c

00014d2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14d2c:	b500      	push	{lr}
   14d2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d30:	f7eb ff94 	bl	c5c <Sys_GetCoreID>
   14d34:	4603      	mov	r3, r0
   14d36:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   14d38:	4a0d      	ldr	r2, [pc, #52]	; (14d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14d3a:	9b01      	ldr	r3, [sp, #4]
   14d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d40:	1e5a      	subs	r2, r3, #1
   14d42:	490b      	ldr	r1, [pc, #44]	; (14d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14d44:	9b01      	ldr	r3, [sp, #4]
   14d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14d4a:	4a0a      	ldr	r2, [pc, #40]	; (14d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   14d4c:	9b01      	ldr	r3, [sp, #4]
   14d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d52:	f003 0301 	and.w	r3, r3, #1
   14d56:	2b00      	cmp	r3, #0
   14d58:	d106      	bne.n	14d68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   14d5a:	4a05      	ldr	r2, [pc, #20]	; (14d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14d5c:	9b01      	ldr	r3, [sp, #4]
   14d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d62:	2b00      	cmp	r3, #0
   14d64:	d100      	bne.n	14d68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d68:	bf00      	nop
   14d6a:	b003      	add	sp, #12
   14d6c:	f85d fb04 	ldr.w	pc, [sp], #4
   14d70:	1fff9750 	.word	0x1fff9750
   14d74:	1fff974c 	.word	0x1fff974c

00014d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14d78:	b500      	push	{lr}
   14d7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d7c:	f7eb ff6e 	bl	c5c <Sys_GetCoreID>
   14d80:	4603      	mov	r3, r0
   14d82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   14d84:	4a10      	ldr	r2, [pc, #64]	; (14dc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14d86:	9b01      	ldr	r3, [sp, #4]
   14d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d8c:	2b00      	cmp	r3, #0
   14d8e:	d10d      	bne.n	14dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d90:	f7eb fde7 	bl	962 <Port_schm_read_msr>
   14d94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d96:	9b00      	ldr	r3, [sp, #0]
   14d98:	f003 0301 	and.w	r3, r3, #1
   14d9c:	2b00      	cmp	r3, #0
   14d9e:	d100      	bne.n	14da2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14da0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14da2:	490a      	ldr	r1, [pc, #40]	; (14dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   14da4:	9b01      	ldr	r3, [sp, #4]
   14da6:	9a00      	ldr	r2, [sp, #0]
   14da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   14dac:	4a06      	ldr	r2, [pc, #24]	; (14dc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14dae:	9b01      	ldr	r3, [sp, #4]
   14db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14db4:	1c5a      	adds	r2, r3, #1
   14db6:	4904      	ldr	r1, [pc, #16]	; (14dc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14db8:	9b01      	ldr	r3, [sp, #4]
   14dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14dbe:	bf00      	nop
   14dc0:	b003      	add	sp, #12
   14dc2:	f85d fb04 	ldr.w	pc, [sp], #4
   14dc6:	bf00      	nop
   14dc8:	1fff9758 	.word	0x1fff9758
   14dcc:	1fff9754 	.word	0x1fff9754

00014dd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14dd0:	b500      	push	{lr}
   14dd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dd4:	f7eb ff42 	bl	c5c <Sys_GetCoreID>
   14dd8:	4603      	mov	r3, r0
   14dda:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   14ddc:	4a0d      	ldr	r2, [pc, #52]	; (14e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14dde:	9b01      	ldr	r3, [sp, #4]
   14de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14de4:	1e5a      	subs	r2, r3, #1
   14de6:	490b      	ldr	r1, [pc, #44]	; (14e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14de8:	9b01      	ldr	r3, [sp, #4]
   14dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14dee:	4a0a      	ldr	r2, [pc, #40]	; (14e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   14df0:	9b01      	ldr	r3, [sp, #4]
   14df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14df6:	f003 0301 	and.w	r3, r3, #1
   14dfa:	2b00      	cmp	r3, #0
   14dfc:	d106      	bne.n	14e0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   14dfe:	4a05      	ldr	r2, [pc, #20]	; (14e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14e00:	9b01      	ldr	r3, [sp, #4]
   14e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e06:	2b00      	cmp	r3, #0
   14e08:	d100      	bne.n	14e0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e0c:	bf00      	nop
   14e0e:	b003      	add	sp, #12
   14e10:	f85d fb04 	ldr.w	pc, [sp], #4
   14e14:	1fff9758 	.word	0x1fff9758
   14e18:	1fff9754 	.word	0x1fff9754

00014e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14e1c:	b500      	push	{lr}
   14e1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e20:	f7eb ff1c 	bl	c5c <Sys_GetCoreID>
   14e24:	4603      	mov	r3, r0
   14e26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   14e28:	4a10      	ldr	r2, [pc, #64]	; (14e6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14e2a:	9b01      	ldr	r3, [sp, #4]
   14e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e30:	2b00      	cmp	r3, #0
   14e32:	d10d      	bne.n	14e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e34:	f7eb fd95 	bl	962 <Port_schm_read_msr>
   14e38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e3a:	9b00      	ldr	r3, [sp, #0]
   14e3c:	f003 0301 	and.w	r3, r3, #1
   14e40:	2b00      	cmp	r3, #0
   14e42:	d100      	bne.n	14e46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   14e46:	490a      	ldr	r1, [pc, #40]	; (14e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   14e48:	9b01      	ldr	r3, [sp, #4]
   14e4a:	9a00      	ldr	r2, [sp, #0]
   14e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   14e50:	4a06      	ldr	r2, [pc, #24]	; (14e6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14e52:	9b01      	ldr	r3, [sp, #4]
   14e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e58:	1c5a      	adds	r2, r3, #1
   14e5a:	4904      	ldr	r1, [pc, #16]	; (14e6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14e5c:	9b01      	ldr	r3, [sp, #4]
   14e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e62:	bf00      	nop
   14e64:	b003      	add	sp, #12
   14e66:	f85d fb04 	ldr.w	pc, [sp], #4
   14e6a:	bf00      	nop
   14e6c:	1fff9760 	.word	0x1fff9760
   14e70:	1fff975c 	.word	0x1fff975c

00014e74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14e74:	b500      	push	{lr}
   14e76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e78:	f7eb fef0 	bl	c5c <Sys_GetCoreID>
   14e7c:	4603      	mov	r3, r0
   14e7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   14e80:	4a0d      	ldr	r2, [pc, #52]	; (14eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14e82:	9b01      	ldr	r3, [sp, #4]
   14e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e88:	1e5a      	subs	r2, r3, #1
   14e8a:	490b      	ldr	r1, [pc, #44]	; (14eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14e8c:	9b01      	ldr	r3, [sp, #4]
   14e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   14e92:	4a0a      	ldr	r2, [pc, #40]	; (14ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   14e94:	9b01      	ldr	r3, [sp, #4]
   14e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e9a:	f003 0301 	and.w	r3, r3, #1
   14e9e:	2b00      	cmp	r3, #0
   14ea0:	d106      	bne.n	14eb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   14ea2:	4a05      	ldr	r2, [pc, #20]	; (14eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14ea4:	9b01      	ldr	r3, [sp, #4]
   14ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eaa:	2b00      	cmp	r3, #0
   14eac:	d100      	bne.n	14eb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14eae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14eb0:	bf00      	nop
   14eb2:	b003      	add	sp, #12
   14eb4:	f85d fb04 	ldr.w	pc, [sp], #4
   14eb8:	1fff9760 	.word	0x1fff9760
   14ebc:	1fff975c 	.word	0x1fff975c

00014ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14ec0:	b500      	push	{lr}
   14ec2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ec4:	f7eb feca 	bl	c5c <Sys_GetCoreID>
   14ec8:	4603      	mov	r3, r0
   14eca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   14ecc:	4a10      	ldr	r2, [pc, #64]	; (14f10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14ece:	9b01      	ldr	r3, [sp, #4]
   14ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ed4:	2b00      	cmp	r3, #0
   14ed6:	d10d      	bne.n	14ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ed8:	f7eb fd43 	bl	962 <Port_schm_read_msr>
   14edc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ede:	9b00      	ldr	r3, [sp, #0]
   14ee0:	f003 0301 	and.w	r3, r3, #1
   14ee4:	2b00      	cmp	r3, #0
   14ee6:	d100      	bne.n	14eea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ee8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   14eea:	490a      	ldr	r1, [pc, #40]	; (14f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   14eec:	9b01      	ldr	r3, [sp, #4]
   14eee:	9a00      	ldr	r2, [sp, #0]
   14ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   14ef4:	4a06      	ldr	r2, [pc, #24]	; (14f10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14ef6:	9b01      	ldr	r3, [sp, #4]
   14ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14efc:	1c5a      	adds	r2, r3, #1
   14efe:	4904      	ldr	r1, [pc, #16]	; (14f10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14f00:	9b01      	ldr	r3, [sp, #4]
   14f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f06:	bf00      	nop
   14f08:	b003      	add	sp, #12
   14f0a:	f85d fb04 	ldr.w	pc, [sp], #4
   14f0e:	bf00      	nop
   14f10:	1fff9768 	.word	0x1fff9768
   14f14:	1fff9764 	.word	0x1fff9764

00014f18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14f18:	b500      	push	{lr}
   14f1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f1c:	f7eb fe9e 	bl	c5c <Sys_GetCoreID>
   14f20:	4603      	mov	r3, r0
   14f22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   14f24:	4a0d      	ldr	r2, [pc, #52]	; (14f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14f26:	9b01      	ldr	r3, [sp, #4]
   14f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f2c:	1e5a      	subs	r2, r3, #1
   14f2e:	490b      	ldr	r1, [pc, #44]	; (14f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14f30:	9b01      	ldr	r3, [sp, #4]
   14f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   14f36:	4a0a      	ldr	r2, [pc, #40]	; (14f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   14f38:	9b01      	ldr	r3, [sp, #4]
   14f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f3e:	f003 0301 	and.w	r3, r3, #1
   14f42:	2b00      	cmp	r3, #0
   14f44:	d106      	bne.n	14f54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   14f46:	4a05      	ldr	r2, [pc, #20]	; (14f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14f48:	9b01      	ldr	r3, [sp, #4]
   14f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f4e:	2b00      	cmp	r3, #0
   14f50:	d100      	bne.n	14f54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f54:	bf00      	nop
   14f56:	b003      	add	sp, #12
   14f58:	f85d fb04 	ldr.w	pc, [sp], #4
   14f5c:	1fff9768 	.word	0x1fff9768
   14f60:	1fff9764 	.word	0x1fff9764

00014f64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   14f64:	b500      	push	{lr}
   14f66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f68:	f7eb fe78 	bl	c5c <Sys_GetCoreID>
   14f6c:	4603      	mov	r3, r0
   14f6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   14f70:	4a10      	ldr	r2, [pc, #64]	; (14fb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14f72:	9b01      	ldr	r3, [sp, #4]
   14f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f78:	2b00      	cmp	r3, #0
   14f7a:	d10d      	bne.n	14f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f7c:	f7eb fcf1 	bl	962 <Port_schm_read_msr>
   14f80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f82:	9b00      	ldr	r3, [sp, #0]
   14f84:	f003 0301 	and.w	r3, r3, #1
   14f88:	2b00      	cmp	r3, #0
   14f8a:	d100      	bne.n	14f8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   14f8e:	490a      	ldr	r1, [pc, #40]	; (14fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   14f90:	9b01      	ldr	r3, [sp, #4]
   14f92:	9a00      	ldr	r2, [sp, #0]
   14f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   14f98:	4a06      	ldr	r2, [pc, #24]	; (14fb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14f9a:	9b01      	ldr	r3, [sp, #4]
   14f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fa0:	1c5a      	adds	r2, r3, #1
   14fa2:	4904      	ldr	r1, [pc, #16]	; (14fb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14fa4:	9b01      	ldr	r3, [sp, #4]
   14fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14faa:	bf00      	nop
   14fac:	b003      	add	sp, #12
   14fae:	f85d fb04 	ldr.w	pc, [sp], #4
   14fb2:	bf00      	nop
   14fb4:	1fff9770 	.word	0x1fff9770
   14fb8:	1fff976c 	.word	0x1fff976c

00014fbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   14fbc:	b500      	push	{lr}
   14fbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fc0:	f7eb fe4c 	bl	c5c <Sys_GetCoreID>
   14fc4:	4603      	mov	r3, r0
   14fc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   14fc8:	4a0d      	ldr	r2, [pc, #52]	; (15000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14fca:	9b01      	ldr	r3, [sp, #4]
   14fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fd0:	1e5a      	subs	r2, r3, #1
   14fd2:	490b      	ldr	r1, [pc, #44]	; (15000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14fd4:	9b01      	ldr	r3, [sp, #4]
   14fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   14fda:	4a0a      	ldr	r2, [pc, #40]	; (15004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   14fdc:	9b01      	ldr	r3, [sp, #4]
   14fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fe2:	f003 0301 	and.w	r3, r3, #1
   14fe6:	2b00      	cmp	r3, #0
   14fe8:	d106      	bne.n	14ff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   14fea:	4a05      	ldr	r2, [pc, #20]	; (15000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14fec:	9b01      	ldr	r3, [sp, #4]
   14fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ff2:	2b00      	cmp	r3, #0
   14ff4:	d100      	bne.n	14ff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14ff6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ff8:	bf00      	nop
   14ffa:	b003      	add	sp, #12
   14ffc:	f85d fb04 	ldr.w	pc, [sp], #4
   15000:	1fff9770 	.word	0x1fff9770
   15004:	1fff976c 	.word	0x1fff976c

00015008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15008:	b500      	push	{lr}
   1500a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1500c:	f7eb fe26 	bl	c5c <Sys_GetCoreID>
   15010:	4603      	mov	r3, r0
   15012:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   15014:	4a10      	ldr	r2, [pc, #64]	; (15058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15016:	9b01      	ldr	r3, [sp, #4]
   15018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1501c:	2b00      	cmp	r3, #0
   1501e:	d10d      	bne.n	1503c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15020:	f7eb fc9f 	bl	962 <Port_schm_read_msr>
   15024:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15026:	9b00      	ldr	r3, [sp, #0]
   15028:	f003 0301 	and.w	r3, r3, #1
   1502c:	2b00      	cmp	r3, #0
   1502e:	d100      	bne.n	15032 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15030:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   15032:	490a      	ldr	r1, [pc, #40]	; (1505c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   15034:	9b01      	ldr	r3, [sp, #4]
   15036:	9a00      	ldr	r2, [sp, #0]
   15038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   1503c:	4a06      	ldr	r2, [pc, #24]	; (15058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   1503e:	9b01      	ldr	r3, [sp, #4]
   15040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15044:	1c5a      	adds	r2, r3, #1
   15046:	4904      	ldr	r1, [pc, #16]	; (15058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15048:	9b01      	ldr	r3, [sp, #4]
   1504a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1504e:	bf00      	nop
   15050:	b003      	add	sp, #12
   15052:	f85d fb04 	ldr.w	pc, [sp], #4
   15056:	bf00      	nop
   15058:	1fff9778 	.word	0x1fff9778
   1505c:	1fff9774 	.word	0x1fff9774

00015060 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15060:	b500      	push	{lr}
   15062:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15064:	f7eb fdfa 	bl	c5c <Sys_GetCoreID>
   15068:	4603      	mov	r3, r0
   1506a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   1506c:	4a0d      	ldr	r2, [pc, #52]	; (150a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   1506e:	9b01      	ldr	r3, [sp, #4]
   15070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15074:	1e5a      	subs	r2, r3, #1
   15076:	490b      	ldr	r1, [pc, #44]	; (150a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15078:	9b01      	ldr	r3, [sp, #4]
   1507a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   1507e:	4a0a      	ldr	r2, [pc, #40]	; (150a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   15080:	9b01      	ldr	r3, [sp, #4]
   15082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15086:	f003 0301 	and.w	r3, r3, #1
   1508a:	2b00      	cmp	r3, #0
   1508c:	d106      	bne.n	1509c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   1508e:	4a05      	ldr	r2, [pc, #20]	; (150a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15090:	9b01      	ldr	r3, [sp, #4]
   15092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15096:	2b00      	cmp	r3, #0
   15098:	d100      	bne.n	1509c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1509a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1509c:	bf00      	nop
   1509e:	b003      	add	sp, #12
   150a0:	f85d fb04 	ldr.w	pc, [sp], #4
   150a4:	1fff9778 	.word	0x1fff9778
   150a8:	1fff9774 	.word	0x1fff9774

000150ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   150ac:	b500      	push	{lr}
   150ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150b0:	f7eb fdd4 	bl	c5c <Sys_GetCoreID>
   150b4:	4603      	mov	r3, r0
   150b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   150b8:	4a10      	ldr	r2, [pc, #64]	; (150fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   150ba:	9b01      	ldr	r3, [sp, #4]
   150bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150c0:	2b00      	cmp	r3, #0
   150c2:	d10d      	bne.n	150e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   150c4:	f7eb fc4d 	bl	962 <Port_schm_read_msr>
   150c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   150ca:	9b00      	ldr	r3, [sp, #0]
   150cc:	f003 0301 	and.w	r3, r3, #1
   150d0:	2b00      	cmp	r3, #0
   150d2:	d100      	bne.n	150d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   150d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   150d6:	490a      	ldr	r1, [pc, #40]	; (15100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   150d8:	9b01      	ldr	r3, [sp, #4]
   150da:	9a00      	ldr	r2, [sp, #0]
   150dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   150e0:	4a06      	ldr	r2, [pc, #24]	; (150fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   150e2:	9b01      	ldr	r3, [sp, #4]
   150e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150e8:	1c5a      	adds	r2, r3, #1
   150ea:	4904      	ldr	r1, [pc, #16]	; (150fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   150ec:	9b01      	ldr	r3, [sp, #4]
   150ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   150f2:	bf00      	nop
   150f4:	b003      	add	sp, #12
   150f6:	f85d fb04 	ldr.w	pc, [sp], #4
   150fa:	bf00      	nop
   150fc:	1fff9780 	.word	0x1fff9780
   15100:	1fff977c 	.word	0x1fff977c

00015104 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15104:	b500      	push	{lr}
   15106:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15108:	f7eb fda8 	bl	c5c <Sys_GetCoreID>
   1510c:	4603      	mov	r3, r0
   1510e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   15110:	4a0d      	ldr	r2, [pc, #52]	; (15148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15112:	9b01      	ldr	r3, [sp, #4]
   15114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15118:	1e5a      	subs	r2, r3, #1
   1511a:	490b      	ldr	r1, [pc, #44]	; (15148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   1511c:	9b01      	ldr	r3, [sp, #4]
   1511e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   15122:	4a0a      	ldr	r2, [pc, #40]	; (1514c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   15124:	9b01      	ldr	r3, [sp, #4]
   15126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1512a:	f003 0301 	and.w	r3, r3, #1
   1512e:	2b00      	cmp	r3, #0
   15130:	d106      	bne.n	15140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   15132:	4a05      	ldr	r2, [pc, #20]	; (15148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15134:	9b01      	ldr	r3, [sp, #4]
   15136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1513a:	2b00      	cmp	r3, #0
   1513c:	d100      	bne.n	15140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1513e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15140:	bf00      	nop
   15142:	b003      	add	sp, #12
   15144:	f85d fb04 	ldr.w	pc, [sp], #4
   15148:	1fff9780 	.word	0x1fff9780
   1514c:	1fff977c 	.word	0x1fff977c

00015150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15150:	b500      	push	{lr}
   15152:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15154:	f7eb fd82 	bl	c5c <Sys_GetCoreID>
   15158:	4603      	mov	r3, r0
   1515a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   1515c:	4a10      	ldr	r2, [pc, #64]	; (151a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   1515e:	9b01      	ldr	r3, [sp, #4]
   15160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15164:	2b00      	cmp	r3, #0
   15166:	d10d      	bne.n	15184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15168:	f7eb fbfb 	bl	962 <Port_schm_read_msr>
   1516c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1516e:	9b00      	ldr	r3, [sp, #0]
   15170:	f003 0301 	and.w	r3, r3, #1
   15174:	2b00      	cmp	r3, #0
   15176:	d100      	bne.n	1517a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15178:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1517a:	490a      	ldr	r1, [pc, #40]	; (151a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   1517c:	9b01      	ldr	r3, [sp, #4]
   1517e:	9a00      	ldr	r2, [sp, #0]
   15180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   15184:	4a06      	ldr	r2, [pc, #24]	; (151a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15186:	9b01      	ldr	r3, [sp, #4]
   15188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1518c:	1c5a      	adds	r2, r3, #1
   1518e:	4904      	ldr	r1, [pc, #16]	; (151a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15190:	9b01      	ldr	r3, [sp, #4]
   15192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15196:	bf00      	nop
   15198:	b003      	add	sp, #12
   1519a:	f85d fb04 	ldr.w	pc, [sp], #4
   1519e:	bf00      	nop
   151a0:	1fff9788 	.word	0x1fff9788
   151a4:	1fff9784 	.word	0x1fff9784

000151a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   151a8:	b500      	push	{lr}
   151aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151ac:	f7eb fd56 	bl	c5c <Sys_GetCoreID>
   151b0:	4603      	mov	r3, r0
   151b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   151b4:	4a0d      	ldr	r2, [pc, #52]	; (151ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   151b6:	9b01      	ldr	r3, [sp, #4]
   151b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151bc:	1e5a      	subs	r2, r3, #1
   151be:	490b      	ldr	r1, [pc, #44]	; (151ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   151c0:	9b01      	ldr	r3, [sp, #4]
   151c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   151c6:	4a0a      	ldr	r2, [pc, #40]	; (151f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   151c8:	9b01      	ldr	r3, [sp, #4]
   151ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151ce:	f003 0301 	and.w	r3, r3, #1
   151d2:	2b00      	cmp	r3, #0
   151d4:	d106      	bne.n	151e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   151d6:	4a05      	ldr	r2, [pc, #20]	; (151ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   151d8:	9b01      	ldr	r3, [sp, #4]
   151da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151de:	2b00      	cmp	r3, #0
   151e0:	d100      	bne.n	151e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   151e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   151e4:	bf00      	nop
   151e6:	b003      	add	sp, #12
   151e8:	f85d fb04 	ldr.w	pc, [sp], #4
   151ec:	1fff9788 	.word	0x1fff9788
   151f0:	1fff9784 	.word	0x1fff9784

000151f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   151f4:	b500      	push	{lr}
   151f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151f8:	f7eb fd30 	bl	c5c <Sys_GetCoreID>
   151fc:	4603      	mov	r3, r0
   151fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   15200:	4a10      	ldr	r2, [pc, #64]	; (15244 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15202:	9b01      	ldr	r3, [sp, #4]
   15204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15208:	2b00      	cmp	r3, #0
   1520a:	d10d      	bne.n	15228 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1520c:	f7eb fba9 	bl	962 <Port_schm_read_msr>
   15210:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15212:	9b00      	ldr	r3, [sp, #0]
   15214:	f003 0301 	and.w	r3, r3, #1
   15218:	2b00      	cmp	r3, #0
   1521a:	d100      	bne.n	1521e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1521c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1521e:	490a      	ldr	r1, [pc, #40]	; (15248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   15220:	9b01      	ldr	r3, [sp, #4]
   15222:	9a00      	ldr	r2, [sp, #0]
   15224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   15228:	4a06      	ldr	r2, [pc, #24]	; (15244 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   1522a:	9b01      	ldr	r3, [sp, #4]
   1522c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15230:	1c5a      	adds	r2, r3, #1
   15232:	4904      	ldr	r1, [pc, #16]	; (15244 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15234:	9b01      	ldr	r3, [sp, #4]
   15236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1523a:	bf00      	nop
   1523c:	b003      	add	sp, #12
   1523e:	f85d fb04 	ldr.w	pc, [sp], #4
   15242:	bf00      	nop
   15244:	1fff9790 	.word	0x1fff9790
   15248:	1fff978c 	.word	0x1fff978c

0001524c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   1524c:	b500      	push	{lr}
   1524e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15250:	f7eb fd04 	bl	c5c <Sys_GetCoreID>
   15254:	4603      	mov	r3, r0
   15256:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   15258:	4a0d      	ldr	r2, [pc, #52]	; (15290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   1525a:	9b01      	ldr	r3, [sp, #4]
   1525c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15260:	1e5a      	subs	r2, r3, #1
   15262:	490b      	ldr	r1, [pc, #44]	; (15290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15264:	9b01      	ldr	r3, [sp, #4]
   15266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1526a:	4a0a      	ldr	r2, [pc, #40]	; (15294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   1526c:	9b01      	ldr	r3, [sp, #4]
   1526e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15272:	f003 0301 	and.w	r3, r3, #1
   15276:	2b00      	cmp	r3, #0
   15278:	d106      	bne.n	15288 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   1527a:	4a05      	ldr	r2, [pc, #20]	; (15290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   1527c:	9b01      	ldr	r3, [sp, #4]
   1527e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15282:	2b00      	cmp	r3, #0
   15284:	d100      	bne.n	15288 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15286:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15288:	bf00      	nop
   1528a:	b003      	add	sp, #12
   1528c:	f85d fb04 	ldr.w	pc, [sp], #4
   15290:	1fff9790 	.word	0x1fff9790
   15294:	1fff978c 	.word	0x1fff978c

00015298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15298:	b500      	push	{lr}
   1529a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1529c:	f7eb fcde 	bl	c5c <Sys_GetCoreID>
   152a0:	4603      	mov	r3, r0
   152a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   152a4:	4a10      	ldr	r2, [pc, #64]	; (152e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   152a6:	9b01      	ldr	r3, [sp, #4]
   152a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152ac:	2b00      	cmp	r3, #0
   152ae:	d10d      	bne.n	152cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   152b0:	f7eb fb57 	bl	962 <Port_schm_read_msr>
   152b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   152b6:	9b00      	ldr	r3, [sp, #0]
   152b8:	f003 0301 	and.w	r3, r3, #1
   152bc:	2b00      	cmp	r3, #0
   152be:	d100      	bne.n	152c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   152c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   152c2:	490a      	ldr	r1, [pc, #40]	; (152ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   152c4:	9b01      	ldr	r3, [sp, #4]
   152c6:	9a00      	ldr	r2, [sp, #0]
   152c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   152cc:	4a06      	ldr	r2, [pc, #24]	; (152e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   152ce:	9b01      	ldr	r3, [sp, #4]
   152d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152d4:	1c5a      	adds	r2, r3, #1
   152d6:	4904      	ldr	r1, [pc, #16]	; (152e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   152d8:	9b01      	ldr	r3, [sp, #4]
   152da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   152de:	bf00      	nop
   152e0:	b003      	add	sp, #12
   152e2:	f85d fb04 	ldr.w	pc, [sp], #4
   152e6:	bf00      	nop
   152e8:	1fff9798 	.word	0x1fff9798
   152ec:	1fff9794 	.word	0x1fff9794

000152f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   152f0:	b500      	push	{lr}
   152f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152f4:	f7eb fcb2 	bl	c5c <Sys_GetCoreID>
   152f8:	4603      	mov	r3, r0
   152fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   152fc:	4a0d      	ldr	r2, [pc, #52]	; (15334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   152fe:	9b01      	ldr	r3, [sp, #4]
   15300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15304:	1e5a      	subs	r2, r3, #1
   15306:	490b      	ldr	r1, [pc, #44]	; (15334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15308:	9b01      	ldr	r3, [sp, #4]
   1530a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1530e:	4a0a      	ldr	r2, [pc, #40]	; (15338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   15310:	9b01      	ldr	r3, [sp, #4]
   15312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15316:	f003 0301 	and.w	r3, r3, #1
   1531a:	2b00      	cmp	r3, #0
   1531c:	d106      	bne.n	1532c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   1531e:	4a05      	ldr	r2, [pc, #20]	; (15334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15320:	9b01      	ldr	r3, [sp, #4]
   15322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15326:	2b00      	cmp	r3, #0
   15328:	d100      	bne.n	1532c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1532a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1532c:	bf00      	nop
   1532e:	b003      	add	sp, #12
   15330:	f85d fb04 	ldr.w	pc, [sp], #4
   15334:	1fff9798 	.word	0x1fff9798
   15338:	1fff9794 	.word	0x1fff9794

0001533c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   1533c:	b500      	push	{lr}
   1533e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15340:	f7eb fc8c 	bl	c5c <Sys_GetCoreID>
   15344:	4603      	mov	r3, r0
   15346:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   15348:	4a10      	ldr	r2, [pc, #64]	; (1538c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   1534a:	9b01      	ldr	r3, [sp, #4]
   1534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15350:	2b00      	cmp	r3, #0
   15352:	d10d      	bne.n	15370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15354:	f7eb fb05 	bl	962 <Port_schm_read_msr>
   15358:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1535a:	9b00      	ldr	r3, [sp, #0]
   1535c:	f003 0301 	and.w	r3, r3, #1
   15360:	2b00      	cmp	r3, #0
   15362:	d100      	bne.n	15366 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15364:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   15366:	490a      	ldr	r1, [pc, #40]	; (15390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   15368:	9b01      	ldr	r3, [sp, #4]
   1536a:	9a00      	ldr	r2, [sp, #0]
   1536c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   15370:	4a06      	ldr	r2, [pc, #24]	; (1538c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15372:	9b01      	ldr	r3, [sp, #4]
   15374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15378:	1c5a      	adds	r2, r3, #1
   1537a:	4904      	ldr	r1, [pc, #16]	; (1538c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   1537c:	9b01      	ldr	r3, [sp, #4]
   1537e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15382:	bf00      	nop
   15384:	b003      	add	sp, #12
   15386:	f85d fb04 	ldr.w	pc, [sp], #4
   1538a:	bf00      	nop
   1538c:	1fff97a0 	.word	0x1fff97a0
   15390:	1fff979c 	.word	0x1fff979c

00015394 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15394:	b500      	push	{lr}
   15396:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15398:	f7eb fc60 	bl	c5c <Sys_GetCoreID>
   1539c:	4603      	mov	r3, r0
   1539e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   153a0:	4a0d      	ldr	r2, [pc, #52]	; (153d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   153a2:	9b01      	ldr	r3, [sp, #4]
   153a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153a8:	1e5a      	subs	r2, r3, #1
   153aa:	490b      	ldr	r1, [pc, #44]	; (153d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   153ac:	9b01      	ldr	r3, [sp, #4]
   153ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   153b2:	4a0a      	ldr	r2, [pc, #40]	; (153dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   153b4:	9b01      	ldr	r3, [sp, #4]
   153b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153ba:	f003 0301 	and.w	r3, r3, #1
   153be:	2b00      	cmp	r3, #0
   153c0:	d106      	bne.n	153d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   153c2:	4a05      	ldr	r2, [pc, #20]	; (153d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   153c4:	9b01      	ldr	r3, [sp, #4]
   153c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153ca:	2b00      	cmp	r3, #0
   153cc:	d100      	bne.n	153d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   153ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   153d0:	bf00      	nop
   153d2:	b003      	add	sp, #12
   153d4:	f85d fb04 	ldr.w	pc, [sp], #4
   153d8:	1fff97a0 	.word	0x1fff97a0
   153dc:	1fff979c 	.word	0x1fff979c

000153e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   153e0:	b500      	push	{lr}
   153e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153e4:	f7eb fc3a 	bl	c5c <Sys_GetCoreID>
   153e8:	4603      	mov	r3, r0
   153ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   153ec:	4a10      	ldr	r2, [pc, #64]	; (15430 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   153ee:	9b01      	ldr	r3, [sp, #4]
   153f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153f4:	2b00      	cmp	r3, #0
   153f6:	d10d      	bne.n	15414 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   153f8:	f7eb fab3 	bl	962 <Port_schm_read_msr>
   153fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   153fe:	9b00      	ldr	r3, [sp, #0]
   15400:	f003 0301 	and.w	r3, r3, #1
   15404:	2b00      	cmp	r3, #0
   15406:	d100      	bne.n	1540a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15408:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1540a:	490a      	ldr	r1, [pc, #40]	; (15434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   1540c:	9b01      	ldr	r3, [sp, #4]
   1540e:	9a00      	ldr	r2, [sp, #0]
   15410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   15414:	4a06      	ldr	r2, [pc, #24]	; (15430 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15416:	9b01      	ldr	r3, [sp, #4]
   15418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1541c:	1c5a      	adds	r2, r3, #1
   1541e:	4904      	ldr	r1, [pc, #16]	; (15430 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15420:	9b01      	ldr	r3, [sp, #4]
   15422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15426:	bf00      	nop
   15428:	b003      	add	sp, #12
   1542a:	f85d fb04 	ldr.w	pc, [sp], #4
   1542e:	bf00      	nop
   15430:	1fff97a8 	.word	0x1fff97a8
   15434:	1fff97a4 	.word	0x1fff97a4

00015438 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15438:	b500      	push	{lr}
   1543a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1543c:	f7eb fc0e 	bl	c5c <Sys_GetCoreID>
   15440:	4603      	mov	r3, r0
   15442:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   15444:	4a0d      	ldr	r2, [pc, #52]	; (1547c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15446:	9b01      	ldr	r3, [sp, #4]
   15448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1544c:	1e5a      	subs	r2, r3, #1
   1544e:	490b      	ldr	r1, [pc, #44]	; (1547c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15450:	9b01      	ldr	r3, [sp, #4]
   15452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   15456:	4a0a      	ldr	r2, [pc, #40]	; (15480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   15458:	9b01      	ldr	r3, [sp, #4]
   1545a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1545e:	f003 0301 	and.w	r3, r3, #1
   15462:	2b00      	cmp	r3, #0
   15464:	d106      	bne.n	15474 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   15466:	4a05      	ldr	r2, [pc, #20]	; (1547c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15468:	9b01      	ldr	r3, [sp, #4]
   1546a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1546e:	2b00      	cmp	r3, #0
   15470:	d100      	bne.n	15474 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15472:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15474:	bf00      	nop
   15476:	b003      	add	sp, #12
   15478:	f85d fb04 	ldr.w	pc, [sp], #4
   1547c:	1fff97a8 	.word	0x1fff97a8
   15480:	1fff97a4 	.word	0x1fff97a4

00015484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15484:	b500      	push	{lr}
   15486:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15488:	f7eb fbe8 	bl	c5c <Sys_GetCoreID>
   1548c:	4603      	mov	r3, r0
   1548e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   15490:	4a10      	ldr	r2, [pc, #64]	; (154d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15492:	9b01      	ldr	r3, [sp, #4]
   15494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15498:	2b00      	cmp	r3, #0
   1549a:	d10d      	bne.n	154b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1549c:	f7eb fa61 	bl	962 <Port_schm_read_msr>
   154a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   154a2:	9b00      	ldr	r3, [sp, #0]
   154a4:	f003 0301 	and.w	r3, r3, #1
   154a8:	2b00      	cmp	r3, #0
   154aa:	d100      	bne.n	154ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   154ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   154ae:	490a      	ldr	r1, [pc, #40]	; (154d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   154b0:	9b01      	ldr	r3, [sp, #4]
   154b2:	9a00      	ldr	r2, [sp, #0]
   154b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   154b8:	4a06      	ldr	r2, [pc, #24]	; (154d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   154ba:	9b01      	ldr	r3, [sp, #4]
   154bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154c0:	1c5a      	adds	r2, r3, #1
   154c2:	4904      	ldr	r1, [pc, #16]	; (154d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   154c4:	9b01      	ldr	r3, [sp, #4]
   154c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   154ca:	bf00      	nop
   154cc:	b003      	add	sp, #12
   154ce:	f85d fb04 	ldr.w	pc, [sp], #4
   154d2:	bf00      	nop
   154d4:	1fff97b0 	.word	0x1fff97b0
   154d8:	1fff97ac 	.word	0x1fff97ac

000154dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   154dc:	b500      	push	{lr}
   154de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154e0:	f7eb fbbc 	bl	c5c <Sys_GetCoreID>
   154e4:	4603      	mov	r3, r0
   154e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   154e8:	4a0d      	ldr	r2, [pc, #52]	; (15520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   154ea:	9b01      	ldr	r3, [sp, #4]
   154ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154f0:	1e5a      	subs	r2, r3, #1
   154f2:	490b      	ldr	r1, [pc, #44]	; (15520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   154f4:	9b01      	ldr	r3, [sp, #4]
   154f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   154fa:	4a0a      	ldr	r2, [pc, #40]	; (15524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   154fc:	9b01      	ldr	r3, [sp, #4]
   154fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15502:	f003 0301 	and.w	r3, r3, #1
   15506:	2b00      	cmp	r3, #0
   15508:	d106      	bne.n	15518 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   1550a:	4a05      	ldr	r2, [pc, #20]	; (15520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1550c:	9b01      	ldr	r3, [sp, #4]
   1550e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15512:	2b00      	cmp	r3, #0
   15514:	d100      	bne.n	15518 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15516:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15518:	bf00      	nop
   1551a:	b003      	add	sp, #12
   1551c:	f85d fb04 	ldr.w	pc, [sp], #4
   15520:	1fff97b0 	.word	0x1fff97b0
   15524:	1fff97ac 	.word	0x1fff97ac

00015528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   15528:	b500      	push	{lr}
   1552a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1552c:	f7eb fb96 	bl	c5c <Sys_GetCoreID>
   15530:	4603      	mov	r3, r0
   15532:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   15534:	4a10      	ldr	r2, [pc, #64]	; (15578 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   15536:	9b01      	ldr	r3, [sp, #4]
   15538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1553c:	2b00      	cmp	r3, #0
   1553e:	d10d      	bne.n	1555c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15540:	f7eb fa0f 	bl	962 <Port_schm_read_msr>
   15544:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15546:	9b00      	ldr	r3, [sp, #0]
   15548:	f003 0301 	and.w	r3, r3, #1
   1554c:	2b00      	cmp	r3, #0
   1554e:	d100      	bne.n	15552 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15550:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   15552:	490a      	ldr	r1, [pc, #40]	; (1557c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   15554:	9b01      	ldr	r3, [sp, #4]
   15556:	9a00      	ldr	r2, [sp, #0]
   15558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   1555c:	4a06      	ldr	r2, [pc, #24]	; (15578 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   1555e:	9b01      	ldr	r3, [sp, #4]
   15560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15564:	1c5a      	adds	r2, r3, #1
   15566:	4904      	ldr	r1, [pc, #16]	; (15578 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   15568:	9b01      	ldr	r3, [sp, #4]
   1556a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1556e:	bf00      	nop
   15570:	b003      	add	sp, #12
   15572:	f85d fb04 	ldr.w	pc, [sp], #4
   15576:	bf00      	nop
   15578:	1fff97b8 	.word	0x1fff97b8
   1557c:	1fff97b4 	.word	0x1fff97b4

00015580 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   15580:	b500      	push	{lr}
   15582:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15584:	f7eb fb6a 	bl	c5c <Sys_GetCoreID>
   15588:	4603      	mov	r3, r0
   1558a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   1558c:	4a0d      	ldr	r2, [pc, #52]	; (155c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   1558e:	9b01      	ldr	r3, [sp, #4]
   15590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15594:	1e5a      	subs	r2, r3, #1
   15596:	490b      	ldr	r1, [pc, #44]	; (155c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   15598:	9b01      	ldr	r3, [sp, #4]
   1559a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1559e:	4a0a      	ldr	r2, [pc, #40]	; (155c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   155a0:	9b01      	ldr	r3, [sp, #4]
   155a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155a6:	f003 0301 	and.w	r3, r3, #1
   155aa:	2b00      	cmp	r3, #0
   155ac:	d106      	bne.n	155bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   155ae:	4a05      	ldr	r2, [pc, #20]	; (155c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   155b0:	9b01      	ldr	r3, [sp, #4]
   155b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155b6:	2b00      	cmp	r3, #0
   155b8:	d100      	bne.n	155bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   155ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   155bc:	bf00      	nop
   155be:	b003      	add	sp, #12
   155c0:	f85d fb04 	ldr.w	pc, [sp], #4
   155c4:	1fff97b8 	.word	0x1fff97b8
   155c8:	1fff97b4 	.word	0x1fff97b4

000155cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   155cc:	b500      	push	{lr}
   155ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155d0:	f7eb fb44 	bl	c5c <Sys_GetCoreID>
   155d4:	4603      	mov	r3, r0
   155d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   155d8:	4a10      	ldr	r2, [pc, #64]	; (1561c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   155da:	9b01      	ldr	r3, [sp, #4]
   155dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155e0:	2b00      	cmp	r3, #0
   155e2:	d10d      	bne.n	15600 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   155e4:	f7eb f9bd 	bl	962 <Port_schm_read_msr>
   155e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   155ea:	9b00      	ldr	r3, [sp, #0]
   155ec:	f003 0301 	and.w	r3, r3, #1
   155f0:	2b00      	cmp	r3, #0
   155f2:	d100      	bne.n	155f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   155f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   155f6:	490a      	ldr	r1, [pc, #40]	; (15620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   155f8:	9b01      	ldr	r3, [sp, #4]
   155fa:	9a00      	ldr	r2, [sp, #0]
   155fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   15600:	4a06      	ldr	r2, [pc, #24]	; (1561c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   15602:	9b01      	ldr	r3, [sp, #4]
   15604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15608:	1c5a      	adds	r2, r3, #1
   1560a:	4904      	ldr	r1, [pc, #16]	; (1561c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1560c:	9b01      	ldr	r3, [sp, #4]
   1560e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15612:	bf00      	nop
   15614:	b003      	add	sp, #12
   15616:	f85d fb04 	ldr.w	pc, [sp], #4
   1561a:	bf00      	nop
   1561c:	1fff97c0 	.word	0x1fff97c0
   15620:	1fff97bc 	.word	0x1fff97bc

00015624 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   15624:	b500      	push	{lr}
   15626:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15628:	f7eb fb18 	bl	c5c <Sys_GetCoreID>
   1562c:	4603      	mov	r3, r0
   1562e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   15630:	4a0d      	ldr	r2, [pc, #52]	; (15668 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   15632:	9b01      	ldr	r3, [sp, #4]
   15634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15638:	1e5a      	subs	r2, r3, #1
   1563a:	490b      	ldr	r1, [pc, #44]	; (15668 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   1563c:	9b01      	ldr	r3, [sp, #4]
   1563e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   15642:	4a0a      	ldr	r2, [pc, #40]	; (1566c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   15644:	9b01      	ldr	r3, [sp, #4]
   15646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1564a:	f003 0301 	and.w	r3, r3, #1
   1564e:	2b00      	cmp	r3, #0
   15650:	d106      	bne.n	15660 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   15652:	4a05      	ldr	r2, [pc, #20]	; (15668 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   15654:	9b01      	ldr	r3, [sp, #4]
   15656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1565a:	2b00      	cmp	r3, #0
   1565c:	d100      	bne.n	15660 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1565e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15660:	bf00      	nop
   15662:	b003      	add	sp, #12
   15664:	f85d fb04 	ldr.w	pc, [sp], #4
   15668:	1fff97c0 	.word	0x1fff97c0
   1566c:	1fff97bc 	.word	0x1fff97bc

00015670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   15670:	b500      	push	{lr}
   15672:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15674:	f7eb faf2 	bl	c5c <Sys_GetCoreID>
   15678:	4603      	mov	r3, r0
   1567a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   1567c:	4a10      	ldr	r2, [pc, #64]	; (156c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   1567e:	9b01      	ldr	r3, [sp, #4]
   15680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15684:	2b00      	cmp	r3, #0
   15686:	d10d      	bne.n	156a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15688:	f7eb f96b 	bl	962 <Port_schm_read_msr>
   1568c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1568e:	9b00      	ldr	r3, [sp, #0]
   15690:	f003 0301 	and.w	r3, r3, #1
   15694:	2b00      	cmp	r3, #0
   15696:	d100      	bne.n	1569a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15698:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1569a:	490a      	ldr	r1, [pc, #40]	; (156c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   1569c:	9b01      	ldr	r3, [sp, #4]
   1569e:	9a00      	ldr	r2, [sp, #0]
   156a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   156a4:	4a06      	ldr	r2, [pc, #24]	; (156c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   156a6:	9b01      	ldr	r3, [sp, #4]
   156a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156ac:	1c5a      	adds	r2, r3, #1
   156ae:	4904      	ldr	r1, [pc, #16]	; (156c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   156b0:	9b01      	ldr	r3, [sp, #4]
   156b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   156b6:	bf00      	nop
   156b8:	b003      	add	sp, #12
   156ba:	f85d fb04 	ldr.w	pc, [sp], #4
   156be:	bf00      	nop
   156c0:	1fff97c8 	.word	0x1fff97c8
   156c4:	1fff97c4 	.word	0x1fff97c4

000156c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   156c8:	b500      	push	{lr}
   156ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156cc:	f7eb fac6 	bl	c5c <Sys_GetCoreID>
   156d0:	4603      	mov	r3, r0
   156d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   156d4:	4a0d      	ldr	r2, [pc, #52]	; (1570c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   156d6:	9b01      	ldr	r3, [sp, #4]
   156d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156dc:	1e5a      	subs	r2, r3, #1
   156de:	490b      	ldr	r1, [pc, #44]	; (1570c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   156e0:	9b01      	ldr	r3, [sp, #4]
   156e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   156e6:	4a0a      	ldr	r2, [pc, #40]	; (15710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   156e8:	9b01      	ldr	r3, [sp, #4]
   156ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156ee:	f003 0301 	and.w	r3, r3, #1
   156f2:	2b00      	cmp	r3, #0
   156f4:	d106      	bne.n	15704 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   156f6:	4a05      	ldr	r2, [pc, #20]	; (1570c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   156f8:	9b01      	ldr	r3, [sp, #4]
   156fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156fe:	2b00      	cmp	r3, #0
   15700:	d100      	bne.n	15704 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15702:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15704:	bf00      	nop
   15706:	b003      	add	sp, #12
   15708:	f85d fb04 	ldr.w	pc, [sp], #4
   1570c:	1fff97c8 	.word	0x1fff97c8
   15710:	1fff97c4 	.word	0x1fff97c4

00015714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   15714:	b500      	push	{lr}
   15716:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15718:	f7eb faa0 	bl	c5c <Sys_GetCoreID>
   1571c:	4603      	mov	r3, r0
   1571e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   15720:	4a10      	ldr	r2, [pc, #64]	; (15764 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   15722:	9b01      	ldr	r3, [sp, #4]
   15724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15728:	2b00      	cmp	r3, #0
   1572a:	d10d      	bne.n	15748 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1572c:	f7eb f919 	bl	962 <Port_schm_read_msr>
   15730:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15732:	9b00      	ldr	r3, [sp, #0]
   15734:	f003 0301 	and.w	r3, r3, #1
   15738:	2b00      	cmp	r3, #0
   1573a:	d100      	bne.n	1573e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1573c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   1573e:	490a      	ldr	r1, [pc, #40]	; (15768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   15740:	9b01      	ldr	r3, [sp, #4]
   15742:	9a00      	ldr	r2, [sp, #0]
   15744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   15748:	4a06      	ldr	r2, [pc, #24]	; (15764 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   1574a:	9b01      	ldr	r3, [sp, #4]
   1574c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15750:	1c5a      	adds	r2, r3, #1
   15752:	4904      	ldr	r1, [pc, #16]	; (15764 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   15754:	9b01      	ldr	r3, [sp, #4]
   15756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1575a:	bf00      	nop
   1575c:	b003      	add	sp, #12
   1575e:	f85d fb04 	ldr.w	pc, [sp], #4
   15762:	bf00      	nop
   15764:	1fff97d0 	.word	0x1fff97d0
   15768:	1fff97cc 	.word	0x1fff97cc

0001576c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   1576c:	b500      	push	{lr}
   1576e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15770:	f7eb fa74 	bl	c5c <Sys_GetCoreID>
   15774:	4603      	mov	r3, r0
   15776:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   15778:	4a0d      	ldr	r2, [pc, #52]	; (157b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1577a:	9b01      	ldr	r3, [sp, #4]
   1577c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15780:	1e5a      	subs	r2, r3, #1
   15782:	490b      	ldr	r1, [pc, #44]	; (157b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   15784:	9b01      	ldr	r3, [sp, #4]
   15786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1578a:	4a0a      	ldr	r2, [pc, #40]	; (157b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   1578c:	9b01      	ldr	r3, [sp, #4]
   1578e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15792:	f003 0301 	and.w	r3, r3, #1
   15796:	2b00      	cmp	r3, #0
   15798:	d106      	bne.n	157a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   1579a:	4a05      	ldr	r2, [pc, #20]	; (157b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1579c:	9b01      	ldr	r3, [sp, #4]
   1579e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157a2:	2b00      	cmp	r3, #0
   157a4:	d100      	bne.n	157a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   157a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   157a8:	bf00      	nop
   157aa:	b003      	add	sp, #12
   157ac:	f85d fb04 	ldr.w	pc, [sp], #4
   157b0:	1fff97d0 	.word	0x1fff97d0
   157b4:	1fff97cc 	.word	0x1fff97cc

000157b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   157b8:	b500      	push	{lr}
   157ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157bc:	f7eb fa4e 	bl	c5c <Sys_GetCoreID>
   157c0:	4603      	mov	r3, r0
   157c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   157c4:	4a10      	ldr	r2, [pc, #64]	; (15808 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   157c6:	9b01      	ldr	r3, [sp, #4]
   157c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157cc:	2b00      	cmp	r3, #0
   157ce:	d10d      	bne.n	157ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   157d0:	f7eb f8c7 	bl	962 <Port_schm_read_msr>
   157d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   157d6:	9b00      	ldr	r3, [sp, #0]
   157d8:	f003 0301 	and.w	r3, r3, #1
   157dc:	2b00      	cmp	r3, #0
   157de:	d100      	bne.n	157e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   157e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   157e2:	490a      	ldr	r1, [pc, #40]	; (1580c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   157e4:	9b01      	ldr	r3, [sp, #4]
   157e6:	9a00      	ldr	r2, [sp, #0]
   157e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   157ec:	4a06      	ldr	r2, [pc, #24]	; (15808 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   157ee:	9b01      	ldr	r3, [sp, #4]
   157f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157f4:	1c5a      	adds	r2, r3, #1
   157f6:	4904      	ldr	r1, [pc, #16]	; (15808 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   157f8:	9b01      	ldr	r3, [sp, #4]
   157fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   157fe:	bf00      	nop
   15800:	b003      	add	sp, #12
   15802:	f85d fb04 	ldr.w	pc, [sp], #4
   15806:	bf00      	nop
   15808:	1fff97d8 	.word	0x1fff97d8
   1580c:	1fff97d4 	.word	0x1fff97d4

00015810 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   15810:	b500      	push	{lr}
   15812:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15814:	f7eb fa22 	bl	c5c <Sys_GetCoreID>
   15818:	4603      	mov	r3, r0
   1581a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   1581c:	4a0d      	ldr	r2, [pc, #52]	; (15854 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   1581e:	9b01      	ldr	r3, [sp, #4]
   15820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15824:	1e5a      	subs	r2, r3, #1
   15826:	490b      	ldr	r1, [pc, #44]	; (15854 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   15828:	9b01      	ldr	r3, [sp, #4]
   1582a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   1582e:	4a0a      	ldr	r2, [pc, #40]	; (15858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   15830:	9b01      	ldr	r3, [sp, #4]
   15832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15836:	f003 0301 	and.w	r3, r3, #1
   1583a:	2b00      	cmp	r3, #0
   1583c:	d106      	bne.n	1584c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   1583e:	4a05      	ldr	r2, [pc, #20]	; (15854 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   15840:	9b01      	ldr	r3, [sp, #4]
   15842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15846:	2b00      	cmp	r3, #0
   15848:	d100      	bne.n	1584c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1584a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1584c:	bf00      	nop
   1584e:	b003      	add	sp, #12
   15850:	f85d fb04 	ldr.w	pc, [sp], #4
   15854:	1fff97d8 	.word	0x1fff97d8
   15858:	1fff97d4 	.word	0x1fff97d4

0001585c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   1585c:	b500      	push	{lr}
   1585e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15860:	f7eb f9fc 	bl	c5c <Sys_GetCoreID>
   15864:	4603      	mov	r3, r0
   15866:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   15868:	4a10      	ldr	r2, [pc, #64]	; (158ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1586a:	9b01      	ldr	r3, [sp, #4]
   1586c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15870:	2b00      	cmp	r3, #0
   15872:	d10d      	bne.n	15890 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15874:	f7eb f875 	bl	962 <Port_schm_read_msr>
   15878:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1587a:	9b00      	ldr	r3, [sp, #0]
   1587c:	f003 0301 	and.w	r3, r3, #1
   15880:	2b00      	cmp	r3, #0
   15882:	d100      	bne.n	15886 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15884:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   15886:	490a      	ldr	r1, [pc, #40]	; (158b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   15888:	9b01      	ldr	r3, [sp, #4]
   1588a:	9a00      	ldr	r2, [sp, #0]
   1588c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   15890:	4a06      	ldr	r2, [pc, #24]	; (158ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   15892:	9b01      	ldr	r3, [sp, #4]
   15894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15898:	1c5a      	adds	r2, r3, #1
   1589a:	4904      	ldr	r1, [pc, #16]	; (158ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1589c:	9b01      	ldr	r3, [sp, #4]
   1589e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   158a2:	bf00      	nop
   158a4:	b003      	add	sp, #12
   158a6:	f85d fb04 	ldr.w	pc, [sp], #4
   158aa:	bf00      	nop
   158ac:	1fff97e0 	.word	0x1fff97e0
   158b0:	1fff97dc 	.word	0x1fff97dc

000158b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   158b4:	b500      	push	{lr}
   158b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158b8:	f7eb f9d0 	bl	c5c <Sys_GetCoreID>
   158bc:	4603      	mov	r3, r0
   158be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   158c0:	4a0d      	ldr	r2, [pc, #52]	; (158f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   158c2:	9b01      	ldr	r3, [sp, #4]
   158c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158c8:	1e5a      	subs	r2, r3, #1
   158ca:	490b      	ldr	r1, [pc, #44]	; (158f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   158cc:	9b01      	ldr	r3, [sp, #4]
   158ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   158d2:	4a0a      	ldr	r2, [pc, #40]	; (158fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   158d4:	9b01      	ldr	r3, [sp, #4]
   158d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158da:	f003 0301 	and.w	r3, r3, #1
   158de:	2b00      	cmp	r3, #0
   158e0:	d106      	bne.n	158f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   158e2:	4a05      	ldr	r2, [pc, #20]	; (158f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   158e4:	9b01      	ldr	r3, [sp, #4]
   158e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158ea:	2b00      	cmp	r3, #0
   158ec:	d100      	bne.n	158f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   158ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   158f0:	bf00      	nop
   158f2:	b003      	add	sp, #12
   158f4:	f85d fb04 	ldr.w	pc, [sp], #4
   158f8:	1fff97e0 	.word	0x1fff97e0
   158fc:	1fff97dc 	.word	0x1fff97dc

00015900 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   15900:	b500      	push	{lr}
   15902:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15904:	f7eb f9aa 	bl	c5c <Sys_GetCoreID>
   15908:	4603      	mov	r3, r0
   1590a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   1590c:	4a10      	ldr	r2, [pc, #64]	; (15950 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1590e:	9b01      	ldr	r3, [sp, #4]
   15910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15914:	2b00      	cmp	r3, #0
   15916:	d10d      	bne.n	15934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15918:	f7eb f823 	bl	962 <Port_schm_read_msr>
   1591c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1591e:	9b00      	ldr	r3, [sp, #0]
   15920:	f003 0301 	and.w	r3, r3, #1
   15924:	2b00      	cmp	r3, #0
   15926:	d100      	bne.n	1592a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15928:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1592a:	490a      	ldr	r1, [pc, #40]	; (15954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   1592c:	9b01      	ldr	r3, [sp, #4]
   1592e:	9a00      	ldr	r2, [sp, #0]
   15930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   15934:	4a06      	ldr	r2, [pc, #24]	; (15950 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   15936:	9b01      	ldr	r3, [sp, #4]
   15938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1593c:	1c5a      	adds	r2, r3, #1
   1593e:	4904      	ldr	r1, [pc, #16]	; (15950 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   15940:	9b01      	ldr	r3, [sp, #4]
   15942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15946:	bf00      	nop
   15948:	b003      	add	sp, #12
   1594a:	f85d fb04 	ldr.w	pc, [sp], #4
   1594e:	bf00      	nop
   15950:	1fff97e8 	.word	0x1fff97e8
   15954:	1fff97e4 	.word	0x1fff97e4

00015958 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   15958:	b500      	push	{lr}
   1595a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1595c:	f7eb f97e 	bl	c5c <Sys_GetCoreID>
   15960:	4603      	mov	r3, r0
   15962:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   15964:	4a0d      	ldr	r2, [pc, #52]	; (1599c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   15966:	9b01      	ldr	r3, [sp, #4]
   15968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1596c:	1e5a      	subs	r2, r3, #1
   1596e:	490b      	ldr	r1, [pc, #44]	; (1599c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   15970:	9b01      	ldr	r3, [sp, #4]
   15972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   15976:	4a0a      	ldr	r2, [pc, #40]	; (159a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   15978:	9b01      	ldr	r3, [sp, #4]
   1597a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1597e:	f003 0301 	and.w	r3, r3, #1
   15982:	2b00      	cmp	r3, #0
   15984:	d106      	bne.n	15994 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   15986:	4a05      	ldr	r2, [pc, #20]	; (1599c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   15988:	9b01      	ldr	r3, [sp, #4]
   1598a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1598e:	2b00      	cmp	r3, #0
   15990:	d100      	bne.n	15994 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15992:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15994:	bf00      	nop
   15996:	b003      	add	sp, #12
   15998:	f85d fb04 	ldr.w	pc, [sp], #4
   1599c:	1fff97e8 	.word	0x1fff97e8
   159a0:	1fff97e4 	.word	0x1fff97e4

000159a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   159a4:	b500      	push	{lr}
   159a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159a8:	f7eb f958 	bl	c5c <Sys_GetCoreID>
   159ac:	4603      	mov	r3, r0
   159ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   159b0:	4a10      	ldr	r2, [pc, #64]	; (159f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   159b2:	9b01      	ldr	r3, [sp, #4]
   159b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159b8:	2b00      	cmp	r3, #0
   159ba:	d10d      	bne.n	159d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   159bc:	f7ea ffd1 	bl	962 <Port_schm_read_msr>
   159c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   159c2:	9b00      	ldr	r3, [sp, #0]
   159c4:	f003 0301 	and.w	r3, r3, #1
   159c8:	2b00      	cmp	r3, #0
   159ca:	d100      	bne.n	159ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   159cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   159ce:	490a      	ldr	r1, [pc, #40]	; (159f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   159d0:	9b01      	ldr	r3, [sp, #4]
   159d2:	9a00      	ldr	r2, [sp, #0]
   159d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   159d8:	4a06      	ldr	r2, [pc, #24]	; (159f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   159da:	9b01      	ldr	r3, [sp, #4]
   159dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159e0:	1c5a      	adds	r2, r3, #1
   159e2:	4904      	ldr	r1, [pc, #16]	; (159f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   159e4:	9b01      	ldr	r3, [sp, #4]
   159e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   159ea:	bf00      	nop
   159ec:	b003      	add	sp, #12
   159ee:	f85d fb04 	ldr.w	pc, [sp], #4
   159f2:	bf00      	nop
   159f4:	1fff97f0 	.word	0x1fff97f0
   159f8:	1fff97ec 	.word	0x1fff97ec

000159fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   159fc:	b500      	push	{lr}
   159fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a00:	f7eb f92c 	bl	c5c <Sys_GetCoreID>
   15a04:	4603      	mov	r3, r0
   15a06:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   15a08:	4a0d      	ldr	r2, [pc, #52]	; (15a40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   15a0a:	9b01      	ldr	r3, [sp, #4]
   15a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a10:	1e5a      	subs	r2, r3, #1
   15a12:	490b      	ldr	r1, [pc, #44]	; (15a40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   15a14:	9b01      	ldr	r3, [sp, #4]
   15a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   15a1a:	4a0a      	ldr	r2, [pc, #40]	; (15a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   15a1c:	9b01      	ldr	r3, [sp, #4]
   15a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a22:	f003 0301 	and.w	r3, r3, #1
   15a26:	2b00      	cmp	r3, #0
   15a28:	d106      	bne.n	15a38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   15a2a:	4a05      	ldr	r2, [pc, #20]	; (15a40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   15a2c:	9b01      	ldr	r3, [sp, #4]
   15a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a32:	2b00      	cmp	r3, #0
   15a34:	d100      	bne.n	15a38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a38:	bf00      	nop
   15a3a:	b003      	add	sp, #12
   15a3c:	f85d fb04 	ldr.w	pc, [sp], #4
   15a40:	1fff97f0 	.word	0x1fff97f0
   15a44:	1fff97ec 	.word	0x1fff97ec

00015a48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   15a48:	b500      	push	{lr}
   15a4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a4c:	f7eb f906 	bl	c5c <Sys_GetCoreID>
   15a50:	4603      	mov	r3, r0
   15a52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   15a54:	4a10      	ldr	r2, [pc, #64]	; (15a98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15a56:	9b01      	ldr	r3, [sp, #4]
   15a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a5c:	2b00      	cmp	r3, #0
   15a5e:	d10d      	bne.n	15a7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a60:	f7ea ff7f 	bl	962 <Port_schm_read_msr>
   15a64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a66:	9b00      	ldr	r3, [sp, #0]
   15a68:	f003 0301 	and.w	r3, r3, #1
   15a6c:	2b00      	cmp	r3, #0
   15a6e:	d100      	bne.n	15a72 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   15a72:	490a      	ldr	r1, [pc, #40]	; (15a9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   15a74:	9b01      	ldr	r3, [sp, #4]
   15a76:	9a00      	ldr	r2, [sp, #0]
   15a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   15a7c:	4a06      	ldr	r2, [pc, #24]	; (15a98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15a7e:	9b01      	ldr	r3, [sp, #4]
   15a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a84:	1c5a      	adds	r2, r3, #1
   15a86:	4904      	ldr	r1, [pc, #16]	; (15a98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15a88:	9b01      	ldr	r3, [sp, #4]
   15a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a8e:	bf00      	nop
   15a90:	b003      	add	sp, #12
   15a92:	f85d fb04 	ldr.w	pc, [sp], #4
   15a96:	bf00      	nop
   15a98:	1fff97f8 	.word	0x1fff97f8
   15a9c:	1fff97f4 	.word	0x1fff97f4

00015aa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   15aa0:	b500      	push	{lr}
   15aa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15aa4:	f7eb f8da 	bl	c5c <Sys_GetCoreID>
   15aa8:	4603      	mov	r3, r0
   15aaa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   15aac:	4a0d      	ldr	r2, [pc, #52]	; (15ae4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15aae:	9b01      	ldr	r3, [sp, #4]
   15ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ab4:	1e5a      	subs	r2, r3, #1
   15ab6:	490b      	ldr	r1, [pc, #44]	; (15ae4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15ab8:	9b01      	ldr	r3, [sp, #4]
   15aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   15abe:	4a0a      	ldr	r2, [pc, #40]	; (15ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   15ac0:	9b01      	ldr	r3, [sp, #4]
   15ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ac6:	f003 0301 	and.w	r3, r3, #1
   15aca:	2b00      	cmp	r3, #0
   15acc:	d106      	bne.n	15adc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   15ace:	4a05      	ldr	r2, [pc, #20]	; (15ae4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15ad0:	9b01      	ldr	r3, [sp, #4]
   15ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ad6:	2b00      	cmp	r3, #0
   15ad8:	d100      	bne.n	15adc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15ada:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15adc:	bf00      	nop
   15ade:	b003      	add	sp, #12
   15ae0:	f85d fb04 	ldr.w	pc, [sp], #4
   15ae4:	1fff97f8 	.word	0x1fff97f8
   15ae8:	1fff97f4 	.word	0x1fff97f4

00015aec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15aec:	b500      	push	{lr}
   15aee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15af0:	f7eb f8b4 	bl	c5c <Sys_GetCoreID>
   15af4:	4603      	mov	r3, r0
   15af6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   15af8:	4a10      	ldr	r2, [pc, #64]	; (15b3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15afa:	9b01      	ldr	r3, [sp, #4]
   15afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b00:	2b00      	cmp	r3, #0
   15b02:	d10d      	bne.n	15b20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15b04:	f7ea ff2d 	bl	962 <Port_schm_read_msr>
   15b08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15b0a:	9b00      	ldr	r3, [sp, #0]
   15b0c:	f003 0301 	and.w	r3, r3, #1
   15b10:	2b00      	cmp	r3, #0
   15b12:	d100      	bne.n	15b16 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15b14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   15b16:	490a      	ldr	r1, [pc, #40]	; (15b40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   15b18:	9b01      	ldr	r3, [sp, #4]
   15b1a:	9a00      	ldr	r2, [sp, #0]
   15b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   15b20:	4a06      	ldr	r2, [pc, #24]	; (15b3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15b22:	9b01      	ldr	r3, [sp, #4]
   15b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b28:	1c5a      	adds	r2, r3, #1
   15b2a:	4904      	ldr	r1, [pc, #16]	; (15b3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15b2c:	9b01      	ldr	r3, [sp, #4]
   15b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15b32:	bf00      	nop
   15b34:	b003      	add	sp, #12
   15b36:	f85d fb04 	ldr.w	pc, [sp], #4
   15b3a:	bf00      	nop
   15b3c:	1fff9800 	.word	0x1fff9800
   15b40:	1fff97fc 	.word	0x1fff97fc

00015b44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15b44:	b500      	push	{lr}
   15b46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b48:	f7eb f888 	bl	c5c <Sys_GetCoreID>
   15b4c:	4603      	mov	r3, r0
   15b4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   15b50:	4a0d      	ldr	r2, [pc, #52]	; (15b88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15b52:	9b01      	ldr	r3, [sp, #4]
   15b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b58:	1e5a      	subs	r2, r3, #1
   15b5a:	490b      	ldr	r1, [pc, #44]	; (15b88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15b5c:	9b01      	ldr	r3, [sp, #4]
   15b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   15b62:	4a0a      	ldr	r2, [pc, #40]	; (15b8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   15b64:	9b01      	ldr	r3, [sp, #4]
   15b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b6a:	f003 0301 	and.w	r3, r3, #1
   15b6e:	2b00      	cmp	r3, #0
   15b70:	d106      	bne.n	15b80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   15b72:	4a05      	ldr	r2, [pc, #20]	; (15b88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15b74:	9b01      	ldr	r3, [sp, #4]
   15b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b7a:	2b00      	cmp	r3, #0
   15b7c:	d100      	bne.n	15b80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15b7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15b80:	bf00      	nop
   15b82:	b003      	add	sp, #12
   15b84:	f85d fb04 	ldr.w	pc, [sp], #4
   15b88:	1fff9800 	.word	0x1fff9800
   15b8c:	1fff97fc 	.word	0x1fff97fc

00015b90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15b90:	b500      	push	{lr}
   15b92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b94:	f7eb f862 	bl	c5c <Sys_GetCoreID>
   15b98:	4603      	mov	r3, r0
   15b9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   15b9c:	4a10      	ldr	r2, [pc, #64]	; (15be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15b9e:	9b01      	ldr	r3, [sp, #4]
   15ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ba4:	2b00      	cmp	r3, #0
   15ba6:	d10d      	bne.n	15bc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15ba8:	f7ea fedb 	bl	962 <Port_schm_read_msr>
   15bac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15bae:	9b00      	ldr	r3, [sp, #0]
   15bb0:	f003 0301 	and.w	r3, r3, #1
   15bb4:	2b00      	cmp	r3, #0
   15bb6:	d100      	bne.n	15bba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15bb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   15bba:	490a      	ldr	r1, [pc, #40]	; (15be4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   15bbc:	9b01      	ldr	r3, [sp, #4]
   15bbe:	9a00      	ldr	r2, [sp, #0]
   15bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   15bc4:	4a06      	ldr	r2, [pc, #24]	; (15be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15bc6:	9b01      	ldr	r3, [sp, #4]
   15bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bcc:	1c5a      	adds	r2, r3, #1
   15bce:	4904      	ldr	r1, [pc, #16]	; (15be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15bd0:	9b01      	ldr	r3, [sp, #4]
   15bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15bd6:	bf00      	nop
   15bd8:	b003      	add	sp, #12
   15bda:	f85d fb04 	ldr.w	pc, [sp], #4
   15bde:	bf00      	nop
   15be0:	1fff9808 	.word	0x1fff9808
   15be4:	1fff9804 	.word	0x1fff9804

00015be8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15be8:	b500      	push	{lr}
   15bea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15bec:	f7eb f836 	bl	c5c <Sys_GetCoreID>
   15bf0:	4603      	mov	r3, r0
   15bf2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   15bf4:	4a0d      	ldr	r2, [pc, #52]	; (15c2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15bf6:	9b01      	ldr	r3, [sp, #4]
   15bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bfc:	1e5a      	subs	r2, r3, #1
   15bfe:	490b      	ldr	r1, [pc, #44]	; (15c2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15c00:	9b01      	ldr	r3, [sp, #4]
   15c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   15c06:	4a0a      	ldr	r2, [pc, #40]	; (15c30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   15c08:	9b01      	ldr	r3, [sp, #4]
   15c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c0e:	f003 0301 	and.w	r3, r3, #1
   15c12:	2b00      	cmp	r3, #0
   15c14:	d106      	bne.n	15c24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   15c16:	4a05      	ldr	r2, [pc, #20]	; (15c2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15c18:	9b01      	ldr	r3, [sp, #4]
   15c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c1e:	2b00      	cmp	r3, #0
   15c20:	d100      	bne.n	15c24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15c22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15c24:	bf00      	nop
   15c26:	b003      	add	sp, #12
   15c28:	f85d fb04 	ldr.w	pc, [sp], #4
   15c2c:	1fff9808 	.word	0x1fff9808
   15c30:	1fff9804 	.word	0x1fff9804

00015c34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15c34:	b500      	push	{lr}
   15c36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c38:	f7eb f810 	bl	c5c <Sys_GetCoreID>
   15c3c:	4603      	mov	r3, r0
   15c3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   15c40:	4a10      	ldr	r2, [pc, #64]	; (15c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15c42:	9b01      	ldr	r3, [sp, #4]
   15c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c48:	2b00      	cmp	r3, #0
   15c4a:	d10d      	bne.n	15c68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15c4c:	f7ea fe89 	bl	962 <Port_schm_read_msr>
   15c50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15c52:	9b00      	ldr	r3, [sp, #0]
   15c54:	f003 0301 	and.w	r3, r3, #1
   15c58:	2b00      	cmp	r3, #0
   15c5a:	d100      	bne.n	15c5e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15c5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   15c5e:	490a      	ldr	r1, [pc, #40]	; (15c88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   15c60:	9b01      	ldr	r3, [sp, #4]
   15c62:	9a00      	ldr	r2, [sp, #0]
   15c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   15c68:	4a06      	ldr	r2, [pc, #24]	; (15c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15c6a:	9b01      	ldr	r3, [sp, #4]
   15c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c70:	1c5a      	adds	r2, r3, #1
   15c72:	4904      	ldr	r1, [pc, #16]	; (15c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15c74:	9b01      	ldr	r3, [sp, #4]
   15c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15c7a:	bf00      	nop
   15c7c:	b003      	add	sp, #12
   15c7e:	f85d fb04 	ldr.w	pc, [sp], #4
   15c82:	bf00      	nop
   15c84:	1fff9810 	.word	0x1fff9810
   15c88:	1fff980c 	.word	0x1fff980c

00015c8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15c8c:	b500      	push	{lr}
   15c8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c90:	f7ea ffe4 	bl	c5c <Sys_GetCoreID>
   15c94:	4603      	mov	r3, r0
   15c96:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   15c98:	4a0d      	ldr	r2, [pc, #52]	; (15cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15c9a:	9b01      	ldr	r3, [sp, #4]
   15c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ca0:	1e5a      	subs	r2, r3, #1
   15ca2:	490b      	ldr	r1, [pc, #44]	; (15cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15ca4:	9b01      	ldr	r3, [sp, #4]
   15ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   15caa:	4a0a      	ldr	r2, [pc, #40]	; (15cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   15cac:	9b01      	ldr	r3, [sp, #4]
   15cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cb2:	f003 0301 	and.w	r3, r3, #1
   15cb6:	2b00      	cmp	r3, #0
   15cb8:	d106      	bne.n	15cc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   15cba:	4a05      	ldr	r2, [pc, #20]	; (15cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15cbc:	9b01      	ldr	r3, [sp, #4]
   15cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cc2:	2b00      	cmp	r3, #0
   15cc4:	d100      	bne.n	15cc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15cc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15cc8:	bf00      	nop
   15cca:	b003      	add	sp, #12
   15ccc:	f85d fb04 	ldr.w	pc, [sp], #4
   15cd0:	1fff9810 	.word	0x1fff9810
   15cd4:	1fff980c 	.word	0x1fff980c

00015cd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15cd8:	b500      	push	{lr}
   15cda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15cdc:	f7ea ffbe 	bl	c5c <Sys_GetCoreID>
   15ce0:	4603      	mov	r3, r0
   15ce2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   15ce4:	4a10      	ldr	r2, [pc, #64]	; (15d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15ce6:	9b01      	ldr	r3, [sp, #4]
   15ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cec:	2b00      	cmp	r3, #0
   15cee:	d10d      	bne.n	15d0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15cf0:	f7ea fe37 	bl	962 <Port_schm_read_msr>
   15cf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15cf6:	9b00      	ldr	r3, [sp, #0]
   15cf8:	f003 0301 	and.w	r3, r3, #1
   15cfc:	2b00      	cmp	r3, #0
   15cfe:	d100      	bne.n	15d02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15d00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   15d02:	490a      	ldr	r1, [pc, #40]	; (15d2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   15d04:	9b01      	ldr	r3, [sp, #4]
   15d06:	9a00      	ldr	r2, [sp, #0]
   15d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   15d0c:	4a06      	ldr	r2, [pc, #24]	; (15d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15d0e:	9b01      	ldr	r3, [sp, #4]
   15d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d14:	1c5a      	adds	r2, r3, #1
   15d16:	4904      	ldr	r1, [pc, #16]	; (15d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15d18:	9b01      	ldr	r3, [sp, #4]
   15d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15d1e:	bf00      	nop
   15d20:	b003      	add	sp, #12
   15d22:	f85d fb04 	ldr.w	pc, [sp], #4
   15d26:	bf00      	nop
   15d28:	1fff9818 	.word	0x1fff9818
   15d2c:	1fff9814 	.word	0x1fff9814

00015d30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15d30:	b500      	push	{lr}
   15d32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d34:	f7ea ff92 	bl	c5c <Sys_GetCoreID>
   15d38:	4603      	mov	r3, r0
   15d3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   15d3c:	4a0d      	ldr	r2, [pc, #52]	; (15d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15d3e:	9b01      	ldr	r3, [sp, #4]
   15d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d44:	1e5a      	subs	r2, r3, #1
   15d46:	490b      	ldr	r1, [pc, #44]	; (15d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15d48:	9b01      	ldr	r3, [sp, #4]
   15d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   15d4e:	4a0a      	ldr	r2, [pc, #40]	; (15d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   15d50:	9b01      	ldr	r3, [sp, #4]
   15d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d56:	f003 0301 	and.w	r3, r3, #1
   15d5a:	2b00      	cmp	r3, #0
   15d5c:	d106      	bne.n	15d6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   15d5e:	4a05      	ldr	r2, [pc, #20]	; (15d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15d60:	9b01      	ldr	r3, [sp, #4]
   15d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d66:	2b00      	cmp	r3, #0
   15d68:	d100      	bne.n	15d6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15d6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15d6c:	bf00      	nop
   15d6e:	b003      	add	sp, #12
   15d70:	f85d fb04 	ldr.w	pc, [sp], #4
   15d74:	1fff9818 	.word	0x1fff9818
   15d78:	1fff9814 	.word	0x1fff9814

00015d7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15d7c:	b500      	push	{lr}
   15d7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d80:	f7ea ff6c 	bl	c5c <Sys_GetCoreID>
   15d84:	4603      	mov	r3, r0
   15d86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   15d88:	4a10      	ldr	r2, [pc, #64]	; (15dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15d8a:	9b01      	ldr	r3, [sp, #4]
   15d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d90:	2b00      	cmp	r3, #0
   15d92:	d10d      	bne.n	15db0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15d94:	f7ea fde5 	bl	962 <Port_schm_read_msr>
   15d98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15d9a:	9b00      	ldr	r3, [sp, #0]
   15d9c:	f003 0301 	and.w	r3, r3, #1
   15da0:	2b00      	cmp	r3, #0
   15da2:	d100      	bne.n	15da6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15da4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   15da6:	490a      	ldr	r1, [pc, #40]	; (15dd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   15da8:	9b01      	ldr	r3, [sp, #4]
   15daa:	9a00      	ldr	r2, [sp, #0]
   15dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   15db0:	4a06      	ldr	r2, [pc, #24]	; (15dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15db2:	9b01      	ldr	r3, [sp, #4]
   15db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15db8:	1c5a      	adds	r2, r3, #1
   15dba:	4904      	ldr	r1, [pc, #16]	; (15dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15dbc:	9b01      	ldr	r3, [sp, #4]
   15dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15dc2:	bf00      	nop
   15dc4:	b003      	add	sp, #12
   15dc6:	f85d fb04 	ldr.w	pc, [sp], #4
   15dca:	bf00      	nop
   15dcc:	1fff9820 	.word	0x1fff9820
   15dd0:	1fff981c 	.word	0x1fff981c

00015dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15dd4:	b500      	push	{lr}
   15dd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15dd8:	f7ea ff40 	bl	c5c <Sys_GetCoreID>
   15ddc:	4603      	mov	r3, r0
   15dde:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   15de0:	4a0d      	ldr	r2, [pc, #52]	; (15e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15de2:	9b01      	ldr	r3, [sp, #4]
   15de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15de8:	1e5a      	subs	r2, r3, #1
   15dea:	490b      	ldr	r1, [pc, #44]	; (15e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15dec:	9b01      	ldr	r3, [sp, #4]
   15dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   15df2:	4a0a      	ldr	r2, [pc, #40]	; (15e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   15df4:	9b01      	ldr	r3, [sp, #4]
   15df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dfa:	f003 0301 	and.w	r3, r3, #1
   15dfe:	2b00      	cmp	r3, #0
   15e00:	d106      	bne.n	15e10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   15e02:	4a05      	ldr	r2, [pc, #20]	; (15e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15e04:	9b01      	ldr	r3, [sp, #4]
   15e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e0a:	2b00      	cmp	r3, #0
   15e0c:	d100      	bne.n	15e10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15e0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15e10:	bf00      	nop
   15e12:	b003      	add	sp, #12
   15e14:	f85d fb04 	ldr.w	pc, [sp], #4
   15e18:	1fff9820 	.word	0x1fff9820
   15e1c:	1fff981c 	.word	0x1fff981c

00015e20 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15e20:	b500      	push	{lr}
   15e22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e24:	f7ea ff1a 	bl	c5c <Sys_GetCoreID>
   15e28:	4603      	mov	r3, r0
   15e2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId])
   15e2c:	4a10      	ldr	r2, [pc, #64]	; (15e70 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15e2e:	9b01      	ldr	r3, [sp, #4]
   15e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e34:	2b00      	cmp	r3, #0
   15e36:	d10d      	bne.n	15e54 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15e38:	f7ea fd9c 	bl	974 <Spi_schm_read_msr>
   15e3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15e3e:	9b00      	ldr	r3, [sp, #0]
   15e40:	f003 0301 	and.w	r3, r3, #1
   15e44:	2b00      	cmp	r3, #0
   15e46:	d100      	bne.n	15e4a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15e48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   15e4a:	490a      	ldr	r1, [pc, #40]	; (15e74 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x54>)
   15e4c:	9b01      	ldr	r3, [sp, #4]
   15e4e:	9a00      	ldr	r2, [sp, #0]
   15e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]++;
   15e54:	4a06      	ldr	r2, [pc, #24]	; (15e70 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15e56:	9b01      	ldr	r3, [sp, #4]
   15e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e5c:	1c5a      	adds	r2, r3, #1
   15e5e:	4904      	ldr	r1, [pc, #16]	; (15e70 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15e60:	9b01      	ldr	r3, [sp, #4]
   15e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15e66:	bf00      	nop
   15e68:	b003      	add	sp, #12
   15e6a:	f85d fb04 	ldr.w	pc, [sp], #4
   15e6e:	bf00      	nop
   15e70:	1fff9828 	.word	0x1fff9828
   15e74:	1fff9824 	.word	0x1fff9824

00015e78 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15e78:	b500      	push	{lr}
   15e7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e7c:	f7ea feee 	bl	c5c <Sys_GetCoreID>
   15e80:	4603      	mov	r3, r0
   15e82:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]--;
   15e84:	4a0d      	ldr	r2, [pc, #52]	; (15ebc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15e86:	9b01      	ldr	r3, [sp, #4]
   15e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e8c:	1e5a      	subs	r2, r3, #1
   15e8e:	490b      	ldr	r1, [pc, #44]	; (15ebc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15e90:	9b01      	ldr	r3, [sp, #4]
   15e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   15e96:	4a0a      	ldr	r2, [pc, #40]	; (15ec0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x48>)
   15e98:	9b01      	ldr	r3, [sp, #4]
   15e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e9e:	f003 0301 	and.w	r3, r3, #1
   15ea2:	2b00      	cmp	r3, #0
   15ea4:	d106      	bne.n	15eb4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
   15ea6:	4a05      	ldr	r2, [pc, #20]	; (15ebc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15ea8:	9b01      	ldr	r3, [sp, #4]
   15eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15eae:	2b00      	cmp	r3, #0
   15eb0:	d100      	bne.n	15eb4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15eb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15eb4:	bf00      	nop
   15eb6:	b003      	add	sp, #12
   15eb8:	f85d fb04 	ldr.w	pc, [sp], #4
   15ebc:	1fff9828 	.word	0x1fff9828
   15ec0:	1fff9824 	.word	0x1fff9824

00015ec4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15ec4:	b500      	push	{lr}
   15ec6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ec8:	f7ea fec8 	bl	c5c <Sys_GetCoreID>
   15ecc:	4603      	mov	r3, r0
   15ece:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId])
   15ed0:	4a10      	ldr	r2, [pc, #64]	; (15f14 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15ed2:	9b01      	ldr	r3, [sp, #4]
   15ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ed8:	2b00      	cmp	r3, #0
   15eda:	d10d      	bne.n	15ef8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15edc:	f7ea fd4a 	bl	974 <Spi_schm_read_msr>
   15ee0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15ee2:	9b00      	ldr	r3, [sp, #0]
   15ee4:	f003 0301 	and.w	r3, r3, #1
   15ee8:	2b00      	cmp	r3, #0
   15eea:	d100      	bne.n	15eee <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15eec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   15eee:	490a      	ldr	r1, [pc, #40]	; (15f18 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x54>)
   15ef0:	9b01      	ldr	r3, [sp, #4]
   15ef2:	9a00      	ldr	r2, [sp, #0]
   15ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]++;
   15ef8:	4a06      	ldr	r2, [pc, #24]	; (15f14 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15efa:	9b01      	ldr	r3, [sp, #4]
   15efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f00:	1c5a      	adds	r2, r3, #1
   15f02:	4904      	ldr	r1, [pc, #16]	; (15f14 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15f04:	9b01      	ldr	r3, [sp, #4]
   15f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15f0a:	bf00      	nop
   15f0c:	b003      	add	sp, #12
   15f0e:	f85d fb04 	ldr.w	pc, [sp], #4
   15f12:	bf00      	nop
   15f14:	1fff9830 	.word	0x1fff9830
   15f18:	1fff982c 	.word	0x1fff982c

00015f1c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15f1c:	b500      	push	{lr}
   15f1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f20:	f7ea fe9c 	bl	c5c <Sys_GetCoreID>
   15f24:	4603      	mov	r3, r0
   15f26:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]--;
   15f28:	4a0d      	ldr	r2, [pc, #52]	; (15f60 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15f2a:	9b01      	ldr	r3, [sp, #4]
   15f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f30:	1e5a      	subs	r2, r3, #1
   15f32:	490b      	ldr	r1, [pc, #44]	; (15f60 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15f34:	9b01      	ldr	r3, [sp, #4]
   15f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   15f3a:	4a0a      	ldr	r2, [pc, #40]	; (15f64 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x48>)
   15f3c:	9b01      	ldr	r3, [sp, #4]
   15f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f42:	f003 0301 	and.w	r3, r3, #1
   15f46:	2b00      	cmp	r3, #0
   15f48:	d106      	bne.n	15f58 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
   15f4a:	4a05      	ldr	r2, [pc, #20]	; (15f60 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15f4c:	9b01      	ldr	r3, [sp, #4]
   15f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f52:	2b00      	cmp	r3, #0
   15f54:	d100      	bne.n	15f58 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15f56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15f58:	bf00      	nop
   15f5a:	b003      	add	sp, #12
   15f5c:	f85d fb04 	ldr.w	pc, [sp], #4
   15f60:	1fff9830 	.word	0x1fff9830
   15f64:	1fff982c 	.word	0x1fff982c

00015f68 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   15f68:	b500      	push	{lr}
   15f6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f6c:	f7ea fe76 	bl	c5c <Sys_GetCoreID>
   15f70:	4603      	mov	r3, r0
   15f72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId])
   15f74:	4a10      	ldr	r2, [pc, #64]	; (15fb8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15f76:	9b01      	ldr	r3, [sp, #4]
   15f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f7c:	2b00      	cmp	r3, #0
   15f7e:	d10d      	bne.n	15f9c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15f80:	f7ea fcf8 	bl	974 <Spi_schm_read_msr>
   15f84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15f86:	9b00      	ldr	r3, [sp, #0]
   15f88:	f003 0301 	and.w	r3, r3, #1
   15f8c:	2b00      	cmp	r3, #0
   15f8e:	d100      	bne.n	15f92 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15f90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   15f92:	490a      	ldr	r1, [pc, #40]	; (15fbc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x54>)
   15f94:	9b01      	ldr	r3, [sp, #4]
   15f96:	9a00      	ldr	r2, [sp, #0]
   15f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]++;
   15f9c:	4a06      	ldr	r2, [pc, #24]	; (15fb8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15f9e:	9b01      	ldr	r3, [sp, #4]
   15fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fa4:	1c5a      	adds	r2, r3, #1
   15fa6:	4904      	ldr	r1, [pc, #16]	; (15fb8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15fa8:	9b01      	ldr	r3, [sp, #4]
   15faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15fae:	bf00      	nop
   15fb0:	b003      	add	sp, #12
   15fb2:	f85d fb04 	ldr.w	pc, [sp], #4
   15fb6:	bf00      	nop
   15fb8:	1fff9838 	.word	0x1fff9838
   15fbc:	1fff9834 	.word	0x1fff9834

00015fc0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   15fc0:	b500      	push	{lr}
   15fc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15fc4:	f7ea fe4a 	bl	c5c <Sys_GetCoreID>
   15fc8:	4603      	mov	r3, r0
   15fca:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]--;
   15fcc:	4a0d      	ldr	r2, [pc, #52]	; (16004 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15fce:	9b01      	ldr	r3, [sp, #4]
   15fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fd4:	1e5a      	subs	r2, r3, #1
   15fd6:	490b      	ldr	r1, [pc, #44]	; (16004 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15fd8:	9b01      	ldr	r3, [sp, #4]
   15fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   15fde:	4a0a      	ldr	r2, [pc, #40]	; (16008 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x48>)
   15fe0:	9b01      	ldr	r3, [sp, #4]
   15fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fe6:	f003 0301 	and.w	r3, r3, #1
   15fea:	2b00      	cmp	r3, #0
   15fec:	d106      	bne.n	15ffc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
   15fee:	4a05      	ldr	r2, [pc, #20]	; (16004 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15ff0:	9b01      	ldr	r3, [sp, #4]
   15ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ff6:	2b00      	cmp	r3, #0
   15ff8:	d100      	bne.n	15ffc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15ffa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15ffc:	bf00      	nop
   15ffe:	b003      	add	sp, #12
   16000:	f85d fb04 	ldr.w	pc, [sp], #4
   16004:	1fff9838 	.word	0x1fff9838
   16008:	1fff9834 	.word	0x1fff9834

0001600c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   1600c:	b500      	push	{lr}
   1600e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16010:	f7ea fe24 	bl	c5c <Sys_GetCoreID>
   16014:	4603      	mov	r3, r0
   16016:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId])
   16018:	4a10      	ldr	r2, [pc, #64]	; (1605c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   1601a:	9b01      	ldr	r3, [sp, #4]
   1601c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16020:	2b00      	cmp	r3, #0
   16022:	d10d      	bne.n	16040 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16024:	f7ea fca6 	bl	974 <Spi_schm_read_msr>
   16028:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1602a:	9b00      	ldr	r3, [sp, #0]
   1602c:	f003 0301 	and.w	r3, r3, #1
   16030:	2b00      	cmp	r3, #0
   16032:	d100      	bne.n	16036 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16034:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   16036:	490a      	ldr	r1, [pc, #40]	; (16060 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x54>)
   16038:	9b01      	ldr	r3, [sp, #4]
   1603a:	9a00      	ldr	r2, [sp, #0]
   1603c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]++;
   16040:	4a06      	ldr	r2, [pc, #24]	; (1605c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   16042:	9b01      	ldr	r3, [sp, #4]
   16044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16048:	1c5a      	adds	r2, r3, #1
   1604a:	4904      	ldr	r1, [pc, #16]	; (1605c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   1604c:	9b01      	ldr	r3, [sp, #4]
   1604e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16052:	bf00      	nop
   16054:	b003      	add	sp, #12
   16056:	f85d fb04 	ldr.w	pc, [sp], #4
   1605a:	bf00      	nop
   1605c:	1fff9840 	.word	0x1fff9840
   16060:	1fff983c 	.word	0x1fff983c

00016064 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   16064:	b500      	push	{lr}
   16066:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16068:	f7ea fdf8 	bl	c5c <Sys_GetCoreID>
   1606c:	4603      	mov	r3, r0
   1606e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]--;
   16070:	4a0d      	ldr	r2, [pc, #52]	; (160a8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   16072:	9b01      	ldr	r3, [sp, #4]
   16074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16078:	1e5a      	subs	r2, r3, #1
   1607a:	490b      	ldr	r1, [pc, #44]	; (160a8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   1607c:	9b01      	ldr	r3, [sp, #4]
   1607e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   16082:	4a0a      	ldr	r2, [pc, #40]	; (160ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x48>)
   16084:	9b01      	ldr	r3, [sp, #4]
   16086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1608a:	f003 0301 	and.w	r3, r3, #1
   1608e:	2b00      	cmp	r3, #0
   16090:	d106      	bne.n	160a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
   16092:	4a05      	ldr	r2, [pc, #20]	; (160a8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   16094:	9b01      	ldr	r3, [sp, #4]
   16096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1609a:	2b00      	cmp	r3, #0
   1609c:	d100      	bne.n	160a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1609e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   160a0:	bf00      	nop
   160a2:	b003      	add	sp, #12
   160a4:	f85d fb04 	ldr.w	pc, [sp], #4
   160a8:	1fff9840 	.word	0x1fff9840
   160ac:	1fff983c 	.word	0x1fff983c

000160b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   160b0:	b500      	push	{lr}
   160b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160b4:	f7ea fdd2 	bl	c5c <Sys_GetCoreID>
   160b8:	4603      	mov	r3, r0
   160ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId])
   160bc:	4a10      	ldr	r2, [pc, #64]	; (16100 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   160be:	9b01      	ldr	r3, [sp, #4]
   160c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160c4:	2b00      	cmp	r3, #0
   160c6:	d10d      	bne.n	160e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   160c8:	f7ea fc54 	bl	974 <Spi_schm_read_msr>
   160cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   160ce:	9b00      	ldr	r3, [sp, #0]
   160d0:	f003 0301 	and.w	r3, r3, #1
   160d4:	2b00      	cmp	r3, #0
   160d6:	d100      	bne.n	160da <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   160d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   160da:	490a      	ldr	r1, [pc, #40]	; (16104 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x54>)
   160dc:	9b01      	ldr	r3, [sp, #4]
   160de:	9a00      	ldr	r2, [sp, #0]
   160e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]++;
   160e4:	4a06      	ldr	r2, [pc, #24]	; (16100 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   160e6:	9b01      	ldr	r3, [sp, #4]
   160e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160ec:	1c5a      	adds	r2, r3, #1
   160ee:	4904      	ldr	r1, [pc, #16]	; (16100 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   160f0:	9b01      	ldr	r3, [sp, #4]
   160f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   160f6:	bf00      	nop
   160f8:	b003      	add	sp, #12
   160fa:	f85d fb04 	ldr.w	pc, [sp], #4
   160fe:	bf00      	nop
   16100:	1fff9848 	.word	0x1fff9848
   16104:	1fff9844 	.word	0x1fff9844

00016108 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   16108:	b500      	push	{lr}
   1610a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1610c:	f7ea fda6 	bl	c5c <Sys_GetCoreID>
   16110:	4603      	mov	r3, r0
   16112:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]--;
   16114:	4a0d      	ldr	r2, [pc, #52]	; (1614c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   16116:	9b01      	ldr	r3, [sp, #4]
   16118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1611c:	1e5a      	subs	r2, r3, #1
   1611e:	490b      	ldr	r1, [pc, #44]	; (1614c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   16120:	9b01      	ldr	r3, [sp, #4]
   16122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   16126:	4a0a      	ldr	r2, [pc, #40]	; (16150 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x48>)
   16128:	9b01      	ldr	r3, [sp, #4]
   1612a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1612e:	f003 0301 	and.w	r3, r3, #1
   16132:	2b00      	cmp	r3, #0
   16134:	d106      	bne.n	16144 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
   16136:	4a05      	ldr	r2, [pc, #20]	; (1614c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   16138:	9b01      	ldr	r3, [sp, #4]
   1613a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1613e:	2b00      	cmp	r3, #0
   16140:	d100      	bne.n	16144 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16142:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16144:	bf00      	nop
   16146:	b003      	add	sp, #12
   16148:	f85d fb04 	ldr.w	pc, [sp], #4
   1614c:	1fff9848 	.word	0x1fff9848
   16150:	1fff9844 	.word	0x1fff9844

00016154 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   16154:	b500      	push	{lr}
   16156:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16158:	f7ea fd80 	bl	c5c <Sys_GetCoreID>
   1615c:	4603      	mov	r3, r0
   1615e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId])
   16160:	4a10      	ldr	r2, [pc, #64]	; (161a4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   16162:	9b01      	ldr	r3, [sp, #4]
   16164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16168:	2b00      	cmp	r3, #0
   1616a:	d10d      	bne.n	16188 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1616c:	f7ea fc02 	bl	974 <Spi_schm_read_msr>
   16170:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16172:	9b00      	ldr	r3, [sp, #0]
   16174:	f003 0301 	and.w	r3, r3, #1
   16178:	2b00      	cmp	r3, #0
   1617a:	d100      	bne.n	1617e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1617c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   1617e:	490a      	ldr	r1, [pc, #40]	; (161a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x54>)
   16180:	9b01      	ldr	r3, [sp, #4]
   16182:	9a00      	ldr	r2, [sp, #0]
   16184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]++;
   16188:	4a06      	ldr	r2, [pc, #24]	; (161a4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   1618a:	9b01      	ldr	r3, [sp, #4]
   1618c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16190:	1c5a      	adds	r2, r3, #1
   16192:	4904      	ldr	r1, [pc, #16]	; (161a4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   16194:	9b01      	ldr	r3, [sp, #4]
   16196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1619a:	bf00      	nop
   1619c:	b003      	add	sp, #12
   1619e:	f85d fb04 	ldr.w	pc, [sp], #4
   161a2:	bf00      	nop
   161a4:	1fff9850 	.word	0x1fff9850
   161a8:	1fff984c 	.word	0x1fff984c

000161ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   161ac:	b500      	push	{lr}
   161ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161b0:	f7ea fd54 	bl	c5c <Sys_GetCoreID>
   161b4:	4603      	mov	r3, r0
   161b6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]--;
   161b8:	4a0d      	ldr	r2, [pc, #52]	; (161f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   161ba:	9b01      	ldr	r3, [sp, #4]
   161bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161c0:	1e5a      	subs	r2, r3, #1
   161c2:	490b      	ldr	r1, [pc, #44]	; (161f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   161c4:	9b01      	ldr	r3, [sp, #4]
   161c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   161ca:	4a0a      	ldr	r2, [pc, #40]	; (161f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x48>)
   161cc:	9b01      	ldr	r3, [sp, #4]
   161ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161d2:	f003 0301 	and.w	r3, r3, #1
   161d6:	2b00      	cmp	r3, #0
   161d8:	d106      	bne.n	161e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
   161da:	4a05      	ldr	r2, [pc, #20]	; (161f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   161dc:	9b01      	ldr	r3, [sp, #4]
   161de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161e2:	2b00      	cmp	r3, #0
   161e4:	d100      	bne.n	161e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   161e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   161e8:	bf00      	nop
   161ea:	b003      	add	sp, #12
   161ec:	f85d fb04 	ldr.w	pc, [sp], #4
   161f0:	1fff9850 	.word	0x1fff9850
   161f4:	1fff984c 	.word	0x1fff984c

000161f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   161f8:	b500      	push	{lr}
   161fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161fc:	f7ea fd2e 	bl	c5c <Sys_GetCoreID>
   16200:	4603      	mov	r3, r0
   16202:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId])
   16204:	4a10      	ldr	r2, [pc, #64]	; (16248 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   16206:	9b01      	ldr	r3, [sp, #4]
   16208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1620c:	2b00      	cmp	r3, #0
   1620e:	d10d      	bne.n	1622c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16210:	f7ea fbb0 	bl	974 <Spi_schm_read_msr>
   16214:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16216:	9b00      	ldr	r3, [sp, #0]
   16218:	f003 0301 	and.w	r3, r3, #1
   1621c:	2b00      	cmp	r3, #0
   1621e:	d100      	bne.n	16222 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16220:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   16222:	490a      	ldr	r1, [pc, #40]	; (1624c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x54>)
   16224:	9b01      	ldr	r3, [sp, #4]
   16226:	9a00      	ldr	r2, [sp, #0]
   16228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]++;
   1622c:	4a06      	ldr	r2, [pc, #24]	; (16248 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   1622e:	9b01      	ldr	r3, [sp, #4]
   16230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16234:	1c5a      	adds	r2, r3, #1
   16236:	4904      	ldr	r1, [pc, #16]	; (16248 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   16238:	9b01      	ldr	r3, [sp, #4]
   1623a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1623e:	bf00      	nop
   16240:	b003      	add	sp, #12
   16242:	f85d fb04 	ldr.w	pc, [sp], #4
   16246:	bf00      	nop
   16248:	1fff9858 	.word	0x1fff9858
   1624c:	1fff9854 	.word	0x1fff9854

00016250 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   16250:	b500      	push	{lr}
   16252:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16254:	f7ea fd02 	bl	c5c <Sys_GetCoreID>
   16258:	4603      	mov	r3, r0
   1625a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]--;
   1625c:	4a0d      	ldr	r2, [pc, #52]	; (16294 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   1625e:	9b01      	ldr	r3, [sp, #4]
   16260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16264:	1e5a      	subs	r2, r3, #1
   16266:	490b      	ldr	r1, [pc, #44]	; (16294 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   16268:	9b01      	ldr	r3, [sp, #4]
   1626a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   1626e:	4a0a      	ldr	r2, [pc, #40]	; (16298 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x48>)
   16270:	9b01      	ldr	r3, [sp, #4]
   16272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16276:	f003 0301 	and.w	r3, r3, #1
   1627a:	2b00      	cmp	r3, #0
   1627c:	d106      	bne.n	1628c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
   1627e:	4a05      	ldr	r2, [pc, #20]	; (16294 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   16280:	9b01      	ldr	r3, [sp, #4]
   16282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16286:	2b00      	cmp	r3, #0
   16288:	d100      	bne.n	1628c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1628a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1628c:	bf00      	nop
   1628e:	b003      	add	sp, #12
   16290:	f85d fb04 	ldr.w	pc, [sp], #4
   16294:	1fff9858 	.word	0x1fff9858
   16298:	1fff9854 	.word	0x1fff9854

0001629c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   1629c:	b500      	push	{lr}
   1629e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162a0:	f7ea fcdc 	bl	c5c <Sys_GetCoreID>
   162a4:	4603      	mov	r3, r0
   162a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId])
   162a8:	4a10      	ldr	r2, [pc, #64]	; (162ec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   162aa:	9b01      	ldr	r3, [sp, #4]
   162ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162b0:	2b00      	cmp	r3, #0
   162b2:	d10d      	bne.n	162d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   162b4:	f7ea fb5e 	bl	974 <Spi_schm_read_msr>
   162b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   162ba:	9b00      	ldr	r3, [sp, #0]
   162bc:	f003 0301 	and.w	r3, r3, #1
   162c0:	2b00      	cmp	r3, #0
   162c2:	d100      	bne.n	162c6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   162c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   162c6:	490a      	ldr	r1, [pc, #40]	; (162f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x54>)
   162c8:	9b01      	ldr	r3, [sp, #4]
   162ca:	9a00      	ldr	r2, [sp, #0]
   162cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]++;
   162d0:	4a06      	ldr	r2, [pc, #24]	; (162ec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   162d2:	9b01      	ldr	r3, [sp, #4]
   162d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162d8:	1c5a      	adds	r2, r3, #1
   162da:	4904      	ldr	r1, [pc, #16]	; (162ec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   162dc:	9b01      	ldr	r3, [sp, #4]
   162de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   162e2:	bf00      	nop
   162e4:	b003      	add	sp, #12
   162e6:	f85d fb04 	ldr.w	pc, [sp], #4
   162ea:	bf00      	nop
   162ec:	1fff9860 	.word	0x1fff9860
   162f0:	1fff985c 	.word	0x1fff985c

000162f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   162f4:	b500      	push	{lr}
   162f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162f8:	f7ea fcb0 	bl	c5c <Sys_GetCoreID>
   162fc:	4603      	mov	r3, r0
   162fe:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]--;
   16300:	4a0d      	ldr	r2, [pc, #52]	; (16338 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   16302:	9b01      	ldr	r3, [sp, #4]
   16304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16308:	1e5a      	subs	r2, r3, #1
   1630a:	490b      	ldr	r1, [pc, #44]	; (16338 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   1630c:	9b01      	ldr	r3, [sp, #4]
   1630e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   16312:	4a0a      	ldr	r2, [pc, #40]	; (1633c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x48>)
   16314:	9b01      	ldr	r3, [sp, #4]
   16316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1631a:	f003 0301 	and.w	r3, r3, #1
   1631e:	2b00      	cmp	r3, #0
   16320:	d106      	bne.n	16330 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
   16322:	4a05      	ldr	r2, [pc, #20]	; (16338 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   16324:	9b01      	ldr	r3, [sp, #4]
   16326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1632a:	2b00      	cmp	r3, #0
   1632c:	d100      	bne.n	16330 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1632e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16330:	bf00      	nop
   16332:	b003      	add	sp, #12
   16334:	f85d fb04 	ldr.w	pc, [sp], #4
   16338:	1fff9860 	.word	0x1fff9860
   1633c:	1fff985c 	.word	0x1fff985c

00016340 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   16340:	b500      	push	{lr}
   16342:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16344:	f7ea fc8a 	bl	c5c <Sys_GetCoreID>
   16348:	4603      	mov	r3, r0
   1634a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId])
   1634c:	4a10      	ldr	r2, [pc, #64]	; (16390 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   1634e:	9b01      	ldr	r3, [sp, #4]
   16350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16354:	2b00      	cmp	r3, #0
   16356:	d10d      	bne.n	16374 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16358:	f7ea fb0c 	bl	974 <Spi_schm_read_msr>
   1635c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1635e:	9b00      	ldr	r3, [sp, #0]
   16360:	f003 0301 	and.w	r3, r3, #1
   16364:	2b00      	cmp	r3, #0
   16366:	d100      	bne.n	1636a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16368:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1636a:	490a      	ldr	r1, [pc, #40]	; (16394 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x54>)
   1636c:	9b01      	ldr	r3, [sp, #4]
   1636e:	9a00      	ldr	r2, [sp, #0]
   16370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]++;
   16374:	4a06      	ldr	r2, [pc, #24]	; (16390 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   16376:	9b01      	ldr	r3, [sp, #4]
   16378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1637c:	1c5a      	adds	r2, r3, #1
   1637e:	4904      	ldr	r1, [pc, #16]	; (16390 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   16380:	9b01      	ldr	r3, [sp, #4]
   16382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16386:	bf00      	nop
   16388:	b003      	add	sp, #12
   1638a:	f85d fb04 	ldr.w	pc, [sp], #4
   1638e:	bf00      	nop
   16390:	1fff9868 	.word	0x1fff9868
   16394:	1fff9864 	.word	0x1fff9864

00016398 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   16398:	b500      	push	{lr}
   1639a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1639c:	f7ea fc5e 	bl	c5c <Sys_GetCoreID>
   163a0:	4603      	mov	r3, r0
   163a2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]--;
   163a4:	4a0d      	ldr	r2, [pc, #52]	; (163dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   163a6:	9b01      	ldr	r3, [sp, #4]
   163a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163ac:	1e5a      	subs	r2, r3, #1
   163ae:	490b      	ldr	r1, [pc, #44]	; (163dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   163b0:	9b01      	ldr	r3, [sp, #4]
   163b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   163b6:	4a0a      	ldr	r2, [pc, #40]	; (163e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x48>)
   163b8:	9b01      	ldr	r3, [sp, #4]
   163ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163be:	f003 0301 	and.w	r3, r3, #1
   163c2:	2b00      	cmp	r3, #0
   163c4:	d106      	bne.n	163d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
   163c6:	4a05      	ldr	r2, [pc, #20]	; (163dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   163c8:	9b01      	ldr	r3, [sp, #4]
   163ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163ce:	2b00      	cmp	r3, #0
   163d0:	d100      	bne.n	163d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   163d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   163d4:	bf00      	nop
   163d6:	b003      	add	sp, #12
   163d8:	f85d fb04 	ldr.w	pc, [sp], #4
   163dc:	1fff9868 	.word	0x1fff9868
   163e0:	1fff9864 	.word	0x1fff9864

000163e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   163e4:	b500      	push	{lr}
   163e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   163e8:	f7ea fc38 	bl	c5c <Sys_GetCoreID>
   163ec:	4603      	mov	r3, r0
   163ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId])
   163f0:	4a10      	ldr	r2, [pc, #64]	; (16434 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   163f2:	9b01      	ldr	r3, [sp, #4]
   163f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163f8:	2b00      	cmp	r3, #0
   163fa:	d10d      	bne.n	16418 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   163fc:	f7ea faba 	bl	974 <Spi_schm_read_msr>
   16400:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16402:	9b00      	ldr	r3, [sp, #0]
   16404:	f003 0301 	and.w	r3, r3, #1
   16408:	2b00      	cmp	r3, #0
   1640a:	d100      	bne.n	1640e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1640c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1640e:	490a      	ldr	r1, [pc, #40]	; (16438 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x54>)
   16410:	9b01      	ldr	r3, [sp, #4]
   16412:	9a00      	ldr	r2, [sp, #0]
   16414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]++;
   16418:	4a06      	ldr	r2, [pc, #24]	; (16434 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   1641a:	9b01      	ldr	r3, [sp, #4]
   1641c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16420:	1c5a      	adds	r2, r3, #1
   16422:	4904      	ldr	r1, [pc, #16]	; (16434 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   16424:	9b01      	ldr	r3, [sp, #4]
   16426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1642a:	bf00      	nop
   1642c:	b003      	add	sp, #12
   1642e:	f85d fb04 	ldr.w	pc, [sp], #4
   16432:	bf00      	nop
   16434:	1fff9870 	.word	0x1fff9870
   16438:	1fff986c 	.word	0x1fff986c

0001643c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   1643c:	b500      	push	{lr}
   1643e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16440:	f7ea fc0c 	bl	c5c <Sys_GetCoreID>
   16444:	4603      	mov	r3, r0
   16446:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]--;
   16448:	4a0d      	ldr	r2, [pc, #52]	; (16480 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   1644a:	9b01      	ldr	r3, [sp, #4]
   1644c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16450:	1e5a      	subs	r2, r3, #1
   16452:	490b      	ldr	r1, [pc, #44]	; (16480 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   16454:	9b01      	ldr	r3, [sp, #4]
   16456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1645a:	4a0a      	ldr	r2, [pc, #40]	; (16484 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x48>)
   1645c:	9b01      	ldr	r3, [sp, #4]
   1645e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16462:	f003 0301 	and.w	r3, r3, #1
   16466:	2b00      	cmp	r3, #0
   16468:	d106      	bne.n	16478 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
   1646a:	4a05      	ldr	r2, [pc, #20]	; (16480 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   1646c:	9b01      	ldr	r3, [sp, #4]
   1646e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16472:	2b00      	cmp	r3, #0
   16474:	d100      	bne.n	16478 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16476:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16478:	bf00      	nop
   1647a:	b003      	add	sp, #12
   1647c:	f85d fb04 	ldr.w	pc, [sp], #4
   16480:	1fff9870 	.word	0x1fff9870
   16484:	1fff986c 	.word	0x1fff986c

00016488 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   16488:	b500      	push	{lr}
   1648a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1648c:	f7ea fbe6 	bl	c5c <Sys_GetCoreID>
   16490:	4603      	mov	r3, r0
   16492:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId])
   16494:	4a10      	ldr	r2, [pc, #64]	; (164d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   16496:	9b01      	ldr	r3, [sp, #4]
   16498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1649c:	2b00      	cmp	r3, #0
   1649e:	d10d      	bne.n	164bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   164a0:	f7ea fa68 	bl	974 <Spi_schm_read_msr>
   164a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   164a6:	9b00      	ldr	r3, [sp, #0]
   164a8:	f003 0301 	and.w	r3, r3, #1
   164ac:	2b00      	cmp	r3, #0
   164ae:	d100      	bne.n	164b2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   164b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   164b2:	490a      	ldr	r1, [pc, #40]	; (164dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x54>)
   164b4:	9b01      	ldr	r3, [sp, #4]
   164b6:	9a00      	ldr	r2, [sp, #0]
   164b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]++;
   164bc:	4a06      	ldr	r2, [pc, #24]	; (164d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   164be:	9b01      	ldr	r3, [sp, #4]
   164c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164c4:	1c5a      	adds	r2, r3, #1
   164c6:	4904      	ldr	r1, [pc, #16]	; (164d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   164c8:	9b01      	ldr	r3, [sp, #4]
   164ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   164ce:	bf00      	nop
   164d0:	b003      	add	sp, #12
   164d2:	f85d fb04 	ldr.w	pc, [sp], #4
   164d6:	bf00      	nop
   164d8:	1fff9878 	.word	0x1fff9878
   164dc:	1fff9874 	.word	0x1fff9874

000164e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   164e0:	b500      	push	{lr}
   164e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   164e4:	f7ea fbba 	bl	c5c <Sys_GetCoreID>
   164e8:	4603      	mov	r3, r0
   164ea:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]--;
   164ec:	4a0d      	ldr	r2, [pc, #52]	; (16524 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   164ee:	9b01      	ldr	r3, [sp, #4]
   164f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164f4:	1e5a      	subs	r2, r3, #1
   164f6:	490b      	ldr	r1, [pc, #44]	; (16524 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   164f8:	9b01      	ldr	r3, [sp, #4]
   164fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   164fe:	4a0a      	ldr	r2, [pc, #40]	; (16528 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x48>)
   16500:	9b01      	ldr	r3, [sp, #4]
   16502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16506:	f003 0301 	and.w	r3, r3, #1
   1650a:	2b00      	cmp	r3, #0
   1650c:	d106      	bne.n	1651c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
   1650e:	4a05      	ldr	r2, [pc, #20]	; (16524 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   16510:	9b01      	ldr	r3, [sp, #4]
   16512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16516:	2b00      	cmp	r3, #0
   16518:	d100      	bne.n	1651c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1651a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1651c:	bf00      	nop
   1651e:	b003      	add	sp, #12
   16520:	f85d fb04 	ldr.w	pc, [sp], #4
   16524:	1fff9878 	.word	0x1fff9878
   16528:	1fff9874 	.word	0x1fff9874

0001652c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   1652c:	b500      	push	{lr}
   1652e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16530:	f7ea fb94 	bl	c5c <Sys_GetCoreID>
   16534:	4603      	mov	r3, r0
   16536:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId])
   16538:	4a10      	ldr	r2, [pc, #64]	; (1657c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   1653a:	9b01      	ldr	r3, [sp, #4]
   1653c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16540:	2b00      	cmp	r3, #0
   16542:	d10d      	bne.n	16560 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16544:	f7ea fa16 	bl	974 <Spi_schm_read_msr>
   16548:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1654a:	9b00      	ldr	r3, [sp, #0]
   1654c:	f003 0301 	and.w	r3, r3, #1
   16550:	2b00      	cmp	r3, #0
   16552:	d100      	bne.n	16556 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16554:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   16556:	490a      	ldr	r1, [pc, #40]	; (16580 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x54>)
   16558:	9b01      	ldr	r3, [sp, #4]
   1655a:	9a00      	ldr	r2, [sp, #0]
   1655c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]++;
   16560:	4a06      	ldr	r2, [pc, #24]	; (1657c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   16562:	9b01      	ldr	r3, [sp, #4]
   16564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16568:	1c5a      	adds	r2, r3, #1
   1656a:	4904      	ldr	r1, [pc, #16]	; (1657c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   1656c:	9b01      	ldr	r3, [sp, #4]
   1656e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16572:	bf00      	nop
   16574:	b003      	add	sp, #12
   16576:	f85d fb04 	ldr.w	pc, [sp], #4
   1657a:	bf00      	nop
   1657c:	1fff9880 	.word	0x1fff9880
   16580:	1fff987c 	.word	0x1fff987c

00016584 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   16584:	b500      	push	{lr}
   16586:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16588:	f7ea fb68 	bl	c5c <Sys_GetCoreID>
   1658c:	4603      	mov	r3, r0
   1658e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]--;
   16590:	4a0d      	ldr	r2, [pc, #52]	; (165c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   16592:	9b01      	ldr	r3, [sp, #4]
   16594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16598:	1e5a      	subs	r2, r3, #1
   1659a:	490b      	ldr	r1, [pc, #44]	; (165c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   1659c:	9b01      	ldr	r3, [sp, #4]
   1659e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   165a2:	4a0a      	ldr	r2, [pc, #40]	; (165cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x48>)
   165a4:	9b01      	ldr	r3, [sp, #4]
   165a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165aa:	f003 0301 	and.w	r3, r3, #1
   165ae:	2b00      	cmp	r3, #0
   165b0:	d106      	bne.n	165c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
   165b2:	4a05      	ldr	r2, [pc, #20]	; (165c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   165b4:	9b01      	ldr	r3, [sp, #4]
   165b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165ba:	2b00      	cmp	r3, #0
   165bc:	d100      	bne.n	165c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   165be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   165c0:	bf00      	nop
   165c2:	b003      	add	sp, #12
   165c4:	f85d fb04 	ldr.w	pc, [sp], #4
   165c8:	1fff9880 	.word	0x1fff9880
   165cc:	1fff987c 	.word	0x1fff987c

000165d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   165d0:	b500      	push	{lr}
   165d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   165d4:	f7ea fb42 	bl	c5c <Sys_GetCoreID>
   165d8:	4603      	mov	r3, r0
   165da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId])
   165dc:	4a10      	ldr	r2, [pc, #64]	; (16620 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   165de:	9b01      	ldr	r3, [sp, #4]
   165e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165e4:	2b00      	cmp	r3, #0
   165e6:	d10d      	bne.n	16604 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   165e8:	f7ea f9c4 	bl	974 <Spi_schm_read_msr>
   165ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   165ee:	9b00      	ldr	r3, [sp, #0]
   165f0:	f003 0301 	and.w	r3, r3, #1
   165f4:	2b00      	cmp	r3, #0
   165f6:	d100      	bne.n	165fa <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   165f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   165fa:	490a      	ldr	r1, [pc, #40]	; (16624 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x54>)
   165fc:	9b01      	ldr	r3, [sp, #4]
   165fe:	9a00      	ldr	r2, [sp, #0]
   16600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]++;
   16604:	4a06      	ldr	r2, [pc, #24]	; (16620 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   16606:	9b01      	ldr	r3, [sp, #4]
   16608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1660c:	1c5a      	adds	r2, r3, #1
   1660e:	4904      	ldr	r1, [pc, #16]	; (16620 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   16610:	9b01      	ldr	r3, [sp, #4]
   16612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16616:	bf00      	nop
   16618:	b003      	add	sp, #12
   1661a:	f85d fb04 	ldr.w	pc, [sp], #4
   1661e:	bf00      	nop
   16620:	1fff9888 	.word	0x1fff9888
   16624:	1fff9884 	.word	0x1fff9884

00016628 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   16628:	b500      	push	{lr}
   1662a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1662c:	f7ea fb16 	bl	c5c <Sys_GetCoreID>
   16630:	4603      	mov	r3, r0
   16632:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]--;
   16634:	4a0d      	ldr	r2, [pc, #52]	; (1666c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   16636:	9b01      	ldr	r3, [sp, #4]
   16638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1663c:	1e5a      	subs	r2, r3, #1
   1663e:	490b      	ldr	r1, [pc, #44]	; (1666c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   16640:	9b01      	ldr	r3, [sp, #4]
   16642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   16646:	4a0a      	ldr	r2, [pc, #40]	; (16670 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x48>)
   16648:	9b01      	ldr	r3, [sp, #4]
   1664a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1664e:	f003 0301 	and.w	r3, r3, #1
   16652:	2b00      	cmp	r3, #0
   16654:	d106      	bne.n	16664 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
   16656:	4a05      	ldr	r2, [pc, #20]	; (1666c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   16658:	9b01      	ldr	r3, [sp, #4]
   1665a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1665e:	2b00      	cmp	r3, #0
   16660:	d100      	bne.n	16664 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16662:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16664:	bf00      	nop
   16666:	b003      	add	sp, #12
   16668:	f85d fb04 	ldr.w	pc, [sp], #4
   1666c:	1fff9888 	.word	0x1fff9888
   16670:	1fff9884 	.word	0x1fff9884

00016674 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   16674:	b500      	push	{lr}
   16676:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16678:	f7ea faf0 	bl	c5c <Sys_GetCoreID>
   1667c:	4603      	mov	r3, r0
   1667e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId])
   16680:	4a10      	ldr	r2, [pc, #64]	; (166c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   16682:	9b01      	ldr	r3, [sp, #4]
   16684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16688:	2b00      	cmp	r3, #0
   1668a:	d10d      	bne.n	166a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1668c:	f7ea f972 	bl	974 <Spi_schm_read_msr>
   16690:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16692:	9b00      	ldr	r3, [sp, #0]
   16694:	f003 0301 	and.w	r3, r3, #1
   16698:	2b00      	cmp	r3, #0
   1669a:	d100      	bne.n	1669e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1669c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1669e:	490a      	ldr	r1, [pc, #40]	; (166c8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x54>)
   166a0:	9b01      	ldr	r3, [sp, #4]
   166a2:	9a00      	ldr	r2, [sp, #0]
   166a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]++;
   166a8:	4a06      	ldr	r2, [pc, #24]	; (166c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   166aa:	9b01      	ldr	r3, [sp, #4]
   166ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166b0:	1c5a      	adds	r2, r3, #1
   166b2:	4904      	ldr	r1, [pc, #16]	; (166c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   166b4:	9b01      	ldr	r3, [sp, #4]
   166b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   166ba:	bf00      	nop
   166bc:	b003      	add	sp, #12
   166be:	f85d fb04 	ldr.w	pc, [sp], #4
   166c2:	bf00      	nop
   166c4:	1fff9890 	.word	0x1fff9890
   166c8:	1fff988c 	.word	0x1fff988c

000166cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   166cc:	b500      	push	{lr}
   166ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   166d0:	f7ea fac4 	bl	c5c <Sys_GetCoreID>
   166d4:	4603      	mov	r3, r0
   166d6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]--;
   166d8:	4a0d      	ldr	r2, [pc, #52]	; (16710 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   166da:	9b01      	ldr	r3, [sp, #4]
   166dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166e0:	1e5a      	subs	r2, r3, #1
   166e2:	490b      	ldr	r1, [pc, #44]	; (16710 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   166e4:	9b01      	ldr	r3, [sp, #4]
   166e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   166ea:	4a0a      	ldr	r2, [pc, #40]	; (16714 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x48>)
   166ec:	9b01      	ldr	r3, [sp, #4]
   166ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166f2:	f003 0301 	and.w	r3, r3, #1
   166f6:	2b00      	cmp	r3, #0
   166f8:	d106      	bne.n	16708 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
   166fa:	4a05      	ldr	r2, [pc, #20]	; (16710 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   166fc:	9b01      	ldr	r3, [sp, #4]
   166fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16702:	2b00      	cmp	r3, #0
   16704:	d100      	bne.n	16708 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16706:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16708:	bf00      	nop
   1670a:	b003      	add	sp, #12
   1670c:	f85d fb04 	ldr.w	pc, [sp], #4
   16710:	1fff9890 	.word	0x1fff9890
   16714:	1fff988c 	.word	0x1fff988c

00016718 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   16718:	b500      	push	{lr}
   1671a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1671c:	f7ea fa9e 	bl	c5c <Sys_GetCoreID>
   16720:	4603      	mov	r3, r0
   16722:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId])
   16724:	4a10      	ldr	r2, [pc, #64]	; (16768 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   16726:	9b01      	ldr	r3, [sp, #4]
   16728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1672c:	2b00      	cmp	r3, #0
   1672e:	d10d      	bne.n	1674c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16730:	f7ea f920 	bl	974 <Spi_schm_read_msr>
   16734:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16736:	9b00      	ldr	r3, [sp, #0]
   16738:	f003 0301 	and.w	r3, r3, #1
   1673c:	2b00      	cmp	r3, #0
   1673e:	d100      	bne.n	16742 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16740:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   16742:	490a      	ldr	r1, [pc, #40]	; (1676c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x54>)
   16744:	9b01      	ldr	r3, [sp, #4]
   16746:	9a00      	ldr	r2, [sp, #0]
   16748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]++;
   1674c:	4a06      	ldr	r2, [pc, #24]	; (16768 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   1674e:	9b01      	ldr	r3, [sp, #4]
   16750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16754:	1c5a      	adds	r2, r3, #1
   16756:	4904      	ldr	r1, [pc, #16]	; (16768 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   16758:	9b01      	ldr	r3, [sp, #4]
   1675a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1675e:	bf00      	nop
   16760:	b003      	add	sp, #12
   16762:	f85d fb04 	ldr.w	pc, [sp], #4
   16766:	bf00      	nop
   16768:	1fff9898 	.word	0x1fff9898
   1676c:	1fff9894 	.word	0x1fff9894

00016770 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   16770:	b500      	push	{lr}
   16772:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16774:	f7ea fa72 	bl	c5c <Sys_GetCoreID>
   16778:	4603      	mov	r3, r0
   1677a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]--;
   1677c:	4a0d      	ldr	r2, [pc, #52]	; (167b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   1677e:	9b01      	ldr	r3, [sp, #4]
   16780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16784:	1e5a      	subs	r2, r3, #1
   16786:	490b      	ldr	r1, [pc, #44]	; (167b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   16788:	9b01      	ldr	r3, [sp, #4]
   1678a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1678e:	4a0a      	ldr	r2, [pc, #40]	; (167b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x48>)
   16790:	9b01      	ldr	r3, [sp, #4]
   16792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16796:	f003 0301 	and.w	r3, r3, #1
   1679a:	2b00      	cmp	r3, #0
   1679c:	d106      	bne.n	167ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
   1679e:	4a05      	ldr	r2, [pc, #20]	; (167b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   167a0:	9b01      	ldr	r3, [sp, #4]
   167a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167a6:	2b00      	cmp	r3, #0
   167a8:	d100      	bne.n	167ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   167aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   167ac:	bf00      	nop
   167ae:	b003      	add	sp, #12
   167b0:	f85d fb04 	ldr.w	pc, [sp], #4
   167b4:	1fff9898 	.word	0x1fff9898
   167b8:	1fff9894 	.word	0x1fff9894

000167bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   167bc:	b500      	push	{lr}
   167be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167c0:	f7ea fa4c 	bl	c5c <Sys_GetCoreID>
   167c4:	4603      	mov	r3, r0
   167c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId])
   167c8:	4a10      	ldr	r2, [pc, #64]	; (1680c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   167ca:	9b01      	ldr	r3, [sp, #4]
   167cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167d0:	2b00      	cmp	r3, #0
   167d2:	d10d      	bne.n	167f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   167d4:	f7ea f8ce 	bl	974 <Spi_schm_read_msr>
   167d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   167da:	9b00      	ldr	r3, [sp, #0]
   167dc:	f003 0301 	and.w	r3, r3, #1
   167e0:	2b00      	cmp	r3, #0
   167e2:	d100      	bne.n	167e6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   167e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   167e6:	490a      	ldr	r1, [pc, #40]	; (16810 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x54>)
   167e8:	9b01      	ldr	r3, [sp, #4]
   167ea:	9a00      	ldr	r2, [sp, #0]
   167ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]++;
   167f0:	4a06      	ldr	r2, [pc, #24]	; (1680c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   167f2:	9b01      	ldr	r3, [sp, #4]
   167f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167f8:	1c5a      	adds	r2, r3, #1
   167fa:	4904      	ldr	r1, [pc, #16]	; (1680c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   167fc:	9b01      	ldr	r3, [sp, #4]
   167fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16802:	bf00      	nop
   16804:	b003      	add	sp, #12
   16806:	f85d fb04 	ldr.w	pc, [sp], #4
   1680a:	bf00      	nop
   1680c:	1fff98a0 	.word	0x1fff98a0
   16810:	1fff989c 	.word	0x1fff989c

00016814 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   16814:	b500      	push	{lr}
   16816:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16818:	f7ea fa20 	bl	c5c <Sys_GetCoreID>
   1681c:	4603      	mov	r3, r0
   1681e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]--;
   16820:	4a0d      	ldr	r2, [pc, #52]	; (16858 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   16822:	9b01      	ldr	r3, [sp, #4]
   16824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16828:	1e5a      	subs	r2, r3, #1
   1682a:	490b      	ldr	r1, [pc, #44]	; (16858 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   1682c:	9b01      	ldr	r3, [sp, #4]
   1682e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   16832:	4a0a      	ldr	r2, [pc, #40]	; (1685c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x48>)
   16834:	9b01      	ldr	r3, [sp, #4]
   16836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1683a:	f003 0301 	and.w	r3, r3, #1
   1683e:	2b00      	cmp	r3, #0
   16840:	d106      	bne.n	16850 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
   16842:	4a05      	ldr	r2, [pc, #20]	; (16858 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   16844:	9b01      	ldr	r3, [sp, #4]
   16846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1684a:	2b00      	cmp	r3, #0
   1684c:	d100      	bne.n	16850 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1684e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16850:	bf00      	nop
   16852:	b003      	add	sp, #12
   16854:	f85d fb04 	ldr.w	pc, [sp], #4
   16858:	1fff98a0 	.word	0x1fff98a0
   1685c:	1fff989c 	.word	0x1fff989c

00016860 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   16860:	b500      	push	{lr}
   16862:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16864:	f7ea f9fa 	bl	c5c <Sys_GetCoreID>
   16868:	4603      	mov	r3, r0
   1686a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId])
   1686c:	4a10      	ldr	r2, [pc, #64]	; (168b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   1686e:	9b01      	ldr	r3, [sp, #4]
   16870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16874:	2b00      	cmp	r3, #0
   16876:	d10d      	bne.n	16894 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16878:	f7ea f87c 	bl	974 <Spi_schm_read_msr>
   1687c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1687e:	9b00      	ldr	r3, [sp, #0]
   16880:	f003 0301 	and.w	r3, r3, #1
   16884:	2b00      	cmp	r3, #0
   16886:	d100      	bne.n	1688a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16888:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1688a:	490a      	ldr	r1, [pc, #40]	; (168b4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x54>)
   1688c:	9b01      	ldr	r3, [sp, #4]
   1688e:	9a00      	ldr	r2, [sp, #0]
   16890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]++;
   16894:	4a06      	ldr	r2, [pc, #24]	; (168b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   16896:	9b01      	ldr	r3, [sp, #4]
   16898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1689c:	1c5a      	adds	r2, r3, #1
   1689e:	4904      	ldr	r1, [pc, #16]	; (168b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   168a0:	9b01      	ldr	r3, [sp, #4]
   168a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   168a6:	bf00      	nop
   168a8:	b003      	add	sp, #12
   168aa:	f85d fb04 	ldr.w	pc, [sp], #4
   168ae:	bf00      	nop
   168b0:	1fff98a8 	.word	0x1fff98a8
   168b4:	1fff98a4 	.word	0x1fff98a4

000168b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   168b8:	b500      	push	{lr}
   168ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168bc:	f7ea f9ce 	bl	c5c <Sys_GetCoreID>
   168c0:	4603      	mov	r3, r0
   168c2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]--;
   168c4:	4a0d      	ldr	r2, [pc, #52]	; (168fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   168c6:	9b01      	ldr	r3, [sp, #4]
   168c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168cc:	1e5a      	subs	r2, r3, #1
   168ce:	490b      	ldr	r1, [pc, #44]	; (168fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   168d0:	9b01      	ldr	r3, [sp, #4]
   168d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   168d6:	4a0a      	ldr	r2, [pc, #40]	; (16900 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x48>)
   168d8:	9b01      	ldr	r3, [sp, #4]
   168da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168de:	f003 0301 	and.w	r3, r3, #1
   168e2:	2b00      	cmp	r3, #0
   168e4:	d106      	bne.n	168f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
   168e6:	4a05      	ldr	r2, [pc, #20]	; (168fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   168e8:	9b01      	ldr	r3, [sp, #4]
   168ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168ee:	2b00      	cmp	r3, #0
   168f0:	d100      	bne.n	168f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   168f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   168f4:	bf00      	nop
   168f6:	b003      	add	sp, #12
   168f8:	f85d fb04 	ldr.w	pc, [sp], #4
   168fc:	1fff98a8 	.word	0x1fff98a8
   16900:	1fff98a4 	.word	0x1fff98a4

00016904 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   16904:	b500      	push	{lr}
   16906:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16908:	f7ea f9a8 	bl	c5c <Sys_GetCoreID>
   1690c:	4603      	mov	r3, r0
   1690e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId])
   16910:	4a10      	ldr	r2, [pc, #64]	; (16954 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   16912:	9b01      	ldr	r3, [sp, #4]
   16914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16918:	2b00      	cmp	r3, #0
   1691a:	d10d      	bne.n	16938 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1691c:	f7ea f82a 	bl	974 <Spi_schm_read_msr>
   16920:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16922:	9b00      	ldr	r3, [sp, #0]
   16924:	f003 0301 	and.w	r3, r3, #1
   16928:	2b00      	cmp	r3, #0
   1692a:	d100      	bne.n	1692e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1692c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   1692e:	490a      	ldr	r1, [pc, #40]	; (16958 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x54>)
   16930:	9b01      	ldr	r3, [sp, #4]
   16932:	9a00      	ldr	r2, [sp, #0]
   16934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]++;
   16938:	4a06      	ldr	r2, [pc, #24]	; (16954 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   1693a:	9b01      	ldr	r3, [sp, #4]
   1693c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16940:	1c5a      	adds	r2, r3, #1
   16942:	4904      	ldr	r1, [pc, #16]	; (16954 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   16944:	9b01      	ldr	r3, [sp, #4]
   16946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1694a:	bf00      	nop
   1694c:	b003      	add	sp, #12
   1694e:	f85d fb04 	ldr.w	pc, [sp], #4
   16952:	bf00      	nop
   16954:	1fff98b0 	.word	0x1fff98b0
   16958:	1fff98ac 	.word	0x1fff98ac

0001695c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   1695c:	b500      	push	{lr}
   1695e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16960:	f7ea f97c 	bl	c5c <Sys_GetCoreID>
   16964:	4603      	mov	r3, r0
   16966:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]--;
   16968:	4a0d      	ldr	r2, [pc, #52]	; (169a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   1696a:	9b01      	ldr	r3, [sp, #4]
   1696c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16970:	1e5a      	subs	r2, r3, #1
   16972:	490b      	ldr	r1, [pc, #44]	; (169a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   16974:	9b01      	ldr	r3, [sp, #4]
   16976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1697a:	4a0a      	ldr	r2, [pc, #40]	; (169a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x48>)
   1697c:	9b01      	ldr	r3, [sp, #4]
   1697e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16982:	f003 0301 	and.w	r3, r3, #1
   16986:	2b00      	cmp	r3, #0
   16988:	d106      	bne.n	16998 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
   1698a:	4a05      	ldr	r2, [pc, #20]	; (169a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   1698c:	9b01      	ldr	r3, [sp, #4]
   1698e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16992:	2b00      	cmp	r3, #0
   16994:	d100      	bne.n	16998 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16996:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16998:	bf00      	nop
   1699a:	b003      	add	sp, #12
   1699c:	f85d fb04 	ldr.w	pc, [sp], #4
   169a0:	1fff98b0 	.word	0x1fff98b0
   169a4:	1fff98ac 	.word	0x1fff98ac

000169a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   169a8:	b500      	push	{lr}
   169aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   169ac:	f7ea f956 	bl	c5c <Sys_GetCoreID>
   169b0:	4603      	mov	r3, r0
   169b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId])
   169b4:	4a10      	ldr	r2, [pc, #64]	; (169f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   169b6:	9b01      	ldr	r3, [sp, #4]
   169b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169bc:	2b00      	cmp	r3, #0
   169be:	d10d      	bne.n	169dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   169c0:	f7e9 ffd8 	bl	974 <Spi_schm_read_msr>
   169c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   169c6:	9b00      	ldr	r3, [sp, #0]
   169c8:	f003 0301 	and.w	r3, r3, #1
   169cc:	2b00      	cmp	r3, #0
   169ce:	d100      	bne.n	169d2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   169d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   169d2:	490a      	ldr	r1, [pc, #40]	; (169fc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x54>)
   169d4:	9b01      	ldr	r3, [sp, #4]
   169d6:	9a00      	ldr	r2, [sp, #0]
   169d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]++;
   169dc:	4a06      	ldr	r2, [pc, #24]	; (169f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   169de:	9b01      	ldr	r3, [sp, #4]
   169e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169e4:	1c5a      	adds	r2, r3, #1
   169e6:	4904      	ldr	r1, [pc, #16]	; (169f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   169e8:	9b01      	ldr	r3, [sp, #4]
   169ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   169ee:	bf00      	nop
   169f0:	b003      	add	sp, #12
   169f2:	f85d fb04 	ldr.w	pc, [sp], #4
   169f6:	bf00      	nop
   169f8:	1fff98b8 	.word	0x1fff98b8
   169fc:	1fff98b4 	.word	0x1fff98b4

00016a00 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   16a00:	b500      	push	{lr}
   16a02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16a04:	f7ea f92a 	bl	c5c <Sys_GetCoreID>
   16a08:	4603      	mov	r3, r0
   16a0a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]--;
   16a0c:	4a0d      	ldr	r2, [pc, #52]	; (16a44 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   16a0e:	9b01      	ldr	r3, [sp, #4]
   16a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a14:	1e5a      	subs	r2, r3, #1
   16a16:	490b      	ldr	r1, [pc, #44]	; (16a44 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   16a18:	9b01      	ldr	r3, [sp, #4]
   16a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   16a1e:	4a0a      	ldr	r2, [pc, #40]	; (16a48 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x48>)
   16a20:	9b01      	ldr	r3, [sp, #4]
   16a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a26:	f003 0301 	and.w	r3, r3, #1
   16a2a:	2b00      	cmp	r3, #0
   16a2c:	d106      	bne.n	16a3c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
   16a2e:	4a05      	ldr	r2, [pc, #20]	; (16a44 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   16a30:	9b01      	ldr	r3, [sp, #4]
   16a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a36:	2b00      	cmp	r3, #0
   16a38:	d100      	bne.n	16a3c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16a3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16a3c:	bf00      	nop
   16a3e:	b003      	add	sp, #12
   16a40:	f85d fb04 	ldr.w	pc, [sp], #4
   16a44:	1fff98b8 	.word	0x1fff98b8
   16a48:	1fff98b4 	.word	0x1fff98b4

00016a4c <Det_Init>:
*
* @requirements   DET008
*
*/
void Det_Init(void)
{
   16a4c:	b508      	push	{r3, lr}
    SEGGER_RTT_Init();  //Initializing RTT library.
   16a4e:	f7ea faa3 	bl	f98 <SEGGER_RTT_Init>
}
   16a52:	bf00      	nop
   16a54:	bd08      	pop	{r3, pc}

00016a56 <Det_SearchApi>:
 * @param[in] ApiId Api id where error was detected.
 * @return StringPtr Ptr to string of api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchApi( uint8 ModuleIndex, uint8 ApiId ) {
   16a56:	b084      	sub	sp, #16
   16a58:	4603      	mov	r3, r0
   16a5a:	460a      	mov	r2, r1
   16a5c:	f88d 3007 	strb.w	r3, [sp, #7]
   16a60:	4613      	mov	r3, r2
   16a62:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   16a66:	2300      	movs	r3, #0
   16a68:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16a6c:	2300      	movs	r3, #0
   16a6e:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   16a70:	2300      	movs	r3, #0
   16a72:	f88d 300f 	strb.w	r3, [sp, #15]
   16a76:	e026      	b.n	16ac6 <Det_SearchApi+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiId == ApiId ) {
   16a78:	491b      	ldr	r1, [pc, #108]	; (16ae8 <Det_SearchApi+0x92>)
   16a7a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16a7e:	4613      	mov	r3, r2
   16a80:	005b      	lsls	r3, r3, #1
   16a82:	4413      	add	r3, r2
   16a84:	00db      	lsls	r3, r3, #3
   16a86:	440b      	add	r3, r1
   16a88:	68da      	ldr	r2, [r3, #12]
   16a8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16a8e:	00db      	lsls	r3, r3, #3
   16a90:	4413      	add	r3, r2
   16a92:	781b      	ldrb	r3, [r3, #0]
   16a94:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16a98:	429a      	cmp	r2, r3
   16a9a:	d10f      	bne.n	16abc <Det_SearchApi+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiName;
   16a9c:	4912      	ldr	r1, [pc, #72]	; (16ae8 <Det_SearchApi+0x92>)
   16a9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16aa2:	4613      	mov	r3, r2
   16aa4:	005b      	lsls	r3, r3, #1
   16aa6:	4413      	add	r3, r2
   16aa8:	00db      	lsls	r3, r3, #3
   16aaa:	440b      	add	r3, r1
   16aac:	68da      	ldr	r2, [r3, #12]
   16aae:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16ab2:	00db      	lsls	r3, r3, #3
   16ab4:	4413      	add	r3, r2
   16ab6:	685b      	ldr	r3, [r3, #4]
   16ab8:	9302      	str	r3, [sp, #8]
            break;
   16aba:	e011      	b.n	16ae0 <Det_SearchApi+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   16abc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16ac0:	3301      	adds	r3, #1
   16ac2:	f88d 300f 	strb.w	r3, [sp, #15]
   16ac6:	4908      	ldr	r1, [pc, #32]	; (16ae8 <Det_SearchApi+0x92>)
   16ac8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16acc:	4613      	mov	r3, r2
   16ace:	005b      	lsls	r3, r3, #1
   16ad0:	4413      	add	r3, r2
   16ad2:	00db      	lsls	r3, r3, #3
   16ad4:	440b      	add	r3, r1
   16ad6:	7a1b      	ldrb	r3, [r3, #8]
   16ad8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16adc:	429a      	cmp	r2, r3
   16ade:	d3cb      	bcc.n	16a78 <Det_SearchApi+0x22>
        }
    }

    return StringPtr;
   16ae0:	9b02      	ldr	r3, [sp, #8]
}
   16ae2:	4618      	mov	r0, r3
   16ae4:	b004      	add	sp, #16
   16ae6:	4770      	bx	lr
   16ae8:	000189a0 	.word	0x000189a0

00016aec <Det_SearchError>:
 * @param[in] ErrorId Error id reported.
 * @return StringPtr Ptr to string of error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchError( uint8 ModuleIndex, uint8 ErrorId ) {
   16aec:	b084      	sub	sp, #16
   16aee:	4603      	mov	r3, r0
   16af0:	460a      	mov	r2, r1
   16af2:	f88d 3007 	strb.w	r3, [sp, #7]
   16af6:	4613      	mov	r3, r2
   16af8:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   16afc:	2300      	movs	r3, #0
   16afe:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16b02:	2300      	movs	r3, #0
   16b04:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16b06:	2300      	movs	r3, #0
   16b08:	f88d 300f 	strb.w	r3, [sp, #15]
   16b0c:	e026      	b.n	16b5c <Det_SearchError+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorId == ErrorId ) {
   16b0e:	491c      	ldr	r1, [pc, #112]	; (16b80 <Det_SearchError+0x94>)
   16b10:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16b14:	4613      	mov	r3, r2
   16b16:	005b      	lsls	r3, r3, #1
   16b18:	4413      	add	r3, r2
   16b1a:	00db      	lsls	r3, r3, #3
   16b1c:	440b      	add	r3, r1
   16b1e:	695a      	ldr	r2, [r3, #20]
   16b20:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b24:	00db      	lsls	r3, r3, #3
   16b26:	4413      	add	r3, r2
   16b28:	781b      	ldrb	r3, [r3, #0]
   16b2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16b2e:	429a      	cmp	r2, r3
   16b30:	d10f      	bne.n	16b52 <Det_SearchError+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorMeaning;
   16b32:	4913      	ldr	r1, [pc, #76]	; (16b80 <Det_SearchError+0x94>)
   16b34:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16b38:	4613      	mov	r3, r2
   16b3a:	005b      	lsls	r3, r3, #1
   16b3c:	4413      	add	r3, r2
   16b3e:	00db      	lsls	r3, r3, #3
   16b40:	440b      	add	r3, r1
   16b42:	695a      	ldr	r2, [r3, #20]
   16b44:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b48:	00db      	lsls	r3, r3, #3
   16b4a:	4413      	add	r3, r2
   16b4c:	685b      	ldr	r3, [r3, #4]
   16b4e:	9302      	str	r3, [sp, #8]
            break;
   16b50:	e011      	b.n	16b76 <Det_SearchError+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16b52:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b56:	3301      	adds	r3, #1
   16b58:	f88d 300f 	strb.w	r3, [sp, #15]
   16b5c:	4908      	ldr	r1, [pc, #32]	; (16b80 <Det_SearchError+0x94>)
   16b5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16b62:	4613      	mov	r3, r2
   16b64:	005b      	lsls	r3, r3, #1
   16b66:	4413      	add	r3, r2
   16b68:	00db      	lsls	r3, r3, #3
   16b6a:	440b      	add	r3, r1
   16b6c:	7c1b      	ldrb	r3, [r3, #16]
   16b6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16b72:	429a      	cmp	r2, r3
   16b74:	d3cb      	bcc.n	16b0e <Det_SearchError+0x22>
        }
    }

    return StringPtr;
   16b76:	9b02      	ldr	r3, [sp, #8]
}
   16b78:	4618      	mov	r0, r3
   16b7a:	b004      	add	sp, #16
   16b7c:	4770      	bx	lr
   16b7e:	bf00      	nop
   16b80:	000189a0 	.word	0x000189a0

00016b84 <Det_GetModuleName>:
 * @param[in] ModuleId Module Id where error was detected.
 * @return StringPtr Pointer to string module name.
 * 
 * @note If the module Id isn´t registered it will return NULL;
 */
const char* Det_GetModuleName( uint16 ModuleId ) {
   16b84:	b084      	sub	sp, #16
   16b86:	4603      	mov	r3, r0
   16b88:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data 
    uint8 i = 0;
   16b8c:	2300      	movs	r3, #0
   16b8e:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16b92:	2300      	movs	r3, #0
   16b94:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16b96:	2300      	movs	r3, #0
   16b98:	f88d 300f 	strb.w	r3, [sp, #15]
   16b9c:	e01c      	b.n	16bd8 <Det_GetModuleName+0x54>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16b9e:	4912      	ldr	r1, [pc, #72]	; (16be8 <Det_GetModuleName+0x64>)
   16ba0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16ba4:	4613      	mov	r3, r2
   16ba6:	005b      	lsls	r3, r3, #1
   16ba8:	4413      	add	r3, r2
   16baa:	00db      	lsls	r3, r3, #3
   16bac:	440b      	add	r3, r1
   16bae:	881b      	ldrh	r3, [r3, #0]
   16bb0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16bb4:	429a      	cmp	r2, r3
   16bb6:	d10a      	bne.n	16bce <Det_GetModuleName+0x4a>
            StringPtr = ModuleStrings_Ptr[i].ModuleName;
   16bb8:	490b      	ldr	r1, [pc, #44]	; (16be8 <Det_GetModuleName+0x64>)
   16bba:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16bbe:	4613      	mov	r3, r2
   16bc0:	005b      	lsls	r3, r3, #1
   16bc2:	4413      	add	r3, r2
   16bc4:	00db      	lsls	r3, r3, #3
   16bc6:	440b      	add	r3, r1
   16bc8:	685b      	ldr	r3, [r3, #4]
   16bca:	9302      	str	r3, [sp, #8]
            break;
   16bcc:	e008      	b.n	16be0 <Det_GetModuleName+0x5c>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16bce:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bd2:	3301      	adds	r3, #1
   16bd4:	f88d 300f 	strb.w	r3, [sp, #15]
   16bd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bdc:	2b0a      	cmp	r3, #10
   16bde:	d9de      	bls.n	16b9e <Det_GetModuleName+0x1a>
        }
    }

    return StringPtr;
   16be0:	9b02      	ldr	r3, [sp, #8]
}
   16be2:	4618      	mov	r0, r3
   16be4:	b004      	add	sp, #16
   16be6:	4770      	bx	lr
   16be8:	000189a0 	.word	0x000189a0

00016bec <Det_GetApiName>:
 * @param[in] ApiId Api Id where error was detected 
 * @return StringPtr Pointer to string Api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetApiName( uint16 ModuleId, uint8 ApiId ) {
   16bec:	b500      	push	{lr}
   16bee:	b085      	sub	sp, #20
   16bf0:	4603      	mov	r3, r0
   16bf2:	460a      	mov	r2, r1
   16bf4:	f8ad 3006 	strh.w	r3, [sp, #6]
   16bf8:	4613      	mov	r3, r2
   16bfa:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16bfe:	2300      	movs	r3, #0
   16c00:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16c04:	2300      	movs	r3, #0
   16c06:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16c08:	2300      	movs	r3, #0
   16c0a:	f88d 300f 	strb.w	r3, [sp, #15]
   16c0e:	e01b      	b.n	16c48 <Det_GetApiName+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16c10:	4912      	ldr	r1, [pc, #72]	; (16c5c <Det_GetApiName+0x70>)
   16c12:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16c16:	4613      	mov	r3, r2
   16c18:	005b      	lsls	r3, r3, #1
   16c1a:	4413      	add	r3, r2
   16c1c:	00db      	lsls	r3, r3, #3
   16c1e:	440b      	add	r3, r1
   16c20:	881b      	ldrh	r3, [r3, #0]
   16c22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16c26:	429a      	cmp	r2, r3
   16c28:	d109      	bne.n	16c3e <Det_GetApiName+0x52>
            StringPtr = Det_SearchApi( i , ApiId ); //Searching Api.
   16c2a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16c2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c32:	4611      	mov	r1, r2
   16c34:	4618      	mov	r0, r3
   16c36:	f7ff ff0e 	bl	16a56 <Det_SearchApi>
   16c3a:	9002      	str	r0, [sp, #8]
            break;
   16c3c:	e008      	b.n	16c50 <Det_GetApiName+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16c3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c42:	3301      	adds	r3, #1
   16c44:	f88d 300f 	strb.w	r3, [sp, #15]
   16c48:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c4c:	2b0a      	cmp	r3, #10
   16c4e:	d9df      	bls.n	16c10 <Det_GetApiName+0x24>
        }
    }

    return StringPtr;
   16c50:	9b02      	ldr	r3, [sp, #8]
}
   16c52:	4618      	mov	r0, r3
   16c54:	b005      	add	sp, #20
   16c56:	f85d fb04 	ldr.w	pc, [sp], #4
   16c5a:	bf00      	nop
   16c5c:	000189a0 	.word	0x000189a0

00016c60 <Det_GetErrorMeaning>:
 * @param[in] ErrorId Error Id reported. 
 * @return StringPtr Pointer to string Error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetErrorMeaning( uint16 ModuleId, uint8 ErrorId ) {
   16c60:	b500      	push	{lr}
   16c62:	b085      	sub	sp, #20
   16c64:	4603      	mov	r3, r0
   16c66:	460a      	mov	r2, r1
   16c68:	f8ad 3006 	strh.w	r3, [sp, #6]
   16c6c:	4613      	mov	r3, r2
   16c6e:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16c72:	2300      	movs	r3, #0
   16c74:	f88d 300f 	strb.w	r3, [sp, #15]
    const char * StringPtr = NULL_PTR;
   16c78:	2300      	movs	r3, #0
   16c7a:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16c7c:	2300      	movs	r3, #0
   16c7e:	f88d 300f 	strb.w	r3, [sp, #15]
   16c82:	e01b      	b.n	16cbc <Det_GetErrorMeaning+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16c84:	4912      	ldr	r1, [pc, #72]	; (16cd0 <Det_GetErrorMeaning+0x70>)
   16c86:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16c8a:	4613      	mov	r3, r2
   16c8c:	005b      	lsls	r3, r3, #1
   16c8e:	4413      	add	r3, r2
   16c90:	00db      	lsls	r3, r3, #3
   16c92:	440b      	add	r3, r1
   16c94:	881b      	ldrh	r3, [r3, #0]
   16c96:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16c9a:	429a      	cmp	r2, r3
   16c9c:	d109      	bne.n	16cb2 <Det_GetErrorMeaning+0x52>
            StringPtr = Det_SearchError( i, ErrorId );
   16c9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16ca2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16ca6:	4611      	mov	r1, r2
   16ca8:	4618      	mov	r0, r3
   16caa:	f7ff ff1f 	bl	16aec <Det_SearchError>
   16cae:	9002      	str	r0, [sp, #8]
            break;
   16cb0:	e008      	b.n	16cc4 <Det_GetErrorMeaning+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16cb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16cb6:	3301      	adds	r3, #1
   16cb8:	f88d 300f 	strb.w	r3, [sp, #15]
   16cbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16cc0:	2b0a      	cmp	r3, #10
   16cc2:	d9df      	bls.n	16c84 <Det_GetErrorMeaning+0x24>
        }
    }

    return StringPtr;
   16cc4:	9b02      	ldr	r3, [sp, #8]
}
   16cc6:	4618      	mov	r0, r3
   16cc8:	b005      	add	sp, #20
   16cca:	f85d fb04 	ldr.w	pc, [sp], #4
   16cce:	bf00      	nop
   16cd0:	000189a0 	.word	0x000189a0

00016cd4 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   16cd4:	b510      	push	{r4, lr}
   16cd6:	b088      	sub	sp, #32
   16cd8:	4604      	mov	r4, r0
   16cda:	4608      	mov	r0, r1
   16cdc:	4611      	mov	r1, r2
   16cde:	461a      	mov	r2, r3
   16ce0:	4623      	mov	r3, r4
   16ce2:	f8ad 300e 	strh.w	r3, [sp, #14]
   16ce6:	4603      	mov	r3, r0
   16ce8:	f88d 300d 	strb.w	r3, [sp, #13]
   16cec:	460b      	mov	r3, r1
   16cee:	f88d 300c 	strb.w	r3, [sp, #12]
   16cf2:	4613      	mov	r3, r2
   16cf4:	f88d 300b 	strb.w	r3, [sp, #11]
    //local data.
    const char* Strings_error[3]; //Pointer to strings for the error message.

    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16cf8:	f7e9 ffb0 	bl	c5c <Sys_GetCoreID>
   16cfc:	4603      	mov	r3, r0
   16cfe:	9307      	str	r3, [sp, #28]

    Det_ModuleId[u32CoreId] = ModuleId;
   16d00:	4921      	ldr	r1, [pc, #132]	; (16d88 <Det_ReportError+0xb4>)
   16d02:	9b07      	ldr	r3, [sp, #28]
   16d04:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   16d08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   16d0c:	4a1f      	ldr	r2, [pc, #124]	; (16d8c <Det_ReportError+0xb8>)
   16d0e:	9b07      	ldr	r3, [sp, #28]
   16d10:	4413      	add	r3, r2
   16d12:	f89d 200d 	ldrb.w	r2, [sp, #13]
   16d16:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   16d18:	4a1d      	ldr	r2, [pc, #116]	; (16d90 <Det_ReportError+0xbc>)
   16d1a:	9b07      	ldr	r3, [sp, #28]
   16d1c:	4413      	add	r3, r2
   16d1e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16d22:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   16d24:	4a1b      	ldr	r2, [pc, #108]	; (16d94 <Det_ReportError+0xc0>)
   16d26:	9b07      	ldr	r3, [sp, #28]
   16d28:	4413      	add	r3, r2
   16d2a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16d2e:	701a      	strb	r2, [r3, #0]

    //Obtaining strings for error message.
    Strings_error[0] = Det_GetModuleName( ModuleId );
   16d30:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16d34:	4618      	mov	r0, r3
   16d36:	f7ff ff25 	bl	16b84 <Det_GetModuleName>
   16d3a:	4603      	mov	r3, r0
   16d3c:	9304      	str	r3, [sp, #16]
    Strings_error[1] = Det_GetApiName( ModuleId, ApiId );
   16d3e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16d42:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16d46:	4611      	mov	r1, r2
   16d48:	4618      	mov	r0, r3
   16d4a:	f7ff ff4f 	bl	16bec <Det_GetApiName>
   16d4e:	4603      	mov	r3, r0
   16d50:	9305      	str	r3, [sp, #20]
    Strings_error[2] = Det_GetErrorMeaning( ModuleId, ErrorId );
   16d52:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16d56:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16d5a:	4611      	mov	r1, r2
   16d5c:	4618      	mov	r0, r3
   16d5e:	f7ff ff7f 	bl	16c60 <Det_GetErrorMeaning>
   16d62:	4603      	mov	r3, r0
   16d64:	9306      	str	r3, [sp, #24]

    SEGGER_RTT_printf( 0, "Error: Error in %s in function %s with the instance %d, %s\n", 
   16d66:	9904      	ldr	r1, [sp, #16]
   16d68:	9805      	ldr	r0, [sp, #20]
   16d6a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   16d6e:	9a06      	ldr	r2, [sp, #24]
   16d70:	9201      	str	r2, [sp, #4]
   16d72:	9300      	str	r3, [sp, #0]
   16d74:	4603      	mov	r3, r0
   16d76:	460a      	mov	r2, r1
   16d78:	4907      	ldr	r1, [pc, #28]	; (16d98 <Det_ReportError+0xc4>)
   16d7a:	2000      	movs	r0, #0
   16d7c:	f7ea fc74 	bl	1668 <SEGGER_RTT_printf>
    Strings_error[0], Strings_error[1], InstanceId, Strings_error[2] );

    return E_OK;
   16d80:	2300      	movs	r3, #0
}
   16d82:	4618      	mov	r0, r3
   16d84:	b008      	add	sp, #32
   16d86:	bd10      	pop	{r4, pc}
   16d88:	1fff98e4 	.word	0x1fff98e4
   16d8c:	1fff98bc 	.word	0x1fff98bc
   16d90:	1fff98c0 	.word	0x1fff98c0
   16d94:	1fff98c4 	.word	0x1fff98c4
   16d98:	00017d88 	.word	0x00017d88

00016d9c <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   16d9c:	b510      	push	{r4, lr}
   16d9e:	b084      	sub	sp, #16
   16da0:	4604      	mov	r4, r0
   16da2:	4608      	mov	r0, r1
   16da4:	4611      	mov	r1, r2
   16da6:	461a      	mov	r2, r3
   16da8:	4623      	mov	r3, r4
   16daa:	f8ad 3006 	strh.w	r3, [sp, #6]
   16dae:	4603      	mov	r3, r0
   16db0:	f88d 3005 	strb.w	r3, [sp, #5]
   16db4:	460b      	mov	r3, r1
   16db6:	f88d 3004 	strb.w	r3, [sp, #4]
   16dba:	4613      	mov	r3, r2
   16dbc:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16dc0:	f7e9 ff4c 	bl	c5c <Sys_GetCoreID>
   16dc4:	4603      	mov	r3, r0
   16dc6:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   16dc8:	490d      	ldr	r1, [pc, #52]	; (16e00 <Det_ReportRuntimeError+0x64>)
   16dca:	9b03      	ldr	r3, [sp, #12]
   16dcc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16dd0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   16dd4:	4a0b      	ldr	r2, [pc, #44]	; (16e04 <Det_ReportRuntimeError+0x68>)
   16dd6:	9b03      	ldr	r3, [sp, #12]
   16dd8:	4413      	add	r3, r2
   16dda:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16dde:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   16de0:	4a09      	ldr	r2, [pc, #36]	; (16e08 <Det_ReportRuntimeError+0x6c>)
   16de2:	9b03      	ldr	r3, [sp, #12]
   16de4:	4413      	add	r3, r2
   16de6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16dea:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   16dec:	4a07      	ldr	r2, [pc, #28]	; (16e0c <Det_ReportRuntimeError+0x70>)
   16dee:	9b03      	ldr	r3, [sp, #12]
   16df0:	4413      	add	r3, r2
   16df2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16df6:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16df8:	2300      	movs	r3, #0
}
   16dfa:	4618      	mov	r0, r3
   16dfc:	b004      	add	sp, #16
   16dfe:	bd10      	pop	{r4, pc}
   16e00:	1fff98e8 	.word	0x1fff98e8
   16e04:	1fff98c8 	.word	0x1fff98c8
   16e08:	1fff98cc 	.word	0x1fff98cc
   16e0c:	1fff98d0 	.word	0x1fff98d0

00016e10 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   16e10:	b510      	push	{r4, lr}
   16e12:	b084      	sub	sp, #16
   16e14:	4604      	mov	r4, r0
   16e16:	4608      	mov	r0, r1
   16e18:	4611      	mov	r1, r2
   16e1a:	461a      	mov	r2, r3
   16e1c:	4623      	mov	r3, r4
   16e1e:	f8ad 3006 	strh.w	r3, [sp, #6]
   16e22:	4603      	mov	r3, r0
   16e24:	f88d 3005 	strb.w	r3, [sp, #5]
   16e28:	460b      	mov	r3, r1
   16e2a:	f88d 3004 	strb.w	r3, [sp, #4]
   16e2e:	4613      	mov	r3, r2
   16e30:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e34:	f7e9 ff12 	bl	c5c <Sys_GetCoreID>
   16e38:	4603      	mov	r3, r0
   16e3a:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   16e3c:	490d      	ldr	r1, [pc, #52]	; (16e74 <Det_ReportTransientFault+0x64>)
   16e3e:	9b03      	ldr	r3, [sp, #12]
   16e40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16e44:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   16e48:	4a0b      	ldr	r2, [pc, #44]	; (16e78 <Det_ReportTransientFault+0x68>)
   16e4a:	9b03      	ldr	r3, [sp, #12]
   16e4c:	4413      	add	r3, r2
   16e4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16e52:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   16e54:	4a09      	ldr	r2, [pc, #36]	; (16e7c <Det_ReportTransientFault+0x6c>)
   16e56:	9b03      	ldr	r3, [sp, #12]
   16e58:	4413      	add	r3, r2
   16e5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16e5e:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   16e60:	4a07      	ldr	r2, [pc, #28]	; (16e80 <Det_ReportTransientFault+0x70>)
   16e62:	9b03      	ldr	r3, [sp, #12]
   16e64:	4413      	add	r3, r2
   16e66:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16e6a:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16e6c:	2300      	movs	r3, #0
}
   16e6e:	4618      	mov	r0, r3
   16e70:	b004      	add	sp, #16
   16e72:	bd10      	pop	{r4, pc}
   16e74:	1fff98e0 	.word	0x1fff98e0
   16e78:	1fff98d4 	.word	0x1fff98d4
   16e7c:	1fff98d8 	.word	0x1fff98d8
   16e80:	1fff98dc 	.word	0x1fff98dc

00016e84 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   16e84:	bf00      	nop
   16e86:	4770      	bx	lr

00016e88 <CanIf_Init>:
 * @brief This function initialices the CanIf Driver.
 * 
 * @param ConfigPtr Pointer to driver control structure. 
 */
void CanIf_Init(const CanIf_ConfigType * ConfigPtr)
{
   16e88:	b082      	sub	sp, #8
   16e8a:	9001      	str	r0, [sp, #4]
    #if (STD_ON == CANIF_PRECOMPILE_SUPPORT)
    CanIf_ConfigPtr = &CanIf_Config;
    (void)ConfigPtr;
    #else
    CanIf_ConfigPtr = ConfigPtr;
   16e8c:	4a02      	ldr	r2, [pc, #8]	; (16e98 <CanIf_Init+0x10>)
   16e8e:	9b01      	ldr	r3, [sp, #4]
   16e90:	6013      	str	r3, [r2, #0]
    #endif
}
   16e92:	bf00      	nop
   16e94:	b002      	add	sp, #8
   16e96:	4770      	bx	lr
   16e98:	1fff98ec 	.word	0x1fff98ec

00016e9c <CanIf_Transmit>:
Std_ReturnType CanIf_Transmit
(
    PduIdType CanTxPduId,
    const PduInfoType * PduInfoPtr
)
{
   16e9c:	b500      	push	{lr}
   16e9e:	b08b      	sub	sp, #44	; 0x2c
   16ea0:	4603      	mov	r3, r0
   16ea2:	9100      	str	r1, [sp, #0]
   16ea4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType RetVal = E_NOT_OK;
   16ea8:	2301      	movs	r3, #1
   16eaa:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Can_HwHandleType CanHth = 0U;
   16eae:	2300      	movs	r3, #0
   16eb0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Can_PduType PduInfo;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   16eb4:	2300      	movs	r3, #0
   16eb6:	9308      	str	r3, [sp, #32]
    uint8 CanIfControllerId = 0U;
   16eb8:	2300      	movs	r3, #0
   16eba:	f88d 301f 	strb.w	r3, [sp, #31]
    const CanIf_CtrlPCConfigType * CanIfController = NULL_PTR;
   16ebe:	2300      	movs	r3, #0
   16ec0:	9306      	str	r3, [sp, #24]

    if (NULL_PTR != CanIf_ConfigPtr)
   16ec2:	4b31      	ldr	r3, [pc, #196]	; (16f88 <CanIf_Transmit+0xec>)
   16ec4:	681b      	ldr	r3, [r3, #0]
   16ec6:	2b00      	cmp	r3, #0
   16ec8:	d057      	beq.n	16f7a <CanIf_Transmit+0xde>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   16eca:	4b2f      	ldr	r3, [pc, #188]	; (16f88 <CanIf_Transmit+0xec>)
   16ecc:	681b      	ldr	r3, [r3, #0]
   16ece:	785b      	ldrb	r3, [r3, #1]
   16ed0:	b29b      	uxth	r3, r3
   16ed2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16ed6:	429a      	cmp	r2, r3
   16ed8:	d24f      	bcs.n	16f7a <CanIf_Transmit+0xde>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   16eda:	4b2b      	ldr	r3, [pc, #172]	; (16f88 <CanIf_Transmit+0xec>)
   16edc:	681b      	ldr	r3, [r3, #0]
   16ede:	68d9      	ldr	r1, [r3, #12]
   16ee0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16ee4:	4613      	mov	r3, r2
   16ee6:	009b      	lsls	r3, r3, #2
   16ee8:	4413      	add	r3, r2
   16eea:	009b      	lsls	r3, r3, #2
   16eec:	440b      	add	r3, r1
   16eee:	9308      	str	r3, [sp, #32]
            CanIfControllerId = TxPduInfo->CanIfCtrlId;
   16ef0:	9b08      	ldr	r3, [sp, #32]
   16ef2:	7b9b      	ldrb	r3, [r3, #14]
   16ef4:	f88d 301f 	strb.w	r3, [sp, #31]
            CanIfController = &CanIf_PCConfig.CanIfCtrlConfigPtr[CanIfControllerId];
   16ef8:	4b24      	ldr	r3, [pc, #144]	; (16f8c <CanIf_Transmit+0xf0>)
   16efa:	685a      	ldr	r2, [r3, #4]
   16efc:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16f00:	00db      	lsls	r3, r3, #3
   16f02:	4413      	add	r3, r2
   16f04:	9306      	str	r3, [sp, #24]

            CanHth = TxPduInfo->CanHth;
   16f06:	9b08      	ldr	r3, [sp, #32]
   16f08:	899b      	ldrh	r3, [r3, #12]
   16f0a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

            PduInfo.id = TxPduInfo->CanId;
   16f0e:	9b08      	ldr	r3, [sp, #32]
   16f10:	685b      	ldr	r3, [r3, #4]
   16f12:	9303      	str	r3, [sp, #12]
            /* Convert Id by adding two most significant bits specify the frame type */
            switch (TxPduInfo->CanFrameType)
   16f14:	9b08      	ldr	r3, [sp, #32]
   16f16:	689b      	ldr	r3, [r3, #8]
   16f18:	2b03      	cmp	r3, #3
   16f1a:	d010      	beq.n	16f3e <CanIf_Transmit+0xa2>
   16f1c:	2b03      	cmp	r3, #3
   16f1e:	d813      	bhi.n	16f48 <CanIf_Transmit+0xac>
   16f20:	2b00      	cmp	r3, #0
   16f22:	d002      	beq.n	16f2a <CanIf_Transmit+0x8e>
   16f24:	2b01      	cmp	r3, #1
   16f26:	d005      	beq.n	16f34 <CanIf_Transmit+0x98>
                    PduInfo.id |= 0x40000000U;
                    break;
                }
                default:
                {
                    break;
   16f28:	e00e      	b.n	16f48 <CanIf_Transmit+0xac>
                    PduInfo.id |= 0x80000000U;
   16f2a:	9b03      	ldr	r3, [sp, #12]
   16f2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16f30:	9303      	str	r3, [sp, #12]
                    break;
   16f32:	e00a      	b.n	16f4a <CanIf_Transmit+0xae>
                    PduInfo.id |= 0xC0000000U;
   16f34:	9b03      	ldr	r3, [sp, #12]
   16f36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   16f3a:	9303      	str	r3, [sp, #12]
                    break;
   16f3c:	e005      	b.n	16f4a <CanIf_Transmit+0xae>
                    PduInfo.id |= 0x40000000U;
   16f3e:	9b03      	ldr	r3, [sp, #12]
   16f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16f44:	9303      	str	r3, [sp, #12]
                    break;
   16f46:	e000      	b.n	16f4a <CanIf_Transmit+0xae>
                    break;
   16f48:	bf00      	nop
                }
            }
            
            PduInfo.length = (uint8)(PduInfoPtr->SduLength);
   16f4a:	9b00      	ldr	r3, [sp, #0]
   16f4c:	689b      	ldr	r3, [r3, #8]
   16f4e:	b2db      	uxtb	r3, r3
   16f50:	f88d 3012 	strb.w	r3, [sp, #18]
            PduInfo.sdu = PduInfoPtr->SduDataPtr;
   16f54:	9b00      	ldr	r3, [sp, #0]
   16f56:	681b      	ldr	r3, [r3, #0]
   16f58:	9305      	str	r3, [sp, #20]
            PduInfo.swPduHandle = CanTxPduId;
   16f5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16f5e:	f8ad 3010 	strh.w	r3, [sp, #16]

            RetVal = CanIfController->CanDrvConfigPtr->CanApi->CanWrite(CanHth, &PduInfo); 
   16f62:	9b06      	ldr	r3, [sp, #24]
   16f64:	685b      	ldr	r3, [r3, #4]
   16f66:	685b      	ldr	r3, [r3, #4]
   16f68:	681b      	ldr	r3, [r3, #0]
   16f6a:	a903      	add	r1, sp, #12
   16f6c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   16f70:	4610      	mov	r0, r2
   16f72:	4798      	blx	r3
   16f74:	4603      	mov	r3, r0
   16f76:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
    }
    return RetVal;
   16f7a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
   16f7e:	4618      	mov	r0, r3
   16f80:	b00b      	add	sp, #44	; 0x2c
   16f82:	f85d fb04 	ldr.w	pc, [sp], #4
   16f86:	bf00      	nop
   16f88:	1fff98ec 	.word	0x1fff98ec
   16f8c:	00018ae0 	.word	0x00018ae0

00016f90 <CanIf_TxConfirmation>:

void CanIf_TxConfirmation
(
    PduIdType CanTxPduId
)
{
   16f90:	b500      	push	{lr}
   16f92:	b085      	sub	sp, #20
   16f94:	4603      	mov	r3, r0
   16f96:	f8ad 3006 	strh.w	r3, [sp, #6]
    PduIdType UserPduId;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   16f9a:	2300      	movs	r3, #0
   16f9c:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != CanIf_ConfigPtr)
   16f9e:	4b15      	ldr	r3, [pc, #84]	; (16ff4 <CanIf_TxConfirmation+0x64>)
   16fa0:	681b      	ldr	r3, [r3, #0]
   16fa2:	2b00      	cmp	r3, #0
   16fa4:	d021      	beq.n	16fea <CanIf_TxConfirmation+0x5a>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   16fa6:	4b13      	ldr	r3, [pc, #76]	; (16ff4 <CanIf_TxConfirmation+0x64>)
   16fa8:	681b      	ldr	r3, [r3, #0]
   16faa:	785b      	ldrb	r3, [r3, #1]
   16fac:	b29b      	uxth	r3, r3
   16fae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16fb2:	429a      	cmp	r2, r3
   16fb4:	d219      	bcs.n	16fea <CanIf_TxConfirmation+0x5a>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   16fb6:	4b0f      	ldr	r3, [pc, #60]	; (16ff4 <CanIf_TxConfirmation+0x64>)
   16fb8:	681b      	ldr	r3, [r3, #0]
   16fba:	68d9      	ldr	r1, [r3, #12]
   16fbc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16fc0:	4613      	mov	r3, r2
   16fc2:	009b      	lsls	r3, r3, #2
   16fc4:	4413      	add	r3, r2
   16fc6:	009b      	lsls	r3, r3, #2
   16fc8:	440b      	add	r3, r1
   16fca:	9303      	str	r3, [sp, #12]

            if (NULL_PTR != TxPduInfo->UserTxConfirmation)
   16fcc:	9b03      	ldr	r3, [sp, #12]
   16fce:	691b      	ldr	r3, [r3, #16]
   16fd0:	2b00      	cmp	r3, #0
   16fd2:	d00a      	beq.n	16fea <CanIf_TxConfirmation+0x5a>
            {
                UserPduId = TxPduInfo->PduId;
   16fd4:	9b03      	ldr	r3, [sp, #12]
   16fd6:	881b      	ldrh	r3, [r3, #0]
   16fd8:	f8ad 300a 	strh.w	r3, [sp, #10]
                TxPduInfo->UserTxConfirmation(UserPduId, E_OK);
   16fdc:	9b03      	ldr	r3, [sp, #12]
   16fde:	691b      	ldr	r3, [r3, #16]
   16fe0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   16fe4:	2100      	movs	r1, #0
   16fe6:	4610      	mov	r0, r2
   16fe8:	4798      	blx	r3
            }
        }
    }
}
   16fea:	bf00      	nop
   16fec:	b005      	add	sp, #20
   16fee:	f85d fb04 	ldr.w	pc, [sp], #4
   16ff2:	bf00      	nop
   16ff4:	1fff98ec 	.word	0x1fff98ec

00016ff8 <CanIf_RxIndication>:
void CanIf_RxIndication
(
    const Can_HwType * Mailbox,
    const PduInfoType * PduInfoPtr
)
{
   16ff8:	b500      	push	{lr}
   16ffa:	b089      	sub	sp, #36	; 0x24
   16ffc:	9001      	str	r0, [sp, #4]
   16ffe:	9100      	str	r1, [sp, #0]
    PduIdType UserPduId = 0U;
   17000:	2300      	movs	r3, #0
   17002:	f8ad 301e 	strh.w	r3, [sp, #30]
    PduInfoType PduInfo;
    const CanIf_RxPduType * RxPduInfo = NULL_PTR;
   17006:	2300      	movs	r3, #0
   17008:	9306      	str	r3, [sp, #24]
    uint8 CanDrvId = 0U;
   1700a:	2300      	movs	r3, #0
   1700c:	f88d 3017 	strb.w	r3, [sp, #23]

    if (NULL_PTR != CanIf_ConfigPtr)
   17010:	4b2c      	ldr	r3, [pc, #176]	; (170c4 <CanIf_RxIndication+0xcc>)
   17012:	681b      	ldr	r3, [r3, #0]
   17014:	2b00      	cmp	r3, #0
   17016:	d050      	beq.n	170ba <CanIf_RxIndication+0xc2>
    {
        if ((Mailbox->ControllerId) < (CanIf_PCConfig.NumOfCtrl))
   17018:	9b01      	ldr	r3, [sp, #4]
   1701a:	799a      	ldrb	r2, [r3, #6]
   1701c:	4b2a      	ldr	r3, [pc, #168]	; (170c8 <CanIf_RxIndication+0xd0>)
   1701e:	781b      	ldrb	r3, [r3, #0]
   17020:	429a      	cmp	r2, r3
   17022:	d24a      	bcs.n	170ba <CanIf_RxIndication+0xc2>
        {
            if ((Mailbox->Hoh) < (CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->NumCanHoh))
   17024:	9b01      	ldr	r3, [sp, #4]
   17026:	889a      	ldrh	r2, [r3, #4]
   17028:	4b27      	ldr	r3, [pc, #156]	; (170c8 <CanIf_RxIndication+0xd0>)
   1702a:	6859      	ldr	r1, [r3, #4]
   1702c:	9b01      	ldr	r3, [sp, #4]
   1702e:	799b      	ldrb	r3, [r3, #6]
   17030:	00db      	lsls	r3, r3, #3
   17032:	440b      	add	r3, r1
   17034:	685b      	ldr	r3, [r3, #4]
   17036:	885b      	ldrh	r3, [r3, #2]
   17038:	429a      	cmp	r2, r3
   1703a:	d23e      	bcs.n	170ba <CanIf_RxIndication+0xc2>
            {
                CanDrvId = CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->CanDrvId;
   1703c:	4b22      	ldr	r3, [pc, #136]	; (170c8 <CanIf_RxIndication+0xd0>)
   1703e:	685a      	ldr	r2, [r3, #4]
   17040:	9b01      	ldr	r3, [sp, #4]
   17042:	799b      	ldrb	r3, [r3, #6]
   17044:	00db      	lsls	r3, r3, #3
   17046:	4413      	add	r3, r2
   17048:	685b      	ldr	r3, [r3, #4]
   1704a:	781b      	ldrb	r3, [r3, #0]
   1704c:	f88d 3017 	strb.w	r3, [sp, #23]
                RxPduInfo = CanIf_ConfigPtr->CanDrvConfigPtr[CanDrvId]->HohToRxPduMappingPtr[Mailbox->Hoh];
   17050:	4b1c      	ldr	r3, [pc, #112]	; (170c4 <CanIf_RxIndication+0xcc>)
   17052:	681b      	ldr	r3, [r3, #0]
   17054:	685a      	ldr	r2, [r3, #4]
   17056:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1705a:	009b      	lsls	r3, r3, #2
   1705c:	4413      	add	r3, r2
   1705e:	681b      	ldr	r3, [r3, #0]
   17060:	681a      	ldr	r2, [r3, #0]
   17062:	9b01      	ldr	r3, [sp, #4]
   17064:	889b      	ldrh	r3, [r3, #4]
   17066:	009b      	lsls	r3, r3, #2
   17068:	4413      	add	r3, r2
   1706a:	681b      	ldr	r3, [r3, #0]
   1706c:	9306      	str	r3, [sp, #24]
                
                /* Will discard the Can HOH if it was not referred by any CanIf RxPDU */
                if (NULL_PTR != RxPduInfo)
   1706e:	9b06      	ldr	r3, [sp, #24]
   17070:	2b00      	cmp	r3, #0
   17072:	d022      	beq.n	170ba <CanIf_RxIndication+0xc2>
                {
                    if (NULL_PTR != RxPduInfo->UserRxIndication)
   17074:	9b06      	ldr	r3, [sp, #24]
   17076:	689b      	ldr	r3, [r3, #8]
   17078:	2b00      	cmp	r3, #0
   1707a:	d01e      	beq.n	170ba <CanIf_RxIndication+0xc2>
                    {
                        UserPduId = RxPduInfo->PduId;
   1707c:	9b06      	ldr	r3, [sp, #24]
   1707e:	881b      	ldrh	r3, [r3, #0]
   17080:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if ((TRUE == RxPduInfo->PduLengthCheck) && (PduInfoPtr->SduLength > (RxPduInfo->PduLength)))
   17084:	9b06      	ldr	r3, [sp, #24]
   17086:	789b      	ldrb	r3, [r3, #2]
   17088:	2b00      	cmp	r3, #0
   1708a:	d009      	beq.n	170a0 <CanIf_RxIndication+0xa8>
   1708c:	9b00      	ldr	r3, [sp, #0]
   1708e:	689b      	ldr	r3, [r3, #8]
   17090:	9a06      	ldr	r2, [sp, #24]
   17092:	8892      	ldrh	r2, [r2, #4]
   17094:	4293      	cmp	r3, r2
   17096:	d903      	bls.n	170a0 <CanIf_RxIndication+0xa8>
                        {
                            PduInfo.SduLength = RxPduInfo->PduLength; /* Truncates exceeded data as configured on GUI */
   17098:	9b06      	ldr	r3, [sp, #24]
   1709a:	889b      	ldrh	r3, [r3, #4]
   1709c:	9304      	str	r3, [sp, #16]
   1709e:	e002      	b.n	170a6 <CanIf_RxIndication+0xae>
                        }
                        else
                        {
                            PduInfo.SduLength = PduInfoPtr->SduLength;
   170a0:	9b00      	ldr	r3, [sp, #0]
   170a2:	689b      	ldr	r3, [r3, #8]
   170a4:	9304      	str	r3, [sp, #16]
                        }
                        PduInfo.SduDataPtr = PduInfoPtr->SduDataPtr;
   170a6:	9b00      	ldr	r3, [sp, #0]
   170a8:	681b      	ldr	r3, [r3, #0]
   170aa:	9302      	str	r3, [sp, #8]
                        RxPduInfo->UserRxIndication(UserPduId, &PduInfo);
   170ac:	9b06      	ldr	r3, [sp, #24]
   170ae:	689b      	ldr	r3, [r3, #8]
   170b0:	a902      	add	r1, sp, #8
   170b2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   170b6:	4610      	mov	r0, r2
   170b8:	4798      	blx	r3
                    }
                }
            }
        }
    }
}
   170ba:	bf00      	nop
   170bc:	b009      	add	sp, #36	; 0x24
   170be:	f85d fb04 	ldr.w	pc, [sp], #4
   170c2:	bf00      	nop
   170c4:	1fff98ec 	.word	0x1fff98ec
   170c8:	00018ae0 	.word	0x00018ae0

000170cc <CanIf_ControllerModeIndication>:
void CanIf_ControllerModeIndication
( 
    uint8 ControllerId, 
    Can_ControllerStateType ControllerMode 
)
{
   170cc:	b082      	sub	sp, #8
   170ce:	4603      	mov	r3, r0
   170d0:	9100      	str	r1, [sp, #0]
   170d2:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId; 
    (void)ControllerMode;
}
   170d6:	bf00      	nop
   170d8:	b002      	add	sp, #8
   170da:	4770      	bx	lr

000170dc <CanIf_ControllerBusOff>:

void CanIf_ControllerBusOff
(
    uint8 ControllerId
)
{
   170dc:	b082      	sub	sp, #8
   170de:	4603      	mov	r3, r0
   170e0:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
   170e4:	bf00      	nop
   170e6:	b002      	add	sp, #8
   170e8:	4770      	bx	lr

000170ea <CanIf_SetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param Transition Desired state.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_SetControllerMode( uint8 Controller, Can_ControllerStateType Transition ) {
   170ea:	b500      	push	{lr}
   170ec:	b087      	sub	sp, #28
   170ee:	4603      	mov	r3, r0
   170f0:	9100      	str	r1, [sp, #0]
   170f2:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   170f6:	2301      	movs	r3, #1
   170f8:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   170fc:	2300      	movs	r3, #0
   170fe:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   17100:	2300      	movs	r3, #0
   17102:	f88d 300f 	strb.w	r3, [sp, #15]


    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17106:	4b13      	ldr	r3, [pc, #76]	; (17154 <CanIf_SetControllerMode+0x6a>)
   17108:	681b      	ldr	r3, [r3, #0]
   1710a:	2b00      	cmp	r3, #0
   1710c:	d01c      	beq.n	17148 <CanIf_SetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   1710e:	4b12      	ldr	r3, [pc, #72]	; (17158 <CanIf_SetControllerMode+0x6e>)
   17110:	781b      	ldrb	r3, [r3, #0]
   17112:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17116:	429a      	cmp	r2, r3
   17118:	d216      	bcs.n	17148 <CanIf_SetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   1711a:	4b0f      	ldr	r3, [pc, #60]	; (17158 <CanIf_SetControllerMode+0x6e>)
   1711c:	685a      	ldr	r2, [r3, #4]
   1711e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17122:	00db      	lsls	r3, r3, #3
   17124:	4413      	add	r3, r2
   17126:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17128:	9b04      	ldr	r3, [sp, #16]
   1712a:	785b      	ldrb	r3, [r3, #1]
   1712c:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanSetMode( CanController_ID, Transition );   //Calling Can Driver Api.
   17130:	9b04      	ldr	r3, [sp, #16]
   17132:	685b      	ldr	r3, [r3, #4]
   17134:	685b      	ldr	r3, [r3, #4]
   17136:	685b      	ldr	r3, [r3, #4]
   17138:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1713c:	9900      	ldr	r1, [sp, #0]
   1713e:	4610      	mov	r0, r2
   17140:	4798      	blx	r3
   17142:	4603      	mov	r3, r0
   17144:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   17148:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   1714c:	4618      	mov	r0, r3
   1714e:	b007      	add	sp, #28
   17150:	f85d fb04 	ldr.w	pc, [sp], #4
   17154:	1fff98ec 	.word	0x1fff98ec
   17158:	00018ae0 	.word	0x00018ae0

0001715c <CanIf_EnableControllerInterrupts>:
/**
 * @brief This function enables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_EnableControllerInterrupts( uint8 Controller ) {
   1715c:	b500      	push	{lr}
   1715e:	b085      	sub	sp, #20
   17160:	4603      	mov	r3, r0
   17162:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17166:	2300      	movs	r3, #0
   17168:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   1716a:	2300      	movs	r3, #0
   1716c:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17170:	4b10      	ldr	r3, [pc, #64]	; (171b4 <CanIf_EnableControllerInterrupts+0x58>)
   17172:	681b      	ldr	r3, [r3, #0]
   17174:	2b00      	cmp	r3, #0
   17176:	d018      	beq.n	171aa <CanIf_EnableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17178:	4b0f      	ldr	r3, [pc, #60]	; (171b8 <CanIf_EnableControllerInterrupts+0x5c>)
   1717a:	781b      	ldrb	r3, [r3, #0]
   1717c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17180:	429a      	cmp	r2, r3
   17182:	d212      	bcs.n	171aa <CanIf_EnableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17184:	4b0c      	ldr	r3, [pc, #48]	; (171b8 <CanIf_EnableControllerInterrupts+0x5c>)
   17186:	685a      	ldr	r2, [r3, #4]
   17188:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1718c:	00db      	lsls	r3, r3, #3
   1718e:	4413      	add	r3, r2
   17190:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17192:	9b03      	ldr	r3, [sp, #12]
   17194:	785b      	ldrb	r3, [r3, #1]
   17196:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanEnableInterrupts( CanController_ID );   //Calling Can Driver Api.
   1719a:	9b03      	ldr	r3, [sp, #12]
   1719c:	685b      	ldr	r3, [r3, #4]
   1719e:	685b      	ldr	r3, [r3, #4]
   171a0:	689b      	ldr	r3, [r3, #8]
   171a2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   171a6:	4610      	mov	r0, r2
   171a8:	4798      	blx	r3
        }
    }
}
   171aa:	bf00      	nop
   171ac:	b005      	add	sp, #20
   171ae:	f85d fb04 	ldr.w	pc, [sp], #4
   171b2:	bf00      	nop
   171b4:	1fff98ec 	.word	0x1fff98ec
   171b8:	00018ae0 	.word	0x00018ae0

000171bc <CanIf_DisableControllerInterrupts>:
/**
 * @brief This function disables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_DisableControllerInterrupts( uint8 Controller ) {
   171bc:	b500      	push	{lr}
   171be:	b085      	sub	sp, #20
   171c0:	4603      	mov	r3, r0
   171c2:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   171c6:	2300      	movs	r3, #0
   171c8:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   171ca:	2300      	movs	r3, #0
   171cc:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   171d0:	4b10      	ldr	r3, [pc, #64]	; (17214 <CanIf_DisableControllerInterrupts+0x58>)
   171d2:	681b      	ldr	r3, [r3, #0]
   171d4:	2b00      	cmp	r3, #0
   171d6:	d018      	beq.n	1720a <CanIf_DisableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   171d8:	4b0f      	ldr	r3, [pc, #60]	; (17218 <CanIf_DisableControllerInterrupts+0x5c>)
   171da:	781b      	ldrb	r3, [r3, #0]
   171dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   171e0:	429a      	cmp	r2, r3
   171e2:	d212      	bcs.n	1720a <CanIf_DisableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   171e4:	4b0c      	ldr	r3, [pc, #48]	; (17218 <CanIf_DisableControllerInterrupts+0x5c>)
   171e6:	685a      	ldr	r2, [r3, #4]
   171e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   171ec:	00db      	lsls	r3, r3, #3
   171ee:	4413      	add	r3, r2
   171f0:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   171f2:	9b03      	ldr	r3, [sp, #12]
   171f4:	785b      	ldrb	r3, [r3, #1]
   171f6:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanDisableInterrupts( CanController_ID );   //Calling Can Driver Api.
   171fa:	9b03      	ldr	r3, [sp, #12]
   171fc:	685b      	ldr	r3, [r3, #4]
   171fe:	685b      	ldr	r3, [r3, #4]
   17200:	68db      	ldr	r3, [r3, #12]
   17202:	f89d 200b 	ldrb.w	r2, [sp, #11]
   17206:	4610      	mov	r0, r2
   17208:	4798      	blx	r3
        }
    }
}
   1720a:	bf00      	nop
   1720c:	b005      	add	sp, #20
   1720e:	f85d fb04 	ldr.w	pc, [sp], #4
   17212:	bf00      	nop
   17214:	1fff98ec 	.word	0x1fff98ec
   17218:	00018ae0 	.word	0x00018ae0

0001721c <CanIf_GetControllerErrorState>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param ErrorStatePtr Pointer to variable to store the actual error state of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerErrorState( uint8 ControllerId, Can_ErrorStateType *ErrorStatePtr) {
   1721c:	b500      	push	{lr}
   1721e:	b087      	sub	sp, #28
   17220:	4603      	mov	r3, r0
   17222:	9100      	str	r1, [sp, #0]
   17224:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17228:	2301      	movs	r3, #1
   1722a:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   1722e:	2300      	movs	r3, #0
   17230:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   17232:	2300      	movs	r3, #0
   17234:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17238:	4b13      	ldr	r3, [pc, #76]	; (17288 <CanIf_GetControllerErrorState+0x6c>)
   1723a:	681b      	ldr	r3, [r3, #0]
   1723c:	2b00      	cmp	r3, #0
   1723e:	d01c      	beq.n	1727a <CanIf_GetControllerErrorState+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17240:	4b12      	ldr	r3, [pc, #72]	; (1728c <CanIf_GetControllerErrorState+0x70>)
   17242:	781b      	ldrb	r3, [r3, #0]
   17244:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17248:	429a      	cmp	r2, r3
   1724a:	d216      	bcs.n	1727a <CanIf_GetControllerErrorState+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   1724c:	4b0f      	ldr	r3, [pc, #60]	; (1728c <CanIf_GetControllerErrorState+0x70>)
   1724e:	685a      	ldr	r2, [r3, #4]
   17250:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17254:	00db      	lsls	r3, r3, #3
   17256:	4413      	add	r3, r2
   17258:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   1725a:	9b04      	ldr	r3, [sp, #16]
   1725c:	785b      	ldrb	r3, [r3, #1]
   1725e:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetErrorState( CanController_ID, ErrorStatePtr );   //Calling Can Driver Api.
   17262:	9b04      	ldr	r3, [sp, #16]
   17264:	685b      	ldr	r3, [r3, #4]
   17266:	685b      	ldr	r3, [r3, #4]
   17268:	691b      	ldr	r3, [r3, #16]
   1726a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1726e:	9900      	ldr	r1, [sp, #0]
   17270:	4610      	mov	r0, r2
   17272:	4798      	blx	r3
   17274:	4603      	mov	r3, r0
   17276:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   1727a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   1727e:	4618      	mov	r0, r3
   17280:	b007      	add	sp, #28
   17282:	f85d fb04 	ldr.w	pc, [sp], #4
   17286:	bf00      	nop
   17288:	1fff98ec 	.word	0x1fff98ec
   1728c:	00018ae0 	.word	0x00018ae0

00017290 <CanIf_GetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param ControllerModePtr Pointer to variable to store the actual state of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerMode( uint8 Controller, Can_ControllerStateType *ControllerModePtr ) {
   17290:	b500      	push	{lr}
   17292:	b087      	sub	sp, #28
   17294:	4603      	mov	r3, r0
   17296:	9100      	str	r1, [sp, #0]
   17298:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   1729c:	2301      	movs	r3, #1
   1729e:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   172a2:	2300      	movs	r3, #0
   172a4:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   172a6:	2300      	movs	r3, #0
   172a8:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   172ac:	4b13      	ldr	r3, [pc, #76]	; (172fc <CanIf_GetControllerMode+0x6c>)
   172ae:	681b      	ldr	r3, [r3, #0]
   172b0:	2b00      	cmp	r3, #0
   172b2:	d01c      	beq.n	172ee <CanIf_GetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   172b4:	4b12      	ldr	r3, [pc, #72]	; (17300 <CanIf_GetControllerMode+0x70>)
   172b6:	781b      	ldrb	r3, [r3, #0]
   172b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   172bc:	429a      	cmp	r2, r3
   172be:	d216      	bcs.n	172ee <CanIf_GetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   172c0:	4b0f      	ldr	r3, [pc, #60]	; (17300 <CanIf_GetControllerMode+0x70>)
   172c2:	685a      	ldr	r2, [r3, #4]
   172c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   172c8:	00db      	lsls	r3, r3, #3
   172ca:	4413      	add	r3, r2
   172cc:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   172ce:	9b04      	ldr	r3, [sp, #16]
   172d0:	785b      	ldrb	r3, [r3, #1]
   172d2:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetMode( CanController_ID, ControllerModePtr );   //Calling Can Driver Api.
   172d6:	9b04      	ldr	r3, [sp, #16]
   172d8:	685b      	ldr	r3, [r3, #4]
   172da:	685b      	ldr	r3, [r3, #4]
   172dc:	695b      	ldr	r3, [r3, #20]
   172de:	f89d 200f 	ldrb.w	r2, [sp, #15]
   172e2:	9900      	ldr	r1, [sp, #0]
   172e4:	4610      	mov	r0, r2
   172e6:	4798      	blx	r3
   172e8:	4603      	mov	r3, r0
   172ea:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   172ee:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   172f2:	4618      	mov	r0, r3
   172f4:	b007      	add	sp, #28
   172f6:	f85d fb04 	ldr.w	pc, [sp], #4
   172fa:	bf00      	nop
   172fc:	1fff98ec 	.word	0x1fff98ec
   17300:	00018ae0 	.word	0x00018ae0

00017304 <CanIf_GetControllerRxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param RxErrorCounterPtr Pointer to variable to store the actual value of the rx error counter of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerRxErrorCounter( uint8 ControllerId, uint8 *RxErrorCounterPtr ) {
   17304:	b500      	push	{lr}
   17306:	b087      	sub	sp, #28
   17308:	4603      	mov	r3, r0
   1730a:	9100      	str	r1, [sp, #0]
   1730c:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17310:	2301      	movs	r3, #1
   17312:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17316:	2300      	movs	r3, #0
   17318:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   1731a:	2300      	movs	r3, #0
   1731c:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17320:	4b13      	ldr	r3, [pc, #76]	; (17370 <CanIf_GetControllerRxErrorCounter+0x6c>)
   17322:	681b      	ldr	r3, [r3, #0]
   17324:	2b00      	cmp	r3, #0
   17326:	d01c      	beq.n	17362 <CanIf_GetControllerRxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17328:	4b12      	ldr	r3, [pc, #72]	; (17374 <CanIf_GetControllerRxErrorCounter+0x70>)
   1732a:	781b      	ldrb	r3, [r3, #0]
   1732c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17330:	429a      	cmp	r2, r3
   17332:	d216      	bcs.n	17362 <CanIf_GetControllerRxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   17334:	4b0f      	ldr	r3, [pc, #60]	; (17374 <CanIf_GetControllerRxErrorCounter+0x70>)
   17336:	685a      	ldr	r2, [r3, #4]
   17338:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1733c:	00db      	lsls	r3, r3, #3
   1733e:	4413      	add	r3, r2
   17340:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17342:	9b04      	ldr	r3, [sp, #16]
   17344:	785b      	ldrb	r3, [r3, #1]
   17346:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetRxErrorCounter( CanController_ID, RxErrorCounterPtr );   //Calling Can Driver Api.
   1734a:	9b04      	ldr	r3, [sp, #16]
   1734c:	685b      	ldr	r3, [r3, #4]
   1734e:	685b      	ldr	r3, [r3, #4]
   17350:	699b      	ldr	r3, [r3, #24]
   17352:	f89d 200f 	ldrb.w	r2, [sp, #15]
   17356:	9900      	ldr	r1, [sp, #0]
   17358:	4610      	mov	r0, r2
   1735a:	4798      	blx	r3
   1735c:	4603      	mov	r3, r0
   1735e:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   17362:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   17366:	4618      	mov	r0, r3
   17368:	b007      	add	sp, #28
   1736a:	f85d fb04 	ldr.w	pc, [sp], #4
   1736e:	bf00      	nop
   17370:	1fff98ec 	.word	0x1fff98ec
   17374:	00018ae0 	.word	0x00018ae0

00017378 <CanIf_GetControllerTxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param TxErrorCounterPtr Pointer to variable to store the actual value of the tx error counter of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerTxErrorCounter( uint8 ControllerId, uint8 *TxErrorCounterPtr ) {
   17378:	b500      	push	{lr}
   1737a:	b087      	sub	sp, #28
   1737c:	4603      	mov	r3, r0
   1737e:	9100      	str	r1, [sp, #0]
   17380:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17384:	2301      	movs	r3, #1
   17386:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   1738a:	2300      	movs	r3, #0
   1738c:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   1738e:	2300      	movs	r3, #0
   17390:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17394:	4b13      	ldr	r3, [pc, #76]	; (173e4 <CanIf_GetControllerTxErrorCounter+0x6c>)
   17396:	681b      	ldr	r3, [r3, #0]
   17398:	2b00      	cmp	r3, #0
   1739a:	d01c      	beq.n	173d6 <CanIf_GetControllerTxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   1739c:	4b12      	ldr	r3, [pc, #72]	; (173e8 <CanIf_GetControllerTxErrorCounter+0x70>)
   1739e:	781b      	ldrb	r3, [r3, #0]
   173a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   173a4:	429a      	cmp	r2, r3
   173a6:	d216      	bcs.n	173d6 <CanIf_GetControllerTxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   173a8:	4b0f      	ldr	r3, [pc, #60]	; (173e8 <CanIf_GetControllerTxErrorCounter+0x70>)
   173aa:	685a      	ldr	r2, [r3, #4]
   173ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   173b0:	00db      	lsls	r3, r3, #3
   173b2:	4413      	add	r3, r2
   173b4:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   173b6:	9b04      	ldr	r3, [sp, #16]
   173b8:	785b      	ldrb	r3, [r3, #1]
   173ba:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetTxErrorCounter( CanController_ID, TxErrorCounterPtr );   //Calling Can Driver Api.
   173be:	9b04      	ldr	r3, [sp, #16]
   173c0:	685b      	ldr	r3, [r3, #4]
   173c2:	685b      	ldr	r3, [r3, #4]
   173c4:	69db      	ldr	r3, [r3, #28]
   173c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   173ca:	9900      	ldr	r1, [sp, #0]
   173cc:	4610      	mov	r0, r2
   173ce:	4798      	blx	r3
   173d0:	4603      	mov	r3, r0
   173d2:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   173d6:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   173da:	4618      	mov	r0, r3
   173dc:	b007      	add	sp, #28
   173de:	f85d fb04 	ldr.w	pc, [sp], #4
   173e2:	bf00      	nop
   173e4:	1fff98ec 	.word	0x1fff98ec
   173e8:	00018ae0 	.word	0x00018ae0

000173ec <Fls_ACEraseRomEnd>:
   173ec:	00c9f4de 	.word	0x00c9f4de
   173f0:	5f75634d 	.word	0x5f75634d
   173f4:	74696e49 	.word	0x74696e49
   173f8:	00002928 	.word	0x00002928
   173fc:	5f75634d 	.word	0x5f75634d
   17400:	74696e49 	.word	0x74696e49
   17404:	636f6c43 	.word	0x636f6c43
   17408:	0029286b 	.word	0x0029286b
   1740c:	5f75634d 	.word	0x5f75634d
   17410:	4d746553 	.word	0x4d746553
   17414:	2865646f 	.word	0x2865646f
   17418:	00000029 	.word	0x00000029
   1741c:	5f75634d 	.word	0x5f75634d
   17420:	56746547 	.word	0x56746547
   17424:	69737265 	.word	0x69737265
   17428:	6e496e6f 	.word	0x6e496e6f
   1742c:	29286f66 	.word	0x29286f66
   17430:	00000000 	.word	0x00000000
   17434:	61766e49 	.word	0x61766e49
   17438:	2064696c 	.word	0x2064696c
   1743c:	666e6f63 	.word	0x666e6f63
   17440:	696f7020 	.word	0x696f7020
   17444:	7265746e 	.word	0x7265746e
   17448:	00000000 	.word	0x00000000
   1744c:	76697244 	.word	0x76697244
   17450:	75207265 	.word	0x75207265
   17454:	696e696e 	.word	0x696e696e
   17458:	6c616974 	.word	0x6c616974
   1745c:	64657a69 	.word	0x64657a69
   17460:	00000000 	.word	0x00000000
   17464:	76697244 	.word	0x76697244
   17468:	61207265 	.word	0x61207265
   1746c:	6165726c 	.word	0x6165726c
   17470:	69207964 	.word	0x69207964
   17474:	6974696e 	.word	0x6974696e
   17478:	7a696c61 	.word	0x7a696c61
   1747c:	00006465 	.word	0x00006465
   17480:	61766e49 	.word	0x61766e49
   17484:	2064696c 	.word	0x2064696c
   17488:	75706e69 	.word	0x75706e69
   1748c:	61702074 	.word	0x61702074
   17490:	656d6172 	.word	0x656d6172
   17494:	00726574 	.word	0x00726574
   17498:	74616c50 	.word	0x74616c50
   1749c:	6d726f66 	.word	0x6d726f66
   174a0:	696e495f 	.word	0x696e495f
   174a4:	00292874 	.word	0x00292874
   174a8:	74616c50 	.word	0x74616c50
   174ac:	6d726f66 	.word	0x6d726f66
   174b0:	7465535f 	.word	0x7465535f
   174b4:	28717249 	.word	0x28717249
   174b8:	00000029 	.word	0x00000029
   174bc:	74616c50 	.word	0x74616c50
   174c0:	6d726f66 	.word	0x6d726f66
   174c4:	7465535f 	.word	0x7465535f
   174c8:	50717249 	.word	0x50717249
   174cc:	726f6972 	.word	0x726f6972
   174d0:	28797469 	.word	0x28797469
   174d4:	00000029 	.word	0x00000029
   174d8:	74616c50 	.word	0x74616c50
   174dc:	6d726f66 	.word	0x6d726f66
   174e0:	7465475f 	.word	0x7465475f
   174e4:	50717249 	.word	0x50717249
   174e8:	726f6972 	.word	0x726f6972
   174ec:	28797469 	.word	0x28797469
   174f0:	00000029 	.word	0x00000029
   174f4:	74616c50 	.word	0x74616c50
   174f8:	6d726f66 	.word	0x6d726f66
   174fc:	736e495f 	.word	0x736e495f
   17500:	6c6c6174 	.word	0x6c6c6174
   17504:	48717249 	.word	0x48717249
   17508:	6c646e61 	.word	0x6c646e61
   1750c:	29287265 	.word	0x29287265
   17510:	00000000 	.word	0x00000000
   17514:	61766e49 	.word	0x61766e49
   17518:	2064696c 	.word	0x2064696c
   1751c:	6e696f70 	.word	0x6e696f70
   17520:	00726574 	.word	0x00726574
   17524:	6c6c6143 	.word	0x6c6c6143
   17528:	6f726620 	.word	0x6f726620
   1752c:	7277206d 	.word	0x7277206d
   17530:	20676e6f 	.word	0x20676e6f
   17534:	7070616d 	.word	0x7070616d
   17538:	70206465 	.word	0x70206465
   1753c:	69747261 	.word	0x69747261
   17540:	6e6f6974 	.word	0x6e6f6974
   17544:	00000000 	.word	0x00000000
   17548:	61726150 	.word	0x61726150
   1754c:	6574656d 	.word	0x6574656d
   17550:	756f2072 	.word	0x756f2072
   17554:	666f2074 	.word	0x666f2074
   17558:	6e617220 	.word	0x6e617220
   1755c:	00006567 	.word	0x00006567
   17560:	74726f50 	.word	0x74726f50
   17564:	696e495f 	.word	0x696e495f
   17568:	00292874 	.word	0x00292874
   1756c:	74726f50 	.word	0x74726f50
   17570:	7465535f 	.word	0x7465535f
   17574:	446e6950 	.word	0x446e6950
   17578:	63657269 	.word	0x63657269
   1757c:	6e6f6974 	.word	0x6e6f6974
   17580:	00002928 	.word	0x00002928
   17584:	74726f50 	.word	0x74726f50
   17588:	7465535f 	.word	0x7465535f
   1758c:	4d6e6950 	.word	0x4d6e6950
   17590:	2865646f 	.word	0x2865646f
   17594:	00000029 	.word	0x00000029
   17598:	74726f50 	.word	0x74726f50
   1759c:	6665525f 	.word	0x6665525f
   175a0:	68736572 	.word	0x68736572
   175a4:	74726f50 	.word	0x74726f50
   175a8:	65726944 	.word	0x65726944
   175ac:	6f697463 	.word	0x6f697463
   175b0:	0029286e 	.word	0x0029286e
   175b4:	74726f50 	.word	0x74726f50
   175b8:	7465475f 	.word	0x7465475f
   175bc:	73726556 	.word	0x73726556
   175c0:	496e6f69 	.word	0x496e6f69
   175c4:	286f666e 	.word	0x286f666e
   175c8:	00000029 	.word	0x00000029
   175cc:	61766e49 	.word	0x61766e49
   175d0:	2064696c 	.word	0x2064696c
   175d4:	74726f50 	.word	0x74726f50
   175d8:	6e695020 	.word	0x6e695020
   175dc:	00444920 	.word	0x00444920
   175e0:	74726f50 	.word	0x74726f50
   175e4:	6e697020 	.word	0x6e697020
   175e8:	646f6d20 	.word	0x646f6d20
   175ec:	73692065 	.word	0x73692065
   175f0:	636e7520 	.word	0x636e7520
   175f4:	676e6168 	.word	0x676e6168
   175f8:	6c626165 	.word	0x6c626165
   175fc:	00000065 	.word	0x00000065
   17600:	61766e49 	.word	0x61766e49
   17604:	2064696c 	.word	0x2064696c
   17608:	74726f70 	.word	0x74726f70
   1760c:	6e697020 	.word	0x6e697020
   17610:	646f6d20 	.word	0x646f6d20
   17614:	00000065 	.word	0x00000065
   17618:	5f6f6944 	.word	0x5f6f6944
   1761c:	74697257 	.word	0x74697257
   17620:	61684365 	.word	0x61684365
   17624:	6c656e6e 	.word	0x6c656e6e
   17628:	00002928 	.word	0x00002928
   1762c:	5f6f6944 	.word	0x5f6f6944
   17630:	64616552 	.word	0x64616552
   17634:	6e616843 	.word	0x6e616843
   17638:	286c656e 	.word	0x286c656e
   1763c:	00000029 	.word	0x00000029
   17640:	5f6f6944 	.word	0x5f6f6944
   17644:	70696c46 	.word	0x70696c46
   17648:	6e616843 	.word	0x6e616843
   1764c:	286c656e 	.word	0x286c656e
   17650:	00000029 	.word	0x00000029
   17654:	5f6f6944 	.word	0x5f6f6944
   17658:	74697257 	.word	0x74697257
   1765c:	61684365 	.word	0x61684365
   17660:	6c656e6e 	.word	0x6c656e6e
   17664:	756f7247 	.word	0x756f7247
   17668:	00292870 	.word	0x00292870
   1766c:	5f6f6944 	.word	0x5f6f6944
   17670:	64616552 	.word	0x64616552
   17674:	6e616843 	.word	0x6e616843
   17678:	476c656e 	.word	0x476c656e
   1767c:	70756f72 	.word	0x70756f72
   17680:	00002928 	.word	0x00002928
   17684:	5f6f6944 	.word	0x5f6f6944
   17688:	74697257 	.word	0x74697257
   1768c:	726f5065 	.word	0x726f5065
   17690:	00292874 	.word	0x00292874
   17694:	5f6f6944 	.word	0x5f6f6944
   17698:	64616552 	.word	0x64616552
   1769c:	74726f50 	.word	0x74726f50
   176a0:	00002928 	.word	0x00002928
   176a4:	5f6f6944 	.word	0x5f6f6944
   176a8:	56746547 	.word	0x56746547
   176ac:	69737265 	.word	0x69737265
   176b0:	6e496e6f 	.word	0x6e496e6f
   176b4:	29286f66 	.word	0x29286f66
   176b8:	00000000 	.word	0x00000000
   176bc:	61766e49 	.word	0x61766e49
   176c0:	2064696c 	.word	0x2064696c
   176c4:	206f6964 	.word	0x206f6964
   176c8:	6e616863 	.word	0x6e616863
   176cc:	206c656e 	.word	0x206c656e
   176d0:	6576656c 	.word	0x6576656c
   176d4:	0000006c 	.word	0x0000006c
   176d8:	61766e49 	.word	0x61766e49
   176dc:	2064696c 	.word	0x2064696c
   176e0:	206f6964 	.word	0x206f6964
   176e4:	6e616863 	.word	0x6e616863
   176e8:	206c656e 	.word	0x206c656e
   176ec:	00006469 	.word	0x00006469
   176f0:	61766e49 	.word	0x61766e49
   176f4:	2064696c 	.word	0x2064696c
   176f8:	74726f70 	.word	0x74726f70
   176fc:	00646920 	.word	0x00646920
   17700:	61766e49 	.word	0x61766e49
   17704:	2064696c 	.word	0x2064696c
   17708:	6e616863 	.word	0x6e616863
   1770c:	206c656e 	.word	0x206c656e
   17710:	756f7267 	.word	0x756f7267
   17714:	64692070 	.word	0x64692070
   17718:	00000000 	.word	0x00000000
   1771c:	61766e49 	.word	0x61766e49
   17720:	2064696c 	.word	0x2064696c
   17724:	666e6f63 	.word	0x666e6f63
   17728:	70206769 	.word	0x70206769
   1772c:	6d617261 	.word	0x6d617261
   17730:	72657465 	.word	0x72657465
   17734:	00000000 	.word	0x00000000
   17738:	5f6d7750 	.word	0x5f6d7750
   1773c:	74696e49 	.word	0x74696e49
   17740:	00002928 	.word	0x00002928
   17744:	5f6d7750 	.word	0x5f6d7750
   17748:	6e496544 	.word	0x6e496544
   1774c:	29287469 	.word	0x29287469
   17750:	00000000 	.word	0x00000000
   17754:	5f6d7750 	.word	0x5f6d7750
   17758:	44746553 	.word	0x44746553
   1775c:	43797475 	.word	0x43797475
   17760:	656c6379 	.word	0x656c6379
   17764:	00002928 	.word	0x00002928
   17768:	5f6d7750 	.word	0x5f6d7750
   1776c:	50746553 	.word	0x50746553
   17770:	6f697265 	.word	0x6f697265
   17774:	646e4164 	.word	0x646e4164
   17778:	79747544 	.word	0x79747544
   1777c:	00002928 	.word	0x00002928
   17780:	5f6d7750 	.word	0x5f6d7750
   17784:	4f746553 	.word	0x4f746553
   17788:	75707475 	.word	0x75707475
   1778c:	496f5474 	.word	0x496f5474
   17790:	28656c64 	.word	0x28656c64
   17794:	00000029 	.word	0x00000029
   17798:	5f6d7750 	.word	0x5f6d7750
   1779c:	56746547 	.word	0x56746547
   177a0:	69737265 	.word	0x69737265
   177a4:	6e496e6f 	.word	0x6e496e6f
   177a8:	29286f66 	.word	0x29286f66
   177ac:	00000000 	.word	0x00000000
   177b0:	61766e49 	.word	0x61766e49
   177b4:	2064696c 	.word	0x2064696c
   177b8:	666e6f63 	.word	0x666e6f63
   177bc:	70206769 	.word	0x70206769
   177c0:	746e696f 	.word	0x746e696f
   177c4:	00007265 	.word	0x00007265
   177c8:	61766e49 	.word	0x61766e49
   177cc:	2064696c 	.word	0x2064696c
   177d0:	206d7770 	.word	0x206d7770
   177d4:	6e616863 	.word	0x6e616863
   177d8:	006c656e 	.word	0x006c656e
   177dc:	206d7750 	.word	0x206d7750
   177e0:	6e616863 	.word	0x6e616863
   177e4:	206c656e 	.word	0x206c656e
   177e8:	69726570 	.word	0x69726570
   177ec:	6920646f 	.word	0x6920646f
   177f0:	6e752073 	.word	0x6e752073
   177f4:	6e616863 	.word	0x6e616863
   177f8:	62616567 	.word	0x62616567
   177fc:	0000656c 	.word	0x0000656c
   17800:	5f636441 	.word	0x5f636441
   17804:	74696e49 	.word	0x74696e49
   17808:	00002928 	.word	0x00002928
   1780c:	5f636441 	.word	0x5f636441
   17810:	6e496544 	.word	0x6e496544
   17814:	29287469 	.word	0x29287469
   17818:	00000000 	.word	0x00000000
   1781c:	5f636441 	.word	0x5f636441
   17820:	72617453 	.word	0x72617453
   17824:	6f724774 	.word	0x6f724774
   17828:	6f437075 	.word	0x6f437075
   1782c:	7265766e 	.word	0x7265766e
   17830:	6e6f6973 	.word	0x6e6f6973
   17834:	00002928 	.word	0x00002928
   17838:	5f636441 	.word	0x5f636441
   1783c:	706f7453 	.word	0x706f7453
   17840:	756f7247 	.word	0x756f7247
   17844:	6e6f4370 	.word	0x6e6f4370
   17848:	73726576 	.word	0x73726576
   1784c:	286e6f69 	.word	0x286e6f69
   17850:	00000029 	.word	0x00000029
   17854:	5f636441 	.word	0x5f636441
   17858:	64616552 	.word	0x64616552
   1785c:	756f7247 	.word	0x756f7247
   17860:	00292870 	.word	0x00292870
   17864:	5f636441 	.word	0x5f636441
   17868:	47746547 	.word	0x47746547
   1786c:	70756f72 	.word	0x70756f72
   17870:	74617453 	.word	0x74617453
   17874:	29287375 	.word	0x29287375
   17878:	00000000 	.word	0x00000000
   1787c:	5f636441 	.word	0x5f636441
   17880:	696c6143 	.word	0x696c6143
   17884:	74617262 	.word	0x74617262
   17888:	00292865 	.word	0x00292865
   1788c:	5f636441 	.word	0x5f636441
   17890:	75746553 	.word	0x75746553
   17894:	73655270 	.word	0x73655270
   17898:	42746c75 	.word	0x42746c75
   1789c:	65666675 	.word	0x65666675
   178a0:	00292872 	.word	0x00292872
   178a4:	5f636441 	.word	0x5f636441
   178a8:	56746547 	.word	0x56746547
   178ac:	69737265 	.word	0x69737265
   178b0:	6e496e6f 	.word	0x6e496e6f
   178b4:	29286f66 	.word	0x29286f66
   178b8:	00000000 	.word	0x00000000
   178bc:	61766e49 	.word	0x61766e49
   178c0:	2064696c 	.word	0x2064696c
   178c4:	20636461 	.word	0x20636461
   178c8:	756f7267 	.word	0x756f7267
   178cc:	00000070 	.word	0x00000070
   178d0:	66667542 	.word	0x66667542
   178d4:	70207265 	.word	0x70207265
   178d8:	746e696f 	.word	0x746e696f
   178dc:	6e207265 	.word	0x6e207265
   178e0:	6920746f 	.word	0x6920746f
   178e4:	6974696e 	.word	0x6974696e
   178e8:	7a696c61 	.word	0x7a696c61
   178ec:	00006465 	.word	0x00006465
   178f0:	696c6143 	.word	0x696c6143
   178f4:	74617262 	.word	0x74617262
   178f8:	206e6f69 	.word	0x206e6f69
   178fc:	7265706f 	.word	0x7265706f
   17900:	6f697461 	.word	0x6f697461
   17904:	6974206e 	.word	0x6974206e
   17908:	2064656d 	.word	0x2064656d
   1790c:	0074756f 	.word	0x0074756f
   17910:	65686353 	.word	0x65686353
   17914:	656c7564 	.word	0x656c7564
   17918:	6e495f72 	.word	0x6e495f72
   1791c:	29287469 	.word	0x29287469
   17920:	00000000 	.word	0x00000000
   17924:	65686353 	.word	0x65686353
   17928:	656c7564 	.word	0x656c7564
   1792c:	65475f72 	.word	0x65475f72
   17930:	61745374 	.word	0x61745374
   17934:	51737574 	.word	0x51737574
   17938:	65756575 	.word	0x65756575
   1793c:	00002928 	.word	0x00002928
   17940:	65686353 	.word	0x65686353
   17944:	656c7564 	.word	0x656c7564
   17948:	6c465f72 	.word	0x6c465f72
   1794c:	51687375 	.word	0x51687375
   17950:	65756575 	.word	0x65756575
   17954:	00002928 	.word	0x00002928
   17958:	65686353 	.word	0x65686353
   1795c:	656c7564 	.word	0x656c7564
   17960:	72575f72 	.word	0x72575f72
   17964:	51657469 	.word	0x51657469
   17968:	65756575 	.word	0x65756575
   1796c:	00002928 	.word	0x00002928
   17970:	65686353 	.word	0x65686353
   17974:	656c7564 	.word	0x656c7564
   17978:	65525f72 	.word	0x65525f72
   1797c:	75516461 	.word	0x75516461
   17980:	28657565 	.word	0x28657565
   17984:	00000029 	.word	0x00000029
   17988:	65686353 	.word	0x65686353
   1798c:	656c7564 	.word	0x656c7564
   17990:	74535f72 	.word	0x74535f72
   17994:	54747261 	.word	0x54747261
   17998:	286b7361 	.word	0x286b7361
   1799c:	00000029 	.word	0x00000029
   179a0:	65686353 	.word	0x65686353
   179a4:	656c7564 	.word	0x656c7564
   179a8:	74535f72 	.word	0x74535f72
   179ac:	6154706f 	.word	0x6154706f
   179b0:	29286b73 	.word	0x29286b73
   179b4:	00000000 	.word	0x00000000
   179b8:	65686353 	.word	0x65686353
   179bc:	656c7564 	.word	0x656c7564
   179c0:	65505f72 	.word	0x65505f72
   179c4:	646f6972 	.word	0x646f6972
   179c8:	6b736154 	.word	0x6b736154
   179cc:	00002928 	.word	0x00002928
   179d0:	65686353 	.word	0x65686353
   179d4:	656c7564 	.word	0x656c7564
   179d8:	74535f72 	.word	0x74535f72
   179dc:	54747261 	.word	0x54747261
   179e0:	72656d69 	.word	0x72656d69
   179e4:	00002928 	.word	0x00002928
   179e8:	65686353 	.word	0x65686353
   179ec:	656c7564 	.word	0x656c7564
   179f0:	74535f72 	.word	0x74535f72
   179f4:	6954706f 	.word	0x6954706f
   179f8:	2872656d 	.word	0x2872656d
   179fc:	00000029 	.word	0x00000029
   17a00:	65686353 	.word	0x65686353
   17a04:	656c7564 	.word	0x656c7564
   17a08:	65475f72 	.word	0x65475f72
   17a0c:	6d695474 	.word	0x6d695474
   17a10:	29287265 	.word	0x29287265
   17a14:	00000000 	.word	0x00000000
   17a18:	65686353 	.word	0x65686353
   17a1c:	656c7564 	.word	0x656c7564
   17a20:	65525f72 	.word	0x65525f72
   17a24:	64616f6c 	.word	0x64616f6c
   17a28:	656d6954 	.word	0x656d6954
   17a2c:	00292872 	.word	0x00292872
   17a30:	65686353 	.word	0x65686353
   17a34:	656c7564 	.word	0x656c7564
   17a38:	614d5f72 	.word	0x614d5f72
   17a3c:	75466e69 	.word	0x75466e69
   17a40:	6974636e 	.word	0x6974636e
   17a44:	29286e6f 	.word	0x29286e6f
   17a48:	00000000 	.word	0x00000000
   17a4c:	75657551 	.word	0x75657551
   17a50:	64692065 	.word	0x64692065
   17a54:	74756f20 	.word	0x74756f20
   17a58:	20666f20 	.word	0x20666f20
   17a5c:	676e6172 	.word	0x676e6172
   17a60:	00000065 	.word	0x00000065
   17a64:	61766e49 	.word	0x61766e49
   17a68:	2064696c 	.word	0x2064696c
   17a6c:	75657571 	.word	0x75657571
   17a70:	74732065 	.word	0x74732065
   17a74:	73757461 	.word	0x73757461
   17a78:	616c6620 	.word	0x616c6620
   17a7c:	00000067 	.word	0x00000067
   17a80:	6b736154 	.word	0x6b736154
   17a84:	20646920 	.word	0x20646920
   17a88:	2074756f 	.word	0x2074756f
   17a8c:	7220666f 	.word	0x7220666f
   17a90:	65676e61 	.word	0x65676e61
   17a94:	00000000 	.word	0x00000000
   17a98:	61766e49 	.word	0x61766e49
   17a9c:	2064696c 	.word	0x2064696c
   17aa0:	6b736174 	.word	0x6b736174
   17aa4:	20726f20 	.word	0x20726f20
   17aa8:	656d6974 	.word	0x656d6974
   17aac:	65702072 	.word	0x65702072
   17ab0:	646f6972 	.word	0x646f6972
   17ab4:	74696369 	.word	0x74696369
   17ab8:	00000079 	.word	0x00000079
   17abc:	656d6954 	.word	0x656d6954
   17ac0:	64692072 	.word	0x64692072
   17ac4:	74756f20 	.word	0x74756f20
   17ac8:	20666f20 	.word	0x20666f20
   17acc:	676e6172 	.word	0x676e6172
   17ad0:	00000065 	.word	0x00000065
   17ad4:	65686353 	.word	0x65686353
   17ad8:	656c7564 	.word	0x656c7564
   17adc:	6e752072 	.word	0x6e752072
   17ae0:	74696e69 	.word	0x74696e69
   17ae4:	696c6169 	.word	0x696c6169
   17ae8:	0064657a 	.word	0x0064657a
   17aec:	6f497748 	.word	0x6f497748
   17af0:	425f6241 	.word	0x425f6241
   17af4:	6f747475 	.word	0x6f747475
   17af8:	495f736e 	.word	0x495f736e
   17afc:	2874696e 	.word	0x2874696e
   17b00:	00000029 	.word	0x00000029
   17b04:	6f497748 	.word	0x6f497748
   17b08:	425f6241 	.word	0x425f6241
   17b0c:	6f747475 	.word	0x6f747475
   17b10:	475f736e 	.word	0x475f736e
   17b14:	76457465 	.word	0x76457465
   17b18:	28746e65 	.word	0x28746e65
   17b1c:	00000029 	.word	0x00000029
   17b20:	6f497748 	.word	0x6f497748
   17b24:	425f6241 	.word	0x425f6241
   17b28:	6f747475 	.word	0x6f747475
   17b2c:	4d5f736e 	.word	0x4d5f736e
   17b30:	466e6961 	.word	0x466e6961
   17b34:	74636e75 	.word	0x74636e75
   17b38:	286e6f69 	.word	0x286e6f69
   17b3c:	00000029 	.word	0x00000029
   17b40:	61766e49 	.word	0x61766e49
   17b44:	2064696c 	.word	0x2064696c
   17b48:	74747562 	.word	0x74747562
   17b4c:	69206e6f 	.word	0x69206e6f
   17b50:	00000064 	.word	0x00000064
   17b54:	61766e49 	.word	0x61766e49
   17b58:	2064696c 	.word	0x2064696c
   17b5c:	74747562 	.word	0x74747562
   17b60:	73206e6f 	.word	0x73206e6f
   17b64:	65746174 	.word	0x65746174
   17b68:	00000000 	.word	0x00000000
   17b6c:	75646f4d 	.word	0x75646f4d
   17b70:	7520656c 	.word	0x7520656c
   17b74:	696e696e 	.word	0x696e696e
   17b78:	6c616974 	.word	0x6c616974
   17b7c:	64657a69 	.word	0x64657a69
   17b80:	00000000 	.word	0x00000000
   17b84:	6f497748 	.word	0x6f497748
   17b88:	4c5f6241 	.word	0x4c5f6241
   17b8c:	5f736465 	.word	0x5f736465
   17b90:	74696e49 	.word	0x74696e49
   17b94:	00002928 	.word	0x00002928
   17b98:	6f497748 	.word	0x6f497748
   17b9c:	4c5f6241 	.word	0x4c5f6241
   17ba0:	5f736465 	.word	0x5f736465
   17ba4:	6e727554 	.word	0x6e727554
   17ba8:	29286e4f 	.word	0x29286e4f
   17bac:	00000000 	.word	0x00000000
   17bb0:	6f497748 	.word	0x6f497748
   17bb4:	4c5f6241 	.word	0x4c5f6241
   17bb8:	5f736465 	.word	0x5f736465
   17bbc:	6e727554 	.word	0x6e727554
   17bc0:	2866664f 	.word	0x2866664f
   17bc4:	00000029 	.word	0x00000029
   17bc8:	6f497748 	.word	0x6f497748
   17bcc:	4c5f6241 	.word	0x4c5f6241
   17bd0:	5f736465 	.word	0x5f736465
   17bd4:	6e727554 	.word	0x6e727554
   17bd8:	67676f54 	.word	0x67676f54
   17bdc:	2928656c 	.word	0x2928656c
   17be0:	00000000 	.word	0x00000000
   17be4:	61766e49 	.word	0x61766e49
   17be8:	2064696c 	.word	0x2064696c
   17bec:	2064656c 	.word	0x2064656c
   17bf0:	00006469 	.word	0x00006469
   17bf4:	6f497748 	.word	0x6f497748
   17bf8:	505f6241 	.word	0x505f6241
   17bfc:	5f73746f 	.word	0x5f73746f
   17c00:	74696e49 	.word	0x74696e49
   17c04:	00002928 	.word	0x00002928
   17c08:	6f497748 	.word	0x6f497748
   17c0c:	505f6241 	.word	0x505f6241
   17c10:	5f73746f 	.word	0x5f73746f
   17c14:	56746547 	.word	0x56746547
   17c18:	65756c61 	.word	0x65756c61
   17c1c:	00002928 	.word	0x00002928
   17c20:	6f497748 	.word	0x6f497748
   17c24:	505f6241 	.word	0x505f6241
   17c28:	5f73746f 	.word	0x5f73746f
   17c2c:	41746547 	.word	0x41746547
   17c30:	6156746c 	.word	0x6156746c
   17c34:	2865756c 	.word	0x2865756c
   17c38:	00000029 	.word	0x00000029
   17c3c:	61766e49 	.word	0x61766e49
   17c40:	2064696c 	.word	0x2064696c
   17c44:	75706e69 	.word	0x75706e69
   17c48:	6f702074 	.word	0x6f702074
   17c4c:	65746e69 	.word	0x65746e69
   17c50:	00000072 	.word	0x00000072
   17c54:	6f497748 	.word	0x6f497748
   17c58:	425f6241 	.word	0x425f6241
   17c5c:	657a7a75 	.word	0x657a7a75
   17c60:	6e495f72 	.word	0x6e495f72
   17c64:	29287469 	.word	0x29287469
   17c68:	00000000 	.word	0x00000000
   17c6c:	6f497748 	.word	0x6f497748
   17c70:	425f6241 	.word	0x425f6241
   17c74:	657a7a75 	.word	0x657a7a75
   17c78:	65425f72 	.word	0x65425f72
   17c7c:	29287065 	.word	0x29287065
   17c80:	00000000 	.word	0x00000000
   17c84:	6f497748 	.word	0x6f497748
   17c88:	425f6241 	.word	0x425f6241
   17c8c:	657a7a75 	.word	0x657a7a75
   17c90:	74535f72 	.word	0x74535f72
   17c94:	2928706f 	.word	0x2928706f
   17c98:	00000000 	.word	0x00000000
   17c9c:	61766e49 	.word	0x61766e49
   17ca0:	2064696c 	.word	0x2064696c
   17ca4:	7a7a7562 	.word	0x7a7a7562
   17ca8:	74207265 	.word	0x74207265
   17cac:	00656e6f 	.word	0x00656e6f
   17cb0:	2075634d 	.word	0x2075634d
   17cb4:	75646f6d 	.word	0x75646f6d
   17cb8:	0000656c 	.word	0x0000656c
   17cbc:	74616c50 	.word	0x74616c50
   17cc0:	6d726f66 	.word	0x6d726f66
   17cc4:	646f6d20 	.word	0x646f6d20
   17cc8:	00656c75 	.word	0x00656c75
   17ccc:	74726f50 	.word	0x74726f50
   17cd0:	646f6d20 	.word	0x646f6d20
   17cd4:	00656c75 	.word	0x00656c75
   17cd8:	206f6944 	.word	0x206f6944
   17cdc:	75646f6d 	.word	0x75646f6d
   17ce0:	0000656c 	.word	0x0000656c
   17ce4:	206d7750 	.word	0x206d7750
   17ce8:	75646f6d 	.word	0x75646f6d
   17cec:	0000656c 	.word	0x0000656c
   17cf0:	20636441 	.word	0x20636441
   17cf4:	75646f6d 	.word	0x75646f6d
   17cf8:	0000656c 	.word	0x0000656c
   17cfc:	65686353 	.word	0x65686353
   17d00:	656c7564 	.word	0x656c7564
   17d04:	6f6d2072 	.word	0x6f6d2072
   17d08:	656c7564 	.word	0x656c7564
   17d0c:	00000000 	.word	0x00000000
   17d10:	74747542 	.word	0x74747542
   17d14:	20736e6f 	.word	0x20736e6f
   17d18:	61204f49 	.word	0x61204f49
   17d1c:	72747362 	.word	0x72747362
   17d20:	69746361 	.word	0x69746361
   17d24:	6d206e6f 	.word	0x6d206e6f
   17d28:	6c75646f 	.word	0x6c75646f
   17d2c:	00000065 	.word	0x00000065
   17d30:	7364654c 	.word	0x7364654c
   17d34:	204f4920 	.word	0x204f4920
   17d38:	74736261 	.word	0x74736261
   17d3c:	74636172 	.word	0x74636172
   17d40:	206e6f69 	.word	0x206e6f69
   17d44:	75646f6d 	.word	0x75646f6d
   17d48:	0000656c 	.word	0x0000656c
   17d4c:	73746f50 	.word	0x73746f50
   17d50:	204f4920 	.word	0x204f4920
   17d54:	74736261 	.word	0x74736261
   17d58:	74636172 	.word	0x74636172
   17d5c:	206e6f69 	.word	0x206e6f69
   17d60:	75646f6d 	.word	0x75646f6d
   17d64:	0000656c 	.word	0x0000656c
   17d68:	7a7a7542 	.word	0x7a7a7542
   17d6c:	49207265 	.word	0x49207265
   17d70:	6261204f 	.word	0x6261204f
   17d74:	61727473 	.word	0x61727473
   17d78:	6f697463 	.word	0x6f697463
   17d7c:	6f6d206e 	.word	0x6f6d206e
   17d80:	656c7564 	.word	0x656c7564
   17d84:	00000000 	.word	0x00000000
   17d88:	6f727245 	.word	0x6f727245
   17d8c:	45203a72 	.word	0x45203a72
   17d90:	726f7272 	.word	0x726f7272
   17d94:	206e6920 	.word	0x206e6920
   17d98:	69207325 	.word	0x69207325
   17d9c:	7566206e 	.word	0x7566206e
   17da0:	6974636e 	.word	0x6974636e
   17da4:	25206e6f 	.word	0x25206e6f
   17da8:	69772073 	.word	0x69772073
   17dac:	74206874 	.word	0x74206874
   17db0:	69206568 	.word	0x69206568
   17db4:	6174736e 	.word	0x6174736e
   17db8:	2065636e 	.word	0x2065636e
   17dbc:	202c6425 	.word	0x202c6425
   17dc0:	000a7325 	.word	0x000a7325
   17dc4:	6d726554 	.word	0x6d726554
   17dc8:	6c616e69 	.word	0x6c616e69
   17dcc:	00000000 	.word	0x00000000
   17dd0:	4c554e28 	.word	0x4c554e28
   17dd4:	0000294c 	.word	0x0000294c

00017dd8 <Clock_Ip_au8DividerCallbackIndex>:
   17dd8:	0e0d0c00 06030201 0a070409 000b0805     ................

00017de8 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00017df8 <Clock_Ip_au8XoscCallbackIndex>:
   17df8:	00000100 00000000 00000000 00000000     ................

00017e08 <Clock_Ip_au8IrcoscCallbackIndex>:
   17e08:	03020100 00000004 00000000 00000000     ................

00017e18 <Clock_Ip_au8GateCallbackIndex>:
   17e18:	06010200 01040301 00000500 00000000     ................

00017e28 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00017e38 <Clock_Ip_au8PllCallbackIndex>:
   17e38:	00000100 00000000 00000000 00000000     ................

00017e48 <Clock_Ip_au8SelectorCallbackIndex>:
   17e48:	0a090800 03020109 07060504 00000000     ................

00017e58 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00017e68 <Clock_Ip_au8CmuCallbackIndex>:
	...

00017e78 <Clock_Ip_au8ClockFeatures>:
	...
   17e88:	01000000 00000000 00000000 00000002     ................
   17e98:	00000000 00000300 00000000 00040000     ................
   17ea8:	00000000 05000000 00000000 00000000     ................
   17eb8:	00000006 00000000 00000100 00000000     ................
   17ec8:	00010000 00000000 04000000 00000000     ................
   17ed8:	00000000 00000005 00000001 00000401     ................
   17ee8:	00000200 00050100 00030000 04020000     ................
   17ef8:	04000000 02000000 00000005 00000005     ................
   17f08:	00000403 00000600 00050300 00070000     ................
   17f18:	05000000 00000000 00000000 00000006     ................
	...
   17f58:	00050000 00000000 06000000 00000100     ................
   17f68:	00000000 00030007 00000000 00000000     ................
   17f78:	00000000 00060000 00000000 07000000     ................
   17f88:	00000100 00000000 00030008 00000000     ................
	...
   17fa0:	00090000 00000000 0a000000 00000100     ................
   17fb0:	00000000 0003000b 00000000 00000000     ................
   17fc0:	00000000 000c0000 00000000 0d000000     ................
   17fd0:	00000100 00000000 0003000e 00000000     ................
   17fe0:	00000800 00000000 00090000 00000000     ................
   17ff0:	0a000000 00000000 00000000 0000000b     ................
   18000:	00000000 00000b01 00000000 000b0200     ................
   18010:	00000000 0b030000 00000000 00000000     ................
	...
   18028:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   18038:	01000000 00000000 00000000 00000007     ................
   18048:	00007300 00000700 00320000 00090000     .s........2.....
   18058:	02000000 07000000 00000000 00000021     ............!...
   18068:	00000009 00000400 00000900 00030000     ................
   18078:	00070000 61000000 07000000 00000000     .......a........
   18088:	00000024 00000007 00002500 00000700     $........%......
   18098:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   180a8:	00000000 00000020 38000004 00003800     .... ......8.8..
   180b8:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   180c8:	04000000 00260000 00000026 66000004     ......&.&......f
   180d8:	00006600 00000400 00370037 00040000     .f......7.7.....
   180e8:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   180f8:	2e000004 00002e00 00000200 00404040     ............@@@.
   18108:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   18118:	0000006b 6c000004 00006c00 00000900     k......l.l......
   18128:	00010000 00090000 00000000 07000000     ................
   18138:	00000000 00000036 00000007 00003100     ....6........1..
   18148:	00000700 00490000 00070000 4a000000     ......I........J
   18158:	07000000 00000000 0000004b 00000007     ........K.......
   18168:	00004c00 00000700 004d0000 00070000     .L........M.....
   18178:	3d000000 03000000 00000000 00000000     ...=............

00018188 <Clock_Ip_au16SelectorEntryHardwareValue>:
   18188:	01010a03 01010001 04040002 02000603     ................
   18198:	00010810 02020100 00000000 00000007     ................
   181a8:	00000009 00000000 00000c0e 00000000     ................
	...

000181e0 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   181e0:	00020000 00000300 00000601 00000000     ................
	...

00018210 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   18210:	00000700 00000000 02020000 01010303     ................
   18220:	03020606 00000000 00000000 00000000     ................
	...

00018240 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   18240:	00000001 00000000 02020000 01010303     ................
   18250:	03020606 00000000 00000000 00000000     ................
	...

00018270 <Clock_Ip_au8DividerValueHardwareValue>:
   18270:	00020100 00000003 00000004 00000000     ................
   18280:	00000005 00000000 00000000 00000000     ................
   18290:	00000006 00000000 00000000 00000000     ................
	...
   182b0:	00000007                                ....

000182b4 <Clock_Ip_apxScgPeriphAsyncDivs>:
   182b4:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

000182c4 <Clock_Ip_aeSourceTypeClockName>:
   182c4:	00000000 00000001 00000001 00000001     ................
   182d4:	00000001 00000001 00000001 00000001     ................
   182e4:	00000002 00000003 00000001 00000001     ................
   182f4:	00000001 00000001 00000002 00000002     ................
   18304:	00000003 00000003 00000001 00000001     ................
   18314:	00000004 00000004 00000004 00000004     ................
	...

00018380 <Clock_Ip_aeHwPllName>:
   18380:	00000009                                ....

00018384 <Clock_Ip_aeHwDfsName>:
   18384:	00000057                                W...

00018388 <Clock_Ip_axDividerCallbacks>:
   18388:	00002f2d 00002f37 00002f51 00002f6b     -/..7/..Q/..k/..
   18398:	00002f85 00002f9f 00002fb9 00002fd3     ./.../.../.../..
   183a8:	00002fed 00003007 00003021 0000303b     ./...0..!0..;0..
   183b8:	00003055 0000306f 00003089              U0..o0...0..

000183c4 <Clock_Ip_axDividerTriggerCallbacks>:
   183c4:	000033fd 000033fd                       .3...3..

000183cc <Clock_Ip_axExtOscCallbacks>:
   183cc:	00003409 00003409 00003409 00003413     .4...4...4...4..
   183dc:	00003409 0000341d 00003437 00003451     .4...4..74..Q4..
   183ec:	000034d5 000034e9                       .4...4..

000183f4 <Clock_Ip_axFracDivCallbacks>:
   183f4:	000036a9 000036a9 000036b3              .6...6...6..

00018400 <Clock_Ip_axGateCallbacks>:
   18400:	000036cd 000036d7 000037d7 000037f1     .6...6...7...7..
   18410:	00003787 000037a1 00003737 00003751     .7...7..77..Q7..
   18420:	000036e7 00003701 00003827 00003841     .6...7..'8..A8..
   18430:	00003877 00003891                       w8...8..

00018438 <Clock_Ip_axIntOscCallbacks>:
   18438:	00003a3d 00003a3d 00003a47 00003a51     =:..=:..G:..Q:..
   18448:	00003a6b 00003a85 00003a99 00003ab3     k:...:...:...:..
   18458:	00003acd 00003ae1 00003afb 00003b15     .:...:...:...;..
   18468:	00003bbd 00003bd7 00003bf1              .;...;...;..

00018474 <Clock_Ip_axCmuCallbacks>:
   18474:	0000418d 00004197 000041a3 0000418d     .A...A...A...A..

00018484 <Clock_Ip_axPllCallbacks>:
   18484:	000041ad 000041ad 000041b7 000041ad     .A...A...A...A..
   18494:	000041c3 000041cd 000041e7 00004201     .A...A...A...B..
   184a4:	000042a5 00004291                       .B...B..

000184ac <Clock_Ip_axPcfsCallbacks>:
   184ac:	00004401                                .D..

000184b0 <Clock_Ip_axSelectorCallbacks>:
   184b0:	0000440d 0000440d 00004417 00004431     .D...D...D..1D..
   184c0:	0000440d 0000444b 00004465 0000447f     .D..KD..eD...D..
   184d0:	00004499 000044b3 000044cd 000044e7     .D...D...D...D..
   184e0:	00004501 0000451b 00004535 0000454f     .E...E..5E..OE..
   184f0:	00004569 00004583 0000459d 000045b7     iE...E...E...E..
   18500:	000045d1 000045eb                       .E...E..

00018508 <ClockSource>:
   18508:	00000000 00000008 00000002 00000005     ................
	...
   18520:	00000009                                ....

00018524 <ResetReasonArray>:
   18524:	00000000 00000001 00000002 00000003     ................
   18534:	00000004 00000005 00000006 00000007     ................
   18544:	00000008 00000009 0000000a 0000000b     ................
   18554:	0000000c 0000000d 0000000e              ............

00018560 <Port_au32PortCiPortBaseAddr>:
   18560:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   18570:	4004d000                                ...@

00018574 <Port_au32PortCiGpioBaseAddr>:
   18574:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   18584:	400ff100                                ...@

00018588 <Adc_Ip_apxBase>:
   18588:	4003b000 40027000                       ...@.p.@

00018590 <Lpspi_Ip_apxBases>:
   18590:	4002c000 4002d000 4002e000              ...@...@...@

0001859c <Can_Ipw_apxStatus>:
   1859c:	1fff8e18 1fff9038                       ....8...

000185a4 <Flexcan_Ip_apxBase>:
   185a4:	40024000 40025000 4002b000              .@.@.P.@...@

000185b0 <payload_code.3>:
   185b0:	03020100 07060504 09090908 0a0a0a09     ................
   185c0:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
   185d0:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
   185e0:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
   185f0:	0000000f                                ....

000185f4 <flexcanBase.2>:
   185f4:	40024000 40025000 4002b000              .@.@.P.@...@

00018600 <maxMbNum.1>:
   18600:	00000020 00000010 00000010               ...........

0001860c <flexcanBase.0>:
   1860c:	40024000                                .@.@

00018610 <McuApis>:
   18610:	00000000 000173f0 00000002 000173fc     .....s.......s..
   18620:	00000008 0001740c 00000009 0001741c     .....t.......t..

00018630 <McuErrors>:
   18630:	00000011 00017434 0000000f 0001744c     ....4t......Lt..
   18640:	00000013 00017464 0000000b 00017480     ....dt.......t..
   18650:	0000000c 00017480 00000010 00017480     .....t.......t..

00018660 <PlatformApis>:
   18660:	00000020 00017498 00000021 000174a8      ....t..!....t..
   18670:	00000022 000174bc 00000023 000174d8     "....t..#....t..
   18680:	00000024 000174f4                       $....t..

00018688 <PlatformErrors>:
   18688:	00000001 00017514 00000004 00017524     .....u......$u..
   18698:	00000002 00017548                       ....Hu..

000186a0 <PortApis>:
   186a0:	00000000 00017560 00000001 0001756c     ....`u......lu..
   186b0:	00000004 00017584 00000002 00017598     .....u.......u..
   186c0:	00000003 000175b4                       .....u..

000186c8 <PortErrors>:
   186c8:	0000000a 000175cc 0000000e 000175e0     .....u.......u..
   186d8:	0000000c 00017434 000000f0 00017434     ....4t......4t..
   186e8:	0000000d 00017600 0000000f 0001744c     .....v......Lt..
   186f8:	00000010 00017480                       .....t..

00018700 <DioApis>:
   18700:	00000001 00017618 00000000 0001762c     .....v......,v..
   18710:	00000011 00017640 00000005 00017654     ....@v......Tv..
   18720:	00000004 0001766c 00000003 00017684     ....lv.......v..
   18730:	00000002 00017694 00000012 000176a4     .....v.......v..

00018740 <DioErrors>:
   18740:	00000021 000176bc 00000020 00017480     !....v.. ....t..
   18750:	0000000a 000176d8 00000014 000176f0     .....v.......v..
   18760:	0000001f 00017700 000000f0 0001771c     .....w.......w..

00018770 <PwmApis>:
   18770:	00000000 00017738 00000001 00017744     ....8w......Dw..
   18780:	00000002 00017754 00000003 00017768     ....Tw......hw..
   18790:	00000004 00017780 00000008 00017798     .....w.......w..

000187a0 <PwmErrors>:
   187a0:	00000010 000177b0 00000011 0001744c     .....w......Lt..
   187b0:	00000014 00017464 00000012 000177c8     ....dt.......w..
   187c0:	00000013 000177dc 00000015 00017480     .....w.......t..

000187d0 <AdcApis>:
   187d0:	00000000 00017800 00000001 0001780c     .....x.......x..
   187e0:	00000002 0001781c 00000003 00017838     .....x......8x..
   187f0:	00000004 00017854 00000009 00017864     ....Tx......dx..
   18800:	00000029 0001787c 0000000c 0001788c     )...|x.......x..
   18810:	0000000a 000178a4                       .....x..

00018818 <AdcErrors>:
   18818:	0000000a 0001744c 0000000d 00017464     ....Lt......dt..
   18828:	00000014 00017514 00000015 000178bc     .....u.......x..
   18838:	00000019 000178d0 0000002b 000178f0     .....x..+....x..

00018848 <SchedulerApis>:
   18848:	00000000 00017910 00000002 00017924     .....y......$y..
   18858:	00000003 00017940 00000004 00017958     ....@y......Xy..
   18868:	00000005 00017970 00000006 00017988     ....py.......y..
   18878:	00000007 000179a0 00000008 000179b8     .....y.......y..
   18888:	00000009 000179d0 0000000a 000179e8     .....y.......y..
   18898:	0000000b 00017a00 0000000c 00017a18     .....z.......z..
   188a8:	0000000d 00017a30                       ....0z..

000188b0 <SchedulerErrors>:
   188b0:	00000000 000177b0 00000001 00017a4c     .....w......Lz..
   188c0:	00000002 00017a64 00000003 00017a80     ....dz.......z..
   188d0:	00000004 00017a98 00000005 00017abc     .....z.......z..
   188e0:	00000006 00017ad4                       .....z..

000188e8 <HwIoAb_ButtonsApis>:
   188e8:	00000000 00017aec 00000001 00017b04     .....z.......{..
   188f8:	00000002 00017b20                       .... {..

00018900 <HwIoAb_ButtonsErrors>:
   18900:	00000000 000177b0 00000001 00017b40     .....w......@{..
   18910:	00000002 00017b54 00000003 00017b6c     ....T{......l{..

00018920 <HwIoAb_LedsApis>:
   18920:	00000000 00017b84 00000001 00017b98     .....{.......{..
   18930:	00000002 00017bb0 00000003 00017bc8     .....{.......{..

00018940 <HwIoAb_LedsErrors>:
   18940:	00000000 000177b0 00000001 00017be4     .....w.......{..
   18950:	00000002 00017b6c                       ....l{..

00018958 <HwIoAb_PotsApis>:
   18958:	00000000 00017bf4 00000001 00017c08     .....{.......|..
   18968:	00000002 00017c20                       .... |..

00018970 <HwIoAb_PotsErrors>:
   18970:	00000000 00017c3c 00000001 00017b6c     ....<|......l{..

00018980 <HwIoAb_BuzzerApis>:
   18980:	00000000 00017c54 00000001 00017c6c     ....T|......l|..
   18990:	00000002 00017c84                       .....|..

00018998 <HwIoAb_BuzzerErrors>:
   18998:	00000000 00017c9c                       .....|..

000189a0 <ModuleStrings>:
   189a0:	00000065 00017cb0 00000004 00018610     e....|..........
   189b0:	00000006 00018630 000000ff 00017cbc     ....0........|..
   189c0:	00000005 00018660 00000003 00018688     ....`...........
   189d0:	0000007c 00017ccc 00000005 000186a0     |....|..........
   189e0:	00000007 000186c8 00000078 00017cd8     ........x....|..
   189f0:	00000008 00018700 00000006 00018740     ............@...
   18a00:	00000079 00017ce4 00000006 00018770     y....|......p...
   18a10:	00000006 000187a0 0000007b 00017cf0     ........{....|..
   18a20:	00000009 000187d0 00000006 00018818     ................
   18a30:	0000012c 00017cfc 0000000d 00018848     ,....|......H...
   18a40:	00000007 000188b0 0000012d 00017d10     ........-....}..
   18a50:	00000003 000188e8 00000004 00018900     ................
   18a60:	0000012e 00017d30 00000004 00018920     ....0}...... ...
   18a70:	00000003 00018940 0000012f 00017d4c     ....@.../...L}..
   18a80:	00000003 00018958 00000002 00018970     ....X.......p...
   18a90:	00000130 00017d68 00000003 00018980     0...h}..........
   18aa0:	00000001 00018998                       ........

00018aa8 <Can_43_FLEXCAN_Driver_P2Func>:
   18aa8:	0000a6a9 0000a325 0000a4c9 0000a469     ....%.......i...
   18ab8:	0000a541 0000a5cd 0000a601 0000a655     A...........U...

00018ac8 <Can_43_FLEXCAN_Driver_Config>:
   18ac8:	00040000 00018aa8                       ........

00018ad0 <CanIf_CtrlPCConfig>:
   18ad0:	00000000 00018ac8 00000101 00018ac8     ................

00018ae0 <CanIf_PCConfig>:
   18ae0:	00000002 00018ad0                       ........

00018ae8 <CanIf_TxPdu>:
   18ae8:	00000000 00000100 00000002 00010002     ................
   18af8:	00000989 00000001 00000300 00000002     ................
   18b08:	00000003 00000a2d                       ....-...

00018b10 <CanIf_RxPdu>:
   18b10:	00010000 00010003 000009c1 00010001     ................
   18b20:	00000003 00000a65                       ....e...

00018b28 <CanIf_Can_43_FLEXCAN_HohToRxPduMapping>:
   18b28:	00018b10 00018b1c 00000000 00000000     ................

00018b38 <CanIf_Can_43_FLEXCAN_DrvConfig>:
   18b38:	00018b28                                (...

00018b3c <CanIf_CanDrvConfig>:
   18b3c:	00018b38                                8...

00018b40 <CanIf_Config>:
   18b40:	00000202 00018b3c 00018b10 00018ae8     ....<...........

00018b50 <Can_43_FLEXCANIpwHwChannelConfig0>:
   18b50:	000190c8                                ....

00018b54 <Can_43_FLEXCANIpwHwChannelConfig1>:
   18b54:	00019118                                ....

00018b58 <Can_au32HwBufferAddr_Ctrl0>:
   18b58:	4002b080 4002b090                       ...@...@

00018b60 <Can_au32HwBufferAddr_Ctrl1>:
   18b60:	40024080 40024090                       .@.@.@.@

00018b68 <Can_aHwFilter_Object0>:
   18b68:	00000200 dffc0000                       ........

00018b70 <Can_aHwFilter_Object1>:
   18b70:	00000400 dffc0000                       ........

00018b78 <Can_aCtrlOffsetToCtrlIDMap>:
   18b78:	0000ff01                                ....

00018b7c <Can_aHwObjIDToCtrlIDMap>:
   18b7c:	00010001                                ....

00018b80 <Can_aHwObjectConfig>:
	...
   18b8c:	ff010000 00010008 00018b68 00000000     ........h.......
   18b9c:	00000000 00018b60 00000001 00000000     ....`...........
   18bac:	00000000 ff010000 00010008 00018b70     ............p...
	...
   18bc4:	00018b58 00000002 00000001 00000000     X...............
   18bd4:	ff010000 00000008 00000000 00000003     ................
   18be4:	00000001 00018b64 00000003 00000001     ....d...........
   18bf4:	00000000 ff010000 00000008 00000000     ................
   18c04:	00000003 00000001 00018b5c              ........\...

00018c10 <Can_aBaudrateConfig_Ctrl0>:
   18c10:	06030000 001d0003 00000000 00000000     ................
	...

00018c28 <Can_apHwObject_Ctrl0>:
   18c28:	00018ba4 00018bec                       ........

00018c30 <Can_aBaudrateConfig_Ctrl1>:
   18c30:	06030000 001d0003 00000000 00000000     ................
	...

00018c48 <Can_apHwObject_Ctrl1>:
   18c48:	00018b80 00018bc8                       ........

00018c50 <Can_aControllerConfig>:
   18c50:	00020000 4002b000 00000001 ffffffff     .......@........
	...
   18c6c:	00010000 00018c10 00018b50 00000002     ........P.......
   18c7c:	00018c28 00000101 40024000 00000001     (........@.@....
   18c8c:	ffffffff 00000000 00000000 00000000     ................
   18c9c:	00010000 00018c30 00018b54 00000002     ....0...T.......
   18cac:	00018c48                                H...

00018cb0 <Can_apController>:
   18cb0:	00018c50 00018c80                       P.......

00018cb8 <Can_43_FLEXCAN_Config>:
   18cb8:	00000000 00000002 00018b78 00018b7c     ........x...|...
   18cc8:	00018b80 00018cb0                       ........

00018cd0 <Mcu_aClockConfigPB>:
	...
   18cd8:	14000002 0400000e 01000020 00000002     ........ .......
   18ce8:	01000001 00000001 00000005 00000001     ................
   18cf8:	00000000 00000057 00000000 00000000     ....W...........
	...
   18d10:	00000057 00000000 00000057 00000000     W.......W.......
	...
   18d38:	00000019 00000005 0000001a 00000002     ................
   18d48:	0000001b 00000005 0000002a 00000002     ........*.......
   18d58:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   18d68:	00000041 00000000 00000042 00000000     A.......B.......
   18d78:	00000031 0000000b 00000045 00000000     1.......E.......
   18d88:	00000046 0000000b 00000047 00000000     F.......G.......
   18d98:	00000044 00000000 00000030 0000000b     D.......0.......
   18da8:	0000003d 00000000 00000043 00000000     =.......C.......
   18db8:	00000049 00000000 0000004a 00000000     I.......J.......
   18dc8:	0000004b 00000000 00000048 00000000     K.......H.......
   18dd8:	00000057 00000057 00000057 00000057     W...W...W...W...
   18de8:	00000057 00000057 00000057 00000057     W...W...W...W...
   18df8:	00000057 00000057 00000057 00000057     W...W...W...W...
   18e08:	00000057 00000057 00000057 00000057     W...W...W...W...
   18e18:	0000000a 00000001 00000000 0000000b     ................
   18e28:	00000001 00000000 0000000c 00000001     ................
   18e38:	00000000 0000000d 00000002 00000000     ................
   18e48:	0000001d 00000001 00000000 0000001e     ................
   18e58:	00000002 00000000 0000001f 00000001     ................
   18e68:	00000000 00000021 00000001 00000000     ....!...........
   18e78:	00000022 00000002 00000000 00000023     "...........#...
   18e88:	00000001 00000000 00000025 00000002     ........%.......
   18e98:	00000000 00000026 00000004 00000000     ....&...........
   18ea8:	00000027 00000002 00000000 00000048     '...........H...
   18eb8:	00000001 00000001 00000057 00000000     ........W.......
   18ec8:	00000000 00000057 00000000 00000000     ....W...........
   18ed8:	00000057 00000000 00000000 00000057     W...........W...
	...
   18ef0:	00000057 00000000 00000000 00000057     W...........W...
	...
   18f08:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   18f24:	00000014 00007d00 00000015 00007d00     .....}.......}..
   18f34:	00000016 00007d00 00000017 00008000     .....}..........
   18f44:	00000030 00000001 00000031 00000001     0.......1.......
   18f54:	00000033 00000000 00000034 00000000     3.......4.......
   18f64:	00000036 00000000 00000039 00000000     6.......9.......
   18f74:	0000003a 00000001 0000003b 00000000     :.......;.......
   18f84:	0000003c 00000001 0000003d 00000000     <.......=.......
   18f94:	0000003e 00000000 0000003f 00000000     >.......?.......
   18fa4:	00000040 00000001 00000041 00000000     @.......A.......
   18fb4:	00000042 00000000 00000043 00000000     B.......C.......
   18fc4:	00000044 00000000 00000045 00000000     D.......E.......
   18fd4:	00000046 00000001 00000047 00000000     F.......G.......
   18fe4:	00000048 00000000 00000049 00000000     H.......I.......
   18ff4:	0000004a 00000000 0000004b 00000000     J.......K.......
   19004:	0000004e 00000001 0000004f 00000001     N.......O.......
   19014:	00000050 00000001 00000051 00000001     P.......Q.......
   19024:	00000052 00000001 00000053 00000001     R.......S.......
   19034:	00000054 00000001 00000055 00000000     T.......U.......
   19044:	00000057 00000000 00000057 00000000     W.......W.......
   19054:	00000057 00000000 00000057 00000000     W.......W.......
   19064:	00000057 00000000 00000057 00000000     W.......W.......
   19074:	00000057 00000000 00000057 00000000     W.......W.......
   19084:	00000057 00000000 00000057 00000000     W.......W.......
   19094:	00000000 00000057 00000000 00000057     ....W.......W...
	...

000190c8 <Flexcan_aCtrlConfigPB>:
   190c8:	00000002 00000000 00000000 00000000     ................
   190d8:	00000040 00000000 00000100 00000003     @...............
   190e8:	00000006 00000003 0000001d 00000000     ................
   190f8:	00000004 00000006 00000003 0000001d     ................
	...
   19110:	0000b8a9 0000b955 00000002 00000000     ....U...........
	...
   19128:	00000040 00000000 00000100 00000003     @...............
   19138:	00000006 00000003 0000001d 00000000     ................
   19148:	00000004 00000006 00000003 0000001d     ................
	...
   19160:	0000b8a9 0000b955                       ....U...

00019168 <aIrqConfiguration>:
   19168:	00000027 00000000 000083bd 00000028     '...........(...
   19178:	00000000 000083cd 0000005c 00000f01     ........\.......
   19188:	0000fdd5 0000005d 00000f01 0000fde5     ....]...........
   19198:	0000005f 00000f01 0000fdf5 0000004e     _...........N...
   191a8:	00000f01 0000fd45 0000004f 00000f01     ....E...O.......
   191b8:	0000fd55 00000051 00000f01 0000fd65     U...Q.......e...

000191c8 <intCtrlConfig>:
   191c8:	00000008 00019168                       ....h...

000191d0 <Lpspi_Ip_DeviceAttributes_Conf0Spi1Cs3>:
   191d0:	00000001 07070606 43200000 1fff8b28     .......... C(...

000191e0 <Lpspi_Ip_PhyUnitConfig_SPI1>:
   191e0:	00000001 00000000 00000001 00000000     ................
   191f0:	00000000                                ....

000191f4 <Mcu_Config>:
   191f4:	0000005a 00000000 00000001 00000001     Z...............
   19204:	00019890 00018cd0 0001989c              ............

00019210 <OsIf_xPredefinedConfig>:
   19210:	00000000 02dc6c00                       .....l..

00019218 <OsIf_apxPredefinedConfig>:
   19218:	00019210                                ....

0001921c <Platform_uConfiguration>:
   1921c:	00019224                                $...

00019220 <Platform_Config>:
   19220:	0001921c                                ....

00019224 <ipwConfig>:
   19224:	000191c8 00000000                       ........

0001922c <Port_au16PinDescription>:
   1922c:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1923c:	0001ffff 0003ffff 0003ffff 0003ffff     ................
   1924c:	0003ffff 0001ffff 0003ffcf 0003ffff     ................
   1925c:	0003ffff 0003fcff 0001dfef 0003f36f     ............o...
   1926c:	0003fe3f 0003f3ff 00026e3f 0001bebf     ?.......?n......
   1927c:	0002cf9f 0000302f 000030cc 000183ef     ..../0...0......
   1928c:	0001ec7c 00000b1f 00000023 00000010     |.......#.......
   1929c:	0001010c 00000033 000072cf 0000003c     ....3....r..<...
   192ac:	0000cff3 00001b2f 00018c7f 00000433     ..../.......3...
   192bc:	00000000 00000030 0000600b 00018c38     ....0....`..8...

000192cc <g_pin_mux_InitConfigArr>:
   192cc:	4004b000 400ff080 00000008 00000002     ...@...@........
   192dc:	00000001 00000002 00000000 00000000     ................
	...
   192f4:	4004b000 400ff080 00000009 00000002     ...@...@........
   19304:	00000001 00000002 00000000 00000000     ................
	...
   1931c:	4004b000 400ff080 0000000a 00000002     ...@...@........
   1932c:	00000001 00000002 00000000 00000000     ................
	...
   19344:	4004b000 400ff080 0000000b 00000002     ...@...@........
   19354:	00000001 00000002 00000000 00000000     ................
	...
   1936c:	4004b000 400ff080 0000000d 00000002     ...@...@........
   1937c:	00000001 00000002 00000000 00000000     ................
	...
   19394:	4004b000 400ff080 0000000e 00000002     ...@...@........
   193a4:	00000001 00000002 00000000 00000000     ................
	...
   193bc:	4004b000 00000000 00000010 00000002     ...@............
   193cc:	00000003 00000001 00000000 00000000     ................
	...
   193e4:	4004b000 00000000 00000011 00000002     ...@............
   193f4:	00000003 00000002 00000000 00000000     ................
	...
   1940c:	4004d000 400ff100 0000000c 00000002     ...@...@........
   1941c:	00000001 00000001 00000000 00000000     ................
	...
   19434:	4004d000 00000000 00000004 00000002     ...@............
   19444:	00000005 00000001 00000000 00000000     ................
	...
   1945c:	4004d000 00000000 00000005 00000002     ...@............
   1946c:	00000005 00000002 00000000 00000000     ................
	...
   19484:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   19494:	00000001 00000001 00000000 00000000     ................
	...
   194ac:	40049000 400ff000 0000000c 00000002     ...@...@........
   194bc:	00000001 00000001 00000000 00000000     ................
	...
   194d4:	40049000 00000000 0000000d 00000002     ...@............
   194e4:	00000002 00000002 00000000 00000000     ................
	...
   194fc:	4004a000 00000000 00000001 00000002     ...@............
   1950c:	00000000 00000001 00000000 00000000     ................
	...
   19524:	4004a000 00000000 0000000d 00000002     ...@............
   19534:	00000000 00000001 00000000 00000000     ................
	...
   1954c:	4004a000 00000000 0000000e 00000002     ...@............
   1955c:	00000003 00000002 00000000 00000000     ................
	...
   19574:	4004a000 00000000 0000000f 00000002     ...@............
   19584:	00000003 00000001 00000000 00000000     ................
	...
   1959c:	4004a000 00000000 00000010 00000002     ...@............
   195ac:	00000003 00000002 00000000 00000000     ................
	...
   195c4:	4004a000 00000000 00000011 00000002     ...@............
   195d4:	00000003 00000002 00000000 00000000     ................
	...

000195ec <au8Port_PartitionList>:
   195ec:	00000001                                ....

000195f0 <au32Port_PinToPartitionMap>:
   195f0:	00000001 00000001 00000001 00000001     ................
   19600:	00000001 00000001 00000001 00000001     ................
   19610:	00000001 00000001 00000001 00000001     ................
   19620:	00000001 00000001 00000001 00000001     ................
   19630:	00000001 00000001 00000001 00000001     ................

00019640 <Port_au16NoUnUsedPadsArrayDefault>:
   19640:	00010000 00030002 00070006 00090008     ................
   19650:	000e000b 0010000f 00200011 00230022     .......... .".#.
   19660:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   19670:	0040002c 00420041 00460043 004c0047     ,.@.A.B.C.F.G.L.
   19680:	0060004f 00620061 00640063 00660065     O.`.a.b.c.d.e.f.
   19690:	00680067 006a0069 006c006b 006e006d     g.h.i.j.k.l.m.n.
   196a0:	0070006f 00810080 00830082 00870086     o.p.............
   196b0:	00890088 008b008a 008e008d 0090008f     ................

000196c0 <Port_UnUsedPin>:
   196c0:	00000000 00000001 00000000              ............

000196cc <Port_aPinConfigDefault>:
   196cc:	00000048 00000100 00000000 00000002     H...............
   196dc:	00010001 00000049 00000100 00000000     ....I...........
   196ec:	00000002 00010101 0000004a 00000100     ........J.......
   196fc:	00000000 00000002 00010101 0000008c     ................
   1970c:	00000100 00000000 00000001 00010101     ................
   1971c:	0000004b 00000100 00000000 00000002     K...............
   1972c:	00010101 0000004d 00000100 00000000     ....M...........
   1973c:	00000002 00010101 0000004e 00000100     ........N.......
   1974c:	00000000 00000002 00010101 00000071     ............q...
   1975c:	00000100 00000000 00000001 00010101     ................
   1976c:	0000000c 00000100 00000000 00000001     ................
   1977c:	00010101 00000021 00000000 00000002     ....!...........
   1978c:	00000000 00010000 0000002d 00000000     ........-.......
   1979c:	00000002 00000000 00010000 0000000d     ................
   197ac:	00000200 00000000 00000002 00010000     ................
   197bc:	00000050 00000300 00000000 00000001     P...............
   197cc:	00010000 00000051 00000300 00000000     ....Q...........
   197dc:	00000002 00010000 0000002e 00000300     ................
   197ec:	00000000 00000002 00010000 0000002f     ............/...
   197fc:	00000300 00000000 00000001 00010000     ................
   1980c:	00000030 00000300 00000000 00000002     0...............
   1981c:	00010000 00000031 00000300 00000000     ....1...........
   1982c:	00000002 00010000 00000084 00000500     ................
   1983c:	00000000 00000001 00010000 00000085     ................
   1984c:	00000500 00000000 00000002 00010000     ................

0001985c <Port_Config>:
   1985c:	00400014 00019640 000196c0 000196cc     ..@.@...........
	...
   19874:	000195f0 000195ec 000192cc              ............

00019880 <Power_Ip_RCM_ConfigPB>:
	...

00019888 <Power_Ip_PMC_ConfigPB>:
   19888:	00000000                                ....

0001988c <Power_Ip_SMC_ConfigPB>:
   1988c:	00000000                                ....

00019890 <Power_Ip_aModeConfigPB>:
	...

0001989c <Power_Ip_HwIPsConfigPB>:
   1989c:	00019880 00019888 0001988c              ............

000198a8 <Spi_ExternalDeviceConfig_Conf0Spi1Cs3>:
   198a8:	00000000 00000001 000191d0 00000000     ................

000198b8 <Spi_aExternalDeviceConfigList>:
   198b8:	000198a8                                ....

000198bc <Spi_HwUnitConfig_SPI1>:
   198bc:	00000000 00000001 00000000 000191e0     ................
   198cc:	00000001                                ....

000198d0 <Spi_aHwUnitConfigList>:
   198d0:	000198bc                                ....

000198d4 <Spi_ChannelConfig_Spi1Cs3_Control>:
   198d4:	00000001 00000008 00000001 00000004     ................
   198e4:	1fff98f8 00000000 1fff8df8              ............

000198f0 <Spi_ChannelConfig_Spi1Cs3_Data>:
   198f0:	00000001 00000008 00000001 00000004     ................
   19900:	1fff9904 00000000 1fff8dfc              ............

0001990c <Spi_aChannelConfigList>:
   1990c:	000198d4 000198f0                       ........

00019914 <Spi_Spi1Cs3_W_R_Job_ChannelAssignment>:
   19914:	00000100                                ....

00019918 <Spi_JobConfig_Spi1Cs3_W_R_Job>:
   19918:	00000002 00019914 00000000 00000000     ................
	...
   19930:	1fff8df4 00000000 000198b8              ............

0001993c <Spi_aJobConfigList>:
   1993c:	00019918                                ....

00019940 <Spi_Spi1Cs3_Sequence_W_R_JobAssignment>:
   19940:	00000000                                ....

00019944 <Spi_SequenceConfig_Spi1Cs3_Sequence_W_R>:
   19944:	00000001 00000000 00019940 00000000     ........@.......
   19954:	00000000                                ....

00019958 <Spi_aSequenceConfigList>:
   19958:	00019944                                D...

0001995c <Spi_Config>:
   1995c:	00010001 00000000 00000000 0001990c     ................
   1996c:	0001993c 00019958 000198b8 000198d0     <...X...........

0001997c <_aInitStr.0>:
   1997c:	00000000 54540000 45522052 53454747     ......TTR REGGES
   1998c:	00000000                                ....

00019990 <_aV2C.0>:
   19990:	33323130 37363534 42413938 46454443     0123456789ABCDEF

000199a0 <__INIT_TABLE>:
   199a0:	00000002 	.word	0x00000002
   199a4:	1fff8b10 	.word	0x1fff8b10
   199a8:	000199c8 	.word	0x000199c8
   199ac:	000199e8 	.word	0x000199e8
   199b0:	1fff8800 	.word	0x1fff8800
   199b4:	00000000 	.word	0x00000000
   199b8:	00000310 	.word	0x00000310

000199bc <__ZERO_TABLE>:
   199bc:	00000001 	.word	0x00000001
   199c0:	1fff8b30 	.word	0x1fff8b30
   199c4:	1fff9dd0 	.word	0x1fff9dd0
