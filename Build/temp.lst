
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000c13 	.word	0x00000c13
  10:	00000c15 	.word	0x00000c15
  14:	00000c17 	.word	0x00000c17
  18:	00000c19 	.word	0x00000c19
	...
  2c:	00000c1b 	.word	0x00000c1b
  30:	00000c1d 	.word	0x00000c1d
  34:	00000000 	.word	0x00000000
  38:	00000c1f 	.word	0x00000c1f
  3c:	00000c21 	.word	0x00000c21
  40:	00000c23 	.word	0x00000c23
  44:	00000c23 	.word	0x00000c23
  48:	00000c23 	.word	0x00000c23
  4c:	00000c23 	.word	0x00000c23
  50:	00000c23 	.word	0x00000c23
  54:	00000c23 	.word	0x00000c23
  58:	00000c23 	.word	0x00000c23
  5c:	00000c23 	.word	0x00000c23
  60:	00000c23 	.word	0x00000c23
  64:	00000c23 	.word	0x00000c23
  68:	00000c23 	.word	0x00000c23
  6c:	00000c23 	.word	0x00000c23
  70:	00000c23 	.word	0x00000c23
  74:	00000c23 	.word	0x00000c23
  78:	00000c23 	.word	0x00000c23
  7c:	00000c23 	.word	0x00000c23
  80:	00000c23 	.word	0x00000c23
  84:	00000c23 	.word	0x00000c23
  88:	00000c23 	.word	0x00000c23
  8c:	00000c23 	.word	0x00000c23
  90:	00000c23 	.word	0x00000c23
  94:	00000c23 	.word	0x00000c23
  98:	00000c23 	.word	0x00000c23
  9c:	00000c23 	.word	0x00000c23
  a0:	00000c23 	.word	0x00000c23
  a4:	00000c23 	.word	0x00000c23
  a8:	00000c23 	.word	0x00000c23
  ac:	00000c23 	.word	0x00000c23
  b0:	00000c23 	.word	0x00000c23
  b4:	00000c23 	.word	0x00000c23
  b8:	00000c23 	.word	0x00000c23
  bc:	00000c23 	.word	0x00000c23
  c0:	00000c23 	.word	0x00000c23
  c4:	00000c23 	.word	0x00000c23
  c8:	00000c23 	.word	0x00000c23
  cc:	00000c23 	.word	0x00000c23
  d0:	00000c23 	.word	0x00000c23
  d4:	00000c23 	.word	0x00000c23
  d8:	00000c23 	.word	0x00000c23
  dc:	00000c23 	.word	0x00000c23
  e0:	00000c23 	.word	0x00000c23
  e4:	00000c23 	.word	0x00000c23
  e8:	00000c23 	.word	0x00000c23
  ec:	00000c23 	.word	0x00000c23
  f0:	00000c23 	.word	0x00000c23
  f4:	00000c23 	.word	0x00000c23
  f8:	00000c23 	.word	0x00000c23
  fc:	00000c23 	.word	0x00000c23
 100:	00000c23 	.word	0x00000c23
 104:	00000c23 	.word	0x00000c23
 108:	00000c23 	.word	0x00000c23
 10c:	00000c23 	.word	0x00000c23
 110:	00000c23 	.word	0x00000c23
 114:	00000c23 	.word	0x00000c23
 118:	00000c23 	.word	0x00000c23
 11c:	00000c23 	.word	0x00000c23
 120:	00000c23 	.word	0x00000c23
 124:	00000c23 	.word	0x00000c23
 128:	00000c23 	.word	0x00000c23
 12c:	00000c23 	.word	0x00000c23
 130:	00000c23 	.word	0x00000c23
 134:	00000c23 	.word	0x00000c23
 138:	00000c23 	.word	0x00000c23
 13c:	00000c23 	.word	0x00000c23
 140:	00000c23 	.word	0x00000c23
 144:	00000c23 	.word	0x00000c23
 148:	00000c23 	.word	0x00000c23
 14c:	00000c23 	.word	0x00000c23
 150:	00000c23 	.word	0x00000c23
 154:	00000c23 	.word	0x00000c23
 158:	00000c23 	.word	0x00000c23
 15c:	00000c23 	.word	0x00000c23
 160:	00000c23 	.word	0x00000c23
 164:	00000c23 	.word	0x00000c23
 168:	00000c23 	.word	0x00000c23
 16c:	00000c23 	.word	0x00000c23
 170:	00000c23 	.word	0x00000c23
 174:	00000c23 	.word	0x00000c23
 178:	00000c23 	.word	0x00000c23
 17c:	00000c23 	.word	0x00000c23
 180:	00000c23 	.word	0x00000c23
 184:	00000c23 	.word	0x00000c23
 188:	00000c23 	.word	0x00000c23
 18c:	00000c23 	.word	0x00000c23
 190:	00000c23 	.word	0x00000c23
 194:	00000c23 	.word	0x00000c23
 198:	00000c23 	.word	0x00000c23
 19c:	00000c23 	.word	0x00000c23
 1a0:	00000c23 	.word	0x00000c23
 1a4:	00000c23 	.word	0x00000c23
 1a8:	00000c23 	.word	0x00000c23
 1ac:	00000c23 	.word	0x00000c23
 1b0:	00000c23 	.word	0x00000c23
 1b4:	00000c23 	.word	0x00000c23
 1b8:	00000c23 	.word	0x00000c23
 1bc:	00000c23 	.word	0x00000c23
 1c0:	00000c23 	.word	0x00000c23
 1c4:	00000c23 	.word	0x00000c23
 1c8:	00000c23 	.word	0x00000c23
 1cc:	00000c23 	.word	0x00000c23
 1d0:	00000c23 	.word	0x00000c23
 1d4:	00000c23 	.word	0x00000c23
 1d8:	00000c23 	.word	0x00000c23
 1dc:	00000c23 	.word	0x00000c23
 1e0:	00000c23 	.word	0x00000c23
 1e4:	00000c23 	.word	0x00000c23
 1e8:	00000c23 	.word	0x00000c23
 1ec:	00000c23 	.word	0x00000c23
 1f0:	00000c23 	.word	0x00000c23
 1f4:	00000c23 	.word	0x00000c23
 1f8:	00000c23 	.word	0x00000c23
 1fc:	00000c23 	.word	0x00000c23
 200:	00000c23 	.word	0x00000c23
 204:	00000c23 	.word	0x00000c23
 208:	00000c23 	.word	0x00000c23
 20c:	00000c23 	.word	0x00000c23
 210:	00000c23 	.word	0x00000c23
 214:	00000c23 	.word	0x00000c23
 218:	00000c23 	.word	0x00000c23
 21c:	00000c23 	.word	0x00000c23
 220:	00000c23 	.word	0x00000c23
 224:	00000c23 	.word	0x00000c23
 228:	00000c23 	.word	0x00000c23
 22c:	00000c23 	.word	0x00000c23
 230:	00000c23 	.word	0x00000c23
 234:	00000c23 	.word	0x00000c23
 238:	00000c23 	.word	0x00000c23
 23c:	00000c23 	.word	0x00000c23
 240:	00000c23 	.word	0x00000c23
 244:	00000c23 	.word	0x00000c23
 248:	00000c23 	.word	0x00000c23
 24c:	00000c23 	.word	0x00000c23
 250:	00000c23 	.word	0x00000c23
 254:	00000c23 	.word	0x00000c23
 258:	00000c23 	.word	0x00000c23
 25c:	00000c23 	.word	0x00000c23
 260:	00000c23 	.word	0x00000c23
 264:	00000c23 	.word	0x00000c23
 268:	00000c23 	.word	0x00000c23
 26c:	00000c23 	.word	0x00000c23
 270:	00000c23 	.word	0x00000c23
 274:	00000c23 	.word	0x00000c23
 278:	00000c23 	.word	0x00000c23
 27c:	00000c23 	.word	0x00000c23
 280:	00000c23 	.word	0x00000c23
 284:	00000c23 	.word	0x00000c23
 288:	00000c23 	.word	0x00000c23
 28c:	00000c23 	.word	0x00000c23
 290:	00000c23 	.word	0x00000c23
 294:	00000c23 	.word	0x00000c23
 298:	00000c23 	.word	0x00000c23
 29c:	00000c23 	.word	0x00000c23
 2a0:	00000c23 	.word	0x00000c23
 2a4:	00000c23 	.word	0x00000c23
 2a8:	00000c23 	.word	0x00000c23
 2ac:	00000c23 	.word	0x00000c23
 2b0:	00000c23 	.word	0x00000c23
 2b4:	00000c23 	.word	0x00000c23
 2b8:	00000c23 	.word	0x00000c23
 2bc:	00000c23 	.word	0x00000c23
 2c0:	00000c23 	.word	0x00000c23
 2c4:	00000c23 	.word	0x00000c23
 2c8:	00000c23 	.word	0x00000c23
 2cc:	00000c23 	.word	0x00000c23
 2d0:	00000c23 	.word	0x00000c23
 2d4:	00000c23 	.word	0x00000c23
 2d8:	00000c23 	.word	0x00000c23
 2dc:	00000c23 	.word	0x00000c23
 2e0:	00000c23 	.word	0x00000c23
 2e4:	00000c23 	.word	0x00000c23
 2e8:	00000c23 	.word	0x00000c23
 2ec:	00000c23 	.word	0x00000c23
 2f0:	00000c23 	.word	0x00000c23
 2f4:	00000c23 	.word	0x00000c23
 2f8:	00000c23 	.word	0x00000c23
 2fc:	00000c23 	.word	0x00000c23
 300:	00000c23 	.word	0x00000c23
 304:	00000c23 	.word	0x00000c23
 308:	00000c23 	.word	0x00000c23
 30c:	00000c23 	.word	0x00000c23

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fafd 	bl	a80 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbbc 	bl	c08 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff98f4 	.word	0x1fff98f4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb07 	bl	bac <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * In this case only one HTH is used for transmission with one message buffer. For reception only one HRH is utilized.
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b500      	push	{lr}
     8b2:	b085      	sub	sp, #20
    //local data.
    //Transmit message (PDU) 1 (Message ID 0x300) for Can 2 controller.
    uint8 Message1_SDU[3] = { 0xAA, 0x52, 0xD5 }; //Data payload for message.
     8b4:	4a14      	ldr	r2, [pc, #80]	; (908 <main+0x58>)
     8b6:	ab03      	add	r3, sp, #12
     8b8:	6812      	ldr	r2, [r2, #0]
     8ba:	4611      	mov	r1, r2
     8bc:	8019      	strh	r1, [r3, #0]
     8be:	3302      	adds	r3, #2
     8c0:	0c12      	lsrs	r2, r2, #16
     8c2:	701a      	strb	r2, [r3, #0]
    PduInfoType Message1 = {
     8c4:	ab03      	add	r3, sp, #12
     8c6:	9300      	str	r3, [sp, #0]
     8c8:	2300      	movs	r3, #0
     8ca:	9301      	str	r3, [sp, #4]
     8cc:	2303      	movs	r3, #3
     8ce:	9302      	str	r3, [sp, #8]
        .SduLength = 3,
        .SduDataPtr = Message1_SDU,
        .MetaDataPtr = NULL_PTR
    };

    EcuM_Init();    //MCU configuration.
     8d0:	f000 fec4 	bl	165c <EcuM_Init>

    //SBC by default is in force normal mode so the CAN transceiver is already active.

    CanIf_SetControllerMode( CanIfFlexCan2 , CAN_CS_STARTED );   //Can 2 controller active in Can Bus.
     8d4:	2101      	movs	r1, #1
     8d6:	2000      	movs	r0, #0
     8d8:	f016 fbdf 	bl	1709a <CanIf_SetControllerMode>

    while( 1u ) {
        //Transmit messages every 5s.
        CanIf_Transmit( CanIfTxPDU_1, &Message1 );   //Writing in Can 2 message buffer 1.
     8dc:	466b      	mov	r3, sp
     8de:	4619      	mov	r1, r3
     8e0:	2001      	movs	r0, #1
     8e2:	f016 fab3 	bl	16e4c <CanIf_Transmit>

        while( CanIf_Can2_bTxFlag == FALSE ); //Waiting until messages are transmitted.
     8e6:	bf00      	nop
     8e8:	4b08      	ldr	r3, [pc, #32]	; (90c <main+0x5c>)
     8ea:	781b      	ldrb	r3, [r3, #0]
     8ec:	f083 0301 	eor.w	r3, r3, #1
     8f0:	b2db      	uxtb	r3, r3
     8f2:	2b00      	cmp	r3, #0
     8f4:	d1f8      	bne.n	8e8 <main+0x38>
        CanIf_Can2_bTxFlag = FALSE;  //Clearing transmit flag.
     8f6:	4b05      	ldr	r3, [pc, #20]	; (90c <main+0x5c>)
     8f8:	2200      	movs	r2, #0
     8fa:	701a      	strb	r2, [r3, #0]

        Delay( 5000 );  //Waiting 5s for next transmission.
     8fc:	f241 3088 	movw	r0, #5000	; 0x1388
     900:	f000 fecc 	bl	169c <Delay>
        CanIf_Transmit( CanIfTxPDU_1, &Message1 );   //Writing in Can 2 message buffer 1.
     904:	e7ea      	b.n	8dc <main+0x2c>
     906:	bf00      	nop
     908:	0001739c 	.word	0x0001739c
     90c:	1fff8b32 	.word	0x1fff8b32

00000910 <DevAssert>:
    #error "Unsupported architecture!"
#endif

/* Implement default assert macro */
static inline void DevAssert(volatile boolean x)
{
     910:	b082      	sub	sp, #8
     912:	4603      	mov	r3, r0
     914:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     918:	f89d 3007 	ldrb.w	r3, [sp, #7]
     91c:	b2db      	uxtb	r3, r3
     91e:	2b00      	cmp	r3, #0
     920:	d101      	bne.n	926 <DevAssert+0x16>
     922:	be00      	bkpt	0x0000
     924:	e7fd      	b.n	922 <DevAssert+0x12>
}
     926:	bf00      	nop
     928:	b002      	add	sp, #8
     92a:	4770      	bx	lr

0000092c <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     92c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     92e:	f3ef 8310 	mrs	r3, PRIMASK
     932:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     934:	4623      	mov	r3, r4
}
     936:	4618      	mov	r0, r3
     938:	f85d 4b04 	ldr.w	r4, [sp], #4
     93c:	4770      	bx	lr

0000093e <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     93e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     940:	f3ef 8310 	mrs	r3, PRIMASK
     944:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     946:	4623      	mov	r3, r4
}
     948:	4618      	mov	r0, r3
     94a:	f85d 4b04 	ldr.w	r4, [sp], #4
     94e:	4770      	bx	lr

00000950 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     950:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     952:	f3ef 8310 	mrs	r3, PRIMASK
     956:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     958:	4623      	mov	r3, r4
}
     95a:	4618      	mov	r0, r3
     95c:	f85d 4b04 	ldr.w	r4, [sp], #4
     960:	4770      	bx	lr

00000962 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     962:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     964:	f3ef 8310 	mrs	r3, PRIMASK
     968:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     96a:	4623      	mov	r3, r4
}
     96c:	4618      	mov	r0, r3
     96e:	f85d 4b04 	ldr.w	r4, [sp], #4
     972:	4770      	bx	lr

00000974 <Spi_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Spi_schm_read_msr(void)
{
     974:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     976:	f3ef 8310 	mrs	r3, PRIMASK
     97a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     97c:	4623      	mov	r3, r4
}
     97e:	4618      	mov	r0, r3
     980:	f85d 4b04 	ldr.w	r4, [sp], #4
     984:	4770      	bx	lr
	...

00000988 <CDD_UserTxConfirmation_Can_0>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can0 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_0( PduIdType TxPduId, Std_ReturnType result ) {
     988:	b082      	sub	sp, #8
     98a:	4603      	mov	r3, r0
     98c:	460a      	mov	r2, r1
     98e:	f8ad 3006 	strh.w	r3, [sp, #6]
     992:	4613      	mov	r3, r2
     994:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     998:	f89d 3005 	ldrb.w	r3, [sp, #5]
     99c:	2b00      	cmp	r3, #0
     99e:	d108      	bne.n	9b2 <CDD_UserTxConfirmation_Can_0+0x2a>
        Transmit_count++;
     9a0:	4b05      	ldr	r3, [pc, #20]	; (9b8 <CDD_UserTxConfirmation_Can_0+0x30>)
     9a2:	781b      	ldrb	r3, [r3, #0]
     9a4:	3301      	adds	r3, #1
     9a6:	b2da      	uxtb	r2, r3
     9a8:	4b03      	ldr	r3, [pc, #12]	; (9b8 <CDD_UserTxConfirmation_Can_0+0x30>)
     9aa:	701a      	strb	r2, [r3, #0]
        CanIf_Can0_bTxFlag = TRUE;
     9ac:	4b03      	ldr	r3, [pc, #12]	; (9bc <CDD_UserTxConfirmation_Can_0+0x34>)
     9ae:	2201      	movs	r2, #1
     9b0:	701a      	strb	r2, [r3, #0]
    }    
}
     9b2:	bf00      	nop
     9b4:	b002      	add	sp, #8
     9b6:	4770      	bx	lr
     9b8:	1fff98f0 	.word	0x1fff98f0
     9bc:	1fff8b30 	.word	0x1fff8b30

000009c0 <CDD_UserRxIndication_Can_0>:
 * @brief Callback function for the reception of a PDU (registered) of interest for the Can0 controller.
 * 
 * @param RxPduId ID (container) of the PDU received.
 * @param PduInfoPtr Pointer to PDU received (message)
 */
void CDD_UserRxIndication_Can_0( PduIdType RxPduId, const PduInfoType* PduInfoPtr ) {
     9c0:	b082      	sub	sp, #8
     9c2:	4603      	mov	r3, r0
     9c4:	9100      	str	r1, [sp, #0]
     9c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    (void) RxPduId;
    (void) PduInfoPtr;
    
    CanIf_Can0_bRxFlag = TRUE;   //Message received.
     9ca:	4b03      	ldr	r3, [pc, #12]	; (9d8 <CDD_UserRxIndication_Can_0+0x18>)
     9cc:	2201      	movs	r2, #1
     9ce:	701a      	strb	r2, [r3, #0]
}
     9d0:	bf00      	nop
     9d2:	b002      	add	sp, #8
     9d4:	4770      	bx	lr
     9d6:	bf00      	nop
     9d8:	1fff8b31 	.word	0x1fff8b31

000009dc <CDD_UserTxConfirmation_Can_2>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can2 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_2( PduIdType TxPduId, Std_ReturnType result ) {
     9dc:	b082      	sub	sp, #8
     9de:	4603      	mov	r3, r0
     9e0:	460a      	mov	r2, r1
     9e2:	f8ad 3006 	strh.w	r3, [sp, #6]
     9e6:	4613      	mov	r3, r2
     9e8:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     9ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d108      	bne.n	a06 <CDD_UserTxConfirmation_Can_2+0x2a>
        Transmit_count++;
     9f4:	4b05      	ldr	r3, [pc, #20]	; (a0c <CDD_UserTxConfirmation_Can_2+0x30>)
     9f6:	781b      	ldrb	r3, [r3, #0]
     9f8:	3301      	adds	r3, #1
     9fa:	b2da      	uxtb	r2, r3
     9fc:	4b03      	ldr	r3, [pc, #12]	; (a0c <CDD_UserTxConfirmation_Can_2+0x30>)
     9fe:	701a      	strb	r2, [r3, #0]
        CanIf_Can2_bTxFlag = TRUE;
     a00:	4b03      	ldr	r3, [pc, #12]	; (a10 <CDD_UserTxConfirmation_Can_2+0x34>)
     a02:	2201      	movs	r2, #1
     a04:	701a      	strb	r2, [r3, #0]
    }
}
     a06:	bf00      	nop
     a08:	b002      	add	sp, #8
     a0a:	4770      	bx	lr
     a0c:	1fff98f1 	.word	0x1fff98f1
     a10:	1fff8b32 	.word	0x1fff8b32

00000a14 <CDD_UserRxIndication_Can_2>:
 * @brief Callback function for the reception of a PDU (registered) of interest for the Can2 controller.
 * 
 * @param RxPduId ID (container) of the PDU received.
 * @param PduInfoPtr Pointer to PDU received (message)
 */
void CDD_UserRxIndication_Can_2( PduIdType RxPduId, const PduInfoType* PduInfoPtr ) {
     a14:	b086      	sub	sp, #24
     a16:	4603      	mov	r3, r0
     a18:	9100      	str	r1, [sp, #0]
     a1a:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data.
    static uint8 counter_RXPDU1 = 0;   //Message rx 1 counter.
    uint8 Data[8];  //Data payload received.

    //Obtaining data received.
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     a1e:	2300      	movs	r3, #0
     a20:	f88d 3017 	strb.w	r3, [sp, #23]
     a24:	e010      	b.n	a48 <CDD_UserRxIndication_Can_2+0x34>
        Data[i] = PduInfoPtr->SduDataPtr[i];
     a26:	9b00      	ldr	r3, [sp, #0]
     a28:	681a      	ldr	r2, [r3, #0]
     a2a:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a2e:	441a      	add	r2, r3
     a30:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a34:	7812      	ldrb	r2, [r2, #0]
     a36:	a906      	add	r1, sp, #24
     a38:	440b      	add	r3, r1
     a3a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     a3e:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a42:	3301      	adds	r3, #1
     a44:	f88d 3017 	strb.w	r3, [sp, #23]
     a48:	f89d 2017 	ldrb.w	r2, [sp, #23]
     a4c:	9b00      	ldr	r3, [sp, #0]
     a4e:	689b      	ldr	r3, [r3, #8]
     a50:	429a      	cmp	r2, r3
     a52:	d3e8      	bcc.n	a26 <CDD_UserRxIndication_Can_2+0x12>
    }

    //Verifying which message was received.
    switch ( RxPduId ) {
     a54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     a58:	2b01      	cmp	r3, #1
     a5a:	d106      	bne.n	a6a <CDD_UserRxIndication_Can_2+0x56>
        case 1: //ID 0x400 received
            counter_RXPDU1++;
     a5c:	4b06      	ldr	r3, [pc, #24]	; (a78 <CDD_UserRxIndication_Can_2+0x64>)
     a5e:	781b      	ldrb	r3, [r3, #0]
     a60:	3301      	adds	r3, #1
     a62:	b2da      	uxtb	r2, r3
     a64:	4b04      	ldr	r3, [pc, #16]	; (a78 <CDD_UserRxIndication_Can_2+0x64>)
     a66:	701a      	strb	r2, [r3, #0]
        break;
     a68:	e000      	b.n	a6c <CDD_UserRxIndication_Can_2+0x58>
        default:
        break;
     a6a:	bf00      	nop
    }
    
    CanIf_Can2_bRxFlag = TRUE;   //Message received.
     a6c:	4b03      	ldr	r3, [pc, #12]	; (a7c <CDD_UserRxIndication_Can_2+0x68>)
     a6e:	2201      	movs	r2, #1
     a70:	701a      	strb	r2, [r3, #0]
}
     a72:	bf00      	nop
     a74:	b006      	add	sp, #24
     a76:	4770      	bx	lr
     a78:	1fff98f2 	.word	0x1fff98f2
     a7c:	1fff8b33 	.word	0x1fff8b33

00000a80 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a80:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a82:	2300      	movs	r3, #0
     a84:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a86:	2300      	movs	r3, #0
     a88:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a8a:	2300      	movs	r3, #0
     a8c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a8e:	2300      	movs	r3, #0
     a90:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a92:	4b44      	ldr	r3, [pc, #272]	; (ba4 <init_data_bss+0x124>)
     a94:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a96:	4b44      	ldr	r3, [pc, #272]	; (ba8 <init_data_bss+0x128>)
     a98:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a9a:	9b05      	ldr	r3, [sp, #20]
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     aa0:	9b05      	ldr	r3, [sp, #20]
     aa2:	3304      	adds	r3, #4
     aa4:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     aa6:	9b05      	ldr	r3, [sp, #20]
     aa8:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     aaa:	2300      	movs	r3, #0
     aac:	9309      	str	r3, [sp, #36]	; 0x24
     aae:	e03d      	b.n	b2c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ab2:	4613      	mov	r3, r2
     ab4:	005b      	lsls	r3, r3, #1
     ab6:	4413      	add	r3, r2
     ab8:	009b      	lsls	r3, r3, #2
     aba:	461a      	mov	r2, r3
     abc:	9b03      	ldr	r3, [sp, #12]
     abe:	4413      	add	r3, r2
     ac0:	685b      	ldr	r3, [r3, #4]
     ac2:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ac6:	4613      	mov	r3, r2
     ac8:	005b      	lsls	r3, r3, #1
     aca:	4413      	add	r3, r2
     acc:	009b      	lsls	r3, r3, #2
     ace:	461a      	mov	r2, r3
     ad0:	9b03      	ldr	r3, [sp, #12]
     ad2:	4413      	add	r3, r2
     ad4:	681b      	ldr	r3, [r3, #0]
     ad6:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ada:	4613      	mov	r3, r2
     adc:	005b      	lsls	r3, r3, #1
     ade:	4413      	add	r3, r2
     ae0:	009b      	lsls	r3, r3, #2
     ae2:	461a      	mov	r2, r3
     ae4:	9b03      	ldr	r3, [sp, #12]
     ae6:	4413      	add	r3, r2
     ae8:	689b      	ldr	r3, [r3, #8]
     aea:	4619      	mov	r1, r3
     aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aee:	4613      	mov	r3, r2
     af0:	005b      	lsls	r3, r3, #1
     af2:	4413      	add	r3, r2
     af4:	009b      	lsls	r3, r3, #2
     af6:	461a      	mov	r2, r3
     af8:	9b03      	ldr	r3, [sp, #12]
     afa:	4413      	add	r3, r2
     afc:	685b      	ldr	r3, [r3, #4]
     afe:	1acb      	subs	r3, r1, r3
     b00:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b02:	2300      	movs	r3, #0
     b04:	9308      	str	r3, [sp, #32]
     b06:	e00a      	b.n	b1e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     b08:	9a00      	ldr	r2, [sp, #0]
     b0a:	9b08      	ldr	r3, [sp, #32]
     b0c:	441a      	add	r2, r3
     b0e:	9901      	ldr	r1, [sp, #4]
     b10:	9b08      	ldr	r3, [sp, #32]
     b12:	440b      	add	r3, r1
     b14:	7812      	ldrb	r2, [r2, #0]
     b16:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b18:	9b08      	ldr	r3, [sp, #32]
     b1a:	3301      	adds	r3, #1
     b1c:	9308      	str	r3, [sp, #32]
     b1e:	9a08      	ldr	r2, [sp, #32]
     b20:	9b06      	ldr	r3, [sp, #24]
     b22:	429a      	cmp	r2, r3
     b24:	d3f0      	bcc.n	b08 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b28:	3301      	adds	r3, #1
     b2a:	9309      	str	r3, [sp, #36]	; 0x24
     b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b2e:	9b07      	ldr	r3, [sp, #28]
     b30:	429a      	cmp	r2, r3
     b32:	d3bd      	bcc.n	ab0 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b34:	9b04      	ldr	r3, [sp, #16]
     b36:	681b      	ldr	r3, [r3, #0]
     b38:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b3a:	9b04      	ldr	r3, [sp, #16]
     b3c:	3304      	adds	r3, #4
     b3e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b40:	9b04      	ldr	r3, [sp, #16]
     b42:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b44:	2300      	movs	r3, #0
     b46:	9309      	str	r3, [sp, #36]	; 0x24
     b48:	e024      	b.n	b94 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b4c:	00db      	lsls	r3, r3, #3
     b4e:	9a02      	ldr	r2, [sp, #8]
     b50:	4413      	add	r3, r2
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b58:	00db      	lsls	r3, r3, #3
     b5a:	9a02      	ldr	r2, [sp, #8]
     b5c:	4413      	add	r3, r2
     b5e:	685b      	ldr	r3, [r3, #4]
     b60:	4619      	mov	r1, r3
     b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b64:	00db      	lsls	r3, r3, #3
     b66:	9a02      	ldr	r2, [sp, #8]
     b68:	4413      	add	r3, r2
     b6a:	681b      	ldr	r3, [r3, #0]
     b6c:	1acb      	subs	r3, r1, r3
     b6e:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b70:	2300      	movs	r3, #0
     b72:	9308      	str	r3, [sp, #32]
     b74:	e007      	b.n	b86 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b76:	9a01      	ldr	r2, [sp, #4]
     b78:	9b08      	ldr	r3, [sp, #32]
     b7a:	4413      	add	r3, r2
     b7c:	2200      	movs	r2, #0
     b7e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b80:	9b08      	ldr	r3, [sp, #32]
     b82:	3301      	adds	r3, #1
     b84:	9308      	str	r3, [sp, #32]
     b86:	9a08      	ldr	r2, [sp, #32]
     b88:	9b06      	ldr	r3, [sp, #24]
     b8a:	429a      	cmp	r2, r3
     b8c:	d3f3      	bcc.n	b76 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b90:	3301      	adds	r3, #1
     b92:	9309      	str	r3, [sp, #36]	; 0x24
     b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b96:	9b07      	ldr	r3, [sp, #28]
     b98:	429a      	cmp	r2, r3
     b9a:	d3d6      	bcc.n	b4a <init_data_bss+0xca>
        }
    }
}
     b9c:	bf00      	nop
     b9e:	bf00      	nop
     ba0:	b00a      	add	sp, #40	; 0x28
     ba2:	4770      	bx	lr
     ba4:	00019950 	.word	0x00019950
     ba8:	0001996c 	.word	0x0001996c

00000bac <sys_m4_cache_init>:
{
     bac:	b084      	sub	sp, #16
     bae:	4603      	mov	r3, r0
     bb0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     bb4:	2300      	movs	r3, #0
     bb6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bbe:	2b00      	cmp	r3, #0
     bc0:	d118      	bne.n	bf4 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     bc2:	4b10      	ldr	r3, [pc, #64]	; (c04 <sys_m4_cache_init+0x58>)
     bc4:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     bc8:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     bca:	4b0e      	ldr	r3, [pc, #56]	; (c04 <sys_m4_cache_init+0x58>)
     bcc:	681b      	ldr	r3, [r3, #0]
     bce:	4a0d      	ldr	r2, [pc, #52]	; (c04 <sys_m4_cache_init+0x58>)
     bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     bd4:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     bd6:	bf00      	nop
     bd8:	4b0a      	ldr	r3, [pc, #40]	; (c04 <sys_m4_cache_init+0x58>)
     bda:	681b      	ldr	r3, [r3, #0]
     bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     be4:	d0f8      	beq.n	bd8 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     be6:	4b07      	ldr	r3, [pc, #28]	; (c04 <sys_m4_cache_init+0x58>)
     be8:	681b      	ldr	r3, [r3, #0]
     bea:	4a06      	ldr	r2, [pc, #24]	; (c04 <sys_m4_cache_init+0x58>)
     bec:	f043 0301 	orr.w	r3, r3, #1
     bf0:	6013      	str	r3, [r2, #0]
     bf2:	e002      	b.n	bfa <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     bf4:	2301      	movs	r3, #1
     bf6:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bfe:	4618      	mov	r0, r3
     c00:	b004      	add	sp, #16
     c02:	4770      	bx	lr
     c04:	e0082000 	.word	0xe0082000

00000c08 <startup_go_to_user_mode>:
}
     c08:	bf00      	nop
     c0a:	4770      	bx	lr

00000c0c <Sys_GetCoreID>:
    return 0U;
     c0c:	2300      	movs	r3, #0
}
     c0e:	4618      	mov	r0, r3
     c10:	4770      	bx	lr

00000c12 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     c12:	e7fe      	b.n	c12 <HardFault_Handler>

00000c14 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     c14:	e7fe      	b.n	c14 <MemManage_Handler>

00000c16 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     c16:	e7fe      	b.n	c16 <BusFault_Handler>

00000c18 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     c18:	e7fe      	b.n	c18 <UsageFault_Handler>

00000c1a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     c1a:	e7fe      	b.n	c1a <SVC_Handler>

00000c1c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     c1c:	e7fe      	b.n	c1c <DebugMon_Handler>

00000c1e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     c1e:	e7fe      	b.n	c1e <PendSV_Handler>

00000c20 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c20:	e7fe      	b.n	c20 <SysTick_Handler>

00000c22 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c22:	e7fe      	b.n	c22 <undefined_handler>

00000c24 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     c24:	b500      	push	{lr}
     c26:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     c28:	4b26      	ldr	r3, [pc, #152]	; (cc4 <_DoInit+0xa0>)
     c2a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     c2c:	22a8      	movs	r2, #168	; 0xa8
     c2e:	2100      	movs	r1, #0
     c30:	9800      	ldr	r0, [sp, #0]
     c32:	f000 fd67 	bl	1704 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     c36:	9b00      	ldr	r3, [sp, #0]
     c38:	2203      	movs	r2, #3
     c3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     c3c:	9b00      	ldr	r3, [sp, #0]
     c3e:	2203      	movs	r2, #3
     c40:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     c42:	9b00      	ldr	r3, [sp, #0]
     c44:	4a20      	ldr	r2, [pc, #128]	; (cc8 <_DoInit+0xa4>)
     c46:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     c48:	9b00      	ldr	r3, [sp, #0]
     c4a:	4a20      	ldr	r2, [pc, #128]	; (ccc <_DoInit+0xa8>)
     c4c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     c4e:	9b00      	ldr	r3, [sp, #0]
     c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
     c54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     c56:	9b00      	ldr	r3, [sp, #0]
     c58:	2200      	movs	r2, #0
     c5a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     c5c:	9b00      	ldr	r3, [sp, #0]
     c5e:	2200      	movs	r2, #0
     c60:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c62:	9b00      	ldr	r3, [sp, #0]
     c64:	2200      	movs	r2, #0
     c66:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     c68:	9b00      	ldr	r3, [sp, #0]
     c6a:	4a17      	ldr	r2, [pc, #92]	; (cc8 <_DoInit+0xa4>)
     c6c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     c6e:	9b00      	ldr	r3, [sp, #0]
     c70:	4a17      	ldr	r2, [pc, #92]	; (cd0 <_DoInit+0xac>)
     c72:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     c74:	9b00      	ldr	r3, [sp, #0]
     c76:	2210      	movs	r2, #16
     c78:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     c7a:	9b00      	ldr	r3, [sp, #0]
     c7c:	2200      	movs	r2, #0
     c7e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     c80:	9b00      	ldr	r3, [sp, #0]
     c82:	2200      	movs	r2, #0
     c84:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c86:	9b00      	ldr	r3, [sp, #0]
     c88:	2200      	movs	r2, #0
     c8a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c8c:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c90:	2300      	movs	r3, #0
     c92:	9301      	str	r3, [sp, #4]
     c94:	e00c      	b.n	cb0 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     c96:	9b01      	ldr	r3, [sp, #4]
     c98:	f1c3 030f 	rsb	r3, r3, #15
     c9c:	4a0d      	ldr	r2, [pc, #52]	; (cd4 <_DoInit+0xb0>)
     c9e:	5cd1      	ldrb	r1, [r2, r3]
     ca0:	9a00      	ldr	r2, [sp, #0]
     ca2:	9b01      	ldr	r3, [sp, #4]
     ca4:	4413      	add	r3, r2
     ca6:	460a      	mov	r2, r1
     ca8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	3301      	adds	r3, #1
     cae:	9301      	str	r3, [sp, #4]
     cb0:	9b01      	ldr	r3, [sp, #4]
     cb2:	2b0f      	cmp	r3, #15
     cb4:	d9ef      	bls.n	c96 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     cb6:	f3bf 8f5f 	dmb	sy
}
     cba:	bf00      	nop
     cbc:	b003      	add	sp, #12
     cbe:	f85d fb04 	ldr.w	pc, [sp], #4
     cc2:	bf00      	nop
     cc4:	1fff9910 	.word	0x1fff9910
     cc8:	00017d74 	.word	0x00017d74
     ccc:	1fff99b8 	.word	0x1fff99b8
     cd0:	1fff9db8 	.word	0x1fff9db8
     cd4:	0001992c 	.word	0x0001992c

00000cd8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     cd8:	b500      	push	{lr}
     cda:	b08b      	sub	sp, #44	; 0x2c
     cdc:	9003      	str	r0, [sp, #12]
     cde:	9102      	str	r1, [sp, #8]
     ce0:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     ce2:	2300      	movs	r3, #0
     ce4:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     ce6:	9b03      	ldr	r3, [sp, #12]
     ce8:	68db      	ldr	r3, [r3, #12]
     cea:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     cec:	9b03      	ldr	r3, [sp, #12]
     cee:	691b      	ldr	r3, [r3, #16]
     cf0:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     cf2:	9a06      	ldr	r2, [sp, #24]
     cf4:	9b07      	ldr	r3, [sp, #28]
     cf6:	429a      	cmp	r2, r3
     cf8:	d905      	bls.n	d06 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     cfa:	9a06      	ldr	r2, [sp, #24]
     cfc:	9b07      	ldr	r3, [sp, #28]
     cfe:	1ad3      	subs	r3, r2, r3
     d00:	3b01      	subs	r3, #1
     d02:	9309      	str	r3, [sp, #36]	; 0x24
     d04:	e007      	b.n	d16 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     d06:	9b03      	ldr	r3, [sp, #12]
     d08:	689a      	ldr	r2, [r3, #8]
     d0a:	9906      	ldr	r1, [sp, #24]
     d0c:	9b07      	ldr	r3, [sp, #28]
     d0e:	1acb      	subs	r3, r1, r3
     d10:	4413      	add	r3, r2
     d12:	3b01      	subs	r3, #1
     d14:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     d16:	9b03      	ldr	r3, [sp, #12]
     d18:	689a      	ldr	r2, [r3, #8]
     d1a:	9b07      	ldr	r3, [sp, #28]
     d1c:	1ad3      	subs	r3, r2, r3
     d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d20:	4293      	cmp	r3, r2
     d22:	bf28      	it	cs
     d24:	4613      	movcs	r3, r2
     d26:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d2a:	9b01      	ldr	r3, [sp, #4]
     d2c:	4293      	cmp	r3, r2
     d2e:	bf28      	it	cs
     d30:	4613      	movcs	r3, r2
     d32:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d34:	9b03      	ldr	r3, [sp, #12]
     d36:	685a      	ldr	r2, [r3, #4]
     d38:	9b07      	ldr	r3, [sp, #28]
     d3a:	4413      	add	r3, r2
     d3c:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d40:	9902      	ldr	r1, [sp, #8]
     d42:	9805      	ldr	r0, [sp, #20]
     d44:	f000 fcd0 	bl	16e8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     d48:	9a08      	ldr	r2, [sp, #32]
     d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d4c:	4413      	add	r3, r2
     d4e:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     d50:	9a02      	ldr	r2, [sp, #8]
     d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d54:	4413      	add	r3, r2
     d56:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     d58:	9a01      	ldr	r2, [sp, #4]
     d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d5c:	1ad3      	subs	r3, r2, r3
     d5e:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     d60:	9a07      	ldr	r2, [sp, #28]
     d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d64:	4413      	add	r3, r2
     d66:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     d68:	9b03      	ldr	r3, [sp, #12]
     d6a:	689b      	ldr	r3, [r3, #8]
     d6c:	9a07      	ldr	r2, [sp, #28]
     d6e:	429a      	cmp	r2, r3
     d70:	d101      	bne.n	d76 <_WriteBlocking+0x9e>
      WrOff = 0u;
     d72:	2300      	movs	r3, #0
     d74:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d76:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     d7a:	9b03      	ldr	r3, [sp, #12]
     d7c:	9a07      	ldr	r2, [sp, #28]
     d7e:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     d80:	9b01      	ldr	r3, [sp, #4]
     d82:	2b00      	cmp	r3, #0
     d84:	d1b2      	bne.n	cec <_WriteBlocking+0x14>
  return NumBytesWritten;
     d86:	9b08      	ldr	r3, [sp, #32]
}
     d88:	4618      	mov	r0, r3
     d8a:	b00b      	add	sp, #44	; 0x2c
     d8c:	f85d fb04 	ldr.w	pc, [sp], #4

00000d90 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d90:	b500      	push	{lr}
     d92:	b089      	sub	sp, #36	; 0x24
     d94:	9003      	str	r0, [sp, #12]
     d96:	9102      	str	r1, [sp, #8]
     d98:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     d9a:	9b03      	ldr	r3, [sp, #12]
     d9c:	68db      	ldr	r3, [r3, #12]
     d9e:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     da0:	9b03      	ldr	r3, [sp, #12]
     da2:	689a      	ldr	r2, [r3, #8]
     da4:	9b07      	ldr	r3, [sp, #28]
     da6:	1ad3      	subs	r3, r2, r3
     da8:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     daa:	9a06      	ldr	r2, [sp, #24]
     dac:	9b01      	ldr	r3, [sp, #4]
     dae:	429a      	cmp	r2, r3
     db0:	d911      	bls.n	dd6 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     db2:	9b03      	ldr	r3, [sp, #12]
     db4:	685a      	ldr	r2, [r3, #4]
     db6:	9b07      	ldr	r3, [sp, #28]
     db8:	4413      	add	r3, r2
     dba:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     dbc:	9a01      	ldr	r2, [sp, #4]
     dbe:	9902      	ldr	r1, [sp, #8]
     dc0:	9804      	ldr	r0, [sp, #16]
     dc2:	f000 fc91 	bl	16e8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     dc6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     dca:	9a07      	ldr	r2, [sp, #28]
     dcc:	9b01      	ldr	r3, [sp, #4]
     dce:	441a      	add	r2, r3
     dd0:	9b03      	ldr	r3, [sp, #12]
     dd2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     dd4:	e01f      	b.n	e16 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     dd6:	9b06      	ldr	r3, [sp, #24]
     dd8:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     dda:	9b03      	ldr	r3, [sp, #12]
     ddc:	685a      	ldr	r2, [r3, #4]
     dde:	9b07      	ldr	r3, [sp, #28]
     de0:	4413      	add	r3, r2
     de2:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     de4:	9a05      	ldr	r2, [sp, #20]
     de6:	9902      	ldr	r1, [sp, #8]
     de8:	9804      	ldr	r0, [sp, #16]
     dea:	f000 fc7d 	bl	16e8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     dee:	9a01      	ldr	r2, [sp, #4]
     df0:	9b06      	ldr	r3, [sp, #24]
     df2:	1ad3      	subs	r3, r2, r3
     df4:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     df6:	9b03      	ldr	r3, [sp, #12]
     df8:	685b      	ldr	r3, [r3, #4]
     dfa:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     dfc:	9a02      	ldr	r2, [sp, #8]
     dfe:	9b06      	ldr	r3, [sp, #24]
     e00:	4413      	add	r3, r2
     e02:	9a05      	ldr	r2, [sp, #20]
     e04:	4619      	mov	r1, r3
     e06:	9804      	ldr	r0, [sp, #16]
     e08:	f000 fc6e 	bl	16e8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e0c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     e10:	9b03      	ldr	r3, [sp, #12]
     e12:	9a05      	ldr	r2, [sp, #20]
     e14:	60da      	str	r2, [r3, #12]
}
     e16:	bf00      	nop
     e18:	b009      	add	sp, #36	; 0x24
     e1a:	f85d fb04 	ldr.w	pc, [sp], #4

00000e1e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     e1e:	b086      	sub	sp, #24
     e20:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     e22:	9b01      	ldr	r3, [sp, #4]
     e24:	691b      	ldr	r3, [r3, #16]
     e26:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     e28:	9b01      	ldr	r3, [sp, #4]
     e2a:	68db      	ldr	r3, [r3, #12]
     e2c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     e2e:	9a04      	ldr	r2, [sp, #16]
     e30:	9b03      	ldr	r3, [sp, #12]
     e32:	429a      	cmp	r2, r3
     e34:	d808      	bhi.n	e48 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e36:	9b01      	ldr	r3, [sp, #4]
     e38:	689a      	ldr	r2, [r3, #8]
     e3a:	9b03      	ldr	r3, [sp, #12]
     e3c:	1ad2      	subs	r2, r2, r3
     e3e:	9b04      	ldr	r3, [sp, #16]
     e40:	4413      	add	r3, r2
     e42:	3b01      	subs	r3, #1
     e44:	9305      	str	r3, [sp, #20]
     e46:	e004      	b.n	e52 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     e48:	9a04      	ldr	r2, [sp, #16]
     e4a:	9b03      	ldr	r3, [sp, #12]
     e4c:	1ad3      	subs	r3, r2, r3
     e4e:	3b01      	subs	r3, #1
     e50:	9305      	str	r3, [sp, #20]
  }
  return r;
     e52:	9b05      	ldr	r3, [sp, #20]
}
     e54:	4618      	mov	r0, r3
     e56:	b006      	add	sp, #24
     e58:	4770      	bx	lr
	...

00000e5c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e5c:	b500      	push	{lr}
     e5e:	b089      	sub	sp, #36	; 0x24
     e60:	9003      	str	r0, [sp, #12]
     e62:	9102      	str	r1, [sp, #8]
     e64:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     e66:	9b02      	ldr	r3, [sp, #8]
     e68:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     e6a:	9b03      	ldr	r3, [sp, #12]
     e6c:	1c5a      	adds	r2, r3, #1
     e6e:	4613      	mov	r3, r2
     e70:	005b      	lsls	r3, r3, #1
     e72:	4413      	add	r3, r2
     e74:	00db      	lsls	r3, r3, #3
     e76:	4a20      	ldr	r2, [pc, #128]	; (ef8 <SEGGER_RTT_WriteNoLock+0x9c>)
     e78:	4413      	add	r3, r2
     e7a:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     e7c:	9b05      	ldr	r3, [sp, #20]
     e7e:	695b      	ldr	r3, [r3, #20]
     e80:	2b02      	cmp	r3, #2
     e82:	d029      	beq.n	ed8 <SEGGER_RTT_WriteNoLock+0x7c>
     e84:	2b02      	cmp	r3, #2
     e86:	d82e      	bhi.n	ee6 <SEGGER_RTT_WriteNoLock+0x8a>
     e88:	2b00      	cmp	r3, #0
     e8a:	d002      	beq.n	e92 <SEGGER_RTT_WriteNoLock+0x36>
     e8c:	2b01      	cmp	r3, #1
     e8e:	d013      	beq.n	eb8 <SEGGER_RTT_WriteNoLock+0x5c>
     e90:	e029      	b.n	ee6 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e92:	9805      	ldr	r0, [sp, #20]
     e94:	f7ff ffc3 	bl	e1e <_GetAvailWriteSpace>
     e98:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     e9a:	9a04      	ldr	r2, [sp, #16]
     e9c:	9b01      	ldr	r3, [sp, #4]
     e9e:	429a      	cmp	r2, r3
     ea0:	d202      	bcs.n	ea8 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     ea2:	2300      	movs	r3, #0
     ea4:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     ea6:	e021      	b.n	eec <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     ea8:	9b01      	ldr	r3, [sp, #4]
     eaa:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     eac:	9a01      	ldr	r2, [sp, #4]
     eae:	9906      	ldr	r1, [sp, #24]
     eb0:	9805      	ldr	r0, [sp, #20]
     eb2:	f7ff ff6d 	bl	d90 <_WriteNoCheck>
    break;
     eb6:	e019      	b.n	eec <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     eb8:	9805      	ldr	r0, [sp, #20]
     eba:	f7ff ffb0 	bl	e1e <_GetAvailWriteSpace>
     ebe:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     ec0:	9a01      	ldr	r2, [sp, #4]
     ec2:	9b04      	ldr	r3, [sp, #16]
     ec4:	4293      	cmp	r3, r2
     ec6:	bf28      	it	cs
     ec8:	4613      	movcs	r3, r2
     eca:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     ecc:	9a07      	ldr	r2, [sp, #28]
     ece:	9906      	ldr	r1, [sp, #24]
     ed0:	9805      	ldr	r0, [sp, #20]
     ed2:	f7ff ff5d 	bl	d90 <_WriteNoCheck>
    break;
     ed6:	e009      	b.n	eec <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     ed8:	9a01      	ldr	r2, [sp, #4]
     eda:	9906      	ldr	r1, [sp, #24]
     edc:	9805      	ldr	r0, [sp, #20]
     ede:	f7ff fefb 	bl	cd8 <_WriteBlocking>
     ee2:	9007      	str	r0, [sp, #28]
    break;
     ee4:	e002      	b.n	eec <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     ee6:	2300      	movs	r3, #0
     ee8:	9307      	str	r3, [sp, #28]
    break;
     eea:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     eec:	9b07      	ldr	r3, [sp, #28]
}
     eee:	4618      	mov	r0, r3
     ef0:	b009      	add	sp, #36	; 0x24
     ef2:	f85d fb04 	ldr.w	pc, [sp], #4
     ef6:	bf00      	nop
     ef8:	1fff9910 	.word	0x1fff9910

00000efc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     efc:	b500      	push	{lr}
     efe:	b089      	sub	sp, #36	; 0x24
     f00:	9003      	str	r0, [sp, #12]
     f02:	9102      	str	r1, [sp, #8]
     f04:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     f06:	4b0f      	ldr	r3, [pc, #60]	; (f44 <SEGGER_RTT_Write+0x48>)
     f08:	9307      	str	r3, [sp, #28]
     f0a:	9b07      	ldr	r3, [sp, #28]
     f0c:	781b      	ldrb	r3, [r3, #0]
     f0e:	b2db      	uxtb	r3, r3
     f10:	2b53      	cmp	r3, #83	; 0x53
     f12:	d001      	beq.n	f18 <SEGGER_RTT_Write+0x1c>
     f14:	f7ff fe86 	bl	c24 <_DoInit>
  SEGGER_RTT_LOCK();
     f18:	f3ef 8311 	mrs	r3, BASEPRI
     f1c:	f04f 0120 	mov.w	r1, #32
     f20:	f381 8811 	msr	BASEPRI, r1
     f24:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     f26:	9a01      	ldr	r2, [sp, #4]
     f28:	9902      	ldr	r1, [sp, #8]
     f2a:	9803      	ldr	r0, [sp, #12]
     f2c:	f7ff ff96 	bl	e5c <SEGGER_RTT_WriteNoLock>
     f30:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     f32:	9b06      	ldr	r3, [sp, #24]
     f34:	f383 8811 	msr	BASEPRI, r3
  return Status;
     f38:	9b05      	ldr	r3, [sp, #20]
}
     f3a:	4618      	mov	r0, r3
     f3c:	b009      	add	sp, #36	; 0x24
     f3e:	f85d fb04 	ldr.w	pc, [sp], #4
     f42:	bf00      	nop
     f44:	1fff9910 	.word	0x1fff9910

00000f48 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     f48:	b508      	push	{r3, lr}
  _DoInit();
     f4a:	f7ff fe6b 	bl	c24 <_DoInit>
}
     f4e:	bf00      	nop
     f50:	bd08      	pop	{r3, pc}

00000f52 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     f52:	b500      	push	{lr}
     f54:	b085      	sub	sp, #20
     f56:	9001      	str	r0, [sp, #4]
     f58:	460b      	mov	r3, r1
     f5a:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     f5e:	9b01      	ldr	r3, [sp, #4]
     f60:	689b      	ldr	r3, [r3, #8]
     f62:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     f64:	9b03      	ldr	r3, [sp, #12]
     f66:	1c5a      	adds	r2, r3, #1
     f68:	9b01      	ldr	r3, [sp, #4]
     f6a:	685b      	ldr	r3, [r3, #4]
     f6c:	429a      	cmp	r2, r3
     f6e:	d80f      	bhi.n	f90 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     f70:	9b01      	ldr	r3, [sp, #4]
     f72:	681a      	ldr	r2, [r3, #0]
     f74:	9b03      	ldr	r3, [sp, #12]
     f76:	4413      	add	r3, r2
     f78:	f89d 2003 	ldrb.w	r2, [sp, #3]
     f7c:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     f7e:	9b03      	ldr	r3, [sp, #12]
     f80:	1c5a      	adds	r2, r3, #1
     f82:	9b01      	ldr	r3, [sp, #4]
     f84:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     f86:	9b01      	ldr	r3, [sp, #4]
     f88:	68db      	ldr	r3, [r3, #12]
     f8a:	1c5a      	adds	r2, r3, #1
     f8c:	9b01      	ldr	r3, [sp, #4]
     f8e:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     f90:	9b01      	ldr	r3, [sp, #4]
     f92:	689a      	ldr	r2, [r3, #8]
     f94:	9b01      	ldr	r3, [sp, #4]
     f96:	685b      	ldr	r3, [r3, #4]
     f98:	429a      	cmp	r2, r3
     f9a:	d115      	bne.n	fc8 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     f9c:	9b01      	ldr	r3, [sp, #4]
     f9e:	6918      	ldr	r0, [r3, #16]
     fa0:	9b01      	ldr	r3, [sp, #4]
     fa2:	6819      	ldr	r1, [r3, #0]
     fa4:	9b01      	ldr	r3, [sp, #4]
     fa6:	689b      	ldr	r3, [r3, #8]
     fa8:	461a      	mov	r2, r3
     faa:	f7ff ffa7 	bl	efc <SEGGER_RTT_Write>
     fae:	4602      	mov	r2, r0
     fb0:	9b01      	ldr	r3, [sp, #4]
     fb2:	689b      	ldr	r3, [r3, #8]
     fb4:	429a      	cmp	r2, r3
     fb6:	d004      	beq.n	fc2 <_StoreChar+0x70>
      p->ReturnValue = -1;
     fb8:	9b01      	ldr	r3, [sp, #4]
     fba:	f04f 32ff 	mov.w	r2, #4294967295
     fbe:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     fc0:	e002      	b.n	fc8 <_StoreChar+0x76>
      p->Cnt = 0u;
     fc2:	9b01      	ldr	r3, [sp, #4]
     fc4:	2200      	movs	r2, #0
     fc6:	609a      	str	r2, [r3, #8]
}
     fc8:	bf00      	nop
     fca:	b005      	add	sp, #20
     fcc:	f85d fb04 	ldr.w	pc, [sp], #4

00000fd0 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     fd0:	b500      	push	{lr}
     fd2:	b08b      	sub	sp, #44	; 0x2c
     fd4:	9003      	str	r0, [sp, #12]
     fd6:	9102      	str	r1, [sp, #8]
     fd8:	9201      	str	r2, [sp, #4]
     fda:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     fdc:	9b02      	ldr	r3, [sp, #8]
     fde:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     fe0:	2301      	movs	r3, #1
     fe2:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     fe4:	2301      	movs	r3, #1
     fe6:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     fe8:	e007      	b.n	ffa <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     fea:	9a08      	ldr	r2, [sp, #32]
     fec:	9b01      	ldr	r3, [sp, #4]
     fee:	fbb2 f3f3 	udiv	r3, r2, r3
     ff2:	9308      	str	r3, [sp, #32]
    Width++;
     ff4:	9b07      	ldr	r3, [sp, #28]
     ff6:	3301      	adds	r3, #1
     ff8:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     ffa:	9a08      	ldr	r2, [sp, #32]
     ffc:	9b01      	ldr	r3, [sp, #4]
     ffe:	429a      	cmp	r2, r3
    1000:	d2f3      	bcs.n	fea <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1002:	9a00      	ldr	r2, [sp, #0]
    1004:	9b07      	ldr	r3, [sp, #28]
    1006:	429a      	cmp	r2, r3
    1008:	d901      	bls.n	100e <_PrintUnsigned+0x3e>
    Width = NumDigits;
    100a:	9b00      	ldr	r3, [sp, #0]
    100c:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    100e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1010:	f003 0301 	and.w	r3, r3, #1
    1014:	2b00      	cmp	r3, #0
    1016:	d128      	bne.n	106a <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    101a:	2b00      	cmp	r3, #0
    101c:	d025      	beq.n	106a <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    101e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1020:	f003 0302 	and.w	r3, r3, #2
    1024:	2b00      	cmp	r3, #0
    1026:	d006      	beq.n	1036 <_PrintUnsigned+0x66>
    1028:	9b00      	ldr	r3, [sp, #0]
    102a:	2b00      	cmp	r3, #0
    102c:	d103      	bne.n	1036 <_PrintUnsigned+0x66>
        c = '0';
    102e:	2330      	movs	r3, #48	; 0x30
    1030:	f88d 301b 	strb.w	r3, [sp, #27]
    1034:	e002      	b.n	103c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1036:	2320      	movs	r3, #32
    1038:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    103c:	e00c      	b.n	1058 <_PrintUnsigned+0x88>
        FieldWidth--;
    103e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1040:	3b01      	subs	r3, #1
    1042:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1044:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1048:	4619      	mov	r1, r3
    104a:	9803      	ldr	r0, [sp, #12]
    104c:	f7ff ff81 	bl	f52 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1050:	9b03      	ldr	r3, [sp, #12]
    1052:	68db      	ldr	r3, [r3, #12]
    1054:	2b00      	cmp	r3, #0
    1056:	db07      	blt.n	1068 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    105a:	2b00      	cmp	r3, #0
    105c:	d005      	beq.n	106a <_PrintUnsigned+0x9a>
    105e:	9a07      	ldr	r2, [sp, #28]
    1060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1062:	429a      	cmp	r2, r3
    1064:	d3eb      	bcc.n	103e <_PrintUnsigned+0x6e>
    1066:	e000      	b.n	106a <_PrintUnsigned+0x9a>
          break;
    1068:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    106a:	9b03      	ldr	r3, [sp, #12]
    106c:	68db      	ldr	r3, [r3, #12]
    106e:	2b00      	cmp	r3, #0
    1070:	db55      	blt.n	111e <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1072:	9b00      	ldr	r3, [sp, #0]
    1074:	2b01      	cmp	r3, #1
    1076:	d903      	bls.n	1080 <_PrintUnsigned+0xb0>
        NumDigits--;
    1078:	9b00      	ldr	r3, [sp, #0]
    107a:	3b01      	subs	r3, #1
    107c:	9300      	str	r3, [sp, #0]
    107e:	e009      	b.n	1094 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1080:	9a02      	ldr	r2, [sp, #8]
    1082:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1084:	fbb2 f3f3 	udiv	r3, r2, r3
    1088:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    108a:	9a05      	ldr	r2, [sp, #20]
    108c:	9b01      	ldr	r3, [sp, #4]
    108e:	429a      	cmp	r2, r3
    1090:	d200      	bcs.n	1094 <_PrintUnsigned+0xc4>
          break;
    1092:	e005      	b.n	10a0 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1094:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1096:	9a01      	ldr	r2, [sp, #4]
    1098:	fb02 f303 	mul.w	r3, r2, r3
    109c:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    109e:	e7e8      	b.n	1072 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    10a0:	9a02      	ldr	r2, [sp, #8]
    10a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10a4:	fbb2 f3f3 	udiv	r3, r2, r3
    10a8:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    10aa:	9b05      	ldr	r3, [sp, #20]
    10ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10ae:	fb02 f303 	mul.w	r3, r2, r3
    10b2:	9a02      	ldr	r2, [sp, #8]
    10b4:	1ad3      	subs	r3, r2, r3
    10b6:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    10b8:	4a1b      	ldr	r2, [pc, #108]	; (1128 <_PrintUnsigned+0x158>)
    10ba:	9b05      	ldr	r3, [sp, #20]
    10bc:	4413      	add	r3, r2
    10be:	781b      	ldrb	r3, [r3, #0]
    10c0:	4619      	mov	r1, r3
    10c2:	9803      	ldr	r0, [sp, #12]
    10c4:	f7ff ff45 	bl	f52 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    10c8:	9b03      	ldr	r3, [sp, #12]
    10ca:	68db      	ldr	r3, [r3, #12]
    10cc:	2b00      	cmp	r3, #0
    10ce:	db08      	blt.n	10e2 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    10d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10d2:	9b01      	ldr	r3, [sp, #4]
    10d4:	fbb2 f3f3 	udiv	r3, r2, r3
    10d8:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    10da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10dc:	2b00      	cmp	r3, #0
    10de:	d1df      	bne.n	10a0 <_PrintUnsigned+0xd0>
    10e0:	e000      	b.n	10e4 <_PrintUnsigned+0x114>
        break;
    10e2:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    10e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10e6:	f003 0301 	and.w	r3, r3, #1
    10ea:	2b00      	cmp	r3, #0
    10ec:	d017      	beq.n	111e <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    10ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10f0:	2b00      	cmp	r3, #0
    10f2:	d014      	beq.n	111e <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10f4:	e00a      	b.n	110c <_PrintUnsigned+0x13c>
          FieldWidth--;
    10f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10f8:	3b01      	subs	r3, #1
    10fa:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    10fc:	2120      	movs	r1, #32
    10fe:	9803      	ldr	r0, [sp, #12]
    1100:	f7ff ff27 	bl	f52 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1104:	9b03      	ldr	r3, [sp, #12]
    1106:	68db      	ldr	r3, [r3, #12]
    1108:	2b00      	cmp	r3, #0
    110a:	db07      	blt.n	111c <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    110c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    110e:	2b00      	cmp	r3, #0
    1110:	d005      	beq.n	111e <_PrintUnsigned+0x14e>
    1112:	9a07      	ldr	r2, [sp, #28]
    1114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1116:	429a      	cmp	r2, r3
    1118:	d3ed      	bcc.n	10f6 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    111a:	e000      	b.n	111e <_PrintUnsigned+0x14e>
            break;
    111c:	bf00      	nop
}
    111e:	bf00      	nop
    1120:	b00b      	add	sp, #44	; 0x2c
    1122:	f85d fb04 	ldr.w	pc, [sp], #4
    1126:	bf00      	nop
    1128:	00019940 	.word	0x00019940

0000112c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    112c:	b500      	push	{lr}
    112e:	b089      	sub	sp, #36	; 0x24
    1130:	9005      	str	r0, [sp, #20]
    1132:	9104      	str	r1, [sp, #16]
    1134:	9203      	str	r2, [sp, #12]
    1136:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1138:	9b04      	ldr	r3, [sp, #16]
    113a:	2b00      	cmp	r3, #0
    113c:	bfb8      	it	lt
    113e:	425b      	neglt	r3, r3
    1140:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1142:	2301      	movs	r3, #1
    1144:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1146:	e007      	b.n	1158 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1148:	9b03      	ldr	r3, [sp, #12]
    114a:	9a06      	ldr	r2, [sp, #24]
    114c:	fb92 f3f3 	sdiv	r3, r2, r3
    1150:	9306      	str	r3, [sp, #24]
    Width++;
    1152:	9b07      	ldr	r3, [sp, #28]
    1154:	3301      	adds	r3, #1
    1156:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1158:	9b03      	ldr	r3, [sp, #12]
    115a:	9a06      	ldr	r2, [sp, #24]
    115c:	429a      	cmp	r2, r3
    115e:	daf3      	bge.n	1148 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1160:	9a02      	ldr	r2, [sp, #8]
    1162:	9b07      	ldr	r3, [sp, #28]
    1164:	429a      	cmp	r2, r3
    1166:	d901      	bls.n	116c <_PrintInt+0x40>
    Width = NumDigits;
    1168:	9b02      	ldr	r3, [sp, #8]
    116a:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    116c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    116e:	2b00      	cmp	r3, #0
    1170:	d00a      	beq.n	1188 <_PrintInt+0x5c>
    1172:	9b04      	ldr	r3, [sp, #16]
    1174:	2b00      	cmp	r3, #0
    1176:	db04      	blt.n	1182 <_PrintInt+0x56>
    1178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    117a:	f003 0304 	and.w	r3, r3, #4
    117e:	2b00      	cmp	r3, #0
    1180:	d002      	beq.n	1188 <_PrintInt+0x5c>
    FieldWidth--;
    1182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1184:	3b01      	subs	r3, #1
    1186:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    118a:	f003 0302 	and.w	r3, r3, #2
    118e:	2b00      	cmp	r3, #0
    1190:	d002      	beq.n	1198 <_PrintInt+0x6c>
    1192:	9b02      	ldr	r3, [sp, #8]
    1194:	2b00      	cmp	r3, #0
    1196:	d01c      	beq.n	11d2 <_PrintInt+0xa6>
    1198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    119a:	f003 0301 	and.w	r3, r3, #1
    119e:	2b00      	cmp	r3, #0
    11a0:	d117      	bne.n	11d2 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    11a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11a4:	2b00      	cmp	r3, #0
    11a6:	d014      	beq.n	11d2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11a8:	e00a      	b.n	11c0 <_PrintInt+0x94>
        FieldWidth--;
    11aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11ac:	3b01      	subs	r3, #1
    11ae:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    11b0:	2120      	movs	r1, #32
    11b2:	9805      	ldr	r0, [sp, #20]
    11b4:	f7ff fecd 	bl	f52 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    11b8:	9b05      	ldr	r3, [sp, #20]
    11ba:	68db      	ldr	r3, [r3, #12]
    11bc:	2b00      	cmp	r3, #0
    11be:	db07      	blt.n	11d0 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11c2:	2b00      	cmp	r3, #0
    11c4:	d005      	beq.n	11d2 <_PrintInt+0xa6>
    11c6:	9a07      	ldr	r2, [sp, #28]
    11c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11ca:	429a      	cmp	r2, r3
    11cc:	d3ed      	bcc.n	11aa <_PrintInt+0x7e>
    11ce:	e000      	b.n	11d2 <_PrintInt+0xa6>
          break;
    11d0:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    11d2:	9b05      	ldr	r3, [sp, #20]
    11d4:	68db      	ldr	r3, [r3, #12]
    11d6:	2b00      	cmp	r3, #0
    11d8:	db4a      	blt.n	1270 <_PrintInt+0x144>
    if (v < 0) {
    11da:	9b04      	ldr	r3, [sp, #16]
    11dc:	2b00      	cmp	r3, #0
    11de:	da07      	bge.n	11f0 <_PrintInt+0xc4>
      v = -v;
    11e0:	9b04      	ldr	r3, [sp, #16]
    11e2:	425b      	negs	r3, r3
    11e4:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    11e6:	212d      	movs	r1, #45	; 0x2d
    11e8:	9805      	ldr	r0, [sp, #20]
    11ea:	f7ff feb2 	bl	f52 <_StoreChar>
    11ee:	e008      	b.n	1202 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    11f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11f2:	f003 0304 	and.w	r3, r3, #4
    11f6:	2b00      	cmp	r3, #0
    11f8:	d003      	beq.n	1202 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    11fa:	212b      	movs	r1, #43	; 0x2b
    11fc:	9805      	ldr	r0, [sp, #20]
    11fe:	f7ff fea8 	bl	f52 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1202:	9b05      	ldr	r3, [sp, #20]
    1204:	68db      	ldr	r3, [r3, #12]
    1206:	2b00      	cmp	r3, #0
    1208:	db32      	blt.n	1270 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    120a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    120c:	f003 0302 	and.w	r3, r3, #2
    1210:	2b00      	cmp	r3, #0
    1212:	d01f      	beq.n	1254 <_PrintInt+0x128>
    1214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1216:	f003 0301 	and.w	r3, r3, #1
    121a:	2b00      	cmp	r3, #0
    121c:	d11a      	bne.n	1254 <_PrintInt+0x128>
    121e:	9b02      	ldr	r3, [sp, #8]
    1220:	2b00      	cmp	r3, #0
    1222:	d117      	bne.n	1254 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1226:	2b00      	cmp	r3, #0
    1228:	d014      	beq.n	1254 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    122a:	e00a      	b.n	1242 <_PrintInt+0x116>
            FieldWidth--;
    122c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    122e:	3b01      	subs	r3, #1
    1230:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1232:	2130      	movs	r1, #48	; 0x30
    1234:	9805      	ldr	r0, [sp, #20]
    1236:	f7ff fe8c 	bl	f52 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    123a:	9b05      	ldr	r3, [sp, #20]
    123c:	68db      	ldr	r3, [r3, #12]
    123e:	2b00      	cmp	r3, #0
    1240:	db07      	blt.n	1252 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1244:	2b00      	cmp	r3, #0
    1246:	d005      	beq.n	1254 <_PrintInt+0x128>
    1248:	9a07      	ldr	r2, [sp, #28]
    124a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    124c:	429a      	cmp	r2, r3
    124e:	d3ed      	bcc.n	122c <_PrintInt+0x100>
    1250:	e000      	b.n	1254 <_PrintInt+0x128>
              break;
    1252:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1254:	9b05      	ldr	r3, [sp, #20]
    1256:	68db      	ldr	r3, [r3, #12]
    1258:	2b00      	cmp	r3, #0
    125a:	db09      	blt.n	1270 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    125c:	9904      	ldr	r1, [sp, #16]
    125e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1260:	9301      	str	r3, [sp, #4]
    1262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1264:	9300      	str	r3, [sp, #0]
    1266:	9b02      	ldr	r3, [sp, #8]
    1268:	9a03      	ldr	r2, [sp, #12]
    126a:	9805      	ldr	r0, [sp, #20]
    126c:	f7ff feb0 	bl	fd0 <_PrintUnsigned>
      }
    }
  }
}
    1270:	bf00      	nop
    1272:	b009      	add	sp, #36	; 0x24
    1274:	f85d fb04 	ldr.w	pc, [sp], #4

00001278 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1278:	b500      	push	{lr}
    127a:	b0a3      	sub	sp, #140	; 0x8c
    127c:	9005      	str	r0, [sp, #20]
    127e:	9104      	str	r1, [sp, #16]
    1280:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1282:	ab06      	add	r3, sp, #24
    1284:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1286:	2340      	movs	r3, #64	; 0x40
    1288:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    128a:	2300      	movs	r3, #0
    128c:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    128e:	9b05      	ldr	r3, [sp, #20]
    1290:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1292:	2300      	movs	r3, #0
    1294:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1296:	9b04      	ldr	r3, [sp, #16]
    1298:	781b      	ldrb	r3, [r3, #0]
    129a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    129e:	9b04      	ldr	r3, [sp, #16]
    12a0:	3301      	adds	r3, #1
    12a2:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    12a4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12a8:	2b00      	cmp	r3, #0
    12aa:	f000 819c 	beq.w	15e6 <__BSS_SRAM_SIZE+0x346>
      break;
    }
    if (c == '%') {
    12ae:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12b2:	2b25      	cmp	r3, #37	; 0x25
    12b4:	f040 818b 	bne.w	15ce <__BSS_SRAM_SIZE+0x32e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    12b8:	2300      	movs	r3, #0
    12ba:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    12bc:	2301      	movs	r3, #1
    12be:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    12c0:	9b04      	ldr	r3, [sp, #16]
    12c2:	781b      	ldrb	r3, [r3, #0]
    12c4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    12c8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12cc:	3b23      	subs	r3, #35	; 0x23
    12ce:	2b0d      	cmp	r3, #13
    12d0:	d83e      	bhi.n	1350 <__BSS_SRAM_SIZE+0xb0>
    12d2:	a201      	add	r2, pc, #4	; (adr r2, 12d8 <__BSS_SRAM_SIZE+0x38>)
    12d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12d8:	00001341 	.word	0x00001341
    12dc:	00001351 	.word	0x00001351
    12e0:	00001351 	.word	0x00001351
    12e4:	00001351 	.word	0x00001351
    12e8:	00001351 	.word	0x00001351
    12ec:	00001351 	.word	0x00001351
    12f0:	00001351 	.word	0x00001351
    12f4:	00001351 	.word	0x00001351
    12f8:	00001331 	.word	0x00001331
    12fc:	00001351 	.word	0x00001351
    1300:	00001311 	.word	0x00001311
    1304:	00001351 	.word	0x00001351
    1308:	00001351 	.word	0x00001351
    130c:	00001321 	.word	0x00001321
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1310:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1312:	f043 0301 	orr.w	r3, r3, #1
    1316:	931e      	str	r3, [sp, #120]	; 0x78
    1318:	9b04      	ldr	r3, [sp, #16]
    131a:	3301      	adds	r3, #1
    131c:	9304      	str	r3, [sp, #16]
    131e:	e01a      	b.n	1356 <__BSS_SRAM_SIZE+0xb6>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1320:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1322:	f043 0302 	orr.w	r3, r3, #2
    1326:	931e      	str	r3, [sp, #120]	; 0x78
    1328:	9b04      	ldr	r3, [sp, #16]
    132a:	3301      	adds	r3, #1
    132c:	9304      	str	r3, [sp, #16]
    132e:	e012      	b.n	1356 <__BSS_SRAM_SIZE+0xb6>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1330:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1332:	f043 0304 	orr.w	r3, r3, #4
    1336:	931e      	str	r3, [sp, #120]	; 0x78
    1338:	9b04      	ldr	r3, [sp, #16]
    133a:	3301      	adds	r3, #1
    133c:	9304      	str	r3, [sp, #16]
    133e:	e00a      	b.n	1356 <__BSS_SRAM_SIZE+0xb6>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1340:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1342:	f043 0308 	orr.w	r3, r3, #8
    1346:	931e      	str	r3, [sp, #120]	; 0x78
    1348:	9b04      	ldr	r3, [sp, #16]
    134a:	3301      	adds	r3, #1
    134c:	9304      	str	r3, [sp, #16]
    134e:	e002      	b.n	1356 <__BSS_SRAM_SIZE+0xb6>
        default:  v = 0; break;
    1350:	2300      	movs	r3, #0
    1352:	9320      	str	r3, [sp, #128]	; 0x80
    1354:	bf00      	nop
        }
      } while (v);
    1356:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1358:	2b00      	cmp	r3, #0
    135a:	d1b1      	bne.n	12c0 <__BSS_SRAM_SIZE+0x20>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    135c:	2300      	movs	r3, #0
    135e:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1360:	9b04      	ldr	r3, [sp, #16]
    1362:	781b      	ldrb	r3, [r3, #0]
    1364:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1368:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    136c:	2b2f      	cmp	r3, #47	; 0x2f
    136e:	d912      	bls.n	1396 <__BSS_SRAM_SIZE+0xf6>
    1370:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1374:	2b39      	cmp	r3, #57	; 0x39
    1376:	d80e      	bhi.n	1396 <__BSS_SRAM_SIZE+0xf6>
          break;
        }
        sFormat++;
    1378:	9b04      	ldr	r3, [sp, #16]
    137a:	3301      	adds	r3, #1
    137c:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    137e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1380:	4613      	mov	r3, r2
    1382:	009b      	lsls	r3, r3, #2
    1384:	4413      	add	r3, r2
    1386:	005b      	lsls	r3, r3, #1
    1388:	461a      	mov	r2, r3
    138a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    138e:	4413      	add	r3, r2
    1390:	3b30      	subs	r3, #48	; 0x30
    1392:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1394:	e7e4      	b.n	1360 <__BSS_SRAM_SIZE+0xc0>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1396:	2300      	movs	r3, #0
    1398:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    139a:	9b04      	ldr	r3, [sp, #16]
    139c:	781b      	ldrb	r3, [r3, #0]
    139e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    13a2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13a6:	2b2e      	cmp	r3, #46	; 0x2e
    13a8:	d11d      	bne.n	13e6 <__BSS_SRAM_SIZE+0x146>
        sFormat++;
    13aa:	9b04      	ldr	r3, [sp, #16]
    13ac:	3301      	adds	r3, #1
    13ae:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    13b0:	9b04      	ldr	r3, [sp, #16]
    13b2:	781b      	ldrb	r3, [r3, #0]
    13b4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    13b8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13bc:	2b2f      	cmp	r3, #47	; 0x2f
    13be:	d912      	bls.n	13e6 <__BSS_SRAM_SIZE+0x146>
    13c0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13c4:	2b39      	cmp	r3, #57	; 0x39
    13c6:	d80e      	bhi.n	13e6 <__BSS_SRAM_SIZE+0x146>
            break;
          }
          sFormat++;
    13c8:	9b04      	ldr	r3, [sp, #16]
    13ca:	3301      	adds	r3, #1
    13cc:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    13ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    13d0:	4613      	mov	r3, r2
    13d2:	009b      	lsls	r3, r3, #2
    13d4:	4413      	add	r3, r2
    13d6:	005b      	lsls	r3, r3, #1
    13d8:	461a      	mov	r2, r3
    13da:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13de:	4413      	add	r3, r2
    13e0:	3b30      	subs	r3, #48	; 0x30
    13e2:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    13e4:	e7e4      	b.n	13b0 <__BSS_SRAM_SIZE+0x110>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    13e6:	9b04      	ldr	r3, [sp, #16]
    13e8:	781b      	ldrb	r3, [r3, #0]
    13ea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    13ee:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13f2:	2b6c      	cmp	r3, #108	; 0x6c
    13f4:	d003      	beq.n	13fe <__BSS_SRAM_SIZE+0x15e>
    13f6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13fa:	2b68      	cmp	r3, #104	; 0x68
    13fc:	d107      	bne.n	140e <__BSS_SRAM_SIZE+0x16e>
          sFormat++;
    13fe:	9b04      	ldr	r3, [sp, #16]
    1400:	3301      	adds	r3, #1
    1402:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1404:	9b04      	ldr	r3, [sp, #16]
    1406:	781b      	ldrb	r3, [r3, #0]
    1408:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    140c:	e7ef      	b.n	13ee <__BSS_SRAM_SIZE+0x14e>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    140e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1412:	2b25      	cmp	r3, #37	; 0x25
    1414:	f000 80d0 	beq.w	15b8 <__BSS_SRAM_SIZE+0x318>
    1418:	2b25      	cmp	r3, #37	; 0x25
    141a:	f2c0 80d3 	blt.w	15c4 <__BSS_SRAM_SIZE+0x324>
    141e:	2b78      	cmp	r3, #120	; 0x78
    1420:	f300 80d0 	bgt.w	15c4 <__BSS_SRAM_SIZE+0x324>
    1424:	2b58      	cmp	r3, #88	; 0x58
    1426:	f2c0 80cd 	blt.w	15c4 <__BSS_SRAM_SIZE+0x324>
    142a:	3b58      	subs	r3, #88	; 0x58
    142c:	2b20      	cmp	r3, #32
    142e:	f200 80c9 	bhi.w	15c4 <__BSS_SRAM_SIZE+0x324>
    1432:	a201      	add	r2, pc, #4	; (adr r2, 1438 <__BSS_SRAM_SIZE+0x198>)
    1434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1438:	00001529 	.word	0x00001529
    143c:	000015c5 	.word	0x000015c5
    1440:	000015c5 	.word	0x000015c5
    1444:	000015c5 	.word	0x000015c5
    1448:	000015c5 	.word	0x000015c5
    144c:	000015c5 	.word	0x000015c5
    1450:	000015c5 	.word	0x000015c5
    1454:	000015c5 	.word	0x000015c5
    1458:	000015c5 	.word	0x000015c5
    145c:	000015c5 	.word	0x000015c5
    1460:	000015c5 	.word	0x000015c5
    1464:	000014bd 	.word	0x000014bd
    1468:	000014e1 	.word	0x000014e1
    146c:	000015c5 	.word	0x000015c5
    1470:	000015c5 	.word	0x000015c5
    1474:	000015c5 	.word	0x000015c5
    1478:	000015c5 	.word	0x000015c5
    147c:	000015c5 	.word	0x000015c5
    1480:	000015c5 	.word	0x000015c5
    1484:	000015c5 	.word	0x000015c5
    1488:	000015c5 	.word	0x000015c5
    148c:	000015c5 	.word	0x000015c5
    1490:	000015c5 	.word	0x000015c5
    1494:	000015c5 	.word	0x000015c5
    1498:	00001595 	.word	0x00001595
    149c:	000015c5 	.word	0x000015c5
    14a0:	000015c5 	.word	0x000015c5
    14a4:	0000154d 	.word	0x0000154d
    14a8:	000015c5 	.word	0x000015c5
    14ac:	00001505 	.word	0x00001505
    14b0:	000015c5 	.word	0x000015c5
    14b4:	000015c5 	.word	0x000015c5
    14b8:	00001529 	.word	0x00001529
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    14bc:	9b03      	ldr	r3, [sp, #12]
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	1d19      	adds	r1, r3, #4
    14c2:	9a03      	ldr	r2, [sp, #12]
    14c4:	6011      	str	r1, [r2, #0]
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    14ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
    14cc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    14d0:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    14d4:	ab16      	add	r3, sp, #88	; 0x58
    14d6:	4611      	mov	r1, r2
    14d8:	4618      	mov	r0, r3
    14da:	f7ff fd3a 	bl	f52 <_StoreChar>
        break;
    14de:	e072      	b.n	15c6 <__BSS_SRAM_SIZE+0x326>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    14e0:	9b03      	ldr	r3, [sp, #12]
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	1d19      	adds	r1, r3, #4
    14e6:	9a03      	ldr	r2, [sp, #12]
    14e8:	6011      	str	r1, [r2, #0]
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    14ee:	a816      	add	r0, sp, #88	; 0x58
    14f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14f2:	9301      	str	r3, [sp, #4]
    14f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14f6:	9300      	str	r3, [sp, #0]
    14f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    14fa:	220a      	movs	r2, #10
    14fc:	9920      	ldr	r1, [sp, #128]	; 0x80
    14fe:	f7ff fe15 	bl	112c <_PrintInt>
        break;
    1502:	e060      	b.n	15c6 <__BSS_SRAM_SIZE+0x326>
      case 'u':
        v = va_arg(*pParamList, int);
    1504:	9b03      	ldr	r3, [sp, #12]
    1506:	681b      	ldr	r3, [r3, #0]
    1508:	1d19      	adds	r1, r3, #4
    150a:	9a03      	ldr	r2, [sp, #12]
    150c:	6011      	str	r1, [r2, #0]
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1512:	9920      	ldr	r1, [sp, #128]	; 0x80
    1514:	a816      	add	r0, sp, #88	; 0x58
    1516:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1518:	9301      	str	r3, [sp, #4]
    151a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    151c:	9300      	str	r3, [sp, #0]
    151e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1520:	220a      	movs	r2, #10
    1522:	f7ff fd55 	bl	fd0 <_PrintUnsigned>
        break;
    1526:	e04e      	b.n	15c6 <__BSS_SRAM_SIZE+0x326>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1528:	9b03      	ldr	r3, [sp, #12]
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	1d19      	adds	r1, r3, #4
    152e:	9a03      	ldr	r2, [sp, #12]
    1530:	6011      	str	r1, [r2, #0]
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1536:	9920      	ldr	r1, [sp, #128]	; 0x80
    1538:	a816      	add	r0, sp, #88	; 0x58
    153a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    153c:	9301      	str	r3, [sp, #4]
    153e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1540:	9300      	str	r3, [sp, #0]
    1542:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1544:	2210      	movs	r2, #16
    1546:	f7ff fd43 	bl	fd0 <_PrintUnsigned>
        break;
    154a:	e03c      	b.n	15c6 <__BSS_SRAM_SIZE+0x326>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    154c:	9b03      	ldr	r3, [sp, #12]
    154e:	681b      	ldr	r3, [r3, #0]
    1550:	1d19      	adds	r1, r3, #4
    1552:	9a03      	ldr	r2, [sp, #12]
    1554:	6011      	str	r1, [r2, #0]
    1556:	681b      	ldr	r3, [r3, #0]
    1558:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    155a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    155c:	2b00      	cmp	r3, #0
    155e:	d101      	bne.n	1564 <__BSS_SRAM_SIZE+0x2c4>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1560:	4b2c      	ldr	r3, [pc, #176]	; (1614 <__BSS_SRAM_SIZE+0x374>)
    1562:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1564:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    156c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    156e:	3301      	adds	r3, #1
    1570:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1572:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1576:	2b00      	cmp	r3, #0
    1578:	d00a      	beq.n	1590 <__BSS_SRAM_SIZE+0x2f0>
              break;
            }
           _StoreChar(&BufferDesc, c);
    157a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    157e:	ab16      	add	r3, sp, #88	; 0x58
    1580:	4611      	mov	r1, r2
    1582:	4618      	mov	r0, r3
    1584:	f7ff fce5 	bl	f52 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1588:	9b19      	ldr	r3, [sp, #100]	; 0x64
    158a:	2b00      	cmp	r3, #0
    158c:	daea      	bge.n	1564 <__BSS_SRAM_SIZE+0x2c4>
        }
        break;
    158e:	e01a      	b.n	15c6 <__BSS_SRAM_SIZE+0x326>
              break;
    1590:	bf00      	nop
        break;
    1592:	e018      	b.n	15c6 <__BSS_SRAM_SIZE+0x326>
      case 'p':
        v = va_arg(*pParamList, int);
    1594:	9b03      	ldr	r3, [sp, #12]
    1596:	681b      	ldr	r3, [r3, #0]
    1598:	1d19      	adds	r1, r3, #4
    159a:	9a03      	ldr	r2, [sp, #12]
    159c:	6011      	str	r1, [r2, #0]
    159e:	681b      	ldr	r3, [r3, #0]
    15a0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    15a2:	9920      	ldr	r1, [sp, #128]	; 0x80
    15a4:	a816      	add	r0, sp, #88	; 0x58
    15a6:	2300      	movs	r3, #0
    15a8:	9301      	str	r3, [sp, #4]
    15aa:	2308      	movs	r3, #8
    15ac:	9300      	str	r3, [sp, #0]
    15ae:	2308      	movs	r3, #8
    15b0:	2210      	movs	r2, #16
    15b2:	f7ff fd0d 	bl	fd0 <_PrintUnsigned>
        break;
    15b6:	e006      	b.n	15c6 <__BSS_SRAM_SIZE+0x326>
      case '%':
        _StoreChar(&BufferDesc, '%');
    15b8:	ab16      	add	r3, sp, #88	; 0x58
    15ba:	2125      	movs	r1, #37	; 0x25
    15bc:	4618      	mov	r0, r3
    15be:	f7ff fcc8 	bl	f52 <_StoreChar>
        break;
    15c2:	e000      	b.n	15c6 <__BSS_SRAM_SIZE+0x326>
      default:
        break;
    15c4:	bf00      	nop
      }
      sFormat++;
    15c6:	9b04      	ldr	r3, [sp, #16]
    15c8:	3301      	adds	r3, #1
    15ca:	9304      	str	r3, [sp, #16]
    15cc:	e006      	b.n	15dc <__BSS_SRAM_SIZE+0x33c>
    } else {
      _StoreChar(&BufferDesc, c);
    15ce:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    15d2:	ab16      	add	r3, sp, #88	; 0x58
    15d4:	4611      	mov	r1, r2
    15d6:	4618      	mov	r0, r3
    15d8:	f7ff fcbb 	bl	f52 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    15dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15de:	2b00      	cmp	r3, #0
    15e0:	f6bf ae59 	bge.w	1296 <SEGGER_RTT_vprintf+0x1e>
    15e4:	e000      	b.n	15e8 <__BSS_SRAM_SIZE+0x348>
      break;
    15e6:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    15e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15ea:	2b00      	cmp	r3, #0
    15ec:	dd0c      	ble.n	1608 <__BSS_SRAM_SIZE+0x368>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    15ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
    15f0:	2b00      	cmp	r3, #0
    15f2:	d005      	beq.n	1600 <__BSS_SRAM_SIZE+0x360>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    15f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    15f6:	ab06      	add	r3, sp, #24
    15f8:	4619      	mov	r1, r3
    15fa:	9805      	ldr	r0, [sp, #20]
    15fc:	f7ff fc7e 	bl	efc <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1600:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1602:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1604:	4413      	add	r3, r2
    1606:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1608:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    160a:	4618      	mov	r0, r3
    160c:	b023      	add	sp, #140	; 0x8c
    160e:	f85d fb04 	ldr.w	pc, [sp], #4
    1612:	bf00      	nop
    1614:	00017d80 	.word	0x00017d80

00001618 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1618:	b40e      	push	{r1, r2, r3}
    161a:	b500      	push	{lr}
    161c:	b084      	sub	sp, #16
    161e:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1620:	ab06      	add	r3, sp, #24
    1622:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1624:	ab02      	add	r3, sp, #8
    1626:	461a      	mov	r2, r3
    1628:	9905      	ldr	r1, [sp, #20]
    162a:	9801      	ldr	r0, [sp, #4]
    162c:	f7ff fe24 	bl	1278 <SEGGER_RTT_vprintf>
    1630:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1632:	9b03      	ldr	r3, [sp, #12]
}
    1634:	4618      	mov	r0, r3
    1636:	b004      	add	sp, #16
    1638:	f85d eb04 	ldr.w	lr, [sp], #4
    163c:	b003      	add	sp, #12
    163e:	4770      	bx	lr

00001640 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    1640:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    1642:	4805      	ldr	r0, [pc, #20]	; (1658 <MCU_clocks+0x18>)
    1644:	f004 fa38 	bl	5ab8 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    1648:	2000      	movs	r0, #0
    164a:	f004 fae9 	bl	5c20 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    164e:	2000      	movs	r0, #0
    1650:	f004 fab0 	bl	5bb4 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    1654:	bf00      	nop
    1656:	bd08      	pop	{r3, pc}
    1658:	000191a4 	.word	0x000191a4

0000165c <EcuM_Init>:
/**
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void ) {   
    165c:	b508      	push	{r3, lr}
    MCU_clocks();
    165e:	f7ff ffef 	bl	1640 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    1662:	2000      	movs	r0, #0
    1664:	f000 fbd1 	bl	1e0a <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    1668:	2000      	movs	r0, #0
    166a:	f000 fa71 	bl	1b50 <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    166e:	4807      	ldr	r0, [pc, #28]	; (168c <EcuM_Init+0x30>)
    1670:	f004 feba 	bl	63e8 <Port_Init>
    Spi_Init( &Spi_Config );    //Init spi driver and configuration.
    1674:	4806      	ldr	r0, [pc, #24]	; (1690 <EcuM_Init+0x34>)
    1676:	f008 f8b5 	bl	97e4 <Spi_Init>
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );  //Init FlexCan driver
    167a:	4806      	ldr	r0, [pc, #24]	; (1694 <EcuM_Init+0x38>)
    167c:	f008 fdbc 	bl	a1f8 <Can_43_FLEXCAN_Init>
    CanIf_Init( &CanIf_Config );    //Init CanIf driver.
    1680:	4805      	ldr	r0, [pc, #20]	; (1698 <EcuM_Init+0x3c>)
    1682:	f015 fbd9 	bl	16e38 <CanIf_Init>
}
    1686:	bf00      	nop
    1688:	bd08      	pop	{r3, pc}
    168a:	bf00      	nop
    168c:	0001980c 	.word	0x0001980c
    1690:	0001990c 	.word	0x0001990c
    1694:	00018c68 	.word	0x00018c68
    1698:	00018af0 	.word	0x00018af0

0000169c <Delay>:
/**
 * @brief This function is a delay in ms using the osif timer.
 * 
 * @param ms Delay in ms.
 */
void Delay( uint32 ms ) {
    169c:	b500      	push	{lr}
    169e:	b087      	sub	sp, #28
    16a0:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
    16a2:	9b01      	ldr	r3, [sp, #4]
    16a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    16a8:	fb02 f303 	mul.w	r3, r2, r3
    16ac:	2101      	movs	r1, #1
    16ae:	4618      	mov	r0, r3
    16b0:	f000 fc00 	bl	1eb4 <OsIf_MicrosToTicks>
    16b4:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
    16b6:	2001      	movs	r0, #1
    16b8:	f000 fbb0 	bl	1e1c <OsIf_GetCounter>
    16bc:	4603      	mov	r3, r0
    16be:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
    16c0:	2300      	movs	r3, #0
    16c2:	9305      	str	r3, [sp, #20]

    do {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    16c4:	ab03      	add	r3, sp, #12
    16c6:	2101      	movs	r1, #1
    16c8:	4618      	mov	r0, r3
    16ca:	f000 fbc0 	bl	1e4e <OsIf_GetElapsed>
    16ce:	4602      	mov	r2, r0
    16d0:	9b05      	ldr	r3, [sp, #20]
    16d2:	4413      	add	r3, r2
    16d4:	9305      	str	r3, [sp, #20]
    } while( ElapsedTime < Timeout );
    16d6:	9a05      	ldr	r2, [sp, #20]
    16d8:	9b04      	ldr	r3, [sp, #16]
    16da:	429a      	cmp	r2, r3
    16dc:	d3f2      	bcc.n	16c4 <Delay+0x28>
    16de:	bf00      	nop
    16e0:	bf00      	nop
    16e2:	b007      	add	sp, #28
    16e4:	f85d fb04 	ldr.w	pc, [sp], #4

000016e8 <memcpy>:
    16e8:	440a      	add	r2, r1
    16ea:	4291      	cmp	r1, r2
    16ec:	f100 33ff 	add.w	r3, r0, #4294967295
    16f0:	d100      	bne.n	16f4 <memcpy+0xc>
    16f2:	4770      	bx	lr
    16f4:	b510      	push	{r4, lr}
    16f6:	f811 4b01 	ldrb.w	r4, [r1], #1
    16fa:	f803 4f01 	strb.w	r4, [r3, #1]!
    16fe:	4291      	cmp	r1, r2
    1700:	d1f9      	bne.n	16f6 <memcpy+0xe>
    1702:	bd10      	pop	{r4, pc}

00001704 <memset>:
    1704:	4402      	add	r2, r0
    1706:	4603      	mov	r3, r0
    1708:	4293      	cmp	r3, r2
    170a:	d100      	bne.n	170e <memset+0xa>
    170c:	4770      	bx	lr
    170e:	f803 1b01 	strb.w	r1, [r3], #1
    1712:	e7f9      	b.n	1708 <memset+0x4>

00001714 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1714:	b500      	push	{lr}
    1716:	b087      	sub	sp, #28
    1718:	9003      	str	r0, [sp, #12]
    171a:	9102      	str	r1, [sp, #8]
    171c:	9201      	str	r2, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    sint32 dev_irqNumber = (sint32)eIrqNumber;
    171e:	9b03      	ldr	r3, [sp, #12]
    1720:	9305      	str	r3, [sp, #20]
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= dev_irqNumber);
    1722:	9b05      	ldr	r3, [sp, #20]
    1724:	43db      	mvns	r3, r3
    1726:	0fdb      	lsrs	r3, r3, #31
    1728:	b2db      	uxtb	r3, r3
    172a:	4618      	mov	r0, r3
    172c:	f7ff f8f0 	bl	910 <DevAssert>
    DevAssert(dev_irqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1730:	9b05      	ldr	r3, [sp, #20]
    1732:	2b7a      	cmp	r3, #122	; 0x7a
    1734:	bfd4      	ite	le
    1736:	2301      	movle	r3, #1
    1738:	2300      	movgt	r3, #0
    173a:	b2db      	uxtb	r3, r3
    173c:	4618      	mov	r0, r3
    173e:	f7ff f8e7 	bl	910 <DevAssert>
#if (MCAL_PLATFORM_ARM == MCAL_ARM_MARCH)
#if defined(S32K3XX) || defined(SAF85) || defined(S32R41)
    DevAssert(S32_SCB->VTOR >= (uint32)__RAM_INTERRUPT_START);
#else
    DevAssert(S32_SCB->VTOR >= (uint32)__INT_SRAM_START);
    1742:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1746:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    174a:	4a14      	ldr	r2, [pc, #80]	; (179c <IntCtrl_Ip_InstallHandlerPrivileged+0x88>)
    174c:	4293      	cmp	r3, r2
    174e:	bf2c      	ite	cs
    1750:	2301      	movcs	r3, #1
    1752:	2300      	movcc	r3, #0
    1754:	b2db      	uxtb	r3, r3
    1756:	4618      	mov	r0, r3
    1758:	f7ff f8da 	bl	910 <DevAssert>

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    175c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1760:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1764:	9304      	str	r3, [sp, #16]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1766:	9b01      	ldr	r3, [sp, #4]
    1768:	2b00      	cmp	r3, #0
    176a:	d007      	beq.n	177c <IntCtrl_Ip_InstallHandlerPrivileged+0x68>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    176c:	9b03      	ldr	r3, [sp, #12]
    176e:	3310      	adds	r3, #16
    1770:	009b      	lsls	r3, r3, #2
    1772:	9a04      	ldr	r2, [sp, #16]
    1774:	4413      	add	r3, r2
    1776:	681a      	ldr	r2, [r3, #0]
    1778:	9b01      	ldr	r3, [sp, #4]
    177a:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    177c:	9b03      	ldr	r3, [sp, #12]
    177e:	3310      	adds	r3, #16
    1780:	009b      	lsls	r3, r3, #2
    1782:	9a04      	ldr	r2, [sp, #16]
    1784:	4413      	add	r3, r2
    1786:	9a02      	ldr	r2, [sp, #8]
    1788:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    178a:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    178e:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    1792:	bf00      	nop
    1794:	b007      	add	sp, #28
    1796:	f85d fb04 	ldr.w	pc, [sp], #4
    179a:	bf00      	nop
    179c:	1fff8000 	.word	0x1fff8000

000017a0 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    17a0:	b500      	push	{lr}
    17a2:	b083      	sub	sp, #12
    17a4:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    17a6:	9b01      	ldr	r3, [sp, #4]
    17a8:	43db      	mvns	r3, r3
    17aa:	0fdb      	lsrs	r3, r3, #31
    17ac:	b2db      	uxtb	r3, r3
    17ae:	4618      	mov	r0, r3
    17b0:	f7ff f8ae 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    17b4:	9b01      	ldr	r3, [sp, #4]
    17b6:	2b7a      	cmp	r3, #122	; 0x7a
    17b8:	bfd4      	ite	le
    17ba:	2301      	movle	r3, #1
    17bc:	2300      	movgt	r3, #0
    17be:	b2db      	uxtb	r3, r3
    17c0:	4618      	mov	r0, r3
    17c2:	f7ff f8a5 	bl	910 <DevAssert>
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    17c6:	9b01      	ldr	r3, [sp, #4]
    17c8:	f003 021f 	and.w	r2, r3, #31
    17cc:	4905      	ldr	r1, [pc, #20]	; (17e4 <IntCtrl_Ip_EnableIrqPrivileged+0x44>)
    17ce:	9b01      	ldr	r3, [sp, #4]
    17d0:	095b      	lsrs	r3, r3, #5
    17d2:	2001      	movs	r0, #1
    17d4:	fa00 f202 	lsl.w	r2, r0, r2
    17d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    17dc:	bf00      	nop
    17de:	b003      	add	sp, #12
    17e0:	f85d fb04 	ldr.w	pc, [sp], #4
    17e4:	e000e100 	.word	0xe000e100

000017e8 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    17e8:	b500      	push	{lr}
    17ea:	b083      	sub	sp, #12
    17ec:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    17ee:	9b01      	ldr	r3, [sp, #4]
    17f0:	43db      	mvns	r3, r3
    17f2:	0fdb      	lsrs	r3, r3, #31
    17f4:	b2db      	uxtb	r3, r3
    17f6:	4618      	mov	r0, r3
    17f8:	f7ff f88a 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    17fc:	9b01      	ldr	r3, [sp, #4]
    17fe:	2b7a      	cmp	r3, #122	; 0x7a
    1800:	bfd4      	ite	le
    1802:	2301      	movle	r3, #1
    1804:	2300      	movgt	r3, #0
    1806:	b2db      	uxtb	r3, r3
    1808:	4618      	mov	r0, r3
    180a:	f7ff f881 	bl	910 <DevAssert>
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    180e:	9b01      	ldr	r3, [sp, #4]
    1810:	f003 021f 	and.w	r2, r3, #31
    1814:	4906      	ldr	r1, [pc, #24]	; (1830 <IntCtrl_Ip_DisableIrqPrivileged+0x48>)
    1816:	9b01      	ldr	r3, [sp, #4]
    1818:	095b      	lsrs	r3, r3, #5
    181a:	2001      	movs	r0, #1
    181c:	fa00 f202 	lsl.w	r2, r0, r2
    1820:	3320      	adds	r3, #32
    1822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1826:	bf00      	nop
    1828:	b003      	add	sp, #12
    182a:	f85d fb04 	ldr.w	pc, [sp], #4
    182e:	bf00      	nop
    1830:	e000e100 	.word	0xe000e100

00001834 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1834:	b500      	push	{lr}
    1836:	b085      	sub	sp, #20
    1838:	9001      	str	r0, [sp, #4]
    183a:	460b      	mov	r3, r1
    183c:	f88d 3003 	strb.w	r3, [sp, #3]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number and priority - dev_irqNumber is used to avoid compiler warning */
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= (sint32)eIrqNumber);
    1840:	9b01      	ldr	r3, [sp, #4]
    1842:	43db      	mvns	r3, r3
    1844:	0fdb      	lsrs	r3, r3, #31
    1846:	b2db      	uxtb	r3, r3
    1848:	4618      	mov	r0, r3
    184a:	f7ff f861 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    184e:	9b01      	ldr	r3, [sp, #4]
    1850:	2b7a      	cmp	r3, #122	; 0x7a
    1852:	bfd4      	ite	le
    1854:	2301      	movle	r3, #1
    1856:	2300      	movgt	r3, #0
    1858:	b2db      	uxtb	r3, r3
    185a:	4618      	mov	r0, r3
    185c:	f7ff f858 	bl	910 <DevAssert>
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    DevAssert(u8Priority < (uint8)(1U << INT_CTRL_IP_NVIC_PRIO_BITS));
    1860:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1864:	2b0f      	cmp	r3, #15
    1866:	bf94      	ite	ls
    1868:	2301      	movls	r3, #1
    186a:	2300      	movhi	r3, #0
    186c:	b2db      	uxtb	r3, r3
    186e:	4618      	mov	r0, r3
    1870:	f7ff f84e 	bl	910 <DevAssert>
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1874:	2304      	movs	r3, #4
    1876:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    187a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    187e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1882:	fa02 f103 	lsl.w	r1, r2, r3
    1886:	4a05      	ldr	r2, [pc, #20]	; (189c <IntCtrl_Ip_SetPriorityPrivileged+0x68>)
    1888:	9b01      	ldr	r3, [sp, #4]
    188a:	b2c9      	uxtb	r1, r1
    188c:	4413      	add	r3, r2
    188e:	460a      	mov	r2, r1
    1890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1894:	bf00      	nop
    1896:	b005      	add	sp, #20
    1898:	f85d fb04 	ldr.w	pc, [sp], #4
    189c:	e000e100 	.word	0xe000e100

000018a0 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    18a0:	b500      	push	{lr}
    18a2:	b085      	sub	sp, #20
    18a4:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number */
    DevAssert(INT_CTRL_IP_IRQ_MIN <= eIrqNumber);
    18a6:	9b01      	ldr	r3, [sp, #4]
    18a8:	43db      	mvns	r3, r3
    18aa:	0fdb      	lsrs	r3, r3, #31
    18ac:	b2db      	uxtb	r3, r3
    18ae:	4618      	mov	r0, r3
    18b0:	f7ff f82e 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    18b4:	9b01      	ldr	r3, [sp, #4]
    18b6:	2b7a      	cmp	r3, #122	; 0x7a
    18b8:	bfd4      	ite	le
    18ba:	2301      	movle	r3, #1
    18bc:	2300      	movgt	r3, #0
    18be:	b2db      	uxtb	r3, r3
    18c0:	4618      	mov	r0, r3
    18c2:	f7ff f825 	bl	910 <DevAssert>

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    18c6:	2304      	movs	r3, #4
    18c8:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    18cc:	4a09      	ldr	r2, [pc, #36]	; (18f4 <IntCtrl_Ip_GetPriorityPrivileged+0x54>)
    18ce:	9b01      	ldr	r3, [sp, #4]
    18d0:	4413      	add	r3, r2
    18d2:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    18d6:	b2db      	uxtb	r3, r3
    18d8:	461a      	mov	r2, r3
    18da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    18de:	fa42 f303 	asr.w	r3, r2, r3
    18e2:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    18e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    18ea:	4618      	mov	r0, r3
    18ec:	b005      	add	sp, #20
    18ee:	f85d fb04 	ldr.w	pc, [sp], #4
    18f2:	bf00      	nop
    18f4:	e000e100 	.word	0xe000e100

000018f8 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    18f8:	b500      	push	{lr}
    18fa:	b083      	sub	sp, #12
    18fc:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number */
    DevAssert(0 <= (sint32)eIrqNumber);
    18fe:	9b01      	ldr	r3, [sp, #4]
    1900:	43db      	mvns	r3, r3
    1902:	0fdb      	lsrs	r3, r3, #31
    1904:	b2db      	uxtb	r3, r3
    1906:	4618      	mov	r0, r3
    1908:	f7ff f802 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    190c:	9b01      	ldr	r3, [sp, #4]
    190e:	2b7a      	cmp	r3, #122	; 0x7a
    1910:	bfd4      	ite	le
    1912:	2301      	movle	r3, #1
    1914:	2300      	movgt	r3, #0
    1916:	b2db      	uxtb	r3, r3
    1918:	4618      	mov	r0, r3
    191a:	f7fe fff9 	bl	910 <DevAssert>
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    191e:	9b01      	ldr	r3, [sp, #4]
    1920:	f003 021f 	and.w	r2, r3, #31
    1924:	4906      	ldr	r1, [pc, #24]	; (1940 <IntCtrl_Ip_ClearPendingPrivileged+0x48>)
    1926:	9b01      	ldr	r3, [sp, #4]
    1928:	095b      	lsrs	r3, r3, #5
    192a:	2001      	movs	r0, #1
    192c:	fa00 f202 	lsl.w	r2, r0, r2
    1930:	3360      	adds	r3, #96	; 0x60
    1932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1936:	bf00      	nop
    1938:	b003      	add	sp, #12
    193a:	f85d fb04 	ldr.w	pc, [sp], #4
    193e:	bf00      	nop
    1940:	e000e100 	.word	0xe000e100

00001944 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1944:	b500      	push	{lr}
    1946:	b085      	sub	sp, #20
    1948:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_ENABLE_VTOR_CONFIG == STD_ON)
    S32_SCB->VTOR = pIntCtrlCtrlConfig->u32VectorTableAddress;
#endif

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    194a:	9b01      	ldr	r3, [sp, #4]
    194c:	2b00      	cmp	r3, #0
    194e:	bf14      	ite	ne
    1950:	2301      	movne	r3, #1
    1952:	2300      	moveq	r3, #0
    1954:	b2db      	uxtb	r3, r3
    1956:	4618      	mov	r0, r3
    1958:	f7fe ffda 	bl	910 <DevAssert>
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
    195c:	9b01      	ldr	r3, [sp, #4]
    195e:	681b      	ldr	r3, [r3, #0]
    1960:	2b59      	cmp	r3, #89	; 0x59
    1962:	bf94      	ite	ls
    1964:	2301      	movls	r3, #1
    1966:	2300      	movhi	r3, #0
    1968:	b2db      	uxtb	r3, r3
    196a:	4618      	mov	r0, r3
    196c:	f7fe ffd0 	bl	910 <DevAssert>
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1970:	2300      	movs	r3, #0
    1972:	9303      	str	r3, [sp, #12]
    1974:	e05d      	b.n	1a32 <IntCtrl_Ip_Init+0xee>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1976:	9b01      	ldr	r3, [sp, #4]
    1978:	6859      	ldr	r1, [r3, #4]
    197a:	9a03      	ldr	r2, [sp, #12]
    197c:	4613      	mov	r3, r2
    197e:	005b      	lsls	r3, r3, #1
    1980:	4413      	add	r3, r2
    1982:	009b      	lsls	r3, r3, #2
    1984:	440b      	add	r3, r1
    1986:	681b      	ldr	r3, [r3, #0]
    1988:	4618      	mov	r0, r3
    198a:	f000 f899 	bl	1ac0 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    198e:	9b01      	ldr	r3, [sp, #4]
    1990:	6859      	ldr	r1, [r3, #4]
    1992:	9a03      	ldr	r2, [sp, #12]
    1994:	4613      	mov	r3, r2
    1996:	005b      	lsls	r3, r3, #1
    1998:	4413      	add	r3, r2
    199a:	009b      	lsls	r3, r3, #2
    199c:	440b      	add	r3, r1
    199e:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    19a0:	9b01      	ldr	r3, [sp, #4]
    19a2:	6859      	ldr	r1, [r3, #4]
    19a4:	9a03      	ldr	r2, [sp, #12]
    19a6:	4613      	mov	r3, r2
    19a8:	005b      	lsls	r3, r3, #1
    19aa:	4413      	add	r3, r2
    19ac:	009b      	lsls	r3, r3, #2
    19ae:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19b0:	795b      	ldrb	r3, [r3, #5]
    19b2:	4619      	mov	r1, r3
    19b4:	f000 f869 	bl	1a8a <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19b8:	9b01      	ldr	r3, [sp, #4]
    19ba:	6859      	ldr	r1, [r3, #4]
    19bc:	9a03      	ldr	r2, [sp, #12]
    19be:	4613      	mov	r3, r2
    19c0:	005b      	lsls	r3, r3, #1
    19c2:	4413      	add	r3, r2
    19c4:	009b      	lsls	r3, r3, #2
    19c6:	440b      	add	r3, r1
    19c8:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    19ca:	9b01      	ldr	r3, [sp, #4]
    19cc:	6859      	ldr	r1, [r3, #4]
    19ce:	9a03      	ldr	r2, [sp, #12]
    19d0:	4613      	mov	r3, r2
    19d2:	005b      	lsls	r3, r3, #1
    19d4:	4413      	add	r3, r2
    19d6:	009b      	lsls	r3, r3, #2
    19d8:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19da:	689b      	ldr	r3, [r3, #8]
    19dc:	2200      	movs	r2, #0
    19de:	4619      	mov	r1, r3
    19e0:	f000 f831 	bl	1a46 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    19e4:	9b01      	ldr	r3, [sp, #4]
    19e6:	6859      	ldr	r1, [r3, #4]
    19e8:	9a03      	ldr	r2, [sp, #12]
    19ea:	4613      	mov	r3, r2
    19ec:	005b      	lsls	r3, r3, #1
    19ee:	4413      	add	r3, r2
    19f0:	009b      	lsls	r3, r3, #2
    19f2:	440b      	add	r3, r1
    19f4:	791b      	ldrb	r3, [r3, #4]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d00c      	beq.n	1a14 <IntCtrl_Ip_Init+0xd0>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    19fa:	9b01      	ldr	r3, [sp, #4]
    19fc:	6859      	ldr	r1, [r3, #4]
    19fe:	9a03      	ldr	r2, [sp, #12]
    1a00:	4613      	mov	r3, r2
    1a02:	005b      	lsls	r3, r3, #1
    1a04:	4413      	add	r3, r2
    1a06:	009b      	lsls	r3, r3, #2
    1a08:	440b      	add	r3, r1
    1a0a:	681b      	ldr	r3, [r3, #0]
    1a0c:	4618      	mov	r0, r3
    1a0e:	f000 f828 	bl	1a62 <IntCtrl_Ip_EnableIrq>
    1a12:	e00b      	b.n	1a2c <IntCtrl_Ip_Init+0xe8>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a14:	9b01      	ldr	r3, [sp, #4]
    1a16:	6859      	ldr	r1, [r3, #4]
    1a18:	9a03      	ldr	r2, [sp, #12]
    1a1a:	4613      	mov	r3, r2
    1a1c:	005b      	lsls	r3, r3, #1
    1a1e:	4413      	add	r3, r2
    1a20:	009b      	lsls	r3, r3, #2
    1a22:	440b      	add	r3, r1
    1a24:	681b      	ldr	r3, [r3, #0]
    1a26:	4618      	mov	r0, r3
    1a28:	f000 f825 	bl	1a76 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a2c:	9b03      	ldr	r3, [sp, #12]
    1a2e:	3301      	adds	r3, #1
    1a30:	9303      	str	r3, [sp, #12]
    1a32:	9b01      	ldr	r3, [sp, #4]
    1a34:	681b      	ldr	r3, [r3, #0]
    1a36:	9a03      	ldr	r2, [sp, #12]
    1a38:	429a      	cmp	r2, r3
    1a3a:	d39c      	bcc.n	1976 <IntCtrl_Ip_Init+0x32>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1a3c:	2300      	movs	r3, #0
}
    1a3e:	4618      	mov	r0, r3
    1a40:	b005      	add	sp, #20
    1a42:	f85d fb04 	ldr.w	pc, [sp], #4

00001a46 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1a46:	b500      	push	{lr}
    1a48:	b085      	sub	sp, #20
    1a4a:	9003      	str	r0, [sp, #12]
    1a4c:	9102      	str	r1, [sp, #8]
    1a4e:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1a50:	9a01      	ldr	r2, [sp, #4]
    1a52:	9902      	ldr	r1, [sp, #8]
    1a54:	9803      	ldr	r0, [sp, #12]
    1a56:	f7ff fe5d 	bl	1714 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1a5a:	bf00      	nop
    1a5c:	b005      	add	sp, #20
    1a5e:	f85d fb04 	ldr.w	pc, [sp], #4

00001a62 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1a62:	b500      	push	{lr}
    1a64:	b083      	sub	sp, #12
    1a66:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1a68:	9801      	ldr	r0, [sp, #4]
    1a6a:	f7ff fe99 	bl	17a0 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1a6e:	bf00      	nop
    1a70:	b003      	add	sp, #12
    1a72:	f85d fb04 	ldr.w	pc, [sp], #4

00001a76 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1a76:	b500      	push	{lr}
    1a78:	b083      	sub	sp, #12
    1a7a:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1a7c:	9801      	ldr	r0, [sp, #4]
    1a7e:	f7ff feb3 	bl	17e8 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1a82:	bf00      	nop
    1a84:	b003      	add	sp, #12
    1a86:	f85d fb04 	ldr.w	pc, [sp], #4

00001a8a <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1a8a:	b500      	push	{lr}
    1a8c:	b083      	sub	sp, #12
    1a8e:	9001      	str	r0, [sp, #4]
    1a90:	460b      	mov	r3, r1
    1a92:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1a96:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1a9a:	4619      	mov	r1, r3
    1a9c:	9801      	ldr	r0, [sp, #4]
    1a9e:	f7ff fec9 	bl	1834 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1aa2:	bf00      	nop
    1aa4:	b003      	add	sp, #12
    1aa6:	f85d fb04 	ldr.w	pc, [sp], #4

00001aaa <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1aaa:	b500      	push	{lr}
    1aac:	b083      	sub	sp, #12
    1aae:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1ab0:	9801      	ldr	r0, [sp, #4]
    1ab2:	f7ff fef5 	bl	18a0 <IntCtrl_Ip_GetPriorityPrivileged>
    1ab6:	4603      	mov	r3, r0
}
    1ab8:	4618      	mov	r0, r3
    1aba:	b003      	add	sp, #12
    1abc:	f85d fb04 	ldr.w	pc, [sp], #4

00001ac0 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1ac0:	b500      	push	{lr}
    1ac2:	b083      	sub	sp, #12
    1ac4:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1ac6:	9801      	ldr	r0, [sp, #4]
    1ac8:	f7ff ff16 	bl	18f8 <IntCtrl_Ip_ClearPendingPrivileged>
}
    1acc:	bf00      	nop
    1ace:	b003      	add	sp, #12
    1ad0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ad4 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1ad4:	b500      	push	{lr}
    1ad6:	b083      	sub	sp, #12
    1ad8:	9001      	str	r0, [sp, #4]
    1ada:	460b      	mov	r3, r1
    1adc:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1ae0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d003      	beq.n	1af0 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1ae8:	9801      	ldr	r0, [sp, #4]
    1aea:	f7ff ffba 	bl	1a62 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1aee:	e002      	b.n	1af6 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1af0:	9801      	ldr	r0, [sp, #4]
    1af2:	f7ff ffc0 	bl	1a76 <IntCtrl_Ip_DisableIrq>
}
    1af6:	bf00      	nop
    1af8:	b003      	add	sp, #12
    1afa:	f85d fb04 	ldr.w	pc, [sp], #4

00001afe <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1afe:	b500      	push	{lr}
    1b00:	b083      	sub	sp, #12
    1b02:	9001      	str	r0, [sp, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1b0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b0e:	4619      	mov	r1, r3
    1b10:	9801      	ldr	r0, [sp, #4]
    1b12:	f7ff ffba 	bl	1a8a <IntCtrl_Ip_SetPriority>
}
    1b16:	bf00      	nop
    1b18:	b003      	add	sp, #12
    1b1a:	f85d fb04 	ldr.w	pc, [sp], #4

00001b1e <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1b1e:	b500      	push	{lr}
    1b20:	b083      	sub	sp, #12
    1b22:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1b24:	9801      	ldr	r0, [sp, #4]
    1b26:	f7ff ffc0 	bl	1aaa <IntCtrl_Ip_GetPriority>
    1b2a:	4603      	mov	r3, r0
}
    1b2c:	4618      	mov	r0, r3
    1b2e:	b003      	add	sp, #12
    1b30:	f85d fb04 	ldr.w	pc, [sp], #4

00001b34 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1b34:	b500      	push	{lr}
    1b36:	b085      	sub	sp, #20
    1b38:	9003      	str	r0, [sp, #12]
    1b3a:	9102      	str	r1, [sp, #8]
    1b3c:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1b3e:	9a01      	ldr	r2, [sp, #4]
    1b40:	9902      	ldr	r1, [sp, #8]
    1b42:	9803      	ldr	r0, [sp, #12]
    1b44:	f7ff ff7f 	bl	1a46 <IntCtrl_Ip_InstallHandler>
}
    1b48:	bf00      	nop
    1b4a:	b005      	add	sp, #20
    1b4c:	f85d fb04 	ldr.w	pc, [sp], #4

00001b50 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1b50:	b500      	push	{lr}
    1b52:	b085      	sub	sp, #20
    1b54:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1b56:	2300      	movs	r3, #0
    1b58:	f88d 300f 	strb.w	r3, [sp, #15]
    (void)pConfig;
#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != pConfig)
    1b5c:	9b01      	ldr	r3, [sp, #4]
    1b5e:	2b00      	cmp	r3, #0
    1b60:	d006      	beq.n	1b70 <Platform_Init+0x20>
    {
        (void)Det_ReportError((uint16)CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INIT_ID, PLATFORM_E_PARAM_POINTER);
    1b62:	2301      	movs	r3, #1
    1b64:	2220      	movs	r2, #32
    1b66:	2100      	movs	r1, #0
    1b68:	20ff      	movs	r0, #255	; 0xff
    1b6a:	f015 f88b 	bl	16c84 <Det_ReportError>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1b6e:	e008      	b.n	1b82 <Platform_Init+0x32>
            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1b70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b74:	4a05      	ldr	r2, [pc, #20]	; (1b8c <Platform_Init+0x3c>)
    1b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	4618      	mov	r0, r3
    1b7e:	f000 f917 	bl	1db0 <Platform_Ipw_Init>
}
    1b82:	bf00      	nop
    1b84:	b005      	add	sp, #20
    1b86:	f85d fb04 	ldr.w	pc, [sp], #4
    1b8a:	bf00      	nop
    1b8c:	000191d0 	.word	0x000191d0

00001b90 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1b90:	b500      	push	{lr}
    1b92:	b085      	sub	sp, #20
    1b94:	9001      	str	r0, [sp, #4]
    1b96:	460b      	mov	r3, r1
    1b98:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1b9c:	2300      	movs	r3, #0
    1b9e:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1ba2:	9b01      	ldr	r3, [sp, #4]
    1ba4:	2b7a      	cmp	r3, #122	; 0x7a
    1ba6:	dc02      	bgt.n	1bae <Platform_SetIrq+0x1e>
    1ba8:	9b01      	ldr	r3, [sp, #4]
    1baa:	2b00      	cmp	r3, #0
    1bac:	da09      	bge.n	1bc2 <Platform_SetIrq+0x32>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1bae:	2302      	movs	r3, #2
    1bb0:	2221      	movs	r2, #33	; 0x21
    1bb2:	2100      	movs	r1, #0
    1bb4:	20ff      	movs	r0, #255	; 0xff
    1bb6:	f015 f865 	bl	16c84 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1bba:	2301      	movs	r3, #1
    1bbc:	f88d 300f 	strb.w	r3, [sp, #15]
    1bc0:	e005      	b.n	1bce <Platform_SetIrq+0x3e>
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1bc2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1bc6:	4619      	mov	r1, r3
    1bc8:	9801      	ldr	r0, [sp, #4]
    1bca:	f7ff ff83 	bl	1ad4 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1bce:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1bd2:	4618      	mov	r0, r3
    1bd4:	b005      	add	sp, #20
    1bd6:	f85d fb04 	ldr.w	pc, [sp], #4

00001bda <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1bda:	b500      	push	{lr}
    1bdc:	b085      	sub	sp, #20
    1bde:	9001      	str	r0, [sp, #4]
    1be0:	460b      	mov	r3, r1
    1be2:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1be6:	2300      	movs	r3, #0
    1be8:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1bec:	9b01      	ldr	r3, [sp, #4]
    1bee:	2b7a      	cmp	r3, #122	; 0x7a
    1bf0:	dc06      	bgt.n	1c00 <Platform_SetIrqPriority+0x26>
    1bf2:	9b01      	ldr	r3, [sp, #4]
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	db03      	blt.n	1c00 <Platform_SetIrqPriority+0x26>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
    1bf8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1bfc:	2b0f      	cmp	r3, #15
    1bfe:	d909      	bls.n	1c14 <Platform_SetIrqPriority+0x3a>
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
        (u8Priority >= (uint8)(1U << INT_CTRL_IP_GIC_PRIO_BITS)))
#endif
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1c00:	2302      	movs	r3, #2
    1c02:	2222      	movs	r2, #34	; 0x22
    1c04:	2100      	movs	r1, #0
    1c06:	20ff      	movs	r0, #255	; 0xff
    1c08:	f015 f83c 	bl	16c84 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c0c:	2301      	movs	r3, #1
    1c0e:	f88d 300f 	strb.w	r3, [sp, #15]
    1c12:	e005      	b.n	1c20 <Platform_SetIrqPriority+0x46>
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1c14:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1c18:	4619      	mov	r1, r3
    1c1a:	9801      	ldr	r0, [sp, #4]
    1c1c:	f7ff ff6f 	bl	1afe <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1c20:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1c24:	4618      	mov	r0, r3
    1c26:	b005      	add	sp, #20
    1c28:	f85d fb04 	ldr.w	pc, [sp], #4

00001c2c <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1c2c:	b500      	push	{lr}
    1c2e:	b085      	sub	sp, #20
    1c30:	9001      	str	r0, [sp, #4]
    1c32:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c34:	2300      	movs	r3, #0
    1c36:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1c3a:	9b01      	ldr	r3, [sp, #4]
    1c3c:	2b7a      	cmp	r3, #122	; 0x7a
    1c3e:	dc02      	bgt.n	1c46 <Platform_GetIrqPriority+0x1a>
    1c40:	9b01      	ldr	r3, [sp, #4]
    1c42:	2b00      	cmp	r3, #0
    1c44:	da09      	bge.n	1c5a <Platform_GetIrqPriority+0x2e>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1c46:	2302      	movs	r3, #2
    1c48:	2223      	movs	r2, #35	; 0x23
    1c4a:	2100      	movs	r1, #0
    1c4c:	20ff      	movs	r0, #255	; 0xff
    1c4e:	f015 f819 	bl	16c84 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c52:	2301      	movs	r3, #1
    1c54:	f88d 300f 	strb.w	r3, [sp, #15]
    1c58:	e013      	b.n	1c82 <Platform_GetIrqPriority+0x56>
    }
    else if (u8Priority == NULL_PTR)
    1c5a:	9b00      	ldr	r3, [sp, #0]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d109      	bne.n	1c74 <Platform_GetIrqPriority+0x48>
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_POINTER);
    1c60:	2301      	movs	r3, #1
    1c62:	2223      	movs	r2, #35	; 0x23
    1c64:	2100      	movs	r1, #0
    1c66:	20ff      	movs	r0, #255	; 0xff
    1c68:	f015 f80c 	bl	16c84 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c6c:	2301      	movs	r3, #1
    1c6e:	f88d 300f 	strb.w	r3, [sp, #15]
    1c72:	e006      	b.n	1c82 <Platform_GetIrqPriority+0x56>
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1c74:	9801      	ldr	r0, [sp, #4]
    1c76:	f7ff ff52 	bl	1b1e <Platform_Ipw_GetIrqPriority>
    1c7a:	4603      	mov	r3, r0
    1c7c:	461a      	mov	r2, r3
    1c7e:	9b00      	ldr	r3, [sp, #0]
    1c80:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1c82:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1c86:	4618      	mov	r0, r3
    1c88:	b005      	add	sp, #20
    1c8a:	f85d fb04 	ldr.w	pc, [sp], #4

00001c8e <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1c8e:	b500      	push	{lr}
    1c90:	b087      	sub	sp, #28
    1c92:	9003      	str	r0, [sp, #12]
    1c94:	9102      	str	r1, [sp, #8]
    1c96:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c98:	2300      	movs	r3, #0
    1c9a:	f88d 3017 	strb.w	r3, [sp, #23]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1c9e:	9b03      	ldr	r3, [sp, #12]
    1ca0:	2b7a      	cmp	r3, #122	; 0x7a
    1ca2:	dc02      	bgt.n	1caa <Platform_InstallIrqHandler+0x1c>
    1ca4:	9b03      	ldr	r3, [sp, #12]
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	da09      	bge.n	1cbe <Platform_InstallIrqHandler+0x30>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INSTALL_HANDLER_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1caa:	2302      	movs	r3, #2
    1cac:	2224      	movs	r2, #36	; 0x24
    1cae:	2100      	movs	r1, #0
    1cb0:	20ff      	movs	r0, #255	; 0xff
    1cb2:	f014 ffe7 	bl	16c84 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1cb6:	2301      	movs	r3, #1
    1cb8:	f88d 3017 	strb.w	r3, [sp, #23]
    1cbc:	e004      	b.n	1cc8 <Platform_InstallIrqHandler+0x3a>
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1cbe:	9a01      	ldr	r2, [sp, #4]
    1cc0:	9902      	ldr	r1, [sp, #8]
    1cc2:	9803      	ldr	r0, [sp, #12]
    1cc4:	f7ff ff36 	bl	1b34 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1cc8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1ccc:	4618      	mov	r0, r3
    1cce:	b007      	add	sp, #28
    1cd0:	f85d fb04 	ldr.w	pc, [sp], #4

00001cd4 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1cd4:	b500      	push	{lr}
    1cd6:	b085      	sub	sp, #20
    1cd8:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1cda:	2300      	movs	r3, #0
    1cdc:	9303      	str	r3, [sp, #12]
    1cde:	e05d      	b.n	1d9c <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1ce0:	9b01      	ldr	r3, [sp, #4]
    1ce2:	6859      	ldr	r1, [r3, #4]
    1ce4:	9a03      	ldr	r2, [sp, #12]
    1ce6:	4613      	mov	r3, r2
    1ce8:	005b      	lsls	r3, r3, #1
    1cea:	4413      	add	r3, r2
    1cec:	009b      	lsls	r3, r3, #2
    1cee:	440b      	add	r3, r1
    1cf0:	681b      	ldr	r3, [r3, #0]
    1cf2:	4618      	mov	r0, r3
    1cf4:	f7ff fee4 	bl	1ac0 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1cf8:	9b01      	ldr	r3, [sp, #4]
    1cfa:	6859      	ldr	r1, [r3, #4]
    1cfc:	9a03      	ldr	r2, [sp, #12]
    1cfe:	4613      	mov	r3, r2
    1d00:	005b      	lsls	r3, r3, #1
    1d02:	4413      	add	r3, r2
    1d04:	009b      	lsls	r3, r3, #2
    1d06:	440b      	add	r3, r1
    1d08:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1d0a:	9b01      	ldr	r3, [sp, #4]
    1d0c:	6859      	ldr	r1, [r3, #4]
    1d0e:	9a03      	ldr	r2, [sp, #12]
    1d10:	4613      	mov	r3, r2
    1d12:	005b      	lsls	r3, r3, #1
    1d14:	4413      	add	r3, r2
    1d16:	009b      	lsls	r3, r3, #2
    1d18:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1d1a:	795b      	ldrb	r3, [r3, #5]
    1d1c:	4619      	mov	r1, r3
    1d1e:	f7ff feb4 	bl	1a8a <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1d22:	9b01      	ldr	r3, [sp, #4]
    1d24:	6859      	ldr	r1, [r3, #4]
    1d26:	9a03      	ldr	r2, [sp, #12]
    1d28:	4613      	mov	r3, r2
    1d2a:	005b      	lsls	r3, r3, #1
    1d2c:	4413      	add	r3, r2
    1d2e:	009b      	lsls	r3, r3, #2
    1d30:	440b      	add	r3, r1
    1d32:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1d34:	9b01      	ldr	r3, [sp, #4]
    1d36:	6859      	ldr	r1, [r3, #4]
    1d38:	9a03      	ldr	r2, [sp, #12]
    1d3a:	4613      	mov	r3, r2
    1d3c:	005b      	lsls	r3, r3, #1
    1d3e:	4413      	add	r3, r2
    1d40:	009b      	lsls	r3, r3, #2
    1d42:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1d44:	689b      	ldr	r3, [r3, #8]
    1d46:	2200      	movs	r2, #0
    1d48:	4619      	mov	r1, r3
    1d4a:	f7ff fe7c 	bl	1a46 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1d4e:	9b01      	ldr	r3, [sp, #4]
    1d50:	6859      	ldr	r1, [r3, #4]
    1d52:	9a03      	ldr	r2, [sp, #12]
    1d54:	4613      	mov	r3, r2
    1d56:	005b      	lsls	r3, r3, #1
    1d58:	4413      	add	r3, r2
    1d5a:	009b      	lsls	r3, r3, #2
    1d5c:	440b      	add	r3, r1
    1d5e:	791b      	ldrb	r3, [r3, #4]
    1d60:	2b00      	cmp	r3, #0
    1d62:	d00c      	beq.n	1d7e <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1d64:	9b01      	ldr	r3, [sp, #4]
    1d66:	6859      	ldr	r1, [r3, #4]
    1d68:	9a03      	ldr	r2, [sp, #12]
    1d6a:	4613      	mov	r3, r2
    1d6c:	005b      	lsls	r3, r3, #1
    1d6e:	4413      	add	r3, r2
    1d70:	009b      	lsls	r3, r3, #2
    1d72:	440b      	add	r3, r1
    1d74:	681b      	ldr	r3, [r3, #0]
    1d76:	4618      	mov	r0, r3
    1d78:	f7ff fe73 	bl	1a62 <IntCtrl_Ip_EnableIrq>
    1d7c:	e00b      	b.n	1d96 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1d7e:	9b01      	ldr	r3, [sp, #4]
    1d80:	6859      	ldr	r1, [r3, #4]
    1d82:	9a03      	ldr	r2, [sp, #12]
    1d84:	4613      	mov	r3, r2
    1d86:	005b      	lsls	r3, r3, #1
    1d88:	4413      	add	r3, r2
    1d8a:	009b      	lsls	r3, r3, #2
    1d8c:	440b      	add	r3, r1
    1d8e:	681b      	ldr	r3, [r3, #0]
    1d90:	4618      	mov	r0, r3
    1d92:	f7ff fe70 	bl	1a76 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1d96:	9b03      	ldr	r3, [sp, #12]
    1d98:	3301      	adds	r3, #1
    1d9a:	9303      	str	r3, [sp, #12]
    1d9c:	9b01      	ldr	r3, [sp, #4]
    1d9e:	681b      	ldr	r3, [r3, #0]
    1da0:	9a03      	ldr	r2, [sp, #12]
    1da2:	429a      	cmp	r2, r3
    1da4:	d39c      	bcc.n	1ce0 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1da6:	2300      	movs	r3, #0
}
    1da8:	4618      	mov	r0, r3
    1daa:	b005      	add	sp, #20
    1dac:	f85d fb04 	ldr.w	pc, [sp], #4

00001db0 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1db0:	b500      	push	{lr}
    1db2:	b085      	sub	sp, #20
    1db4:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1db6:	2300      	movs	r3, #0
    1db8:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1dbc:	9b01      	ldr	r3, [sp, #4]
    1dbe:	681b      	ldr	r3, [r3, #0]
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d007      	beq.n	1dd4 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1dc4:	9b01      	ldr	r3, [sp, #4]
    1dc6:	681b      	ldr	r3, [r3, #0]
    1dc8:	4618      	mov	r0, r3
    1dca:	f7ff ff83 	bl	1cd4 <Platform_Ipw_InitIntCtrl>
    1dce:	4603      	mov	r3, r0
    1dd0:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1dd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1dd8:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1dda:	bf00      	nop
    1ddc:	b005      	add	sp, #20
    1dde:	f85d fb04 	ldr.w	pc, [sp], #4

00001de2 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1de2:	2300      	movs	r3, #0
}
    1de4:	4618      	mov	r0, r3
    1de6:	4770      	bx	lr

00001de8 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1de8:	b082      	sub	sp, #8
    1dea:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1dec:	2301      	movs	r3, #1
}
    1dee:	4618      	mov	r0, r3
    1df0:	b002      	add	sp, #8
    1df2:	4770      	bx	lr

00001df4 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1df4:	b082      	sub	sp, #8
    1df6:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1df8:	bf00      	nop
    1dfa:	b002      	add	sp, #8
    1dfc:	4770      	bx	lr

00001dfe <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1dfe:	b082      	sub	sp, #8
    1e00:	9001      	str	r0, [sp, #4]
    return Micros;
    1e02:	9b01      	ldr	r3, [sp, #4]
}
    1e04:	4618      	mov	r0, r3
    1e06:	b002      	add	sp, #8
    1e08:	4770      	bx	lr

00001e0a <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1e0a:	b500      	push	{lr}
    1e0c:	b083      	sub	sp, #12
    1e0e:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1e10:	f000 f86c 	bl	1eec <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1e14:	bf00      	nop
    1e16:	b003      	add	sp, #12
    1e18:	f85d fb04 	ldr.w	pc, [sp], #4

00001e1c <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1e1c:	b500      	push	{lr}
    1e1e:	b085      	sub	sp, #20
    1e20:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1e22:	2300      	movs	r3, #0
    1e24:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1e26:	9b01      	ldr	r3, [sp, #4]
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d003      	beq.n	1e34 <OsIf_GetCounter+0x18>
    1e2c:	9b01      	ldr	r3, [sp, #4]
    1e2e:	2b01      	cmp	r3, #1
    1e30:	d004      	beq.n	1e3c <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e32:	e007      	b.n	1e44 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1e34:	f7ff ffd5 	bl	1de2 <OsIf_Timer_Dummy_GetCounter>
    1e38:	9003      	str	r0, [sp, #12]
            break;
    1e3a:	e003      	b.n	1e44 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1e3c:	f000 f872 	bl	1f24 <OsIf_Timer_System_GetCounter>
    1e40:	9003      	str	r0, [sp, #12]
            break;
    1e42:	bf00      	nop
    }

    return Value;
    1e44:	9b03      	ldr	r3, [sp, #12]
}
    1e46:	4618      	mov	r0, r3
    1e48:	b005      	add	sp, #20
    1e4a:	f85d fb04 	ldr.w	pc, [sp], #4

00001e4e <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1e4e:	b500      	push	{lr}
    1e50:	b085      	sub	sp, #20
    1e52:	9001      	str	r0, [sp, #4]
    1e54:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1e56:	2300      	movs	r3, #0
    1e58:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1e5a:	9b00      	ldr	r3, [sp, #0]
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d003      	beq.n	1e68 <OsIf_GetElapsed+0x1a>
    1e60:	9b00      	ldr	r3, [sp, #0]
    1e62:	2b01      	cmp	r3, #1
    1e64:	d005      	beq.n	1e72 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e66:	e009      	b.n	1e7c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1e68:	9801      	ldr	r0, [sp, #4]
    1e6a:	f7ff ffbd 	bl	1de8 <OsIf_Timer_Dummy_GetElapsed>
    1e6e:	9003      	str	r0, [sp, #12]
            break;
    1e70:	e004      	b.n	1e7c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1e72:	9801      	ldr	r0, [sp, #4]
    1e74:	f000 f864 	bl	1f40 <OsIf_Timer_System_GetElapsed>
    1e78:	9003      	str	r0, [sp, #12]
            break;
    1e7a:	bf00      	nop
    }

    return Value;
    1e7c:	9b03      	ldr	r3, [sp, #12]
}
    1e7e:	4618      	mov	r0, r3
    1e80:	b005      	add	sp, #20
    1e82:	f85d fb04 	ldr.w	pc, [sp], #4

00001e86 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1e86:	b500      	push	{lr}
    1e88:	b083      	sub	sp, #12
    1e8a:	9001      	str	r0, [sp, #4]
    1e8c:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1e8e:	9b00      	ldr	r3, [sp, #0]
    1e90:	2b00      	cmp	r3, #0
    1e92:	d003      	beq.n	1e9c <OsIf_SetTimerFrequency+0x16>
    1e94:	9b00      	ldr	r3, [sp, #0]
    1e96:	2b01      	cmp	r3, #1
    1e98:	d004      	beq.n	1ea4 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e9a:	e007      	b.n	1eac <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1e9c:	9801      	ldr	r0, [sp, #4]
    1e9e:	f7ff ffa9 	bl	1df4 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1ea2:	e003      	b.n	1eac <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1ea4:	9801      	ldr	r0, [sp, #4]
    1ea6:	f000 f85b 	bl	1f60 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1eaa:	bf00      	nop
    }
}
    1eac:	bf00      	nop
    1eae:	b003      	add	sp, #12
    1eb0:	f85d fb04 	ldr.w	pc, [sp], #4

00001eb4 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1eb4:	b500      	push	{lr}
    1eb6:	b085      	sub	sp, #20
    1eb8:	9001      	str	r0, [sp, #4]
    1eba:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1ebc:	2300      	movs	r3, #0
    1ebe:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1ec0:	9b00      	ldr	r3, [sp, #0]
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	d003      	beq.n	1ece <OsIf_MicrosToTicks+0x1a>
    1ec6:	9b00      	ldr	r3, [sp, #0]
    1ec8:	2b01      	cmp	r3, #1
    1eca:	d005      	beq.n	1ed8 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1ecc:	e009      	b.n	1ee2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1ece:	9801      	ldr	r0, [sp, #4]
    1ed0:	f7ff ff95 	bl	1dfe <OsIf_Timer_Dummy_MicrosToTicks>
    1ed4:	9003      	str	r0, [sp, #12]
            break;
    1ed6:	e004      	b.n	1ee2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1ed8:	9801      	ldr	r0, [sp, #4]
    1eda:	f000 f84f 	bl	1f7c <OsIf_Timer_System_MicrosToTicks>
    1ede:	9003      	str	r0, [sp, #12]
            break;
    1ee0:	bf00      	nop
    }

    return Value;
    1ee2:	9b03      	ldr	r3, [sp, #12]
}
    1ee4:	4618      	mov	r0, r3
    1ee6:	b005      	add	sp, #20
    1ee8:	f85d fb04 	ldr.w	pc, [sp], #4

00001eec <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1eec:	b500      	push	{lr}
    1eee:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1ef0:	2300      	movs	r3, #0
    1ef2:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1ef4:	4a09      	ldr	r2, [pc, #36]	; (1f1c <OsIf_Timer_System_Init+0x30>)
    1ef6:	9b01      	ldr	r3, [sp, #4]
    1ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1efc:	685a      	ldr	r2, [r3, #4]
    1efe:	4908      	ldr	r1, [pc, #32]	; (1f20 <OsIf_Timer_System_Init+0x34>)
    1f00:	9b01      	ldr	r3, [sp, #4]
    1f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1f06:	4a06      	ldr	r2, [pc, #24]	; (1f20 <OsIf_Timer_System_Init+0x34>)
    1f08:	9b01      	ldr	r3, [sp, #4]
    1f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1f0e:	4618      	mov	r0, r3
    1f10:	f000 f868 	bl	1fe4 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1f14:	bf00      	nop
    1f16:	b003      	add	sp, #12
    1f18:	f85d fb04 	ldr.w	pc, [sp], #4
    1f1c:	000191c8 	.word	0x000191c8
    1f20:	1fff8b34 	.word	0x1fff8b34

00001f24 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1f24:	b500      	push	{lr}
    1f26:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1f28:	2300      	movs	r3, #0
    1f2a:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1f2c:	2300      	movs	r3, #0
    1f2e:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1f30:	f000 f86c 	bl	200c <OsIf_Timer_System_Internal_GetCounter>
    1f34:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1f36:	9b01      	ldr	r3, [sp, #4]
}
    1f38:	4618      	mov	r0, r3
    1f3a:	b003      	add	sp, #12
    1f3c:	f85d fb04 	ldr.w	pc, [sp], #4

00001f40 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1f40:	b500      	push	{lr}
    1f42:	b085      	sub	sp, #20
    1f44:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1f46:	2300      	movs	r3, #0
    1f48:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1f4a:	2300      	movs	r3, #0
    1f4c:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1f4e:	9801      	ldr	r0, [sp, #4]
    1f50:	f000 f864 	bl	201c <OsIf_Timer_System_Internal_GetElapsed>
    1f54:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1f56:	9b03      	ldr	r3, [sp, #12]
}
    1f58:	4618      	mov	r0, r3
    1f5a:	b005      	add	sp, #20
    1f5c:	f85d fb04 	ldr.w	pc, [sp], #4

00001f60 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1f60:	b084      	sub	sp, #16
    1f62:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1f64:	2300      	movs	r3, #0
    1f66:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1f68:	4903      	ldr	r1, [pc, #12]	; (1f78 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1f6a:	9b03      	ldr	r3, [sp, #12]
    1f6c:	9a01      	ldr	r2, [sp, #4]
    1f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1f72:	bf00      	nop
    1f74:	b004      	add	sp, #16
    1f76:	4770      	bx	lr
    1f78:	1fff8b34 	.word	0x1fff8b34

00001f7c <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7e:	b087      	sub	sp, #28
    1f80:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1f82:	2100      	movs	r1, #0
    1f84:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1f86:	2100      	movs	r1, #0
    1f88:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1f8a:	9901      	ldr	r1, [sp, #4]
    1f8c:	2000      	movs	r0, #0
    1f8e:	460e      	mov	r6, r1
    1f90:	4607      	mov	r7, r0
    1f92:	4812      	ldr	r0, [pc, #72]	; (1fdc <OsIf_Timer_System_MicrosToTicks+0x60>)
    1f94:	9904      	ldr	r1, [sp, #16]
    1f96:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1f9a:	2000      	movs	r0, #0
    1f9c:	460c      	mov	r4, r1
    1f9e:	4605      	mov	r5, r0
    1fa0:	fb04 f007 	mul.w	r0, r4, r7
    1fa4:	fb06 f105 	mul.w	r1, r6, r5
    1fa8:	4401      	add	r1, r0
    1faa:	fba6 2304 	umull	r2, r3, r6, r4
    1fae:	4419      	add	r1, r3
    1fb0:	460b      	mov	r3, r1
    1fb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1fb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1fbe:	4a08      	ldr	r2, [pc, #32]	; (1fe0 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1fc0:	f04f 0300 	mov.w	r3, #0
    1fc4:	f7fe faee 	bl	5a4 <__aeabi_uldivmod>
    1fc8:	4602      	mov	r2, r0
    1fca:	460b      	mov	r3, r1
    1fcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1fd0:	9b02      	ldr	r3, [sp, #8]
    1fd2:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1fd4:	9b05      	ldr	r3, [sp, #20]
}
    1fd6:	4618      	mov	r0, r3
    1fd8:	b007      	add	sp, #28
    1fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fdc:	1fff8b34 	.word	0x1fff8b34
    1fe0:	000f4240 	.word	0x000f4240

00001fe4 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1fe4:	b082      	sub	sp, #8
    1fe6:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1fe8:	4b07      	ldr	r3, [pc, #28]	; (2008 <OsIf_Timer_System_Internal_Init+0x24>)
    1fea:	2200      	movs	r2, #0
    1fec:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1fee:	4b06      	ldr	r3, [pc, #24]	; (2008 <OsIf_Timer_System_Internal_Init+0x24>)
    1ff0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1ff4:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1ff6:	4b04      	ldr	r3, [pc, #16]	; (2008 <OsIf_Timer_System_Internal_Init+0x24>)
    1ff8:	2200      	movs	r2, #0
    1ffa:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1ffc:	4b02      	ldr	r3, [pc, #8]	; (2008 <OsIf_Timer_System_Internal_Init+0x24>)
    1ffe:	2205      	movs	r2, #5
    2000:	601a      	str	r2, [r3, #0]
}
    2002:	bf00      	nop
    2004:	b002      	add	sp, #8
    2006:	4770      	bx	lr
    2008:	e000e010 	.word	0xe000e010

0000200c <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    200c:	4b02      	ldr	r3, [pc, #8]	; (2018 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    200e:	689b      	ldr	r3, [r3, #8]
    2010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    2014:	4618      	mov	r0, r3
    2016:	4770      	bx	lr
    2018:	e000e010 	.word	0xe000e010

0000201c <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    201c:	b084      	sub	sp, #16
    201e:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    2020:	4b10      	ldr	r3, [pc, #64]	; (2064 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    2022:	689b      	ldr	r3, [r3, #8]
    2024:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2028:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    202a:	2300      	movs	r3, #0
    202c:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    202e:	9b01      	ldr	r3, [sp, #4]
    2030:	681b      	ldr	r3, [r3, #0]
    2032:	9a02      	ldr	r2, [sp, #8]
    2034:	429a      	cmp	r2, r3
    2036:	d909      	bls.n	204c <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    2038:	9b01      	ldr	r3, [sp, #4]
    203a:	681a      	ldr	r2, [r3, #0]
    203c:	9b02      	ldr	r3, [sp, #8]
    203e:	1ad3      	subs	r3, r2, r3
    2040:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2044:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    2048:	9303      	str	r3, [sp, #12]
    204a:	e004      	b.n	2056 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    204c:	9b01      	ldr	r3, [sp, #4]
    204e:	681a      	ldr	r2, [r3, #0]
    2050:	9b02      	ldr	r3, [sp, #8]
    2052:	1ad3      	subs	r3, r2, r3
    2054:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    2056:	9b01      	ldr	r3, [sp, #4]
    2058:	9a02      	ldr	r2, [sp, #8]
    205a:	601a      	str	r2, [r3, #0]

    return dif;
    205c:	9b03      	ldr	r3, [sp, #12]
}
    205e:	4618      	mov	r0, r3
    2060:	b004      	add	sp, #16
    2062:	4770      	bx	lr
    2064:	e000e010 	.word	0xe000e010

00002068 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2068:	b082      	sub	sp, #8
    206a:	9001      	str	r0, [sp, #4]
    206c:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    206e:	bf00      	nop
    2070:	b002      	add	sp, #8
    2072:	4770      	bx	lr

00002074 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2074:	b500      	push	{lr}
    2076:	b085      	sub	sp, #20
    2078:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    207a:	4b24      	ldr	r3, [pc, #144]	; (210c <Clock_Ip_UpdateDriverContext+0x98>)
    207c:	2201      	movs	r2, #1
    207e:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2080:	4b23      	ldr	r3, [pc, #140]	; (2110 <Clock_Ip_UpdateDriverContext+0x9c>)
    2082:	681b      	ldr	r3, [r3, #0]
    2084:	2102      	movs	r1, #2
    2086:	4618      	mov	r0, r3
    2088:	f003 fc32 	bl	58f0 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    208c:	2300      	movs	r3, #0
    208e:	f88d 300f 	strb.w	r3, [sp, #15]
    2092:	e015      	b.n	20c0 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2094:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2098:	9a01      	ldr	r2, [sp, #4]
    209a:	334a      	adds	r3, #74	; 0x4a
    209c:	00db      	lsls	r3, r3, #3
    209e:	4413      	add	r3, r2
    20a0:	6858      	ldr	r0, [r3, #4]
    20a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    20a6:	9a01      	ldr	r2, [sp, #4]
    20a8:	334a      	adds	r3, #74	; 0x4a
    20aa:	00db      	lsls	r3, r3, #3
    20ac:	4413      	add	r3, r2
    20ae:	689b      	ldr	r3, [r3, #8]
    20b0:	4619      	mov	r1, r3
    20b2:	f001 fadc 	bl	366e <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    20b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    20ba:	3301      	adds	r3, #1
    20bc:	f88d 300f 	strb.w	r3, [sp, #15]
    20c0:	9b01      	ldr	r3, [sp, #4]
    20c2:	7bdb      	ldrb	r3, [r3, #15]
    20c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    20c8:	429a      	cmp	r2, r3
    20ca:	d3e3      	bcc.n	2094 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    20cc:	f000 f824 	bl	2118 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    20d0:	2301      	movs	r3, #1
    20d2:	f88d 300f 	strb.w	r3, [sp, #15]
    20d6:	e00e      	b.n	20f6 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    20d8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    20dc:	9b01      	ldr	r3, [sp, #4]
    20de:	327e      	adds	r2, #126	; 0x7e
    20e0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    20e4:	490b      	ldr	r1, [pc, #44]	; (2114 <Clock_Ip_UpdateDriverContext+0xa0>)
    20e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    20ea:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    20ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    20f0:	3301      	adds	r3, #1
    20f2:	f88d 300f 	strb.w	r3, [sp, #15]
    20f6:	9b01      	ldr	r3, [sp, #4]
    20f8:	7cdb      	ldrb	r3, [r3, #19]
    20fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    20fe:	429a      	cmp	r2, r3
    2100:	d3ea      	bcc.n	20d8 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2102:	bf00      	nop
    2104:	bf00      	nop
    2106:	b005      	add	sp, #20
    2108:	f85d fb04 	ldr.w	pc, [sp], #4
    210c:	1fff8b10 	.word	0x1fff8b10
    2110:	1fff8b38 	.word	0x1fff8b38
    2114:	1fff8b44 	.word	0x1fff8b44

00002118 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    2118:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    211a:	4b23      	ldr	r3, [pc, #140]	; (21a8 <Clock_Ip_CallEmptyCallbacks+0x90>)
    211c:	781b      	ldrb	r3, [r3, #0]
    211e:	f083 0301 	eor.w	r3, r3, #1
    2122:	b2db      	uxtb	r3, r3
    2124:	2b00      	cmp	r3, #0
    2126:	d03d      	beq.n	21a4 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2128:	4b1f      	ldr	r3, [pc, #124]	; (21a8 <Clock_Ip_CallEmptyCallbacks+0x90>)
    212a:	2201      	movs	r2, #1
    212c:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    212e:	4b1f      	ldr	r3, [pc, #124]	; (21ac <Clock_Ip_CallEmptyCallbacks+0x94>)
    2130:	685b      	ldr	r3, [r3, #4]
    2132:	2100      	movs	r1, #0
    2134:	2000      	movs	r0, #0
    2136:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2138:	4b1c      	ldr	r3, [pc, #112]	; (21ac <Clock_Ip_CallEmptyCallbacks+0x94>)
    213a:	689b      	ldr	r3, [r3, #8]
    213c:	2057      	movs	r0, #87	; 0x57
    213e:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2140:	4b1b      	ldr	r3, [pc, #108]	; (21b0 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2142:	681b      	ldr	r3, [r3, #0]
    2144:	2000      	movs	r0, #0
    2146:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2148:	4b1a      	ldr	r3, [pc, #104]	; (21b4 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    214a:	681b      	ldr	r3, [r3, #0]
    214c:	2000      	movs	r0, #0
    214e:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2150:	4b19      	ldr	r3, [pc, #100]	; (21b8 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2152:	681b      	ldr	r3, [r3, #0]
    2154:	2000      	movs	r0, #0
    2156:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2158:	4b18      	ldr	r3, [pc, #96]	; (21bc <Clock_Ip_CallEmptyCallbacks+0xa4>)
    215a:	685b      	ldr	r3, [r3, #4]
    215c:	2000      	movs	r0, #0
    215e:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2160:	4b16      	ldr	r3, [pc, #88]	; (21bc <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2162:	689b      	ldr	r3, [r3, #8]
    2164:	2057      	movs	r0, #87	; 0x57
    2166:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2168:	4b15      	ldr	r3, [pc, #84]	; (21c0 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    216a:	681b      	ldr	r3, [r3, #0]
    216c:	2000      	movs	r0, #0
    216e:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2170:	4b13      	ldr	r3, [pc, #76]	; (21c0 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2172:	685b      	ldr	r3, [r3, #4]
    2174:	2100      	movs	r1, #0
    2176:	2057      	movs	r0, #87	; 0x57
    2178:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    217a:	4b12      	ldr	r3, [pc, #72]	; (21c4 <Clock_Ip_CallEmptyCallbacks+0xac>)
    217c:	681b      	ldr	r3, [r3, #0]
    217e:	2000      	movs	r0, #0
    2180:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2182:	4b11      	ldr	r3, [pc, #68]	; (21c8 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2184:	685b      	ldr	r3, [r3, #4]
    2186:	2000      	movs	r0, #0
    2188:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    218a:	4b0f      	ldr	r3, [pc, #60]	; (21c8 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    218c:	689b      	ldr	r3, [r3, #8]
    218e:	2057      	movs	r0, #87	; 0x57
    2190:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2192:	4b0e      	ldr	r3, [pc, #56]	; (21cc <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2194:	685b      	ldr	r3, [r3, #4]
    2196:	2000      	movs	r0, #0
    2198:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    219a:	4b0d      	ldr	r3, [pc, #52]	; (21d0 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    219c:	681b      	ldr	r3, [r3, #0]
    219e:	2100      	movs	r1, #0
    21a0:	2000      	movs	r0, #0
    21a2:	4798      	blx	r3
    }
}
    21a4:	bf00      	nop
    21a6:	bd08      	pop	{r3, pc}
    21a8:	1fff8b3c 	.word	0x1fff8b3c
    21ac:	00018424 	.word	0x00018424
    21b0:	00018338 	.word	0x00018338
    21b4:	00018374 	.word	0x00018374
    21b8:	0001837c 	.word	0x0001837c
    21bc:	000183a4 	.word	0x000183a4
    21c0:	000183b0 	.word	0x000183b0
    21c4:	000183e8 	.word	0x000183e8
    21c8:	00018434 	.word	0x00018434
    21cc:	00018460 	.word	0x00018460
    21d0:	0001845c 	.word	0x0001845c

000021d4 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    21d4:	b500      	push	{lr}
    21d6:	b085      	sub	sp, #20
    21d8:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    21da:	9b01      	ldr	r3, [sp, #4]
    21dc:	7adb      	ldrb	r3, [r3, #11]
    21de:	9303      	str	r3, [sp, #12]
    21e0:	e01f      	b.n	2222 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    21e2:	9b03      	ldr	r3, [sp, #12]
    21e4:	1e5a      	subs	r2, r3, #1
    21e6:	9b01      	ldr	r3, [sp, #4]
    21e8:	320d      	adds	r2, #13
    21ea:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    21ee:	495a      	ldr	r1, [pc, #360]	; (2358 <Clock_Ip_ResetClockConfiguration+0x184>)
    21f0:	4613      	mov	r3, r2
    21f2:	00db      	lsls	r3, r3, #3
    21f4:	4413      	add	r3, r2
    21f6:	440b      	add	r3, r1
    21f8:	3301      	adds	r3, #1
    21fa:	781b      	ldrb	r3, [r3, #0]
    21fc:	461a      	mov	r2, r3
    21fe:	4b57      	ldr	r3, [pc, #348]	; (235c <Clock_Ip_ResetClockConfiguration+0x188>)
    2200:	5c9b      	ldrb	r3, [r3, r2]
    2202:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2204:	4a56      	ldr	r2, [pc, #344]	; (2360 <Clock_Ip_ResetClockConfiguration+0x18c>)
    2206:	9b02      	ldr	r3, [sp, #8]
    2208:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    220c:	9a03      	ldr	r2, [sp, #12]
    220e:	3a01      	subs	r2, #1
    2210:	320d      	adds	r2, #13
    2212:	00d2      	lsls	r2, r2, #3
    2214:	9901      	ldr	r1, [sp, #4]
    2216:	440a      	add	r2, r1
    2218:	4610      	mov	r0, r2
    221a:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    221c:	9b03      	ldr	r3, [sp, #12]
    221e:	3b01      	subs	r3, #1
    2220:	9303      	str	r3, [sp, #12]
    2222:	9b03      	ldr	r3, [sp, #12]
    2224:	2b00      	cmp	r3, #0
    2226:	d1dc      	bne.n	21e2 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2228:	9b01      	ldr	r3, [sp, #4]
    222a:	7b9b      	ldrb	r3, [r3, #14]
    222c:	9303      	str	r3, [sp, #12]
    222e:	e026      	b.n	227e <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2230:	9b03      	ldr	r3, [sp, #12]
    2232:	3b01      	subs	r3, #1
    2234:	9a01      	ldr	r2, [sp, #4]
    2236:	3324      	adds	r3, #36	; 0x24
    2238:	011b      	lsls	r3, r3, #4
    223a:	4413      	add	r3, r2
    223c:	3304      	adds	r3, #4
    223e:	681a      	ldr	r2, [r3, #0]
    2240:	4945      	ldr	r1, [pc, #276]	; (2358 <Clock_Ip_ResetClockConfiguration+0x184>)
    2242:	4613      	mov	r3, r2
    2244:	00db      	lsls	r3, r3, #3
    2246:	4413      	add	r3, r2
    2248:	440b      	add	r3, r1
    224a:	3301      	adds	r3, #1
    224c:	781b      	ldrb	r3, [r3, #0]
    224e:	461a      	mov	r2, r3
    2250:	4b44      	ldr	r3, [pc, #272]	; (2364 <Clock_Ip_ResetClockConfiguration+0x190>)
    2252:	5c9b      	ldrb	r3, [r3, r2]
    2254:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2256:	4944      	ldr	r1, [pc, #272]	; (2368 <Clock_Ip_ResetClockConfiguration+0x194>)
    2258:	9a02      	ldr	r2, [sp, #8]
    225a:	4613      	mov	r3, r2
    225c:	005b      	lsls	r3, r3, #1
    225e:	4413      	add	r3, r2
    2260:	009b      	lsls	r3, r3, #2
    2262:	440b      	add	r3, r1
    2264:	681b      	ldr	r3, [r3, #0]
    2266:	9a03      	ldr	r2, [sp, #12]
    2268:	3a01      	subs	r2, #1
    226a:	3224      	adds	r2, #36	; 0x24
    226c:	0112      	lsls	r2, r2, #4
    226e:	9901      	ldr	r1, [sp, #4]
    2270:	440a      	add	r2, r1
    2272:	3204      	adds	r2, #4
    2274:	4610      	mov	r0, r2
    2276:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2278:	9b03      	ldr	r3, [sp, #12]
    227a:	3b01      	subs	r3, #1
    227c:	9303      	str	r3, [sp, #12]
    227e:	9b03      	ldr	r3, [sp, #12]
    2280:	2b00      	cmp	r3, #0
    2282:	d1d5      	bne.n	2230 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2284:	9b01      	ldr	r3, [sp, #4]
    2286:	7a9b      	ldrb	r3, [r3, #10]
    2288:	9303      	str	r3, [sp, #12]
    228a:	e02a      	b.n	22e2 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    228c:	9b03      	ldr	r3, [sp, #12]
    228e:	1e5a      	subs	r2, r3, #1
    2290:	9901      	ldr	r1, [sp, #4]
    2292:	4613      	mov	r3, r2
    2294:	009b      	lsls	r3, r3, #2
    2296:	4413      	add	r3, r2
    2298:	00db      	lsls	r3, r3, #3
    229a:	440b      	add	r3, r1
    229c:	3340      	adds	r3, #64	; 0x40
    229e:	681a      	ldr	r2, [r3, #0]
    22a0:	492d      	ldr	r1, [pc, #180]	; (2358 <Clock_Ip_ResetClockConfiguration+0x184>)
    22a2:	4613      	mov	r3, r2
    22a4:	00db      	lsls	r3, r3, #3
    22a6:	4413      	add	r3, r2
    22a8:	440b      	add	r3, r1
    22aa:	3301      	adds	r3, #1
    22ac:	781b      	ldrb	r3, [r3, #0]
    22ae:	461a      	mov	r2, r3
    22b0:	4b2e      	ldr	r3, [pc, #184]	; (236c <Clock_Ip_ResetClockConfiguration+0x198>)
    22b2:	5c9b      	ldrb	r3, [r3, r2]
    22b4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    22b6:	492e      	ldr	r1, [pc, #184]	; (2370 <Clock_Ip_ResetClockConfiguration+0x19c>)
    22b8:	9a02      	ldr	r2, [sp, #8]
    22ba:	4613      	mov	r3, r2
    22bc:	009b      	lsls	r3, r3, #2
    22be:	4413      	add	r3, r2
    22c0:	009b      	lsls	r3, r3, #2
    22c2:	440b      	add	r3, r1
    22c4:	6819      	ldr	r1, [r3, #0]
    22c6:	9b03      	ldr	r3, [sp, #12]
    22c8:	1e5a      	subs	r2, r3, #1
    22ca:	4613      	mov	r3, r2
    22cc:	009b      	lsls	r3, r3, #2
    22ce:	4413      	add	r3, r2
    22d0:	00db      	lsls	r3, r3, #3
    22d2:	3340      	adds	r3, #64	; 0x40
    22d4:	9a01      	ldr	r2, [sp, #4]
    22d6:	4413      	add	r3, r2
    22d8:	4618      	mov	r0, r3
    22da:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    22dc:	9b03      	ldr	r3, [sp, #12]
    22de:	3b01      	subs	r3, #1
    22e0:	9303      	str	r3, [sp, #12]
    22e2:	9b03      	ldr	r3, [sp, #12]
    22e4:	2b00      	cmp	r3, #0
    22e6:	d1d1      	bne.n	228c <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    22e8:	9b01      	ldr	r3, [sp, #4]
    22ea:	7a5b      	ldrb	r3, [r3, #9]
    22ec:	9303      	str	r3, [sp, #12]
    22ee:	e02b      	b.n	2348 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    22f0:	9b03      	ldr	r3, [sp, #12]
    22f2:	1e5a      	subs	r2, r3, #1
    22f4:	9901      	ldr	r1, [sp, #4]
    22f6:	4613      	mov	r3, r2
    22f8:	009b      	lsls	r3, r3, #2
    22fa:	4413      	add	r3, r2
    22fc:	009b      	lsls	r3, r3, #2
    22fe:	440b      	add	r3, r1
    2300:	332c      	adds	r3, #44	; 0x2c
    2302:	681a      	ldr	r2, [r3, #0]
    2304:	4914      	ldr	r1, [pc, #80]	; (2358 <Clock_Ip_ResetClockConfiguration+0x184>)
    2306:	4613      	mov	r3, r2
    2308:	00db      	lsls	r3, r3, #3
    230a:	4413      	add	r3, r2
    230c:	440b      	add	r3, r1
    230e:	3301      	adds	r3, #1
    2310:	781b      	ldrb	r3, [r3, #0]
    2312:	461a      	mov	r2, r3
    2314:	4b17      	ldr	r3, [pc, #92]	; (2374 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2316:	5c9b      	ldrb	r3, [r3, r2]
    2318:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    231a:	4917      	ldr	r1, [pc, #92]	; (2378 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    231c:	9a02      	ldr	r2, [sp, #8]
    231e:	4613      	mov	r3, r2
    2320:	009b      	lsls	r3, r3, #2
    2322:	4413      	add	r3, r2
    2324:	009b      	lsls	r3, r3, #2
    2326:	440b      	add	r3, r1
    2328:	6819      	ldr	r1, [r3, #0]
    232a:	9b03      	ldr	r3, [sp, #12]
    232c:	1e5a      	subs	r2, r3, #1
    232e:	4613      	mov	r3, r2
    2330:	009b      	lsls	r3, r3, #2
    2332:	4413      	add	r3, r2
    2334:	009b      	lsls	r3, r3, #2
    2336:	3328      	adds	r3, #40	; 0x28
    2338:	9a01      	ldr	r2, [sp, #4]
    233a:	4413      	add	r3, r2
    233c:	3304      	adds	r3, #4
    233e:	4618      	mov	r0, r3
    2340:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2342:	9b03      	ldr	r3, [sp, #12]
    2344:	3b01      	subs	r3, #1
    2346:	9303      	str	r3, [sp, #12]
    2348:	9b03      	ldr	r3, [sp, #12]
    234a:	2b00      	cmp	r3, #0
    234c:	d1d0      	bne.n	22f0 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    234e:	bf00      	nop
    2350:	bf00      	nop
    2352:	b005      	add	sp, #20
    2354:	f85d fb04 	ldr.w	pc, [sp], #4
    2358:	00017e28 	.word	0x00017e28
    235c:	00017df8 	.word	0x00017df8
    2360:	00018460 	.word	0x00018460
    2364:	00017dd8 	.word	0x00017dd8
    2368:	000183a4 	.word	0x000183a4
    236c:	00017de8 	.word	0x00017de8
    2370:	00018434 	.word	0x00018434
    2374:	00017da8 	.word	0x00017da8
    2378:	0001837c 	.word	0x0001837c

0000237c <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    237c:	b500      	push	{lr}
    237e:	b085      	sub	sp, #20
    2380:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2382:	2301      	movs	r3, #1
    2384:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2386:	9801      	ldr	r0, [sp, #4]
    2388:	f000 f818 	bl	23bc <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    238c:	4b0a      	ldr	r3, [pc, #40]	; (23b8 <Clock_Ip_Init+0x3c>)
    238e:	781b      	ldrb	r3, [r3, #0]
    2390:	2b00      	cmp	r3, #0
    2392:	d00a      	beq.n	23aa <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2394:	f000 fb74 	bl	2a80 <Clock_Ip_GetPllStatus>
    2398:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    239a:	9b02      	ldr	r3, [sp, #8]
    239c:	2b00      	cmp	r3, #0
    239e:	d106      	bne.n	23ae <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    23a0:	f000 fbf2 	bl	2b88 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    23a4:	2300      	movs	r3, #0
    23a6:	9303      	str	r3, [sp, #12]
    23a8:	e001      	b.n	23ae <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    23aa:	2300      	movs	r3, #0
    23ac:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    23ae:	9b03      	ldr	r3, [sp, #12]
}
    23b0:	4618      	mov	r0, r3
    23b2:	b005      	add	sp, #20
    23b4:	f85d fb04 	ldr.w	pc, [sp], #4
    23b8:	1fff8b40 	.word	0x1fff8b40

000023bc <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    23bc:	b510      	push	{r4, lr}
    23be:	b084      	sub	sp, #16
    23c0:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    23c2:	4a9f      	ldr	r2, [pc, #636]	; (2640 <Clock_Ip_InitClock+0x284>)
    23c4:	9b01      	ldr	r3, [sp, #4]
    23c6:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    23c8:	2101      	movs	r1, #1
    23ca:	9801      	ldr	r0, [sp, #4]
    23cc:	f003 fa90 	bl	58f0 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    23d0:	4b9b      	ldr	r3, [pc, #620]	; (2640 <Clock_Ip_InitClock+0x284>)
    23d2:	681b      	ldr	r3, [r3, #0]
    23d4:	2b00      	cmp	r3, #0
    23d6:	d030      	beq.n	243a <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    23d8:	2300      	movs	r3, #0
    23da:	9303      	str	r3, [sp, #12]
    23dc:	e027      	b.n	242e <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    23de:	9901      	ldr	r1, [sp, #4]
    23e0:	9a03      	ldr	r2, [sp, #12]
    23e2:	4613      	mov	r3, r2
    23e4:	009b      	lsls	r3, r3, #2
    23e6:	4413      	add	r3, r2
    23e8:	009b      	lsls	r3, r3, #2
    23ea:	440b      	add	r3, r1
    23ec:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    23f0:	681a      	ldr	r2, [r3, #0]
    23f2:	4994      	ldr	r1, [pc, #592]	; (2644 <Clock_Ip_InitClock+0x288>)
    23f4:	4613      	mov	r3, r2
    23f6:	00db      	lsls	r3, r3, #3
    23f8:	4413      	add	r3, r2
    23fa:	440b      	add	r3, r1
    23fc:	3301      	adds	r3, #1
    23fe:	781b      	ldrb	r3, [r3, #0]
    2400:	461a      	mov	r2, r3
    2402:	4b91      	ldr	r3, [pc, #580]	; (2648 <Clock_Ip_InitClock+0x28c>)
    2404:	5c9b      	ldrb	r3, [r3, r2]
    2406:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2408:	4a90      	ldr	r2, [pc, #576]	; (264c <Clock_Ip_InitClock+0x290>)
    240a:	9b02      	ldr	r3, [sp, #8]
    240c:	011b      	lsls	r3, r3, #4
    240e:	4413      	add	r3, r2
    2410:	6819      	ldr	r1, [r3, #0]
    2412:	9a03      	ldr	r2, [sp, #12]
    2414:	4613      	mov	r3, r2
    2416:	009b      	lsls	r3, r3, #2
    2418:	4413      	add	r3, r2
    241a:	009b      	lsls	r3, r3, #2
    241c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2420:	9a01      	ldr	r2, [sp, #4]
    2422:	4413      	add	r3, r2
    2424:	4618      	mov	r0, r3
    2426:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2428:	9b03      	ldr	r3, [sp, #12]
    242a:	3301      	adds	r3, #1
    242c:	9303      	str	r3, [sp, #12]
    242e:	9b01      	ldr	r3, [sp, #4]
    2430:	7c9b      	ldrb	r3, [r3, #18]
    2432:	461a      	mov	r2, r3
    2434:	9b03      	ldr	r3, [sp, #12]
    2436:	4293      	cmp	r3, r2
    2438:	d3d1      	bcc.n	23de <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    243a:	9801      	ldr	r0, [sp, #4]
    243c:	f7ff feca 	bl	21d4 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2440:	2300      	movs	r3, #0
    2442:	9303      	str	r3, [sp, #12]
    2444:	e029      	b.n	249a <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2446:	9901      	ldr	r1, [sp, #4]
    2448:	9a03      	ldr	r2, [sp, #12]
    244a:	4613      	mov	r3, r2
    244c:	005b      	lsls	r3, r3, #1
    244e:	4413      	add	r3, r2
    2450:	009b      	lsls	r3, r3, #2
    2452:	440b      	add	r3, r1
    2454:	3314      	adds	r3, #20
    2456:	681a      	ldr	r2, [r3, #0]
    2458:	497a      	ldr	r1, [pc, #488]	; (2644 <Clock_Ip_InitClock+0x288>)
    245a:	4613      	mov	r3, r2
    245c:	00db      	lsls	r3, r3, #3
    245e:	4413      	add	r3, r2
    2460:	440b      	add	r3, r1
    2462:	3301      	adds	r3, #1
    2464:	781b      	ldrb	r3, [r3, #0]
    2466:	461a      	mov	r2, r3
    2468:	4b79      	ldr	r3, [pc, #484]	; (2650 <Clock_Ip_InitClock+0x294>)
    246a:	5c9b      	ldrb	r3, [r3, r2]
    246c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    246e:	4979      	ldr	r1, [pc, #484]	; (2654 <Clock_Ip_InitClock+0x298>)
    2470:	9a02      	ldr	r2, [sp, #8]
    2472:	4613      	mov	r3, r2
    2474:	005b      	lsls	r3, r3, #1
    2476:	4413      	add	r3, r2
    2478:	009b      	lsls	r3, r3, #2
    247a:	440b      	add	r3, r1
    247c:	6819      	ldr	r1, [r3, #0]
    247e:	9a03      	ldr	r2, [sp, #12]
    2480:	4613      	mov	r3, r2
    2482:	005b      	lsls	r3, r3, #1
    2484:	4413      	add	r3, r2
    2486:	009b      	lsls	r3, r3, #2
    2488:	3310      	adds	r3, #16
    248a:	9a01      	ldr	r2, [sp, #4]
    248c:	4413      	add	r3, r2
    248e:	3304      	adds	r3, #4
    2490:	4618      	mov	r0, r3
    2492:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2494:	9b03      	ldr	r3, [sp, #12]
    2496:	3301      	adds	r3, #1
    2498:	9303      	str	r3, [sp, #12]
    249a:	9b01      	ldr	r3, [sp, #4]
    249c:	7a1b      	ldrb	r3, [r3, #8]
    249e:	461a      	mov	r2, r3
    24a0:	9b03      	ldr	r3, [sp, #12]
    24a2:	4293      	cmp	r3, r2
    24a4:	d3cf      	bcc.n	2446 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    24a6:	2300      	movs	r3, #0
    24a8:	9303      	str	r3, [sp, #12]
    24aa:	e02a      	b.n	2502 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    24ac:	9901      	ldr	r1, [sp, #4]
    24ae:	9a03      	ldr	r2, [sp, #12]
    24b0:	4613      	mov	r3, r2
    24b2:	009b      	lsls	r3, r3, #2
    24b4:	4413      	add	r3, r2
    24b6:	009b      	lsls	r3, r3, #2
    24b8:	440b      	add	r3, r1
    24ba:	332c      	adds	r3, #44	; 0x2c
    24bc:	681a      	ldr	r2, [r3, #0]
    24be:	4961      	ldr	r1, [pc, #388]	; (2644 <Clock_Ip_InitClock+0x288>)
    24c0:	4613      	mov	r3, r2
    24c2:	00db      	lsls	r3, r3, #3
    24c4:	4413      	add	r3, r2
    24c6:	440b      	add	r3, r1
    24c8:	3301      	adds	r3, #1
    24ca:	781b      	ldrb	r3, [r3, #0]
    24cc:	461a      	mov	r2, r3
    24ce:	4b62      	ldr	r3, [pc, #392]	; (2658 <Clock_Ip_InitClock+0x29c>)
    24d0:	5c9b      	ldrb	r3, [r3, r2]
    24d2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    24d4:	4961      	ldr	r1, [pc, #388]	; (265c <Clock_Ip_InitClock+0x2a0>)
    24d6:	9a02      	ldr	r2, [sp, #8]
    24d8:	4613      	mov	r3, r2
    24da:	009b      	lsls	r3, r3, #2
    24dc:	4413      	add	r3, r2
    24de:	009b      	lsls	r3, r3, #2
    24e0:	440b      	add	r3, r1
    24e2:	3304      	adds	r3, #4
    24e4:	6819      	ldr	r1, [r3, #0]
    24e6:	9a03      	ldr	r2, [sp, #12]
    24e8:	4613      	mov	r3, r2
    24ea:	009b      	lsls	r3, r3, #2
    24ec:	4413      	add	r3, r2
    24ee:	009b      	lsls	r3, r3, #2
    24f0:	3328      	adds	r3, #40	; 0x28
    24f2:	9a01      	ldr	r2, [sp, #4]
    24f4:	4413      	add	r3, r2
    24f6:	3304      	adds	r3, #4
    24f8:	4618      	mov	r0, r3
    24fa:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    24fc:	9b03      	ldr	r3, [sp, #12]
    24fe:	3301      	adds	r3, #1
    2500:	9303      	str	r3, [sp, #12]
    2502:	9b01      	ldr	r3, [sp, #4]
    2504:	7a5b      	ldrb	r3, [r3, #9]
    2506:	461a      	mov	r2, r3
    2508:	9b03      	ldr	r3, [sp, #12]
    250a:	4293      	cmp	r3, r2
    250c:	d3ce      	bcc.n	24ac <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    250e:	9801      	ldr	r0, [sp, #4]
    2510:	f7ff fdb0 	bl	2074 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2514:	2300      	movs	r3, #0
    2516:	9303      	str	r3, [sp, #12]
    2518:	e028      	b.n	256c <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    251a:	9901      	ldr	r1, [sp, #4]
    251c:	9a03      	ldr	r2, [sp, #12]
    251e:	4613      	mov	r3, r2
    2520:	009b      	lsls	r3, r3, #2
    2522:	4413      	add	r3, r2
    2524:	009b      	lsls	r3, r3, #2
    2526:	440b      	add	r3, r1
    2528:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    252c:	681a      	ldr	r2, [r3, #0]
    252e:	4945      	ldr	r1, [pc, #276]	; (2644 <Clock_Ip_InitClock+0x288>)
    2530:	4613      	mov	r3, r2
    2532:	00db      	lsls	r3, r3, #3
    2534:	4413      	add	r3, r2
    2536:	440b      	add	r3, r1
    2538:	3301      	adds	r3, #1
    253a:	781b      	ldrb	r3, [r3, #0]
    253c:	461a      	mov	r2, r3
    253e:	4b48      	ldr	r3, [pc, #288]	; (2660 <Clock_Ip_InitClock+0x2a4>)
    2540:	5c9b      	ldrb	r3, [r3, r2]
    2542:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2544:	4a47      	ldr	r2, [pc, #284]	; (2664 <Clock_Ip_InitClock+0x2a8>)
    2546:	9b02      	ldr	r3, [sp, #8]
    2548:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    254c:	9a03      	ldr	r2, [sp, #12]
    254e:	4613      	mov	r3, r2
    2550:	009b      	lsls	r3, r3, #2
    2552:	4413      	add	r3, r2
    2554:	009b      	lsls	r3, r3, #2
    2556:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    255a:	9a01      	ldr	r2, [sp, #4]
    255c:	4413      	add	r3, r2
    255e:	3304      	adds	r3, #4
    2560:	9903      	ldr	r1, [sp, #12]
    2562:	4618      	mov	r0, r3
    2564:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2566:	9b03      	ldr	r3, [sp, #12]
    2568:	3301      	adds	r3, #1
    256a:	9303      	str	r3, [sp, #12]
    256c:	9b01      	ldr	r3, [sp, #4]
    256e:	7c5b      	ldrb	r3, [r3, #17]
    2570:	461a      	mov	r2, r3
    2572:	9b03      	ldr	r3, [sp, #12]
    2574:	4293      	cmp	r3, r2
    2576:	d3d0      	bcc.n	251a <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2578:	2300      	movs	r3, #0
    257a:	9303      	str	r3, [sp, #12]
    257c:	e026      	b.n	25cc <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    257e:	9901      	ldr	r1, [sp, #4]
    2580:	9a03      	ldr	r2, [sp, #12]
    2582:	4613      	mov	r3, r2
    2584:	005b      	lsls	r3, r3, #1
    2586:	4413      	add	r3, r2
    2588:	009b      	lsls	r3, r3, #2
    258a:	440b      	add	r3, r1
    258c:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2590:	681a      	ldr	r2, [r3, #0]
    2592:	492c      	ldr	r1, [pc, #176]	; (2644 <Clock_Ip_InitClock+0x288>)
    2594:	4613      	mov	r3, r2
    2596:	00db      	lsls	r3, r3, #3
    2598:	4413      	add	r3, r2
    259a:	440b      	add	r3, r1
    259c:	3301      	adds	r3, #1
    259e:	781b      	ldrb	r3, [r3, #0]
    25a0:	461a      	mov	r2, r3
    25a2:	4b31      	ldr	r3, [pc, #196]	; (2668 <Clock_Ip_InitClock+0x2ac>)
    25a4:	5c9b      	ldrb	r3, [r3, r2]
    25a6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    25a8:	4a30      	ldr	r2, [pc, #192]	; (266c <Clock_Ip_InitClock+0x2b0>)
    25aa:	9b02      	ldr	r3, [sp, #8]
    25ac:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    25b0:	9a03      	ldr	r2, [sp, #12]
    25b2:	4613      	mov	r3, r2
    25b4:	005b      	lsls	r3, r3, #1
    25b6:	4413      	add	r3, r2
    25b8:	009b      	lsls	r3, r3, #2
    25ba:	f503 730e 	add.w	r3, r3, #568	; 0x238
    25be:	9a01      	ldr	r2, [sp, #4]
    25c0:	4413      	add	r3, r2
    25c2:	4618      	mov	r0, r3
    25c4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    25c6:	9b03      	ldr	r3, [sp, #12]
    25c8:	3301      	adds	r3, #1
    25ca:	9303      	str	r3, [sp, #12]
    25cc:	9b01      	ldr	r3, [sp, #4]
    25ce:	7b5b      	ldrb	r3, [r3, #13]
    25d0:	461a      	mov	r2, r3
    25d2:	9b03      	ldr	r3, [sp, #12]
    25d4:	4293      	cmp	r3, r2
    25d6:	d3d2      	bcc.n	257e <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    25d8:	2300      	movs	r3, #0
    25da:	9303      	str	r3, [sp, #12]
    25dc:	e026      	b.n	262c <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    25de:	9901      	ldr	r1, [sp, #4]
    25e0:	9a03      	ldr	r2, [sp, #12]
    25e2:	4613      	mov	r3, r2
    25e4:	005b      	lsls	r3, r3, #1
    25e6:	4413      	add	r3, r2
    25e8:	009b      	lsls	r3, r3, #2
    25ea:	440b      	add	r3, r1
    25ec:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    25f0:	681a      	ldr	r2, [r3, #0]
    25f2:	4914      	ldr	r1, [pc, #80]	; (2644 <Clock_Ip_InitClock+0x288>)
    25f4:	4613      	mov	r3, r2
    25f6:	00db      	lsls	r3, r3, #3
    25f8:	4413      	add	r3, r2
    25fa:	440b      	add	r3, r1
    25fc:	3301      	adds	r3, #1
    25fe:	781b      	ldrb	r3, [r3, #0]
    2600:	461a      	mov	r2, r3
    2602:	4b1b      	ldr	r3, [pc, #108]	; (2670 <Clock_Ip_InitClock+0x2b4>)
    2604:	5c9b      	ldrb	r3, [r3, r2]
    2606:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2608:	4a1a      	ldr	r2, [pc, #104]	; (2674 <Clock_Ip_InitClock+0x2b8>)
    260a:	9b02      	ldr	r3, [sp, #8]
    260c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2610:	9a03      	ldr	r2, [sp, #12]
    2612:	4613      	mov	r3, r2
    2614:	005b      	lsls	r3, r3, #1
    2616:	4413      	add	r3, r2
    2618:	009b      	lsls	r3, r3, #2
    261a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    261e:	9a01      	ldr	r2, [sp, #4]
    2620:	4413      	add	r3, r2
    2622:	4618      	mov	r0, r3
    2624:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2626:	9b03      	ldr	r3, [sp, #12]
    2628:	3301      	adds	r3, #1
    262a:	9303      	str	r3, [sp, #12]
    262c:	9b01      	ldr	r3, [sp, #4]
    262e:	7b1b      	ldrb	r3, [r3, #12]
    2630:	461a      	mov	r2, r3
    2632:	9b03      	ldr	r3, [sp, #12]
    2634:	4293      	cmp	r3, r2
    2636:	d3d2      	bcc.n	25de <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2638:	2300      	movs	r3, #0
    263a:	9303      	str	r3, [sp, #12]
    263c:	e044      	b.n	26c8 <Clock_Ip_InitClock+0x30c>
    263e:	bf00      	nop
    2640:	1fff8b38 	.word	0x1fff8b38
    2644:	00017e28 	.word	0x00017e28
    2648:	00017e18 	.word	0x00017e18
    264c:	00018424 	.word	0x00018424
    2650:	00017db8 	.word	0x00017db8
    2654:	000183e8 	.word	0x000183e8
    2658:	00017da8 	.word	0x00017da8
    265c:	0001837c 	.word	0x0001837c
    2660:	00017e08 	.word	0x00017e08
    2664:	0001845c 	.word	0x0001845c
    2668:	00017d98 	.word	0x00017d98
    266c:	00018374 	.word	0x00018374
    2670:	00017d88 	.word	0x00017d88
    2674:	00018338 	.word	0x00018338
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2678:	9901      	ldr	r1, [sp, #4]
    267a:	9a03      	ldr	r2, [sp, #12]
    267c:	4613      	mov	r3, r2
    267e:	005b      	lsls	r3, r3, #1
    2680:	4413      	add	r3, r2
    2682:	009b      	lsls	r3, r3, #2
    2684:	440b      	add	r3, r1
    2686:	f503 730e 	add.w	r3, r3, #568	; 0x238
    268a:	681a      	ldr	r2, [r3, #0]
    268c:	49ac      	ldr	r1, [pc, #688]	; (2940 <Clock_Ip_InitClock+0x584>)
    268e:	4613      	mov	r3, r2
    2690:	00db      	lsls	r3, r3, #3
    2692:	4413      	add	r3, r2
    2694:	440b      	add	r3, r1
    2696:	3301      	adds	r3, #1
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	461a      	mov	r2, r3
    269c:	4ba9      	ldr	r3, [pc, #676]	; (2944 <Clock_Ip_InitClock+0x588>)
    269e:	5c9b      	ldrb	r3, [r3, r2]
    26a0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    26a2:	4aa9      	ldr	r2, [pc, #676]	; (2948 <Clock_Ip_InitClock+0x58c>)
    26a4:	9b02      	ldr	r3, [sp, #8]
    26a6:	00db      	lsls	r3, r3, #3
    26a8:	4413      	add	r3, r2
    26aa:	6859      	ldr	r1, [r3, #4]
    26ac:	9a03      	ldr	r2, [sp, #12]
    26ae:	4613      	mov	r3, r2
    26b0:	005b      	lsls	r3, r3, #1
    26b2:	4413      	add	r3, r2
    26b4:	009b      	lsls	r3, r3, #2
    26b6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    26ba:	9a01      	ldr	r2, [sp, #4]
    26bc:	4413      	add	r3, r2
    26be:	4618      	mov	r0, r3
    26c0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    26c2:	9b03      	ldr	r3, [sp, #12]
    26c4:	3301      	adds	r3, #1
    26c6:	9303      	str	r3, [sp, #12]
    26c8:	9b01      	ldr	r3, [sp, #4]
    26ca:	7b5b      	ldrb	r3, [r3, #13]
    26cc:	461a      	mov	r2, r3
    26ce:	9b03      	ldr	r3, [sp, #12]
    26d0:	4293      	cmp	r3, r2
    26d2:	d3d1      	bcc.n	2678 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    26d4:	2300      	movs	r3, #0
    26d6:	9303      	str	r3, [sp, #12]
    26d8:	e029      	b.n	272e <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    26da:	9901      	ldr	r1, [sp, #4]
    26dc:	9a03      	ldr	r2, [sp, #12]
    26de:	4613      	mov	r3, r2
    26e0:	009b      	lsls	r3, r3, #2
    26e2:	4413      	add	r3, r2
    26e4:	00db      	lsls	r3, r3, #3
    26e6:	440b      	add	r3, r1
    26e8:	3340      	adds	r3, #64	; 0x40
    26ea:	681a      	ldr	r2, [r3, #0]
    26ec:	4994      	ldr	r1, [pc, #592]	; (2940 <Clock_Ip_InitClock+0x584>)
    26ee:	4613      	mov	r3, r2
    26f0:	00db      	lsls	r3, r3, #3
    26f2:	4413      	add	r3, r2
    26f4:	440b      	add	r3, r1
    26f6:	3301      	adds	r3, #1
    26f8:	781b      	ldrb	r3, [r3, #0]
    26fa:	461a      	mov	r2, r3
    26fc:	4b93      	ldr	r3, [pc, #588]	; (294c <Clock_Ip_InitClock+0x590>)
    26fe:	5c9b      	ldrb	r3, [r3, r2]
    2700:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2702:	4993      	ldr	r1, [pc, #588]	; (2950 <Clock_Ip_InitClock+0x594>)
    2704:	9a02      	ldr	r2, [sp, #8]
    2706:	4613      	mov	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	4413      	add	r3, r2
    270c:	009b      	lsls	r3, r3, #2
    270e:	440b      	add	r3, r1
    2710:	3304      	adds	r3, #4
    2712:	6819      	ldr	r1, [r3, #0]
    2714:	9a03      	ldr	r2, [sp, #12]
    2716:	4613      	mov	r3, r2
    2718:	009b      	lsls	r3, r3, #2
    271a:	4413      	add	r3, r2
    271c:	00db      	lsls	r3, r3, #3
    271e:	3340      	adds	r3, #64	; 0x40
    2720:	9a01      	ldr	r2, [sp, #4]
    2722:	4413      	add	r3, r2
    2724:	4618      	mov	r0, r3
    2726:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2728:	9b03      	ldr	r3, [sp, #12]
    272a:	3301      	adds	r3, #1
    272c:	9303      	str	r3, [sp, #12]
    272e:	9b01      	ldr	r3, [sp, #4]
    2730:	7a9b      	ldrb	r3, [r3, #10]
    2732:	461a      	mov	r2, r3
    2734:	9b03      	ldr	r3, [sp, #12]
    2736:	4293      	cmp	r3, r2
    2738:	d3cf      	bcc.n	26da <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    273a:	2300      	movs	r3, #0
    273c:	9303      	str	r3, [sp, #12]
    273e:	e029      	b.n	2794 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2740:	9901      	ldr	r1, [sp, #4]
    2742:	9a03      	ldr	r2, [sp, #12]
    2744:	4613      	mov	r3, r2
    2746:	009b      	lsls	r3, r3, #2
    2748:	4413      	add	r3, r2
    274a:	009b      	lsls	r3, r3, #2
    274c:	440b      	add	r3, r1
    274e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2752:	681a      	ldr	r2, [r3, #0]
    2754:	497a      	ldr	r1, [pc, #488]	; (2940 <Clock_Ip_InitClock+0x584>)
    2756:	4613      	mov	r3, r2
    2758:	00db      	lsls	r3, r3, #3
    275a:	4413      	add	r3, r2
    275c:	440b      	add	r3, r1
    275e:	3301      	adds	r3, #1
    2760:	781b      	ldrb	r3, [r3, #0]
    2762:	461a      	mov	r2, r3
    2764:	4b7b      	ldr	r3, [pc, #492]	; (2954 <Clock_Ip_InitClock+0x598>)
    2766:	5c9b      	ldrb	r3, [r3, r2]
    2768:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    276a:	4a7b      	ldr	r2, [pc, #492]	; (2958 <Clock_Ip_InitClock+0x59c>)
    276c:	9b02      	ldr	r3, [sp, #8]
    276e:	011b      	lsls	r3, r3, #4
    2770:	4413      	add	r3, r2
    2772:	3304      	adds	r3, #4
    2774:	681c      	ldr	r4, [r3, #0]
    2776:	9a03      	ldr	r2, [sp, #12]
    2778:	4613      	mov	r3, r2
    277a:	009b      	lsls	r3, r3, #2
    277c:	4413      	add	r3, r2
    277e:	009b      	lsls	r3, r3, #2
    2780:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2784:	9a01      	ldr	r2, [sp, #4]
    2786:	4413      	add	r3, r2
    2788:	9903      	ldr	r1, [sp, #12]
    278a:	4618      	mov	r0, r3
    278c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    278e:	9b03      	ldr	r3, [sp, #12]
    2790:	3301      	adds	r3, #1
    2792:	9303      	str	r3, [sp, #12]
    2794:	9b01      	ldr	r3, [sp, #4]
    2796:	7c9b      	ldrb	r3, [r3, #18]
    2798:	461a      	mov	r2, r3
    279a:	9b03      	ldr	r3, [sp, #12]
    279c:	4293      	cmp	r3, r2
    279e:	d3cf      	bcc.n	2740 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    27a0:	2300      	movs	r3, #0
    27a2:	9303      	str	r3, [sp, #12]
    27a4:	e02a      	b.n	27fc <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    27a6:	9901      	ldr	r1, [sp, #4]
    27a8:	9a03      	ldr	r2, [sp, #12]
    27aa:	4613      	mov	r3, r2
    27ac:	009b      	lsls	r3, r3, #2
    27ae:	4413      	add	r3, r2
    27b0:	009b      	lsls	r3, r3, #2
    27b2:	440b      	add	r3, r1
    27b4:	332c      	adds	r3, #44	; 0x2c
    27b6:	681a      	ldr	r2, [r3, #0]
    27b8:	4961      	ldr	r1, [pc, #388]	; (2940 <Clock_Ip_InitClock+0x584>)
    27ba:	4613      	mov	r3, r2
    27bc:	00db      	lsls	r3, r3, #3
    27be:	4413      	add	r3, r2
    27c0:	440b      	add	r3, r1
    27c2:	3301      	adds	r3, #1
    27c4:	781b      	ldrb	r3, [r3, #0]
    27c6:	461a      	mov	r2, r3
    27c8:	4b64      	ldr	r3, [pc, #400]	; (295c <Clock_Ip_InitClock+0x5a0>)
    27ca:	5c9b      	ldrb	r3, [r3, r2]
    27cc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    27ce:	4964      	ldr	r1, [pc, #400]	; (2960 <Clock_Ip_InitClock+0x5a4>)
    27d0:	9a02      	ldr	r2, [sp, #8]
    27d2:	4613      	mov	r3, r2
    27d4:	009b      	lsls	r3, r3, #2
    27d6:	4413      	add	r3, r2
    27d8:	009b      	lsls	r3, r3, #2
    27da:	440b      	add	r3, r1
    27dc:	3308      	adds	r3, #8
    27de:	6819      	ldr	r1, [r3, #0]
    27e0:	9a03      	ldr	r2, [sp, #12]
    27e2:	4613      	mov	r3, r2
    27e4:	009b      	lsls	r3, r3, #2
    27e6:	4413      	add	r3, r2
    27e8:	009b      	lsls	r3, r3, #2
    27ea:	3328      	adds	r3, #40	; 0x28
    27ec:	9a01      	ldr	r2, [sp, #4]
    27ee:	4413      	add	r3, r2
    27f0:	3304      	adds	r3, #4
    27f2:	4618      	mov	r0, r3
    27f4:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    27f6:	9b03      	ldr	r3, [sp, #12]
    27f8:	3301      	adds	r3, #1
    27fa:	9303      	str	r3, [sp, #12]
    27fc:	9b01      	ldr	r3, [sp, #4]
    27fe:	7a5b      	ldrb	r3, [r3, #9]
    2800:	461a      	mov	r2, r3
    2802:	9b03      	ldr	r3, [sp, #12]
    2804:	4293      	cmp	r3, r2
    2806:	d3ce      	bcc.n	27a6 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2808:	2300      	movs	r3, #0
    280a:	9303      	str	r3, [sp, #12]
    280c:	e029      	b.n	2862 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    280e:	9901      	ldr	r1, [sp, #4]
    2810:	9a03      	ldr	r2, [sp, #12]
    2812:	4613      	mov	r3, r2
    2814:	009b      	lsls	r3, r3, #2
    2816:	4413      	add	r3, r2
    2818:	00db      	lsls	r3, r3, #3
    281a:	440b      	add	r3, r1
    281c:	3340      	adds	r3, #64	; 0x40
    281e:	681a      	ldr	r2, [r3, #0]
    2820:	4947      	ldr	r1, [pc, #284]	; (2940 <Clock_Ip_InitClock+0x584>)
    2822:	4613      	mov	r3, r2
    2824:	00db      	lsls	r3, r3, #3
    2826:	4413      	add	r3, r2
    2828:	440b      	add	r3, r1
    282a:	3301      	adds	r3, #1
    282c:	781b      	ldrb	r3, [r3, #0]
    282e:	461a      	mov	r2, r3
    2830:	4b46      	ldr	r3, [pc, #280]	; (294c <Clock_Ip_InitClock+0x590>)
    2832:	5c9b      	ldrb	r3, [r3, r2]
    2834:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2836:	4946      	ldr	r1, [pc, #280]	; (2950 <Clock_Ip_InitClock+0x594>)
    2838:	9a02      	ldr	r2, [sp, #8]
    283a:	4613      	mov	r3, r2
    283c:	009b      	lsls	r3, r3, #2
    283e:	4413      	add	r3, r2
    2840:	009b      	lsls	r3, r3, #2
    2842:	440b      	add	r3, r1
    2844:	330c      	adds	r3, #12
    2846:	6819      	ldr	r1, [r3, #0]
    2848:	9a03      	ldr	r2, [sp, #12]
    284a:	4613      	mov	r3, r2
    284c:	009b      	lsls	r3, r3, #2
    284e:	4413      	add	r3, r2
    2850:	00db      	lsls	r3, r3, #3
    2852:	3340      	adds	r3, #64	; 0x40
    2854:	9a01      	ldr	r2, [sp, #4]
    2856:	4413      	add	r3, r2
    2858:	4618      	mov	r0, r3
    285a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    285c:	9b03      	ldr	r3, [sp, #12]
    285e:	3301      	adds	r3, #1
    2860:	9303      	str	r3, [sp, #12]
    2862:	9b01      	ldr	r3, [sp, #4]
    2864:	7a9b      	ldrb	r3, [r3, #10]
    2866:	461a      	mov	r2, r3
    2868:	9b03      	ldr	r3, [sp, #12]
    286a:	4293      	cmp	r3, r2
    286c:	d3cf      	bcc.n	280e <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    286e:	2300      	movs	r3, #0
    2870:	9303      	str	r3, [sp, #12]
    2872:	e025      	b.n	28c0 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2874:	9a01      	ldr	r2, [sp, #4]
    2876:	9b03      	ldr	r3, [sp, #12]
    2878:	3324      	adds	r3, #36	; 0x24
    287a:	011b      	lsls	r3, r3, #4
    287c:	4413      	add	r3, r2
    287e:	3304      	adds	r3, #4
    2880:	681a      	ldr	r2, [r3, #0]
    2882:	492f      	ldr	r1, [pc, #188]	; (2940 <Clock_Ip_InitClock+0x584>)
    2884:	4613      	mov	r3, r2
    2886:	00db      	lsls	r3, r3, #3
    2888:	4413      	add	r3, r2
    288a:	440b      	add	r3, r1
    288c:	3301      	adds	r3, #1
    288e:	781b      	ldrb	r3, [r3, #0]
    2890:	461a      	mov	r2, r3
    2892:	4b34      	ldr	r3, [pc, #208]	; (2964 <Clock_Ip_InitClock+0x5a8>)
    2894:	5c9b      	ldrb	r3, [r3, r2]
    2896:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2898:	4933      	ldr	r1, [pc, #204]	; (2968 <Clock_Ip_InitClock+0x5ac>)
    289a:	9a02      	ldr	r2, [sp, #8]
    289c:	4613      	mov	r3, r2
    289e:	005b      	lsls	r3, r3, #1
    28a0:	4413      	add	r3, r2
    28a2:	009b      	lsls	r3, r3, #2
    28a4:	440b      	add	r3, r1
    28a6:	3304      	adds	r3, #4
    28a8:	681b      	ldr	r3, [r3, #0]
    28aa:	9a03      	ldr	r2, [sp, #12]
    28ac:	3224      	adds	r2, #36	; 0x24
    28ae:	0112      	lsls	r2, r2, #4
    28b0:	9901      	ldr	r1, [sp, #4]
    28b2:	440a      	add	r2, r1
    28b4:	3204      	adds	r2, #4
    28b6:	4610      	mov	r0, r2
    28b8:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    28ba:	9b03      	ldr	r3, [sp, #12]
    28bc:	3301      	adds	r3, #1
    28be:	9303      	str	r3, [sp, #12]
    28c0:	9b01      	ldr	r3, [sp, #4]
    28c2:	7b9b      	ldrb	r3, [r3, #14]
    28c4:	461a      	mov	r2, r3
    28c6:	9b03      	ldr	r3, [sp, #12]
    28c8:	4293      	cmp	r3, r2
    28ca:	d3d3      	bcc.n	2874 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    28cc:	4b27      	ldr	r3, [pc, #156]	; (296c <Clock_Ip_InitClock+0x5b0>)
    28ce:	2200      	movs	r2, #0
    28d0:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    28d2:	4b26      	ldr	r3, [pc, #152]	; (296c <Clock_Ip_InitClock+0x5b0>)
    28d4:	2200      	movs	r2, #0
    28d6:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    28d8:	4b24      	ldr	r3, [pc, #144]	; (296c <Clock_Ip_InitClock+0x5b0>)
    28da:	2201      	movs	r2, #1
    28dc:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    28de:	4b23      	ldr	r3, [pc, #140]	; (296c <Clock_Ip_InitClock+0x5b0>)
    28e0:	2200      	movs	r2, #0
    28e2:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    28e4:	f000 fa9c 	bl	2e20 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    28e8:	2300      	movs	r3, #0
    28ea:	9303      	str	r3, [sp, #12]
    28ec:	e04c      	b.n	2988 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    28ee:	9a01      	ldr	r2, [sp, #4]
    28f0:	9b03      	ldr	r3, [sp, #12]
    28f2:	330d      	adds	r3, #13
    28f4:	00db      	lsls	r3, r3, #3
    28f6:	4413      	add	r3, r2
    28f8:	685b      	ldr	r3, [r3, #4]
    28fa:	4a1d      	ldr	r2, [pc, #116]	; (2970 <Clock_Ip_InitClock+0x5b4>)
    28fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2900:	2b03      	cmp	r3, #3
    2902:	d03b      	beq.n	297c <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2904:	9b01      	ldr	r3, [sp, #4]
    2906:	9a03      	ldr	r2, [sp, #12]
    2908:	320d      	adds	r2, #13
    290a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    290e:	490c      	ldr	r1, [pc, #48]	; (2940 <Clock_Ip_InitClock+0x584>)
    2910:	4613      	mov	r3, r2
    2912:	00db      	lsls	r3, r3, #3
    2914:	4413      	add	r3, r2
    2916:	440b      	add	r3, r1
    2918:	3301      	adds	r3, #1
    291a:	781b      	ldrb	r3, [r3, #0]
    291c:	461a      	mov	r2, r3
    291e:	4b15      	ldr	r3, [pc, #84]	; (2974 <Clock_Ip_InitClock+0x5b8>)
    2920:	5c9b      	ldrb	r3, [r3, r2]
    2922:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2924:	4a14      	ldr	r2, [pc, #80]	; (2978 <Clock_Ip_InitClock+0x5bc>)
    2926:	9b02      	ldr	r3, [sp, #8]
    2928:	00db      	lsls	r3, r3, #3
    292a:	4413      	add	r3, r2
    292c:	685b      	ldr	r3, [r3, #4]
    292e:	9a03      	ldr	r2, [sp, #12]
    2930:	320d      	adds	r2, #13
    2932:	00d2      	lsls	r2, r2, #3
    2934:	9901      	ldr	r1, [sp, #4]
    2936:	440a      	add	r2, r1
    2938:	4610      	mov	r0, r2
    293a:	4798      	blx	r3
    293c:	e021      	b.n	2982 <Clock_Ip_InitClock+0x5c6>
    293e:	bf00      	nop
    2940:	00017e28 	.word	0x00017e28
    2944:	00017d98 	.word	0x00017d98
    2948:	00018374 	.word	0x00018374
    294c:	00017de8 	.word	0x00017de8
    2950:	00018434 	.word	0x00018434
    2954:	00017e18 	.word	0x00017e18
    2958:	00018424 	.word	0x00018424
    295c:	00017da8 	.word	0x00017da8
    2960:	0001837c 	.word	0x0001837c
    2964:	00017dd8 	.word	0x00017dd8
    2968:	000183a4 	.word	0x000183a4
    296c:	1fff8b40 	.word	0x1fff8b40
    2970:	00018274 	.word	0x00018274
    2974:	00017df8 	.word	0x00017df8
    2978:	00018460 	.word	0x00018460
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    297c:	4b3a      	ldr	r3, [pc, #232]	; (2a68 <Clock_Ip_InitClock+0x6ac>)
    297e:	2201      	movs	r2, #1
    2980:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2982:	9b03      	ldr	r3, [sp, #12]
    2984:	3301      	adds	r3, #1
    2986:	9303      	str	r3, [sp, #12]
    2988:	9b01      	ldr	r3, [sp, #4]
    298a:	7adb      	ldrb	r3, [r3, #11]
    298c:	461a      	mov	r2, r3
    298e:	9b03      	ldr	r3, [sp, #12]
    2990:	4293      	cmp	r3, r2
    2992:	d3ac      	bcc.n	28ee <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2994:	4b34      	ldr	r3, [pc, #208]	; (2a68 <Clock_Ip_InitClock+0x6ac>)
    2996:	781b      	ldrb	r3, [r3, #0]
    2998:	f083 0301 	eor.w	r3, r3, #1
    299c:	b2db      	uxtb	r3, r3
    299e:	2b00      	cmp	r3, #0
    29a0:	d05e      	beq.n	2a60 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29a2:	2300      	movs	r3, #0
    29a4:	9303      	str	r3, [sp, #12]
    29a6:	e01f      	b.n	29e8 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    29a8:	9a01      	ldr	r2, [sp, #4]
    29aa:	9b03      	ldr	r3, [sp, #12]
    29ac:	334e      	adds	r3, #78	; 0x4e
    29ae:	00db      	lsls	r3, r3, #3
    29b0:	4413      	add	r3, r2
    29b2:	685a      	ldr	r2, [r3, #4]
    29b4:	492d      	ldr	r1, [pc, #180]	; (2a6c <Clock_Ip_InitClock+0x6b0>)
    29b6:	4613      	mov	r3, r2
    29b8:	00db      	lsls	r3, r3, #3
    29ba:	4413      	add	r3, r2
    29bc:	440b      	add	r3, r1
    29be:	3301      	adds	r3, #1
    29c0:	781b      	ldrb	r3, [r3, #0]
    29c2:	461a      	mov	r2, r3
    29c4:	4b2a      	ldr	r3, [pc, #168]	; (2a70 <Clock_Ip_InitClock+0x6b4>)
    29c6:	5c9b      	ldrb	r3, [r3, r2]
    29c8:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    29ca:	4a2a      	ldr	r2, [pc, #168]	; (2a74 <Clock_Ip_InitClock+0x6b8>)
    29cc:	9b02      	ldr	r3, [sp, #8]
    29ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29d2:	9a03      	ldr	r2, [sp, #12]
    29d4:	324e      	adds	r2, #78	; 0x4e
    29d6:	00d2      	lsls	r2, r2, #3
    29d8:	9901      	ldr	r1, [sp, #4]
    29da:	440a      	add	r2, r1
    29dc:	3204      	adds	r2, #4
    29de:	4610      	mov	r0, r2
    29e0:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29e2:	9b03      	ldr	r3, [sp, #12]
    29e4:	3301      	adds	r3, #1
    29e6:	9303      	str	r3, [sp, #12]
    29e8:	9b01      	ldr	r3, [sp, #4]
    29ea:	7c1b      	ldrb	r3, [r3, #16]
    29ec:	461a      	mov	r2, r3
    29ee:	9b03      	ldr	r3, [sp, #12]
    29f0:	4293      	cmp	r3, r2
    29f2:	d3d9      	bcc.n	29a8 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    29f4:	2300      	movs	r3, #0
    29f6:	9303      	str	r3, [sp, #12]
    29f8:	e028      	b.n	2a4c <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    29fa:	9901      	ldr	r1, [sp, #4]
    29fc:	9a03      	ldr	r2, [sp, #12]
    29fe:	4613      	mov	r3, r2
    2a00:	009b      	lsls	r3, r3, #2
    2a02:	4413      	add	r3, r2
    2a04:	009b      	lsls	r3, r3, #2
    2a06:	440b      	add	r3, r1
    2a08:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a0c:	681a      	ldr	r2, [r3, #0]
    2a0e:	4917      	ldr	r1, [pc, #92]	; (2a6c <Clock_Ip_InitClock+0x6b0>)
    2a10:	4613      	mov	r3, r2
    2a12:	00db      	lsls	r3, r3, #3
    2a14:	4413      	add	r3, r2
    2a16:	440b      	add	r3, r1
    2a18:	3301      	adds	r3, #1
    2a1a:	781b      	ldrb	r3, [r3, #0]
    2a1c:	461a      	mov	r2, r3
    2a1e:	4b16      	ldr	r3, [pc, #88]	; (2a78 <Clock_Ip_InitClock+0x6bc>)
    2a20:	5c9b      	ldrb	r3, [r3, r2]
    2a22:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2a24:	4a15      	ldr	r2, [pc, #84]	; (2a7c <Clock_Ip_InitClock+0x6c0>)
    2a26:	9b02      	ldr	r3, [sp, #8]
    2a28:	011b      	lsls	r3, r3, #4
    2a2a:	4413      	add	r3, r2
    2a2c:	330c      	adds	r3, #12
    2a2e:	6819      	ldr	r1, [r3, #0]
    2a30:	9a03      	ldr	r2, [sp, #12]
    2a32:	4613      	mov	r3, r2
    2a34:	009b      	lsls	r3, r3, #2
    2a36:	4413      	add	r3, r2
    2a38:	009b      	lsls	r3, r3, #2
    2a3a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a3e:	9a01      	ldr	r2, [sp, #4]
    2a40:	4413      	add	r3, r2
    2a42:	4618      	mov	r0, r3
    2a44:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2a46:	9b03      	ldr	r3, [sp, #12]
    2a48:	3301      	adds	r3, #1
    2a4a:	9303      	str	r3, [sp, #12]
    2a4c:	9b01      	ldr	r3, [sp, #4]
    2a4e:	7c9b      	ldrb	r3, [r3, #18]
    2a50:	461a      	mov	r2, r3
    2a52:	9b03      	ldr	r3, [sp, #12]
    2a54:	4293      	cmp	r3, r2
    2a56:	d3d0      	bcc.n	29fa <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2a58:	2104      	movs	r1, #4
    2a5a:	9801      	ldr	r0, [sp, #4]
    2a5c:	f002 ff48 	bl	58f0 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2a60:	bf00      	nop
    2a62:	b004      	add	sp, #16
    2a64:	bd10      	pop	{r4, pc}
    2a66:	bf00      	nop
    2a68:	1fff8b40 	.word	0x1fff8b40
    2a6c:	00017e28 	.word	0x00017e28
    2a70:	00017dc8 	.word	0x00017dc8
    2a74:	000183b0 	.word	0x000183b0
    2a78:	00017e18 	.word	0x00017e18
    2a7c:	00018424 	.word	0x00018424

00002a80 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2a80:	b500      	push	{lr}
    2a82:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2a84:	2302      	movs	r3, #2
    2a86:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2a88:	2300      	movs	r3, #0
    2a8a:	9304      	str	r3, [sp, #16]
    2a8c:	e02c      	b.n	2ae8 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2a8e:	4a36      	ldr	r2, [pc, #216]	; (2b68 <Clock_Ip_GetPllStatus+0xe8>)
    2a90:	9b04      	ldr	r3, [sp, #16]
    2a92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2a96:	4935      	ldr	r1, [pc, #212]	; (2b6c <Clock_Ip_GetPllStatus+0xec>)
    2a98:	4613      	mov	r3, r2
    2a9a:	00db      	lsls	r3, r3, #3
    2a9c:	4413      	add	r3, r2
    2a9e:	440b      	add	r3, r1
    2aa0:	3301      	adds	r3, #1
    2aa2:	781b      	ldrb	r3, [r3, #0]
    2aa4:	461a      	mov	r2, r3
    2aa6:	4b32      	ldr	r3, [pc, #200]	; (2b70 <Clock_Ip_GetPllStatus+0xf0>)
    2aa8:	5c9b      	ldrb	r3, [r3, r2]
    2aaa:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2aac:	4931      	ldr	r1, [pc, #196]	; (2b74 <Clock_Ip_GetPllStatus+0xf4>)
    2aae:	9a03      	ldr	r2, [sp, #12]
    2ab0:	4613      	mov	r3, r2
    2ab2:	009b      	lsls	r3, r3, #2
    2ab4:	4413      	add	r3, r2
    2ab6:	009b      	lsls	r3, r3, #2
    2ab8:	440b      	add	r3, r1
    2aba:	3308      	adds	r3, #8
    2abc:	681b      	ldr	r3, [r3, #0]
    2abe:	492a      	ldr	r1, [pc, #168]	; (2b68 <Clock_Ip_GetPllStatus+0xe8>)
    2ac0:	9a04      	ldr	r2, [sp, #16]
    2ac2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2ac6:	4610      	mov	r0, r2
    2ac8:	4798      	blx	r3
    2aca:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2acc:	9b02      	ldr	r3, [sp, #8]
    2ace:	2b01      	cmp	r3, #1
    2ad0:	d102      	bne.n	2ad8 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2ad2:	2301      	movs	r3, #1
    2ad4:	9305      	str	r3, [sp, #20]
            break;
    2ad6:	e00d      	b.n	2af4 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2ad8:	9b02      	ldr	r3, [sp, #8]
    2ada:	2b02      	cmp	r3, #2
    2adc:	d101      	bne.n	2ae2 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2ade:	2300      	movs	r3, #0
    2ae0:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2ae2:	9b04      	ldr	r3, [sp, #16]
    2ae4:	3301      	adds	r3, #1
    2ae6:	9304      	str	r3, [sp, #16]
    2ae8:	4b23      	ldr	r3, [pc, #140]	; (2b78 <Clock_Ip_GetPllStatus+0xf8>)
    2aea:	789b      	ldrb	r3, [r3, #2]
    2aec:	461a      	mov	r2, r3
    2aee:	9b04      	ldr	r3, [sp, #16]
    2af0:	4293      	cmp	r3, r2
    2af2:	d3cc      	bcc.n	2a8e <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2af4:	9b05      	ldr	r3, [sp, #20]
    2af6:	2b00      	cmp	r3, #0
    2af8:	d130      	bne.n	2b5c <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2afa:	2300      	movs	r3, #0
    2afc:	9304      	str	r3, [sp, #16]
    2afe:	e027      	b.n	2b50 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2b00:	4a1e      	ldr	r2, [pc, #120]	; (2b7c <Clock_Ip_GetPllStatus+0xfc>)
    2b02:	9b04      	ldr	r3, [sp, #16]
    2b04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2b08:	4918      	ldr	r1, [pc, #96]	; (2b6c <Clock_Ip_GetPllStatus+0xec>)
    2b0a:	4613      	mov	r3, r2
    2b0c:	00db      	lsls	r3, r3, #3
    2b0e:	4413      	add	r3, r2
    2b10:	440b      	add	r3, r1
    2b12:	3301      	adds	r3, #1
    2b14:	781b      	ldrb	r3, [r3, #0]
    2b16:	461a      	mov	r2, r3
    2b18:	4b19      	ldr	r3, [pc, #100]	; (2b80 <Clock_Ip_GetPllStatus+0x100>)
    2b1a:	5c9b      	ldrb	r3, [r3, r2]
    2b1c:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2b1e:	4919      	ldr	r1, [pc, #100]	; (2b84 <Clock_Ip_GetPllStatus+0x104>)
    2b20:	9a03      	ldr	r2, [sp, #12]
    2b22:	4613      	mov	r3, r2
    2b24:	005b      	lsls	r3, r3, #1
    2b26:	4413      	add	r3, r2
    2b28:	009b      	lsls	r3, r3, #2
    2b2a:	440b      	add	r3, r1
    2b2c:	3308      	adds	r3, #8
    2b2e:	681b      	ldr	r3, [r3, #0]
    2b30:	4912      	ldr	r1, [pc, #72]	; (2b7c <Clock_Ip_GetPllStatus+0xfc>)
    2b32:	9a04      	ldr	r2, [sp, #16]
    2b34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2b38:	4610      	mov	r0, r2
    2b3a:	4798      	blx	r3
    2b3c:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2b3e:	9b01      	ldr	r3, [sp, #4]
    2b40:	2b01      	cmp	r3, #1
    2b42:	d102      	bne.n	2b4a <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2b44:	2301      	movs	r3, #1
    2b46:	9305      	str	r3, [sp, #20]
                break;
    2b48:	e008      	b.n	2b5c <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2b4a:	9b04      	ldr	r3, [sp, #16]
    2b4c:	3301      	adds	r3, #1
    2b4e:	9304      	str	r3, [sp, #16]
    2b50:	4b09      	ldr	r3, [pc, #36]	; (2b78 <Clock_Ip_GetPllStatus+0xf8>)
    2b52:	78db      	ldrb	r3, [r3, #3]
    2b54:	461a      	mov	r2, r3
    2b56:	9b04      	ldr	r3, [sp, #16]
    2b58:	4293      	cmp	r3, r2
    2b5a:	d3d1      	bcc.n	2b00 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2b5c:	9b05      	ldr	r3, [sp, #20]
}
    2b5e:	4618      	mov	r0, r3
    2b60:	b007      	add	sp, #28
    2b62:	f85d fb04 	ldr.w	pc, [sp], #4
    2b66:	bf00      	nop
    2b68:	00018330 	.word	0x00018330
    2b6c:	00017e28 	.word	0x00017e28
    2b70:	00017de8 	.word	0x00017de8
    2b74:	00018434 	.word	0x00018434
    2b78:	1fff8b40 	.word	0x1fff8b40
    2b7c:	00018334 	.word	0x00018334
    2b80:	00017dd8 	.word	0x00017dd8
    2b84:	000183a4 	.word	0x000183a4

00002b88 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2b88:	b500      	push	{lr}
    2b8a:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2b8c:	4b55      	ldr	r3, [pc, #340]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2b8e:	681b      	ldr	r3, [r3, #0]
    2b90:	2b00      	cmp	r3, #0
    2b92:	f000 80a2 	beq.w	2cda <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2b96:	2300      	movs	r3, #0
    2b98:	9301      	str	r3, [sp, #4]
    2b9a:	e02c      	b.n	2bf6 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2b9c:	4b51      	ldr	r3, [pc, #324]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2b9e:	681a      	ldr	r2, [r3, #0]
    2ba0:	9b01      	ldr	r3, [sp, #4]
    2ba2:	330d      	adds	r3, #13
    2ba4:	00db      	lsls	r3, r3, #3
    2ba6:	4413      	add	r3, r2
    2ba8:	685b      	ldr	r3, [r3, #4]
    2baa:	4a4f      	ldr	r2, [pc, #316]	; (2ce8 <Clock_Ip_DistributePll+0x160>)
    2bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2bb0:	2b03      	cmp	r3, #3
    2bb2:	d11d      	bne.n	2bf0 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2bb4:	4b4b      	ldr	r3, [pc, #300]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2bb6:	681b      	ldr	r3, [r3, #0]
    2bb8:	9a01      	ldr	r2, [sp, #4]
    2bba:	320d      	adds	r2, #13
    2bbc:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2bc0:	494a      	ldr	r1, [pc, #296]	; (2cec <Clock_Ip_DistributePll+0x164>)
    2bc2:	4613      	mov	r3, r2
    2bc4:	00db      	lsls	r3, r3, #3
    2bc6:	4413      	add	r3, r2
    2bc8:	440b      	add	r3, r1
    2bca:	3301      	adds	r3, #1
    2bcc:	781b      	ldrb	r3, [r3, #0]
    2bce:	461a      	mov	r2, r3
    2bd0:	4b47      	ldr	r3, [pc, #284]	; (2cf0 <Clock_Ip_DistributePll+0x168>)
    2bd2:	5c9b      	ldrb	r3, [r3, r2]
    2bd4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2bd6:	4a47      	ldr	r2, [pc, #284]	; (2cf4 <Clock_Ip_DistributePll+0x16c>)
    2bd8:	9b00      	ldr	r3, [sp, #0]
    2bda:	00db      	lsls	r3, r3, #3
    2bdc:	4413      	add	r3, r2
    2bde:	685b      	ldr	r3, [r3, #4]
    2be0:	4a40      	ldr	r2, [pc, #256]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2be2:	6811      	ldr	r1, [r2, #0]
    2be4:	9a01      	ldr	r2, [sp, #4]
    2be6:	320d      	adds	r2, #13
    2be8:	00d2      	lsls	r2, r2, #3
    2bea:	440a      	add	r2, r1
    2bec:	4610      	mov	r0, r2
    2bee:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2bf0:	9b01      	ldr	r3, [sp, #4]
    2bf2:	3301      	adds	r3, #1
    2bf4:	9301      	str	r3, [sp, #4]
    2bf6:	4b3b      	ldr	r3, [pc, #236]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2bf8:	681b      	ldr	r3, [r3, #0]
    2bfa:	7adb      	ldrb	r3, [r3, #11]
    2bfc:	461a      	mov	r2, r3
    2bfe:	9b01      	ldr	r3, [sp, #4]
    2c00:	4293      	cmp	r3, r2
    2c02:	d3cb      	bcc.n	2b9c <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2c04:	4b3c      	ldr	r3, [pc, #240]	; (2cf8 <Clock_Ip_DistributePll+0x170>)
    2c06:	781b      	ldrb	r3, [r3, #0]
    2c08:	2b00      	cmp	r3, #0
    2c0a:	d066      	beq.n	2cda <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2c0c:	2300      	movs	r3, #0
    2c0e:	9301      	str	r3, [sp, #4]
    2c10:	e021      	b.n	2c56 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2c12:	4b34      	ldr	r3, [pc, #208]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2c14:	681a      	ldr	r2, [r3, #0]
    2c16:	9b01      	ldr	r3, [sp, #4]
    2c18:	334e      	adds	r3, #78	; 0x4e
    2c1a:	00db      	lsls	r3, r3, #3
    2c1c:	4413      	add	r3, r2
    2c1e:	685a      	ldr	r2, [r3, #4]
    2c20:	4932      	ldr	r1, [pc, #200]	; (2cec <Clock_Ip_DistributePll+0x164>)
    2c22:	4613      	mov	r3, r2
    2c24:	00db      	lsls	r3, r3, #3
    2c26:	4413      	add	r3, r2
    2c28:	440b      	add	r3, r1
    2c2a:	3301      	adds	r3, #1
    2c2c:	781b      	ldrb	r3, [r3, #0]
    2c2e:	461a      	mov	r2, r3
    2c30:	4b32      	ldr	r3, [pc, #200]	; (2cfc <Clock_Ip_DistributePll+0x174>)
    2c32:	5c9b      	ldrb	r3, [r3, r2]
    2c34:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2c36:	4a32      	ldr	r2, [pc, #200]	; (2d00 <Clock_Ip_DistributePll+0x178>)
    2c38:	9b00      	ldr	r3, [sp, #0]
    2c3a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2c3e:	4a29      	ldr	r2, [pc, #164]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2c40:	6811      	ldr	r1, [r2, #0]
    2c42:	9a01      	ldr	r2, [sp, #4]
    2c44:	324e      	adds	r2, #78	; 0x4e
    2c46:	00d2      	lsls	r2, r2, #3
    2c48:	440a      	add	r2, r1
    2c4a:	3204      	adds	r2, #4
    2c4c:	4610      	mov	r0, r2
    2c4e:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2c50:	9b01      	ldr	r3, [sp, #4]
    2c52:	3301      	adds	r3, #1
    2c54:	9301      	str	r3, [sp, #4]
    2c56:	4b23      	ldr	r3, [pc, #140]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2c58:	681b      	ldr	r3, [r3, #0]
    2c5a:	7c1b      	ldrb	r3, [r3, #16]
    2c5c:	461a      	mov	r2, r3
    2c5e:	9b01      	ldr	r3, [sp, #4]
    2c60:	4293      	cmp	r3, r2
    2c62:	d3d6      	bcc.n	2c12 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2c64:	2300      	movs	r3, #0
    2c66:	9301      	str	r3, [sp, #4]
    2c68:	e02a      	b.n	2cc0 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2c6a:	4b1e      	ldr	r3, [pc, #120]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2c6c:	6819      	ldr	r1, [r3, #0]
    2c6e:	9a01      	ldr	r2, [sp, #4]
    2c70:	4613      	mov	r3, r2
    2c72:	009b      	lsls	r3, r3, #2
    2c74:	4413      	add	r3, r2
    2c76:	009b      	lsls	r3, r3, #2
    2c78:	440b      	add	r3, r1
    2c7a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2c7e:	681a      	ldr	r2, [r3, #0]
    2c80:	491a      	ldr	r1, [pc, #104]	; (2cec <Clock_Ip_DistributePll+0x164>)
    2c82:	4613      	mov	r3, r2
    2c84:	00db      	lsls	r3, r3, #3
    2c86:	4413      	add	r3, r2
    2c88:	440b      	add	r3, r1
    2c8a:	3301      	adds	r3, #1
    2c8c:	781b      	ldrb	r3, [r3, #0]
    2c8e:	461a      	mov	r2, r3
    2c90:	4b1c      	ldr	r3, [pc, #112]	; (2d04 <Clock_Ip_DistributePll+0x17c>)
    2c92:	5c9b      	ldrb	r3, [r3, r2]
    2c94:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2c96:	4a1c      	ldr	r2, [pc, #112]	; (2d08 <Clock_Ip_DistributePll+0x180>)
    2c98:	9b00      	ldr	r3, [sp, #0]
    2c9a:	011b      	lsls	r3, r3, #4
    2c9c:	4413      	add	r3, r2
    2c9e:	330c      	adds	r3, #12
    2ca0:	6819      	ldr	r1, [r3, #0]
    2ca2:	4b10      	ldr	r3, [pc, #64]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2ca4:	6818      	ldr	r0, [r3, #0]
    2ca6:	9a01      	ldr	r2, [sp, #4]
    2ca8:	4613      	mov	r3, r2
    2caa:	009b      	lsls	r3, r3, #2
    2cac:	4413      	add	r3, r2
    2cae:	009b      	lsls	r3, r3, #2
    2cb0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2cb4:	4403      	add	r3, r0
    2cb6:	4618      	mov	r0, r3
    2cb8:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2cba:	9b01      	ldr	r3, [sp, #4]
    2cbc:	3301      	adds	r3, #1
    2cbe:	9301      	str	r3, [sp, #4]
    2cc0:	4b08      	ldr	r3, [pc, #32]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2cc2:	681b      	ldr	r3, [r3, #0]
    2cc4:	7c9b      	ldrb	r3, [r3, #18]
    2cc6:	461a      	mov	r2, r3
    2cc8:	9b01      	ldr	r3, [sp, #4]
    2cca:	4293      	cmp	r3, r2
    2ccc:	d3cd      	bcc.n	2c6a <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2cce:	4b05      	ldr	r3, [pc, #20]	; (2ce4 <Clock_Ip_DistributePll+0x15c>)
    2cd0:	681b      	ldr	r3, [r3, #0]
    2cd2:	2104      	movs	r1, #4
    2cd4:	4618      	mov	r0, r3
    2cd6:	f002 fe0b 	bl	58f0 <Clock_Ip_Command>
        }
    }
}
    2cda:	bf00      	nop
    2cdc:	b003      	add	sp, #12
    2cde:	f85d fb04 	ldr.w	pc, [sp], #4
    2ce2:	bf00      	nop
    2ce4:	1fff8b38 	.word	0x1fff8b38
    2ce8:	00018274 	.word	0x00018274
    2cec:	00017e28 	.word	0x00017e28
    2cf0:	00017df8 	.word	0x00017df8
    2cf4:	00018460 	.word	0x00018460
    2cf8:	1fff8b40 	.word	0x1fff8b40
    2cfc:	00017dc8 	.word	0x00017dc8
    2d00:	000183b0 	.word	0x000183b0
    2d04:	00017e18 	.word	0x00017e18
    2d08:	00018424 	.word	0x00018424

00002d0c <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2d0c:	b500      	push	{lr}
    2d0e:	b085      	sub	sp, #20
    2d10:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2d12:	490c      	ldr	r1, [pc, #48]	; (2d44 <Clock_Ip_DisableClockMonitor+0x38>)
    2d14:	9a01      	ldr	r2, [sp, #4]
    2d16:	4613      	mov	r3, r2
    2d18:	00db      	lsls	r3, r3, #3
    2d1a:	4413      	add	r3, r2
    2d1c:	440b      	add	r3, r1
    2d1e:	3301      	adds	r3, #1
    2d20:	781b      	ldrb	r3, [r3, #0]
    2d22:	461a      	mov	r2, r3
    2d24:	4b08      	ldr	r3, [pc, #32]	; (2d48 <Clock_Ip_DisableClockMonitor+0x3c>)
    2d26:	5c9b      	ldrb	r3, [r3, r2]
    2d28:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2d2a:	4a08      	ldr	r2, [pc, #32]	; (2d4c <Clock_Ip_DisableClockMonitor+0x40>)
    2d2c:	9b03      	ldr	r3, [sp, #12]
    2d2e:	011b      	lsls	r3, r3, #4
    2d30:	4413      	add	r3, r2
    2d32:	3308      	adds	r3, #8
    2d34:	681b      	ldr	r3, [r3, #0]
    2d36:	9801      	ldr	r0, [sp, #4]
    2d38:	4798      	blx	r3
}
    2d3a:	bf00      	nop
    2d3c:	b005      	add	sp, #20
    2d3e:	f85d fb04 	ldr.w	pc, [sp], #4
    2d42:	bf00      	nop
    2d44:	00017e28 	.word	0x00017e28
    2d48:	00017e18 	.word	0x00017e18
    2d4c:	00018424 	.word	0x00018424

00002d50 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2d50:	b082      	sub	sp, #8
    2d52:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2d54:	4a02      	ldr	r2, [pc, #8]	; (2d60 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2d56:	9b01      	ldr	r3, [sp, #4]
    2d58:	6013      	str	r3, [r2, #0]
}
    2d5a:	bf00      	nop
    2d5c:	b002      	add	sp, #8
    2d5e:	4770      	bx	lr
    2d60:	1fff8b14 	.word	0x1fff8b14

00002d64 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2d64:	b500      	push	{lr}
    2d66:	b085      	sub	sp, #20
    2d68:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2d6a:	490c      	ldr	r1, [pc, #48]	; (2d9c <Clock_Ip_DisableModuleClock+0x38>)
    2d6c:	9a01      	ldr	r2, [sp, #4]
    2d6e:	4613      	mov	r3, r2
    2d70:	00db      	lsls	r3, r3, #3
    2d72:	4413      	add	r3, r2
    2d74:	440b      	add	r3, r1
    2d76:	3301      	adds	r3, #1
    2d78:	781b      	ldrb	r3, [r3, #0]
    2d7a:	461a      	mov	r2, r3
    2d7c:	4b08      	ldr	r3, [pc, #32]	; (2da0 <Clock_Ip_DisableModuleClock+0x3c>)
    2d7e:	5c9b      	ldrb	r3, [r3, r2]
    2d80:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2d82:	4a08      	ldr	r2, [pc, #32]	; (2da4 <Clock_Ip_DisableModuleClock+0x40>)
    2d84:	9b03      	ldr	r3, [sp, #12]
    2d86:	00db      	lsls	r3, r3, #3
    2d88:	4413      	add	r3, r2
    2d8a:	685b      	ldr	r3, [r3, #4]
    2d8c:	2101      	movs	r1, #1
    2d8e:	9801      	ldr	r0, [sp, #4]
    2d90:	4798      	blx	r3
}
    2d92:	bf00      	nop
    2d94:	b005      	add	sp, #20
    2d96:	f85d fb04 	ldr.w	pc, [sp], #4
    2d9a:	bf00      	nop
    2d9c:	00017e28 	.word	0x00017e28
    2da0:	00017dc8 	.word	0x00017dc8
    2da4:	000183b0 	.word	0x000183b0

00002da8 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2da8:	b500      	push	{lr}
    2daa:	b085      	sub	sp, #20
    2dac:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2dae:	490c      	ldr	r1, [pc, #48]	; (2de0 <Clock_Ip_EnableModuleClock+0x38>)
    2db0:	9a01      	ldr	r2, [sp, #4]
    2db2:	4613      	mov	r3, r2
    2db4:	00db      	lsls	r3, r3, #3
    2db6:	4413      	add	r3, r2
    2db8:	440b      	add	r3, r1
    2dba:	3301      	adds	r3, #1
    2dbc:	781b      	ldrb	r3, [r3, #0]
    2dbe:	461a      	mov	r2, r3
    2dc0:	4b08      	ldr	r3, [pc, #32]	; (2de4 <Clock_Ip_EnableModuleClock+0x3c>)
    2dc2:	5c9b      	ldrb	r3, [r3, r2]
    2dc4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2dc6:	4a08      	ldr	r2, [pc, #32]	; (2de8 <Clock_Ip_EnableModuleClock+0x40>)
    2dc8:	9b03      	ldr	r3, [sp, #12]
    2dca:	00db      	lsls	r3, r3, #3
    2dcc:	4413      	add	r3, r2
    2dce:	685b      	ldr	r3, [r3, #4]
    2dd0:	2100      	movs	r1, #0
    2dd2:	9801      	ldr	r0, [sp, #4]
    2dd4:	4798      	blx	r3
}
    2dd6:	bf00      	nop
    2dd8:	b005      	add	sp, #20
    2dda:	f85d fb04 	ldr.w	pc, [sp], #4
    2dde:	bf00      	nop
    2de0:	00017e28 	.word	0x00017e28
    2de4:	00017dc8 	.word	0x00017dc8
    2de8:	000183b0 	.word	0x000183b0

00002dec <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2dec:	b500      	push	{lr}
    2dee:	b083      	sub	sp, #12
    2df0:	9001      	str	r0, [sp, #4]
    2df2:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2df4:	4b08      	ldr	r3, [pc, #32]	; (2e18 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2df6:	2200      	movs	r2, #0
    2df8:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2dfa:	4b08      	ldr	r3, [pc, #32]	; (2e1c <Clock_Ip_PowerModeChangeNotification+0x30>)
    2dfc:	681b      	ldr	r3, [r3, #0]
    2dfe:	2102      	movs	r1, #2
    2e00:	4618      	mov	r0, r3
    2e02:	f002 fd75 	bl	58f0 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2e06:	9900      	ldr	r1, [sp, #0]
    2e08:	9801      	ldr	r0, [sp, #4]
    2e0a:	f002 fc51 	bl	56b0 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2e0e:	bf00      	nop
    2e10:	b003      	add	sp, #12
    2e12:	f85d fb04 	ldr.w	pc, [sp], #4
    2e16:	bf00      	nop
    2e18:	1fff8b10 	.word	0x1fff8b10
    2e1c:	1fff8b38 	.word	0x1fff8b38

00002e20 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2e20:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2e22:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2e26:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2e28:	4b06      	ldr	r3, [pc, #24]	; (2e44 <Clock_Ip_SetWaitStates+0x24>)
    2e2a:	785b      	ldrb	r3, [r3, #1]
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	d005      	beq.n	2e3c <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2e30:	9b01      	ldr	r3, [sp, #4]
    2e32:	3b01      	subs	r3, #1
    2e34:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2e36:	9b01      	ldr	r3, [sp, #4]
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d1f9      	bne.n	2e30 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2e3c:	bf00      	nop
    2e3e:	b002      	add	sp, #8
    2e40:	4770      	bx	lr
    2e42:	bf00      	nop
    2e44:	1fff8b40 	.word	0x1fff8b40

00002e48 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2e48:	b500      	push	{lr}
    2e4a:	b083      	sub	sp, #12
    2e4c:	9001      	str	r0, [sp, #4]
    2e4e:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2e50:	4b04      	ldr	r3, [pc, #16]	; (2e64 <Clock_Ip_ReportClockErrors+0x1c>)
    2e52:	681b      	ldr	r3, [r3, #0]
    2e54:	9900      	ldr	r1, [sp, #0]
    2e56:	9801      	ldr	r0, [sp, #4]
    2e58:	4798      	blx	r3
}
    2e5a:	bf00      	nop
    2e5c:	b003      	add	sp, #12
    2e5e:	f85d fb04 	ldr.w	pc, [sp], #4
    2e62:	bf00      	nop
    2e64:	1fff8b14 	.word	0x1fff8b14

00002e68 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2e68:	b500      	push	{lr}
    2e6a:	b085      	sub	sp, #20
    2e6c:	9003      	str	r0, [sp, #12]
    2e6e:	9102      	str	r1, [sp, #8]
    2e70:	9201      	str	r2, [sp, #4]
    2e72:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2e74:	2000      	movs	r0, #0
    2e76:	f7fe ffd1 	bl	1e1c <OsIf_GetCounter>
    2e7a:	4602      	mov	r2, r0
    2e7c:	9b03      	ldr	r3, [sp, #12]
    2e7e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2e80:	9b02      	ldr	r3, [sp, #8]
    2e82:	2200      	movs	r2, #0
    2e84:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2e86:	2100      	movs	r1, #0
    2e88:	9800      	ldr	r0, [sp, #0]
    2e8a:	f7ff f813 	bl	1eb4 <OsIf_MicrosToTicks>
    2e8e:	4602      	mov	r2, r0
    2e90:	9b01      	ldr	r3, [sp, #4]
    2e92:	601a      	str	r2, [r3, #0]
}
    2e94:	bf00      	nop
    2e96:	b005      	add	sp, #20
    2e98:	f85d fb04 	ldr.w	pc, [sp], #4

00002e9c <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2e9c:	b500      	push	{lr}
    2e9e:	b087      	sub	sp, #28
    2ea0:	9003      	str	r0, [sp, #12]
    2ea2:	9102      	str	r1, [sp, #8]
    2ea4:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2ea6:	2300      	movs	r3, #0
    2ea8:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2eac:	2100      	movs	r1, #0
    2eae:	9803      	ldr	r0, [sp, #12]
    2eb0:	f7fe ffcd 	bl	1e4e <OsIf_GetElapsed>
    2eb4:	4602      	mov	r2, r0
    2eb6:	9b02      	ldr	r3, [sp, #8]
    2eb8:	681b      	ldr	r3, [r3, #0]
    2eba:	441a      	add	r2, r3
    2ebc:	9b02      	ldr	r3, [sp, #8]
    2ebe:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2ec0:	9b02      	ldr	r3, [sp, #8]
    2ec2:	681b      	ldr	r3, [r3, #0]
    2ec4:	9a01      	ldr	r2, [sp, #4]
    2ec6:	429a      	cmp	r2, r3
    2ec8:	d802      	bhi.n	2ed0 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2eca:	2301      	movs	r3, #1
    2ecc:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2ed0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2ed4:	4618      	mov	r0, r3
    2ed6:	b007      	add	sp, #28
    2ed8:	f85d fb04 	ldr.w	pc, [sp], #4

00002edc <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2edc:	b082      	sub	sp, #8
    2ede:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2ee0:	bf00      	nop
    2ee2:	b002      	add	sp, #8
    2ee4:	4770      	bx	lr

00002ee6 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2ee6:	b500      	push	{lr}
    2ee8:	b083      	sub	sp, #12
    2eea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2eec:	9b01      	ldr	r3, [sp, #4]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d002      	beq.n	2ef8 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2ef2:	9801      	ldr	r0, [sp, #4]
    2ef4:	f000 f8ad 	bl	3052 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ef8:	bf00      	nop
    2efa:	b003      	add	sp, #12
    2efc:	f85d fb04 	ldr.w	pc, [sp], #4

00002f00 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2f00:	b500      	push	{lr}
    2f02:	b083      	sub	sp, #12
    2f04:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f06:	9b01      	ldr	r3, [sp, #4]
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d002      	beq.n	2f12 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2f0c:	9801      	ldr	r0, [sp, #4]
    2f0e:	f000 f8cd 	bl	30ac <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f12:	bf00      	nop
    2f14:	b003      	add	sp, #12
    2f16:	f85d fb04 	ldr.w	pc, [sp], #4

00002f1a <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2f1a:	b500      	push	{lr}
    2f1c:	b083      	sub	sp, #12
    2f1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f20:	9b01      	ldr	r3, [sp, #4]
    2f22:	2b00      	cmp	r3, #0
    2f24:	d002      	beq.n	2f2c <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2f26:	9801      	ldr	r0, [sp, #4]
    2f28:	f000 f8ee 	bl	3108 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f2c:	bf00      	nop
    2f2e:	b003      	add	sp, #12
    2f30:	f85d fb04 	ldr.w	pc, [sp], #4

00002f34 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2f34:	b500      	push	{lr}
    2f36:	b083      	sub	sp, #12
    2f38:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f3a:	9b01      	ldr	r3, [sp, #4]
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	d002      	beq.n	2f46 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2f40:	9801      	ldr	r0, [sp, #4]
    2f42:	f000 f8f9 	bl	3138 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f46:	bf00      	nop
    2f48:	b003      	add	sp, #12
    2f4a:	f85d fb04 	ldr.w	pc, [sp], #4

00002f4e <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2f4e:	b500      	push	{lr}
    2f50:	b083      	sub	sp, #12
    2f52:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f54:	9b01      	ldr	r3, [sp, #4]
    2f56:	2b00      	cmp	r3, #0
    2f58:	d002      	beq.n	2f60 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2f5a:	9801      	ldr	r0, [sp, #4]
    2f5c:	f000 f904 	bl	3168 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f60:	bf00      	nop
    2f62:	b003      	add	sp, #12
    2f64:	f85d fb04 	ldr.w	pc, [sp], #4

00002f68 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2f68:	b500      	push	{lr}
    2f6a:	b083      	sub	sp, #12
    2f6c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f6e:	9b01      	ldr	r3, [sp, #4]
    2f70:	2b00      	cmp	r3, #0
    2f72:	d002      	beq.n	2f7a <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2f74:	9801      	ldr	r0, [sp, #4]
    2f76:	f000 f90f 	bl	3198 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f7a:	bf00      	nop
    2f7c:	b003      	add	sp, #12
    2f7e:	f85d fb04 	ldr.w	pc, [sp], #4

00002f82 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2f82:	b500      	push	{lr}
    2f84:	b083      	sub	sp, #12
    2f86:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f88:	9b01      	ldr	r3, [sp, #4]
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d002      	beq.n	2f94 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2f8e:	9801      	ldr	r0, [sp, #4]
    2f90:	f000 f91a 	bl	31c8 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f94:	bf00      	nop
    2f96:	b003      	add	sp, #12
    2f98:	f85d fb04 	ldr.w	pc, [sp], #4

00002f9c <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2f9c:	b500      	push	{lr}
    2f9e:	b083      	sub	sp, #12
    2fa0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fa2:	9b01      	ldr	r3, [sp, #4]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d002      	beq.n	2fae <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2fa8:	9801      	ldr	r0, [sp, #4]
    2faa:	f000 f925 	bl	31f8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fae:	bf00      	nop
    2fb0:	b003      	add	sp, #12
    2fb2:	f85d fb04 	ldr.w	pc, [sp], #4

00002fb6 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2fb6:	b500      	push	{lr}
    2fb8:	b083      	sub	sp, #12
    2fba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fbc:	9b01      	ldr	r3, [sp, #4]
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d002      	beq.n	2fc8 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2fc2:	9801      	ldr	r0, [sp, #4]
    2fc4:	f000 f930 	bl	3228 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fc8:	bf00      	nop
    2fca:	b003      	add	sp, #12
    2fcc:	f85d fb04 	ldr.w	pc, [sp], #4

00002fd0 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2fd0:	b500      	push	{lr}
    2fd2:	b083      	sub	sp, #12
    2fd4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fd6:	9b01      	ldr	r3, [sp, #4]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d002      	beq.n	2fe2 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2fdc:	9801      	ldr	r0, [sp, #4]
    2fde:	f000 f93b 	bl	3258 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fe2:	bf00      	nop
    2fe4:	b003      	add	sp, #12
    2fe6:	f85d fb04 	ldr.w	pc, [sp], #4

00002fea <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2fea:	b500      	push	{lr}
    2fec:	b083      	sub	sp, #12
    2fee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ff0:	9b01      	ldr	r3, [sp, #4]
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d002      	beq.n	2ffc <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2ff6:	9801      	ldr	r0, [sp, #4]
    2ff8:	f000 f946 	bl	3288 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ffc:	bf00      	nop
    2ffe:	b003      	add	sp, #12
    3000:	f85d fb04 	ldr.w	pc, [sp], #4

00003004 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    3004:	b500      	push	{lr}
    3006:	b083      	sub	sp, #12
    3008:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    300a:	9b01      	ldr	r3, [sp, #4]
    300c:	2b00      	cmp	r3, #0
    300e:	d002      	beq.n	3016 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    3010:	9801      	ldr	r0, [sp, #4]
    3012:	f000 f951 	bl	32b8 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3016:	bf00      	nop
    3018:	b003      	add	sp, #12
    301a:	f85d fb04 	ldr.w	pc, [sp], #4

0000301e <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    301e:	b500      	push	{lr}
    3020:	b083      	sub	sp, #12
    3022:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3024:	9b01      	ldr	r3, [sp, #4]
    3026:	2b00      	cmp	r3, #0
    3028:	d002      	beq.n	3030 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    302a:	9801      	ldr	r0, [sp, #4]
    302c:	f000 f95e 	bl	32ec <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3030:	bf00      	nop
    3032:	b003      	add	sp, #12
    3034:	f85d fb04 	ldr.w	pc, [sp], #4

00003038 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    3038:	b500      	push	{lr}
    303a:	b083      	sub	sp, #12
    303c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    303e:	9b01      	ldr	r3, [sp, #4]
    3040:	2b00      	cmp	r3, #0
    3042:	d002      	beq.n	304a <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3044:	9801      	ldr	r0, [sp, #4]
    3046:	f000 f98b 	bl	3360 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    304a:	bf00      	nop
    304c:	b003      	add	sp, #12
    304e:	f85d fb04 	ldr.w	pc, [sp], #4

00003052 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3052:	b086      	sub	sp, #24
    3054:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3056:	9b01      	ldr	r3, [sp, #4]
    3058:	681a      	ldr	r2, [r3, #0]
    305a:	4911      	ldr	r1, [pc, #68]	; (30a0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    305c:	4613      	mov	r3, r2
    305e:	00db      	lsls	r3, r3, #3
    3060:	4413      	add	r3, r2
    3062:	440b      	add	r3, r1
    3064:	781b      	ldrb	r3, [r3, #0]
    3066:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3068:	9b01      	ldr	r3, [sp, #4]
    306a:	685b      	ldr	r3, [r3, #4]
    306c:	4a0d      	ldr	r2, [pc, #52]	; (30a4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    306e:	5cd3      	ldrb	r3, [r2, r3]
    3070:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3072:	4a0d      	ldr	r2, [pc, #52]	; (30a8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3074:	9b05      	ldr	r3, [sp, #20]
    3076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    307a:	681b      	ldr	r3, [r3, #0]
    307c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    307e:	9b03      	ldr	r3, [sp, #12]
    3080:	f023 0307 	bic.w	r3, r3, #7
    3084:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    3086:	9a03      	ldr	r2, [sp, #12]
    3088:	9b04      	ldr	r3, [sp, #16]
    308a:	4313      	orrs	r3, r2
    308c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    308e:	4a06      	ldr	r2, [pc, #24]	; (30a8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3090:	9b05      	ldr	r3, [sp, #20]
    3092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3096:	9a03      	ldr	r2, [sp, #12]
    3098:	601a      	str	r2, [r3, #0]
}
    309a:	bf00      	nop
    309c:	b006      	add	sp, #24
    309e:	4770      	bx	lr
    30a0:	00017e28 	.word	0x00017e28
    30a4:	00018220 	.word	0x00018220
    30a8:	00018264 	.word	0x00018264

000030ac <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30ac:	b086      	sub	sp, #24
    30ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    30b0:	9b01      	ldr	r3, [sp, #4]
    30b2:	681a      	ldr	r2, [r3, #0]
    30b4:	4911      	ldr	r1, [pc, #68]	; (30fc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    30b6:	4613      	mov	r3, r2
    30b8:	00db      	lsls	r3, r3, #3
    30ba:	4413      	add	r3, r2
    30bc:	440b      	add	r3, r1
    30be:	781b      	ldrb	r3, [r3, #0]
    30c0:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    30c2:	9b01      	ldr	r3, [sp, #4]
    30c4:	685b      	ldr	r3, [r3, #4]
    30c6:	4a0e      	ldr	r2, [pc, #56]	; (3100 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    30c8:	5cd3      	ldrb	r3, [r2, r3]
    30ca:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    30cc:	4a0d      	ldr	r2, [pc, #52]	; (3104 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    30ce:	9b05      	ldr	r3, [sp, #20]
    30d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    30d4:	681b      	ldr	r3, [r3, #0]
    30d6:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    30d8:	9b03      	ldr	r3, [sp, #12]
    30da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    30de:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    30e0:	9b04      	ldr	r3, [sp, #16]
    30e2:	021b      	lsls	r3, r3, #8
    30e4:	9a03      	ldr	r2, [sp, #12]
    30e6:	4313      	orrs	r3, r2
    30e8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    30ea:	4a06      	ldr	r2, [pc, #24]	; (3104 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    30ec:	9b05      	ldr	r3, [sp, #20]
    30ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    30f2:	9a03      	ldr	r2, [sp, #12]
    30f4:	601a      	str	r2, [r3, #0]
}
    30f6:	bf00      	nop
    30f8:	b006      	add	sp, #24
    30fa:	4770      	bx	lr
    30fc:	00017e28 	.word	0x00017e28
    3100:	00018220 	.word	0x00018220
    3104:	00018264 	.word	0x00018264

00003108 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3108:	b084      	sub	sp, #16
    310a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    310c:	4b09      	ldr	r3, [pc, #36]	; (3134 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    310e:	695b      	ldr	r3, [r3, #20]
    3110:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3112:	9b03      	ldr	r3, [sp, #12]
    3114:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3118:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    311a:	9b01      	ldr	r3, [sp, #4]
    311c:	685b      	ldr	r3, [r3, #4]
    311e:	3b01      	subs	r3, #1
    3120:	041b      	lsls	r3, r3, #16
    3122:	9a03      	ldr	r2, [sp, #12]
    3124:	4313      	orrs	r3, r2
    3126:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3128:	4a02      	ldr	r2, [pc, #8]	; (3134 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    312a:	9b03      	ldr	r3, [sp, #12]
    312c:	6153      	str	r3, [r2, #20]
}
    312e:	bf00      	nop
    3130:	b004      	add	sp, #16
    3132:	4770      	bx	lr
    3134:	40064000 	.word	0x40064000

00003138 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3138:	b084      	sub	sp, #16
    313a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    313c:	4b09      	ldr	r3, [pc, #36]	; (3164 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    313e:	695b      	ldr	r3, [r3, #20]
    3140:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3142:	9b03      	ldr	r3, [sp, #12]
    3144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3148:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    314a:	9b01      	ldr	r3, [sp, #4]
    314c:	685b      	ldr	r3, [r3, #4]
    314e:	3b01      	subs	r3, #1
    3150:	011b      	lsls	r3, r3, #4
    3152:	9a03      	ldr	r2, [sp, #12]
    3154:	4313      	orrs	r3, r2
    3156:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3158:	4a02      	ldr	r2, [pc, #8]	; (3164 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    315a:	9b03      	ldr	r3, [sp, #12]
    315c:	6153      	str	r3, [r2, #20]
}
    315e:	bf00      	nop
    3160:	b004      	add	sp, #16
    3162:	4770      	bx	lr
    3164:	40064000 	.word	0x40064000

00003168 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3168:	b084      	sub	sp, #16
    316a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    316c:	4b09      	ldr	r3, [pc, #36]	; (3194 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    316e:	695b      	ldr	r3, [r3, #20]
    3170:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3172:	9b03      	ldr	r3, [sp, #12]
    3174:	f023 030f 	bic.w	r3, r3, #15
    3178:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    317a:	9b01      	ldr	r3, [sp, #4]
    317c:	685b      	ldr	r3, [r3, #4]
    317e:	3b01      	subs	r3, #1
    3180:	9a03      	ldr	r2, [sp, #12]
    3182:	4313      	orrs	r3, r2
    3184:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3186:	4a03      	ldr	r2, [pc, #12]	; (3194 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3188:	9b03      	ldr	r3, [sp, #12]
    318a:	6153      	str	r3, [r2, #20]
}
    318c:	bf00      	nop
    318e:	b004      	add	sp, #16
    3190:	4770      	bx	lr
    3192:	bf00      	nop
    3194:	40064000 	.word	0x40064000

00003198 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3198:	b084      	sub	sp, #16
    319a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    319c:	4b09      	ldr	r3, [pc, #36]	; (31c4 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    319e:	699b      	ldr	r3, [r3, #24]
    31a0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    31a2:	9b03      	ldr	r3, [sp, #12]
    31a4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    31a8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    31aa:	9b01      	ldr	r3, [sp, #4]
    31ac:	685b      	ldr	r3, [r3, #4]
    31ae:	3b01      	subs	r3, #1
    31b0:	041b      	lsls	r3, r3, #16
    31b2:	9a03      	ldr	r2, [sp, #12]
    31b4:	4313      	orrs	r3, r2
    31b6:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    31b8:	4a02      	ldr	r2, [pc, #8]	; (31c4 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    31ba:	9b03      	ldr	r3, [sp, #12]
    31bc:	6193      	str	r3, [r2, #24]
}
    31be:	bf00      	nop
    31c0:	b004      	add	sp, #16
    31c2:	4770      	bx	lr
    31c4:	40064000 	.word	0x40064000

000031c8 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31c8:	b084      	sub	sp, #16
    31ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    31cc:	4b09      	ldr	r3, [pc, #36]	; (31f4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    31ce:	699b      	ldr	r3, [r3, #24]
    31d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    31d2:	9b03      	ldr	r3, [sp, #12]
    31d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    31d8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    31da:	9b01      	ldr	r3, [sp, #4]
    31dc:	685b      	ldr	r3, [r3, #4]
    31de:	3b01      	subs	r3, #1
    31e0:	011b      	lsls	r3, r3, #4
    31e2:	9a03      	ldr	r2, [sp, #12]
    31e4:	4313      	orrs	r3, r2
    31e6:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    31e8:	4a02      	ldr	r2, [pc, #8]	; (31f4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    31ea:	9b03      	ldr	r3, [sp, #12]
    31ec:	6193      	str	r3, [r2, #24]
}
    31ee:	bf00      	nop
    31f0:	b004      	add	sp, #16
    31f2:	4770      	bx	lr
    31f4:	40064000 	.word	0x40064000

000031f8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31f8:	b084      	sub	sp, #16
    31fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    31fc:	4b09      	ldr	r3, [pc, #36]	; (3224 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    31fe:	699b      	ldr	r3, [r3, #24]
    3200:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3202:	9b03      	ldr	r3, [sp, #12]
    3204:	f023 030f 	bic.w	r3, r3, #15
    3208:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    320a:	9b01      	ldr	r3, [sp, #4]
    320c:	685b      	ldr	r3, [r3, #4]
    320e:	3b01      	subs	r3, #1
    3210:	9a03      	ldr	r2, [sp, #12]
    3212:	4313      	orrs	r3, r2
    3214:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3216:	4a03      	ldr	r2, [pc, #12]	; (3224 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3218:	9b03      	ldr	r3, [sp, #12]
    321a:	6193      	str	r3, [r2, #24]
}
    321c:	bf00      	nop
    321e:	b004      	add	sp, #16
    3220:	4770      	bx	lr
    3222:	bf00      	nop
    3224:	40064000 	.word	0x40064000

00003228 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3228:	b084      	sub	sp, #16
    322a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    322c:	4b09      	ldr	r3, [pc, #36]	; (3254 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    322e:	69db      	ldr	r3, [r3, #28]
    3230:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3232:	9b03      	ldr	r3, [sp, #12]
    3234:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3238:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    323a:	9b01      	ldr	r3, [sp, #4]
    323c:	685b      	ldr	r3, [r3, #4]
    323e:	3b01      	subs	r3, #1
    3240:	041b      	lsls	r3, r3, #16
    3242:	9a03      	ldr	r2, [sp, #12]
    3244:	4313      	orrs	r3, r2
    3246:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3248:	4a02      	ldr	r2, [pc, #8]	; (3254 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    324a:	9b03      	ldr	r3, [sp, #12]
    324c:	61d3      	str	r3, [r2, #28]
}
    324e:	bf00      	nop
    3250:	b004      	add	sp, #16
    3252:	4770      	bx	lr
    3254:	40064000 	.word	0x40064000

00003258 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3258:	b084      	sub	sp, #16
    325a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    325c:	4b09      	ldr	r3, [pc, #36]	; (3284 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    325e:	69db      	ldr	r3, [r3, #28]
    3260:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3262:	9b03      	ldr	r3, [sp, #12]
    3264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3268:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    326a:	9b01      	ldr	r3, [sp, #4]
    326c:	685b      	ldr	r3, [r3, #4]
    326e:	3b01      	subs	r3, #1
    3270:	011b      	lsls	r3, r3, #4
    3272:	9a03      	ldr	r2, [sp, #12]
    3274:	4313      	orrs	r3, r2
    3276:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3278:	4a02      	ldr	r2, [pc, #8]	; (3284 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    327a:	9b03      	ldr	r3, [sp, #12]
    327c:	61d3      	str	r3, [r2, #28]
}
    327e:	bf00      	nop
    3280:	b004      	add	sp, #16
    3282:	4770      	bx	lr
    3284:	40064000 	.word	0x40064000

00003288 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3288:	b084      	sub	sp, #16
    328a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    328c:	4b09      	ldr	r3, [pc, #36]	; (32b4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    328e:	69db      	ldr	r3, [r3, #28]
    3290:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3292:	9b03      	ldr	r3, [sp, #12]
    3294:	f023 030f 	bic.w	r3, r3, #15
    3298:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    329a:	9b01      	ldr	r3, [sp, #4]
    329c:	685b      	ldr	r3, [r3, #4]
    329e:	3b01      	subs	r3, #1
    32a0:	9a03      	ldr	r2, [sp, #12]
    32a2:	4313      	orrs	r3, r2
    32a4:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    32a6:	4a03      	ldr	r2, [pc, #12]	; (32b4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    32a8:	9b03      	ldr	r3, [sp, #12]
    32aa:	61d3      	str	r3, [r2, #28]
}
    32ac:	bf00      	nop
    32ae:	b004      	add	sp, #16
    32b0:	4770      	bx	lr
    32b2:	bf00      	nop
    32b4:	40064000 	.word	0x40064000

000032b8 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    32b8:	b084      	sub	sp, #16
    32ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    32bc:	4b0a      	ldr	r3, [pc, #40]	; (32e8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    32be:	685b      	ldr	r3, [r3, #4]
    32c0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    32c2:	9b03      	ldr	r3, [sp, #12]
    32c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    32c8:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    32ca:	9b01      	ldr	r3, [sp, #4]
    32cc:	685b      	ldr	r3, [r3, #4]
    32ce:	3b01      	subs	r3, #1
    32d0:	021b      	lsls	r3, r3, #8
    32d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    32d6:	9a03      	ldr	r2, [sp, #12]
    32d8:	4313      	orrs	r3, r2
    32da:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    32dc:	4a02      	ldr	r2, [pc, #8]	; (32e8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    32de:	9b03      	ldr	r3, [sp, #12]
    32e0:	6053      	str	r3, [r2, #4]
}
    32e2:	bf00      	nop
    32e4:	b004      	add	sp, #16
    32e6:	4770      	bx	lr
    32e8:	40048000 	.word	0x40048000

000032ec <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32ec:	b084      	sub	sp, #16
    32ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    32f0:	4919      	ldr	r1, [pc, #100]	; (3358 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    32f2:	9b01      	ldr	r3, [sp, #4]
    32f4:	681a      	ldr	r2, [r3, #0]
    32f6:	4819      	ldr	r0, [pc, #100]	; (335c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    32f8:	4613      	mov	r3, r2
    32fa:	00db      	lsls	r3, r3, #3
    32fc:	4413      	add	r3, r2
    32fe:	4403      	add	r3, r0
    3300:	3305      	adds	r3, #5
    3302:	781b      	ldrb	r3, [r3, #0]
    3304:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3308:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    330a:	9b03      	ldr	r3, [sp, #12]
    330c:	f023 030f 	bic.w	r3, r3, #15
    3310:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3312:	9b01      	ldr	r3, [sp, #4]
    3314:	685b      	ldr	r3, [r3, #4]
    3316:	3b01      	subs	r3, #1
    3318:	f003 0307 	and.w	r3, r3, #7
    331c:	9a03      	ldr	r2, [sp, #12]
    331e:	4313      	orrs	r3, r2
    3320:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3322:	9b01      	ldr	r3, [sp, #4]
    3324:	7a1b      	ldrb	r3, [r3, #8]
    3326:	3b01      	subs	r3, #1
    3328:	00db      	lsls	r3, r3, #3
    332a:	f003 0308 	and.w	r3, r3, #8
    332e:	9a03      	ldr	r2, [sp, #12]
    3330:	4313      	orrs	r3, r2
    3332:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3334:	4908      	ldr	r1, [pc, #32]	; (3358 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3336:	9b01      	ldr	r3, [sp, #4]
    3338:	681a      	ldr	r2, [r3, #0]
    333a:	4808      	ldr	r0, [pc, #32]	; (335c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    333c:	4613      	mov	r3, r2
    333e:	00db      	lsls	r3, r3, #3
    3340:	4413      	add	r3, r2
    3342:	4403      	add	r3, r0
    3344:	3305      	adds	r3, #5
    3346:	781b      	ldrb	r3, [r3, #0]
    3348:	461a      	mov	r2, r3
    334a:	9b03      	ldr	r3, [sp, #12]
    334c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3350:	bf00      	nop
    3352:	b004      	add	sp, #16
    3354:	4770      	bx	lr
    3356:	bf00      	nop
    3358:	40065000 	.word	0x40065000
    335c:	00017e28 	.word	0x00017e28

00003360 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3360:	b084      	sub	sp, #16
    3362:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3364:	4b10      	ldr	r3, [pc, #64]	; (33a8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3368:	4a0f      	ldr	r2, [pc, #60]	; (33a8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    336a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    336e:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3370:	4b0d      	ldr	r3, [pc, #52]	; (33a8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3374:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3376:	9b03      	ldr	r3, [sp, #12]
    3378:	f023 030f 	bic.w	r3, r3, #15
    337c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    337e:	9b01      	ldr	r3, [sp, #4]
    3380:	685b      	ldr	r3, [r3, #4]
    3382:	3b01      	subs	r3, #1
    3384:	005b      	lsls	r3, r3, #1
    3386:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    338a:	9b01      	ldr	r3, [sp, #4]
    338c:	7a1b      	ldrb	r3, [r3, #8]
    338e:	3b01      	subs	r3, #1
    3390:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3394:	4313      	orrs	r3, r2
    3396:	9a03      	ldr	r2, [sp, #12]
    3398:	4313      	orrs	r3, r2
    339a:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    339c:	4a02      	ldr	r2, [pc, #8]	; (33a8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    339e:	9b03      	ldr	r3, [sp, #12]
    33a0:	6693      	str	r3, [r2, #104]	; 0x68
}
    33a2:	bf00      	nop
    33a4:	b004      	add	sp, #16
    33a6:	4770      	bx	lr
    33a8:	40048000 	.word	0x40048000

000033ac <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    33ac:	b082      	sub	sp, #8
    33ae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33b0:	bf00      	nop
    33b2:	b002      	add	sp, #8
    33b4:	4770      	bx	lr
	...

000033b8 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    33b8:	b082      	sub	sp, #8
    33ba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33bc:	bf00      	nop
    33be:	b002      	add	sp, #8
    33c0:	4770      	bx	lr

000033c2 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    33c2:	b082      	sub	sp, #8
    33c4:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    33c6:	bf00      	nop
    33c8:	b002      	add	sp, #8
    33ca:	4770      	bx	lr

000033cc <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    33cc:	b500      	push	{lr}
    33ce:	b083      	sub	sp, #12
    33d0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33d2:	9b01      	ldr	r3, [sp, #4]
    33d4:	2b00      	cmp	r3, #0
    33d6:	d002      	beq.n	33de <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    33d8:	9801      	ldr	r0, [sp, #4]
    33da:	f000 f86a 	bl	34b2 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33de:	bf00      	nop
    33e0:	b003      	add	sp, #12
    33e2:	f85d fb04 	ldr.w	pc, [sp], #4

000033e6 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    33e6:	b500      	push	{lr}
    33e8:	b083      	sub	sp, #12
    33ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33ec:	9b01      	ldr	r3, [sp, #4]
    33ee:	2b00      	cmp	r3, #0
    33f0:	d002      	beq.n	33f8 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    33f2:	9801      	ldr	r0, [sp, #4]
    33f4:	f000 f884 	bl	3500 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    33f8:	bf00      	nop
    33fa:	b003      	add	sp, #12
    33fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003400 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3400:	b500      	push	{lr}
    3402:	b089      	sub	sp, #36	; 0x24
    3404:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3406:	2300      	movs	r3, #0
    3408:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    340c:	9b01      	ldr	r3, [sp, #4]
    340e:	2b00      	cmp	r3, #0
    3410:	d031      	beq.n	3476 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3412:	4b1b      	ldr	r3, [pc, #108]	; (3480 <Clock_Ip_CompleteSOSC+0x80>)
    3414:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3418:	f003 0301 	and.w	r3, r3, #1
    341c:	2b00      	cmp	r3, #0
    341e:	d02a      	beq.n	3476 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3420:	aa03      	add	r2, sp, #12
    3422:	a904      	add	r1, sp, #16
    3424:	a805      	add	r0, sp, #20
    3426:	f24c 3350 	movw	r3, #50000	; 0xc350
    342a:	f7ff fd1d 	bl	2e68 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    342e:	4b14      	ldr	r3, [pc, #80]	; (3480 <Clock_Ip_CompleteSOSC+0x80>)
    3430:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3434:	0e1b      	lsrs	r3, r3, #24
    3436:	f003 0301 	and.w	r3, r3, #1
    343a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    343c:	9a03      	ldr	r2, [sp, #12]
    343e:	a904      	add	r1, sp, #16
    3440:	ab05      	add	r3, sp, #20
    3442:	4618      	mov	r0, r3
    3444:	f7ff fd2a 	bl	2e9c <Clock_Ip_TimeoutExpired>
    3448:	4603      	mov	r3, r0
    344a:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    344e:	9b06      	ldr	r3, [sp, #24]
    3450:	2b00      	cmp	r3, #0
    3452:	d106      	bne.n	3462 <Clock_Ip_CompleteSOSC+0x62>
    3454:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3458:	f083 0301 	eor.w	r3, r3, #1
    345c:	b2db      	uxtb	r3, r3
    345e:	2b00      	cmp	r3, #0
    3460:	d1e5      	bne.n	342e <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3462:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3466:	2b00      	cmp	r3, #0
    3468:	d005      	beq.n	3476 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    346a:	9b01      	ldr	r3, [sp, #4]
    346c:	681b      	ldr	r3, [r3, #0]
    346e:	4619      	mov	r1, r3
    3470:	2001      	movs	r0, #1
    3472:	f7ff fce9 	bl	2e48 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3476:	bf00      	nop
    3478:	b009      	add	sp, #36	; 0x24
    347a:	f85d fb04 	ldr.w	pc, [sp], #4
    347e:	bf00      	nop
    3480:	40064000 	.word	0x40064000

00003484 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3484:	b500      	push	{lr}
    3486:	b083      	sub	sp, #12
    3488:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    348a:	9801      	ldr	r0, [sp, #4]
    348c:	f000 f8c0 	bl	3610 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3490:	bf00      	nop
    3492:	b003      	add	sp, #12
    3494:	f85d fb04 	ldr.w	pc, [sp], #4

00003498 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3498:	b500      	push	{lr}
    349a:	b083      	sub	sp, #12
    349c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    349e:	9b01      	ldr	r3, [sp, #4]
    34a0:	2b00      	cmp	r3, #0
    34a2:	d002      	beq.n	34aa <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    34a4:	9801      	ldr	r0, [sp, #4]
    34a6:	f000 f8c3 	bl	3630 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34aa:	bf00      	nop
    34ac:	b003      	add	sp, #12
    34ae:	f85d fb04 	ldr.w	pc, [sp], #4

000034b2 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    34b2:	b082      	sub	sp, #8
    34b4:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    34b6:	4b11      	ldr	r3, [pc, #68]	; (34fc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    34bc:	4a0f      	ldr	r2, [pc, #60]	; (34fc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    34c2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    34c6:	4b0d      	ldr	r3, [pc, #52]	; (34fc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    34cc:	4a0b      	ldr	r2, [pc, #44]	; (34fc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    34d2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    34d6:	4b09      	ldr	r3, [pc, #36]	; (34fc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    34dc:	4a07      	ldr	r2, [pc, #28]	; (34fc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    34e2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    34e6:	4b05      	ldr	r3, [pc, #20]	; (34fc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    34ec:	4a03      	ldr	r2, [pc, #12]	; (34fc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    34ee:	f023 0301 	bic.w	r3, r3, #1
    34f2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    34f6:	bf00      	nop
    34f8:	b002      	add	sp, #8
    34fa:	4770      	bx	lr
    34fc:	40064000 	.word	0x40064000

00003500 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3500:	b082      	sub	sp, #8
    3502:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3504:	9b01      	ldr	r3, [sp, #4]
    3506:	891b      	ldrh	r3, [r3, #8]
    3508:	2b01      	cmp	r3, #1
    350a:	d174      	bne.n	35f6 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    350c:	9b01      	ldr	r3, [sp, #4]
    350e:	7bdb      	ldrb	r3, [r3, #15]
    3510:	2b00      	cmp	r3, #0
    3512:	d002      	beq.n	351a <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3514:	2b01      	cmp	r3, #1
    3516:	d009      	beq.n	352c <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3518:	e011      	b.n	353e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    351a:	4b39      	ldr	r3, [pc, #228]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    351c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3520:	4a37      	ldr	r2, [pc, #220]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3522:	f023 0308 	bic.w	r3, r3, #8
    3526:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    352a:	e008      	b.n	353e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    352c:	4b34      	ldr	r3, [pc, #208]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    352e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3532:	4a33      	ldr	r2, [pc, #204]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3534:	f043 0308 	orr.w	r3, r3, #8
    3538:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    353c:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    353e:	4b30      	ldr	r3, [pc, #192]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3540:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3544:	4a2e      	ldr	r2, [pc, #184]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3546:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    354a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    354e:	9b01      	ldr	r3, [sp, #4]
    3550:	685b      	ldr	r3, [r3, #4]
    3552:	4a2c      	ldr	r2, [pc, #176]	; (3604 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3554:	4293      	cmp	r3, r2
    3556:	d90d      	bls.n	3574 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3558:	9b01      	ldr	r3, [sp, #4]
    355a:	685b      	ldr	r3, [r3, #4]
    355c:	4a2a      	ldr	r2, [pc, #168]	; (3608 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    355e:	4293      	cmp	r3, r2
    3560:	d208      	bcs.n	3574 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3562:	4b27      	ldr	r3, [pc, #156]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3564:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3568:	4a25      	ldr	r2, [pc, #148]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    356a:	f043 0320 	orr.w	r3, r3, #32
    356e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3572:	e007      	b.n	3584 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3574:	4b22      	ldr	r3, [pc, #136]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3576:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    357a:	4a21      	ldr	r2, [pc, #132]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    357c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3580:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3584:	9b01      	ldr	r3, [sp, #4]
    3586:	7b1b      	ldrb	r3, [r3, #12]
    3588:	2b00      	cmp	r3, #0
    358a:	d108      	bne.n	359e <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    358c:	4b1c      	ldr	r3, [pc, #112]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    358e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3592:	4a1b      	ldr	r2, [pc, #108]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3594:	f043 0304 	orr.w	r3, r3, #4
    3598:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    359c:	e007      	b.n	35ae <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    359e:	4b18      	ldr	r3, [pc, #96]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    35a4:	4a16      	ldr	r2, [pc, #88]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35a6:	f023 0304 	bic.w	r3, r3, #4
    35aa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    35ae:	9b01      	ldr	r3, [sp, #4]
    35b0:	7c1b      	ldrb	r3, [r3, #16]
    35b2:	2b02      	cmp	r3, #2
    35b4:	d011      	beq.n	35da <Clock_Ip_SetSOSC_TrustedCall+0xda>
    35b6:	2b02      	cmp	r3, #2
    35b8:	dc14      	bgt.n	35e4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    35ba:	2b00      	cmp	r3, #0
    35bc:	d002      	beq.n	35c4 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    35be:	2b01      	cmp	r3, #1
    35c0:	d005      	beq.n	35ce <Clock_Ip_SetSOSC_TrustedCall+0xce>
    35c2:	e00f      	b.n	35e4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    35c4:	4b0e      	ldr	r3, [pc, #56]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35c6:	2201      	movs	r2, #1
    35c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    35cc:	e014      	b.n	35f8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    35ce:	4b0c      	ldr	r3, [pc, #48]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35d0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    35d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    35d8:	e00e      	b.n	35f8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    35da:	4b09      	ldr	r3, [pc, #36]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35dc:	4a0b      	ldr	r2, [pc, #44]	; (360c <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    35de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    35e2:	e009      	b.n	35f8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    35e4:	4b06      	ldr	r3, [pc, #24]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35ea:	4a05      	ldr	r2, [pc, #20]	; (3600 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35ec:	f043 0301 	orr.w	r3, r3, #1
    35f0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    35f4:	e000      	b.n	35f8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    35f6:	bf00      	nop
}
    35f8:	bf00      	nop
    35fa:	b002      	add	sp, #8
    35fc:	4770      	bx	lr
    35fe:	bf00      	nop
    3600:	40064000 	.word	0x40064000
    3604:	003d08ff 	.word	0x003d08ff
    3608:	007a1200 	.word	0x007a1200
    360c:	00030001 	.word	0x00030001

00003610 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3610:	b082      	sub	sp, #8
    3612:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3614:	4b05      	ldr	r3, [pc, #20]	; (362c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3616:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    361a:	4a04      	ldr	r2, [pc, #16]	; (362c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    361c:	f023 0301 	bic.w	r3, r3, #1
    3620:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3624:	bf00      	nop
    3626:	b002      	add	sp, #8
    3628:	4770      	bx	lr
    362a:	bf00      	nop
    362c:	40064000 	.word	0x40064000

00003630 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3630:	b082      	sub	sp, #8
    3632:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3634:	9b01      	ldr	r3, [sp, #4]
    3636:	891b      	ldrh	r3, [r3, #8]
    3638:	2b01      	cmp	r3, #1
    363a:	d107      	bne.n	364c <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    363c:	4b05      	ldr	r3, [pc, #20]	; (3654 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    363e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3642:	4a04      	ldr	r2, [pc, #16]	; (3654 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3644:	f043 0301 	orr.w	r3, r3, #1
    3648:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    364c:	bf00      	nop
    364e:	b002      	add	sp, #8
    3650:	4770      	bx	lr
    3652:	bf00      	nop
    3654:	40064000 	.word	0x40064000

00003658 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3658:	b082      	sub	sp, #8
    365a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    365c:	bf00      	nop
    365e:	b002      	add	sp, #8
    3660:	4770      	bx	lr

00003662 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3662:	b082      	sub	sp, #8
    3664:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3666:	2300      	movs	r3, #0
}
    3668:	4618      	mov	r0, r3
    366a:	b002      	add	sp, #8
    366c:	4770      	bx	lr

0000366e <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    366e:	b082      	sub	sp, #8
    3670:	9001      	str	r0, [sp, #4]
    3672:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3674:	bf00      	nop
    3676:	b002      	add	sp, #8
    3678:	4770      	bx	lr
	...

0000367c <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    367c:	b082      	sub	sp, #8
    367e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3680:	bf00      	nop
    3682:	b002      	add	sp, #8
    3684:	4770      	bx	lr

00003686 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3686:	b082      	sub	sp, #8
    3688:	9001      	str	r0, [sp, #4]
    368a:	460b      	mov	r3, r1
    368c:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3690:	bf00      	nop
    3692:	b002      	add	sp, #8
    3694:	4770      	bx	lr

00003696 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3696:	b500      	push	{lr}
    3698:	b083      	sub	sp, #12
    369a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    369c:	9b01      	ldr	r3, [sp, #4]
    369e:	2b00      	cmp	r3, #0
    36a0:	d002      	beq.n	36a8 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    36a2:	9801      	ldr	r0, [sp, #4]
    36a4:	f000 f8e7 	bl	3876 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36a8:	bf00      	nop
    36aa:	b003      	add	sp, #12
    36ac:	f85d fb04 	ldr.w	pc, [sp], #4

000036b0 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    36b0:	b500      	push	{lr}
    36b2:	b085      	sub	sp, #20
    36b4:	9001      	str	r0, [sp, #4]
    36b6:	460b      	mov	r3, r1
    36b8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    36bc:	9b01      	ldr	r3, [sp, #4]
    36be:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    36c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d003      	beq.n	36d0 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    36c8:	2300      	movs	r3, #0
    36ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    36ce:	e002      	b.n	36d6 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    36d0:	2301      	movs	r3, #1
    36d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    36d6:	ab02      	add	r3, sp, #8
    36d8:	4618      	mov	r0, r3
    36da:	f7ff ffdc 	bl	3696 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    36de:	bf00      	nop
    36e0:	b005      	add	sp, #20
    36e2:	f85d fb04 	ldr.w	pc, [sp], #4

000036e6 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    36e6:	b500      	push	{lr}
    36e8:	b083      	sub	sp, #12
    36ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36ec:	9b01      	ldr	r3, [sp, #4]
    36ee:	2b00      	cmp	r3, #0
    36f0:	d002      	beq.n	36f8 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    36f2:	9801      	ldr	r0, [sp, #4]
    36f4:	f000 f8d6 	bl	38a4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36f8:	bf00      	nop
    36fa:	b003      	add	sp, #12
    36fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003700 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3700:	b500      	push	{lr}
    3702:	b085      	sub	sp, #20
    3704:	9001      	str	r0, [sp, #4]
    3706:	460b      	mov	r3, r1
    3708:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    370c:	9b01      	ldr	r3, [sp, #4]
    370e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3710:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3714:	2b00      	cmp	r3, #0
    3716:	d003      	beq.n	3720 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3718:	2300      	movs	r3, #0
    371a:	f8ad 300c 	strh.w	r3, [sp, #12]
    371e:	e002      	b.n	3726 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3720:	2301      	movs	r3, #1
    3722:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3726:	ab02      	add	r3, sp, #8
    3728:	4618      	mov	r0, r3
    372a:	f7ff ffdc 	bl	36e6 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    372e:	bf00      	nop
    3730:	b005      	add	sp, #20
    3732:	f85d fb04 	ldr.w	pc, [sp], #4

00003736 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3736:	b500      	push	{lr}
    3738:	b083      	sub	sp, #12
    373a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    373c:	9b01      	ldr	r3, [sp, #4]
    373e:	2b00      	cmp	r3, #0
    3740:	d002      	beq.n	3748 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3742:	9801      	ldr	r0, [sp, #4]
    3744:	f000 f8c6 	bl	38d4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3748:	bf00      	nop
    374a:	b003      	add	sp, #12
    374c:	f85d fb04 	ldr.w	pc, [sp], #4

00003750 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3750:	b500      	push	{lr}
    3752:	b085      	sub	sp, #20
    3754:	9001      	str	r0, [sp, #4]
    3756:	460b      	mov	r3, r1
    3758:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    375c:	9b01      	ldr	r3, [sp, #4]
    375e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3760:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3764:	2b00      	cmp	r3, #0
    3766:	d003      	beq.n	3770 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3768:	2300      	movs	r3, #0
    376a:	f8ad 300c 	strh.w	r3, [sp, #12]
    376e:	e002      	b.n	3776 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3770:	2301      	movs	r3, #1
    3772:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3776:	ab02      	add	r3, sp, #8
    3778:	4618      	mov	r0, r3
    377a:	f7ff ffdc 	bl	3736 <Clock_Ip_ClockSetSimClkoutEnable>
}
    377e:	bf00      	nop
    3780:	b005      	add	sp, #20
    3782:	f85d fb04 	ldr.w	pc, [sp], #4

00003786 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3786:	b500      	push	{lr}
    3788:	b083      	sub	sp, #12
    378a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    378c:	9b01      	ldr	r3, [sp, #4]
    378e:	2b00      	cmp	r3, #0
    3790:	d002      	beq.n	3798 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3792:	9801      	ldr	r0, [sp, #4]
    3794:	f000 f8b6 	bl	3904 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3798:	bf00      	nop
    379a:	b003      	add	sp, #12
    379c:	f85d fb04 	ldr.w	pc, [sp], #4

000037a0 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    37a0:	b500      	push	{lr}
    37a2:	b085      	sub	sp, #20
    37a4:	9001      	str	r0, [sp, #4]
    37a6:	460b      	mov	r3, r1
    37a8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37ac:	9b01      	ldr	r3, [sp, #4]
    37ae:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    37b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37b4:	2b00      	cmp	r3, #0
    37b6:	d003      	beq.n	37c0 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    37b8:	2300      	movs	r3, #0
    37ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    37be:	e002      	b.n	37c6 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37c0:	2301      	movs	r3, #1
    37c2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    37c6:	ab02      	add	r3, sp, #8
    37c8:	4618      	mov	r0, r3
    37ca:	f7ff ffdc 	bl	3786 <Clock_Ip_ClockSetPccCgcEnable>
}
    37ce:	bf00      	nop
    37d0:	b005      	add	sp, #20
    37d2:	f85d fb04 	ldr.w	pc, [sp], #4

000037d6 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    37d6:	b500      	push	{lr}
    37d8:	b083      	sub	sp, #12
    37da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37dc:	9b01      	ldr	r3, [sp, #4]
    37de:	2b00      	cmp	r3, #0
    37e0:	d002      	beq.n	37e8 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    37e2:	9801      	ldr	r0, [sp, #4]
    37e4:	f000 f8bc 	bl	3960 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37e8:	bf00      	nop
    37ea:	b003      	add	sp, #12
    37ec:	f85d fb04 	ldr.w	pc, [sp], #4

000037f0 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    37f0:	b500      	push	{lr}
    37f2:	b085      	sub	sp, #20
    37f4:	9001      	str	r0, [sp, #4]
    37f6:	460b      	mov	r3, r1
    37f8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37fc:	9b01      	ldr	r3, [sp, #4]
    37fe:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3800:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3804:	2b00      	cmp	r3, #0
    3806:	d003      	beq.n	3810 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3808:	2300      	movs	r3, #0
    380a:	f8ad 300c 	strh.w	r3, [sp, #12]
    380e:	e002      	b.n	3816 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3810:	2301      	movs	r3, #1
    3812:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3816:	ab02      	add	r3, sp, #8
    3818:	4618      	mov	r0, r3
    381a:	f7ff ffdc 	bl	37d6 <Clock_Ip_ClockSetSimGate>
}
    381e:	bf00      	nop
    3820:	b005      	add	sp, #20
    3822:	f85d fb04 	ldr.w	pc, [sp], #4

00003826 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3826:	b500      	push	{lr}
    3828:	b083      	sub	sp, #12
    382a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    382c:	9b01      	ldr	r3, [sp, #4]
    382e:	2b00      	cmp	r3, #0
    3830:	d002      	beq.n	3838 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3832:	9801      	ldr	r0, [sp, #4]
    3834:	f000 f8c0 	bl	39b8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3838:	bf00      	nop
    383a:	b003      	add	sp, #12
    383c:	f85d fb04 	ldr.w	pc, [sp], #4

00003840 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3840:	b500      	push	{lr}
    3842:	b085      	sub	sp, #20
    3844:	9001      	str	r0, [sp, #4]
    3846:	460b      	mov	r3, r1
    3848:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    384c:	9b01      	ldr	r3, [sp, #4]
    384e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3850:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3854:	2b00      	cmp	r3, #0
    3856:	d003      	beq.n	3860 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3858:	2300      	movs	r3, #0
    385a:	f8ad 300c 	strh.w	r3, [sp, #12]
    385e:	e002      	b.n	3866 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3860:	2301      	movs	r3, #1
    3862:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3866:	ab02      	add	r3, sp, #8
    3868:	4618      	mov	r0, r3
    386a:	f7ff ffdc 	bl	3826 <Clock_Ip_ClockSetSimTraceEnable>
}
    386e:	bf00      	nop
    3870:	b005      	add	sp, #20
    3872:	f85d fb04 	ldr.w	pc, [sp], #4

00003876 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3876:	b084      	sub	sp, #16
    3878:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    387a:	4b09      	ldr	r3, [pc, #36]	; (38a0 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    387c:	691b      	ldr	r3, [r3, #16]
    387e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3880:	9b03      	ldr	r3, [sp, #12]
    3882:	f023 0301 	bic.w	r3, r3, #1
    3886:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3888:	9b01      	ldr	r3, [sp, #4]
    388a:	889b      	ldrh	r3, [r3, #4]
    388c:	461a      	mov	r2, r3
    388e:	9b03      	ldr	r3, [sp, #12]
    3890:	4313      	orrs	r3, r2
    3892:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3894:	4a02      	ldr	r2, [pc, #8]	; (38a0 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3896:	9b03      	ldr	r3, [sp, #12]
    3898:	6113      	str	r3, [r2, #16]
}
    389a:	bf00      	nop
    389c:	b004      	add	sp, #16
    389e:	4770      	bx	lr
    38a0:	40048000 	.word	0x40048000

000038a4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    38a4:	b084      	sub	sp, #16
    38a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    38a8:	4b09      	ldr	r3, [pc, #36]	; (38d0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    38aa:	691b      	ldr	r3, [r3, #16]
    38ac:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    38ae:	9b03      	ldr	r3, [sp, #12]
    38b0:	f023 0302 	bic.w	r3, r3, #2
    38b4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    38b6:	9b01      	ldr	r3, [sp, #4]
    38b8:	889b      	ldrh	r3, [r3, #4]
    38ba:	005b      	lsls	r3, r3, #1
    38bc:	9a03      	ldr	r2, [sp, #12]
    38be:	4313      	orrs	r3, r2
    38c0:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    38c2:	4a03      	ldr	r2, [pc, #12]	; (38d0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    38c4:	9b03      	ldr	r3, [sp, #12]
    38c6:	6113      	str	r3, [r2, #16]
}
    38c8:	bf00      	nop
    38ca:	b004      	add	sp, #16
    38cc:	4770      	bx	lr
    38ce:	bf00      	nop
    38d0:	40048000 	.word	0x40048000

000038d4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    38d4:	b084      	sub	sp, #16
    38d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    38d8:	4b09      	ldr	r3, [pc, #36]	; (3900 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    38da:	685b      	ldr	r3, [r3, #4]
    38dc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    38de:	9b03      	ldr	r3, [sp, #12]
    38e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    38e4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    38e6:	9b01      	ldr	r3, [sp, #4]
    38e8:	889b      	ldrh	r3, [r3, #4]
    38ea:	02db      	lsls	r3, r3, #11
    38ec:	9a03      	ldr	r2, [sp, #12]
    38ee:	4313      	orrs	r3, r2
    38f0:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    38f2:	4a03      	ldr	r2, [pc, #12]	; (3900 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    38f4:	9b03      	ldr	r3, [sp, #12]
    38f6:	6053      	str	r3, [r2, #4]
}
    38f8:	bf00      	nop
    38fa:	b004      	add	sp, #16
    38fc:	4770      	bx	lr
    38fe:	bf00      	nop
    3900:	40048000 	.word	0x40048000

00003904 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3904:	b084      	sub	sp, #16
    3906:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3908:	4913      	ldr	r1, [pc, #76]	; (3958 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    390a:	9b01      	ldr	r3, [sp, #4]
    390c:	681a      	ldr	r2, [r3, #0]
    390e:	4813      	ldr	r0, [pc, #76]	; (395c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3910:	4613      	mov	r3, r2
    3912:	00db      	lsls	r3, r3, #3
    3914:	4413      	add	r3, r2
    3916:	4403      	add	r3, r0
    3918:	3306      	adds	r3, #6
    391a:	781b      	ldrb	r3, [r3, #0]
    391c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3920:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3922:	9b03      	ldr	r3, [sp, #12]
    3924:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3928:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    392a:	9b01      	ldr	r3, [sp, #4]
    392c:	889b      	ldrh	r3, [r3, #4]
    392e:	079b      	lsls	r3, r3, #30
    3930:	9a03      	ldr	r2, [sp, #12]
    3932:	4313      	orrs	r3, r2
    3934:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3936:	4908      	ldr	r1, [pc, #32]	; (3958 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3938:	9b01      	ldr	r3, [sp, #4]
    393a:	681a      	ldr	r2, [r3, #0]
    393c:	4807      	ldr	r0, [pc, #28]	; (395c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    393e:	4613      	mov	r3, r2
    3940:	00db      	lsls	r3, r3, #3
    3942:	4413      	add	r3, r2
    3944:	4403      	add	r3, r0
    3946:	3306      	adds	r3, #6
    3948:	781b      	ldrb	r3, [r3, #0]
    394a:	461a      	mov	r2, r3
    394c:	9b03      	ldr	r3, [sp, #12]
    394e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3952:	bf00      	nop
    3954:	b004      	add	sp, #16
    3956:	4770      	bx	lr
    3958:	40065000 	.word	0x40065000
    395c:	00017e28 	.word	0x00017e28

00003960 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3960:	b086      	sub	sp, #24
    3962:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3964:	9b01      	ldr	r3, [sp, #4]
    3966:	889b      	ldrh	r3, [r3, #4]
    3968:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    396a:	9b01      	ldr	r3, [sp, #4]
    396c:	681a      	ldr	r2, [r3, #0]
    396e:	4910      	ldr	r1, [pc, #64]	; (39b0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3970:	4613      	mov	r3, r2
    3972:	00db      	lsls	r3, r3, #3
    3974:	4413      	add	r3, r2
    3976:	440b      	add	r3, r1
    3978:	3306      	adds	r3, #6
    397a:	781b      	ldrb	r3, [r3, #0]
    397c:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    397e:	4b0d      	ldr	r3, [pc, #52]	; (39b4 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3982:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3984:	2201      	movs	r2, #1
    3986:	9b04      	ldr	r3, [sp, #16]
    3988:	fa02 f303 	lsl.w	r3, r2, r3
    398c:	43db      	mvns	r3, r3
    398e:	9a03      	ldr	r2, [sp, #12]
    3990:	4013      	ands	r3, r2
    3992:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3994:	9a05      	ldr	r2, [sp, #20]
    3996:	9b04      	ldr	r3, [sp, #16]
    3998:	fa02 f303 	lsl.w	r3, r2, r3
    399c:	9a03      	ldr	r2, [sp, #12]
    399e:	4313      	orrs	r3, r2
    39a0:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    39a2:	4a04      	ldr	r2, [pc, #16]	; (39b4 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    39a4:	9b03      	ldr	r3, [sp, #12]
    39a6:	6413      	str	r3, [r2, #64]	; 0x40
}
    39a8:	bf00      	nop
    39aa:	b006      	add	sp, #24
    39ac:	4770      	bx	lr
    39ae:	bf00      	nop
    39b0:	00017e28 	.word	0x00017e28
    39b4:	40048000 	.word	0x40048000

000039b8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    39b8:	b084      	sub	sp, #16
    39ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    39bc:	4b0a      	ldr	r3, [pc, #40]	; (39e8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    39be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    39c0:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    39c2:	9b01      	ldr	r3, [sp, #4]
    39c4:	889b      	ldrh	r3, [r3, #4]
    39c6:	2b01      	cmp	r3, #1
    39c8:	d104      	bne.n	39d4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    39ca:	9b03      	ldr	r3, [sp, #12]
    39cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    39d0:	9303      	str	r3, [sp, #12]
    39d2:	e003      	b.n	39dc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    39d4:	9b03      	ldr	r3, [sp, #12]
    39d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    39da:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    39dc:	4a02      	ldr	r2, [pc, #8]	; (39e8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    39de:	9b03      	ldr	r3, [sp, #12]
    39e0:	6693      	str	r3, [r2, #104]	; 0x68
}
    39e2:	bf00      	nop
    39e4:	b004      	add	sp, #16
    39e6:	4770      	bx	lr
    39e8:	40048000 	.word	0x40048000

000039ec <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    39ec:	b082      	sub	sp, #8
    39ee:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    39f0:	bf00      	nop
    39f2:	b002      	add	sp, #8
    39f4:	4770      	bx	lr

000039f6 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    39f6:	b082      	sub	sp, #8
    39f8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    39fa:	bf00      	nop
    39fc:	b002      	add	sp, #8
    39fe:	4770      	bx	lr

00003a00 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3a00:	b500      	push	{lr}
    3a02:	b083      	sub	sp, #12
    3a04:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a06:	9b01      	ldr	r3, [sp, #4]
    3a08:	2b00      	cmp	r3, #0
    3a0a:	d002      	beq.n	3a12 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3a0c:	9801      	ldr	r0, [sp, #4]
    3a0e:	f000 f8d1 	bl	3bb4 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a12:	bf00      	nop
    3a14:	b003      	add	sp, #12
    3a16:	f85d fb04 	ldr.w	pc, [sp], #4

00003a1a <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3a1a:	b500      	push	{lr}
    3a1c:	b083      	sub	sp, #12
    3a1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a20:	9b01      	ldr	r3, [sp, #4]
    3a22:	2b00      	cmp	r3, #0
    3a24:	d002      	beq.n	3a2c <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3a26:	9801      	ldr	r0, [sp, #4]
    3a28:	f000 f950 	bl	3ccc <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a2c:	bf00      	nop
    3a2e:	b003      	add	sp, #12
    3a30:	f85d fb04 	ldr.w	pc, [sp], #4

00003a34 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3a34:	b500      	push	{lr}
    3a36:	b083      	sub	sp, #12
    3a38:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3a3a:	9801      	ldr	r0, [sp, #4]
    3a3c:	f000 f98e 	bl	3d5c <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3a40:	bf00      	nop
    3a42:	b003      	add	sp, #12
    3a44:	f85d fb04 	ldr.w	pc, [sp], #4

00003a48 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3a48:	b500      	push	{lr}
    3a4a:	b083      	sub	sp, #12
    3a4c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a4e:	9b01      	ldr	r3, [sp, #4]
    3a50:	2b00      	cmp	r3, #0
    3a52:	d002      	beq.n	3a5a <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3a54:	9801      	ldr	r0, [sp, #4]
    3a56:	f000 f999 	bl	3d8c <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a5a:	bf00      	nop
    3a5c:	b003      	add	sp, #12
    3a5e:	f85d fb04 	ldr.w	pc, [sp], #4

00003a62 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3a62:	b500      	push	{lr}
    3a64:	b083      	sub	sp, #12
    3a66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a68:	9b01      	ldr	r3, [sp, #4]
    3a6a:	2b00      	cmp	r3, #0
    3a6c:	d002      	beq.n	3a74 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3a6e:	9801      	ldr	r0, [sp, #4]
    3a70:	f000 f9b0 	bl	3dd4 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a74:	bf00      	nop
    3a76:	b003      	add	sp, #12
    3a78:	f85d fb04 	ldr.w	pc, [sp], #4

00003a7c <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3a7c:	b500      	push	{lr}
    3a7e:	b083      	sub	sp, #12
    3a80:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3a82:	9801      	ldr	r0, [sp, #4]
    3a84:	f000 f9ba 	bl	3dfc <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3a88:	bf00      	nop
    3a8a:	b003      	add	sp, #12
    3a8c:	f85d fb04 	ldr.w	pc, [sp], #4

00003a90 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3a90:	b500      	push	{lr}
    3a92:	b083      	sub	sp, #12
    3a94:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a96:	9b01      	ldr	r3, [sp, #4]
    3a98:	2b00      	cmp	r3, #0
    3a9a:	d002      	beq.n	3aa2 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3a9c:	9801      	ldr	r0, [sp, #4]
    3a9e:	f000 f9bd 	bl	3e1c <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3aa2:	bf00      	nop
    3aa4:	b003      	add	sp, #12
    3aa6:	f85d fb04 	ldr.w	pc, [sp], #4

00003aaa <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3aaa:	b500      	push	{lr}
    3aac:	b083      	sub	sp, #12
    3aae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ab0:	9b01      	ldr	r3, [sp, #4]
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d002      	beq.n	3abc <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3ab6:	9801      	ldr	r0, [sp, #4]
    3ab8:	f000 f9d4 	bl	3e64 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3abc:	bf00      	nop
    3abe:	b003      	add	sp, #12
    3ac0:	f85d fb04 	ldr.w	pc, [sp], #4

00003ac4 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3ac4:	b500      	push	{lr}
    3ac6:	b083      	sub	sp, #12
    3ac8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3aca:	9801      	ldr	r0, [sp, #4]
    3acc:	f000 f9de 	bl	3e8c <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3ad0:	bf00      	nop
    3ad2:	b003      	add	sp, #12
    3ad4:	f85d fb04 	ldr.w	pc, [sp], #4

00003ad8 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3ad8:	b500      	push	{lr}
    3ada:	b089      	sub	sp, #36	; 0x24
    3adc:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3ade:	2300      	movs	r3, #0
    3ae0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3ae4:	4b20      	ldr	r3, [pc, #128]	; (3b68 <SetInputSouceSytemClock+0x90>)
    3ae6:	695b      	ldr	r3, [r3, #20]
    3ae8:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3aea:	9b06      	ldr	r3, [sp, #24]
    3aec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3af0:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3af2:	9b01      	ldr	r3, [sp, #4]
    3af4:	061b      	lsls	r3, r3, #24
    3af6:	9a06      	ldr	r2, [sp, #24]
    3af8:	4313      	orrs	r3, r2
    3afa:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3afc:	4a1a      	ldr	r2, [pc, #104]	; (3b68 <SetInputSouceSytemClock+0x90>)
    3afe:	9b06      	ldr	r3, [sp, #24]
    3b00:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3b02:	aa02      	add	r2, sp, #8
    3b04:	a903      	add	r1, sp, #12
    3b06:	a804      	add	r0, sp, #16
    3b08:	f24c 3350 	movw	r3, #50000	; 0xc350
    3b0c:	f7ff f9ac 	bl	2e68 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3b10:	4b15      	ldr	r3, [pc, #84]	; (3b68 <SetInputSouceSytemClock+0x90>)
    3b12:	691b      	ldr	r3, [r3, #16]
    3b14:	0e1b      	lsrs	r3, r3, #24
    3b16:	f003 030f 	and.w	r3, r3, #15
    3b1a:	9a01      	ldr	r2, [sp, #4]
    3b1c:	429a      	cmp	r2, r3
    3b1e:	bf0c      	ite	eq
    3b20:	2301      	moveq	r3, #1
    3b22:	2300      	movne	r3, #0
    3b24:	b2db      	uxtb	r3, r3
    3b26:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3b28:	9a02      	ldr	r2, [sp, #8]
    3b2a:	a903      	add	r1, sp, #12
    3b2c:	ab04      	add	r3, sp, #16
    3b2e:	4618      	mov	r0, r3
    3b30:	f7ff f9b4 	bl	2e9c <Clock_Ip_TimeoutExpired>
    3b34:	4603      	mov	r3, r0
    3b36:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3b3a:	9b05      	ldr	r3, [sp, #20]
    3b3c:	2b00      	cmp	r3, #0
    3b3e:	d106      	bne.n	3b4e <SetInputSouceSytemClock+0x76>
    3b40:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3b44:	f083 0301 	eor.w	r3, r3, #1
    3b48:	b2db      	uxtb	r3, r3
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d1e0      	bne.n	3b10 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3b4e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3b52:	2b00      	cmp	r3, #0
    3b54:	d003      	beq.n	3b5e <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3b56:	2105      	movs	r1, #5
    3b58:	2001      	movs	r0, #1
    3b5a:	f7ff f975 	bl	2e48 <Clock_Ip_ReportClockErrors>
    }
}
    3b5e:	bf00      	nop
    3b60:	b009      	add	sp, #36	; 0x24
    3b62:	f85d fb04 	ldr.w	pc, [sp], #4
    3b66:	bf00      	nop
    3b68:	40064000 	.word	0x40064000

00003b6c <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3b6c:	b500      	push	{lr}
    3b6e:	b083      	sub	sp, #12
    3b70:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b72:	9b01      	ldr	r3, [sp, #4]
    3b74:	2b00      	cmp	r3, #0
    3b76:	d002      	beq.n	3b7e <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3b78:	9801      	ldr	r0, [sp, #4]
    3b7a:	f000 f997 	bl	3eac <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b7e:	bf00      	nop
    3b80:	b003      	add	sp, #12
    3b82:	f85d fb04 	ldr.w	pc, [sp], #4

00003b86 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3b86:	b500      	push	{lr}
    3b88:	b083      	sub	sp, #12
    3b8a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b8c:	9b01      	ldr	r3, [sp, #4]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d002      	beq.n	3b98 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3b92:	9801      	ldr	r0, [sp, #4]
    3b94:	f000 fa7e 	bl	4094 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b98:	bf00      	nop
    3b9a:	b003      	add	sp, #12
    3b9c:	f85d fb04 	ldr.w	pc, [sp], #4

00003ba0 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3ba0:	b500      	push	{lr}
    3ba2:	b083      	sub	sp, #12
    3ba4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3ba6:	9801      	ldr	r0, [sp, #4]
    3ba8:	f000 fab8 	bl	411c <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3bac:	bf00      	nop
    3bae:	b003      	add	sp, #12
    3bb0:	f85d fb04 	ldr.w	pc, [sp], #4

00003bb4 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3bb4:	b500      	push	{lr}
    3bb6:	b08b      	sub	sp, #44	; 0x2c
    3bb8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3bba:	2300      	movs	r3, #0
    3bbc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3bc0:	9b01      	ldr	r3, [sp, #4]
    3bc2:	2b00      	cmp	r3, #0
    3bc4:	d10b      	bne.n	3bde <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3bc6:	2305      	movs	r3, #5
    3bc8:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3bca:	2301      	movs	r3, #1
    3bcc:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3bd0:	2301      	movs	r3, #1
    3bd2:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3bd6:	2301      	movs	r3, #1
    3bd8:	f88d 3010 	strb.w	r3, [sp, #16]
    3bdc:	e00e      	b.n	3bfc <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3bde:	9b01      	ldr	r3, [sp, #4]
    3be0:	681b      	ldr	r3, [r3, #0]
    3be2:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3be4:	9b01      	ldr	r3, [sp, #4]
    3be6:	79db      	ldrb	r3, [r3, #7]
    3be8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3bec:	9b01      	ldr	r3, [sp, #4]
    3bee:	889b      	ldrh	r3, [r3, #4]
    3bf0:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3bf4:	9b01      	ldr	r3, [sp, #4]
    3bf6:	7a1b      	ldrb	r3, [r3, #8]
    3bf8:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3bfc:	4b32      	ldr	r3, [pc, #200]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c02:	4a31      	ldr	r2, [pc, #196]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c08:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3c0c:	4b2e      	ldr	r3, [pc, #184]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c12:	4a2d      	ldr	r2, [pc, #180]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c14:	f023 0301 	bic.w	r3, r3, #1
    3c18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3c1c:	4b2a      	ldr	r3, [pc, #168]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c22:	4a29      	ldr	r2, [pc, #164]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c24:	f023 0304 	bic.w	r3, r3, #4
    3c28:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3c2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3c30:	2b01      	cmp	r3, #1
    3c32:	d144      	bne.n	3cbe <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3c34:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3c38:	4a23      	ldr	r2, [pc, #140]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c3a:	f003 0301 	and.w	r3, r3, #1
    3c3e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3c42:	4b21      	ldr	r3, [pc, #132]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c48:	4a1f      	ldr	r2, [pc, #124]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c4a:	f043 0301 	orr.w	r3, r3, #1
    3c4e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3c52:	4b1d      	ldr	r3, [pc, #116]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3c58:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3c5c:	009b      	lsls	r3, r3, #2
    3c5e:	f003 0304 	and.w	r3, r3, #4
    3c62:	4919      	ldr	r1, [pc, #100]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c64:	4313      	orrs	r3, r2
    3c66:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c6a:	aa05      	add	r2, sp, #20
    3c6c:	a906      	add	r1, sp, #24
    3c6e:	a807      	add	r0, sp, #28
    3c70:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c74:	f7ff f8f8 	bl	2e68 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3c78:	4b13      	ldr	r3, [pc, #76]	; (3cc8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c7e:	0e1b      	lsrs	r3, r3, #24
    3c80:	f003 0301 	and.w	r3, r3, #1
    3c84:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c86:	9a05      	ldr	r2, [sp, #20]
    3c88:	a906      	add	r1, sp, #24
    3c8a:	ab07      	add	r3, sp, #28
    3c8c:	4618      	mov	r0, r3
    3c8e:	f7ff f905 	bl	2e9c <Clock_Ip_TimeoutExpired>
    3c92:	4603      	mov	r3, r0
    3c94:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3c98:	9b08      	ldr	r3, [sp, #32]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d106      	bne.n	3cac <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3c9e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3ca2:	f083 0301 	eor.w	r3, r3, #1
    3ca6:	b2db      	uxtb	r3, r3
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d1e5      	bne.n	3c78 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3cac:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d004      	beq.n	3cbe <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3cb4:	9b02      	ldr	r3, [sp, #8]
    3cb6:	4619      	mov	r1, r3
    3cb8:	2001      	movs	r0, #1
    3cba:	f7ff f8c5 	bl	2e48 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3cbe:	bf00      	nop
    3cc0:	b00b      	add	sp, #44	; 0x2c
    3cc2:	f85d fb04 	ldr.w	pc, [sp], #4
    3cc6:	bf00      	nop
    3cc8:	40064000 	.word	0x40064000

00003ccc <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ccc:	b500      	push	{lr}
    3cce:	b089      	sub	sp, #36	; 0x24
    3cd0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3cd2:	2300      	movs	r3, #0
    3cd4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3cd8:	4b1f      	ldr	r3, [pc, #124]	; (3d58 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3cda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cde:	4a1e      	ldr	r2, [pc, #120]	; (3d58 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3ce0:	f043 0301 	orr.w	r3, r3, #1
    3ce4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3ce8:	4b1b      	ldr	r3, [pc, #108]	; (3d58 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3cea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cee:	4a1a      	ldr	r2, [pc, #104]	; (3d58 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3cf0:	f043 0304 	orr.w	r3, r3, #4
    3cf4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3cf8:	aa03      	add	r2, sp, #12
    3cfa:	a904      	add	r1, sp, #16
    3cfc:	a805      	add	r0, sp, #20
    3cfe:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d02:	f7ff f8b1 	bl	2e68 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3d06:	4b14      	ldr	r3, [pc, #80]	; (3d58 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d0c:	0e1b      	lsrs	r3, r3, #24
    3d0e:	f003 0301 	and.w	r3, r3, #1
    3d12:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d14:	9a03      	ldr	r2, [sp, #12]
    3d16:	a904      	add	r1, sp, #16
    3d18:	ab05      	add	r3, sp, #20
    3d1a:	4618      	mov	r0, r3
    3d1c:	f7ff f8be 	bl	2e9c <Clock_Ip_TimeoutExpired>
    3d20:	4603      	mov	r3, r0
    3d22:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d26:	9b06      	ldr	r3, [sp, #24]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d106      	bne.n	3d3a <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3d2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d30:	f083 0301 	eor.w	r3, r3, #1
    3d34:	b2db      	uxtb	r3, r3
    3d36:	2b00      	cmp	r3, #0
    3d38:	d1e5      	bne.n	3d06 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3d3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d005      	beq.n	3d4e <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d42:	9b01      	ldr	r3, [sp, #4]
    3d44:	681b      	ldr	r3, [r3, #0]
    3d46:	4619      	mov	r1, r3
    3d48:	2001      	movs	r0, #1
    3d4a:	f7ff f87d 	bl	2e48 <Clock_Ip_ReportClockErrors>
    }
}
    3d4e:	bf00      	nop
    3d50:	b009      	add	sp, #36	; 0x24
    3d52:	f85d fb04 	ldr.w	pc, [sp], #4
    3d56:	bf00      	nop
    3d58:	40064000 	.word	0x40064000

00003d5c <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3d5c:	b082      	sub	sp, #8
    3d5e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3d60:	4b09      	ldr	r3, [pc, #36]	; (3d88 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d66:	4a08      	ldr	r2, [pc, #32]	; (3d88 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d68:	f023 0301 	bic.w	r3, r3, #1
    3d6c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d70:	4b05      	ldr	r3, [pc, #20]	; (3d88 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d76:	4a04      	ldr	r2, [pc, #16]	; (3d88 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d78:	f023 0304 	bic.w	r3, r3, #4
    3d7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3d80:	bf00      	nop
    3d82:	b002      	add	sp, #8
    3d84:	4770      	bx	lr
    3d86:	bf00      	nop
    3d88:	40064000 	.word	0x40064000

00003d8c <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d8c:	b082      	sub	sp, #8
    3d8e:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3d90:	4b0f      	ldr	r3, [pc, #60]	; (3dd0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d96:	4a0e      	ldr	r2, [pc, #56]	; (3dd0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3d9c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3da0:	4b0b      	ldr	r3, [pc, #44]	; (3dd0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3da2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3da6:	4a0a      	ldr	r2, [pc, #40]	; (3dd0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3da8:	f023 0304 	bic.w	r3, r3, #4
    3dac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3db0:	4b07      	ldr	r3, [pc, #28]	; (3dd0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3db2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3db6:	9b01      	ldr	r3, [sp, #4]
    3db8:	7a1b      	ldrb	r3, [r3, #8]
    3dba:	009b      	lsls	r3, r3, #2
    3dbc:	f003 0304 	and.w	r3, r3, #4
    3dc0:	4903      	ldr	r1, [pc, #12]	; (3dd0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3dc2:	4313      	orrs	r3, r2
    3dc4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3dc8:	bf00      	nop
    3dca:	b002      	add	sp, #8
    3dcc:	4770      	bx	lr
    3dce:	bf00      	nop
    3dd0:	40064000 	.word	0x40064000

00003dd4 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3dd4:	b082      	sub	sp, #8
    3dd6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3dd8:	9b01      	ldr	r3, [sp, #4]
    3dda:	889b      	ldrh	r3, [r3, #4]
    3ddc:	2b01      	cmp	r3, #1
    3dde:	d107      	bne.n	3df0 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3de0:	4b05      	ldr	r3, [pc, #20]	; (3df8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3de2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3de6:	4a04      	ldr	r2, [pc, #16]	; (3df8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3de8:	f043 0304 	orr.w	r3, r3, #4
    3dec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3df0:	bf00      	nop
    3df2:	b002      	add	sp, #8
    3df4:	4770      	bx	lr
    3df6:	bf00      	nop
    3df8:	40064000 	.word	0x40064000

00003dfc <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3dfc:	b082      	sub	sp, #8
    3dfe:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3e00:	4b05      	ldr	r3, [pc, #20]	; (3e18 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3e02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e06:	4a04      	ldr	r2, [pc, #16]	; (3e18 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3e08:	f023 0304 	bic.w	r3, r3, #4
    3e0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3e10:	bf00      	nop
    3e12:	b002      	add	sp, #8
    3e14:	4770      	bx	lr
    3e16:	bf00      	nop
    3e18:	40064000 	.word	0x40064000

00003e1c <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e1c:	b082      	sub	sp, #8
    3e1e:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3e20:	4b0f      	ldr	r3, [pc, #60]	; (3e60 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e26:	4a0e      	ldr	r2, [pc, #56]	; (3e60 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e2c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3e30:	4b0b      	ldr	r3, [pc, #44]	; (3e60 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e36:	4a0a      	ldr	r2, [pc, #40]	; (3e60 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e38:	f023 0302 	bic.w	r3, r3, #2
    3e3c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3e40:	4b07      	ldr	r3, [pc, #28]	; (3e60 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e42:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3e46:	9b01      	ldr	r3, [sp, #4]
    3e48:	7a5b      	ldrb	r3, [r3, #9]
    3e4a:	005b      	lsls	r3, r3, #1
    3e4c:	f003 0302 	and.w	r3, r3, #2
    3e50:	4903      	ldr	r1, [pc, #12]	; (3e60 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3e52:	4313      	orrs	r3, r2
    3e54:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3e58:	bf00      	nop
    3e5a:	b002      	add	sp, #8
    3e5c:	4770      	bx	lr
    3e5e:	bf00      	nop
    3e60:	40064000 	.word	0x40064000

00003e64 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e64:	b082      	sub	sp, #8
    3e66:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3e68:	9b01      	ldr	r3, [sp, #4]
    3e6a:	889b      	ldrh	r3, [r3, #4]
    3e6c:	2b01      	cmp	r3, #1
    3e6e:	d107      	bne.n	3e80 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3e70:	4b05      	ldr	r3, [pc, #20]	; (3e88 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e76:	4a04      	ldr	r2, [pc, #16]	; (3e88 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3e78:	f043 0302 	orr.w	r3, r3, #2
    3e7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3e80:	bf00      	nop
    3e82:	b002      	add	sp, #8
    3e84:	4770      	bx	lr
    3e86:	bf00      	nop
    3e88:	40064000 	.word	0x40064000

00003e8c <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3e8c:	b082      	sub	sp, #8
    3e8e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3e90:	4b05      	ldr	r3, [pc, #20]	; (3ea8 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3e92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e96:	4a04      	ldr	r2, [pc, #16]	; (3ea8 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3e98:	f023 0302 	bic.w	r3, r3, #2
    3e9c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3ea0:	bf00      	nop
    3ea2:	b002      	add	sp, #8
    3ea4:	4770      	bx	lr
    3ea6:	bf00      	nop
    3ea8:	40064000 	.word	0x40064000

00003eac <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3eac:	b500      	push	{lr}
    3eae:	b08b      	sub	sp, #44	; 0x2c
    3eb0:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3eb2:	9b01      	ldr	r3, [sp, #4]
    3eb4:	681a      	ldr	r2, [r3, #0]
    3eb6:	4975      	ldr	r1, [pc, #468]	; (408c <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3eb8:	4613      	mov	r3, r2
    3eba:	00db      	lsls	r3, r3, #3
    3ebc:	4413      	add	r3, r2
    3ebe:	440b      	add	r3, r1
    3ec0:	781b      	ldrb	r3, [r3, #0]
    3ec2:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3ec4:	2300      	movs	r3, #0
    3ec6:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3eca:	2300      	movs	r3, #0
    3ecc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3ed0:	4b6f      	ldr	r3, [pc, #444]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ed2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ed6:	4a6e      	ldr	r2, [pc, #440]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ed8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3edc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3ee0:	4b6b      	ldr	r3, [pc, #428]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ee2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3eea:	2b00      	cmp	r3, #0
    3eec:	d07d      	beq.n	3fea <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3eee:	9b01      	ldr	r3, [sp, #4]
    3ef0:	79db      	ldrb	r3, [r3, #7]
    3ef2:	461a      	mov	r2, r3
    3ef4:	4b66      	ldr	r3, [pc, #408]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ef6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3efa:	f003 0303 	and.w	r3, r3, #3
    3efe:	429a      	cmp	r2, r3
    3f00:	d10b      	bne.n	3f1a <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3f02:	9b01      	ldr	r3, [sp, #4]
    3f04:	799b      	ldrb	r3, [r3, #6]
    3f06:	461a      	mov	r2, r3
    3f08:	4b61      	ldr	r3, [pc, #388]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f0e:	08db      	lsrs	r3, r3, #3
    3f10:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3f14:	429a      	cmp	r2, r3
    3f16:	f000 80b4 	beq.w	4082 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3f1a:	4b5d      	ldr	r3, [pc, #372]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f20:	f003 0301 	and.w	r3, r3, #1
    3f24:	2b00      	cmp	r3, #0
    3f26:	d105      	bne.n	3f34 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3f28:	2301      	movs	r3, #1
    3f2a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3f2e:	2000      	movs	r0, #0
    3f30:	f7ff fd66 	bl	3a00 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3f34:	2002      	movs	r0, #2
    3f36:	f7ff fdcf 	bl	3ad8 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3f3a:	4b55      	ldr	r3, [pc, #340]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f3c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f40:	4a53      	ldr	r2, [pc, #332]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f42:	f023 0301 	bic.w	r3, r3, #1
    3f46:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3f4a:	9b01      	ldr	r3, [sp, #4]
    3f4c:	889b      	ldrh	r3, [r3, #4]
    3f4e:	2b01      	cmp	r3, #1
    3f50:	f040 8097 	bne.w	4082 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3f54:	9b01      	ldr	r3, [sp, #4]
    3f56:	79db      	ldrb	r3, [r3, #7]
    3f58:	4a4d      	ldr	r2, [pc, #308]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f5a:	f003 0303 	and.w	r3, r3, #3
    3f5e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3f62:	4b4b      	ldr	r3, [pc, #300]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f64:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3f68:	9b01      	ldr	r3, [sp, #4]
    3f6a:	799b      	ldrb	r3, [r3, #6]
    3f6c:	00db      	lsls	r3, r3, #3
    3f6e:	f003 0308 	and.w	r3, r3, #8
    3f72:	4313      	orrs	r3, r2
    3f74:	4a46      	ldr	r2, [pc, #280]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f76:	f043 0301 	orr.w	r3, r3, #1
    3f7a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f7e:	aa03      	add	r2, sp, #12
    3f80:	a904      	add	r1, sp, #16
    3f82:	a805      	add	r0, sp, #20
    3f84:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f88:	f7fe ff6e 	bl	2e68 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3f8c:	4b40      	ldr	r3, [pc, #256]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f92:	0e1b      	lsrs	r3, r3, #24
    3f94:	f003 0301 	and.w	r3, r3, #1
    3f98:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f9a:	9a03      	ldr	r2, [sp, #12]
    3f9c:	a904      	add	r1, sp, #16
    3f9e:	ab05      	add	r3, sp, #20
    3fa0:	4618      	mov	r0, r3
    3fa2:	f7fe ff7b 	bl	2e9c <Clock_Ip_TimeoutExpired>
    3fa6:	4603      	mov	r3, r0
    3fa8:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3fac:	9b06      	ldr	r3, [sp, #24]
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d106      	bne.n	3fc0 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3fb2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3fb6:	f083 0301 	eor.w	r3, r3, #1
    3fba:	b2db      	uxtb	r3, r3
    3fbc:	2b00      	cmp	r3, #0
    3fbe:	d1e5      	bne.n	3f8c <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3fc0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	d005      	beq.n	3fd4 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3fc8:	9b01      	ldr	r3, [sp, #4]
    3fca:	681b      	ldr	r3, [r3, #0]
    3fcc:	4619      	mov	r1, r3
    3fce:	2001      	movs	r0, #1
    3fd0:	f7fe ff3a 	bl	2e48 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3fd4:	2003      	movs	r0, #3
    3fd6:	f7ff fd7f 	bl	3ad8 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3fda:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3fde:	2b00      	cmp	r3, #0
    3fe0:	d04f      	beq.n	4082 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3fe2:	2002      	movs	r0, #2
    3fe4:	f7ff fd26 	bl	3a34 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3fe8:	e04b      	b.n	4082 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3fea:	4b29      	ldr	r3, [pc, #164]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fec:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ff0:	4a27      	ldr	r2, [pc, #156]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ff2:	f023 0301 	bic.w	r3, r3, #1
    3ff6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3ffa:	9b01      	ldr	r3, [sp, #4]
    3ffc:	889b      	ldrh	r3, [r3, #4]
    3ffe:	2b01      	cmp	r3, #1
    4000:	d13f      	bne.n	4082 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4002:	9b01      	ldr	r3, [sp, #4]
    4004:	79db      	ldrb	r3, [r3, #7]
    4006:	4a22      	ldr	r2, [pc, #136]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4008:	f003 0303 	and.w	r3, r3, #3
    400c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4010:	4b1f      	ldr	r3, [pc, #124]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4012:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4016:	9b01      	ldr	r3, [sp, #4]
    4018:	799b      	ldrb	r3, [r3, #6]
    401a:	00db      	lsls	r3, r3, #3
    401c:	f003 0308 	and.w	r3, r3, #8
    4020:	4313      	orrs	r3, r2
    4022:	4a1b      	ldr	r2, [pc, #108]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4024:	f043 0301 	orr.w	r3, r3, #1
    4028:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    402c:	aa03      	add	r2, sp, #12
    402e:	a904      	add	r1, sp, #16
    4030:	a805      	add	r0, sp, #20
    4032:	f24c 3350 	movw	r3, #50000	; 0xc350
    4036:	f7fe ff17 	bl	2e68 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    403a:	4b15      	ldr	r3, [pc, #84]	; (4090 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    403c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4040:	0e1b      	lsrs	r3, r3, #24
    4042:	f003 0301 	and.w	r3, r3, #1
    4046:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4048:	9a03      	ldr	r2, [sp, #12]
    404a:	a904      	add	r1, sp, #16
    404c:	ab05      	add	r3, sp, #20
    404e:	4618      	mov	r0, r3
    4050:	f7fe ff24 	bl	2e9c <Clock_Ip_TimeoutExpired>
    4054:	4603      	mov	r3, r0
    4056:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    405a:	9b06      	ldr	r3, [sp, #24]
    405c:	2b00      	cmp	r3, #0
    405e:	d106      	bne.n	406e <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    4060:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4064:	f083 0301 	eor.w	r3, r3, #1
    4068:	b2db      	uxtb	r3, r3
    406a:	2b00      	cmp	r3, #0
    406c:	d1e5      	bne.n	403a <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    406e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4072:	2b00      	cmp	r3, #0
    4074:	d005      	beq.n	4082 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4076:	9b01      	ldr	r3, [sp, #4]
    4078:	681b      	ldr	r3, [r3, #0]
    407a:	4619      	mov	r1, r3
    407c:	2001      	movs	r0, #1
    407e:	f7fe fee3 	bl	2e48 <Clock_Ip_ReportClockErrors>
}
    4082:	bf00      	nop
    4084:	b00b      	add	sp, #44	; 0x2c
    4086:	f85d fb04 	ldr.w	pc, [sp], #4
    408a:	bf00      	nop
    408c:	00017e28 	.word	0x00017e28
    4090:	40064000 	.word	0x40064000

00004094 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4094:	b500      	push	{lr}
    4096:	b089      	sub	sp, #36	; 0x24
    4098:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    409a:	2300      	movs	r3, #0
    409c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    40a0:	9b01      	ldr	r3, [sp, #4]
    40a2:	889b      	ldrh	r3, [r3, #4]
    40a4:	2b01      	cmp	r3, #1
    40a6:	d132      	bne.n	410e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    40a8:	4b1b      	ldr	r3, [pc, #108]	; (4118 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    40aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40ae:	4a1a      	ldr	r2, [pc, #104]	; (4118 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    40b0:	f043 0301 	orr.w	r3, r3, #1
    40b4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    40b8:	aa03      	add	r2, sp, #12
    40ba:	a904      	add	r1, sp, #16
    40bc:	a805      	add	r0, sp, #20
    40be:	f24c 3350 	movw	r3, #50000	; 0xc350
    40c2:	f7fe fed1 	bl	2e68 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    40c6:	4b14      	ldr	r3, [pc, #80]	; (4118 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    40c8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40cc:	0e1b      	lsrs	r3, r3, #24
    40ce:	f003 0301 	and.w	r3, r3, #1
    40d2:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    40d4:	9a03      	ldr	r2, [sp, #12]
    40d6:	a904      	add	r1, sp, #16
    40d8:	ab05      	add	r3, sp, #20
    40da:	4618      	mov	r0, r3
    40dc:	f7fe fede 	bl	2e9c <Clock_Ip_TimeoutExpired>
    40e0:	4603      	mov	r3, r0
    40e2:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    40e6:	9b06      	ldr	r3, [sp, #24]
    40e8:	2b00      	cmp	r3, #0
    40ea:	d106      	bne.n	40fa <Clock_Ip_EnableFirc_TrustedCall+0x66>
    40ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40f0:	f083 0301 	eor.w	r3, r3, #1
    40f4:	b2db      	uxtb	r3, r3
    40f6:	2b00      	cmp	r3, #0
    40f8:	d1e5      	bne.n	40c6 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    40fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40fe:	2b00      	cmp	r3, #0
    4100:	d005      	beq.n	410e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4102:	9b01      	ldr	r3, [sp, #4]
    4104:	681b      	ldr	r3, [r3, #0]
    4106:	4619      	mov	r1, r3
    4108:	2001      	movs	r0, #1
    410a:	f7fe fe9d 	bl	2e48 <Clock_Ip_ReportClockErrors>
        }
    }
}
    410e:	bf00      	nop
    4110:	b009      	add	sp, #36	; 0x24
    4112:	f85d fb04 	ldr.w	pc, [sp], #4
    4116:	bf00      	nop
    4118:	40064000 	.word	0x40064000

0000411c <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    411c:	b082      	sub	sp, #8
    411e:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4120:	4b05      	ldr	r3, [pc, #20]	; (4138 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4122:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4126:	4a04      	ldr	r2, [pc, #16]	; (4138 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4128:	f023 0301 	bic.w	r3, r3, #1
    412c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4130:	bf00      	nop
    4132:	b002      	add	sp, #8
    4134:	4770      	bx	lr
    4136:	bf00      	nop
    4138:	40064000 	.word	0x40064000

0000413c <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    413c:	b082      	sub	sp, #8
    413e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4140:	bf00      	nop
    4142:	b002      	add	sp, #8
    4144:	4770      	bx	lr

00004146 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4146:	b082      	sub	sp, #8
    4148:	9001      	str	r0, [sp, #4]
    414a:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    414c:	bf00      	nop
    414e:	b002      	add	sp, #8
    4150:	4770      	bx	lr

00004152 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4152:	b082      	sub	sp, #8
    4154:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4156:	bf00      	nop
    4158:	b002      	add	sp, #8
    415a:	4770      	bx	lr

0000415c <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    415c:	b082      	sub	sp, #8
    415e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4160:	bf00      	nop
    4162:	b002      	add	sp, #8
    4164:	4770      	bx	lr

00004166 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4166:	b082      	sub	sp, #8
    4168:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    416a:	2302      	movs	r3, #2
}
    416c:	4618      	mov	r0, r3
    416e:	b002      	add	sp, #8
    4170:	4770      	bx	lr

00004172 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4172:	b082      	sub	sp, #8
    4174:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4176:	bf00      	nop
    4178:	b002      	add	sp, #8
    417a:	4770      	bx	lr

0000417c <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    417c:	b500      	push	{lr}
    417e:	b083      	sub	sp, #12
    4180:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4182:	9b01      	ldr	r3, [sp, #4]
    4184:	2b00      	cmp	r3, #0
    4186:	d002      	beq.n	418e <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4188:	9801      	ldr	r0, [sp, #4]
    418a:	f000 f870 	bl	426e <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    418e:	bf00      	nop
    4190:	b003      	add	sp, #12
    4192:	f85d fb04 	ldr.w	pc, [sp], #4

00004196 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4196:	b500      	push	{lr}
    4198:	b083      	sub	sp, #12
    419a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    419c:	9b01      	ldr	r3, [sp, #4]
    419e:	2b00      	cmp	r3, #0
    41a0:	d002      	beq.n	41a8 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    41a2:	9801      	ldr	r0, [sp, #4]
    41a4:	f000 f89a 	bl	42dc <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41a8:	bf00      	nop
    41aa:	b003      	add	sp, #12
    41ac:	f85d fb04 	ldr.w	pc, [sp], #4

000041b0 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    41b0:	b500      	push	{lr}
    41b2:	b089      	sub	sp, #36	; 0x24
    41b4:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    41b6:	2301      	movs	r3, #1
    41b8:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    41ba:	2300      	movs	r3, #0
    41bc:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    41c0:	4b1e      	ldr	r3, [pc, #120]	; (423c <Clock_Ip_CompleteSpll+0x8c>)
    41c2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    41c6:	f003 0301 	and.w	r3, r3, #1
    41ca:	2b00      	cmp	r3, #0
    41cc:	d02f      	beq.n	422e <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    41ce:	aa02      	add	r2, sp, #8
    41d0:	a903      	add	r1, sp, #12
    41d2:	a804      	add	r0, sp, #16
    41d4:	f24c 3350 	movw	r3, #50000	; 0xc350
    41d8:	f7fe fe46 	bl	2e68 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    41dc:	4b17      	ldr	r3, [pc, #92]	; (423c <Clock_Ip_CompleteSpll+0x8c>)
    41de:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    41e2:	0e1b      	lsrs	r3, r3, #24
    41e4:	f003 0301 	and.w	r3, r3, #1
    41e8:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    41ea:	9a02      	ldr	r2, [sp, #8]
    41ec:	a903      	add	r1, sp, #12
    41ee:	ab04      	add	r3, sp, #16
    41f0:	4618      	mov	r0, r3
    41f2:	f7fe fe53 	bl	2e9c <Clock_Ip_TimeoutExpired>
    41f6:	4603      	mov	r3, r0
    41f8:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    41fc:	9b05      	ldr	r3, [sp, #20]
    41fe:	2b00      	cmp	r3, #0
    4200:	d106      	bne.n	4210 <Clock_Ip_CompleteSpll+0x60>
    4202:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4206:	f083 0301 	eor.w	r3, r3, #1
    420a:	b2db      	uxtb	r3, r3
    420c:	2b00      	cmp	r3, #0
    420e:	d1e5      	bne.n	41dc <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4210:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4214:	f083 0301 	eor.w	r3, r3, #1
    4218:	b2db      	uxtb	r3, r3
    421a:	2b00      	cmp	r3, #0
    421c:	d002      	beq.n	4224 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    421e:	2302      	movs	r3, #2
    4220:	9307      	str	r3, [sp, #28]
    4222:	e006      	b.n	4232 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4224:	9901      	ldr	r1, [sp, #4]
    4226:	2001      	movs	r0, #1
    4228:	f7fe fe0e 	bl	2e48 <Clock_Ip_ReportClockErrors>
    422c:	e001      	b.n	4232 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    422e:	2300      	movs	r3, #0
    4230:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4232:	9b07      	ldr	r3, [sp, #28]
}
    4234:	4618      	mov	r0, r3
    4236:	b009      	add	sp, #36	; 0x24
    4238:	f85d fb04 	ldr.w	pc, [sp], #4
    423c:	40064000 	.word	0x40064000

00004240 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4240:	b500      	push	{lr}
    4242:	b083      	sub	sp, #12
    4244:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4246:	9801      	ldr	r0, [sp, #4]
    4248:	f000 f886 	bl	4358 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    424c:	bf00      	nop
    424e:	b003      	add	sp, #12
    4250:	f85d fb04 	ldr.w	pc, [sp], #4

00004254 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4254:	b500      	push	{lr}
    4256:	b083      	sub	sp, #12
    4258:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    425a:	9b01      	ldr	r3, [sp, #4]
    425c:	2b00      	cmp	r3, #0
    425e:	d002      	beq.n	4266 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4260:	9801      	ldr	r0, [sp, #4]
    4262:	f000 f891 	bl	4388 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4266:	bf00      	nop
    4268:	b003      	add	sp, #12
    426a:	f85d fb04 	ldr.w	pc, [sp], #4

0000426e <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    426e:	b082      	sub	sp, #8
    4270:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4272:	4b19      	ldr	r3, [pc, #100]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4274:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4278:	4a17      	ldr	r2, [pc, #92]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    427a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    427e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4282:	4b15      	ldr	r3, [pc, #84]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4284:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4288:	4a13      	ldr	r2, [pc, #76]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    428a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    428e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4292:	4b11      	ldr	r3, [pc, #68]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4294:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4298:	4a0f      	ldr	r2, [pc, #60]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    429a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    429e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    42a2:	4b0d      	ldr	r3, [pc, #52]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42a4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42a8:	4a0b      	ldr	r2, [pc, #44]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42aa:	f023 0301 	bic.w	r3, r3, #1
    42ae:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    42b2:	4b09      	ldr	r3, [pc, #36]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42b4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    42b8:	4a07      	ldr	r2, [pc, #28]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    42be:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    42c2:	4b05      	ldr	r3, [pc, #20]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42c4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    42c8:	4a03      	ldr	r2, [pc, #12]	; (42d8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    42ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    42ce:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    42d2:	bf00      	nop
    42d4:	b002      	add	sp, #8
    42d6:	4770      	bx	lr
    42d8:	40064000 	.word	0x40064000

000042dc <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    42dc:	b082      	sub	sp, #8
    42de:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    42e0:	9b01      	ldr	r3, [sp, #4]
    42e2:	889b      	ldrh	r3, [r3, #4]
    42e4:	2b01      	cmp	r3, #1
    42e6:	d12f      	bne.n	4348 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    42e8:	4b1a      	ldr	r3, [pc, #104]	; (4354 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    42ea:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    42ee:	9b01      	ldr	r3, [sp, #4]
    42f0:	7b5b      	ldrb	r3, [r3, #13]
    42f2:	3b01      	subs	r3, #1
    42f4:	021b      	lsls	r3, r3, #8
    42f6:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    42fa:	9b01      	ldr	r3, [sp, #4]
    42fc:	7d1b      	ldrb	r3, [r3, #20]
    42fe:	3b10      	subs	r3, #16
    4300:	041b      	lsls	r3, r3, #16
    4302:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4306:	430b      	orrs	r3, r1
    4308:	4912      	ldr	r1, [pc, #72]	; (4354 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    430a:	4313      	orrs	r3, r2
    430c:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4310:	9b01      	ldr	r3, [sp, #4]
    4312:	7fdb      	ldrb	r3, [r3, #31]
    4314:	2b02      	cmp	r3, #2
    4316:	d011      	beq.n	433c <Clock_Ip_SetSpll_TrustedCall+0x60>
    4318:	2b02      	cmp	r3, #2
    431a:	dc17      	bgt.n	434c <Clock_Ip_SetSpll_TrustedCall+0x70>
    431c:	2b00      	cmp	r3, #0
    431e:	d002      	beq.n	4326 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4320:	2b01      	cmp	r3, #1
    4322:	d005      	beq.n	4330 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4324:	e012      	b.n	434c <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4326:	4b0b      	ldr	r3, [pc, #44]	; (4354 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4328:	2200      	movs	r2, #0
    432a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    432e:	e00e      	b.n	434e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4330:	4b08      	ldr	r3, [pc, #32]	; (4354 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4332:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4336:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    433a:	e008      	b.n	434e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    433c:	4b05      	ldr	r3, [pc, #20]	; (4354 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    433e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4342:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4346:	e002      	b.n	434e <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4348:	bf00      	nop
    434a:	e000      	b.n	434e <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    434c:	bf00      	nop
}
    434e:	bf00      	nop
    4350:	b002      	add	sp, #8
    4352:	4770      	bx	lr
    4354:	40064000 	.word	0x40064000

00004358 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4358:	b082      	sub	sp, #8
    435a:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    435c:	4b09      	ldr	r3, [pc, #36]	; (4384 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    435e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4362:	4a08      	ldr	r2, [pc, #32]	; (4384 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4364:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4368:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    436c:	4b05      	ldr	r3, [pc, #20]	; (4384 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    436e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4372:	4a04      	ldr	r2, [pc, #16]	; (4384 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4374:	f023 0301 	bic.w	r3, r3, #1
    4378:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    437c:	bf00      	nop
    437e:	b002      	add	sp, #8
    4380:	4770      	bx	lr
    4382:	bf00      	nop
    4384:	40064000 	.word	0x40064000

00004388 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4388:	b082      	sub	sp, #8
    438a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    438c:	9b01      	ldr	r3, [sp, #4]
    438e:	889b      	ldrh	r3, [r3, #4]
    4390:	2b01      	cmp	r3, #1
    4392:	d107      	bne.n	43a4 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4394:	4b05      	ldr	r3, [pc, #20]	; (43ac <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4396:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    439a:	4a04      	ldr	r2, [pc, #16]	; (43ac <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    439c:	f043 0301 	orr.w	r3, r3, #1
    43a0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    43a4:	bf00      	nop
    43a6:	b002      	add	sp, #8
    43a8:	4770      	bx	lr
    43aa:	bf00      	nop
    43ac:	40064000 	.word	0x40064000

000043b0 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    43b0:	b082      	sub	sp, #8
    43b2:	9001      	str	r0, [sp, #4]
    43b4:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    43b6:	bf00      	nop
    43b8:	b002      	add	sp, #8
    43ba:	4770      	bx	lr

000043bc <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    43bc:	b082      	sub	sp, #8
    43be:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    43c0:	bf00      	nop
    43c2:	b002      	add	sp, #8
    43c4:	4770      	bx	lr

000043c6 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    43c6:	b500      	push	{lr}
    43c8:	b083      	sub	sp, #12
    43ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43cc:	9b01      	ldr	r3, [sp, #4]
    43ce:	2b00      	cmp	r3, #0
    43d0:	d002      	beq.n	43d8 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    43d2:	9801      	ldr	r0, [sp, #4]
    43d4:	f000 f8ee 	bl	45b4 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43d8:	bf00      	nop
    43da:	b003      	add	sp, #12
    43dc:	f85d fb04 	ldr.w	pc, [sp], #4

000043e0 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    43e0:	b500      	push	{lr}
    43e2:	b083      	sub	sp, #12
    43e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43e6:	9b01      	ldr	r3, [sp, #4]
    43e8:	2b00      	cmp	r3, #0
    43ea:	d002      	beq.n	43f2 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    43ec:	9801      	ldr	r0, [sp, #4]
    43ee:	f000 f8ff 	bl	45f0 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43f2:	bf00      	nop
    43f4:	b003      	add	sp, #12
    43f6:	f85d fb04 	ldr.w	pc, [sp], #4

000043fa <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    43fa:	b500      	push	{lr}
    43fc:	b083      	sub	sp, #12
    43fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4400:	9b01      	ldr	r3, [sp, #4]
    4402:	2b00      	cmp	r3, #0
    4404:	d002      	beq.n	440c <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4406:	9801      	ldr	r0, [sp, #4]
    4408:	f000 f912 	bl	4630 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    440c:	bf00      	nop
    440e:	b003      	add	sp, #12
    4410:	f85d fb04 	ldr.w	pc, [sp], #4

00004414 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4414:	b500      	push	{lr}
    4416:	b083      	sub	sp, #12
    4418:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    441a:	9b01      	ldr	r3, [sp, #4]
    441c:	2b00      	cmp	r3, #0
    441e:	d002      	beq.n	4426 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4420:	9801      	ldr	r0, [sp, #4]
    4422:	f000 f925 	bl	4670 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4426:	bf00      	nop
    4428:	b003      	add	sp, #12
    442a:	f85d fb04 	ldr.w	pc, [sp], #4

0000442e <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    442e:	b500      	push	{lr}
    4430:	b083      	sub	sp, #12
    4432:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4434:	9b01      	ldr	r3, [sp, #4]
    4436:	2b00      	cmp	r3, #0
    4438:	d002      	beq.n	4440 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    443a:	9801      	ldr	r0, [sp, #4]
    443c:	f000 f936 	bl	46ac <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4440:	bf00      	nop
    4442:	b003      	add	sp, #12
    4444:	f85d fb04 	ldr.w	pc, [sp], #4

00004448 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4448:	b500      	push	{lr}
    444a:	b083      	sub	sp, #12
    444c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    444e:	9b01      	ldr	r3, [sp, #4]
    4450:	2b00      	cmp	r3, #0
    4452:	d002      	beq.n	445a <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4454:	9801      	ldr	r0, [sp, #4]
    4456:	f000 f949 	bl	46ec <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    445a:	bf00      	nop
    445c:	b003      	add	sp, #12
    445e:	f85d fb04 	ldr.w	pc, [sp], #4

00004462 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4462:	b500      	push	{lr}
    4464:	b083      	sub	sp, #12
    4466:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4468:	9b01      	ldr	r3, [sp, #4]
    446a:	2b00      	cmp	r3, #0
    446c:	d002      	beq.n	4474 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    446e:	9801      	ldr	r0, [sp, #4]
    4470:	f000 f958 	bl	4724 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4474:	bf00      	nop
    4476:	b003      	add	sp, #12
    4478:	f85d fb04 	ldr.w	pc, [sp], #4

0000447c <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    447c:	b500      	push	{lr}
    447e:	b083      	sub	sp, #12
    4480:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4482:	9b01      	ldr	r3, [sp, #4]
    4484:	2b00      	cmp	r3, #0
    4486:	d002      	beq.n	448e <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4488:	9801      	ldr	r0, [sp, #4]
    448a:	f000 f969 	bl	4760 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    448e:	bf00      	nop
    4490:	b003      	add	sp, #12
    4492:	f85d fb04 	ldr.w	pc, [sp], #4

00004496 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4496:	b500      	push	{lr}
    4498:	b083      	sub	sp, #12
    449a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    449c:	9b01      	ldr	r3, [sp, #4]
    449e:	2b00      	cmp	r3, #0
    44a0:	d002      	beq.n	44a8 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    44a2:	9801      	ldr	r0, [sp, #4]
    44a4:	f000 f978 	bl	4798 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44a8:	bf00      	nop
    44aa:	b003      	add	sp, #12
    44ac:	f85d fb04 	ldr.w	pc, [sp], #4

000044b0 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    44b0:	b500      	push	{lr}
    44b2:	b083      	sub	sp, #12
    44b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44b6:	9b01      	ldr	r3, [sp, #4]
    44b8:	2b00      	cmp	r3, #0
    44ba:	d002      	beq.n	44c2 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    44bc:	9801      	ldr	r0, [sp, #4]
    44be:	f000 f989 	bl	47d4 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44c2:	bf00      	nop
    44c4:	b003      	add	sp, #12
    44c6:	f85d fb04 	ldr.w	pc, [sp], #4

000044ca <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    44ca:	b500      	push	{lr}
    44cc:	b083      	sub	sp, #12
    44ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44d0:	9b01      	ldr	r3, [sp, #4]
    44d2:	2b00      	cmp	r3, #0
    44d4:	d002      	beq.n	44dc <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    44d6:	9801      	ldr	r0, [sp, #4]
    44d8:	f000 f998 	bl	480c <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44dc:	bf00      	nop
    44de:	b003      	add	sp, #12
    44e0:	f85d fb04 	ldr.w	pc, [sp], #4

000044e4 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    44e4:	b500      	push	{lr}
    44e6:	b083      	sub	sp, #12
    44e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44ea:	9b01      	ldr	r3, [sp, #4]
    44ec:	2b00      	cmp	r3, #0
    44ee:	d002      	beq.n	44f6 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    44f0:	9801      	ldr	r0, [sp, #4]
    44f2:	f000 f9a9 	bl	4848 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44f6:	bf00      	nop
    44f8:	b003      	add	sp, #12
    44fa:	f85d fb04 	ldr.w	pc, [sp], #4

000044fe <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    44fe:	b500      	push	{lr}
    4500:	b083      	sub	sp, #12
    4502:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4504:	9b01      	ldr	r3, [sp, #4]
    4506:	2b00      	cmp	r3, #0
    4508:	d002      	beq.n	4510 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    450a:	9801      	ldr	r0, [sp, #4]
    450c:	f000 f9e6 	bl	48dc <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4510:	bf00      	nop
    4512:	b003      	add	sp, #12
    4514:	f85d fb04 	ldr.w	pc, [sp], #4

00004518 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4518:	b500      	push	{lr}
    451a:	b083      	sub	sp, #12
    451c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    451e:	9b01      	ldr	r3, [sp, #4]
    4520:	2b00      	cmp	r3, #0
    4522:	d002      	beq.n	452a <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4524:	9801      	ldr	r0, [sp, #4]
    4526:	f000 fa25 	bl	4974 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    452a:	bf00      	nop
    452c:	b003      	add	sp, #12
    452e:	f85d fb04 	ldr.w	pc, [sp], #4

00004532 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4532:	b500      	push	{lr}
    4534:	b083      	sub	sp, #12
    4536:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4538:	9b01      	ldr	r3, [sp, #4]
    453a:	2b00      	cmp	r3, #0
    453c:	d002      	beq.n	4544 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    453e:	9801      	ldr	r0, [sp, #4]
    4540:	f000 fa2a 	bl	4998 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4544:	bf00      	nop
    4546:	b003      	add	sp, #12
    4548:	f85d fb04 	ldr.w	pc, [sp], #4

0000454c <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    454c:	b500      	push	{lr}
    454e:	b083      	sub	sp, #12
    4550:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4552:	9b01      	ldr	r3, [sp, #4]
    4554:	2b00      	cmp	r3, #0
    4556:	d002      	beq.n	455e <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4558:	9801      	ldr	r0, [sp, #4]
    455a:	f000 fa3b 	bl	49d4 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    455e:	bf00      	nop
    4560:	b003      	add	sp, #12
    4562:	f85d fb04 	ldr.w	pc, [sp], #4

00004566 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4566:	b500      	push	{lr}
    4568:	b083      	sub	sp, #12
    456a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    456c:	9b01      	ldr	r3, [sp, #4]
    456e:	2b00      	cmp	r3, #0
    4570:	d002      	beq.n	4578 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4572:	9801      	ldr	r0, [sp, #4]
    4574:	f000 fa56 	bl	4a24 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4578:	bf00      	nop
    457a:	b003      	add	sp, #12
    457c:	f85d fb04 	ldr.w	pc, [sp], #4

00004580 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4580:	b500      	push	{lr}
    4582:	b083      	sub	sp, #12
    4584:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4586:	9b01      	ldr	r3, [sp, #4]
    4588:	2b00      	cmp	r3, #0
    458a:	d002      	beq.n	4592 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    458c:	9801      	ldr	r0, [sp, #4]
    458e:	f000 fa79 	bl	4a84 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4592:	bf00      	nop
    4594:	b003      	add	sp, #12
    4596:	f85d fb04 	ldr.w	pc, [sp], #4

0000459a <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    459a:	b500      	push	{lr}
    459c:	b083      	sub	sp, #12
    459e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45a0:	9b01      	ldr	r3, [sp, #4]
    45a2:	2b00      	cmp	r3, #0
    45a4:	d002      	beq.n	45ac <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    45a6:	9801      	ldr	r0, [sp, #4]
    45a8:	f000 fa8a 	bl	4ac0 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45ac:	bf00      	nop
    45ae:	b003      	add	sp, #12
    45b0:	f85d fb04 	ldr.w	pc, [sp], #4

000045b4 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45b4:	b084      	sub	sp, #16
    45b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45b8:	4b0b      	ldr	r3, [pc, #44]	; (45e8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    45ba:	795b      	ldrb	r3, [r3, #5]
    45bc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    45be:	4b0b      	ldr	r3, [pc, #44]	; (45ec <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    45c0:	695b      	ldr	r3, [r3, #20]
    45c2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    45c4:	9b02      	ldr	r3, [sp, #8]
    45c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    45ca:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    45cc:	9b03      	ldr	r3, [sp, #12]
    45ce:	061b      	lsls	r3, r3, #24
    45d0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    45d4:	9a02      	ldr	r2, [sp, #8]
    45d6:	4313      	orrs	r3, r2
    45d8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    45da:	4a04      	ldr	r2, [pc, #16]	; (45ec <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    45dc:	9b02      	ldr	r3, [sp, #8]
    45de:	6153      	str	r3, [r2, #20]
}
    45e0:	bf00      	nop
    45e2:	b004      	add	sp, #16
    45e4:	4770      	bx	lr
    45e6:	bf00      	nop
    45e8:	00018190 	.word	0x00018190
    45ec:	40064000 	.word	0x40064000

000045f0 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45f0:	b084      	sub	sp, #16
    45f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45f4:	9b01      	ldr	r3, [sp, #4]
    45f6:	685b      	ldr	r3, [r3, #4]
    45f8:	4a0b      	ldr	r2, [pc, #44]	; (4628 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    45fa:	5cd3      	ldrb	r3, [r2, r3]
    45fc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    45fe:	4b0b      	ldr	r3, [pc, #44]	; (462c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4600:	695b      	ldr	r3, [r3, #20]
    4602:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4604:	9b02      	ldr	r3, [sp, #8]
    4606:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    460a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    460c:	9b03      	ldr	r3, [sp, #12]
    460e:	061b      	lsls	r3, r3, #24
    4610:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4614:	9a02      	ldr	r2, [sp, #8]
    4616:	4313      	orrs	r3, r2
    4618:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    461a:	4a04      	ldr	r2, [pc, #16]	; (462c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    461c:	9b02      	ldr	r3, [sp, #8]
    461e:	6153      	str	r3, [r2, #20]
}
    4620:	bf00      	nop
    4622:	b004      	add	sp, #16
    4624:	4770      	bx	lr
    4626:	bf00      	nop
    4628:	00018190 	.word	0x00018190
    462c:	40064000 	.word	0x40064000

00004630 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4630:	b084      	sub	sp, #16
    4632:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4634:	9b01      	ldr	r3, [sp, #4]
    4636:	685b      	ldr	r3, [r3, #4]
    4638:	4a0b      	ldr	r2, [pc, #44]	; (4668 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    463a:	5cd3      	ldrb	r3, [r2, r3]
    463c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    463e:	4b0b      	ldr	r3, [pc, #44]	; (466c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4640:	699b      	ldr	r3, [r3, #24]
    4642:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4644:	9b02      	ldr	r3, [sp, #8]
    4646:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    464a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    464c:	9b03      	ldr	r3, [sp, #12]
    464e:	061b      	lsls	r3, r3, #24
    4650:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4654:	9a02      	ldr	r2, [sp, #8]
    4656:	4313      	orrs	r3, r2
    4658:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    465a:	4a04      	ldr	r2, [pc, #16]	; (466c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    465c:	9b02      	ldr	r3, [sp, #8]
    465e:	6193      	str	r3, [r2, #24]
}
    4660:	bf00      	nop
    4662:	b004      	add	sp, #16
    4664:	4770      	bx	lr
    4666:	bf00      	nop
    4668:	00018190 	.word	0x00018190
    466c:	40064000 	.word	0x40064000

00004670 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4670:	b084      	sub	sp, #16
    4672:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4674:	4b0b      	ldr	r3, [pc, #44]	; (46a4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4676:	795b      	ldrb	r3, [r3, #5]
    4678:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    467a:	4b0b      	ldr	r3, [pc, #44]	; (46a8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    467c:	69db      	ldr	r3, [r3, #28]
    467e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4680:	9b02      	ldr	r3, [sp, #8]
    4682:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4686:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4688:	9b03      	ldr	r3, [sp, #12]
    468a:	061b      	lsls	r3, r3, #24
    468c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4690:	9a02      	ldr	r2, [sp, #8]
    4692:	4313      	orrs	r3, r2
    4694:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4696:	4a04      	ldr	r2, [pc, #16]	; (46a8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4698:	9b02      	ldr	r3, [sp, #8]
    469a:	61d3      	str	r3, [r2, #28]
}
    469c:	bf00      	nop
    469e:	b004      	add	sp, #16
    46a0:	4770      	bx	lr
    46a2:	bf00      	nop
    46a4:	00018190 	.word	0x00018190
    46a8:	40064000 	.word	0x40064000

000046ac <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46ac:	b084      	sub	sp, #16
    46ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46b0:	9b01      	ldr	r3, [sp, #4]
    46b2:	685b      	ldr	r3, [r3, #4]
    46b4:	4a0b      	ldr	r2, [pc, #44]	; (46e4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    46b6:	5cd3      	ldrb	r3, [r2, r3]
    46b8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    46ba:	4b0b      	ldr	r3, [pc, #44]	; (46e8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    46bc:	69db      	ldr	r3, [r3, #28]
    46be:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    46c0:	9b02      	ldr	r3, [sp, #8]
    46c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    46c6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    46c8:	9b03      	ldr	r3, [sp, #12]
    46ca:	061b      	lsls	r3, r3, #24
    46cc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    46d0:	9a02      	ldr	r2, [sp, #8]
    46d2:	4313      	orrs	r3, r2
    46d4:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    46d6:	4a04      	ldr	r2, [pc, #16]	; (46e8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    46d8:	9b02      	ldr	r3, [sp, #8]
    46da:	61d3      	str	r3, [r2, #28]
}
    46dc:	bf00      	nop
    46de:	b004      	add	sp, #16
    46e0:	4770      	bx	lr
    46e2:	bf00      	nop
    46e4:	00018190 	.word	0x00018190
    46e8:	40064000 	.word	0x40064000

000046ec <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46ec:	b084      	sub	sp, #16
    46ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46f0:	4b0a      	ldr	r3, [pc, #40]	; (471c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    46f2:	7b9b      	ldrb	r3, [r3, #14]
    46f4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    46f6:	4b0a      	ldr	r3, [pc, #40]	; (4720 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    46f8:	691b      	ldr	r3, [r3, #16]
    46fa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    46fc:	9b02      	ldr	r3, [sp, #8]
    46fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4702:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4704:	9b03      	ldr	r3, [sp, #12]
    4706:	011b      	lsls	r3, r3, #4
    4708:	9a02      	ldr	r2, [sp, #8]
    470a:	4313      	orrs	r3, r2
    470c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    470e:	4a04      	ldr	r2, [pc, #16]	; (4720 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4710:	9b02      	ldr	r3, [sp, #8]
    4712:	6113      	str	r3, [r2, #16]
}
    4714:	bf00      	nop
    4716:	b004      	add	sp, #16
    4718:	4770      	bx	lr
    471a:	bf00      	nop
    471c:	00018138 	.word	0x00018138
    4720:	40048000 	.word	0x40048000

00004724 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4724:	b084      	sub	sp, #16
    4726:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4728:	9b01      	ldr	r3, [sp, #4]
    472a:	685b      	ldr	r3, [r3, #4]
    472c:	4a0a      	ldr	r2, [pc, #40]	; (4758 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    472e:	5cd3      	ldrb	r3, [r2, r3]
    4730:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4732:	4b0a      	ldr	r3, [pc, #40]	; (475c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4734:	691b      	ldr	r3, [r3, #16]
    4736:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4738:	9b02      	ldr	r3, [sp, #8]
    473a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    473e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4740:	9b03      	ldr	r3, [sp, #12]
    4742:	011b      	lsls	r3, r3, #4
    4744:	9a02      	ldr	r2, [sp, #8]
    4746:	4313      	orrs	r3, r2
    4748:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    474a:	4a04      	ldr	r2, [pc, #16]	; (475c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    474c:	9b02      	ldr	r3, [sp, #8]
    474e:	6113      	str	r3, [r2, #16]
}
    4750:	bf00      	nop
    4752:	b004      	add	sp, #16
    4754:	4770      	bx	lr
    4756:	bf00      	nop
    4758:	00018138 	.word	0x00018138
    475c:	40048000 	.word	0x40048000

00004760 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4760:	b084      	sub	sp, #16
    4762:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4764:	4b0a      	ldr	r3, [pc, #40]	; (4790 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4766:	785b      	ldrb	r3, [r3, #1]
    4768:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    476a:	4b0a      	ldr	r3, [pc, #40]	; (4794 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    476c:	691b      	ldr	r3, [r3, #16]
    476e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4770:	9b02      	ldr	r3, [sp, #8]
    4772:	f023 030c 	bic.w	r3, r3, #12
    4776:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4778:	9b03      	ldr	r3, [sp, #12]
    477a:	009b      	lsls	r3, r3, #2
    477c:	9a02      	ldr	r2, [sp, #8]
    477e:	4313      	orrs	r3, r2
    4780:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4782:	4a04      	ldr	r2, [pc, #16]	; (4794 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4784:	9b02      	ldr	r3, [sp, #8]
    4786:	6113      	str	r3, [r2, #16]
}
    4788:	bf00      	nop
    478a:	b004      	add	sp, #16
    478c:	4770      	bx	lr
    478e:	bf00      	nop
    4790:	000181f0 	.word	0x000181f0
    4794:	40048000 	.word	0x40048000

00004798 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4798:	b084      	sub	sp, #16
    479a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    479c:	9b01      	ldr	r3, [sp, #4]
    479e:	685b      	ldr	r3, [r3, #4]
    47a0:	4a0a      	ldr	r2, [pc, #40]	; (47cc <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    47a2:	5cd3      	ldrb	r3, [r2, r3]
    47a4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    47a6:	4b0a      	ldr	r3, [pc, #40]	; (47d0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    47a8:	691b      	ldr	r3, [r3, #16]
    47aa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    47ac:	9b02      	ldr	r3, [sp, #8]
    47ae:	f023 030c 	bic.w	r3, r3, #12
    47b2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    47b4:	9b03      	ldr	r3, [sp, #12]
    47b6:	009b      	lsls	r3, r3, #2
    47b8:	9a02      	ldr	r2, [sp, #8]
    47ba:	4313      	orrs	r3, r2
    47bc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    47be:	4a04      	ldr	r2, [pc, #16]	; (47d0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    47c0:	9b02      	ldr	r3, [sp, #8]
    47c2:	6113      	str	r3, [r2, #16]
}
    47c4:	bf00      	nop
    47c6:	b004      	add	sp, #16
    47c8:	4770      	bx	lr
    47ca:	bf00      	nop
    47cc:	000181f0 	.word	0x000181f0
    47d0:	40048000 	.word	0x40048000

000047d4 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47d4:	b084      	sub	sp, #16
    47d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47d8:	4b0a      	ldr	r3, [pc, #40]	; (4804 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    47da:	795b      	ldrb	r3, [r3, #5]
    47dc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    47de:	4b0a      	ldr	r3, [pc, #40]	; (4808 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    47e0:	6a1b      	ldr	r3, [r3, #32]
    47e2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    47e4:	9b02      	ldr	r3, [sp, #8]
    47e6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    47ea:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    47ec:	9b03      	ldr	r3, [sp, #12]
    47ee:	061b      	lsls	r3, r3, #24
    47f0:	9a02      	ldr	r2, [sp, #8]
    47f2:	4313      	orrs	r3, r2
    47f4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    47f6:	4a04      	ldr	r2, [pc, #16]	; (4808 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    47f8:	9b02      	ldr	r3, [sp, #8]
    47fa:	6213      	str	r3, [r2, #32]
}
    47fc:	bf00      	nop
    47fe:	b004      	add	sp, #16
    4800:	4770      	bx	lr
    4802:	bf00      	nop
    4804:	00018190 	.word	0x00018190
    4808:	40064000 	.word	0x40064000

0000480c <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    480c:	b084      	sub	sp, #16
    480e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4810:	9b01      	ldr	r3, [sp, #4]
    4812:	685b      	ldr	r3, [r3, #4]
    4814:	4a0a      	ldr	r2, [pc, #40]	; (4840 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4816:	5cd3      	ldrb	r3, [r2, r3]
    4818:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    481a:	4b0a      	ldr	r3, [pc, #40]	; (4844 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    481c:	6a1b      	ldr	r3, [r3, #32]
    481e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4820:	9b02      	ldr	r3, [sp, #8]
    4822:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4826:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4828:	9b03      	ldr	r3, [sp, #12]
    482a:	061b      	lsls	r3, r3, #24
    482c:	9a02      	ldr	r2, [sp, #8]
    482e:	4313      	orrs	r3, r2
    4830:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4832:	4a04      	ldr	r2, [pc, #16]	; (4844 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4834:	9b02      	ldr	r3, [sp, #8]
    4836:	6213      	str	r3, [r2, #32]
}
    4838:	bf00      	nop
    483a:	b004      	add	sp, #16
    483c:	4770      	bx	lr
    483e:	bf00      	nop
    4840:	00018190 	.word	0x00018190
    4844:	40064000 	.word	0x40064000

00004848 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4848:	b086      	sub	sp, #24
    484a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    484c:	4b20      	ldr	r3, [pc, #128]	; (48d0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    484e:	795b      	ldrb	r3, [r3, #5]
    4850:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4852:	9b01      	ldr	r3, [sp, #4]
    4854:	681a      	ldr	r2, [r3, #0]
    4856:	491f      	ldr	r1, [pc, #124]	; (48d4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4858:	4613      	mov	r3, r2
    485a:	00db      	lsls	r3, r3, #3
    485c:	4413      	add	r3, r2
    485e:	440b      	add	r3, r1
    4860:	781b      	ldrb	r3, [r3, #0]
    4862:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4864:	4b1c      	ldr	r3, [pc, #112]	; (48d8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4866:	68db      	ldr	r3, [r3, #12]
    4868:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    486a:	9b03      	ldr	r3, [sp, #12]
    486c:	2b03      	cmp	r3, #3
    486e:	d813      	bhi.n	4898 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4870:	9b03      	ldr	r3, [sp, #12]
    4872:	005b      	lsls	r3, r3, #1
    4874:	3318      	adds	r3, #24
    4876:	2203      	movs	r2, #3
    4878:	fa02 f303 	lsl.w	r3, r2, r3
    487c:	43db      	mvns	r3, r3
    487e:	9a05      	ldr	r2, [sp, #20]
    4880:	4013      	ands	r3, r2
    4882:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4884:	9b03      	ldr	r3, [sp, #12]
    4886:	005b      	lsls	r3, r3, #1
    4888:	3318      	adds	r3, #24
    488a:	9a04      	ldr	r2, [sp, #16]
    488c:	fa02 f303 	lsl.w	r3, r2, r3
    4890:	9a05      	ldr	r2, [sp, #20]
    4892:	4313      	orrs	r3, r2
    4894:	9305      	str	r3, [sp, #20]
    4896:	e014      	b.n	48c2 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4898:	9b03      	ldr	r3, [sp, #12]
    489a:	3b04      	subs	r3, #4
    489c:	005b      	lsls	r3, r3, #1
    489e:	3310      	adds	r3, #16
    48a0:	2203      	movs	r2, #3
    48a2:	fa02 f303 	lsl.w	r3, r2, r3
    48a6:	43db      	mvns	r3, r3
    48a8:	9a05      	ldr	r2, [sp, #20]
    48aa:	4013      	ands	r3, r2
    48ac:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    48ae:	9b03      	ldr	r3, [sp, #12]
    48b0:	3b04      	subs	r3, #4
    48b2:	005b      	lsls	r3, r3, #1
    48b4:	3310      	adds	r3, #16
    48b6:	9a04      	ldr	r2, [sp, #16]
    48b8:	fa02 f303 	lsl.w	r3, r2, r3
    48bc:	9a05      	ldr	r2, [sp, #20]
    48be:	4313      	orrs	r3, r2
    48c0:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    48c2:	4a05      	ldr	r2, [pc, #20]	; (48d8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    48c4:	9b05      	ldr	r3, [sp, #20]
    48c6:	60d3      	str	r3, [r2, #12]
}
    48c8:	bf00      	nop
    48ca:	b006      	add	sp, #24
    48cc:	4770      	bx	lr
    48ce:	bf00      	nop
    48d0:	00018138 	.word	0x00018138
    48d4:	00017e28 	.word	0x00017e28
    48d8:	40048000 	.word	0x40048000

000048dc <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    48dc:	b086      	sub	sp, #24
    48de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    48e0:	9b01      	ldr	r3, [sp, #4]
    48e2:	685b      	ldr	r3, [r3, #4]
    48e4:	4a20      	ldr	r2, [pc, #128]	; (4968 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    48e6:	5cd3      	ldrb	r3, [r2, r3]
    48e8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    48ea:	9b01      	ldr	r3, [sp, #4]
    48ec:	681a      	ldr	r2, [r3, #0]
    48ee:	491f      	ldr	r1, [pc, #124]	; (496c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    48f0:	4613      	mov	r3, r2
    48f2:	00db      	lsls	r3, r3, #3
    48f4:	4413      	add	r3, r2
    48f6:	440b      	add	r3, r1
    48f8:	781b      	ldrb	r3, [r3, #0]
    48fa:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    48fc:	4b1c      	ldr	r3, [pc, #112]	; (4970 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    48fe:	68db      	ldr	r3, [r3, #12]
    4900:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4902:	9b03      	ldr	r3, [sp, #12]
    4904:	2b03      	cmp	r3, #3
    4906:	d813      	bhi.n	4930 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4908:	9b03      	ldr	r3, [sp, #12]
    490a:	005b      	lsls	r3, r3, #1
    490c:	3318      	adds	r3, #24
    490e:	2203      	movs	r2, #3
    4910:	fa02 f303 	lsl.w	r3, r2, r3
    4914:	43db      	mvns	r3, r3
    4916:	9a05      	ldr	r2, [sp, #20]
    4918:	4013      	ands	r3, r2
    491a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    491c:	9b03      	ldr	r3, [sp, #12]
    491e:	005b      	lsls	r3, r3, #1
    4920:	3318      	adds	r3, #24
    4922:	9a04      	ldr	r2, [sp, #16]
    4924:	fa02 f303 	lsl.w	r3, r2, r3
    4928:	9a05      	ldr	r2, [sp, #20]
    492a:	4313      	orrs	r3, r2
    492c:	9305      	str	r3, [sp, #20]
    492e:	e014      	b.n	495a <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4930:	9b03      	ldr	r3, [sp, #12]
    4932:	3b04      	subs	r3, #4
    4934:	005b      	lsls	r3, r3, #1
    4936:	3310      	adds	r3, #16
    4938:	2203      	movs	r2, #3
    493a:	fa02 f303 	lsl.w	r3, r2, r3
    493e:	43db      	mvns	r3, r3
    4940:	9a05      	ldr	r2, [sp, #20]
    4942:	4013      	ands	r3, r2
    4944:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4946:	9b03      	ldr	r3, [sp, #12]
    4948:	3b04      	subs	r3, #4
    494a:	005b      	lsls	r3, r3, #1
    494c:	3310      	adds	r3, #16
    494e:	9a04      	ldr	r2, [sp, #16]
    4950:	fa02 f303 	lsl.w	r3, r2, r3
    4954:	9a05      	ldr	r2, [sp, #20]
    4956:	4313      	orrs	r3, r2
    4958:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    495a:	4a05      	ldr	r2, [pc, #20]	; (4970 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    495c:	9b05      	ldr	r3, [sp, #20]
    495e:	60d3      	str	r3, [r2, #12]
}
    4960:	bf00      	nop
    4962:	b006      	add	sp, #24
    4964:	4770      	bx	lr
    4966:	bf00      	nop
    4968:	00018138 	.word	0x00018138
    496c:	00017e28 	.word	0x00017e28
    4970:	40048000 	.word	0x40048000

00004974 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4974:	b084      	sub	sp, #16
    4976:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4978:	4b06      	ldr	r3, [pc, #24]	; (4994 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    497a:	685b      	ldr	r3, [r3, #4]
    497c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    497e:	9b03      	ldr	r3, [sp, #12]
    4980:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4984:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4986:	4a03      	ldr	r2, [pc, #12]	; (4994 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4988:	9b03      	ldr	r3, [sp, #12]
    498a:	6053      	str	r3, [r2, #4]
}
    498c:	bf00      	nop
    498e:	b004      	add	sp, #16
    4990:	4770      	bx	lr
    4992:	bf00      	nop
    4994:	40048000 	.word	0x40048000

00004998 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4998:	b084      	sub	sp, #16
    499a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    499c:	9b01      	ldr	r3, [sp, #4]
    499e:	685b      	ldr	r3, [r3, #4]
    49a0:	4a0a      	ldr	r2, [pc, #40]	; (49cc <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    49a2:	5cd3      	ldrb	r3, [r2, r3]
    49a4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    49a6:	4b0a      	ldr	r3, [pc, #40]	; (49d0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    49a8:	685b      	ldr	r3, [r3, #4]
    49aa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    49ac:	9b02      	ldr	r3, [sp, #8]
    49ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    49b2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    49b4:	9b03      	ldr	r3, [sp, #12]
    49b6:	011b      	lsls	r3, r3, #4
    49b8:	9a02      	ldr	r2, [sp, #8]
    49ba:	4313      	orrs	r3, r2
    49bc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    49be:	4a04      	ldr	r2, [pc, #16]	; (49d0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    49c0:	9b02      	ldr	r3, [sp, #8]
    49c2:	6053      	str	r3, [r2, #4]
}
    49c4:	bf00      	nop
    49c6:	b004      	add	sp, #16
    49c8:	4770      	bx	lr
    49ca:	bf00      	nop
    49cc:	00018138 	.word	0x00018138
    49d0:	40048000 	.word	0x40048000

000049d4 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49d4:	b084      	sub	sp, #16
    49d6:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    49d8:	9b01      	ldr	r3, [sp, #4]
    49da:	681a      	ldr	r2, [r3, #0]
    49dc:	490f      	ldr	r1, [pc, #60]	; (4a1c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    49de:	4613      	mov	r3, r2
    49e0:	00db      	lsls	r3, r3, #3
    49e2:	4413      	add	r3, r2
    49e4:	440b      	add	r3, r1
    49e6:	3304      	adds	r3, #4
    49e8:	781b      	ldrb	r3, [r3, #0]
    49ea:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    49ec:	4a0c      	ldr	r2, [pc, #48]	; (4a20 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    49ee:	9b03      	ldr	r3, [sp, #12]
    49f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    49f4:	490a      	ldr	r1, [pc, #40]	; (4a20 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    49f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    49fa:	9b03      	ldr	r3, [sp, #12]
    49fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4a00:	4a07      	ldr	r2, [pc, #28]	; (4a20 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4a02:	9b03      	ldr	r3, [sp, #12]
    4a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4a08:	4905      	ldr	r1, [pc, #20]	; (4a20 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4a0a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4a0e:	9b03      	ldr	r3, [sp, #12]
    4a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4a14:	bf00      	nop
    4a16:	b004      	add	sp, #16
    4a18:	4770      	bx	lr
    4a1a:	bf00      	nop
    4a1c:	00017e28 	.word	0x00017e28
    4a20:	40065000 	.word	0x40065000

00004a24 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a24:	b086      	sub	sp, #24
    4a26:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4a28:	9b01      	ldr	r3, [sp, #4]
    4a2a:	681a      	ldr	r2, [r3, #0]
    4a2c:	4912      	ldr	r1, [pc, #72]	; (4a78 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4a2e:	4613      	mov	r3, r2
    4a30:	00db      	lsls	r3, r3, #3
    4a32:	4413      	add	r3, r2
    4a34:	440b      	add	r3, r1
    4a36:	3304      	adds	r3, #4
    4a38:	781b      	ldrb	r3, [r3, #0]
    4a3a:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a3c:	9b01      	ldr	r3, [sp, #4]
    4a3e:	685b      	ldr	r3, [r3, #4]
    4a40:	4a0e      	ldr	r2, [pc, #56]	; (4a7c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4a42:	5cd3      	ldrb	r3, [r2, r3]
    4a44:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4a46:	4a0e      	ldr	r2, [pc, #56]	; (4a80 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4a48:	9b05      	ldr	r3, [sp, #20]
    4a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4a4e:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4a50:	9b03      	ldr	r3, [sp, #12]
    4a52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4a56:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4a58:	9b04      	ldr	r3, [sp, #16]
    4a5a:	061b      	lsls	r3, r3, #24
    4a5c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4a60:	9a03      	ldr	r2, [sp, #12]
    4a62:	4313      	orrs	r3, r2
    4a64:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4a66:	4906      	ldr	r1, [pc, #24]	; (4a80 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4a68:	9b05      	ldr	r3, [sp, #20]
    4a6a:	9a03      	ldr	r2, [sp, #12]
    4a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4a70:	bf00      	nop
    4a72:	b006      	add	sp, #24
    4a74:	4770      	bx	lr
    4a76:	bf00      	nop
    4a78:	00017e28 	.word	0x00017e28
    4a7c:	000181c0 	.word	0x000181c0
    4a80:	40065000 	.word	0x40065000

00004a84 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a84:	b084      	sub	sp, #16
    4a86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a88:	4b0b      	ldr	r3, [pc, #44]	; (4ab8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4a8a:	7f1b      	ldrb	r3, [r3, #28]
    4a8c:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4a8e:	4b0b      	ldr	r3, [pc, #44]	; (4abc <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4a90:	685b      	ldr	r3, [r3, #4]
    4a92:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4a94:	9b02      	ldr	r3, [sp, #8]
    4a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4a9a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4a9c:	9b03      	ldr	r3, [sp, #12]
    4a9e:	031b      	lsls	r3, r3, #12
    4aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4aa4:	9a02      	ldr	r2, [sp, #8]
    4aa6:	4313      	orrs	r3, r2
    4aa8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4aaa:	4a04      	ldr	r2, [pc, #16]	; (4abc <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4aac:	9b02      	ldr	r3, [sp, #8]
    4aae:	6053      	str	r3, [r2, #4]
}
    4ab0:	bf00      	nop
    4ab2:	b004      	add	sp, #16
    4ab4:	4770      	bx	lr
    4ab6:	bf00      	nop
    4ab8:	00018138 	.word	0x00018138
    4abc:	40048000 	.word	0x40048000

00004ac0 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4ac0:	b084      	sub	sp, #16
    4ac2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4ac4:	9b01      	ldr	r3, [sp, #4]
    4ac6:	685b      	ldr	r3, [r3, #4]
    4ac8:	4a0b      	ldr	r2, [pc, #44]	; (4af8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4aca:	5cd3      	ldrb	r3, [r2, r3]
    4acc:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4ace:	4b0b      	ldr	r3, [pc, #44]	; (4afc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4ad0:	685b      	ldr	r3, [r3, #4]
    4ad2:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4ad4:	9b02      	ldr	r3, [sp, #8]
    4ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4ada:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4adc:	9b03      	ldr	r3, [sp, #12]
    4ade:	031b      	lsls	r3, r3, #12
    4ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4ae4:	9a02      	ldr	r2, [sp, #8]
    4ae6:	4313      	orrs	r3, r2
    4ae8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4aea:	4a04      	ldr	r2, [pc, #16]	; (4afc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4aec:	9b02      	ldr	r3, [sp, #8]
    4aee:	6053      	str	r3, [r2, #4]
}
    4af0:	bf00      	nop
    4af2:	b004      	add	sp, #16
    4af4:	4770      	bx	lr
    4af6:	bf00      	nop
    4af8:	00018138 	.word	0x00018138
    4afc:	40048000 	.word	0x40048000

00004b00 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4b00:	b500      	push	{lr}
    4b02:	b085      	sub	sp, #20
    4b04:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4b06:	2300      	movs	r3, #0
    4b08:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4b0c:	9b01      	ldr	r3, [sp, #4]
    4b0e:	2b00      	cmp	r3, #0
    4b10:	d037      	beq.n	4b82 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b12:	2300      	movs	r3, #0
    4b14:	9303      	str	r3, [sp, #12]
    4b16:	e02b      	b.n	4b70 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4b18:	4b29      	ldr	r3, [pc, #164]	; (4bc0 <DisableSafeClock+0xc0>)
    4b1a:	6819      	ldr	r1, [r3, #0]
    4b1c:	9a03      	ldr	r2, [sp, #12]
    4b1e:	4613      	mov	r3, r2
    4b20:	005b      	lsls	r3, r3, #1
    4b22:	4413      	add	r3, r2
    4b24:	009b      	lsls	r3, r3, #2
    4b26:	440b      	add	r3, r1
    4b28:	3314      	adds	r3, #20
    4b2a:	681b      	ldr	r3, [r3, #0]
    4b2c:	2b05      	cmp	r3, #5
    4b2e:	d11c      	bne.n	4b6a <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4b30:	2301      	movs	r3, #1
    4b32:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4b36:	4b22      	ldr	r3, [pc, #136]	; (4bc0 <DisableSafeClock+0xc0>)
    4b38:	6819      	ldr	r1, [r3, #0]
    4b3a:	9a03      	ldr	r2, [sp, #12]
    4b3c:	4613      	mov	r3, r2
    4b3e:	005b      	lsls	r3, r3, #1
    4b40:	4413      	add	r3, r2
    4b42:	009b      	lsls	r3, r3, #2
    4b44:	440b      	add	r3, r1
    4b46:	3318      	adds	r3, #24
    4b48:	881b      	ldrh	r3, [r3, #0]
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	d118      	bne.n	4b80 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4b4e:	4b1d      	ldr	r3, [pc, #116]	; (4bc4 <DisableSafeClock+0xc4>)
    4b50:	791b      	ldrb	r3, [r3, #4]
    4b52:	4619      	mov	r1, r3
    4b54:	4a1c      	ldr	r2, [pc, #112]	; (4bc8 <DisableSafeClock+0xc8>)
    4b56:	460b      	mov	r3, r1
    4b58:	005b      	lsls	r3, r3, #1
    4b5a:	440b      	add	r3, r1
    4b5c:	009b      	lsls	r3, r3, #2
    4b5e:	4413      	add	r3, r2
    4b60:	3308      	adds	r3, #8
    4b62:	681b      	ldr	r3, [r3, #0]
    4b64:	2005      	movs	r0, #5
    4b66:	4798      	blx	r3
                }
                break;
    4b68:	e00a      	b.n	4b80 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b6a:	9b03      	ldr	r3, [sp, #12]
    4b6c:	3301      	adds	r3, #1
    4b6e:	9303      	str	r3, [sp, #12]
    4b70:	4b13      	ldr	r3, [pc, #76]	; (4bc0 <DisableSafeClock+0xc0>)
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	7a1b      	ldrb	r3, [r3, #8]
    4b76:	461a      	mov	r2, r3
    4b78:	9b03      	ldr	r3, [sp, #12]
    4b7a:	4293      	cmp	r3, r2
    4b7c:	d3cc      	bcc.n	4b18 <DisableSafeClock+0x18>
    4b7e:	e000      	b.n	4b82 <DisableSafeClock+0x82>
                break;
    4b80:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4b82:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4b86:	f083 0301 	eor.w	r3, r3, #1
    4b8a:	b2db      	uxtb	r3, r3
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	d013      	beq.n	4bb8 <DisableSafeClock+0xb8>
    4b90:	4b0e      	ldr	r3, [pc, #56]	; (4bcc <DisableSafeClock+0xcc>)
    4b92:	781b      	ldrb	r3, [r3, #0]
    4b94:	f083 0301 	eor.w	r3, r3, #1
    4b98:	b2db      	uxtb	r3, r3
    4b9a:	2b00      	cmp	r3, #0
    4b9c:	d00c      	beq.n	4bb8 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4b9e:	4b09      	ldr	r3, [pc, #36]	; (4bc4 <DisableSafeClock+0xc4>)
    4ba0:	791b      	ldrb	r3, [r3, #4]
    4ba2:	4619      	mov	r1, r3
    4ba4:	4a08      	ldr	r2, [pc, #32]	; (4bc8 <DisableSafeClock+0xc8>)
    4ba6:	460b      	mov	r3, r1
    4ba8:	005b      	lsls	r3, r3, #1
    4baa:	440b      	add	r3, r1
    4bac:	009b      	lsls	r3, r3, #2
    4bae:	4413      	add	r3, r2
    4bb0:	3308      	adds	r3, #8
    4bb2:	681b      	ldr	r3, [r3, #0]
    4bb4:	2005      	movs	r0, #5
    4bb6:	4798      	blx	r3
    }
}
    4bb8:	bf00      	nop
    4bba:	b005      	add	sp, #20
    4bbc:	f85d fb04 	ldr.w	pc, [sp], #4
    4bc0:	1fff8b9c 	.word	0x1fff8b9c
    4bc4:	00017db8 	.word	0x00017db8
    4bc8:	000183e8 	.word	0x000183e8
    4bcc:	1fff8b18 	.word	0x1fff8b18

00004bd0 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4bd0:	4b06      	ldr	r3, [pc, #24]	; (4bec <SetFircToResetValue_TrustedCall+0x1c>)
    4bd2:	2200      	movs	r2, #0
    4bd4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4bd8:	4b04      	ldr	r3, [pc, #16]	; (4bec <SetFircToResetValue_TrustedCall+0x1c>)
    4bda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4bde:	4a03      	ldr	r2, [pc, #12]	; (4bec <SetFircToResetValue_TrustedCall+0x1c>)
    4be0:	f043 0301 	orr.w	r3, r3, #1
    4be4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4be8:	bf00      	nop
    4bea:	4770      	bx	lr
    4bec:	40064000 	.word	0x40064000

00004bf0 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4bf0:	b084      	sub	sp, #16
    4bf2:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4bf4:	2303      	movs	r3, #3
    4bf6:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4bf8:	2300      	movs	r3, #0
    4bfa:	9302      	str	r3, [sp, #8]
    4bfc:	e028      	b.n	4c50 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4bfe:	9b01      	ldr	r3, [sp, #4]
    4c00:	9a02      	ldr	r2, [sp, #8]
    4c02:	320d      	adds	r2, #13
    4c04:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4c08:	2b28      	cmp	r3, #40	; 0x28
    4c0a:	d10b      	bne.n	4c24 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4c0c:	9a01      	ldr	r2, [sp, #4]
    4c0e:	9b02      	ldr	r3, [sp, #8]
    4c10:	330d      	adds	r3, #13
    4c12:	00db      	lsls	r3, r3, #3
    4c14:	4413      	add	r3, r2
    4c16:	685b      	ldr	r3, [r3, #4]
    4c18:	4a2b      	ldr	r2, [pc, #172]	; (4cc8 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4c1a:	5cd3      	ldrb	r3, [r2, r3]
    4c1c:	011b      	lsls	r3, r3, #4
    4c1e:	9a03      	ldr	r2, [sp, #12]
    4c20:	4313      	orrs	r3, r2
    4c22:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4c24:	9b01      	ldr	r3, [sp, #4]
    4c26:	9a02      	ldr	r2, [sp, #8]
    4c28:	320d      	adds	r2, #13
    4c2a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4c2e:	2b29      	cmp	r3, #41	; 0x29
    4c30:	d10b      	bne.n	4c4a <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4c32:	9a01      	ldr	r2, [sp, #4]
    4c34:	9b02      	ldr	r3, [sp, #8]
    4c36:	330d      	adds	r3, #13
    4c38:	00db      	lsls	r3, r3, #3
    4c3a:	4413      	add	r3, r2
    4c3c:	685b      	ldr	r3, [r3, #4]
    4c3e:	4a23      	ldr	r2, [pc, #140]	; (4ccc <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4c40:	5cd3      	ldrb	r3, [r2, r3]
    4c42:	009b      	lsls	r3, r3, #2
    4c44:	9a03      	ldr	r2, [sp, #12]
    4c46:	4313      	orrs	r3, r2
    4c48:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4c4a:	9b02      	ldr	r3, [sp, #8]
    4c4c:	3301      	adds	r3, #1
    4c4e:	9302      	str	r3, [sp, #8]
    4c50:	9b01      	ldr	r3, [sp, #4]
    4c52:	7adb      	ldrb	r3, [r3, #11]
    4c54:	461a      	mov	r2, r3
    4c56:	9b02      	ldr	r3, [sp, #8]
    4c58:	4293      	cmp	r3, r2
    4c5a:	d3d0      	bcc.n	4bfe <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4c5c:	2300      	movs	r3, #0
    4c5e:	9302      	str	r3, [sp, #8]
    4c60:	e026      	b.n	4cb0 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4c62:	9a01      	ldr	r2, [sp, #4]
    4c64:	9b02      	ldr	r3, [sp, #8]
    4c66:	334e      	adds	r3, #78	; 0x4e
    4c68:	00db      	lsls	r3, r3, #3
    4c6a:	4413      	add	r3, r2
    4c6c:	685b      	ldr	r3, [r3, #4]
    4c6e:	2b12      	cmp	r3, #18
    4c70:	d109      	bne.n	4c86 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4c72:	9a01      	ldr	r2, [sp, #4]
    4c74:	9b02      	ldr	r3, [sp, #8]
    4c76:	334e      	adds	r3, #78	; 0x4e
    4c78:	00db      	lsls	r3, r3, #3
    4c7a:	4413      	add	r3, r2
    4c7c:	891b      	ldrh	r3, [r3, #8]
    4c7e:	005b      	lsls	r3, r3, #1
    4c80:	9a03      	ldr	r2, [sp, #12]
    4c82:	4313      	orrs	r3, r2
    4c84:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4c86:	9a01      	ldr	r2, [sp, #4]
    4c88:	9b02      	ldr	r3, [sp, #8]
    4c8a:	334e      	adds	r3, #78	; 0x4e
    4c8c:	00db      	lsls	r3, r3, #3
    4c8e:	4413      	add	r3, r2
    4c90:	685b      	ldr	r3, [r3, #4]
    4c92:	2b13      	cmp	r3, #19
    4c94:	d109      	bne.n	4caa <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4c96:	9a01      	ldr	r2, [sp, #4]
    4c98:	9b02      	ldr	r3, [sp, #8]
    4c9a:	334e      	adds	r3, #78	; 0x4e
    4c9c:	00db      	lsls	r3, r3, #3
    4c9e:	4413      	add	r3, r2
    4ca0:	891b      	ldrh	r3, [r3, #8]
    4ca2:	461a      	mov	r2, r3
    4ca4:	9b03      	ldr	r3, [sp, #12]
    4ca6:	4313      	orrs	r3, r2
    4ca8:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4caa:	9b02      	ldr	r3, [sp, #8]
    4cac:	3301      	adds	r3, #1
    4cae:	9302      	str	r3, [sp, #8]
    4cb0:	9b01      	ldr	r3, [sp, #4]
    4cb2:	7c1b      	ldrb	r3, [r3, #16]
    4cb4:	461a      	mov	r2, r3
    4cb6:	9b02      	ldr	r3, [sp, #8]
    4cb8:	4293      	cmp	r3, r2
    4cba:	d3d2      	bcc.n	4c62 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4cbc:	4a04      	ldr	r2, [pc, #16]	; (4cd0 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4cbe:	9b03      	ldr	r3, [sp, #12]
    4cc0:	6113      	str	r3, [r2, #16]
}
    4cc2:	bf00      	nop
    4cc4:	b004      	add	sp, #16
    4cc6:	4770      	bx	lr
    4cc8:	00018138 	.word	0x00018138
    4ccc:	000181f0 	.word	0x000181f0
    4cd0:	40048000 	.word	0x40048000

00004cd4 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4cd4:	b500      	push	{lr}
    4cd6:	b089      	sub	sp, #36	; 0x24
    4cd8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4cda:	2300      	movs	r3, #0
    4cdc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4ce0:	4a21      	ldr	r2, [pc, #132]	; (4d68 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4ce2:	9b01      	ldr	r3, [sp, #4]
    4ce4:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4ce6:	4b21      	ldr	r3, [pc, #132]	; (4d6c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4ce8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4cec:	f003 0301 	and.w	r3, r3, #1
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d12e      	bne.n	4d52 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4cf4:	4b1e      	ldr	r3, [pc, #120]	; (4d70 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4cf6:	2200      	movs	r2, #0
    4cf8:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4cfa:	f7ff ff69 	bl	4bd0 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4cfe:	aa03      	add	r2, sp, #12
    4d00:	a904      	add	r1, sp, #16
    4d02:	a805      	add	r0, sp, #20
    4d04:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d08:	f7fe f8ae 	bl	2e68 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4d0c:	4b17      	ldr	r3, [pc, #92]	; (4d6c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4d0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d12:	0e1b      	lsrs	r3, r3, #24
    4d14:	f003 0301 	and.w	r3, r3, #1
    4d18:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d1a:	9a03      	ldr	r2, [sp, #12]
    4d1c:	a904      	add	r1, sp, #16
    4d1e:	ab05      	add	r3, sp, #20
    4d20:	4618      	mov	r0, r3
    4d22:	f7fe f8bb 	bl	2e9c <Clock_Ip_TimeoutExpired>
    4d26:	4603      	mov	r3, r0
    4d28:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4d2c:	9b06      	ldr	r3, [sp, #24]
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d106      	bne.n	4d40 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4d32:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d36:	f083 0301 	eor.w	r3, r3, #1
    4d3a:	b2db      	uxtb	r3, r3
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d1e5      	bne.n	4d0c <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4d40:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d007      	beq.n	4d58 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4d48:	2105      	movs	r1, #5
    4d4a:	2001      	movs	r0, #1
    4d4c:	f7fe f87c 	bl	2e48 <Clock_Ip_ReportClockErrors>
    4d50:	e002      	b.n	4d58 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4d52:	4b07      	ldr	r3, [pc, #28]	; (4d70 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4d54:	2201      	movs	r2, #1
    4d56:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4d58:	9801      	ldr	r0, [sp, #4]
    4d5a:	f7ff ff49 	bl	4bf0 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4d5e:	bf00      	nop
    4d60:	b009      	add	sp, #36	; 0x24
    4d62:	f85d fb04 	ldr.w	pc, [sp], #4
    4d66:	bf00      	nop
    4d68:	1fff8b9c 	.word	0x1fff8b9c
    4d6c:	40064000 	.word	0x40064000
    4d70:	1fff8b18 	.word	0x1fff8b18

00004d74 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4d74:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4d76:	2300      	movs	r3, #0
    4d78:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4d7a:	4b29      	ldr	r3, [pc, #164]	; (4e20 <getFircConfig+0xac>)
    4d7c:	681b      	ldr	r3, [r3, #0]
    4d7e:	2b00      	cmp	r3, #0
    4d80:	d024      	beq.n	4dcc <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4d82:	2300      	movs	r3, #0
    4d84:	9301      	str	r3, [sp, #4]
    4d86:	e01a      	b.n	4dbe <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4d88:	4b25      	ldr	r3, [pc, #148]	; (4e20 <getFircConfig+0xac>)
    4d8a:	6819      	ldr	r1, [r3, #0]
    4d8c:	9a01      	ldr	r2, [sp, #4]
    4d8e:	4613      	mov	r3, r2
    4d90:	005b      	lsls	r3, r3, #1
    4d92:	4413      	add	r3, r2
    4d94:	009b      	lsls	r3, r3, #2
    4d96:	440b      	add	r3, r1
    4d98:	3314      	adds	r3, #20
    4d9a:	681b      	ldr	r3, [r3, #0]
    4d9c:	2b05      	cmp	r3, #5
    4d9e:	d10b      	bne.n	4db8 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4da0:	4b1f      	ldr	r3, [pc, #124]	; (4e20 <getFircConfig+0xac>)
    4da2:	6819      	ldr	r1, [r3, #0]
    4da4:	9a01      	ldr	r2, [sp, #4]
    4da6:	4613      	mov	r3, r2
    4da8:	005b      	lsls	r3, r3, #1
    4daa:	4413      	add	r3, r2
    4dac:	009b      	lsls	r3, r3, #2
    4dae:	3310      	adds	r3, #16
    4db0:	440b      	add	r3, r1
    4db2:	3304      	adds	r3, #4
    4db4:	9300      	str	r3, [sp, #0]
                break;
    4db6:	e009      	b.n	4dcc <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4db8:	9b01      	ldr	r3, [sp, #4]
    4dba:	3301      	adds	r3, #1
    4dbc:	9301      	str	r3, [sp, #4]
    4dbe:	4b18      	ldr	r3, [pc, #96]	; (4e20 <getFircConfig+0xac>)
    4dc0:	681b      	ldr	r3, [r3, #0]
    4dc2:	7a1b      	ldrb	r3, [r3, #8]
    4dc4:	461a      	mov	r2, r3
    4dc6:	9b01      	ldr	r3, [sp, #4]
    4dc8:	4293      	cmp	r3, r2
    4dca:	d3dd      	bcc.n	4d88 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4dcc:	9b00      	ldr	r3, [sp, #0]
    4dce:	2b00      	cmp	r3, #0
    4dd0:	d121      	bne.n	4e16 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4dd2:	4b14      	ldr	r3, [pc, #80]	; (4e24 <getFircConfig+0xb0>)
    4dd4:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4dd6:	4b13      	ldr	r3, [pc, #76]	; (4e24 <getFircConfig+0xb0>)
    4dd8:	2205      	movs	r2, #5
    4dda:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4ddc:	4b12      	ldr	r3, [pc, #72]	; (4e28 <getFircConfig+0xb4>)
    4dde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4de2:	b29b      	uxth	r3, r3
    4de4:	f003 0301 	and.w	r3, r3, #1
    4de8:	b29a      	uxth	r2, r3
    4dea:	4b0e      	ldr	r3, [pc, #56]	; (4e24 <getFircConfig+0xb0>)
    4dec:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4dee:	4b0e      	ldr	r3, [pc, #56]	; (4e28 <getFircConfig+0xb4>)
    4df0:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4df4:	b2db      	uxtb	r3, r3
    4df6:	f003 0303 	and.w	r3, r3, #3
    4dfa:	b2da      	uxtb	r2, r3
    4dfc:	4b09      	ldr	r3, [pc, #36]	; (4e24 <getFircConfig+0xb0>)
    4dfe:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4e00:	4b09      	ldr	r3, [pc, #36]	; (4e28 <getFircConfig+0xb4>)
    4e02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4e06:	b2db      	uxtb	r3, r3
    4e08:	10db      	asrs	r3, r3, #3
    4e0a:	b2db      	uxtb	r3, r3
    4e0c:	f003 0301 	and.w	r3, r3, #1
    4e10:	b2da      	uxtb	r2, r3
    4e12:	4b04      	ldr	r3, [pc, #16]	; (4e24 <getFircConfig+0xb0>)
    4e14:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4e16:	9b00      	ldr	r3, [sp, #0]
}
    4e18:	4618      	mov	r0, r3
    4e1a:	b002      	add	sp, #8
    4e1c:	4770      	bx	lr
    4e1e:	bf00      	nop
    4e20:	1fff8b9c 	.word	0x1fff8b9c
    4e24:	1fff8c08 	.word	0x1fff8c08
    4e28:	40064000 	.word	0x40064000

00004e2c <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4e2c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4e2e:	2300      	movs	r3, #0
    4e30:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4e32:	4b20      	ldr	r3, [pc, #128]	; (4eb4 <getSoscConfig+0x88>)
    4e34:	681b      	ldr	r3, [r3, #0]
    4e36:	2b00      	cmp	r3, #0
    4e38:	d024      	beq.n	4e84 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4e3a:	2300      	movs	r3, #0
    4e3c:	9301      	str	r3, [sp, #4]
    4e3e:	e01a      	b.n	4e76 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4e40:	4b1c      	ldr	r3, [pc, #112]	; (4eb4 <getSoscConfig+0x88>)
    4e42:	6819      	ldr	r1, [r3, #0]
    4e44:	9a01      	ldr	r2, [sp, #4]
    4e46:	4613      	mov	r3, r2
    4e48:	009b      	lsls	r3, r3, #2
    4e4a:	4413      	add	r3, r2
    4e4c:	009b      	lsls	r3, r3, #2
    4e4e:	440b      	add	r3, r1
    4e50:	332c      	adds	r3, #44	; 0x2c
    4e52:	681b      	ldr	r3, [r3, #0]
    4e54:	2b08      	cmp	r3, #8
    4e56:	d10b      	bne.n	4e70 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4e58:	4b16      	ldr	r3, [pc, #88]	; (4eb4 <getSoscConfig+0x88>)
    4e5a:	6819      	ldr	r1, [r3, #0]
    4e5c:	9a01      	ldr	r2, [sp, #4]
    4e5e:	4613      	mov	r3, r2
    4e60:	009b      	lsls	r3, r3, #2
    4e62:	4413      	add	r3, r2
    4e64:	009b      	lsls	r3, r3, #2
    4e66:	3328      	adds	r3, #40	; 0x28
    4e68:	440b      	add	r3, r1
    4e6a:	3304      	adds	r3, #4
    4e6c:	9300      	str	r3, [sp, #0]
                break;
    4e6e:	e009      	b.n	4e84 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4e70:	9b01      	ldr	r3, [sp, #4]
    4e72:	3301      	adds	r3, #1
    4e74:	9301      	str	r3, [sp, #4]
    4e76:	4b0f      	ldr	r3, [pc, #60]	; (4eb4 <getSoscConfig+0x88>)
    4e78:	681b      	ldr	r3, [r3, #0]
    4e7a:	7a5b      	ldrb	r3, [r3, #9]
    4e7c:	461a      	mov	r2, r3
    4e7e:	9b01      	ldr	r3, [sp, #4]
    4e80:	4293      	cmp	r3, r2
    4e82:	d3dd      	bcc.n	4e40 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e84:	9b00      	ldr	r3, [sp, #0]
    4e86:	2b00      	cmp	r3, #0
    4e88:	d110      	bne.n	4eac <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4e8a:	4b0b      	ldr	r3, [pc, #44]	; (4eb8 <getSoscConfig+0x8c>)
    4e8c:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4e8e:	4b0a      	ldr	r3, [pc, #40]	; (4eb8 <getSoscConfig+0x8c>)
    4e90:	2208      	movs	r2, #8
    4e92:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4e94:	4b09      	ldr	r3, [pc, #36]	; (4ebc <getSoscConfig+0x90>)
    4e96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4e9a:	b29b      	uxth	r3, r3
    4e9c:	f003 0301 	and.w	r3, r3, #1
    4ea0:	b29a      	uxth	r2, r3
    4ea2:	4b05      	ldr	r3, [pc, #20]	; (4eb8 <getSoscConfig+0x8c>)
    4ea4:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4ea6:	4b04      	ldr	r3, [pc, #16]	; (4eb8 <getSoscConfig+0x8c>)
    4ea8:	4a05      	ldr	r2, [pc, #20]	; (4ec0 <getSoscConfig+0x94>)
    4eaa:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4eac:	9b00      	ldr	r3, [sp, #0]
}
    4eae:	4618      	mov	r0, r3
    4eb0:	b002      	add	sp, #8
    4eb2:	4770      	bx	lr
    4eb4:	1fff8b9c 	.word	0x1fff8b9c
    4eb8:	1fff8c14 	.word	0x1fff8c14
    4ebc:	40064000 	.word	0x40064000
    4ec0:	02625a00 	.word	0x02625a00

00004ec4 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4ec4:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4ec6:	2300      	movs	r3, #0
    4ec8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4eca:	4b28      	ldr	r3, [pc, #160]	; (4f6c <getSpllConfig+0xa8>)
    4ecc:	681b      	ldr	r3, [r3, #0]
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d023      	beq.n	4f1a <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4ed2:	2300      	movs	r3, #0
    4ed4:	9301      	str	r3, [sp, #4]
    4ed6:	e019      	b.n	4f0c <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4ed8:	4b24      	ldr	r3, [pc, #144]	; (4f6c <getSpllConfig+0xa8>)
    4eda:	6819      	ldr	r1, [r3, #0]
    4edc:	9a01      	ldr	r2, [sp, #4]
    4ede:	4613      	mov	r3, r2
    4ee0:	009b      	lsls	r3, r3, #2
    4ee2:	4413      	add	r3, r2
    4ee4:	00db      	lsls	r3, r3, #3
    4ee6:	440b      	add	r3, r1
    4ee8:	3340      	adds	r3, #64	; 0x40
    4eea:	681b      	ldr	r3, [r3, #0]
    4eec:	2b09      	cmp	r3, #9
    4eee:	d10a      	bne.n	4f06 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4ef0:	4b1e      	ldr	r3, [pc, #120]	; (4f6c <getSpllConfig+0xa8>)
    4ef2:	6819      	ldr	r1, [r3, #0]
    4ef4:	9a01      	ldr	r2, [sp, #4]
    4ef6:	4613      	mov	r3, r2
    4ef8:	009b      	lsls	r3, r3, #2
    4efa:	4413      	add	r3, r2
    4efc:	00db      	lsls	r3, r3, #3
    4efe:	3340      	adds	r3, #64	; 0x40
    4f00:	440b      	add	r3, r1
    4f02:	9300      	str	r3, [sp, #0]
                break;
    4f04:	e009      	b.n	4f1a <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4f06:	9b01      	ldr	r3, [sp, #4]
    4f08:	3301      	adds	r3, #1
    4f0a:	9301      	str	r3, [sp, #4]
    4f0c:	4b17      	ldr	r3, [pc, #92]	; (4f6c <getSpllConfig+0xa8>)
    4f0e:	681b      	ldr	r3, [r3, #0]
    4f10:	7a9b      	ldrb	r3, [r3, #10]
    4f12:	461a      	mov	r2, r3
    4f14:	9b01      	ldr	r3, [sp, #4]
    4f16:	4293      	cmp	r3, r2
    4f18:	d3de      	bcc.n	4ed8 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f1a:	9b00      	ldr	r3, [sp, #0]
    4f1c:	2b00      	cmp	r3, #0
    4f1e:	d121      	bne.n	4f64 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4f20:	4b13      	ldr	r3, [pc, #76]	; (4f70 <getSpllConfig+0xac>)
    4f22:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4f24:	4b12      	ldr	r3, [pc, #72]	; (4f70 <getSpllConfig+0xac>)
    4f26:	2209      	movs	r2, #9
    4f28:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4f2a:	4b12      	ldr	r3, [pc, #72]	; (4f74 <getSpllConfig+0xb0>)
    4f2c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4f30:	b29b      	uxth	r3, r3
    4f32:	f003 0301 	and.w	r3, r3, #1
    4f36:	b29a      	uxth	r2, r3
    4f38:	4b0d      	ldr	r3, [pc, #52]	; (4f70 <getSpllConfig+0xac>)
    4f3a:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4f3c:	4b0d      	ldr	r3, [pc, #52]	; (4f74 <getSpllConfig+0xb0>)
    4f3e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4f42:	0a1b      	lsrs	r3, r3, #8
    4f44:	b2db      	uxtb	r3, r3
    4f46:	f003 0307 	and.w	r3, r3, #7
    4f4a:	b2da      	uxtb	r2, r3
    4f4c:	4b08      	ldr	r3, [pc, #32]	; (4f70 <getSpllConfig+0xac>)
    4f4e:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4f50:	4b08      	ldr	r3, [pc, #32]	; (4f74 <getSpllConfig+0xb0>)
    4f52:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4f56:	0c1b      	lsrs	r3, r3, #16
    4f58:	b2db      	uxtb	r3, r3
    4f5a:	f003 031f 	and.w	r3, r3, #31
    4f5e:	b2da      	uxtb	r2, r3
    4f60:	4b03      	ldr	r3, [pc, #12]	; (4f70 <getSpllConfig+0xac>)
    4f62:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4f64:	9b00      	ldr	r3, [sp, #0]
}
    4f66:	4618      	mov	r0, r3
    4f68:	b002      	add	sp, #8
    4f6a:	4770      	bx	lr
    4f6c:	1fff8b9c 	.word	0x1fff8b9c
    4f70:	1fff8c28 	.word	0x1fff8c28
    4f74:	40064000 	.word	0x40064000

00004f78 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4f78:	b086      	sub	sp, #24
    4f7a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4f7c:	2300      	movs	r3, #0
    4f7e:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4f80:	9b01      	ldr	r3, [sp, #4]
    4f82:	2b1b      	cmp	r3, #27
    4f84:	d00f      	beq.n	4fa6 <getSelectorConfig+0x2e>
    4f86:	9b01      	ldr	r3, [sp, #4]
    4f88:	2b1b      	cmp	r3, #27
    4f8a:	d80f      	bhi.n	4fac <getSelectorConfig+0x34>
    4f8c:	9b01      	ldr	r3, [sp, #4]
    4f8e:	2b19      	cmp	r3, #25
    4f90:	d003      	beq.n	4f9a <getSelectorConfig+0x22>
    4f92:	9b01      	ldr	r3, [sp, #4]
    4f94:	2b1a      	cmp	r3, #26
    4f96:	d003      	beq.n	4fa0 <getSelectorConfig+0x28>
    4f98:	e008      	b.n	4fac <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4f9a:	2300      	movs	r3, #0
    4f9c:	9304      	str	r3, [sp, #16]
            break;
    4f9e:	e008      	b.n	4fb2 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4fa0:	2301      	movs	r3, #1
    4fa2:	9304      	str	r3, [sp, #16]
            break;
    4fa4:	e005      	b.n	4fb2 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4fa6:	2302      	movs	r3, #2
    4fa8:	9304      	str	r3, [sp, #16]
            break;
    4faa:	e002      	b.n	4fb2 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4fac:	2300      	movs	r3, #0
    4fae:	9304      	str	r3, [sp, #16]
            break;
    4fb0:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4fb2:	4b36      	ldr	r3, [pc, #216]	; (508c <getSelectorConfig+0x114>)
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	d01d      	beq.n	4ff6 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4fba:	2300      	movs	r3, #0
    4fbc:	9303      	str	r3, [sp, #12]
    4fbe:	e013      	b.n	4fe8 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4fc0:	4b32      	ldr	r3, [pc, #200]	; (508c <getSelectorConfig+0x114>)
    4fc2:	681b      	ldr	r3, [r3, #0]
    4fc4:	9a03      	ldr	r2, [sp, #12]
    4fc6:	320d      	adds	r2, #13
    4fc8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4fcc:	9a01      	ldr	r2, [sp, #4]
    4fce:	429a      	cmp	r2, r3
    4fd0:	d107      	bne.n	4fe2 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4fd2:	4b2e      	ldr	r3, [pc, #184]	; (508c <getSelectorConfig+0x114>)
    4fd4:	681a      	ldr	r2, [r3, #0]
    4fd6:	9b03      	ldr	r3, [sp, #12]
    4fd8:	330d      	adds	r3, #13
    4fda:	00db      	lsls	r3, r3, #3
    4fdc:	4413      	add	r3, r2
    4fde:	9305      	str	r3, [sp, #20]
                break;
    4fe0:	e009      	b.n	4ff6 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4fe2:	9b03      	ldr	r3, [sp, #12]
    4fe4:	3301      	adds	r3, #1
    4fe6:	9303      	str	r3, [sp, #12]
    4fe8:	4b28      	ldr	r3, [pc, #160]	; (508c <getSelectorConfig+0x114>)
    4fea:	681b      	ldr	r3, [r3, #0]
    4fec:	7adb      	ldrb	r3, [r3, #11]
    4fee:	461a      	mov	r2, r3
    4ff0:	9b03      	ldr	r3, [sp, #12]
    4ff2:	4293      	cmp	r3, r2
    4ff4:	d3e4      	bcc.n	4fc0 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ff6:	9b05      	ldr	r3, [sp, #20]
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d140      	bne.n	507e <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4ffc:	9b04      	ldr	r3, [sp, #16]
    4ffe:	00db      	lsls	r3, r3, #3
    5000:	4a23      	ldr	r2, [pc, #140]	; (5090 <getSelectorConfig+0x118>)
    5002:	4413      	add	r3, r2
    5004:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    5006:	4922      	ldr	r1, [pc, #136]	; (5090 <getSelectorConfig+0x118>)
    5008:	9b04      	ldr	r3, [sp, #16]
    500a:	9a01      	ldr	r2, [sp, #4]
    500c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    5010:	9b01      	ldr	r3, [sp, #4]
    5012:	2b1b      	cmp	r3, #27
    5014:	d025      	beq.n	5062 <getSelectorConfig+0xea>
    5016:	9b01      	ldr	r3, [sp, #4]
    5018:	2b1b      	cmp	r3, #27
    501a:	d832      	bhi.n	5082 <getSelectorConfig+0x10a>
    501c:	9b01      	ldr	r3, [sp, #4]
    501e:	2b19      	cmp	r3, #25
    5020:	d003      	beq.n	502a <getSelectorConfig+0xb2>
    5022:	9b01      	ldr	r3, [sp, #4]
    5024:	2b1a      	cmp	r3, #26
    5026:	d00e      	beq.n	5046 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5028:	e02b      	b.n	5082 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    502a:	4b1a      	ldr	r3, [pc, #104]	; (5094 <getSelectorConfig+0x11c>)
    502c:	695b      	ldr	r3, [r3, #20]
    502e:	0e1b      	lsrs	r3, r3, #24
    5030:	f003 030f 	and.w	r3, r3, #15
    5034:	4a18      	ldr	r2, [pc, #96]	; (5098 <getSelectorConfig+0x120>)
    5036:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    503a:	4915      	ldr	r1, [pc, #84]	; (5090 <getSelectorConfig+0x118>)
    503c:	9b04      	ldr	r3, [sp, #16]
    503e:	00db      	lsls	r3, r3, #3
    5040:	440b      	add	r3, r1
    5042:	605a      	str	r2, [r3, #4]
                break;
    5044:	e01e      	b.n	5084 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    5046:	4b13      	ldr	r3, [pc, #76]	; (5094 <getSelectorConfig+0x11c>)
    5048:	699b      	ldr	r3, [r3, #24]
    504a:	0e1b      	lsrs	r3, r3, #24
    504c:	f003 030f 	and.w	r3, r3, #15
    5050:	4a11      	ldr	r2, [pc, #68]	; (5098 <getSelectorConfig+0x120>)
    5052:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5056:	490e      	ldr	r1, [pc, #56]	; (5090 <getSelectorConfig+0x118>)
    5058:	9b04      	ldr	r3, [sp, #16]
    505a:	00db      	lsls	r3, r3, #3
    505c:	440b      	add	r3, r1
    505e:	605a      	str	r2, [r3, #4]
                break;
    5060:	e010      	b.n	5084 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    5062:	4b0c      	ldr	r3, [pc, #48]	; (5094 <getSelectorConfig+0x11c>)
    5064:	69db      	ldr	r3, [r3, #28]
    5066:	0e1b      	lsrs	r3, r3, #24
    5068:	f003 030f 	and.w	r3, r3, #15
    506c:	4a0a      	ldr	r2, [pc, #40]	; (5098 <getSelectorConfig+0x120>)
    506e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5072:	4907      	ldr	r1, [pc, #28]	; (5090 <getSelectorConfig+0x118>)
    5074:	9b04      	ldr	r3, [sp, #16]
    5076:	00db      	lsls	r3, r3, #3
    5078:	440b      	add	r3, r1
    507a:	605a      	str	r2, [r3, #4]
                break;
    507c:	e002      	b.n	5084 <getSelectorConfig+0x10c>
        }
    }
    507e:	bf00      	nop
    5080:	e000      	b.n	5084 <getSelectorConfig+0x10c>
                break;
    5082:	bf00      	nop

    return ReturnValue;
    5084:	9b05      	ldr	r3, [sp, #20]
}
    5086:	4618      	mov	r0, r3
    5088:	b006      	add	sp, #24
    508a:	4770      	bx	lr
    508c:	1fff8b9c 	.word	0x1fff8b9c
    5090:	1fff8c50 	.word	0x1fff8c50
    5094:	40064000 	.word	0x40064000
    5098:	000184b8 	.word	0x000184b8

0000509c <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    509c:	b086      	sub	sp, #24
    509e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    50a0:	2300      	movs	r3, #0
    50a2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    50a4:	2300      	movs	r3, #0
    50a6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    50a8:	9b01      	ldr	r3, [sp, #4]
    50aa:	2b1f      	cmp	r3, #31
    50ac:	d00f      	beq.n	50ce <getCoreDividerConfig+0x32>
    50ae:	9b01      	ldr	r3, [sp, #4]
    50b0:	2b1f      	cmp	r3, #31
    50b2:	d80f      	bhi.n	50d4 <getCoreDividerConfig+0x38>
    50b4:	9b01      	ldr	r3, [sp, #4]
    50b6:	2b1d      	cmp	r3, #29
    50b8:	d003      	beq.n	50c2 <getCoreDividerConfig+0x26>
    50ba:	9b01      	ldr	r3, [sp, #4]
    50bc:	2b1e      	cmp	r3, #30
    50be:	d003      	beq.n	50c8 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    50c0:	e008      	b.n	50d4 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    50c2:	2300      	movs	r3, #0
    50c4:	9304      	str	r3, [sp, #16]
            break;
    50c6:	e006      	b.n	50d6 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    50c8:	2301      	movs	r3, #1
    50ca:	9304      	str	r3, [sp, #16]
            break;
    50cc:	e003      	b.n	50d6 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    50ce:	2302      	movs	r3, #2
    50d0:	9304      	str	r3, [sp, #16]
            break;
    50d2:	e000      	b.n	50d6 <getCoreDividerConfig+0x3a>
                break;
    50d4:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    50d6:	4b41      	ldr	r3, [pc, #260]	; (51dc <getCoreDividerConfig+0x140>)
    50d8:	681b      	ldr	r3, [r3, #0]
    50da:	2b00      	cmp	r3, #0
    50dc:	d026      	beq.n	512c <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50de:	2300      	movs	r3, #0
    50e0:	9303      	str	r3, [sp, #12]
    50e2:	e01c      	b.n	511e <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    50e4:	4b3d      	ldr	r3, [pc, #244]	; (51dc <getCoreDividerConfig+0x140>)
    50e6:	6819      	ldr	r1, [r3, #0]
    50e8:	9a03      	ldr	r2, [sp, #12]
    50ea:	4613      	mov	r3, r2
    50ec:	005b      	lsls	r3, r3, #1
    50ee:	4413      	add	r3, r2
    50f0:	009b      	lsls	r3, r3, #2
    50f2:	440b      	add	r3, r1
    50f4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50f8:	681b      	ldr	r3, [r3, #0]
    50fa:	9a01      	ldr	r2, [sp, #4]
    50fc:	429a      	cmp	r2, r3
    50fe:	d10b      	bne.n	5118 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5100:	4b36      	ldr	r3, [pc, #216]	; (51dc <getCoreDividerConfig+0x140>)
    5102:	6819      	ldr	r1, [r3, #0]
    5104:	9a03      	ldr	r2, [sp, #12]
    5106:	4613      	mov	r3, r2
    5108:	005b      	lsls	r3, r3, #1
    510a:	4413      	add	r3, r2
    510c:	009b      	lsls	r3, r3, #2
    510e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5112:	440b      	add	r3, r1
    5114:	9305      	str	r3, [sp, #20]
                break;
    5116:	e009      	b.n	512c <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5118:	9b03      	ldr	r3, [sp, #12]
    511a:	3301      	adds	r3, #1
    511c:	9303      	str	r3, [sp, #12]
    511e:	4b2f      	ldr	r3, [pc, #188]	; (51dc <getCoreDividerConfig+0x140>)
    5120:	681b      	ldr	r3, [r3, #0]
    5122:	7b1b      	ldrb	r3, [r3, #12]
    5124:	461a      	mov	r2, r3
    5126:	9b03      	ldr	r3, [sp, #12]
    5128:	4293      	cmp	r3, r2
    512a:	d3db      	bcc.n	50e4 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    512c:	9b05      	ldr	r3, [sp, #20]
    512e:	2b00      	cmp	r3, #0
    5130:	d14d      	bne.n	51ce <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5132:	9a04      	ldr	r2, [sp, #16]
    5134:	4613      	mov	r3, r2
    5136:	005b      	lsls	r3, r3, #1
    5138:	4413      	add	r3, r2
    513a:	009b      	lsls	r3, r3, #2
    513c:	4a28      	ldr	r2, [pc, #160]	; (51e0 <getCoreDividerConfig+0x144>)
    513e:	4413      	add	r3, r2
    5140:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5142:	4927      	ldr	r1, [pc, #156]	; (51e0 <getCoreDividerConfig+0x144>)
    5144:	9a04      	ldr	r2, [sp, #16]
    5146:	4613      	mov	r3, r2
    5148:	005b      	lsls	r3, r3, #1
    514a:	4413      	add	r3, r2
    514c:	009b      	lsls	r3, r3, #2
    514e:	440b      	add	r3, r1
    5150:	9a01      	ldr	r2, [sp, #4]
    5152:	601a      	str	r2, [r3, #0]
        switch(Name)
    5154:	9b01      	ldr	r3, [sp, #4]
    5156:	2b1f      	cmp	r3, #31
    5158:	d029      	beq.n	51ae <getCoreDividerConfig+0x112>
    515a:	9b01      	ldr	r3, [sp, #4]
    515c:	2b1f      	cmp	r3, #31
    515e:	d838      	bhi.n	51d2 <getCoreDividerConfig+0x136>
    5160:	9b01      	ldr	r3, [sp, #4]
    5162:	2b1d      	cmp	r3, #29
    5164:	d003      	beq.n	516e <getCoreDividerConfig+0xd2>
    5166:	9b01      	ldr	r3, [sp, #4]
    5168:	2b1e      	cmp	r3, #30
    516a:	d010      	beq.n	518e <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    516c:	e031      	b.n	51d2 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    516e:	4b1d      	ldr	r3, [pc, #116]	; (51e4 <getCoreDividerConfig+0x148>)
    5170:	695b      	ldr	r3, [r3, #20]
    5172:	0c1b      	lsrs	r3, r3, #16
    5174:	f003 030f 	and.w	r3, r3, #15
    5178:	1c59      	adds	r1, r3, #1
    517a:	4819      	ldr	r0, [pc, #100]	; (51e0 <getCoreDividerConfig+0x144>)
    517c:	9a04      	ldr	r2, [sp, #16]
    517e:	4613      	mov	r3, r2
    5180:	005b      	lsls	r3, r3, #1
    5182:	4413      	add	r3, r2
    5184:	009b      	lsls	r3, r3, #2
    5186:	4403      	add	r3, r0
    5188:	3304      	adds	r3, #4
    518a:	6019      	str	r1, [r3, #0]
                break;
    518c:	e022      	b.n	51d4 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    518e:	4b15      	ldr	r3, [pc, #84]	; (51e4 <getCoreDividerConfig+0x148>)
    5190:	699b      	ldr	r3, [r3, #24]
    5192:	0c1b      	lsrs	r3, r3, #16
    5194:	f003 030f 	and.w	r3, r3, #15
    5198:	1c59      	adds	r1, r3, #1
    519a:	4811      	ldr	r0, [pc, #68]	; (51e0 <getCoreDividerConfig+0x144>)
    519c:	9a04      	ldr	r2, [sp, #16]
    519e:	4613      	mov	r3, r2
    51a0:	005b      	lsls	r3, r3, #1
    51a2:	4413      	add	r3, r2
    51a4:	009b      	lsls	r3, r3, #2
    51a6:	4403      	add	r3, r0
    51a8:	3304      	adds	r3, #4
    51aa:	6019      	str	r1, [r3, #0]
                break;
    51ac:	e012      	b.n	51d4 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    51ae:	4b0d      	ldr	r3, [pc, #52]	; (51e4 <getCoreDividerConfig+0x148>)
    51b0:	69db      	ldr	r3, [r3, #28]
    51b2:	0c1b      	lsrs	r3, r3, #16
    51b4:	f003 030f 	and.w	r3, r3, #15
    51b8:	1c59      	adds	r1, r3, #1
    51ba:	4809      	ldr	r0, [pc, #36]	; (51e0 <getCoreDividerConfig+0x144>)
    51bc:	9a04      	ldr	r2, [sp, #16]
    51be:	4613      	mov	r3, r2
    51c0:	005b      	lsls	r3, r3, #1
    51c2:	4413      	add	r3, r2
    51c4:	009b      	lsls	r3, r3, #2
    51c6:	4403      	add	r3, r0
    51c8:	3304      	adds	r3, #4
    51ca:	6019      	str	r1, [r3, #0]
                break;
    51cc:	e002      	b.n	51d4 <getCoreDividerConfig+0x138>
        }
    }
    51ce:	bf00      	nop
    51d0:	e000      	b.n	51d4 <getCoreDividerConfig+0x138>
                break;
    51d2:	bf00      	nop

    return ReturnValue;
    51d4:	9b05      	ldr	r3, [sp, #20]
}
    51d6:	4618      	mov	r0, r3
    51d8:	b006      	add	sp, #24
    51da:	4770      	bx	lr
    51dc:	1fff8b9c 	.word	0x1fff8b9c
    51e0:	1fff8c68 	.word	0x1fff8c68
    51e4:	40064000 	.word	0x40064000

000051e8 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    51e8:	b086      	sub	sp, #24
    51ea:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    51ec:	2300      	movs	r3, #0
    51ee:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    51f0:	2300      	movs	r3, #0
    51f2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    51f4:	9b01      	ldr	r3, [sp, #4]
    51f6:	2b23      	cmp	r3, #35	; 0x23
    51f8:	d00f      	beq.n	521a <getBusDividerConfig+0x32>
    51fa:	9b01      	ldr	r3, [sp, #4]
    51fc:	2b23      	cmp	r3, #35	; 0x23
    51fe:	d80f      	bhi.n	5220 <getBusDividerConfig+0x38>
    5200:	9b01      	ldr	r3, [sp, #4]
    5202:	2b21      	cmp	r3, #33	; 0x21
    5204:	d003      	beq.n	520e <getBusDividerConfig+0x26>
    5206:	9b01      	ldr	r3, [sp, #4]
    5208:	2b22      	cmp	r3, #34	; 0x22
    520a:	d003      	beq.n	5214 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    520c:	e008      	b.n	5220 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    520e:	2300      	movs	r3, #0
    5210:	9304      	str	r3, [sp, #16]
            break;
    5212:	e006      	b.n	5222 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5214:	2301      	movs	r3, #1
    5216:	9304      	str	r3, [sp, #16]
            break;
    5218:	e003      	b.n	5222 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    521a:	2302      	movs	r3, #2
    521c:	9304      	str	r3, [sp, #16]
            break;
    521e:	e000      	b.n	5222 <getBusDividerConfig+0x3a>
                break;
    5220:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5222:	4b41      	ldr	r3, [pc, #260]	; (5328 <getBusDividerConfig+0x140>)
    5224:	681b      	ldr	r3, [r3, #0]
    5226:	2b00      	cmp	r3, #0
    5228:	d026      	beq.n	5278 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    522a:	2300      	movs	r3, #0
    522c:	9303      	str	r3, [sp, #12]
    522e:	e01c      	b.n	526a <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5230:	4b3d      	ldr	r3, [pc, #244]	; (5328 <getBusDividerConfig+0x140>)
    5232:	6819      	ldr	r1, [r3, #0]
    5234:	9a03      	ldr	r2, [sp, #12]
    5236:	4613      	mov	r3, r2
    5238:	005b      	lsls	r3, r3, #1
    523a:	4413      	add	r3, r2
    523c:	009b      	lsls	r3, r3, #2
    523e:	440b      	add	r3, r1
    5240:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5244:	681b      	ldr	r3, [r3, #0]
    5246:	9a01      	ldr	r2, [sp, #4]
    5248:	429a      	cmp	r2, r3
    524a:	d10b      	bne.n	5264 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    524c:	4b36      	ldr	r3, [pc, #216]	; (5328 <getBusDividerConfig+0x140>)
    524e:	6819      	ldr	r1, [r3, #0]
    5250:	9a03      	ldr	r2, [sp, #12]
    5252:	4613      	mov	r3, r2
    5254:	005b      	lsls	r3, r3, #1
    5256:	4413      	add	r3, r2
    5258:	009b      	lsls	r3, r3, #2
    525a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    525e:	440b      	add	r3, r1
    5260:	9305      	str	r3, [sp, #20]
                break;
    5262:	e009      	b.n	5278 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5264:	9b03      	ldr	r3, [sp, #12]
    5266:	3301      	adds	r3, #1
    5268:	9303      	str	r3, [sp, #12]
    526a:	4b2f      	ldr	r3, [pc, #188]	; (5328 <getBusDividerConfig+0x140>)
    526c:	681b      	ldr	r3, [r3, #0]
    526e:	7b1b      	ldrb	r3, [r3, #12]
    5270:	461a      	mov	r2, r3
    5272:	9b03      	ldr	r3, [sp, #12]
    5274:	4293      	cmp	r3, r2
    5276:	d3db      	bcc.n	5230 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5278:	9b05      	ldr	r3, [sp, #20]
    527a:	2b00      	cmp	r3, #0
    527c:	d14d      	bne.n	531a <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    527e:	9a04      	ldr	r2, [sp, #16]
    5280:	4613      	mov	r3, r2
    5282:	005b      	lsls	r3, r3, #1
    5284:	4413      	add	r3, r2
    5286:	009b      	lsls	r3, r3, #2
    5288:	4a28      	ldr	r2, [pc, #160]	; (532c <getBusDividerConfig+0x144>)
    528a:	4413      	add	r3, r2
    528c:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    528e:	4927      	ldr	r1, [pc, #156]	; (532c <getBusDividerConfig+0x144>)
    5290:	9a04      	ldr	r2, [sp, #16]
    5292:	4613      	mov	r3, r2
    5294:	005b      	lsls	r3, r3, #1
    5296:	4413      	add	r3, r2
    5298:	009b      	lsls	r3, r3, #2
    529a:	440b      	add	r3, r1
    529c:	9a01      	ldr	r2, [sp, #4]
    529e:	601a      	str	r2, [r3, #0]
        switch(Name)
    52a0:	9b01      	ldr	r3, [sp, #4]
    52a2:	2b23      	cmp	r3, #35	; 0x23
    52a4:	d029      	beq.n	52fa <getBusDividerConfig+0x112>
    52a6:	9b01      	ldr	r3, [sp, #4]
    52a8:	2b23      	cmp	r3, #35	; 0x23
    52aa:	d838      	bhi.n	531e <getBusDividerConfig+0x136>
    52ac:	9b01      	ldr	r3, [sp, #4]
    52ae:	2b21      	cmp	r3, #33	; 0x21
    52b0:	d003      	beq.n	52ba <getBusDividerConfig+0xd2>
    52b2:	9b01      	ldr	r3, [sp, #4]
    52b4:	2b22      	cmp	r3, #34	; 0x22
    52b6:	d010      	beq.n	52da <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    52b8:	e031      	b.n	531e <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    52ba:	4b1d      	ldr	r3, [pc, #116]	; (5330 <getBusDividerConfig+0x148>)
    52bc:	695b      	ldr	r3, [r3, #20]
    52be:	091b      	lsrs	r3, r3, #4
    52c0:	f003 030f 	and.w	r3, r3, #15
    52c4:	1c59      	adds	r1, r3, #1
    52c6:	4819      	ldr	r0, [pc, #100]	; (532c <getBusDividerConfig+0x144>)
    52c8:	9a04      	ldr	r2, [sp, #16]
    52ca:	4613      	mov	r3, r2
    52cc:	005b      	lsls	r3, r3, #1
    52ce:	4413      	add	r3, r2
    52d0:	009b      	lsls	r3, r3, #2
    52d2:	4403      	add	r3, r0
    52d4:	3304      	adds	r3, #4
    52d6:	6019      	str	r1, [r3, #0]
                break;
    52d8:	e022      	b.n	5320 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    52da:	4b15      	ldr	r3, [pc, #84]	; (5330 <getBusDividerConfig+0x148>)
    52dc:	699b      	ldr	r3, [r3, #24]
    52de:	091b      	lsrs	r3, r3, #4
    52e0:	f003 030f 	and.w	r3, r3, #15
    52e4:	1c59      	adds	r1, r3, #1
    52e6:	4811      	ldr	r0, [pc, #68]	; (532c <getBusDividerConfig+0x144>)
    52e8:	9a04      	ldr	r2, [sp, #16]
    52ea:	4613      	mov	r3, r2
    52ec:	005b      	lsls	r3, r3, #1
    52ee:	4413      	add	r3, r2
    52f0:	009b      	lsls	r3, r3, #2
    52f2:	4403      	add	r3, r0
    52f4:	3304      	adds	r3, #4
    52f6:	6019      	str	r1, [r3, #0]
                break;
    52f8:	e012      	b.n	5320 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    52fa:	4b0d      	ldr	r3, [pc, #52]	; (5330 <getBusDividerConfig+0x148>)
    52fc:	69db      	ldr	r3, [r3, #28]
    52fe:	091b      	lsrs	r3, r3, #4
    5300:	f003 030f 	and.w	r3, r3, #15
    5304:	1c59      	adds	r1, r3, #1
    5306:	4809      	ldr	r0, [pc, #36]	; (532c <getBusDividerConfig+0x144>)
    5308:	9a04      	ldr	r2, [sp, #16]
    530a:	4613      	mov	r3, r2
    530c:	005b      	lsls	r3, r3, #1
    530e:	4413      	add	r3, r2
    5310:	009b      	lsls	r3, r3, #2
    5312:	4403      	add	r3, r0
    5314:	3304      	adds	r3, #4
    5316:	6019      	str	r1, [r3, #0]
                break;
    5318:	e002      	b.n	5320 <getBusDividerConfig+0x138>
        }
    }
    531a:	bf00      	nop
    531c:	e000      	b.n	5320 <getBusDividerConfig+0x138>
                break;
    531e:	bf00      	nop

    return ReturnValue;
    5320:	9b05      	ldr	r3, [sp, #20]
}
    5322:	4618      	mov	r0, r3
    5324:	b006      	add	sp, #24
    5326:	4770      	bx	lr
    5328:	1fff8b9c 	.word	0x1fff8b9c
    532c:	1fff8c8c 	.word	0x1fff8c8c
    5330:	40064000 	.word	0x40064000

00005334 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5334:	b086      	sub	sp, #24
    5336:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5338:	2300      	movs	r3, #0
    533a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    533c:	2300      	movs	r3, #0
    533e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5340:	9b01      	ldr	r3, [sp, #4]
    5342:	2b27      	cmp	r3, #39	; 0x27
    5344:	d00f      	beq.n	5366 <getSlowDividerConfig+0x32>
    5346:	9b01      	ldr	r3, [sp, #4]
    5348:	2b27      	cmp	r3, #39	; 0x27
    534a:	d80f      	bhi.n	536c <getSlowDividerConfig+0x38>
    534c:	9b01      	ldr	r3, [sp, #4]
    534e:	2b25      	cmp	r3, #37	; 0x25
    5350:	d003      	beq.n	535a <getSlowDividerConfig+0x26>
    5352:	9b01      	ldr	r3, [sp, #4]
    5354:	2b26      	cmp	r3, #38	; 0x26
    5356:	d003      	beq.n	5360 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5358:	e008      	b.n	536c <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    535a:	2300      	movs	r3, #0
    535c:	9304      	str	r3, [sp, #16]
            break;
    535e:	e006      	b.n	536e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5360:	2301      	movs	r3, #1
    5362:	9304      	str	r3, [sp, #16]
            break;
    5364:	e003      	b.n	536e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5366:	2302      	movs	r3, #2
    5368:	9304      	str	r3, [sp, #16]
            break;
    536a:	e000      	b.n	536e <getSlowDividerConfig+0x3a>
                break;
    536c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    536e:	4b40      	ldr	r3, [pc, #256]	; (5470 <getSlowDividerConfig+0x13c>)
    5370:	681b      	ldr	r3, [r3, #0]
    5372:	2b00      	cmp	r3, #0
    5374:	d026      	beq.n	53c4 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5376:	2300      	movs	r3, #0
    5378:	9303      	str	r3, [sp, #12]
    537a:	e01c      	b.n	53b6 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    537c:	4b3c      	ldr	r3, [pc, #240]	; (5470 <getSlowDividerConfig+0x13c>)
    537e:	6819      	ldr	r1, [r3, #0]
    5380:	9a03      	ldr	r2, [sp, #12]
    5382:	4613      	mov	r3, r2
    5384:	005b      	lsls	r3, r3, #1
    5386:	4413      	add	r3, r2
    5388:	009b      	lsls	r3, r3, #2
    538a:	440b      	add	r3, r1
    538c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5390:	681b      	ldr	r3, [r3, #0]
    5392:	9a01      	ldr	r2, [sp, #4]
    5394:	429a      	cmp	r2, r3
    5396:	d10b      	bne.n	53b0 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5398:	4b35      	ldr	r3, [pc, #212]	; (5470 <getSlowDividerConfig+0x13c>)
    539a:	6819      	ldr	r1, [r3, #0]
    539c:	9a03      	ldr	r2, [sp, #12]
    539e:	4613      	mov	r3, r2
    53a0:	005b      	lsls	r3, r3, #1
    53a2:	4413      	add	r3, r2
    53a4:	009b      	lsls	r3, r3, #2
    53a6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    53aa:	440b      	add	r3, r1
    53ac:	9305      	str	r3, [sp, #20]
                break;
    53ae:	e009      	b.n	53c4 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    53b0:	9b03      	ldr	r3, [sp, #12]
    53b2:	3301      	adds	r3, #1
    53b4:	9303      	str	r3, [sp, #12]
    53b6:	4b2e      	ldr	r3, [pc, #184]	; (5470 <getSlowDividerConfig+0x13c>)
    53b8:	681b      	ldr	r3, [r3, #0]
    53ba:	7b1b      	ldrb	r3, [r3, #12]
    53bc:	461a      	mov	r2, r3
    53be:	9b03      	ldr	r3, [sp, #12]
    53c0:	4293      	cmp	r3, r2
    53c2:	d3db      	bcc.n	537c <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    53c4:	9b05      	ldr	r3, [sp, #20]
    53c6:	2b00      	cmp	r3, #0
    53c8:	d14a      	bne.n	5460 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    53ca:	9a04      	ldr	r2, [sp, #16]
    53cc:	4613      	mov	r3, r2
    53ce:	005b      	lsls	r3, r3, #1
    53d0:	4413      	add	r3, r2
    53d2:	009b      	lsls	r3, r3, #2
    53d4:	4a27      	ldr	r2, [pc, #156]	; (5474 <getSlowDividerConfig+0x140>)
    53d6:	4413      	add	r3, r2
    53d8:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    53da:	4926      	ldr	r1, [pc, #152]	; (5474 <getSlowDividerConfig+0x140>)
    53dc:	9a04      	ldr	r2, [sp, #16]
    53de:	4613      	mov	r3, r2
    53e0:	005b      	lsls	r3, r3, #1
    53e2:	4413      	add	r3, r2
    53e4:	009b      	lsls	r3, r3, #2
    53e6:	440b      	add	r3, r1
    53e8:	9a01      	ldr	r2, [sp, #4]
    53ea:	601a      	str	r2, [r3, #0]
        switch(Name)
    53ec:	9b01      	ldr	r3, [sp, #4]
    53ee:	2b27      	cmp	r3, #39	; 0x27
    53f0:	d027      	beq.n	5442 <getSlowDividerConfig+0x10e>
    53f2:	9b01      	ldr	r3, [sp, #4]
    53f4:	2b27      	cmp	r3, #39	; 0x27
    53f6:	d835      	bhi.n	5464 <getSlowDividerConfig+0x130>
    53f8:	9b01      	ldr	r3, [sp, #4]
    53fa:	2b25      	cmp	r3, #37	; 0x25
    53fc:	d003      	beq.n	5406 <getSlowDividerConfig+0xd2>
    53fe:	9b01      	ldr	r3, [sp, #4]
    5400:	2b26      	cmp	r3, #38	; 0x26
    5402:	d00f      	beq.n	5424 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5404:	e02e      	b.n	5464 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5406:	4b1c      	ldr	r3, [pc, #112]	; (5478 <getSlowDividerConfig+0x144>)
    5408:	695b      	ldr	r3, [r3, #20]
    540a:	f003 030f 	and.w	r3, r3, #15
    540e:	1c59      	adds	r1, r3, #1
    5410:	4818      	ldr	r0, [pc, #96]	; (5474 <getSlowDividerConfig+0x140>)
    5412:	9a04      	ldr	r2, [sp, #16]
    5414:	4613      	mov	r3, r2
    5416:	005b      	lsls	r3, r3, #1
    5418:	4413      	add	r3, r2
    541a:	009b      	lsls	r3, r3, #2
    541c:	4403      	add	r3, r0
    541e:	3304      	adds	r3, #4
    5420:	6019      	str	r1, [r3, #0]
                break;
    5422:	e020      	b.n	5466 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5424:	4b14      	ldr	r3, [pc, #80]	; (5478 <getSlowDividerConfig+0x144>)
    5426:	699b      	ldr	r3, [r3, #24]
    5428:	f003 030f 	and.w	r3, r3, #15
    542c:	1c59      	adds	r1, r3, #1
    542e:	4811      	ldr	r0, [pc, #68]	; (5474 <getSlowDividerConfig+0x140>)
    5430:	9a04      	ldr	r2, [sp, #16]
    5432:	4613      	mov	r3, r2
    5434:	005b      	lsls	r3, r3, #1
    5436:	4413      	add	r3, r2
    5438:	009b      	lsls	r3, r3, #2
    543a:	4403      	add	r3, r0
    543c:	3304      	adds	r3, #4
    543e:	6019      	str	r1, [r3, #0]
                break;
    5440:	e011      	b.n	5466 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5442:	4b0d      	ldr	r3, [pc, #52]	; (5478 <getSlowDividerConfig+0x144>)
    5444:	69db      	ldr	r3, [r3, #28]
    5446:	f003 030f 	and.w	r3, r3, #15
    544a:	1c59      	adds	r1, r3, #1
    544c:	4809      	ldr	r0, [pc, #36]	; (5474 <getSlowDividerConfig+0x140>)
    544e:	9a04      	ldr	r2, [sp, #16]
    5450:	4613      	mov	r3, r2
    5452:	005b      	lsls	r3, r3, #1
    5454:	4413      	add	r3, r2
    5456:	009b      	lsls	r3, r3, #2
    5458:	4403      	add	r3, r0
    545a:	3304      	adds	r3, #4
    545c:	6019      	str	r1, [r3, #0]
                break;
    545e:	e002      	b.n	5466 <getSlowDividerConfig+0x132>
        }
    }
    5460:	bf00      	nop
    5462:	e000      	b.n	5466 <getSlowDividerConfig+0x132>
                break;
    5464:	bf00      	nop

    return ReturnValue;
    5466:	9b05      	ldr	r3, [sp, #20]
}
    5468:	4618      	mov	r0, r3
    546a:	b006      	add	sp, #24
    546c:	4770      	bx	lr
    546e:	bf00      	nop
    5470:	1fff8b9c 	.word	0x1fff8b9c
    5474:	1fff8cb0 	.word	0x1fff8cb0
    5478:	40064000 	.word	0x40064000

0000547c <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    547c:	b500      	push	{lr}
    547e:	b083      	sub	sp, #12
    5480:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5482:	4b64      	ldr	r3, [pc, #400]	; (5614 <Clock_Ip_ClockInitializeObjects+0x198>)
    5484:	781b      	ldrb	r3, [r3, #0]
    5486:	f083 0301 	eor.w	r3, r3, #1
    548a:	b2db      	uxtb	r3, r3
    548c:	2b00      	cmp	r3, #0
    548e:	d05b      	beq.n	5548 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5490:	4b60      	ldr	r3, [pc, #384]	; (5614 <Clock_Ip_ClockInitializeObjects+0x198>)
    5492:	2201      	movs	r2, #1
    5494:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5496:	4b60      	ldr	r3, [pc, #384]	; (5618 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5498:	785b      	ldrb	r3, [r3, #1]
    549a:	461a      	mov	r2, r3
    549c:	4613      	mov	r3, r2
    549e:	009b      	lsls	r3, r3, #2
    54a0:	4413      	add	r3, r2
    54a2:	009b      	lsls	r3, r3, #2
    54a4:	4a5d      	ldr	r2, [pc, #372]	; (561c <Clock_Ip_ClockInitializeObjects+0x1a0>)
    54a6:	4413      	add	r3, r2
    54a8:	4a5d      	ldr	r2, [pc, #372]	; (5620 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    54aa:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    54ac:	4b5d      	ldr	r3, [pc, #372]	; (5624 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    54ae:	785b      	ldrb	r3, [r3, #1]
    54b0:	461a      	mov	r2, r3
    54b2:	4613      	mov	r3, r2
    54b4:	009b      	lsls	r3, r3, #2
    54b6:	4413      	add	r3, r2
    54b8:	009b      	lsls	r3, r3, #2
    54ba:	4a5b      	ldr	r2, [pc, #364]	; (5628 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    54bc:	4413      	add	r3, r2
    54be:	4a5b      	ldr	r2, [pc, #364]	; (562c <Clock_Ip_ClockInitializeObjects+0x1b0>)
    54c0:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    54c2:	4b5b      	ldr	r3, [pc, #364]	; (5630 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    54c4:	791b      	ldrb	r3, [r3, #4]
    54c6:	461a      	mov	r2, r3
    54c8:	4613      	mov	r3, r2
    54ca:	005b      	lsls	r3, r3, #1
    54cc:	4413      	add	r3, r2
    54ce:	009b      	lsls	r3, r3, #2
    54d0:	4a58      	ldr	r2, [pc, #352]	; (5634 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    54d2:	4413      	add	r3, r2
    54d4:	4a58      	ldr	r2, [pc, #352]	; (5638 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    54d6:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    54d8:	4b58      	ldr	r3, [pc, #352]	; (563c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    54da:	795b      	ldrb	r3, [r3, #5]
    54dc:	00db      	lsls	r3, r3, #3
    54de:	4a58      	ldr	r2, [pc, #352]	; (5640 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    54e0:	4413      	add	r3, r2
    54e2:	4a58      	ldr	r2, [pc, #352]	; (5644 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    54e4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    54e6:	4b55      	ldr	r3, [pc, #340]	; (563c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    54e8:	79db      	ldrb	r3, [r3, #7]
    54ea:	00db      	lsls	r3, r3, #3
    54ec:	4a54      	ldr	r2, [pc, #336]	; (5640 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    54ee:	4413      	add	r3, r2
    54f0:	4a55      	ldr	r2, [pc, #340]	; (5648 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    54f2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    54f4:	4b55      	ldr	r3, [pc, #340]	; (564c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54f6:	799b      	ldrb	r3, [r3, #6]
    54f8:	009b      	lsls	r3, r3, #2
    54fa:	4a55      	ldr	r2, [pc, #340]	; (5650 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54fc:	4413      	add	r3, r2
    54fe:	4a55      	ldr	r2, [pc, #340]	; (5654 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5500:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5502:	4b52      	ldr	r3, [pc, #328]	; (564c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5504:	7a1b      	ldrb	r3, [r3, #8]
    5506:	009b      	lsls	r3, r3, #2
    5508:	4a51      	ldr	r2, [pc, #324]	; (5650 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    550a:	4413      	add	r3, r2
    550c:	4a52      	ldr	r2, [pc, #328]	; (5658 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    550e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5510:	4b4e      	ldr	r3, [pc, #312]	; (564c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5512:	7a5b      	ldrb	r3, [r3, #9]
    5514:	009b      	lsls	r3, r3, #2
    5516:	4a4e      	ldr	r2, [pc, #312]	; (5650 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5518:	4413      	add	r3, r2
    551a:	4a50      	ldr	r2, [pc, #320]	; (565c <Clock_Ip_ClockInitializeObjects+0x1e0>)
    551c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    551e:	4b4b      	ldr	r3, [pc, #300]	; (564c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5520:	7adb      	ldrb	r3, [r3, #11]
    5522:	009b      	lsls	r3, r3, #2
    5524:	4a4a      	ldr	r2, [pc, #296]	; (5650 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5526:	4413      	add	r3, r2
    5528:	4a4d      	ldr	r2, [pc, #308]	; (5660 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    552a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    552c:	4b47      	ldr	r3, [pc, #284]	; (564c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    552e:	7b1b      	ldrb	r3, [r3, #12]
    5530:	009b      	lsls	r3, r3, #2
    5532:	4a47      	ldr	r2, [pc, #284]	; (5650 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5534:	4413      	add	r3, r2
    5536:	4a4b      	ldr	r2, [pc, #300]	; (5664 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5538:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    553a:	4b44      	ldr	r3, [pc, #272]	; (564c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    553c:	7b9b      	ldrb	r3, [r3, #14]
    553e:	009b      	lsls	r3, r3, #2
    5540:	4a43      	ldr	r2, [pc, #268]	; (5650 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5542:	4413      	add	r3, r2
    5544:	4a48      	ldr	r2, [pc, #288]	; (5668 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5546:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5548:	4b48      	ldr	r3, [pc, #288]	; (566c <Clock_Ip_ClockInitializeObjects+0x1f0>)
    554a:	781b      	ldrb	r3, [r3, #0]
    554c:	2b00      	cmp	r3, #0
    554e:	d002      	beq.n	5556 <Clock_Ip_ClockInitializeObjects+0xda>
    5550:	9b01      	ldr	r3, [sp, #4]
    5552:	2b00      	cmp	r3, #0
    5554:	d003      	beq.n	555e <Clock_Ip_ClockInitializeObjects+0xe2>
    5556:	4b46      	ldr	r3, [pc, #280]	; (5670 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5558:	781b      	ldrb	r3, [r3, #0]
    555a:	2b00      	cmp	r3, #0
    555c:	d056      	beq.n	560c <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    555e:	f7ff fc09 	bl	4d74 <getFircConfig>
    5562:	4603      	mov	r3, r0
    5564:	4a43      	ldr	r2, [pc, #268]	; (5674 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5566:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5568:	f7ff fc60 	bl	4e2c <getSoscConfig>
    556c:	4603      	mov	r3, r0
    556e:	4a42      	ldr	r2, [pc, #264]	; (5678 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5570:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5572:	f7ff fca7 	bl	4ec4 <getSpllConfig>
    5576:	4603      	mov	r3, r0
    5578:	4a40      	ldr	r2, [pc, #256]	; (567c <Clock_Ip_ClockInitializeObjects+0x200>)
    557a:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    557c:	2019      	movs	r0, #25
    557e:	f7ff fcfb 	bl	4f78 <getSelectorConfig>
    5582:	4603      	mov	r3, r0
    5584:	4a3e      	ldr	r2, [pc, #248]	; (5680 <Clock_Ip_ClockInitializeObjects+0x204>)
    5586:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5588:	201a      	movs	r0, #26
    558a:	f7ff fcf5 	bl	4f78 <getSelectorConfig>
    558e:	4603      	mov	r3, r0
    5590:	4a3c      	ldr	r2, [pc, #240]	; (5684 <Clock_Ip_ClockInitializeObjects+0x208>)
    5592:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5594:	201b      	movs	r0, #27
    5596:	f7ff fcef 	bl	4f78 <getSelectorConfig>
    559a:	4603      	mov	r3, r0
    559c:	4a3a      	ldr	r2, [pc, #232]	; (5688 <Clock_Ip_ClockInitializeObjects+0x20c>)
    559e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    55a0:	201d      	movs	r0, #29
    55a2:	f7ff fd7b 	bl	509c <getCoreDividerConfig>
    55a6:	4603      	mov	r3, r0
    55a8:	4a38      	ldr	r2, [pc, #224]	; (568c <Clock_Ip_ClockInitializeObjects+0x210>)
    55aa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    55ac:	201e      	movs	r0, #30
    55ae:	f7ff fd75 	bl	509c <getCoreDividerConfig>
    55b2:	4603      	mov	r3, r0
    55b4:	4a36      	ldr	r2, [pc, #216]	; (5690 <Clock_Ip_ClockInitializeObjects+0x214>)
    55b6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    55b8:	201f      	movs	r0, #31
    55ba:	f7ff fd6f 	bl	509c <getCoreDividerConfig>
    55be:	4603      	mov	r3, r0
    55c0:	4a34      	ldr	r2, [pc, #208]	; (5694 <Clock_Ip_ClockInitializeObjects+0x218>)
    55c2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    55c4:	2021      	movs	r0, #33	; 0x21
    55c6:	f7ff fe0f 	bl	51e8 <getBusDividerConfig>
    55ca:	4603      	mov	r3, r0
    55cc:	4a32      	ldr	r2, [pc, #200]	; (5698 <Clock_Ip_ClockInitializeObjects+0x21c>)
    55ce:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    55d0:	2022      	movs	r0, #34	; 0x22
    55d2:	f7ff fe09 	bl	51e8 <getBusDividerConfig>
    55d6:	4603      	mov	r3, r0
    55d8:	4a30      	ldr	r2, [pc, #192]	; (569c <Clock_Ip_ClockInitializeObjects+0x220>)
    55da:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    55dc:	2023      	movs	r0, #35	; 0x23
    55de:	f7ff fe03 	bl	51e8 <getBusDividerConfig>
    55e2:	4603      	mov	r3, r0
    55e4:	4a2e      	ldr	r2, [pc, #184]	; (56a0 <Clock_Ip_ClockInitializeObjects+0x224>)
    55e6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    55e8:	2025      	movs	r0, #37	; 0x25
    55ea:	f7ff fea3 	bl	5334 <getSlowDividerConfig>
    55ee:	4603      	mov	r3, r0
    55f0:	4a2c      	ldr	r2, [pc, #176]	; (56a4 <Clock_Ip_ClockInitializeObjects+0x228>)
    55f2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    55f4:	2026      	movs	r0, #38	; 0x26
    55f6:	f7ff fe9d 	bl	5334 <getSlowDividerConfig>
    55fa:	4603      	mov	r3, r0
    55fc:	4a2a      	ldr	r2, [pc, #168]	; (56a8 <Clock_Ip_ClockInitializeObjects+0x22c>)
    55fe:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5600:	2027      	movs	r0, #39	; 0x27
    5602:	f7ff fe97 	bl	5334 <getSlowDividerConfig>
    5606:	4603      	mov	r3, r0
    5608:	4a28      	ldr	r2, [pc, #160]	; (56ac <Clock_Ip_ClockInitializeObjects+0x230>)
    560a:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    560c:	bf00      	nop
    560e:	b003      	add	sp, #12
    5610:	f85d fb04 	ldr.w	pc, [sp], #4
    5614:	1fff8cd4 	.word	0x1fff8cd4
    5618:	00017de8 	.word	0x00017de8
    561c:	00018434 	.word	0x00018434
    5620:	1fff8ba0 	.word	0x1fff8ba0
    5624:	00017da8 	.word	0x00017da8
    5628:	0001837c 	.word	0x0001837c
    562c:	1fff8ba4 	.word	0x1fff8ba4
    5630:	00017db8 	.word	0x00017db8
    5634:	000183e8 	.word	0x000183e8
    5638:	1fff8ba8 	.word	0x1fff8ba8
    563c:	00017df8 	.word	0x00017df8
    5640:	00018460 	.word	0x00018460
    5644:	1fff8bac 	.word	0x1fff8bac
    5648:	1fff8be8 	.word	0x1fff8be8
    564c:	00017d88 	.word	0x00017d88
    5650:	00018338 	.word	0x00018338
    5654:	1fff8bb0 	.word	0x1fff8bb0
    5658:	1fff8bec 	.word	0x1fff8bec
    565c:	1fff8bb4 	.word	0x1fff8bb4
    5660:	1fff8bf0 	.word	0x1fff8bf0
    5664:	1fff8bb8 	.word	0x1fff8bb8
    5668:	1fff8bf4 	.word	0x1fff8bf4
    566c:	1fff8b19 	.word	0x1fff8b19
    5670:	1fff8b10 	.word	0x1fff8b10
    5674:	1fff8bbc 	.word	0x1fff8bbc
    5678:	1fff8bc0 	.word	0x1fff8bc0
    567c:	1fff8bc4 	.word	0x1fff8bc4
    5680:	1fff8bc8 	.word	0x1fff8bc8
    5684:	1fff8bcc 	.word	0x1fff8bcc
    5688:	1fff8bf8 	.word	0x1fff8bf8
    568c:	1fff8bd0 	.word	0x1fff8bd0
    5690:	1fff8bd4 	.word	0x1fff8bd4
    5694:	1fff8bfc 	.word	0x1fff8bfc
    5698:	1fff8bd8 	.word	0x1fff8bd8
    569c:	1fff8bdc 	.word	0x1fff8bdc
    56a0:	1fff8c00 	.word	0x1fff8c00
    56a4:	1fff8be0 	.word	0x1fff8be0
    56a8:	1fff8be4 	.word	0x1fff8be4
    56ac:	1fff8c04 	.word	0x1fff8c04

000056b0 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    56b0:	b500      	push	{lr}
    56b2:	b083      	sub	sp, #12
    56b4:	9001      	str	r0, [sp, #4]
    56b6:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    56b8:	9b01      	ldr	r3, [sp, #4]
    56ba:	2b03      	cmp	r3, #3
    56bc:	f000 8090 	beq.w	57e0 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    56c0:	9b01      	ldr	r3, [sp, #4]
    56c2:	2b03      	cmp	r3, #3
    56c4:	f200 80d3 	bhi.w	586e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    56c8:	9b01      	ldr	r3, [sp, #4]
    56ca:	2b00      	cmp	r3, #0
    56cc:	d040      	beq.n	5750 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    56ce:	9b01      	ldr	r3, [sp, #4]
    56d0:	3b01      	subs	r3, #1
    56d2:	2b01      	cmp	r3, #1
    56d4:	f200 80cb 	bhi.w	586e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    56d8:	9b00      	ldr	r3, [sp, #0]
    56da:	2b00      	cmp	r3, #0
    56dc:	f040 80c9 	bne.w	5872 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    56e0:	4b68      	ldr	r3, [pc, #416]	; (5884 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    56e2:	2200      	movs	r2, #0
    56e4:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    56e6:	4b68      	ldr	r3, [pc, #416]	; (5888 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    56e8:	681b      	ldr	r3, [r3, #0]
    56ea:	685b      	ldr	r3, [r3, #4]
    56ec:	4a67      	ldr	r2, [pc, #412]	; (588c <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    56ee:	6812      	ldr	r2, [r2, #0]
    56f0:	4610      	mov	r0, r2
    56f2:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    56f4:	4b66      	ldr	r3, [pc, #408]	; (5890 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    56f6:	681b      	ldr	r3, [r3, #0]
    56f8:	681b      	ldr	r3, [r3, #0]
    56fa:	4a66      	ldr	r2, [pc, #408]	; (5894 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    56fc:	6812      	ldr	r2, [r2, #0]
    56fe:	4610      	mov	r0, r2
    5700:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5702:	4b65      	ldr	r3, [pc, #404]	; (5898 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5704:	681b      	ldr	r3, [r3, #0]
    5706:	681b      	ldr	r3, [r3, #0]
    5708:	4a64      	ldr	r2, [pc, #400]	; (589c <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    570a:	6812      	ldr	r2, [r2, #0]
    570c:	4610      	mov	r0, r2
    570e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5710:	4b63      	ldr	r3, [pc, #396]	; (58a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5712:	681b      	ldr	r3, [r3, #0]
    5714:	681b      	ldr	r3, [r3, #0]
    5716:	4a63      	ldr	r2, [pc, #396]	; (58a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5718:	6812      	ldr	r2, [r2, #0]
    571a:	4610      	mov	r0, r2
    571c:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    571e:	4b62      	ldr	r3, [pc, #392]	; (58a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5720:	681b      	ldr	r3, [r3, #0]
    5722:	691b      	ldr	r3, [r3, #16]
    5724:	4a61      	ldr	r2, [pc, #388]	; (58ac <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5726:	6812      	ldr	r2, [r2, #0]
    5728:	6812      	ldr	r2, [r2, #0]
    572a:	4610      	mov	r0, r2
    572c:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    572e:	4b60      	ldr	r3, [pc, #384]	; (58b0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5730:	681b      	ldr	r3, [r3, #0]
    5732:	68db      	ldr	r3, [r3, #12]
    5734:	4a5f      	ldr	r2, [pc, #380]	; (58b4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5736:	6812      	ldr	r2, [r2, #0]
    5738:	6812      	ldr	r2, [r2, #0]
    573a:	4610      	mov	r0, r2
    573c:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    573e:	4b5e      	ldr	r3, [pc, #376]	; (58b8 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5740:	681b      	ldr	r3, [r3, #0]
    5742:	689b      	ldr	r3, [r3, #8]
    5744:	4a5d      	ldr	r2, [pc, #372]	; (58bc <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5746:	6812      	ldr	r2, [r2, #0]
    5748:	6812      	ldr	r2, [r2, #0]
    574a:	4610      	mov	r0, r2
    574c:	4798      	blx	r3
            }
        }
        break;
    574e:	e090      	b.n	5872 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5750:	9b00      	ldr	r3, [sp, #0]
    5752:	2b02      	cmp	r3, #2
    5754:	f040 808f 	bne.w	5876 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5758:	4b4a      	ldr	r3, [pc, #296]	; (5884 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    575a:	2201      	movs	r2, #1
    575c:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    575e:	4b56      	ldr	r3, [pc, #344]	; (58b8 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5760:	681b      	ldr	r3, [r3, #0]
    5762:	685b      	ldr	r3, [r3, #4]
    5764:	4a55      	ldr	r2, [pc, #340]	; (58bc <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5766:	6812      	ldr	r2, [r2, #0]
    5768:	4610      	mov	r0, r2
    576a:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    576c:	4b50      	ldr	r3, [pc, #320]	; (58b0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    576e:	681b      	ldr	r3, [r3, #0]
    5770:	691b      	ldr	r3, [r3, #16]
    5772:	4a50      	ldr	r2, [pc, #320]	; (58b4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5774:	6812      	ldr	r2, [r2, #0]
    5776:	4610      	mov	r0, r2
    5778:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    577a:	4b4d      	ldr	r3, [pc, #308]	; (58b0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    577c:	681b      	ldr	r3, [r3, #0]
    577e:	689b      	ldr	r3, [r3, #8]
    5780:	4a4c      	ldr	r2, [pc, #304]	; (58b4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5782:	6812      	ldr	r2, [r2, #0]
    5784:	4610      	mov	r0, r2
    5786:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5788:	4b47      	ldr	r3, [pc, #284]	; (58a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	68db      	ldr	r3, [r3, #12]
    578e:	4a47      	ldr	r2, [pc, #284]	; (58ac <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5790:	6812      	ldr	r2, [r2, #0]
    5792:	4610      	mov	r0, r2
    5794:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5796:	4b44      	ldr	r3, [pc, #272]	; (58a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5798:	681b      	ldr	r3, [r3, #0]
    579a:	689b      	ldr	r3, [r3, #8]
    579c:	4a43      	ldr	r2, [pc, #268]	; (58ac <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    579e:	6812      	ldr	r2, [r2, #0]
    57a0:	6812      	ldr	r2, [r2, #0]
    57a2:	4610      	mov	r0, r2
    57a4:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    57a6:	4b38      	ldr	r3, [pc, #224]	; (5888 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    57a8:	681b      	ldr	r3, [r3, #0]
    57aa:	685b      	ldr	r3, [r3, #4]
    57ac:	4a44      	ldr	r2, [pc, #272]	; (58c0 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    57ae:	6812      	ldr	r2, [r2, #0]
    57b0:	4610      	mov	r0, r2
    57b2:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    57b4:	4b36      	ldr	r3, [pc, #216]	; (5890 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    57b6:	681b      	ldr	r3, [r3, #0]
    57b8:	681b      	ldr	r3, [r3, #0]
    57ba:	4a42      	ldr	r2, [pc, #264]	; (58c4 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    57bc:	6812      	ldr	r2, [r2, #0]
    57be:	4610      	mov	r0, r2
    57c0:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    57c2:	4b35      	ldr	r3, [pc, #212]	; (5898 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    57c4:	681b      	ldr	r3, [r3, #0]
    57c6:	681b      	ldr	r3, [r3, #0]
    57c8:	4a3f      	ldr	r2, [pc, #252]	; (58c8 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    57ca:	6812      	ldr	r2, [r2, #0]
    57cc:	4610      	mov	r0, r2
    57ce:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    57d0:	4b33      	ldr	r3, [pc, #204]	; (58a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    57d2:	681b      	ldr	r3, [r3, #0]
    57d4:	681b      	ldr	r3, [r3, #0]
    57d6:	4a3d      	ldr	r2, [pc, #244]	; (58cc <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    57d8:	6812      	ldr	r2, [r2, #0]
    57da:	4610      	mov	r0, r2
    57dc:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    57de:	e04a      	b.n	5876 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    57e0:	9b00      	ldr	r3, [sp, #0]
    57e2:	2b02      	cmp	r3, #2
    57e4:	d149      	bne.n	587a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    57e6:	4b27      	ldr	r3, [pc, #156]	; (5884 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    57e8:	2201      	movs	r2, #1
    57ea:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    57ec:	4b32      	ldr	r3, [pc, #200]	; (58b8 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    57ee:	681b      	ldr	r3, [r3, #0]
    57f0:	685b      	ldr	r3, [r3, #4]
    57f2:	4a32      	ldr	r2, [pc, #200]	; (58bc <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    57f4:	6812      	ldr	r2, [r2, #0]
    57f6:	4610      	mov	r0, r2
    57f8:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    57fa:	4b2d      	ldr	r3, [pc, #180]	; (58b0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    57fc:	681b      	ldr	r3, [r3, #0]
    57fe:	691b      	ldr	r3, [r3, #16]
    5800:	4a2c      	ldr	r2, [pc, #176]	; (58b4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5802:	6812      	ldr	r2, [r2, #0]
    5804:	4610      	mov	r0, r2
    5806:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5808:	4b29      	ldr	r3, [pc, #164]	; (58b0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	689b      	ldr	r3, [r3, #8]
    580e:	4a29      	ldr	r2, [pc, #164]	; (58b4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5810:	6812      	ldr	r2, [r2, #0]
    5812:	4610      	mov	r0, r2
    5814:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5816:	4b24      	ldr	r3, [pc, #144]	; (58a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5818:	681b      	ldr	r3, [r3, #0]
    581a:	68db      	ldr	r3, [r3, #12]
    581c:	4a23      	ldr	r2, [pc, #140]	; (58ac <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    581e:	6812      	ldr	r2, [r2, #0]
    5820:	4610      	mov	r0, r2
    5822:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5824:	4b20      	ldr	r3, [pc, #128]	; (58a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5826:	681b      	ldr	r3, [r3, #0]
    5828:	689b      	ldr	r3, [r3, #8]
    582a:	4a20      	ldr	r2, [pc, #128]	; (58ac <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    582c:	6812      	ldr	r2, [r2, #0]
    582e:	6812      	ldr	r2, [r2, #0]
    5830:	4610      	mov	r0, r2
    5832:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5834:	4b26      	ldr	r3, [pc, #152]	; (58d0 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5836:	681b      	ldr	r3, [r3, #0]
    5838:	685b      	ldr	r3, [r3, #4]
    583a:	4a26      	ldr	r2, [pc, #152]	; (58d4 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    583c:	6812      	ldr	r2, [r2, #0]
    583e:	4610      	mov	r0, r2
    5840:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5842:	4b25      	ldr	r3, [pc, #148]	; (58d8 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5844:	681b      	ldr	r3, [r3, #0]
    5846:	681b      	ldr	r3, [r3, #0]
    5848:	4a24      	ldr	r2, [pc, #144]	; (58dc <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    584a:	6812      	ldr	r2, [r2, #0]
    584c:	4610      	mov	r0, r2
    584e:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5850:	4b23      	ldr	r3, [pc, #140]	; (58e0 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5852:	681b      	ldr	r3, [r3, #0]
    5854:	681b      	ldr	r3, [r3, #0]
    5856:	4a23      	ldr	r2, [pc, #140]	; (58e4 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5858:	6812      	ldr	r2, [r2, #0]
    585a:	4610      	mov	r0, r2
    585c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    585e:	4b22      	ldr	r3, [pc, #136]	; (58e8 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5860:	681b      	ldr	r3, [r3, #0]
    5862:	681b      	ldr	r3, [r3, #0]
    5864:	4a21      	ldr	r2, [pc, #132]	; (58ec <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5866:	6812      	ldr	r2, [r2, #0]
    5868:	4610      	mov	r0, r2
    586a:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    586c:	e005      	b.n	587a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    586e:	bf00      	nop
    5870:	e004      	b.n	587c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5872:	bf00      	nop
    5874:	e002      	b.n	587c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5876:	bf00      	nop
    5878:	e000      	b.n	587c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    587a:	bf00      	nop
    }

}
    587c:	bf00      	nop
    587e:	b003      	add	sp, #12
    5880:	f85d fb04 	ldr.w	pc, [sp], #4
    5884:	1fff8b19 	.word	0x1fff8b19
    5888:	1fff8bac 	.word	0x1fff8bac
    588c:	1fff8bcc 	.word	0x1fff8bcc
    5890:	1fff8bb0 	.word	0x1fff8bb0
    5894:	1fff8bd4 	.word	0x1fff8bd4
    5898:	1fff8bb4 	.word	0x1fff8bb4
    589c:	1fff8bdc 	.word	0x1fff8bdc
    58a0:	1fff8bb8 	.word	0x1fff8bb8
    58a4:	1fff8be4 	.word	0x1fff8be4
    58a8:	1fff8ba0 	.word	0x1fff8ba0
    58ac:	1fff8bc4 	.word	0x1fff8bc4
    58b0:	1fff8ba4 	.word	0x1fff8ba4
    58b4:	1fff8bc0 	.word	0x1fff8bc0
    58b8:	1fff8ba8 	.word	0x1fff8ba8
    58bc:	1fff8bbc 	.word	0x1fff8bbc
    58c0:	1fff8bc8 	.word	0x1fff8bc8
    58c4:	1fff8bd0 	.word	0x1fff8bd0
    58c8:	1fff8bd8 	.word	0x1fff8bd8
    58cc:	1fff8be0 	.word	0x1fff8be0
    58d0:	1fff8be8 	.word	0x1fff8be8
    58d4:	1fff8bf8 	.word	0x1fff8bf8
    58d8:	1fff8bec 	.word	0x1fff8bec
    58dc:	1fff8bfc 	.word	0x1fff8bfc
    58e0:	1fff8bf0 	.word	0x1fff8bf0
    58e4:	1fff8c00 	.word	0x1fff8c00
    58e8:	1fff8bf4 	.word	0x1fff8bf4
    58ec:	1fff8c04 	.word	0x1fff8c04

000058f0 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    58f0:	b500      	push	{lr}
    58f2:	b083      	sub	sp, #12
    58f4:	9001      	str	r0, [sp, #4]
    58f6:	9100      	str	r1, [sp, #0]
    switch(Command)
    58f8:	9b00      	ldr	r3, [sp, #0]
    58fa:	2b04      	cmp	r3, #4
    58fc:	d010      	beq.n	5920 <Clock_Ip_Command+0x30>
    58fe:	9b00      	ldr	r3, [sp, #0]
    5900:	2b04      	cmp	r3, #4
    5902:	d811      	bhi.n	5928 <Clock_Ip_Command+0x38>
    5904:	9b00      	ldr	r3, [sp, #0]
    5906:	2b01      	cmp	r3, #1
    5908:	d006      	beq.n	5918 <Clock_Ip_Command+0x28>
    590a:	9b00      	ldr	r3, [sp, #0]
    590c:	2b02      	cmp	r3, #2
    590e:	d10b      	bne.n	5928 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5910:	9801      	ldr	r0, [sp, #4]
    5912:	f7ff fdb3 	bl	547c <Clock_Ip_ClockInitializeObjects>
            break;
    5916:	e008      	b.n	592a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5918:	9801      	ldr	r0, [sp, #4]
    591a:	f7ff f9db 	bl	4cd4 <Clock_Ip_SpecificPlatformInitClock>
            break;
    591e:	e004      	b.n	592a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5920:	9801      	ldr	r0, [sp, #4]
    5922:	f7ff f8ed 	bl	4b00 <DisableSafeClock>
            break;
    5926:	e000      	b.n	592a <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5928:	bf00      	nop
    }
}
    592a:	bf00      	nop
    592c:	b003      	add	sp, #12
    592e:	f85d fb04 	ldr.w	pc, [sp], #4
    5932:	bf00      	nop

00005934 <Mcu_CheckInit>:
/**
* @brief Mcu_CheckInit - checks for Mcu_Init
* @implements Mcu_CheckInit_Activity
*/
static Std_ReturnType Mcu_CheckInit(const Mcu_ConfigType * ConfigPtr)
{
    5934:	b500      	push	{lr}
    5936:	b085      	sub	sp, #20
    5938:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    593a:	2300      	movs	r3, #0
    593c:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_PRECOMPILE_SUPPORT == STD_OFF)
    if (NULL_PTR == ConfigPtr)
    5940:	9b01      	ldr	r3, [sp, #4]
    5942:	2b00      	cmp	r3, #0
    5944:	d108      	bne.n	5958 <Mcu_CheckInit+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5946:	2301      	movs	r3, #1
    5948:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    594c:	2311      	movs	r3, #17
    594e:	2200      	movs	r2, #0
    5950:	2100      	movs	r1, #0
    5952:	2065      	movs	r0, #101	; 0x65
    5954:	f011 f996 	bl	16c84 <Det_ReportError>

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    }
#endif /* (MCU_PRECOMPILE_SUPPORT == STD_ON) */

    return CheckStatus;
    5958:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    595c:	4618      	mov	r0, r3
    595e:	b005      	add	sp, #20
    5960:	f85d fb04 	ldr.w	pc, [sp], #4

00005964 <Mcu_CheckInitClock>:
/**
* @brief Mcu_CheckInitClock - checks for Mcu_InitClock
* @implements Mcu_CheckInitClock_Activity
*/
static Std_ReturnType Mcu_CheckInitClock(Mcu_ClockType ClockSetting)
{
    5964:	b500      	push	{lr}
    5966:	b085      	sub	sp, #20
    5968:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    596a:	2300      	movs	r3, #0
    596c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ClockSetting >= Mcu_pConfigPtr->NoClkConfigs)
    5970:	4b0a      	ldr	r3, [pc, #40]	; (599c <Mcu_CheckInitClock+0x38>)
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	68db      	ldr	r3, [r3, #12]
    5976:	9a01      	ldr	r2, [sp, #4]
    5978:	429a      	cmp	r2, r3
    597a:	d308      	bcc.n	598e <Mcu_CheckInitClock+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    597c:	2301      	movs	r3, #1
    597e:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INITCLOCK_ID, MCU_E_PARAM_CLOCK);
    5982:	230b      	movs	r3, #11
    5984:	2202      	movs	r2, #2
    5986:	2100      	movs	r1, #0
    5988:	2065      	movs	r0, #101	; 0x65
    598a:	f011 f97b 	bl	16c84 <Det_ReportError>
    }

    return CheckStatus;
    598e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5992:	4618      	mov	r0, r3
    5994:	b005      	add	sp, #20
    5996:	f85d fb04 	ldr.w	pc, [sp], #4
    599a:	bf00      	nop
    599c:	1fff8ce0 	.word	0x1fff8ce0

000059a0 <Mcu_CheckSetMode>:
/**
* @brief Mcu_CheckSetMode - checks for Mcu_SetMode
* @implements Mcu_CheckSetMode_Activity
*/
static Std_ReturnType Mcu_CheckSetMode(Power_Ip_ModeType McuMode)
{
    59a0:	b500      	push	{lr}
    59a2:	b085      	sub	sp, #20
    59a4:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    59a6:	2300      	movs	r3, #0
    59a8:	f88d 300f 	strb.w	r3, [sp, #15]

    if (McuMode >= Mcu_pConfigPtr->NoModeConfigs)
    59ac:	4b0a      	ldr	r3, [pc, #40]	; (59d8 <Mcu_CheckSetMode+0x38>)
    59ae:	681b      	ldr	r3, [r3, #0]
    59b0:	689b      	ldr	r3, [r3, #8]
    59b2:	9a01      	ldr	r2, [sp, #4]
    59b4:	429a      	cmp	r2, r3
    59b6:	d308      	bcc.n	59ca <Mcu_CheckSetMode+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    59b8:	2301      	movs	r3, #1
    59ba:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_SETMODE_ID, MCU_E_PARAM_MODE);
    59be:	230c      	movs	r3, #12
    59c0:	2208      	movs	r2, #8
    59c2:	2100      	movs	r1, #0
    59c4:	2065      	movs	r0, #101	; 0x65
    59c6:	f011 f95d 	bl	16c84 <Det_ReportError>
    }

    return CheckStatus;
    59ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    59ce:	4618      	mov	r0, r3
    59d0:	b005      	add	sp, #20
    59d2:	f85d fb04 	ldr.w	pc, [sp], #4
    59d6:	bf00      	nop
    59d8:	1fff8ce0 	.word	0x1fff8ce0

000059dc <Mcu_CheckGetVersionInfo>:
/**
* @brief Mcu_CheckGetVersionInfo - checks for Mcu_GetVersionInfo
* @implements Mcu_CheckGetVersionInfo_Activity
*/
static Std_ReturnType Mcu_CheckGetVersionInfo(const Std_VersionInfoType * VersionInfo)
{
    59dc:	b500      	push	{lr}
    59de:	b085      	sub	sp, #20
    59e0:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    59e2:	2300      	movs	r3, #0
    59e4:	f88d 300f 	strb.w	r3, [sp, #15]

    if (NULL_PTR == VersionInfo)
    59e8:	9b01      	ldr	r3, [sp, #4]
    59ea:	2b00      	cmp	r3, #0
    59ec:	d108      	bne.n	5a00 <Mcu_CheckGetVersionInfo+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    59ee:	2301      	movs	r3, #1
    59f0:	f88d 300f 	strb.w	r3, [sp, #15]

        (void)Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_GETVERSIONINFO_ID, MCU_E_PARAM_POINTER);
    59f4:	2310      	movs	r3, #16
    59f6:	2209      	movs	r2, #9
    59f8:	2100      	movs	r1, #0
    59fa:	2065      	movs	r0, #101	; 0x65
    59fc:	f011 f942 	bl	16c84 <Det_ReportError>
    }

    return CheckStatus;
    5a00:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a04:	4618      	mov	r0, r3
    5a06:	b005      	add	sp, #20
    5a08:	f85d fb04 	ldr.w	pc, [sp], #4

00005a0c <Mcu_HLDChecksEntry>:
/**
* @brief Mcu_HLDChecksEntry - checks for invalid mode transitions.
* @implements Mcu_HLDChecksEntry_Activity
*/
static Std_ReturnType Mcu_HLDChecksEntry(uint8 McuServiceID)
{
    5a0c:	b500      	push	{lr}
    5a0e:	b085      	sub	sp, #20
    5a10:	4603      	mov	r3, r0
    5a12:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5a16:	2300      	movs	r3, #0
    5a18:	f88d 300f 	strb.w	r3, [sp, #15]

    if (MCU_INIT_ID == McuServiceID)
    5a1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a20:	2b00      	cmp	r3, #0
    5a22:	d10e      	bne.n	5a42 <Mcu_HLDChecksEntry+0x36>
    {
        if (MCU_UNINIT != Mcu_eStatus) /* If "Mcu_Init" was already called (i.e. driver is initialized). */
    5a24:	4b13      	ldr	r3, [pc, #76]	; (5a74 <Mcu_HLDChecksEntry+0x68>)
    5a26:	681b      	ldr	r3, [r3, #0]
    5a28:	2b03      	cmp	r3, #3
    5a2a:	d01c      	beq.n	5a66 <Mcu_HLDChecksEntry+0x5a>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a2c:	2301      	movs	r3, #1
    5a2e:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_ALREADY_INITIALIZED);
    5a32:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5a36:	2313      	movs	r3, #19
    5a38:	2100      	movs	r1, #0
    5a3a:	2065      	movs	r0, #101	; 0x65
    5a3c:	f011 f922 	bl	16c84 <Det_ReportError>
    5a40:	e011      	b.n	5a66 <Mcu_HLDChecksEntry+0x5a>
        }
    }
    else
    {
        if (MCU_UNINIT == Mcu_eStatus) /* If "Mcu_Init" was not called (i.e driver is uninitialized). */
    5a42:	4b0c      	ldr	r3, [pc, #48]	; (5a74 <Mcu_HLDChecksEntry+0x68>)
    5a44:	681b      	ldr	r3, [r3, #0]
    5a46:	2b03      	cmp	r3, #3
    5a48:	d10a      	bne.n	5a60 <Mcu_HLDChecksEntry+0x54>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a4a:	2301      	movs	r3, #1
    5a4c:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_UNINIT);
    5a50:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5a54:	230f      	movs	r3, #15
    5a56:	2100      	movs	r1, #0
    5a58:	2065      	movs	r0, #101	; 0x65
    5a5a:	f011 f913 	bl	16c84 <Det_ReportError>
    5a5e:	e002      	b.n	5a66 <Mcu_HLDChecksEntry+0x5a>
        }
        else
        {
            Mcu_eStatus = MCU_BUSY;
    5a60:	4b04      	ldr	r3, [pc, #16]	; (5a74 <Mcu_HLDChecksEntry+0x68>)
    5a62:	220a      	movs	r2, #10
    5a64:	601a      	str	r2, [r3, #0]
        }
    }

    return CheckStatus;
    5a66:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a6a:	4618      	mov	r0, r3
    5a6c:	b005      	add	sp, #20
    5a6e:	f85d fb04 	ldr.w	pc, [sp], #4
    5a72:	bf00      	nop
    5a74:	1fff8b1c 	.word	0x1fff8b1c

00005a78 <Mcu_HLDChecksExit>:
* @implements Mcu_HLDChecksExit_Activity
*/
static void Mcu_HLDChecksExit(  Std_ReturnType RetStatus,
                                uint8 McuServiceID
                              )
{
    5a78:	b082      	sub	sp, #8
    5a7a:	4603      	mov	r3, r0
    5a7c:	460a      	mov	r2, r1
    5a7e:	f88d 3007 	strb.w	r3, [sp, #7]
    5a82:	4613      	mov	r3, r2
    5a84:	f88d 3006 	strb.w	r3, [sp, #6]
    if (MCU_INIT_ID == McuServiceID)
    5a88:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5a8c:	2b00      	cmp	r3, #0
    5a8e:	d10b      	bne.n	5aa8 <Mcu_HLDChecksExit+0x30>
    {
        if ((Std_ReturnType)E_OK == (Std_ReturnType)RetStatus)
    5a90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a94:	2b00      	cmp	r3, #0
    5a96:	d103      	bne.n	5aa0 <Mcu_HLDChecksExit+0x28>
        {
            Mcu_eStatus = MCU_IDLE;
    5a98:	4b06      	ldr	r3, [pc, #24]	; (5ab4 <Mcu_HLDChecksExit+0x3c>)
    5a9a:	220c      	movs	r2, #12
    5a9c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Mcu_eStatus = MCU_IDLE;
    }
}
    5a9e:	e006      	b.n	5aae <Mcu_HLDChecksExit+0x36>
            Mcu_eStatus = MCU_UNINIT;
    5aa0:	4b04      	ldr	r3, [pc, #16]	; (5ab4 <Mcu_HLDChecksExit+0x3c>)
    5aa2:	2203      	movs	r2, #3
    5aa4:	601a      	str	r2, [r3, #0]
}
    5aa6:	e002      	b.n	5aae <Mcu_HLDChecksExit+0x36>
        Mcu_eStatus = MCU_IDLE;
    5aa8:	4b02      	ldr	r3, [pc, #8]	; (5ab4 <Mcu_HLDChecksExit+0x3c>)
    5aaa:	220c      	movs	r2, #12
    5aac:	601a      	str	r2, [r3, #0]
}
    5aae:	bf00      	nop
    5ab0:	b002      	add	sp, #8
    5ab2:	4770      	bx	lr
    5ab4:	1fff8b1c 	.word	0x1fff8b1c

00005ab8 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5ab8:	b500      	push	{lr}
    5aba:	b085      	sub	sp, #20
    5abc:	9001      	str	r0, [sp, #4]
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType CheckStatus;
#endif /* ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) ) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    CheckStatus = (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INIT_ID);
    5abe:	2000      	movs	r0, #0
    5ac0:	f7ff ffa4 	bl	5a0c <Mcu_HLDChecksEntry>
    5ac4:	4603      	mov	r3, r0
    5ac6:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( (Std_ReturnType)E_OK == CheckStatus )
    5aca:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5ace:	2b00      	cmp	r3, #0
    5ad0:	d150      	bne.n	5b74 <Mcu_Init+0xbc>

#if (MCU_PARAM_CHECK == STD_ON)
        /* When PostBuild is used and #(Variants) > 1, the input parameter 'ConfigPtr' is mandatory
         * to be different than NULL_PTR. */
        /* Check the config. In case of error, return immediately. The "Mcu_CheckInit" function will report DET errors. */
        CheckStatus = Mcu_CheckInit(ConfigPtr);
    5ad2:	9801      	ldr	r0, [sp, #4]
    5ad4:	f7ff ff2e 	bl	5934 <Mcu_CheckInit>
    5ad8:	4603      	mov	r3, r0
    5ada:	f88d 300b 	strb.w	r3, [sp, #11]

        if ((Std_ReturnType)E_OK == CheckStatus)
    5ade:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5ae2:	2b00      	cmp	r3, #0
    5ae4:	d13d      	bne.n	5b62 <Mcu_Init+0xaa>

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5ae6:	4a25      	ldr	r2, [pc, #148]	; (5b7c <Mcu_Init+0xc4>)
    5ae8:	9b01      	ldr	r3, [sp, #4]
    5aea:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5aec:	2300      	movs	r3, #0
    5aee:	9303      	str	r3, [sp, #12]
    5af0:	e010      	b.n	5b14 <Mcu_Init+0x5c>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5af2:	4b22      	ldr	r3, [pc, #136]	; (5b7c <Mcu_Init+0xc4>)
    5af4:	681b      	ldr	r3, [r3, #0]
    5af6:	6919      	ldr	r1, [r3, #16]
    5af8:	9a03      	ldr	r2, [sp, #12]
    5afa:	4613      	mov	r3, r2
    5afc:	005b      	lsls	r3, r3, #1
    5afe:	4413      	add	r3, r2
    5b00:	009b      	lsls	r3, r3, #2
    5b02:	440b      	add	r3, r1
    5b04:	681b      	ldr	r3, [r3, #0]
    5b06:	9a03      	ldr	r2, [sp, #12]
    5b08:	b2d1      	uxtb	r1, r2
    5b0a:	4a1d      	ldr	r2, [pc, #116]	; (5b80 <Mcu_Init+0xc8>)
    5b0c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5b0e:	9b03      	ldr	r3, [sp, #12]
    5b10:	3301      	adds	r3, #1
    5b12:	9303      	str	r3, [sp, #12]
    5b14:	4b19      	ldr	r3, [pc, #100]	; (5b7c <Mcu_Init+0xc4>)
    5b16:	681b      	ldr	r3, [r3, #0]
    5b18:	689b      	ldr	r3, [r3, #8]
    5b1a:	9a03      	ldr	r2, [sp, #12]
    5b1c:	429a      	cmp	r2, r3
    5b1e:	d3e8      	bcc.n	5af2 <Mcu_Init+0x3a>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5b20:	2300      	movs	r3, #0
    5b22:	9303      	str	r3, [sp, #12]
    5b24:	e010      	b.n	5b48 <Mcu_Init+0x90>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5b26:	4b15      	ldr	r3, [pc, #84]	; (5b7c <Mcu_Init+0xc4>)
    5b28:	681b      	ldr	r3, [r3, #0]
    5b2a:	6959      	ldr	r1, [r3, #20]
    5b2c:	9a03      	ldr	r2, [sp, #12]
    5b2e:	4613      	mov	r3, r2
    5b30:	01db      	lsls	r3, r3, #7
    5b32:	1a9b      	subs	r3, r3, r2
    5b34:	00db      	lsls	r3, r3, #3
    5b36:	440b      	add	r3, r1
    5b38:	681b      	ldr	r3, [r3, #0]
    5b3a:	9a03      	ldr	r2, [sp, #12]
    5b3c:	b2d1      	uxtb	r1, r2
    5b3e:	4a11      	ldr	r2, [pc, #68]	; (5b84 <Mcu_Init+0xcc>)
    5b40:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5b42:	9b03      	ldr	r3, [sp, #12]
    5b44:	3301      	adds	r3, #1
    5b46:	9303      	str	r3, [sp, #12]
    5b48:	4b0c      	ldr	r3, [pc, #48]	; (5b7c <Mcu_Init+0xc4>)
    5b4a:	681b      	ldr	r3, [r3, #0]
    5b4c:	68db      	ldr	r3, [r3, #12]
    5b4e:	9a03      	ldr	r2, [sp, #12]
    5b50:	429a      	cmp	r2, r3
    5b52:	d3e8      	bcc.n	5b26 <Mcu_Init+0x6e>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5b54:	4b09      	ldr	r3, [pc, #36]	; (5b7c <Mcu_Init+0xc4>)
    5b56:	681b      	ldr	r3, [r3, #0]
    5b58:	699b      	ldr	r3, [r3, #24]
    5b5a:	4618      	mov	r0, r3
    5b5c:	f000 f90c 	bl	5d78 <Mcu_Ipw_Init>
    5b60:	e002      	b.n	5b68 <Mcu_Init+0xb0>
#if (MCU_PARAM_CHECK == STD_ON)
        }
        else
        {
            /* Clean the init pointer in case of an error. */
            Mcu_pConfigPtr = NULL_PTR;
    5b62:	4b06      	ldr	r3, [pc, #24]	; (5b7c <Mcu_Init+0xc4>)
    5b64:	2200      	movs	r2, #0
    5b66:	601a      	str	r2, [r3, #0]
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    5b68:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5b6c:	2100      	movs	r1, #0
    5b6e:	4618      	mov	r0, r3
    5b70:	f7ff ff82 	bl	5a78 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5b74:	bf00      	nop
    5b76:	b005      	add	sp, #20
    5b78:	f85d fb04 	ldr.w	pc, [sp], #4
    5b7c:	1fff8ce0 	.word	0x1fff8ce0
    5b80:	1fff8cdc 	.word	0x1fff8cdc
    5b84:	1fff8cd8 	.word	0x1fff8cd8

00005b88 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5b88:	b500      	push	{lr}
    5b8a:	b085      	sub	sp, #20
    5b8c:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5b8e:	2301      	movs	r3, #1
    5b90:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    /* Check if the driver is initialized. */
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITRAMSECTION_ID) )
    5b94:	2001      	movs	r0, #1
    5b96:	f7ff ff39 	bl	5a0c <Mcu_HLDChecksEntry>
    5b9a:	4603      	mov	r3, r0
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d103      	bne.n	5ba8 <Mcu_InitRamSection+0x20>
        /* To avoid compiler warning. */
        MCU_PARAM_UNUSED(RamSection);
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    5ba0:	2101      	movs	r1, #1
    5ba2:	2000      	movs	r0, #0
    5ba4:	f7ff ff68 	bl	5a78 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5ba8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5bac:	4618      	mov	r0, r3
    5bae:	b005      	add	sp, #20
    5bb0:	f85d fb04 	ldr.w	pc, [sp], #4

00005bb4 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5bb4:	b500      	push	{lr}
    5bb6:	b085      	sub	sp, #20
    5bb8:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5bba:	4a17      	ldr	r2, [pc, #92]	; (5c18 <Mcu_InitClock+0x64>)
    5bbc:	9b01      	ldr	r3, [sp, #4]
    5bbe:	4413      	add	r3, r2
    5bc0:	781b      	ldrb	r3, [r3, #0]
    5bc2:	f88d 300e 	strb.w	r3, [sp, #14]
    /* Return the success of the clock initalization operation. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType ClockStatus = (Std_ReturnType)E_NOT_OK;
    5bc6:	2301      	movs	r3, #1
    5bc8:	f88d 300f 	strb.w	r3, [sp, #15]
#else
    Std_ReturnType ClockStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITCLOCK_ID) )
    5bcc:	2002      	movs	r0, #2
    5bce:	f7ff ff1d 	bl	5a0c <Mcu_HLDChecksEntry>
    5bd2:	4603      	mov	r3, r0
    5bd4:	2b00      	cmp	r3, #0
    5bd6:	d119      	bne.n	5c0c <Mcu_InitClock+0x58>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
    5bd8:	9801      	ldr	r0, [sp, #4]
    5bda:	f7ff fec3 	bl	5964 <Mcu_CheckInitClock>
    5bde:	4603      	mov	r3, r0
    5be0:	2b00      	cmp	r3, #0
    5be2:	d10f      	bne.n	5c04 <Mcu_InitClock+0x50>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5be4:	4b0d      	ldr	r3, [pc, #52]	; (5c1c <Mcu_InitClock+0x68>)
    5be6:	681b      	ldr	r3, [r3, #0]
    5be8:	6959      	ldr	r1, [r3, #20]
    5bea:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5bee:	4613      	mov	r3, r2
    5bf0:	01db      	lsls	r3, r3, #7
    5bf2:	1a9b      	subs	r3, r3, r2
    5bf4:	00db      	lsls	r3, r3, #3
    5bf6:	440b      	add	r3, r1
    5bf8:	4618      	mov	r0, r3
    5bfa:	f000 f8c7 	bl	5d8c <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5bfe:	2300      	movs	r3, #0
    5c00:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_PARAM_CHECK == STD_ON)
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    5c04:	2102      	movs	r1, #2
    5c06:	2000      	movs	r0, #0
    5c08:	f7ff ff36 	bl	5a78 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5c0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5c10:	4618      	mov	r0, r3
    5c12:	b005      	add	sp, #20
    5c14:	f85d fb04 	ldr.w	pc, [sp], #4
    5c18:	1fff8cd8 	.word	0x1fff8cd8
    5c1c:	1fff8ce0 	.word	0x1fff8ce0

00005c20 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5c20:	b500      	push	{lr}
    5c22:	b085      	sub	sp, #20
    5c24:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5c26:	4a15      	ldr	r2, [pc, #84]	; (5c7c <Mcu_SetMode+0x5c>)
    5c28:	9b01      	ldr	r3, [sp, #4]
    5c2a:	4413      	add	r3, r2
    5c2c:	781b      	ldrb	r3, [r3, #0]
    5c2e:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_SETMODE_ID) )
    5c32:	2008      	movs	r0, #8
    5c34:	f7ff feea 	bl	5a0c <Mcu_HLDChecksEntry>
    5c38:	4603      	mov	r3, r0
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	d11a      	bne.n	5c74 <Mcu_SetMode+0x54>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

#if (MCU_PARAM_CHECK == STD_ON)
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
    5c3e:	9801      	ldr	r0, [sp, #4]
    5c40:	f7ff feae 	bl	59a0 <Mcu_CheckSetMode>
    5c44:	4603      	mov	r3, r0
    5c46:	2b00      	cmp	r3, #0
    5c48:	d110      	bne.n	5c6c <Mcu_SetMode+0x4c>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5c4a:	f00e fed3 	bl	149f4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5c4e:	4b0c      	ldr	r3, [pc, #48]	; (5c80 <Mcu_SetMode+0x60>)
    5c50:	681b      	ldr	r3, [r3, #0]
    5c52:	6919      	ldr	r1, [r3, #16]
    5c54:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5c58:	4613      	mov	r3, r2
    5c5a:	005b      	lsls	r3, r3, #1
    5c5c:	4413      	add	r3, r2
    5c5e:	009b      	lsls	r3, r3, #2
    5c60:	440b      	add	r3, r1
    5c62:	4618      	mov	r0, r3
    5c64:	f000 f89c 	bl	5da0 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5c68:	f00e fef0 	bl	14a4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    5c6c:	2108      	movs	r1, #8
    5c6e:	2000      	movs	r0, #0
    5c70:	f7ff ff02 	bl	5a78 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5c74:	bf00      	nop
    5c76:	b005      	add	sp, #20
    5c78:	f85d fb04 	ldr.w	pc, [sp], #4
    5c7c:	1fff8cdc 	.word	0x1fff8cdc
    5c80:	1fff8ce0 	.word	0x1fff8ce0

00005c84 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5c84:	b500      	push	{lr}
    5c86:	b083      	sub	sp, #12
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5c88:	2302      	movs	r3, #2
    5c8a:	9301      	str	r3, [sp, #4]
#else
    Mcu_PllStatusType PllStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETPLLSTATUS_ID) )
    5c8c:	2004      	movs	r0, #4
    5c8e:	f7ff febd 	bl	5a0c <Mcu_HLDChecksEntry>
    5c92:	4603      	mov	r3, r0
    5c94:	2b00      	cmp	r3, #0
    5c96:	d103      	bne.n	5ca0 <Mcu_GetPllStatus+0x1c>
           At this point, the return value can be only MCU_PLL_LOCKED or MCU_PLL_UNLOCKED. */
        PllStatus = Mcu_Ipw_GetPllStatus();
#endif /* (MCU_NO_PLL == STD_OFF) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    5c98:	2104      	movs	r1, #4
    5c9a:	2000      	movs	r0, #0
    5c9c:	f7ff feec 	bl	5a78 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5ca0:	9b01      	ldr	r3, [sp, #4]
}
    5ca2:	4618      	mov	r0, r3
    5ca4:	b003      	add	sp, #12
    5ca6:	f85d fb04 	ldr.w	pc, [sp], #4

00005caa <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5caa:	b500      	push	{lr}
    5cac:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_ResetType ResetReason = MCU_RESET_UNDEFINED;
    5cae:	230e      	movs	r3, #14
    5cb0:	9301      	str	r3, [sp, #4]
#else
    Mcu_ResetType ResetReason;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    5cb2:	2005      	movs	r0, #5
    5cb4:	f7ff feaa 	bl	5a0c <Mcu_HLDChecksEntry>
    5cb8:	4603      	mov	r3, r0
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d106      	bne.n	5ccc <Mcu_GetResetReason+0x22>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5cbe:	f000 f879 	bl	5db4 <Mcu_Ipw_GetResetReason>
    5cc2:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    5cc4:	2105      	movs	r1, #5
    5cc6:	2000      	movs	r0, #0
    5cc8:	f7ff fed6 	bl	5a78 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5ccc:	9b01      	ldr	r3, [sp, #4]
}
    5cce:	4618      	mov	r0, r3
    5cd0:	b003      	add	sp, #12
    5cd2:	f85d fb04 	ldr.w	pc, [sp], #4

00005cd6 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5cd6:	b500      	push	{lr}
    5cd8:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_RawResetType RawResetValue = MCU_RAW_RESET_DEFAULT;
    5cda:	f04f 33ff 	mov.w	r3, #4294967295
    5cde:	9301      	str	r3, [sp, #4]
#else
    Mcu_RawResetType RawResetValue;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    5ce0:	2006      	movs	r0, #6
    5ce2:	f7ff fe93 	bl	5a0c <Mcu_HLDChecksEntry>
    5ce6:	4603      	mov	r3, r0
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d106      	bne.n	5cfa <Mcu_GetResetRawValue+0x24>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5cec:	f000 f868 	bl	5dc0 <Mcu_Ipw_GetResetRawValue>
    5cf0:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    5cf2:	2106      	movs	r1, #6
    5cf4:	2000      	movs	r0, #0
    5cf6:	f7ff febf 	bl	5a78 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5cfa:	9b01      	ldr	r3, [sp, #4]
}
    5cfc:	4618      	mov	r0, r3
    5cfe:	b003      	add	sp, #12
    5d00:	f85d fb04 	ldr.w	pc, [sp], #4

00005d04 <Mcu_GetVersionInfo>:
* @api
*
* @implements Mcu_GetVersionInfo_Activity
*/
void Mcu_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    5d04:	b500      	push	{lr}
    5d06:	b083      	sub	sp, #12
    5d08:	9001      	str	r0, [sp, #4]
#if (MCU_PARAM_CHECK == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckGetVersionInfo(versioninfo) )
    5d0a:	9801      	ldr	r0, [sp, #4]
    5d0c:	f7ff fe66 	bl	59dc <Mcu_CheckGetVersionInfo>
    5d10:	4603      	mov	r3, r0
    5d12:	2b00      	cmp	r3, #0
    5d14:	d10e      	bne.n	5d34 <Mcu_GetVersionInfo+0x30>
    {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
        (versioninfo)->vendorID = (uint16)MCU_VENDOR_ID;
    5d16:	9b01      	ldr	r3, [sp, #4]
    5d18:	222b      	movs	r2, #43	; 0x2b
    5d1a:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint8)MCU_MODULE_ID;
    5d1c:	9b01      	ldr	r3, [sp, #4]
    5d1e:	2265      	movs	r2, #101	; 0x65
    5d20:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)MCU_SW_MAJOR_VERSION;
    5d22:	9b01      	ldr	r3, [sp, #4]
    5d24:	2202      	movs	r2, #2
    5d26:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)MCU_SW_MINOR_VERSION;
    5d28:	9b01      	ldr	r3, [sp, #4]
    5d2a:	2200      	movs	r2, #0
    5d2c:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)MCU_SW_PATCH_VERSION;
    5d2e:	9b01      	ldr	r3, [sp, #4]
    5d30:	2200      	movs	r2, #0
    5d32:	719a      	strb	r2, [r3, #6]
#if (MCU_PARAM_CHECK == STD_ON)
    }
#endif /* (MCU_PARAM_CHECK == STD_ON) */
}
    5d34:	bf00      	nop
    5d36:	b003      	add	sp, #12
    5d38:	f85d fb04 	ldr.w	pc, [sp], #4

00005d3c <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5d3c:	b500      	push	{lr}
    5d3e:	b083      	sub	sp, #12
    5d40:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    5d42:	201a      	movs	r0, #26
    5d44:	f7ff fe62 	bl	5a0c <Mcu_HLDChecksEntry>
    5d48:	4603      	mov	r3, r0
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	d106      	bne.n	5d5c <Mcu_SleepOnExit+0x20>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5d4e:	9801      	ldr	r0, [sp, #4]
    5d50:	f000 f83c 	bl	5dcc <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    5d54:	211a      	movs	r1, #26
    5d56:	2000      	movs	r0, #0
    5d58:	f7ff fe8e 	bl	5a78 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5d5c:	bf00      	nop
    5d5e:	b003      	add	sp, #12
    5d60:	f85d fb04 	ldr.w	pc, [sp], #4

00005d64 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5d64:	b082      	sub	sp, #8
    5d66:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5d68:	4b02      	ldr	r3, [pc, #8]	; (5d74 <Mcu_ClkSrcFailureNotification+0x10>)
    5d6a:	681b      	ldr	r3, [r3, #0]
    5d6c:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5d6e:	bf00      	nop
    5d70:	b002      	add	sp, #8
    5d72:	4770      	bx	lr
    5d74:	1fff8ce0 	.word	0x1fff8ce0

00005d78 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5d78:	b500      	push	{lr}
    5d7a:	b083      	sub	sp, #12
    5d7c:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5d7e:	9801      	ldr	r0, [sp, #4]
    5d80:	f000 f882 	bl	5e88 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5d84:	bf00      	nop
    5d86:	b003      	add	sp, #12
    5d88:	f85d fb04 	ldr.w	pc, [sp], #4

00005d8c <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5d8c:	b500      	push	{lr}
    5d8e:	b083      	sub	sp, #12
    5d90:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5d92:	9801      	ldr	r0, [sp, #4]
    5d94:	f7fc fb12 	bl	23bc <Clock_Ip_InitClock>
}
    5d98:	bf00      	nop
    5d9a:	b003      	add	sp, #12
    5d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00005da0 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5da0:	b500      	push	{lr}
    5da2:	b083      	sub	sp, #12
    5da4:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5da6:	9801      	ldr	r0, [sp, #4]
    5da8:	f000 f820 	bl	5dec <Power_Ip_SetMode>
}
    5dac:	bf00      	nop
    5dae:	b003      	add	sp, #12
    5db0:	f85d fb04 	ldr.w	pc, [sp], #4

00005db4 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5db4:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5db6:	f000 f84f 	bl	5e58 <Power_Ip_GetResetReason>
    5dba:	4603      	mov	r3, r0
}
    5dbc:	4618      	mov	r0, r3
    5dbe:	bd08      	pop	{r3, pc}

00005dc0 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5dc0:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5dc2:	f000 f857 	bl	5e74 <Power_Ip_GetResetRawValue>
    5dc6:	4603      	mov	r3, r0
}
    5dc8:	4618      	mov	r0, r3
    5dca:	bd08      	pop	{r3, pc}

00005dcc <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5dcc:	b500      	push	{lr}
    5dce:	b083      	sub	sp, #12
    5dd0:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5dd2:	9b01      	ldr	r3, [sp, #4]
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	d102      	bne.n	5dde <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5dd8:	f000 f86c 	bl	5eb4 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5ddc:	e001      	b.n	5de2 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5dde:	f000 f86e 	bl	5ebe <Power_Ip_EnableSleepOnExit>
}
    5de2:	bf00      	nop
    5de4:	b003      	add	sp, #12
    5de6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005dec <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5dec:	b500      	push	{lr}
    5dee:	b085      	sub	sp, #20
    5df0:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5df2:	9b01      	ldr	r3, [sp, #4]
    5df4:	685b      	ldr	r3, [r3, #4]
    5df6:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5df8:	9802      	ldr	r0, [sp, #8]
    5dfa:	f000 f9f5 	bl	61e8 <Power_Ip_SMC_ModeCheckEntry>
    5dfe:	4603      	mov	r3, r0
    5e00:	2b00      	cmp	r3, #0
    5e02:	d002      	beq.n	5e0a <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e04:	2301      	movs	r3, #1
    5e06:	9303      	str	r3, [sp, #12]
    5e08:	e003      	b.n	5e12 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5e0a:	9801      	ldr	r0, [sp, #4]
    5e0c:	f000 fa1e 	bl	624c <Power_Ip_SMC_ModeConfig>
    5e10:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5e12:	9b03      	ldr	r3, [sp, #12]
    5e14:	2b01      	cmp	r3, #1
    5e16:	d103      	bne.n	5e20 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e18:	21ff      	movs	r1, #255	; 0xff
    5e1a:	2003      	movs	r0, #3
    5e1c:	f000 f8f4 	bl	6008 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5e20:	bf00      	nop
    5e22:	b005      	add	sp, #20
    5e24:	f85d fb04 	ldr.w	pc, [sp], #4

00005e28 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5e28:	b084      	sub	sp, #16
    5e2a:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5e2c:	230c      	movs	r3, #12
    5e2e:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5e30:	4a08      	ldr	r2, [pc, #32]	; (5e54 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5e32:	9b01      	ldr	r3, [sp, #4]
    5e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e38:	2b0e      	cmp	r3, #14
    5e3a:	d805      	bhi.n	5e48 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5e3c:	4a05      	ldr	r2, [pc, #20]	; (5e54 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5e3e:	9b01      	ldr	r3, [sp, #4]
    5e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e44:	9303      	str	r3, [sp, #12]
    5e46:	e001      	b.n	5e4c <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5e48:	230c      	movs	r3, #12
    5e4a:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5e4c:	9b03      	ldr	r3, [sp, #12]
}
    5e4e:	4618      	mov	r0, r3
    5e50:	b004      	add	sp, #16
    5e52:	4770      	bx	lr
    5e54:	000184d4 	.word	0x000184d4

00005e58 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5e58:	b500      	push	{lr}
    5e5a:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5e5c:	f000 f940 	bl	60e0 <Power_Ip_RCM_GetResetReason>
    5e60:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5e62:	9801      	ldr	r0, [sp, #4]
    5e64:	f7ff ffe0 	bl	5e28 <Power_Ip_ConvertIntergeToResetType>
    5e68:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5e6a:	9b00      	ldr	r3, [sp, #0]
}
    5e6c:	4618      	mov	r0, r3
    5e6e:	b003      	add	sp, #12
    5e70:	f85d fb04 	ldr.w	pc, [sp], #4

00005e74 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5e74:	b500      	push	{lr}
    5e76:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5e78:	f000 f98a 	bl	6190 <Power_Ip_RCM_GetResetRawValue>
    5e7c:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5e7e:	9b01      	ldr	r3, [sp, #4]
}
    5e80:	4618      	mov	r0, r3
    5e82:	b003      	add	sp, #12
    5e84:	f85d fb04 	ldr.w	pc, [sp], #4

00005e88 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5e88:	b500      	push	{lr}
    5e8a:	b083      	sub	sp, #12
    5e8c:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5e8e:	9b01      	ldr	r3, [sp, #4]
    5e90:	681b      	ldr	r3, [r3, #0]
    5e92:	4618      	mov	r0, r3
    5e94:	f000 f90e 	bl	60b4 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5e98:	9b01      	ldr	r3, [sp, #4]
    5e9a:	685b      	ldr	r3, [r3, #4]
    5e9c:	4618      	mov	r0, r3
    5e9e:	f000 f86d 	bl	5f7c <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5ea2:	9b01      	ldr	r3, [sp, #4]
    5ea4:	689b      	ldr	r3, [r3, #8]
    5ea6:	4618      	mov	r0, r3
    5ea8:	f000 f990 	bl	61cc <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5eac:	bf00      	nop
    5eae:	b003      	add	sp, #12
    5eb0:	f85d fb04 	ldr.w	pc, [sp], #4

00005eb4 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5eb4:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5eb6:	f000 f811 	bl	5edc <Power_Ip_CM4_DisableSleepOnExit>
}
    5eba:	bf00      	nop
    5ebc:	bd08      	pop	{r3, pc}

00005ebe <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5ebe:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5ec0:	f000 f820 	bl	5f04 <Power_Ip_CM4_EnableSleepOnExit>
}
    5ec4:	bf00      	nop
    5ec6:	bd08      	pop	{r3, pc}

00005ec8 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5ec8:	b082      	sub	sp, #8
    5eca:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5ecc:	4a02      	ldr	r2, [pc, #8]	; (5ed8 <Power_Ip_InstallNotificationsCallback+0x10>)
    5ece:	9b01      	ldr	r3, [sp, #4]
    5ed0:	6013      	str	r3, [r2, #0]
}
    5ed2:	bf00      	nop
    5ed4:	b002      	add	sp, #8
    5ed6:	4770      	bx	lr
    5ed8:	1fff8b20 	.word	0x1fff8b20

00005edc <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5edc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5ede:	2300      	movs	r3, #0
    5ee0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5ee2:	4b07      	ldr	r3, [pc, #28]	; (5f00 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5ee4:	681b      	ldr	r3, [r3, #0]
    5ee6:	685b      	ldr	r3, [r3, #4]
    5ee8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5eea:	9b01      	ldr	r3, [sp, #4]
    5eec:	f023 0302 	bic.w	r3, r3, #2
    5ef0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5ef2:	4b03      	ldr	r3, [pc, #12]	; (5f00 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5ef4:	681b      	ldr	r3, [r3, #0]
    5ef6:	9a01      	ldr	r2, [sp, #4]
    5ef8:	605a      	str	r2, [r3, #4]
}
    5efa:	bf00      	nop
    5efc:	b002      	add	sp, #8
    5efe:	4770      	bx	lr
    5f00:	1fff8b24 	.word	0x1fff8b24

00005f04 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5f04:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5f06:	2300      	movs	r3, #0
    5f08:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5f0a:	4b07      	ldr	r3, [pc, #28]	; (5f28 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5f0c:	681b      	ldr	r3, [r3, #0]
    5f0e:	685b      	ldr	r3, [r3, #4]
    5f10:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5f12:	9b01      	ldr	r3, [sp, #4]
    5f14:	f043 0302 	orr.w	r3, r3, #2
    5f18:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5f1a:	4b03      	ldr	r3, [pc, #12]	; (5f28 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5f1c:	681b      	ldr	r3, [r3, #0]
    5f1e:	9a01      	ldr	r2, [sp, #4]
    5f20:	605a      	str	r2, [r3, #4]
}
    5f22:	bf00      	nop
    5f24:	b002      	add	sp, #8
    5f26:	4770      	bx	lr
    5f28:	1fff8b24 	.word	0x1fff8b24

00005f2c <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5f2c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5f2e:	2300      	movs	r3, #0
    5f30:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5f32:	4b07      	ldr	r3, [pc, #28]	; (5f50 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5f34:	681b      	ldr	r3, [r3, #0]
    5f36:	685b      	ldr	r3, [r3, #4]
    5f38:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5f3a:	9b01      	ldr	r3, [sp, #4]
    5f3c:	f043 0304 	orr.w	r3, r3, #4
    5f40:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5f42:	4b03      	ldr	r3, [pc, #12]	; (5f50 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5f44:	681b      	ldr	r3, [r3, #0]
    5f46:	9a01      	ldr	r2, [sp, #4]
    5f48:	605a      	str	r2, [r3, #4]
}
    5f4a:	bf00      	nop
    5f4c:	b002      	add	sp, #8
    5f4e:	4770      	bx	lr
    5f50:	1fff8b24 	.word	0x1fff8b24

00005f54 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5f54:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5f56:	2300      	movs	r3, #0
    5f58:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5f5a:	4b07      	ldr	r3, [pc, #28]	; (5f78 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5f5c:	681b      	ldr	r3, [r3, #0]
    5f5e:	685b      	ldr	r3, [r3, #4]
    5f60:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5f62:	9b01      	ldr	r3, [sp, #4]
    5f64:	f023 0304 	bic.w	r3, r3, #4
    5f68:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5f6a:	4b03      	ldr	r3, [pc, #12]	; (5f78 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5f6c:	681b      	ldr	r3, [r3, #0]
    5f6e:	9a01      	ldr	r2, [sp, #4]
    5f70:	605a      	str	r2, [r3, #4]
}
    5f72:	bf00      	nop
    5f74:	b002      	add	sp, #8
    5f76:	4770      	bx	lr
    5f78:	1fff8b24 	.word	0x1fff8b24

00005f7c <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5f7c:	b084      	sub	sp, #16
    5f7e:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5f80:	4b20      	ldr	r3, [pc, #128]	; (6004 <Power_Ip_PMC_PowerInit+0x88>)
    5f82:	781b      	ldrb	r3, [r3, #0]
    5f84:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5f88:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f8c:	f003 030f 	and.w	r3, r3, #15
    5f90:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5f94:	9b01      	ldr	r3, [sp, #4]
    5f96:	781a      	ldrb	r2, [r3, #0]
    5f98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f9c:	4313      	orrs	r3, r2
    5f9e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5fa2:	4a18      	ldr	r2, [pc, #96]	; (6004 <Power_Ip_PMC_PowerInit+0x88>)
    5fa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fa8:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5faa:	4b16      	ldr	r3, [pc, #88]	; (6004 <Power_Ip_PMC_PowerInit+0x88>)
    5fac:	785b      	ldrb	r3, [r3, #1]
    5fae:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5fb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fb6:	f003 031f 	and.w	r3, r3, #31
    5fba:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5fbe:	9b01      	ldr	r3, [sp, #4]
    5fc0:	785a      	ldrb	r2, [r3, #1]
    5fc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fc6:	4313      	orrs	r3, r2
    5fc8:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5fcc:	4a0d      	ldr	r2, [pc, #52]	; (6004 <Power_Ip_PMC_PowerInit+0x88>)
    5fce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fd2:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5fd4:	4b0b      	ldr	r3, [pc, #44]	; (6004 <Power_Ip_PMC_PowerInit+0x88>)
    5fd6:	789b      	ldrb	r3, [r3, #2]
    5fd8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5fdc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fe0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5fe4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5fe8:	9b01      	ldr	r3, [sp, #4]
    5fea:	789a      	ldrb	r2, [r3, #2]
    5fec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ff0:	4313      	orrs	r3, r2
    5ff2:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5ff6:	4a03      	ldr	r2, [pc, #12]	; (6004 <Power_Ip_PMC_PowerInit+0x88>)
    5ff8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ffc:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5ffe:	bf00      	nop
    6000:	b004      	add	sp, #16
    6002:	4770      	bx	lr
    6004:	4007d000 	.word	0x4007d000

00006008 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6008:	b500      	push	{lr}
    600a:	b083      	sub	sp, #12
    600c:	9001      	str	r0, [sp, #4]
    600e:	460b      	mov	r3, r1
    6010:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    6014:	4b05      	ldr	r3, [pc, #20]	; (602c <Power_Ip_ReportPowerErrors+0x24>)
    6016:	681b      	ldr	r3, [r3, #0]
    6018:	f89d 2003 	ldrb.w	r2, [sp, #3]
    601c:	4611      	mov	r1, r2
    601e:	9801      	ldr	r0, [sp, #4]
    6020:	4798      	blx	r3
}
    6022:	bf00      	nop
    6024:	b003      	add	sp, #12
    6026:	f85d fb04 	ldr.w	pc, [sp], #4
    602a:	bf00      	nop
    602c:	1fff8b20 	.word	0x1fff8b20

00006030 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6030:	b082      	sub	sp, #8
    6032:	9001      	str	r0, [sp, #4]
    6034:	460b      	mov	r3, r1
    6036:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    603a:	bf00      	nop
    603c:	b002      	add	sp, #8
    603e:	4770      	bx	lr

00006040 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6040:	b500      	push	{lr}
    6042:	b085      	sub	sp, #20
    6044:	9003      	str	r0, [sp, #12]
    6046:	9102      	str	r1, [sp, #8]
    6048:	9201      	str	r2, [sp, #4]
    604a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    604c:	2000      	movs	r0, #0
    604e:	f7fb fee5 	bl	1e1c <OsIf_GetCounter>
    6052:	4602      	mov	r2, r0
    6054:	9b03      	ldr	r3, [sp, #12]
    6056:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6058:	9b02      	ldr	r3, [sp, #8]
    605a:	2200      	movs	r2, #0
    605c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    605e:	2100      	movs	r1, #0
    6060:	9800      	ldr	r0, [sp, #0]
    6062:	f7fb ff27 	bl	1eb4 <OsIf_MicrosToTicks>
    6066:	4602      	mov	r2, r0
    6068:	9b01      	ldr	r3, [sp, #4]
    606a:	601a      	str	r2, [r3, #0]
}
    606c:	bf00      	nop
    606e:	b005      	add	sp, #20
    6070:	f85d fb04 	ldr.w	pc, [sp], #4

00006074 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6074:	b500      	push	{lr}
    6076:	b087      	sub	sp, #28
    6078:	9003      	str	r0, [sp, #12]
    607a:	9102      	str	r1, [sp, #8]
    607c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    607e:	2300      	movs	r3, #0
    6080:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6084:	2100      	movs	r1, #0
    6086:	9803      	ldr	r0, [sp, #12]
    6088:	f7fb fee1 	bl	1e4e <OsIf_GetElapsed>
    608c:	4602      	mov	r2, r0
    608e:	9b02      	ldr	r3, [sp, #8]
    6090:	681b      	ldr	r3, [r3, #0]
    6092:	441a      	add	r2, r3
    6094:	9b02      	ldr	r3, [sp, #8]
    6096:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    6098:	9b02      	ldr	r3, [sp, #8]
    609a:	681b      	ldr	r3, [r3, #0]
    609c:	9a01      	ldr	r2, [sp, #4]
    609e:	429a      	cmp	r2, r3
    60a0:	d802      	bhi.n	60a8 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    60a2:	2301      	movs	r3, #1
    60a4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    60a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    60ac:	4618      	mov	r0, r3
    60ae:	b007      	add	sp, #28
    60b0:	f85d fb04 	ldr.w	pc, [sp], #4

000060b4 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    60b4:	b082      	sub	sp, #8
    60b6:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    60b8:	9b01      	ldr	r3, [sp, #4]
    60ba:	681a      	ldr	r2, [r3, #0]
    60bc:	4907      	ldr	r1, [pc, #28]	; (60dc <Power_Ip_RCM_ResetInit+0x28>)
    60be:	f641 7307 	movw	r3, #7943	; 0x1f07
    60c2:	4013      	ands	r3, r2
    60c4:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    60c6:	9b01      	ldr	r3, [sp, #4]
    60c8:	685a      	ldr	r2, [r3, #4]
    60ca:	4904      	ldr	r1, [pc, #16]	; (60dc <Power_Ip_RCM_ResetInit+0x28>)
    60cc:	f642 73ff 	movw	r3, #12287	; 0x2fff
    60d0:	4013      	ands	r3, r2
    60d2:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    60d4:	bf00      	nop
    60d6:	b002      	add	sp, #8
    60d8:	4770      	bx	lr
    60da:	bf00      	nop
    60dc:	4007f000 	.word	0x4007f000

000060e0 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    60e0:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    60e2:	230c      	movs	r3, #12
    60e4:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    60e6:	2300      	movs	r3, #0
    60e8:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    60ea:	2300      	movs	r3, #0
    60ec:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    60ee:	2300      	movs	r3, #0
    60f0:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    60f2:	4b25      	ldr	r3, [pc, #148]	; (6188 <Power_Ip_RCM_GetResetReason+0xa8>)
    60f4:	699a      	ldr	r2, [r3, #24]
    60f6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    60fa:	4013      	ands	r3, r2
    60fc:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    60fe:	9b03      	ldr	r3, [sp, #12]
    6100:	2b00      	cmp	r3, #0
    6102:	d008      	beq.n	6116 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6104:	4920      	ldr	r1, [pc, #128]	; (6188 <Power_Ip_RCM_GetResetReason+0xa8>)
    6106:	9a03      	ldr	r2, [sp, #12]
    6108:	f642 73ee 	movw	r3, #12270	; 0x2fee
    610c:	4013      	ands	r3, r2
    610e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6110:	4a1e      	ldr	r2, [pc, #120]	; (618c <Power_Ip_RCM_GetResetReason+0xac>)
    6112:	9b03      	ldr	r3, [sp, #12]
    6114:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    6116:	4b1d      	ldr	r3, [pc, #116]	; (618c <Power_Ip_RCM_GetResetReason+0xac>)
    6118:	681b      	ldr	r3, [r3, #0]
    611a:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    611c:	9a02      	ldr	r2, [sp, #8]
    611e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6122:	4013      	ands	r3, r2
    6124:	2b82      	cmp	r3, #130	; 0x82
    6126:	d102      	bne.n	612e <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6128:	2305      	movs	r3, #5
    612a:	9307      	str	r3, [sp, #28]
    612c:	e027      	b.n	617e <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    612e:	2300      	movs	r3, #0
    6130:	9306      	str	r3, [sp, #24]
    6132:	e021      	b.n	6178 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6134:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6138:	9b06      	ldr	r3, [sp, #24]
    613a:	fa22 f303 	lsr.w	r3, r2, r3
    613e:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6140:	9a01      	ldr	r2, [sp, #4]
    6142:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6146:	4013      	ands	r3, r2
    6148:	2b00      	cmp	r3, #0
    614a:	d012      	beq.n	6172 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    614c:	9a01      	ldr	r2, [sp, #4]
    614e:	9b02      	ldr	r3, [sp, #8]
    6150:	4013      	ands	r3, r2
    6152:	2b00      	cmp	r3, #0
    6154:	d00a      	beq.n	616c <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6156:	9b05      	ldr	r3, [sp, #20]
    6158:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    615a:	9b04      	ldr	r3, [sp, #16]
    615c:	3301      	adds	r3, #1
    615e:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6160:	9b04      	ldr	r3, [sp, #16]
    6162:	2b01      	cmp	r3, #1
    6164:	d902      	bls.n	616c <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6166:	230d      	movs	r3, #13
    6168:	9307      	str	r3, [sp, #28]
                        break;
    616a:	e008      	b.n	617e <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    616c:	9b05      	ldr	r3, [sp, #20]
    616e:	3301      	adds	r3, #1
    6170:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6172:	9b06      	ldr	r3, [sp, #24]
    6174:	3301      	adds	r3, #1
    6176:	9306      	str	r3, [sp, #24]
    6178:	9b06      	ldr	r3, [sp, #24]
    617a:	2b1f      	cmp	r3, #31
    617c:	d9da      	bls.n	6134 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    617e:	9b07      	ldr	r3, [sp, #28]
}
    6180:	4618      	mov	r0, r3
    6182:	b008      	add	sp, #32
    6184:	4770      	bx	lr
    6186:	bf00      	nop
    6188:	4007f000 	.word	0x4007f000
    618c:	1fff8ce4 	.word	0x1fff8ce4

00006190 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6190:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6192:	4b0c      	ldr	r3, [pc, #48]	; (61c4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6194:	699a      	ldr	r2, [r3, #24]
    6196:	f642 73ee 	movw	r3, #12270	; 0x2fee
    619a:	4013      	ands	r3, r2
    619c:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    619e:	9b01      	ldr	r3, [sp, #4]
    61a0:	2b00      	cmp	r3, #0
    61a2:	d008      	beq.n	61b6 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    61a4:	4907      	ldr	r1, [pc, #28]	; (61c4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    61a6:	9a01      	ldr	r2, [sp, #4]
    61a8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    61ac:	4013      	ands	r3, r2
    61ae:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    61b0:	4a05      	ldr	r2, [pc, #20]	; (61c8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    61b2:	9b01      	ldr	r3, [sp, #4]
    61b4:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    61b6:	4b04      	ldr	r3, [pc, #16]	; (61c8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    61b8:	681b      	ldr	r3, [r3, #0]
    61ba:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    61bc:	9b00      	ldr	r3, [sp, #0]
}
    61be:	4618      	mov	r0, r3
    61c0:	b002      	add	sp, #8
    61c2:	4770      	bx	lr
    61c4:	4007f000 	.word	0x4007f000
    61c8:	1fff8ce4 	.word	0x1fff8ce4

000061cc <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    61cc:	b082      	sub	sp, #8
    61ce:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    61d0:	9b01      	ldr	r3, [sp, #4]
    61d2:	681b      	ldr	r3, [r3, #0]
    61d4:	4a03      	ldr	r2, [pc, #12]	; (61e4 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    61d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    61da:	6093      	str	r3, [r2, #8]
}
    61dc:	bf00      	nop
    61de:	b002      	add	sp, #8
    61e0:	4770      	bx	lr
    61e2:	bf00      	nop
    61e4:	4007e000 	.word	0x4007e000

000061e8 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    61e8:	b084      	sub	sp, #16
    61ea:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    61ec:	2301      	movs	r3, #1
    61ee:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    61f0:	4b15      	ldr	r3, [pc, #84]	; (6248 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    61f2:	695b      	ldr	r3, [r3, #20]
    61f4:	b2db      	uxtb	r3, r3
    61f6:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    61f8:	9b01      	ldr	r3, [sp, #4]
    61fa:	2b02      	cmp	r3, #2
    61fc:	d012      	beq.n	6224 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    61fe:	9b01      	ldr	r3, [sp, #4]
    6200:	2b02      	cmp	r3, #2
    6202:	d818      	bhi.n	6236 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    6204:	9b01      	ldr	r3, [sp, #4]
    6206:	2b00      	cmp	r3, #0
    6208:	d003      	beq.n	6212 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    620a:	9b01      	ldr	r3, [sp, #4]
    620c:	2b01      	cmp	r3, #1
    620e:	d003      	beq.n	6218 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    6210:	e011      	b.n	6236 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    6212:	2300      	movs	r3, #0
    6214:	9303      	str	r3, [sp, #12]
            break;
    6216:	e013      	b.n	6240 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    6218:	9b02      	ldr	r3, [sp, #8]
    621a:	2b01      	cmp	r3, #1
    621c:	d10d      	bne.n	623a <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    621e:	2300      	movs	r3, #0
    6220:	9303      	str	r3, [sp, #12]
            break;
    6222:	e00a      	b.n	623a <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    6224:	9b02      	ldr	r3, [sp, #8]
    6226:	2b01      	cmp	r3, #1
    6228:	d002      	beq.n	6230 <Power_Ip_SMC_ModeCheckEntry+0x48>
    622a:	9b02      	ldr	r3, [sp, #8]
    622c:	2b10      	cmp	r3, #16
    622e:	d106      	bne.n	623e <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    6230:	2300      	movs	r3, #0
    6232:	9303      	str	r3, [sp, #12]
            break;
    6234:	e003      	b.n	623e <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    6236:	bf00      	nop
    6238:	e002      	b.n	6240 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    623a:	bf00      	nop
    623c:	e000      	b.n	6240 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    623e:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6240:	9b03      	ldr	r3, [sp, #12]
}
    6242:	4618      	mov	r0, r3
    6244:	b004      	add	sp, #16
    6246:	4770      	bx	lr
    6248:	4007e000 	.word	0x4007e000

0000624c <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    624c:	b500      	push	{lr}
    624e:	b08b      	sub	sp, #44	; 0x2c
    6250:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    6252:	2300      	movs	r3, #0
    6254:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6256:	2300      	movs	r3, #0
    6258:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    625a:	2300      	movs	r3, #0
    625c:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6260:	9b01      	ldr	r3, [sp, #4]
    6262:	685b      	ldr	r3, [r3, #4]
    6264:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6266:	9b08      	ldr	r3, [sp, #32]
    6268:	2b02      	cmp	r3, #2
    626a:	d076      	beq.n	635a <Power_Ip_SMC_ModeConfig+0x10e>
    626c:	9b08      	ldr	r3, [sp, #32]
    626e:	2b02      	cmp	r3, #2
    6270:	f200 80ab 	bhi.w	63ca <Power_Ip_SMC_ModeConfig+0x17e>
    6274:	9b08      	ldr	r3, [sp, #32]
    6276:	2b00      	cmp	r3, #0
    6278:	d003      	beq.n	6282 <Power_Ip_SMC_ModeConfig+0x36>
    627a:	9b08      	ldr	r3, [sp, #32]
    627c:	2b01      	cmp	r3, #1
    627e:	d034      	beq.n	62ea <Power_Ip_SMC_ModeConfig+0x9e>
    6280:	e0a3      	b.n	63ca <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    6282:	4b58      	ldr	r3, [pc, #352]	; (63e4 <Power_Ip_SMC_ModeConfig+0x198>)
    6284:	68db      	ldr	r3, [r3, #12]
    6286:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6288:	9b06      	ldr	r3, [sp, #24]
    628a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    628e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    6290:	4a54      	ldr	r2, [pc, #336]	; (63e4 <Power_Ip_SMC_ModeConfig+0x198>)
    6292:	9b06      	ldr	r3, [sp, #24]
    6294:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6296:	aa02      	add	r2, sp, #8
    6298:	a903      	add	r1, sp, #12
    629a:	a804      	add	r0, sp, #16
    629c:	f24c 3350 	movw	r3, #50000	; 0xc350
    62a0:	f7ff fece 	bl	6040 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    62a4:	9a02      	ldr	r2, [sp, #8]
    62a6:	a903      	add	r1, sp, #12
    62a8:	ab04      	add	r3, sp, #16
    62aa:	4618      	mov	r0, r3
    62ac:	f7ff fee2 	bl	6074 <Power_Ip_TimeoutExpired>
    62b0:	4603      	mov	r3, r0
    62b2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    62b6:	4b4b      	ldr	r3, [pc, #300]	; (63e4 <Power_Ip_SMC_ModeConfig+0x198>)
    62b8:	695b      	ldr	r3, [r3, #20]
    62ba:	f003 0301 	and.w	r3, r3, #1
    62be:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    62c0:	9b05      	ldr	r3, [sp, #20]
    62c2:	2b01      	cmp	r3, #1
    62c4:	d006      	beq.n	62d4 <Power_Ip_SMC_ModeConfig+0x88>
    62c6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    62ca:	f083 0301 	eor.w	r3, r3, #1
    62ce:	b2db      	uxtb	r3, r3
    62d0:	2b00      	cmp	r3, #0
    62d2:	d1e7      	bne.n	62a4 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    62d4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    62d8:	2b00      	cmp	r3, #0
    62da:	d079      	beq.n	63d0 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    62dc:	2301      	movs	r3, #1
    62de:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    62e0:	21ff      	movs	r1, #255	; 0xff
    62e2:	2000      	movs	r0, #0
    62e4:	f7ff fe90 	bl	6008 <Power_Ip_ReportPowerErrors>
            }

            break;
    62e8:	e072      	b.n	63d0 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    62ea:	4b3e      	ldr	r3, [pc, #248]	; (63e4 <Power_Ip_SMC_ModeConfig+0x198>)
    62ec:	68db      	ldr	r3, [r3, #12]
    62ee:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    62f0:	9b06      	ldr	r3, [sp, #24]
    62f2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    62f6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    62f8:	9b06      	ldr	r3, [sp, #24]
    62fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    62fe:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6300:	4a38      	ldr	r2, [pc, #224]	; (63e4 <Power_Ip_SMC_ModeConfig+0x198>)
    6302:	9b06      	ldr	r3, [sp, #24]
    6304:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6306:	aa02      	add	r2, sp, #8
    6308:	a903      	add	r1, sp, #12
    630a:	a804      	add	r0, sp, #16
    630c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6310:	f7ff fe96 	bl	6040 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6314:	9a02      	ldr	r2, [sp, #8]
    6316:	a903      	add	r1, sp, #12
    6318:	ab04      	add	r3, sp, #16
    631a:	4618      	mov	r0, r3
    631c:	f7ff feaa 	bl	6074 <Power_Ip_TimeoutExpired>
    6320:	4603      	mov	r3, r0
    6322:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    6326:	4b2f      	ldr	r3, [pc, #188]	; (63e4 <Power_Ip_SMC_ModeConfig+0x198>)
    6328:	695b      	ldr	r3, [r3, #20]
    632a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    632e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6330:	9b05      	ldr	r3, [sp, #20]
    6332:	2b80      	cmp	r3, #128	; 0x80
    6334:	d006      	beq.n	6344 <Power_Ip_SMC_ModeConfig+0xf8>
    6336:	f89d 301f 	ldrb.w	r3, [sp, #31]
    633a:	f083 0301 	eor.w	r3, r3, #1
    633e:	b2db      	uxtb	r3, r3
    6340:	2b00      	cmp	r3, #0
    6342:	d1e7      	bne.n	6314 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6344:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6348:	2b00      	cmp	r3, #0
    634a:	d043      	beq.n	63d4 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    634c:	2301      	movs	r3, #1
    634e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6350:	21ff      	movs	r1, #255	; 0xff
    6352:	2000      	movs	r0, #0
    6354:	f7ff fe58 	bl	6008 <Power_Ip_ReportPowerErrors>
            }

            break;
    6358:	e03c      	b.n	63d4 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    635a:	4b22      	ldr	r3, [pc, #136]	; (63e4 <Power_Ip_SMC_ModeConfig+0x198>)
    635c:	68db      	ldr	r3, [r3, #12]
    635e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6360:	9b06      	ldr	r3, [sp, #24]
    6362:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6366:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6368:	9b06      	ldr	r3, [sp, #24]
    636a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    636e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6370:	4a1c      	ldr	r2, [pc, #112]	; (63e4 <Power_Ip_SMC_ModeConfig+0x198>)
    6372:	9b06      	ldr	r3, [sp, #24]
    6374:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6376:	aa02      	add	r2, sp, #8
    6378:	a903      	add	r1, sp, #12
    637a:	a804      	add	r0, sp, #16
    637c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6380:	f7ff fe5e 	bl	6040 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6384:	9a02      	ldr	r2, [sp, #8]
    6386:	a903      	add	r1, sp, #12
    6388:	ab04      	add	r3, sp, #16
    638a:	4618      	mov	r0, r3
    638c:	f7ff fe72 	bl	6074 <Power_Ip_TimeoutExpired>
    6390:	4603      	mov	r3, r0
    6392:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    6396:	4b13      	ldr	r3, [pc, #76]	; (63e4 <Power_Ip_SMC_ModeConfig+0x198>)
    6398:	695b      	ldr	r3, [r3, #20]
    639a:	f003 0304 	and.w	r3, r3, #4
    639e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    63a0:	9b05      	ldr	r3, [sp, #20]
    63a2:	2b04      	cmp	r3, #4
    63a4:	d006      	beq.n	63b4 <Power_Ip_SMC_ModeConfig+0x168>
    63a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    63aa:	f083 0301 	eor.w	r3, r3, #1
    63ae:	b2db      	uxtb	r3, r3
    63b0:	2b00      	cmp	r3, #0
    63b2:	d1e7      	bne.n	6384 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    63b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    63b8:	2b00      	cmp	r3, #0
    63ba:	d00d      	beq.n	63d8 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    63bc:	2301      	movs	r3, #1
    63be:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    63c0:	21ff      	movs	r1, #255	; 0xff
    63c2:	2000      	movs	r0, #0
    63c4:	f7ff fe20 	bl	6008 <Power_Ip_ReportPowerErrors>
            }

            break;
    63c8:	e006      	b.n	63d8 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    63ca:	2301      	movs	r3, #1
    63cc:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    63ce:	e004      	b.n	63da <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    63d0:	bf00      	nop
    63d2:	e002      	b.n	63da <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    63d4:	bf00      	nop
    63d6:	e000      	b.n	63da <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    63d8:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    63da:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    63dc:	4618      	mov	r0, r3
    63de:	b00b      	add	sp, #44	; 0x2c
    63e0:	f85d fb04 	ldr.w	pc, [sp], #4
    63e4:	4007e000 	.word	0x4007e000

000063e8 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    63e8:	b500      	push	{lr}
    63ea:	b085      	sub	sp, #20
    63ec:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    63ee:	9b01      	ldr	r3, [sp, #4]
    63f0:	9303      	str	r3, [sp, #12]
#endif /* (STD_ON == PORT_PRECOMPILE_SUPPORT) */

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    63f2:	2300      	movs	r3, #0
    63f4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (STD_OFF == PORT_PRECOMPILE_SUPPORT)
    if (NULL_PTR == ConfigPtr)
    63f8:	9b01      	ldr	r3, [sp, #4]
    63fa:	2b00      	cmp	r3, #0
    63fc:	d106      	bne.n	640c <Port_Init+0x24>
#else /*(STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    if (NULL_PTR != ConfigPtr)
#endif /* (STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_INIT_FAILED);
    63fe:	230c      	movs	r3, #12
    6400:	2200      	movs	r2, #0
    6402:	2100      	movs	r1, #0
    6404:	207c      	movs	r0, #124	; 0x7c
    6406:	f010 fc3d 	bl	16c84 <Det_ReportError>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
        }
    }
}
    640a:	e014      	b.n	6436 <Port_Init+0x4e>
        if ((uint32)1 != pLocalConfigPtr->pau8Port_PartitionList[CoreId])
    640c:	9b03      	ldr	r3, [sp, #12]
    640e:	69da      	ldr	r2, [r3, #28]
    6410:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6414:	4413      	add	r3, r2
    6416:	781b      	ldrb	r3, [r3, #0]
    6418:	2b01      	cmp	r3, #1
    641a:	d006      	beq.n	642a <Port_Init+0x42>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
    641c:	23f0      	movs	r3, #240	; 0xf0
    641e:	2200      	movs	r2, #0
    6420:	2100      	movs	r1, #0
    6422:	207c      	movs	r0, #124	; 0x7c
    6424:	f010 fc2e 	bl	16c84 <Det_ReportError>
}
    6428:	e005      	b.n	6436 <Port_Init+0x4e>
            Port_Ipw_Init(pLocalConfigPtr);
    642a:	9803      	ldr	r0, [sp, #12]
    642c:	f000 fc64 	bl	6cf8 <Port_Ipw_Init>
            Port_pConfigPtr = pLocalConfigPtr;
    6430:	4a03      	ldr	r2, [pc, #12]	; (6440 <Port_Init+0x58>)
    6432:	9b03      	ldr	r3, [sp, #12]
    6434:	6013      	str	r3, [r2, #0]
}
    6436:	bf00      	nop
    6438:	b005      	add	sp, #20
    643a:	f85d fb04 	ldr.w	pc, [sp], #4
    643e:	bf00      	nop
    6440:	1fff8ce8 	.word	0x1fff8ce8

00006444 <Port_SetPinDirection>:
void Port_SetPinDirection
(
    Port_PinType Pin,
    Port_PinDirectionType Direction
)
{
    6444:	b500      	push	{lr}
    6446:	b085      	sub	sp, #20
    6448:	9001      	str	r0, [sp, #4]
    644a:	9100      	str	r1, [sp, #0]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    /* Variable used to store current error status */
    Std_ReturnType ErrStatus;

    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    644c:	4b11      	ldr	r3, [pc, #68]	; (6494 <Port_SetPinDirection+0x50>)
    644e:	681b      	ldr	r3, [r3, #0]
    6450:	2b00      	cmp	r3, #0
    6452:	d106      	bne.n	6462 <Port_SetPinDirection+0x1e>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    6454:	230f      	movs	r3, #15
    6456:	2201      	movs	r2, #1
    6458:	2100      	movs	r1, #0
    645a:	207c      	movs	r0, #124	; 0x7c
    645c:	f010 fc12 	bl	16c84 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    6460:	e013      	b.n	648a <Port_SetPinDirection+0x46>
        ErrStatus = Port_Ipw_SetPinDirection(Pin, Direction, Port_pConfigPtr);
    6462:	4b0c      	ldr	r3, [pc, #48]	; (6494 <Port_SetPinDirection+0x50>)
    6464:	681b      	ldr	r3, [r3, #0]
    6466:	461a      	mov	r2, r3
    6468:	9900      	ldr	r1, [sp, #0]
    646a:	9801      	ldr	r0, [sp, #4]
    646c:	f000 fcb2 	bl	6dd4 <Port_Ipw_SetPinDirection>
    6470:	4603      	mov	r3, r0
    6472:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_NOT_OK == ErrStatus)
    6476:	f89d 300f 	ldrb.w	r3, [sp, #15]
    647a:	2b01      	cmp	r3, #1
    647c:	d105      	bne.n	648a <Port_SetPinDirection+0x46>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
    647e:	230b      	movs	r3, #11
    6480:	2201      	movs	r2, #1
    6482:	2100      	movs	r1, #0
    6484:	207c      	movs	r0, #124	; 0x7c
    6486:	f010 fbfd 	bl	16c84 <Det_ReportError>
}
    648a:	bf00      	nop
    648c:	b005      	add	sp, #20
    648e:	f85d fb04 	ldr.w	pc, [sp], #4
    6492:	bf00      	nop
    6494:	1fff8ce8 	.word	0x1fff8ce8

00006498 <Port_SetPinMode>:
void Port_SetPinMode
(
    Port_PinType Pin,
    Port_PinModeType Mode
)
{
    6498:	b500      	push	{lr}
    649a:	b085      	sub	sp, #20
    649c:	9001      	str	r0, [sp, #4]
    649e:	460b      	mov	r3, r1
    64a0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 u8PinModeError = (uint8)0U;
    64a4:	2300      	movs	r3, #0
    64a6:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if port is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    64aa:	4b12      	ldr	r3, [pc, #72]	; (64f4 <Port_SetPinMode+0x5c>)
    64ac:	681b      	ldr	r3, [r3, #0]
    64ae:	2b00      	cmp	r3, #0
    64b0:	d106      	bne.n	64c0 <Port_SetPinMode+0x28>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_UNINIT);
    64b2:	230f      	movs	r3, #15
    64b4:	2204      	movs	r2, #4
    64b6:	2100      	movs	r1, #0
    64b8:	207c      	movs	r0, #124	; 0x7c
    64ba:	f010 fbe3 	bl	16c84 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    64be:	e014      	b.n	64ea <Port_SetPinMode+0x52>
        u8PinModeError = (uint8)Port_Ipw_SetPinMode(Pin, Mode, Port_pConfigPtr);
    64c0:	4b0c      	ldr	r3, [pc, #48]	; (64f4 <Port_SetPinMode+0x5c>)
    64c2:	681a      	ldr	r2, [r3, #0]
    64c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    64c8:	4619      	mov	r1, r3
    64ca:	9801      	ldr	r0, [sp, #4]
    64cc:	f000 fd7a 	bl	6fc4 <Port_Ipw_SetPinMode>
    64d0:	4603      	mov	r3, r0
    64d2:	f88d 300f 	strb.w	r3, [sp, #15]
        if (PORT_E_PARAM_INVALID_MODE == u8PinModeError)
    64d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    64da:	2b0d      	cmp	r3, #13
    64dc:	d105      	bne.n	64ea <Port_SetPinMode+0x52>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
    64de:	230d      	movs	r3, #13
    64e0:	2204      	movs	r2, #4
    64e2:	2100      	movs	r1, #0
    64e4:	207c      	movs	r0, #124	; 0x7c
    64e6:	f010 fbcd 	bl	16c84 <Det_ReportError>
}
    64ea:	bf00      	nop
    64ec:	b005      	add	sp, #20
    64ee:	f85d fb04 	ldr.w	pc, [sp], #4
    64f2:	bf00      	nop
    64f4:	1fff8ce8 	.word	0x1fff8ce8

000064f8 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    64f8:	b500      	push	{lr}
    64fa:	b083      	sub	sp, #12
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    64fc:	2300      	movs	r3, #0
    64fe:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    6502:	4b12      	ldr	r3, [pc, #72]	; (654c <Port_RefreshPortDirection+0x54>)
    6504:	681b      	ldr	r3, [r3, #0]
    6506:	2b00      	cmp	r3, #0
    6508:	d106      	bne.n	6518 <Port_RefreshPortDirection+0x20>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    650a:	230f      	movs	r3, #15
    650c:	2202      	movs	r2, #2
    650e:	2100      	movs	r1, #0
    6510:	207c      	movs	r0, #124	; 0x7c
    6512:	f010 fbb7 	bl	16c84 <Det_ReportError>
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    }
}
    6516:	e014      	b.n	6542 <Port_RefreshPortDirection+0x4a>
    else if ((uint32)1 != Port_pConfigPtr->pau8Port_PartitionList[CoreId])
    6518:	4b0c      	ldr	r3, [pc, #48]	; (654c <Port_RefreshPortDirection+0x54>)
    651a:	681b      	ldr	r3, [r3, #0]
    651c:	69da      	ldr	r2, [r3, #28]
    651e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6522:	4413      	add	r3, r2
    6524:	781b      	ldrb	r3, [r3, #0]
    6526:	2b01      	cmp	r3, #1
    6528:	d006      	beq.n	6538 <Port_RefreshPortDirection+0x40>
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    652a:	23f0      	movs	r3, #240	; 0xf0
    652c:	2202      	movs	r2, #2
    652e:	2100      	movs	r1, #0
    6530:	207c      	movs	r0, #124	; 0x7c
    6532:	f010 fba7 	bl	16c84 <Det_ReportError>
}
    6536:	e004      	b.n	6542 <Port_RefreshPortDirection+0x4a>
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    6538:	4b04      	ldr	r3, [pc, #16]	; (654c <Port_RefreshPortDirection+0x54>)
    653a:	681b      	ldr	r3, [r3, #0]
    653c:	4618      	mov	r0, r3
    653e:	f000 febf 	bl	72c0 <Port_Ipw_RefreshPortDirection>
}
    6542:	bf00      	nop
    6544:	b003      	add	sp, #12
    6546:	f85d fb04 	ldr.w	pc, [sp], #4
    654a:	bf00      	nop
    654c:	1fff8ce8 	.word	0x1fff8ce8

00006550 <Port_GetVersionInfo>:
*/
void Port_GetVersionInfo
(
    Std_VersionInfoType * versioninfo
)
{
    6550:	b500      	push	{lr}
    6552:	b083      	sub	sp, #12
    6554:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    if (NULL_PTR == versioninfo)
    6556:	9b01      	ldr	r3, [sp, #4]
    6558:	2b00      	cmp	r3, #0
    655a:	d106      	bne.n	656a <Port_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_GETVERSIONINFO_ID, (uint8)PORT_E_PARAM_POINTER);
    655c:	2310      	movs	r3, #16
    655e:	2203      	movs	r2, #3
    6560:	2100      	movs	r1, #0
    6562:	207c      	movs	r0, #124	; 0x7c
    6564:	f010 fb8e 	bl	16c84 <Det_ReportError>
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    }
}
    6568:	e00e      	b.n	6588 <Port_GetVersionInfo+0x38>
        (versioninfo)->vendorID         = (uint16)PORT_VENDOR_ID;
    656a:	9b01      	ldr	r3, [sp, #4]
    656c:	222b      	movs	r2, #43	; 0x2b
    656e:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
    6570:	9b01      	ldr	r3, [sp, #4]
    6572:	227c      	movs	r2, #124	; 0x7c
    6574:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
    6576:	9b01      	ldr	r3, [sp, #4]
    6578:	2202      	movs	r2, #2
    657a:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
    657c:	9b01      	ldr	r3, [sp, #4]
    657e:	2200      	movs	r2, #0
    6580:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    6582:	9b01      	ldr	r3, [sp, #4]
    6584:	2200      	movs	r2, #0
    6586:	719a      	strb	r2, [r3, #6]
}
    6588:	bf00      	nop
    658a:	b003      	add	sp, #12
    658c:	f85d fb04 	ldr.w	pc, [sp], #4

00006590 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6590:	b086      	sub	sp, #24
    6592:	9003      	str	r0, [sp, #12]
    6594:	9102      	str	r1, [sp, #8]
    6596:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    6598:	23ff      	movs	r3, #255	; 0xff
    659a:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    659c:	9b03      	ldr	r3, [sp, #12]
    659e:	4a39      	ldr	r2, [pc, #228]	; (6684 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    65a0:	4293      	cmp	r3, r2
    65a2:	d151      	bne.n	6648 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    65a4:	9b02      	ldr	r3, [sp, #8]
    65a6:	2b10      	cmp	r3, #16
    65a8:	d867      	bhi.n	667a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    65aa:	a201      	add	r2, pc, #4	; (adr r2, 65b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    65ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    65b0:	000065f5 	.word	0x000065f5
    65b4:	00006603 	.word	0x00006603
    65b8:	0000667b 	.word	0x0000667b
    65bc:	0000667b 	.word	0x0000667b
    65c0:	0000667b 	.word	0x0000667b
    65c4:	0000667b 	.word	0x0000667b
    65c8:	0000667b 	.word	0x0000667b
    65cc:	0000667b 	.word	0x0000667b
    65d0:	0000667b 	.word	0x0000667b
    65d4:	0000667b 	.word	0x0000667b
    65d8:	0000667b 	.word	0x0000667b
    65dc:	0000667b 	.word	0x0000667b
    65e0:	0000667b 	.word	0x0000667b
    65e4:	00006611 	.word	0x00006611
    65e8:	0000661f 	.word	0x0000661f
    65ec:	0000662d 	.word	0x0000662d
    65f0:	0000663b 	.word	0x0000663b
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    65f4:	2301      	movs	r3, #1
    65f6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65f8:	9a05      	ldr	r2, [sp, #20]
    65fa:	9b01      	ldr	r3, [sp, #4]
    65fc:	4313      	orrs	r3, r2
    65fe:	9305      	str	r3, [sp, #20]
                break;
    6600:	e03c      	b.n	667c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6602:	2302      	movs	r3, #2
    6604:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6606:	9a05      	ldr	r2, [sp, #20]
    6608:	9b01      	ldr	r3, [sp, #4]
    660a:	4313      	orrs	r3, r2
    660c:	9305      	str	r3, [sp, #20]
                break;
    660e:	e035      	b.n	667c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6610:	2304      	movs	r3, #4
    6612:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6614:	9a05      	ldr	r2, [sp, #20]
    6616:	9b01      	ldr	r3, [sp, #4]
    6618:	4313      	orrs	r3, r2
    661a:	9305      	str	r3, [sp, #20]
                break;
    661c:	e02e      	b.n	667c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    661e:	2308      	movs	r3, #8
    6620:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6622:	9a05      	ldr	r2, [sp, #20]
    6624:	9b01      	ldr	r3, [sp, #4]
    6626:	4313      	orrs	r3, r2
    6628:	9305      	str	r3, [sp, #20]
                break;
    662a:	e027      	b.n	667c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    662c:	230e      	movs	r3, #14
    662e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6630:	9a05      	ldr	r2, [sp, #20]
    6632:	9b01      	ldr	r3, [sp, #4]
    6634:	4013      	ands	r3, r2
    6636:	9305      	str	r3, [sp, #20]
                break;
    6638:	e020      	b.n	667c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    663a:	230d      	movs	r3, #13
    663c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    663e:	9a05      	ldr	r2, [sp, #20]
    6640:	9b01      	ldr	r3, [sp, #4]
    6642:	4013      	ands	r3, r2
    6644:	9305      	str	r3, [sp, #20]
                break;
    6646:	e019      	b.n	667c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    6648:	9b03      	ldr	r3, [sp, #12]
    664a:	4a0f      	ldr	r2, [pc, #60]	; (6688 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    664c:	4293      	cmp	r3, r2
    664e:	d115      	bne.n	667c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    6650:	9b02      	ldr	r3, [sp, #8]
    6652:	2b00      	cmp	r3, #0
    6654:	d003      	beq.n	665e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    6656:	9b02      	ldr	r3, [sp, #8]
    6658:	2b01      	cmp	r3, #1
    665a:	d007      	beq.n	666c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    665c:	e00e      	b.n	667c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    665e:	230b      	movs	r3, #11
    6660:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6662:	9a05      	ldr	r2, [sp, #20]
    6664:	9b01      	ldr	r3, [sp, #4]
    6666:	4013      	ands	r3, r2
    6668:	9305      	str	r3, [sp, #20]
                break;
    666a:	e007      	b.n	667c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    666c:	2307      	movs	r3, #7
    666e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6670:	9a05      	ldr	r2, [sp, #20]
    6672:	9b01      	ldr	r3, [sp, #4]
    6674:	4013      	ands	r3, r2
    6676:	9305      	str	r3, [sp, #20]
                break;
    6678:	e000      	b.n	667c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    667a:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    667c:	9b05      	ldr	r3, [sp, #20]
}
    667e:	4618      	mov	r0, r3
    6680:	b006      	add	sp, #24
    6682:	4770      	bx	lr
    6684:	4004a000 	.word	0x4004a000
    6688:	4004b000 	.word	0x4004b000

0000668c <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    668c:	b500      	push	{lr}
    668e:	b089      	sub	sp, #36	; 0x24
    6690:	9003      	str	r0, [sp, #12]
    6692:	9102      	str	r1, [sp, #8]
    6694:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6696:	9b01      	ldr	r3, [sp, #4]
    6698:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    669a:	9b01      	ldr	r3, [sp, #4]
    669c:	2b08      	cmp	r3, #8
    669e:	d121      	bne.n	66e4 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    66a0:	4b13      	ldr	r3, [pc, #76]	; (66f0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    66a2:	685b      	ldr	r3, [r3, #4]
    66a4:	f003 030f 	and.w	r3, r3, #15
    66a8:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    66aa:	9a06      	ldr	r2, [sp, #24]
    66ac:	9902      	ldr	r1, [sp, #8]
    66ae:	9803      	ldr	r0, [sp, #12]
    66b0:	f7ff ff6e 	bl	6590 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    66b4:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    66b6:	9b05      	ldr	r3, [sp, #20]
    66b8:	2bff      	cmp	r3, #255	; 0xff
    66ba:	d011      	beq.n	66e0 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    66bc:	f00e fc2a 	bl	14f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    66c0:	4b0b      	ldr	r3, [pc, #44]	; (66f0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    66c2:	685b      	ldr	r3, [r3, #4]
    66c4:	4a0a      	ldr	r2, [pc, #40]	; (66f0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    66c6:	f023 030f 	bic.w	r3, r3, #15
    66ca:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    66cc:	4b08      	ldr	r3, [pc, #32]	; (66f0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    66ce:	685a      	ldr	r2, [r3, #4]
    66d0:	9b05      	ldr	r3, [sp, #20]
    66d2:	f003 030f 	and.w	r3, r3, #15
    66d6:	4906      	ldr	r1, [pc, #24]	; (66f0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    66d8:	4313      	orrs	r3, r2
    66da:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    66dc:	f00e fc46 	bl	14f6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    66e0:	2300      	movs	r3, #0
    66e2:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    66e4:	9b07      	ldr	r3, [sp, #28]
}
    66e6:	4618      	mov	r0, r3
    66e8:	b009      	add	sp, #36	; 0x24
    66ea:	f85d fb04 	ldr.w	pc, [sp], #4
    66ee:	bf00      	nop
    66f0:	40048000 	.word	0x40048000

000066f4 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    66f4:	b500      	push	{lr}
    66f6:	b087      	sub	sp, #28
    66f8:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    66fa:	2300      	movs	r3, #0
    66fc:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    66fe:	2300      	movs	r3, #0
    6700:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6702:	2300      	movs	r3, #0
    6704:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6706:	9b01      	ldr	r3, [sp, #4]
    6708:	68db      	ldr	r3, [r3, #12]
    670a:	2b02      	cmp	r3, #2
    670c:	d00a      	beq.n	6724 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    670e:	9b05      	ldr	r3, [sp, #20]
    6710:	f043 0302 	orr.w	r3, r3, #2
    6714:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6716:	9b01      	ldr	r3, [sp, #4]
    6718:	68db      	ldr	r3, [r3, #12]
    671a:	f003 0301 	and.w	r3, r3, #1
    671e:	9a05      	ldr	r2, [sp, #20]
    6720:	4313      	orrs	r3, r2
    6722:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6724:	9b01      	ldr	r3, [sp, #4]
    6726:	699b      	ldr	r3, [r3, #24]
    6728:	019b      	lsls	r3, r3, #6
    672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    672e:	9a05      	ldr	r2, [sp, #20]
    6730:	4313      	orrs	r3, r2
    6732:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6734:	9b01      	ldr	r3, [sp, #4]
    6736:	6a1b      	ldr	r3, [r3, #32]
    6738:	03db      	lsls	r3, r3, #15
    673a:	b29b      	uxth	r3, r3
    673c:	9a05      	ldr	r2, [sp, #20]
    673e:	4313      	orrs	r3, r2
    6740:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6742:	9b01      	ldr	r3, [sp, #4]
    6744:	7f1b      	ldrb	r3, [r3, #28]
    6746:	2b00      	cmp	r3, #0
    6748:	d001      	beq.n	674e <Port_Ci_Port_Ip_PinInit+0x5a>
    674a:	2310      	movs	r3, #16
    674c:	e000      	b.n	6750 <Port_Ci_Port_Ip_PinInit+0x5c>
    674e:	2300      	movs	r3, #0
    6750:	9a05      	ldr	r2, [sp, #20]
    6752:	4313      	orrs	r3, r2
    6754:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6756:	9b01      	ldr	r3, [sp, #4]
    6758:	691b      	ldr	r3, [r3, #16]
    675a:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    675c:	9b01      	ldr	r3, [sp, #4]
    675e:	6818      	ldr	r0, [r3, #0]
    6760:	9b01      	ldr	r3, [sp, #4]
    6762:	689b      	ldr	r3, [r3, #8]
    6764:	9a04      	ldr	r2, [sp, #16]
    6766:	4619      	mov	r1, r3
    6768:	f7ff ff90 	bl	668c <Port_Ci_Port_Ip_ConfigureInterleave>
    676c:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    676e:	9b03      	ldr	r3, [sp, #12]
    6770:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6772:	9b04      	ldr	r3, [sp, #16]
    6774:	021b      	lsls	r3, r3, #8
    6776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    677a:	9a05      	ldr	r2, [sp, #20]
    677c:	4313      	orrs	r3, r2
    677e:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6780:	f00e fa2e 	bl	14be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6784:	9b01      	ldr	r3, [sp, #4]
    6786:	681b      	ldr	r3, [r3, #0]
    6788:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    678c:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    678e:	9b01      	ldr	r3, [sp, #4]
    6790:	689b      	ldr	r3, [r3, #8]
    6792:	2201      	movs	r2, #1
    6794:	fa02 f303 	lsl.w	r3, r2, r3
    6798:	43db      	mvns	r3, r3
    679a:	9a02      	ldr	r2, [sp, #8]
    679c:	4013      	ands	r3, r2
    679e:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    67a0:	9b01      	ldr	r3, [sp, #4]
    67a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    67a6:	2b00      	cmp	r3, #0
    67a8:	d001      	beq.n	67ae <Port_Ci_Port_Ip_PinInit+0xba>
    67aa:	2201      	movs	r2, #1
    67ac:	e000      	b.n	67b0 <Port_Ci_Port_Ip_PinInit+0xbc>
    67ae:	2200      	movs	r2, #0
    67b0:	9b01      	ldr	r3, [sp, #4]
    67b2:	689b      	ldr	r3, [r3, #8]
    67b4:	fa02 f303 	lsl.w	r3, r2, r3
    67b8:	9a02      	ldr	r2, [sp, #8]
    67ba:	4313      	orrs	r3, r2
    67bc:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    67be:	9b01      	ldr	r3, [sp, #4]
    67c0:	681b      	ldr	r3, [r3, #0]
    67c2:	9a02      	ldr	r2, [sp, #8]
    67c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    67c8:	f00e fa36 	bl	14c38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    67cc:	9b04      	ldr	r3, [sp, #16]
    67ce:	2b01      	cmp	r3, #1
    67d0:	d16d      	bne.n	68ae <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    67d2:	9b01      	ldr	r3, [sp, #4]
    67d4:	695b      	ldr	r3, [r3, #20]
    67d6:	2b02      	cmp	r3, #2
    67d8:	d138      	bne.n	684c <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    67da:	9b01      	ldr	r3, [sp, #4]
    67dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    67e0:	2b01      	cmp	r3, #1
    67e2:	d10f      	bne.n	6804 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    67e4:	f00e fa4e 	bl	14c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    67e8:	9b01      	ldr	r3, [sp, #4]
    67ea:	685b      	ldr	r3, [r3, #4]
    67ec:	6859      	ldr	r1, [r3, #4]
    67ee:	9b01      	ldr	r3, [sp, #4]
    67f0:	689b      	ldr	r3, [r3, #8]
    67f2:	2201      	movs	r2, #1
    67f4:	409a      	lsls	r2, r3
    67f6:	9b01      	ldr	r3, [sp, #4]
    67f8:	685b      	ldr	r3, [r3, #4]
    67fa:	430a      	orrs	r2, r1
    67fc:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    67fe:	f00e fa6d 	bl	14cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6802:	e013      	b.n	682c <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6804:	9b01      	ldr	r3, [sp, #4]
    6806:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    680a:	2b00      	cmp	r3, #0
    680c:	d10e      	bne.n	682c <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    680e:	f00e fa8b 	bl	14d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6812:	9b01      	ldr	r3, [sp, #4]
    6814:	685b      	ldr	r3, [r3, #4]
    6816:	6899      	ldr	r1, [r3, #8]
    6818:	9b01      	ldr	r3, [sp, #4]
    681a:	689b      	ldr	r3, [r3, #8]
    681c:	2201      	movs	r2, #1
    681e:	409a      	lsls	r2, r3
    6820:	9b01      	ldr	r3, [sp, #4]
    6822:	685b      	ldr	r3, [r3, #4]
    6824:	430a      	orrs	r2, r1
    6826:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6828:	f00e faaa 	bl	14d80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    682c:	f00e face 	bl	14dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6830:	9b01      	ldr	r3, [sp, #4]
    6832:	685b      	ldr	r3, [r3, #4]
    6834:	6959      	ldr	r1, [r3, #20]
    6836:	9b01      	ldr	r3, [sp, #4]
    6838:	689b      	ldr	r3, [r3, #8]
    683a:	2201      	movs	r2, #1
    683c:	409a      	lsls	r2, r3
    683e:	9b01      	ldr	r3, [sp, #4]
    6840:	685b      	ldr	r3, [r3, #4]
    6842:	430a      	orrs	r2, r1
    6844:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6846:	f00e faed 	bl	14e24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    684a:	e030      	b.n	68ae <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    684c:	f00e fabe 	bl	14dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6850:	9b01      	ldr	r3, [sp, #4]
    6852:	685b      	ldr	r3, [r3, #4]
    6854:	6959      	ldr	r1, [r3, #20]
    6856:	9b01      	ldr	r3, [sp, #4]
    6858:	689b      	ldr	r3, [r3, #8]
    685a:	2201      	movs	r2, #1
    685c:	fa02 f303 	lsl.w	r3, r2, r3
    6860:	43da      	mvns	r2, r3
    6862:	9b01      	ldr	r3, [sp, #4]
    6864:	685b      	ldr	r3, [r3, #4]
    6866:	400a      	ands	r2, r1
    6868:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    686a:	f00e fadb 	bl	14e24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    686e:	f00e faff 	bl	14e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6872:	9b01      	ldr	r3, [sp, #4]
    6874:	685b      	ldr	r3, [r3, #4]
    6876:	6999      	ldr	r1, [r3, #24]
    6878:	9b01      	ldr	r3, [sp, #4]
    687a:	689b      	ldr	r3, [r3, #8]
    687c:	2201      	movs	r2, #1
    687e:	fa02 f303 	lsl.w	r3, r2, r3
    6882:	43da      	mvns	r2, r3
    6884:	9b01      	ldr	r3, [sp, #4]
    6886:	685b      	ldr	r3, [r3, #4]
    6888:	400a      	ands	r2, r1
    688a:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    688c:	9b01      	ldr	r3, [sp, #4]
    688e:	695b      	ldr	r3, [r3, #20]
    6890:	2b03      	cmp	r3, #3
    6892:	d10a      	bne.n	68aa <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6894:	9b01      	ldr	r3, [sp, #4]
    6896:	685b      	ldr	r3, [r3, #4]
    6898:	6999      	ldr	r1, [r3, #24]
    689a:	9b01      	ldr	r3, [sp, #4]
    689c:	689b      	ldr	r3, [r3, #8]
    689e:	2201      	movs	r2, #1
    68a0:	409a      	lsls	r2, r3
    68a2:	9b01      	ldr	r3, [sp, #4]
    68a4:	685b      	ldr	r3, [r3, #4]
    68a6:	430a      	orrs	r2, r1
    68a8:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    68aa:	f00e fb0d 	bl	14ec8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    68ae:	9b01      	ldr	r3, [sp, #4]
    68b0:	681b      	ldr	r3, [r3, #0]
    68b2:	9a01      	ldr	r2, [sp, #4]
    68b4:	6892      	ldr	r2, [r2, #8]
    68b6:	9905      	ldr	r1, [sp, #20]
    68b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    68bc:	bf00      	nop
    68be:	b007      	add	sp, #28
    68c0:	f85d fb04 	ldr.w	pc, [sp], #4

000068c4 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    68c4:	b500      	push	{lr}
    68c6:	b085      	sub	sp, #20
    68c8:	9001      	str	r0, [sp, #4]
    68ca:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    68cc:	2300      	movs	r3, #0
    68ce:	9303      	str	r3, [sp, #12]
    68d0:	e00d      	b.n	68ee <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    68d2:	9a03      	ldr	r2, [sp, #12]
    68d4:	4613      	mov	r3, r2
    68d6:	009b      	lsls	r3, r3, #2
    68d8:	4413      	add	r3, r2
    68da:	00db      	lsls	r3, r3, #3
    68dc:	461a      	mov	r2, r3
    68de:	9b00      	ldr	r3, [sp, #0]
    68e0:	4413      	add	r3, r2
    68e2:	4618      	mov	r0, r3
    68e4:	f7ff ff06 	bl	66f4 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    68e8:	9b03      	ldr	r3, [sp, #12]
    68ea:	3301      	adds	r3, #1
    68ec:	9303      	str	r3, [sp, #12]
    68ee:	9a03      	ldr	r2, [sp, #12]
    68f0:	9b01      	ldr	r3, [sp, #4]
    68f2:	429a      	cmp	r2, r3
    68f4:	d3ed      	bcc.n	68d2 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    68f6:	2300      	movs	r3, #0
}
    68f8:	4618      	mov	r0, r3
    68fa:	b005      	add	sp, #20
    68fc:	f85d fb04 	ldr.w	pc, [sp], #4

00006900 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6900:	b500      	push	{lr}
    6902:	b087      	sub	sp, #28
    6904:	9003      	str	r0, [sp, #12]
    6906:	9102      	str	r1, [sp, #8]
    6908:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    690a:	9a01      	ldr	r2, [sp, #4]
    690c:	9902      	ldr	r1, [sp, #8]
    690e:	9803      	ldr	r0, [sp, #12]
    6910:	f7ff febc 	bl	668c <Port_Ci_Port_Ip_ConfigureInterleave>
    6914:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6916:	f00e fb4f 	bl	14fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    691a:	9b03      	ldr	r3, [sp, #12]
    691c:	9a02      	ldr	r2, [sp, #8]
    691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6922:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6924:	9b04      	ldr	r3, [sp, #16]
    6926:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    692a:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    692c:	9b05      	ldr	r3, [sp, #20]
    692e:	021b      	lsls	r3, r3, #8
    6930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6934:	9a04      	ldr	r2, [sp, #16]
    6936:	4313      	orrs	r3, r2
    6938:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    693a:	9b03      	ldr	r3, [sp, #12]
    693c:	9a02      	ldr	r2, [sp, #8]
    693e:	9904      	ldr	r1, [sp, #16]
    6940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6944:	f00e fb64 	bl	15010 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6948:	bf00      	nop
    694a:	b007      	add	sp, #28
    694c:	f85d fb04 	ldr.w	pc, [sp], #4

00006950 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6950:	b500      	push	{lr}
    6952:	b083      	sub	sp, #12
    6954:	9001      	str	r0, [sp, #4]
    6956:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6958:	f00e fb80 	bl	1505c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    695c:	9b01      	ldr	r3, [sp, #4]
    695e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6962:	2101      	movs	r1, #1
    6964:	9b00      	ldr	r3, [sp, #0]
    6966:	fa01 f303 	lsl.w	r3, r1, r3
    696a:	431a      	orrs	r2, r3
    696c:	9b01      	ldr	r3, [sp, #4]
    696e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6972:	f00e fb9f 	bl	150b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6976:	bf00      	nop
    6978:	b003      	add	sp, #12
    697a:	f85d fb04 	ldr.w	pc, [sp], #4

0000697e <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    697e:	b500      	push	{lr}
    6980:	b083      	sub	sp, #12
    6982:	9001      	str	r0, [sp, #4]
    6984:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6986:	f00e fbbb 	bl	15100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    698a:	9b01      	ldr	r3, [sp, #4]
    698c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6990:	2101      	movs	r1, #1
    6992:	9b00      	ldr	r3, [sp, #0]
    6994:	fa01 f303 	lsl.w	r3, r1, r3
    6998:	43db      	mvns	r3, r3
    699a:	401a      	ands	r2, r3
    699c:	9b01      	ldr	r3, [sp, #4]
    699e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    69a2:	f00e fbd9 	bl	15158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    69a6:	bf00      	nop
    69a8:	b003      	add	sp, #12
    69aa:	f85d fb04 	ldr.w	pc, [sp], #4

000069ae <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    69ae:	b082      	sub	sp, #8
    69b0:	9001      	str	r0, [sp, #4]
    69b2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    69b4:	9b00      	ldr	r3, [sp, #0]
    69b6:	785b      	ldrb	r3, [r3, #1]
    69b8:	f003 0201 	and.w	r2, r3, #1
    69bc:	9b01      	ldr	r3, [sp, #4]
    69be:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    69c2:	9b00      	ldr	r3, [sp, #0]
    69c4:	789b      	ldrb	r3, [r3, #2]
    69c6:	f003 021f 	and.w	r2, r3, #31
    69ca:	9b01      	ldr	r3, [sp, #4]
    69cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    69d0:	bf00      	nop
    69d2:	b002      	add	sp, #8
    69d4:	4770      	bx	lr

000069d6 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    69d6:	b086      	sub	sp, #24
    69d8:	9003      	str	r0, [sp, #12]
    69da:	9301      	str	r3, [sp, #4]
    69dc:	460b      	mov	r3, r1
    69de:	f8ad 300a 	strh.w	r3, [sp, #10]
    69e2:	4613      	mov	r3, r2
    69e4:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    69e8:	2300      	movs	r3, #0
    69ea:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    69ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69f2:	f043 0301 	orr.w	r3, r3, #1
    69f6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    69fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69fe:	f043 0302 	orr.w	r3, r3, #2
    6a02:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6a06:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a0a:	f043 0310 	orr.w	r3, r3, #16
    6a0e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6a12:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6a1a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6a1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6a26:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6a2a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6a36:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6a3a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6a3e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6a42:	4013      	ands	r3, r2
    6a44:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6a48:	9b01      	ldr	r3, [sp, #4]
    6a4a:	2b00      	cmp	r3, #0
    6a4c:	d003      	beq.n	6a56 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6a4e:	9b01      	ldr	r3, [sp, #4]
    6a50:	2b01      	cmp	r3, #1
    6a52:	d00a      	beq.n	6a6a <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6a54:	e013      	b.n	6a7e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6a56:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a5a:	041a      	lsls	r2, r3, #16
    6a5c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a60:	431a      	orrs	r2, r3
    6a62:	9b03      	ldr	r3, [sp, #12]
    6a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6a68:	e009      	b.n	6a7e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6a6a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a6e:	041a      	lsls	r2, r3, #16
    6a70:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a74:	431a      	orrs	r2, r3
    6a76:	9b03      	ldr	r3, [sp, #12]
    6a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6a7c:	bf00      	nop
    }
}
    6a7e:	bf00      	nop
    6a80:	b006      	add	sp, #24
    6a82:	4770      	bx	lr

00006a84 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6a84:	b500      	push	{lr}
    6a86:	b087      	sub	sp, #28
    6a88:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6a8a:	9b01      	ldr	r3, [sp, #4]
    6a8c:	885b      	ldrh	r3, [r3, #2]
    6a8e:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6a92:	9b01      	ldr	r3, [sp, #4]
    6a94:	689b      	ldr	r3, [r3, #8]
    6a96:	7a1b      	ldrb	r3, [r3, #8]
    6a98:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6a9c:	9b01      	ldr	r3, [sp, #4]
    6a9e:	689b      	ldr	r3, [r3, #8]
    6aa0:	681b      	ldr	r3, [r3, #0]
    6aa2:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6aa4:	9b01      	ldr	r3, [sp, #4]
    6aa6:	689b      	ldr	r3, [r3, #8]
    6aa8:	685b      	ldr	r3, [r3, #4]
    6aaa:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6aac:	2300      	movs	r3, #0
    6aae:	f8ad 3016 	strh.w	r3, [sp, #22]
    6ab2:	e111      	b.n	6cd8 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6ab4:	9b02      	ldr	r3, [sp, #8]
    6ab6:	2b02      	cmp	r3, #2
    6ab8:	d169      	bne.n	6b8e <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6aba:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6abe:	2b01      	cmp	r3, #1
    6ac0:	d11a      	bne.n	6af8 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6ac2:	9b01      	ldr	r3, [sp, #4]
    6ac4:	685a      	ldr	r2, [r3, #4]
    6ac6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6aca:	005b      	lsls	r3, r3, #1
    6acc:	4413      	add	r3, r2
    6ace:	881b      	ldrh	r3, [r3, #0]
    6ad0:	f003 021f 	and.w	r2, r3, #31
    6ad4:	9b01      	ldr	r3, [sp, #4]
    6ad6:	6859      	ldr	r1, [r3, #4]
    6ad8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6adc:	005b      	lsls	r3, r3, #1
    6ade:	440b      	add	r3, r1
    6ae0:	881b      	ldrh	r3, [r3, #0]
    6ae2:	095b      	lsrs	r3, r3, #5
    6ae4:	b29b      	uxth	r3, r3
    6ae6:	4619      	mov	r1, r3
    6ae8:	4b81      	ldr	r3, [pc, #516]	; (6cf0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6aea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6aee:	2101      	movs	r1, #1
    6af0:	fa01 f202 	lsl.w	r2, r1, r2
    6af4:	605a      	str	r2, [r3, #4]
    6af6:	e01d      	b.n	6b34 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6af8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6afc:	2b00      	cmp	r3, #0
    6afe:	d119      	bne.n	6b34 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b00:	9b01      	ldr	r3, [sp, #4]
    6b02:	685a      	ldr	r2, [r3, #4]
    6b04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b08:	005b      	lsls	r3, r3, #1
    6b0a:	4413      	add	r3, r2
    6b0c:	881b      	ldrh	r3, [r3, #0]
    6b0e:	f003 021f 	and.w	r2, r3, #31
    6b12:	9b01      	ldr	r3, [sp, #4]
    6b14:	6859      	ldr	r1, [r3, #4]
    6b16:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b1a:	005b      	lsls	r3, r3, #1
    6b1c:	440b      	add	r3, r1
    6b1e:	881b      	ldrh	r3, [r3, #0]
    6b20:	095b      	lsrs	r3, r3, #5
    6b22:	b29b      	uxth	r3, r3
    6b24:	4619      	mov	r1, r3
    6b26:	4b72      	ldr	r3, [pc, #456]	; (6cf0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6b2c:	2101      	movs	r1, #1
    6b2e:	fa01 f202 	lsl.w	r2, r1, r2
    6b32:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6b34:	f00e fb36 	bl	151a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b38:	9b01      	ldr	r3, [sp, #4]
    6b3a:	685a      	ldr	r2, [r3, #4]
    6b3c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b40:	005b      	lsls	r3, r3, #1
    6b42:	4413      	add	r3, r2
    6b44:	881b      	ldrh	r3, [r3, #0]
    6b46:	095b      	lsrs	r3, r3, #5
    6b48:	b29b      	uxth	r3, r3
    6b4a:	461a      	mov	r2, r3
    6b4c:	4b68      	ldr	r3, [pc, #416]	; (6cf0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b52:	6959      	ldr	r1, [r3, #20]
    6b54:	9b01      	ldr	r3, [sp, #4]
    6b56:	685a      	ldr	r2, [r3, #4]
    6b58:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b5c:	005b      	lsls	r3, r3, #1
    6b5e:	4413      	add	r3, r2
    6b60:	881b      	ldrh	r3, [r3, #0]
    6b62:	f003 031f 	and.w	r3, r3, #31
    6b66:	2201      	movs	r2, #1
    6b68:	409a      	lsls	r2, r3
    6b6a:	9b01      	ldr	r3, [sp, #4]
    6b6c:	6858      	ldr	r0, [r3, #4]
    6b6e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b72:	005b      	lsls	r3, r3, #1
    6b74:	4403      	add	r3, r0
    6b76:	881b      	ldrh	r3, [r3, #0]
    6b78:	095b      	lsrs	r3, r3, #5
    6b7a:	b29b      	uxth	r3, r3
    6b7c:	4618      	mov	r0, r3
    6b7e:	4b5c      	ldr	r3, [pc, #368]	; (6cf0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b80:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6b84:	430a      	orrs	r2, r1
    6b86:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6b88:	f00e fb38 	bl	151fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6b8c:	e086      	b.n	6c9c <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6b8e:	f00e fb09 	bl	151a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6b92:	9b01      	ldr	r3, [sp, #4]
    6b94:	685a      	ldr	r2, [r3, #4]
    6b96:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b9a:	005b      	lsls	r3, r3, #1
    6b9c:	4413      	add	r3, r2
    6b9e:	881b      	ldrh	r3, [r3, #0]
    6ba0:	095b      	lsrs	r3, r3, #5
    6ba2:	b29b      	uxth	r3, r3
    6ba4:	461a      	mov	r2, r3
    6ba6:	4b52      	ldr	r3, [pc, #328]	; (6cf0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6bac:	6959      	ldr	r1, [r3, #20]
    6bae:	9b01      	ldr	r3, [sp, #4]
    6bb0:	685a      	ldr	r2, [r3, #4]
    6bb2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bb6:	005b      	lsls	r3, r3, #1
    6bb8:	4413      	add	r3, r2
    6bba:	881b      	ldrh	r3, [r3, #0]
    6bbc:	f003 031f 	and.w	r3, r3, #31
    6bc0:	2201      	movs	r2, #1
    6bc2:	fa02 f303 	lsl.w	r3, r2, r3
    6bc6:	43da      	mvns	r2, r3
    6bc8:	9b01      	ldr	r3, [sp, #4]
    6bca:	6858      	ldr	r0, [r3, #4]
    6bcc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bd0:	005b      	lsls	r3, r3, #1
    6bd2:	4403      	add	r3, r0
    6bd4:	881b      	ldrh	r3, [r3, #0]
    6bd6:	095b      	lsrs	r3, r3, #5
    6bd8:	b29b      	uxth	r3, r3
    6bda:	4618      	mov	r0, r3
    6bdc:	4b44      	ldr	r3, [pc, #272]	; (6cf0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bde:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6be2:	400a      	ands	r2, r1
    6be4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6be6:	f00e fb09 	bl	151fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6bea:	f00e fb2d 	bl	15248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6bee:	9b01      	ldr	r3, [sp, #4]
    6bf0:	685a      	ldr	r2, [r3, #4]
    6bf2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bf6:	005b      	lsls	r3, r3, #1
    6bf8:	4413      	add	r3, r2
    6bfa:	881b      	ldrh	r3, [r3, #0]
    6bfc:	095b      	lsrs	r3, r3, #5
    6bfe:	b29b      	uxth	r3, r3
    6c00:	461a      	mov	r2, r3
    6c02:	4b3b      	ldr	r3, [pc, #236]	; (6cf0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c08:	6999      	ldr	r1, [r3, #24]
    6c0a:	9b01      	ldr	r3, [sp, #4]
    6c0c:	685a      	ldr	r2, [r3, #4]
    6c0e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c12:	005b      	lsls	r3, r3, #1
    6c14:	4413      	add	r3, r2
    6c16:	881b      	ldrh	r3, [r3, #0]
    6c18:	f003 031f 	and.w	r3, r3, #31
    6c1c:	2201      	movs	r2, #1
    6c1e:	fa02 f303 	lsl.w	r3, r2, r3
    6c22:	43da      	mvns	r2, r3
    6c24:	9b01      	ldr	r3, [sp, #4]
    6c26:	6858      	ldr	r0, [r3, #4]
    6c28:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c2c:	005b      	lsls	r3, r3, #1
    6c2e:	4403      	add	r3, r0
    6c30:	881b      	ldrh	r3, [r3, #0]
    6c32:	095b      	lsrs	r3, r3, #5
    6c34:	b29b      	uxth	r3, r3
    6c36:	4618      	mov	r0, r3
    6c38:	4b2d      	ldr	r3, [pc, #180]	; (6cf0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c3e:	400a      	ands	r2, r1
    6c40:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6c42:	9b02      	ldr	r3, [sp, #8]
    6c44:	2b03      	cmp	r3, #3
    6c46:	d127      	bne.n	6c98 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6c48:	9b01      	ldr	r3, [sp, #4]
    6c4a:	685a      	ldr	r2, [r3, #4]
    6c4c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c50:	005b      	lsls	r3, r3, #1
    6c52:	4413      	add	r3, r2
    6c54:	881b      	ldrh	r3, [r3, #0]
    6c56:	095b      	lsrs	r3, r3, #5
    6c58:	b29b      	uxth	r3, r3
    6c5a:	461a      	mov	r2, r3
    6c5c:	4b24      	ldr	r3, [pc, #144]	; (6cf0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c62:	6999      	ldr	r1, [r3, #24]
    6c64:	9b01      	ldr	r3, [sp, #4]
    6c66:	685a      	ldr	r2, [r3, #4]
    6c68:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c6c:	005b      	lsls	r3, r3, #1
    6c6e:	4413      	add	r3, r2
    6c70:	881b      	ldrh	r3, [r3, #0]
    6c72:	f003 031f 	and.w	r3, r3, #31
    6c76:	2201      	movs	r2, #1
    6c78:	409a      	lsls	r2, r3
    6c7a:	9b01      	ldr	r3, [sp, #4]
    6c7c:	6858      	ldr	r0, [r3, #4]
    6c7e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c82:	005b      	lsls	r3, r3, #1
    6c84:	4403      	add	r3, r0
    6c86:	881b      	ldrh	r3, [r3, #0]
    6c88:	095b      	lsrs	r3, r3, #5
    6c8a:	b29b      	uxth	r3, r3
    6c8c:	4618      	mov	r0, r3
    6c8e:	4b18      	ldr	r3, [pc, #96]	; (6cf0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c90:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c94:	430a      	orrs	r2, r1
    6c96:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6c98:	f00e fb02 	bl	152a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6c9c:	9b01      	ldr	r3, [sp, #4]
    6c9e:	685a      	ldr	r2, [r3, #4]
    6ca0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ca4:	005b      	lsls	r3, r3, #1
    6ca6:	4413      	add	r3, r2
    6ca8:	881b      	ldrh	r3, [r3, #0]
    6caa:	095b      	lsrs	r3, r3, #5
    6cac:	b29b      	uxth	r3, r3
    6cae:	461a      	mov	r2, r3
    6cb0:	4b10      	ldr	r3, [pc, #64]	; (6cf4 <Port_Ipw_Init_UnusedPins+0x270>)
    6cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6cb6:	9a01      	ldr	r2, [sp, #4]
    6cb8:	6851      	ldr	r1, [r2, #4]
    6cba:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6cbe:	0052      	lsls	r2, r2, #1
    6cc0:	440a      	add	r2, r1
    6cc2:	8812      	ldrh	r2, [r2, #0]
    6cc4:	f002 021f 	and.w	r2, r2, #31
    6cc8:	9903      	ldr	r1, [sp, #12]
    6cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6cce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cd2:	3301      	adds	r3, #1
    6cd4:	f8ad 3016 	strh.w	r3, [sp, #22]
    6cd8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6cdc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ce0:	429a      	cmp	r2, r3
    6ce2:	f4ff aee7 	bcc.w	6ab4 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6ce6:	bf00      	nop
    6ce8:	bf00      	nop
    6cea:	b007      	add	sp, #28
    6cec:	f85d fb04 	ldr.w	pc, [sp], #4
    6cf0:	00018524 	.word	0x00018524
    6cf4:	00018510 	.word	0x00018510

00006cf8 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6cf8:	b500      	push	{lr}
    6cfa:	b085      	sub	sp, #20
    6cfc:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6cfe:	9b01      	ldr	r3, [sp, #4]
    6d00:	7c1b      	ldrb	r3, [r3, #16]
    6d02:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6d06:	2300      	movs	r3, #0
    6d08:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d0c:	e035      	b.n	6d7a <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6d0e:	9b01      	ldr	r3, [sp, #4]
    6d10:	695a      	ldr	r2, [r3, #20]
    6d12:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d16:	00db      	lsls	r3, r3, #3
    6d18:	4413      	add	r3, r2
    6d1a:	781b      	ldrb	r3, [r3, #0]
    6d1c:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6d20:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6d24:	4a29      	ldr	r2, [pc, #164]	; (6dcc <Port_Ipw_Init+0xd4>)
    6d26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6d2a:	9b01      	ldr	r3, [sp, #4]
    6d2c:	695a      	ldr	r2, [r3, #20]
    6d2e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d32:	00db      	lsls	r3, r3, #3
    6d34:	4413      	add	r3, r2
    6d36:	4619      	mov	r1, r3
    6d38:	f7ff fe39 	bl	69ae <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6d3c:	f00e fc1e 	bl	1557c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6d40:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6d44:	4a21      	ldr	r2, [pc, #132]	; (6dcc <Port_Ipw_Init+0xd4>)
    6d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d4a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6d4e:	9b01      	ldr	r3, [sp, #4]
    6d50:	695a      	ldr	r2, [r3, #20]
    6d52:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d56:	00db      	lsls	r3, r3, #3
    6d58:	4413      	add	r3, r2
    6d5a:	685a      	ldr	r2, [r3, #4]
    6d5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6d60:	481a      	ldr	r0, [pc, #104]	; (6dcc <Port_Ipw_Init+0xd4>)
    6d62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6d66:	430a      	orrs	r2, r1
    6d68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6d6c:	f00e fc32 	bl	155d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6d70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d74:	3301      	adds	r3, #1
    6d76:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d7a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d7e:	b29b      	uxth	r3, r3
    6d80:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d84:	429a      	cmp	r2, r3
    6d86:	d3c2      	bcc.n	6d0e <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6d88:	9b01      	ldr	r3, [sp, #4]
    6d8a:	6a1b      	ldr	r3, [r3, #32]
    6d8c:	4619      	mov	r1, r3
    6d8e:	2014      	movs	r0, #20
    6d90:	f7ff fd98 	bl	68c4 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6d94:	9801      	ldr	r0, [sp, #4]
    6d96:	f7ff fe75 	bl	6a84 <Port_Ipw_Init_UnusedPins>
     (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
    )
    /* Port_Ipw_au16GpioDirChangeability is only used by Port_Ci_Port_Ip_SetPinDirection, Port_Ci_Port_Ip_Set2PinsDirection
       and Port_Ci_Port_Ip_SetPinMode functions */
    /* Initialize the Array with Change Direction Flags for GPIO */
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6d9a:	2300      	movs	r3, #0
    6d9c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6da0:	e00a      	b.n	6db8 <Port_Ipw_Init+0xc0>
    {
        Port_Ipw_au16GpioDirChangeability[u16PinIndex] = (uint16)0UL;
    6da2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6da6:	4a0a      	ldr	r2, [pc, #40]	; (6dd0 <Port_Ipw_Init+0xd8>)
    6da8:	2100      	movs	r1, #0
    6daa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6dae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6db2:	3301      	adds	r3, #1
    6db4:	f8ad 300e 	strh.w	r3, [sp, #14]
    6db8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6dbc:	2b09      	cmp	r3, #9
    6dbe:	d9f0      	bls.n	6da2 <Port_Ipw_Init+0xaa>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6dc0:	bf00      	nop
    6dc2:	bf00      	nop
    6dc4:	b005      	add	sp, #20
    6dc6:	f85d fb04 	ldr.w	pc, [sp], #4
    6dca:	bf00      	nop
    6dcc:	00018510 	.word	0x00018510
    6dd0:	1fff8cec 	.word	0x1fff8cec

00006dd4 <Port_Ipw_SetPinDirection>:
(
    Port_PinType            PinIndex,
    Port_PinDirectionType   eDirection,
    const Port_ConfigType * pConfigPtr
)
{
    6dd4:	b500      	push	{lr}
    6dd6:	b087      	sub	sp, #28
    6dd8:	9003      	str	r0, [sp, #12]
    6dda:	9102      	str	r1, [sp, #8]
    6ddc:	9201      	str	r2, [sp, #4]
    /* Point to the Port Pin PCR register address */
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    6dde:	9b01      	ldr	r3, [sp, #4]
    6de0:	68d9      	ldr	r1, [r3, #12]
    6de2:	9a03      	ldr	r2, [sp, #12]
    6de4:	4613      	mov	r3, r2
    6de6:	009b      	lsls	r3, r3, #2
    6de8:	4413      	add	r3, r2
    6dea:	009b      	lsls	r3, r3, #2
    6dec:	440b      	add	r3, r1
    6dee:	881b      	ldrh	r3, [r3, #0]
    6df0:	f8ad 3014 	strh.w	r3, [sp, #20]
    /* Return value */
    Std_ReturnType PinDirError             = (Std_ReturnType)E_OK;
    6df4:	2300      	movs	r3, #0
    6df6:	f88d 3017 	strb.w	r3, [sp, #23]

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    6dfa:	2300      	movs	r3, #0
    6dfc:	f88d 3013 	strb.w	r3, [sp, #19]

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    6e00:	9b01      	ldr	r3, [sp, #4]
    6e02:	881b      	ldrh	r3, [r3, #0]
    6e04:	461a      	mov	r2, r3
    6e06:	9b03      	ldr	r3, [sp, #12]
    6e08:	4293      	cmp	r3, r2
    6e0a:	d306      	bcc.n	6e1a <Port_Ipw_SetPinDirection+0x46>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_PIN);
    6e0c:	230a      	movs	r3, #10
    6e0e:	2201      	movs	r2, #1
    6e10:	2100      	movs	r1, #0
    6e12:	207c      	movs	r0, #124	; 0x7c
    6e14:	f00f ff36 	bl	16c84 <Det_ReportError>
    6e18:	e0c9      	b.n	6fae <Port_Ipw_SetPinDirection+0x1da>
    }
    /* Check port pin validity */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    6e1a:	9b01      	ldr	r3, [sp, #4]
    6e1c:	699a      	ldr	r2, [r3, #24]
    6e1e:	9b03      	ldr	r3, [sp, #12]
    6e20:	009b      	lsls	r3, r3, #2
    6e22:	4413      	add	r3, r2
    6e24:	681a      	ldr	r2, [r3, #0]
    6e26:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6e2a:	2101      	movs	r1, #1
    6e2c:	fa01 f303 	lsl.w	r3, r1, r3
    6e30:	401a      	ands	r2, r3
    6e32:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6e36:	fa22 f303 	lsr.w	r3, r2, r3
    6e3a:	2b01      	cmp	r3, #1
    6e3c:	d006      	beq.n	6e4c <Port_Ipw_SetPinDirection+0x78>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    6e3e:	23f0      	movs	r3, #240	; 0xf0
    6e40:	2201      	movs	r2, #1
    6e42:	2100      	movs	r1, #0
    6e44:	207c      	movs	r0, #124	; 0x7c
    6e46:	f00f ff1d 	bl	16c84 <Det_ReportError>
    6e4a:	e0b0      	b.n	6fae <Port_Ipw_SetPinDirection+0x1da>
    }
    else
    {
        /* Bit Offset and Table value for change direction flag word */
        uint8 u8PinDescBitOffset       = (uint8)(Pin & PORT_CI_BIT_OFFSET_MASK_U8);
    6e4c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6e50:	b2db      	uxtb	r3, r3
    6e52:	f003 030f 	and.w	r3, r3, #15
    6e56:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Number of block 16 */
        uint16 u16PinChangeDirFlagWord  = Port_Ipw_au16GpioDirChangeability[(uint8)(Pin >> 4)];
    6e5a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6e5e:	091b      	lsrs	r3, r3, #4
    6e60:	b29b      	uxth	r3, r3
    6e62:	b2db      	uxtb	r3, r3
    6e64:	461a      	mov	r2, r3
    6e66:	4b55      	ldr	r3, [pc, #340]	; (6fbc <Port_Ipw_SetPinDirection+0x1e8>)
    6e68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6e6c:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* Check the Direction changeability option */
        if ((TRUE == pConfigPtr->pUsedPadConfig[PinIndex].bDC) || ((uint16)0 != (u16PinChangeDirFlagWord & (uint16)(1UL << u8PinDescBitOffset))))
    6e70:	9b01      	ldr	r3, [sp, #4]
    6e72:	68d9      	ldr	r1, [r3, #12]
    6e74:	9a03      	ldr	r2, [sp, #12]
    6e76:	4613      	mov	r3, r2
    6e78:	009b      	lsls	r3, r3, #2
    6e7a:	4413      	add	r3, r2
    6e7c:	009b      	lsls	r3, r3, #2
    6e7e:	440b      	add	r3, r1
    6e80:	7c5b      	ldrb	r3, [r3, #17]
    6e82:	2b00      	cmp	r3, #0
    6e84:	d10c      	bne.n	6ea0 <Port_Ipw_SetPinDirection+0xcc>
    6e86:	f89d 3012 	ldrb.w	r3, [sp, #18]
    6e8a:	2201      	movs	r2, #1
    6e8c:	fa02 f303 	lsl.w	r3, r2, r3
    6e90:	b29a      	uxth	r2, r3
    6e92:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    6e96:	4013      	ands	r3, r2
    6e98:	b29b      	uxth	r3, r3
    6e9a:	2b00      	cmp	r3, #0
    6e9c:	f000 8082 	beq.w	6fa4 <Port_Ipw_SetPinDirection+0x1d0>
        {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
            /* Configures Port Pin as Output */
            if (PORT_PIN_OUT == eDirection)
    6ea0:	9b02      	ldr	r3, [sp, #8]
    6ea2:	2b02      	cmp	r3, #2
    6ea4:	d11d      	bne.n	6ee2 <Port_Ipw_SetPinDirection+0x10e>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6ea6:	f00e fbbb 	bl	15620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR |= (uint32)(1UL << GPIO_CHANNEL_U32(Pin));
    6eaa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6eae:	095b      	lsrs	r3, r3, #5
    6eb0:	b29b      	uxth	r3, r3
    6eb2:	461a      	mov	r2, r3
    6eb4:	4b42      	ldr	r3, [pc, #264]	; (6fc0 <Port_Ipw_SetPinDirection+0x1ec>)
    6eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6eba:	6959      	ldr	r1, [r3, #20]
    6ebc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ec0:	f003 031f 	and.w	r3, r3, #31
    6ec4:	2201      	movs	r2, #1
    6ec6:	409a      	lsls	r2, r3
    6ec8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ecc:	095b      	lsrs	r3, r3, #5
    6ece:	b29b      	uxth	r3, r3
    6ed0:	4618      	mov	r0, r3
    6ed2:	4b3b      	ldr	r3, [pc, #236]	; (6fc0 <Port_Ipw_SetPinDirection+0x1ec>)
    6ed4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6ed8:	430a      	orrs	r2, r1
    6eda:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6edc:	f00e fbcc 	bl	15678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>
            if (PORT_PIN_OUT == eDirection)
    6ee0:	e064      	b.n	6fac <Port_Ipw_SetPinDirection+0x1d8>
            }
            /* Configures Port Pin as Input or High-Z*/
            else if ((PORT_PIN_IN == eDirection) || (PORT_PIN_HIGH_Z == eDirection))
    6ee2:	9b02      	ldr	r3, [sp, #8]
    6ee4:	2b01      	cmp	r3, #1
    6ee6:	d002      	beq.n	6eee <Port_Ipw_SetPinDirection+0x11a>
    6ee8:	9b02      	ldr	r3, [sp, #8]
    6eea:	2b03      	cmp	r3, #3
    6eec:	d15e      	bne.n	6fac <Port_Ipw_SetPinDirection+0x1d8>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6eee:	f00e fb97 	bl	15620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6ef2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ef6:	095b      	lsrs	r3, r3, #5
    6ef8:	b29b      	uxth	r3, r3
    6efa:	461a      	mov	r2, r3
    6efc:	4b30      	ldr	r3, [pc, #192]	; (6fc0 <Port_Ipw_SetPinDirection+0x1ec>)
    6efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f02:	6959      	ldr	r1, [r3, #20]
    6f04:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f08:	f003 031f 	and.w	r3, r3, #31
    6f0c:	2201      	movs	r2, #1
    6f0e:	fa02 f303 	lsl.w	r3, r2, r3
    6f12:	43da      	mvns	r2, r3
    6f14:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f18:	095b      	lsrs	r3, r3, #5
    6f1a:	b29b      	uxth	r3, r3
    6f1c:	4618      	mov	r0, r3
    6f1e:	4b28      	ldr	r3, [pc, #160]	; (6fc0 <Port_Ipw_SetPinDirection+0x1ec>)
    6f20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f24:	400a      	ands	r2, r1
    6f26:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6f28:	f00e fba6 	bl	15678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17();
    6f2c:	f00e fbca 	bl	156c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6f30:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f34:	095b      	lsrs	r3, r3, #5
    6f36:	b29b      	uxth	r3, r3
    6f38:	461a      	mov	r2, r3
    6f3a:	4b21      	ldr	r3, [pc, #132]	; (6fc0 <Port_Ipw_SetPinDirection+0x1ec>)
    6f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f40:	6999      	ldr	r1, [r3, #24]
    6f42:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f46:	f003 031f 	and.w	r3, r3, #31
    6f4a:	2201      	movs	r2, #1
    6f4c:	fa02 f303 	lsl.w	r3, r2, r3
    6f50:	43da      	mvns	r2, r3
    6f52:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f56:	095b      	lsrs	r3, r3, #5
    6f58:	b29b      	uxth	r3, r3
    6f5a:	4618      	mov	r0, r3
    6f5c:	4b18      	ldr	r3, [pc, #96]	; (6fc0 <Port_Ipw_SetPinDirection+0x1ec>)
    6f5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f62:	400a      	ands	r2, r1
    6f64:	619a      	str	r2, [r3, #24]

                /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                if (PORT_PIN_HIGH_Z == eDirection)
    6f66:	9b02      	ldr	r3, [sp, #8]
    6f68:	2b03      	cmp	r3, #3
    6f6a:	d118      	bne.n	6f9e <Port_Ipw_SetPinDirection+0x1ca>
                {
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR |= ((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6f6c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f70:	095b      	lsrs	r3, r3, #5
    6f72:	b29b      	uxth	r3, r3
    6f74:	461a      	mov	r2, r3
    6f76:	4b12      	ldr	r3, [pc, #72]	; (6fc0 <Port_Ipw_SetPinDirection+0x1ec>)
    6f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f7c:	6999      	ldr	r1, [r3, #24]
    6f7e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f82:	f003 031f 	and.w	r3, r3, #31
    6f86:	2201      	movs	r2, #1
    6f88:	409a      	lsls	r2, r3
    6f8a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f8e:	095b      	lsrs	r3, r3, #5
    6f90:	b29b      	uxth	r3, r3
    6f92:	4618      	mov	r0, r3
    6f94:	4b0a      	ldr	r3, [pc, #40]	; (6fc0 <Port_Ipw_SetPinDirection+0x1ec>)
    6f96:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f9a:	430a      	orrs	r2, r1
    6f9c:	619a      	str	r2, [r3, #24]
                }
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17();
    6f9e:	f00e fbbd 	bl	1571c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>
            if (PORT_PIN_OUT == eDirection)
    6fa2:	e003      	b.n	6fac <Port_Ipw_SetPinDirection+0x1d8>
#if (STD_ON == PORT_DEV_ERROR_DETECT)
        }
        /* Direction changeability is NOT supported */
        else
        {
            PinDirError = (Std_ReturnType)E_NOT_OK;
    6fa4:	2301      	movs	r3, #1
    6fa6:	f88d 3017 	strb.w	r3, [sp, #23]
    6faa:	e000      	b.n	6fae <Port_Ipw_SetPinDirection+0x1da>
            if (PORT_PIN_OUT == eDirection)
    6fac:	bf00      	nop
        }
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinDirError;
    6fae:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6fb2:	4618      	mov	r0, r3
    6fb4:	b007      	add	sp, #28
    6fb6:	f85d fb04 	ldr.w	pc, [sp], #4
    6fba:	bf00      	nop
    6fbc:	1fff8cec 	.word	0x1fff8cec
    6fc0:	00018524 	.word	0x00018524

00006fc4 <Port_Ipw_SetPinMode>:
(
    Port_PinType PinIndex,
    Port_PinModeType PinMode,
    const Port_ConfigType * pConfigPtr
)
{
    6fc4:	b500      	push	{lr}
    6fc6:	b08b      	sub	sp, #44	; 0x2c
    6fc8:	9003      	str	r0, [sp, #12]
    6fca:	460b      	mov	r3, r1
    6fcc:	9201      	str	r2, [sp, #4]
    6fce:	f88d 300b 	strb.w	r3, [sp, #11]
    Std_ReturnType PinModeError             = (Std_ReturnType)0UL;
    6fd2:	2300      	movs	r3, #0
    6fd4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint16 PinPad                           = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    6fd8:	9b01      	ldr	r3, [sp, #4]
    6fda:	68d9      	ldr	r1, [r3, #12]
    6fdc:	9a03      	ldr	r2, [sp, #12]
    6fde:	4613      	mov	r3, r2
    6fe0:	009b      	lsls	r3, r3, #2
    6fe2:	4413      	add	r3, r2
    6fe4:	009b      	lsls	r3, r3, #2
    6fe6:	440b      	add	r3, r1
    6fe8:	881b      	ldrh	r3, [r3, #0]
    6fea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Port_PinModeType PinCfgRegValue         = (Port_PinModeType)PinMode;
    6fee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6ff2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint16 u16PinDescBitOffset;
    /* Variable used to clear and updated PCR register */
    uint32 u32LocalPCR;
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    6ff6:	2300      	movs	r3, #0
    6ff8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    6ffc:	9b01      	ldr	r3, [sp, #4]
    6ffe:	881b      	ldrh	r3, [r3, #0]
    7000:	461a      	mov	r2, r3
    7002:	9b03      	ldr	r3, [sp, #12]
    7004:	4293      	cmp	r3, r2
    7006:	d306      	bcc.n	7016 <Port_Ipw_SetPinMode+0x52>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_PIN);
    7008:	230a      	movs	r3, #10
    700a:	2204      	movs	r2, #4
    700c:	2100      	movs	r1, #0
    700e:	207c      	movs	r0, #124	; 0x7c
    7010:	f00f fe38 	bl	16c84 <Det_ReportError>
    7014:	e0b3      	b.n	717e <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check if this function was called with wrong core */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    7016:	9b01      	ldr	r3, [sp, #4]
    7018:	699a      	ldr	r2, [r3, #24]
    701a:	9b03      	ldr	r3, [sp, #12]
    701c:	009b      	lsls	r3, r3, #2
    701e:	4413      	add	r3, r2
    7020:	681a      	ldr	r2, [r3, #0]
    7022:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7026:	2101      	movs	r1, #1
    7028:	fa01 f303 	lsl.w	r3, r1, r3
    702c:	401a      	ands	r2, r3
    702e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7032:	fa22 f303 	lsr.w	r3, r2, r3
    7036:	2b01      	cmp	r3, #1
    7038:	d006      	beq.n	7048 <Port_Ipw_SetPinMode+0x84>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_CONFIG);
    703a:	23f0      	movs	r3, #240	; 0xf0
    703c:	2204      	movs	r2, #4
    703e:	2100      	movs	r1, #0
    7040:	207c      	movs	r0, #124	; 0x7c
    7042:	f00f fe1f 	bl	16c84 <Det_ReportError>
    7046:	e09a      	b.n	717e <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check port pin mode Unchangeable */
    else if (FALSE ==  pConfigPtr->pUsedPadConfig[PinIndex].bMC)
    7048:	9b01      	ldr	r3, [sp, #4]
    704a:	68d9      	ldr	r1, [r3, #12]
    704c:	9a03      	ldr	r2, [sp, #12]
    704e:	4613      	mov	r3, r2
    7050:	009b      	lsls	r3, r3, #2
    7052:	4413      	add	r3, r2
    7054:	009b      	lsls	r3, r3, #2
    7056:	440b      	add	r3, r1
    7058:	7c9b      	ldrb	r3, [r3, #18]
    705a:	f083 0301 	eor.w	r3, r3, #1
    705e:	b2db      	uxtb	r3, r3
    7060:	2b00      	cmp	r3, #0
    7062:	d006      	beq.n	7072 <Port_Ipw_SetPinMode+0xae>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_MODE_UNCHANGEABLE);
    7064:	230e      	movs	r3, #14
    7066:	2204      	movs	r2, #4
    7068:	2100      	movs	r1, #0
    706a:	207c      	movs	r0, #124	; 0x7c
    706c:	f00f fe0a 	bl	16c84 <Det_ReportError>
    7070:	e085      	b.n	717e <Port_Ipw_SetPinMode+0x1ba>
    }
    else
    {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

        if (PAD_MODE_OPTIONS_U8 <= PinMode)
    7072:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7076:	2b07      	cmp	r3, #7
    7078:	d903      	bls.n	7082 <Port_Ipw_SetPinMode+0xbe>
        {
            PinModeError = PORT_E_PARAM_INVALID_MODE;
    707a:	230d      	movs	r3, #13
    707c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    7080:	e07d      	b.n	717e <Port_Ipw_SetPinMode+0x1ba>
        }
        else
        {
            Port_PinDirectionType ePadDirection = PORT_PIN_DISABLED;
    7082:	2300      	movs	r3, #0
    7084:	9307      	str	r3, [sp, #28]

            /* Bit offset of Pin index inside the pin description matrix */
            u16PinDescBitOffset = PinPad & PORT_MODE_BIT_OFFSET_MASK_U8;
    7086:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    708a:	f003 030f 	and.w	r3, r3, #15
    708e:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Selected word inside the pin description matrix */
            u16PinDescWord = (uint16)Port_au16PinDescription[(uint8)PinMode][PinPad >> 4U];
    7092:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7096:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    709a:	091b      	lsrs	r3, r3, #4
    709c:	b29b      	uxth	r3, r3
    709e:	4618      	mov	r0, r3
    70a0:	493a      	ldr	r1, [pc, #232]	; (718c <Port_Ipw_SetPinMode+0x1c8>)
    70a2:	4613      	mov	r3, r2
    70a4:	009b      	lsls	r3, r3, #2
    70a6:	4413      	add	r3, r2
    70a8:	005b      	lsls	r3, r3, #1
    70aa:	4403      	add	r3, r0
    70ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    70b0:	f8ad 3018 	strh.w	r3, [sp, #24]

            /* Check if desired mode is valid for selected pin */
            if ((u16PinDescWord & ((uint16)1UL<<u16PinDescBitOffset)) != (uint16)0U)
    70b4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    70b8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    70bc:	fa42 f303 	asr.w	r3, r2, r3
    70c0:	f003 0301 	and.w	r3, r3, #1
    70c4:	2b00      	cmp	r3, #0
    70c6:	d057      	beq.n	7178 <Port_Ipw_SetPinMode+0x1b4>
            {
                switch(PinMode)
    70c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    70cc:	2b01      	cmp	r3, #1
    70ce:	d11f      	bne.n	7110 <Port_Ipw_SetPinMode+0x14c>
                {
                    case PORT_GPIO_MODE:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                        Port_Ipw_SetGpioDirChangeability(PinPad, TRUE);
    70d0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    70d4:	2101      	movs	r1, #1
    70d6:	4618      	mov	r0, r3
    70d8:	f000 f85c 	bl	7194 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        ePadDirection = pConfigPtr->pUsedPadConfig[PinIndex].ePadDir;
    70dc:	9b01      	ldr	r3, [sp, #4]
    70de:	68d9      	ldr	r1, [r3, #12]
    70e0:	9a03      	ldr	r2, [sp, #12]
    70e2:	4613      	mov	r3, r2
    70e4:	009b      	lsls	r3, r3, #2
    70e6:	4413      	add	r3, r2
    70e8:	009b      	lsls	r3, r3, #2
    70ea:	440b      	add	r3, r1
    70ec:	68db      	ldr	r3, [r3, #12]
    70ee:	9307      	str	r3, [sp, #28]
#if (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL)
                        if ((PORT_PIN_IN != ePadDirection) && (PORT_PIN_HIGH_Z != ePadDirection))
    70f0:	9b07      	ldr	r3, [sp, #28]
    70f2:	2b01      	cmp	r3, #1
    70f4:	d006      	beq.n	7104 <Port_Ipw_SetPinMode+0x140>
    70f6:	9b07      	ldr	r3, [sp, #28]
    70f8:	2b03      	cmp	r3, #3
    70fa:	d003      	beq.n	7104 <Port_Ipw_SetPinMode+0x140>
                        {
                            Port_Ipw_SetGpioPadOutput(PinIndex, pConfigPtr);
    70fc:	9901      	ldr	r1, [sp, #4]
    70fe:	9803      	ldr	r0, [sp, #12]
    7100:	f000 f896 	bl	7230 <Port_Ipw_SetGpioPadOutput>
                        }
#endif /* (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL) */
                        (void)Port_Ipw_SetPinDirection(PinIndex, ePadDirection, pConfigPtr);
    7104:	9a01      	ldr	r2, [sp, #4]
    7106:	9907      	ldr	r1, [sp, #28]
    7108:	9803      	ldr	r0, [sp, #12]
    710a:	f7ff fe63 	bl	6dd4 <Port_Ipw_SetPinDirection>
                        break;
    710e:	e006      	b.n	711e <Port_Ipw_SetPinMode+0x15a>

                    default:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                    /* All the ALT modes except GPIO*/
                        Port_Ipw_SetGpioDirChangeability(PinPad,FALSE);
    7110:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7114:	2100      	movs	r1, #0
    7116:	4618      	mov	r0, r3
    7118:	f000 f83c 	bl	7194 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        break;
    711c:	bf00      	nop
                }
                /* Sets the port pin mode */
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27();
    711e:	f00e fe05 	bl	15d2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>
                u32LocalPCR  = (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)];
    7122:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7126:	095b      	lsrs	r3, r3, #5
    7128:	b29b      	uxth	r3, r3
    712a:	461a      	mov	r2, r3
    712c:	4b18      	ldr	r3, [pc, #96]	; (7190 <Port_Ipw_SetPinMode+0x1cc>)
    712e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7132:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7136:	f002 021f 	and.w	r2, r2, #31
    713a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    713e:	9305      	str	r3, [sp, #20]

                u32LocalPCR &= ~(PORT_CI_PCR_ALT_MODE_U32);
    7140:	9b05      	ldr	r3, [sp, #20]
    7142:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    7146:	9305      	str	r3, [sp, #20]
                u32LocalPCR |= ((uint32)PinCfgRegValue << PORT_CI_PCR_ALT_MODE_OFFSET_U32);
    7148:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    714c:	021b      	lsls	r3, r3, #8
    714e:	9a05      	ldr	r2, [sp, #20]
    7150:	4313      	orrs	r3, r2
    7152:	9305      	str	r3, [sp, #20]

                (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)] = u32LocalPCR;
    7154:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7158:	095b      	lsrs	r3, r3, #5
    715a:	b29b      	uxth	r3, r3
    715c:	461a      	mov	r2, r3
    715e:	4b0c      	ldr	r3, [pc, #48]	; (7190 <Port_Ipw_SetPinMode+0x1cc>)
    7160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7164:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7168:	f002 021f 	and.w	r2, r2, #31
    716c:	9905      	ldr	r1, [sp, #20]
    716e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27();
    7172:	f00e fe07 	bl	15d84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>
    7176:	e002      	b.n	717e <Port_Ipw_SetPinMode+0x1ba>
            }
            else
            {
                PinModeError = PORT_E_PARAM_INVALID_MODE;
    7178:	230d      	movs	r3, #13
    717a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinModeError;
    717e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    7182:	4618      	mov	r0, r3
    7184:	b00b      	add	sp, #44	; 0x2c
    7186:	f85d fb04 	ldr.w	pc, [sp], #4
    718a:	bf00      	nop
    718c:	000191dc 	.word	0x000191dc
    7190:	00018510 	.word	0x00018510

00007194 <Port_Ipw_SetGpioDirChangeability>:
void Port_Ipw_SetGpioDirChangeability
(
    uint16 PadID,
    boolean bStatus
)
{
    7194:	b500      	push	{lr}
    7196:	b085      	sub	sp, #20
    7198:	4603      	mov	r3, r0
    719a:	460a      	mov	r2, r1
    719c:	f8ad 3006 	strh.w	r3, [sp, #6]
    71a0:	4613      	mov	r3, r2
    71a2:	f88d 3005 	strb.w	r3, [sp, #5]
    /* Pin description variables */
    uint8 u8PinBitOffset;
    uint16 u16PinDirFlagWord;

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18();
    71a6:	f00e fadf 	bl	15768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>
    /* Bit offset of Pin index inside the pin description matrix */
    u8PinBitOffset      = (uint8)((uint8)PadID & PORT_CI_BIT_OFFSET_MASK_U8);
    71aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    71ae:	b2db      	uxtb	r3, r3
    71b0:	f003 030f 	and.w	r3, r3, #15
    71b4:	f88d 300d 	strb.w	r3, [sp, #13]
    u16PinDirFlagWord   = Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)];
    71b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    71bc:	b2db      	uxtb	r3, r3
    71be:	091b      	lsrs	r3, r3, #4
    71c0:	b2db      	uxtb	r3, r3
    71c2:	461a      	mov	r2, r3
    71c4:	4b19      	ldr	r3, [pc, #100]	; (722c <Port_Ipw_SetGpioDirChangeability+0x98>)
    71c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    71ca:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (TRUE == bStatus)
    71ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
    71d2:	2b00      	cmp	r3, #0
    71d4:	d00b      	beq.n	71ee <Port_Ipw_SetGpioDirChangeability+0x5a>
    {
        /* Set the change direction flag */
        u16PinDirFlagWord |= (uint16)(1UL<<u8PinBitOffset);
    71d6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    71da:	2201      	movs	r2, #1
    71dc:	fa02 f303 	lsl.w	r3, r2, r3
    71e0:	b29a      	uxth	r2, r3
    71e2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    71e6:	4313      	orrs	r3, r2
    71e8:	f8ad 300e 	strh.w	r3, [sp, #14]
    71ec:	e00c      	b.n	7208 <Port_Ipw_SetGpioDirChangeability+0x74>
    }
    else
    {
        /* Reset the change direction flag */
        u16PinDirFlagWord &= (uint16)(~((uint16)(1UL<<u8PinBitOffset)));
    71ee:	f89d 300d 	ldrb.w	r3, [sp, #13]
    71f2:	2201      	movs	r2, #1
    71f4:	fa02 f303 	lsl.w	r3, r2, r3
    71f8:	b29b      	uxth	r3, r3
    71fa:	43db      	mvns	r3, r3
    71fc:	b29a      	uxth	r2, r3
    71fe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7202:	4013      	ands	r3, r2
    7204:	f8ad 300e 	strh.w	r3, [sp, #14]
    }
    Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)] = u16PinDirFlagWord;
    7208:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    720c:	b2db      	uxtb	r3, r3
    720e:	091b      	lsrs	r3, r3, #4
    7210:	b2db      	uxtb	r3, r3
    7212:	4619      	mov	r1, r3
    7214:	4a05      	ldr	r2, [pc, #20]	; (722c <Port_Ipw_SetGpioDirChangeability+0x98>)
    7216:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    721a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    /* Exit critical region */
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18();
    721e:	f00e facf 	bl	157c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>
}
    7222:	bf00      	nop
    7224:	b005      	add	sp, #20
    7226:	f85d fb04 	ldr.w	pc, [sp], #4
    722a:	bf00      	nop
    722c:	1fff8cec 	.word	0x1fff8cec

00007230 <Port_Ipw_SetGpioPadOutput>:
void Port_Ipw_SetGpioPadOutput
(
    Port_PinType            PinIndex,
    const Port_ConfigType * pConfigPtr
)
{
    7230:	b084      	sub	sp, #16
    7232:	9001      	str	r0, [sp, #4]
    7234:	9100      	str	r1, [sp, #0]
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7236:	9b00      	ldr	r3, [sp, #0]
    7238:	68d9      	ldr	r1, [r3, #12]
    723a:	9a01      	ldr	r2, [sp, #4]
    723c:	4613      	mov	r3, r2
    723e:	009b      	lsls	r3, r3, #2
    7240:	4413      	add	r3, r2
    7242:	009b      	lsls	r3, r3, #2
    7244:	440b      	add	r3, r1
    7246:	881b      	ldrh	r3, [r3, #0]
    7248:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint8 u8LocalPDO = pConfigPtr->pUsedPadConfig[PinIndex].u8PDO;
    724c:	9b00      	ldr	r3, [sp, #0]
    724e:	68d9      	ldr	r1, [r3, #12]
    7250:	9a01      	ldr	r2, [sp, #4]
    7252:	4613      	mov	r3, r2
    7254:	009b      	lsls	r3, r3, #2
    7256:	4413      	add	r3, r2
    7258:	009b      	lsls	r3, r3, #2
    725a:	440b      	add	r3, r1
    725c:	7a1b      	ldrb	r3, [r3, #8]
    725e:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Set pin to High value */
    if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    7262:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7266:	2b01      	cmp	r3, #1
    7268:	d110      	bne.n	728c <Port_Ipw_SetGpioPadOutput+0x5c>
    {
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    726a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    726e:	f003 021f 	and.w	r2, r3, #31
    7272:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7276:	095b      	lsrs	r3, r3, #5
    7278:	b29b      	uxth	r3, r3
    727a:	4619      	mov	r1, r3
    727c:	4b0f      	ldr	r3, [pc, #60]	; (72bc <Port_Ipw_SetGpioPadOutput+0x8c>)
    727e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7282:	2101      	movs	r1, #1
    7284:	fa01 f202 	lsl.w	r2, r1, r2
    7288:	605a      	str	r2, [r3, #4]
    }
    else
    {
        /* No action to be done */
    }
}
    728a:	e013      	b.n	72b4 <Port_Ipw_SetGpioPadOutput+0x84>
    else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    728c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7290:	2b00      	cmp	r3, #0
    7292:	d10f      	bne.n	72b4 <Port_Ipw_SetGpioPadOutput+0x84>
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7294:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7298:	f003 021f 	and.w	r2, r3, #31
    729c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72a0:	095b      	lsrs	r3, r3, #5
    72a2:	b29b      	uxth	r3, r3
    72a4:	4619      	mov	r1, r3
    72a6:	4b05      	ldr	r3, [pc, #20]	; (72bc <Port_Ipw_SetGpioPadOutput+0x8c>)
    72a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    72ac:	2101      	movs	r1, #1
    72ae:	fa01 f202 	lsl.w	r2, r1, r2
    72b2:	609a      	str	r2, [r3, #8]
}
    72b4:	bf00      	nop
    72b6:	b004      	add	sp, #16
    72b8:	4770      	bx	lr
    72ba:	bf00      	nop
    72bc:	00018524 	.word	0x00018524

000072c0 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    72c0:	b500      	push	{lr}
    72c2:	b085      	sub	sp, #20
    72c4:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    72c6:	9b01      	ldr	r3, [sp, #4]
    72c8:	881b      	ldrh	r3, [r3, #0]
    72ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    72ce:	2300      	movs	r3, #0
    72d0:	f8ad 300e 	strh.w	r3, [sp, #14]
    72d4:	e0d2      	b.n	747c <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    72d6:	9b01      	ldr	r3, [sp, #4]
    72d8:	68d9      	ldr	r1, [r3, #12]
    72da:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72de:	4613      	mov	r3, r2
    72e0:	009b      	lsls	r3, r3, #2
    72e2:	4413      	add	r3, r2
    72e4:	009b      	lsls	r3, r3, #2
    72e6:	440b      	add	r3, r1
    72e8:	7c5b      	ldrb	r3, [r3, #17]
    72ea:	f083 0301 	eor.w	r3, r3, #1
    72ee:	b2db      	uxtb	r3, r3
    72f0:	2b00      	cmp	r3, #0
    72f2:	f000 80be 	beq.w	7472 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    72f6:	9b01      	ldr	r3, [sp, #4]
    72f8:	68d9      	ldr	r1, [r3, #12]
    72fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72fe:	4613      	mov	r3, r2
    7300:	009b      	lsls	r3, r3, #2
    7302:	4413      	add	r3, r2
    7304:	009b      	lsls	r3, r3, #2
    7306:	440b      	add	r3, r1
    7308:	7c1b      	ldrb	r3, [r3, #16]
    730a:	2b00      	cmp	r3, #0
    730c:	f000 80b1 	beq.w	7472 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    7310:	9b01      	ldr	r3, [sp, #4]
    7312:	68d9      	ldr	r1, [r3, #12]
    7314:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7318:	4613      	mov	r3, r2
    731a:	009b      	lsls	r3, r3, #2
    731c:	4413      	add	r3, r2
    731e:	009b      	lsls	r3, r3, #2
    7320:	440b      	add	r3, r1
    7322:	881b      	ldrh	r3, [r3, #0]
    7324:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7328:	9b01      	ldr	r3, [sp, #4]
    732a:	68d9      	ldr	r1, [r3, #12]
    732c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7330:	4613      	mov	r3, r2
    7332:	009b      	lsls	r3, r3, #2
    7334:	4413      	add	r3, r2
    7336:	009b      	lsls	r3, r3, #2
    7338:	440b      	add	r3, r1
    733a:	68db      	ldr	r3, [r3, #12]
    733c:	2b02      	cmp	r3, #2
    733e:	d11d      	bne.n	737c <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7340:	f00e fa64 	bl	1580c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7344:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7348:	095b      	lsrs	r3, r3, #5
    734a:	b29b      	uxth	r3, r3
    734c:	461a      	mov	r2, r3
    734e:	4b51      	ldr	r3, [pc, #324]	; (7494 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7354:	6959      	ldr	r1, [r3, #20]
    7356:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    735a:	f003 031f 	and.w	r3, r3, #31
    735e:	2201      	movs	r2, #1
    7360:	409a      	lsls	r2, r3
    7362:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7366:	095b      	lsrs	r3, r3, #5
    7368:	b29b      	uxth	r3, r3
    736a:	4618      	mov	r0, r3
    736c:	4b49      	ldr	r3, [pc, #292]	; (7494 <Port_Ipw_RefreshPortDirection+0x1d4>)
    736e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7372:	430a      	orrs	r2, r1
    7374:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7376:	f00e fa75 	bl	15864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    737a:	e07a      	b.n	7472 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    737c:	9b01      	ldr	r3, [sp, #4]
    737e:	68d9      	ldr	r1, [r3, #12]
    7380:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7384:	4613      	mov	r3, r2
    7386:	009b      	lsls	r3, r3, #2
    7388:	4413      	add	r3, r2
    738a:	009b      	lsls	r3, r3, #2
    738c:	440b      	add	r3, r1
    738e:	68db      	ldr	r3, [r3, #12]
    7390:	2b01      	cmp	r3, #1
    7392:	d00b      	beq.n	73ac <Port_Ipw_RefreshPortDirection+0xec>
    7394:	9b01      	ldr	r3, [sp, #4]
    7396:	68d9      	ldr	r1, [r3, #12]
    7398:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    739c:	4613      	mov	r3, r2
    739e:	009b      	lsls	r3, r3, #2
    73a0:	4413      	add	r3, r2
    73a2:	009b      	lsls	r3, r3, #2
    73a4:	440b      	add	r3, r1
    73a6:	68db      	ldr	r3, [r3, #12]
    73a8:	2b03      	cmp	r3, #3
    73aa:	d162      	bne.n	7472 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    73ac:	f00e fa2e 	bl	1580c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    73b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73b4:	095b      	lsrs	r3, r3, #5
    73b6:	b29b      	uxth	r3, r3
    73b8:	461a      	mov	r2, r3
    73ba:	4b36      	ldr	r3, [pc, #216]	; (7494 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    73c0:	6959      	ldr	r1, [r3, #20]
    73c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73c6:	f003 031f 	and.w	r3, r3, #31
    73ca:	2201      	movs	r2, #1
    73cc:	fa02 f303 	lsl.w	r3, r2, r3
    73d0:	43da      	mvns	r2, r3
    73d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73d6:	095b      	lsrs	r3, r3, #5
    73d8:	b29b      	uxth	r3, r3
    73da:	4618      	mov	r0, r3
    73dc:	4b2d      	ldr	r3, [pc, #180]	; (7494 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    73e2:	400a      	ands	r2, r1
    73e4:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    73e6:	f00e fa3d 	bl	15864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    73ea:	f00e fa61 	bl	158b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    73ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73f2:	095b      	lsrs	r3, r3, #5
    73f4:	b29b      	uxth	r3, r3
    73f6:	461a      	mov	r2, r3
    73f8:	4b26      	ldr	r3, [pc, #152]	; (7494 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    73fe:	6999      	ldr	r1, [r3, #24]
    7400:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7404:	f003 031f 	and.w	r3, r3, #31
    7408:	2201      	movs	r2, #1
    740a:	fa02 f303 	lsl.w	r3, r2, r3
    740e:	43da      	mvns	r2, r3
    7410:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7414:	095b      	lsrs	r3, r3, #5
    7416:	b29b      	uxth	r3, r3
    7418:	4618      	mov	r0, r3
    741a:	4b1e      	ldr	r3, [pc, #120]	; (7494 <Port_Ipw_RefreshPortDirection+0x1d4>)
    741c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7420:	400a      	ands	r2, r1
    7422:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7424:	9b01      	ldr	r3, [sp, #4]
    7426:	68d9      	ldr	r1, [r3, #12]
    7428:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    742c:	4613      	mov	r3, r2
    742e:	009b      	lsls	r3, r3, #2
    7430:	4413      	add	r3, r2
    7432:	009b      	lsls	r3, r3, #2
    7434:	440b      	add	r3, r1
    7436:	68db      	ldr	r3, [r3, #12]
    7438:	2b03      	cmp	r3, #3
    743a:	d118      	bne.n	746e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    743c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7440:	095b      	lsrs	r3, r3, #5
    7442:	b29b      	uxth	r3, r3
    7444:	461a      	mov	r2, r3
    7446:	4b13      	ldr	r3, [pc, #76]	; (7494 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    744c:	6999      	ldr	r1, [r3, #24]
    744e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7452:	f003 031f 	and.w	r3, r3, #31
    7456:	2201      	movs	r2, #1
    7458:	409a      	lsls	r2, r3
    745a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    745e:	095b      	lsrs	r3, r3, #5
    7460:	b29b      	uxth	r3, r3
    7462:	4618      	mov	r0, r3
    7464:	4b0b      	ldr	r3, [pc, #44]	; (7494 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7466:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    746a:	430a      	orrs	r2, r1
    746c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    746e:	f00e fa4b 	bl	15908 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7472:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7476:	3301      	adds	r3, #1
    7478:	f8ad 300e 	strh.w	r3, [sp, #14]
    747c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7480:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7484:	429a      	cmp	r2, r3
    7486:	f4ff af26 	bcc.w	72d6 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    748a:	bf00      	nop
    748c:	bf00      	nop
    748e:	b005      	add	sp, #20
    7490:	f85d fb04 	ldr.w	pc, [sp], #4
    7494:	00018524 	.word	0x00018524

00007498 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7498:	b086      	sub	sp, #24
    749a:	9003      	str	r0, [sp, #12]
    749c:	9102      	str	r1, [sp, #8]
    749e:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    74a0:	9b03      	ldr	r3, [sp, #12]
    74a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    74a6:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    74a8:	9b02      	ldr	r3, [sp, #8]
    74aa:	43db      	mvns	r3, r3
    74ac:	9a05      	ldr	r2, [sp, #20]
    74ae:	4013      	ands	r3, r2
    74b0:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    74b2:	9a05      	ldr	r2, [sp, #20]
    74b4:	9b01      	ldr	r3, [sp, #4]
    74b6:	4313      	orrs	r3, r2
    74b8:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    74ba:	9b03      	ldr	r3, [sp, #12]
    74bc:	9a05      	ldr	r2, [sp, #20]
    74be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    74c2:	bf00      	nop
    74c4:	b006      	add	sp, #24
    74c6:	4770      	bx	lr

000074c8 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    74c8:	b086      	sub	sp, #24
    74ca:	9003      	str	r0, [sp, #12]
    74cc:	9102      	str	r1, [sp, #8]
    74ce:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    74d0:	9b03      	ldr	r3, [sp, #12]
    74d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    74d4:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    74d6:	9b05      	ldr	r3, [sp, #20]
    74d8:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    74dc:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    74de:	9b02      	ldr	r3, [sp, #8]
    74e0:	015b      	lsls	r3, r3, #5
    74e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
    74e6:	9a05      	ldr	r2, [sp, #20]
    74e8:	4313      	orrs	r3, r2
    74ea:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    74ec:	9b01      	ldr	r3, [sp, #4]
    74ee:	f003 0303 	and.w	r3, r3, #3
    74f2:	9a05      	ldr	r2, [sp, #20]
    74f4:	4313      	orrs	r3, r2
    74f6:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    74f8:	9b03      	ldr	r3, [sp, #12]
    74fa:	9a05      	ldr	r2, [sp, #20]
    74fc:	641a      	str	r2, [r3, #64]	; 0x40
}
    74fe:	bf00      	nop
    7500:	b006      	add	sp, #24
    7502:	4770      	bx	lr

00007504 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    7504:	b084      	sub	sp, #16
    7506:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    7508:	2300      	movs	r3, #0
    750a:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    750c:	9b01      	ldr	r3, [sp, #4]
    750e:	095b      	lsrs	r3, r3, #5
    7510:	f003 0303 	and.w	r3, r3, #3
    7514:	2b03      	cmp	r3, #3
    7516:	d00c      	beq.n	7532 <Adc_HwAcc_GetClockDivide+0x2e>
    7518:	2b03      	cmp	r3, #3
    751a:	d80d      	bhi.n	7538 <Adc_HwAcc_GetClockDivide+0x34>
    751c:	2b01      	cmp	r3, #1
    751e:	d002      	beq.n	7526 <Adc_HwAcc_GetClockDivide+0x22>
    7520:	2b02      	cmp	r3, #2
    7522:	d003      	beq.n	752c <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    7524:	e008      	b.n	7538 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    7526:	2301      	movs	r3, #1
    7528:	9303      	str	r3, [sp, #12]
            break;
    752a:	e006      	b.n	753a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    752c:	2302      	movs	r3, #2
    752e:	9303      	str	r3, [sp, #12]
            break;
    7530:	e003      	b.n	753a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    7532:	2303      	movs	r3, #3
    7534:	9303      	str	r3, [sp, #12]
            break;
    7536:	e000      	b.n	753a <Adc_HwAcc_GetClockDivide+0x36>
            break;
    7538:	bf00      	nop
    }
    return ReturnValue;
    753a:	9b03      	ldr	r3, [sp, #12]
}
    753c:	4618      	mov	r0, r3
    753e:	b004      	add	sp, #16
    7540:	4770      	bx	lr

00007542 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    7542:	b084      	sub	sp, #16
    7544:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    7546:	2300      	movs	r3, #0
    7548:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    754a:	9b01      	ldr	r3, [sp, #4]
    754c:	f003 0303 	and.w	r3, r3, #3
    7550:	2b03      	cmp	r3, #3
    7552:	d00c      	beq.n	756e <Adc_HwAcc_GetInputClock+0x2c>
    7554:	2b03      	cmp	r3, #3
    7556:	d80d      	bhi.n	7574 <Adc_HwAcc_GetInputClock+0x32>
    7558:	2b01      	cmp	r3, #1
    755a:	d002      	beq.n	7562 <Adc_HwAcc_GetInputClock+0x20>
    755c:	2b02      	cmp	r3, #2
    755e:	d003      	beq.n	7568 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    7560:	e008      	b.n	7574 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    7562:	2301      	movs	r3, #1
    7564:	9303      	str	r3, [sp, #12]
            break;
    7566:	e006      	b.n	7576 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    7568:	2302      	movs	r3, #2
    756a:	9303      	str	r3, [sp, #12]
            break;
    756c:	e003      	b.n	7576 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    756e:	2303      	movs	r3, #3
    7570:	9303      	str	r3, [sp, #12]
            break;
    7572:	e000      	b.n	7576 <Adc_HwAcc_GetInputClock+0x34>
            break;
    7574:	bf00      	nop
    }
    return ReturnValue;
    7576:	9b03      	ldr	r3, [sp, #12]
}
    7578:	4618      	mov	r0, r3
    757a:	b004      	add	sp, #16
    757c:	4770      	bx	lr

0000757e <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    757e:	b084      	sub	sp, #16
    7580:	9001      	str	r0, [sp, #4]
    7582:	460b      	mov	r3, r1
    7584:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    7588:	f89d 3003 	ldrb.w	r3, [sp, #3]
    758c:	2b00      	cmp	r3, #0
    758e:	d002      	beq.n	7596 <Adc_HwAcc_SetSampleTime+0x18>
    7590:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7594:	e000      	b.n	7598 <Adc_HwAcc_SetSampleTime+0x1a>
    7596:	2301      	movs	r3, #1
    7598:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    759c:	9b01      	ldr	r3, [sp, #4]
    759e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    75a0:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    75a2:	9b02      	ldr	r3, [sp, #8]
    75a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    75a8:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    75aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    75ae:	9a02      	ldr	r2, [sp, #8]
    75b0:	4313      	orrs	r3, r2
    75b2:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    75b4:	9b01      	ldr	r3, [sp, #4]
    75b6:	9a02      	ldr	r2, [sp, #8]
    75b8:	645a      	str	r2, [r3, #68]	; 0x44
}
    75ba:	bf00      	nop
    75bc:	b004      	add	sp, #16
    75be:	4770      	bx	lr

000075c0 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    75c0:	b086      	sub	sp, #24
    75c2:	9003      	str	r0, [sp, #12]
    75c4:	460b      	mov	r3, r1
    75c6:	9201      	str	r2, [sp, #4]
    75c8:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    75cc:	9b03      	ldr	r3, [sp, #12]
    75ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    75d2:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    75d4:	9b05      	ldr	r3, [sp, #20]
    75d6:	f023 0307 	bic.w	r3, r3, #7
    75da:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    75dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    75e0:	2b00      	cmp	r3, #0
    75e2:	d001      	beq.n	75e8 <Adc_HwAcc_SetAveraging+0x28>
    75e4:	2304      	movs	r3, #4
    75e6:	e000      	b.n	75ea <Adc_HwAcc_SetAveraging+0x2a>
    75e8:	2300      	movs	r3, #0
    75ea:	9a05      	ldr	r2, [sp, #20]
    75ec:	4313      	orrs	r3, r2
    75ee:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    75f0:	9b01      	ldr	r3, [sp, #4]
    75f2:	f003 0303 	and.w	r3, r3, #3
    75f6:	9a05      	ldr	r2, [sp, #20]
    75f8:	4313      	orrs	r3, r2
    75fa:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    75fc:	9b03      	ldr	r3, [sp, #12]
    75fe:	9a05      	ldr	r2, [sp, #20]
    7600:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7604:	bf00      	nop
    7606:	b006      	add	sp, #24
    7608:	4770      	bx	lr

0000760a <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    760a:	b084      	sub	sp, #16
    760c:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    760e:	2300      	movs	r3, #0
    7610:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    7612:	9b01      	ldr	r3, [sp, #4]
    7614:	f003 0303 	and.w	r3, r3, #3
    7618:	2b03      	cmp	r3, #3
    761a:	d00c      	beq.n	7636 <Adc_HwAcc_GetAverageSelect+0x2c>
    761c:	2b03      	cmp	r3, #3
    761e:	d80d      	bhi.n	763c <Adc_HwAcc_GetAverageSelect+0x32>
    7620:	2b01      	cmp	r3, #1
    7622:	d002      	beq.n	762a <Adc_HwAcc_GetAverageSelect+0x20>
    7624:	2b02      	cmp	r3, #2
    7626:	d003      	beq.n	7630 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    7628:	e008      	b.n	763c <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    762a:	2301      	movs	r3, #1
    762c:	9303      	str	r3, [sp, #12]
            break;
    762e:	e006      	b.n	763e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    7630:	2302      	movs	r3, #2
    7632:	9303      	str	r3, [sp, #12]
            break;
    7634:	e003      	b.n	763e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    7636:	2303      	movs	r3, #3
    7638:	9303      	str	r3, [sp, #12]
            break;
    763a:	e000      	b.n	763e <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    763c:	bf00      	nop
    }
    return ReturnValue;
    763e:	9b03      	ldr	r3, [sp, #12]
}
    7640:	4618      	mov	r0, r3
    7642:	b004      	add	sp, #16
    7644:	4770      	bx	lr

00007646 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    7646:	b084      	sub	sp, #16
    7648:	9001      	str	r0, [sp, #4]
    764a:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    764c:	9b01      	ldr	r3, [sp, #4]
    764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7652:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    7654:	9b03      	ldr	r3, [sp, #12]
    7656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    765a:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    765c:	9b00      	ldr	r3, [sp, #0]
    765e:	019b      	lsls	r3, r3, #6
    7660:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7664:	9a03      	ldr	r2, [sp, #12]
    7666:	4313      	orrs	r3, r2
    7668:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    766a:	9b01      	ldr	r3, [sp, #4]
    766c:	9a03      	ldr	r2, [sp, #12]
    766e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7672:	bf00      	nop
    7674:	b004      	add	sp, #16
    7676:	4770      	bx	lr

00007678 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    7678:	b084      	sub	sp, #16
    767a:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    767c:	2300      	movs	r3, #0
    767e:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    7680:	9b01      	ldr	r3, [sp, #4]
    7682:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7686:	2b00      	cmp	r3, #0
    7688:	d001      	beq.n	768e <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    768a:	2301      	movs	r3, #1
    768c:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    768e:	9b03      	ldr	r3, [sp, #12]
}
    7690:	4618      	mov	r0, r3
    7692:	b004      	add	sp, #16
    7694:	4770      	bx	lr

00007696 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    7696:	b086      	sub	sp, #24
    7698:	9003      	str	r0, [sp, #12]
    769a:	9201      	str	r2, [sp, #4]
    769c:	461a      	mov	r2, r3
    769e:	460b      	mov	r3, r1
    76a0:	f88d 300b 	strb.w	r3, [sp, #11]
    76a4:	4613      	mov	r3, r2
    76a6:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    76aa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    76ae:	9b03      	ldr	r3, [sp, #12]
    76b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    76b4:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    76b6:	9b05      	ldr	r3, [sp, #20]
    76b8:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    76bc:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    76be:	9b01      	ldr	r3, [sp, #4]
    76c0:	f003 031f 	and.w	r3, r3, #31
    76c4:	9a05      	ldr	r2, [sp, #20]
    76c6:	4313      	orrs	r3, r2
    76c8:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    76ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
    76ce:	2b00      	cmp	r3, #0
    76d0:	d001      	beq.n	76d6 <Adc_HwAcc_SetChannel+0x40>
    76d2:	2340      	movs	r3, #64	; 0x40
    76d4:	e000      	b.n	76d8 <Adc_HwAcc_SetChannel+0x42>
    76d6:	2300      	movs	r3, #0
    76d8:	9a05      	ldr	r2, [sp, #20]
    76da:	4313      	orrs	r3, r2
    76dc:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    76de:	f89d 200b 	ldrb.w	r2, [sp, #11]
    76e2:	9b03      	ldr	r3, [sp, #12]
    76e4:	9905      	ldr	r1, [sp, #20]
    76e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    76ea:	bf00      	nop
    76ec:	b006      	add	sp, #24
    76ee:	4770      	bx	lr

000076f0 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    76f0:	b082      	sub	sp, #8
    76f2:	9001      	str	r0, [sp, #4]
    76f4:	460b      	mov	r3, r1
    76f6:	f8ad 3002 	strh.w	r3, [sp, #2]
    76fa:	4613      	mov	r3, r2
    76fc:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    7700:	f8bd 3000 	ldrh.w	r3, [sp]
    7704:	b2da      	uxtb	r2, r3
    7706:	9b01      	ldr	r3, [sp, #4]
    7708:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    770c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7710:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7714:	9b01      	ldr	r3, [sp, #4]
    7716:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    771a:	bf00      	nop
    771c:	b002      	add	sp, #8
    771e:	4770      	bx	lr

00007720 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    7720:	b082      	sub	sp, #8
    7722:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    7724:	9b01      	ldr	r3, [sp, #4]
    7726:	099b      	lsrs	r3, r3, #6
    7728:	f003 0301 	and.w	r3, r3, #1
    772c:	2b00      	cmp	r3, #0
    772e:	bf14      	ite	ne
    7730:	2301      	movne	r3, #1
    7732:	2300      	moveq	r3, #0
    7734:	b2db      	uxtb	r3, r3
}
    7736:	4618      	mov	r0, r3
    7738:	b002      	add	sp, #8
    773a:	4770      	bx	lr

0000773c <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    773c:	b082      	sub	sp, #8
    773e:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    7740:	9b01      	ldr	r3, [sp, #4]
    7742:	09db      	lsrs	r3, r3, #7
    7744:	f003 0301 	and.w	r3, r3, #1
    7748:	2b00      	cmp	r3, #0
    774a:	bf14      	ite	ne
    774c:	2301      	movne	r3, #1
    774e:	2300      	moveq	r3, #0
    7750:	b2db      	uxtb	r3, r3
}
    7752:	4618      	mov	r0, r3
    7754:	b002      	add	sp, #8
    7756:	4770      	bx	lr

00007758 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    7758:	b084      	sub	sp, #16
    775a:	9001      	str	r0, [sp, #4]
    775c:	460b      	mov	r3, r1
    775e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    7762:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7766:	9b01      	ldr	r3, [sp, #4]
    7768:	3212      	adds	r2, #18
    776a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    776e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    7772:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7776:	f3c3 030b 	ubfx	r3, r3, #0, #12
    777a:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    777e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7782:	4618      	mov	r0, r3
    7784:	b004      	add	sp, #16
    7786:	4770      	bx	lr

00007788 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    7788:	b500      	push	{lr}
    778a:	b085      	sub	sp, #20
    778c:	9003      	str	r0, [sp, #12]
    778e:	9102      	str	r1, [sp, #8]
    7790:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    7792:	f009 fc5b 	bl	1104c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7796:	9b02      	ldr	r3, [sp, #8]
    7798:	7a59      	ldrb	r1, [r3, #9]
    779a:	9b02      	ldr	r3, [sp, #8]
    779c:	68db      	ldr	r3, [r3, #12]
    779e:	461a      	mov	r2, r3
    77a0:	9803      	ldr	r0, [sp, #12]
    77a2:	f7ff ff0d 	bl	75c0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    77a6:	f009 fc7d 	bl	110a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    77aa:	f009 fab5 	bl	10d18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    77ae:	9901      	ldr	r1, [sp, #4]
    77b0:	9803      	ldr	r0, [sp, #12]
    77b2:	f7ff ff48 	bl	7646 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    77b6:	f009 fadb 	bl	10d70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    77ba:	f008 ffcb 	bl	10754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    77be:	9b02      	ldr	r3, [sp, #8]
    77c0:	7a1b      	ldrb	r3, [r3, #8]
    77c2:	4619      	mov	r1, r3
    77c4:	9803      	ldr	r0, [sp, #12]
    77c6:	f7ff feda 	bl	757e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    77ca:	f008 ffef 	bl	107ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    77ce:	f008 ff1d 	bl	1060c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    77d2:	9b02      	ldr	r3, [sp, #8]
    77d4:	6819      	ldr	r1, [r3, #0]
    77d6:	9b02      	ldr	r3, [sp, #8]
    77d8:	685b      	ldr	r3, [r3, #4]
    77da:	461a      	mov	r2, r3
    77dc:	9803      	ldr	r0, [sp, #12]
    77de:	f7ff fe73 	bl	74c8 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    77e2:	f008 ff3f 	bl	10664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    77e6:	bf00      	nop
    77e8:	b005      	add	sp, #20
    77ea:	f85d fb04 	ldr.w	pc, [sp], #4

000077ee <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    77ee:	b500      	push	{lr}
    77f0:	b087      	sub	sp, #28
    77f2:	9001      	str	r0, [sp, #4]
    77f4:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    77f6:	4a67      	ldr	r2, [pc, #412]	; (7994 <Adc_Ip_Init+0x1a6>)
    77f8:	9b01      	ldr	r3, [sp, #4]
    77fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77fe:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    7800:	2300      	movs	r3, #0
    7802:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    7804:	2300      	movs	r3, #0
    7806:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7808:	9b00      	ldr	r3, [sp, #0]
    780a:	6819      	ldr	r1, [r3, #0]
    780c:	9b00      	ldr	r3, [sp, #0]
    780e:	689b      	ldr	r3, [r3, #8]
    7810:	461a      	mov	r2, r3
    7812:	9802      	ldr	r0, [sp, #8]
    7814:	f7ff fe58 	bl	74c8 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7818:	9b00      	ldr	r3, [sp, #0]
    781a:	7b1b      	ldrb	r3, [r3, #12]
    781c:	4619      	mov	r1, r3
    781e:	9802      	ldr	r0, [sp, #8]
    7820:	f7ff fead 	bl	757e <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7824:	9b00      	ldr	r3, [sp, #0]
    7826:	7b59      	ldrb	r1, [r3, #13]
    7828:	9b00      	ldr	r3, [sp, #0]
    782a:	691b      	ldr	r3, [r3, #16]
    782c:	461a      	mov	r2, r3
    782e:	9802      	ldr	r0, [sp, #8]
    7830:	f7ff fec6 	bl	75c0 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    7834:	9b00      	ldr	r3, [sp, #0]
    7836:	695b      	ldr	r3, [r3, #20]
    7838:	4619      	mov	r1, r3
    783a:	9801      	ldr	r0, [sp, #4]
    783c:	f000 f9ea 	bl	7c14 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    7840:	9b04      	ldr	r3, [sp, #16]
    7842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7846:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    7848:	9b00      	ldr	r3, [sp, #0]
    784a:	699b      	ldr	r3, [r3, #24]
    784c:	019b      	lsls	r3, r3, #6
    784e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7852:	9a05      	ldr	r2, [sp, #20]
    7854:	4313      	orrs	r3, r2
    7856:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    7858:	9b00      	ldr	r3, [sp, #0]
    785a:	7f1b      	ldrb	r3, [r3, #28]
    785c:	2b00      	cmp	r3, #0
    785e:	d004      	beq.n	786a <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    7860:	9b05      	ldr	r3, [sp, #20]
    7862:	f043 0304 	orr.w	r3, r3, #4
    7866:	9305      	str	r3, [sp, #20]
    7868:	e003      	b.n	7872 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    786a:	9b04      	ldr	r3, [sp, #16]
    786c:	f043 0304 	orr.w	r3, r3, #4
    7870:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    7872:	9b04      	ldr	r3, [sp, #16]
    7874:	f043 0303 	orr.w	r3, r3, #3
    7878:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    787a:	9b00      	ldr	r3, [sp, #0]
    787c:	6a1b      	ldr	r3, [r3, #32]
    787e:	f003 0303 	and.w	r3, r3, #3
    7882:	9a05      	ldr	r2, [sp, #20]
    7884:	4313      	orrs	r3, r2
    7886:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    7888:	9b04      	ldr	r3, [sp, #16]
    788a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    788e:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    7890:	9b00      	ldr	r3, [sp, #0]
    7892:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    7896:	2b00      	cmp	r3, #0
    7898:	d001      	beq.n	789e <Adc_Ip_Init+0xb0>
    789a:	2320      	movs	r3, #32
    789c:	e000      	b.n	78a0 <Adc_Ip_Init+0xb2>
    789e:	2300      	movs	r3, #0
    78a0:	9a05      	ldr	r2, [sp, #20]
    78a2:	4313      	orrs	r3, r2
    78a4:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    78a6:	9b00      	ldr	r3, [sp, #0]
    78a8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    78ac:	2b00      	cmp	r3, #0
    78ae:	d001      	beq.n	78b4 <Adc_Ip_Init+0xc6>
    78b0:	2310      	movs	r3, #16
    78b2:	e000      	b.n	78b6 <Adc_Ip_Init+0xc8>
    78b4:	2300      	movs	r3, #0
    78b6:	9a05      	ldr	r2, [sp, #20]
    78b8:	4313      	orrs	r3, r2
    78ba:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    78bc:	9b00      	ldr	r3, [sp, #0]
    78be:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    78c2:	2b00      	cmp	r3, #0
    78c4:	d001      	beq.n	78ca <Adc_Ip_Init+0xdc>
    78c6:	2308      	movs	r3, #8
    78c8:	e000      	b.n	78cc <Adc_Ip_Init+0xde>
    78ca:	2300      	movs	r3, #0
    78cc:	9a05      	ldr	r2, [sp, #20]
    78ce:	4313      	orrs	r3, r2
    78d0:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    78d2:	9b00      	ldr	r3, [sp, #0]
    78d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    78d6:	461a      	mov	r2, r3
    78d8:	9b02      	ldr	r3, [sp, #8]
    78da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    78de:	9b00      	ldr	r3, [sp, #0]
    78e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    78e2:	461a      	mov	r2, r3
    78e4:	9b02      	ldr	r3, [sp, #8]
    78e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    78ea:	9a05      	ldr	r2, [sp, #20]
    78ec:	9904      	ldr	r1, [sp, #16]
    78ee:	9802      	ldr	r0, [sp, #8]
    78f0:	f7ff fdd2 	bl	7498 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    78f4:	9b00      	ldr	r3, [sp, #0]
    78f6:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    78f8:	9b00      	ldr	r3, [sp, #0]
    78fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    78fc:	461a      	mov	r2, r3
    78fe:	9802      	ldr	r0, [sp, #8]
    7900:	f7ff fef6 	bl	76f0 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    7904:	9b00      	ldr	r3, [sp, #0]
    7906:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    790a:	4619      	mov	r1, r3
    790c:	9801      	ldr	r0, [sp, #4]
    790e:	f000 f955 	bl	7bbc <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    7912:	9b00      	ldr	r3, [sp, #0]
    7914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7916:	2b00      	cmp	r3, #0
    7918:	d01c      	beq.n	7954 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    791a:	2300      	movs	r3, #0
    791c:	f88d 300f 	strb.w	r3, [sp, #15]
    7920:	e011      	b.n	7946 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    7922:	9b00      	ldr	r3, [sp, #0]
    7924:	6b59      	ldr	r1, [r3, #52]	; 0x34
    7926:	f89d 200f 	ldrb.w	r2, [sp, #15]
    792a:	4613      	mov	r3, r2
    792c:	005b      	lsls	r3, r3, #1
    792e:	4413      	add	r3, r2
    7930:	009b      	lsls	r3, r3, #2
    7932:	440b      	add	r3, r1
    7934:	4619      	mov	r1, r3
    7936:	9801      	ldr	r0, [sp, #4]
    7938:	f000 f9c2 	bl	7cc0 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    793c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7940:	3301      	adds	r3, #1
    7942:	f88d 300f 	strb.w	r3, [sp, #15]
    7946:	9b00      	ldr	r3, [sp, #0]
    7948:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    794c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7950:	429a      	cmp	r2, r3
    7952:	d3e6      	bcc.n	7922 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    7954:	9b00      	ldr	r3, [sp, #0]
    7956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7958:	490f      	ldr	r1, [pc, #60]	; (7998 <Adc_Ip_Init+0x1aa>)
    795a:	9b01      	ldr	r3, [sp, #4]
    795c:	204c      	movs	r0, #76	; 0x4c
    795e:	fb00 f303 	mul.w	r3, r0, r3
    7962:	440b      	add	r3, r1
    7964:	3308      	adds	r3, #8
    7966:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    7968:	9b00      	ldr	r3, [sp, #0]
    796a:	685a      	ldr	r2, [r3, #4]
    796c:	490a      	ldr	r1, [pc, #40]	; (7998 <Adc_Ip_Init+0x1aa>)
    796e:	9b01      	ldr	r3, [sp, #4]
    7970:	204c      	movs	r0, #76	; 0x4c
    7972:	fb00 f303 	mul.w	r3, r0, r3
    7976:	440b      	add	r3, r1
    7978:	3304      	adds	r3, #4
    797a:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    797c:	4a06      	ldr	r2, [pc, #24]	; (7998 <Adc_Ip_Init+0x1aa>)
    797e:	9b01      	ldr	r3, [sp, #4]
    7980:	214c      	movs	r1, #76	; 0x4c
    7982:	fb01 f303 	mul.w	r3, r1, r3
    7986:	4413      	add	r3, r2
    7988:	2201      	movs	r2, #1
    798a:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    798c:	bf00      	nop
    798e:	b007      	add	sp, #28
    7990:	f85d fb04 	ldr.w	pc, [sp], #4
    7994:	00018538 	.word	0x00018538
    7998:	1fff8d00 	.word	0x1fff8d00

0000799c <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    799c:	b500      	push	{lr}
    799e:	b0c3      	sub	sp, #268	; 0x10c
    79a0:	ab42      	add	r3, sp, #264	; 0x108
    79a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    79a6:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    79a8:	2300      	movs	r3, #0
    79aa:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    79ac:	2303      	movs	r3, #3
    79ae:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    79b0:	2300      	movs	r3, #0
    79b2:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    79b4:	230c      	movs	r3, #12
    79b6:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    79ba:	2300      	movs	r3, #0
    79bc:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    79c0:	2300      	movs	r3, #0
    79c2:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    79c4:	2300      	movs	r3, #0
    79c6:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    79c8:	2300      	movs	r3, #0
    79ca:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    79cc:	2300      	movs	r3, #0
    79ce:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    79d2:	2300      	movs	r3, #0
    79d4:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    79d6:	2300      	movs	r3, #0
    79d8:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    79dc:	2300      	movs	r3, #0
    79de:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    79e2:	2300      	movs	r3, #0
    79e4:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    79e8:	2300      	movs	r3, #0
    79ea:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    79ee:	2300      	movs	r3, #0
    79f0:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    79f4:	2300      	movs	r3, #0
    79f6:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    79fa:	2304      	movs	r3, #4
    79fc:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    7a00:	2300      	movs	r3, #0
    7a02:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    7a06:	2310      	movs	r3, #16
    7a08:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    7a0c:	2300      	movs	r3, #0
    7a0e:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    7a12:	e02b      	b.n	7a6c <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    7a14:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7a18:	ab42      	add	r3, sp, #264	; 0x108
    7a1a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7a1e:	4613      	mov	r3, r2
    7a20:	005b      	lsls	r3, r3, #1
    7a22:	4413      	add	r3, r2
    7a24:	009b      	lsls	r3, r3, #2
    7a26:	440b      	add	r3, r1
    7a28:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7a2c:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    7a2e:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7a32:	ab42      	add	r3, sp, #264	; 0x108
    7a34:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7a38:	4613      	mov	r3, r2
    7a3a:	005b      	lsls	r3, r3, #1
    7a3c:	4413      	add	r3, r2
    7a3e:	009b      	lsls	r3, r3, #2
    7a40:	440b      	add	r3, r1
    7a42:	3304      	adds	r3, #4
    7a44:	221f      	movs	r2, #31
    7a46:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    7a48:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7a4c:	ab42      	add	r3, sp, #264	; 0x108
    7a4e:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7a52:	4613      	mov	r3, r2
    7a54:	005b      	lsls	r3, r3, #1
    7a56:	4413      	add	r3, r2
    7a58:	009b      	lsls	r3, r3, #2
    7a5a:	440b      	add	r3, r1
    7a5c:	3308      	adds	r3, #8
    7a5e:	2200      	movs	r2, #0
    7a60:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    7a62:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    7a66:	3301      	adds	r3, #1
    7a68:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    7a6c:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    7a70:	2b0f      	cmp	r3, #15
    7a72:	d9cf      	bls.n	7a14 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    7a74:	ab02      	add	r3, sp, #8
    7a76:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    7a78:	2300      	movs	r3, #0
    7a7a:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    7a7c:	aa32      	add	r2, sp, #200	; 0xc8
    7a7e:	ab42      	add	r3, sp, #264	; 0x108
    7a80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7a84:	4611      	mov	r1, r2
    7a86:	6818      	ldr	r0, [r3, #0]
    7a88:	f7ff feb1 	bl	77ee <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    7a8c:	4a07      	ldr	r2, [pc, #28]	; (7aac <Adc_Ip_DeInit+0x110>)
    7a8e:	ab42      	add	r3, sp, #264	; 0x108
    7a90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7a94:	681b      	ldr	r3, [r3, #0]
    7a96:	214c      	movs	r1, #76	; 0x4c
    7a98:	fb01 f303 	mul.w	r3, r1, r3
    7a9c:	4413      	add	r3, r2
    7a9e:	2200      	movs	r2, #0
    7aa0:	701a      	strb	r2, [r3, #0]
}
    7aa2:	bf00      	nop
    7aa4:	b043      	add	sp, #268	; 0x10c
    7aa6:	f85d fb04 	ldr.w	pc, [sp], #4
    7aaa:	bf00      	nop
    7aac:	1fff8d00 	.word	0x1fff8d00

00007ab0 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    7ab0:	b500      	push	{lr}
    7ab2:	b087      	sub	sp, #28
    7ab4:	9003      	str	r0, [sp, #12]
    7ab6:	460b      	mov	r3, r1
    7ab8:	9201      	str	r2, [sp, #4]
    7aba:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7abe:	4a0a      	ldr	r2, [pc, #40]	; (7ae8 <Adc_Ip_SetAveraging+0x38>)
    7ac0:	9b03      	ldr	r3, [sp, #12]
    7ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ac6:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    7ac8:	f009 fa1c 	bl	10f04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    7acc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7ad0:	9a01      	ldr	r2, [sp, #4]
    7ad2:	4619      	mov	r1, r3
    7ad4:	9805      	ldr	r0, [sp, #20]
    7ad6:	f7ff fd73 	bl	75c0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    7ada:	f009 fa3f 	bl	10f5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    7ade:	bf00      	nop
    7ae0:	b007      	add	sp, #28
    7ae2:	f85d fb04 	ldr.w	pc, [sp], #4
    7ae6:	bf00      	nop
    7ae8:	00018538 	.word	0x00018538

00007aec <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    7aec:	b500      	push	{lr}
    7aee:	b085      	sub	sp, #20
    7af0:	9001      	str	r0, [sp, #4]
    7af2:	460b      	mov	r3, r1
    7af4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7af8:	4a09      	ldr	r2, [pc, #36]	; (7b20 <Adc_Ip_SetSampleTime+0x34>)
    7afa:	9b01      	ldr	r3, [sp, #4]
    7afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b00:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    7b02:	f008 fe79 	bl	107f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    7b06:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7b0a:	4619      	mov	r1, r3
    7b0c:	9803      	ldr	r0, [sp, #12]
    7b0e:	f7ff fd36 	bl	757e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    7b12:	f008 fe9d 	bl	10850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    7b16:	bf00      	nop
    7b18:	b005      	add	sp, #20
    7b1a:	f85d fb04 	ldr.w	pc, [sp], #4
    7b1e:	bf00      	nop
    7b20:	00018538 	.word	0x00018538

00007b24 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    7b24:	b500      	push	{lr}
    7b26:	b085      	sub	sp, #20
    7b28:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b2a:	4a0a      	ldr	r2, [pc, #40]	; (7b54 <Adc_Ip_EnableDma+0x30>)
    7b2c:	9b01      	ldr	r3, [sp, #4]
    7b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b32:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    7b34:	f009 f994 	bl	10e60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    7b38:	9b03      	ldr	r3, [sp, #12]
    7b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7b3e:	f043 0204 	orr.w	r2, r3, #4
    7b42:	9b03      	ldr	r3, [sp, #12]
    7b44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    7b48:	f009 f9b6 	bl	10eb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    7b4c:	bf00      	nop
    7b4e:	b005      	add	sp, #20
    7b50:	f85d fb04 	ldr.w	pc, [sp], #4
    7b54:	00018538 	.word	0x00018538

00007b58 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    7b58:	b500      	push	{lr}
    7b5a:	b085      	sub	sp, #20
    7b5c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b5e:	4a0a      	ldr	r2, [pc, #40]	; (7b88 <Adc_Ip_DisableDma+0x30>)
    7b60:	9b01      	ldr	r3, [sp, #4]
    7b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b66:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    7b68:	f009 f832 	bl	10bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    7b6c:	9b03      	ldr	r3, [sp, #12]
    7b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7b72:	f023 0204 	bic.w	r2, r3, #4
    7b76:	9b03      	ldr	r3, [sp, #12]
    7b78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    7b7c:	f009 f854 	bl	10c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    7b80:	bf00      	nop
    7b82:	b005      	add	sp, #20
    7b84:	f85d fb04 	ldr.w	pc, [sp], #4
    7b88:	00018538 	.word	0x00018538

00007b8c <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    7b8c:	b500      	push	{lr}
    7b8e:	b085      	sub	sp, #20
    7b90:	9001      	str	r0, [sp, #4]
    7b92:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b94:	4a08      	ldr	r2, [pc, #32]	; (7bb8 <Adc_Ip_SetTriggerMode+0x2c>)
    7b96:	9b01      	ldr	r3, [sp, #4]
    7b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b9c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    7b9e:	f009 f869 	bl	10c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    7ba2:	9900      	ldr	r1, [sp, #0]
    7ba4:	9803      	ldr	r0, [sp, #12]
    7ba6:	f7ff fd4e 	bl	7646 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    7baa:	f009 f88f 	bl	10ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    7bae:	bf00      	nop
    7bb0:	b005      	add	sp, #20
    7bb2:	f85d fb04 	ldr.w	pc, [sp], #4
    7bb6:	bf00      	nop
    7bb8:	00018538 	.word	0x00018538

00007bbc <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    7bbc:	b500      	push	{lr}
    7bbe:	b085      	sub	sp, #20
    7bc0:	9001      	str	r0, [sp, #4]
    7bc2:	460b      	mov	r3, r1
    7bc4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7bc8:	4a11      	ldr	r2, [pc, #68]	; (7c10 <Adc_Ip_SetContinuousMode+0x54>)
    7bca:	9b01      	ldr	r3, [sp, #4]
    7bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bd0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    7bd2:	f009 fa8d 	bl	110f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    7bd6:	9b03      	ldr	r3, [sp, #12]
    7bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7bdc:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    7bde:	9b02      	ldr	r3, [sp, #8]
    7be0:	f023 0308 	bic.w	r3, r3, #8
    7be4:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    7be6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7bea:	2b00      	cmp	r3, #0
    7bec:	d001      	beq.n	7bf2 <Adc_Ip_SetContinuousMode+0x36>
    7bee:	2308      	movs	r3, #8
    7bf0:	e000      	b.n	7bf4 <Adc_Ip_SetContinuousMode+0x38>
    7bf2:	2300      	movs	r3, #0
    7bf4:	9a02      	ldr	r2, [sp, #8]
    7bf6:	4313      	orrs	r3, r2
    7bf8:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    7bfa:	9b03      	ldr	r3, [sp, #12]
    7bfc:	9a02      	ldr	r2, [sp, #8]
    7bfe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    7c02:	f009 faa1 	bl	11148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    7c06:	bf00      	nop
    7c08:	b005      	add	sp, #20
    7c0a:	f85d fb04 	ldr.w	pc, [sp], #4
    7c0e:	bf00      	nop
    7c10:	00018538 	.word	0x00018538

00007c14 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    7c14:	b500      	push	{lr}
    7c16:	b085      	sub	sp, #20
    7c18:	9001      	str	r0, [sp, #4]
    7c1a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7c1c:	4a0e      	ldr	r2, [pc, #56]	; (7c58 <Adc_Ip_SetResolution+0x44>)
    7c1e:	9b01      	ldr	r3, [sp, #4]
    7c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c24:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    7c26:	f008 fab3 	bl	10190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    7c2a:	9b03      	ldr	r3, [sp, #12]
    7c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7c2e:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    7c30:	9b02      	ldr	r3, [sp, #8]
    7c32:	f023 030c 	bic.w	r3, r3, #12
    7c36:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    7c38:	9b00      	ldr	r3, [sp, #0]
    7c3a:	009b      	lsls	r3, r3, #2
    7c3c:	f003 030c 	and.w	r3, r3, #12
    7c40:	9a02      	ldr	r2, [sp, #8]
    7c42:	4313      	orrs	r3, r2
    7c44:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    7c46:	9b03      	ldr	r3, [sp, #12]
    7c48:	9a02      	ldr	r2, [sp, #8]
    7c4a:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    7c4c:	f008 facc 	bl	101e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    7c50:	bf00      	nop
    7c52:	b005      	add	sp, #20
    7c54:	f85d fb04 	ldr.w	pc, [sp], #4
    7c58:	00018538 	.word	0x00018538

00007c5c <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    7c5c:	b500      	push	{lr}
    7c5e:	b085      	sub	sp, #20
    7c60:	9001      	str	r0, [sp, #4]
    7c62:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7c64:	4a15      	ldr	r2, [pc, #84]	; (7cbc <Adc_Ip_SetClockMode+0x60>)
    7c66:	9b01      	ldr	r3, [sp, #4]
    7c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c6c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    7c6e:	f008 fc29 	bl	104c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7c72:	9b00      	ldr	r3, [sp, #0]
    7c74:	6819      	ldr	r1, [r3, #0]
    7c76:	9b00      	ldr	r3, [sp, #0]
    7c78:	685b      	ldr	r3, [r3, #4]
    7c7a:	461a      	mov	r2, r3
    7c7c:	9803      	ldr	r0, [sp, #12]
    7c7e:	f7ff fc23 	bl	74c8 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    7c82:	f008 fc4b 	bl	1051c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    7c86:	f008 fd13 	bl	106b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7c8a:	9b00      	ldr	r3, [sp, #0]
    7c8c:	7a1b      	ldrb	r3, [r3, #8]
    7c8e:	4619      	mov	r1, r3
    7c90:	9803      	ldr	r0, [sp, #12]
    7c92:	f7ff fc74 	bl	757e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    7c96:	f008 fd37 	bl	10708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    7c9a:	f009 f985 	bl	10fa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7c9e:	9b00      	ldr	r3, [sp, #0]
    7ca0:	7a59      	ldrb	r1, [r3, #9]
    7ca2:	9b00      	ldr	r3, [sp, #0]
    7ca4:	68db      	ldr	r3, [r3, #12]
    7ca6:	461a      	mov	r2, r3
    7ca8:	9803      	ldr	r0, [sp, #12]
    7caa:	f7ff fc89 	bl	75c0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    7cae:	f009 f9a7 	bl	11000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    7cb2:	bf00      	nop
    7cb4:	b005      	add	sp, #20
    7cb6:	f85d fb04 	ldr.w	pc, [sp], #4
    7cba:	bf00      	nop
    7cbc:	00018538 	.word	0x00018538

00007cc0 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    7cc0:	b510      	push	{r4, lr}
    7cc2:	b084      	sub	sp, #16
    7cc4:	9001      	str	r0, [sp, #4]
    7cc6:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7cc8:	4a13      	ldr	r2, [pc, #76]	; (7d18 <Adc_Ip_ConfigChannel+0x58>)
    7cca:	9b01      	ldr	r3, [sp, #4]
    7ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cd0:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    7cd2:	9b00      	ldr	r3, [sp, #0]
    7cd4:	685b      	ldr	r3, [r3, #4]
    7cd6:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    7cd8:	f008 ff28 	bl	10b2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    7cdc:	9b00      	ldr	r3, [sp, #0]
    7cde:	7819      	ldrb	r1, [r3, #0]
    7ce0:	9b00      	ldr	r3, [sp, #0]
    7ce2:	7a1b      	ldrb	r3, [r3, #8]
    7ce4:	9a02      	ldr	r2, [sp, #8]
    7ce6:	9803      	ldr	r0, [sp, #12]
    7ce8:	f7ff fcd5 	bl	7696 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    7cec:	f008 ff4a 	bl	10b84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    7cf0:	9b00      	ldr	r3, [sp, #0]
    7cf2:	781b      	ldrb	r3, [r3, #0]
    7cf4:	461c      	mov	r4, r3
    7cf6:	9b00      	ldr	r3, [sp, #0]
    7cf8:	6859      	ldr	r1, [r3, #4]
    7cfa:	4808      	ldr	r0, [pc, #32]	; (7d1c <Adc_Ip_ConfigChannel+0x5c>)
    7cfc:	9a01      	ldr	r2, [sp, #4]
    7cfe:	4613      	mov	r3, r2
    7d00:	00db      	lsls	r3, r3, #3
    7d02:	4413      	add	r3, r2
    7d04:	005b      	lsls	r3, r3, #1
    7d06:	4413      	add	r3, r2
    7d08:	4423      	add	r3, r4
    7d0a:	3302      	adds	r3, #2
    7d0c:	009b      	lsls	r3, r3, #2
    7d0e:	4403      	add	r3, r0
    7d10:	6059      	str	r1, [r3, #4]
}
    7d12:	bf00      	nop
    7d14:	b004      	add	sp, #16
    7d16:	bd10      	pop	{r4, pc}
    7d18:	00018538 	.word	0x00018538
    7d1c:	1fff8d00 	.word	0x1fff8d00

00007d20 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    7d20:	b500      	push	{lr}
    7d22:	b089      	sub	sp, #36	; 0x24
    7d24:	9001      	str	r0, [sp, #4]
    7d26:	460b      	mov	r3, r1
    7d28:	f88d 3003 	strb.w	r3, [sp, #3]
    7d2c:	4613      	mov	r3, r2
    7d2e:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7d32:	4a24      	ldr	r2, [pc, #144]	; (7dc4 <Adc_Ip_SetDisabledChannel+0xa4>)
    7d34:	9b01      	ldr	r3, [sp, #4]
    7d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d3a:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7d3c:	2300      	movs	r3, #0
    7d3e:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7d40:	2100      	movs	r1, #0
    7d42:	4821      	ldr	r0, [pc, #132]	; (7dc8 <Adc_Ip_SetDisabledChannel+0xa8>)
    7d44:	f7fa f8b6 	bl	1eb4 <OsIf_MicrosToTicks>
    7d48:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7d4a:	2000      	movs	r0, #0
    7d4c:	f7fa f866 	bl	1e1c <OsIf_GetCounter>
    7d50:	4603      	mov	r3, r0
    7d52:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    7d54:	2300      	movs	r3, #0
    7d56:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    7d58:	f008 fda0 	bl	1089c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    7d5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7d60:	9b05      	ldr	r3, [sp, #20]
    7d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d66:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7d6a:	f043 011f 	orr.w	r1, r3, #31
    7d6e:	9b05      	ldr	r3, [sp, #20]
    7d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    7d74:	f008 fdbe 	bl	108f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    7d78:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7d7c:	2b00      	cmp	r3, #0
    7d7e:	d01c      	beq.n	7dba <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7d80:	e008      	b.n	7d94 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    7d82:	ab03      	add	r3, sp, #12
    7d84:	2100      	movs	r1, #0
    7d86:	4618      	mov	r0, r3
    7d88:	f7fa f861 	bl	1e4e <OsIf_GetElapsed>
    7d8c:	4602      	mov	r2, r0
    7d8e:	9b06      	ldr	r3, [sp, #24]
    7d90:	4413      	add	r3, r2
    7d92:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7d94:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7d98:	9b05      	ldr	r3, [sp, #20]
    7d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d9e:	f003 031f 	and.w	r3, r3, #31
    7da2:	2b1f      	cmp	r3, #31
    7da4:	d003      	beq.n	7dae <Adc_Ip_SetDisabledChannel+0x8e>
    7da6:	9a06      	ldr	r2, [sp, #24]
    7da8:	9b04      	ldr	r3, [sp, #16]
    7daa:	429a      	cmp	r2, r3
    7dac:	d3e9      	bcc.n	7d82 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    7dae:	9a06      	ldr	r2, [sp, #24]
    7db0:	9b04      	ldr	r3, [sp, #16]
    7db2:	429a      	cmp	r2, r3
    7db4:	d301      	bcc.n	7dba <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    7db6:	2302      	movs	r3, #2
    7db8:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    7dba:	9b07      	ldr	r3, [sp, #28]
}
    7dbc:	4618      	mov	r0, r3
    7dbe:	b009      	add	sp, #36	; 0x24
    7dc0:	f85d fb04 	ldr.w	pc, [sp], #4
    7dc4:	00018538 	.word	0x00018538
    7dc8:	000186a0 	.word	0x000186a0

00007dcc <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    7dcc:	b500      	push	{lr}
    7dce:	b087      	sub	sp, #28
    7dd0:	9003      	str	r0, [sp, #12]
    7dd2:	9102      	str	r1, [sp, #8]
    7dd4:	4613      	mov	r3, r2
    7dd6:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7dda:	4a0a      	ldr	r2, [pc, #40]	; (7e04 <Adc_Ip_StartConversion+0x38>)
    7ddc:	9b03      	ldr	r3, [sp, #12]
    7dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7de2:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    7de4:	f008 fdac 	bl	10940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    7de8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7dec:	9a02      	ldr	r2, [sp, #8]
    7dee:	2100      	movs	r1, #0
    7df0:	9805      	ldr	r0, [sp, #20]
    7df2:	f7ff fc50 	bl	7696 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    7df6:	f008 fdcf 	bl	10998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    7dfa:	bf00      	nop
    7dfc:	b007      	add	sp, #28
    7dfe:	f85d fb04 	ldr.w	pc, [sp], #4
    7e02:	bf00      	nop
    7e04:	00018538 	.word	0x00018538

00007e08 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    7e08:	b084      	sub	sp, #16
    7e0a:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7e0c:	4a0b      	ldr	r2, [pc, #44]	; (7e3c <Adc_Ip_GetConvActiveFlag+0x34>)
    7e0e:	9b01      	ldr	r3, [sp, #4]
    7e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e14:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    7e16:	9b03      	ldr	r3, [sp, #12]
    7e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7e1c:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    7e1e:	9b02      	ldr	r3, [sp, #8]
    7e20:	09db      	lsrs	r3, r3, #7
    7e22:	f003 0301 	and.w	r3, r3, #1
    7e26:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    7e28:	9b02      	ldr	r3, [sp, #8]
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	bf14      	ite	ne
    7e2e:	2301      	movne	r3, #1
    7e30:	2300      	moveq	r3, #0
    7e32:	b2db      	uxtb	r3, r3
}
    7e34:	4618      	mov	r0, r3
    7e36:	b004      	add	sp, #16
    7e38:	4770      	bx	lr
    7e3a:	bf00      	nop
    7e3c:	00018538 	.word	0x00018538

00007e40 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    7e40:	b500      	push	{lr}
    7e42:	b085      	sub	sp, #20
    7e44:	9001      	str	r0, [sp, #4]
    7e46:	460b      	mov	r3, r1
    7e48:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7e4c:	4a08      	ldr	r2, [pc, #32]	; (7e70 <Adc_Ip_GetChanInterrupt+0x30>)
    7e4e:	9b01      	ldr	r3, [sp, #4]
    7e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e54:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e5c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    7e5e:	9803      	ldr	r0, [sp, #12]
    7e60:	f7ff fc5e 	bl	7720 <Adc_HwAcc_GetAIEN>
    7e64:	4603      	mov	r3, r0
}
    7e66:	4618      	mov	r0, r3
    7e68:	b005      	add	sp, #20
    7e6a:	f85d fb04 	ldr.w	pc, [sp], #4
    7e6e:	bf00      	nop
    7e70:	00018538 	.word	0x00018538

00007e74 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    7e74:	b500      	push	{lr}
    7e76:	b085      	sub	sp, #20
    7e78:	9001      	str	r0, [sp, #4]
    7e7a:	460b      	mov	r3, r1
    7e7c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7e80:	4a08      	ldr	r2, [pc, #32]	; (7ea4 <Adc_Ip_GetConvCompleteFlag+0x30>)
    7e82:	9b01      	ldr	r3, [sp, #4]
    7e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e88:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e90:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    7e92:	9803      	ldr	r0, [sp, #12]
    7e94:	f7ff fc52 	bl	773c <Adc_HwAcc_GetCOCO>
    7e98:	4603      	mov	r3, r0
}
    7e9a:	4618      	mov	r0, r3
    7e9c:	b005      	add	sp, #20
    7e9e:	f85d fb04 	ldr.w	pc, [sp], #4
    7ea2:	bf00      	nop
    7ea4:	00018538 	.word	0x00018538

00007ea8 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    7ea8:	b500      	push	{lr}
    7eaa:	b085      	sub	sp, #20
    7eac:	9001      	str	r0, [sp, #4]
    7eae:	460b      	mov	r3, r1
    7eb0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7eb4:	4a07      	ldr	r2, [pc, #28]	; (7ed4 <Adc_Ip_GetConvData+0x2c>)
    7eb6:	9b01      	ldr	r3, [sp, #4]
    7eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ebc:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    7ebe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7ec2:	4619      	mov	r1, r3
    7ec4:	9803      	ldr	r0, [sp, #12]
    7ec6:	f7ff fc47 	bl	7758 <Adc_HwAcc_GetData>
    7eca:	4603      	mov	r3, r0
}
    7ecc:	4618      	mov	r0, r3
    7ece:	b005      	add	sp, #20
    7ed0:	f85d fb04 	ldr.w	pc, [sp], #4
    7ed4:	00018538 	.word	0x00018538

00007ed8 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    7ed8:	b500      	push	{lr}
    7eda:	b093      	sub	sp, #76	; 0x4c
    7edc:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7ede:	4a59      	ldr	r2, [pc, #356]	; (8044 <Adc_Ip_DoCalibration+0x16c>)
    7ee0:	9b01      	ldr	r3, [sp, #4]
    7ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ee6:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7ee8:	2300      	movs	r3, #0
    7eea:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7eec:	2100      	movs	r1, #0
    7eee:	4856      	ldr	r0, [pc, #344]	; (8048 <Adc_Ip_DoCalibration+0x170>)
    7ef0:	f7f9 ffe0 	bl	1eb4 <OsIf_MicrosToTicks>
    7ef4:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7ef6:	2000      	movs	r0, #0
    7ef8:	f7f9 ff90 	bl	1e1c <OsIf_GetCounter>
    7efc:	4603      	mov	r3, r0
    7efe:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    7f00:	2300      	movs	r3, #0
    7f02:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    7f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7f0a:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    7f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7f0e:	089b      	lsrs	r3, r3, #2
    7f10:	f003 0301 	and.w	r3, r3, #1
    7f14:	2b00      	cmp	r3, #0
    7f16:	bf14      	ite	ne
    7f18:	2301      	movne	r3, #1
    7f1a:	2300      	moveq	r3, #0
    7f1c:	b2db      	uxtb	r3, r3
    7f1e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    7f22:	980d      	ldr	r0, [sp, #52]	; 0x34
    7f24:	f7ff fb71 	bl	760a <Adc_HwAcc_GetAverageSelect>
    7f28:	4603      	mov	r3, r0
    7f2a:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    7f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7f30:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    7f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7f34:	b2db      	uxtb	r3, r3
    7f36:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    7f3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7f40:	4618      	mov	r0, r3
    7f42:	f7ff fb99 	bl	7678 <Adc_HwAcc_GetTriggerMode>
    7f46:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    7f48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7f4c:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    7f4e:	980d      	ldr	r0, [sp, #52]	; 0x34
    7f50:	f7ff fad8 	bl	7504 <Adc_HwAcc_GetClockDivide>
    7f54:	4603      	mov	r3, r0
    7f56:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    7f58:	980d      	ldr	r0, [sp, #52]	; 0x34
    7f5a:	f7ff faf2 	bl	7542 <Adc_HwAcc_GetInputClock>
    7f5e:	4603      	mov	r3, r0
    7f60:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    7f62:	2301      	movs	r3, #1
    7f64:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    7f68:	2303      	movs	r3, #3
    7f6a:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    7f6c:	230c      	movs	r3, #12
    7f6e:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    7f72:	4a36      	ldr	r2, [pc, #216]	; (804c <Adc_Ip_DoCalibration+0x174>)
    7f74:	9b01      	ldr	r3, [sp, #4]
    7f76:	214c      	movs	r1, #76	; 0x4c
    7f78:	fb01 f303 	mul.w	r3, r1, r3
    7f7c:	4413      	add	r3, r2
    7f7e:	3304      	adds	r3, #4
    7f80:	681b      	ldr	r3, [r3, #0]
    7f82:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    7f84:	9b08      	ldr	r3, [sp, #32]
    7f86:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    7f88:	ab03      	add	r3, sp, #12
    7f8a:	2200      	movs	r2, #0
    7f8c:	4619      	mov	r1, r3
    7f8e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7f90:	f7ff fbfa 	bl	7788 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    7f94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f96:	2200      	movs	r2, #0
    7f98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    7f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f9e:	2200      	movs	r2, #0
    7fa0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    7fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fa6:	2200      	movs	r2, #0
    7fa8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    7fac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fae:	2200      	movs	r2, #0
    7fb0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    7fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fb6:	2200      	movs	r2, #0
    7fb8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    7fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fbe:	2200      	movs	r2, #0
    7fc0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    7fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fc6:	2200      	movs	r2, #0
    7fc8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    7fcc:	f009 f83e 	bl	1104c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    7fd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7fd6:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    7fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7fde:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    7fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7fe6:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    7fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7fec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    7ff0:	f009 f858 	bl	110a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    7ff4:	e008      	b.n	8008 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    7ff6:	ab0b      	add	r3, sp, #44	; 0x2c
    7ff8:	2100      	movs	r1, #0
    7ffa:	4618      	mov	r0, r3
    7ffc:	f7f9 ff27 	bl	1e4e <OsIf_GetElapsed>
    8000:	4602      	mov	r2, r0
    8002:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8004:	4413      	add	r3, r2
    8006:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    800a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    800e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8012:	2b00      	cmp	r3, #0
    8014:	d003      	beq.n	801e <Adc_Ip_DoCalibration+0x146>
    8016:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    801a:	429a      	cmp	r2, r3
    801c:	d3eb      	bcc.n	7ff6 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    801e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8022:	429a      	cmp	r2, r3
    8024:	d301      	bcc.n	802a <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8026:	2302      	movs	r3, #2
    8028:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    802a:	ab07      	add	r3, sp, #28
    802c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    802e:	4619      	mov	r1, r3
    8030:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8032:	f7ff fba9 	bl	7788 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    8036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8038:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    803a:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    803c:	4618      	mov	r0, r3
    803e:	b013      	add	sp, #76	; 0x4c
    8040:	f85d fb04 	ldr.w	pc, [sp], #4
    8044:	00018538 	.word	0x00018538
    8048:	000186a0 	.word	0x000186a0
    804c:	1fff8d00 	.word	0x1fff8d00

00008050 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    8050:	b500      	push	{lr}
    8052:	b089      	sub	sp, #36	; 0x24
    8054:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8056:	4a1e      	ldr	r2, [pc, #120]	; (80d0 <Adc_Ip_ClearLatchedTriggers+0x80>)
    8058:	9b01      	ldr	r3, [sp, #4]
    805a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    805e:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8060:	2300      	movs	r3, #0
    8062:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8064:	2100      	movs	r1, #0
    8066:	481b      	ldr	r0, [pc, #108]	; (80d4 <Adc_Ip_ClearLatchedTriggers+0x84>)
    8068:	f7f9 ff24 	bl	1eb4 <OsIf_MicrosToTicks>
    806c:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    806e:	2000      	movs	r0, #0
    8070:	f7f9 fed4 	bl	1e1c <OsIf_GetCounter>
    8074:	4603      	mov	r3, r0
    8076:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8078:	2300      	movs	r3, #0
    807a:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    807c:	f008 fa74 	bl	10568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    8080:	9b05      	ldr	r3, [sp, #20]
    8082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8084:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8088:	9b05      	ldr	r3, [sp, #20]
    808a:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    808c:	f008 fa98 	bl	105c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8090:	e008      	b.n	80a4 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8092:	ab03      	add	r3, sp, #12
    8094:	2100      	movs	r1, #0
    8096:	4618      	mov	r0, r3
    8098:	f7f9 fed9 	bl	1e4e <OsIf_GetElapsed>
    809c:	4602      	mov	r2, r0
    809e:	9b06      	ldr	r3, [sp, #24]
    80a0:	4413      	add	r3, r2
    80a2:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    80a4:	9b05      	ldr	r3, [sp, #20]
    80a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    80aa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    80ae:	2b00      	cmp	r3, #0
    80b0:	d003      	beq.n	80ba <Adc_Ip_ClearLatchedTriggers+0x6a>
    80b2:	9a06      	ldr	r2, [sp, #24]
    80b4:	9b04      	ldr	r3, [sp, #16]
    80b6:	429a      	cmp	r2, r3
    80b8:	d3eb      	bcc.n	8092 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    80ba:	9a06      	ldr	r2, [sp, #24]
    80bc:	9b04      	ldr	r3, [sp, #16]
    80be:	429a      	cmp	r2, r3
    80c0:	d301      	bcc.n	80c6 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    80c2:	2302      	movs	r3, #2
    80c4:	9307      	str	r3, [sp, #28]
    }

    return Status;
    80c6:	9b07      	ldr	r3, [sp, #28]
}
    80c8:	4618      	mov	r0, r3
    80ca:	b009      	add	sp, #36	; 0x24
    80cc:	f85d fb04 	ldr.w	pc, [sp], #4
    80d0:	00018538 	.word	0x00018538
    80d4:	000186a0 	.word	0x000186a0

000080d8 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    80d8:	b500      	push	{lr}
    80da:	b085      	sub	sp, #20
    80dc:	9001      	str	r0, [sp, #4]
    80de:	460b      	mov	r3, r1
    80e0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    80e4:	4a0c      	ldr	r2, [pc, #48]	; (8118 <Adc_Ip_EnableChannelNotification+0x40>)
    80e6:	9b01      	ldr	r3, [sp, #4]
    80e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80ec:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    80ee:	f008 fc79 	bl	109e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    80f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    80f6:	9b03      	ldr	r3, [sp, #12]
    80f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    80fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8100:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    8104:	9b03      	ldr	r3, [sp, #12]
    8106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    810a:	f008 fc97 	bl	10a3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    810e:	bf00      	nop
    8110:	b005      	add	sp, #20
    8112:	f85d fb04 	ldr.w	pc, [sp], #4
    8116:	bf00      	nop
    8118:	00018538 	.word	0x00018538

0000811c <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    811c:	b500      	push	{lr}
    811e:	b085      	sub	sp, #20
    8120:	9001      	str	r0, [sp, #4]
    8122:	460b      	mov	r3, r1
    8124:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8128:	4a0c      	ldr	r2, [pc, #48]	; (815c <Adc_Ip_DisableChannelNotification+0x40>)
    812a:	9b01      	ldr	r3, [sp, #4]
    812c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8130:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    8132:	f008 fca9 	bl	10a88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    8136:	f89d 2003 	ldrb.w	r2, [sp, #3]
    813a:	9b03      	ldr	r3, [sp, #12]
    813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8140:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8144:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    8148:	9b03      	ldr	r3, [sp, #12]
    814a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    814e:	f008 fcc7 	bl	10ae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    8152:	bf00      	nop
    8154:	b005      	add	sp, #20
    8156:	f85d fb04 	ldr.w	pc, [sp], #4
    815a:	bf00      	nop
    815c:	00018538 	.word	0x00018538

00008160 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    8160:	b500      	push	{lr}
    8162:	b085      	sub	sp, #20
    8164:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8166:	4a0a      	ldr	r2, [pc, #40]	; (8190 <Adc_Ip_ClearTrigErrReg+0x30>)
    8168:	9b01      	ldr	r3, [sp, #4]
    816a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    816e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    8170:	f008 fe24 	bl	10dbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    8174:	9b03      	ldr	r3, [sp, #12]
    8176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    817a:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    817e:	9b03      	ldr	r3, [sp, #12]
    8180:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    8184:	f008 fe46 	bl	10e14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    8188:	bf00      	nop
    818a:	b005      	add	sp, #20
    818c:	f85d fb04 	ldr.w	pc, [sp], #4
    8190:	00018538 	.word	0x00018538

00008194 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    8194:	b084      	sub	sp, #16
    8196:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8198:	4a06      	ldr	r2, [pc, #24]	; (81b4 <Adc_Ip_GetTrigErrReg+0x20>)
    819a:	9b01      	ldr	r3, [sp, #4]
    819c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81a0:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    81a2:	9b03      	ldr	r3, [sp, #12]
    81a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    81a8:	0e1b      	lsrs	r3, r3, #24
    81aa:	f003 030f 	and.w	r3, r3, #15
}
    81ae:	4618      	mov	r0, r3
    81b0:	b004      	add	sp, #16
    81b2:	4770      	bx	lr
    81b4:	00018538 	.word	0x00018538

000081b8 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    81b8:	b082      	sub	sp, #8
    81ba:	9001      	str	r0, [sp, #4]
    81bc:	460b      	mov	r3, r1
    81be:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    81c2:	4a06      	ldr	r2, [pc, #24]	; (81dc <Adc_Ip_GetDataAddress+0x24>)
    81c4:	9b01      	ldr	r3, [sp, #4]
    81c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    81ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
    81ce:	3312      	adds	r3, #18
    81d0:	009b      	lsls	r3, r3, #2
    81d2:	4413      	add	r3, r2
}
    81d4:	4618      	mov	r0, r3
    81d6:	b002      	add	sp, #8
    81d8:	4770      	bx	lr
    81da:	bf00      	nop
    81dc:	00018538 	.word	0x00018538

000081e0 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    81e0:	b088      	sub	sp, #32
    81e2:	9003      	str	r0, [sp, #12]
    81e4:	9102      	str	r1, [sp, #8]
    81e6:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    81e8:	4a25      	ldr	r2, [pc, #148]	; (8280 <Adc_Ip_GetChanData+0xa0>)
    81ea:	9b03      	ldr	r3, [sp, #12]
    81ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81f0:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    81f2:	2300      	movs	r3, #0
    81f4:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    81f6:	2300      	movs	r3, #0
    81f8:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    81fc:	2300      	movs	r3, #0
    81fe:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8202:	2300      	movs	r3, #0
    8204:	f88d 3019 	strb.w	r3, [sp, #25]
    8208:	e019      	b.n	823e <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    820a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    820e:	481d      	ldr	r0, [pc, #116]	; (8284 <Adc_Ip_GetChanData+0xa4>)
    8210:	9a03      	ldr	r2, [sp, #12]
    8212:	4613      	mov	r3, r2
    8214:	00db      	lsls	r3, r3, #3
    8216:	4413      	add	r3, r2
    8218:	005b      	lsls	r3, r3, #1
    821a:	4413      	add	r3, r2
    821c:	440b      	add	r3, r1
    821e:	3302      	adds	r3, #2
    8220:	009b      	lsls	r3, r3, #2
    8222:	4403      	add	r3, r0
    8224:	685b      	ldr	r3, [r3, #4]
    8226:	9a02      	ldr	r2, [sp, #8]
    8228:	429a      	cmp	r2, r3
    822a:	d103      	bne.n	8234 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    822c:	2301      	movs	r3, #1
    822e:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    8232:	e008      	b.n	8246 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8234:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8238:	3301      	adds	r3, #1
    823a:	f88d 3019 	strb.w	r3, [sp, #25]
    823e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8242:	2b0f      	cmp	r3, #15
    8244:	d9e1      	bls.n	820a <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8246:	f89d 3018 	ldrb.w	r3, [sp, #24]
    824a:	2b00      	cmp	r3, #0
    824c:	d00e      	beq.n	826c <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    824e:	f89d 2019 	ldrb.w	r2, [sp, #25]
    8252:	9b05      	ldr	r3, [sp, #20]
    8254:	3212      	adds	r2, #18
    8256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    825a:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    825e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8262:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8266:	f8ad 301a 	strh.w	r3, [sp, #26]
    826a:	e001      	b.n	8270 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    826c:	2301      	movs	r3, #1
    826e:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8270:	9b01      	ldr	r3, [sp, #4]
    8272:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8276:	801a      	strh	r2, [r3, #0]

    return Status;
    8278:	9b07      	ldr	r3, [sp, #28]
}
    827a:	4618      	mov	r0, r3
    827c:	b008      	add	sp, #32
    827e:	4770      	bx	lr
    8280:	00018538 	.word	0x00018538
    8284:	1fff8d00 	.word	0x1fff8d00

00008288 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8288:	b500      	push	{lr}
    828a:	b085      	sub	sp, #20
    828c:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    828e:	2300      	movs	r3, #0
    8290:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8294:	2300      	movs	r3, #0
    8296:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    829a:	4a32      	ldr	r2, [pc, #200]	; (8364 <Adc_Ip_IRQHandler+0xdc>)
    829c:	9b01      	ldr	r3, [sp, #4]
    829e:	214c      	movs	r1, #76	; 0x4c
    82a0:	fb01 f303 	mul.w	r3, r1, r3
    82a4:	4413      	add	r3, r2
    82a6:	781b      	ldrb	r3, [r3, #0]
    82a8:	2b00      	cmp	r3, #0
    82aa:	d040      	beq.n	832e <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    82ac:	4a2d      	ldr	r2, [pc, #180]	; (8364 <Adc_Ip_IRQHandler+0xdc>)
    82ae:	9b01      	ldr	r3, [sp, #4]
    82b0:	214c      	movs	r1, #76	; 0x4c
    82b2:	fb01 f303 	mul.w	r3, r1, r3
    82b6:	4413      	add	r3, r2
    82b8:	3308      	adds	r3, #8
    82ba:	681b      	ldr	r3, [r3, #0]
    82bc:	2b00      	cmp	r3, #0
    82be:	d04d      	beq.n	835c <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    82c0:	2300      	movs	r3, #0
    82c2:	f88d 300f 	strb.w	r3, [sp, #15]
    82c6:	e02d      	b.n	8324 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    82c8:	4a27      	ldr	r2, [pc, #156]	; (8368 <Adc_Ip_IRQHandler+0xe0>)
    82ca:	9b01      	ldr	r3, [sp, #4]
    82cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82d0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    82d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    82d8:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    82da:	9802      	ldr	r0, [sp, #8]
    82dc:	f7ff fa20 	bl	7720 <Adc_HwAcc_GetAIEN>
    82e0:	4603      	mov	r3, r0
    82e2:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    82e6:	9802      	ldr	r0, [sp, #8]
    82e8:	f7ff fa28 	bl	773c <Adc_HwAcc_GetCOCO>
    82ec:	4603      	mov	r3, r0
    82ee:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    82f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    82f6:	2b00      	cmp	r3, #0
    82f8:	d00f      	beq.n	831a <Adc_Ip_IRQHandler+0x92>
    82fa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    82fe:	2b00      	cmp	r3, #0
    8300:	d00b      	beq.n	831a <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    8302:	4a18      	ldr	r2, [pc, #96]	; (8364 <Adc_Ip_IRQHandler+0xdc>)
    8304:	9b01      	ldr	r3, [sp, #4]
    8306:	214c      	movs	r1, #76	; 0x4c
    8308:	fb01 f303 	mul.w	r3, r1, r3
    830c:	4413      	add	r3, r2
    830e:	3308      	adds	r3, #8
    8310:	681b      	ldr	r3, [r3, #0]
    8312:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8316:	4610      	mov	r0, r2
    8318:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    831a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    831e:	3301      	adds	r3, #1
    8320:	f88d 300f 	strb.w	r3, [sp, #15]
    8324:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8328:	2b0f      	cmp	r3, #15
    832a:	d9cd      	bls.n	82c8 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    832c:	e016      	b.n	835c <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    832e:	2300      	movs	r3, #0
    8330:	f88d 300f 	strb.w	r3, [sp, #15]
    8334:	e00e      	b.n	8354 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8336:	4a0c      	ldr	r2, [pc, #48]	; (8368 <Adc_Ip_IRQHandler+0xe0>)
    8338:	9b01      	ldr	r3, [sp, #4]
    833a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    833e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8342:	4611      	mov	r1, r2
    8344:	4618      	mov	r0, r3
    8346:	f7ff fa07 	bl	7758 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    834a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    834e:	3301      	adds	r3, #1
    8350:	f88d 300f 	strb.w	r3, [sp, #15]
    8354:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8358:	2b0f      	cmp	r3, #15
    835a:	d9ec      	bls.n	8336 <Adc_Ip_IRQHandler+0xae>
}
    835c:	bf00      	nop
    835e:	b005      	add	sp, #20
    8360:	f85d fb04 	ldr.w	pc, [sp], #4
    8364:	1fff8d00 	.word	0x1fff8d00
    8368:	00018538 	.word	0x00018538

0000836c <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    836c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    836e:	2000      	movs	r0, #0
    8370:	f7ff ff8a 	bl	8288 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8374:	f3bf 8f4f 	dsb	sy
}
    8378:	bf00      	nop
    837a:	bd08      	pop	{r3, pc}

0000837c <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    837c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    837e:	2001      	movs	r0, #1
    8380:	f7ff ff82 	bl	8288 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8384:	f3bf 8f4f 	dsb	sy
}
    8388:	bf00      	nop
    838a:	bd08      	pop	{r3, pc}

0000838c <Lpspi_Ip_ChannelFinished>:
* @param[in]     Instance            Index of the hardware instance.
* @param[in]     ErrorFlag           Save the status of transfer error flags
* @return void
*/
static void Lpspi_Ip_ChannelFinished(uint8 Instance, boolean ErrorFlag)
{
    838c:	b500      	push	{lr}
    838e:	b085      	sub	sp, #20
    8390:	4603      	mov	r3, r0
    8392:	460a      	mov	r2, r1
    8394:	f88d 3007 	strb.w	r3, [sp, #7]
    8398:	4613      	mov	r3, r2
    839a:	f88d 3006 	strb.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    839e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    83a2:	4a12      	ldr	r2, [pc, #72]	; (83ec <Lpspi_Ip_ChannelFinished+0x60>)
    83a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83a8:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_EventType EventState = LPSPI_IP_EVENT_FAULT;
    83aa:	2301      	movs	r3, #1
    83ac:	9303      	str	r3, [sp, #12]
    
    if(TRUE == ErrorFlag)
    83ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    83b2:	2b00      	cmp	r3, #0
    83b4:	d005      	beq.n	83c2 <Lpspi_Ip_ChannelFinished+0x36>
    {
        State->Status = LPSPI_IP_FAULT;
    83b6:	9b02      	ldr	r3, [sp, #8]
    83b8:	2203      	movs	r2, #3
    83ba:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_FAULT;
    83bc:	2301      	movs	r3, #1
    83be:	9303      	str	r3, [sp, #12]
    83c0:	e004      	b.n	83cc <Lpspi_Ip_ChannelFinished+0x40>
    }
    else
    {
        State->Status = LPSPI_IP_IDLE;
    83c2:	9b02      	ldr	r3, [sp, #8]
    83c4:	2201      	movs	r2, #1
    83c6:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_END_TRANSFER;
    83c8:	2300      	movs	r3, #0
    83ca:	9303      	str	r3, [sp, #12]
    }

    if (NULL_PTR != State->Callback)
    83cc:	9b02      	ldr	r3, [sp, #8]
    83ce:	691b      	ldr	r3, [r3, #16]
    83d0:	2b00      	cmp	r3, #0
    83d2:	d006      	beq.n	83e2 <Lpspi_Ip_ChannelFinished+0x56>
    {
        State->Callback(Instance, EventState);
    83d4:	9b02      	ldr	r3, [sp, #8]
    83d6:	691b      	ldr	r3, [r3, #16]
    83d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    83dc:	9903      	ldr	r1, [sp, #12]
    83de:	4610      	mov	r0, r2
    83e0:	4798      	blx	r3
    }
}
    83e2:	bf00      	nop
    83e4:	b005      	add	sp, #20
    83e6:	f85d fb04 	ldr.w	pc, [sp], #4
    83ea:	bf00      	nop
    83ec:	1fff8dd8 	.word	0x1fff8dd8

000083f0 <Lpspi_Ip_TransferProcess>:
*
* @param[in]     Instance      Index of the hardware instance.
* @return void
*/
static void Lpspi_Ip_TransferProcess(uint8 Instance)
{
    83f0:	b510      	push	{r4, lr}
    83f2:	b092      	sub	sp, #72	; 0x48
    83f4:	4603      	mov	r3, r0
    83f6:	f88d 300f 	strb.w	r3, [sp, #15]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    83fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83fe:	4aad      	ldr	r2, [pc, #692]	; (86b4 <Lpspi_Ip_TransferProcess+0x2c4>)
    8400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8404:	9310      	str	r3, [sp, #64]	; 0x40
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8406:	f89d 300f 	ldrb.w	r3, [sp, #15]
    840a:	4aab      	ldr	r2, [pc, #684]	; (86b8 <Lpspi_Ip_TransferProcess+0x2c8>)
    840c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8410:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32 SrStatusRegister;
    uint8 NumberOfWrites = 0u;
    8412:	2300      	movs	r3, #0
    8414:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    uint8 NumberOfReads = 0u;
    8418:	2300      	movs	r3, #0
    841a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    boolean ErrorFlag = FALSE;
    841e:	2300      	movs	r3, #0
    8420:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45

    if (LPSPI_IP_BUSY == State->Status)
    8424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8426:	685b      	ldr	r3, [r3, #4]
    8428:	2b02      	cmp	r3, #2
    842a:	f040 821e 	bne.w	886a <Lpspi_Ip_TransferProcess+0x47a>
    {
        /* Read Status and clear all flags. */
        SrStatusRegister = Base->SR;
    842e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8430:	695b      	ldr	r3, [r3, #20]
    8432:	930e      	str	r3, [sp, #56]	; 0x38
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    8434:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8436:	695b      	ldr	r3, [r3, #20]
    8438:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    843c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    843e:	615a      	str	r2, [r3, #20]
        
        if ((SrStatusRegister & (LPSPI_SR_REF_MASK | LPSPI_SR_TEF_MASK)) != 0u)
    8440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8442:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    8446:	2b00      	cmp	r3, #0
    8448:	d003      	beq.n	8452 <Lpspi_Ip_TransferProcess+0x62>
        {
            /* mark error flag */
            ErrorFlag = TRUE;
    844a:	2301      	movs	r3, #1
    844c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    8450:	e1f6      	b.n	8840 <Lpspi_Ip_TransferProcess+0x450>
        }
        else
        {
            /* RECEIVE */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    8452:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8456:	0c1b      	lsrs	r3, r3, #16
    8458:	b2db      	uxtb	r3, r3
    845a:	f003 0307 	and.w	r3, r3, #7
    845e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if (NumberOfReads != 0u)
    8462:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    8466:	2b00      	cmp	r3, #0
    8468:	f000 80cb 	beq.w	8602 <Lpspi_Ip_TransferProcess+0x212>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    846c:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    8470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8472:	8b1b      	ldrh	r3, [r3, #24]
    8474:	4619      	mov	r1, r3
    8476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8478:	8a9b      	ldrh	r3, [r3, #20]
    847a:	1acb      	subs	r3, r1, r3
    847c:	429a      	cmp	r2, r3
    847e:	dd08      	ble.n	8492 <Lpspi_Ip_TransferProcess+0xa2>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    8480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8482:	8b1b      	ldrh	r3, [r3, #24]
    8484:	b2da      	uxtb	r2, r3
    8486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8488:	8a9b      	ldrh	r3, [r3, #20]
    848a:	b2db      	uxtb	r3, r3
    848c:	1ad3      	subs	r3, r2, r3
    848e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out and
                  CurrentTxFifoSlot was minus 1 when prepare TX channel */
                if (0u == State->RxIndex)
    8492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8494:	8a9b      	ldrh	r3, [r3, #20]
    8496:	2b00      	cmp	r3, #0
    8498:	d107      	bne.n	84aa <Lpspi_Ip_TransferProcess+0xba>
                {
                    State->CurrentTxFifoSlot += 1u;
    849a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    849c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    84a0:	3301      	adds	r3, #1
    84a2:	b2da      	uxtb	r2, r3
    84a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    84aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84ae:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    84b2:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    84b6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    84ba:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    84be:	4a7d      	ldr	r2, [pc, #500]	; (86b4 <Lpspi_Ip_TransferProcess+0x2c4>)
    84c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84c4:	930c      	str	r3, [sp, #48]	; 0x30
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    84c6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    84ca:	4a7b      	ldr	r2, [pc, #492]	; (86b8 <Lpspi_Ip_TransferProcess+0x2c8>)
    84cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84d0:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 Data = 0u;
    84d2:	2300      	movs	r3, #0
    84d4:	930a      	str	r3, [sp, #40]	; 0x28
    uint8 Index = 0u;
    84d6:	2300      	movs	r3, #0
    84d8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    if (NULL_PTR != State->RxBuffer)
    84dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84de:	689b      	ldr	r3, [r3, #8]
    84e0:	2b00      	cmp	r3, #0
    84e2:	d069      	beq.n	85b8 <Lpspi_Ip_TransferProcess+0x1c8>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    84e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    84e8:	68db      	ldr	r3, [r3, #12]
    84ea:	881b      	ldrh	r3, [r3, #0]
    84ec:	2b08      	cmp	r3, #8
    84ee:	d81e      	bhi.n	852e <Lpspi_Ip_TransferProcess+0x13e>
            for (Index = 0; Index < NumberOfReads; Index++)
    84f0:	2300      	movs	r3, #0
    84f2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    84f6:	e013      	b.n	8520 <Lpspi_Ip_TransferProcess+0x130>
                Data = Base->RDR;
    84f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    84fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    84fc:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    84fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8500:	689b      	ldr	r3, [r3, #8]
    8502:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8504:	8a92      	ldrh	r2, [r2, #20]
    8506:	4611      	mov	r1, r2
    8508:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    850c:	440a      	add	r2, r1
    850e:	4413      	add	r3, r2
    8510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8512:	b2d2      	uxtb	r2, r2
    8514:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8516:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    851a:	3301      	adds	r3, #1
    851c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8520:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    8524:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8528:	429a      	cmp	r2, r3
    852a:	d8e5      	bhi.n	84f8 <Lpspi_Ip_TransferProcess+0x108>
    852c:	e055      	b.n	85da <Lpspi_Ip_TransferProcess+0x1ea>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    852e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8532:	68db      	ldr	r3, [r3, #12]
    8534:	881b      	ldrh	r3, [r3, #0]
    8536:	2b10      	cmp	r3, #16
    8538:	d81f      	bhi.n	857a <Lpspi_Ip_TransferProcess+0x18a>
            for (Index = 0; Index < NumberOfReads; Index++)
    853a:	2300      	movs	r3, #0
    853c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8540:	e014      	b.n	856c <Lpspi_Ip_TransferProcess+0x17c>
                Data = Base->RDR;
    8542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8546:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    8548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    854a:	689a      	ldr	r2, [r3, #8]
    854c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    854e:	8a9b      	ldrh	r3, [r3, #20]
    8550:	4619      	mov	r1, r3
    8552:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8556:	440b      	add	r3, r1
    8558:	005b      	lsls	r3, r3, #1
    855a:	4413      	add	r3, r2
    855c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    855e:	b292      	uxth	r2, r2
    8560:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8562:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8566:	3301      	adds	r3, #1
    8568:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    856c:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    8570:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8574:	429a      	cmp	r2, r3
    8576:	d8e4      	bhi.n	8542 <Lpspi_Ip_TransferProcess+0x152>
    8578:	e02f      	b.n	85da <Lpspi_Ip_TransferProcess+0x1ea>
            for (Index = 0; Index < NumberOfReads; Index++)
    857a:	2300      	movs	r3, #0
    857c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8580:	e013      	b.n	85aa <Lpspi_Ip_TransferProcess+0x1ba>
                Data = Base->RDR;
    8582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8586:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    8588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    858a:	689a      	ldr	r2, [r3, #8]
    858c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    858e:	8a9b      	ldrh	r3, [r3, #20]
    8590:	4619      	mov	r1, r3
    8592:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8596:	440b      	add	r3, r1
    8598:	009b      	lsls	r3, r3, #2
    859a:	4413      	add	r3, r2
    859c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    859e:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    85a0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85a4:	3301      	adds	r3, #1
    85a6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    85aa:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    85ae:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85b2:	429a      	cmp	r2, r3
    85b4:	d8e5      	bhi.n	8582 <Lpspi_Ip_TransferProcess+0x192>
    85b6:	e010      	b.n	85da <Lpspi_Ip_TransferProcess+0x1ea>
        for (Index = 0; Index < NumberOfReads; Index++)
    85b8:	2300      	movs	r3, #0
    85ba:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    85be:	e006      	b.n	85ce <Lpspi_Ip_TransferProcess+0x1de>
            (void)Base->RDR;
    85c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    85c4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85c8:	3301      	adds	r3, #1
    85ca:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    85ce:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    85d2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85d6:	429a      	cmp	r2, r3
    85d8:	d8f2      	bhi.n	85c0 <Lpspi_Ip_TransferProcess+0x1d0>
    State->RxIndex += NumberOfReads;
    85da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85dc:	8a9a      	ldrh	r2, [r3, #20]
    85de:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    85e2:	b29b      	uxth	r3, r3
    85e4:	4413      	add	r3, r2
    85e6:	b29a      	uxth	r2, r3
    85e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85ea:	829a      	strh	r2, [r3, #20]
}
    85ec:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    85ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85f0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    85f4:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    85f8:	4413      	add	r3, r2
    85fa:	b2da      	uxtb	r2, r3
    85fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            to fill TX FIFO. At that time, another interrupt occurred and preemptive current interrupt, and the time to process that interrupt is longer than the time to transfer all frames 
            in TX FIFO. So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from that interrupt and fill TX FIFO until full and exist SPI interrupt function. 
            And if there is a interrupt occurred with higher priority of SPI interrupt and the time to process that interrupt is longer than the time to transfer all frames in TX FIFO. 
            So, RX FIFO can be overflow due to SPI interrupt function is not serviced to read RX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (State->TxDoneFlag != TRUE))
    8602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8608:	2b00      	cmp	r3, #0
    860a:	f000 8119 	beq.w	8840 <Lpspi_Ip_TransferProcess+0x450>
    860e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    8614:	f083 0301 	eor.w	r3, r3, #1
    8618:	b2db      	uxtb	r3, r3
    861a:	2b00      	cmp	r3, #0
    861c:	f000 8110 	beq.w	8840 <Lpspi_Ip_TransferProcess+0x450>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    8620:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8622:	8b5a      	ldrh	r2, [r3, #26]
    8624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8626:	8adb      	ldrh	r3, [r3, #22]
    8628:	429a      	cmp	r2, r3
    862a:	f000 80ca 	beq.w	87c2 <Lpspi_Ip_TransferProcess+0x3d2>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    862e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8634:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    8638:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
    863c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    863e:	8b5b      	ldrh	r3, [r3, #26]
    8640:	4619      	mov	r1, r3
    8642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8644:	8adb      	ldrh	r3, [r3, #22]
    8646:	1acb      	subs	r3, r1, r3
    8648:	429a      	cmp	r2, r3
    864a:	dd08      	ble.n	865e <Lpspi_Ip_TransferProcess+0x26e>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    864c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    864e:	8b5b      	ldrh	r3, [r3, #26]
    8650:	b2da      	uxtb	r2, r3
    8652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8654:	8adb      	ldrh	r3, [r3, #22]
    8656:	b2db      	uxtb	r3, r3
    8658:	1ad3      	subs	r3, r2, r3
    865a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    865e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8662:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    8666:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    866a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    866e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8672:	4a10      	ldr	r2, [pc, #64]	; (86b4 <Lpspi_Ip_TransferProcess+0x2c4>)
    8674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8678:	9308      	str	r3, [sp, #32]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    867a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    867e:	4a0e      	ldr	r2, [pc, #56]	; (86b8 <Lpspi_Ip_TransferProcess+0x2c8>)
    8680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8684:	9307      	str	r3, [sp, #28]
    uint32 Data = 0u;
    8686:	2300      	movs	r3, #0
    8688:	9306      	str	r3, [sp, #24]
    uint8 Index = 0u;
    868a:	2300      	movs	r3, #0
    868c:	f88d 3017 	strb.w	r3, [sp, #23]
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    8690:	9b07      	ldr	r3, [sp, #28]
    8692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8694:	68db      	ldr	r3, [r3, #12]
    8696:	685b      	ldr	r3, [r3, #4]
    8698:	9306      	str	r3, [sp, #24]
    if (NULL_PTR != State->TxBuffer)
    869a:	9b07      	ldr	r3, [sp, #28]
    869c:	68db      	ldr	r3, [r3, #12]
    869e:	2b00      	cmp	r3, #0
    86a0:	d068      	beq.n	8774 <Lpspi_Ip_TransferProcess+0x384>
        if (State->TxFrameSize < 9u)
    86a2:	9b07      	ldr	r3, [sp, #28]
    86a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    86a6:	2b08      	cmp	r3, #8
    86a8:	d822      	bhi.n	86f0 <Lpspi_Ip_TransferProcess+0x300>
            for (Index = 0; Index < NumberOfWrites; Index++)
    86aa:	2300      	movs	r3, #0
    86ac:	f88d 3017 	strb.w	r3, [sp, #23]
    86b0:	e017      	b.n	86e2 <Lpspi_Ip_TransferProcess+0x2f2>
    86b2:	bf00      	nop
    86b4:	00018540 	.word	0x00018540
    86b8:	1fff8dd8 	.word	0x1fff8dd8
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    86bc:	9b07      	ldr	r3, [sp, #28]
    86be:	68db      	ldr	r3, [r3, #12]
    86c0:	9a07      	ldr	r2, [sp, #28]
    86c2:	8ad2      	ldrh	r2, [r2, #22]
    86c4:	4611      	mov	r1, r2
    86c6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    86ca:	440a      	add	r2, r1
    86cc:	4413      	add	r3, r2
    86ce:	781b      	ldrb	r3, [r3, #0]
    86d0:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    86d2:	9b08      	ldr	r3, [sp, #32]
    86d4:	9a06      	ldr	r2, [sp, #24]
    86d6:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    86d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    86dc:	3301      	adds	r3, #1
    86de:	f88d 3017 	strb.w	r3, [sp, #23]
    86e2:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    86e6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    86ea:	429a      	cmp	r2, r3
    86ec:	d8e6      	bhi.n	86bc <Lpspi_Ip_TransferProcess+0x2cc>
    86ee:	e053      	b.n	8798 <Lpspi_Ip_TransferProcess+0x3a8>
        else if (State->TxFrameSize < 17u)
    86f0:	9b07      	ldr	r3, [sp, #28]
    86f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    86f4:	2b10      	cmp	r3, #16
    86f6:	d81e      	bhi.n	8736 <Lpspi_Ip_TransferProcess+0x346>
            for (Index = 0; Index < NumberOfWrites; Index++)
    86f8:	2300      	movs	r3, #0
    86fa:	f88d 3017 	strb.w	r3, [sp, #23]
    86fe:	e013      	b.n	8728 <Lpspi_Ip_TransferProcess+0x338>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    8700:	9b07      	ldr	r3, [sp, #28]
    8702:	68da      	ldr	r2, [r3, #12]
    8704:	9b07      	ldr	r3, [sp, #28]
    8706:	8adb      	ldrh	r3, [r3, #22]
    8708:	4619      	mov	r1, r3
    870a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    870e:	440b      	add	r3, r1
    8710:	005b      	lsls	r3, r3, #1
    8712:	4413      	add	r3, r2
    8714:	881b      	ldrh	r3, [r3, #0]
    8716:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    8718:	9b08      	ldr	r3, [sp, #32]
    871a:	9a06      	ldr	r2, [sp, #24]
    871c:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    871e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8722:	3301      	adds	r3, #1
    8724:	f88d 3017 	strb.w	r3, [sp, #23]
    8728:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    872c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8730:	429a      	cmp	r2, r3
    8732:	d8e5      	bhi.n	8700 <Lpspi_Ip_TransferProcess+0x310>
    8734:	e030      	b.n	8798 <Lpspi_Ip_TransferProcess+0x3a8>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8736:	2300      	movs	r3, #0
    8738:	f88d 3017 	strb.w	r3, [sp, #23]
    873c:	e013      	b.n	8766 <Lpspi_Ip_TransferProcess+0x376>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    873e:	9b07      	ldr	r3, [sp, #28]
    8740:	68da      	ldr	r2, [r3, #12]
    8742:	9b07      	ldr	r3, [sp, #28]
    8744:	8adb      	ldrh	r3, [r3, #22]
    8746:	4619      	mov	r1, r3
    8748:	f89d 3017 	ldrb.w	r3, [sp, #23]
    874c:	440b      	add	r3, r1
    874e:	009b      	lsls	r3, r3, #2
    8750:	4413      	add	r3, r2
    8752:	681b      	ldr	r3, [r3, #0]
    8754:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    8756:	9b08      	ldr	r3, [sp, #32]
    8758:	9a06      	ldr	r2, [sp, #24]
    875a:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    875c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8760:	3301      	adds	r3, #1
    8762:	f88d 3017 	strb.w	r3, [sp, #23]
    8766:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    876a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    876e:	429a      	cmp	r2, r3
    8770:	d8e5      	bhi.n	873e <Lpspi_Ip_TransferProcess+0x34e>
    8772:	e011      	b.n	8798 <Lpspi_Ip_TransferProcess+0x3a8>
        for (Index = 0; Index < NumberOfWrites; Index++)
    8774:	2300      	movs	r3, #0
    8776:	f88d 3017 	strb.w	r3, [sp, #23]
    877a:	e007      	b.n	878c <Lpspi_Ip_TransferProcess+0x39c>
            Base->TDR = Data;
    877c:	9b08      	ldr	r3, [sp, #32]
    877e:	9a06      	ldr	r2, [sp, #24]
    8780:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    8782:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8786:	3301      	adds	r3, #1
    8788:	f88d 3017 	strb.w	r3, [sp, #23]
    878c:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    8790:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8794:	429a      	cmp	r2, r3
    8796:	d8f1      	bhi.n	877c <Lpspi_Ip_TransferProcess+0x38c>
    State->TxIndex += NumberOfWrites;
    8798:	9b07      	ldr	r3, [sp, #28]
    879a:	8ada      	ldrh	r2, [r3, #22]
    879c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    87a0:	b29b      	uxth	r3, r3
    87a2:	4413      	add	r3, r2
    87a4:	b29a      	uxth	r2, r3
    87a6:	9b07      	ldr	r3, [sp, #28]
    87a8:	82da      	strh	r2, [r3, #22]
}
    87aa:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    87ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87ae:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    87b2:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    87b6:	1ad3      	subs	r3, r2, r3
    87b8:	b2da      	uxtb	r2, r3
    87ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    87c0:	e03e      	b.n	8840 <Lpspi_Ip_TransferProcess+0x450>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    87c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    87c8:	2b00      	cmp	r3, #0
    87ca:	d01c      	beq.n	8806 <Lpspi_Ip_TransferProcess+0x416>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    87cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    87d0:	68db      	ldr	r3, [r3, #12]
    87d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    87d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
    87d6:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    87d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87da:	2200      	movs	r2, #0
    87dc:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    87de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    87e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87e4:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    87e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87e8:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    87ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    87f0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    87f4:	9300      	str	r3, [sp, #0]
    87f6:	4623      	mov	r3, r4
    87f8:	f000 fb7a 	bl	8ef0 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    87fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87fe:	2200      	movs	r2, #0
    8800:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    8804:	e01c      	b.n	8840 <Lpspi_Ip_TransferProcess+0x450>
                    }
                    else
                    {
                        State->TxDoneFlag = TRUE;
    8806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8808:	2201      	movs	r2, #1
    880a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        /* Disable TX interrupt */
                        Base->IER &= ~LPSPI_IER_TDIE_MASK;
    880e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8810:	699b      	ldr	r3, [r3, #24]
    8812:	f023 0201 	bic.w	r2, r3, #1
    8816:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8818:	619a      	str	r2, [r3, #24]
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    881a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    881c:	7f1b      	ldrb	r3, [r3, #28]
    881e:	f083 0301 	eor.w	r3, r3, #1
    8822:	b2db      	uxtb	r3, r3
    8824:	2b00      	cmp	r3, #0
    8826:	d00b      	beq.n	8840 <Lpspi_Ip_TransferProcess+0x450>
    8828:	9b10      	ldr	r3, [sp, #64]	; 0x40
    882a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    882c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8830:	2b00      	cmp	r3, #0
    8832:	d005      	beq.n	8840 <Lpspi_Ip_TransferProcess+0x450>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    8834:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    883c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    883e:	661a      	str	r2, [r3, #96]	; 0x60
                }
            }
        }
        
        /* End of transfer */
        if((State->RxIndex == State->ExpectedFifoReads) || (TRUE == ErrorFlag))
    8840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8842:	8a9a      	ldrh	r2, [r3, #20]
    8844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8846:	8b1b      	ldrh	r3, [r3, #24]
    8848:	429a      	cmp	r2, r3
    884a:	d003      	beq.n	8854 <Lpspi_Ip_TransferProcess+0x464>
    884c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    8850:	2b00      	cmp	r3, #0
    8852:	d00a      	beq.n	886a <Lpspi_Ip_TransferProcess+0x47a>
                Base->TCR |= LPSPI_TCR_RXMSK(1);
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12();
            }
            #endif
            /* Disable interrupts */
            Base->IER = 0u;
    8854:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8856:	2200      	movs	r2, #0
    8858:	619a      	str	r2, [r3, #24]
            Lpspi_Ip_ChannelFinished(Instance, ErrorFlag);
    885a:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    885e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8862:	4611      	mov	r1, r2
    8864:	4618      	mov	r0, r3
    8866:	f7ff fd91 	bl	838c <Lpspi_Ip_ChannelFinished>
        }
    }
}
    886a:	bf00      	nop
    886c:	b012      	add	sp, #72	; 0x48
    886e:	bd10      	pop	{r4, pc}

00008870 <Lpspi_Ip_Init>:
    OsIf_Trusted_Call1param(Lpspi_Ip_SetUserAccess, Instance);
}
#endif /* LPSPI_IP_ENABLE_USER_MODE_SUPPORT */
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_Init(const Lpspi_Ip_ConfigType *PhyUnitConfigPtr)
{
    8870:	b500      	push	{lr}
    8872:	b087      	sub	sp, #28
    8874:	9001      	str	r0, [sp, #4]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    8876:	2300      	movs	r3, #0
    8878:	9305      	str	r3, [sp, #20]
    uint8 Instance = 0u;
    887a:	2300      	movs	r3, #0
    887c:	f88d 3013 	strb.w	r3, [sp, #19]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(PhyUnitConfigPtr != NULL_PTR);
    #endif
    Instance = PhyUnitConfigPtr->Instance;
    8880:	9b01      	ldr	r3, [sp, #4]
    8882:	781b      	ldrb	r3, [r3, #0]
    8884:	f88d 3013 	strb.w	r3, [sp, #19]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8888:	f89d 3013 	ldrb.w	r3, [sp, #19]
    888c:	4a23      	ldr	r2, [pc, #140]	; (891c <Lpspi_Ip_Init+0xac>)
    888e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8892:	9303      	str	r3, [sp, #12]
    Base = Lpspi_Ip_apxBases[Instance];
    8894:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8898:	4a21      	ldr	r2, [pc, #132]	; (8920 <Lpspi_Ip_Init+0xb0>)
    889a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    889e:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State == NULL_PTR);
    #endif
    Lpspi_Ip_apxStateStructureArray[Instance] = &Lpspi_Ip_axStateStructure[PhyUnitConfigPtr->StateIndex];
    88a0:	9b01      	ldr	r3, [sp, #4]
    88a2:	7c1b      	ldrb	r3, [r3, #16]
    88a4:	461a      	mov	r2, r3
    88a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    88aa:	0192      	lsls	r2, r2, #6
    88ac:	491d      	ldr	r1, [pc, #116]	; (8924 <Lpspi_Ip_Init+0xb4>)
    88ae:	440a      	add	r2, r1
    88b0:	491a      	ldr	r1, [pc, #104]	; (891c <Lpspi_Ip_Init+0xac>)
    88b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    88b6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    88ba:	4a18      	ldr	r2, [pc, #96]	; (891c <Lpspi_Ip_Init+0xac>)
    88bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88c0:	9303      	str	r3, [sp, #12]
    State->PhyUnitConfig = PhyUnitConfigPtr;
    88c2:	9b03      	ldr	r3, [sp, #12]
    88c4:	9a01      	ldr	r2, [sp, #4]
    88c6:	621a      	str	r2, [r3, #32]
    /* enable in debug mode to ensure CS will be kept when CPU halts at breakpoint */
    Base->CR = PhyUnitConfigPtr->Cr | LPSPI_CR_DBGEN_MASK;
    88c8:	9b01      	ldr	r3, [sp, #4]
    88ca:	685b      	ldr	r3, [r3, #4]
    88cc:	f043 0208 	orr.w	r2, r3, #8
    88d0:	9b02      	ldr	r3, [sp, #8]
    88d2:	611a      	str	r2, [r3, #16]
    Base->CFGR1 = PhyUnitConfigPtr->Cfgr1;
    88d4:	9b01      	ldr	r3, [sp, #4]
    88d6:	689a      	ldr	r2, [r3, #8]
    88d8:	9b02      	ldr	r3, [sp, #8]
    88da:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set TX WATER. it will be set again in DMA mode */
    Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    88dc:	9b02      	ldr	r3, [sp, #8]
    88de:	2203      	movs	r2, #3
    88e0:	659a      	str	r2, [r3, #88]	; 0x58
    #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    State->ClockMode = LPSPI_IP_NORMAL_CLOCK;
    #endif
    State->KeepCs = FALSE;
    88e2:	9b03      	ldr	r3, [sp, #12]
    88e4:	2200      	movs	r2, #0
    88e6:	771a      	strb	r2, [r3, #28]
    State->FirstCmd = TRUE;
    88e8:	9b03      	ldr	r3, [sp, #12]
    88ea:	2201      	movs	r2, #1
    88ec:	775a      	strb	r2, [r3, #29]
    #if ((STD_ON == LPSPI_IP_DMA_USED) && (STD_ON == LPSPI_IP_ENABLE_DMAFASTTRANSFER_SUPPORT))
    Lpspi_Ip_TxDmaTcdSGInit(Instance);
    Lpspi_Ip_RxDmaTcdSGInit(Instance);
    #endif
    /* set State to idle */
    State->Status = LPSPI_IP_IDLE;
    88ee:	9b03      	ldr	r3, [sp, #12]
    88f0:	2201      	movs	r2, #1
    88f2:	605a      	str	r2, [r3, #4]
    (void)Lpspi_Ip_UpdateTransferMode(Instance, PhyUnitConfigPtr->TransferMode);
    88f4:	9b01      	ldr	r3, [sp, #4]
    88f6:	68da      	ldr	r2, [r3, #12]
    88f8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    88fc:	4611      	mov	r1, r2
    88fe:	4618      	mov	r0, r3
    8900:	f000 fd10 	bl	9324 <Lpspi_Ip_UpdateTransferMode>
    
    /* Enable SPI module */
    Base->CR |= LPSPI_CR_MEN_MASK;
    8904:	9b02      	ldr	r3, [sp, #8]
    8906:	691b      	ldr	r3, [r3, #16]
    8908:	f043 0201 	orr.w	r2, r3, #1
    890c:	9b02      	ldr	r3, [sp, #8]
    890e:	611a      	str	r2, [r3, #16]
    return Status;
    8910:	9b05      	ldr	r3, [sp, #20]
}
    8912:	4618      	mov	r0, r3
    8914:	b007      	add	sp, #28
    8916:	f85d fb04 	ldr.w	pc, [sp], #4
    891a:	bf00      	nop
    891c:	1fff8dd8 	.word	0x1fff8dd8
    8920:	00018540 	.word	0x00018540
    8924:	1fff8d98 	.word	0x1fff8d98

00008928 <Lpspi_Ip_DeInit>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_DeInit(uint8 Instance)
{
    8928:	b086      	sub	sp, #24
    892a:	4603      	mov	r3, r0
    892c:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    8930:	2300      	movs	r3, #0
    8932:	9305      	str	r3, [sp, #20]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    8934:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8938:	4a11      	ldr	r2, [pc, #68]	; (8980 <Lpspi_Ip_DeInit+0x58>)
    893a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    893e:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8940:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8944:	4a0f      	ldr	r2, [pc, #60]	; (8984 <Lpspi_Ip_DeInit+0x5c>)
    8946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    894a:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_BUSY == State->Status)
    894c:	9b03      	ldr	r3, [sp, #12]
    894e:	685b      	ldr	r3, [r3, #4]
    8950:	2b02      	cmp	r3, #2
    8952:	d102      	bne.n	895a <Lpspi_Ip_DeInit+0x32>
    {
        Status = LPSPI_IP_STATUS_FAIL;
    8954:	2301      	movs	r3, #1
    8956:	9305      	str	r3, [sp, #20]
    8958:	e00e      	b.n	8978 <Lpspi_Ip_DeInit+0x50>
    }
    else
    {
        /* Use reset hardware feature. */
        Base->CR |= LPSPI_CR_RST(1u);
    895a:	9b04      	ldr	r3, [sp, #16]
    895c:	691b      	ldr	r3, [r3, #16]
    895e:	f043 0202 	orr.w	r2, r3, #2
    8962:	9b04      	ldr	r3, [sp, #16]
    8964:	611a      	str	r2, [r3, #16]
        Base->CR = 0;
    8966:	9b04      	ldr	r3, [sp, #16]
    8968:	2200      	movs	r2, #0
    896a:	611a      	str	r2, [r3, #16]

        Lpspi_Ip_apxStateStructureArray[Instance] = NULL_PTR;
    896c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8970:	4a04      	ldr	r2, [pc, #16]	; (8984 <Lpspi_Ip_DeInit+0x5c>)
    8972:	2100      	movs	r1, #0
    8974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    return Status;
    8978:	9b05      	ldr	r3, [sp, #20]
}
    897a:	4618      	mov	r0, r3
    897c:	b006      	add	sp, #24
    897e:	4770      	bx	lr
    8980:	00018540 	.word	0x00018540
    8984:	1fff8dd8 	.word	0x1fff8dd8

00008988 <Lpspi_Ip_SyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            uint32 TimeOut
                                         )
{
    8988:	b510      	push	{r4, lr}
    898a:	b09a      	sub	sp, #104	; 0x68
    898c:	9005      	str	r0, [sp, #20]
    898e:	9104      	str	r1, [sp, #16]
    8990:	9203      	str	r2, [sp, #12]
    8992:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type *Base;
    Lpspi_Ip_StateStructureType *State;
    uint8 NumberOfWrites, NumberOfReads;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    8996:	2300      	movs	r3, #0
    8998:	9318      	str	r3, [sp, #96]	; 0x60
    uint32 TimeoutTicks = OsIf_MicrosToTicks(TimeOut, LPSPI_IP_TIMEOUT_METHOD);
    899a:	2100      	movs	r1, #0
    899c:	981c      	ldr	r0, [sp, #112]	; 0x70
    899e:	f7f9 fa89 	bl	1eb4 <OsIf_MicrosToTicks>
    89a2:	9015      	str	r0, [sp, #84]	; 0x54
    uint32 CurrentTicks = 0u; /* initialize current counter */
    89a4:	2300      	movs	r3, #0
    89a6:	9307      	str	r3, [sp, #28]
    uint32 ElapsedTicks = 0u; /* elapsed will give timeout */
    89a8:	2300      	movs	r3, #0
    89aa:	9317      	str	r3, [sp, #92]	; 0x5c
    uint8 Instance = 0u;
    89ac:	2300      	movs	r3, #0
    89ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    uint32 Cfgr1 = 0u;
    89b2:	2300      	movs	r3, #0
    89b4:	9313      	str	r3, [sp, #76]	; 0x4c
    boolean TxDoneFlag = FALSE;
    89b6:	2300      	movs	r3, #0
    89b8:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    DevAssert(0u != TimeOut);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    89bc:	9b05      	ldr	r3, [sp, #20]
    89be:	781b      	ldrb	r3, [r3, #0]
    89c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    89c4:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    89c8:	4a92      	ldr	r2, [pc, #584]	; (8c14 <Lpspi_Ip_SyncTransmit+0x28c>)
    89ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89ce:	9312      	str	r3, [sp, #72]	; 0x48
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];    
    89d0:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    89d4:	4a90      	ldr	r2, [pc, #576]	; (8c18 <Lpspi_Ip_SyncTransmit+0x290>)
    89d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89da:	9311      	str	r3, [sp, #68]	; 0x44
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08();
    89dc:	f00d fc88 	bl	162f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>
    if (LPSPI_IP_BUSY == State->Status)
    89e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89e2:	685b      	ldr	r3, [r3, #4]
    89e4:	2b02      	cmp	r3, #2
    89e6:	d104      	bne.n	89f2 <Lpspi_Ip_SyncTransmit+0x6a>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    89e8:	f00d fcae 	bl	16348 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        Status = LPSPI_IP_STATUS_FAIL;
    89ec:	2301      	movs	r3, #1
    89ee:	9318      	str	r3, [sp, #96]	; 0x60
    89f0:	e276      	b.n	8ee0 <Lpspi_Ip_SyncTransmit+0x558>
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    89f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89f4:	2202      	movs	r2, #2
    89f6:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    89f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89fa:	9a05      	ldr	r2, [sp, #20]
    89fc:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    89fe:	f00d fca3 	bl	16348 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        
        /* Disable DMA requests and all interrupts */
        Base->DER = 0u;
    8a02:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a04:	2200      	movs	r2, #0
    8a06:	61da      	str	r2, [r3, #28]
        Base->IER = 0u;
    8a08:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a0a:	2200      	movs	r2, #0
    8a0c:	619a      	str	r2, [r3, #24]
        
        /* Update State structure. */
        State->NextTransferConfigAvailable = State->KeepCs;
    8a0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a10:	7f1a      	ldrb	r2, [r3, #28]
    8a12:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    8a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a1a:	7f5b      	ldrb	r3, [r3, #29]
    8a1c:	2b00      	cmp	r3, #0
    8a1e:	d030      	beq.n	8a82 <Lpspi_Ip_SyncTransmit+0xfa>
            /* Makes sure that FIFOs will be empty before start new transfer session. 
            There is maybe a frame in RX shifter register (previous transfer is broken and CS did not de-assert).
            So use reset FIFO do not prevent the potential issue. So reset module by software reset bit should be used here */
            /* Reset FIFOs using CR[RST] bit */
            /* store CFGR1 and restore after all registers are reset */
            Cfgr1 = Base->CFGR1;
    8a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a24:	9313      	str	r3, [sp, #76]	; 0x4c
            Base->CR |= LPSPI_CR_RST_MASK;
    8a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a28:	691b      	ldr	r3, [r3, #16]
    8a2a:	f043 0202 	orr.w	r2, r3, #2
    8a2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a30:	611a      	str	r2, [r3, #16]
            Base->CR &= ~LPSPI_CR_RST_MASK;
    8a32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a34:	691b      	ldr	r3, [r3, #16]
    8a36:	f023 0202 	bic.w	r2, r3, #2
    8a3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a3c:	611a      	str	r2, [r3, #16]
            /* restore CFGR1 */
            Base->CFGR1 = Cfgr1;
    8a3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8a42:	625a      	str	r2, [r3, #36]	; 0x24
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    8a44:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a46:	695b      	ldr	r3, [r3, #20]
    8a48:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    8a4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a4e:	615a      	str	r2, [r3, #20]

            #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
            Base->CCR = ExternalDevice->Ccr[State->ClockMode];
            #else
            Base->CCR = ExternalDevice->Ccr;
    8a50:	9b05      	ldr	r3, [sp, #20]
    8a52:	685a      	ldr	r2, [r3, #4]
    8a54:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a56:	641a      	str	r2, [r3, #64]	; 0x40
            #endif
                /* Reset current FIFO slots are available to fill at beginning of job (HLD).*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    8a58:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a5a:	2204      	movs	r2, #4
    8a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    8a60:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a64:	68db      	ldr	r3, [r3, #12]
    8a66:	881a      	ldrh	r2, [r3, #0]
    8a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a6c:	68db      	ldr	r3, [r3, #12]
    8a6e:	7899      	ldrb	r1, [r3, #2]
    8a70:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8a74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8a78:	9300      	str	r3, [sp, #0]
    8a7a:	460b      	mov	r3, r1
    8a7c:	9904      	ldr	r1, [sp, #16]
    8a7e:	f000 fa37 	bl	8ef0 <Lpspi_TransmitTxInit>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    8a82:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a86:	68db      	ldr	r3, [r3, #12]
    8a88:	881a      	ldrh	r2, [r3, #0]
    8a8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8a8e:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8a92:	9903      	ldr	r1, [sp, #12]
    8a94:	f000 facc 	bl	9030 <Lpspi_TransmitRxInit>
        /* initialize current counter */
        CurrentTicks = OsIf_GetCounter(LPSPI_IP_TIMEOUT_METHOD);
    8a98:	2000      	movs	r0, #0
    8a9a:	f7f9 f9bf 	bl	1e1c <OsIf_GetCounter>
    8a9e:	4603      	mov	r3, r0
    8aa0:	9307      	str	r3, [sp, #28]
        while(State->RxIndex != State->ExpectedFifoReads)
    8aa2:	e202      	b.n	8eaa <Lpspi_Ip_SyncTransmit+0x522>
        {
            /* RECEIVE DATA */
            /* The receiving should be performed first because maybe have a last frame in RX FIFO from previous channel
                , it should be read to clear RXFIFO before start a new write to TXFIFO */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    8aa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8aa8:	0c1b      	lsrs	r3, r3, #16
    8aaa:	b2db      	uxtb	r3, r3
    8aac:	f003 0307 	and.w	r3, r3, #7
    8ab0:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            /* Limits to remaining frames. */
            
            if (NumberOfReads != 0u)
    8ab4:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8ab8:	2b00      	cmp	r3, #0
    8aba:	f000 80d2 	beq.w	8c62 <Lpspi_Ip_SyncTransmit+0x2da>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    8abe:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
    8ac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ac4:	8b1b      	ldrh	r3, [r3, #24]
    8ac6:	4619      	mov	r1, r3
    8ac8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8aca:	8a9b      	ldrh	r3, [r3, #20]
    8acc:	1acb      	subs	r3, r1, r3
    8ace:	429a      	cmp	r2, r3
    8ad0:	dd08      	ble.n	8ae4 <Lpspi_Ip_SyncTransmit+0x15c>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    8ad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ad4:	8b1b      	ldrh	r3, [r3, #24]
    8ad6:	b2da      	uxtb	r2, r3
    8ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ada:	8a9b      	ldrh	r3, [r3, #20]
    8adc:	b2db      	uxtb	r3, r3
    8ade:	1ad3      	subs	r3, r2, r3
    8ae0:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out */
                if (0u == State->RxIndex)
    8ae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ae6:	8a9b      	ldrh	r3, [r3, #20]
    8ae8:	2b00      	cmp	r3, #0
    8aea:	d107      	bne.n	8afc <Lpspi_Ip_SyncTransmit+0x174>
                {
                    State->CurrentTxFifoSlot += 1u;
    8aec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8af2:	3301      	adds	r3, #1
    8af4:	b2da      	uxtb	r2, r3
    8af6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    8afc:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8b00:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8b04:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8b08:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8b0c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8b10:	4a41      	ldr	r2, [pc, #260]	; (8c18 <Lpspi_Ip_SyncTransmit+0x290>)
    8b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b16:	930f      	str	r3, [sp, #60]	; 0x3c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8b18:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8b1c:	4a3d      	ldr	r2, [pc, #244]	; (8c14 <Lpspi_Ip_SyncTransmit+0x28c>)
    8b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b22:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 Data = 0u;
    8b24:	2300      	movs	r3, #0
    8b26:	930d      	str	r3, [sp, #52]	; 0x34
    uint8 Index = 0u;
    8b28:	2300      	movs	r3, #0
    8b2a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if (NULL_PTR != State->RxBuffer)
    8b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b30:	689b      	ldr	r3, [r3, #8]
    8b32:	2b00      	cmp	r3, #0
    8b34:	d069      	beq.n	8c0a <Lpspi_Ip_SyncTransmit+0x282>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    8b36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b3a:	68db      	ldr	r3, [r3, #12]
    8b3c:	881b      	ldrh	r3, [r3, #0]
    8b3e:	2b08      	cmp	r3, #8
    8b40:	d81e      	bhi.n	8b80 <Lpspi_Ip_SyncTransmit+0x1f8>
            for (Index = 0; Index < NumberOfReads; Index++)
    8b42:	2300      	movs	r3, #0
    8b44:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b48:	e013      	b.n	8b72 <Lpspi_Ip_SyncTransmit+0x1ea>
                Data = Base->RDR;
    8b4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8b4e:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    8b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b52:	689b      	ldr	r3, [r3, #8]
    8b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8b56:	8a92      	ldrh	r2, [r2, #20]
    8b58:	4611      	mov	r1, r2
    8b5a:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    8b5e:	440a      	add	r2, r1
    8b60:	4413      	add	r3, r2
    8b62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8b64:	b2d2      	uxtb	r2, r2
    8b66:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8b68:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b6c:	3301      	adds	r3, #1
    8b6e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b72:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8b76:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b7a:	429a      	cmp	r2, r3
    8b7c:	d8e5      	bhi.n	8b4a <Lpspi_Ip_SyncTransmit+0x1c2>
    8b7e:	e05a      	b.n	8c36 <Lpspi_Ip_SyncTransmit+0x2ae>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    8b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b84:	68db      	ldr	r3, [r3, #12]
    8b86:	881b      	ldrh	r3, [r3, #0]
    8b88:	2b10      	cmp	r3, #16
    8b8a:	d81f      	bhi.n	8bcc <Lpspi_Ip_SyncTransmit+0x244>
            for (Index = 0; Index < NumberOfReads; Index++)
    8b8c:	2300      	movs	r3, #0
    8b8e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b92:	e014      	b.n	8bbe <Lpspi_Ip_SyncTransmit+0x236>
                Data = Base->RDR;
    8b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8b98:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    8b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b9c:	689a      	ldr	r2, [r3, #8]
    8b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ba0:	8a9b      	ldrh	r3, [r3, #20]
    8ba2:	4619      	mov	r1, r3
    8ba4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8ba8:	440b      	add	r3, r1
    8baa:	005b      	lsls	r3, r3, #1
    8bac:	4413      	add	r3, r2
    8bae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8bb0:	b292      	uxth	r2, r2
    8bb2:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8bb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8bb8:	3301      	adds	r3, #1
    8bba:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8bbe:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8bc2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8bc6:	429a      	cmp	r2, r3
    8bc8:	d8e4      	bhi.n	8b94 <Lpspi_Ip_SyncTransmit+0x20c>
    8bca:	e034      	b.n	8c36 <Lpspi_Ip_SyncTransmit+0x2ae>
            for (Index = 0; Index < NumberOfReads; Index++)
    8bcc:	2300      	movs	r3, #0
    8bce:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8bd2:	e013      	b.n	8bfc <Lpspi_Ip_SyncTransmit+0x274>
                Data = Base->RDR;
    8bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8bd8:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    8bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bdc:	689a      	ldr	r2, [r3, #8]
    8bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8be0:	8a9b      	ldrh	r3, [r3, #20]
    8be2:	4619      	mov	r1, r3
    8be4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8be8:	440b      	add	r3, r1
    8bea:	009b      	lsls	r3, r3, #2
    8bec:	4413      	add	r3, r2
    8bee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8bf0:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8bf2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8bf6:	3301      	adds	r3, #1
    8bf8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8bfc:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8c00:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c04:	429a      	cmp	r2, r3
    8c06:	d8e5      	bhi.n	8bd4 <Lpspi_Ip_SyncTransmit+0x24c>
    8c08:	e015      	b.n	8c36 <Lpspi_Ip_SyncTransmit+0x2ae>
        for (Index = 0; Index < NumberOfReads; Index++)
    8c0a:	2300      	movs	r3, #0
    8c0c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c10:	e00b      	b.n	8c2a <Lpspi_Ip_SyncTransmit+0x2a2>
    8c12:	bf00      	nop
    8c14:	1fff8dd8 	.word	0x1fff8dd8
    8c18:	00018540 	.word	0x00018540
            (void)Base->RDR;
    8c1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    8c20:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c24:	3301      	adds	r3, #1
    8c26:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c2a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8c2e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c32:	429a      	cmp	r2, r3
    8c34:	d8f2      	bhi.n	8c1c <Lpspi_Ip_SyncTransmit+0x294>
    State->RxIndex += NumberOfReads;
    8c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c38:	8a9a      	ldrh	r2, [r3, #20]
    8c3a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8c3e:	b29b      	uxth	r3, r3
    8c40:	4413      	add	r3, r2
    8c42:	b29a      	uxth	r2, r3
    8c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c46:	829a      	strh	r2, [r3, #20]
}
    8c48:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    8c4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c4c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8c50:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8c54:	4413      	add	r3, r2
    8c56:	b2da      	uxtb	r2, r3
    8c58:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                ElapsedTicks = 0u;
    8c5e:	2300      	movs	r3, #0
    8c60:	9317      	str	r3, [sp, #92]	; 0x5c
            /* After driver code read all frames in RX FIFO, if there are still some frames in TX FIFO, at the time before driver code check number of frames available in TX FIFO 
            to prepare to fill TX FIFO. At that time, interrupt occurred, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO. 
            So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from interrupt and fill TX FIFO until full. 
            And there is a interrupt occurred after that before read all frames in RX FIFO, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (TxDoneFlag != TRUE))
    8c62:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8c68:	2b00      	cmp	r3, #0
    8c6a:	f000 810e 	beq.w	8e8a <Lpspi_Ip_SyncTransmit+0x502>
    8c6e:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
    8c72:	f083 0301 	eor.w	r3, r3, #1
    8c76:	b2db      	uxtb	r3, r3
    8c78:	2b00      	cmp	r3, #0
    8c7a:	f000 8106 	beq.w	8e8a <Lpspi_Ip_SyncTransmit+0x502>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    8c7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c80:	8b5a      	ldrh	r2, [r3, #26]
    8c82:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c84:	8adb      	ldrh	r3, [r3, #22]
    8c86:	429a      	cmp	r2, r3
    8c88:	f000 80c7 	beq.w	8e1a <Lpspi_Ip_SyncTransmit+0x492>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    8c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8c92:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    8c96:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    8c9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c9c:	8b5b      	ldrh	r3, [r3, #26]
    8c9e:	4619      	mov	r1, r3
    8ca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ca2:	8adb      	ldrh	r3, [r3, #22]
    8ca4:	1acb      	subs	r3, r1, r3
    8ca6:	429a      	cmp	r2, r3
    8ca8:	dd08      	ble.n	8cbc <Lpspi_Ip_SyncTransmit+0x334>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    8caa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cac:	8b5b      	ldrh	r3, [r3, #26]
    8cae:	b2da      	uxtb	r2, r3
    8cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cb2:	8adb      	ldrh	r3, [r3, #22]
    8cb4:	b2db      	uxtb	r3, r3
    8cb6:	1ad3      	subs	r3, r2, r3
    8cb8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    8cbc:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8cc0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    8cc4:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8cc8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8ccc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8cd0:	4a85      	ldr	r2, [pc, #532]	; (8ee8 <Lpspi_Ip_SyncTransmit+0x560>)
    8cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cd6:	930b      	str	r3, [sp, #44]	; 0x2c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8cd8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8cdc:	4a83      	ldr	r2, [pc, #524]	; (8eec <Lpspi_Ip_SyncTransmit+0x564>)
    8cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ce2:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 Data = 0u;
    8ce4:	2300      	movs	r3, #0
    8ce6:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Index = 0u;
    8ce8:	2300      	movs	r3, #0
    8cea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    8cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8cf2:	68db      	ldr	r3, [r3, #12]
    8cf4:	685b      	ldr	r3, [r3, #4]
    8cf6:	9309      	str	r3, [sp, #36]	; 0x24
    if (NULL_PTR != State->TxBuffer)
    8cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cfa:	68db      	ldr	r3, [r3, #12]
    8cfc:	2b00      	cmp	r3, #0
    8cfe:	d063      	beq.n	8dc8 <Lpspi_Ip_SyncTransmit+0x440>
        if (State->TxFrameSize < 9u)
    8d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8d04:	2b08      	cmp	r3, #8
    8d06:	d81d      	bhi.n	8d44 <Lpspi_Ip_SyncTransmit+0x3bc>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d08:	2300      	movs	r3, #0
    8d0a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d0e:	e012      	b.n	8d36 <Lpspi_Ip_SyncTransmit+0x3ae>
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    8d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d12:	68db      	ldr	r3, [r3, #12]
    8d14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8d16:	8ad2      	ldrh	r2, [r2, #22]
    8d18:	4611      	mov	r1, r2
    8d1a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    8d1e:	440a      	add	r2, r1
    8d20:	4413      	add	r3, r2
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d2a:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d30:	3301      	adds	r3, #1
    8d32:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d36:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8d3a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d3e:	429a      	cmp	r2, r3
    8d40:	d8e6      	bhi.n	8d10 <Lpspi_Ip_SyncTransmit+0x388>
    8d42:	e053      	b.n	8dec <Lpspi_Ip_SyncTransmit+0x464>
        else if (State->TxFrameSize < 17u)
    8d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8d48:	2b10      	cmp	r3, #16
    8d4a:	d81e      	bhi.n	8d8a <Lpspi_Ip_SyncTransmit+0x402>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d4c:	2300      	movs	r3, #0
    8d4e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d52:	e013      	b.n	8d7c <Lpspi_Ip_SyncTransmit+0x3f4>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    8d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d56:	68da      	ldr	r2, [r3, #12]
    8d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d5a:	8adb      	ldrh	r3, [r3, #22]
    8d5c:	4619      	mov	r1, r3
    8d5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d62:	440b      	add	r3, r1
    8d64:	005b      	lsls	r3, r3, #1
    8d66:	4413      	add	r3, r2
    8d68:	881b      	ldrh	r3, [r3, #0]
    8d6a:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d70:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d72:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d76:	3301      	adds	r3, #1
    8d78:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d7c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8d80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d84:	429a      	cmp	r2, r3
    8d86:	d8e5      	bhi.n	8d54 <Lpspi_Ip_SyncTransmit+0x3cc>
    8d88:	e030      	b.n	8dec <Lpspi_Ip_SyncTransmit+0x464>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d8a:	2300      	movs	r3, #0
    8d8c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d90:	e013      	b.n	8dba <Lpspi_Ip_SyncTransmit+0x432>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    8d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d94:	68da      	ldr	r2, [r3, #12]
    8d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d98:	8adb      	ldrh	r3, [r3, #22]
    8d9a:	4619      	mov	r1, r3
    8d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8da0:	440b      	add	r3, r1
    8da2:	009b      	lsls	r3, r3, #2
    8da4:	4413      	add	r3, r2
    8da6:	681b      	ldr	r3, [r3, #0]
    8da8:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8dae:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8db0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8db4:	3301      	adds	r3, #1
    8db6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8dba:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8dbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8dc2:	429a      	cmp	r2, r3
    8dc4:	d8e5      	bhi.n	8d92 <Lpspi_Ip_SyncTransmit+0x40a>
    8dc6:	e011      	b.n	8dec <Lpspi_Ip_SyncTransmit+0x464>
        for (Index = 0; Index < NumberOfWrites; Index++)
    8dc8:	2300      	movs	r3, #0
    8dca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8dce:	e007      	b.n	8de0 <Lpspi_Ip_SyncTransmit+0x458>
            Base->TDR = Data;
    8dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8dd4:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    8dd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8dda:	3301      	adds	r3, #1
    8ddc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8de0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8de4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8de8:	429a      	cmp	r2, r3
    8dea:	d8f1      	bhi.n	8dd0 <Lpspi_Ip_SyncTransmit+0x448>
    State->TxIndex += NumberOfWrites;
    8dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dee:	8ada      	ldrh	r2, [r3, #22]
    8df0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    8df4:	b29b      	uxth	r3, r3
    8df6:	4413      	add	r3, r2
    8df8:	b29a      	uxth	r2, r3
    8dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dfc:	82da      	strh	r2, [r3, #22]
}
    8dfe:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    8e00:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e02:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8e06:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8e0a:	1ad3      	subs	r3, r2, r3
    8e0c:	b2da      	uxtb	r2, r3
    8e0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                    ElapsedTicks = 0u;
    8e14:	2300      	movs	r3, #0
    8e16:	9317      	str	r3, [sp, #92]	; 0x5c
    8e18:	e037      	b.n	8e8a <Lpspi_Ip_SyncTransmit+0x502>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    8e1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    8e20:	2b00      	cmp	r3, #0
    8e22:	d01c      	beq.n	8e5e <Lpspi_Ip_SyncTransmit+0x4d6>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    8e24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e28:	68db      	ldr	r3, [r3, #12]
    8e2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8e2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
    8e2e:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    8e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e32:	2200      	movs	r2, #0
    8e34:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    8e36:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    8e3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e3c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    8e3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e40:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    8e44:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e46:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    8e48:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8e4c:	9300      	str	r3, [sp, #0]
    8e4e:	4623      	mov	r3, r4
    8e50:	f000 f84e 	bl	8ef0 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    8e54:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e56:	2200      	movs	r2, #0
    8e58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    8e5c:	e015      	b.n	8e8a <Lpspi_Ip_SyncTransmit+0x502>
                    }
                    else
                    {
                        TxDoneFlag = TRUE;
    8e5e:	2301      	movs	r3, #1
    8e60:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    8e64:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e66:	7f1b      	ldrb	r3, [r3, #28]
    8e68:	f083 0301 	eor.w	r3, r3, #1
    8e6c:	b2db      	uxtb	r3, r3
    8e6e:	2b00      	cmp	r3, #0
    8e70:	d00b      	beq.n	8e8a <Lpspi_Ip_SyncTransmit+0x502>
    8e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	d005      	beq.n	8e8a <Lpspi_Ip_SyncTransmit+0x502>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    8e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8e82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    8e86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e88:	661a      	str	r2, [r3, #96]	; 0x60
                        }
                    }
                }
            }
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, LPSPI_IP_TIMEOUT_METHOD);
    8e8a:	ab07      	add	r3, sp, #28
    8e8c:	2100      	movs	r1, #0
    8e8e:	4618      	mov	r0, r3
    8e90:	f7f8 ffdd 	bl	1e4e <OsIf_GetElapsed>
    8e94:	4602      	mov	r2, r0
    8e96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8e98:	4413      	add	r3, r2
    8e9a:	9317      	str	r3, [sp, #92]	; 0x5c
            if (ElapsedTicks >= TimeoutTicks)
    8e9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8ea0:	429a      	cmp	r2, r3
    8ea2:	d302      	bcc.n	8eaa <Lpspi_Ip_SyncTransmit+0x522>
            {
                Status = LPSPI_IP_TIMEOUT;
    8ea4:	2303      	movs	r3, #3
    8ea6:	9318      	str	r3, [sp, #96]	; 0x60
                break;
    8ea8:	e006      	b.n	8eb8 <Lpspi_Ip_SyncTransmit+0x530>
        while(State->RxIndex != State->ExpectedFifoReads)
    8eaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8eac:	8a9a      	ldrh	r2, [r3, #20]
    8eae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8eb0:	8b1b      	ldrh	r3, [r3, #24]
    8eb2:	429a      	cmp	r2, r3
    8eb4:	f47f adf6 	bne.w	8aa4 <Lpspi_Ip_SyncTransmit+0x11c>
            }
        }
        if ((LPSPI_IP_STATUS_SUCCESS != Status) || (0u == Length))
    8eb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8eba:	2b00      	cmp	r3, #0
    8ebc:	d103      	bne.n	8ec6 <Lpspi_Ip_SyncTransmit+0x53e>
    8ebe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8ec2:	2b00      	cmp	r3, #0
    8ec4:	d109      	bne.n	8eda <Lpspi_Ip_SyncTransmit+0x552>
        {
#if (STD_OFF == LPSPI_IP_DEV_ERROR_DETECT)
            /* Return Fail status if length is 0. Error Detect is enabled, nothing need to be done here */
            if (0u == Length)
    8ec6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8eca:	2b00      	cmp	r3, #0
    8ecc:	d101      	bne.n	8ed2 <Lpspi_Ip_SyncTransmit+0x54a>
            {
                Status = LPSPI_IP_STATUS_FAIL;
    8ece:	2301      	movs	r3, #1
    8ed0:	9318      	str	r3, [sp, #96]	; 0x60
            }
#endif
            State->Status = LPSPI_IP_FAULT;
    8ed2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ed4:	2203      	movs	r2, #3
    8ed6:	605a      	str	r2, [r3, #4]
    8ed8:	e002      	b.n	8ee0 <Lpspi_Ip_SyncTransmit+0x558>
        }
        else
        {
            State->Status = LPSPI_IP_IDLE;
    8eda:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8edc:	2201      	movs	r2, #1
    8ede:	605a      	str	r2, [r3, #4]
        }
    }
    return Status;
    8ee0:	9b18      	ldr	r3, [sp, #96]	; 0x60
}
    8ee2:	4618      	mov	r0, r3
    8ee4:	b01a      	add	sp, #104	; 0x68
    8ee6:	bd10      	pop	{r4, pc}
    8ee8:	00018540 	.word	0x00018540
    8eec:	1fff8dd8 	.word	0x1fff8dd8

00008ef0 <Lpspi_TransmitTxInit>:
                                 const uint8* TxBuffer,
                                 uint16 TxFrameSize,
                                 boolean TxLsb,
                                 uint16 BufLen
                                )
{
    8ef0:	b088      	sub	sp, #32
    8ef2:	9100      	str	r1, [sp, #0]
    8ef4:	4611      	mov	r1, r2
    8ef6:	461a      	mov	r2, r3
    8ef8:	4603      	mov	r3, r0
    8efa:	f88d 3007 	strb.w	r3, [sp, #7]
    8efe:	460b      	mov	r3, r1
    8f00:	f8ad 3004 	strh.w	r3, [sp, #4]
    8f04:	4613      	mov	r3, r2
    8f06:	f88d 3006 	strb.w	r3, [sp, #6]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8f0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f0e:	4a46      	ldr	r2, [pc, #280]	; (9028 <Lpspi_TransmitTxInit+0x138>)
    8f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f14:	9307      	str	r3, [sp, #28]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8f16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f1a:	4a44      	ldr	r2, [pc, #272]	; (902c <Lpspi_TransmitTxInit+0x13c>)
    8f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f20:	9306      	str	r3, [sp, #24]
    uint32 TransferCommand = 0u;
    8f22:	2300      	movs	r3, #0
    8f24:	9305      	str	r3, [sp, #20]
    uint8 LsbWriteValue = TxLsb ? 1U : 0U;
    8f26:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d001      	beq.n	8f32 <Lpspi_TransmitTxInit+0x42>
    8f2e:	2301      	movs	r3, #1
    8f30:	e000      	b.n	8f34 <Lpspi_TransmitTxInit+0x44>
    8f32:	2300      	movs	r3, #0
    8f34:	f88d 3013 	strb.w	r3, [sp, #19]

    State->TxFrameSize = TxFrameSize;
    8f38:	9b06      	ldr	r3, [sp, #24]
    8f3a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8f3e:	851a      	strh	r2, [r3, #40]	; 0x28
    State->TxLsb = TxLsb;
    8f40:	9b06      	ldr	r3, [sp, #24]
    8f42:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8f46:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    /* Get transfer command */
#if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    TransferCommand = State->ExternalDevice->Tcr[State->ClockMode] | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
#else
    TransferCommand = State->ExternalDevice->Tcr | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
    8f4a:	9b06      	ldr	r3, [sp, #24]
    8f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f4e:	689a      	ldr	r2, [r3, #8]
    8f50:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8f54:	3b01      	subs	r3, #1
    8f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8f5a:	431a      	orrs	r2, r3
    8f5c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8f60:	05db      	lsls	r3, r3, #23
    8f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    8f66:	4313      	orrs	r3, r2
    8f68:	9305      	str	r3, [sp, #20]
        {
            TransferCommand &= ~LPSPI_TCR_CONT_MASK;
        }
        #endif
        
        if(TRUE == State->FirstCmd)
    8f6a:	9b06      	ldr	r3, [sp, #24]
    8f6c:	7f5b      	ldrb	r3, [r3, #29]
    8f6e:	2b00      	cmp	r3, #0
    8f70:	d003      	beq.n	8f7a <Lpspi_TransmitTxInit+0x8a>
        {
            /* Set transfer command */
            Base->TCR = TransferCommand;
    8f72:	9b07      	ldr	r3, [sp, #28]
    8f74:	9a05      	ldr	r2, [sp, #20]
    8f76:	661a      	str	r2, [r3, #96]	; 0x60
    8f78:	e00d      	b.n	8f96 <Lpspi_TransmitTxInit+0xa6>
        }
        else
        {
            if (0u != (TransferCommand & LPSPI_TCR_CONT_MASK))
    8f7a:	9b05      	ldr	r3, [sp, #20]
    8f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8f80:	2b00      	cmp	r3, #0
    8f82:	d005      	beq.n	8f90 <Lpspi_TransmitTxInit+0xa0>
            {
                Base->TCR = TransferCommand | LPSPI_TCR_CONTC_MASK;
    8f84:	9b05      	ldr	r3, [sp, #20]
    8f86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    8f8a:	9b07      	ldr	r3, [sp, #28]
    8f8c:	661a      	str	r2, [r3, #96]	; 0x60
    8f8e:	e002      	b.n	8f96 <Lpspi_TransmitTxInit+0xa6>
            }
            else
            {
                Base->TCR = TransferCommand;
    8f90:	9b07      	ldr	r3, [sp, #28]
    8f92:	9a05      	ldr	r2, [sp, #20]
    8f94:	661a      	str	r2, [r3, #96]	; 0x60
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        if (LPSPI_IP_FULL_DUPLEX == State->ExternalDevice->DeviceParams->TransferType)
        #endif
        {
            /* CMD will take 1 slot in TXFIFO, update current TX FIFO slot. it will be plus 1 when the first frames of channel have recieved */
            State->CurrentTxFifoSlot -= 1u;
    8f96:	9b06      	ldr	r3, [sp, #24]
    8f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8f9c:	3b01      	subs	r3, #1
    8f9e:	b2da      	uxtb	r2, r3
    8fa0:	9b06      	ldr	r3, [sp, #24]
    8fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        }
    }
    
    /* Update State structure. */
    State->TxIndex = 0u;
    8fa6:	9b06      	ldr	r3, [sp, #24]
    8fa8:	2200      	movs	r2, #0
    8faa:	82da      	strh	r2, [r3, #22]
        (void)TxBuffer;
    }
    else
    #endif
    {
        State->TxBuffer = TxBuffer;
    8fac:	9b06      	ldr	r3, [sp, #24]
    8fae:	9a00      	ldr	r2, [sp, #0]
    8fb0:	60da      	str	r2, [r3, #12]
    8fb2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8fb6:	f8ad 3010 	strh.w	r3, [sp, #16]
    8fba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8fbe:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (FrameSize < 9u)
    8fc2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8fc6:	2b08      	cmp	r3, #8
    8fc8:	d804      	bhi.n	8fd4 <Lpspi_TransmitTxInit+0xe4>
        Ret = Length;
    8fca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8fce:	f8ad 300c 	strh.w	r3, [sp, #12]
    8fd2:	e022      	b.n	901a <Lpspi_TransmitTxInit+0x12a>
    else if (FrameSize < 17u)
    8fd4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8fd8:	2b10      	cmp	r3, #16
    8fda:	d80c      	bhi.n	8ff6 <Lpspi_TransmitTxInit+0x106>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    8fdc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8fe0:	085b      	lsrs	r3, r3, #1
    8fe2:	b29a      	uxth	r2, r3
    8fe4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8fe8:	f003 0301 	and.w	r3, r3, #1
    8fec:	b29b      	uxth	r3, r3
    8fee:	4413      	add	r3, r2
    8ff0:	f8ad 300c 	strh.w	r3, [sp, #12]
    8ff4:	e011      	b.n	901a <Lpspi_TransmitTxInit+0x12a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    8ff6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8ffa:	089b      	lsrs	r3, r3, #2
    8ffc:	b29a      	uxth	r2, r3
    8ffe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9002:	f003 0303 	and.w	r3, r3, #3
    9006:	b29b      	uxth	r3, r3
    9008:	2b00      	cmp	r3, #0
    900a:	bf14      	ite	ne
    900c:	2301      	movne	r3, #1
    900e:	2300      	moveq	r3, #0
    9010:	b2db      	uxtb	r3, r3
    9012:	b29b      	uxth	r3, r3
    9014:	4413      	add	r3, r2
    9016:	f8ad 300c 	strh.w	r3, [sp, #12]
    return Ret;
    901a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    }

    State->ExpectedFifoWrites = Lpspi_Ip_GetWordsFromLength(BufLen, TxFrameSize);
    901e:	9b06      	ldr	r3, [sp, #24]
    9020:	835a      	strh	r2, [r3, #26]
}
    9022:	bf00      	nop
    9024:	b008      	add	sp, #32
    9026:	4770      	bx	lr
    9028:	00018540 	.word	0x00018540
    902c:	1fff8dd8 	.word	0x1fff8dd8

00009030 <Lpspi_TransmitRxInit>:
static void Lpspi_TransmitRxInit(uint8 Instance,
                                      uint8* RxBuffer,
                                      uint16 RxFrameSize,
                                      uint16 BufLen
                                     )
{
    9030:	b088      	sub	sp, #32
    9032:	9102      	str	r1, [sp, #8]
    9034:	4611      	mov	r1, r2
    9036:	461a      	mov	r2, r3
    9038:	4603      	mov	r3, r0
    903a:	f88d 300f 	strb.w	r3, [sp, #15]
    903e:	460b      	mov	r3, r1
    9040:	f8ad 300c 	strh.w	r3, [sp, #12]
    9044:	4613      	mov	r3, r2
    9046:	f8ad 3006 	strh.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    904a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    904e:	4a22      	ldr	r2, [pc, #136]	; (90d8 <Lpspi_TransmitRxInit+0xa8>)
    9050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9054:	9307      	str	r3, [sp, #28]
    
    /* Update State structure. */
    State->RxIndex = 0u;
    9056:	9b07      	ldr	r3, [sp, #28]
    9058:	2200      	movs	r2, #0
    905a:	829a      	strh	r2, [r3, #20]
        (void)RxBuffer; 
    }
    else
    #endif        
    {
        State->RxBuffer = RxBuffer; 
    905c:	9b07      	ldr	r3, [sp, #28]
    905e:	9a02      	ldr	r2, [sp, #8]
    9060:	609a      	str	r2, [r3, #8]
    9062:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9066:	f8ad 301a 	strh.w	r3, [sp, #26]
    906a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    906e:	f8ad 3018 	strh.w	r3, [sp, #24]
    if (FrameSize < 9u)
    9072:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    9076:	2b08      	cmp	r3, #8
    9078:	d804      	bhi.n	9084 <Lpspi_TransmitRxInit+0x54>
        Ret = Length;
    907a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    907e:	f8ad 3016 	strh.w	r3, [sp, #22]
    9082:	e022      	b.n	90ca <Lpspi_TransmitRxInit+0x9a>
    else if (FrameSize < 17u)
    9084:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    9088:	2b10      	cmp	r3, #16
    908a:	d80c      	bhi.n	90a6 <Lpspi_TransmitRxInit+0x76>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    908c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9090:	085b      	lsrs	r3, r3, #1
    9092:	b29a      	uxth	r2, r3
    9094:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9098:	f003 0301 	and.w	r3, r3, #1
    909c:	b29b      	uxth	r3, r3
    909e:	4413      	add	r3, r2
    90a0:	f8ad 3016 	strh.w	r3, [sp, #22]
    90a4:	e011      	b.n	90ca <Lpspi_TransmitRxInit+0x9a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    90a6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    90aa:	089b      	lsrs	r3, r3, #2
    90ac:	b29a      	uxth	r2, r3
    90ae:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    90b2:	f003 0303 	and.w	r3, r3, #3
    90b6:	b29b      	uxth	r3, r3
    90b8:	2b00      	cmp	r3, #0
    90ba:	bf14      	ite	ne
    90bc:	2301      	movne	r3, #1
    90be:	2300      	moveq	r3, #0
    90c0:	b2db      	uxtb	r3, r3
    90c2:	b29b      	uxth	r3, r3
    90c4:	4413      	add	r3, r2
    90c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    return Ret;
    90ca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    }

    State->ExpectedFifoReads = Lpspi_Ip_GetWordsFromLength(BufLen, RxFrameSize);
    90ce:	9b07      	ldr	r3, [sp, #28]
    90d0:	831a      	strh	r2, [r3, #24]
}
    90d2:	bf00      	nop
    90d4:	b008      	add	sp, #32
    90d6:	4770      	bx	lr
    90d8:	1fff8dd8 	.word	0x1fff8dd8

000090dc <Lpspi_Ip_AsyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            Lpspi_Ip_CallbackType EndCallback
                                          )
{
    90dc:	b500      	push	{lr}
    90de:	b08b      	sub	sp, #44	; 0x2c
    90e0:	9005      	str	r0, [sp, #20]
    90e2:	9104      	str	r1, [sp, #16]
    90e4:	9203      	str	r2, [sp, #12]
    90e6:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    90ea:	2300      	movs	r3, #0
    90ec:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Instance = 0u;
    90ee:	2300      	movs	r3, #0
    90f0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    90f4:	9b05      	ldr	r3, [sp, #20]
    90f6:	781b      	ldrb	r3, [r3, #0]
    90f8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    90fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9100:	4a3d      	ldr	r2, [pc, #244]	; (91f8 <Lpspi_Ip_AsyncTransmit+0x11c>)
    9102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9106:	9307      	str	r3, [sp, #28]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];
    9108:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    910c:	4a3b      	ldr	r2, [pc, #236]	; (91fc <Lpspi_Ip_AsyncTransmit+0x120>)
    910e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9112:	9306      	str	r3, [sp, #24]
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09();
    9114:	f00d f93e 	bl	16394 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>
    if (LPSPI_IP_BUSY == State->Status)
    9118:	9b07      	ldr	r3, [sp, #28]
    911a:	685b      	ldr	r3, [r3, #4]
    911c:	2b02      	cmp	r3, #2
    911e:	d104      	bne.n	912a <Lpspi_Ip_AsyncTransmit+0x4e>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    9120:	f00d f964 	bl	163ec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        Status = LPSPI_IP_STATUS_FAIL;
    9124:	2301      	movs	r3, #1
    9126:	9309      	str	r3, [sp, #36]	; 0x24
    9128:	e061      	b.n	91ee <Lpspi_Ip_AsyncTransmit+0x112>
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    912a:	9b07      	ldr	r3, [sp, #28]
    912c:	2202      	movs	r2, #2
    912e:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    9130:	9b07      	ldr	r3, [sp, #28]
    9132:	9a05      	ldr	r2, [sp, #20]
    9134:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    9136:	f00d f959 	bl	163ec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        
        /* Update State structure. */
        State->Callback = EndCallback;
    913a:	9b07      	ldr	r3, [sp, #28]
    913c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    913e:	611a      	str	r2, [r3, #16]
        State->NextTransferConfigAvailable = State->KeepCs;
    9140:	9b07      	ldr	r3, [sp, #28]
    9142:	7f1a      	ldrb	r2, [r3, #28]
    9144:	9b07      	ldr	r3, [sp, #28]
    9146:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Reset TX done flag */
        State->TxDoneFlag = FALSE;
    914a:	9b07      	ldr	r3, [sp, #28]
    914c:	2200      	movs	r2, #0
    914e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    9152:	9b07      	ldr	r3, [sp, #28]
    9154:	7f5b      	ldrb	r3, [r3, #29]
    9156:	2b00      	cmp	r3, #0
    9158:	d028      	beq.n	91ac <Lpspi_Ip_AsyncTransmit+0xd0>
        {
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11();
    915a:	f00d f9bf 	bl	164dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>
            /* Make sure that FIFOs will be empty before start new transfer session */
            Base->CR |= LPSPI_CR_RTF_MASK|LPSPI_CR_RRF_MASK;
    915e:	9b06      	ldr	r3, [sp, #24]
    9160:	691b      	ldr	r3, [r3, #16]
    9162:	f443 7240 	orr.w	r2, r3, #768	; 0x300
    9166:	9b06      	ldr	r3, [sp, #24]
    9168:	611a      	str	r2, [r3, #16]
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    916a:	9b06      	ldr	r3, [sp, #24]
    916c:	695b      	ldr	r3, [r3, #20]
    916e:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    9172:	9b06      	ldr	r3, [sp, #24]
    9174:	615a      	str	r2, [r3, #20]
            #endif
            {
                #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
                Base->CCR = ExternalDevice->Ccr[State->ClockMode];
                #else
                Base->CCR = ExternalDevice->Ccr;
    9176:	9b05      	ldr	r3, [sp, #20]
    9178:	685a      	ldr	r2, [r3, #4]
    917a:	9b06      	ldr	r3, [sp, #24]
    917c:	641a      	str	r2, [r3, #64]	; 0x40
                #endif
            }
            /* Update current FIFO slots are available to fill .*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    917e:	9b07      	ldr	r3, [sp, #28]
    9180:	2204      	movs	r2, #4
    9182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            /* In setting up Transmit command register, the RXMSK is also cleared */
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    9186:	9b07      	ldr	r3, [sp, #28]
    9188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    918a:	68db      	ldr	r3, [r3, #12]
    918c:	881a      	ldrh	r2, [r3, #0]
    918e:	9b07      	ldr	r3, [sp, #28]
    9190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9192:	68db      	ldr	r3, [r3, #12]
    9194:	7899      	ldrb	r1, [r3, #2]
    9196:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    919a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    919e:	9300      	str	r3, [sp, #0]
    91a0:	460b      	mov	r3, r1
    91a2:	9904      	ldr	r1, [sp, #16]
    91a4:	f7ff fea4 	bl	8ef0 <Lpspi_TransmitTxInit>
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11();
    91a8:	f00d f9c4 	bl	16534 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    91ac:	9b07      	ldr	r3, [sp, #28]
    91ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91b0:	68db      	ldr	r3, [r3, #12]
    91b2:	881a      	ldrh	r2, [r3, #0]
    91b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    91b8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    91bc:	9903      	ldr	r1, [sp, #12]
    91be:	f7ff ff37 	bl	9030 <Lpspi_TransmitRxInit>
            }
            else
            #endif
            {
                /* Set TX water */
                Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    91c2:	9b06      	ldr	r3, [sp, #24]
    91c4:	2203      	movs	r2, #3
    91c6:	659a      	str	r2, [r3, #88]	; 0x58
            }
            
            /* Disable DMA requests */
            Base->DER = 0u;
    91c8:	9b06      	ldr	r3, [sp, #24]
    91ca:	2200      	movs	r2, #0
    91cc:	61da      	str	r2, [r3, #28]
            switch (State->TransferMode)
    91ce:	9b07      	ldr	r3, [sp, #28]
    91d0:	681b      	ldr	r3, [r3, #0]
    91d2:	2b00      	cmp	r3, #0
    91d4:	d002      	beq.n	91dc <Lpspi_Ip_AsyncTransmit+0x100>
    91d6:	2b01      	cmp	r3, #1
    91d8:	d004      	beq.n	91e4 <Lpspi_Ip_AsyncTransmit+0x108>
                case LPSPI_IP_INTERRUPT:
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
                    break;
                default:
                    /* Nothing to do */
                    break;
    91da:	e008      	b.n	91ee <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = 0u;
    91dc:	9b06      	ldr	r3, [sp, #24]
    91de:	2200      	movs	r2, #0
    91e0:	619a      	str	r2, [r3, #24]
                    break;
    91e2:	e004      	b.n	91ee <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
    91e4:	9b06      	ldr	r3, [sp, #24]
    91e6:	f641 0203 	movw	r2, #6147	; 0x1803
    91ea:	619a      	str	r2, [r3, #24]
                    break;
    91ec:	bf00      	nop
            /* Enable DMA request. */
            Base->DER = LPSPI_DER_RDDE_MASK | LPSPI_DER_TDDE_MASK;
        }
        #endif
    }
    return Status;
    91ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    91f0:	4618      	mov	r0, r3
    91f2:	b00b      	add	sp, #44	; 0x2c
    91f4:	f85d fb04 	ldr.w	pc, [sp], #4
    91f8:	1fff8dd8 	.word	0x1fff8dd8
    91fc:	00018540 	.word	0x00018540

00009200 <Lpspi_Ip_ManageBuffers>:
}
#endif
#endif

void Lpspi_Ip_ManageBuffers(uint8 Instance)
{
    9200:	b500      	push	{lr}
    9202:	b085      	sub	sp, #20
    9204:	4603      	mov	r3, r0
    9206:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    920a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    920e:	4a14      	ldr	r2, [pc, #80]	; (9260 <Lpspi_Ip_ManageBuffers+0x60>)
    9210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9214:	9303      	str	r3, [sp, #12]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    9216:	f89d 3007 	ldrb.w	r3, [sp, #7]
    921a:	4a12      	ldr	r2, [pc, #72]	; (9264 <Lpspi_Ip_ManageBuffers+0x64>)
    921c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9220:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_POLLING == State->TransferMode)
    9222:	9b02      	ldr	r3, [sp, #8]
    9224:	681b      	ldr	r3, [r3, #0]
    9226:	2b00      	cmp	r3, #0
    9228:	d115      	bne.n	9256 <Lpspi_Ip_ManageBuffers+0x56>
                - Receive: Both TDF (push CDM) and DRF (receive data) are set.
               In half duplex Slave mode:
                - Transmit: TDF is set only, RDF will never be set by RX FIFO have masked.
                - Receive: Both TDF and RDF are set. But only process for RDF to receive data. In this case, State->CurrentTxFifoSlot will be set to 0 */
            if(
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    922a:	9b03      	ldr	r3, [sp, #12]
    922c:	695b      	ldr	r3, [r3, #20]
    922e:	f003 0302 	and.w	r3, r3, #2
            if(
    9232:	2b00      	cmp	r3, #0
    9234:	d10a      	bne.n	924c <Lpspi_Ip_ManageBuffers+0x4c>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    9236:	9b03      	ldr	r3, [sp, #12]
    9238:	695b      	ldr	r3, [r3, #20]
    923a:	f003 0301 	and.w	r3, r3, #1
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    923e:	2b00      	cmp	r3, #0
    9240:	d009      	beq.n	9256 <Lpspi_Ip_ManageBuffers+0x56>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    9242:	9b02      	ldr	r3, [sp, #8]
    9244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    9248:	2b00      	cmp	r3, #0
    924a:	d004      	beq.n	9256 <Lpspi_Ip_ManageBuffers+0x56>
                    Lpspi_Ip_TransferProcessHalfDuplex(Instance);
                }
                else
                #endif
                {
                    Lpspi_Ip_TransferProcess(Instance); 
    924c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9250:	4618      	mov	r0, r3
    9252:	f7ff f8cd 	bl	83f0 <Lpspi_Ip_TransferProcess>
                Lpspi_Ip_IrqTxDmaHandler(Instance);
            }
        }
        #endif
    }
}
    9256:	bf00      	nop
    9258:	b005      	add	sp, #20
    925a:	f85d fb04 	ldr.w	pc, [sp], #4
    925e:	bf00      	nop
    9260:	00018540 	.word	0x00018540
    9264:	1fff8dd8 	.word	0x1fff8dd8

00009268 <Lpspi_Ip_UpdateFrameSize>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_UpdateFrameSize(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint16 FrameSize)
{
    9268:	b084      	sub	sp, #16
    926a:	9001      	str	r0, [sp, #4]
    926c:	460b      	mov	r3, r1
    926e:	f8ad 3002 	strh.w	r3, [sp, #2]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    9272:	2300      	movs	r3, #0
    9274:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    DevAssert(LPSPI_IP_FRAMESIZE_MAX_U16 >= FrameSize);
    DevAssert(LPSPI_IP_FRAMESIZE_MIN_U16 <= FrameSize);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    9276:	9b01      	ldr	r3, [sp, #4]
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	461a      	mov	r2, r3
    927c:	4b09      	ldr	r3, [pc, #36]	; (92a4 <Lpspi_Ip_UpdateFrameSize+0x3c>)
    927e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9282:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Frame size can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    9284:	9b02      	ldr	r3, [sp, #8]
    9286:	685b      	ldr	r3, [r3, #4]
    9288:	2b02      	cmp	r3, #2
    928a:	d005      	beq.n	9298 <Lpspi_Ip_UpdateFrameSize+0x30>
    {
        ExternalDevice->DeviceParams->FrameSize = FrameSize;
    928c:	9b01      	ldr	r3, [sp, #4]
    928e:	68db      	ldr	r3, [r3, #12]
    9290:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    9294:	801a      	strh	r2, [r3, #0]
    9296:	e001      	b.n	929c <Lpspi_Ip_UpdateFrameSize+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    9298:	2301      	movs	r3, #1
    929a:	9303      	str	r3, [sp, #12]
    }
    return Status;
    929c:	9b03      	ldr	r3, [sp, #12]
}
    929e:	4618      	mov	r0, r3
    92a0:	b004      	add	sp, #16
    92a2:	4770      	bx	lr
    92a4:	1fff8dd8 	.word	0x1fff8dd8

000092a8 <Lpspi_Ip_UpdateLsb>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateLsb(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, boolean Lsb)
{
    92a8:	b084      	sub	sp, #16
    92aa:	9001      	str	r0, [sp, #4]
    92ac:	460b      	mov	r3, r1
    92ae:	f88d 3003 	strb.w	r3, [sp, #3]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    92b2:	2300      	movs	r3, #0
    92b4:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    92b6:	9b01      	ldr	r3, [sp, #4]
    92b8:	781b      	ldrb	r3, [r3, #0]
    92ba:	461a      	mov	r2, r3
    92bc:	4b09      	ldr	r3, [pc, #36]	; (92e4 <Lpspi_Ip_UpdateLsb+0x3c>)
    92be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    92c2:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    92c4:	9b02      	ldr	r3, [sp, #8]
    92c6:	685b      	ldr	r3, [r3, #4]
    92c8:	2b02      	cmp	r3, #2
    92ca:	d005      	beq.n	92d8 <Lpspi_Ip_UpdateLsb+0x30>
    {
        ExternalDevice->DeviceParams->Lsb = Lsb;
    92cc:	9b01      	ldr	r3, [sp, #4]
    92ce:	68db      	ldr	r3, [r3, #12]
    92d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    92d4:	709a      	strb	r2, [r3, #2]
    92d6:	e001      	b.n	92dc <Lpspi_Ip_UpdateLsb+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    92d8:	2301      	movs	r3, #1
    92da:	9303      	str	r3, [sp, #12]
    }
    return Status;
    92dc:	9b03      	ldr	r3, [sp, #12]
}
    92de:	4618      	mov	r0, r3
    92e0:	b004      	add	sp, #16
    92e2:	4770      	bx	lr
    92e4:	1fff8dd8 	.word	0x1fff8dd8

000092e8 <Lpspi_Ip_UpdateDefaultTransmitData>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateDefaultTransmitData(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint32 DefaultData)
{
    92e8:	b084      	sub	sp, #16
    92ea:	9001      	str	r0, [sp, #4]
    92ec:	9100      	str	r1, [sp, #0]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    92ee:	2300      	movs	r3, #0
    92f0:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    92f2:	9b01      	ldr	r3, [sp, #4]
    92f4:	781b      	ldrb	r3, [r3, #0]
    92f6:	461a      	mov	r2, r3
    92f8:	4b09      	ldr	r3, [pc, #36]	; (9320 <Lpspi_Ip_UpdateDefaultTransmitData+0x38>)
    92fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    92fe:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    9300:	9b02      	ldr	r3, [sp, #8]
    9302:	685b      	ldr	r3, [r3, #4]
    9304:	2b02      	cmp	r3, #2
    9306:	d004      	beq.n	9312 <Lpspi_Ip_UpdateDefaultTransmitData+0x2a>
    {
        ExternalDevice->DeviceParams->DefaultData = DefaultData;
    9308:	9b01      	ldr	r3, [sp, #4]
    930a:	68db      	ldr	r3, [r3, #12]
    930c:	9a00      	ldr	r2, [sp, #0]
    930e:	605a      	str	r2, [r3, #4]
    9310:	e001      	b.n	9316 <Lpspi_Ip_UpdateDefaultTransmitData+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    9312:	2301      	movs	r3, #1
    9314:	9303      	str	r3, [sp, #12]
    }
    return Status;
    9316:	9b03      	ldr	r3, [sp, #12]
}
    9318:	4618      	mov	r0, r3
    931a:	b004      	add	sp, #16
    931c:	4770      	bx	lr
    931e:	bf00      	nop
    9320:	1fff8dd8 	.word	0x1fff8dd8

00009324 <Lpspi_Ip_UpdateTransferMode>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateTransferMode(uint8 Instance, Lpspi_Ip_ModeType Mode)
{
    9324:	b084      	sub	sp, #16
    9326:	4603      	mov	r3, r0
    9328:	9100      	str	r1, [sp, #0]
    932a:	f88d 3007 	strb.w	r3, [sp, #7]
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    932e:	2300      	movs	r3, #0
    9330:	9303      	str	r3, [sp, #12]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    9332:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9336:	4a09      	ldr	r2, [pc, #36]	; (935c <Lpspi_Ip_UpdateTransferMode+0x38>)
    9338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    933c:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Transfer mode can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    933e:	9b02      	ldr	r3, [sp, #8]
    9340:	685b      	ldr	r3, [r3, #4]
    9342:	2b02      	cmp	r3, #2
    9344:	d003      	beq.n	934e <Lpspi_Ip_UpdateTransferMode+0x2a>
    {
        State->TransferMode = Mode;
    9346:	9b02      	ldr	r3, [sp, #8]
    9348:	9a00      	ldr	r2, [sp, #0]
    934a:	601a      	str	r2, [r3, #0]
    934c:	e001      	b.n	9352 <Lpspi_Ip_UpdateTransferMode+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    934e:	2301      	movs	r3, #1
    9350:	9303      	str	r3, [sp, #12]
    }
    return Status;
    9352:	9b03      	ldr	r3, [sp, #12]
}
    9354:	4618      	mov	r0, r3
    9356:	b004      	add	sp, #16
    9358:	4770      	bx	lr
    935a:	bf00      	nop
    935c:	1fff8dd8 	.word	0x1fff8dd8

00009360 <Lpspi_Ip_Cancel>:

void Lpspi_Ip_Cancel(uint8 Instance)
{
    9360:	b500      	push	{lr}
    9362:	b087      	sub	sp, #28
    9364:	4603      	mov	r3, r0
    9366:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    uint32 Cfgr1 = 0u;
    936a:	2300      	movs	r3, #0
    936c:	9305      	str	r3, [sp, #20]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    936e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9372:	4a18      	ldr	r2, [pc, #96]	; (93d4 <Lpspi_Ip_Cancel+0x74>)
    9374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9378:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    937a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    937e:	4a16      	ldr	r2, [pc, #88]	; (93d8 <Lpspi_Ip_Cancel+0x78>)
    9380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9384:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10();
    9386:	f00d f857 	bl	16438 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>
    if (LPSPI_IP_BUSY == State->Status)
    938a:	9b03      	ldr	r3, [sp, #12]
    938c:	685b      	ldr	r3, [r3, #4]
    938e:	2b02      	cmp	r3, #2
    9390:	d11a      	bne.n	93c8 <Lpspi_Ip_Cancel+0x68>
    {
        /* Mask Rx to discard received data */
        Base->TCR |= LPSPI_TCR_RXMSK(1);
    9392:	9b04      	ldr	r3, [sp, #16]
    9394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9396:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    939a:	9b04      	ldr	r3, [sp, #16]
    939c:	661a      	str	r2, [r3, #96]	; 0x60
        /* store CFGR1 and restore after all registers are reset */
        Cfgr1 = Base->CFGR1;
    939e:	9b04      	ldr	r3, [sp, #16]
    93a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    93a2:	9305      	str	r3, [sp, #20]
        /* Disable interrupts and DMA requests. */
        /* Clear FIFO */
        /* RTF and RRF will not clear shifter, so RST must be used to ensure old Data in shifter will also be cleared. */
        Base->CR |= LPSPI_CR_RST_MASK;
    93a4:	9b04      	ldr	r3, [sp, #16]
    93a6:	691b      	ldr	r3, [r3, #16]
    93a8:	f043 0202 	orr.w	r2, r3, #2
    93ac:	9b04      	ldr	r3, [sp, #16]
    93ae:	611a      	str	r2, [r3, #16]
        Base->CR &= ~LPSPI_CR_RST_MASK;
    93b0:	9b04      	ldr	r3, [sp, #16]
    93b2:	691b      	ldr	r3, [r3, #16]
    93b4:	f023 0202 	bic.w	r2, r3, #2
    93b8:	9b04      	ldr	r3, [sp, #16]
    93ba:	611a      	str	r2, [r3, #16]
        /* restore CFGR1 */
        Base->CFGR1 = Cfgr1;
    93bc:	9b04      	ldr	r3, [sp, #16]
    93be:	9a05      	ldr	r2, [sp, #20]
    93c0:	625a      	str	r2, [r3, #36]	; 0x24
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->RxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->TxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
        #endif
        /* set State to idle */
        State->Status = LPSPI_IP_IDLE;
    93c2:	9b03      	ldr	r3, [sp, #12]
    93c4:	2201      	movs	r2, #1
    93c6:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10();
    93c8:	f00d f862 	bl	16490 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>
}
    93cc:	bf00      	nop
    93ce:	b007      	add	sp, #28
    93d0:	f85d fb04 	ldr.w	pc, [sp], #4
    93d4:	00018540 	.word	0x00018540
    93d8:	1fff8dd8 	.word	0x1fff8dd8

000093dc <Lpspi_Ip_IrqHandler>:
* @param[in]     Instance            Instance of the hardware unit.
*
* @implements Lpspi_Ip_IrqHandler_Activity
*/
void Lpspi_Ip_IrqHandler(uint8 Instance)
{
    93dc:	b500      	push	{lr}
    93de:	b087      	sub	sp, #28
    93e0:	4603      	mov	r3, r0
    93e2:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    93e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93ea:	4a18      	ldr	r2, [pc, #96]	; (944c <Lpspi_Ip_IrqHandler+0x70>)
    93ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93f0:	9305      	str	r3, [sp, #20]
    const Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    93f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93f6:	4a16      	ldr	r2, [pc, #88]	; (9450 <Lpspi_Ip_IrqHandler+0x74>)
    93f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93fc:	9304      	str	r3, [sp, #16]
    uint32 IrqFlags = 0u;
    93fe:	2300      	movs	r3, #0
    9400:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != State)
    9402:	9b04      	ldr	r3, [sp, #16]
    9404:	2b00      	cmp	r3, #0
    9406:	d016      	beq.n	9436 <Lpspi_Ip_IrqHandler+0x5a>
    {
        /* the driver has been initialized */
        IrqFlags = Base->SR & (LPSPI_SR_TDF_MASK | LPSPI_SR_RDF_MASK | LPSPI_SR_TEF_MASK | LPSPI_SR_REF_MASK);
    9408:	9b05      	ldr	r3, [sp, #20]
    940a:	695a      	ldr	r2, [r3, #20]
    940c:	f641 0303 	movw	r3, #6147	; 0x1803
    9410:	4013      	ands	r3, r2
    9412:	9303      	str	r3, [sp, #12]
        IrqFlags &= Base->IER & (LPSPI_IER_TDIE_MASK | LPSPI_IER_RDIE_MASK | LPSPI_IER_TEIE_MASK | LPSPI_IER_REIE_MASK);
    9414:	9b05      	ldr	r3, [sp, #20]
    9416:	699a      	ldr	r2, [r3, #24]
    9418:	f641 0303 	movw	r3, #6147	; 0x1803
    941c:	4013      	ands	r3, r2
    941e:	9a03      	ldr	r2, [sp, #12]
    9420:	4013      	ands	r3, r2
    9422:	9303      	str	r3, [sp, #12]
        if (0u != IrqFlags)
    9424:	9b03      	ldr	r3, [sp, #12]
    9426:	2b00      	cmp	r3, #0
    9428:	d00b      	beq.n	9442 <Lpspi_Ip_IrqHandler+0x66>
                Lpspi_Ip_TransferProcessHalfDuplex(Instance);    
            }
            else
            #endif
            {
                Lpspi_Ip_TransferProcess(Instance); 
    942a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    942e:	4618      	mov	r0, r3
    9430:	f7fe ffde 	bl	83f0 <Lpspi_Ip_TransferProcess>
    {
        /* the driver has not been initialized */
        /* clear all flags */
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    }
}
    9434:	e005      	b.n	9442 <Lpspi_Ip_IrqHandler+0x66>
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    9436:	9b05      	ldr	r3, [sp, #20]
    9438:	695b      	ldr	r3, [r3, #20]
    943a:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    943e:	9b05      	ldr	r3, [sp, #20]
    9440:	615a      	str	r2, [r3, #20]
}
    9442:	bf00      	nop
    9444:	b007      	add	sp, #28
    9446:	f85d fb04 	ldr.w	pc, [sp], #4
    944a:	bf00      	nop
    944c:	00018540 	.word	0x00018540
    9450:	1fff8dd8 	.word	0x1fff8dd8

00009454 <Lpspi_Ip_GetStatus>:
* @param[in]        Instance - SPI peripheral instance number.
*
* @return           Lpspi_Ip_HwStatusType
*/
Lpspi_Ip_HwStatusType Lpspi_Ip_GetStatus(uint8 Instance)
{
    9454:	b084      	sub	sp, #16
    9456:	4603      	mov	r3, r0
    9458:	f88d 3007 	strb.w	r3, [sp, #7]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_HwStatusType Status = LPSPI_IP_UNINIT;
    945c:	2300      	movs	r3, #0
    945e:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    9460:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9464:	4a06      	ldr	r2, [pc, #24]	; (9480 <Lpspi_Ip_GetStatus+0x2c>)
    9466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    946a:	9302      	str	r3, [sp, #8]
    if (State != NULL_PTR)
    946c:	9b02      	ldr	r3, [sp, #8]
    946e:	2b00      	cmp	r3, #0
    9470:	d002      	beq.n	9478 <Lpspi_Ip_GetStatus+0x24>
    {
        Status = State->Status;
    9472:	9b02      	ldr	r3, [sp, #8]
    9474:	685b      	ldr	r3, [r3, #4]
    9476:	9303      	str	r3, [sp, #12]
    }
    
    return Status;
    9478:	9b03      	ldr	r3, [sp, #12]
}
    947a:	4618      	mov	r0, r3
    947c:	b004      	add	sp, #16
    947e:	4770      	bx	lr
    9480:	1fff8dd8 	.word	0x1fff8dd8

00009484 <Spi_CheckInit>:
static inline Std_ReturnType Spi_CheckInit
    ( 
        const Spi_ConfigType *ConfigPtr,
        uint32 SpiCoreID
    )
{
    9484:	b086      	sub	sp, #24
    9486:	9001      	str	r0, [sp, #4]
    9488:	9100      	str	r1, [sp, #0]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    948a:	2300      	movs	r3, #0
    948c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 Sequence;
#endif

#if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
    /* Configuration sizes must be checked for Post Build & Link Time configurations */
    Channel  = (uint32)(ConfigPtr->SpiMaxChannel);
    9490:	9b01      	ldr	r3, [sp, #4]
    9492:	789b      	ldrb	r3, [r3, #2]
    9494:	9304      	str	r3, [sp, #16]
    Job      = (uint32)(ConfigPtr->SpiMaxJob);
    9496:	9b01      	ldr	r3, [sp, #4]
    9498:	889b      	ldrh	r3, [r3, #4]
    949a:	9303      	str	r3, [sp, #12]
    Sequence = (uint32)(ConfigPtr->SpiMaxSequence);
    949c:	9b01      	ldr	r3, [sp, #4]
    949e:	799b      	ldrb	r3, [r3, #6]
    94a0:	9302      	str	r3, [sp, #8]

    if ((Channel >= SPI_MAX_CHANNEL) || (Job >= SPI_MAX_JOB) || (Sequence >= SPI_MAX_SEQUENCE))
    94a2:	9b04      	ldr	r3, [sp, #16]
    94a4:	2b01      	cmp	r3, #1
    94a6:	d805      	bhi.n	94b4 <Spi_CheckInit+0x30>
    94a8:	9b03      	ldr	r3, [sp, #12]
    94aa:	2b00      	cmp	r3, #0
    94ac:	d102      	bne.n	94b4 <Spi_CheckInit+0x30>
    94ae:	9b02      	ldr	r3, [sp, #8]
    94b0:	2b00      	cmp	r3, #0
    94b2:	d002      	beq.n	94ba <Spi_CheckInit+0x36>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    94b4:	2301      	movs	r3, #1
    94b6:	f88d 3017 	strb.w	r3, [sp, #23]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_CONFIG_OUT_OF_RANGE);
#endif
    }
    if (SpiCoreID != ConfigPtr->SpiCoreUse)
    94ba:	9b01      	ldr	r3, [sp, #4]
    94bc:	689b      	ldr	r3, [r3, #8]
    94be:	9a00      	ldr	r2, [sp, #0]
    94c0:	429a      	cmp	r2, r3
    94c2:	d002      	beq.n	94ca <Spi_CheckInit+0x46>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    94c4:	2301      	movs	r3, #1
    94c6:	f88d 3017 	strb.w	r3, [sp, #23]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_INVALID_POINTER);
#endif
    }
#endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */

    return CheckStatus;
    94ca:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    94ce:	4618      	mov	r0, r3
    94d0:	b006      	add	sp, #24
    94d2:	4770      	bx	lr

000094d4 <Spi_SyncJobsTranfer>:
static Std_ReturnType Spi_SyncJobsTranfer
    (
        const Spi_SequenceConfigType *SequenceConfig,
        uint32 SpiCoreID
    )
{
    94d4:	b500      	push	{lr}
    94d6:	b089      	sub	sp, #36	; 0x24
    94d8:	9001      	str	r0, [sp, #4]
    94da:	9100      	str	r1, [sp, #0]
    Spi_JobType JobsCount;
    const Spi_JobType *JobIndexList;
    Spi_JobType Job;
    Spi_JobStateType *JobState;
    const Spi_JobConfigType *JobConfig;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    94dc:	2300      	movs	r3, #0
    94de:	f88d 3017 	strb.w	r3, [sp, #23]
    
    /* Get the number of jobs in the sequence */
    JobsCount = SequenceConfig->NumJobs;
    94e2:	9b01      	ldr	r3, [sp, #4]
    94e4:	881b      	ldrh	r3, [r3, #0]
    94e6:	f8ad 301e 	strh.w	r3, [sp, #30]
    JobIndexList = SequenceConfig->JobIndexList;
    94ea:	9b01      	ldr	r3, [sp, #4]
    94ec:	689b      	ldr	r3, [r3, #8]
    94ee:	9306      	str	r3, [sp, #24]
    while (0u < JobsCount)
    94f0:	e072      	b.n	95d8 <Spi_SyncJobsTranfer+0x104>
    {
        /* Get the job id */
        Job = *JobIndexList;
    94f2:	9b06      	ldr	r3, [sp, #24]
    94f4:	881b      	ldrh	r3, [r3, #0]
    94f6:	f8ad 3014 	strh.w	r3, [sp, #20]
        /* Set the job status as pending */
        JobState = &Spi_axSpiJobState[Job];
    94fa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    94fe:	009b      	lsls	r3, r3, #2
    9500:	4a3a      	ldr	r2, [pc, #232]	; (95ec <Spi_SyncJobsTranfer+0x118>)
    9502:	4413      	add	r3, r2
    9504:	9304      	str	r3, [sp, #16]
        JobState->Result = SPI_JOB_PENDING;
    9506:	9b04      	ldr	r3, [sp, #16]
    9508:	2201      	movs	r2, #1
    950a:	601a      	str	r2, [r3, #0]
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    950c:	4a38      	ldr	r2, [pc, #224]	; (95f0 <Spi_SyncJobsTranfer+0x11c>)
    950e:	9b00      	ldr	r3, [sp, #0]
    9510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9514:	691a      	ldr	r2, [r3, #16]
    9516:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    951a:	009b      	lsls	r3, r3, #2
    951c:	4413      	add	r3, r2
    951e:	681b      	ldr	r3, [r3, #0]
    9520:	9303      	str	r3, [sp, #12]
        
        /* start job notification to assert the non-cs pin,
        when non-cs pin is used as chipselect*/
        if (NULL_PTR != JobConfig->StartNotification)
    9522:	9b03      	ldr	r3, [sp, #12]
    9524:	68db      	ldr	r3, [r3, #12]
    9526:	2b00      	cmp	r3, #0
    9528:	d002      	beq.n	9530 <Spi_SyncJobsTranfer+0x5c>
        {
            JobConfig->StartNotification();
    952a:	9b03      	ldr	r3, [sp, #12]
    952c:	68db      	ldr	r3, [r3, #12]
    952e:	4798      	blx	r3
        else
        {
            /* Do nothing */
        }
        /* Mark HWUnit as busy */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_BUSY;
    9530:	9b03      	ldr	r3, [sp, #12]
    9532:	7f1b      	ldrb	r3, [r3, #28]
    9534:	4619      	mov	r1, r3
    9536:	4b2f      	ldr	r3, [pc, #188]	; (95f4 <Spi_SyncJobsTranfer+0x120>)
    9538:	2202      	movs	r2, #2
    953a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        Status = Spi_Ipw_SyncTransmit(JobConfig, SpiCoreID);
    953e:	9900      	ldr	r1, [sp, #0]
    9540:	9803      	ldr	r0, [sp, #12]
    9542:	f000 fc5f 	bl	9e04 <Spi_Ipw_SyncTransmit>
    9546:	4603      	mov	r3, r0
    9548:	f88d 3017 	strb.w	r3, [sp, #23]
        
        /* release HWUnit */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_IDLE;
    954c:	9b03      	ldr	r3, [sp, #12]
    954e:	7f1b      	ldrb	r3, [r3, #28]
    9550:	4619      	mov	r1, r3
    9552:	4b28      	ldr	r3, [pc, #160]	; (95f4 <Spi_SyncJobsTranfer+0x120>)
    9554:	2201      	movs	r2, #1
    9556:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        if ((Std_ReturnType)E_OK == Status)
    955a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    955e:	2b00      	cmp	r3, #0
    9560:	d10a      	bne.n	9578 <Spi_SyncJobsTranfer+0xa4>
        {
            /* Job is done set the status as OK */
            JobState->Result = SPI_JOB_OK;
    9562:	9b04      	ldr	r3, [sp, #16]
    9564:	2200      	movs	r2, #0
    9566:	601a      	str	r2, [r3, #0]
            /* Perform job EndNotification (if there is one) */
            if (NULL_PTR != JobConfig->EndNotification)
    9568:	9b03      	ldr	r3, [sp, #12]
    956a:	689b      	ldr	r3, [r3, #8]
    956c:	2b00      	cmp	r3, #0
    956e:	d02b      	beq.n	95c8 <Spi_SyncJobsTranfer+0xf4>
            {
                JobConfig->EndNotification();
    9570:	9b03      	ldr	r3, [sp, #12]
    9572:	689b      	ldr	r3, [r3, #8]
    9574:	4798      	blx	r3
    9576:	e027      	b.n	95c8 <Spi_SyncJobsTranfer+0xf4>
            /* transmission failed */
            /* set the remaining job status (including the current one) as FAILED */
            do
            {
                /* Set the job status as FAILED */
                Spi_axSpiJobState[*JobIndexList].Result = SPI_JOB_FAILED;
    9578:	9b06      	ldr	r3, [sp, #24]
    957a:	881b      	ldrh	r3, [r3, #0]
    957c:	4619      	mov	r1, r3
    957e:	4b1b      	ldr	r3, [pc, #108]	; (95ec <Spi_SyncJobsTranfer+0x118>)
    9580:	2202      	movs	r2, #2
    9582:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                /* Update pointer position for JobConfig */
                JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[*JobIndexList].JobCfg;
    9586:	4a1a      	ldr	r2, [pc, #104]	; (95f0 <Spi_SyncJobsTranfer+0x11c>)
    9588:	9b00      	ldr	r3, [sp, #0]
    958a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    958e:	691a      	ldr	r2, [r3, #16]
    9590:	9b06      	ldr	r3, [sp, #24]
    9592:	881b      	ldrh	r3, [r3, #0]
    9594:	009b      	lsls	r3, r3, #2
    9596:	4413      	add	r3, r2
    9598:	681b      	ldr	r3, [r3, #0]
    959a:	9303      	str	r3, [sp, #12]
                /* Perform job EndNotification (if there is one) */
                if (NULL_PTR != JobConfig->EndNotification)
    959c:	9b03      	ldr	r3, [sp, #12]
    959e:	689b      	ldr	r3, [r3, #8]
    95a0:	2b00      	cmp	r3, #0
    95a2:	d002      	beq.n	95aa <Spi_SyncJobsTranfer+0xd6>
                {
                    JobConfig->EndNotification();
    95a4:	9b03      	ldr	r3, [sp, #12]
    95a6:	689b      	ldr	r3, [r3, #8]
    95a8:	4798      	blx	r3
                }
                else
                {
                    /* Do nothing */
                }
                JobIndexList++;
    95aa:	9b06      	ldr	r3, [sp, #24]
    95ac:	3302      	adds	r3, #2
    95ae:	9306      	str	r3, [sp, #24]
                JobsCount--;
    95b0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    95b4:	3b01      	subs	r3, #1
    95b6:	f8ad 301e 	strh.w	r3, [sp, #30]
            } while (0u < JobsCount);
    95ba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    95be:	2b00      	cmp	r3, #0
    95c0:	d1da      	bne.n	9578 <Spi_SyncJobsTranfer+0xa4>
            JobsCount = 1u;  /* needed to end correctly the outer loop */
    95c2:	2301      	movs	r3, #1
    95c4:	f8ad 301e 	strh.w	r3, [sp, #30]
        }
        /* iterate to next job in sequence */
        JobIndexList++;
    95c8:	9b06      	ldr	r3, [sp, #24]
    95ca:	3302      	adds	r3, #2
    95cc:	9306      	str	r3, [sp, #24]
        JobsCount--;
    95ce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    95d2:	3b01      	subs	r3, #1
    95d4:	f8ad 301e 	strh.w	r3, [sp, #30]
    while (0u < JobsCount)
    95d8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    95dc:	2b00      	cmp	r3, #0
    95de:	d188      	bne.n	94f2 <Spi_SyncJobsTranfer+0x1e>
    } /* while (JobsCount > 0u) */
    return Status;
    95e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    95e4:	4618      	mov	r0, r3
    95e6:	b009      	add	sp, #36	; 0x24
    95e8:	f85d fb04 	ldr.w	pc, [sp], #4
    95ec:	1fff8df4 	.word	0x1fff8df4
    95f0:	1fff8dec 	.word	0x1fff8dec
    95f4:	1fff8de4 	.word	0x1fff8de4

000095f8 <Spi_InitChannelsJobsSeqsState>:
*/
static void Spi_InitChannelsJobsSeqsState
    (
        uint32 SpiCoreID      
    )
{
    95f8:	b088      	sub	sp, #32
    95fa:	9001      	str	r0, [sp, #4]
#endif
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_JobConfigType *JobConfig;
    const Spi_SequenceConfigType *SequenceConfig;
    
    for (Channel = 0u;
    95fc:	2300      	movs	r3, #0
    95fe:	9307      	str	r3, [sp, #28]
    9600:	e034      	b.n	966c <Spi_InitChannelsJobsSeqsState+0x74>
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
        Channel++)
    {
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    9602:	4a4a      	ldr	r2, [pc, #296]	; (972c <Spi_InitChannelsJobsSeqsState+0x134>)
    9604:	9b01      	ldr	r3, [sp, #4]
    9606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    960a:	68da      	ldr	r2, [r3, #12]
    960c:	9b07      	ldr	r3, [sp, #28]
    960e:	009b      	lsls	r3, r3, #2
    9610:	4413      	add	r3, r2
    9612:	681b      	ldr	r3, [r3, #0]
    9614:	9302      	str	r3, [sp, #8]
        /* Check which channel has assigned for current core */
        if((NULL_PTR != ChannelConfig) && (SpiCoreID == ChannelConfig->SpiCoreUse))
    9616:	9b02      	ldr	r3, [sp, #8]
    9618:	2b00      	cmp	r3, #0
    961a:	d024      	beq.n	9666 <Spi_InitChannelsJobsSeqsState+0x6e>
    961c:	9b02      	ldr	r3, [sp, #8]
    961e:	695b      	ldr	r3, [r3, #20]
    9620:	9a01      	ldr	r2, [sp, #4]
    9622:	429a      	cmp	r2, r3
    9624:	d11f      	bne.n	9666 <Spi_InitChannelsJobsSeqsState+0x6e>
        {
            /* Check if configured buffers are External (EB) */
            if (EB == ChannelConfig->BufferType)
    9626:	9b02      	ldr	r3, [sp, #8]
    9628:	681b      	ldr	r3, [r3, #0]
    962a:	2b01      	cmp	r3, #1
    962c:	d10e      	bne.n	964c <Spi_InitChannelsJobsSeqsState+0x54>
            {
                /* Initialize all buffers */
                ChannelConfig->BufferDescriptor->ExternalBufferTX = NULL_PTR;
    962e:	9b02      	ldr	r3, [sp, #8]
    9630:	691b      	ldr	r3, [r3, #16]
    9632:	2200      	movs	r2, #0
    9634:	601a      	str	r2, [r3, #0]
                ChannelConfig->BufferDescriptor->BufferRX = NULL_PTR;
    9636:	9b02      	ldr	r3, [sp, #8]
    9638:	691b      	ldr	r3, [r3, #16]
    963a:	2200      	movs	r2, #0
    963c:	609a      	str	r2, [r3, #8]
    
                /* Channel length is zero for unconfigured external buffers */
                Spi_axSpiChannelState[Channel].Length = (Spi_NumberOfDataType) 0;
    963e:	4a3c      	ldr	r2, [pc, #240]	; (9730 <Spi_InitChannelsJobsSeqsState+0x138>)
    9640:	9b07      	ldr	r3, [sp, #28]
    9642:	009b      	lsls	r3, r3, #2
    9644:	4413      	add	r3, r2
    9646:	2200      	movs	r2, #0
    9648:	805a      	strh	r2, [r3, #2]
    964a:	e007      	b.n	965c <Spi_InitChannelsJobsSeqsState+0x64>
            }
            else
            {
                /* Setup channel length according to configuration */
                Spi_axSpiChannelState[Channel].Length = ChannelConfig->Length;
    964c:	9b02      	ldr	r3, [sp, #8]
    964e:	8999      	ldrh	r1, [r3, #12]
    9650:	4a37      	ldr	r2, [pc, #220]	; (9730 <Spi_InitChannelsJobsSeqsState+0x138>)
    9652:	9b07      	ldr	r3, [sp, #28]
    9654:	009b      	lsls	r3, r3, #2
    9656:	4413      	add	r3, r2
    9658:	460a      	mov	r2, r1
    965a:	805a      	strh	r2, [r3, #2]
            }
            Spi_axSpiChannelState[Channel].Flags = SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    965c:	4a34      	ldr	r2, [pc, #208]	; (9730 <Spi_InitChannelsJobsSeqsState+0x138>)
    965e:	9b07      	ldr	r3, [sp, #28]
    9660:	2101      	movs	r1, #1
    9662:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        Channel++)
    9666:	9b07      	ldr	r3, [sp, #28]
    9668:	3301      	adds	r3, #1
    966a:	9307      	str	r3, [sp, #28]
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
    966c:	4a2f      	ldr	r2, [pc, #188]	; (972c <Spi_InitChannelsJobsSeqsState+0x134>)
    966e:	9b01      	ldr	r3, [sp, #4]
    9670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9674:	789b      	ldrb	r3, [r3, #2]
    9676:	461a      	mov	r2, r3
    for (Channel = 0u;
    9678:	9b07      	ldr	r3, [sp, #28]
    967a:	4293      	cmp	r3, r2
    967c:	d9c1      	bls.n	9602 <Spi_InitChannelsJobsSeqsState+0xa>
        }
    }
    
    /* initialize job results */
    for (Job = 0u;
    967e:	2300      	movs	r3, #0
    9680:	9306      	str	r3, [sp, #24]
    9682:	e019      	b.n	96b8 <Spi_InitChannelsJobsSeqsState+0xc0>
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
        Job++)
    {
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9684:	4a29      	ldr	r2, [pc, #164]	; (972c <Spi_InitChannelsJobsSeqsState+0x134>)
    9686:	9b01      	ldr	r3, [sp, #4]
    9688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    968c:	691a      	ldr	r2, [r3, #16]
    968e:	9b06      	ldr	r3, [sp, #24]
    9690:	009b      	lsls	r3, r3, #2
    9692:	4413      	add	r3, r2
    9694:	681b      	ldr	r3, [r3, #0]
    9696:	9303      	str	r3, [sp, #12]
        if((NULL_PTR != JobConfig) && (SpiCoreID == JobConfig->SpiCoreUse))
    9698:	9b03      	ldr	r3, [sp, #12]
    969a:	2b00      	cmp	r3, #0
    969c:	d009      	beq.n	96b2 <Spi_InitChannelsJobsSeqsState+0xba>
    969e:	9b03      	ldr	r3, [sp, #12]
    96a0:	695b      	ldr	r3, [r3, #20]
    96a2:	9a01      	ldr	r2, [sp, #4]
    96a4:	429a      	cmp	r2, r3
    96a6:	d104      	bne.n	96b2 <Spi_InitChannelsJobsSeqsState+0xba>
        {
            Spi_axSpiJobState[Job].Result = SPI_JOB_OK;
    96a8:	4a22      	ldr	r2, [pc, #136]	; (9734 <Spi_InitChannelsJobsSeqsState+0x13c>)
    96aa:	9b06      	ldr	r3, [sp, #24]
    96ac:	2100      	movs	r1, #0
    96ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Job++)
    96b2:	9b06      	ldr	r3, [sp, #24]
    96b4:	3301      	adds	r3, #1
    96b6:	9306      	str	r3, [sp, #24]
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
    96b8:	4a1c      	ldr	r2, [pc, #112]	; (972c <Spi_InitChannelsJobsSeqsState+0x134>)
    96ba:	9b01      	ldr	r3, [sp, #4]
    96bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96c0:	889b      	ldrh	r3, [r3, #4]
    96c2:	461a      	mov	r2, r3
    for (Job = 0u;
    96c4:	9b06      	ldr	r3, [sp, #24]
    96c6:	4293      	cmp	r3, r2
    96c8:	d9dc      	bls.n	9684 <Spi_InitChannelsJobsSeqsState+0x8c>
            Spi_axSpiJobState[Job].AsyncCrtSequenceState = NULL_PTR;
        #endif
        }
    }
    
    for (Sequence = 0u;
    96ca:	2300      	movs	r3, #0
    96cc:	9305      	str	r3, [sp, #20]
    96ce:	e01f      	b.n	9710 <Spi_InitChannelsJobsSeqsState+0x118>
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
        Sequence++)
    {
        SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    96d0:	4a16      	ldr	r2, [pc, #88]	; (972c <Spi_InitChannelsJobsSeqsState+0x134>)
    96d2:	9b01      	ldr	r3, [sp, #4]
    96d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96d8:	695a      	ldr	r2, [r3, #20]
    96da:	9b05      	ldr	r3, [sp, #20]
    96dc:	009b      	lsls	r3, r3, #2
    96de:	4413      	add	r3, r2
    96e0:	681b      	ldr	r3, [r3, #0]
    96e2:	9304      	str	r3, [sp, #16]
        if ((NULL_PTR != SequenceConfig) && (SpiCoreID == SequenceConfig->SpiCoreUse))
    96e4:	9b04      	ldr	r3, [sp, #16]
    96e6:	2b00      	cmp	r3, #0
    96e8:	d00f      	beq.n	970a <Spi_InitChannelsJobsSeqsState+0x112>
    96ea:	9b04      	ldr	r3, [sp, #16]
    96ec:	685b      	ldr	r3, [r3, #4]
    96ee:	9a01      	ldr	r2, [sp, #4]
    96f0:	429a      	cmp	r2, r3
    96f2:	d10a      	bne.n	970a <Spi_InitChannelsJobsSeqsState+0x112>
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
            Spi_axSpiSequenceState[Sequence].Sequence = SequenceConfig;
            #endif
    
            /* initialize sequence results */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_OK;
    96f4:	4a10      	ldr	r2, [pc, #64]	; (9738 <Spi_InitChannelsJobsSeqsState+0x140>)
    96f6:	9b05      	ldr	r3, [sp, #20]
    96f8:	2100      	movs	r1, #0
    96fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* SPI135: Spi_SyncTransmit() must fail if an other sync transmission
                    is ongoing.*/
            /* mark all HW units as used by the sync transmission, in order to
                force the mutual exclusion of Spi_SyncTransmit() calls */
    
            Spi_au32SpiSeqUsedHWUnits[Sequence] = 0xFFFFFFFFU;
    96fe:	4a0f      	ldr	r2, [pc, #60]	; (973c <Spi_InitChannelsJobsSeqsState+0x144>)
    9700:	9b05      	ldr	r3, [sp, #20]
    9702:	f04f 31ff 	mov.w	r1, #4294967295
    9706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Sequence++)
    970a:	9b05      	ldr	r3, [sp, #20]
    970c:	3301      	adds	r3, #1
    970e:	9305      	str	r3, [sp, #20]
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
    9710:	4a06      	ldr	r2, [pc, #24]	; (972c <Spi_InitChannelsJobsSeqsState+0x134>)
    9712:	9b01      	ldr	r3, [sp, #4]
    9714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9718:	799b      	ldrb	r3, [r3, #6]
    971a:	461a      	mov	r2, r3
    for (Sequence = 0u;
    971c:	9b05      	ldr	r3, [sp, #20]
    971e:	4293      	cmp	r3, r2
    9720:	d9d6      	bls.n	96d0 <Spi_InitChannelsJobsSeqsState+0xd8>
        else
        {
            /* Do nothing */
        }
    }
}
    9722:	bf00      	nop
    9724:	bf00      	nop
    9726:	b008      	add	sp, #32
    9728:	4770      	bx	lr
    972a:	bf00      	nop
    972c:	1fff8dec 	.word	0x1fff8dec
    9730:	1fff8df8 	.word	0x1fff8df8
    9734:	1fff8df4 	.word	0x1fff8df4
    9738:	1fff8df0 	.word	0x1fff8df0
    973c:	1fff8e00 	.word	0x1fff8e00

00009740 <Spi_GetStatusAsyncCheckHwBusy>:
*/
static Spi_StatusType Spi_GetStatusAsyncCheckHwBusy
    (
        uint32 SpiCoreID
    )
{
    9740:	b084      	sub	sp, #16
    9742:	9001      	str	r0, [sp, #4]
    Spi_StatusType StatusFlag = SPI_IDLE;
    9744:	2301      	movs	r3, #1
    9746:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9748:	2300      	movs	r3, #0
    974a:	f88d 300b 	strb.w	r3, [sp, #11]
    974e:	e028      	b.n	97a2 <Spi_GetStatusAsyncCheckHwBusy+0x62>
    {
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9750:	4a18      	ldr	r2, [pc, #96]	; (97b4 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    9752:	9b01      	ldr	r3, [sp, #4]
    9754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9758:	69da      	ldr	r2, [r3, #28]
    975a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    975e:	009b      	lsls	r3, r3, #2
    9760:	4413      	add	r3, r2
    9762:	681b      	ldr	r3, [r3, #0]
    9764:	2b00      	cmp	r3, #0
    9766:	d017      	beq.n	9798 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9768:	4a12      	ldr	r2, [pc, #72]	; (97b4 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    976a:	9b01      	ldr	r3, [sp, #4]
    976c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9770:	69da      	ldr	r2, [r3, #28]
    9772:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9776:	009b      	lsls	r3, r3, #2
    9778:	4413      	add	r3, r2
    977a:	681b      	ldr	r3, [r3, #0]
    977c:	689b      	ldr	r3, [r3, #8]
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    977e:	9a01      	ldr	r2, [sp, #4]
    9780:	429a      	cmp	r2, r3
    9782:	d109      	bne.n	9798 <Spi_GetStatusAsyncCheckHwBusy+0x58>
           )
        {
            if (SPI_BUSY == Spi_axSpiHwUnitQueueArray[HWUnit].Status)
    9784:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9788:	4a0b      	ldr	r2, [pc, #44]	; (97b8 <Spi_GetStatusAsyncCheckHwBusy+0x78>)
    978a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    978e:	2b02      	cmp	r3, #2
    9790:	d102      	bne.n	9798 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            {
                StatusFlag = SPI_BUSY;
    9792:	2302      	movs	r3, #2
    9794:	9303      	str	r3, [sp, #12]
                break;
    9796:	e008      	b.n	97aa <Spi_GetStatusAsyncCheckHwBusy+0x6a>
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9798:	f89d 300b 	ldrb.w	r3, [sp, #11]
    979c:	3301      	adds	r3, #1
    979e:	f88d 300b 	strb.w	r3, [sp, #11]
    97a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    97a6:	2b00      	cmp	r3, #0
    97a8:	d0d2      	beq.n	9750 <Spi_GetStatusAsyncCheckHwBusy+0x10>
        else
        {
            /* Do nothing */
        }
    }
    return StatusFlag;
    97aa:	9b03      	ldr	r3, [sp, #12]
}
    97ac:	4618      	mov	r0, r3
    97ae:	b004      	add	sp, #16
    97b0:	4770      	bx	lr
    97b2:	bf00      	nop
    97b4:	1fff8dec 	.word	0x1fff8dec
    97b8:	1fff8de4 	.word	0x1fff8de4

000097bc <Spi_GetVersionInfo>:
/** @implements Spi_GetVersionInfo_Activity */
void Spi_GetVersionInfo 
    (
        Std_VersionInfoType *versioninfo
    )
{
    97bc:	b082      	sub	sp, #8
    97be:	9001      	str	r0, [sp, #4]
        (void)Det_ReportError((uint16)SPI_MODULE_ID,(uint8)0,SPI_GETVERSIONINFO_ID,SPI_E_PARAM_POINTER);
    }
    else
    {
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
    versioninfo->vendorID = (uint16)SPI_VENDOR_ID;
    97c0:	9b01      	ldr	r3, [sp, #4]
    97c2:	222b      	movs	r2, #43	; 0x2b
    97c4:	801a      	strh	r2, [r3, #0]
    versioninfo->moduleID = (uint8)SPI_MODULE_ID;
    97c6:	9b01      	ldr	r3, [sp, #4]
    97c8:	2253      	movs	r2, #83	; 0x53
    97ca:	805a      	strh	r2, [r3, #2]
    versioninfo->sw_major_version = (uint8)SPI_SW_MAJOR_VERSION;
    97cc:	9b01      	ldr	r3, [sp, #4]
    97ce:	2202      	movs	r2, #2
    97d0:	711a      	strb	r2, [r3, #4]
    versioninfo->sw_minor_version = (uint8)SPI_SW_MINOR_VERSION;
    97d2:	9b01      	ldr	r3, [sp, #4]
    97d4:	2200      	movs	r2, #0
    97d6:	715a      	strb	r2, [r3, #5]
    versioninfo->sw_patch_version = (uint8)SPI_SW_PATCH_VERSION;
    97d8:	9b01      	ldr	r3, [sp, #4]
    97da:	2200      	movs	r2, #0
    97dc:	719a      	strb	r2, [r3, #6]
#if(SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
}
    97de:	bf00      	nop
    97e0:	b002      	add	sp, #8
    97e2:	4770      	bx	lr

000097e4 <Spi_Init>:
/** @implements Spi_Init_Activity */
void Spi_Init
    (
        const Spi_ConfigType *ConfigPtr
    )
{
    97e4:	b500      	push	{lr}
    97e6:	b085      	sub	sp, #20
    97e8:	9001      	str	r0, [sp, #4]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    97ea:	2300      	movs	r3, #0
    97ec:	f88d 300e 	strb.w	r3, [sp, #14]

    SpiCoreID = Spi_GetCoreID;
    97f0:	2300      	movs	r3, #0
    97f2:	9302      	str	r3, [sp, #8]
    CheckStatus = Spi_InitCheckDemError(SpiCoreID, ConfigPtr);
    if ((Std_ReturnType)E_OK == CheckStatus) 
    {
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/

    CheckStatus = Spi_CheckInit(ConfigPtr, SpiCoreID);
    97f4:	9902      	ldr	r1, [sp, #8]
    97f6:	9801      	ldr	r0, [sp, #4]
    97f8:	f7ff fe44 	bl	9484 <Spi_CheckInit>
    97fc:	4603      	mov	r3, r0
    97fe:	f88d 300e 	strb.w	r3, [sp, #14]

    if((Std_ReturnType)E_OK == CheckStatus )
    9802:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9806:	2b00      	cmp	r3, #0
    9808:	d144      	bne.n	9894 <Spi_Init+0xb0>
    {
    #if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
        Spi_apxSpiConfigPtr[SpiCoreID] = ConfigPtr;
    980a:	4924      	ldr	r1, [pc, #144]	; (989c <Spi_Init+0xb8>)
    980c:	9b02      	ldr	r3, [sp, #8]
    980e:	9a01      	ldr	r2, [sp, #4]
    9810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #else /* (SPI_CONFIG_VARIANT == SPI_VARIANT_PRECOMPILE) */
        Spi_apxSpiConfigPtr[SpiCoreID] = Spi_PBCfgVariantPredefined[SpiCoreID];
    #endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */
    /* Initiate Channels, Jobs, Sequences state */
    Spi_InitChannelsJobsSeqsState(SpiCoreID);
    9814:	9802      	ldr	r0, [sp, #8]
    9816:	f7ff feef 	bl	95f8 <Spi_InitChannelsJobsSeqsState>
        
        /* initialize all physical HWUnits */
        for (HWUnit = (Spi_HWUnitType) 0;
    981a:	2300      	movs	r3, #0
    981c:	f88d 300f 	strb.w	r3, [sp, #15]
    9820:	e034      	b.n	988c <Spi_Init+0xa8>
            HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
            HWUnit++)
        {
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9822:	4a1e      	ldr	r2, [pc, #120]	; (989c <Spi_Init+0xb8>)
    9824:	9b02      	ldr	r3, [sp, #8]
    9826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    982a:	69da      	ldr	r2, [r3, #28]
    982c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9830:	009b      	lsls	r3, r3, #2
    9832:	4413      	add	r3, r2
    9834:	681b      	ldr	r3, [r3, #0]
    9836:	2b00      	cmp	r3, #0
    9838:	d023      	beq.n	9882 <Spi_Init+0x9e>
               (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    983a:	4a18      	ldr	r2, [pc, #96]	; (989c <Spi_Init+0xb8>)
    983c:	9b02      	ldr	r3, [sp, #8]
    983e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9842:	69da      	ldr	r2, [r3, #28]
    9844:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9848:	009b      	lsls	r3, r3, #2
    984a:	4413      	add	r3, r2
    984c:	681b      	ldr	r3, [r3, #0]
    984e:	689b      	ldr	r3, [r3, #8]
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9850:	9a02      	ldr	r2, [sp, #8]
    9852:	429a      	cmp	r2, r3
    9854:	d115      	bne.n	9882 <Spi_Init+0x9e>
              )
            {
                Spi_Ipw_Init(HWUnit, Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig);
    9856:	4a11      	ldr	r2, [pc, #68]	; (989c <Spi_Init+0xb8>)
    9858:	9b02      	ldr	r3, [sp, #8]
    985a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    985e:	69da      	ldr	r2, [r3, #28]
    9860:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9864:	009b      	lsls	r3, r3, #2
    9866:	4413      	add	r3, r2
    9868:	681a      	ldr	r2, [r3, #0]
    986a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    986e:	4611      	mov	r1, r2
    9870:	4618      	mov	r0, r3
    9872:	f000 fa8c 	bl	9d8e <Spi_Ipw_Init>

#if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
                /* initialize the Job lists => no scheduled job for the unit */
                Spi_InitJobsList(HWUnit);
#endif
                Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_IDLE;
    9876:	f89d 300f 	ldrb.w	r3, [sp, #15]
    987a:	4a09      	ldr	r2, [pc, #36]	; (98a0 <Spi_Init+0xbc>)
    987c:	2101      	movs	r1, #1
    987e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            HWUnit++)
    9882:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9886:	3301      	adds	r3, #1
    9888:	f88d 300f 	strb.w	r3, [sp, #15]
        for (HWUnit = (Spi_HWUnitType) 0;
    988c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9890:	2b00      	cmp	r3, #0
    9892:	d0c6      	beq.n	9822 <Spi_Init+0x3e>
    }

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/
}
    9894:	bf00      	nop
    9896:	b005      	add	sp, #20
    9898:	f85d fb04 	ldr.w	pc, [sp], #4
    989c:	1fff8dec 	.word	0x1fff8dec
    98a0:	1fff8de4 	.word	0x1fff8de4

000098a4 <Spi_DeInit>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_DeInit_Activity
*/
Std_ReturnType Spi_DeInit(void)
{
    98a4:	b500      	push	{lr}
    98a6:	b083      	sub	sp, #12
    Std_ReturnType TempExit = (Std_ReturnType)E_OK;
    98a8:	2300      	movs	r3, #0
    98aa:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;

    SpiCoreID = Spi_GetCoreID;
    98ae:	2300      	movs	r3, #0
    98b0:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Check if Spi Status is Busy */
        if (SPI_BUSY == Spi_GetStatus())
    98b2:	f000 f8b1 	bl	9a18 <Spi_GetStatus>
    98b6:	4603      	mov	r3, r0
    98b8:	2b02      	cmp	r3, #2
    98ba:	d103      	bne.n	98c4 <Spi_DeInit+0x20>
        {
            TempExit = E_NOT_OK;
    98bc:	2301      	movs	r3, #1
    98be:	f88d 3007 	strb.w	r3, [sp, #7]
    98c2:	e037      	b.n	9934 <Spi_DeInit+0x90>
        }
        else
        {
            /* De-initialize all physical HWUnits */
            for (HWUnit = (Spi_HWUnitType) 0;
    98c4:	2300      	movs	r3, #0
    98c6:	f88d 3006 	strb.w	r3, [sp, #6]
    98ca:	e02a      	b.n	9922 <Spi_DeInit+0x7e>
                 HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
                 HWUnit++)
            {
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    98cc:	4a1c      	ldr	r2, [pc, #112]	; (9940 <Spi_DeInit+0x9c>)
    98ce:	9b00      	ldr	r3, [sp, #0]
    98d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98d4:	69da      	ldr	r2, [r3, #28]
    98d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98da:	009b      	lsls	r3, r3, #2
    98dc:	4413      	add	r3, r2
    98de:	681b      	ldr	r3, [r3, #0]
    98e0:	2b00      	cmp	r3, #0
    98e2:	d019      	beq.n	9918 <Spi_DeInit+0x74>
                    (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    98e4:	4a16      	ldr	r2, [pc, #88]	; (9940 <Spi_DeInit+0x9c>)
    98e6:	9b00      	ldr	r3, [sp, #0]
    98e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98ec:	69da      	ldr	r2, [r3, #28]
    98ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98f2:	009b      	lsls	r3, r3, #2
    98f4:	4413      	add	r3, r2
    98f6:	681b      	ldr	r3, [r3, #0]
    98f8:	689b      	ldr	r3, [r3, #8]
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    98fa:	9a00      	ldr	r2, [sp, #0]
    98fc:	429a      	cmp	r2, r3
    98fe:	d10b      	bne.n	9918 <Spi_DeInit+0x74>
                   )
                {
                    Spi_Ipw_DeInit(HWUnit, SpiCoreID);
    9900:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9904:	9900      	ldr	r1, [sp, #0]
    9906:	4618      	mov	r0, r3
    9908:	f000 fa54 	bl	9db4 <Spi_Ipw_DeInit>
    
                    Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_UNINIT;
    990c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9910:	4a0c      	ldr	r2, [pc, #48]	; (9944 <Spi_DeInit+0xa0>)
    9912:	2100      	movs	r1, #0
    9914:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                 HWUnit++)
    9918:	f89d 3006 	ldrb.w	r3, [sp, #6]
    991c:	3301      	adds	r3, #1
    991e:	f88d 3006 	strb.w	r3, [sp, #6]
            for (HWUnit = (Spi_HWUnitType) 0;
    9922:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9926:	2b00      	cmp	r3, #0
    9928:	d0d0      	beq.n	98cc <Spi_DeInit+0x28>
                {
                    /* Do nothing */
                }
            }
            /* Reset configuration pointer */
            Spi_apxSpiConfigPtr[SpiCoreID] = NULL_PTR;
    992a:	4a05      	ldr	r2, [pc, #20]	; (9940 <Spi_DeInit+0x9c>)
    992c:	9b00      	ldr	r3, [sp, #0]
    992e:	2100      	movs	r1, #0
    9930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return TempExit;
    9934:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
    9938:	4618      	mov	r0, r3
    993a:	b003      	add	sp, #12
    993c:	f85d fb04 	ldr.w	pc, [sp], #4
    9940:	1fff8dec 	.word	0x1fff8dec
    9944:	1fff8de4 	.word	0x1fff8de4

00009948 <Spi_SetupEB>:
        Spi_ChannelType Channel,
        const Spi_DataBufferType  *SrcDataBufferPtr,
        Spi_DataBufferType *DesDataBufferPtr,
        Spi_NumberOfDataType Length
    )
{
    9948:	b500      	push	{lr}
    994a:	b089      	sub	sp, #36	; 0x24
    994c:	9102      	str	r1, [sp, #8]
    994e:	9201      	str	r2, [sp, #4]
    9950:	461a      	mov	r2, r3
    9952:	4603      	mov	r3, r0
    9954:	f88d 300f 	strb.w	r3, [sp, #15]
    9958:	4613      	mov	r3, r2
    995a:	f8ad 300c 	strh.w	r3, [sp, #12]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    995e:	2300      	movs	r3, #0
    9960:	f88d 301f 	strb.w	r3, [sp, #31]
    Spi_ChannelStateType *ChannelState;
    const Spi_ChannelConfigType *ChannelConfig;
    uint32 SpiCoreID;

    /* get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9964:	2300      	movs	r3, #0
    9966:	9306      	str	r3, [sp, #24]
        Status = (Std_ReturnType)E_NOT_OK;
    }
    else
    {
#endif
        ChannelState = &Spi_axSpiChannelState[Channel];
    9968:	f89d 300f 	ldrb.w	r3, [sp, #15]
    996c:	009b      	lsls	r3, r3, #2
    996e:	4a28      	ldr	r2, [pc, #160]	; (9a10 <Spi_SetupEB+0xc8>)
    9970:	4413      	add	r3, r2
    9972:	9305      	str	r3, [sp, #20]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    9974:	4a27      	ldr	r2, [pc, #156]	; (9a14 <Spi_SetupEB+0xcc>)
    9976:	9b06      	ldr	r3, [sp, #24]
    9978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    997c:	68da      	ldr	r2, [r3, #12]
    997e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9982:	009b      	lsls	r3, r3, #2
    9984:	4413      	add	r3, r2
    9986:	681b      	ldr	r3, [r3, #0]
    9988:	9304      	str	r3, [sp, #16]
        /* exit early if this is the wrong buffer type */
        if (IB == ChannelConfig->BufferType)
    998a:	9b04      	ldr	r3, [sp, #16]
    998c:	681b      	ldr	r3, [r3, #0]
    998e:	2b00      	cmp	r3, #0
    9990:	d103      	bne.n	999a <Spi_SetupEB+0x52>
        {
            /* Call Det_ReportError */
#if (SPI_DEV_ERROR_DETECT == STD_ON)
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_SETUPEB_ID,SPI_E_PARAM_CHANNEL);
#endif
            Status = (Std_ReturnType)E_NOT_OK;
    9992:	2301      	movs	r3, #1
    9994:	f88d 301f 	strb.w	r3, [sp, #31]
    9998:	e033      	b.n	9a02 <Spi_SetupEB+0xba>
            /* Length and Framesize - aren't compatible */
            /* If 8 < Framesize =< 16: Length must be divisible by 2 */
            /* If 16 < Framesize =< 32: Length must be divisible by 4 */
            Status = Spi_SetupEbCheckLength(ChannelConfig, Length);
#endif
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05();
    999a:	f00c fbb3 	bl	16104 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>
            /* save the new parameters */
            ChannelConfig->BufferDescriptor->ExternalBufferTX = SrcDataBufferPtr;
    999e:	9b04      	ldr	r3, [sp, #16]
    99a0:	691b      	ldr	r3, [r3, #16]
    99a2:	9a02      	ldr	r2, [sp, #8]
    99a4:	601a      	str	r2, [r3, #0]
            ChannelConfig->BufferDescriptor->BufferRX = DesDataBufferPtr;
    99a6:	9b04      	ldr	r3, [sp, #16]
    99a8:	691b      	ldr	r3, [r3, #16]
    99aa:	9a01      	ldr	r2, [sp, #4]
    99ac:	609a      	str	r2, [r3, #8]

            ChannelState->Length = Length;
    99ae:	9b05      	ldr	r3, [sp, #20]
    99b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    99b4:	805a      	strh	r2, [r3, #2]

            /* if source data pointer is zero, transmit default value */
            if (NULL_PTR == SrcDataBufferPtr)
    99b6:	9b02      	ldr	r3, [sp, #8]
    99b8:	2b00      	cmp	r3, #0
    99ba:	d107      	bne.n	99cc <Spi_SetupEB+0x84>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    99bc:	9b05      	ldr	r3, [sp, #20]
    99be:	781b      	ldrb	r3, [r3, #0]
    99c0:	f043 0301 	orr.w	r3, r3, #1
    99c4:	b2da      	uxtb	r2, r3
    99c6:	9b05      	ldr	r3, [sp, #20]
    99c8:	701a      	strb	r2, [r3, #0]
    99ca:	e006      	b.n	99da <Spi_SetupEB+0x92>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_TX_DEFAULT_U8);
    99cc:	9b05      	ldr	r3, [sp, #20]
    99ce:	781b      	ldrb	r3, [r3, #0]
    99d0:	f023 0301 	bic.w	r3, r3, #1
    99d4:	b2da      	uxtb	r2, r3
    99d6:	9b05      	ldr	r3, [sp, #20]
    99d8:	701a      	strb	r2, [r3, #0]
            }

            /* if destination data pointer is zero, discard receiving data */
            if (NULL_PTR == DesDataBufferPtr)
    99da:	9b01      	ldr	r3, [sp, #4]
    99dc:	2b00      	cmp	r3, #0
    99de:	d107      	bne.n	99f0 <Spi_SetupEB+0xa8>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_RX_DISCARD_U8;
    99e0:	9b05      	ldr	r3, [sp, #20]
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	f043 0302 	orr.w	r3, r3, #2
    99e8:	b2da      	uxtb	r2, r3
    99ea:	9b05      	ldr	r3, [sp, #20]
    99ec:	701a      	strb	r2, [r3, #0]
    99ee:	e006      	b.n	99fe <Spi_SetupEB+0xb6>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_RX_DISCARD_U8);
    99f0:	9b05      	ldr	r3, [sp, #20]
    99f2:	781b      	ldrb	r3, [r3, #0]
    99f4:	f023 0302 	bic.w	r3, r3, #2
    99f8:	b2da      	uxtb	r2, r3
    99fa:	9b05      	ldr	r3, [sp, #20]
    99fc:	701a      	strb	r2, [r3, #0]
            }
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05();
    99fe:	f00c fbad 	bl	1615c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>
        }
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return Status;
    9a02:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9a06:	4618      	mov	r0, r3
    9a08:	b009      	add	sp, #36	; 0x24
    9a0a:	f85d fb04 	ldr.w	pc, [sp], #4
    9a0e:	bf00      	nop
    9a10:	1fff8df8 	.word	0x1fff8df8
    9a14:	1fff8dec 	.word	0x1fff8dec

00009a18 <Spi_GetStatus>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_GetStatus_Activity
*/
Spi_StatusType Spi_GetStatus(void)
{
    9a18:	b500      	push	{lr}
    9a1a:	b085      	sub	sp, #20
    Spi_StatusType StatusFlag = SPI_IDLE;
    9a1c:	2301      	movs	r3, #1
    9a1e:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    
    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9a20:	2300      	movs	r3, #0
    9a22:	9301      	str	r3, [sp, #4]

    if (NULL_PTR == Spi_apxSpiConfigPtr[SpiCoreID])
    9a24:	4a22      	ldr	r2, [pc, #136]	; (9ab0 <Spi_GetStatus+0x98>)
    9a26:	9b01      	ldr	r3, [sp, #4]
    9a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d102      	bne.n	9a36 <Spi_GetStatus+0x1e>
        /* If Development Error Detection is enabled, report error if not */
        /* initialized */
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSTATUS_ID,SPI_E_UNINIT);
#endif
        StatusFlag = SPI_UNINIT;
    9a30:	2300      	movs	r3, #0
    9a32:	9303      	str	r3, [sp, #12]
    9a34:	e037      	b.n	9aa6 <Spi_GetStatus+0x8e>
    }
    else
    {
        /* The SPI Handler Driver software module shall be busy when any
           HWUnit is busy */
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9a36:	2300      	movs	r3, #0
    9a38:	f88d 300b 	strb.w	r3, [sp, #11]
    9a3c:	e028      	b.n	9a90 <Spi_GetStatus+0x78>
        {
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9a3e:	4a1c      	ldr	r2, [pc, #112]	; (9ab0 <Spi_GetStatus+0x98>)
    9a40:	9b01      	ldr	r3, [sp, #4]
    9a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a46:	69da      	ldr	r2, [r3, #28]
    9a48:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a4c:	009b      	lsls	r3, r3, #2
    9a4e:	4413      	add	r3, r2
    9a50:	681b      	ldr	r3, [r3, #0]
    9a52:	2b00      	cmp	r3, #0
    9a54:	d017      	beq.n	9a86 <Spi_GetStatus+0x6e>
                (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9a56:	4a16      	ldr	r2, [pc, #88]	; (9ab0 <Spi_GetStatus+0x98>)
    9a58:	9b01      	ldr	r3, [sp, #4]
    9a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a5e:	69da      	ldr	r2, [r3, #28]
    9a60:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a64:	009b      	lsls	r3, r3, #2
    9a66:	4413      	add	r3, r2
    9a68:	681b      	ldr	r3, [r3, #0]
    9a6a:	689b      	ldr	r3, [r3, #8]
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9a6c:	9a01      	ldr	r2, [sp, #4]
    9a6e:	429a      	cmp	r2, r3
    9a70:	d109      	bne.n	9a86 <Spi_GetStatus+0x6e>
               )
            {
                if (1u == Spi_au32SpiBusySyncHWUnitsStatus[HWUnit])
    9a72:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a76:	4a0f      	ldr	r2, [pc, #60]	; (9ab4 <Spi_GetStatus+0x9c>)
    9a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a7c:	2b01      	cmp	r3, #1
    9a7e:	d102      	bne.n	9a86 <Spi_GetStatus+0x6e>
                {
                    StatusFlag = SPI_BUSY;
    9a80:	2302      	movs	r3, #2
    9a82:	9303      	str	r3, [sp, #12]
                    break;
    9a84:	e008      	b.n	9a98 <Spi_GetStatus+0x80>
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9a86:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a8a:	3301      	adds	r3, #1
    9a8c:	f88d 300b 	strb.w	r3, [sp, #11]
    9a90:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a94:	2b00      	cmp	r3, #0
    9a96:	d0d2      	beq.n	9a3e <Spi_GetStatus+0x26>
            {
                /* Do nothing */
            }
        }
        /* check for busy HWUnit in async transmissions */
        if (SPI_BUSY != StatusFlag)
    9a98:	9b03      	ldr	r3, [sp, #12]
    9a9a:	2b02      	cmp	r3, #2
    9a9c:	d003      	beq.n	9aa6 <Spi_GetStatus+0x8e>
        {
            /* Note: Checking for IsSync attribute for HWUnit is not really needed
                 It is preferable to skip this check in order to have a more compact code
            */
            StatusFlag = Spi_GetStatusAsyncCheckHwBusy(SpiCoreID);
    9a9e:	9801      	ldr	r0, [sp, #4]
    9aa0:	f7ff fe4e 	bl	9740 <Spi_GetStatusAsyncCheckHwBusy>
    9aa4:	9003      	str	r0, [sp, #12]
        else
        {
            /* Do notthing */
        }
    }
    return StatusFlag;
    9aa6:	9b03      	ldr	r3, [sp, #12]
}
    9aa8:	4618      	mov	r0, r3
    9aaa:	b005      	add	sp, #20
    9aac:	f85d fb04 	ldr.w	pc, [sp], #4
    9ab0:	1fff8dec 	.word	0x1fff8dec
    9ab4:	1fff8e04 	.word	0x1fff8e04

00009ab8 <Spi_GetJobResult>:
/** @implements Spi_GetJobResult_Activity */
Spi_JobResultType Spi_GetJobResult
    (
        Spi_JobType Job
    )
{
    9ab8:	b084      	sub	sp, #16
    9aba:	4603      	mov	r3, r0
    9abc:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETJOBRESULT_ID,SPI_E_PARAM_CONFIG);
    }
    else
    {
#endif
        JobResult = Spi_axSpiJobState[Job].Result;
    9ac0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9ac4:	4a03      	ldr	r2, [pc, #12]	; (9ad4 <Spi_GetJobResult+0x1c>)
    9ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aca:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return JobResult;
    9acc:	9b03      	ldr	r3, [sp, #12]
}
    9ace:	4618      	mov	r0, r3
    9ad0:	b004      	add	sp, #16
    9ad2:	4770      	bx	lr
    9ad4:	1fff8df4 	.word	0x1fff8df4

00009ad8 <Spi_GetSequenceResult>:
/** @implements Spi_GetSequenceResult_Activity */
Spi_SeqResultType Spi_GetSequenceResult
    (
        Spi_SequenceType Sequence
    )
{
    9ad8:	b084      	sub	sp, #16
    9ada:	4603      	mov	r3, r0
    9adc:	f88d 3007 	strb.w	r3, [sp, #7]
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSEQUENCERESULT_ID,SPI_E_PARAM_CONFIG);
        }
        else
        {
#endif
           SequenceResult = Spi_axSpiSequenceState[Sequence].Result;
    9ae0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ae4:	4a03      	ldr	r2, [pc, #12]	; (9af4 <Spi_GetSequenceResult+0x1c>)
    9ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aea:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif

    return SequenceResult;
    9aec:	9b03      	ldr	r3, [sp, #12]
}
    9aee:	4618      	mov	r0, r3
    9af0:	b004      	add	sp, #16
    9af2:	4770      	bx	lr
    9af4:	1fff8df0 	.word	0x1fff8df0

00009af8 <Spi_SyncTransmit>:
/** @implements Spi_SyncTransmit_Activity */
Std_ReturnType Spi_SyncTransmit
    (
        Spi_SequenceType Sequence
    )
{
    9af8:	b500      	push	{lr}
    9afa:	b08b      	sub	sp, #44	; 0x2c
    9afc:	4603      	mov	r3, r0
    9afe:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SequenceStateType *SequenceState;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9b02:	2300      	movs	r3, #0
    9b04:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Spi_JobType Job;
    const Spi_JobConfigType *JobConfig;
    uint32 SpiCoreID;

    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9b08:	2300      	movs	r3, #0
    9b0a:	9308      	str	r3, [sp, #32]
        Status = Spi_SynctransmitCheckJobsIsValid(SequenceConfig, SpiCoreID);

        if ((Std_ReturnType)E_NOT_OK != Status)
        {
#endif /* (SPI_DEV_ERROR_DETECT == STD_ON) */
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    9b0c:	4a60      	ldr	r2, [pc, #384]	; (9c90 <Spi_SyncTransmit+0x198>)
    9b0e:	9b08      	ldr	r3, [sp, #32]
    9b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b14:	695a      	ldr	r2, [r3, #20]
    9b16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b1a:	009b      	lsls	r3, r3, #2
    9b1c:	4413      	add	r3, r2
    9b1e:	681b      	ldr	r3, [r3, #0]
    9b20:	9307      	str	r3, [sp, #28]
            /* Get the number of jobs in the sequence */
            NumJobsInSequence = SequenceConfig->NumJobs;
    9b22:	9b07      	ldr	r3, [sp, #28]
    9b24:	881b      	ldrh	r3, [r3, #0]
    9b26:	f8ad 301a 	strh.w	r3, [sp, #26]

            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06();
    9b2a:	f00c fb3d 	bl	161a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>
            /* check if there are HW units already running */
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9b2e:	2300      	movs	r3, #0
    9b30:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9b34:	e017      	b.n	9b66 <Spi_SyncTransmit+0x6e>
            {
                if (0u != ((Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] << HWUnit) & Spi_au32SpiSeqUsedHWUnits[Sequence]))
    9b36:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9b3a:	4a56      	ldr	r2, [pc, #344]	; (9c94 <Spi_SyncTransmit+0x19c>)
    9b3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9b40:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9b44:	409a      	lsls	r2, r3
    9b46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b4a:	4953      	ldr	r1, [pc, #332]	; (9c98 <Spi_SyncTransmit+0x1a0>)
    9b4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    9b50:	4013      	ands	r3, r2
    9b52:	2b00      	cmp	r3, #0
    9b54:	d002      	beq.n	9b5c <Spi_SyncTransmit+0x64>
                {
                    Status = (Std_ReturnType)E_NOT_OK;
    9b56:	2301      	movs	r3, #1
    9b58:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9b5c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9b60:	3301      	adds	r3, #1
    9b62:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9b66:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9b6a:	2b00      	cmp	r3, #0
    9b6c:	d0e3      	beq.n	9b36 <Spi_SyncTransmit+0x3e>
                {
                    /* Do notthing */
                }
            }
            
            if ((Std_ReturnType)E_NOT_OK != Status)
    9b6e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9b72:	2b01      	cmp	r3, #1
    9b74:	f000 8083 	beq.w	9c7e <Spi_SyncTransmit+0x186>
            {
                /* Set the sequence as pending */
                SequenceState = &Spi_axSpiSequenceState[Sequence];
    9b78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b7c:	009b      	lsls	r3, r3, #2
    9b7e:	4a47      	ldr	r2, [pc, #284]	; (9c9c <Spi_SyncTransmit+0x1a4>)
    9b80:	4413      	add	r3, r2
    9b82:	9305      	str	r3, [sp, #20]
                SequenceState->Result = SPI_SEQ_PENDING;
    9b84:	9b05      	ldr	r3, [sp, #20]
    9b86:	2201      	movs	r2, #1
    9b88:	601a      	str	r2, [r3, #0]
                /* set used HW units as busy */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9b8a:	2300      	movs	r3, #0
    9b8c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9b90:	e022      	b.n	9bd8 <Spi_SyncTransmit+0xe0>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9b92:	9b07      	ldr	r3, [sp, #28]
    9b94:	689a      	ldr	r2, [r3, #8]
    9b96:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9b9a:	005b      	lsls	r3, r3, #1
    9b9c:	4413      	add	r3, r2
    9b9e:	881b      	ldrh	r3, [r3, #0]
    9ba0:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9ba4:	4a3a      	ldr	r2, [pc, #232]	; (9c90 <Spi_SyncTransmit+0x198>)
    9ba6:	9b08      	ldr	r3, [sp, #32]
    9ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bac:	691a      	ldr	r2, [r3, #16]
    9bae:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9bb2:	009b      	lsls	r3, r3, #2
    9bb4:	4413      	add	r3, r2
    9bb6:	681b      	ldr	r3, [r3, #0]
    9bb8:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9bba:	9b03      	ldr	r3, [sp, #12]
    9bbc:	7f1b      	ldrb	r3, [r3, #28]
    9bbe:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 1u;
    9bc2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9bc6:	4a33      	ldr	r2, [pc, #204]	; (9c94 <Spi_SyncTransmit+0x19c>)
    9bc8:	2101      	movs	r1, #1
    9bca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9bce:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9bd2:	3301      	adds	r3, #1
    9bd4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9bd8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9bdc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9be0:	429a      	cmp	r2, r3
    9be2:	d3d6      	bcc.n	9b92 <Spi_SyncTransmit+0x9a>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9be4:	f00c fb0c 	bl	16200 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
                /* Transmit Jobs */
                Status = Spi_SyncJobsTranfer(SequenceConfig, SpiCoreID);
    9be8:	9908      	ldr	r1, [sp, #32]
    9bea:	9807      	ldr	r0, [sp, #28]
    9bec:	f7ff fc72 	bl	94d4 <Spi_SyncJobsTranfer>
    9bf0:	4603      	mov	r3, r0
    9bf2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                
                if ((Std_ReturnType)E_OK == Status)
    9bf6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9bfa:	2b00      	cmp	r3, #0
    9bfc:	d103      	bne.n	9c06 <Spi_SyncTransmit+0x10e>
                {
                    /* Set the sequence as OK */
                    SequenceState->Result = SPI_SEQ_OK;
    9bfe:	9b05      	ldr	r3, [sp, #20]
    9c00:	2200      	movs	r2, #0
    9c02:	601a      	str	r2, [r3, #0]
    9c04:	e002      	b.n	9c0c <Spi_SyncTransmit+0x114>
#endif
                }
                else
                {
                    /* Set the sequence as FAILED */
                    SequenceState->Result = SPI_SEQ_FAILED;
    9c06:	9b05      	ldr	r3, [sp, #20]
    9c08:	2202      	movs	r2, #2
    9c0a:	601a      	str	r2, [r3, #0]
                    /* Report to DEM */
                    Spi_DemReportStatus(SpiCoreID, DEM_EVENT_STATUS_FAILED);
#endif
                }
                
                SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07();
    9c0c:	f00c fb1e 	bl	1624c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>
                /* set used HW units as idle */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9c10:	2300      	movs	r3, #0
    9c12:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9c16:	e022      	b.n	9c5e <Spi_SyncTransmit+0x166>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9c18:	9b07      	ldr	r3, [sp, #28]
    9c1a:	689a      	ldr	r2, [r3, #8]
    9c1c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c20:	005b      	lsls	r3, r3, #1
    9c22:	4413      	add	r3, r2
    9c24:	881b      	ldrh	r3, [r3, #0]
    9c26:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9c2a:	4a19      	ldr	r2, [pc, #100]	; (9c90 <Spi_SyncTransmit+0x198>)
    9c2c:	9b08      	ldr	r3, [sp, #32]
    9c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c32:	691a      	ldr	r2, [r3, #16]
    9c34:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9c38:	009b      	lsls	r3, r3, #2
    9c3a:	4413      	add	r3, r2
    9c3c:	681b      	ldr	r3, [r3, #0]
    9c3e:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9c40:	9b03      	ldr	r3, [sp, #12]
    9c42:	7f1b      	ldrb	r3, [r3, #28]
    9c44:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 0u;
    9c48:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9c4c:	4a11      	ldr	r2, [pc, #68]	; (9c94 <Spi_SyncTransmit+0x19c>)
    9c4e:	2100      	movs	r1, #0
    9c50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9c54:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c58:	3301      	adds	r3, #1
    9c5a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9c5e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9c62:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9c66:	429a      	cmp	r2, r3
    9c68:	d3d6      	bcc.n	9c18 <Spi_SyncTransmit+0x120>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07();
    9c6a:	f00c fb1b 	bl	162a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>
                
                /* End Sequence Notification */
                if (NULL_PTR != SequenceConfig->EndNotification)
    9c6e:	9b07      	ldr	r3, [sp, #28]
    9c70:	68db      	ldr	r3, [r3, #12]
    9c72:	2b00      	cmp	r3, #0
    9c74:	d005      	beq.n	9c82 <Spi_SyncTransmit+0x18a>
                {
                    SequenceConfig->EndNotification();
    9c76:	9b07      	ldr	r3, [sp, #28]
    9c78:	68db      	ldr	r3, [r3, #12]
    9c7a:	4798      	blx	r3
    9c7c:	e001      	b.n	9c82 <Spi_SyncTransmit+0x18a>
                    /* Do nothing */
                }
            }
            else
            {
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9c7e:	f00c fabf 	bl	16200 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
            /* Do nothing */
        }
    }
#endif

    return Status;
    9c82:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    9c86:	4618      	mov	r0, r3
    9c88:	b00b      	add	sp, #44	; 0x2c
    9c8a:	f85d fb04 	ldr.w	pc, [sp], #4
    9c8e:	bf00      	nop
    9c90:	1fff8dec 	.word	0x1fff8dec
    9c94:	1fff8e04 	.word	0x1fff8e04
    9c98:	1fff8e00 	.word	0x1fff8e00
    9c9c:	1fff8df0 	.word	0x1fff8df0

00009ca0 <Spi_GetHWUnitStatus>:
/** @implements Spi_GetHWUnitStatus_Activity */
Spi_StatusType Spi_GetHWUnitStatus
    (
        Spi_HWUnitType HWUnit
    )
{
    9ca0:	b084      	sub	sp, #16
    9ca2:	4603      	mov	r3, r0
    9ca4:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_StatusType Status = SPI_UNINIT;
    9ca8:	2300      	movs	r3, #0
    9caa:	9303      	str	r3, [sp, #12]
        /* Do nothing */
    }
    else
    {
#endif
        Status = Spi_axSpiHwUnitQueueArray[HWUnit].Status;
    9cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9cb0:	4a03      	ldr	r2, [pc, #12]	; (9cc0 <Spi_GetHWUnitStatus+0x20>)
    9cb2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    9cb6:	9303      	str	r3, [sp, #12]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return Status;
    9cb8:	9b03      	ldr	r3, [sp, #12]
}
    9cba:	4618      	mov	r0, r3
    9cbc:	b004      	add	sp, #16
    9cbe:	4770      	bx	lr
    9cc0:	1fff8de4 	.word	0x1fff8de4

00009cc4 <Spi_Cancel>:
*       undefined state due to cancelling a sequence transmission.
*
*/
/**  @implements Spi_Cancel_Activity */
void Spi_Cancel(Spi_SequenceType Sequence)
{
    9cc4:	b082      	sub	sp, #8
    9cc6:	4603      	mov	r3, r0
    9cc8:	f88d 3007 	strb.w	r3, [sp, #7]
        }
        else
        {
#endif
            /* Set sequence state to Cancel */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_CANCELLED;
    9ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9cd0:	4a03      	ldr	r2, [pc, #12]	; (9ce0 <Spi_Cancel+0x1c>)
    9cd2:	2103      	movs	r1, #3
    9cd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            #endif
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif
}
    9cd8:	bf00      	nop
    9cda:	b002      	add	sp, #8
    9cdc:	4770      	bx	lr
    9cde:	bf00      	nop
    9ce0:	1fff8df0 	.word	0x1fff8df0

00009ce4 <Spi_MainFunction_Handling>:
                /*Do nothing */
            }
        }
    }
#endif /* #if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2) ) */
}
    9ce4:	bf00      	nop
    9ce6:	4770      	bx	lr

00009ce8 <Spi_Ipw_SyncTransmitProcess>:
        const Spi_JobConfigType *JobConfig,
        const Spi_ChannelConfigType *ChannelConfig,
        Spi_DataBufferType *RxBuffer,
        const Spi_DataBufferType *TxBuffer
    )
{
    9ce8:	b500      	push	{lr}
    9cea:	b08d      	sub	sp, #52	; 0x34
    9cec:	9005      	str	r0, [sp, #20]
    9cee:	9104      	str	r1, [sp, #16]
    9cf0:	9203      	str	r2, [sp, #12]
    9cf2:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_StatusType Lpspi_spiStatus = LPSPI_IP_STATUS_SUCCESS;
    9cf4:	2300      	movs	r3, #0
    9cf6:	930b      	str	r3, [sp, #44]	; 0x2c
    const Lpspi_Ip_ExternalDeviceType* LpspiExternalDevice;
#if (SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)
    Flexio_Spi_Ip_StatusType Flexio_spiStatus = FLEXIO_SPI_IP_STATUS_SUCCESS;
    const Flexio_Spi_Ip_ExternalDeviceType* Flexio_SpiExternalDevice;
#endif
    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9cf8:	2300      	movs	r3, #0
    9cfa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    Spi_NumberOfDataType NumberOfBytes;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9cfe:	9b05      	ldr	r3, [sp, #20]
    9d00:	6a1b      	ldr	r3, [r3, #32]
    9d02:	681b      	ldr	r3, [r3, #0]
    9d04:	681b      	ldr	r3, [r3, #0]
    9d06:	9309      	str	r3, [sp, #36]	; 0x24
        HalfDuplexMode = LPSPI_IP_FULL_DUPLEX;
        HalfDuplexModeSupport = FALSE;
    }
#endif
    
    NumberOfBytes = ChannelConfig->ChannelState->Length;
    9d08:	9b04      	ldr	r3, [sp, #16]
    9d0a:	699b      	ldr	r3, [r3, #24]
    9d0c:	885b      	ldrh	r3, [r3, #2]
    9d0e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    if (SPI_OVER_LPSPI == IpType)
    9d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d14:	2b00      	cmp	r3, #0
    9d16:	d12e      	bne.n	9d76 <Spi_Ipw_SyncTransmitProcess+0x8e>
    {
        LpspiExternalDevice = JobConfig->ExternalDeviceConfig->ExDeviceConfig->ExternalDeviceConfig.LpspiExternalDeviceConfig;
    9d18:	9b05      	ldr	r3, [sp, #20]
    9d1a:	6a1b      	ldr	r3, [r3, #32]
    9d1c:	681b      	ldr	r3, [r3, #0]
    9d1e:	689b      	ldr	r3, [r3, #8]
    9d20:	9307      	str	r3, [sp, #28]
        Lpspi_spiStatus = Lpspi_Ip_UpdateDefaultTransmitData(LpspiExternalDevice, ChannelConfig->DefaultTransmitValue);
    9d22:	9b04      	ldr	r3, [sp, #16]
    9d24:	689b      	ldr	r3, [r3, #8]
    9d26:	4619      	mov	r1, r3
    9d28:	9807      	ldr	r0, [sp, #28]
    9d2a:	f7ff fadd 	bl	92e8 <Lpspi_Ip_UpdateDefaultTransmitData>
    9d2e:	900b      	str	r0, [sp, #44]	; 0x2c
        if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d32:	2b00      	cmp	r3, #0
    9d34:	d11f      	bne.n	9d76 <Spi_Ipw_SyncTransmitProcess+0x8e>
        {
            Lpspi_spiStatus = Lpspi_Ip_UpdateFrameSize(LpspiExternalDevice, ChannelConfig->FrameSize);
    9d36:	9b04      	ldr	r3, [sp, #16]
    9d38:	791b      	ldrb	r3, [r3, #4]
    9d3a:	b29b      	uxth	r3, r3
    9d3c:	4619      	mov	r1, r3
    9d3e:	9807      	ldr	r0, [sp, #28]
    9d40:	f7ff fa92 	bl	9268 <Lpspi_Ip_UpdateFrameSize>
    9d44:	900b      	str	r0, [sp, #44]	; 0x2c
            if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d48:	2b00      	cmp	r3, #0
    9d4a:	d114      	bne.n	9d76 <Spi_Ipw_SyncTransmitProcess+0x8e>
            {
                Lpspi_spiStatus = Lpspi_Ip_UpdateLsb(LpspiExternalDevice, ChannelConfig->Lsb);
    9d4c:	9b04      	ldr	r3, [sp, #16]
    9d4e:	795b      	ldrb	r3, [r3, #5]
    9d50:	4619      	mov	r1, r3
    9d52:	9807      	ldr	r0, [sp, #28]
    9d54:	f7ff faa8 	bl	92a8 <Lpspi_Ip_UpdateLsb>
    9d58:	900b      	str	r0, [sp, #44]	; 0x2c
                if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d5c:	2b00      	cmp	r3, #0
    9d5e:	d10a      	bne.n	9d76 <Spi_Ipw_SyncTransmitProcess+0x8e>
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmitHalfDuplex(LpspiExternalDevice, Buffer, NumberOfBytes, HalfDuplexMode, SPI_TIMEOUT_COUNTER_U32);
                    }
                    else
                    #endif
                    {
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmit(LpspiExternalDevice, (const uint8*)TxBuffer, RxBuffer, NumberOfBytes, SPI_TIMEOUT_COUNTER_U32);
    9d60:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    9d64:	f24c 3250 	movw	r2, #50000	; 0xc350
    9d68:	9200      	str	r2, [sp, #0]
    9d6a:	9a03      	ldr	r2, [sp, #12]
    9d6c:	9902      	ldr	r1, [sp, #8]
    9d6e:	9807      	ldr	r0, [sp, #28]
    9d70:	f7fe fe0a 	bl	8988 <Lpspi_Ip_SyncTransmit>
    9d74:	900b      	str	r0, [sp, #44]	; 0x2c
            }
        }
    }
    if( (LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus) || (FLEXIO_SPI_IP_STATUS_SUCCESS != Flexio_spiStatus))
#else
    if(LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus)
    9d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d78:	2b00      	cmp	r3, #0
    9d7a:	d002      	beq.n	9d82 <Spi_Ipw_SyncTransmitProcess+0x9a>
#endif /*(SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)*/
    {
        Ipw_Status = (Std_ReturnType)E_NOT_OK;
    9d7c:	2301      	movs	r3, #1
    9d7e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
    return Ipw_Status;
    9d82:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
}
    9d86:	4618      	mov	r0, r3
    9d88:	b00d      	add	sp, #52	; 0x34
    9d8a:	f85d fb04 	ldr.w	pc, [sp], #4

00009d8e <Spi_Ipw_Init>:
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* Spi_Ipw_Init */
void Spi_Ipw_Init(const Spi_HWUnitType HWUnitId, const Spi_HWUnitConfigType *HWUnit)
{
    9d8e:	b500      	push	{lr}
    9d90:	b083      	sub	sp, #12
    9d92:	4603      	mov	r3, r0
    9d94:	9100      	str	r1, [sp, #0]
    9d96:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == HWUnit->IpType)
    9d9a:	9b00      	ldr	r3, [sp, #0]
    9d9c:	681b      	ldr	r3, [r3, #0]
    9d9e:	2b00      	cmp	r3, #0
    9da0:	d104      	bne.n	9dac <Spi_Ipw_Init+0x1e>
    #if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
        Spi_Ipw_au8LpspiHWUnitMapping[HWUnit->Instance] = HWUnitId;
    #else
        (void)HWUnitId;
    #endif
        (void)Lpspi_Ip_Init(HWUnit->IpConfig.LpspiIpConfig);
    9da2:	9b00      	ldr	r3, [sp, #0]
    9da4:	68db      	ldr	r3, [r3, #12]
    9da6:	4618      	mov	r0, r3
    9da8:	f7fe fd62 	bl	8870 <Lpspi_Ip_Init>
        (void)HWUnitId;
    #endif
        (void)Flexio_Spi_Ip_Init(HWUnit->IpConfig.FlexioSpiIpConfig);
    }
#endif
}
    9dac:	bf00      	nop
    9dae:	b003      	add	sp, #12
    9db0:	f85d fb04 	ldr.w	pc, [sp], #4

00009db4 <Spi_Ipw_DeInit>:

/* Spi_Ipw_DeInit */
void Spi_Ipw_DeInit(Spi_HWUnitType HWUnit, uint32 SpiCoreID)
{
    9db4:	b500      	push	{lr}
    9db6:	b083      	sub	sp, #12
    9db8:	4603      	mov	r3, r0
    9dba:	9100      	str	r1, [sp, #0]
    9dbc:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->IpType)
    9dc0:	4a0f      	ldr	r2, [pc, #60]	; (9e00 <Spi_Ipw_DeInit+0x4c>)
    9dc2:	9b00      	ldr	r3, [sp, #0]
    9dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dc8:	69da      	ldr	r2, [r3, #28]
    9dca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9dce:	009b      	lsls	r3, r3, #2
    9dd0:	4413      	add	r3, r2
    9dd2:	681b      	ldr	r3, [r3, #0]
    9dd4:	681b      	ldr	r3, [r3, #0]
    9dd6:	2b00      	cmp	r3, #0
    9dd8:	d10d      	bne.n	9df6 <Spi_Ipw_DeInit+0x42>
    {
        (void)Lpspi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    9dda:	4a09      	ldr	r2, [pc, #36]	; (9e00 <Spi_Ipw_DeInit+0x4c>)
    9ddc:	9b00      	ldr	r3, [sp, #0]
    9dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9de2:	69da      	ldr	r2, [r3, #28]
    9de4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9de8:	009b      	lsls	r3, r3, #2
    9dea:	4413      	add	r3, r2
    9dec:	681b      	ldr	r3, [r3, #0]
    9dee:	791b      	ldrb	r3, [r3, #4]
    9df0:	4618      	mov	r0, r3
    9df2:	f7fe fd99 	bl	8928 <Lpspi_Ip_DeInit>
    else
    {
        (void)Flexio_Spi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    }
#endif
}
    9df6:	bf00      	nop
    9df8:	b003      	add	sp, #12
    9dfa:	f85d fb04 	ldr.w	pc, [sp], #4
    9dfe:	bf00      	nop
    9e00:	1fff8dec 	.word	0x1fff8dec

00009e04 <Spi_Ipw_SyncTransmit>:

/* Spi_Ipw_SyncTransmit */
#if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL2) || (SPI_LEVEL_DELIVERED == SPI_LEVEL0) )
Std_ReturnType Spi_Ipw_SyncTransmit(const Spi_JobConfigType *JobConfig, uint32 SpiCoreID)
{
    9e04:	b500      	push	{lr}
    9e06:	b08b      	sub	sp, #44	; 0x2c
    9e08:	9001      	str	r0, [sp, #4]
    9e0a:	9100      	str	r1, [sp, #0]

    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9e0c:	2300      	movs	r3, #0
    9e0e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_ChannelConfigType *NextChannelConfig;
    Spi_ChannelType ChannelID;
    Spi_ChannelType NumChannelsInJob;
    Spi_ChannelType ChannelIndex;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9e12:	9b01      	ldr	r3, [sp, #4]
    9e14:	6a1b      	ldr	r3, [r3, #32]
    9e16:	681b      	ldr	r3, [r3, #0]
    9e18:	681b      	ldr	r3, [r3, #0]
    9e1a:	9306      	str	r3, [sp, #24]
    
    NumChannelsInJob = JobConfig->NumChannels;
    9e1c:	9b01      	ldr	r3, [sp, #4]
    9e1e:	781b      	ldrb	r3, [r3, #0]
    9e20:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    9e24:	2300      	movs	r3, #0
    9e26:	f88d 301f 	strb.w	r3, [sp, #31]
    9e2a:	e0e6      	b.n	9ffa <Spi_Ipw_SyncTransmit+0x1f6>
    {
        ChannelID = JobConfig->ChannelIndexList[ChannelIndex];
    9e2c:	9b01      	ldr	r3, [sp, #4]
    9e2e:	685a      	ldr	r2, [r3, #4]
    9e30:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9e34:	4413      	add	r3, r2
    9e36:	781b      	ldrb	r3, [r3, #0]
    9e38:	f88d 3016 	strb.w	r3, [sp, #22]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[ChannelID].ChannelCfg;
    9e3c:	4a75      	ldr	r2, [pc, #468]	; (a014 <Spi_Ipw_SyncTransmit+0x210>)
    9e3e:	9b00      	ldr	r3, [sp, #0]
    9e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e44:	68da      	ldr	r2, [r3, #12]
    9e46:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9e4a:	009b      	lsls	r3, r3, #2
    9e4c:	4413      	add	r3, r2
    9e4e:	681b      	ldr	r3, [r3, #0]
    9e50:	9304      	str	r3, [sp, #16]
        RxBuffer = ChannelConfig->BufferDescriptor->BufferRX;
    9e52:	9b04      	ldr	r3, [sp, #16]
    9e54:	691b      	ldr	r3, [r3, #16]
    9e56:	689b      	ldr	r3, [r3, #8]
    9e58:	9303      	str	r3, [sp, #12]
        if(0u != (ChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9e5a:	9b04      	ldr	r3, [sp, #16]
    9e5c:	699b      	ldr	r3, [r3, #24]
    9e5e:	781b      	ldrb	r3, [r3, #0]
    9e60:	f003 0301 	and.w	r3, r3, #1
    9e64:	2b00      	cmp	r3, #0
    9e66:	d002      	beq.n	9e6e <Spi_Ipw_SyncTransmit+0x6a>
        {
            TxBuffer = NULL_PTR;
    9e68:	2300      	movs	r3, #0
    9e6a:	9308      	str	r3, [sp, #32]
    9e6c:	e00c      	b.n	9e88 <Spi_Ipw_SyncTransmit+0x84>
        }
        else
        {
            if(EB == ChannelConfig->BufferType)
    9e6e:	9b04      	ldr	r3, [sp, #16]
    9e70:	681b      	ldr	r3, [r3, #0]
    9e72:	2b01      	cmp	r3, #1
    9e74:	d104      	bne.n	9e80 <Spi_Ipw_SyncTransmit+0x7c>
            {
                TxBuffer = ChannelConfig->BufferDescriptor->ExternalBufferTX;
    9e76:	9b04      	ldr	r3, [sp, #16]
    9e78:	691b      	ldr	r3, [r3, #16]
    9e7a:	681b      	ldr	r3, [r3, #0]
    9e7c:	9308      	str	r3, [sp, #32]
    9e7e:	e003      	b.n	9e88 <Spi_Ipw_SyncTransmit+0x84>
            }
            else
            {
                TxBuffer = (const uint8*)(ChannelConfig->BufferDescriptor->InternalBufferTX);
    9e80:	9b04      	ldr	r3, [sp, #16]
    9e82:	691b      	ldr	r3, [r3, #16]
    9e84:	685b      	ldr	r3, [r3, #4]
    9e86:	9308      	str	r3, [sp, #32]
            }
        }
        
        if (SPI_OVER_LPSPI == IpType)
    9e88:	9b06      	ldr	r3, [sp, #24]
    9e8a:	2b00      	cmp	r3, #0
    9e8c:	f040 80a7 	bne.w	9fde <Spi_Ipw_SyncTransmit+0x1da>
        {
            if(ChannelIndex == (NumChannelsInJob - 1u))
    9e90:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9e94:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9e98:	3b01      	subs	r3, #1
    9e9a:	429a      	cmp	r2, r3
    9e9c:	d10a      	bne.n	9eb4 <Spi_Ipw_SyncTransmit+0xb0>
            {
                /* Clear CS after current channel */
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = FALSE;
    9e9e:	9b01      	ldr	r3, [sp, #4]
    9ea0:	6a1b      	ldr	r3, [r3, #32]
    9ea2:	681b      	ldr	r3, [r3, #0]
    9ea4:	791b      	ldrb	r3, [r3, #4]
    9ea6:	461a      	mov	r2, r3
    9ea8:	4b5b      	ldr	r3, [pc, #364]	; (a018 <Spi_Ipw_SyncTransmit+0x214>)
    9eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9eae:	2200      	movs	r2, #0
    9eb0:	771a      	strb	r2, [r3, #28]
    9eb2:	e07b      	b.n	9fac <Spi_Ipw_SyncTransmit+0x1a8>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = TRUE;
    9eb4:	9b01      	ldr	r3, [sp, #4]
    9eb6:	6a1b      	ldr	r3, [r3, #32]
    9eb8:	681b      	ldr	r3, [r3, #0]
    9eba:	791b      	ldrb	r3, [r3, #4]
    9ebc:	461a      	mov	r2, r3
    9ebe:	4b56      	ldr	r3, [pc, #344]	; (a018 <Spi_Ipw_SyncTransmit+0x214>)
    9ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9ec4:	2201      	movs	r2, #1
    9ec6:	771a      	strb	r2, [r3, #28]
                MCAL_DATA_SYNC_BARRIER();
    9ec8:	f3bf 8f4f 	dsb	sy
                /* update data for next transfer */
                NextChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[JobConfig->ChannelIndexList[ChannelIndex + 1u]].ChannelCfg;
    9ecc:	4a51      	ldr	r2, [pc, #324]	; (a014 <Spi_Ipw_SyncTransmit+0x210>)
    9ece:	9b00      	ldr	r3, [sp, #0]
    9ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ed4:	68da      	ldr	r2, [r3, #12]
    9ed6:	9b01      	ldr	r3, [sp, #4]
    9ed8:	6859      	ldr	r1, [r3, #4]
    9eda:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9ede:	3301      	adds	r3, #1
    9ee0:	440b      	add	r3, r1
    9ee2:	781b      	ldrb	r3, [r3, #0]
    9ee4:	009b      	lsls	r3, r3, #2
    9ee6:	4413      	add	r3, r2
    9ee8:	681b      	ldr	r3, [r3, #0]
    9eea:	9302      	str	r3, [sp, #8]
                MCAL_DATA_SYNC_BARRIER();
    9eec:	f3bf 8f4f 	dsb	sy
                if(0u != (NextChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9ef0:	9b02      	ldr	r3, [sp, #8]
    9ef2:	699b      	ldr	r3, [r3, #24]
    9ef4:	781b      	ldrb	r3, [r3, #0]
    9ef6:	f003 0301 	and.w	r3, r3, #1
    9efa:	2b00      	cmp	r3, #0
    9efc:	d00a      	beq.n	9f14 <Spi_Ipw_SyncTransmit+0x110>
                {
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NULL_PTR;
    9efe:	9b01      	ldr	r3, [sp, #4]
    9f00:	6a1b      	ldr	r3, [r3, #32]
    9f02:	681b      	ldr	r3, [r3, #0]
    9f04:	791b      	ldrb	r3, [r3, #4]
    9f06:	461a      	mov	r2, r3
    9f08:	4b43      	ldr	r3, [pc, #268]	; (a018 <Spi_Ipw_SyncTransmit+0x214>)
    9f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f0e:	2200      	movs	r2, #0
    9f10:	62da      	str	r2, [r3, #44]	; 0x2c
    9f12:	e01c      	b.n	9f4e <Spi_Ipw_SyncTransmit+0x14a>
                }
                else
                {
                    if(EB == NextChannelConfig->BufferType)
    9f14:	9b02      	ldr	r3, [sp, #8]
    9f16:	681b      	ldr	r3, [r3, #0]
    9f18:	2b01      	cmp	r3, #1
    9f1a:	d10c      	bne.n	9f36 <Spi_Ipw_SyncTransmit+0x132>
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->ExternalBufferTX;
    9f1c:	9b02      	ldr	r3, [sp, #8]
    9f1e:	691a      	ldr	r2, [r3, #16]
    9f20:	9b01      	ldr	r3, [sp, #4]
    9f22:	6a1b      	ldr	r3, [r3, #32]
    9f24:	681b      	ldr	r3, [r3, #0]
    9f26:	791b      	ldrb	r3, [r3, #4]
    9f28:	4619      	mov	r1, r3
    9f2a:	4b3b      	ldr	r3, [pc, #236]	; (a018 <Spi_Ipw_SyncTransmit+0x214>)
    9f2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9f30:	6812      	ldr	r2, [r2, #0]
    9f32:	62da      	str	r2, [r3, #44]	; 0x2c
    9f34:	e00b      	b.n	9f4e <Spi_Ipw_SyncTransmit+0x14a>
                    }
                    else
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->InternalBufferTX;
    9f36:	9b02      	ldr	r3, [sp, #8]
    9f38:	691a      	ldr	r2, [r3, #16]
    9f3a:	9b01      	ldr	r3, [sp, #4]
    9f3c:	6a1b      	ldr	r3, [r3, #32]
    9f3e:	681b      	ldr	r3, [r3, #0]
    9f40:	791b      	ldrb	r3, [r3, #4]
    9f42:	4619      	mov	r1, r3
    9f44:	4b34      	ldr	r3, [pc, #208]	; (a018 <Spi_Ipw_SyncTransmit+0x214>)
    9f46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9f4a:	6852      	ldr	r2, [r2, #4]
    9f4c:	62da      	str	r2, [r3, #44]	; 0x2c
                    }
                }
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FrameSizeNext = NextChannelConfig->FrameSize;
    9f4e:	9b02      	ldr	r3, [sp, #8]
    9f50:	791a      	ldrb	r2, [r3, #4]
    9f52:	9b01      	ldr	r3, [sp, #4]
    9f54:	6a1b      	ldr	r3, [r3, #32]
    9f56:	681b      	ldr	r3, [r3, #0]
    9f58:	791b      	ldrb	r3, [r3, #4]
    9f5a:	4619      	mov	r1, r3
    9f5c:	4b2e      	ldr	r3, [pc, #184]	; (a018 <Spi_Ipw_SyncTransmit+0x214>)
    9f5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9f62:	b292      	uxth	r2, r2
    9f64:	861a      	strh	r2, [r3, #48]	; 0x30
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LsbNext = NextChannelConfig->Lsb;
    9f66:	9b01      	ldr	r3, [sp, #4]
    9f68:	6a1b      	ldr	r3, [r3, #32]
    9f6a:	681b      	ldr	r3, [r3, #0]
    9f6c:	791b      	ldrb	r3, [r3, #4]
    9f6e:	461a      	mov	r2, r3
    9f70:	4b29      	ldr	r3, [pc, #164]	; (a018 <Spi_Ipw_SyncTransmit+0x214>)
    9f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f76:	9a02      	ldr	r2, [sp, #8]
    9f78:	7952      	ldrb	r2, [r2, #5]
    9f7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->DefaultDataNext = NextChannelConfig->DefaultTransmitValue;
    9f7e:	9b01      	ldr	r3, [sp, #4]
    9f80:	6a1b      	ldr	r3, [r3, #32]
    9f82:	681b      	ldr	r3, [r3, #0]
    9f84:	791b      	ldrb	r3, [r3, #4]
    9f86:	461a      	mov	r2, r3
    9f88:	4b23      	ldr	r3, [pc, #140]	; (a018 <Spi_Ipw_SyncTransmit+0x214>)
    9f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f8e:	9a02      	ldr	r2, [sp, #8]
    9f90:	6892      	ldr	r2, [r2, #8]
    9f92:	635a      	str	r2, [r3, #52]	; 0x34
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LengthNext = NextChannelConfig->ChannelState->Length;
    9f94:	9b02      	ldr	r3, [sp, #8]
    9f96:	699a      	ldr	r2, [r3, #24]
    9f98:	9b01      	ldr	r3, [sp, #4]
    9f9a:	6a1b      	ldr	r3, [r3, #32]
    9f9c:	681b      	ldr	r3, [r3, #0]
    9f9e:	791b      	ldrb	r3, [r3, #4]
    9fa0:	4619      	mov	r1, r3
    9fa2:	4b1d      	ldr	r3, [pc, #116]	; (a018 <Spi_Ipw_SyncTransmit+0x214>)
    9fa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9fa8:	8852      	ldrh	r2, [r2, #2]
    9faa:	871a      	strh	r2, [r3, #56]	; 0x38
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->NextChannelIsRX = FALSE;
                }
                #endif
            }
            
            if(0u == ChannelIndex)
    9fac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9fb0:	2b00      	cmp	r3, #0
    9fb2:	d10a      	bne.n	9fca <Spi_Ipw_SyncTransmit+0x1c6>
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = TRUE;
    9fb4:	9b01      	ldr	r3, [sp, #4]
    9fb6:	6a1b      	ldr	r3, [r3, #32]
    9fb8:	681b      	ldr	r3, [r3, #0]
    9fba:	791b      	ldrb	r3, [r3, #4]
    9fbc:	461a      	mov	r2, r3
    9fbe:	4b16      	ldr	r3, [pc, #88]	; (a018 <Spi_Ipw_SyncTransmit+0x214>)
    9fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9fc4:	2201      	movs	r2, #1
    9fc6:	775a      	strb	r2, [r3, #29]
    9fc8:	e009      	b.n	9fde <Spi_Ipw_SyncTransmit+0x1da>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = FALSE;
    9fca:	9b01      	ldr	r3, [sp, #4]
    9fcc:	6a1b      	ldr	r3, [r3, #32]
    9fce:	681b      	ldr	r3, [r3, #0]
    9fd0:	791b      	ldrb	r3, [r3, #4]
    9fd2:	461a      	mov	r2, r3
    9fd4:	4b10      	ldr	r3, [pc, #64]	; (a018 <Spi_Ipw_SyncTransmit+0x214>)
    9fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9fda:	2200      	movs	r2, #0
    9fdc:	775a      	strb	r2, [r3, #29]
            }
        }
        Ipw_Status = Spi_Ipw_SyncTransmitProcess(JobConfig, ChannelConfig, RxBuffer, (const uint8*)TxBuffer);
    9fde:	9b08      	ldr	r3, [sp, #32]
    9fe0:	9a03      	ldr	r2, [sp, #12]
    9fe2:	9904      	ldr	r1, [sp, #16]
    9fe4:	9801      	ldr	r0, [sp, #4]
    9fe6:	f7ff fe7f 	bl	9ce8 <Spi_Ipw_SyncTransmitProcess>
    9fea:	4603      	mov	r3, r0
    9fec:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    9ff0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9ff4:	3301      	adds	r3, #1
    9ff6:	f88d 301f 	strb.w	r3, [sp, #31]
    9ffa:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9ffe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a002:	429a      	cmp	r2, r3
    a004:	f4ff af12 	bcc.w	9e2c <Spi_Ipw_SyncTransmit+0x28>
    }
    return Ipw_Status;
    a008:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    a00c:	4618      	mov	r0, r3
    a00e:	b00b      	add	sp, #44	; 0x2c
    a010:	f85d fb04 	ldr.w	pc, [sp], #4
    a014:	1fff8dec 	.word	0x1fff8dec
    a018:	1fff8dd8 	.word	0x1fff8dd8

0000a01c <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    a01c:	b084      	sub	sp, #16
    a01e:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    a020:	2300      	movs	r3, #0
    a022:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    a026:	2300      	movs	r3, #0
    a028:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a02c:	2300      	movs	r3, #0
    a02e:	f88d 300e 	strb.w	r3, [sp, #14]
    a032:	e01b      	b.n	a06c <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a034:	4a12      	ldr	r2, [pc, #72]	; (a080 <Can_IsControllersBusy+0x64>)
    a036:	9b01      	ldr	r3, [sp, #4]
    a038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a03c:	695a      	ldr	r2, [r3, #20]
    a03e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a042:	009b      	lsls	r3, r3, #2
    a044:	4413      	add	r3, r2
    a046:	681b      	ldr	r3, [r3, #0]
    a048:	2b00      	cmp	r3, #0
    a04a:	d00a      	beq.n	a062 <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    a04c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a050:	4a0c      	ldr	r2, [pc, #48]	; (a084 <Can_IsControllersBusy+0x68>)
    a052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a056:	2b00      	cmp	r3, #0
    a058:	d003      	beq.n	a062 <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    a05a:	2301      	movs	r3, #1
    a05c:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a060:	e008      	b.n	a074 <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a062:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a066:	3301      	adds	r3, #1
    a068:	f88d 300e 	strb.w	r3, [sp, #14]
    a06c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a070:	2b01      	cmp	r3, #1
    a072:	d9df      	bls.n	a034 <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    a074:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a078:	4618      	mov	r0, r3
    a07a:	b004      	add	sp, #16
    a07c:	4770      	bx	lr
    a07e:	bf00      	nop
    a080:	1fff8e14 	.word	0x1fff8e14
    a084:	1fff8e0c 	.word	0x1fff8e0c

0000a088 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    a088:	b500      	push	{lr}
    a08a:	b085      	sub	sp, #20
    a08c:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    a08e:	2300      	movs	r3, #0
    a090:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    a094:	2300      	movs	r3, #0
    a096:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a09a:	2300      	movs	r3, #0
    a09c:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a09e:	2300      	movs	r3, #0
    a0a0:	f88d 300e 	strb.w	r3, [sp, #14]
    a0a4:	e035      	b.n	a112 <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a0a6:	4a30      	ldr	r2, [pc, #192]	; (a168 <Can_InitControllers+0xe0>)
    a0a8:	9b01      	ldr	r3, [sp, #4]
    a0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ae:	695a      	ldr	r2, [r3, #20]
    a0b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0b4:	009b      	lsls	r3, r3, #2
    a0b6:	4413      	add	r3, r2
    a0b8:	681b      	ldr	r3, [r3, #0]
    a0ba:	2b00      	cmp	r3, #0
    a0bc:	d024      	beq.n	a108 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a0be:	4a2a      	ldr	r2, [pc, #168]	; (a168 <Can_InitControllers+0xe0>)
    a0c0:	9b01      	ldr	r3, [sp, #4]
    a0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0c6:	695a      	ldr	r2, [r3, #20]
    a0c8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0cc:	009b      	lsls	r3, r3, #2
    a0ce:	4413      	add	r3, r2
    a0d0:	681b      	ldr	r3, [r3, #0]
    a0d2:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a0d4:	9b02      	ldr	r3, [sp, #8]
    a0d6:	7a1b      	ldrb	r3, [r3, #8]
    a0d8:	2b00      	cmp	r3, #0
    a0da:	d015      	beq.n	a108 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    a0dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0e0:	4a22      	ldr	r2, [pc, #136]	; (a16c <Can_InitControllers+0xe4>)
    a0e2:	2100      	movs	r1, #0
    a0e4:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    a0e6:	9802      	ldr	r0, [sp, #8]
    a0e8:	f000 ff82 	bl	aff0 <Can_43_FLEXCAN_Ipw_Init>
    a0ec:	4603      	mov	r3, r0
    a0ee:	2b00      	cmp	r3, #0
    a0f0:	d106      	bne.n	a100 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a0f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0f6:	4a1e      	ldr	r2, [pc, #120]	; (a170 <Can_InitControllers+0xe8>)
    a0f8:	2102      	movs	r1, #2
    a0fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a0fe:	e003      	b.n	a108 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    a100:	2301      	movs	r3, #1
    a102:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    a106:	e008      	b.n	a11a <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a108:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a10c:	3301      	adds	r3, #1
    a10e:	f88d 300e 	strb.w	r3, [sp, #14]
    a112:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a116:	2b01      	cmp	r3, #1
    a118:	d9c5      	bls.n	a0a6 <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    a11a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a11e:	2b00      	cmp	r3, #0
    a120:	d01e      	beq.n	a160 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a122:	2300      	movs	r3, #0
    a124:	f88d 300e 	strb.w	r3, [sp, #14]
    a128:	e016      	b.n	a158 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a12a:	4a0f      	ldr	r2, [pc, #60]	; (a168 <Can_InitControllers+0xe0>)
    a12c:	9b01      	ldr	r3, [sp, #4]
    a12e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a132:	695a      	ldr	r2, [r3, #20]
    a134:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a138:	009b      	lsls	r3, r3, #2
    a13a:	4413      	add	r3, r2
    a13c:	681b      	ldr	r3, [r3, #0]
    a13e:	2b00      	cmp	r3, #0
    a140:	d005      	beq.n	a14e <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a142:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a146:	4a0a      	ldr	r2, [pc, #40]	; (a170 <Can_InitControllers+0xe8>)
    a148:	2100      	movs	r1, #0
    a14a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a14e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a152:	3301      	adds	r3, #1
    a154:	f88d 300e 	strb.w	r3, [sp, #14]
    a158:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a15c:	2b01      	cmp	r3, #1
    a15e:	d9e4      	bls.n	a12a <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    a160:	bf00      	nop
    a162:	b005      	add	sp, #20
    a164:	f85d fb04 	ldr.w	pc, [sp], #4
    a168:	1fff8e14 	.word	0x1fff8e14
    a16c:	1fff8e08 	.word	0x1fff8e08
    a170:	1fff8e0c 	.word	0x1fff8e0c

0000a174 <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    a174:	b500      	push	{lr}
    a176:	b085      	sub	sp, #20
    a178:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    a17a:	2300      	movs	r3, #0
    a17c:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a180:	2300      	movs	r3, #0
    a182:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a184:	2300      	movs	r3, #0
    a186:	f88d 300f 	strb.w	r3, [sp, #15]
    a18a:	e028      	b.n	a1de <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a18c:	4a18      	ldr	r2, [pc, #96]	; (a1f0 <Can_DeInitControllers+0x7c>)
    a18e:	9b01      	ldr	r3, [sp, #4]
    a190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a194:	695a      	ldr	r2, [r3, #20]
    a196:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a19a:	009b      	lsls	r3, r3, #2
    a19c:	4413      	add	r3, r2
    a19e:	681b      	ldr	r3, [r3, #0]
    a1a0:	2b00      	cmp	r3, #0
    a1a2:	d017      	beq.n	a1d4 <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a1a4:	4a12      	ldr	r2, [pc, #72]	; (a1f0 <Can_DeInitControllers+0x7c>)
    a1a6:	9b01      	ldr	r3, [sp, #4]
    a1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1ac:	695a      	ldr	r2, [r3, #20]
    a1ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1b2:	009b      	lsls	r3, r3, #2
    a1b4:	4413      	add	r3, r2
    a1b6:	681b      	ldr	r3, [r3, #0]
    a1b8:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a1ba:	9b02      	ldr	r3, [sp, #8]
    a1bc:	7a1b      	ldrb	r3, [r3, #8]
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d008      	beq.n	a1d4 <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a1c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1c6:	4a0b      	ldr	r2, [pc, #44]	; (a1f4 <Can_DeInitControllers+0x80>)
    a1c8:	2100      	movs	r1, #0
    a1ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    a1ce:	9802      	ldr	r0, [sp, #8]
    a1d0:	f001 f81a 	bl	b208 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a1d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1d8:	3301      	adds	r3, #1
    a1da:	f88d 300f 	strb.w	r3, [sp, #15]
    a1de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1e2:	2b01      	cmp	r3, #1
    a1e4:	d9d2      	bls.n	a18c <Can_DeInitControllers+0x18>
            }
        }
    }
}
    a1e6:	bf00      	nop
    a1e8:	bf00      	nop
    a1ea:	b005      	add	sp, #20
    a1ec:	f85d fb04 	ldr.w	pc, [sp], #4
    a1f0:	1fff8e14 	.word	0x1fff8e14
    a1f4:	1fff8e0c 	.word	0x1fff8e0c

0000a1f8 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    a1f8:	b500      	push	{lr}
    a1fa:	b085      	sub	sp, #20
    a1fc:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    a1fe:	2300      	movs	r3, #0
    a200:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    a202:	2300      	movs	r3, #0
    a204:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    a208:	2300      	movs	r3, #0
    a20a:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    a20c:	490c      	ldr	r1, [pc, #48]	; (a240 <Can_43_FLEXCAN_Init+0x48>)
    a20e:	9b03      	ldr	r3, [sp, #12]
    a210:	9a01      	ldr	r2, [sp, #4]
    a212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    a216:	9803      	ldr	r0, [sp, #12]
    a218:	f7ff ff00 	bl	a01c <Can_IsControllersBusy>
    a21c:	4603      	mov	r3, r0
    a21e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    a222:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a226:	f083 0301 	eor.w	r3, r3, #1
    a22a:	b2db      	uxtb	r3, r3
    a22c:	2b00      	cmp	r3, #0
    a22e:	d002      	beq.n	a236 <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    a230:	9803      	ldr	r0, [sp, #12]
    a232:	f7ff ff29 	bl	a088 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    a236:	bf00      	nop
    a238:	b005      	add	sp, #20
    a23a:	f85d fb04 	ldr.w	pc, [sp], #4
    a23e:	bf00      	nop
    a240:	1fff8e14 	.word	0x1fff8e14

0000a244 <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    a244:	b500      	push	{lr}
    a246:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    a248:	2300      	movs	r3, #0
    a24a:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    a24e:	2300      	movs	r3, #0
    a250:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    a254:	2300      	movs	r3, #0
    a256:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    a258:	2300      	movs	r3, #0
    a25a:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a25c:	2300      	movs	r3, #0
    a25e:	f88d 3007 	strb.w	r3, [sp, #7]
    a262:	e01b      	b.n	a29c <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a264:	4a19      	ldr	r2, [pc, #100]	; (a2cc <Can_43_FLEXCAN_DeInit+0x88>)
    a266:	9b00      	ldr	r3, [sp, #0]
    a268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a26c:	695a      	ldr	r2, [r3, #20]
    a26e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a272:	009b      	lsls	r3, r3, #2
    a274:	4413      	add	r3, r2
    a276:	681b      	ldr	r3, [r3, #0]
    a278:	2b00      	cmp	r3, #0
    a27a:	d00a      	beq.n	a292 <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a27c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a280:	4a13      	ldr	r2, [pc, #76]	; (a2d0 <Can_43_FLEXCAN_DeInit+0x8c>)
    a282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a286:	2b01      	cmp	r3, #1
    a288:	d103      	bne.n	a292 <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    a28a:	2301      	movs	r3, #1
    a28c:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    a290:	e008      	b.n	a2a4 <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a292:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a296:	3301      	adds	r3, #1
    a298:	f88d 3007 	strb.w	r3, [sp, #7]
    a29c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2a0:	2b01      	cmp	r3, #1
    a2a2:	d9df      	bls.n	a264 <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    a2a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a2a8:	f083 0301 	eor.w	r3, r3, #1
    a2ac:	b2db      	uxtb	r3, r3
    a2ae:	2b00      	cmp	r3, #0
    a2b0:	d007      	beq.n	a2c2 <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    a2b2:	9800      	ldr	r0, [sp, #0]
    a2b4:	f7ff ff5e 	bl	a174 <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    a2b8:	4a04      	ldr	r2, [pc, #16]	; (a2cc <Can_43_FLEXCAN_DeInit+0x88>)
    a2ba:	9b00      	ldr	r3, [sp, #0]
    a2bc:	2100      	movs	r1, #0
    a2be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    a2c2:	bf00      	nop
    a2c4:	b003      	add	sp, #12
    a2c6:	f85d fb04 	ldr.w	pc, [sp], #4
    a2ca:	bf00      	nop
    a2cc:	1fff8e14 	.word	0x1fff8e14
    a2d0:	1fff8e0c 	.word	0x1fff8e0c

0000a2d4 <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    a2d4:	b500      	push	{lr}
    a2d6:	b087      	sub	sp, #28
    a2d8:	4603      	mov	r3, r0
    a2da:	9100      	str	r1, [sp, #0]
    a2dc:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a2e0:	2301      	movs	r3, #1
    a2e2:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a2e6:	2300      	movs	r3, #0
    a2e8:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a2ea:	2300      	movs	r3, #0
    a2ec:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a2ee:	2300      	movs	r3, #0
    a2f0:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a2f2:	4a47      	ldr	r2, [pc, #284]	; (a410 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    a2f4:	9b04      	ldr	r3, [sp, #16]
    a2f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2fa:	695a      	ldr	r2, [r3, #20]
    a2fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a300:	009b      	lsls	r3, r3, #2
    a302:	4413      	add	r3, r2
    a304:	681b      	ldr	r3, [r3, #0]
    a306:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    a308:	9b00      	ldr	r3, [sp, #0]
    a30a:	2b03      	cmp	r3, #3
    a30c:	d05d      	beq.n	a3ca <Can_43_FLEXCAN_SetControllerMode+0xf6>
    a30e:	9b00      	ldr	r3, [sp, #0]
    a310:	2b03      	cmp	r3, #3
    a312:	d874      	bhi.n	a3fe <Can_43_FLEXCAN_SetControllerMode+0x12a>
    a314:	9b00      	ldr	r3, [sp, #0]
    a316:	2b01      	cmp	r3, #1
    a318:	d003      	beq.n	a322 <Can_43_FLEXCAN_SetControllerMode+0x4e>
    a31a:	9b00      	ldr	r3, [sp, #0]
    a31c:	2b02      	cmp	r3, #2
    a31e:	d01d      	beq.n	a35c <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    a320:	e06d      	b.n	a3fe <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    a322:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a326:	4a3b      	ldr	r2, [pc, #236]	; (a414 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a32c:	2b02      	cmp	r3, #2
    a32e:	d168      	bne.n	a402 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    a330:	9803      	ldr	r0, [sp, #12]
    a332:	f000 ffa3 	bl	b27c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    a336:	4603      	mov	r3, r0
    a338:	2b00      	cmp	r3, #0
    a33a:	d162      	bne.n	a402 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    a33c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a340:	4a34      	ldr	r2, [pc, #208]	; (a414 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a342:	2101      	movs	r1, #1
    a344:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    a348:	9b03      	ldr	r3, [sp, #12]
    a34a:	781b      	ldrb	r3, [r3, #0]
    a34c:	2101      	movs	r1, #1
    a34e:	4618      	mov	r0, r3
    a350:	f00c fe94 	bl	1707c <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a354:	2300      	movs	r3, #0
    a356:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    a35a:	e052      	b.n	a402 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    a35c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a360:	4a2c      	ldr	r2, [pc, #176]	; (a414 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a366:	2b01      	cmp	r3, #1
    a368:	d005      	beq.n	a376 <Can_43_FLEXCAN_SetControllerMode+0xa2>
    a36a:	2b00      	cmp	r3, #0
    a36c:	d029      	beq.n	a3c2 <Can_43_FLEXCAN_SetControllerMode+0xee>
    a36e:	3b02      	subs	r3, #2
    a370:	2b01      	cmp	r3, #1
    a372:	d826      	bhi.n	a3c2 <Can_43_FLEXCAN_SetControllerMode+0xee>
    a374:	e015      	b.n	a3a2 <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a376:	9803      	ldr	r0, [sp, #12]
    a378:	f000 fff2 	bl	b360 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a37c:	4603      	mov	r3, r0
    a37e:	2b00      	cmp	r3, #0
    a380:	d121      	bne.n	a3c6 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a382:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a386:	4a23      	ldr	r2, [pc, #140]	; (a414 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a388:	2102      	movs	r1, #2
    a38a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a38e:	9b03      	ldr	r3, [sp, #12]
    a390:	781b      	ldrb	r3, [r3, #0]
    a392:	2102      	movs	r1, #2
    a394:	4618      	mov	r0, r3
    a396:	f00c fe71 	bl	1707c <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    a39a:	2300      	movs	r3, #0
    a39c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a3a0:	e011      	b.n	a3c6 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a3a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3a6:	4a1b      	ldr	r2, [pc, #108]	; (a414 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3a8:	2102      	movs	r1, #2
    a3aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a3ae:	9b03      	ldr	r3, [sp, #12]
    a3b0:	781b      	ldrb	r3, [r3, #0]
    a3b2:	2102      	movs	r1, #2
    a3b4:	4618      	mov	r0, r3
    a3b6:	f00c fe61 	bl	1707c <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a3ba:	2300      	movs	r3, #0
    a3bc:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a3c0:	e002      	b.n	a3c8 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    a3c2:	bf00      	nop
    a3c4:	e01e      	b.n	a404 <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    a3c6:	bf00      	nop
                        break;
    a3c8:	e01c      	b.n	a404 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    a3ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3ce:	4a11      	ldr	r2, [pc, #68]	; (a414 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3d4:	3b02      	subs	r3, #2
    a3d6:	2b01      	cmp	r3, #1
    a3d8:	d80f      	bhi.n	a3fa <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    a3da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3de:	4a0d      	ldr	r2, [pc, #52]	; (a414 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3e0:	2103      	movs	r1, #3
    a3e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    a3e6:	9b03      	ldr	r3, [sp, #12]
    a3e8:	781b      	ldrb	r3, [r3, #0]
    a3ea:	2103      	movs	r1, #3
    a3ec:	4618      	mov	r0, r3
    a3ee:	f00c fe45 	bl	1707c <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a3f2:	2300      	movs	r3, #0
    a3f4:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a3f8:	e000      	b.n	a3fc <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    a3fa:	bf00      	nop
                        break;
    a3fc:	e002      	b.n	a404 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a3fe:	bf00      	nop
    a400:	e000      	b.n	a404 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a402:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    a404:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a408:	4618      	mov	r0, r3
    a40a:	b007      	add	sp, #28
    a40c:	f85d fb04 	ldr.w	pc, [sp], #4
    a410:	1fff8e14 	.word	0x1fff8e14
    a414:	1fff8e0c 	.word	0x1fff8e0c

0000a418 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    a418:	b500      	push	{lr}
    a41a:	b085      	sub	sp, #20
    a41c:	4603      	mov	r3, r0
    a41e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a422:	2300      	movs	r3, #0
    a424:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a426:	2300      	movs	r3, #0
    a428:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a42a:	2300      	movs	r3, #0
    a42c:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a42e:	4a10      	ldr	r2, [pc, #64]	; (a470 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    a430:	9b03      	ldr	r3, [sp, #12]
    a432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a436:	695a      	ldr	r2, [r3, #20]
    a438:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a43c:	009b      	lsls	r3, r3, #2
    a43e:	4413      	add	r3, r2
    a440:	681b      	ldr	r3, [r3, #0]
    a442:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a444:	f009 fc1c 	bl	13c80 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    a448:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a44c:	4a09      	ldr	r2, [pc, #36]	; (a474 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a44e:	5cd2      	ldrb	r2, [r2, r3]
    a450:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a454:	3201      	adds	r2, #1
    a456:	b2d1      	uxtb	r1, r2
    a458:	4a06      	ldr	r2, [pc, #24]	; (a474 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a45a:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a45c:	f009 fc3c 	bl	13cd8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    a460:	9802      	ldr	r0, [sp, #8]
    a462:	f000 fffb 	bl	b45c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a466:	bf00      	nop
    a468:	b005      	add	sp, #20
    a46a:	f85d fb04 	ldr.w	pc, [sp], #4
    a46e:	bf00      	nop
    a470:	1fff8e14 	.word	0x1fff8e14
    a474:	1fff8e08 	.word	0x1fff8e08

0000a478 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    a478:	b500      	push	{lr}
    a47a:	b085      	sub	sp, #20
    a47c:	4603      	mov	r3, r0
    a47e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a482:	2300      	movs	r3, #0
    a484:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a486:	2300      	movs	r3, #0
    a488:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a48a:	2300      	movs	r3, #0
    a48c:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a48e:	4a16      	ldr	r2, [pc, #88]	; (a4e8 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    a490:	9b03      	ldr	r3, [sp, #12]
    a492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a496:	695a      	ldr	r2, [r3, #20]
    a498:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a49c:	009b      	lsls	r3, r3, #2
    a49e:	4413      	add	r3, r2
    a4a0:	681b      	ldr	r3, [r3, #0]
    a4a2:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a4a4:	f009 fc3e 	bl	13d24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    a4a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4ac:	4a0f      	ldr	r2, [pc, #60]	; (a4ec <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a4ae:	5cd3      	ldrb	r3, [r2, r3]
    a4b0:	2b00      	cmp	r3, #0
    a4b2:	d009      	beq.n	a4c8 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    a4b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4b8:	4a0c      	ldr	r2, [pc, #48]	; (a4ec <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a4ba:	5cd2      	ldrb	r2, [r2, r3]
    a4bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4c0:	3a01      	subs	r2, #1
    a4c2:	b2d1      	uxtb	r1, r2
    a4c4:	4a09      	ldr	r2, [pc, #36]	; (a4ec <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a4c6:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a4c8:	f009 fc58 	bl	13d7c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    a4cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4d0:	4a06      	ldr	r2, [pc, #24]	; (a4ec <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a4d2:	5cd3      	ldrb	r3, [r2, r3]
    a4d4:	2b00      	cmp	r3, #0
    a4d6:	d102      	bne.n	a4de <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    a4d8:	9802      	ldr	r0, [sp, #8]
    a4da:	f000 ffe9 	bl	b4b0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a4de:	bf00      	nop
    a4e0:	b005      	add	sp, #20
    a4e2:	f85d fb04 	ldr.w	pc, [sp], #4
    a4e6:	bf00      	nop
    a4e8:	1fff8e14 	.word	0x1fff8e14
    a4ec:	1fff8e08 	.word	0x1fff8e08

0000a4f0 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    a4f0:	b500      	push	{lr}
    a4f2:	b087      	sub	sp, #28
    a4f4:	4603      	mov	r3, r0
    a4f6:	9100      	str	r1, [sp, #0]
    a4f8:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a4fc:	2301      	movs	r3, #1
    a4fe:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    a502:	2300      	movs	r3, #0
    a504:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    a508:	2300      	movs	r3, #0
    a50a:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a50c:	2300      	movs	r3, #0
    a50e:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a510:	2300      	movs	r3, #0
    a512:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a514:	4a18      	ldr	r2, [pc, #96]	; (a578 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    a516:	9b04      	ldr	r3, [sp, #16]
    a518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a51c:	695a      	ldr	r2, [r3, #20]
    a51e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a522:	009b      	lsls	r3, r3, #2
    a524:	4413      	add	r3, r2
    a526:	681b      	ldr	r3, [r3, #0]
    a528:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    a52a:	f10d 030b 	add.w	r3, sp, #11
    a52e:	4619      	mov	r1, r3
    a530:	9803      	ldr	r0, [sp, #12]
    a532:	f000 ffe9 	bl	b508 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    a536:	4603      	mov	r3, r0
    a538:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    a53c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a540:	2b00      	cmp	r3, #0
    a542:	d112      	bne.n	a56a <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    a544:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a548:	2b00      	cmp	r3, #0
    a54a:	d002      	beq.n	a552 <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    a54c:	2b01      	cmp	r3, #1
    a54e:	d004      	beq.n	a55a <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    a550:	e007      	b.n	a562 <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    a552:	9b00      	ldr	r3, [sp, #0]
    a554:	2200      	movs	r2, #0
    a556:	601a      	str	r2, [r3, #0]
                                break;
    a558:	e008      	b.n	a56c <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    a55a:	9b00      	ldr	r3, [sp, #0]
    a55c:	2201      	movs	r2, #1
    a55e:	601a      	str	r2, [r3, #0]
                                break;
    a560:	e004      	b.n	a56c <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    a562:	9b00      	ldr	r3, [sp, #0]
    a564:	2202      	movs	r2, #2
    a566:	601a      	str	r2, [r3, #0]
                                break;
    a568:	e000      	b.n	a56c <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    a56a:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    a56c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a570:	4618      	mov	r0, r3
    a572:	b007      	add	sp, #28
    a574:	f85d fb04 	ldr.w	pc, [sp], #4
    a578:	1fff8e14 	.word	0x1fff8e14

0000a57c <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    a57c:	b084      	sub	sp, #16
    a57e:	4603      	mov	r3, r0
    a580:	9100      	str	r1, [sp, #0]
    a582:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a586:	2301      	movs	r3, #1
    a588:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    a58c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a590:	4a06      	ldr	r2, [pc, #24]	; (a5ac <Can_43_FLEXCAN_GetControllerMode+0x30>)
    a592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a596:	9b00      	ldr	r3, [sp, #0]
    a598:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    a59a:	2300      	movs	r3, #0
    a59c:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a5a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a5a4:	4618      	mov	r0, r3
    a5a6:	b004      	add	sp, #16
    a5a8:	4770      	bx	lr
    a5aa:	bf00      	nop
    a5ac:	1fff8e0c 	.word	0x1fff8e0c

0000a5b0 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    a5b0:	b500      	push	{lr}
    a5b2:	b087      	sub	sp, #28
    a5b4:	4603      	mov	r3, r0
    a5b6:	9100      	str	r1, [sp, #0]
    a5b8:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a5bc:	2301      	movs	r3, #1
    a5be:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a5c2:	2300      	movs	r3, #0
    a5c4:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a5c6:	2300      	movs	r3, #0
    a5c8:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a5ca:	2300      	movs	r3, #0
    a5cc:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a5ce:	4a0c      	ldr	r2, [pc, #48]	; (a600 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    a5d0:	9b04      	ldr	r3, [sp, #16]
    a5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5d6:	695a      	ldr	r2, [r3, #20]
    a5d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5dc:	009b      	lsls	r3, r3, #2
    a5de:	4413      	add	r3, r2
    a5e0:	681b      	ldr	r3, [r3, #0]
    a5e2:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    a5e4:	9900      	ldr	r1, [sp, #0]
    a5e6:	9803      	ldr	r0, [sp, #12]
    a5e8:	f000 ffb9 	bl	b55e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    a5ec:	4603      	mov	r3, r0
    a5ee:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a5f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a5f6:	4618      	mov	r0, r3
    a5f8:	b007      	add	sp, #28
    a5fa:	f85d fb04 	ldr.w	pc, [sp], #4
    a5fe:	bf00      	nop
    a600:	1fff8e14 	.word	0x1fff8e14

0000a604 <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    a604:	b500      	push	{lr}
    a606:	b087      	sub	sp, #28
    a608:	4603      	mov	r3, r0
    a60a:	9100      	str	r1, [sp, #0]
    a60c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a610:	2301      	movs	r3, #1
    a612:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a616:	2300      	movs	r3, #0
    a618:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a61a:	2300      	movs	r3, #0
    a61c:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a61e:	2300      	movs	r3, #0
    a620:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a622:	4a0c      	ldr	r2, [pc, #48]	; (a654 <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    a624:	9b04      	ldr	r3, [sp, #16]
    a626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a62a:	695a      	ldr	r2, [r3, #20]
    a62c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a630:	009b      	lsls	r3, r3, #2
    a632:	4413      	add	r3, r2
    a634:	681b      	ldr	r3, [r3, #0]
    a636:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    a638:	9900      	ldr	r1, [sp, #0]
    a63a:	9803      	ldr	r0, [sp, #12]
    a63c:	f000 ff7d 	bl	b53a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    a640:	4603      	mov	r3, r0
    a642:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a646:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a64a:	4618      	mov	r0, r3
    a64c:	b007      	add	sp, #28
    a64e:	f85d fb04 	ldr.w	pc, [sp], #4
    a652:	bf00      	nop
    a654:	1fff8e14 	.word	0x1fff8e14

0000a658 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    a658:	b500      	push	{lr}
    a65a:	b089      	sub	sp, #36	; 0x24
    a65c:	4603      	mov	r3, r0
    a65e:	9100      	str	r1, [sp, #0]
    a660:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    a664:	2301      	movs	r3, #1
    a666:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    a66a:	2300      	movs	r3, #0
    a66c:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    a670:	2300      	movs	r3, #0
    a672:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    a674:	2300      	movs	r3, #0
    a676:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a67a:	2300      	movs	r3, #0
    a67c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    a67e:	2300      	movs	r3, #0
    a680:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a682:	2300      	movs	r3, #0
    a684:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    a686:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a68a:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    a68e:	4a1d      	ldr	r2, [pc, #116]	; (a704 <Can_43_FLEXCAN_Write+0xac>)
    a690:	9b06      	ldr	r3, [sp, #24]
    a692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a696:	68da      	ldr	r2, [r3, #12]
    a698:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a69c:	4413      	add	r3, r2
    a69e:	781b      	ldrb	r3, [r3, #0]
    a6a0:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a6a4:	4a17      	ldr	r2, [pc, #92]	; (a704 <Can_43_FLEXCAN_Write+0xac>)
    a6a6:	9b06      	ldr	r3, [sp, #24]
    a6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6ac:	695a      	ldr	r2, [r3, #20]
    a6ae:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a6b2:	009b      	lsls	r3, r3, #2
    a6b4:	4413      	add	r3, r2
    a6b6:	681b      	ldr	r3, [r3, #0]
    a6b8:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    a6ba:	9b04      	ldr	r3, [sp, #16]
    a6bc:	2b00      	cmp	r3, #0
    a6be:	d01b      	beq.n	a6f8 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    a6c0:	4a10      	ldr	r2, [pc, #64]	; (a704 <Can_43_FLEXCAN_Write+0xac>)
    a6c2:	9b06      	ldr	r3, [sp, #24]
    a6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6c8:	6919      	ldr	r1, [r3, #16]
    a6ca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a6ce:	4613      	mov	r3, r2
    a6d0:	00db      	lsls	r3, r3, #3
    a6d2:	4413      	add	r3, r2
    a6d4:	009b      	lsls	r3, r3, #2
    a6d6:	440b      	add	r3, r1
    a6d8:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a6da:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a6de:	4a0a      	ldr	r2, [pc, #40]	; (a708 <Can_43_FLEXCAN_Write+0xb0>)
    a6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6e4:	2b01      	cmp	r3, #1
    a6e6:	d107      	bne.n	a6f8 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    a6e8:	9a00      	ldr	r2, [sp, #0]
    a6ea:	9903      	ldr	r1, [sp, #12]
    a6ec:	9804      	ldr	r0, [sp, #16]
    a6ee:	f000 ff48 	bl	b582 <Can_43_FLEXCAN_Ipw_Write>
    a6f2:	4603      	mov	r3, r0
    a6f4:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    a6f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a6fc:	4618      	mov	r0, r3
    a6fe:	b009      	add	sp, #36	; 0x24
    a700:	f85d fb04 	ldr.w	pc, [sp], #4
    a704:	1fff8e14 	.word	0x1fff8e14
    a708:	1fff8e0c 	.word	0x1fff8e0c

0000a70c <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    a70c:	bf00      	nop
    a70e:	4770      	bx	lr

0000a710 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    a710:	bf00      	nop
    a712:	4770      	bx	lr

0000a714 <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    a714:	bf00      	nop
    a716:	4770      	bx	lr

0000a718 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    a718:	b500      	push	{lr}
    a71a:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    a71c:	2300      	movs	r3, #0
    a71e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    a722:	2300      	movs	r3, #0
    a724:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a726:	2300      	movs	r3, #0
    a728:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    a72a:	2300      	movs	r3, #0
    a72c:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    a72e:	4a17      	ldr	r2, [pc, #92]	; (a78c <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a730:	9b02      	ldr	r3, [sp, #8]
    a732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a736:	2b00      	cmp	r3, #0
    a738:	d024      	beq.n	a784 <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a73a:	e01f      	b.n	a77c <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a73c:	4a13      	ldr	r2, [pc, #76]	; (a78c <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a73e:	9b02      	ldr	r3, [sp, #8]
    a740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a744:	695a      	ldr	r2, [r3, #20]
    a746:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a74a:	009b      	lsls	r3, r3, #2
    a74c:	4413      	add	r3, r2
    a74e:	681b      	ldr	r3, [r3, #0]
    a750:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    a752:	9b01      	ldr	r3, [sp, #4]
    a754:	2b00      	cmp	r3, #0
    a756:	d00c      	beq.n	a772 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    a758:	9b01      	ldr	r3, [sp, #4]
    a75a:	7a1b      	ldrb	r3, [r3, #8]
    a75c:	2b00      	cmp	r3, #0
    a75e:	d008      	beq.n	a772 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    a760:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a764:	009b      	lsls	r3, r3, #2
    a766:	4a0a      	ldr	r2, [pc, #40]	; (a790 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    a768:	4413      	add	r3, r2
    a76a:	4619      	mov	r1, r3
    a76c:	9801      	ldr	r0, [sp, #4]
    a76e:	f001 f808 	bl	b782 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    a772:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a776:	3301      	adds	r3, #1
    a778:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a77c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a780:	2b01      	cmp	r3, #1
    a782:	d9db      	bls.n	a73c <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    a784:	bf00      	nop
    a786:	b005      	add	sp, #20
    a788:	f85d fb04 	ldr.w	pc, [sp], #4
    a78c:	1fff8e14 	.word	0x1fff8e14
    a790:	1fff8e0c 	.word	0x1fff8e0c

0000a794 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    a794:	b500      	push	{lr}
    a796:	b087      	sub	sp, #28
    a798:	4603      	mov	r3, r0
    a79a:	9200      	str	r2, [sp, #0]
    a79c:	f88d 3007 	strb.w	r3, [sp, #7]
    a7a0:	460b      	mov	r3, r1
    a7a2:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    a7a6:	2300      	movs	r3, #0
    a7a8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a7ac:	2300      	movs	r3, #0
    a7ae:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a7b0:	2300      	movs	r3, #0
    a7b2:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    a7b4:	2300      	movs	r3, #0
    a7b6:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a7b8:	4a16      	ldr	r2, [pc, #88]	; (a814 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a7ba:	9b04      	ldr	r3, [sp, #16]
    a7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7c0:	2b00      	cmp	r3, #0
    a7c2:	d022      	beq.n	a80a <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a7c4:	4a13      	ldr	r2, [pc, #76]	; (a814 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a7c6:	9b04      	ldr	r3, [sp, #16]
    a7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7cc:	689a      	ldr	r2, [r3, #8]
    a7ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7d2:	4413      	add	r3, r2
    a7d4:	781b      	ldrb	r3, [r3, #0]
    a7d6:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a7da:	4a0e      	ldr	r2, [pc, #56]	; (a814 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a7dc:	9b04      	ldr	r3, [sp, #16]
    a7de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7e2:	695a      	ldr	r2, [r3, #20]
    a7e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a7e8:	009b      	lsls	r3, r3, #2
    a7ea:	4413      	add	r3, r2
    a7ec:	681b      	ldr	r3, [r3, #0]
    a7ee:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a7f0:	9b03      	ldr	r3, [sp, #12]
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	d009      	beq.n	a80a <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    a7f6:	4a07      	ldr	r2, [pc, #28]	; (a814 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a7f8:	9b04      	ldr	r3, [sp, #16]
    a7fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a7fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a802:	9b00      	ldr	r3, [sp, #0]
    a804:	9803      	ldr	r0, [sp, #12]
    a806:	f000 fff2 	bl	b7ee <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    a80a:	bf00      	nop
    a80c:	b007      	add	sp, #28
    a80e:	f85d fb04 	ldr.w	pc, [sp], #4
    a812:	bf00      	nop
    a814:	1fff8e14 	.word	0x1fff8e14

0000a818 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    a818:	b500      	push	{lr}
    a81a:	b087      	sub	sp, #28
    a81c:	4603      	mov	r3, r0
    a81e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    a822:	2300      	movs	r3, #0
    a824:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a828:	2300      	movs	r3, #0
    a82a:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a82c:	2300      	movs	r3, #0
    a82e:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a830:	2300      	movs	r3, #0
    a832:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a834:	4a19      	ldr	r2, [pc, #100]	; (a89c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a836:	9b04      	ldr	r3, [sp, #16]
    a838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a83c:	2b00      	cmp	r3, #0
    a83e:	d029      	beq.n	a894 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a840:	4a16      	ldr	r2, [pc, #88]	; (a89c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a842:	9b04      	ldr	r3, [sp, #16]
    a844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a848:	689a      	ldr	r2, [r3, #8]
    a84a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a84e:	4413      	add	r3, r2
    a850:	781b      	ldrb	r3, [r3, #0]
    a852:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a856:	4a11      	ldr	r2, [pc, #68]	; (a89c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a858:	9b04      	ldr	r3, [sp, #16]
    a85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a85e:	695a      	ldr	r2, [r3, #20]
    a860:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a864:	009b      	lsls	r3, r3, #2
    a866:	4413      	add	r3, r2
    a868:	681b      	ldr	r3, [r3, #0]
    a86a:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a86c:	9b03      	ldr	r3, [sp, #12]
    a86e:	2b00      	cmp	r3, #0
    a870:	d010      	beq.n	a894 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a872:	9803      	ldr	r0, [sp, #12]
    a874:	f000 fd74 	bl	b360 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a878:	4603      	mov	r3, r0
    a87a:	2b00      	cmp	r3, #0
    a87c:	d10a      	bne.n	a894 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a87e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a882:	4a07      	ldr	r2, [pc, #28]	; (a8a0 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    a884:	2102      	movs	r1, #2
    a886:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    a88a:	9b03      	ldr	r3, [sp, #12]
    a88c:	781b      	ldrb	r3, [r3, #0]
    a88e:	4618      	mov	r0, r3
    a890:	f00c fbfc 	bl	1708c <CanIf_ControllerBusOff>
            }
        }
    }
}
    a894:	bf00      	nop
    a896:	b007      	add	sp, #28
    a898:	f85d fb04 	ldr.w	pc, [sp], #4
    a89c:	1fff8e14 	.word	0x1fff8e14
    a8a0:	1fff8e0c 	.word	0x1fff8e0c

0000a8a4 <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    a8a4:	b500      	push	{lr}
    a8a6:	b085      	sub	sp, #20
    a8a8:	9003      	str	r0, [sp, #12]
    a8aa:	9102      	str	r1, [sp, #8]
    a8ac:	9201      	str	r2, [sp, #4]
    a8ae:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    a8b0:	9b01      	ldr	r3, [sp, #4]
    a8b2:	685a      	ldr	r2, [r3, #4]
    a8b4:	9b03      	ldr	r3, [sp, #12]
    a8b6:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    a8b8:	9b01      	ldr	r3, [sp, #4]
    a8ba:	681b      	ldr	r3, [r3, #0]
    a8bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	d005      	beq.n	a8d0 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    a8c4:	9b03      	ldr	r3, [sp, #12]
    a8c6:	681b      	ldr	r3, [r3, #0]
    a8c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    a8cc:	9b03      	ldr	r3, [sp, #12]
    a8ce:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    a8d0:	9b06      	ldr	r3, [sp, #24]
    a8d2:	699b      	ldr	r3, [r3, #24]
    a8d4:	2b00      	cmp	r3, #0
    a8d6:	d10c      	bne.n	a8f2 <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    a8d8:	9b01      	ldr	r3, [sp, #4]
    a8da:	681b      	ldr	r3, [r3, #0]
    a8dc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    a8e0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    a8e4:	d105      	bne.n	a8f2 <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    a8e6:	2301      	movs	r3, #1
    a8e8:	2208      	movs	r2, #8
    a8ea:	2100      	movs	r1, #0
    a8ec:	2050      	movs	r0, #80	; 0x50
    a8ee:	f00c fa2d 	bl	16d4c <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    a8f2:	9b06      	ldr	r3, [sp, #24]
    a8f4:	699b      	ldr	r3, [r3, #24]
    a8f6:	2b01      	cmp	r3, #1
    a8f8:	d009      	beq.n	a90e <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    a8fa:	9b01      	ldr	r3, [sp, #4]
    a8fc:	681b      	ldr	r3, [r3, #0]
    a8fe:	2b00      	cmp	r3, #0
    a900:	da05      	bge.n	a90e <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    a902:	9b03      	ldr	r3, [sp, #12]
    a904:	681b      	ldr	r3, [r3, #0]
    a906:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a90a:	9b03      	ldr	r3, [sp, #12]
    a90c:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    a90e:	9b06      	ldr	r3, [sp, #24]
    a910:	7c1a      	ldrb	r2, [r3, #16]
    a912:	9b01      	ldr	r3, [sp, #4]
    a914:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a918:	429a      	cmp	r2, r3
    a91a:	d805      	bhi.n	a928 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    a91c:	9b06      	ldr	r3, [sp, #24]
    a91e:	7c1b      	ldrb	r3, [r3, #16]
    a920:	461a      	mov	r2, r3
    a922:	9b02      	ldr	r3, [sp, #8]
    a924:	609a      	str	r2, [r3, #8]
    a926:	e005      	b.n	a934 <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    a928:	9b01      	ldr	r3, [sp, #4]
    a92a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a92e:	461a      	mov	r2, r3
    a930:	9b02      	ldr	r3, [sp, #8]
    a932:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    a934:	9b06      	ldr	r3, [sp, #24]
    a936:	881a      	ldrh	r2, [r3, #0]
    a938:	9b03      	ldr	r3, [sp, #12]
    a93a:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    a93c:	9b00      	ldr	r3, [sp, #0]
    a93e:	781a      	ldrb	r2, [r3, #0]
    a940:	9b03      	ldr	r3, [sp, #12]
    a942:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    a944:	9b01      	ldr	r3, [sp, #4]
    a946:	f103 0208 	add.w	r2, r3, #8
    a94a:	9b02      	ldr	r3, [sp, #8]
    a94c:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    a94e:	9902      	ldr	r1, [sp, #8]
    a950:	9803      	ldr	r0, [sp, #12]
    a952:	f00c fb29 	bl	16fa8 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    a956:	bf00      	nop
    a958:	b005      	add	sp, #20
    a95a:	f85d fb04 	ldr.w	pc, [sp], #4

0000a95e <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    a95e:	b500      	push	{lr}
    a960:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    a964:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a968:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    a96c:	6018      	str	r0, [r3, #0]
    a96e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a972:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a976:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    a978:	2300      	movs	r3, #0
    a97a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    a97e:	2300      	movs	r3, #0
    a980:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    a984:	2300      	movs	r3, #0
    a986:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    a98a:	2300      	movs	r3, #0
    a98c:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    a990:	2300      	movs	r3, #0
    a992:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    a996:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a99a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a99e:	681b      	ldr	r3, [r3, #0]
    a9a0:	7c9b      	ldrb	r3, [r3, #18]
    a9a2:	089b      	lsrs	r3, r3, #2
    a9a4:	b2db      	uxtb	r3, r3
    a9a6:	3306      	adds	r3, #6
    a9a8:	2b20      	cmp	r3, #32
    a9aa:	d80b      	bhi.n	a9c4 <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    a9ac:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9b0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a9b4:	681b      	ldr	r3, [r3, #0]
    a9b6:	7c9b      	ldrb	r3, [r3, #18]
    a9b8:	089b      	lsrs	r3, r3, #2
    a9ba:	b2db      	uxtb	r3, r3
    a9bc:	3306      	adds	r3, #6
    a9be:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    a9c2:	e002      	b.n	a9ca <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    a9c4:	2320      	movs	r3, #32
    a9c6:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    a9ca:	2300      	movs	r3, #0
    a9cc:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    a9d0:	e169      	b.n	aca6 <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    a9d2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9d6:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    a9da:	681b      	ldr	r3, [r3, #0]
    a9dc:	691b      	ldr	r3, [r3, #16]
    a9de:	2b00      	cmp	r3, #0
    a9e0:	d13a      	bne.n	aa58 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    a9e2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9e6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a9ea:	681b      	ldr	r3, [r3, #0]
    a9ec:	7c9b      	ldrb	r3, [r3, #18]
    a9ee:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    a9f2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a9f6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    a9fa:	2300      	movs	r3, #0
    a9fc:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    aa00:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa04:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa08:	681b      	ldr	r3, [r3, #0]
    aa0a:	689b      	ldr	r3, [r3, #8]
    aa0c:	2b00      	cmp	r3, #0
    aa0e:	d011      	beq.n	aa34 <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    aa10:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa14:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa18:	681b      	ldr	r3, [r3, #0]
    aa1a:	695a      	ldr	r2, [r3, #20]
    aa1c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aa20:	00db      	lsls	r3, r3, #3
    aa22:	4413      	add	r3, r2
    aa24:	685b      	ldr	r3, [r3, #4]
    aa26:	005b      	lsls	r3, r3, #1
    aa28:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aa2c:	4313      	orrs	r3, r2
    aa2e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aa32:	e126      	b.n	ac82 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    aa34:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa38:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa3c:	681b      	ldr	r3, [r3, #0]
    aa3e:	695a      	ldr	r2, [r3, #20]
    aa40:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aa44:	00db      	lsls	r3, r3, #3
    aa46:	4413      	add	r3, r2
    aa48:	685b      	ldr	r3, [r3, #4]
    aa4a:	04db      	lsls	r3, r3, #19
    aa4c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aa50:	4313      	orrs	r3, r2
    aa52:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aa56:	e114      	b.n	ac82 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    aa58:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa5c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    aa60:	681b      	ldr	r3, [r3, #0]
    aa62:	691b      	ldr	r3, [r3, #16]
    aa64:	2b01      	cmp	r3, #1
    aa66:	d160      	bne.n	ab2a <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    aa68:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa6c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa70:	681b      	ldr	r3, [r3, #0]
    aa72:	7c9b      	ldrb	r3, [r3, #18]
    aa74:	005b      	lsls	r3, r3, #1
    aa76:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    aa7a:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    aa7e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    aa82:	2301      	movs	r3, #1
    aa84:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    aa88:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa8c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa90:	681b      	ldr	r3, [r3, #0]
    aa92:	689b      	ldr	r3, [r3, #8]
    aa94:	2b00      	cmp	r3, #0
    aa96:	d024      	beq.n	aae2 <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    aa98:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa9c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aaa0:	681b      	ldr	r3, [r3, #0]
    aaa2:	695a      	ldr	r2, [r3, #20]
    aaa4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aaa8:	011b      	lsls	r3, r3, #4
    aaaa:	4413      	add	r3, r2
    aaac:	685b      	ldr	r3, [r3, #4]
    aaae:	0bdb      	lsrs	r3, r3, #15
    aab0:	041b      	lsls	r3, r3, #16
    aab2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aab6:	4313      	orrs	r3, r2
    aab8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    aabc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aac0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aac4:	681b      	ldr	r3, [r3, #0]
    aac6:	695a      	ldr	r2, [r3, #20]
    aac8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aacc:	011b      	lsls	r3, r3, #4
    aace:	3308      	adds	r3, #8
    aad0:	4413      	add	r3, r2
    aad2:	685b      	ldr	r3, [r3, #4]
    aad4:	0bdb      	lsrs	r3, r3, #15
    aad6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aada:	4313      	orrs	r3, r2
    aadc:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aae0:	e0cf      	b.n	ac82 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    aae2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aae6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aaea:	681b      	ldr	r3, [r3, #0]
    aaec:	695a      	ldr	r2, [r3, #20]
    aaee:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aaf2:	011b      	lsls	r3, r3, #4
    aaf4:	4413      	add	r3, r2
    aaf6:	685b      	ldr	r3, [r3, #4]
    aaf8:	04db      	lsls	r3, r3, #19
    aafa:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aafe:	4313      	orrs	r3, r2
    ab00:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    ab04:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab08:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab0c:	681b      	ldr	r3, [r3, #0]
    ab0e:	695a      	ldr	r2, [r3, #20]
    ab10:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab14:	011b      	lsls	r3, r3, #4
    ab16:	3308      	adds	r3, #8
    ab18:	4413      	add	r3, r2
    ab1a:	685b      	ldr	r3, [r3, #4]
    ab1c:	00db      	lsls	r3, r3, #3
    ab1e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab22:	4313      	orrs	r3, r2
    ab24:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    ab28:	e0ab      	b.n	ac82 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    ab2a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab2e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab32:	681b      	ldr	r3, [r3, #0]
    ab34:	7c9b      	ldrb	r3, [r3, #18]
    ab36:	009b      	lsls	r3, r3, #2
    ab38:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    ab3c:	2300      	movs	r3, #0
    ab3e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    ab42:	2302      	movs	r3, #2
    ab44:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    ab48:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab4c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab50:	681b      	ldr	r3, [r3, #0]
    ab52:	689b      	ldr	r3, [r3, #8]
    ab54:	2b00      	cmp	r3, #0
    ab56:	d04a      	beq.n	abee <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    ab58:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab5c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab60:	681b      	ldr	r3, [r3, #0]
    ab62:	695a      	ldr	r2, [r3, #20]
    ab64:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab68:	015b      	lsls	r3, r3, #5
    ab6a:	4413      	add	r3, r2
    ab6c:	685b      	ldr	r3, [r3, #4]
    ab6e:	0d5b      	lsrs	r3, r3, #21
    ab70:	061b      	lsls	r3, r3, #24
    ab72:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab76:	4313      	orrs	r3, r2
    ab78:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    ab7c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab80:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab84:	681b      	ldr	r3, [r3, #0]
    ab86:	695a      	ldr	r2, [r3, #20]
    ab88:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab8c:	015b      	lsls	r3, r3, #5
    ab8e:	3308      	adds	r3, #8
    ab90:	4413      	add	r3, r2
    ab92:	685b      	ldr	r3, [r3, #4]
    ab94:	0d5b      	lsrs	r3, r3, #21
    ab96:	041b      	lsls	r3, r3, #16
    ab98:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab9c:	4313      	orrs	r3, r2
    ab9e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    aba2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aba6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abaa:	681b      	ldr	r3, [r3, #0]
    abac:	695a      	ldr	r2, [r3, #20]
    abae:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abb2:	015b      	lsls	r3, r3, #5
    abb4:	3310      	adds	r3, #16
    abb6:	4413      	add	r3, r2
    abb8:	685b      	ldr	r3, [r3, #4]
    abba:	0d5b      	lsrs	r3, r3, #21
    abbc:	021b      	lsls	r3, r3, #8
    abbe:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    abc2:	4313      	orrs	r3, r2
    abc4:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    abc8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abcc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abd0:	681b      	ldr	r3, [r3, #0]
    abd2:	695a      	ldr	r2, [r3, #20]
    abd4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abd8:	015b      	lsls	r3, r3, #5
    abda:	3318      	adds	r3, #24
    abdc:	4413      	add	r3, r2
    abde:	685b      	ldr	r3, [r3, #4]
    abe0:	0d5b      	lsrs	r3, r3, #21
    abe2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    abe6:	4313      	orrs	r3, r2
    abe8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    abec:	e049      	b.n	ac82 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    abee:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abf2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abf6:	681b      	ldr	r3, [r3, #0]
    abf8:	695a      	ldr	r2, [r3, #20]
    abfa:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abfe:	015b      	lsls	r3, r3, #5
    ac00:	4413      	add	r3, r2
    ac02:	685b      	ldr	r3, [r3, #4]
    ac04:	08db      	lsrs	r3, r3, #3
    ac06:	061b      	lsls	r3, r3, #24
    ac08:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac0c:	4313      	orrs	r3, r2
    ac0e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    ac12:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac16:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac1a:	681b      	ldr	r3, [r3, #0]
    ac1c:	695a      	ldr	r2, [r3, #20]
    ac1e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac22:	015b      	lsls	r3, r3, #5
    ac24:	3308      	adds	r3, #8
    ac26:	4413      	add	r3, r2
    ac28:	685b      	ldr	r3, [r3, #4]
    ac2a:	08db      	lsrs	r3, r3, #3
    ac2c:	041b      	lsls	r3, r3, #16
    ac2e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac32:	4313      	orrs	r3, r2
    ac34:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    ac38:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac3c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac40:	681b      	ldr	r3, [r3, #0]
    ac42:	695a      	ldr	r2, [r3, #20]
    ac44:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac48:	015b      	lsls	r3, r3, #5
    ac4a:	3310      	adds	r3, #16
    ac4c:	4413      	add	r3, r2
    ac4e:	685b      	ldr	r3, [r3, #4]
    ac50:	08db      	lsrs	r3, r3, #3
    ac52:	021b      	lsls	r3, r3, #8
    ac54:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac58:	4313      	orrs	r3, r2
    ac5a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    ac5e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac62:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac66:	681b      	ldr	r3, [r3, #0]
    ac68:	695a      	ldr	r2, [r3, #20]
    ac6a:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac6e:	015b      	lsls	r3, r3, #5
    ac70:	3318      	adds	r3, #24
    ac72:	4413      	add	r3, r2
    ac74:	685b      	ldr	r3, [r3, #4]
    ac76:	08db      	lsrs	r3, r3, #3
    ac78:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac7c:	4313      	orrs	r3, r2
    ac7e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    ac82:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac86:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ac8a:	681b      	ldr	r3, [r3, #0]
    ac8c:	789b      	ldrb	r3, [r3, #2]
    ac8e:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    ac92:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac96:	4618      	mov	r0, r3
    ac98:	f002 fd22 	bl	d6e0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    ac9c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aca0:	3301      	adds	r3, #1
    aca2:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    aca6:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    acaa:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    acae:	429a      	cmp	r2, r3
    acb0:	d20a      	bcs.n	acc8 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    acb2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acb6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    acba:	681b      	ldr	r3, [r3, #0]
    acbc:	7c9b      	ldrb	r3, [r3, #18]
    acbe:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    acc2:	429a      	cmp	r2, r3
    acc4:	f4ff ae85 	bcc.w	a9d2 <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    acc8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    accc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    acd0:	681b      	ldr	r3, [r3, #0]
    acd2:	789a      	ldrb	r2, [r3, #2]
    acd4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acd8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    acdc:	681b      	ldr	r3, [r3, #0]
    acde:	68db      	ldr	r3, [r3, #12]
    ace0:	4619      	mov	r1, r3
    ace2:	4610      	mov	r0, r2
    ace4:	f002 fd4a 	bl	d77c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    ace8:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    acec:	2b00      	cmp	r3, #0
    acee:	d054      	beq.n	ad9a <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    acf0:	2300      	movs	r3, #0
    acf2:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    acf6:	e03e      	b.n	ad76 <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    acf8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acfc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ad00:	681b      	ldr	r3, [r3, #0]
    ad02:	695a      	ldr	r2, [r3, #20]
    ad04:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad08:	00db      	lsls	r3, r3, #3
    ad0a:	441a      	add	r2, r3
    ad0c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad10:	6812      	ldr	r2, [r2, #0]
    ad12:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    ad16:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    ad1a:	00db      	lsls	r3, r3, #3
    ad1c:	440b      	add	r3, r1
    ad1e:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    ad20:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad24:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ad28:	681b      	ldr	r3, [r3, #0]
    ad2a:	689b      	ldr	r3, [r3, #8]
    ad2c:	2b00      	cmp	r3, #0
    ad2e:	d00a      	beq.n	ad46 <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    ad30:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad34:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    ad38:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    ad3c:	00db      	lsls	r3, r3, #3
    ad3e:	4413      	add	r3, r2
    ad40:	2201      	movs	r2, #1
    ad42:	705a      	strb	r2, [r3, #1]
    ad44:	e009      	b.n	ad5a <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    ad46:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad4a:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    ad4e:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    ad52:	00db      	lsls	r3, r3, #3
    ad54:	4413      	add	r3, r2
    ad56:	2200      	movs	r2, #0
    ad58:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    ad5a:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ad5e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad62:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    ad66:	2100      	movs	r1, #0
    ad68:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    ad6c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad70:	3301      	adds	r3, #1
    ad72:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ad76:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ad7a:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    ad7e:	429a      	cmp	r2, r3
    ad80:	d3ba      	bcc.n	acf8 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    ad82:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad86:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ad8a:	681b      	ldr	r3, [r3, #0]
    ad8c:	789b      	ldrb	r3, [r3, #2]
    ad8e:	aa02      	add	r2, sp, #8
    ad90:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    ad94:	4618      	mov	r0, r3
    ad96:	f002 f886 	bl	cea6 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    ad9a:	bf00      	nop
    ad9c:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    ada0:	f85d fb04 	ldr.w	pc, [sp], #4

0000ada4 <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    ada4:	b510      	push	{r4, lr}
    ada6:	b084      	sub	sp, #16
    ada8:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
#else
    uint16 BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
    adaa:	9b01      	ldr	r3, [sp, #4]
    adac:	8b9b      	ldrh	r3, [r3, #28]
    adae:	f8ad 300e 	strh.w	r3, [sp, #14]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    adb2:	9b01      	ldr	r3, [sp, #4]
    adb4:	6a1a      	ldr	r2, [r3, #32]
    adb6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    adba:	2116      	movs	r1, #22
    adbc:	fb01 f303 	mul.w	r3, r1, r3
    adc0:	4413      	add	r3, r2
    adc2:	785b      	ldrb	r3, [r3, #1]
    adc4:	2b00      	cmp	r3, #0
    adc6:	d016      	beq.n	adf6 <Can_Ipw_InitBaudrate+0x52>
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    adc8:	9b01      	ldr	r3, [sp, #4]
    adca:	7898      	ldrb	r0, [r3, #2]
    adcc:	9b01      	ldr	r3, [sp, #4]
    adce:	6a1a      	ldr	r2, [r3, #32]
    add0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    add4:	2116      	movs	r1, #22
    add6:	fb01 f303 	mul.w	r3, r1, r3
    adda:	4413      	add	r3, r2
    addc:	7cd9      	ldrb	r1, [r3, #19]
    adde:	9b01      	ldr	r3, [sp, #4]
    ade0:	6a1a      	ldr	r2, [r3, #32]
    ade2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ade6:	2416      	movs	r4, #22
    ade8:	fb04 f303 	mul.w	r3, r4, r3
    adec:	4413      	add	r3, r2
    adee:	7d1b      	ldrb	r3, [r3, #20]
    adf0:	461a      	mov	r2, r3
    adf2:	f003 f83d 	bl	de70 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    adf6:	9b01      	ldr	r3, [sp, #4]
    adf8:	7898      	ldrb	r0, [r3, #2]
    adfa:	9b01      	ldr	r3, [sp, #4]
    adfc:	6a1a      	ldr	r2, [r3, #32]
    adfe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ae02:	2116      	movs	r1, #22
    ae04:	fb01 f303 	mul.w	r3, r1, r3
    ae08:	4413      	add	r3, r2
    ae0a:	7c9b      	ldrb	r3, [r3, #18]
    ae0c:	4619      	mov	r1, r3
    ae0e:	f003 f883 	bl	df18 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    ae12:	bf00      	nop
    ae14:	b004      	add	sp, #16
    ae16:	bd10      	pop	{r4, pc}

0000ae18 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    ae18:	b500      	push	{lr}
    ae1a:	b087      	sub	sp, #28
    ae1c:	9003      	str	r0, [sp, #12]
    ae1e:	9102      	str	r1, [sp, #8]
    ae20:	4613      	mov	r3, r2
    ae22:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    ae26:	2300      	movs	r3, #0
    ae28:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    ae2c:	9b03      	ldr	r3, [sp, #12]
    ae2e:	785b      	ldrb	r3, [r3, #1]
    ae30:	461a      	mov	r2, r3
    ae32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae36:	491c      	ldr	r1, [pc, #112]	; (aea8 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    ae38:	0152      	lsls	r2, r2, #5
    ae3a:	4413      	add	r3, r2
    ae3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    ae40:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    ae44:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ae48:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ae4c:	4293      	cmp	r3, r2
    ae4e:	d027      	beq.n	aea0 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    ae50:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    ae54:	4613      	mov	r3, r2
    ae56:	00db      	lsls	r3, r3, #3
    ae58:	4413      	add	r3, r2
    ae5a:	009b      	lsls	r3, r3, #2
    ae5c:	461a      	mov	r2, r3
    ae5e:	9b02      	ldr	r3, [sp, #8]
    ae60:	4413      	add	r3, r2
    ae62:	7b1b      	ldrb	r3, [r3, #12]
    ae64:	f083 0301 	eor.w	r3, r3, #1
    ae68:	b2db      	uxtb	r3, r3
    ae6a:	2b00      	cmp	r3, #0
    ae6c:	d018      	beq.n	aea0 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    ae6e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    ae72:	4613      	mov	r3, r2
    ae74:	00db      	lsls	r3, r3, #3
    ae76:	4413      	add	r3, r2
    ae78:	009b      	lsls	r3, r3, #2
    ae7a:	461a      	mov	r2, r3
    ae7c:	9b02      	ldr	r3, [sp, #8]
    ae7e:	4413      	add	r3, r2
    ae80:	699b      	ldr	r3, [r3, #24]
    ae82:	2b03      	cmp	r3, #3
    ae84:	d10c      	bne.n	aea0 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    ae86:	9b03      	ldr	r3, [sp, #12]
    ae88:	785b      	ldrb	r3, [r3, #1]
    ae8a:	461a      	mov	r2, r3
    ae8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae90:	4906      	ldr	r1, [pc, #24]	; (aeac <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    ae92:	0152      	lsls	r2, r2, #5
    ae94:	4413      	add	r3, r2
    ae96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    ae9a:	4618      	mov	r0, r3
    ae9c:	f00c f850 	bl	16f40 <CanIf_TxConfirmation>
            }
        }
    }
    aea0:	bf00      	nop
    aea2:	b007      	add	sp, #28
    aea4:	f85d fb04 	ldr.w	pc, [sp], #4
    aea8:	1fff92d8 	.word	0x1fff92d8
    aeac:	1fff9258 	.word	0x1fff9258

0000aeb0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    aeb0:	b500      	push	{lr}
    aeb2:	b08f      	sub	sp, #60	; 0x3c
    aeb4:	9005      	str	r0, [sp, #20]
    aeb6:	9104      	str	r1, [sp, #16]
    aeb8:	4613      	mov	r3, r2
    aeba:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    aebe:	2300      	movs	r3, #0
    aec0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    aec4:	2300      	movs	r3, #0
    aec6:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    aec8:	2300      	movs	r3, #0
    aeca:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    aecc:	9b05      	ldr	r3, [sp, #20]
    aece:	785b      	ldrb	r3, [r3, #1]
    aed0:	461a      	mov	r2, r3
    aed2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    aed6:	4944      	ldr	r1, [pc, #272]	; (afe8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x138>)
    aed8:	0152      	lsls	r2, r2, #5
    aeda:	4413      	add	r3, r2
    aedc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    aee0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    aee4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    aee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    aeec:	4293      	cmp	r3, r2
    aeee:	d076      	beq.n	afde <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
    aef0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    aef4:	4613      	mov	r3, r2
    aef6:	00db      	lsls	r3, r3, #3
    aef8:	4413      	add	r3, r2
    aefa:	009b      	lsls	r3, r3, #2
    aefc:	461a      	mov	r2, r3
    aefe:	9b04      	ldr	r3, [sp, #16]
    af00:	4413      	add	r3, r2
    af02:	7b1b      	ldrb	r3, [r3, #12]
    af04:	f083 0301 	eor.w	r3, r3, #1
    af08:	b2db      	uxtb	r3, r3
    af0a:	2b00      	cmp	r3, #0
    af0c:	d067      	beq.n	afde <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    af0e:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    af12:	4613      	mov	r3, r2
    af14:	00db      	lsls	r3, r3, #3
    af16:	4413      	add	r3, r2
    af18:	009b      	lsls	r3, r3, #2
    af1a:	461a      	mov	r2, r3
    af1c:	9b04      	ldr	r3, [sp, #16]
    af1e:	4413      	add	r3, r2
    af20:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    af22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af24:	699b      	ldr	r3, [r3, #24]
    af26:	2b00      	cmp	r3, #0
    af28:	d11d      	bne.n	af66 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xb6>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    af2a:	9b05      	ldr	r3, [sp, #20]
    af2c:	785b      	ldrb	r3, [r3, #1]
    af2e:	461a      	mov	r2, r3
    af30:	4b2e      	ldr	r3, [pc, #184]	; (afec <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    af32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    af36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af38:	7f1b      	ldrb	r3, [r3, #28]
    af3a:	011b      	lsls	r3, r3, #4
    af3c:	4413      	add	r3, r2
    af3e:	681b      	ldr	r3, [r3, #0]
    af40:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    af42:	a906      	add	r1, sp, #24
    af44:	a809      	add	r0, sp, #36	; 0x24
    af46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af48:	9300      	str	r3, [sp, #0]
    af4a:	9b05      	ldr	r3, [sp, #20]
    af4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    af4e:	f7ff fca9 	bl	a8a4 <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    af52:	9b05      	ldr	r3, [sp, #20]
    af54:	7898      	ldrb	r0, [r3, #2]
    af56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af58:	7f19      	ldrb	r1, [r3, #28]
    af5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af5c:	7b1b      	ldrb	r3, [r3, #12]
    af5e:	2200      	movs	r2, #0
    af60:	f001 fe70 	bl	cc44 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    af64:	e03b      	b.n	afde <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    af66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af68:	699b      	ldr	r3, [r3, #24]
    af6a:	2b01      	cmp	r3, #1
    af6c:	d137      	bne.n	afde <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                if ((uint8)7U == u8MbIdx)
    af6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    af72:	2b07      	cmp	r3, #7
    af74:	d10d      	bne.n	af92 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xe2>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    af76:	2301      	movs	r3, #1
    af78:	2208      	movs	r2, #8
    af7a:	2100      	movs	r1, #0
    af7c:	2050      	movs	r0, #80	; 0x50
    af7e:	f00b fee5 	bl	16d4c <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    af82:	9b05      	ldr	r3, [sp, #20]
    af84:	699b      	ldr	r3, [r3, #24]
    af86:	2b00      	cmp	r3, #0
    af88:	d029      	beq.n	afde <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    af8a:	9b05      	ldr	r3, [sp, #20]
    af8c:	699b      	ldr	r3, [r3, #24]
    af8e:	4798      	blx	r3
    }
    af90:	e025      	b.n	afde <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                else if ((uint8)6U == u8MbIdx)
    af92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    af96:	2b06      	cmp	r3, #6
    af98:	d107      	bne.n	afaa <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xfa>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    af9a:	9b05      	ldr	r3, [sp, #20]
    af9c:	695b      	ldr	r3, [r3, #20]
    af9e:	2b00      	cmp	r3, #0
    afa0:	d01d      	beq.n	afde <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    afa2:	9b05      	ldr	r3, [sp, #20]
    afa4:	695b      	ldr	r3, [r3, #20]
    afa6:	4798      	blx	r3
    }
    afa8:	e019      	b.n	afde <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    afaa:	9b05      	ldr	r3, [sp, #20]
    afac:	785b      	ldrb	r3, [r3, #1]
    afae:	461a      	mov	r2, r3
    afb0:	4b0e      	ldr	r3, [pc, #56]	; (afec <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    afb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    afb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afb8:	7f1b      	ldrb	r3, [r3, #28]
    afba:	011b      	lsls	r3, r3, #4
    afbc:	4413      	add	r3, r2
    afbe:	681b      	ldr	r3, [r3, #0]
    afc0:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    afc2:	a906      	add	r1, sp, #24
    afc4:	a809      	add	r0, sp, #36	; 0x24
    afc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afc8:	9300      	str	r3, [sp, #0]
    afca:	9b05      	ldr	r3, [sp, #20]
    afcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    afce:	f7ff fc69 	bl	a8a4 <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    afd2:	9b05      	ldr	r3, [sp, #20]
    afd4:	789b      	ldrb	r3, [r3, #2]
    afd6:	2100      	movs	r1, #0
    afd8:	4618      	mov	r0, r3
    afda:	f001 ff31 	bl	ce40 <FlexCAN_Ip_RxFifo>
    }
    afde:	bf00      	nop
    afe0:	b00f      	add	sp, #60	; 0x3c
    afe2:	f85d fb04 	ldr.w	pc, [sp], #4
    afe6:	bf00      	nop
    afe8:	1fff92d8 	.word	0x1fff92d8
    afec:	0001854c 	.word	0x0001854c

0000aff0 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    aff0:	b510      	push	{r4, lr}
    aff2:	b084      	sub	sp, #16
    aff4:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    aff6:	2301      	movs	r3, #1
    aff8:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    affc:	2300      	movs	r3, #0
    affe:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    b002:	2300      	movs	r3, #0
    b004:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    b008:	2300      	movs	r3, #0
    b00a:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    b00c:	2300      	movs	r3, #0
    b00e:	f88d 300d 	strb.w	r3, [sp, #13]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    b012:	9b01      	ldr	r3, [sp, #4]
    b014:	7898      	ldrb	r0, [r3, #2]
    b016:	9b01      	ldr	r3, [sp, #4]
    b018:	785b      	ldrb	r3, [r3, #1]
    b01a:	461a      	mov	r2, r3
    b01c:	4b77      	ldr	r3, [pc, #476]	; (b1fc <Can_43_FLEXCAN_Ipw_Init+0x20c>)
    b01e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    b022:	9b01      	ldr	r3, [sp, #4]
    b024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b026:	681b      	ldr	r3, [r3, #0]
    b028:	461a      	mov	r2, r3
    b02a:	f001 fcff 	bl	ca2c <FlexCAN_Ip_Init_Privileged>
    b02e:	4603      	mov	r3, r0
    b030:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    b034:	9b01      	ldr	r3, [sp, #4]
    b036:	785b      	ldrb	r3, [r3, #1]
    b038:	461a      	mov	r2, r3
    b03a:	4b71      	ldr	r3, [pc, #452]	; (b200 <Can_43_FLEXCAN_Ipw_Init+0x210>)
    b03c:	2101      	movs	r1, #1
    b03e:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    b040:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b044:	2b00      	cmp	r3, #0
    b046:	d13b      	bne.n	b0c0 <Can_43_FLEXCAN_Ipw_Init+0xd0>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b048:	9b01      	ldr	r3, [sp, #4]
    b04a:	789b      	ldrb	r3, [r3, #2]
    b04c:	4618      	mov	r0, r3
    b04e:	f003 f821 	bl	e094 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    b052:	9b01      	ldr	r3, [sp, #4]
    b054:	6a1a      	ldr	r2, [r3, #32]
    b056:	9b01      	ldr	r3, [sp, #4]
    b058:	8b9b      	ldrh	r3, [r3, #28]
    b05a:	4619      	mov	r1, r3
    b05c:	2316      	movs	r3, #22
    b05e:	fb01 f303 	mul.w	r3, r1, r3
    b062:	4413      	add	r3, r2
    b064:	785b      	ldrb	r3, [r3, #1]
    b066:	2b00      	cmp	r3, #0
    b068:	d018      	beq.n	b09c <Can_43_FLEXCAN_Ipw_Init+0xac>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    b06a:	9b01      	ldr	r3, [sp, #4]
    b06c:	7898      	ldrb	r0, [r3, #2]
    b06e:	9b01      	ldr	r3, [sp, #4]
    b070:	6a1a      	ldr	r2, [r3, #32]
    b072:	9b01      	ldr	r3, [sp, #4]
    b074:	8b9b      	ldrh	r3, [r3, #28]
    b076:	4619      	mov	r1, r3
    b078:	2316      	movs	r3, #22
    b07a:	fb01 f303 	mul.w	r3, r1, r3
    b07e:	4413      	add	r3, r2
    b080:	7cd9      	ldrb	r1, [r3, #19]
    b082:	9b01      	ldr	r3, [sp, #4]
    b084:	6a1a      	ldr	r2, [r3, #32]
    b086:	9b01      	ldr	r3, [sp, #4]
    b088:	8b9b      	ldrh	r3, [r3, #28]
    b08a:	461c      	mov	r4, r3
    b08c:	2316      	movs	r3, #22
    b08e:	fb04 f303 	mul.w	r3, r4, r3
    b092:	4413      	add	r3, r2
    b094:	7d1b      	ldrb	r3, [r3, #20]
    b096:	461a      	mov	r2, r3
    b098:	f002 feea 	bl	de70 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    b09c:	9b01      	ldr	r3, [sp, #4]
    b09e:	7898      	ldrb	r0, [r3, #2]
    b0a0:	9b01      	ldr	r3, [sp, #4]
    b0a2:	6a1a      	ldr	r2, [r3, #32]
    b0a4:	9b01      	ldr	r3, [sp, #4]
    b0a6:	8b9b      	ldrh	r3, [r3, #28]
    b0a8:	4619      	mov	r1, r3
    b0aa:	2316      	movs	r3, #22
    b0ac:	fb01 f303 	mul.w	r3, r1, r3
    b0b0:	4413      	add	r3, r2
    b0b2:	7c9b      	ldrb	r3, [r3, #18]
    b0b4:	4619      	mov	r1, r3
    b0b6:	f002 ff2f 	bl	df18 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b0ba:	9801      	ldr	r0, [sp, #4]
    b0bc:	f000 fb0a 	bl	b6d4 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b0c0:	2300      	movs	r3, #0
    b0c2:	f88d 300d 	strb.w	r3, [sp, #13]
    b0c6:	e010      	b.n	b0ea <Can_43_FLEXCAN_Ipw_Init+0xfa>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    b0c8:	9b01      	ldr	r3, [sp, #4]
    b0ca:	785b      	ldrb	r3, [r3, #1]
    b0cc:	461a      	mov	r2, r3
    b0ce:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b0d2:	494c      	ldr	r1, [pc, #304]	; (b204 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b0d4:	0152      	lsls	r2, r2, #5
    b0d6:	4413      	add	r3, r2
    b0d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b0dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b0e0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b0e4:	3301      	adds	r3, #1
    b0e6:	f88d 300d 	strb.w	r3, [sp, #13]
    b0ea:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b0ee:	2b1f      	cmp	r3, #31
    b0f0:	d9ea      	bls.n	b0c8 <Can_43_FLEXCAN_Ipw_Init+0xd8>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b0f2:	2300      	movs	r3, #0
    b0f4:	f88d 300f 	strb.w	r3, [sp, #15]
    b0f8:	e06b      	b.n	b1d2 <Can_43_FLEXCAN_Ipw_Init+0x1e2>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b0fa:	9b01      	ldr	r3, [sp, #4]
    b0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b0fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b102:	009b      	lsls	r3, r3, #2
    b104:	4413      	add	r3, r2
    b106:	681b      	ldr	r3, [r3, #0]
    b108:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    b10a:	9b02      	ldr	r3, [sp, #8]
    b10c:	699b      	ldr	r3, [r3, #24]
    b10e:	2b03      	cmp	r3, #3
    b110:	d006      	beq.n	b120 <Can_43_FLEXCAN_Ipw_Init+0x130>
    b112:	2b03      	cmp	r3, #3
    b114:	d857      	bhi.n	b1c6 <Can_43_FLEXCAN_Ipw_Init+0x1d6>
    b116:	2b00      	cmp	r3, #0
    b118:	d023      	beq.n	b162 <Can_43_FLEXCAN_Ipw_Init+0x172>
    b11a:	2b01      	cmp	r3, #1
    b11c:	d02f      	beq.n	b17e <Can_43_FLEXCAN_Ipw_Init+0x18e>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    b11e:	e052      	b.n	b1c6 <Can_43_FLEXCAN_Ipw_Init+0x1d6>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b120:	2300      	movs	r3, #0
    b122:	f88d 300e 	strb.w	r3, [sp, #14]
    b126:	e015      	b.n	b154 <Can_43_FLEXCAN_Ipw_Init+0x164>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    b128:	9b01      	ldr	r3, [sp, #4]
    b12a:	785b      	ldrb	r3, [r3, #1]
    b12c:	461c      	mov	r4, r3
    b12e:	9b02      	ldr	r3, [sp, #8]
    b130:	7f1b      	ldrb	r3, [r3, #28]
    b132:	461a      	mov	r2, r3
    b134:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b138:	4413      	add	r3, r2
    b13a:	9a02      	ldr	r2, [sp, #8]
    b13c:	8810      	ldrh	r0, [r2, #0]
    b13e:	4931      	ldr	r1, [pc, #196]	; (b204 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b140:	0162      	lsls	r2, r4, #5
    b142:	4413      	add	r3, r2
    b144:	4602      	mov	r2, r0
    b146:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b14a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b14e:	3301      	adds	r3, #1
    b150:	f88d 300e 	strb.w	r3, [sp, #14]
    b154:	9b02      	ldr	r3, [sp, #8]
    b156:	7b9b      	ldrb	r3, [r3, #14]
    b158:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b15c:	429a      	cmp	r2, r3
    b15e:	d3e3      	bcc.n	b128 <Can_43_FLEXCAN_Ipw_Init+0x138>
                break;
    b160:	e032      	b.n	b1c8 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b162:	9b01      	ldr	r3, [sp, #4]
    b164:	785b      	ldrb	r3, [r3, #1]
    b166:	461c      	mov	r4, r3
    b168:	9b02      	ldr	r3, [sp, #8]
    b16a:	7f1b      	ldrb	r3, [r3, #28]
    b16c:	4618      	mov	r0, r3
    b16e:	9b02      	ldr	r3, [sp, #8]
    b170:	8819      	ldrh	r1, [r3, #0]
    b172:	4a24      	ldr	r2, [pc, #144]	; (b204 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b174:	0163      	lsls	r3, r4, #5
    b176:	4403      	add	r3, r0
    b178:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    b17c:	e024      	b.n	b1c8 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b17e:	9b01      	ldr	r3, [sp, #4]
    b180:	785b      	ldrb	r3, [r3, #1]
    b182:	461c      	mov	r4, r3
    b184:	9b02      	ldr	r3, [sp, #8]
    b186:	7f1b      	ldrb	r3, [r3, #28]
    b188:	4618      	mov	r0, r3
    b18a:	9b02      	ldr	r3, [sp, #8]
    b18c:	8819      	ldrh	r1, [r3, #0]
    b18e:	4a1d      	ldr	r2, [pc, #116]	; (b204 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b190:	0163      	lsls	r3, r4, #5
    b192:	4403      	add	r3, r0
    b194:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    b198:	9b01      	ldr	r3, [sp, #4]
    b19a:	785b      	ldrb	r3, [r3, #1]
    b19c:	4618      	mov	r0, r3
    b19e:	9b02      	ldr	r3, [sp, #8]
    b1a0:	8819      	ldrh	r1, [r3, #0]
    b1a2:	4a18      	ldr	r2, [pc, #96]	; (b204 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b1a4:	0183      	lsls	r3, r0, #6
    b1a6:	4413      	add	r3, r2
    b1a8:	330c      	adds	r3, #12
    b1aa:	460a      	mov	r2, r1
    b1ac:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    b1ae:	9b01      	ldr	r3, [sp, #4]
    b1b0:	785b      	ldrb	r3, [r3, #1]
    b1b2:	4618      	mov	r0, r3
    b1b4:	9b02      	ldr	r3, [sp, #8]
    b1b6:	8819      	ldrh	r1, [r3, #0]
    b1b8:	4a12      	ldr	r2, [pc, #72]	; (b204 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b1ba:	0183      	lsls	r3, r0, #6
    b1bc:	4413      	add	r3, r2
    b1be:	330e      	adds	r3, #14
    b1c0:	460a      	mov	r2, r1
    b1c2:	801a      	strh	r2, [r3, #0]
                break;
    b1c4:	e000      	b.n	b1c8 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                break;
    b1c6:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b1c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b1cc:	3301      	adds	r3, #1
    b1ce:	f88d 300f 	strb.w	r3, [sp, #15]
    b1d2:	9b01      	ldr	r3, [sp, #4]
    b1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b1d8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b1dc:	429a      	cmp	r2, r3
    b1de:	d38c      	bcc.n	b0fa <Can_43_FLEXCAN_Ipw_Init+0x10a>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b1e0:	9b01      	ldr	r3, [sp, #4]
    b1e2:	789b      	ldrb	r3, [r3, #2]
    b1e4:	4618      	mov	r0, r3
    b1e6:	f002 fca5 	bl	db34 <FlexCAN_Ip_SetStopMode_Privileged>
    b1ea:	4603      	mov	r3, r0
    b1ec:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b1f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    b1f4:	4618      	mov	r0, r3
    b1f6:	b004      	add	sp, #16
    b1f8:	bd10      	pop	{r4, pc}
    b1fa:	bf00      	nop
    b1fc:	0001854c 	.word	0x0001854c
    b200:	1fff9358 	.word	0x1fff9358
    b204:	1fff92d8 	.word	0x1fff92d8

0000b208 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b208:	b500      	push	{lr}
    b20a:	b083      	sub	sp, #12
    b20c:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    b20e:	9b01      	ldr	r3, [sp, #4]
    b210:	789b      	ldrb	r3, [r3, #2]
    b212:	4618      	mov	r0, r3
    b214:	f002 fafa 	bl	d80c <FlexCAN_Ip_Deinit_Privileged>
}
    b218:	bf00      	nop
    b21a:	b003      	add	sp, #12
    b21c:	f85d fb04 	ldr.w	pc, [sp], #4

0000b220 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b220:	b500      	push	{lr}
    b222:	b085      	sub	sp, #20
    b224:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    b226:	2300      	movs	r3, #0
    b228:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b22a:	9b01      	ldr	r3, [sp, #4]
    b22c:	785b      	ldrb	r3, [r3, #1]
    b22e:	461a      	mov	r2, r3
    b230:	4b11      	ldr	r3, [pc, #68]	; (b278 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    b232:	5c9b      	ldrb	r3, [r3, r2]
    b234:	2b00      	cmp	r3, #0
    b236:	d012      	beq.n	b25e <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b238:	9b01      	ldr	r3, [sp, #4]
    b23a:	7a5b      	ldrb	r3, [r3, #9]
    b23c:	f083 0301 	eor.w	r3, r3, #1
    b240:	b2db      	uxtb	r3, r3
    b242:	2b00      	cmp	r3, #0
    b244:	d006      	beq.n	b254 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b246:	9b01      	ldr	r3, [sp, #4]
    b248:	789b      	ldrb	r3, [r3, #2]
    b24a:	2201      	movs	r2, #1
    b24c:	2104      	movs	r1, #4
    b24e:	4618      	mov	r0, r3
    b250:	f002 ff4c 	bl	e0ec <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b254:	9b01      	ldr	r3, [sp, #4]
    b256:	789b      	ldrb	r3, [r3, #2]
    b258:	4618      	mov	r0, r3
    b25a:	f002 feed 	bl	e038 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b25e:	9b01      	ldr	r3, [sp, #4]
    b260:	789b      	ldrb	r3, [r3, #2]
    b262:	4618      	mov	r0, r3
    b264:	f002 fc46 	bl	daf4 <FlexCAN_Ip_SetStartMode_Privileged>
    b268:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b26a:	9b03      	ldr	r3, [sp, #12]
    b26c:	b2db      	uxtb	r3, r3
}
    b26e:	4618      	mov	r0, r3
    b270:	b005      	add	sp, #20
    b272:	f85d fb04 	ldr.w	pc, [sp], #4
    b276:	bf00      	nop
    b278:	1fff9358 	.word	0x1fff9358

0000b27c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b27c:	b500      	push	{lr}
    b27e:	b087      	sub	sp, #28
    b280:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    b282:	2300      	movs	r3, #0
    b284:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    b288:	2300      	movs	r3, #0
    b28a:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    b28c:	9b01      	ldr	r3, [sp, #4]
    b28e:	7898      	ldrb	r0, [r3, #2]
    b290:	9b01      	ldr	r3, [sp, #4]
    b292:	785b      	ldrb	r3, [r3, #1]
    b294:	461a      	mov	r2, r3
    b296:	4b31      	ldr	r3, [pc, #196]	; (b35c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xe0>)
    b298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    b29c:	9b01      	ldr	r3, [sp, #4]
    b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b2a0:	681b      	ldr	r3, [r3, #0]
    b2a2:	461a      	mov	r2, r3
    b2a4:	f001 fbc2 	bl	ca2c <FlexCAN_Ip_Init_Privileged>
    b2a8:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b2aa:	9b04      	ldr	r3, [sp, #16]
    b2ac:	2b00      	cmp	r3, #0
    b2ae:	d14f      	bne.n	b350 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd4>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b2b0:	9b01      	ldr	r3, [sp, #4]
    b2b2:	789b      	ldrb	r3, [r3, #2]
    b2b4:	4618      	mov	r0, r3
    b2b6:	f002 feed 	bl	e094 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    b2ba:	9801      	ldr	r0, [sp, #4]
    b2bc:	f7ff fd72 	bl	ada4 <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b2c0:	9801      	ldr	r0, [sp, #4]
    b2c2:	f000 fa07 	bl	b6d4 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b2c6:	2300      	movs	r3, #0
    b2c8:	f88d 3017 	strb.w	r3, [sp, #23]
    b2cc:	e02f      	b.n	b32e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xb2>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b2ce:	9b01      	ldr	r3, [sp, #4]
    b2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b2d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b2d6:	009b      	lsls	r3, r3, #2
    b2d8:	4413      	add	r3, r2
    b2da:	681b      	ldr	r3, [r3, #0]
    b2dc:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    b2de:	9b03      	ldr	r3, [sp, #12]
    b2e0:	7b1b      	ldrb	r3, [r3, #12]
    b2e2:	f083 0301 	eor.w	r3, r3, #1
    b2e6:	b2db      	uxtb	r3, r3
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	d018      	beq.n	b31e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa2>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    b2ec:	9b03      	ldr	r3, [sp, #12]
    b2ee:	699b      	ldr	r3, [r3, #24]
    b2f0:	2b00      	cmp	r3, #0
    b2f2:	d003      	beq.n	b2fc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x80>
    b2f4:	3b01      	subs	r3, #1
    b2f6:	2b01      	cmp	r3, #1
    b2f8:	d813      	bhi.n	b322 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa6>
    b2fa:	e009      	b.n	b310 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x94>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    b2fc:	9b01      	ldr	r3, [sp, #4]
    b2fe:	7898      	ldrb	r0, [r3, #2]
    b300:	9b03      	ldr	r3, [sp, #12]
    b302:	7f19      	ldrb	r1, [r3, #28]
    b304:	9b03      	ldr	r3, [sp, #12]
    b306:	7b1b      	ldrb	r3, [r3, #12]
    b308:	2200      	movs	r2, #0
    b30a:	f001 fc9b 	bl	cc44 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    b30e:	e009      	b.n	b324 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    b310:	9b01      	ldr	r3, [sp, #4]
    b312:	789b      	ldrb	r3, [r3, #2]
    b314:	2100      	movs	r1, #0
    b316:	4618      	mov	r0, r3
    b318:	f001 fd92 	bl	ce40 <FlexCAN_Ip_RxFifo>
                        }
                        break;
    b31c:	e002      	b.n	b324 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    b31e:	bf00      	nop
    b320:	e000      	b.n	b324 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                        break;
    b322:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b324:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b328:	3301      	adds	r3, #1
    b32a:	f88d 3017 	strb.w	r3, [sp, #23]
    b32e:	9b01      	ldr	r3, [sp, #4]
    b330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b334:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b338:	429a      	cmp	r2, r3
    b33a:	d3c8      	bcc.n	b2ce <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x52>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    b33c:	9801      	ldr	r0, [sp, #4]
    b33e:	f7ff ff6f 	bl	b220 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    b342:	4603      	mov	r3, r0
    b344:	2b00      	cmp	r3, #0
    b346:	bf14      	ite	ne
    b348:	2301      	movne	r3, #1
    b34a:	2300      	moveq	r3, #0
    b34c:	b2db      	uxtb	r3, r3
    b34e:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    b350:	9b04      	ldr	r3, [sp, #16]
    b352:	b2db      	uxtb	r3, r3
}
    b354:	4618      	mov	r0, r3
    b356:	b007      	add	sp, #28
    b358:	f85d fb04 	ldr.w	pc, [sp], #4
    b35c:	0001854c 	.word	0x0001854c

0000b360 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b360:	b500      	push	{lr}
    b362:	b085      	sub	sp, #20
    b364:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    b366:	2300      	movs	r3, #0
    b368:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    b36c:	2300      	movs	r3, #0
    b36e:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b372:	9b01      	ldr	r3, [sp, #4]
    b374:	789b      	ldrb	r3, [r3, #2]
    b376:	4618      	mov	r0, r3
    b378:	f002 f986 	bl	d688 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    b37c:	4603      	mov	r3, r0
    b37e:	2b00      	cmp	r3, #0
    b380:	d160      	bne.n	b444 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b382:	9b01      	ldr	r3, [sp, #4]
    b384:	785b      	ldrb	r3, [r3, #1]
    b386:	461a      	mov	r2, r3
    b388:	4b33      	ldr	r3, [pc, #204]	; (b458 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    b38a:	5c9b      	ldrb	r3, [r3, r2]
    b38c:	2b00      	cmp	r3, #0
    b38e:	d012      	beq.n	b3b6 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b390:	9b01      	ldr	r3, [sp, #4]
    b392:	789b      	ldrb	r3, [r3, #2]
    b394:	4618      	mov	r0, r3
    b396:	f002 fe7d 	bl	e094 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b39a:	9b01      	ldr	r3, [sp, #4]
    b39c:	7a5b      	ldrb	r3, [r3, #9]
    b39e:	f083 0301 	eor.w	r3, r3, #1
    b3a2:	b2db      	uxtb	r3, r3
    b3a4:	2b00      	cmp	r3, #0
    b3a6:	d006      	beq.n	b3b6 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b3a8:	9b01      	ldr	r3, [sp, #4]
    b3aa:	789b      	ldrb	r3, [r3, #2]
    b3ac:	2200      	movs	r2, #0
    b3ae:	2104      	movs	r1, #4
    b3b0:	4618      	mov	r0, r3
    b3b2:	f002 fe9b 	bl	e0ec <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b3b6:	2300      	movs	r3, #0
    b3b8:	f88d 300e 	strb.w	r3, [sp, #14]
    b3bc:	e032      	b.n	b424 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b3be:	9b01      	ldr	r3, [sp, #4]
    b3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b3c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b3c6:	009b      	lsls	r3, r3, #2
    b3c8:	4413      	add	r3, r2
    b3ca:	681b      	ldr	r3, [r3, #0]
    b3cc:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b3ce:	9b02      	ldr	r3, [sp, #8]
    b3d0:	699b      	ldr	r3, [r3, #24]
    b3d2:	2b03      	cmp	r3, #3
    b3d4:	d119      	bne.n	b40a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    b3d6:	2300      	movs	r3, #0
    b3d8:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    b3dc:	9b01      	ldr	r3, [sp, #4]
    b3de:	7898      	ldrb	r0, [r3, #2]
    b3e0:	9b02      	ldr	r3, [sp, #8]
    b3e2:	7f1a      	ldrb	r2, [r3, #28]
    b3e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b3e8:	4413      	add	r3, r2
    b3ea:	b2db      	uxtb	r3, r3
    b3ec:	4619      	mov	r1, r3
    b3ee:	f002 ff03 	bl	e1f8 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    b3f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b3f6:	3301      	adds	r3, #1
    b3f8:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    b3fc:	9b02      	ldr	r3, [sp, #8]
    b3fe:	7b9b      	ldrb	r3, [r3, #14]
    b400:	f89d 200d 	ldrb.w	r2, [sp, #13]
    b404:	429a      	cmp	r2, r3
    b406:	d3e9      	bcc.n	b3dc <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    b408:	e007      	b.n	b41a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    b40a:	9b01      	ldr	r3, [sp, #4]
    b40c:	789a      	ldrb	r2, [r3, #2]
    b40e:	9b02      	ldr	r3, [sp, #8]
    b410:	7f1b      	ldrb	r3, [r3, #28]
    b412:	4619      	mov	r1, r3
    b414:	4610      	mov	r0, r2
    b416:	f002 feef 	bl	e1f8 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b41a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b41e:	3301      	adds	r3, #1
    b420:	f88d 300e 	strb.w	r3, [sp, #14]
    b424:	9b01      	ldr	r3, [sp, #4]
    b426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b42a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b42e:	429a      	cmp	r2, r3
    b430:	d3c5      	bcc.n	b3be <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b432:	9b01      	ldr	r3, [sp, #4]
    b434:	789b      	ldrb	r3, [r3, #2]
    b436:	4618      	mov	r0, r3
    b438:	f002 fb7c 	bl	db34 <FlexCAN_Ip_SetStopMode_Privileged>
    b43c:	4603      	mov	r3, r0
    b43e:	f88d 300f 	strb.w	r3, [sp, #15]
    b442:	e002      	b.n	b44a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    b444:	2301      	movs	r3, #1
    b446:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    b44a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b44e:	4618      	mov	r0, r3
    b450:	b005      	add	sp, #20
    b452:	f85d fb04 	ldr.w	pc, [sp], #4
    b456:	bf00      	nop
    b458:	1fff9358 	.word	0x1fff9358

0000b45c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b45c:	b500      	push	{lr}
    b45e:	b083      	sub	sp, #12
    b460:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b462:	9b01      	ldr	r3, [sp, #4]
    b464:	785b      	ldrb	r3, [r3, #1]
    b466:	461a      	mov	r2, r3
    b468:	4b10      	ldr	r3, [pc, #64]	; (b4ac <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b46a:	5c9b      	ldrb	r3, [r3, r2]
    b46c:	2b00      	cmp	r3, #0
    b46e:	d018      	beq.n	b4a2 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b470:	9b01      	ldr	r3, [sp, #4]
    b472:	789b      	ldrb	r3, [r3, #2]
    b474:	4618      	mov	r0, r3
    b476:	f002 fe0d 	bl	e094 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    b47a:	9b01      	ldr	r3, [sp, #4]
    b47c:	785b      	ldrb	r3, [r3, #1]
    b47e:	461a      	mov	r2, r3
    b480:	4b0a      	ldr	r3, [pc, #40]	; (b4ac <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b482:	2100      	movs	r1, #0
    b484:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b486:	9b01      	ldr	r3, [sp, #4]
    b488:	7a5b      	ldrb	r3, [r3, #9]
    b48a:	f083 0301 	eor.w	r3, r3, #1
    b48e:	b2db      	uxtb	r3, r3
    b490:	2b00      	cmp	r3, #0
    b492:	d006      	beq.n	b4a2 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b494:	9b01      	ldr	r3, [sp, #4]
    b496:	789b      	ldrb	r3, [r3, #2]
    b498:	2200      	movs	r2, #0
    b49a:	2104      	movs	r1, #4
    b49c:	4618      	mov	r0, r3
    b49e:	f002 fe25 	bl	e0ec <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    b4a2:	bf00      	nop
    b4a4:	b003      	add	sp, #12
    b4a6:	f85d fb04 	ldr.w	pc, [sp], #4
    b4aa:	bf00      	nop
    b4ac:	1fff9358 	.word	0x1fff9358

0000b4b0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b4b0:	b500      	push	{lr}
    b4b2:	b083      	sub	sp, #12
    b4b4:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b4b6:	9b01      	ldr	r3, [sp, #4]
    b4b8:	785b      	ldrb	r3, [r3, #1]
    b4ba:	461a      	mov	r2, r3
    b4bc:	4b11      	ldr	r3, [pc, #68]	; (b504 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b4be:	5c9b      	ldrb	r3, [r3, r2]
    b4c0:	f083 0301 	eor.w	r3, r3, #1
    b4c4:	b2db      	uxtb	r3, r3
    b4c6:	2b00      	cmp	r3, #0
    b4c8:	d018      	beq.n	b4fc <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b4ca:	9b01      	ldr	r3, [sp, #4]
    b4cc:	789b      	ldrb	r3, [r3, #2]
    b4ce:	4618      	mov	r0, r3
    b4d0:	f002 fdb2 	bl	e038 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b4d4:	9b01      	ldr	r3, [sp, #4]
    b4d6:	7a5b      	ldrb	r3, [r3, #9]
    b4d8:	f083 0301 	eor.w	r3, r3, #1
    b4dc:	b2db      	uxtb	r3, r3
    b4de:	2b00      	cmp	r3, #0
    b4e0:	d006      	beq.n	b4f0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b4e2:	9b01      	ldr	r3, [sp, #4]
    b4e4:	789b      	ldrb	r3, [r3, #2]
    b4e6:	2201      	movs	r2, #1
    b4e8:	2104      	movs	r1, #4
    b4ea:	4618      	mov	r0, r3
    b4ec:	f002 fdfe 	bl	e0ec <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    b4f0:	9b01      	ldr	r3, [sp, #4]
    b4f2:	785b      	ldrb	r3, [r3, #1]
    b4f4:	461a      	mov	r2, r3
    b4f6:	4b03      	ldr	r3, [pc, #12]	; (b504 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b4f8:	2101      	movs	r1, #1
    b4fa:	5499      	strb	r1, [r3, r2]
    }
}
    b4fc:	bf00      	nop
    b4fe:	b003      	add	sp, #12
    b500:	f85d fb04 	ldr.w	pc, [sp], #4
    b504:	1fff9358 	.word	0x1fff9358

0000b508 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b508:	b500      	push	{lr}
    b50a:	b085      	sub	sp, #20
    b50c:	9001      	str	r0, [sp, #4]
    b50e:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    b510:	2300      	movs	r3, #0
    b512:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    b514:	9b01      	ldr	r3, [sp, #4]
    b516:	789b      	ldrb	r3, [r3, #2]
    b518:	4618      	mov	r0, r3
    b51a:	f001 fe81 	bl	d220 <FlexCAN_Ip_GetErrorStatus>
    b51e:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    b520:	9b03      	ldr	r3, [sp, #12]
    b522:	091b      	lsrs	r3, r3, #4
    b524:	b2db      	uxtb	r3, r3
    b526:	f003 0303 	and.w	r3, r3, #3
    b52a:	b2da      	uxtb	r2, r3
    b52c:	9b00      	ldr	r3, [sp, #0]
    b52e:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b530:	2300      	movs	r3, #0
}
    b532:	4618      	mov	r0, r3
    b534:	b005      	add	sp, #20
    b536:	f85d fb04 	ldr.w	pc, [sp], #4

0000b53a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b53a:	b500      	push	{lr}
    b53c:	b083      	sub	sp, #12
    b53e:	9001      	str	r0, [sp, #4]
    b540:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b542:	9b01      	ldr	r3, [sp, #4]
    b544:	789b      	ldrb	r3, [r3, #2]
    b546:	4618      	mov	r0, r3
    b548:	f001 fe7c 	bl	d244 <FlexCAN_Ip_GetControllerTxErrorCounter>
    b54c:	4603      	mov	r3, r0
    b54e:	461a      	mov	r2, r3
    b550:	9b00      	ldr	r3, [sp, #0]
    b552:	701a      	strb	r2, [r3, #0]
     return E_OK;
    b554:	2300      	movs	r3, #0
}
    b556:	4618      	mov	r0, r3
    b558:	b003      	add	sp, #12
    b55a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b55e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b55e:	b500      	push	{lr}
    b560:	b083      	sub	sp, #12
    b562:	9001      	str	r0, [sp, #4]
    b564:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b566:	9b01      	ldr	r3, [sp, #4]
    b568:	789b      	ldrb	r3, [r3, #2]
    b56a:	4618      	mov	r0, r3
    b56c:	f001 fe7c 	bl	d268 <FlexCAN_Ip_GetControllerRxErrorCounter>
    b570:	4603      	mov	r3, r0
    b572:	461a      	mov	r2, r3
    b574:	9b00      	ldr	r3, [sp, #0]
    b576:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b578:	2300      	movs	r3, #0
}
    b57a:	4618      	mov	r0, r3
    b57c:	b003      	add	sp, #12
    b57e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b582 <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    b582:	b510      	push	{r4, lr}
    b584:	b08c      	sub	sp, #48	; 0x30
    b586:	9005      	str	r0, [sp, #20]
    b588:	9104      	str	r1, [sp, #16]
    b58a:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    b58c:	2301      	movs	r3, #1
    b58e:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    b590:	2300      	movs	r3, #0
    b592:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b596:	2300      	movs	r3, #0
    b598:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    b59a:	2300      	movs	r3, #0
    b59c:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    b59e:	2300      	movs	r3, #0
    b5a0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    b5a4:	2300      	movs	r3, #0
    b5a6:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    b5aa:	2300      	movs	r3, #0
    b5ac:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    b5b0:	2300      	movs	r3, #0
    b5b2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    b5b6:	2300      	movs	r3, #0
    b5b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    b5bc:	9b04      	ldr	r3, [sp, #16]
    b5be:	699b      	ldr	r3, [r3, #24]
    b5c0:	2b03      	cmp	r3, #3
    b5c2:	d173      	bne.n	b6ac <Can_43_FLEXCAN_Ipw_Write+0x12a>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    b5c4:	9b03      	ldr	r3, [sp, #12]
    b5c6:	681b      	ldr	r3, [r3, #0]
    b5c8:	0fdb      	lsrs	r3, r3, #31
    b5ca:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    b5cc:	9b04      	ldr	r3, [sp, #16]
    b5ce:	7c1a      	ldrb	r2, [r3, #16]
    b5d0:	9b03      	ldr	r3, [sp, #12]
    b5d2:	799b      	ldrb	r3, [r3, #6]
    b5d4:	429a      	cmp	r2, r3
    b5d6:	d803      	bhi.n	b5e0 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    b5d8:	9b04      	ldr	r3, [sp, #16]
    b5da:	7c1b      	ldrb	r3, [r3, #16]
    b5dc:	9307      	str	r3, [sp, #28]
    b5de:	e002      	b.n	b5e6 <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    b5e0:	9b03      	ldr	r3, [sp, #12]
    b5e2:	799b      	ldrb	r3, [r3, #6]
    b5e4:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    b5e6:	9b04      	ldr	r3, [sp, #16]
    b5e8:	7c5b      	ldrb	r3, [r3, #17]
    b5ea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    b5ee:	9b03      	ldr	r3, [sp, #12]
    b5f0:	681b      	ldr	r3, [r3, #0]
    b5f2:	0f9b      	lsrs	r3, r3, #30
    b5f4:	f003 0301 	and.w	r3, r3, #1
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	bf14      	ite	ne
    b5fc:	2301      	movne	r3, #1
    b5fe:	2300      	moveq	r3, #0
    b600:	b2db      	uxtb	r3, r3
    b602:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    b606:	9b05      	ldr	r3, [sp, #20]
    b608:	6a1a      	ldr	r2, [r3, #32]
    b60a:	9b05      	ldr	r3, [sp, #20]
    b60c:	8b9b      	ldrh	r3, [r3, #28]
    b60e:	4619      	mov	r1, r3
    b610:	2316      	movs	r3, #22
    b612:	fb01 f303 	mul.w	r3, r1, r3
    b616:	4413      	add	r3, r2
    b618:	781b      	ldrb	r3, [r3, #0]
    b61a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #endif
#endif
        DataInfo.is_remote = FALSE;
    b61e:	2300      	movs	r3, #0
    b620:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    b624:	9b04      	ldr	r3, [sp, #16]
    b626:	7b1b      	ldrb	r3, [r3, #12]
    b628:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    b62c:	9b05      	ldr	r3, [sp, #20]
    b62e:	7898      	ldrb	r0, [r3, #2]
    b630:	9b04      	ldr	r3, [sp, #16]
    b632:	7f1a      	ldrb	r2, [r3, #28]
    b634:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b638:	4413      	add	r3, r2
    b63a:	b2db      	uxtb	r3, r3
    b63c:	4619      	mov	r1, r3
    b63e:	f001 fcdd 	bl	cffc <FlexCAN_Ip_GetTransferStatus>
    b642:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b646:	2b00      	cmp	r3, #0
    b648:	d122      	bne.n	b690 <Can_43_FLEXCAN_Ipw_Write+0x10e>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    b64a:	9b05      	ldr	r3, [sp, #20]
    b64c:	785b      	ldrb	r3, [r3, #1]
    b64e:	461c      	mov	r4, r3
    b650:	9b04      	ldr	r3, [sp, #16]
    b652:	7f1b      	ldrb	r3, [r3, #28]
    b654:	461a      	mov	r2, r3
    b656:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b65a:	4413      	add	r3, r2
    b65c:	9a03      	ldr	r2, [sp, #12]
    b65e:	8890      	ldrh	r0, [r2, #4]
    b660:	491b      	ldr	r1, [pc, #108]	; (b6d0 <Can_43_FLEXCAN_Ipw_Write+0x14e>)
    b662:	0162      	lsls	r2, r4, #5
    b664:	4413      	add	r3, r2
    b666:	4602      	mov	r2, r0
    b668:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    b66c:	9b05      	ldr	r3, [sp, #20]
    b66e:	7898      	ldrb	r0, [r3, #2]
    b670:	9b04      	ldr	r3, [sp, #16]
    b672:	7f1a      	ldrb	r2, [r3, #28]
    b674:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b678:	4413      	add	r3, r2
    b67a:	b2d9      	uxtb	r1, r3
    b67c:	9b03      	ldr	r3, [sp, #12]
    b67e:	681c      	ldr	r4, [r3, #0]
    b680:	9b03      	ldr	r3, [sp, #12]
    b682:	689b      	ldr	r3, [r3, #8]
    b684:	aa06      	add	r2, sp, #24
    b686:	9300      	str	r3, [sp, #0]
    b688:	4623      	mov	r3, r4
    b68a:	f001 fa4b 	bl	cb24 <FlexCAN_Ip_Send>
    b68e:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    b690:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b694:	3301      	adds	r3, #1
    b696:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    b69a:	9b04      	ldr	r3, [sp, #16]
    b69c:	7b9b      	ldrb	r3, [r3, #14]
    b69e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    b6a2:	429a      	cmp	r2, r3
    b6a4:	d202      	bcs.n	b6ac <Can_43_FLEXCAN_Ipw_Write+0x12a>
    b6a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6a8:	2b02      	cmp	r3, #2
    b6aa:	d0bf      	beq.n	b62c <Can_43_FLEXCAN_Ipw_Write+0xaa>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    b6ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6ae:	2b00      	cmp	r3, #0
    b6b0:	d004      	beq.n	b6bc <Can_43_FLEXCAN_Ipw_Write+0x13a>
    b6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6b4:	2b02      	cmp	r3, #2
    b6b6:	d001      	beq.n	b6bc <Can_43_FLEXCAN_Ipw_Write+0x13a>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    b6b8:	2301      	movs	r3, #1
    b6ba:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    b6bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6be:	2b02      	cmp	r3, #2
    b6c0:	d002      	beq.n	b6c8 <Can_43_FLEXCAN_Ipw_Write+0x146>
    b6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6c4:	b2db      	uxtb	r3, r3
    b6c6:	e000      	b.n	b6ca <Can_43_FLEXCAN_Ipw_Write+0x148>
    b6c8:	2302      	movs	r3, #2
}
    b6ca:	4618      	mov	r0, r3
    b6cc:	b00c      	add	sp, #48	; 0x30
    b6ce:	bd10      	pop	{r4, pc}
    b6d0:	1fff9258 	.word	0x1fff9258

0000b6d4 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    b6d4:	b500      	push	{lr}
    b6d6:	b089      	sub	sp, #36	; 0x24
    b6d8:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    b6da:	2300      	movs	r3, #0
    b6dc:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    b6e0:	9b01      	ldr	r3, [sp, #4]
    b6e2:	789b      	ldrb	r3, [r3, #2]
    b6e4:	2101      	movs	r1, #1
    b6e6:	4618      	mov	r0, r3
    b6e8:	f002 fa42 	bl	db70 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b6ec:	2300      	movs	r3, #0
    b6ee:	f88d 301f 	strb.w	r3, [sp, #31]
    b6f2:	e03a      	b.n	b76a <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    b6f4:	9b01      	ldr	r3, [sp, #4]
    b6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b6f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b6fc:	009b      	lsls	r3, r3, #2
    b6fe:	4413      	add	r3, r2
    b700:	681b      	ldr	r3, [r3, #0]
    b702:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b704:	9b06      	ldr	r3, [sp, #24]
    b706:	699b      	ldr	r3, [r3, #24]
    b708:	2b00      	cmp	r3, #0
    b70a:	d121      	bne.n	b750 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    b70c:	2300      	movs	r3, #0
    b70e:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    b712:	2300      	movs	r3, #0
    b714:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    b716:	9b06      	ldr	r3, [sp, #24]
    b718:	689b      	ldr	r3, [r3, #8]
    b71a:	2b00      	cmp	r3, #0
    b71c:	d002      	beq.n	b724 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    b71e:	2301      	movs	r3, #1
    b720:	9302      	str	r3, [sp, #8]
    b722:	e001      	b.n	b728 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b724:	2300      	movs	r3, #0
    b726:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    b728:	9b01      	ldr	r3, [sp, #4]
    b72a:	7898      	ldrb	r0, [r3, #2]
    b72c:	9b06      	ldr	r3, [sp, #24]
    b72e:	7f19      	ldrb	r1, [r3, #28]
    b730:	9b06      	ldr	r3, [sp, #24]
    b732:	695b      	ldr	r3, [r3, #20]
    b734:	681b      	ldr	r3, [r3, #0]
    b736:	aa02      	add	r2, sp, #8
    b738:	f001 fa40 	bl	cbbc <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    b73c:	9b01      	ldr	r3, [sp, #4]
    b73e:	7898      	ldrb	r0, [r3, #2]
    b740:	9b06      	ldr	r3, [sp, #24]
    b742:	7f19      	ldrb	r1, [r3, #28]
    b744:	9b06      	ldr	r3, [sp, #24]
    b746:	695b      	ldr	r3, [r3, #20]
    b748:	685b      	ldr	r3, [r3, #4]
    b74a:	461a      	mov	r2, r3
    b74c:	f001 ffc8 	bl	d6e0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    b750:	9b06      	ldr	r3, [sp, #24]
    b752:	699b      	ldr	r3, [r3, #24]
    b754:	2b01      	cmp	r3, #1
    b756:	d103      	bne.n	b760 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    b758:	9906      	ldr	r1, [sp, #24]
    b75a:	9801      	ldr	r0, [sp, #4]
    b75c:	f7ff f8ff 	bl	a95e <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b760:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b764:	3301      	adds	r3, #1
    b766:	f88d 301f 	strb.w	r3, [sp, #31]
    b76a:	9b01      	ldr	r3, [sp, #4]
    b76c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b770:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b774:	429a      	cmp	r2, r3
    b776:	d3bd      	bcc.n	b6f4 <Can_Ipw_InitRx+0x20>
        }
    }
}
    b778:	bf00      	nop
    b77a:	bf00      	nop
    b77c:	b009      	add	sp, #36	; 0x24
    b77e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b782 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    b782:	b500      	push	{lr}
    b784:	b083      	sub	sp, #12
    b786:	9001      	str	r0, [sp, #4]
    b788:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    b78a:	9b00      	ldr	r3, [sp, #0]
    b78c:	681b      	ldr	r3, [r3, #0]
    b78e:	2b01      	cmp	r3, #1
    b790:	d114      	bne.n	b7bc <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b792:	9b01      	ldr	r3, [sp, #4]
    b794:	789b      	ldrb	r3, [r3, #2]
    b796:	4618      	mov	r0, r3
    b798:	f002 f994 	bl	dac4 <FlexCAN_Ip_GetStartMode_Privileged>
    b79c:	4603      	mov	r3, r0
    b79e:	f083 0301 	eor.w	r3, r3, #1
    b7a2:	b2db      	uxtb	r3, r3
    b7a4:	2b00      	cmp	r3, #0
    b7a6:	d01e      	beq.n	b7e6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    b7a8:	9b00      	ldr	r3, [sp, #0]
    b7aa:	2202      	movs	r2, #2
    b7ac:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    b7ae:	9b01      	ldr	r3, [sp, #4]
    b7b0:	781b      	ldrb	r3, [r3, #0]
    b7b2:	2102      	movs	r1, #2
    b7b4:	4618      	mov	r0, r3
    b7b6:	f00b fc61 	bl	1707c <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    b7ba:	e014      	b.n	b7e6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    b7bc:	9b00      	ldr	r3, [sp, #0]
    b7be:	681b      	ldr	r3, [r3, #0]
    b7c0:	2b02      	cmp	r3, #2
    b7c2:	d110      	bne.n	b7e6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b7c4:	9b01      	ldr	r3, [sp, #4]
    b7c6:	789b      	ldrb	r3, [r3, #2]
    b7c8:	4618      	mov	r0, r3
    b7ca:	f002 f97b 	bl	dac4 <FlexCAN_Ip_GetStartMode_Privileged>
    b7ce:	4603      	mov	r3, r0
    b7d0:	2b00      	cmp	r3, #0
    b7d2:	d008      	beq.n	b7e6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    b7d4:	9b00      	ldr	r3, [sp, #0]
    b7d6:	2201      	movs	r2, #1
    b7d8:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    b7da:	9b01      	ldr	r3, [sp, #4]
    b7dc:	781b      	ldrb	r3, [r3, #0]
    b7de:	2101      	movs	r1, #1
    b7e0:	4618      	mov	r0, r3
    b7e2:	f00b fc4b 	bl	1707c <CanIf_ControllerModeIndication>
}
    b7e6:	bf00      	nop
    b7e8:	b003      	add	sp, #12
    b7ea:	f85d fb04 	ldr.w	pc, [sp], #4

0000b7ee <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    b7ee:	b500      	push	{lr}
    b7f0:	b085      	sub	sp, #20
    b7f2:	9003      	str	r0, [sp, #12]
    b7f4:	9102      	str	r1, [sp, #8]
    b7f6:	9300      	str	r3, [sp, #0]
    b7f8:	4613      	mov	r3, r2
    b7fa:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    b7fe:	9b00      	ldr	r3, [sp, #0]
    b800:	2b03      	cmp	r3, #3
    b802:	d009      	beq.n	b818 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    b804:	9b00      	ldr	r3, [sp, #0]
    b806:	2b03      	cmp	r3, #3
    b808:	d821      	bhi.n	b84e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    b80a:	9b00      	ldr	r3, [sp, #0]
    b80c:	2b00      	cmp	r3, #0
    b80e:	d00c      	beq.n	b82a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    b810:	9b00      	ldr	r3, [sp, #0]
    b812:	2b01      	cmp	r3, #1
    b814:	d012      	beq.n	b83c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    b816:	e01a      	b.n	b84e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b818:	9b02      	ldr	r3, [sp, #8]
    b81a:	691b      	ldr	r3, [r3, #16]
    b81c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b820:	4619      	mov	r1, r3
    b822:	9803      	ldr	r0, [sp, #12]
    b824:	f7ff faf8 	bl	ae18 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    b828:	e012      	b.n	b850 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b82a:	9b02      	ldr	r3, [sp, #8]
    b82c:	691b      	ldr	r3, [r3, #16]
    b82e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b832:	4619      	mov	r1, r3
    b834:	9803      	ldr	r0, [sp, #12]
    b836:	f7ff fb3b 	bl	aeb0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b83a:	e009      	b.n	b850 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b83c:	9b02      	ldr	r3, [sp, #8]
    b83e:	691b      	ldr	r3, [r3, #16]
    b840:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b844:	4619      	mov	r1, r3
    b846:	9803      	ldr	r0, [sp, #12]
    b848:	f7ff fb32 	bl	aeb0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b84c:	e000      	b.n	b850 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    b84e:	bf00      	nop
            }
        }
    }
    b850:	bf00      	nop
    b852:	b005      	add	sp, #20
    b854:	f85d fb04 	ldr.w	pc, [sp], #4

0000b858 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    b858:	b500      	push	{lr}
    b85a:	b085      	sub	sp, #20
    b85c:	9102      	str	r1, [sp, #8]
    b85e:	9201      	str	r2, [sp, #4]
    b860:	9300      	str	r3, [sp, #0]
    b862:	4603      	mov	r3, r0
    b864:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    b868:	9a00      	ldr	r2, [sp, #0]
    b86a:	9b01      	ldr	r3, [sp, #4]
    b86c:	011b      	lsls	r3, r3, #4
    b86e:	4413      	add	r3, r2
    b870:	3308      	adds	r3, #8
    b872:	781b      	ldrb	r3, [r3, #0]
    b874:	f083 0301 	eor.w	r3, r3, #1
    b878:	b2db      	uxtb	r3, r3
    b87a:	2b00      	cmp	r3, #0
    b87c:	d03b      	beq.n	b8f6 <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    b87e:	9b02      	ldr	r3, [sp, #8]
    b880:	2b04      	cmp	r3, #4
    b882:	d83a      	bhi.n	b8fa <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    b884:	a201      	add	r2, pc, #4	; (adr r2, b88c <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    b886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b88a:	bf00      	nop
    b88c:	0000b8b3 	.word	0x0000b8b3
    b890:	0000b8c5 	.word	0x0000b8c5
    b894:	0000b8d7 	.word	0x0000b8d7
    b898:	0000b8e7 	.word	0x0000b8e7
    b89c:	0000b8a1 	.word	0x0000b8a1
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    b8a0:	9b01      	ldr	r3, [sp, #4]
    b8a2:	b2d9      	uxtb	r1, r3
    b8a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8a8:	2203      	movs	r2, #3
    b8aa:	4618      	mov	r0, r3
    b8ac:	f7fe ff72 	bl	a794 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b8b0:	e024      	b.n	b8fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    b8b2:	9b01      	ldr	r3, [sp, #4]
    b8b4:	b2d9      	uxtb	r1, r3
    b8b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8ba:	2200      	movs	r2, #0
    b8bc:	4618      	mov	r0, r3
    b8be:	f7fe ff69 	bl	a794 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b8c2:	e01b      	b.n	b8fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    b8c4:	9b01      	ldr	r3, [sp, #4]
    b8c6:	b2d9      	uxtb	r1, r3
    b8c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8cc:	2201      	movs	r2, #1
    b8ce:	4618      	mov	r0, r3
    b8d0:	f7fe ff60 	bl	a794 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b8d4:	e012      	b.n	b8fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    b8d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8da:	2201      	movs	r2, #1
    b8dc:	2106      	movs	r1, #6
    b8de:	4618      	mov	r0, r3
    b8e0:	f7fe ff58 	bl	a794 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b8e4:	e00a      	b.n	b8fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    b8e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8ea:	2201      	movs	r2, #1
    b8ec:	2107      	movs	r1, #7
    b8ee:	4618      	mov	r0, r3
    b8f0:	f7fe ff50 	bl	a794 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b8f4:	e002      	b.n	b8fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    b8f6:	bf00      	nop
    b8f8:	e000      	b.n	b8fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    b8fa:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    b8fc:	bf00      	nop
    b8fe:	b005      	add	sp, #20
    b900:	f85d fb04 	ldr.w	pc, [sp], #4

0000b904 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    b904:	b500      	push	{lr}
    b906:	b085      	sub	sp, #20
    b908:	9102      	str	r1, [sp, #8]
    b90a:	9201      	str	r2, [sp, #4]
    b90c:	9300      	str	r3, [sp, #0]
    b90e:	4603      	mov	r3, r0
    b910:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    b914:	9b02      	ldr	r3, [sp, #8]
    b916:	2b07      	cmp	r3, #7
    b918:	d105      	bne.n	b926 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    b91a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b91e:	4618      	mov	r0, r3
    b920:	f7fe ff7a 	bl	a818 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    b924:	e000      	b.n	b928 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    b926:	bf00      	nop
        }
    }
}
    b928:	bf00      	nop
    b92a:	b005      	add	sp, #20
    b92c:	f85d fb04 	ldr.w	pc, [sp], #4

0000b930 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    b930:	b082      	sub	sp, #8
    b932:	9001      	str	r0, [sp, #4]
    b934:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    b936:	9b01      	ldr	r3, [sp, #4]
    b938:	9a00      	ldr	r2, [sp, #0]
    b93a:	649a      	str	r2, [r3, #72]	; 0x48
}
    b93c:	bf00      	nop
    b93e:	b002      	add	sp, #8
    b940:	4770      	bx	lr

0000b942 <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    b942:	b084      	sub	sp, #16
    b944:	9001      	str	r0, [sp, #4]
    b946:	460b      	mov	r3, r1
    b948:	f88d 3003 	strb.w	r3, [sp, #3]
    b94c:	4613      	mov	r3, r2
    b94e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    b952:	9b01      	ldr	r3, [sp, #4]
    b954:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b958:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    b95a:	9b03      	ldr	r3, [sp, #12]
    b95c:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    b960:	9303      	str	r3, [sp, #12]

    if (enable)
    b962:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b966:	2b00      	cmp	r3, #0
    b968:	d00b      	beq.n	b982 <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    b96a:	9b03      	ldr	r3, [sp, #12]
    b96c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b970:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    b972:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b976:	021b      	lsls	r3, r3, #8
    b978:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    b97c:	9a03      	ldr	r2, [sp, #12]
    b97e:	4313      	orrs	r3, r2
    b980:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    b982:	9b01      	ldr	r3, [sp, #4]
    b984:	9a03      	ldr	r2, [sp, #12]
    b986:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    b98a:	bf00      	nop
    b98c:	b004      	add	sp, #16
    b98e:	4770      	bx	lr

0000b990 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    b990:	b082      	sub	sp, #8
    b992:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    b994:	9b01      	ldr	r3, [sp, #4]
    b996:	681b      	ldr	r3, [r3, #0]
    b998:	43db      	mvns	r3, r3
    b99a:	0fdb      	lsrs	r3, r3, #31
    b99c:	b2db      	uxtb	r3, r3
}
    b99e:	4618      	mov	r0, r3
    b9a0:	b002      	add	sp, #8
    b9a2:	4770      	bx	lr

0000b9a4 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    b9a4:	b082      	sub	sp, #8
    b9a6:	9001      	str	r0, [sp, #4]
    b9a8:	460b      	mov	r3, r1
    b9aa:	f88d 3003 	strb.w	r3, [sp, #3]
    b9ae:	4613      	mov	r3, r2
    b9b0:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    b9b4:	9b01      	ldr	r3, [sp, #4]
    b9b6:	681b      	ldr	r3, [r3, #0]
    b9b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b9bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b9c0:	2a00      	cmp	r2, #0
    b9c2:	d002      	beq.n	b9ca <FlexCAN_SetFDEnabled+0x26>
    b9c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b9c8:	e000      	b.n	b9cc <FlexCAN_SetFDEnabled+0x28>
    b9ca:	2200      	movs	r2, #0
    b9cc:	431a      	orrs	r2, r3
    b9ce:	9b01      	ldr	r3, [sp, #4]
    b9d0:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    b9d2:	9b01      	ldr	r3, [sp, #4]
    b9d4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b9d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b9dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
    b9e0:	2a00      	cmp	r2, #0
    b9e2:	d002      	beq.n	b9ea <FlexCAN_SetFDEnabled+0x46>
    b9e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b9e8:	e000      	b.n	b9ec <FlexCAN_SetFDEnabled+0x48>
    b9ea:	2200      	movs	r2, #0
    b9ec:	431a      	orrs	r2, r3
    b9ee:	9b01      	ldr	r3, [sp, #4]
    b9f0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    b9f4:	9b01      	ldr	r3, [sp, #4]
    b9f6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b9fa:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    b9fe:	9b01      	ldr	r3, [sp, #4]
    ba00:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    ba04:	bf00      	nop
    ba06:	b002      	add	sp, #8
    ba08:	4770      	bx	lr

0000ba0a <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    ba0a:	b082      	sub	sp, #8
    ba0c:	9001      	str	r0, [sp, #4]
    ba0e:	460b      	mov	r3, r1
    ba10:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    ba14:	9b01      	ldr	r3, [sp, #4]
    ba16:	685b      	ldr	r3, [r3, #4]
    ba18:	f023 0308 	bic.w	r3, r3, #8
    ba1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba20:	2a00      	cmp	r2, #0
    ba22:	d001      	beq.n	ba28 <FlexCAN_SetListenOnlyMode+0x1e>
    ba24:	2208      	movs	r2, #8
    ba26:	e000      	b.n	ba2a <FlexCAN_SetListenOnlyMode+0x20>
    ba28:	2200      	movs	r2, #0
    ba2a:	431a      	orrs	r2, r3
    ba2c:	9b01      	ldr	r3, [sp, #4]
    ba2e:	605a      	str	r2, [r3, #4]
}
    ba30:	bf00      	nop
    ba32:	b002      	add	sp, #8
    ba34:	4770      	bx	lr

0000ba36 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    ba36:	b082      	sub	sp, #8
    ba38:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    ba3a:	9b01      	ldr	r3, [sp, #4]
    ba3c:	689b      	ldr	r3, [r3, #8]
}
    ba3e:	bf00      	nop
    ba40:	b002      	add	sp, #8
    ba42:	4770      	bx	lr

0000ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    ba44:	b084      	sub	sp, #16
    ba46:	9001      	str	r0, [sp, #4]
    ba48:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    ba4a:	9b00      	ldr	r3, [sp, #0]
    ba4c:	f003 031f 	and.w	r3, r3, #31
    ba50:	2201      	movs	r2, #1
    ba52:	fa02 f303 	lsl.w	r3, r2, r3
    ba56:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    ba58:	9b00      	ldr	r3, [sp, #0]
    ba5a:	2b1f      	cmp	r3, #31
    ba5c:	d802      	bhi.n	ba64 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    ba5e:	9b01      	ldr	r3, [sp, #4]
    ba60:	9a03      	ldr	r2, [sp, #12]
    ba62:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    ba64:	bf00      	nop
    ba66:	b004      	add	sp, #16
    ba68:	4770      	bx	lr

0000ba6a <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    ba6a:	b084      	sub	sp, #16
    ba6c:	9001      	str	r0, [sp, #4]
    ba6e:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    ba70:	2300      	movs	r3, #0
    ba72:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    ba74:	9b00      	ldr	r3, [sp, #0]
    ba76:	2b1f      	cmp	r3, #31
    ba78:	d80e      	bhi.n	ba98 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    ba7a:	9b01      	ldr	r3, [sp, #4]
    ba7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ba7e:	9b00      	ldr	r3, [sp, #0]
    ba80:	f003 031f 	and.w	r3, r3, #31
    ba84:	2101      	movs	r1, #1
    ba86:	fa01 f303 	lsl.w	r3, r1, r3
    ba8a:	401a      	ands	r2, r3
    ba8c:	9b00      	ldr	r3, [sp, #0]
    ba8e:	f003 031f 	and.w	r3, r3, #31
    ba92:	fa22 f303 	lsr.w	r3, r2, r3
    ba96:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    ba98:	9b03      	ldr	r3, [sp, #12]
    ba9a:	b2db      	uxtb	r3, r3
}
    ba9c:	4618      	mov	r0, r3
    ba9e:	b004      	add	sp, #16
    baa0:	4770      	bx	lr

0000baa2 <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    baa2:	b082      	sub	sp, #8
    baa4:	9001      	str	r0, [sp, #4]
    baa6:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    baa8:	9b01      	ldr	r3, [sp, #4]
    baaa:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    baae:	4b15      	ldr	r3, [pc, #84]	; (bb04 <FlexCAN_SetFDTimeSegments+0x62>)
    bab0:	4013      	ands	r3, r2
    bab2:	9a01      	ldr	r2, [sp, #4]
    bab4:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bab8:	9b01      	ldr	r3, [sp, #4]
    baba:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    babe:	9b00      	ldr	r3, [sp, #0]
    bac0:	681b      	ldr	r3, [r3, #0]
    bac2:	029b      	lsls	r3, r3, #10
    bac4:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    bac8:	9b00      	ldr	r3, [sp, #0]
    baca:	689b      	ldr	r3, [r3, #8]
    bacc:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bad0:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    bad2:	9b00      	ldr	r3, [sp, #0]
    bad4:	685b      	ldr	r3, [r3, #4]
    bad6:	015b      	lsls	r3, r3, #5
    bad8:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    bada:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    badc:	9b00      	ldr	r3, [sp, #0]
    bade:	68db      	ldr	r3, [r3, #12]
    bae0:	0518      	lsls	r0, r3, #20
    bae2:	4b09      	ldr	r3, [pc, #36]	; (bb08 <FlexCAN_SetFDTimeSegments+0x66>)
    bae4:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    bae6:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    bae8:	9b00      	ldr	r3, [sp, #0]
    baea:	691b      	ldr	r3, [r3, #16]
    baec:	041b      	lsls	r3, r3, #16
    baee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    baf2:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    baf4:	431a      	orrs	r2, r3
    baf6:	9b01      	ldr	r3, [sp, #4]
    baf8:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    bafc:	bf00      	nop
    bafe:	b002      	add	sp, #8
    bb00:	4770      	bx	lr
    bb02:	bf00      	nop
    bb04:	c0088318 	.word	0xc0088318
    bb08:	3ff00000 	.word	0x3ff00000

0000bb0c <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bb0c:	b082      	sub	sp, #8
    bb0e:	9001      	str	r0, [sp, #4]
    bb10:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    bb12:	9b01      	ldr	r3, [sp, #4]
    bb14:	685a      	ldr	r2, [r3, #4]
    bb16:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    bb1a:	4013      	ands	r3, r2
    bb1c:	9a01      	ldr	r2, [sp, #4]
    bb1e:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bb20:	9b01      	ldr	r3, [sp, #4]
    bb22:	685a      	ldr	r2, [r3, #4]
    bb24:	9b00      	ldr	r3, [sp, #0]
    bb26:	681b      	ldr	r3, [r3, #0]
    bb28:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bb2c:	9b00      	ldr	r3, [sp, #0]
    bb2e:	689b      	ldr	r3, [r3, #8]
    bb30:	041b      	lsls	r3, r3, #16
    bb32:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bb36:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bb38:	9b00      	ldr	r3, [sp, #0]
    bb3a:	685b      	ldr	r3, [r3, #4]
    bb3c:	04db      	lsls	r3, r3, #19
    bb3e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bb42:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    bb44:	9b00      	ldr	r3, [sp, #0]
    bb46:	68db      	ldr	r3, [r3, #12]
    bb48:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bb4a:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    bb4c:	9b00      	ldr	r3, [sp, #0]
    bb4e:	691b      	ldr	r3, [r3, #16]
    bb50:	059b      	lsls	r3, r3, #22
    bb52:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    bb56:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bb58:	431a      	orrs	r2, r3
    bb5a:	9b01      	ldr	r3, [sp, #4]
    bb5c:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    bb5e:	bf00      	nop
    bb60:	b002      	add	sp, #8
    bb62:	4770      	bx	lr

0000bb64 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bb64:	b082      	sub	sp, #8
    bb66:	9001      	str	r0, [sp, #4]
    bb68:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    bb6a:	9b01      	ldr	r3, [sp, #4]
    bb6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bb6e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    bb72:	9b01      	ldr	r3, [sp, #4]
    bb74:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bb76:	9b01      	ldr	r3, [sp, #4]
    bb78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    bb7a:	9b00      	ldr	r3, [sp, #0]
    bb7c:	681b      	ldr	r3, [r3, #0]
    bb7e:	029b      	lsls	r3, r3, #10
    bb80:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bb82:	9b00      	ldr	r3, [sp, #0]
    bb84:	689b      	ldr	r3, [r3, #8]
    bb86:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bb8a:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bb8c:	9b00      	ldr	r3, [sp, #0]
    bb8e:	685b      	ldr	r3, [r3, #4]
    bb90:	015b      	lsls	r3, r3, #5
    bb92:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bb96:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bb98:	9b00      	ldr	r3, [sp, #0]
    bb9a:	68db      	ldr	r3, [r3, #12]
    bb9c:	0558      	lsls	r0, r3, #21
    bb9e:	4b07      	ldr	r3, [pc, #28]	; (bbbc <FlexCAN_SetExtendedTimeSegments+0x58>)
    bba0:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bba2:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    bba4:	9b00      	ldr	r3, [sp, #0]
    bba6:	691b      	ldr	r3, [r3, #16]
    bba8:	041b      	lsls	r3, r3, #16
    bbaa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bbae:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bbb0:	431a      	orrs	r2, r3
    bbb2:	9b01      	ldr	r3, [sp, #4]
    bbb4:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    bbb6:	bf00      	nop
    bbb8:	b002      	add	sp, #8
    bbba:	4770      	bx	lr
    bbbc:	7fe00000 	.word	0x7fe00000

0000bbc0 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bbc0:	b082      	sub	sp, #8
    bbc2:	9001      	str	r0, [sp, #4]
    bbc4:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    bbc6:	9b01      	ldr	r3, [sp, #4]
    bbc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bbca:	0d5b      	lsrs	r3, r3, #21
    bbcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bbd0:	9b00      	ldr	r3, [sp, #0]
    bbd2:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    bbd4:	9b01      	ldr	r3, [sp, #4]
    bbd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bbd8:	0a9b      	lsrs	r3, r3, #10
    bbda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    bbde:	9b00      	ldr	r3, [sp, #0]
    bbe0:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    bbe2:	9b01      	ldr	r3, [sp, #4]
    bbe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bbe6:	095b      	lsrs	r3, r3, #5
    bbe8:	f003 021f 	and.w	r2, r3, #31
    bbec:	9b00      	ldr	r3, [sp, #0]
    bbee:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    bbf0:	9b01      	ldr	r3, [sp, #4]
    bbf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bbf4:	f003 021f 	and.w	r2, r3, #31
    bbf8:	9b00      	ldr	r3, [sp, #0]
    bbfa:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    bbfc:	9b01      	ldr	r3, [sp, #4]
    bbfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc00:	0c1b      	lsrs	r3, r3, #16
    bc02:	f003 021f 	and.w	r2, r3, #31
    bc06:	9b00      	ldr	r3, [sp, #0]
    bc08:	611a      	str	r2, [r3, #16]
}
    bc0a:	bf00      	nop
    bc0c:	b002      	add	sp, #8
    bc0e:	4770      	bx	lr

0000bc10 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bc10:	b082      	sub	sp, #8
    bc12:	9001      	str	r0, [sp, #4]
    bc14:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    bc16:	9b01      	ldr	r3, [sp, #4]
    bc18:	685b      	ldr	r3, [r3, #4]
    bc1a:	0e1b      	lsrs	r3, r3, #24
    bc1c:	b2da      	uxtb	r2, r3
    bc1e:	9b00      	ldr	r3, [sp, #0]
    bc20:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    bc22:	9b01      	ldr	r3, [sp, #4]
    bc24:	685b      	ldr	r3, [r3, #4]
    bc26:	f003 0207 	and.w	r2, r3, #7
    bc2a:	9b00      	ldr	r3, [sp, #0]
    bc2c:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    bc2e:	9b01      	ldr	r3, [sp, #4]
    bc30:	685b      	ldr	r3, [r3, #4]
    bc32:	0cdb      	lsrs	r3, r3, #19
    bc34:	f003 0207 	and.w	r2, r3, #7
    bc38:	9b00      	ldr	r3, [sp, #0]
    bc3a:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    bc3c:	9b01      	ldr	r3, [sp, #4]
    bc3e:	685b      	ldr	r3, [r3, #4]
    bc40:	0c1b      	lsrs	r3, r3, #16
    bc42:	f003 0207 	and.w	r2, r3, #7
    bc46:	9b00      	ldr	r3, [sp, #0]
    bc48:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    bc4a:	9b01      	ldr	r3, [sp, #4]
    bc4c:	685b      	ldr	r3, [r3, #4]
    bc4e:	0d9b      	lsrs	r3, r3, #22
    bc50:	f003 0203 	and.w	r2, r3, #3
    bc54:	9b00      	ldr	r3, [sp, #0]
    bc56:	611a      	str	r2, [r3, #16]
}
    bc58:	bf00      	nop
    bc5a:	b002      	add	sp, #8
    bc5c:	4770      	bx	lr

0000bc5e <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bc5e:	b082      	sub	sp, #8
    bc60:	9001      	str	r0, [sp, #4]
    bc62:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    bc64:	9b01      	ldr	r3, [sp, #4]
    bc66:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc6a:	0d1b      	lsrs	r3, r3, #20
    bc6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bc70:	9b00      	ldr	r3, [sp, #0]
    bc72:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    bc74:	9b01      	ldr	r3, [sp, #4]
    bc76:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc7a:	0a9b      	lsrs	r3, r3, #10
    bc7c:	f003 021f 	and.w	r2, r3, #31
    bc80:	9b00      	ldr	r3, [sp, #0]
    bc82:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    bc84:	9b01      	ldr	r3, [sp, #4]
    bc86:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc8a:	095b      	lsrs	r3, r3, #5
    bc8c:	f003 0207 	and.w	r2, r3, #7
    bc90:	9b00      	ldr	r3, [sp, #0]
    bc92:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    bc94:	9b01      	ldr	r3, [sp, #4]
    bc96:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc9a:	f003 0207 	and.w	r2, r3, #7
    bc9e:	9b00      	ldr	r3, [sp, #0]
    bca0:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    bca2:	9b01      	ldr	r3, [sp, #4]
    bca4:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bca8:	0c1b      	lsrs	r3, r3, #16
    bcaa:	f003 0207 	and.w	r2, r3, #7
    bcae:	9b00      	ldr	r3, [sp, #0]
    bcb0:	611a      	str	r2, [r3, #16]
}
    bcb2:	bf00      	nop
    bcb4:	b002      	add	sp, #8
    bcb6:	4770      	bx	lr

0000bcb8 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    bcb8:	b082      	sub	sp, #8
    bcba:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    bcbc:	9b01      	ldr	r3, [sp, #4]
    bcbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bcc0:	0fdb      	lsrs	r3, r3, #31
    bcc2:	b2db      	uxtb	r3, r3
}
    bcc4:	4618      	mov	r0, r3
    bcc6:	b002      	add	sp, #8
    bcc8:	4770      	bx	lr

0000bcca <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    bcca:	b082      	sub	sp, #8
    bccc:	9001      	str	r0, [sp, #4]
    bcce:	460b      	mov	r3, r1
    bcd0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    bcd4:	9b01      	ldr	r3, [sp, #4]
    bcd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bcd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    bcdc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bce0:	2a00      	cmp	r2, #0
    bce2:	d002      	beq.n	bcea <FlexCAN_EnableExtCbt+0x20>
    bce4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    bce8:	e000      	b.n	bcec <FlexCAN_EnableExtCbt+0x22>
    bcea:	2200      	movs	r2, #0
    bcec:	431a      	orrs	r2, r3
    bcee:	9b01      	ldr	r3, [sp, #4]
    bcf0:	651a      	str	r2, [r3, #80]	; 0x50
}
    bcf2:	bf00      	nop
    bcf4:	b002      	add	sp, #8
    bcf6:	4770      	bx	lr

0000bcf8 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    bcf8:	b082      	sub	sp, #8
    bcfa:	9001      	str	r0, [sp, #4]
    bcfc:	460b      	mov	r3, r1
    bcfe:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    bd02:	9b01      	ldr	r3, [sp, #4]
    bd04:	681b      	ldr	r3, [r3, #0]
    bd06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    bd0a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bd0e:	2a00      	cmp	r2, #0
    bd10:	d001      	beq.n	bd16 <FlexCAN_SetSelfReception+0x1e>
    bd12:	2200      	movs	r2, #0
    bd14:	e001      	b.n	bd1a <FlexCAN_SetSelfReception+0x22>
    bd16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bd1a:	431a      	orrs	r2, r3
    bd1c:	9b01      	ldr	r3, [sp, #4]
    bd1e:	601a      	str	r2, [r3, #0]
}
    bd20:	bf00      	nop
    bd22:	b002      	add	sp, #8
    bd24:	4770      	bx	lr

0000bd26 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    bd26:	b082      	sub	sp, #8
    bd28:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    bd2a:	9b01      	ldr	r3, [sp, #4]
    bd2c:	681b      	ldr	r3, [r3, #0]
    bd2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bd32:	2b00      	cmp	r3, #0
    bd34:	bf14      	ite	ne
    bd36:	2301      	movne	r3, #1
    bd38:	2300      	moveq	r3, #0
    bd3a:	b2db      	uxtb	r3, r3
}
    bd3c:	4618      	mov	r0, r3
    bd3e:	b002      	add	sp, #8
    bd40:	4770      	bx	lr

0000bd42 <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    bd42:	b082      	sub	sp, #8
    bd44:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    bd46:	9b01      	ldr	r3, [sp, #4]
    bd48:	685b      	ldr	r3, [r3, #4]
    bd4a:	f003 0308 	and.w	r3, r3, #8
    bd4e:	2b00      	cmp	r3, #0
    bd50:	bf14      	ite	ne
    bd52:	2301      	movne	r3, #1
    bd54:	2300      	moveq	r3, #0
    bd56:	b2db      	uxtb	r3, r3
}
    bd58:	4618      	mov	r0, r3
    bd5a:	b002      	add	sp, #8
    bd5c:	4770      	bx	lr

0000bd5e <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    bd5e:	b082      	sub	sp, #8
    bd60:	4603      	mov	r3, r0
    bd62:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    bd66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd6a:	3301      	adds	r3, #1
    bd6c:	00db      	lsls	r3, r3, #3
    bd6e:	089b      	lsrs	r3, r3, #2
    bd70:	3305      	adds	r3, #5
}
    bd72:	4618      	mov	r0, r3
    bd74:	b002      	add	sp, #8
    bd76:	4770      	bx	lr

0000bd78 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    bd78:	b082      	sub	sp, #8
    bd7a:	9001      	str	r0, [sp, #4]
    bd7c:	460b      	mov	r3, r1
    bd7e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    bd82:	9b01      	ldr	r3, [sp, #4]
    bd84:	685b      	ldr	r3, [r3, #4]
    bd86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    bd8a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bd8e:	2a00      	cmp	r2, #0
    bd90:	d002      	beq.n	bd98 <FlexCAN_SetClkSrc+0x20>
    bd92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    bd96:	e000      	b.n	bd9a <FlexCAN_SetClkSrc+0x22>
    bd98:	2200      	movs	r2, #0
    bd9a:	431a      	orrs	r2, r3
    bd9c:	9b01      	ldr	r3, [sp, #4]
    bd9e:	605a      	str	r2, [r3, #4]
}
    bda0:	bf00      	nop
    bda2:	b002      	add	sp, #8
    bda4:	4770      	bx	lr

0000bda6 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bda6:	b084      	sub	sp, #16
    bda8:	9001      	str	r0, [sp, #4]
    bdaa:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    bdac:	2300      	movs	r3, #0
    bdae:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    bdb2:	9b00      	ldr	r3, [sp, #0]
    bdb4:	2b1f      	cmp	r3, #31
    bdb6:	d810      	bhi.n	bdda <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    bdb8:	9b01      	ldr	r3, [sp, #4]
    bdba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bdbc:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    bdbe:	9b01      	ldr	r3, [sp, #4]
    bdc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    bdc2:	9b02      	ldr	r3, [sp, #8]
    bdc4:	401a      	ands	r2, r3
    bdc6:	9b00      	ldr	r3, [sp, #0]
    bdc8:	f003 031f 	and.w	r3, r3, #31
    bdcc:	fa22 f303 	lsr.w	r3, r2, r3
    bdd0:	b2db      	uxtb	r3, r3
    bdd2:	f003 0301 	and.w	r3, r3, #1
    bdd6:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    bdda:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bdde:	4618      	mov	r0, r3
    bde0:	b004      	add	sp, #16
    bde2:	4770      	bx	lr

0000bde4 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    bde4:	b082      	sub	sp, #8
    bde6:	9001      	str	r0, [sp, #4]
    bde8:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    bdea:	9b01      	ldr	r3, [sp, #4]
    bdec:	9a00      	ldr	r2, [sp, #0]
    bdee:	611a      	str	r2, [r3, #16]
}
    bdf0:	bf00      	nop
    bdf2:	b002      	add	sp, #8
    bdf4:	4770      	bx	lr

0000bdf6 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    bdf6:	b084      	sub	sp, #16
    bdf8:	9003      	str	r0, [sp, #12]
    bdfa:	9102      	str	r1, [sp, #8]
    bdfc:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    bdfe:	9b03      	ldr	r3, [sp, #12]
    be00:	9a02      	ldr	r2, [sp, #8]
    be02:	f502 7208 	add.w	r2, r2, #544	; 0x220
    be06:	9901      	ldr	r1, [sp, #4]
    be08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    be0c:	bf00      	nop
    be0e:	b004      	add	sp, #16
    be10:	4770      	bx	lr

0000be12 <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    be12:	b082      	sub	sp, #8
    be14:	9001      	str	r0, [sp, #4]
    be16:	460b      	mov	r3, r1
    be18:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    be1c:	9b01      	ldr	r3, [sp, #4]
    be1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    be20:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    be24:	f89d 3003 	ldrb.w	r3, [sp, #3]
    be28:	04db      	lsls	r3, r3, #19
    be2a:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    be2e:	431a      	orrs	r2, r3
    be30:	9b01      	ldr	r3, [sp, #4]
    be32:	635a      	str	r2, [r3, #52]	; 0x34
}
    be34:	bf00      	nop
    be36:	b002      	add	sp, #8
    be38:	4770      	bx	lr

0000be3a <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    be3a:	b082      	sub	sp, #8
    be3c:	9001      	str	r0, [sp, #4]
    be3e:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    be40:	9b00      	ldr	r3, [sp, #0]
    be42:	2b00      	cmp	r3, #0
    be44:	d106      	bne.n	be54 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    be46:	9b01      	ldr	r3, [sp, #4]
    be48:	681b      	ldr	r3, [r3, #0]
    be4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    be4e:	9b01      	ldr	r3, [sp, #4]
    be50:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    be52:	e005      	b.n	be60 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    be54:	9b01      	ldr	r3, [sp, #4]
    be56:	681b      	ldr	r3, [r3, #0]
    be58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    be5c:	9b01      	ldr	r3, [sp, #4]
    be5e:	601a      	str	r2, [r3, #0]
}
    be60:	bf00      	nop
    be62:	b002      	add	sp, #8
    be64:	4770      	bx	lr

0000be66 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    be66:	b500      	push	{lr}
    be68:	b083      	sub	sp, #12
    be6a:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    be6c:	9801      	ldr	r0, [sp, #4]
    be6e:	f002 ff85 	bl	ed7c <FlexCAN_IsFDAvailable>
    be72:	4603      	mov	r3, r0
    be74:	2b00      	cmp	r3, #0
    be76:	d007      	beq.n	be88 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    be78:	9b01      	ldr	r3, [sp, #4]
    be7a:	2200      	movs	r2, #0
    be7c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    be80:	9b01      	ldr	r3, [sp, #4]
    be82:	4a12      	ldr	r2, [pc, #72]	; (becc <FlexCAN_SetRegDefaultVal+0x66>)
    be84:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    be88:	9b01      	ldr	r3, [sp, #4]
    be8a:	f04f 32ff 	mov.w	r2, #4294967295
    be8e:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    be90:	9b01      	ldr	r3, [sp, #4]
    be92:	2200      	movs	r2, #0
    be94:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    be96:	9b01      	ldr	r3, [sp, #4]
    be98:	2200      	movs	r2, #0
    be9a:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    be9c:	9b01      	ldr	r3, [sp, #4]
    be9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    bea2:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    bea4:	9b01      	ldr	r3, [sp, #4]
    bea6:	4a0a      	ldr	r2, [pc, #40]	; (bed0 <FlexCAN_SetRegDefaultVal+0x6a>)
    bea8:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    beaa:	9b01      	ldr	r3, [sp, #4]
    beac:	2200      	movs	r2, #0
    beae:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    beb0:	9b01      	ldr	r3, [sp, #4]
    beb2:	2200      	movs	r2, #0
    beb4:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    beb6:	9b01      	ldr	r3, [sp, #4]
    beb8:	2200      	movs	r2, #0
    beba:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    bebc:	9b01      	ldr	r3, [sp, #4]
    bebe:	4a05      	ldr	r2, [pc, #20]	; (bed4 <FlexCAN_SetRegDefaultVal+0x6e>)
    bec0:	601a      	str	r2, [r3, #0]
}
    bec2:	bf00      	nop
    bec4:	b003      	add	sp, #12
    bec6:	f85d fb04 	ldr.w	pc, [sp], #4
    beca:	bf00      	nop
    becc:	80004100 	.word	0x80004100
    bed0:	0003b006 	.word	0x0003b006
    bed4:	d890000f 	.word	0xd890000f

0000bed8 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bed8:	b500      	push	{lr}
    beda:	b085      	sub	sp, #20
    bedc:	9001      	str	r0, [sp, #4]
    bede:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bee0:	2300      	movs	r3, #0
    bee2:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    bee4:	9b00      	ldr	r3, [sp, #0]
    bee6:	7a1b      	ldrb	r3, [r3, #8]
    bee8:	2b00      	cmp	r3, #0
    beea:	d006      	beq.n	befa <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    beec:	9b00      	ldr	r3, [sp, #0]
    beee:	685b      	ldr	r3, [r3, #4]
    bef0:	4619      	mov	r1, r3
    bef2:	9801      	ldr	r0, [sp, #4]
    bef4:	f002 fefe 	bl	ecf4 <FlexCAN_EnableRxFifo>
    bef8:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    befa:	9b03      	ldr	r3, [sp, #12]
}
    befc:	4618      	mov	r0, r3
    befe:	b005      	add	sp, #20
    bf00:	f85d fb04 	ldr.w	pc, [sp], #4

0000bf04 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bf04:	b500      	push	{lr}
    bf06:	b085      	sub	sp, #20
    bf08:	9001      	str	r0, [sp, #4]
    bf0a:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bf0c:	2300      	movs	r3, #0
    bf0e:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    bf10:	9b00      	ldr	r3, [sp, #0]
    bf12:	68db      	ldr	r3, [r3, #12]
    bf14:	2b02      	cmp	r3, #2
    bf16:	d003      	beq.n	bf20 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    bf18:	2100      	movs	r1, #0
    bf1a:	9801      	ldr	r0, [sp, #4]
    bf1c:	f7ff feec 	bl	bcf8 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    bf20:	9900      	ldr	r1, [sp, #0]
    bf22:	9801      	ldr	r0, [sp, #4]
    bf24:	f7ff ffd8 	bl	bed8 <FlexCAN_InitRxFifo>
    bf28:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    bf2a:	9b03      	ldr	r3, [sp, #12]
    bf2c:	2b00      	cmp	r3, #0
    bf2e:	d006      	beq.n	bf3e <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    bf30:	9801      	ldr	r0, [sp, #4]
    bf32:	f002 fd03 	bl	e93c <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    bf36:	9801      	ldr	r0, [sp, #4]
    bf38:	f002 fdca 	bl	ead0 <FlexCAN_Disable>
    bf3c:	e00b      	b.n	bf56 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    bf3e:	9b00      	ldr	r3, [sp, #0]
    bf40:	3314      	adds	r3, #20
    bf42:	4619      	mov	r1, r3
    bf44:	9801      	ldr	r0, [sp, #4]
    bf46:	f002 ff3b 	bl	edc0 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    bf4a:	9b00      	ldr	r3, [sp, #0]
    bf4c:	681b      	ldr	r3, [r3, #0]
    bf4e:	4619      	mov	r1, r3
    bf50:	9801      	ldr	r0, [sp, #4]
    bf52:	f003 fab7 	bl	f4c4 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    bf56:	9b03      	ldr	r3, [sp, #12]
}
    bf58:	4618      	mov	r0, r3
    bf5a:	b005      	add	sp, #20
    bf5c:	f85d fb04 	ldr.w	pc, [sp], #4

0000bf60 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bf60:	b500      	push	{lr}
    bf62:	b087      	sub	sp, #28
    bf64:	4603      	mov	r3, r0
    bf66:	9102      	str	r1, [sp, #8]
    bf68:	9201      	str	r2, [sp, #4]
    bf6a:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bf6e:	2300      	movs	r3, #0
    bf70:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    bf72:	9802      	ldr	r0, [sp, #8]
    bf74:	f7ff fd0c 	bl	b990 <FlexCAN_IsEnabled>
    bf78:	4603      	mov	r3, r0
    bf7a:	2b00      	cmp	r3, #0
    bf7c:	d00a      	beq.n	bf94 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    bf7e:	9802      	ldr	r0, [sp, #8]
    bf80:	f002 fcdc 	bl	e93c <FlexCAN_EnterFreezeMode>
    bf84:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    bf86:	9b05      	ldr	r3, [sp, #20]
    bf88:	2b00      	cmp	r3, #0
    bf8a:	d103      	bne.n	bf94 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    bf8c:	9802      	ldr	r0, [sp, #8]
    bf8e:	f002 fd9f 	bl	ead0 <FlexCAN_Disable>
    bf92:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    bf94:	9b05      	ldr	r3, [sp, #20]
    bf96:	2b00      	cmp	r3, #0
    bf98:	d137      	bne.n	c00a <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    bf9a:	9b01      	ldr	r3, [sp, #4]
    bf9c:	7e5b      	ldrb	r3, [r3, #25]
    bf9e:	4619      	mov	r1, r3
    bfa0:	9802      	ldr	r0, [sp, #8]
    bfa2:	f7ff fee9 	bl	bd78 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bfa6:	9b02      	ldr	r3, [sp, #8]
    bfa8:	681b      	ldr	r3, [r3, #0]
    bfaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bfae:	9b02      	ldr	r3, [sp, #8]
    bfb0:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    bfb2:	9802      	ldr	r0, [sp, #8]
    bfb4:	f002 fe28 	bl	ec08 <FlexCAN_Init>
    bfb8:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    bfba:	9b05      	ldr	r3, [sp, #20]
    bfbc:	2b00      	cmp	r3, #0
    bfbe:	d006      	beq.n	bfce <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    bfc0:	9802      	ldr	r0, [sp, #8]
    bfc2:	f002 fcbb 	bl	e93c <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    bfc6:	9802      	ldr	r0, [sp, #8]
    bfc8:	f002 fd82 	bl	ead0 <FlexCAN_Disable>
    bfcc:	e01d      	b.n	c00a <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    bfce:	9802      	ldr	r0, [sp, #8]
    bfd0:	f002 fed4 	bl	ed7c <FlexCAN_IsFDAvailable>
    bfd4:	4603      	mov	r3, r0
    bfd6:	2b00      	cmp	r3, #0
    bfd8:	d007      	beq.n	bfea <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    bfda:	9b01      	ldr	r3, [sp, #4]
    bfdc:	7e19      	ldrb	r1, [r3, #24]
    bfde:	9b01      	ldr	r3, [sp, #4]
    bfe0:	7edb      	ldrb	r3, [r3, #27]
    bfe2:	461a      	mov	r2, r3
    bfe4:	9802      	ldr	r0, [sp, #8]
    bfe6:	f7ff fcdd 	bl	b9a4 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    bfea:	9b01      	ldr	r3, [sp, #4]
    bfec:	691b      	ldr	r3, [r3, #16]
    bfee:	4619      	mov	r1, r3
    bff0:	9802      	ldr	r0, [sp, #8]
    bff2:	f003 fdeb 	bl	fbcc <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    bff6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bffa:	4618      	mov	r0, r3
    bffc:	f003 fe56 	bl	fcac <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    c000:	9901      	ldr	r1, [sp, #4]
    c002:	9802      	ldr	r0, [sp, #8]
    c004:	f7ff ff7e 	bl	bf04 <FlexCAN_InitCtroll>
    c008:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    c00a:	9b05      	ldr	r3, [sp, #20]
}
    c00c:	4618      	mov	r0, r3
    c00e:	b007      	add	sp, #28
    c010:	f85d fb04 	ldr.w	pc, [sp], #4

0000c014 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    c014:	b500      	push	{lr}
    c016:	b083      	sub	sp, #12
    c018:	9001      	str	r0, [sp, #4]
    c01a:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    c01c:	9b00      	ldr	r3, [sp, #0]
    c01e:	7e1b      	ldrb	r3, [r3, #24]
    c020:	4619      	mov	r1, r3
    c022:	9801      	ldr	r0, [sp, #4]
    c024:	f7ff fe51 	bl	bcca <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    c028:	9b00      	ldr	r3, [sp, #0]
    c02a:	7e1b      	ldrb	r3, [r3, #24]
    c02c:	2b00      	cmp	r3, #0
    c02e:	d00c      	beq.n	c04a <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    c030:	9b00      	ldr	r3, [sp, #0]
    c032:	331c      	adds	r3, #28
    c034:	4619      	mov	r1, r3
    c036:	9801      	ldr	r0, [sp, #4]
    c038:	f7ff fd94 	bl	bb64 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    c03c:	9b00      	ldr	r3, [sp, #0]
    c03e:	3330      	adds	r3, #48	; 0x30
    c040:	4619      	mov	r1, r3
    c042:	9801      	ldr	r0, [sp, #4]
    c044:	f7ff fd2d 	bl	baa2 <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    c048:	e005      	b.n	c056 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    c04a:	9b00      	ldr	r3, [sp, #0]
    c04c:	331c      	adds	r3, #28
    c04e:	4619      	mov	r1, r3
    c050:	9801      	ldr	r0, [sp, #4]
    c052:	f7ff fd5b 	bl	bb0c <FlexCAN_SetTimeSegments>
}
    c056:	bf00      	nop
    c058:	b003      	add	sp, #12
    c05a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c05e <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    c05e:	b500      	push	{lr}
    c060:	b08d      	sub	sp, #52	; 0x34
    c062:	4603      	mov	r3, r0
    c064:	9102      	str	r1, [sp, #8]
    c066:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c06a:	2300      	movs	r3, #0
    c06c:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c06e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c072:	4a46      	ldr	r2, [pc, #280]	; (c18c <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    c074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c078:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c07a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c07e:	4a44      	ldr	r2, [pc, #272]	; (c190 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    c080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c084:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    c086:	2300      	movs	r3, #0
    c088:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    c08a:	2300      	movs	r3, #0
    c08c:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c08e:	9b02      	ldr	r3, [sp, #8]
    c090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c094:	fb02 f303 	mul.w	r3, r2, r3
    c098:	2100      	movs	r1, #0
    c09a:	4618      	mov	r0, r3
    c09c:	f7f5 ff0a 	bl	1eb4 <OsIf_MicrosToTicks>
    c0a0:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    c0a2:	2300      	movs	r3, #0
    c0a4:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c0a6:	2000      	movs	r0, #0
    c0a8:	f7f5 feb8 	bl	1e1c <OsIf_GetCounter>
    c0ac:	4603      	mov	r3, r0
    c0ae:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c0b0:	e02a      	b.n	c108 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    c0b2:	9b08      	ldr	r3, [sp, #32]
    c0b4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c0b8:	2b01      	cmp	r3, #1
    c0ba:	d115      	bne.n	c0e8 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c0bc:	2307      	movs	r3, #7
    c0be:	9309      	str	r3, [sp, #36]	; 0x24
    c0c0:	e00f      	b.n	c0e2 <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    c0c2:	9909      	ldr	r1, [sp, #36]	; 0x24
    c0c4:	9807      	ldr	r0, [sp, #28]
    c0c6:	f7ff fcd0 	bl	ba6a <FlexCAN_GetBuffStatusFlag>
    c0ca:	4603      	mov	r3, r0
    c0cc:	2b00      	cmp	r3, #0
    c0ce:	d005      	beq.n	c0dc <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    c0d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c0d4:	9909      	ldr	r1, [sp, #36]	; 0x24
    c0d6:	4618      	mov	r0, r3
    c0d8:	f000 fb06 	bl	c6e8 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    c0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0de:	3b01      	subs	r3, #1
    c0e0:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0e4:	2b04      	cmp	r3, #4
    c0e6:	d8ec      	bhi.n	c0c2 <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c0e8:	ab05      	add	r3, sp, #20
    c0ea:	2100      	movs	r1, #0
    c0ec:	4618      	mov	r0, r3
    c0ee:	f7f5 feae 	bl	1e4e <OsIf_GetElapsed>
    c0f2:	4602      	mov	r2, r0
    c0f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c0f6:	4413      	add	r3, r2
    c0f8:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    c0fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c0fc:	9b06      	ldr	r3, [sp, #24]
    c0fe:	429a      	cmp	r2, r3
    c100:	d302      	bcc.n	c108 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    c102:	2303      	movs	r3, #3
    c104:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c106:	e003      	b.n	c110 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c108:	9b08      	ldr	r3, [sp, #32]
    c10a:	685b      	ldr	r3, [r3, #4]
    c10c:	2b01      	cmp	r3, #1
    c10e:	d0d0      	beq.n	c0b2 <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    c110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c112:	2b03      	cmp	r3, #3
    c114:	d125      	bne.n	c162 <FlexCAN_ProccessLegacyRxFIFO+0x104>
    c116:	9b08      	ldr	r3, [sp, #32]
    c118:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c11c:	2b01      	cmp	r3, #1
    c11e:	d020      	beq.n	c162 <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    c120:	9b08      	ldr	r3, [sp, #32]
    c122:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c126:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c12a:	9300      	str	r3, [sp, #0]
    c12c:	2300      	movs	r3, #0
    c12e:	2205      	movs	r2, #5
    c130:	9807      	ldr	r0, [sp, #28]
    c132:	f002 feef 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    c136:	9b08      	ldr	r3, [sp, #32]
    c138:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c13c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c140:	9300      	str	r3, [sp, #0]
    c142:	2300      	movs	r3, #0
    c144:	2206      	movs	r2, #6
    c146:	9807      	ldr	r0, [sp, #28]
    c148:	f002 fee4 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    c14c:	9b08      	ldr	r3, [sp, #32]
    c14e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c152:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c156:	9300      	str	r3, [sp, #0]
    c158:	2300      	movs	r3, #0
    c15a:	2207      	movs	r2, #7
    c15c:	9807      	ldr	r0, [sp, #28]
    c15e:	f002 fed9 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c162:	9b08      	ldr	r3, [sp, #32]
    c164:	685b      	ldr	r3, [r3, #4]
    c166:	2b00      	cmp	r3, #0
    c168:	d005      	beq.n	c176 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    c16a:	2b01      	cmp	r3, #1
    c16c:	d106      	bne.n	c17c <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c16e:	9b08      	ldr	r3, [sp, #32]
    c170:	2200      	movs	r2, #0
    c172:	605a      	str	r2, [r3, #4]
                break;
    c174:	e005      	b.n	c182 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    c176:	2300      	movs	r3, #0
    c178:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c17a:	e002      	b.n	c182 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    c17c:	2301      	movs	r3, #1
    c17e:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c180:	bf00      	nop
        }

    return eResult;
    c182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    c184:	4618      	mov	r0, r3
    c186:	b00d      	add	sp, #52	; 0x34
    c188:	f85d fb04 	ldr.w	pc, [sp], #4
    c18c:	1fff935c 	.word	0x1fff935c
    c190:	00018554 	.word	0x00018554

0000c194 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    c194:	b084      	sub	sp, #16
    c196:	9200      	str	r2, [sp, #0]
    c198:	461a      	mov	r2, r3
    c19a:	4603      	mov	r3, r0
    c19c:	f88d 3007 	strb.w	r3, [sp, #7]
    c1a0:	460b      	mov	r3, r1
    c1a2:	f88d 3006 	strb.w	r3, [sp, #6]
    c1a6:	4613      	mov	r3, r2
    c1a8:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c1ac:	2300      	movs	r3, #0
    c1ae:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	4a15      	ldr	r2, [pc, #84]	; (c20c <FlexCAN_StartRxMessageBufferData+0x78>)
    c1b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1ba:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c1bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c1c0:	9a02      	ldr	r2, [sp, #8]
    c1c2:	011b      	lsls	r3, r3, #4
    c1c4:	4413      	add	r3, r2
    c1c6:	3304      	adds	r3, #4
    c1c8:	681b      	ldr	r3, [r3, #0]
    c1ca:	2b00      	cmp	r3, #0
    c1cc:	d002      	beq.n	c1d4 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    c1ce:	2302      	movs	r3, #2
    c1d0:	9303      	str	r3, [sp, #12]
    c1d2:	e017      	b.n	c204 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    c1d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c1d8:	9a02      	ldr	r2, [sp, #8]
    c1da:	011b      	lsls	r3, r3, #4
    c1dc:	4413      	add	r3, r2
    c1de:	3304      	adds	r3, #4
    c1e0:	2201      	movs	r2, #1
    c1e2:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    c1e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c1e8:	9a02      	ldr	r2, [sp, #8]
    c1ea:	011b      	lsls	r3, r3, #4
    c1ec:	4413      	add	r3, r2
    c1ee:	9a00      	ldr	r2, [sp, #0]
    c1f0:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    c1f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c1f6:	9a02      	ldr	r2, [sp, #8]
    c1f8:	011b      	lsls	r3, r3, #4
    c1fa:	4413      	add	r3, r2
    c1fc:	3308      	adds	r3, #8
    c1fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c202:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    c204:	9b03      	ldr	r3, [sp, #12]
}
    c206:	4618      	mov	r0, r3
    c208:	b004      	add	sp, #16
    c20a:	4770      	bx	lr
    c20c:	1fff935c 	.word	0x1fff935c

0000c210 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    c210:	b500      	push	{lr}
    c212:	b08f      	sub	sp, #60	; 0x3c
    c214:	9204      	str	r2, [sp, #16]
    c216:	9303      	str	r3, [sp, #12]
    c218:	4603      	mov	r3, r0
    c21a:	f88d 3017 	strb.w	r3, [sp, #23]
    c21e:	460b      	mov	r3, r1
    c220:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c224:	2300      	movs	r3, #0
    c226:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    c228:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c22c:	4a38      	ldr	r2, [pc, #224]	; (c310 <FlexCAN_StartSendData+0x100>)
    c22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c232:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    c234:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c238:	4a36      	ldr	r2, [pc, #216]	; (c314 <FlexCAN_StartSendData+0x104>)
    c23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c23e:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    c240:	2300      	movs	r3, #0
    c242:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c244:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c24a:	011b      	lsls	r3, r3, #4
    c24c:	4413      	add	r3, r2
    c24e:	3304      	adds	r3, #4
    c250:	681b      	ldr	r3, [r3, #0]
    c252:	2b00      	cmp	r3, #0
    c254:	d002      	beq.n	c25c <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    c256:	2302      	movs	r3, #2
    c258:	930d      	str	r3, [sp, #52]	; 0x34
    c25a:	e053      	b.n	c304 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c25c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c260:	4619      	mov	r1, r3
    c262:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c264:	f7ff fbee 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    c268:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c26c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c26e:	011b      	lsls	r3, r3, #4
    c270:	4413      	add	r3, r2
    c272:	3304      	adds	r3, #4
    c274:	2202      	movs	r2, #2
    c276:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    c278:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c27c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c27e:	011b      	lsls	r3, r3, #4
    c280:	4413      	add	r3, r2
    c282:	330c      	adds	r3, #12
    c284:	2200      	movs	r2, #0
    c286:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    c288:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c28c:	9a04      	ldr	r2, [sp, #16]
    c28e:	7b11      	ldrb	r1, [r2, #12]
    c290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c292:	011b      	lsls	r3, r3, #4
    c294:	4413      	add	r3, r2
    c296:	3308      	adds	r3, #8
    c298:	460a      	mov	r2, r1
    c29a:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    c29c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c2a0:	9a04      	ldr	r2, [sp, #16]
    c2a2:	7ad1      	ldrb	r1, [r2, #11]
    c2a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c2a6:	011b      	lsls	r3, r3, #4
    c2a8:	4413      	add	r3, r2
    c2aa:	3309      	adds	r3, #9
    c2ac:	460a      	mov	r2, r1
    c2ae:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    c2b0:	9b04      	ldr	r3, [sp, #16]
    c2b2:	685b      	ldr	r3, [r3, #4]
    c2b4:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    c2b6:	9b04      	ldr	r3, [sp, #16]
    c2b8:	681b      	ldr	r3, [r3, #0]
    c2ba:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    c2bc:	9b04      	ldr	r3, [sp, #16]
    c2be:	7a1b      	ldrb	r3, [r3, #8]
    c2c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    c2c4:	9b04      	ldr	r3, [sp, #16]
    c2c6:	7a5b      	ldrb	r3, [r3, #9]
    c2c8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    c2cc:	9b04      	ldr	r3, [sp, #16]
    c2ce:	7a9b      	ldrb	r3, [r3, #10]
    c2d0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    c2d4:	9b04      	ldr	r3, [sp, #16]
    c2d6:	7adb      	ldrb	r3, [r3, #11]
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d002      	beq.n	c2e2 <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    c2dc:	231c      	movs	r3, #28
    c2de:	9306      	str	r3, [sp, #24]
    c2e0:	e001      	b.n	c2e6 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    c2e2:	230c      	movs	r3, #12
    c2e4:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c2e6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c2ea:	4619      	mov	r1, r3
    c2ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c2ee:	f002 fa89 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    c2f2:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    c2f4:	a906      	add	r1, sp, #24
    c2f6:	2300      	movs	r3, #0
    c2f8:	9300      	str	r3, [sp, #0]
    c2fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c2fc:	9a03      	ldr	r2, [sp, #12]
    c2fe:	980a      	ldr	r0, [sp, #40]	; 0x28
    c300:	f002 ffd2 	bl	f2a8 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    c306:	4618      	mov	r0, r3
    c308:	b00f      	add	sp, #60	; 0x3c
    c30a:	f85d fb04 	ldr.w	pc, [sp], #4
    c30e:	bf00      	nop
    c310:	1fff935c 	.word	0x1fff935c
    c314:	00018554 	.word	0x00018554

0000c318 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    c318:	b500      	push	{lr}
    c31a:	b089      	sub	sp, #36	; 0x24
    c31c:	4603      	mov	r3, r0
    c31e:	9102      	str	r1, [sp, #8]
    c320:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    c324:	2300      	movs	r3, #0
    c326:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    c328:	2300      	movs	r3, #0
    c32a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c32c:	2300      	movs	r3, #0
    c32e:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    c330:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c334:	4a26      	ldr	r2, [pc, #152]	; (c3d0 <FlexCAN_StartRxMessageFifoData+0xb8>)
    c336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c33a:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    c33c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c340:	4a24      	ldr	r2, [pc, #144]	; (c3d4 <FlexCAN_StartRxMessageFifoData+0xbc>)
    c342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c346:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    c348:	9b05      	ldr	r3, [sp, #20]
    c34a:	685b      	ldr	r3, [r3, #4]
    c34c:	2b01      	cmp	r3, #1
    c34e:	d102      	bne.n	c356 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    c350:	2302      	movs	r3, #2
    c352:	9307      	str	r3, [sp, #28]
    c354:	e036      	b.n	c3c4 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    c356:	9b05      	ldr	r3, [sp, #20]
    c358:	2201      	movs	r2, #1
    c35a:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    c35c:	9b05      	ldr	r3, [sp, #20]
    c35e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c362:	2b01      	cmp	r3, #1
    c364:	d102      	bne.n	c36c <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c366:	9b05      	ldr	r3, [sp, #20]
    c368:	2201      	movs	r2, #1
    c36a:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    c36c:	9b05      	ldr	r3, [sp, #20]
    c36e:	9a02      	ldr	r2, [sp, #8]
    c370:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    c372:	9b05      	ldr	r3, [sp, #20]
    c374:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c378:	2b00      	cmp	r3, #0
    c37a:	d123      	bne.n	c3c4 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    c37c:	9b05      	ldr	r3, [sp, #20]
    c37e:	2200      	movs	r2, #0
    c380:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    c382:	9b05      	ldr	r3, [sp, #20]
    c384:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c388:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c38c:	9300      	str	r3, [sp, #0]
    c38e:	2301      	movs	r3, #1
    c390:	2206      	movs	r2, #6
    c392:	9806      	ldr	r0, [sp, #24]
    c394:	f002 fdbe 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    c398:	9b05      	ldr	r3, [sp, #20]
    c39a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c39e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c3a2:	9300      	str	r3, [sp, #0]
    c3a4:	2301      	movs	r3, #1
    c3a6:	2207      	movs	r2, #7
    c3a8:	9806      	ldr	r0, [sp, #24]
    c3aa:	f002 fdb3 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    c3ae:	9b05      	ldr	r3, [sp, #20]
    c3b0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c3b4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c3b8:	9300      	str	r3, [sp, #0]
    c3ba:	2301      	movs	r3, #1
    c3bc:	2205      	movs	r2, #5
    c3be:	9806      	ldr	r0, [sp, #24]
    c3c0:	f002 fda8 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c3c4:	9b07      	ldr	r3, [sp, #28]
}
    c3c6:	4618      	mov	r0, r3
    c3c8:	b009      	add	sp, #36	; 0x24
    c3ca:	f85d fb04 	ldr.w	pc, [sp], #4
    c3ce:	bf00      	nop
    c3d0:	00018554 	.word	0x00018554
    c3d4:	1fff935c 	.word	0x1fff935c

0000c3d8 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    c3d8:	b510      	push	{r4, lr}
    c3da:	b09e      	sub	sp, #120	; 0x78
    c3dc:	4603      	mov	r3, r0
    c3de:	9102      	str	r1, [sp, #8]
    c3e0:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c3e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3e8:	4a70      	ldr	r2, [pc, #448]	; (c5ac <FlexCAN_IRQHandlerRxMB+0x1d4>)
    c3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3ee:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c3f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3f4:	4a6e      	ldr	r2, [pc, #440]	; (c5b0 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    c3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3fa:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    c3fc:	2300      	movs	r3, #0
    c3fe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    c402:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c404:	9b02      	ldr	r3, [sp, #8]
    c406:	011b      	lsls	r3, r3, #4
    c408:	4413      	add	r3, r2
    c40a:	681b      	ldr	r3, [r3, #0]
    c40c:	2b00      	cmp	r3, #0
    c40e:	d105      	bne.n	c41c <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    c410:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c412:	9b02      	ldr	r3, [sp, #8]
    c414:	011b      	lsls	r3, r3, #4
    c416:	4413      	add	r3, r2
    c418:	aa05      	add	r2, sp, #20
    c41a:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    c41c:	2300      	movs	r3, #0
    c41e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    c422:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c424:	9b02      	ldr	r3, [sp, #8]
    c426:	011b      	lsls	r3, r3, #4
    c428:	4413      	add	r3, r2
    c42a:	3308      	adds	r3, #8
    c42c:	781b      	ldrb	r3, [r3, #0]
    c42e:	2b00      	cmp	r3, #0
    c430:	d008      	beq.n	c444 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    c432:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c434:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c438:	2b00      	cmp	r3, #0
    c43a:	d003      	beq.n	c444 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    c43c:	2301      	movs	r3, #1
    c43e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    c442:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    c444:	9902      	ldr	r1, [sp, #8]
    c446:	981c      	ldr	r0, [sp, #112]	; 0x70
    c448:	f002 fd55 	bl	eef6 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    c44c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c44e:	9b02      	ldr	r3, [sp, #8]
    c450:	011b      	lsls	r3, r3, #4
    c452:	4413      	add	r3, r2
    c454:	681b      	ldr	r3, [r3, #0]
    c456:	461a      	mov	r2, r3
    c458:	9902      	ldr	r1, [sp, #8]
    c45a:	981c      	ldr	r0, [sp, #112]	; 0x70
    c45c:	f002 fe7a 	bl	f154 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c460:	9902      	ldr	r1, [sp, #8]
    c462:	981c      	ldr	r0, [sp, #112]	; 0x70
    c464:	f7ff faee 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    c468:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c46a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c46e:	2b00      	cmp	r3, #0
    c470:	d032      	beq.n	c4d8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c472:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c474:	9b02      	ldr	r3, [sp, #8]
    c476:	011b      	lsls	r3, r3, #4
    c478:	4413      	add	r3, r2
    c47a:	681b      	ldr	r3, [r3, #0]
    c47c:	681b      	ldr	r3, [r3, #0]
    c47e:	0e1b      	lsrs	r3, r3, #24
    c480:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    c484:	2b02      	cmp	r3, #2
    c486:	d027      	beq.n	c4d8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c488:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c48a:	9b02      	ldr	r3, [sp, #8]
    c48c:	011b      	lsls	r3, r3, #4
    c48e:	4413      	add	r3, r2
    c490:	681b      	ldr	r3, [r3, #0]
    c492:	681b      	ldr	r3, [r3, #0]
    c494:	0e1b      	lsrs	r3, r3, #24
    c496:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c49a:	2b04      	cmp	r3, #4
    c49c:	d01c      	beq.n	c4d8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    c49e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4a0:	9b02      	ldr	r3, [sp, #8]
    c4a2:	011b      	lsls	r3, r3, #4
    c4a4:	4413      	add	r3, r2
    c4a6:	681b      	ldr	r3, [r3, #0]
    c4a8:	681b      	ldr	r3, [r3, #0]
    c4aa:	0e1b      	lsrs	r3, r3, #24
    c4ac:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c4b0:	2b06      	cmp	r3, #6
    c4b2:	d011      	beq.n	c4d8 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c4b4:	9902      	ldr	r1, [sp, #8]
    c4b6:	981c      	ldr	r0, [sp, #112]	; 0x70
    c4b8:	f002 f9a4 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    c4bc:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    c4be:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c4c0:	681b      	ldr	r3, [r3, #0]
    c4c2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c4c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c4c8:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c4ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c4cc:	681b      	ldr	r3, [r3, #0]
    c4ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    c4d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c4d4:	601a      	str	r2, [r3, #0]
    {
    c4d6:	e002      	b.n	c4de <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    c4d8:	981c      	ldr	r0, [sp, #112]	; 0x70
    c4da:	f7ff faac 	bl	ba36 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    c4de:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d000      	beq.n	c4e8 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    c4e6:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c4e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4ea:	9b02      	ldr	r3, [sp, #8]
    c4ec:	011b      	lsls	r3, r3, #4
    c4ee:	4413      	add	r3, r2
    c4f0:	3304      	adds	r3, #4
    c4f2:	2200      	movs	r2, #0
    c4f4:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    c4f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4f8:	9b02      	ldr	r3, [sp, #8]
    c4fa:	011b      	lsls	r3, r3, #4
    c4fc:	4413      	add	r3, r2
    c4fe:	3308      	adds	r3, #8
    c500:	781b      	ldrb	r3, [r3, #0]
    c502:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    c506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c508:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c50c:	2b00      	cmp	r3, #0
    c50e:	d008      	beq.n	c522 <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    c510:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c512:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c516:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c51a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c51c:	9a02      	ldr	r2, [sp, #8]
    c51e:	2100      	movs	r1, #0
    c520:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    c522:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c524:	9b02      	ldr	r3, [sp, #8]
    c526:	011b      	lsls	r3, r3, #4
    c528:	4413      	add	r3, r2
    c52a:	3304      	adds	r3, #4
    c52c:	681b      	ldr	r3, [r3, #0]
    c52e:	2b00      	cmp	r3, #0
    c530:	d11e      	bne.n	c570 <FlexCAN_IRQHandlerRxMB+0x198>
    c532:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c534:	9b02      	ldr	r3, [sp, #8]
    c536:	011b      	lsls	r3, r3, #4
    c538:	4413      	add	r3, r2
    c53a:	3308      	adds	r3, #8
    c53c:	781b      	ldrb	r3, [r3, #0]
    c53e:	f083 0301 	eor.w	r3, r3, #1
    c542:	b2db      	uxtb	r3, r3
    c544:	2b00      	cmp	r3, #0
    c546:	d013      	beq.n	c570 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    c548:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c54a:	9b02      	ldr	r3, [sp, #8]
    c54c:	011b      	lsls	r3, r3, #4
    c54e:	4413      	add	r3, r2
    c550:	3308      	adds	r3, #8
    c552:	2201      	movs	r2, #1
    c554:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c556:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c558:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c55c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c560:	9300      	str	r3, [sp, #0]
    c562:	2300      	movs	r3, #0
    c564:	9a02      	ldr	r2, [sp, #8]
    c566:	981c      	ldr	r0, [sp, #112]	; 0x70
    c568:	f002 fcd4 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
    c56c:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c56e:	e019      	b.n	c5a4 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    c570:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    c574:	f083 0301 	eor.w	r3, r3, #1
    c578:	b2db      	uxtb	r3, r3
    c57a:	2b00      	cmp	r3, #0
    c57c:	d012      	beq.n	c5a4 <FlexCAN_IRQHandlerRxMB+0x1cc>
    c57e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c580:	9b02      	ldr	r3, [sp, #8]
    c582:	011b      	lsls	r3, r3, #4
    c584:	4413      	add	r3, r2
    c586:	3308      	adds	r3, #8
    c588:	781b      	ldrb	r3, [r3, #0]
    c58a:	2b00      	cmp	r3, #0
    c58c:	d00a      	beq.n	c5a4 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c58e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c590:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c594:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c598:	9300      	str	r3, [sp, #0]
    c59a:	2300      	movs	r3, #0
    c59c:	9a02      	ldr	r2, [sp, #8]
    c59e:	981c      	ldr	r0, [sp, #112]	; 0x70
    c5a0:	f002 fcb8 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
}
    c5a4:	bf00      	nop
    c5a6:	b01e      	add	sp, #120	; 0x78
    c5a8:	bd10      	pop	{r4, pc}
    c5aa:	bf00      	nop
    c5ac:	00018554 	.word	0x00018554
    c5b0:	1fff935c 	.word	0x1fff935c

0000c5b4 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    c5b4:	b510      	push	{r4, lr}
    c5b6:	b09a      	sub	sp, #104	; 0x68
    c5b8:	4603      	mov	r3, r0
    c5ba:	9102      	str	r1, [sp, #8]
    c5bc:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c5c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c5c4:	4a46      	ldr	r2, [pc, #280]	; (c6e0 <FlexCAN_IRQHandlerTxMB+0x12c>)
    c5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5ca:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c5cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c5d0:	4a44      	ldr	r2, [pc, #272]	; (c6e4 <FlexCAN_IRQHandlerTxMB+0x130>)
    c5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5d6:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    c5d8:	2300      	movs	r3, #0
    c5da:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    c5dc:	2300      	movs	r3, #0
    c5de:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    c5e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c5e2:	9b02      	ldr	r3, [sp, #8]
    c5e4:	011b      	lsls	r3, r3, #4
    c5e6:	4413      	add	r3, r2
    c5e8:	3309      	adds	r3, #9
    c5ea:	781b      	ldrb	r3, [r3, #0]
    c5ec:	2b00      	cmp	r3, #0
    c5ee:	d01e      	beq.n	c62e <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    c5f0:	9902      	ldr	r1, [sp, #8]
    c5f2:	9819      	ldr	r0, [sp, #100]	; 0x64
    c5f4:	f002 fc7f 	bl	eef6 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    c5f8:	ab04      	add	r3, sp, #16
    c5fa:	461a      	mov	r2, r3
    c5fc:	9902      	ldr	r1, [sp, #8]
    c5fe:	9819      	ldr	r0, [sp, #100]	; 0x64
    c600:	f002 fda8 	bl	f154 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    c604:	9819      	ldr	r0, [sp, #100]	; 0x64
    c606:	f7ff fa16 	bl	ba36 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    c60a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c60c:	9918      	ldr	r1, [sp, #96]	; 0x60
    c60e:	9b02      	ldr	r3, [sp, #8]
    c610:	011b      	lsls	r3, r3, #4
    c612:	440b      	add	r3, r1
    c614:	330c      	adds	r3, #12
    c616:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c618:	9b04      	ldr	r3, [sp, #16]
    c61a:	0e1b      	lsrs	r3, r3, #24
    c61c:	f003 030f 	and.w	r3, r3, #15
    c620:	2b04      	cmp	r3, #4
    c622:	d116      	bne.n	c652 <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c624:	9902      	ldr	r1, [sp, #8]
    c626:	9819      	ldr	r0, [sp, #100]	; 0x64
    c628:	f7ff fa0c 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
    c62c:	e011      	b.n	c652 <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    c62e:	9902      	ldr	r1, [sp, #8]
    c630:	9819      	ldr	r0, [sp, #100]	; 0x64
    c632:	f002 fd7b 	bl	f12c <FlexCAN_GetMsgBuffTimestamp>
    c636:	4601      	mov	r1, r0
    c638:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c63a:	9b02      	ldr	r3, [sp, #8]
    c63c:	011b      	lsls	r3, r3, #4
    c63e:	4413      	add	r3, r2
    c640:	330c      	adds	r3, #12
    c642:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    c644:	9819      	ldr	r0, [sp, #100]	; 0x64
    c646:	f7ff f9f6 	bl	ba36 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c64a:	9902      	ldr	r1, [sp, #8]
    c64c:	9819      	ldr	r0, [sp, #100]	; 0x64
    c64e:	f7ff f9f9 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    c652:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c654:	9b02      	ldr	r3, [sp, #8]
    c656:	011b      	lsls	r3, r3, #4
    c658:	4413      	add	r3, r2
    c65a:	3304      	adds	r3, #4
    c65c:	2200      	movs	r2, #0
    c65e:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    c660:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c662:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c666:	2b00      	cmp	r3, #0
    c668:	d008      	beq.n	c67c <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    c66a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c66c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c670:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c674:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c676:	9a02      	ldr	r2, [sp, #8]
    c678:	2104      	movs	r1, #4
    c67a:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    c67c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c67e:	9b02      	ldr	r3, [sp, #8]
    c680:	011b      	lsls	r3, r3, #4
    c682:	4413      	add	r3, r2
    c684:	3304      	adds	r3, #4
    c686:	681b      	ldr	r3, [r3, #0]
    c688:	2b00      	cmp	r3, #0
    c68a:	d112      	bne.n	c6b2 <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    c68c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c68e:	9b02      	ldr	r3, [sp, #8]
    c690:	011b      	lsls	r3, r3, #4
    c692:	4413      	add	r3, r2
    c694:	3308      	adds	r3, #8
    c696:	2201      	movs	r2, #1
    c698:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c69a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c69c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c6a0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c6a4:	9300      	str	r3, [sp, #0]
    c6a6:	2300      	movs	r3, #0
    c6a8:	9a02      	ldr	r2, [sp, #8]
    c6aa:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6ac:	f002 fc32 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c6b0:	e012      	b.n	c6d8 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    c6b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c6b4:	9b02      	ldr	r3, [sp, #8]
    c6b6:	011b      	lsls	r3, r3, #4
    c6b8:	4413      	add	r3, r2
    c6ba:	3308      	adds	r3, #8
    c6bc:	781b      	ldrb	r3, [r3, #0]
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d00a      	beq.n	c6d8 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c6c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c6c4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c6c8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c6cc:	9300      	str	r3, [sp, #0]
    c6ce:	2300      	movs	r3, #0
    c6d0:	9a02      	ldr	r2, [sp, #8]
    c6d2:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6d4:	f002 fc1e 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
}
    c6d8:	bf00      	nop
    c6da:	b01a      	add	sp, #104	; 0x68
    c6dc:	bd10      	pop	{r4, pc}
    c6de:	bf00      	nop
    c6e0:	00018554 	.word	0x00018554
    c6e4:	1fff935c 	.word	0x1fff935c

0000c6e8 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    c6e8:	b510      	push	{r4, lr}
    c6ea:	b098      	sub	sp, #96	; 0x60
    c6ec:	4603      	mov	r3, r0
    c6ee:	9100      	str	r1, [sp, #0]
    c6f0:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c6f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c6f8:	4a3c      	ldr	r2, [pc, #240]	; (c7ec <FlexCAN_IRQHandlerRxFIFO+0x104>)
    c6fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6fe:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c700:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c704:	4a3a      	ldr	r2, [pc, #232]	; (c7f0 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    c706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c70a:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    c70c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c70e:	681b      	ldr	r3, [r3, #0]
    c710:	2b00      	cmp	r3, #0
    c712:	d102      	bne.n	c71a <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    c714:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c716:	aa02      	add	r2, sp, #8
    c718:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    c71a:	9b00      	ldr	r3, [sp, #0]
    c71c:	2b07      	cmp	r3, #7
    c71e:	d048      	beq.n	c7b2 <FlexCAN_IRQHandlerRxFIFO+0xca>
    c720:	9b00      	ldr	r3, [sp, #0]
    c722:	2b07      	cmp	r3, #7
    c724:	d858      	bhi.n	c7d8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    c726:	9b00      	ldr	r3, [sp, #0]
    c728:	2b05      	cmp	r3, #5
    c72a:	d003      	beq.n	c734 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    c72c:	9b00      	ldr	r3, [sp, #0]
    c72e:	2b06      	cmp	r3, #6
    c730:	d02c      	beq.n	c78c <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    c732:	e051      	b.n	c7d8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c734:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c736:	685b      	ldr	r3, [r3, #4]
    c738:	2b01      	cmp	r3, #1
    c73a:	d14f      	bne.n	c7dc <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    c73c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c73e:	681b      	ldr	r3, [r3, #0]
    c740:	4619      	mov	r1, r3
    c742:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c744:	f003 f98d 	bl	fa62 <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c748:	9900      	ldr	r1, [sp, #0]
    c74a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c74c:	f7ff f97a 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c750:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c752:	2200      	movs	r2, #0
    c754:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    c756:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c75c:	2b00      	cmp	r3, #0
    c75e:	d008      	beq.n	c772 <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c760:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c762:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c766:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c76a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c76c:	2200      	movs	r2, #0
    c76e:	2101      	movs	r1, #1
    c770:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c772:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c774:	685b      	ldr	r3, [r3, #4]
    c776:	2b00      	cmp	r3, #0
    c778:	d130      	bne.n	c7dc <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c77a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c77c:	2201      	movs	r2, #1
    c77e:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    c780:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c784:	4618      	mov	r0, r3
    c786:	f000 fc61 	bl	d04c <FlexCAN_CompleteRxMessageFifoData>
            break;
    c78a:	e027      	b.n	c7dc <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c78c:	9900      	ldr	r1, [sp, #0]
    c78e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c790:	f7ff f958 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c794:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c796:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c79a:	2b00      	cmp	r3, #0
    c79c:	d020      	beq.n	c7e0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c79e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7a0:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c7a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c7a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7aa:	2200      	movs	r2, #0
    c7ac:	2102      	movs	r1, #2
    c7ae:	47a0      	blx	r4
            break;
    c7b0:	e016      	b.n	c7e0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c7b2:	9900      	ldr	r1, [sp, #0]
    c7b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c7b6:	f7ff f945 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c7ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c7c0:	2b00      	cmp	r3, #0
    c7c2:	d00f      	beq.n	c7e4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c7c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7c6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c7ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c7ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7d0:	2200      	movs	r2, #0
    c7d2:	2103      	movs	r1, #3
    c7d4:	47a0      	blx	r4
            break;
    c7d6:	e005      	b.n	c7e4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    c7d8:	bf00      	nop
    c7da:	e004      	b.n	c7e6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c7dc:	bf00      	nop
    c7de:	e002      	b.n	c7e6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c7e0:	bf00      	nop
    c7e2:	e000      	b.n	c7e6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c7e4:	bf00      	nop
    }
}
    c7e6:	bf00      	nop
    c7e8:	b018      	add	sp, #96	; 0x60
    c7ea:	bd10      	pop	{r4, pc}
    c7ec:	00018554 	.word	0x00018554
    c7f0:	1fff935c 	.word	0x1fff935c

0000c7f4 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c7f4:	b500      	push	{lr}
    c7f6:	b08b      	sub	sp, #44	; 0x2c
    c7f8:	4603      	mov	r3, r0
    c7fa:	460a      	mov	r2, r1
    c7fc:	f88d 3007 	strb.w	r3, [sp, #7]
    c800:	4613      	mov	r3, r2
    c802:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c806:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c80a:	4a3c      	ldr	r2, [pc, #240]	; (c8fc <FlexCAN_AbortTxTransfer+0x108>)
    c80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c810:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c812:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c816:	4a3a      	ldr	r2, [pc, #232]	; (c900 <FlexCAN_AbortTxTransfer+0x10c>)
    c818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c81c:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c81e:	2300      	movs	r3, #0
    c820:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    c822:	2300      	movs	r3, #0
    c824:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c826:	2300      	movs	r3, #0
    c828:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    c82a:	2300      	movs	r3, #0
    c82c:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    c82e:	2300      	movs	r3, #0
    c830:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    c832:	2300      	movs	r3, #0
    c834:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c836:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c83a:	4619      	mov	r1, r3
    c83c:	9807      	ldr	r0, [sp, #28]
    c83e:	f001 ffe1 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    c842:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    c844:	9b03      	ldr	r3, [sp, #12]
    c846:	681b      	ldr	r3, [r3, #0]
    c848:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c84a:	9b05      	ldr	r3, [sp, #20]
    c84c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c850:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c852:	9b05      	ldr	r3, [sp, #20]
    c854:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    c858:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    c85a:	9b03      	ldr	r3, [sp, #12]
    c85c:	9a05      	ldr	r2, [sp, #20]
    c85e:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c860:	2100      	movs	r1, #0
    c862:	4828      	ldr	r0, [pc, #160]	; (c904 <FlexCAN_AbortTxTransfer+0x110>)
    c864:	f7f5 fb26 	bl	1eb4 <OsIf_MicrosToTicks>
    c868:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c86a:	2000      	movs	r0, #0
    c86c:	f7f5 fad6 	bl	1e1c <OsIf_GetCounter>
    c870:	4603      	mov	r3, r0
    c872:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c874:	e00f      	b.n	c896 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c876:	ab02      	add	r3, sp, #8
    c878:	2100      	movs	r1, #0
    c87a:	4618      	mov	r0, r3
    c87c:	f7f5 fae7 	bl	1e4e <OsIf_GetElapsed>
    c880:	4602      	mov	r2, r0
    c882:	9b08      	ldr	r3, [sp, #32]
    c884:	4413      	add	r3, r2
    c886:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    c888:	9a08      	ldr	r2, [sp, #32]
    c88a:	9b04      	ldr	r3, [sp, #16]
    c88c:	429a      	cmp	r2, r3
    c88e:	d302      	bcc.n	c896 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    c890:	2303      	movs	r3, #3
    c892:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    c894:	e008      	b.n	c8a8 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c896:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c89a:	4619      	mov	r1, r3
    c89c:	9807      	ldr	r0, [sp, #28]
    c89e:	f7ff f8e4 	bl	ba6a <FlexCAN_GetBuffStatusFlag>
    c8a2:	4603      	mov	r3, r0
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d0e6      	beq.n	c876 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    c8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8aa:	2b03      	cmp	r3, #3
    c8ac:	d012      	beq.n	c8d4 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    c8ae:	9b03      	ldr	r3, [sp, #12]
    c8b0:	681b      	ldr	r3, [r3, #0]
    c8b2:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c8b4:	9b05      	ldr	r3, [sp, #20]
    c8b6:	0e1b      	lsrs	r3, r3, #24
    c8b8:	f003 030f 	and.w	r3, r3, #15
    c8bc:	2b08      	cmp	r3, #8
    c8be:	d101      	bne.n	c8c4 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    c8c0:	2305      	movs	r3, #5
    c8c2:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c8c4:	9b05      	ldr	r3, [sp, #20]
    c8c6:	0e1b      	lsrs	r3, r3, #24
    c8c8:	f003 030f 	and.w	r3, r3, #15
    c8cc:	2b09      	cmp	r3, #9
    c8ce:	d101      	bne.n	c8d4 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    c8d0:	2300      	movs	r3, #0
    c8d2:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    c8d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c8d8:	4619      	mov	r1, r3
    c8da:	9807      	ldr	r0, [sp, #28]
    c8dc:	f7ff f8b2 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c8e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c8e4:	9a06      	ldr	r2, [sp, #24]
    c8e6:	011b      	lsls	r3, r3, #4
    c8e8:	4413      	add	r3, r2
    c8ea:	3304      	adds	r3, #4
    c8ec:	2200      	movs	r2, #0
    c8ee:	601a      	str	r2, [r3, #0]

    return result;
    c8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c8f2:	4618      	mov	r0, r3
    c8f4:	b00b      	add	sp, #44	; 0x2c
    c8f6:	f85d fb04 	ldr.w	pc, [sp], #4
    c8fa:	bf00      	nop
    c8fc:	00018554 	.word	0x00018554
    c900:	1fff935c 	.word	0x1fff935c
    c904:	000f4240 	.word	0x000f4240

0000c908 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c908:	b500      	push	{lr}
    c90a:	b089      	sub	sp, #36	; 0x24
    c90c:	4603      	mov	r3, r0
    c90e:	460a      	mov	r2, r1
    c910:	f88d 3007 	strb.w	r3, [sp, #7]
    c914:	4613      	mov	r3, r2
    c916:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c91a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c91e:	4a41      	ldr	r2, [pc, #260]	; (ca24 <FlexCAN_AbortRxTransfer+0x11c>)
    c920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c924:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c926:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c92a:	4a3f      	ldr	r2, [pc, #252]	; (ca28 <FlexCAN_AbortRxTransfer+0x120>)
    c92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c930:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    c932:	2300      	movs	r3, #0
    c934:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    c938:	2300      	movs	r3, #0
    c93a:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    c93c:	2300      	movs	r3, #0
    c93e:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    c940:	2300      	movs	r3, #0
    c942:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c944:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c948:	9a06      	ldr	r2, [sp, #24]
    c94a:	011b      	lsls	r3, r3, #4
    c94c:	4413      	add	r3, r2
    c94e:	3304      	adds	r3, #4
    c950:	2200      	movs	r2, #0
    c952:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    c954:	9b06      	ldr	r3, [sp, #24]
    c956:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c95a:	2b00      	cmp	r3, #0
    c95c:	d03c      	beq.n	c9d8 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    c95e:	9b07      	ldr	r3, [sp, #28]
    c960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c962:	0e1b      	lsrs	r3, r3, #24
    c964:	b2db      	uxtb	r3, r3
    c966:	f003 030f 	and.w	r3, r3, #15
    c96a:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    c96e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c972:	4618      	mov	r0, r3
    c974:	f7ff f9f3 	bl	bd5e <RxFifoOcuppiedLastMsgBuff>
    c978:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    c97a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c97e:	9a04      	ldr	r2, [sp, #16]
    c980:	429a      	cmp	r2, r3
    c982:	d21b      	bcs.n	c9bc <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c984:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c988:	4619      	mov	r1, r3
    c98a:	9807      	ldr	r0, [sp, #28]
    c98c:	f001 ff3a 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    c990:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    c992:	9b02      	ldr	r3, [sp, #8]
    c994:	681b      	ldr	r3, [r3, #0]
    c996:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    c998:	9b03      	ldr	r3, [sp, #12]
    c99a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c99e:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    c9a0:	9b02      	ldr	r3, [sp, #8]
    c9a2:	9a03      	ldr	r2, [sp, #12]
    c9a4:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c9a6:	9b03      	ldr	r3, [sp, #12]
    c9a8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c9ac:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c9ae:	9b03      	ldr	r3, [sp, #12]
    c9b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    c9b4:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    c9b6:	9b02      	ldr	r3, [sp, #8]
    c9b8:	9a03      	ldr	r2, [sp, #12]
    c9ba:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    c9bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9c0:	2b00      	cmp	r3, #0
    c9c2:	d125      	bne.n	ca10 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    c9c4:	9b06      	ldr	r3, [sp, #24]
    c9c6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c9ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
    c9ce:	2205      	movs	r2, #5
    c9d0:	9807      	ldr	r0, [sp, #28]
    c9d2:	f002 faf5 	bl	efc0 <FLEXCAN_ClearMsgBuffIntCmd>
    c9d6:	e01b      	b.n	ca10 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c9d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9dc:	4619      	mov	r1, r3
    c9de:	9807      	ldr	r0, [sp, #28]
    c9e0:	f001 ff10 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    c9e4:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    c9e6:	9b02      	ldr	r3, [sp, #8]
    c9e8:	681b      	ldr	r3, [r3, #0]
    c9ea:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c9ec:	9b03      	ldr	r3, [sp, #12]
    c9ee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c9f2:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    c9f4:	9b02      	ldr	r3, [sp, #8]
    c9f6:	9a03      	ldr	r2, [sp, #12]
    c9f8:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c9fa:	9b03      	ldr	r3, [sp, #12]
    c9fc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ca00:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    ca02:	9b03      	ldr	r3, [sp, #12]
    ca04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    ca08:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    ca0a:	9b02      	ldr	r3, [sp, #8]
    ca0c:	9a03      	ldr	r2, [sp, #12]
    ca0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    ca10:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca14:	4619      	mov	r1, r3
    ca16:	9807      	ldr	r0, [sp, #28]
    ca18:	f7ff f814 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    ca1c:	bf00      	nop
    ca1e:	b009      	add	sp, #36	; 0x24
    ca20:	f85d fb04 	ldr.w	pc, [sp], #4
    ca24:	00018554 	.word	0x00018554
    ca28:	1fff935c 	.word	0x1fff935c

0000ca2c <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    ca2c:	b500      	push	{lr}
    ca2e:	b089      	sub	sp, #36	; 0x24
    ca30:	4603      	mov	r3, r0
    ca32:	9102      	str	r1, [sp, #8]
    ca34:	9201      	str	r2, [sp, #4]
    ca36:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    ca3a:	2300      	movs	r3, #0
    ca3c:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    ca3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca42:	4a36      	ldr	r2, [pc, #216]	; (cb1c <FlexCAN_Ip_Init_Privileged+0xf0>)
    ca44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca48:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    ca4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca4e:	9a01      	ldr	r2, [sp, #4]
    ca50:	9905      	ldr	r1, [sp, #20]
    ca52:	4618      	mov	r0, r3
    ca54:	f7ff fa84 	bl	bf60 <FlexCAN_InitController>
    ca58:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    ca5a:	9b06      	ldr	r3, [sp, #24]
    ca5c:	2b00      	cmp	r3, #0
    ca5e:	d158      	bne.n	cb12 <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    ca60:	9901      	ldr	r1, [sp, #4]
    ca62:	9805      	ldr	r0, [sp, #20]
    ca64:	f7ff fad6 	bl	c014 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    ca68:	9b01      	ldr	r3, [sp, #4]
    ca6a:	68db      	ldr	r3, [r3, #12]
    ca6c:	4619      	mov	r1, r3
    ca6e:	9805      	ldr	r0, [sp, #20]
    ca70:	f002 fdb8 	bl	f5e4 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    ca74:	2300      	movs	r3, #0
    ca76:	9307      	str	r3, [sp, #28]
    ca78:	e01d      	b.n	cab6 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    ca7a:	9a02      	ldr	r2, [sp, #8]
    ca7c:	9b07      	ldr	r3, [sp, #28]
    ca7e:	011b      	lsls	r3, r3, #4
    ca80:	4413      	add	r3, r2
    ca82:	3308      	adds	r3, #8
    ca84:	2201      	movs	r2, #1
    ca86:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    ca88:	9a02      	ldr	r2, [sp, #8]
    ca8a:	9b07      	ldr	r3, [sp, #28]
    ca8c:	011b      	lsls	r3, r3, #4
    ca8e:	4413      	add	r3, r2
    ca90:	2200      	movs	r2, #0
    ca92:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    ca94:	9a02      	ldr	r2, [sp, #8]
    ca96:	9b07      	ldr	r3, [sp, #28]
    ca98:	011b      	lsls	r3, r3, #4
    ca9a:	4413      	add	r3, r2
    ca9c:	3304      	adds	r3, #4
    ca9e:	2200      	movs	r2, #0
    caa0:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    caa2:	9a02      	ldr	r2, [sp, #8]
    caa4:	9b07      	ldr	r3, [sp, #28]
    caa6:	011b      	lsls	r3, r3, #4
    caa8:	4413      	add	r3, r2
    caaa:	330c      	adds	r3, #12
    caac:	2200      	movs	r2, #0
    caae:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    cab0:	9b07      	ldr	r3, [sp, #28]
    cab2:	3301      	adds	r3, #1
    cab4:	9307      	str	r3, [sp, #28]
    cab6:	9b07      	ldr	r3, [sp, #28]
    cab8:	2b1f      	cmp	r3, #31
    caba:	d9de      	bls.n	ca7a <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    cabc:	9b01      	ldr	r3, [sp, #4]
    cabe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    cac0:	9b02      	ldr	r3, [sp, #8]
    cac2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    cac6:	9b01      	ldr	r3, [sp, #4]
    cac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    caca:	9b02      	ldr	r3, [sp, #8]
    cacc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    cad0:	9b02      	ldr	r3, [sp, #8]
    cad2:	2200      	movs	r2, #0
    cad4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    cad8:	9b01      	ldr	r3, [sp, #4]
    cada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    cadc:	9b02      	ldr	r3, [sp, #8]
    cade:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    cae2:	9b02      	ldr	r3, [sp, #8]
    cae4:	2200      	movs	r2, #0
    cae6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    caea:	9b01      	ldr	r3, [sp, #4]
    caec:	7a1a      	ldrb	r2, [r3, #8]
    caee:	9b02      	ldr	r3, [sp, #8]
    caf0:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    caf4:	9b01      	ldr	r3, [sp, #4]
    caf6:	681a      	ldr	r2, [r3, #0]
    caf8:	9b02      	ldr	r3, [sp, #8]
    cafa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    cafe:	9b02      	ldr	r3, [sp, #8]
    cb00:	2201      	movs	r2, #1
    cb02:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    cb06:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cb0a:	4905      	ldr	r1, [pc, #20]	; (cb20 <FlexCAN_Ip_Init_Privileged+0xf4>)
    cb0c:	9a02      	ldr	r2, [sp, #8]
    cb0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    cb12:	9b06      	ldr	r3, [sp, #24]
}
    cb14:	4618      	mov	r0, r3
    cb16:	b009      	add	sp, #36	; 0x24
    cb18:	f85d fb04 	ldr.w	pc, [sp], #4
    cb1c:	00018554 	.word	0x00018554
    cb20:	1fff935c 	.word	0x1fff935c

0000cb24 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    cb24:	b500      	push	{lr}
    cb26:	b08b      	sub	sp, #44	; 0x2c
    cb28:	9204      	str	r2, [sp, #16]
    cb2a:	9303      	str	r3, [sp, #12]
    cb2c:	4603      	mov	r3, r0
    cb2e:	f88d 3017 	strb.w	r3, [sp, #23]
    cb32:	460b      	mov	r3, r1
    cb34:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    cb38:	2301      	movs	r3, #1
    cb3a:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cb3c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cb40:	4a1c      	ldr	r2, [pc, #112]	; (cbb4 <FlexCAN_Ip_Send+0x90>)
    cb42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb46:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cb48:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cb4c:	4a1a      	ldr	r2, [pc, #104]	; (cbb8 <FlexCAN_Ip_Send+0x94>)
    cb4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb52:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    cb54:	9808      	ldr	r0, [sp, #32]
    cb56:	f7ff f8f4 	bl	bd42 <FlexCAN_IsListenOnlyModeEnabled>
    cb5a:	4603      	mov	r3, r0
    cb5c:	f083 0301 	eor.w	r3, r3, #1
    cb60:	b2db      	uxtb	r3, r3
    cb62:	2b00      	cmp	r3, #0
    cb64:	d021      	beq.n	cbaa <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    cb66:	f89d 1016 	ldrb.w	r1, [sp, #22]
    cb6a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    cb6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb70:	9300      	str	r3, [sp, #0]
    cb72:	9b03      	ldr	r3, [sp, #12]
    cb74:	9a04      	ldr	r2, [sp, #16]
    cb76:	f7ff fb4b 	bl	c210 <FlexCAN_StartSendData>
    cb7a:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    cb7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb7e:	2b00      	cmp	r3, #0
    cb80:	d113      	bne.n	cbaa <FlexCAN_Ip_Send+0x86>
    cb82:	9b04      	ldr	r3, [sp, #16]
    cb84:	7b1b      	ldrb	r3, [r3, #12]
    cb86:	f083 0301 	eor.w	r3, r3, #1
    cb8a:	b2db      	uxtb	r3, r3
    cb8c:	2b00      	cmp	r3, #0
    cb8e:	d00c      	beq.n	cbaa <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cb90:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cb94:	9b07      	ldr	r3, [sp, #28]
    cb96:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cb9a:	f89d 1017 	ldrb.w	r1, [sp, #23]
    cb9e:	9300      	str	r3, [sp, #0]
    cba0:	2301      	movs	r3, #1
    cba2:	9808      	ldr	r0, [sp, #32]
    cba4:	f002 f9b6 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
    cba8:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    cbaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cbac:	4618      	mov	r0, r3
    cbae:	b00b      	add	sp, #44	; 0x2c
    cbb0:	f85d fb04 	ldr.w	pc, [sp], #4
    cbb4:	00018554 	.word	0x00018554
    cbb8:	1fff935c 	.word	0x1fff935c

0000cbbc <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    cbbc:	b500      	push	{lr}
    cbbe:	b08b      	sub	sp, #44	; 0x2c
    cbc0:	9202      	str	r2, [sp, #8]
    cbc2:	9301      	str	r3, [sp, #4]
    cbc4:	4603      	mov	r3, r0
    cbc6:	f88d 300f 	strb.w	r3, [sp, #15]
    cbca:	460b      	mov	r3, r1
    cbcc:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    cbd0:	2300      	movs	r3, #0
    cbd2:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cbd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cbd8:	4a19      	ldr	r2, [pc, #100]	; (cc40 <FlexCAN_Ip_ConfigRxMb+0x84>)
    cbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbde:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    cbe0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cbe4:	4619      	mov	r1, r3
    cbe6:	9808      	ldr	r0, [sp, #32]
    cbe8:	f7fe ff2c 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    cbec:	9b02      	ldr	r3, [sp, #8]
    cbee:	685b      	ldr	r3, [r3, #4]
    cbf0:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    cbf2:	9b02      	ldr	r3, [sp, #8]
    cbf4:	681b      	ldr	r3, [r3, #0]
    cbf6:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    cbf8:	9b02      	ldr	r3, [sp, #8]
    cbfa:	7a1b      	ldrb	r3, [r3, #8]
    cbfc:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    cc00:	230f      	movs	r3, #15
    cc02:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cc04:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cc08:	aa04      	add	r2, sp, #16
    cc0a:	9b01      	ldr	r3, [sp, #4]
    cc0c:	9808      	ldr	r0, [sp, #32]
    cc0e:	f002 fa25 	bl	f05c <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    cc12:	2300      	movs	r3, #0
    cc14:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cc16:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cc1a:	aa04      	add	r2, sp, #16
    cc1c:	9b01      	ldr	r3, [sp, #4]
    cc1e:	9808      	ldr	r0, [sp, #32]
    cc20:	f002 fa1c 	bl	f05c <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    cc24:	2304      	movs	r3, #4
    cc26:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cc28:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cc2c:	aa04      	add	r2, sp, #16
    cc2e:	9b01      	ldr	r3, [sp, #4]
    cc30:	9808      	ldr	r0, [sp, #32]
    cc32:	f002 fa13 	bl	f05c <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    cc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cc38:	4618      	mov	r0, r3
    cc3a:	b00b      	add	sp, #44	; 0x2c
    cc3c:	f85d fb04 	ldr.w	pc, [sp], #4
    cc40:	00018554 	.word	0x00018554

0000cc44 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    cc44:	b500      	push	{lr}
    cc46:	b089      	sub	sp, #36	; 0x24
    cc48:	9202      	str	r2, [sp, #8]
    cc4a:	461a      	mov	r2, r3
    cc4c:	4603      	mov	r3, r0
    cc4e:	f88d 300f 	strb.w	r3, [sp, #15]
    cc52:	460b      	mov	r3, r1
    cc54:	f88d 300e 	strb.w	r3, [sp, #14]
    cc58:	4613      	mov	r3, r2
    cc5a:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cc5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc62:	4a18      	ldr	r2, [pc, #96]	; (ccc4 <FlexCAN_Ip_Receive+0x80>)
    cc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc68:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cc6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc6e:	4a16      	ldr	r2, [pc, #88]	; (ccc8 <FlexCAN_Ip_Receive+0x84>)
    cc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc74:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    cc76:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cc7a:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cc7e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cc82:	9a02      	ldr	r2, [sp, #8]
    cc84:	f7ff fa86 	bl	c194 <FlexCAN_StartRxMessageBufferData>
    cc88:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    cc8a:	9b07      	ldr	r3, [sp, #28]
    cc8c:	2b00      	cmp	r3, #0
    cc8e:	d113      	bne.n	ccb8 <FlexCAN_Ip_Receive+0x74>
    cc90:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cc94:	f083 0301 	eor.w	r3, r3, #1
    cc98:	b2db      	uxtb	r3, r3
    cc9a:	2b00      	cmp	r3, #0
    cc9c:	d00c      	beq.n	ccb8 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cc9e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cca2:	9b05      	ldr	r3, [sp, #20]
    cca4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cca8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ccac:	9300      	str	r3, [sp, #0]
    ccae:	2301      	movs	r3, #1
    ccb0:	9806      	ldr	r0, [sp, #24]
    ccb2:	f002 f92f 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
    ccb6:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    ccb8:	9b07      	ldr	r3, [sp, #28]
}
    ccba:	4618      	mov	r0, r3
    ccbc:	b009      	add	sp, #36	; 0x24
    ccbe:	f85d fb04 	ldr.w	pc, [sp], #4
    ccc2:	bf00      	nop
    ccc4:	00018554 	.word	0x00018554
    ccc8:	1fff935c 	.word	0x1fff935c

0000cccc <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    cccc:	b500      	push	{lr}
    ccce:	b08b      	sub	sp, #44	; 0x2c
    ccd0:	9202      	str	r2, [sp, #8]
    ccd2:	461a      	mov	r2, r3
    ccd4:	4603      	mov	r3, r0
    ccd6:	f88d 300f 	strb.w	r3, [sp, #15]
    ccda:	460b      	mov	r3, r1
    ccdc:	f88d 300e 	strb.w	r3, [sp, #14]
    cce0:	4613      	mov	r3, r2
    cce2:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    cce6:	2300      	movs	r3, #0
    cce8:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    ccea:	2300      	movs	r3, #0
    ccec:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ccee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ccf4:	fb02 f303 	mul.w	r3, r2, r3
    ccf8:	2100      	movs	r1, #0
    ccfa:	4618      	mov	r0, r3
    ccfc:	f7f5 f8da 	bl	1eb4 <OsIf_MicrosToTicks>
    cd00:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cd02:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd06:	4a4c      	ldr	r2, [pc, #304]	; (ce38 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    cd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd0c:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cd0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd12:	4a4a      	ldr	r2, [pc, #296]	; (ce3c <FlexCAN_Ip_ReceiveBlocking+0x170>)
    cd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd18:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    cd1a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd1e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cd22:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cd26:	9a02      	ldr	r2, [sp, #8]
    cd28:	f7ff fa34 	bl	c194 <FlexCAN_StartRxMessageBufferData>
    cd2c:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    cd2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd30:	2b00      	cmp	r3, #0
    cd32:	d113      	bne.n	cd5c <FlexCAN_Ip_ReceiveBlocking+0x90>
    cd34:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd38:	f083 0301 	eor.w	r3, r3, #1
    cd3c:	b2db      	uxtb	r3, r3
    cd3e:	2b00      	cmp	r3, #0
    cd40:	d00c      	beq.n	cd5c <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cd42:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cd46:	9b06      	ldr	r3, [sp, #24]
    cd48:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cd4c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cd50:	9300      	str	r3, [sp, #0]
    cd52:	2301      	movs	r3, #1
    cd54:	9805      	ldr	r0, [sp, #20]
    cd56:	f002 f8dd 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
    cd5a:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    cd5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd5e:	2b00      	cmp	r3, #0
    cd60:	d133      	bne.n	cdca <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cd62:	2000      	movs	r0, #0
    cd64:	f7f5 f85a 	bl	1e1c <OsIf_GetCounter>
    cd68:	4603      	mov	r3, r0
    cd6a:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    cd6c:	e024      	b.n	cdb8 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    cd6e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd72:	2b00      	cmp	r3, #0
    cd74:	d010      	beq.n	cd98 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    cd76:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cd7a:	4619      	mov	r1, r3
    cd7c:	9805      	ldr	r0, [sp, #20]
    cd7e:	f7fe fe74 	bl	ba6a <FlexCAN_GetBuffStatusFlag>
    cd82:	4603      	mov	r3, r0
    cd84:	2b00      	cmp	r3, #0
    cd86:	d007      	beq.n	cd98 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    cd88:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cd8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd90:	4611      	mov	r1, r2
    cd92:	4618      	mov	r0, r3
    cd94:	f7ff fb20 	bl	c3d8 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cd98:	ab04      	add	r3, sp, #16
    cd9a:	2100      	movs	r1, #0
    cd9c:	4618      	mov	r0, r3
    cd9e:	f7f5 f856 	bl	1e4e <OsIf_GetElapsed>
    cda2:	4602      	mov	r2, r0
    cda4:	9b08      	ldr	r3, [sp, #32]
    cda6:	4413      	add	r3, r2
    cda8:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    cdaa:	9a08      	ldr	r2, [sp, #32]
    cdac:	9b07      	ldr	r3, [sp, #28]
    cdae:	429a      	cmp	r2, r3
    cdb0:	d302      	bcc.n	cdb8 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    cdb2:	2303      	movs	r3, #3
    cdb4:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    cdb6:	e008      	b.n	cdca <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    cdb8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cdbc:	9a06      	ldr	r2, [sp, #24]
    cdbe:	011b      	lsls	r3, r3, #4
    cdc0:	4413      	add	r3, r2
    cdc2:	3304      	adds	r3, #4
    cdc4:	681b      	ldr	r3, [r3, #0]
    cdc6:	2b01      	cmp	r3, #1
    cdc8:	d0d1      	beq.n	cd6e <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    cdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdcc:	2b03      	cmp	r3, #3
    cdce:	d112      	bne.n	cdf6 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    cdd0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cdd4:	f083 0301 	eor.w	r3, r3, #1
    cdd8:	b2db      	uxtb	r3, r3
    cdda:	2b00      	cmp	r3, #0
    cddc:	d00b      	beq.n	cdf6 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    cdde:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cde2:	9b06      	ldr	r3, [sp, #24]
    cde4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cde8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cdec:	9300      	str	r3, [sp, #0]
    cdee:	2300      	movs	r3, #0
    cdf0:	9805      	ldr	r0, [sp, #20]
    cdf2:	f002 f88f 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    cdf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdf8:	2b04      	cmp	r3, #4
    cdfa:	d018      	beq.n	ce2e <FlexCAN_Ip_ReceiveBlocking+0x162>
    cdfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdfe:	2b02      	cmp	r3, #2
    ce00:	d015      	beq.n	ce2e <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    ce02:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ce06:	9a06      	ldr	r2, [sp, #24]
    ce08:	011b      	lsls	r3, r3, #4
    ce0a:	4413      	add	r3, r2
    ce0c:	3304      	adds	r3, #4
    ce0e:	681b      	ldr	r3, [r3, #0]
    ce10:	2b00      	cmp	r3, #0
    ce12:	d102      	bne.n	ce1a <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    ce14:	2300      	movs	r3, #0
    ce16:	9309      	str	r3, [sp, #36]	; 0x24
    ce18:	e009      	b.n	ce2e <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    ce1a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ce1e:	9a06      	ldr	r2, [sp, #24]
    ce20:	011b      	lsls	r3, r3, #4
    ce22:	4413      	add	r3, r2
    ce24:	3304      	adds	r3, #4
    ce26:	2200      	movs	r2, #0
    ce28:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    ce2a:	2303      	movs	r3, #3
    ce2c:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    ce2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    ce30:	4618      	mov	r0, r3
    ce32:	b00b      	add	sp, #44	; 0x2c
    ce34:	f85d fb04 	ldr.w	pc, [sp], #4
    ce38:	1fff935c 	.word	0x1fff935c
    ce3c:	00018554 	.word	0x00018554

0000ce40 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    ce40:	b500      	push	{lr}
    ce42:	b085      	sub	sp, #20
    ce44:	4603      	mov	r3, r0
    ce46:	9100      	str	r1, [sp, #0]
    ce48:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ce4c:	2300      	movs	r3, #0
    ce4e:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    ce50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ce54:	9900      	ldr	r1, [sp, #0]
    ce56:	4618      	mov	r0, r3
    ce58:	f7ff fa5e 	bl	c318 <FlexCAN_StartRxMessageFifoData>
    ce5c:	9003      	str	r0, [sp, #12]
    }
    return result;
    ce5e:	9b03      	ldr	r3, [sp, #12]
}
    ce60:	4618      	mov	r0, r3
    ce62:	b005      	add	sp, #20
    ce64:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce68 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    ce68:	b500      	push	{lr}
    ce6a:	b087      	sub	sp, #28
    ce6c:	4603      	mov	r3, r0
    ce6e:	9102      	str	r1, [sp, #8]
    ce70:	9201      	str	r2, [sp, #4]
    ce72:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ce76:	2300      	movs	r3, #0
    ce78:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    ce7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce7e:	9902      	ldr	r1, [sp, #8]
    ce80:	4618      	mov	r0, r3
    ce82:	f7ff fa49 	bl	c318 <FlexCAN_StartRxMessageFifoData>
    ce86:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    ce88:	9b05      	ldr	r3, [sp, #20]
    ce8a:	2b00      	cmp	r3, #0
    ce8c:	d106      	bne.n	ce9c <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    ce8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce92:	9901      	ldr	r1, [sp, #4]
    ce94:	4618      	mov	r0, r3
    ce96:	f7ff f8e2 	bl	c05e <FlexCAN_ProccessLegacyRxFIFO>
    ce9a:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    ce9c:	9b05      	ldr	r3, [sp, #20]
}
    ce9e:	4618      	mov	r0, r3
    cea0:	b007      	add	sp, #28
    cea2:	f85d fb04 	ldr.w	pc, [sp], #4

0000cea6 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    cea6:	b500      	push	{lr}
    cea8:	b089      	sub	sp, #36	; 0x24
    ceaa:	4603      	mov	r3, r0
    ceac:	9102      	str	r1, [sp, #8]
    ceae:	9201      	str	r2, [sp, #4]
    ceb0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ceb4:	2300      	movs	r3, #0
    ceb6:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ceb8:	2300      	movs	r3, #0
    ceba:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    cebc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cec0:	4a1c      	ldr	r2, [pc, #112]	; (cf34 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    cec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cec6:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    cec8:	9805      	ldr	r0, [sp, #20]
    ceca:	f7fe fd61 	bl	b990 <FlexCAN_IsEnabled>
    cece:	4603      	mov	r3, r0
    ced0:	2b00      	cmp	r3, #0
    ced2:	bf14      	ite	ne
    ced4:	2301      	movne	r3, #1
    ced6:	2300      	moveq	r3, #0
    ced8:	b2db      	uxtb	r3, r3
    ceda:	f083 0301 	eor.w	r3, r3, #1
    cede:	b2db      	uxtb	r3, r3
    cee0:	f88d 3013 	strb.w	r3, [sp, #19]
    cee4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cee8:	f003 0301 	and.w	r3, r3, #1
    ceec:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    cef0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cef4:	2b00      	cmp	r3, #0
    cef6:	d003      	beq.n	cf00 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    cef8:	9805      	ldr	r0, [sp, #20]
    cefa:	f001 fd6b 	bl	e9d4 <FlexCAN_Enable>
    cefe:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    cf00:	9b07      	ldr	r3, [sp, #28]
    cf02:	2b00      	cmp	r3, #0
    cf04:	d104      	bne.n	cf10 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    cf06:	9a01      	ldr	r2, [sp, #4]
    cf08:	9902      	ldr	r1, [sp, #8]
    cf0a:	9805      	ldr	r0, [sp, #20]
    cf0c:	f002 fba5 	bl	f65a <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    cf10:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cf14:	2b00      	cmp	r3, #0
    cf16:	d008      	beq.n	cf2a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    cf18:	9805      	ldr	r0, [sp, #20]
    cf1a:	f001 fdd9 	bl	ead0 <FlexCAN_Disable>
    cf1e:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    cf20:	9b06      	ldr	r3, [sp, #24]
    cf22:	2b00      	cmp	r3, #0
    cf24:	d001      	beq.n	cf2a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    cf26:	9b06      	ldr	r3, [sp, #24]
    cf28:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    cf2a:	9b07      	ldr	r3, [sp, #28]
}
    cf2c:	4618      	mov	r0, r3
    cf2e:	b009      	add	sp, #36	; 0x24
    cf30:	f85d fb04 	ldr.w	pc, [sp], #4
    cf34:	00018554 	.word	0x00018554

0000cf38 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    cf38:	b500      	push	{lr}
    cf3a:	b08f      	sub	sp, #60	; 0x3c
    cf3c:	9204      	str	r2, [sp, #16]
    cf3e:	9303      	str	r3, [sp, #12]
    cf40:	4603      	mov	r3, r0
    cf42:	f88d 3017 	strb.w	r3, [sp, #23]
    cf46:	460b      	mov	r3, r1
    cf48:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cf4c:	2300      	movs	r3, #0
    cf4e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    cf50:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cf54:	4a27      	ldr	r2, [pc, #156]	; (cff4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    cf56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf5a:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    cf5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cf60:	4a25      	ldr	r2, [pc, #148]	; (cff8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    cf62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf66:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    cf68:	2300      	movs	r3, #0
    cf6a:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    cf6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf6e:	2b00      	cmp	r3, #0
    cf70:	d13a      	bne.n	cfe8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    cf72:	9b04      	ldr	r3, [sp, #16]
    cf74:	685b      	ldr	r3, [r3, #4]
    cf76:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    cf78:	9b04      	ldr	r3, [sp, #16]
    cf7a:	681b      	ldr	r3, [r3, #0]
    cf7c:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    cf7e:	230a      	movs	r3, #10
    cf80:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    cf82:	2300      	movs	r3, #0
    cf84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    cf88:	2300      	movs	r3, #0
    cf8a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    cf8e:	2300      	movs	r3, #0
    cf90:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    cf94:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cf98:	4619      	mov	r1, r3
    cf9a:	980c      	ldr	r0, [sp, #48]	; 0x30
    cf9c:	f7fe fd52 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    cfa0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cfa4:	4619      	mov	r1, r3
    cfa6:	980c      	ldr	r0, [sp, #48]	; 0x30
    cfa8:	f001 fc2c 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    cfac:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    cfae:	9b04      	ldr	r3, [sp, #16]
    cfb0:	7adb      	ldrb	r3, [r3, #11]
    cfb2:	a906      	add	r1, sp, #24
    cfb4:	9300      	str	r3, [sp, #0]
    cfb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfb8:	9a03      	ldr	r2, [sp, #12]
    cfba:	980a      	ldr	r0, [sp, #40]	; 0x28
    cfbc:	f002 f974 	bl	f2a8 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    cfc0:	9b04      	ldr	r3, [sp, #16]
    cfc2:	7b1b      	ldrb	r3, [r3, #12]
    cfc4:	f083 0301 	eor.w	r3, r3, #1
    cfc8:	b2db      	uxtb	r3, r3
    cfca:	2b00      	cmp	r3, #0
    cfcc:	d00c      	beq.n	cfe8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    cfce:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cfd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfd4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cfd8:	f89d 1017 	ldrb.w	r1, [sp, #23]
    cfdc:	9300      	str	r3, [sp, #0]
    cfde:	2301      	movs	r3, #1
    cfe0:	980c      	ldr	r0, [sp, #48]	; 0x30
    cfe2:	f001 ff97 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
    cfe6:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    cfe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    cfea:	4618      	mov	r0, r3
    cfec:	b00f      	add	sp, #60	; 0x3c
    cfee:	f85d fb04 	ldr.w	pc, [sp], #4
    cff2:	bf00      	nop
    cff4:	00018554 	.word	0x00018554
    cff8:	1fff935c 	.word	0x1fff935c

0000cffc <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    cffc:	b084      	sub	sp, #16
    cffe:	4603      	mov	r3, r0
    d000:	460a      	mov	r2, r1
    d002:	f88d 3007 	strb.w	r3, [sp, #7]
    d006:	4613      	mov	r3, r2
    d008:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d00c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d010:	4a0d      	ldr	r2, [pc, #52]	; (d048 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    d012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d016:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    d018:	2301      	movs	r3, #1
    d01a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    d01c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d020:	2b1f      	cmp	r3, #31
    d022:	d80d      	bhi.n	d040 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    d024:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d028:	9a02      	ldr	r2, [sp, #8]
    d02a:	011b      	lsls	r3, r3, #4
    d02c:	4413      	add	r3, r2
    d02e:	3304      	adds	r3, #4
    d030:	681b      	ldr	r3, [r3, #0]
    d032:	2b00      	cmp	r3, #0
    d034:	d102      	bne.n	d03c <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    d036:	2300      	movs	r3, #0
    d038:	9303      	str	r3, [sp, #12]
    d03a:	e001      	b.n	d040 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    d03c:	2302      	movs	r3, #2
    d03e:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    d040:	9b03      	ldr	r3, [sp, #12]
}
    d042:	4618      	mov	r0, r3
    d044:	b004      	add	sp, #16
    d046:	4770      	bx	lr
    d048:	1fff935c 	.word	0x1fff935c

0000d04c <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    d04c:	b500      	push	{lr}
    d04e:	b087      	sub	sp, #28
    d050:	4603      	mov	r3, r0
    d052:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d056:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d05a:	4a1d      	ldr	r2, [pc, #116]	; (d0d0 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    d05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d060:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d062:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d066:	4a1b      	ldr	r2, [pc, #108]	; (d0d4 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    d068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d06c:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    d06e:	9b04      	ldr	r3, [sp, #16]
    d070:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    d074:	2b00      	cmp	r3, #0
    d076:	d120      	bne.n	d0ba <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    d078:	9b04      	ldr	r3, [sp, #16]
    d07a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d07e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d082:	9300      	str	r3, [sp, #0]
    d084:	2300      	movs	r3, #0
    d086:	2205      	movs	r2, #5
    d088:	9805      	ldr	r0, [sp, #20]
    d08a:	f001 ff43 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    d08e:	9b04      	ldr	r3, [sp, #16]
    d090:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d094:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d098:	9300      	str	r3, [sp, #0]
    d09a:	2300      	movs	r3, #0
    d09c:	2206      	movs	r2, #6
    d09e:	9805      	ldr	r0, [sp, #20]
    d0a0:	f001 ff38 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    d0a4:	9b04      	ldr	r3, [sp, #16]
    d0a6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d0aa:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d0ae:	9300      	str	r3, [sp, #0]
    d0b0:	2300      	movs	r3, #0
    d0b2:	2207      	movs	r2, #7
    d0b4:	9805      	ldr	r0, [sp, #20]
    d0b6:	f001 ff2d 	bl	ef14 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    d0ba:	9b04      	ldr	r3, [sp, #16]
    d0bc:	2200      	movs	r2, #0
    d0be:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    d0c0:	9b04      	ldr	r3, [sp, #16]
    d0c2:	2200      	movs	r2, #0
    d0c4:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    d0c6:	bf00      	nop
    d0c8:	b007      	add	sp, #28
    d0ca:	f85d fb04 	ldr.w	pc, [sp], #4
    d0ce:	bf00      	nop
    d0d0:	00018554 	.word	0x00018554
    d0d4:	1fff935c 	.word	0x1fff935c

0000d0d8 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    d0d8:	b500      	push	{lr}
    d0da:	b08b      	sub	sp, #44	; 0x2c
    d0dc:	4603      	mov	r3, r0
    d0de:	9102      	str	r1, [sp, #8]
    d0e0:	9201      	str	r2, [sp, #4]
    d0e2:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    d0e6:	2300      	movs	r3, #0
    d0e8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    d0ea:	2300      	movs	r3, #0
    d0ec:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d0ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d0f2:	4a3f      	ldr	r2, [pc, #252]	; (d1f0 <FlexCAN_IRQHandler+0x118>)
    d0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0f8:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d0fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d0fe:	4a3d      	ldr	r2, [pc, #244]	; (d1f4 <FlexCAN_IRQHandler+0x11c>)
    d100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d104:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    d106:	9b01      	ldr	r3, [sp, #4]
    d108:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    d10a:	9b05      	ldr	r3, [sp, #20]
    d10c:	2b00      	cmp	r3, #0
    d10e:	d05c      	beq.n	d1ca <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d110:	9907      	ldr	r1, [sp, #28]
    d112:	9806      	ldr	r0, [sp, #24]
    d114:	f7fe fe47 	bl	bda6 <FlexCAN_GetMsgBuffIntStatusFlag>
    d118:	4603      	mov	r3, r0
    d11a:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d11c:	e008      	b.n	d130 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    d11e:	9b07      	ldr	r3, [sp, #28]
    d120:	3b01      	subs	r3, #1
    d122:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d124:	9907      	ldr	r1, [sp, #28]
    d126:	9806      	ldr	r0, [sp, #24]
    d128:	f7fe fe3d 	bl	bda6 <FlexCAN_GetMsgBuffIntStatusFlag>
    d12c:	4603      	mov	r3, r0
    d12e:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d130:	9b08      	ldr	r3, [sp, #32]
    d132:	2b00      	cmp	r3, #0
    d134:	d103      	bne.n	d13e <FlexCAN_IRQHandler+0x66>
    d136:	9a07      	ldr	r2, [sp, #28]
    d138:	9b02      	ldr	r3, [sp, #8]
    d13a:	429a      	cmp	r2, r3
    d13c:	d8ef      	bhi.n	d11e <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    d13e:	9b08      	ldr	r3, [sp, #32]
    d140:	2b00      	cmp	r3, #0
    d142:	d050      	beq.n	d1e6 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    d144:	9b07      	ldr	r3, [sp, #28]
    d146:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d148:	9b05      	ldr	r3, [sp, #20]
    d14a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d14e:	2b00      	cmp	r3, #0
    d150:	d00b      	beq.n	d16a <FlexCAN_IRQHandler+0x92>
    d152:	9b07      	ldr	r3, [sp, #28]
    d154:	2b07      	cmp	r3, #7
    d156:	d808      	bhi.n	d16a <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    d158:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d15c:	9907      	ldr	r1, [sp, #28]
    d15e:	4618      	mov	r0, r3
    d160:	f7ff fac2 	bl	c6e8 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    d164:	2300      	movs	r3, #0
    d166:	9309      	str	r3, [sp, #36]	; 0x24
    d168:	e00d      	b.n	d186 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    d16a:	9a05      	ldr	r2, [sp, #20]
    d16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d16e:	011b      	lsls	r3, r3, #4
    d170:	4413      	add	r3, r2
    d172:	3304      	adds	r3, #4
    d174:	681b      	ldr	r3, [r3, #0]
    d176:	2b01      	cmp	r3, #1
    d178:	d105      	bne.n	d186 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d17a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d17e:	9907      	ldr	r1, [sp, #28]
    d180:	4618      	mov	r0, r3
    d182:	f7ff f929 	bl	c3d8 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    d186:	9a05      	ldr	r2, [sp, #20]
    d188:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d18a:	011b      	lsls	r3, r3, #4
    d18c:	4413      	add	r3, r2
    d18e:	3304      	adds	r3, #4
    d190:	681b      	ldr	r3, [r3, #0]
    d192:	2b02      	cmp	r3, #2
    d194:	d105      	bne.n	d1a2 <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    d196:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d19a:	9907      	ldr	r1, [sp, #28]
    d19c:	4618      	mov	r0, r3
    d19e:	f7ff fa09 	bl	c5b4 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    d1a2:	9907      	ldr	r1, [sp, #28]
    d1a4:	9806      	ldr	r0, [sp, #24]
    d1a6:	f7fe fdfe 	bl	bda6 <FlexCAN_GetMsgBuffIntStatusFlag>
    d1aa:	4603      	mov	r3, r0
    d1ac:	2b00      	cmp	r3, #0
    d1ae:	d01a      	beq.n	d1e6 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    d1b0:	9a05      	ldr	r2, [sp, #20]
    d1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d1b4:	011b      	lsls	r3, r3, #4
    d1b6:	4413      	add	r3, r2
    d1b8:	3304      	adds	r3, #4
    d1ba:	681b      	ldr	r3, [r3, #0]
    d1bc:	2b00      	cmp	r3, #0
    d1be:	d112      	bne.n	d1e6 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d1c0:	9907      	ldr	r1, [sp, #28]
    d1c2:	9806      	ldr	r0, [sp, #24]
    d1c4:	f7fe fc3e 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    d1c8:	e00d      	b.n	d1e6 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d1ca:	9b02      	ldr	r3, [sp, #8]
    d1cc:	9307      	str	r3, [sp, #28]
    d1ce:	e006      	b.n	d1de <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d1d0:	9907      	ldr	r1, [sp, #28]
    d1d2:	9806      	ldr	r0, [sp, #24]
    d1d4:	f7fe fc36 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d1d8:	9b07      	ldr	r3, [sp, #28]
    d1da:	3301      	adds	r3, #1
    d1dc:	9307      	str	r3, [sp, #28]
    d1de:	9a07      	ldr	r2, [sp, #28]
    d1e0:	9b01      	ldr	r3, [sp, #4]
    d1e2:	429a      	cmp	r2, r3
    d1e4:	d9f4      	bls.n	d1d0 <FlexCAN_IRQHandler+0xf8>
}
    d1e6:	bf00      	nop
    d1e8:	b00b      	add	sp, #44	; 0x2c
    d1ea:	f85d fb04 	ldr.w	pc, [sp], #4
    d1ee:	bf00      	nop
    d1f0:	00018554 	.word	0x00018554
    d1f4:	1fff935c 	.word	0x1fff935c

0000d1f8 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    d1f8:	b084      	sub	sp, #16
    d1fa:	4603      	mov	r3, r0
    d1fc:	9100      	str	r1, [sp, #0]
    d1fe:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d202:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d206:	4a05      	ldr	r2, [pc, #20]	; (d21c <FlexCAN_Ip_ClearErrorStatus+0x24>)
    d208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d20c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    d20e:	9b03      	ldr	r3, [sp, #12]
    d210:	9a00      	ldr	r2, [sp, #0]
    d212:	621a      	str	r2, [r3, #32]
}
    d214:	bf00      	nop
    d216:	b004      	add	sp, #16
    d218:	4770      	bx	lr
    d21a:	bf00      	nop
    d21c:	00018554 	.word	0x00018554

0000d220 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    d220:	b084      	sub	sp, #16
    d222:	4603      	mov	r3, r0
    d224:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d228:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d22c:	4a04      	ldr	r2, [pc, #16]	; (d240 <FlexCAN_Ip_GetErrorStatus+0x20>)
    d22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d232:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    d234:	9b03      	ldr	r3, [sp, #12]
    d236:	6a1b      	ldr	r3, [r3, #32]
}
    d238:	4618      	mov	r0, r3
    d23a:	b004      	add	sp, #16
    d23c:	4770      	bx	lr
    d23e:	bf00      	nop
    d240:	00018554 	.word	0x00018554

0000d244 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    d244:	b084      	sub	sp, #16
    d246:	4603      	mov	r3, r0
    d248:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d24c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d250:	4a04      	ldr	r2, [pc, #16]	; (d264 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    d252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d256:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    d258:	9b03      	ldr	r3, [sp, #12]
    d25a:	69db      	ldr	r3, [r3, #28]
    d25c:	b2db      	uxtb	r3, r3
}
    d25e:	4618      	mov	r0, r3
    d260:	b004      	add	sp, #16
    d262:	4770      	bx	lr
    d264:	00018554 	.word	0x00018554

0000d268 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    d268:	b084      	sub	sp, #16
    d26a:	4603      	mov	r3, r0
    d26c:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d270:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d274:	4a05      	ldr	r2, [pc, #20]	; (d28c <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    d276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d27a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    d27c:	9b03      	ldr	r3, [sp, #12]
    d27e:	69db      	ldr	r3, [r3, #28]
    d280:	0a1b      	lsrs	r3, r3, #8
    d282:	b2db      	uxtb	r3, r3
}
    d284:	4618      	mov	r0, r3
    d286:	b004      	add	sp, #16
    d288:	4770      	bx	lr
    d28a:	bf00      	nop
    d28c:	00018554 	.word	0x00018554

0000d290 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    d290:	b510      	push	{r4, lr}
    d292:	b086      	sub	sp, #24
    d294:	4603      	mov	r3, r0
    d296:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d29a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d29e:	4a29      	ldr	r2, [pc, #164]	; (d344 <FlexCAN_Error_IRQHandler+0xb4>)
    d2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2a4:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d2a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2aa:	4a27      	ldr	r2, [pc, #156]	; (d348 <FlexCAN_Error_IRQHandler+0xb8>)
    d2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2b0:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d2b2:	2300      	movs	r3, #0
    d2b4:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    d2b6:	9b03      	ldr	r3, [sp, #12]
    d2b8:	2b00      	cmp	r3, #0
    d2ba:	d03d      	beq.n	d338 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    d2bc:	9b04      	ldr	r3, [sp, #16]
    d2be:	6a1b      	ldr	r3, [r3, #32]
    d2c0:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    d2c2:	9b05      	ldr	r3, [sp, #20]
    d2c4:	f003 0302 	and.w	r3, r3, #2
    d2c8:	2b00      	cmp	r3, #0
    d2ca:	d019      	beq.n	d300 <FlexCAN_Error_IRQHandler+0x70>
    d2cc:	9b04      	ldr	r3, [sp, #16]
    d2ce:	685b      	ldr	r3, [r3, #4]
    d2d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d013      	beq.n	d300 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    d2d8:	9b04      	ldr	r3, [sp, #16]
    d2da:	2202      	movs	r2, #2
    d2dc:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d2de:	9b03      	ldr	r3, [sp, #12]
    d2e0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d00b      	beq.n	d300 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    d2e8:	9b03      	ldr	r3, [sp, #12]
    d2ea:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d2ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d2f2:	9b03      	ldr	r3, [sp, #12]
    d2f4:	9a05      	ldr	r2, [sp, #20]
    d2f6:	2105      	movs	r1, #5
    d2f8:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    d2fa:	9b04      	ldr	r3, [sp, #16]
    d2fc:	6a1b      	ldr	r3, [r3, #32]
    d2fe:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    d300:	9b05      	ldr	r3, [sp, #20]
    d302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    d306:	2b00      	cmp	r3, #0
    d308:	d019      	beq.n	d33e <FlexCAN_Error_IRQHandler+0xae>
    d30a:	9b04      	ldr	r3, [sp, #16]
    d30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d30e:	2b00      	cmp	r3, #0
    d310:	da15      	bge.n	d33e <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    d312:	9b04      	ldr	r3, [sp, #16]
    d314:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    d318:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d31a:	9b03      	ldr	r3, [sp, #12]
    d31c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d320:	2b00      	cmp	r3, #0
    d322:	d00c      	beq.n	d33e <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    d324:	9b03      	ldr	r3, [sp, #12]
    d326:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d32a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d32e:	9b03      	ldr	r3, [sp, #12]
    d330:	9a05      	ldr	r2, [sp, #20]
    d332:	2106      	movs	r1, #6
    d334:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    d336:	e002      	b.n	d33e <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    d338:	9b04      	ldr	r3, [sp, #16]
    d33a:	4a04      	ldr	r2, [pc, #16]	; (d34c <FlexCAN_Error_IRQHandler+0xbc>)
    d33c:	621a      	str	r2, [r3, #32]
}
    d33e:	bf00      	nop
    d340:	b006      	add	sp, #24
    d342:	bd10      	pop	{r4, pc}
    d344:	00018554 	.word	0x00018554
    d348:	1fff935c 	.word	0x1fff935c
    d34c:	00300002 	.word	0x00300002

0000d350 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    d350:	b510      	push	{r4, lr}
    d352:	b086      	sub	sp, #24
    d354:	4603      	mov	r3, r0
    d356:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d35a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d35e:	4a3a      	ldr	r2, [pc, #232]	; (d448 <FlexCAN_BusOff_IRQHandler+0xf8>)
    d360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d364:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d366:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d36a:	4a38      	ldr	r2, [pc, #224]	; (d44c <FlexCAN_BusOff_IRQHandler+0xfc>)
    d36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d370:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d372:	2300      	movs	r3, #0
    d374:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    d376:	9b03      	ldr	r3, [sp, #12]
    d378:	2b00      	cmp	r3, #0
    d37a:	d05f      	beq.n	d43c <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    d37c:	9b04      	ldr	r3, [sp, #16]
    d37e:	6a1b      	ldr	r3, [r3, #32]
    d380:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    d382:	9b05      	ldr	r3, [sp, #20]
    d384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d388:	2b00      	cmp	r3, #0
    d38a:	d01a      	beq.n	d3c2 <FlexCAN_BusOff_IRQHandler+0x72>
    d38c:	9b04      	ldr	r3, [sp, #16]
    d38e:	685b      	ldr	r3, [r3, #4]
    d390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    d394:	2b00      	cmp	r3, #0
    d396:	d014      	beq.n	d3c2 <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    d398:	9b04      	ldr	r3, [sp, #16]
    d39a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    d39e:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d3a0:	9b03      	ldr	r3, [sp, #12]
    d3a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d3a6:	2b00      	cmp	r3, #0
    d3a8:	d00b      	beq.n	d3c2 <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    d3aa:	9b03      	ldr	r3, [sp, #12]
    d3ac:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d3b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d3b4:	9b03      	ldr	r3, [sp, #12]
    d3b6:	9a05      	ldr	r2, [sp, #20]
    d3b8:	2109      	movs	r1, #9
    d3ba:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d3bc:	9b04      	ldr	r3, [sp, #16]
    d3be:	6a1b      	ldr	r3, [r3, #32]
    d3c0:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    d3c2:	9b05      	ldr	r3, [sp, #20]
    d3c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    d3c8:	2b00      	cmp	r3, #0
    d3ca:	d01a      	beq.n	d402 <FlexCAN_BusOff_IRQHandler+0xb2>
    d3cc:	9b04      	ldr	r3, [sp, #16]
    d3ce:	685b      	ldr	r3, [r3, #4]
    d3d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d3d4:	2b00      	cmp	r3, #0
    d3d6:	d014      	beq.n	d402 <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    d3d8:	9b04      	ldr	r3, [sp, #16]
    d3da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    d3de:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d3e0:	9b03      	ldr	r3, [sp, #12]
    d3e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d3e6:	2b00      	cmp	r3, #0
    d3e8:	d00b      	beq.n	d402 <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    d3ea:	9b03      	ldr	r3, [sp, #12]
    d3ec:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d3f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d3f4:	9b03      	ldr	r3, [sp, #12]
    d3f6:	9a05      	ldr	r2, [sp, #20]
    d3f8:	2108      	movs	r1, #8
    d3fa:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d3fc:	9b04      	ldr	r3, [sp, #16]
    d3fe:	6a1b      	ldr	r3, [r3, #32]
    d400:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    d402:	9b05      	ldr	r3, [sp, #20]
    d404:	f003 0304 	and.w	r3, r3, #4
    d408:	2b00      	cmp	r3, #0
    d40a:	d01a      	beq.n	d442 <FlexCAN_BusOff_IRQHandler+0xf2>
    d40c:	9b04      	ldr	r3, [sp, #16]
    d40e:	685b      	ldr	r3, [r3, #4]
    d410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d414:	2b00      	cmp	r3, #0
    d416:	d014      	beq.n	d442 <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    d418:	9b04      	ldr	r3, [sp, #16]
    d41a:	2204      	movs	r2, #4
    d41c:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d41e:	9b03      	ldr	r3, [sp, #12]
    d420:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d424:	2b00      	cmp	r3, #0
    d426:	d00c      	beq.n	d442 <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    d428:	9b03      	ldr	r3, [sp, #12]
    d42a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d42e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d432:	9b03      	ldr	r3, [sp, #12]
    d434:	9a05      	ldr	r2, [sp, #20]
    d436:	2107      	movs	r1, #7
    d438:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    d43a:	e002      	b.n	d442 <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    d43c:	9b04      	ldr	r3, [sp, #16]
    d43e:	4a04      	ldr	r2, [pc, #16]	; (d450 <FlexCAN_BusOff_IRQHandler+0x100>)
    d440:	621a      	str	r2, [r3, #32]
}
    d442:	bf00      	nop
    d444:	b006      	add	sp, #24
    d446:	bd10      	pop	{r4, pc}
    d448:	00018554 	.word	0x00018554
    d44c:	1fff935c 	.word	0x1fff935c
    d450:	000b0004 	.word	0x000b0004

0000d454 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    d454:	b500      	push	{lr}
    d456:	b091      	sub	sp, #68	; 0x44
    d458:	9204      	str	r2, [sp, #16]
    d45a:	9303      	str	r3, [sp, #12]
    d45c:	4603      	mov	r3, r0
    d45e:	f88d 3017 	strb.w	r3, [sp, #23]
    d462:	460b      	mov	r3, r1
    d464:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d468:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d46c:	4a5f      	ldr	r2, [pc, #380]	; (d5ec <FlexCAN_Ip_SendBlocking+0x198>)
    d46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d472:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d474:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d478:	4a5d      	ldr	r2, [pc, #372]	; (d5f0 <FlexCAN_Ip_SendBlocking+0x19c>)
    d47a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d47e:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    d480:	2300      	movs	r3, #0
    d482:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    d484:	2300      	movs	r3, #0
    d486:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d488:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d48a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d48e:	fb02 f303 	mul.w	r3, r2, r3
    d492:	2100      	movs	r1, #0
    d494:	4618      	mov	r0, r3
    d496:	f7f4 fd0d 	bl	1eb4 <OsIf_MicrosToTicks>
    d49a:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    d49c:	2300      	movs	r3, #0
    d49e:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    d4a0:	2300      	movs	r3, #0
    d4a2:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    d4a4:	2300      	movs	r3, #0
    d4a6:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    d4a8:	f89d 1016 	ldrb.w	r1, [sp, #22]
    d4ac:	f89d 0017 	ldrb.w	r0, [sp, #23]
    d4b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d4b2:	9300      	str	r3, [sp, #0]
    d4b4:	9b03      	ldr	r3, [sp, #12]
    d4b6:	9a04      	ldr	r2, [sp, #16]
    d4b8:	f7fe feaa 	bl	c210 <FlexCAN_StartSendData>
    d4bc:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    d4be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d4c0:	2b00      	cmp	r3, #0
    d4c2:	f040 808d 	bne.w	d5e0 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d4c6:	2000      	movs	r0, #0
    d4c8:	f7f4 fca8 	bl	1e1c <OsIf_GetCounter>
    d4cc:	4603      	mov	r3, r0
    d4ce:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d4d0:	e00f      	b.n	d4f2 <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d4d2:	ab07      	add	r3, sp, #28
    d4d4:	2100      	movs	r1, #0
    d4d6:	4618      	mov	r0, r3
    d4d8:	f7f4 fcb9 	bl	1e4e <OsIf_GetElapsed>
    d4dc:	4602      	mov	r2, r0
    d4de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d4e0:	4413      	add	r3, r2
    d4e2:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    d4e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d4e8:	429a      	cmp	r2, r3
    d4ea:	d302      	bcc.n	d4f2 <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    d4ec:	2303      	movs	r3, #3
    d4ee:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    d4f0:	e008      	b.n	d504 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d4f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d4f6:	4619      	mov	r1, r3
    d4f8:	980d      	ldr	r0, [sp, #52]	; 0x34
    d4fa:	f7fe fab6 	bl	ba6a <FlexCAN_GetBuffStatusFlag>
    d4fe:	4603      	mov	r3, r0
    d500:	2b01      	cmp	r3, #1
    d502:	d1e6      	bne.n	d4d2 <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    d504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d506:	2b03      	cmp	r3, #3
    d508:	d15c      	bne.n	d5c4 <FlexCAN_Ip_SendBlocking+0x170>
    d50a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d50e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d510:	011b      	lsls	r3, r3, #4
    d512:	4413      	add	r3, r2
    d514:	3304      	adds	r3, #4
    d516:	681b      	ldr	r3, [r3, #0]
    d518:	2b00      	cmp	r3, #0
    d51a:	d053      	beq.n	d5c4 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d51c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d520:	4619      	mov	r1, r3
    d522:	980d      	ldr	r0, [sp, #52]	; 0x34
    d524:	f7fe fa8e 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    d528:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d52c:	4619      	mov	r1, r3
    d52e:	980d      	ldr	r0, [sp, #52]	; 0x34
    d530:	f001 f968 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    d534:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    d536:	9b08      	ldr	r3, [sp, #32]
    d538:	681b      	ldr	r3, [r3, #0]
    d53a:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    d53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d53e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    d542:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    d544:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d546:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    d54a:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    d54c:	9b08      	ldr	r3, [sp, #32]
    d54e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d550:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d552:	2100      	movs	r1, #0
    d554:	4827      	ldr	r0, [pc, #156]	; (d5f4 <FlexCAN_Ip_SendBlocking+0x1a0>)
    d556:	f7f4 fcad 	bl	1eb4 <OsIf_MicrosToTicks>
    d55a:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d55c:	2000      	movs	r0, #0
    d55e:	f7f4 fc5d 	bl	1e1c <OsIf_GetCounter>
    d562:	4603      	mov	r3, r0
    d564:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    d566:	2300      	movs	r3, #0
    d568:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d56a:	e00f      	b.n	d58c <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d56c:	ab07      	add	r3, sp, #28
    d56e:	2100      	movs	r1, #0
    d570:	4618      	mov	r0, r3
    d572:	f7f4 fc6c 	bl	1e4e <OsIf_GetElapsed>
    d576:	4602      	mov	r2, r0
    d578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d57a:	4413      	add	r3, r2
    d57c:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    d57e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d582:	429a      	cmp	r2, r3
    d584:	d302      	bcc.n	d58c <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    d586:	2303      	movs	r3, #3
    d588:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    d58a:	e008      	b.n	d59e <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d58c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d590:	4619      	mov	r1, r3
    d592:	980d      	ldr	r0, [sp, #52]	; 0x34
    d594:	f7fe fa69 	bl	ba6a <FlexCAN_GetBuffStatusFlag>
    d598:	4603      	mov	r3, r0
    d59a:	2b00      	cmp	r3, #0
    d59c:	d0e6      	beq.n	d56c <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    d59e:	9b08      	ldr	r3, [sp, #32]
    d5a0:	681b      	ldr	r3, [r3, #0]
    d5a2:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d5a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5a6:	0e1b      	lsrs	r3, r3, #24
    d5a8:	f003 030f 	and.w	r3, r3, #15
    d5ac:	2b08      	cmp	r3, #8
    d5ae:	d101      	bne.n	d5b4 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    d5b0:	2300      	movs	r3, #0
    d5b2:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5b6:	0e1b      	lsrs	r3, r3, #24
    d5b8:	f003 030f 	and.w	r3, r3, #15
    d5bc:	2b09      	cmp	r3, #9
    d5be:	d101      	bne.n	d5c4 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    d5c0:	2303      	movs	r3, #3
    d5c2:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d5c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5c8:	4619      	mov	r1, r3
    d5ca:	980d      	ldr	r0, [sp, #52]	; 0x34
    d5cc:	f7fe fa3a 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    d5d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d5d6:	011b      	lsls	r3, r3, #4
    d5d8:	4413      	add	r3, r2
    d5da:	3304      	adds	r3, #4
    d5dc:	2200      	movs	r2, #0
    d5de:	601a      	str	r2, [r3, #0]
    }
    return result;
    d5e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    d5e2:	4618      	mov	r0, r3
    d5e4:	b011      	add	sp, #68	; 0x44
    d5e6:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ea:	bf00      	nop
    d5ec:	00018554 	.word	0x00018554
    d5f0:	1fff935c 	.word	0x1fff935c
    d5f4:	000f4240 	.word	0x000f4240

0000d5f8 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d5f8:	b500      	push	{lr}
    d5fa:	b087      	sub	sp, #28
    d5fc:	4603      	mov	r3, r0
    d5fe:	9100      	str	r1, [sp, #0]
    d600:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d604:	2300      	movs	r3, #0
    d606:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d608:	2300      	movs	r3, #0
    d60a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d60c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d610:	4a1c      	ldr	r2, [pc, #112]	; (d684 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    d612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d616:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d618:	9803      	ldr	r0, [sp, #12]
    d61a:	f7fe f9b9 	bl	b990 <FlexCAN_IsEnabled>
    d61e:	4603      	mov	r3, r0
    d620:	2b00      	cmp	r3, #0
    d622:	bf14      	ite	ne
    d624:	2301      	movne	r3, #1
    d626:	2300      	moveq	r3, #0
    d628:	b2db      	uxtb	r3, r3
    d62a:	f083 0301 	eor.w	r3, r3, #1
    d62e:	b2db      	uxtb	r3, r3
    d630:	f88d 300b 	strb.w	r3, [sp, #11]
    d634:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d638:	f003 0301 	and.w	r3, r3, #1
    d63c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d640:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d644:	2b00      	cmp	r3, #0
    d646:	d003      	beq.n	d650 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d648:	9803      	ldr	r0, [sp, #12]
    d64a:	f001 f9c3 	bl	e9d4 <FlexCAN_Enable>
    d64e:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d650:	9b05      	ldr	r3, [sp, #20]
    d652:	2b00      	cmp	r3, #0
    d654:	d103      	bne.n	d65e <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    d656:	9900      	ldr	r1, [sp, #0]
    d658:	9803      	ldr	r0, [sp, #12]
    d65a:	f7fe fbc3 	bl	bde4 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    d65e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d662:	2b00      	cmp	r3, #0
    d664:	d008      	beq.n	d678 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d666:	9803      	ldr	r0, [sp, #12]
    d668:	f001 fa32 	bl	ead0 <FlexCAN_Disable>
    d66c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d66e:	9b04      	ldr	r3, [sp, #16]
    d670:	2b00      	cmp	r3, #0
    d672:	d001      	beq.n	d678 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    d674:	9b04      	ldr	r3, [sp, #16]
    d676:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    d678:	9b05      	ldr	r3, [sp, #20]
}
    d67a:	4618      	mov	r0, r3
    d67c:	b007      	add	sp, #28
    d67e:	f85d fb04 	ldr.w	pc, [sp], #4
    d682:	bf00      	nop
    d684:	00018554 	.word	0x00018554

0000d688 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    d688:	b500      	push	{lr}
    d68a:	b085      	sub	sp, #20
    d68c:	4603      	mov	r3, r0
    d68e:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d692:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d696:	4a06      	ldr	r2, [pc, #24]	; (d6b0 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    d698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d69c:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    d69e:	9803      	ldr	r0, [sp, #12]
    d6a0:	f001 f94c 	bl	e93c <FlexCAN_EnterFreezeMode>
    d6a4:	4603      	mov	r3, r0
}
    d6a6:	4618      	mov	r0, r3
    d6a8:	b005      	add	sp, #20
    d6aa:	f85d fb04 	ldr.w	pc, [sp], #4
    d6ae:	bf00      	nop
    d6b0:	00018554 	.word	0x00018554

0000d6b4 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    d6b4:	b500      	push	{lr}
    d6b6:	b085      	sub	sp, #20
    d6b8:	4603      	mov	r3, r0
    d6ba:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d6be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6c2:	4a06      	ldr	r2, [pc, #24]	; (d6dc <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    d6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6c8:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    d6ca:	9803      	ldr	r0, [sp, #12]
    d6cc:	f001 f9be 	bl	ea4c <FlexCAN_ExitFreezeMode>
    d6d0:	4603      	mov	r3, r0
}
    d6d2:	4618      	mov	r0, r3
    d6d4:	b005      	add	sp, #20
    d6d6:	f85d fb04 	ldr.w	pc, [sp], #4
    d6da:	bf00      	nop
    d6dc:	00018554 	.word	0x00018554

0000d6e0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    d6e0:	b500      	push	{lr}
    d6e2:	b087      	sub	sp, #28
    d6e4:	4603      	mov	r3, r0
    d6e6:	9200      	str	r2, [sp, #0]
    d6e8:	f88d 3007 	strb.w	r3, [sp, #7]
    d6ec:	460b      	mov	r3, r1
    d6ee:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d6f2:	2300      	movs	r3, #0
    d6f4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d6f6:	2300      	movs	r3, #0
    d6f8:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d6fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6fe:	4a1e      	ldr	r2, [pc, #120]	; (d778 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    d700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d704:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d706:	9803      	ldr	r0, [sp, #12]
    d708:	f7fe f942 	bl	b990 <FlexCAN_IsEnabled>
    d70c:	4603      	mov	r3, r0
    d70e:	2b00      	cmp	r3, #0
    d710:	bf14      	ite	ne
    d712:	2301      	movne	r3, #1
    d714:	2300      	moveq	r3, #0
    d716:	b2db      	uxtb	r3, r3
    d718:	f083 0301 	eor.w	r3, r3, #1
    d71c:	b2db      	uxtb	r3, r3
    d71e:	f88d 300b 	strb.w	r3, [sp, #11]
    d722:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d726:	f003 0301 	and.w	r3, r3, #1
    d72a:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d72e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d732:	2b00      	cmp	r3, #0
    d734:	d003      	beq.n	d73e <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    d736:	9803      	ldr	r0, [sp, #12]
    d738:	f001 f94c 	bl	e9d4 <FlexCAN_Enable>
    d73c:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d73e:	9b05      	ldr	r3, [sp, #20]
    d740:	2b00      	cmp	r3, #0
    d742:	d106      	bne.n	d752 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    d744:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d748:	9a00      	ldr	r2, [sp, #0]
    d74a:	4619      	mov	r1, r3
    d74c:	9803      	ldr	r0, [sp, #12]
    d74e:	f7fe fb52 	bl	bdf6 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    d752:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d756:	2b00      	cmp	r3, #0
    d758:	d008      	beq.n	d76c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    d75a:	9803      	ldr	r0, [sp, #12]
    d75c:	f001 f9b8 	bl	ead0 <FlexCAN_Disable>
    d760:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d762:	9b04      	ldr	r3, [sp, #16]
    d764:	2b00      	cmp	r3, #0
    d766:	d001      	beq.n	d76c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    d768:	9b04      	ldr	r3, [sp, #16]
    d76a:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    d76c:	9b05      	ldr	r3, [sp, #20]
}
    d76e:	4618      	mov	r0, r3
    d770:	b007      	add	sp, #28
    d772:	f85d fb04 	ldr.w	pc, [sp], #4
    d776:	bf00      	nop
    d778:	00018554 	.word	0x00018554

0000d77c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d77c:	b500      	push	{lr}
    d77e:	b087      	sub	sp, #28
    d780:	4603      	mov	r3, r0
    d782:	9100      	str	r1, [sp, #0]
    d784:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d788:	2300      	movs	r3, #0
    d78a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d78c:	2300      	movs	r3, #0
    d78e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d790:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d794:	4a1c      	ldr	r2, [pc, #112]	; (d808 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    d796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d79a:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d79c:	9803      	ldr	r0, [sp, #12]
    d79e:	f7fe f8f7 	bl	b990 <FlexCAN_IsEnabled>
    d7a2:	4603      	mov	r3, r0
    d7a4:	2b00      	cmp	r3, #0
    d7a6:	bf14      	ite	ne
    d7a8:	2301      	movne	r3, #1
    d7aa:	2300      	moveq	r3, #0
    d7ac:	b2db      	uxtb	r3, r3
    d7ae:	f083 0301 	eor.w	r3, r3, #1
    d7b2:	b2db      	uxtb	r3, r3
    d7b4:	f88d 300b 	strb.w	r3, [sp, #11]
    d7b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7bc:	f003 0301 	and.w	r3, r3, #1
    d7c0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d7c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7c8:	2b00      	cmp	r3, #0
    d7ca:	d003      	beq.n	d7d4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d7cc:	9803      	ldr	r0, [sp, #12]
    d7ce:	f001 f901 	bl	e9d4 <FlexCAN_Enable>
    d7d2:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    d7d4:	9b05      	ldr	r3, [sp, #20]
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	d103      	bne.n	d7e2 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    d7da:	9900      	ldr	r1, [sp, #0]
    d7dc:	9803      	ldr	r0, [sp, #12]
    d7de:	f7fe f8a7 	bl	b930 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    d7e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7e6:	2b00      	cmp	r3, #0
    d7e8:	d008      	beq.n	d7fc <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d7ea:	9803      	ldr	r0, [sp, #12]
    d7ec:	f001 f970 	bl	ead0 <FlexCAN_Disable>
    d7f0:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d7f2:	9b04      	ldr	r3, [sp, #16]
    d7f4:	2b00      	cmp	r3, #0
    d7f6:	d001      	beq.n	d7fc <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    d7f8:	9b04      	ldr	r3, [sp, #16]
    d7fa:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    d7fc:	9b05      	ldr	r3, [sp, #20]
}
    d7fe:	4618      	mov	r0, r3
    d800:	b007      	add	sp, #28
    d802:	f85d fb04 	ldr.w	pc, [sp], #4
    d806:	bf00      	nop
    d808:	00018554 	.word	0x00018554

0000d80c <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    d80c:	b500      	push	{lr}
    d80e:	b085      	sub	sp, #20
    d810:	4603      	mov	r3, r0
    d812:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d816:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d81a:	4a0e      	ldr	r2, [pc, #56]	; (d854 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    d81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d820:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    d822:	9803      	ldr	r0, [sp, #12]
    d824:	f001 f88a 	bl	e93c <FlexCAN_EnterFreezeMode>
    d828:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    d82a:	9b02      	ldr	r3, [sp, #8]
    d82c:	2b00      	cmp	r3, #0
    d82e:	d10b      	bne.n	d848 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    d830:	9803      	ldr	r0, [sp, #12]
    d832:	f7fe fb18 	bl	be66 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    d836:	9803      	ldr	r0, [sp, #12]
    d838:	f001 f94a 	bl	ead0 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    d83c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d840:	4a05      	ldr	r2, [pc, #20]	; (d858 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    d842:	2100      	movs	r1, #0
    d844:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    d848:	9b02      	ldr	r3, [sp, #8]
}
    d84a:	4618      	mov	r0, r3
    d84c:	b005      	add	sp, #20
    d84e:	f85d fb04 	ldr.w	pc, [sp], #4
    d852:	bf00      	nop
    d854:	00018554 	.word	0x00018554
    d858:	1fff935c 	.word	0x1fff935c

0000d85c <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    d85c:	b500      	push	{lr}
    d85e:	b085      	sub	sp, #20
    d860:	4603      	mov	r3, r0
    d862:	460a      	mov	r2, r1
    d864:	f88d 3007 	strb.w	r3, [sp, #7]
    d868:	4613      	mov	r3, r2
    d86a:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d86e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d872:	4a22      	ldr	r2, [pc, #136]	; (d8fc <FlexCAN_Ip_MainFunctionRead+0xa0>)
    d874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d878:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d87a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d87e:	4a20      	ldr	r2, [pc, #128]	; (d900 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    d880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d884:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d886:	9b02      	ldr	r3, [sp, #8]
    d888:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d88c:	2b00      	cmp	r3, #0
    d88e:	d015      	beq.n	d8bc <FlexCAN_Ip_MainFunctionRead+0x60>
    d890:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d894:	2b07      	cmp	r3, #7
    d896:	d811      	bhi.n	d8bc <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d898:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d89c:	2b00      	cmp	r3, #0
    d89e:	d128      	bne.n	d8f2 <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    d8a0:	2105      	movs	r1, #5
    d8a2:	9803      	ldr	r0, [sp, #12]
    d8a4:	f7fe f8e1 	bl	ba6a <FlexCAN_GetBuffStatusFlag>
    d8a8:	4603      	mov	r3, r0
    d8aa:	2b00      	cmp	r3, #0
    d8ac:	d021      	beq.n	d8f2 <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    d8ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8b2:	2105      	movs	r1, #5
    d8b4:	4618      	mov	r0, r3
    d8b6:	f7fe ff17 	bl	c6e8 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d8ba:	e01a      	b.n	d8f2 <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    d8bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d8c0:	4619      	mov	r1, r3
    d8c2:	9803      	ldr	r0, [sp, #12]
    d8c4:	f7fe f8d1 	bl	ba6a <FlexCAN_GetBuffStatusFlag>
    d8c8:	4603      	mov	r3, r0
    d8ca:	2b00      	cmp	r3, #0
    d8cc:	d012      	beq.n	d8f4 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    d8ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d8d2:	9a02      	ldr	r2, [sp, #8]
    d8d4:	011b      	lsls	r3, r3, #4
    d8d6:	4413      	add	r3, r2
    d8d8:	3304      	adds	r3, #4
    d8da:	681b      	ldr	r3, [r3, #0]
    d8dc:	2b01      	cmp	r3, #1
    d8de:	d109      	bne.n	d8f4 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d8e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d8e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8e8:	4611      	mov	r1, r2
    d8ea:	4618      	mov	r0, r3
    d8ec:	f7fe fd74 	bl	c3d8 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    d8f0:	e000      	b.n	d8f4 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d8f2:	bf00      	nop
}
    d8f4:	bf00      	nop
    d8f6:	b005      	add	sp, #20
    d8f8:	f85d fb04 	ldr.w	pc, [sp], #4
    d8fc:	00018554 	.word	0x00018554
    d900:	1fff935c 	.word	0x1fff935c

0000d904 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    d904:	b510      	push	{r4, lr}
    d906:	b086      	sub	sp, #24
    d908:	4603      	mov	r3, r0
    d90a:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    d90e:	2301      	movs	r3, #1
    d910:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d912:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d916:	4a15      	ldr	r2, [pc, #84]	; (d96c <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    d918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d91c:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d91e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d922:	4a13      	ldr	r2, [pc, #76]	; (d970 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    d924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d928:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d92a:	2300      	movs	r3, #0
    d92c:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    d92e:	9b04      	ldr	r3, [sp, #16]
    d930:	6a1b      	ldr	r3, [r3, #32]
    d932:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    d934:	9b02      	ldr	r3, [sp, #8]
    d936:	f003 0304 	and.w	r3, r3, #4
    d93a:	2b00      	cmp	r3, #0
    d93c:	d012      	beq.n	d964 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    d93e:	9b03      	ldr	r3, [sp, #12]
    d940:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d944:	2b00      	cmp	r3, #0
    d946:	d008      	beq.n	d95a <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    d948:	9b03      	ldr	r3, [sp, #12]
    d94a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d94e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d952:	9b03      	ldr	r3, [sp, #12]
    d954:	9a02      	ldr	r2, [sp, #8]
    d956:	2107      	movs	r1, #7
    d958:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    d95a:	9b04      	ldr	r3, [sp, #16]
    d95c:	2204      	movs	r2, #4
    d95e:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    d960:	2300      	movs	r3, #0
    d962:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    d964:	9b05      	ldr	r3, [sp, #20]
}
    d966:	4618      	mov	r0, r3
    d968:	b006      	add	sp, #24
    d96a:	bd10      	pop	{r4, pc}
    d96c:	00018554 	.word	0x00018554
    d970:	1fff935c 	.word	0x1fff935c

0000d974 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    d974:	b510      	push	{r4, lr}
    d976:	b098      	sub	sp, #96	; 0x60
    d978:	4603      	mov	r3, r0
    d97a:	460a      	mov	r2, r1
    d97c:	f88d 3007 	strb.w	r3, [sp, #7]
    d980:	4613      	mov	r3, r2
    d982:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d986:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d98a:	4a3f      	ldr	r2, [pc, #252]	; (da88 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    d98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d990:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d992:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d996:	4a3d      	ldr	r2, [pc, #244]	; (da8c <FlexCAN_Ip_MainFunctionWrite+0x118>)
    d998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d99c:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    d99e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9a2:	4619      	mov	r1, r3
    d9a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9a6:	f7fe f860 	bl	ba6a <FlexCAN_GetBuffStatusFlag>
    d9aa:	4603      	mov	r3, r0
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d068      	beq.n	da82 <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    d9b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d9b6:	011b      	lsls	r3, r3, #4
    d9b8:	4413      	add	r3, r2
    d9ba:	3304      	adds	r3, #4
    d9bc:	681b      	ldr	r3, [r3, #0]
    d9be:	2b02      	cmp	r3, #2
    d9c0:	d15f      	bne.n	da82 <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    d9c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d9c8:	011b      	lsls	r3, r3, #4
    d9ca:	4413      	add	r3, r2
    d9cc:	3309      	adds	r3, #9
    d9ce:	781b      	ldrb	r3, [r3, #0]
    d9d0:	2b00      	cmp	r3, #0
    d9d2:	d028      	beq.n	da26 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    d9d4:	2300      	movs	r3, #0
    d9d6:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    d9d8:	2300      	movs	r3, #0
    d9da:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    d9dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9e0:	4619      	mov	r1, r3
    d9e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9e4:	f001 fa87 	bl	eef6 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    d9e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9ec:	aa02      	add	r2, sp, #8
    d9ee:	4619      	mov	r1, r3
    d9f0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9f2:	f001 fbaf 	bl	f154 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    d9f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9f8:	f7fe f81d 	bl	ba36 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    d9fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da00:	9a15      	ldr	r2, [sp, #84]	; 0x54
    da02:	9916      	ldr	r1, [sp, #88]	; 0x58
    da04:	011b      	lsls	r3, r3, #4
    da06:	440b      	add	r3, r1
    da08:	330c      	adds	r3, #12
    da0a:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    da0c:	9b02      	ldr	r3, [sp, #8]
    da0e:	0e1b      	lsrs	r3, r3, #24
    da10:	f003 030f 	and.w	r3, r3, #15
    da14:	2b04      	cmp	r3, #4
    da16:	d11d      	bne.n	da54 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    da18:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da1c:	4619      	mov	r1, r3
    da1e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da20:	f7fe f810 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
    da24:	e016      	b.n	da54 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    da26:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da2a:	f89d 4006 	ldrb.w	r4, [sp, #6]
    da2e:	4619      	mov	r1, r3
    da30:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da32:	f001 fb7b 	bl	f12c <FlexCAN_GetMsgBuffTimestamp>
    da36:	4601      	mov	r1, r0
    da38:	9a16      	ldr	r2, [sp, #88]	; 0x58
    da3a:	0123      	lsls	r3, r4, #4
    da3c:	4413      	add	r3, r2
    da3e:	330c      	adds	r3, #12
    da40:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    da42:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da44:	f7fd fff7 	bl	ba36 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    da48:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da4c:	4619      	mov	r1, r3
    da4e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da50:	f7fd fff8 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    da54:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da58:	9a16      	ldr	r2, [sp, #88]	; 0x58
    da5a:	011b      	lsls	r3, r3, #4
    da5c:	4413      	add	r3, r2
    da5e:	3304      	adds	r3, #4
    da60:	2200      	movs	r2, #0
    da62:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    da64:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    da6a:	2b00      	cmp	r3, #0
    da6c:	d009      	beq.n	da82 <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    da6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da70:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    da74:	f89d 2006 	ldrb.w	r2, [sp, #6]
    da78:	f89d 0007 	ldrb.w	r0, [sp, #7]
    da7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da7e:	2104      	movs	r1, #4
    da80:	47a0      	blx	r4
            }
        }
    }
}
    da82:	bf00      	nop
    da84:	b018      	add	sp, #96	; 0x60
    da86:	bd10      	pop	{r4, pc}
    da88:	00018554 	.word	0x00018554
    da8c:	1fff935c 	.word	0x1fff935c

0000da90 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    da90:	b084      	sub	sp, #16
    da92:	4603      	mov	r3, r0
    da94:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    da98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da9c:	4a08      	ldr	r2, [pc, #32]	; (dac0 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    da9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daa2:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    daa4:	9b03      	ldr	r3, [sp, #12]
    daa6:	681b      	ldr	r3, [r3, #0]
    daa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    daac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    dab0:	bf0c      	ite	eq
    dab2:	2301      	moveq	r3, #1
    dab4:	2300      	movne	r3, #0
    dab6:	b2db      	uxtb	r3, r3
}
    dab8:	4618      	mov	r0, r3
    daba:	b004      	add	sp, #16
    dabc:	4770      	bx	lr
    dabe:	bf00      	nop
    dac0:	00018554 	.word	0x00018554

0000dac4 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    dac4:	b084      	sub	sp, #16
    dac6:	4603      	mov	r3, r0
    dac8:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    dacc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dad0:	4a07      	ldr	r2, [pc, #28]	; (daf0 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    dad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dad6:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    dad8:	9b03      	ldr	r3, [sp, #12]
    dada:	681b      	ldr	r3, [r3, #0]
    dadc:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    dae0:	2b00      	cmp	r3, #0
    dae2:	bf0c      	ite	eq
    dae4:	2301      	moveq	r3, #1
    dae6:	2300      	movne	r3, #0
    dae8:	b2db      	uxtb	r3, r3
}
    daea:	4618      	mov	r0, r3
    daec:	b004      	add	sp, #16
    daee:	4770      	bx	lr
    daf0:	00018554 	.word	0x00018554

0000daf4 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    daf4:	b500      	push	{lr}
    daf6:	b085      	sub	sp, #20
    daf8:	4603      	mov	r3, r0
    dafa:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dafe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db02:	4a0b      	ldr	r2, [pc, #44]	; (db30 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    db04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db08:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    db0a:	f006 faf7 	bl	140fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    db0e:	9b03      	ldr	r3, [sp, #12]
    db10:	681b      	ldr	r3, [r3, #0]
    db12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    db16:	9b03      	ldr	r3, [sp, #12]
    db18:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    db1a:	f006 fb1b 	bl	14154 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    db1e:	9803      	ldr	r0, [sp, #12]
    db20:	f000 ff94 	bl	ea4c <FlexCAN_ExitFreezeMode>
    db24:	4603      	mov	r3, r0
}
    db26:	4618      	mov	r0, r3
    db28:	b005      	add	sp, #20
    db2a:	f85d fb04 	ldr.w	pc, [sp], #4
    db2e:	bf00      	nop
    db30:	00018554 	.word	0x00018554

0000db34 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    db34:	b500      	push	{lr}
    db36:	b085      	sub	sp, #20
    db38:	4603      	mov	r3, r0
    db3a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    db3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db42:	4a0a      	ldr	r2, [pc, #40]	; (db6c <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    db44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db48:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    db4a:	9802      	ldr	r0, [sp, #8]
    db4c:	f000 fef6 	bl	e93c <FlexCAN_EnterFreezeMode>
    db50:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    db52:	9b03      	ldr	r3, [sp, #12]
    db54:	2b00      	cmp	r3, #0
    db56:	d103      	bne.n	db60 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    db58:	9802      	ldr	r0, [sp, #8]
    db5a:	f000 ffb9 	bl	ead0 <FlexCAN_Disable>
    db5e:	9003      	str	r0, [sp, #12]
    }
    return status;
    db60:	9b03      	ldr	r3, [sp, #12]
}
    db62:	4618      	mov	r0, r3
    db64:	b005      	add	sp, #20
    db66:	f85d fb04 	ldr.w	pc, [sp], #4
    db6a:	bf00      	nop
    db6c:	00018554 	.word	0x00018554

0000db70 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    db70:	b500      	push	{lr}
    db72:	b087      	sub	sp, #28
    db74:	4603      	mov	r3, r0
    db76:	9100      	str	r1, [sp, #0]
    db78:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    db7c:	2300      	movs	r3, #0
    db7e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    db80:	2300      	movs	r3, #0
    db82:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    db84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db88:	4a1e      	ldr	r2, [pc, #120]	; (dc04 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    db8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db8e:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    db90:	9803      	ldr	r0, [sp, #12]
    db92:	f7fd fefd 	bl	b990 <FlexCAN_IsEnabled>
    db96:	4603      	mov	r3, r0
    db98:	2b00      	cmp	r3, #0
    db9a:	bf14      	ite	ne
    db9c:	2301      	movne	r3, #1
    db9e:	2300      	moveq	r3, #0
    dba0:	b2db      	uxtb	r3, r3
    dba2:	f083 0301 	eor.w	r3, r3, #1
    dba6:	b2db      	uxtb	r3, r3
    dba8:	f88d 300b 	strb.w	r3, [sp, #11]
    dbac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dbb0:	f003 0301 	and.w	r3, r3, #1
    dbb4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    dbb8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dbbc:	2b00      	cmp	r3, #0
    dbbe:	d003      	beq.n	dbc8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    dbc0:	9803      	ldr	r0, [sp, #12]
    dbc2:	f000 ff07 	bl	e9d4 <FlexCAN_Enable>
    dbc6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dbc8:	9b05      	ldr	r3, [sp, #20]
    dbca:	2b00      	cmp	r3, #0
    dbcc:	d107      	bne.n	dbde <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    dbce:	f006 fae7 	bl	141a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    dbd2:	9900      	ldr	r1, [sp, #0]
    dbd4:	9803      	ldr	r0, [sp, #12]
    dbd6:	f7fe f930 	bl	be3a <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    dbda:	f006 fb0d 	bl	141f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    dbde:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dbe2:	2b00      	cmp	r3, #0
    dbe4:	d008      	beq.n	dbf8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    dbe6:	9803      	ldr	r0, [sp, #12]
    dbe8:	f000 ff72 	bl	ead0 <FlexCAN_Disable>
    dbec:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dbee:	9b04      	ldr	r3, [sp, #16]
    dbf0:	2b00      	cmp	r3, #0
    dbf2:	d001      	beq.n	dbf8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    dbf4:	9b04      	ldr	r3, [sp, #16]
    dbf6:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dbf8:	9b05      	ldr	r3, [sp, #20]
}
    dbfa:	4618      	mov	r0, r3
    dbfc:	b007      	add	sp, #28
    dbfe:	f85d fb04 	ldr.w	pc, [sp], #4
    dc02:	bf00      	nop
    dc04:	00018554 	.word	0x00018554

0000dc08 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    dc08:	b500      	push	{lr}
    dc0a:	b087      	sub	sp, #28
    dc0c:	4603      	mov	r3, r0
    dc0e:	9100      	str	r1, [sp, #0]
    dc10:	f88d 3007 	strb.w	r3, [sp, #7]
    dc14:	4613      	mov	r3, r2
    dc16:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dc1a:	2300      	movs	r3, #0
    dc1c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dc1e:	2300      	movs	r3, #0
    dc20:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dc22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc26:	4a1c      	ldr	r2, [pc, #112]	; (dc98 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    dc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc2c:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    dc2e:	9b03      	ldr	r3, [sp, #12]
    dc30:	681b      	ldr	r3, [r3, #0]
    dc32:	0fdb      	lsrs	r3, r3, #31
    dc34:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    dc38:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc3c:	2b00      	cmp	r3, #0
    dc3e:	d003      	beq.n	dc48 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    dc40:	9803      	ldr	r0, [sp, #12]
    dc42:	f000 fec7 	bl	e9d4 <FlexCAN_Enable>
    dc46:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dc48:	9b05      	ldr	r3, [sp, #20]
    dc4a:	2b00      	cmp	r3, #0
    dc4c:	d112      	bne.n	dc74 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dc4e:	f006 fc93 	bl	14578 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dc52:	9803      	ldr	r0, [sp, #12]
    dc54:	f7fe f830 	bl	bcb8 <FlexCAN_IsExCbtEnabled>
    dc58:	4603      	mov	r3, r0
    dc5a:	2b00      	cmp	r3, #0
    dc5c:	d004      	beq.n	dc68 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    dc5e:	9900      	ldr	r1, [sp, #0]
    dc60:	9803      	ldr	r0, [sp, #12]
    dc62:	f7fd ff7f 	bl	bb64 <FlexCAN_SetExtendedTimeSegments>
    dc66:	e003      	b.n	dc70 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    dc68:	9900      	ldr	r1, [sp, #0]
    dc6a:	9803      	ldr	r0, [sp, #12]
    dc6c:	f7fd ff4e 	bl	bb0c <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dc70:	f006 fcae 	bl	145d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    dc74:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc78:	2b00      	cmp	r3, #0
    dc7a:	d008      	beq.n	dc8e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    dc7c:	9803      	ldr	r0, [sp, #12]
    dc7e:	f000 ff27 	bl	ead0 <FlexCAN_Disable>
    dc82:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dc84:	9b04      	ldr	r3, [sp, #16]
    dc86:	2b00      	cmp	r3, #0
    dc88:	d001      	beq.n	dc8e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    dc8a:	9b04      	ldr	r3, [sp, #16]
    dc8c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dc8e:	9b05      	ldr	r3, [sp, #20]
}
    dc90:	4618      	mov	r0, r3
    dc92:	b007      	add	sp, #28
    dc94:	f85d fb04 	ldr.w	pc, [sp], #4
    dc98:	00018554 	.word	0x00018554

0000dc9c <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    dc9c:	b500      	push	{lr}
    dc9e:	b085      	sub	sp, #20
    dca0:	4603      	mov	r3, r0
    dca2:	9100      	str	r1, [sp, #0]
    dca4:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dca8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dcac:	4a0d      	ldr	r2, [pc, #52]	; (dce4 <FlexCAN_Ip_GetBitrate+0x48>)
    dcae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcb2:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    dcb4:	2300      	movs	r3, #0
    dcb6:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dcba:	9803      	ldr	r0, [sp, #12]
    dcbc:	f7fd fffc 	bl	bcb8 <FlexCAN_IsExCbtEnabled>
    dcc0:	4603      	mov	r3, r0
    dcc2:	2b00      	cmp	r3, #0
    dcc4:	d004      	beq.n	dcd0 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    dcc6:	9900      	ldr	r1, [sp, #0]
    dcc8:	9803      	ldr	r0, [sp, #12]
    dcca:	f7fd ff79 	bl	bbc0 <FlexCAN_GetExtendedTimeSegments>
    dcce:	e003      	b.n	dcd8 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    dcd0:	9900      	ldr	r1, [sp, #0]
    dcd2:	9803      	ldr	r0, [sp, #12]
    dcd4:	f7fd ff9c 	bl	bc10 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    dcd8:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    dcdc:	4618      	mov	r0, r3
    dcde:	b005      	add	sp, #20
    dce0:	f85d fb04 	ldr.w	pc, [sp], #4
    dce4:	00018554 	.word	0x00018554

0000dce8 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    dce8:	b500      	push	{lr}
    dcea:	b085      	sub	sp, #20
    dcec:	4603      	mov	r3, r0
    dcee:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dcf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dcf6:	4a0a      	ldr	r2, [pc, #40]	; (dd20 <FlexCAN_Ip_ClearTDCFail+0x38>)
    dcf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcfc:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    dcfe:	f006 faa1 	bl	14244 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    dd02:	9b03      	ldr	r3, [sp, #12]
    dd04:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dd08:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    dd0c:	9b03      	ldr	r3, [sp, #12]
    dd0e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    dd12:	f006 fac3 	bl	1429c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    dd16:	bf00      	nop
    dd18:	b005      	add	sp, #20
    dd1a:	f85d fb04 	ldr.w	pc, [sp], #4
    dd1e:	bf00      	nop
    dd20:	00018554 	.word	0x00018554

0000dd24 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    dd24:	b084      	sub	sp, #16
    dd26:	4603      	mov	r3, r0
    dd28:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    dd2c:	2300      	movs	r3, #0
    dd2e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dd32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd36:	4a0a      	ldr	r2, [pc, #40]	; (dd60 <FlexCAN_Ip_GetTDCFail+0x3c>)
    dd38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd3c:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    dd3e:	9b02      	ldr	r3, [sp, #8]
    dd40:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dd44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    dd48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    dd4c:	bf0c      	ite	eq
    dd4e:	2301      	moveq	r3, #1
    dd50:	2300      	movne	r3, #0
    dd52:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    dd56:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    dd5a:	4618      	mov	r0, r3
    dd5c:	b004      	add	sp, #16
    dd5e:	4770      	bx	lr
    dd60:	00018554 	.word	0x00018554

0000dd64 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    dd64:	b084      	sub	sp, #16
    dd66:	4603      	mov	r3, r0
    dd68:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    dd6c:	2300      	movs	r3, #0
    dd6e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dd72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd76:	4a08      	ldr	r2, [pc, #32]	; (dd98 <FlexCAN_Ip_GetTDCValue+0x34>)
    dd78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd7c:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    dd7e:	9b02      	ldr	r3, [sp, #8]
    dd80:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dd84:	b2db      	uxtb	r3, r3
    dd86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dd8a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    dd8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    dd92:	4618      	mov	r0, r3
    dd94:	b004      	add	sp, #16
    dd96:	4770      	bx	lr
    dd98:	00018554 	.word	0x00018554

0000dd9c <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    dd9c:	b500      	push	{lr}
    dd9e:	b087      	sub	sp, #28
    dda0:	4603      	mov	r3, r0
    dda2:	9100      	str	r1, [sp, #0]
    dda4:	f88d 3007 	strb.w	r3, [sp, #7]
    dda8:	4613      	mov	r3, r2
    ddaa:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ddae:	2300      	movs	r3, #0
    ddb0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ddb2:	2300      	movs	r3, #0
    ddb4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ddb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ddba:	4a1e      	ldr	r2, [pc, #120]	; (de34 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    ddbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddc0:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    ddc2:	9803      	ldr	r0, [sp, #12]
    ddc4:	f7fd ffaf 	bl	bd26 <FlexCAN_IsFDEnabled>
    ddc8:	4603      	mov	r3, r0
    ddca:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    ddce:	9b03      	ldr	r3, [sp, #12]
    ddd0:	681b      	ldr	r3, [r3, #0]
    ddd2:	0fdb      	lsrs	r3, r3, #31
    ddd4:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    ddd8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    dddc:	2b00      	cmp	r3, #0
    ddde:	d003      	beq.n	dde8 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    dde0:	9803      	ldr	r0, [sp, #12]
    dde2:	f000 fdf7 	bl	e9d4 <FlexCAN_Enable>
    dde6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dde8:	9b05      	ldr	r3, [sp, #20]
    ddea:	2b00      	cmp	r3, #0
    ddec:	d10f      	bne.n	de0e <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    ddee:	f006 fc15 	bl	1461c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    ddf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ddf6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ddfa:	4619      	mov	r1, r3
    ddfc:	9803      	ldr	r0, [sp, #12]
    ddfe:	f7fd fdd1 	bl	b9a4 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    de02:	9900      	ldr	r1, [sp, #0]
    de04:	9803      	ldr	r0, [sp, #12]
    de06:	f7fd fe4c 	bl	baa2 <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    de0a:	f006 fc33 	bl	14674 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    de0e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    de12:	2b00      	cmp	r3, #0
    de14:	d008      	beq.n	de28 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    de16:	9803      	ldr	r0, [sp, #12]
    de18:	f000 fe5a 	bl	ead0 <FlexCAN_Disable>
    de1c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    de1e:	9b04      	ldr	r3, [sp, #16]
    de20:	2b00      	cmp	r3, #0
    de22:	d001      	beq.n	de28 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    de24:	9b04      	ldr	r3, [sp, #16]
    de26:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    de28:	9b05      	ldr	r3, [sp, #20]
}
    de2a:	4618      	mov	r0, r3
    de2c:	b007      	add	sp, #28
    de2e:	f85d fb04 	ldr.w	pc, [sp], #4
    de32:	bf00      	nop
    de34:	00018554 	.word	0x00018554

0000de38 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    de38:	b500      	push	{lr}
    de3a:	b085      	sub	sp, #20
    de3c:	4603      	mov	r3, r0
    de3e:	9100      	str	r1, [sp, #0]
    de40:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    de44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de48:	4a08      	ldr	r2, [pc, #32]	; (de6c <FlexCAN_Ip_GetBitrateFD+0x34>)
    de4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de4e:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    de50:	2300      	movs	r3, #0
    de52:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    de56:	9900      	ldr	r1, [sp, #0]
    de58:	9803      	ldr	r0, [sp, #12]
    de5a:	f7fd ff00 	bl	bc5e <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    de5e:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    de62:	4618      	mov	r0, r3
    de64:	b005      	add	sp, #20
    de66:	f85d fb04 	ldr.w	pc, [sp], #4
    de6a:	bf00      	nop
    de6c:	00018554 	.word	0x00018554

0000de70 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    de70:	b500      	push	{lr}
    de72:	b087      	sub	sp, #28
    de74:	4603      	mov	r3, r0
    de76:	f88d 3007 	strb.w	r3, [sp, #7]
    de7a:	460b      	mov	r3, r1
    de7c:	f88d 3006 	strb.w	r3, [sp, #6]
    de80:	4613      	mov	r3, r2
    de82:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    de86:	2300      	movs	r3, #0
    de88:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    de8a:	2300      	movs	r3, #0
    de8c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    de8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de92:	4a20      	ldr	r2, [pc, #128]	; (df14 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    de94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de98:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    de9a:	9803      	ldr	r0, [sp, #12]
    de9c:	f7fd fd78 	bl	b990 <FlexCAN_IsEnabled>
    dea0:	4603      	mov	r3, r0
    dea2:	2b00      	cmp	r3, #0
    dea4:	bf14      	ite	ne
    dea6:	2301      	movne	r3, #1
    dea8:	2300      	moveq	r3, #0
    deaa:	b2db      	uxtb	r3, r3
    deac:	f083 0301 	eor.w	r3, r3, #1
    deb0:	b2db      	uxtb	r3, r3
    deb2:	f88d 300b 	strb.w	r3, [sp, #11]
    deb6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    deba:	f003 0301 	and.w	r3, r3, #1
    debe:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    dec2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dec6:	2b00      	cmp	r3, #0
    dec8:	d003      	beq.n	ded2 <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    deca:	9803      	ldr	r0, [sp, #12]
    decc:	f000 fd82 	bl	e9d4 <FlexCAN_Enable>
    ded0:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    ded2:	9b05      	ldr	r3, [sp, #20]
    ded4:	2b00      	cmp	r3, #0
    ded6:	d10b      	bne.n	def0 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    ded8:	f006 fbf2 	bl	146c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    dedc:	f89d 2005 	ldrb.w	r2, [sp, #5]
    dee0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dee4:	4619      	mov	r1, r3
    dee6:	9803      	ldr	r0, [sp, #12]
    dee8:	f7fd fd2b 	bl	b942 <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    deec:	f006 fc14 	bl	14718 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    def0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    def4:	2b00      	cmp	r3, #0
    def6:	d008      	beq.n	df0a <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    def8:	9803      	ldr	r0, [sp, #12]
    defa:	f000 fde9 	bl	ead0 <FlexCAN_Disable>
    defe:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    df00:	9b04      	ldr	r3, [sp, #16]
    df02:	2b00      	cmp	r3, #0
    df04:	d001      	beq.n	df0a <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    df06:	9b04      	ldr	r3, [sp, #16]
    df08:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    df0a:	9b05      	ldr	r3, [sp, #20]
}
    df0c:	4618      	mov	r0, r3
    df0e:	b007      	add	sp, #28
    df10:	f85d fb04 	ldr.w	pc, [sp], #4
    df14:	00018554 	.word	0x00018554

0000df18 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    df18:	b500      	push	{lr}
    df1a:	b087      	sub	sp, #28
    df1c:	4603      	mov	r3, r0
    df1e:	460a      	mov	r2, r1
    df20:	f88d 3007 	strb.w	r3, [sp, #7]
    df24:	4613      	mov	r3, r2
    df26:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    df2a:	2300      	movs	r3, #0
    df2c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    df2e:	2300      	movs	r3, #0
    df30:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    df32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df36:	4a1f      	ldr	r2, [pc, #124]	; (dfb4 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    df38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df3c:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    df3e:	9803      	ldr	r0, [sp, #12]
    df40:	f7fd fd26 	bl	b990 <FlexCAN_IsEnabled>
    df44:	4603      	mov	r3, r0
    df46:	2b00      	cmp	r3, #0
    df48:	bf14      	ite	ne
    df4a:	2301      	movne	r3, #1
    df4c:	2300      	moveq	r3, #0
    df4e:	b2db      	uxtb	r3, r3
    df50:	f083 0301 	eor.w	r3, r3, #1
    df54:	b2db      	uxtb	r3, r3
    df56:	f88d 300b 	strb.w	r3, [sp, #11]
    df5a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df5e:	f003 0301 	and.w	r3, r3, #1
    df62:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    df66:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df6a:	2b00      	cmp	r3, #0
    df6c:	d003      	beq.n	df76 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    df6e:	9803      	ldr	r0, [sp, #12]
    df70:	f000 fd30 	bl	e9d4 <FlexCAN_Enable>
    df74:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    df76:	9b05      	ldr	r3, [sp, #20]
    df78:	2b00      	cmp	r3, #0
    df7a:	d109      	bne.n	df90 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    df7c:	f006 fbf2 	bl	14764 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    df80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df84:	4619      	mov	r1, r3
    df86:	9803      	ldr	r0, [sp, #12]
    df88:	f7fd ff43 	bl	be12 <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    df8c:	f006 fc16 	bl	147bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    df90:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df94:	2b00      	cmp	r3, #0
    df96:	d008      	beq.n	dfaa <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    df98:	9803      	ldr	r0, [sp, #12]
    df9a:	f000 fd99 	bl	ead0 <FlexCAN_Disable>
    df9e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dfa0:	9b04      	ldr	r3, [sp, #16]
    dfa2:	2b00      	cmp	r3, #0
    dfa4:	d001      	beq.n	dfaa <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    dfa6:	9b04      	ldr	r3, [sp, #16]
    dfa8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dfaa:	9b05      	ldr	r3, [sp, #20]
}
    dfac:	4618      	mov	r0, r3
    dfae:	b007      	add	sp, #28
    dfb0:	f85d fb04 	ldr.w	pc, [sp], #4
    dfb4:	00018554 	.word	0x00018554

0000dfb8 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    dfb8:	b500      	push	{lr}
    dfba:	b085      	sub	sp, #20
    dfbc:	4603      	mov	r3, r0
    dfbe:	460a      	mov	r2, r1
    dfc0:	f88d 3007 	strb.w	r3, [sp, #7]
    dfc4:	4613      	mov	r3, r2
    dfc6:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dfca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dfce:	4a0b      	ldr	r2, [pc, #44]	; (dffc <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    dfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfd4:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    dfd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfda:	4619      	mov	r1, r3
    dfdc:	9803      	ldr	r0, [sp, #12]
    dfde:	f7fd fd44 	bl	ba6a <FlexCAN_GetBuffStatusFlag>
    dfe2:	4603      	mov	r3, r0
    dfe4:	2b01      	cmp	r3, #1
    dfe6:	bf0c      	ite	eq
    dfe8:	2301      	moveq	r3, #1
    dfea:	2300      	movne	r3, #0
    dfec:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    dff0:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    dff4:	4618      	mov	r0, r3
    dff6:	b005      	add	sp, #20
    dff8:	f85d fb04 	ldr.w	pc, [sp], #4
    dffc:	00018554 	.word	0x00018554

0000e000 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    e000:	b500      	push	{lr}
    e002:	b085      	sub	sp, #20
    e004:	4603      	mov	r3, r0
    e006:	460a      	mov	r2, r1
    e008:	f88d 3007 	strb.w	r3, [sp, #7]
    e00c:	4613      	mov	r3, r2
    e00e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e012:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e016:	4a07      	ldr	r2, [pc, #28]	; (e034 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    e018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e01c:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    e01e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e022:	4619      	mov	r1, r3
    e024:	9803      	ldr	r0, [sp, #12]
    e026:	f7fd fd0d 	bl	ba44 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    e02a:	bf00      	nop
    e02c:	b005      	add	sp, #20
    e02e:	f85d fb04 	ldr.w	pc, [sp], #4
    e032:	bf00      	nop
    e034:	00018554 	.word	0x00018554

0000e038 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    e038:	b500      	push	{lr}
    e03a:	b087      	sub	sp, #28
    e03c:	4603      	mov	r3, r0
    e03e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e042:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e046:	4a11      	ldr	r2, [pc, #68]	; (e08c <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    e048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e04c:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    e04e:	2301      	movs	r3, #1
    e050:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e052:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e056:	4a0e      	ldr	r2, [pc, #56]	; (e090 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    e058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e05c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    e05e:	9804      	ldr	r0, [sp, #16]
    e060:	f7fd fc96 	bl	b990 <FlexCAN_IsEnabled>
    e064:	4603      	mov	r3, r0
    e066:	2b00      	cmp	r3, #0
    e068:	d00b      	beq.n	e082 <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    e06a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e06e:	4619      	mov	r1, r3
    e070:	9804      	ldr	r0, [sp, #16]
    e072:	f000 ffe1 	bl	f038 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    e076:	9b03      	ldr	r3, [sp, #12]
    e078:	2201      	movs	r2, #1
    e07a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e07e:	2300      	movs	r3, #0
    e080:	9305      	str	r3, [sp, #20]
    }

    return result;
    e082:	9b05      	ldr	r3, [sp, #20]
}
    e084:	4618      	mov	r0, r3
    e086:	b007      	add	sp, #28
    e088:	f85d fb04 	ldr.w	pc, [sp], #4
    e08c:	00018554 	.word	0x00018554
    e090:	1fff935c 	.word	0x1fff935c

0000e094 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    e094:	b500      	push	{lr}
    e096:	b087      	sub	sp, #28
    e098:	4603      	mov	r3, r0
    e09a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e09e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0a2:	4a10      	ldr	r2, [pc, #64]	; (e0e4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    e0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0a8:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    e0aa:	2301      	movs	r3, #1
    e0ac:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e0ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0b2:	4a0d      	ldr	r2, [pc, #52]	; (e0e8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    e0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0b8:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    e0ba:	9804      	ldr	r0, [sp, #16]
    e0bc:	f7fd fc68 	bl	b990 <FlexCAN_IsEnabled>
    e0c0:	4603      	mov	r3, r0
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d008      	beq.n	e0d8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    e0c6:	9804      	ldr	r0, [sp, #16]
    e0c8:	f000 ffae 	bl	f028 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    e0cc:	9b03      	ldr	r3, [sp, #12]
    e0ce:	2200      	movs	r2, #0
    e0d0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e0d4:	2300      	movs	r3, #0
    e0d6:	9305      	str	r3, [sp, #20]
    }

    return result;
    e0d8:	9b05      	ldr	r3, [sp, #20]
}
    e0da:	4618      	mov	r0, r3
    e0dc:	b007      	add	sp, #28
    e0de:	f85d fb04 	ldr.w	pc, [sp], #4
    e0e2:	bf00      	nop
    e0e4:	00018554 	.word	0x00018554
    e0e8:	1fff935c 	.word	0x1fff935c

0000e0ec <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    e0ec:	b500      	push	{lr}
    e0ee:	b087      	sub	sp, #28
    e0f0:	4603      	mov	r3, r0
    e0f2:	9100      	str	r1, [sp, #0]
    e0f4:	f88d 3007 	strb.w	r3, [sp, #7]
    e0f8:	4613      	mov	r3, r2
    e0fa:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e0fe:	2300      	movs	r3, #0
    e100:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e102:	2300      	movs	r3, #0
    e104:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e106:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e10a:	4a3a      	ldr	r2, [pc, #232]	; (e1f4 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    e10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e110:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e112:	9803      	ldr	r0, [sp, #12]
    e114:	f7fd fc3c 	bl	b990 <FlexCAN_IsEnabled>
    e118:	4603      	mov	r3, r0
    e11a:	2b00      	cmp	r3, #0
    e11c:	bf14      	ite	ne
    e11e:	2301      	movne	r3, #1
    e120:	2300      	moveq	r3, #0
    e122:	b2db      	uxtb	r3, r3
    e124:	f083 0301 	eor.w	r3, r3, #1
    e128:	b2db      	uxtb	r3, r3
    e12a:	f88d 300b 	strb.w	r3, [sp, #11]
    e12e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e132:	f003 0301 	and.w	r3, r3, #1
    e136:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e13a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e13e:	2b00      	cmp	r3, #0
    e140:	d003      	beq.n	e14a <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e142:	9803      	ldr	r0, [sp, #12]
    e144:	f000 fc46 	bl	e9d4 <FlexCAN_Enable>
    e148:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    e14a:	9b05      	ldr	r3, [sp, #20]
    e14c:	2b00      	cmp	r3, #0
    e14e:	d13c      	bne.n	e1ca <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    e150:	9b00      	ldr	r3, [sp, #0]
    e152:	2b04      	cmp	r3, #4
    e154:	d83b      	bhi.n	e1ce <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    e156:	a201      	add	r2, pc, #4	; (adr r2, e15c <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    e158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e15c:	0000e1a7 	.word	0x0000e1a7
    e160:	0000e1b9 	.word	0x0000e1b9
    e164:	0000e183 	.word	0x0000e183
    e168:	0000e195 	.word	0x0000e195
    e16c:	0000e171 	.word	0x0000e171
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    e170:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e174:	461a      	mov	r2, r3
    e176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e17a:	9803      	ldr	r0, [sp, #12]
    e17c:	f000 fce8 	bl	eb50 <FlexCAN_SetErrIntCmd>
                break;
    e180:	e026      	b.n	e1d0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    e182:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e186:	461a      	mov	r2, r3
    e188:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    e18c:	9803      	ldr	r0, [sp, #12]
    e18e:	f000 fcdf 	bl	eb50 <FlexCAN_SetErrIntCmd>
                break;
    e192:	e01d      	b.n	e1d0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    e194:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e198:	461a      	mov	r2, r3
    e19a:	f244 0101 	movw	r1, #16385	; 0x4001
    e19e:	9803      	ldr	r0, [sp, #12]
    e1a0:	f000 fcd6 	bl	eb50 <FlexCAN_SetErrIntCmd>
                break;
    e1a4:	e014      	b.n	e1d0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    e1a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1aa:	461a      	mov	r2, r3
    e1ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e1b0:	9803      	ldr	r0, [sp, #12]
    e1b2:	f000 fccd 	bl	eb50 <FlexCAN_SetErrIntCmd>
                }
                break;
    e1b6:	e00b      	b.n	e1d0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    e1b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1bc:	461a      	mov	r2, r3
    e1be:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e1c2:	9803      	ldr	r0, [sp, #12]
    e1c4:	f000 fcc4 	bl	eb50 <FlexCAN_SetErrIntCmd>
                }
                break;
    e1c8:	e002      	b.n	e1d0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    e1ca:	bf00      	nop
    e1cc:	e000      	b.n	e1d0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    e1ce:	bf00      	nop

    if (TRUE == disabled)
    e1d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e1d4:	2b00      	cmp	r3, #0
    e1d6:	d008      	beq.n	e1ea <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    e1d8:	9803      	ldr	r0, [sp, #12]
    e1da:	f000 fc79 	bl	ead0 <FlexCAN_Disable>
    e1de:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e1e0:	9b04      	ldr	r3, [sp, #16]
    e1e2:	2b00      	cmp	r3, #0
    e1e4:	d001      	beq.n	e1ea <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    e1e6:	9b04      	ldr	r3, [sp, #16]
    e1e8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e1ea:	9b05      	ldr	r3, [sp, #20]
}
    e1ec:	4618      	mov	r0, r3
    e1ee:	b007      	add	sp, #28
    e1f0:	f85d fb04 	ldr.w	pc, [sp], #4
    e1f4:	00018554 	.word	0x00018554

0000e1f8 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    e1f8:	b500      	push	{lr}
    e1fa:	b087      	sub	sp, #28
    e1fc:	4603      	mov	r3, r0
    e1fe:	460a      	mov	r2, r1
    e200:	f88d 3007 	strb.w	r3, [sp, #7]
    e204:	4613      	mov	r3, r2
    e206:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e20a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e20e:	4a27      	ldr	r2, [pc, #156]	; (e2ac <FlexCAN_Ip_AbortTransfer+0xb4>)
    e210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e214:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e216:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e21a:	4a25      	ldr	r2, [pc, #148]	; (e2b0 <FlexCAN_Ip_AbortTransfer+0xb8>)
    e21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e220:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e222:	2300      	movs	r3, #0
    e224:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    e226:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e22a:	2b1f      	cmp	r3, #31
    e22c:	d838      	bhi.n	e2a0 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    e22e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e232:	9a03      	ldr	r2, [sp, #12]
    e234:	011b      	lsls	r3, r3, #4
    e236:	4413      	add	r3, r2
    e238:	3304      	adds	r3, #4
    e23a:	681b      	ldr	r3, [r3, #0]
    e23c:	2b00      	cmp	r3, #0
    e23e:	d102      	bne.n	e246 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    e240:	2305      	movs	r3, #5
    e242:	9305      	str	r3, [sp, #20]
    e244:	e02c      	b.n	e2a0 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    e246:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e24a:	9b03      	ldr	r3, [sp, #12]
    e24c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    e250:	f89d 1007 	ldrb.w	r1, [sp, #7]
    e254:	9804      	ldr	r0, [sp, #16]
    e256:	f000 feb3 	bl	efc0 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    e25a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e25e:	9a03      	ldr	r2, [sp, #12]
    e260:	011b      	lsls	r3, r3, #4
    e262:	4413      	add	r3, r2
    e264:	3304      	adds	r3, #4
    e266:	681b      	ldr	r3, [r3, #0]
    e268:	2b02      	cmp	r3, #2
    e26a:	d108      	bne.n	e27e <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    e26c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e270:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e274:	4611      	mov	r1, r2
    e276:	4618      	mov	r0, r3
    e278:	f7fe fabc 	bl	c7f4 <FlexCAN_AbortTxTransfer>
    e27c:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    e27e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e282:	9a03      	ldr	r2, [sp, #12]
    e284:	011b      	lsls	r3, r3, #4
    e286:	4413      	add	r3, r2
    e288:	3304      	adds	r3, #4
    e28a:	681b      	ldr	r3, [r3, #0]
    e28c:	2b01      	cmp	r3, #1
    e28e:	d107      	bne.n	e2a0 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    e290:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e294:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e298:	4611      	mov	r1, r2
    e29a:	4618      	mov	r0, r3
    e29c:	f7fe fb34 	bl	c908 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    e2a0:	9b05      	ldr	r3, [sp, #20]
}
    e2a2:	4618      	mov	r0, r3
    e2a4:	b007      	add	sp, #28
    e2a6:	f85d fb04 	ldr.w	pc, [sp], #4
    e2aa:	bf00      	nop
    e2ac:	00018554 	.word	0x00018554
    e2b0:	1fff935c 	.word	0x1fff935c

0000e2b4 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    e2b4:	b500      	push	{lr}
    e2b6:	b087      	sub	sp, #28
    e2b8:	4603      	mov	r3, r0
    e2ba:	9100      	str	r1, [sp, #0]
    e2bc:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e2c0:	2300      	movs	r3, #0
    e2c2:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e2c4:	2300      	movs	r3, #0
    e2c6:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e2c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2cc:	4a1b      	ldr	r2, [pc, #108]	; (e33c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    e2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2d2:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e2d4:	9803      	ldr	r0, [sp, #12]
    e2d6:	f7fd fb5b 	bl	b990 <FlexCAN_IsEnabled>
    e2da:	4603      	mov	r3, r0
    e2dc:	2b00      	cmp	r3, #0
    e2de:	bf14      	ite	ne
    e2e0:	2301      	movne	r3, #1
    e2e2:	2300      	moveq	r3, #0
    e2e4:	b2db      	uxtb	r3, r3
    e2e6:	f083 0301 	eor.w	r3, r3, #1
    e2ea:	b2db      	uxtb	r3, r3
    e2ec:	f88d 300b 	strb.w	r3, [sp, #11]
    e2f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e2f4:	f003 0301 	and.w	r3, r3, #1
    e2f8:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e2fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e300:	2b00      	cmp	r3, #0
    e302:	d003      	beq.n	e30c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e304:	9803      	ldr	r0, [sp, #12]
    e306:	f000 fb65 	bl	e9d4 <FlexCAN_Enable>
    e30a:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e30c:	9b05      	ldr	r3, [sp, #20]
    e30e:	2b00      	cmp	r3, #0
    e310:	d102      	bne.n	e318 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    e312:	9b03      	ldr	r3, [sp, #12]
    e314:	9a00      	ldr	r2, [sp, #0]
    e316:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    e318:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e31c:	2b00      	cmp	r3, #0
    e31e:	d008      	beq.n	e332 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e320:	9803      	ldr	r0, [sp, #12]
    e322:	f000 fbd5 	bl	ead0 <FlexCAN_Disable>
    e326:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e328:	9b04      	ldr	r3, [sp, #16]
    e32a:	2b00      	cmp	r3, #0
    e32c:	d001      	beq.n	e332 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    e32e:	9b04      	ldr	r3, [sp, #16]
    e330:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e332:	9b05      	ldr	r3, [sp, #20]
}
    e334:	4618      	mov	r0, r3
    e336:	b007      	add	sp, #28
    e338:	f85d fb04 	ldr.w	pc, [sp], #4
    e33c:	00018554 	.word	0x00018554

0000e340 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    e340:	b500      	push	{lr}
    e342:	b087      	sub	sp, #28
    e344:	4603      	mov	r3, r0
    e346:	9100      	str	r1, [sp, #0]
    e348:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e34c:	2300      	movs	r3, #0
    e34e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e350:	2300      	movs	r3, #0
    e352:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e354:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e358:	4a1b      	ldr	r2, [pc, #108]	; (e3c8 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    e35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e35e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e360:	9803      	ldr	r0, [sp, #12]
    e362:	f7fd fb15 	bl	b990 <FlexCAN_IsEnabled>
    e366:	4603      	mov	r3, r0
    e368:	2b00      	cmp	r3, #0
    e36a:	bf14      	ite	ne
    e36c:	2301      	movne	r3, #1
    e36e:	2300      	moveq	r3, #0
    e370:	b2db      	uxtb	r3, r3
    e372:	f083 0301 	eor.w	r3, r3, #1
    e376:	b2db      	uxtb	r3, r3
    e378:	f88d 300b 	strb.w	r3, [sp, #11]
    e37c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e380:	f003 0301 	and.w	r3, r3, #1
    e384:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e388:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e38c:	2b00      	cmp	r3, #0
    e38e:	d003      	beq.n	e398 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e390:	9803      	ldr	r0, [sp, #12]
    e392:	f000 fb1f 	bl	e9d4 <FlexCAN_Enable>
    e396:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e398:	9b05      	ldr	r3, [sp, #20]
    e39a:	2b00      	cmp	r3, #0
    e39c:	d102      	bne.n	e3a4 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    e39e:	9b03      	ldr	r3, [sp, #12]
    e3a0:	9a00      	ldr	r2, [sp, #0]
    e3a2:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    e3a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3a8:	2b00      	cmp	r3, #0
    e3aa:	d008      	beq.n	e3be <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e3ac:	9803      	ldr	r0, [sp, #12]
    e3ae:	f000 fb8f 	bl	ead0 <FlexCAN_Disable>
    e3b2:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e3b4:	9b04      	ldr	r3, [sp, #16]
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	d001      	beq.n	e3be <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    e3ba:	9b04      	ldr	r3, [sp, #16]
    e3bc:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e3be:	9b05      	ldr	r3, [sp, #20]
}
    e3c0:	4618      	mov	r0, r3
    e3c2:	b007      	add	sp, #28
    e3c4:	f85d fb04 	ldr.w	pc, [sp], #4
    e3c8:	00018554 	.word	0x00018554

0000e3cc <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    e3cc:	b500      	push	{lr}
    e3ce:	b087      	sub	sp, #28
    e3d0:	4603      	mov	r3, r0
    e3d2:	460a      	mov	r2, r1
    e3d4:	f88d 3007 	strb.w	r3, [sp, #7]
    e3d8:	4613      	mov	r3, r2
    e3da:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e3de:	2300      	movs	r3, #0
    e3e0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e3e2:	2300      	movs	r3, #0
    e3e4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e3e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e3ea:	4a1f      	ldr	r2, [pc, #124]	; (e468 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    e3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f0:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e3f2:	9803      	ldr	r0, [sp, #12]
    e3f4:	f7fd facc 	bl	b990 <FlexCAN_IsEnabled>
    e3f8:	4603      	mov	r3, r0
    e3fa:	2b00      	cmp	r3, #0
    e3fc:	bf14      	ite	ne
    e3fe:	2301      	movne	r3, #1
    e400:	2300      	moveq	r3, #0
    e402:	b2db      	uxtb	r3, r3
    e404:	f083 0301 	eor.w	r3, r3, #1
    e408:	b2db      	uxtb	r3, r3
    e40a:	f88d 300b 	strb.w	r3, [sp, #11]
    e40e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e412:	f003 0301 	and.w	r3, r3, #1
    e416:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e41a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e41e:	2b00      	cmp	r3, #0
    e420:	d003      	beq.n	e42a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e422:	9803      	ldr	r0, [sp, #12]
    e424:	f000 fad6 	bl	e9d4 <FlexCAN_Enable>
    e428:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    e42a:	9b05      	ldr	r3, [sp, #20]
    e42c:	2b00      	cmp	r3, #0
    e42e:	d109      	bne.n	e444 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e430:	f005 ff5a 	bl	142e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    e434:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e438:	4619      	mov	r1, r3
    e43a:	9803      	ldr	r0, [sp, #12]
    e43c:	f7fd fae5 	bl	ba0a <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e440:	f005 ff7e 	bl	14340 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    e444:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e448:	2b00      	cmp	r3, #0
    e44a:	d008      	beq.n	e45e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    e44c:	9803      	ldr	r0, [sp, #12]
    e44e:	f000 fb3f 	bl	ead0 <FlexCAN_Disable>
    e452:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e454:	9b04      	ldr	r3, [sp, #16]
    e456:	2b00      	cmp	r3, #0
    e458:	d001      	beq.n	e45e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    e45a:	9b04      	ldr	r3, [sp, #16]
    e45c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e45e:	9b05      	ldr	r3, [sp, #20]
}
    e460:	4618      	mov	r0, r3
    e462:	b007      	add	sp, #28
    e464:	f85d fb04 	ldr.w	pc, [sp], #4
    e468:	00018554 	.word	0x00018554

0000e46c <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    e46c:	b500      	push	{lr}
    e46e:	b085      	sub	sp, #20
    e470:	4603      	mov	r3, r0
    e472:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    e476:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e47a:	4a06      	ldr	r2, [pc, #24]	; (e494 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    e47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e480:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    e482:	9803      	ldr	r0, [sp, #12]
    e484:	f7fd fc5d 	bl	bd42 <FlexCAN_IsListenOnlyModeEnabled>
    e488:	4603      	mov	r3, r0
}
    e48a:	4618      	mov	r0, r3
    e48c:	b005      	add	sp, #20
    e48e:	f85d fb04 	ldr.w	pc, [sp], #4
    e492:	bf00      	nop
    e494:	00018554 	.word	0x00018554

0000e498 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    e498:	b500      	push	{lr}
    e49a:	b089      	sub	sp, #36	; 0x24
    e49c:	4603      	mov	r3, r0
    e49e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    e4a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4a6:	4a27      	ldr	r2, [pc, #156]	; (e544 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    e4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ac:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    e4ae:	2300      	movs	r3, #0
    e4b0:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    e4b2:	2300      	movs	r3, #0
    e4b4:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e4b6:	2100      	movs	r1, #0
    e4b8:	4823      	ldr	r0, [pc, #140]	; (e548 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    e4ba:	f7f3 fcfb 	bl	1eb4 <OsIf_MicrosToTicks>
    e4be:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    e4c0:	2301      	movs	r3, #1
    e4c2:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    e4c4:	9b05      	ldr	r3, [sp, #20]
    e4c6:	685b      	ldr	r3, [r3, #4]
    e4c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e4cc:	2b00      	cmp	r3, #0
    e4ce:	d033      	beq.n	e538 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    e4d0:	2300      	movs	r3, #0
    e4d2:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e4d4:	9b05      	ldr	r3, [sp, #20]
    e4d6:	6a1b      	ldr	r3, [r3, #32]
    e4d8:	f003 0320 	and.w	r3, r3, #32
    e4dc:	2b00      	cmp	r3, #0
    e4de:	d02b      	beq.n	e538 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e4e0:	f006 fa36 	bl	14950 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    e4e4:	9b05      	ldr	r3, [sp, #20]
    e4e6:	685b      	ldr	r3, [r3, #4]
    e4e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    e4ec:	9b05      	ldr	r3, [sp, #20]
    e4ee:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    e4f0:	9b05      	ldr	r3, [sp, #20]
    e4f2:	685b      	ldr	r3, [r3, #4]
    e4f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e4f8:	9b05      	ldr	r3, [sp, #20]
    e4fa:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e4fc:	f006 fa54 	bl	149a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e500:	2000      	movs	r0, #0
    e502:	f7f3 fc8b 	bl	1e1c <OsIf_GetCounter>
    e506:	4603      	mov	r3, r0
    e508:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e50a:	e00f      	b.n	e52c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e50c:	ab03      	add	r3, sp, #12
    e50e:	2100      	movs	r1, #0
    e510:	4618      	mov	r0, r3
    e512:	f7f3 fc9c 	bl	1e4e <OsIf_GetElapsed>
    e516:	4602      	mov	r2, r0
    e518:	9b07      	ldr	r3, [sp, #28]
    e51a:	4413      	add	r3, r2
    e51c:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    e51e:	9a07      	ldr	r2, [sp, #28]
    e520:	9b04      	ldr	r3, [sp, #16]
    e522:	429a      	cmp	r2, r3
    e524:	d302      	bcc.n	e52c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    e526:	2303      	movs	r3, #3
    e528:	9306      	str	r3, [sp, #24]
                    break;
    e52a:	e005      	b.n	e538 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e52c:	9b05      	ldr	r3, [sp, #20]
    e52e:	6a1b      	ldr	r3, [r3, #32]
    e530:	f003 0320 	and.w	r3, r3, #32
    e534:	2b00      	cmp	r3, #0
    e536:	d1e9      	bne.n	e50c <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    e538:	9b06      	ldr	r3, [sp, #24]
}
    e53a:	4618      	mov	r0, r3
    e53c:	b009      	add	sp, #36	; 0x24
    e53e:	f85d fb04 	ldr.w	pc, [sp], #4
    e542:	bf00      	nop
    e544:	00018554 	.word	0x00018554
    e548:	000f4240 	.word	0x000f4240

0000e54c <FlexCAN_SetSelfReception>:
{
    e54c:	b082      	sub	sp, #8
    e54e:	9001      	str	r0, [sp, #4]
    e550:	460b      	mov	r3, r1
    e552:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    e556:	9b01      	ldr	r3, [sp, #4]
    e558:	681b      	ldr	r3, [r3, #0]
    e55a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e55e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e562:	2a00      	cmp	r2, #0
    e564:	d001      	beq.n	e56a <FlexCAN_SetSelfReception+0x1e>
    e566:	2200      	movs	r2, #0
    e568:	e001      	b.n	e56e <FlexCAN_SetSelfReception+0x22>
    e56a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e56e:	431a      	orrs	r2, r3
    e570:	9b01      	ldr	r3, [sp, #4]
    e572:	601a      	str	r2, [r3, #0]
}
    e574:	bf00      	nop
    e576:	b002      	add	sp, #8
    e578:	4770      	bx	lr

0000e57a <FlexCAN_IsFDEnabled>:
{
    e57a:	b082      	sub	sp, #8
    e57c:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    e57e:	9b01      	ldr	r3, [sp, #4]
    e580:	681b      	ldr	r3, [r3, #0]
    e582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    e586:	2b00      	cmp	r3, #0
    e588:	bf14      	ite	ne
    e58a:	2301      	movne	r3, #1
    e58c:	2300      	moveq	r3, #0
    e58e:	b2db      	uxtb	r3, r3
}
    e590:	4618      	mov	r0, r3
    e592:	b002      	add	sp, #8
    e594:	4770      	bx	lr

0000e596 <FlexCAN_SetIsoCan>:
{
    e596:	b082      	sub	sp, #8
    e598:	9001      	str	r0, [sp, #4]
    e59a:	460b      	mov	r3, r1
    e59c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    e5a0:	9b01      	ldr	r3, [sp, #4]
    e5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e5a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e5a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e5ac:	2a00      	cmp	r2, #0
    e5ae:	d002      	beq.n	e5b6 <FlexCAN_SetIsoCan+0x20>
    e5b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e5b4:	e000      	b.n	e5b8 <FlexCAN_SetIsoCan+0x22>
    e5b6:	2200      	movs	r2, #0
    e5b8:	431a      	orrs	r2, r3
    e5ba:	9b01      	ldr	r3, [sp, #4]
    e5bc:	635a      	str	r2, [r3, #52]	; 0x34
}
    e5be:	bf00      	nop
    e5c0:	b002      	add	sp, #8
    e5c2:	4770      	bx	lr

0000e5c4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    e5c4:	b082      	sub	sp, #8
    e5c6:	9001      	str	r0, [sp, #4]
    e5c8:	460b      	mov	r3, r1
    e5ca:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    e5ce:	9b01      	ldr	r3, [sp, #4]
    e5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e5d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    e5d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e5da:	2a00      	cmp	r2, #0
    e5dc:	d002      	beq.n	e5e4 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    e5de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e5e2:	e000      	b.n	e5e6 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    e5e4:	2200      	movs	r2, #0
    e5e6:	431a      	orrs	r2, r3
    e5e8:	9b01      	ldr	r3, [sp, #4]
    e5ea:	635a      	str	r2, [r3, #52]	; 0x34
}
    e5ec:	bf00      	nop
    e5ee:	b002      	add	sp, #8
    e5f0:	4770      	bx	lr

0000e5f2 <FlexCAN_SetProtocolException>:
{
    e5f2:	b082      	sub	sp, #8
    e5f4:	9001      	str	r0, [sp, #4]
    e5f6:	460b      	mov	r3, r1
    e5f8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    e5fc:	9b01      	ldr	r3, [sp, #4]
    e5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    e604:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e608:	2a00      	cmp	r2, #0
    e60a:	d002      	beq.n	e612 <FlexCAN_SetProtocolException+0x20>
    e60c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e610:	e000      	b.n	e614 <FlexCAN_SetProtocolException+0x22>
    e612:	2200      	movs	r2, #0
    e614:	431a      	orrs	r2, r3
    e616:	9b01      	ldr	r3, [sp, #4]
    e618:	635a      	str	r2, [r3, #52]	; 0x34
}
    e61a:	bf00      	nop
    e61c:	b002      	add	sp, #8
    e61e:	4770      	bx	lr

0000e620 <FlexCAN_SetRemoteReqStore>:
{
    e620:	b082      	sub	sp, #8
    e622:	9001      	str	r0, [sp, #4]
    e624:	460b      	mov	r3, r1
    e626:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    e62a:	9b01      	ldr	r3, [sp, #4]
    e62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e62e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e632:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e636:	2a00      	cmp	r2, #0
    e638:	d002      	beq.n	e640 <FlexCAN_SetRemoteReqStore+0x20>
    e63a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e63e:	e000      	b.n	e642 <FlexCAN_SetRemoteReqStore+0x22>
    e640:	2200      	movs	r2, #0
    e642:	431a      	orrs	r2, r3
    e644:	9b01      	ldr	r3, [sp, #4]
    e646:	635a      	str	r2, [r3, #52]	; 0x34
}
    e648:	bf00      	nop
    e64a:	b002      	add	sp, #8
    e64c:	4770      	bx	lr

0000e64e <FlexCAN_SetBusOffAutorecovery>:
{
    e64e:	b082      	sub	sp, #8
    e650:	9001      	str	r0, [sp, #4]
    e652:	460b      	mov	r3, r1
    e654:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    e658:	9b01      	ldr	r3, [sp, #4]
    e65a:	685b      	ldr	r3, [r3, #4]
    e65c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    e660:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e664:	2a00      	cmp	r2, #0
    e666:	d001      	beq.n	e66c <FlexCAN_SetBusOffAutorecovery+0x1e>
    e668:	2200      	movs	r2, #0
    e66a:	e000      	b.n	e66e <FlexCAN_SetBusOffAutorecovery+0x20>
    e66c:	2240      	movs	r2, #64	; 0x40
    e66e:	431a      	orrs	r2, r3
    e670:	9b01      	ldr	r3, [sp, #4]
    e672:	605a      	str	r2, [r3, #4]
}
    e674:	bf00      	nop
    e676:	b002      	add	sp, #8
    e678:	4770      	bx	lr

0000e67a <FlexCAN_SetEdgeFilter>:
{
    e67a:	b082      	sub	sp, #8
    e67c:	9001      	str	r0, [sp, #4]
    e67e:	460b      	mov	r3, r1
    e680:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    e684:	9b01      	ldr	r3, [sp, #4]
    e686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e68c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e690:	2a00      	cmp	r2, #0
    e692:	d001      	beq.n	e698 <FlexCAN_SetEdgeFilter+0x1e>
    e694:	2200      	movs	r2, #0
    e696:	e001      	b.n	e69c <FlexCAN_SetEdgeFilter+0x22>
    e698:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e69c:	431a      	orrs	r2, r3
    e69e:	9b01      	ldr	r3, [sp, #4]
    e6a0:	635a      	str	r2, [r3, #52]	; 0x34
}
    e6a2:	bf00      	nop
    e6a4:	b002      	add	sp, #8
    e6a6:	4770      	bx	lr

0000e6a8 <FlexCAN_CanBitSampling>:
{
    e6a8:	b082      	sub	sp, #8
    e6aa:	9001      	str	r0, [sp, #4]
    e6ac:	460b      	mov	r3, r1
    e6ae:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    e6b2:	9b01      	ldr	r3, [sp, #4]
    e6b4:	685b      	ldr	r3, [r3, #4]
    e6b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e6ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e6be:	2a00      	cmp	r2, #0
    e6c0:	d001      	beq.n	e6c6 <FlexCAN_CanBitSampling+0x1e>
    e6c2:	2280      	movs	r2, #128	; 0x80
    e6c4:	e000      	b.n	e6c8 <FlexCAN_CanBitSampling+0x20>
    e6c6:	2200      	movs	r2, #0
    e6c8:	431a      	orrs	r2, r3
    e6ca:	9b01      	ldr	r3, [sp, #4]
    e6cc:	605a      	str	r2, [r3, #4]
}
    e6ce:	bf00      	nop
    e6d0:	b002      	add	sp, #8
    e6d2:	4770      	bx	lr

0000e6d4 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    e6d4:	b084      	sub	sp, #16
    e6d6:	4603      	mov	r3, r0
    e6d8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    e6dc:	23ff      	movs	r3, #255	; 0xff
    e6de:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    e6e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e6e4:	2b40      	cmp	r3, #64	; 0x40
    e6e6:	d804      	bhi.n	e6f2 <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    e6e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e6ec:	4a03      	ldr	r2, [pc, #12]	; (e6fc <FlexCAN_ComputeDLCValue+0x28>)
    e6ee:	5cd3      	ldrb	r3, [r2, r3]
    e6f0:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    e6f2:	9b03      	ldr	r3, [sp, #12]
    e6f4:	b2db      	uxtb	r3, r3
}
    e6f6:	4618      	mov	r0, r3
    e6f8:	b004      	add	sp, #16
    e6fa:	4770      	bx	lr
    e6fc:	00018560 	.word	0x00018560

0000e700 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    e700:	b500      	push	{lr}
    e702:	b087      	sub	sp, #28
    e704:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    e706:	9801      	ldr	r0, [sp, #4]
    e708:	f000 f8f6 	bl	e8f8 <FlexCAN_GetMaxMbNum>
    e70c:	4603      	mov	r3, r0
    e70e:	009b      	lsls	r3, r3, #2
    e710:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    e712:	9801      	ldr	r0, [sp, #4]
    e714:	f000 f8f0 	bl	e8f8 <FlexCAN_GetMaxMbNum>
    e718:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e71a:	9b01      	ldr	r3, [sp, #4]
    e71c:	3380      	adds	r3, #128	; 0x80
    e71e:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e720:	2300      	movs	r3, #0
    e722:	9305      	str	r3, [sp, #20]
    e724:	e008      	b.n	e738 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    e726:	9b05      	ldr	r3, [sp, #20]
    e728:	009b      	lsls	r3, r3, #2
    e72a:	9a02      	ldr	r2, [sp, #8]
    e72c:	4413      	add	r3, r2
    e72e:	2200      	movs	r2, #0
    e730:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e732:	9b05      	ldr	r3, [sp, #20]
    e734:	3301      	adds	r3, #1
    e736:	9305      	str	r3, [sp, #20]
    e738:	9a05      	ldr	r2, [sp, #20]
    e73a:	9b04      	ldr	r3, [sp, #16]
    e73c:	429a      	cmp	r2, r3
    e73e:	d3f2      	bcc.n	e726 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    e740:	9b01      	ldr	r3, [sp, #4]
    e742:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    e746:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e748:	2300      	movs	r3, #0
    e74a:	9305      	str	r3, [sp, #20]
    e74c:	e008      	b.n	e760 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    e74e:	9b05      	ldr	r3, [sp, #20]
    e750:	009b      	lsls	r3, r3, #2
    e752:	9a02      	ldr	r2, [sp, #8]
    e754:	4413      	add	r3, r2
    e756:	2200      	movs	r2, #0
    e758:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e75a:	9b05      	ldr	r3, [sp, #20]
    e75c:	3301      	adds	r3, #1
    e75e:	9305      	str	r3, [sp, #20]
    e760:	9a05      	ldr	r2, [sp, #20]
    e762:	9b03      	ldr	r3, [sp, #12]
    e764:	429a      	cmp	r2, r3
    e766:	d3f2      	bcc.n	e74e <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    e768:	bf00      	nop
    e76a:	bf00      	nop
    e76c:	b007      	add	sp, #28
    e76e:	f85d fb04 	ldr.w	pc, [sp], #4

0000e772 <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    e772:	b084      	sub	sp, #16
    e774:	4603      	mov	r3, r0
    e776:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    e77a:	2308      	movs	r3, #8
    e77c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    e780:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e784:	2b08      	cmp	r3, #8
    e786:	d804      	bhi.n	e792 <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    e788:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e78c:	f88d 300f 	strb.w	r3, [sp, #15]
    e790:	e033      	b.n	e7fa <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    e792:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e796:	3b09      	subs	r3, #9
    e798:	2b06      	cmp	r3, #6
    e79a:	d82d      	bhi.n	e7f8 <FlexCAN_ComputePayloadSize+0x86>
    e79c:	a201      	add	r2, pc, #4	; (adr r2, e7a4 <FlexCAN_ComputePayloadSize+0x32>)
    e79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e7a2:	bf00      	nop
    e7a4:	0000e7c1 	.word	0x0000e7c1
    e7a8:	0000e7c9 	.word	0x0000e7c9
    e7ac:	0000e7d1 	.word	0x0000e7d1
    e7b0:	0000e7d9 	.word	0x0000e7d9
    e7b4:	0000e7e1 	.word	0x0000e7e1
    e7b8:	0000e7e9 	.word	0x0000e7e9
    e7bc:	0000e7f1 	.word	0x0000e7f1
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    e7c0:	230c      	movs	r3, #12
    e7c2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7c6:	e018      	b.n	e7fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    e7c8:	2310      	movs	r3, #16
    e7ca:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7ce:	e014      	b.n	e7fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    e7d0:	2314      	movs	r3, #20
    e7d2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7d6:	e010      	b.n	e7fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    e7d8:	2318      	movs	r3, #24
    e7da:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7de:	e00c      	b.n	e7fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    e7e0:	2320      	movs	r3, #32
    e7e2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7e6:	e008      	b.n	e7fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    e7e8:	2330      	movs	r3, #48	; 0x30
    e7ea:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7ee:	e004      	b.n	e7fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    e7f0:	2340      	movs	r3, #64	; 0x40
    e7f2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e7f6:	e000      	b.n	e7fa <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    e7f8:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    e7fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    e7fe:	4618      	mov	r0, r3
    e800:	b004      	add	sp, #16
    e802:	4770      	bx	lr

0000e804 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    e804:	b500      	push	{lr}
    e806:	b08b      	sub	sp, #44	; 0x2c
    e808:	9001      	str	r0, [sp, #4]
    e80a:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    e80c:	2308      	movs	r3, #8
    e80e:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    e812:	2300      	movs	r3, #0
    e814:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    e818:	f44f 7300 	mov.w	r3, #512	; 0x200
    e81c:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    e81e:	2300      	movs	r3, #0
    e820:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    e824:	9b00      	ldr	r3, [sp, #0]
    e826:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    e82a:	2300      	movs	r3, #0
    e82c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    e830:	2300      	movs	r3, #0
    e832:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    e836:	2300      	movs	r3, #0
    e838:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    e83a:	2300      	movs	r3, #0
    e83c:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e840:	9b01      	ldr	r3, [sp, #4]
    e842:	3380      	adds	r3, #128	; 0x80
    e844:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    e846:	2300      	movs	r3, #0
    e848:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e84a:	2300      	movs	r3, #0
    e84c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e850:	e02d      	b.n	e8ae <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    e852:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e856:	4619      	mov	r1, r3
    e858:	9801      	ldr	r0, [sp, #4]
    e85a:	f000 fad1 	bl	ee00 <FlexCAN_GetPayloadSize>
    e85e:	4603      	mov	r3, r0
    e860:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    e864:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e868:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e86c:	4413      	add	r3, r2
    e86e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    e872:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e876:	9a07      	ldr	r2, [sp, #28]
    e878:	fbb2 f3f3 	udiv	r3, r2, r3
    e87c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    e880:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e884:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e888:	429a      	cmp	r2, r3
    e88a:	d815      	bhi.n	e8b8 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    e88c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    e890:	3380      	adds	r3, #128	; 0x80
    e892:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    e896:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    e89a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e89e:	1ad3      	subs	r3, r2, r3
    e8a0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e8a4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e8a8:	3301      	adds	r3, #1
    e8aa:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e8ae:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e8b2:	2b00      	cmp	r3, #0
    e8b4:	d0cd      	beq.n	e852 <FlexCAN_GetMsgBuffRegion+0x4e>
    e8b6:	e000      	b.n	e8ba <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    e8b8:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    e8ba:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    e8be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e8c2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e8c6:	fbb3 f0f2 	udiv	r0, r3, r2
    e8ca:	fb00 f202 	mul.w	r2, r0, r2
    e8ce:	1a9b      	subs	r3, r3, r2
    e8d0:	b2db      	uxtb	r3, r3
    e8d2:	461a      	mov	r2, r3
    e8d4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e8d8:	089b      	lsrs	r3, r3, #2
    e8da:	b2db      	uxtb	r3, r3
    e8dc:	fb02 f303 	mul.w	r3, r2, r3
    e8e0:	440b      	add	r3, r1
    e8e2:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    e8e4:	9b06      	ldr	r3, [sp, #24]
    e8e6:	009b      	lsls	r3, r3, #2
    e8e8:	9a04      	ldr	r2, [sp, #16]
    e8ea:	4413      	add	r3, r2
    e8ec:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    e8ee:	9b03      	ldr	r3, [sp, #12]
}
    e8f0:	4618      	mov	r0, r3
    e8f2:	b00b      	add	sp, #44	; 0x2c
    e8f4:	f85d fb04 	ldr.w	pc, [sp], #4

0000e8f8 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    e8f8:	b084      	sub	sp, #16
    e8fa:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    e8fc:	2300      	movs	r3, #0
    e8fe:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e900:	2300      	movs	r3, #0
    e902:	9303      	str	r3, [sp, #12]
    e904:	e00e      	b.n	e924 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    e906:	4a0b      	ldr	r2, [pc, #44]	; (e934 <FlexCAN_GetMaxMbNum+0x3c>)
    e908:	9b03      	ldr	r3, [sp, #12]
    e90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e90e:	9a01      	ldr	r2, [sp, #4]
    e910:	429a      	cmp	r2, r3
    e912:	d104      	bne.n	e91e <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    e914:	4a08      	ldr	r2, [pc, #32]	; (e938 <FlexCAN_GetMaxMbNum+0x40>)
    e916:	9b03      	ldr	r3, [sp, #12]
    e918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e91c:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e91e:	9b03      	ldr	r3, [sp, #12]
    e920:	3301      	adds	r3, #1
    e922:	9303      	str	r3, [sp, #12]
    e924:	9b03      	ldr	r3, [sp, #12]
    e926:	2b02      	cmp	r3, #2
    e928:	d9ed      	bls.n	e906 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    e92a:	9b02      	ldr	r3, [sp, #8]
}
    e92c:	4618      	mov	r0, r3
    e92e:	b004      	add	sp, #16
    e930:	4770      	bx	lr
    e932:	bf00      	nop
    e934:	000185a4 	.word	0x000185a4
    e938:	000185b0 	.word	0x000185b0

0000e93c <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    e93c:	b500      	push	{lr}
    e93e:	b087      	sub	sp, #28
    e940:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    e942:	2300      	movs	r3, #0
    e944:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    e946:	2300      	movs	r3, #0
    e948:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e94a:	2100      	movs	r1, #0
    e94c:	4820      	ldr	r0, [pc, #128]	; (e9d0 <FlexCAN_EnterFreezeMode+0x94>)
    e94e:	f7f3 fab1 	bl	1eb4 <OsIf_MicrosToTicks>
    e952:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    e954:	2300      	movs	r3, #0
    e956:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    e958:	f005 fa36 	bl	13dc8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    e95c:	9b01      	ldr	r3, [sp, #4]
    e95e:	681b      	ldr	r3, [r3, #0]
    e960:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e964:	9b01      	ldr	r3, [sp, #4]
    e966:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    e968:	9b01      	ldr	r3, [sp, #4]
    e96a:	681b      	ldr	r3, [r3, #0]
    e96c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    e970:	9b01      	ldr	r3, [sp, #4]
    e972:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    e974:	9b01      	ldr	r3, [sp, #4]
    e976:	681b      	ldr	r3, [r3, #0]
    e978:	2b00      	cmp	r3, #0
    e97a:	da05      	bge.n	e988 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    e97c:	9b01      	ldr	r3, [sp, #4]
    e97e:	681b      	ldr	r3, [r3, #0]
    e980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    e984:	9b01      	ldr	r3, [sp, #4]
    e986:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    e988:	f005 fa4a 	bl	13e20 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e98c:	2000      	movs	r0, #0
    e98e:	f7f3 fa45 	bl	1e1c <OsIf_GetCounter>
    e992:	4603      	mov	r3, r0
    e994:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    e996:	e00f      	b.n	e9b8 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e998:	ab02      	add	r3, sp, #8
    e99a:	2100      	movs	r1, #0
    e99c:	4618      	mov	r0, r3
    e99e:	f7f3 fa56 	bl	1e4e <OsIf_GetElapsed>
    e9a2:	4602      	mov	r2, r0
    e9a4:	9b05      	ldr	r3, [sp, #20]
    e9a6:	4413      	add	r3, r2
    e9a8:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    e9aa:	9a05      	ldr	r2, [sp, #20]
    e9ac:	9b03      	ldr	r3, [sp, #12]
    e9ae:	429a      	cmp	r2, r3
    e9b0:	d302      	bcc.n	e9b8 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    e9b2:	2303      	movs	r3, #3
    e9b4:	9304      	str	r3, [sp, #16]
            break;
    e9b6:	e005      	b.n	e9c4 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    e9b8:	9b01      	ldr	r3, [sp, #4]
    e9ba:	681b      	ldr	r3, [r3, #0]
    e9bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    e9c0:	2b00      	cmp	r3, #0
    e9c2:	d0e9      	beq.n	e998 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    e9c4:	9b04      	ldr	r3, [sp, #16]
}
    e9c6:	4618      	mov	r0, r3
    e9c8:	b007      	add	sp, #28
    e9ca:	f85d fb04 	ldr.w	pc, [sp], #4
    e9ce:	bf00      	nop
    e9d0:	000f4240 	.word	0x000f4240

0000e9d4 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    e9d4:	b500      	push	{lr}
    e9d6:	b087      	sub	sp, #28
    e9d8:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    e9da:	2300      	movs	r3, #0
    e9dc:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    e9de:	2300      	movs	r3, #0
    e9e0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e9e2:	2100      	movs	r1, #0
    e9e4:	4818      	ldr	r0, [pc, #96]	; (ea48 <FlexCAN_Enable+0x74>)
    e9e6:	f7f3 fa65 	bl	1eb4 <OsIf_MicrosToTicks>
    e9ea:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    e9ec:	2300      	movs	r3, #0
    e9ee:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    e9f0:	f005 fa3c 	bl	13e6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    e9f4:	9b01      	ldr	r3, [sp, #4]
    e9f6:	681b      	ldr	r3, [r3, #0]
    e9f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    e9fc:	9b01      	ldr	r3, [sp, #4]
    e9fe:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    ea00:	f005 fa60 	bl	13ec4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea04:	2000      	movs	r0, #0
    ea06:	f7f3 fa09 	bl	1e1c <OsIf_GetCounter>
    ea0a:	4603      	mov	r3, r0
    ea0c:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    ea0e:	e00f      	b.n	ea30 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea10:	ab02      	add	r3, sp, #8
    ea12:	2100      	movs	r1, #0
    ea14:	4618      	mov	r0, r3
    ea16:	f7f3 fa1a 	bl	1e4e <OsIf_GetElapsed>
    ea1a:	4602      	mov	r2, r0
    ea1c:	9b05      	ldr	r3, [sp, #20]
    ea1e:	4413      	add	r3, r2
    ea20:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ea22:	9a05      	ldr	r2, [sp, #20]
    ea24:	9b03      	ldr	r3, [sp, #12]
    ea26:	429a      	cmp	r2, r3
    ea28:	d302      	bcc.n	ea30 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    ea2a:	2303      	movs	r3, #3
    ea2c:	9304      	str	r3, [sp, #16]
            break;
    ea2e:	e005      	b.n	ea3c <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    ea30:	9b01      	ldr	r3, [sp, #4]
    ea32:	681b      	ldr	r3, [r3, #0]
    ea34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ea38:	2b00      	cmp	r3, #0
    ea3a:	d0e9      	beq.n	ea10 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    ea3c:	9b04      	ldr	r3, [sp, #16]
}
    ea3e:	4618      	mov	r0, r3
    ea40:	b007      	add	sp, #28
    ea42:	f85d fb04 	ldr.w	pc, [sp], #4
    ea46:	bf00      	nop
    ea48:	000f4240 	.word	0x000f4240

0000ea4c <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    ea4c:	b500      	push	{lr}
    ea4e:	b087      	sub	sp, #28
    ea50:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    ea52:	2300      	movs	r3, #0
    ea54:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    ea56:	2300      	movs	r3, #0
    ea58:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea5a:	2100      	movs	r1, #0
    ea5c:	481b      	ldr	r0, [pc, #108]	; (eacc <FlexCAN_ExitFreezeMode+0x80>)
    ea5e:	f7f3 fa29 	bl	1eb4 <OsIf_MicrosToTicks>
    ea62:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    ea64:	2300      	movs	r3, #0
    ea66:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    ea68:	f005 fa52 	bl	13f10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    ea6c:	9b01      	ldr	r3, [sp, #4]
    ea6e:	681b      	ldr	r3, [r3, #0]
    ea70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    ea74:	9b01      	ldr	r3, [sp, #4]
    ea76:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    ea78:	9b01      	ldr	r3, [sp, #4]
    ea7a:	681b      	ldr	r3, [r3, #0]
    ea7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    ea80:	9b01      	ldr	r3, [sp, #4]
    ea82:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    ea84:	f005 fa70 	bl	13f68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea88:	2000      	movs	r0, #0
    ea8a:	f7f3 f9c7 	bl	1e1c <OsIf_GetCounter>
    ea8e:	4603      	mov	r3, r0
    ea90:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    ea92:	e00f      	b.n	eab4 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea94:	ab02      	add	r3, sp, #8
    ea96:	2100      	movs	r1, #0
    ea98:	4618      	mov	r0, r3
    ea9a:	f7f3 f9d8 	bl	1e4e <OsIf_GetElapsed>
    ea9e:	4602      	mov	r2, r0
    eaa0:	9b05      	ldr	r3, [sp, #20]
    eaa2:	4413      	add	r3, r2
    eaa4:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    eaa6:	9a05      	ldr	r2, [sp, #20]
    eaa8:	9b03      	ldr	r3, [sp, #12]
    eaaa:	429a      	cmp	r2, r3
    eaac:	d302      	bcc.n	eab4 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    eaae:	2303      	movs	r3, #3
    eab0:	9304      	str	r3, [sp, #16]
            break;
    eab2:	e005      	b.n	eac0 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    eab4:	9b01      	ldr	r3, [sp, #4]
    eab6:	681b      	ldr	r3, [r3, #0]
    eab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    eabc:	2b00      	cmp	r3, #0
    eabe:	d1e9      	bne.n	ea94 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    eac0:	9b04      	ldr	r3, [sp, #16]
}
    eac2:	4618      	mov	r0, r3
    eac4:	b007      	add	sp, #28
    eac6:	f85d fb04 	ldr.w	pc, [sp], #4
    eaca:	bf00      	nop
    eacc:	000f4240 	.word	0x000f4240

0000ead0 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    ead0:	b500      	push	{lr}
    ead2:	b087      	sub	sp, #28
    ead4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    ead6:	2300      	movs	r3, #0
    ead8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    eada:	2300      	movs	r3, #0
    eadc:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eade:	2100      	movs	r1, #0
    eae0:	481a      	ldr	r0, [pc, #104]	; (eb4c <FlexCAN_Disable+0x7c>)
    eae2:	f7f3 f9e7 	bl	1eb4 <OsIf_MicrosToTicks>
    eae6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    eae8:	2300      	movs	r3, #0
    eaea:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    eaec:	9b01      	ldr	r3, [sp, #4]
    eaee:	681b      	ldr	r3, [r3, #0]
    eaf0:	2b00      	cmp	r3, #0
    eaf2:	db25      	blt.n	eb40 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    eaf4:	f005 fa5e 	bl	13fb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    eaf8:	9b01      	ldr	r3, [sp, #4]
    eafa:	681b      	ldr	r3, [r3, #0]
    eafc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    eb00:	9b01      	ldr	r3, [sp, #4]
    eb02:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    eb04:	f005 fa82 	bl	1400c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eb08:	2000      	movs	r0, #0
    eb0a:	f7f3 f987 	bl	1e1c <OsIf_GetCounter>
    eb0e:	4603      	mov	r3, r0
    eb10:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    eb12:	e00f      	b.n	eb34 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eb14:	ab02      	add	r3, sp, #8
    eb16:	2100      	movs	r1, #0
    eb18:	4618      	mov	r0, r3
    eb1a:	f7f3 f998 	bl	1e4e <OsIf_GetElapsed>
    eb1e:	4602      	mov	r2, r0
    eb20:	9b05      	ldr	r3, [sp, #20]
    eb22:	4413      	add	r3, r2
    eb24:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    eb26:	9a05      	ldr	r2, [sp, #20]
    eb28:	9b03      	ldr	r3, [sp, #12]
    eb2a:	429a      	cmp	r2, r3
    eb2c:	d302      	bcc.n	eb34 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    eb2e:	2303      	movs	r3, #3
    eb30:	9304      	str	r3, [sp, #16]
                break;
    eb32:	e005      	b.n	eb40 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    eb34:	9b01      	ldr	r3, [sp, #4]
    eb36:	681b      	ldr	r3, [r3, #0]
    eb38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    eb3c:	2b00      	cmp	r3, #0
    eb3e:	d0e9      	beq.n	eb14 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    eb40:	9b04      	ldr	r3, [sp, #16]
}
    eb42:	4618      	mov	r0, r3
    eb44:	b007      	add	sp, #28
    eb46:	f85d fb04 	ldr.w	pc, [sp], #4
    eb4a:	bf00      	nop
    eb4c:	000f4240 	.word	0x000f4240

0000eb50 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    eb50:	b500      	push	{lr}
    eb52:	b087      	sub	sp, #28
    eb54:	9003      	str	r0, [sp, #12]
    eb56:	9102      	str	r1, [sp, #8]
    eb58:	4613      	mov	r3, r2
    eb5a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    eb5e:	9b02      	ldr	r3, [sp, #8]
    eb60:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    eb62:	f005 fa79 	bl	14058 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    eb66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eb6a:	2b00      	cmp	r3, #0
    eb6c:	d020      	beq.n	ebb0 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    eb6e:	9b02      	ldr	r3, [sp, #8]
    eb70:	f244 0201 	movw	r2, #16385	; 0x4001
    eb74:	4293      	cmp	r3, r2
    eb76:	d106      	bne.n	eb86 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    eb78:	9b03      	ldr	r3, [sp, #12]
    eb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    eb7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    eb80:	9b03      	ldr	r3, [sp, #12]
    eb82:	635a      	str	r2, [r3, #52]	; 0x34
    eb84:	e03a      	b.n	ebfc <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    eb86:	9b02      	ldr	r3, [sp, #8]
    eb88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    eb8c:	d003      	beq.n	eb96 <FlexCAN_SetErrIntCmd+0x46>
    eb8e:	9b02      	ldr	r3, [sp, #8]
    eb90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    eb94:	d105      	bne.n	eba2 <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    eb96:	9b03      	ldr	r3, [sp, #12]
    eb98:	681b      	ldr	r3, [r3, #0]
    eb9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    eb9e:	9b03      	ldr	r3, [sp, #12]
    eba0:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    eba2:	9b03      	ldr	r3, [sp, #12]
    eba4:	685a      	ldr	r2, [r3, #4]
    eba6:	9b05      	ldr	r3, [sp, #20]
    eba8:	431a      	orrs	r2, r3
    ebaa:	9b03      	ldr	r3, [sp, #12]
    ebac:	605a      	str	r2, [r3, #4]
    ebae:	e025      	b.n	ebfc <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    ebb0:	9b02      	ldr	r3, [sp, #8]
    ebb2:	f244 0201 	movw	r2, #16385	; 0x4001
    ebb6:	4293      	cmp	r3, r2
    ebb8:	d106      	bne.n	ebc8 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    ebba:	9b03      	ldr	r3, [sp, #12]
    ebbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ebbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    ebc2:	9b03      	ldr	r3, [sp, #12]
    ebc4:	635a      	str	r2, [r3, #52]	; 0x34
    ebc6:	e019      	b.n	ebfc <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    ebc8:	9b03      	ldr	r3, [sp, #12]
    ebca:	685a      	ldr	r2, [r3, #4]
    ebcc:	9b05      	ldr	r3, [sp, #20]
    ebce:	43db      	mvns	r3, r3
    ebd0:	401a      	ands	r2, r3
    ebd2:	9b03      	ldr	r3, [sp, #12]
    ebd4:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    ebd6:	9b03      	ldr	r3, [sp, #12]
    ebd8:	685b      	ldr	r3, [r3, #4]
    ebda:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    ebdc:	9b05      	ldr	r3, [sp, #20]
    ebde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ebe2:	2b00      	cmp	r3, #0
    ebe4:	d10a      	bne.n	ebfc <FlexCAN_SetErrIntCmd+0xac>
    ebe6:	9b05      	ldr	r3, [sp, #20]
    ebe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ebec:	2b00      	cmp	r3, #0
    ebee:	d105      	bne.n	ebfc <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    ebf0:	9b03      	ldr	r3, [sp, #12]
    ebf2:	681b      	ldr	r3, [r3, #0]
    ebf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    ebf8:	9b03      	ldr	r3, [sp, #12]
    ebfa:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    ebfc:	f005 fa58 	bl	140b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    ec00:	bf00      	nop
    ec02:	b007      	add	sp, #28
    ec04:	f85d fb04 	ldr.w	pc, [sp], #4

0000ec08 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    ec08:	b500      	push	{lr}
    ec0a:	b087      	sub	sp, #28
    ec0c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    ec0e:	2300      	movs	r3, #0
    ec10:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    ec12:	2300      	movs	r3, #0
    ec14:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ec16:	2100      	movs	r1, #0
    ec18:	4833      	ldr	r0, [pc, #204]	; (ece8 <FlexCAN_Init+0xe0>)
    ec1a:	f7f3 f94b 	bl	1eb4 <OsIf_MicrosToTicks>
    ec1e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    ec20:	2300      	movs	r3, #0
    ec22:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    ec24:	9b01      	ldr	r3, [sp, #4]
    ec26:	681b      	ldr	r3, [r3, #0]
    ec28:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    ec2c:	9b01      	ldr	r3, [sp, #4]
    ec2e:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ec30:	2000      	movs	r0, #0
    ec32:	f7f3 f8f3 	bl	1e1c <OsIf_GetCounter>
    ec36:	4603      	mov	r3, r0
    ec38:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ec3a:	e00f      	b.n	ec5c <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ec3c:	ab02      	add	r3, sp, #8
    ec3e:	2100      	movs	r1, #0
    ec40:	4618      	mov	r0, r3
    ec42:	f7f3 f904 	bl	1e4e <OsIf_GetElapsed>
    ec46:	4602      	mov	r2, r0
    ec48:	9b05      	ldr	r3, [sp, #20]
    ec4a:	4413      	add	r3, r2
    ec4c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ec4e:	9a05      	ldr	r2, [sp, #20]
    ec50:	9b03      	ldr	r3, [sp, #12]
    ec52:	429a      	cmp	r2, r3
    ec54:	d302      	bcc.n	ec5c <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    ec56:	2303      	movs	r3, #3
    ec58:	9304      	str	r3, [sp, #16]
            break;
    ec5a:	e005      	b.n	ec68 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ec5c:	9b01      	ldr	r3, [sp, #4]
    ec5e:	681b      	ldr	r3, [r3, #0]
    ec60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    ec64:	2b00      	cmp	r3, #0
    ec66:	d1e9      	bne.n	ec3c <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    ec68:	9b04      	ldr	r3, [sp, #16]
    ec6a:	2b00      	cmp	r3, #0
    ec6c:	d136      	bne.n	ecdc <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    ec6e:	9b01      	ldr	r3, [sp, #4]
    ec70:	681b      	ldr	r3, [r3, #0]
    ec72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    ec76:	9b01      	ldr	r3, [sp, #4]
    ec78:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    ec7a:	9801      	ldr	r0, [sp, #4]
    ec7c:	f7ff fd40 	bl	e700 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    ec80:	9b01      	ldr	r3, [sp, #4]
    ec82:	f04f 32ff 	mov.w	r2, #4294967295
    ec86:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    ec88:	9b01      	ldr	r3, [sp, #4]
    ec8a:	f04f 32ff 	mov.w	r2, #4294967295
    ec8e:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    ec90:	9b01      	ldr	r3, [sp, #4]
    ec92:	f04f 32ff 	mov.w	r2, #4294967295
    ec96:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    ec98:	9b01      	ldr	r3, [sp, #4]
    ec9a:	2200      	movs	r2, #0
    ec9c:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    ec9e:	9b01      	ldr	r3, [sp, #4]
    eca0:	f04f 32ff 	mov.w	r2, #4294967295
    eca4:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    eca6:	9b01      	ldr	r3, [sp, #4]
    eca8:	4a10      	ldr	r2, [pc, #64]	; (ecec <FlexCAN_Init+0xe4>)
    ecaa:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    ecac:	9b01      	ldr	r3, [sp, #4]
    ecae:	2200      	movs	r2, #0
    ecb0:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    ecb2:	9b01      	ldr	r3, [sp, #4]
    ecb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    ecb8:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    ecba:	9b01      	ldr	r3, [sp, #4]
    ecbc:	2200      	movs	r2, #0
    ecbe:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ecc0:	9801      	ldr	r0, [sp, #4]
    ecc2:	f000 f85b 	bl	ed7c <FlexCAN_IsFDAvailable>
    ecc6:	4603      	mov	r3, r0
    ecc8:	2b00      	cmp	r3, #0
    ecca:	d007      	beq.n	ecdc <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    eccc:	9b01      	ldr	r3, [sp, #4]
    ecce:	2200      	movs	r2, #0
    ecd0:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    ecd4:	9b01      	ldr	r3, [sp, #4]
    ecd6:	4a06      	ldr	r2, [pc, #24]	; (ecf0 <FlexCAN_Init+0xe8>)
    ecd8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    ecdc:	9b04      	ldr	r3, [sp, #16]
}
    ecde:	4618      	mov	r0, r3
    ece0:	b007      	add	sp, #28
    ece2:	f85d fb04 	ldr.w	pc, [sp], #4
    ece6:	bf00      	nop
    ece8:	000f4240 	.word	0x000f4240
    ecec:	003b0006 	.word	0x003b0006
    ecf0:	80004100 	.word	0x80004100

0000ecf4 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    ecf4:	b500      	push	{lr}
    ecf6:	b087      	sub	sp, #28
    ecf8:	9001      	str	r0, [sp, #4]
    ecfa:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    ecfc:	9801      	ldr	r0, [sp, #4]
    ecfe:	f7ff fdfb 	bl	e8f8 <FlexCAN_GetMaxMbNum>
    ed02:	4603      	mov	r3, r0
    ed04:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    ed08:	2300      	movs	r3, #0
    ed0a:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    ed0c:	9b01      	ldr	r3, [sp, #4]
    ed0e:	681b      	ldr	r3, [r3, #0]
    ed10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ed14:	2b00      	cmp	r3, #0
    ed16:	d001      	beq.n	ed1c <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    ed18:	2301      	movs	r3, #1
    ed1a:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    ed1c:	9b04      	ldr	r3, [sp, #16]
    ed1e:	2b00      	cmp	r3, #0
    ed20:	d127      	bne.n	ed72 <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    ed22:	9b01      	ldr	r3, [sp, #4]
    ed24:	681b      	ldr	r3, [r3, #0]
    ed26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    ed2a:	9b01      	ldr	r3, [sp, #4]
    ed2c:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    ed2e:	9b01      	ldr	r3, [sp, #4]
    ed30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ed32:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    ed36:	9b00      	ldr	r3, [sp, #0]
    ed38:	061b      	lsls	r3, r3, #24
    ed3a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    ed3e:	431a      	orrs	r2, r3
    ed40:	9b01      	ldr	r3, [sp, #4]
    ed42:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    ed44:	9b01      	ldr	r3, [sp, #4]
    ed46:	f04f 32ff 	mov.w	r2, #4294967295
    ed4a:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    ed4c:	2300      	movs	r3, #0
    ed4e:	9305      	str	r3, [sp, #20]
    ed50:	e00a      	b.n	ed68 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    ed52:	9b01      	ldr	r3, [sp, #4]
    ed54:	9a05      	ldr	r2, [sp, #20]
    ed56:	f502 7208 	add.w	r2, r2, #544	; 0x220
    ed5a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    ed5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    ed62:	9b05      	ldr	r3, [sp, #20]
    ed64:	3301      	adds	r3, #1
    ed66:	9305      	str	r3, [sp, #20]
    ed68:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ed6c:	9a05      	ldr	r2, [sp, #20]
    ed6e:	429a      	cmp	r2, r3
    ed70:	d3ef      	bcc.n	ed52 <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    ed72:	9b04      	ldr	r3, [sp, #16]
}
    ed74:	4618      	mov	r0, r3
    ed76:	b007      	add	sp, #28
    ed78:	f85d fb04 	ldr.w	pc, [sp], #4

0000ed7c <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    ed7c:	b084      	sub	sp, #16
    ed7e:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    ed80:	2300      	movs	r3, #0
    ed82:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    ed84:	2300      	movs	r3, #0
    ed86:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    ed8a:	2300      	movs	r3, #0
    ed8c:	9303      	str	r3, [sp, #12]
    ed8e:	e00d      	b.n	edac <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    ed90:	4a0a      	ldr	r2, [pc, #40]	; (edbc <FlexCAN_IsFDAvailable+0x40>)
    ed92:	9b03      	ldr	r3, [sp, #12]
    ed94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed98:	9a01      	ldr	r2, [sp, #4]
    ed9a:	429a      	cmp	r2, r3
    ed9c:	d103      	bne.n	eda6 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    ed9e:	2301      	movs	r3, #1
    eda0:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    eda4:	e005      	b.n	edb2 <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    eda6:	9b03      	ldr	r3, [sp, #12]
    eda8:	3301      	adds	r3, #1
    edaa:	9303      	str	r3, [sp, #12]
    edac:	9b03      	ldr	r3, [sp, #12]
    edae:	2b00      	cmp	r3, #0
    edb0:	d0ee      	beq.n	ed90 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    edb2:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    edb6:	4618      	mov	r0, r3
    edb8:	b004      	add	sp, #16
    edba:	4770      	bx	lr
    edbc:	000185bc 	.word	0x000185bc

0000edc0 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    edc0:	b500      	push	{lr}
    edc2:	b085      	sub	sp, #20
    edc4:	9001      	str	r0, [sp, #4]
    edc6:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    edc8:	9801      	ldr	r0, [sp, #4]
    edca:	f7ff fbd6 	bl	e57a <FlexCAN_IsFDEnabled>
    edce:	4603      	mov	r3, r0
    edd0:	2b00      	cmp	r3, #0
    edd2:	d011      	beq.n	edf8 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    edd4:	9b01      	ldr	r3, [sp, #4]
    edd6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    edda:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    eddc:	9b03      	ldr	r3, [sp, #12]
    edde:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    ede2:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    ede4:	9b00      	ldr	r3, [sp, #0]
    ede6:	681b      	ldr	r3, [r3, #0]
    ede8:	041b      	lsls	r3, r3, #16
    edea:	9a03      	ldr	r2, [sp, #12]
    edec:	4313      	orrs	r3, r2
    edee:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    edf0:	9b01      	ldr	r3, [sp, #4]
    edf2:	9a03      	ldr	r2, [sp, #12]
    edf4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    edf8:	bf00      	nop
    edfa:	b005      	add	sp, #20
    edfc:	f85d fb04 	ldr.w	pc, [sp], #4

0000ee00 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    ee00:	b500      	push	{lr}
    ee02:	b085      	sub	sp, #20
    ee04:	9001      	str	r0, [sp, #4]
    ee06:	460b      	mov	r3, r1
    ee08:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    ee0c:	2300      	movs	r3, #0
    ee0e:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ee10:	9801      	ldr	r0, [sp, #4]
    ee12:	f7ff ffb3 	bl	ed7c <FlexCAN_IsFDAvailable>
    ee16:	4603      	mov	r3, r0
    ee18:	2b00      	cmp	r3, #0
    ee1a:	d019      	beq.n	ee50 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    ee1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ee20:	2b00      	cmp	r3, #0
    ee22:	d10a      	bne.n	ee3a <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ee24:	9b01      	ldr	r3, [sp, #4]
    ee26:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ee2a:	0c1b      	lsrs	r3, r3, #16
    ee2c:	f003 0303 	and.w	r3, r3, #3
    ee30:	2208      	movs	r2, #8
    ee32:	fa02 f303 	lsl.w	r3, r2, r3
    ee36:	9303      	str	r3, [sp, #12]
    ee38:	e00c      	b.n	ee54 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ee3a:	9b01      	ldr	r3, [sp, #4]
    ee3c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ee40:	0c1b      	lsrs	r3, r3, #16
    ee42:	f003 0303 	and.w	r3, r3, #3
    ee46:	2208      	movs	r2, #8
    ee48:	fa02 f303 	lsl.w	r3, r2, r3
    ee4c:	9303      	str	r3, [sp, #12]
    ee4e:	e001      	b.n	ee54 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    ee50:	2308      	movs	r3, #8
    ee52:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    ee54:	9b03      	ldr	r3, [sp, #12]
    ee56:	b2db      	uxtb	r3, r3
}
    ee58:	4618      	mov	r0, r3
    ee5a:	b005      	add	sp, #20
    ee5c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ee60 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    ee60:	b500      	push	{lr}
    ee62:	b087      	sub	sp, #28
    ee64:	9001      	str	r0, [sp, #4]
    ee66:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    ee68:	2308      	movs	r3, #8
    ee6a:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    ee6e:	f44f 7300 	mov.w	r3, #512	; 0x200
    ee72:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    ee74:	2308      	movs	r3, #8
    ee76:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    ee7a:	2300      	movs	r3, #0
    ee7c:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    ee80:	2300      	movs	r3, #0
    ee82:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    ee86:	2300      	movs	r3, #0
    ee88:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ee8c:	2300      	movs	r3, #0
    ee8e:	f88d 3015 	strb.w	r3, [sp, #21]
    ee92:	e024      	b.n	eede <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    ee94:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ee98:	4619      	mov	r1, r3
    ee9a:	9801      	ldr	r0, [sp, #4]
    ee9c:	f7ff ffb0 	bl	ee00 <FlexCAN_GetPayloadSize>
    eea0:	4603      	mov	r3, r0
    eea2:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    eea6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    eeaa:	f89d 3014 	ldrb.w	r3, [sp, #20]
    eeae:	4413      	add	r3, r2
    eeb0:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    eeb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eeb8:	9a04      	ldr	r2, [sp, #16]
    eeba:	fbb2 f3f3 	udiv	r3, r2, r3
    eebe:	b2da      	uxtb	r2, r3
    eec0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    eec4:	4413      	add	r3, r2
    eec6:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    eeca:	f89d 3016 	ldrb.w	r3, [sp, #22]
    eece:	9a00      	ldr	r2, [sp, #0]
    eed0:	429a      	cmp	r2, r3
    eed2:	d309      	bcc.n	eee8 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    eed4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    eed8:	3301      	adds	r3, #1
    eeda:	f88d 3015 	strb.w	r3, [sp, #21]
    eede:	f89d 3015 	ldrb.w	r3, [sp, #21]
    eee2:	2b00      	cmp	r3, #0
    eee4:	d0d6      	beq.n	ee94 <FlexCAN_GetMbPayloadSize+0x34>
    eee6:	e000      	b.n	eeea <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    eee8:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    eeea:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    eeee:	4618      	mov	r0, r3
    eef0:	b007      	add	sp, #28
    eef2:	f85d fb04 	ldr.w	pc, [sp], #4

0000eef6 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    eef6:	b500      	push	{lr}
    eef8:	b085      	sub	sp, #20
    eefa:	9001      	str	r0, [sp, #4]
    eefc:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    eefe:	9900      	ldr	r1, [sp, #0]
    ef00:	9801      	ldr	r0, [sp, #4]
    ef02:	f7ff fc7f 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    ef06:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    ef08:	9b03      	ldr	r3, [sp, #12]
    ef0a:	681b      	ldr	r3, [r3, #0]
}
    ef0c:	bf00      	nop
    ef0e:	b005      	add	sp, #20
    ef10:	f85d fb04 	ldr.w	pc, [sp], #4

0000ef14 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    ef14:	b500      	push	{lr}
    ef16:	b087      	sub	sp, #28
    ef18:	9003      	str	r0, [sp, #12]
    ef1a:	9201      	str	r2, [sp, #4]
    ef1c:	461a      	mov	r2, r3
    ef1e:	460b      	mov	r3, r1
    ef20:	f88d 300b 	strb.w	r3, [sp, #11]
    ef24:	4613      	mov	r3, r2
    ef26:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    ef2a:	2300      	movs	r3, #0
    ef2c:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    ef2e:	9b01      	ldr	r3, [sp, #4]
    ef30:	f003 031f 	and.w	r3, r3, #31
    ef34:	2201      	movs	r2, #1
    ef36:	fa02 f303 	lsl.w	r3, r2, r3
    ef3a:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    ef3c:	9b01      	ldr	r3, [sp, #4]
    ef3e:	2b1f      	cmp	r3, #31
    ef40:	d837      	bhi.n	efb2 <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    ef42:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ef46:	2b00      	cmp	r3, #0
    ef48:	d01b      	beq.n	ef82 <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ef4a:	f005 fc5d 	bl	14808 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    ef4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef52:	4a1a      	ldr	r2, [pc, #104]	; (efbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    ef58:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef5c:	9a04      	ldr	r2, [sp, #16]
    ef5e:	430a      	orrs	r2, r1
    ef60:	4916      	ldr	r1, [pc, #88]	; (efbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    ef66:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ef6a:	2b00      	cmp	r3, #0
    ef6c:	d006      	beq.n	ef7c <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ef6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef72:	4a12      	ldr	r2, [pc, #72]	; (efbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ef78:	9b03      	ldr	r3, [sp, #12]
    ef7a:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ef7c:	f005 fc70 	bl	14860 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    ef80:	e017      	b.n	efb2 <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ef82:	f005 fc41 	bl	14808 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    ef86:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef8a:	4a0c      	ldr	r2, [pc, #48]	; (efbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    ef90:	9b04      	ldr	r3, [sp, #16]
    ef92:	43da      	mvns	r2, r3
    ef94:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef98:	400a      	ands	r2, r1
    ef9a:	4908      	ldr	r1, [pc, #32]	; (efbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    efa0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    efa4:	4a05      	ldr	r2, [pc, #20]	; (efbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    efa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    efaa:	9b03      	ldr	r3, [sp, #12]
    efac:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    efae:	f005 fc57 	bl	14860 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    efb2:	9b05      	ldr	r3, [sp, #20]
}
    efb4:	4618      	mov	r0, r3
    efb6:	b007      	add	sp, #28
    efb8:	f85d fb04 	ldr.w	pc, [sp], #4
    efbc:	1fff9368 	.word	0x1fff9368

0000efc0 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    efc0:	b500      	push	{lr}
    efc2:	b087      	sub	sp, #28
    efc4:	9003      	str	r0, [sp, #12]
    efc6:	9201      	str	r2, [sp, #4]
    efc8:	461a      	mov	r2, r3
    efca:	460b      	mov	r3, r1
    efcc:	f88d 300b 	strb.w	r3, [sp, #11]
    efd0:	4613      	mov	r3, r2
    efd2:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    efd6:	9b01      	ldr	r3, [sp, #4]
    efd8:	f003 031f 	and.w	r3, r3, #31
    efdc:	2201      	movs	r2, #1
    efde:	fa02 f303 	lsl.w	r3, r2, r3
    efe2:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    efe4:	9b01      	ldr	r3, [sp, #4]
    efe6:	2b1f      	cmp	r3, #31
    efe8:	d818      	bhi.n	f01c <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    efea:	f005 f9cf 	bl	1438c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    efee:	9b03      	ldr	r3, [sp, #12]
    eff0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    eff2:	9b05      	ldr	r3, [sp, #20]
    eff4:	43da      	mvns	r2, r3
    eff6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    effa:	400a      	ands	r2, r1
    effc:	4909      	ldr	r1, [pc, #36]	; (f024 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    effe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    f002:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f006:	2b00      	cmp	r3, #0
    f008:	d006      	beq.n	f018 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f00a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f00e:	4a05      	ldr	r2, [pc, #20]	; (f024 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    f010:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f014:	9b03      	ldr	r3, [sp, #12]
    f016:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    f018:	f005 f9e4 	bl	143e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    f01c:	bf00      	nop
    f01e:	b007      	add	sp, #28
    f020:	f85d fb04 	ldr.w	pc, [sp], #4
    f024:	1fff9368 	.word	0x1fff9368

0000f028 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    f028:	b082      	sub	sp, #8
    f02a:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    f02c:	9b01      	ldr	r3, [sp, #4]
    f02e:	2200      	movs	r2, #0
    f030:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    f032:	bf00      	nop
    f034:	b002      	add	sp, #8
    f036:	4770      	bx	lr

0000f038 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    f038:	b082      	sub	sp, #8
    f03a:	9001      	str	r0, [sp, #4]
    f03c:	460b      	mov	r3, r1
    f03e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f042:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f046:	4a04      	ldr	r2, [pc, #16]	; (f058 <FlexCAN_EnableInterrupts+0x20>)
    f048:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f04c:	9b01      	ldr	r3, [sp, #4]
    f04e:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    f050:	bf00      	nop
    f052:	b002      	add	sp, #8
    f054:	4770      	bx	lr
    f056:	bf00      	nop
    f058:	1fff9368 	.word	0x1fff9368

0000f05c <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    f05c:	b500      	push	{lr}
    f05e:	b087      	sub	sp, #28
    f060:	9003      	str	r0, [sp, #12]
    f062:	9102      	str	r1, [sp, #8]
    f064:	9201      	str	r2, [sp, #4]
    f066:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f068:	9902      	ldr	r1, [sp, #8]
    f06a:	9803      	ldr	r0, [sp, #12]
    f06c:	f7ff fbca 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    f070:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    f072:	9b05      	ldr	r3, [sp, #20]
    f074:	3304      	adds	r3, #4
    f076:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    f078:	9b05      	ldr	r3, [sp, #20]
    f07a:	2200      	movs	r2, #0
    f07c:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    f07e:	9b04      	ldr	r3, [sp, #16]
    f080:	2200      	movs	r2, #0
    f082:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f084:	9b01      	ldr	r3, [sp, #4]
    f086:	685b      	ldr	r3, [r3, #4]
    f088:	2b01      	cmp	r3, #1
    f08a:	d119      	bne.n	f0c0 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    f08c:	9b05      	ldr	r3, [sp, #20]
    f08e:	681b      	ldr	r3, [r3, #0]
    f090:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    f094:	9b05      	ldr	r3, [sp, #20]
    f096:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    f098:	9b05      	ldr	r3, [sp, #20]
    f09a:	681b      	ldr	r3, [r3, #0]
    f09c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    f0a0:	9b05      	ldr	r3, [sp, #20]
    f0a2:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f0a4:	9b04      	ldr	r3, [sp, #16]
    f0a6:	681b      	ldr	r3, [r3, #0]
    f0a8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f0ac:	9b04      	ldr	r3, [sp, #16]
    f0ae:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f0b0:	9b04      	ldr	r3, [sp, #16]
    f0b2:	681a      	ldr	r2, [r3, #0]
    f0b4:	9b00      	ldr	r3, [sp, #0]
    f0b6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f0ba:	431a      	orrs	r2, r3
    f0bc:	9b04      	ldr	r3, [sp, #16]
    f0be:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f0c0:	9b01      	ldr	r3, [sp, #4]
    f0c2:	685b      	ldr	r3, [r3, #4]
    f0c4:	2b00      	cmp	r3, #0
    f0c6:	d116      	bne.n	f0f6 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f0c8:	9b05      	ldr	r3, [sp, #20]
    f0ca:	681b      	ldr	r3, [r3, #0]
    f0cc:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    f0d0:	9b05      	ldr	r3, [sp, #20]
    f0d2:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    f0d4:	9b04      	ldr	r3, [sp, #16]
    f0d6:	681b      	ldr	r3, [r3, #0]
    f0d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f0dc:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f0e0:	9a04      	ldr	r2, [sp, #16]
    f0e2:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f0e4:	9b04      	ldr	r3, [sp, #16]
    f0e6:	681a      	ldr	r2, [r3, #0]
    f0e8:	9b00      	ldr	r3, [sp, #0]
    f0ea:	0499      	lsls	r1, r3, #18
    f0ec:	4b0e      	ldr	r3, [pc, #56]	; (f128 <FlexCAN_SetRxMsgBuff+0xcc>)
    f0ee:	400b      	ands	r3, r1
    f0f0:	431a      	orrs	r2, r3
    f0f2:	9b04      	ldr	r3, [sp, #16]
    f0f4:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    f0f6:	9b01      	ldr	r3, [sp, #4]
    f0f8:	681b      	ldr	r3, [r3, #0]
    f0fa:	2b0f      	cmp	r3, #15
    f0fc:	d00f      	beq.n	f11e <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    f0fe:	9b05      	ldr	r3, [sp, #20]
    f100:	681b      	ldr	r3, [r3, #0]
    f102:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    f106:	9b05      	ldr	r3, [sp, #20]
    f108:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f10a:	9b05      	ldr	r3, [sp, #20]
    f10c:	681a      	ldr	r2, [r3, #0]
    f10e:	9b01      	ldr	r3, [sp, #4]
    f110:	681b      	ldr	r3, [r3, #0]
    f112:	061b      	lsls	r3, r3, #24
    f114:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f118:	431a      	orrs	r2, r3
    f11a:	9b05      	ldr	r3, [sp, #20]
    f11c:	601a      	str	r2, [r3, #0]
    }
}
    f11e:	bf00      	nop
    f120:	b007      	add	sp, #28
    f122:	f85d fb04 	ldr.w	pc, [sp], #4
    f126:	bf00      	nop
    f128:	1ffc0000 	.word	0x1ffc0000

0000f12c <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    f12c:	b500      	push	{lr}
    f12e:	b085      	sub	sp, #20
    f130:	9001      	str	r0, [sp, #4]
    f132:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    f134:	2300      	movs	r3, #0
    f136:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f138:	9900      	ldr	r1, [sp, #0]
    f13a:	9801      	ldr	r0, [sp, #4]
    f13c:	f7ff fb62 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    f140:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f142:	9b02      	ldr	r3, [sp, #8]
    f144:	681b      	ldr	r3, [r3, #0]
    f146:	b29b      	uxth	r3, r3
    f148:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    f14a:	9b03      	ldr	r3, [sp, #12]
}
    f14c:	4618      	mov	r0, r3
    f14e:	b005      	add	sp, #20
    f150:	f85d fb04 	ldr.w	pc, [sp], #4

0000f154 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    f154:	b500      	push	{lr}
    f156:	b08d      	sub	sp, #52	; 0x34
    f158:	9003      	str	r0, [sp, #12]
    f15a:	9102      	str	r1, [sp, #8]
    f15c:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f15e:	9902      	ldr	r1, [sp, #8]
    f160:	9803      	ldr	r0, [sp, #12]
    f162:	f7ff fb4f 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    f166:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f16a:	3304      	adds	r3, #4
    f16c:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    f16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f170:	3308      	adds	r3, #8
    f172:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f176:	3308      	adds	r3, #8
    f178:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    f17a:	2300      	movs	r3, #0
    f17c:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    f17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f180:	681b      	ldr	r3, [r3, #0]
    f182:	0c1b      	lsrs	r3, r3, #16
    f184:	b2db      	uxtb	r3, r3
    f186:	f003 030f 	and.w	r3, r3, #15
    f18a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    f18e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f192:	4618      	mov	r0, r3
    f194:	f7ff faed 	bl	e772 <FlexCAN_ComputePayloadSize>
    f198:	4603      	mov	r3, r0
    f19a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    f19e:	9b01      	ldr	r3, [sp, #4]
    f1a0:	3308      	adds	r3, #8
    f1a2:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    f1a4:	9902      	ldr	r1, [sp, #8]
    f1a6:	9803      	ldr	r0, [sp, #12]
    f1a8:	f7ff fe5a 	bl	ee60 <FlexCAN_GetMbPayloadSize>
    f1ac:	4603      	mov	r3, r0
    f1ae:	461a      	mov	r2, r3
    f1b0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f1b4:	4293      	cmp	r3, r2
    f1b6:	d906      	bls.n	f1c6 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    f1b8:	9902      	ldr	r1, [sp, #8]
    f1ba:	9803      	ldr	r0, [sp, #12]
    f1bc:	f7ff fe50 	bl	ee60 <FlexCAN_GetMbPayloadSize>
    f1c0:	4603      	mov	r3, r0
    f1c2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    f1c6:	9b01      	ldr	r3, [sp, #4]
    f1c8:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    f1cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    f1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1d2:	681a      	ldr	r2, [r3, #0]
    f1d4:	9b01      	ldr	r3, [sp, #4]
    f1d6:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    f1d8:	9b01      	ldr	r3, [sp, #4]
    f1da:	681b      	ldr	r3, [r3, #0]
    f1dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    f1e0:	2b00      	cmp	r3, #0
    f1e2:	d004      	beq.n	f1ee <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    f1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f1e6:	681a      	ldr	r2, [r3, #0]
    f1e8:	9b01      	ldr	r3, [sp, #4]
    f1ea:	605a      	str	r2, [r3, #4]
    f1ec:	e004      	b.n	f1f8 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    f1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f1f0:	681b      	ldr	r3, [r3, #0]
    f1f2:	0c9a      	lsrs	r2, r3, #18
    f1f4:	9b01      	ldr	r3, [sp, #4]
    f1f6:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f1f8:	9b01      	ldr	r3, [sp, #4]
    f1fa:	681b      	ldr	r3, [r3, #0]
    f1fc:	b29a      	uxth	r2, r3
    f1fe:	9b01      	ldr	r3, [sp, #4]
    f200:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f202:	2300      	movs	r3, #0
    f204:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f208:	e025      	b.n	f256 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    f20a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f20e:	089b      	lsrs	r3, r3, #2
    f210:	b2db      	uxtb	r3, r3
    f212:	009b      	lsls	r3, r3, #2
    f214:	9a07      	ldr	r2, [sp, #28]
    f216:	4413      	add	r3, r2
    f218:	681b      	ldr	r3, [r3, #0]
    f21a:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    f21c:	9b04      	ldr	r3, [sp, #16]
    f21e:	0e1a      	lsrs	r2, r3, #24
    f220:	9b04      	ldr	r3, [sp, #16]
    f222:	0a1b      	lsrs	r3, r3, #8
    f224:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f228:	431a      	orrs	r2, r3
    f22a:	9b04      	ldr	r3, [sp, #16]
    f22c:	021b      	lsls	r3, r3, #8
    f22e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f232:	ea42 0103 	orr.w	r1, r2, r3
    f236:	9b04      	ldr	r3, [sp, #16]
    f238:	061a      	lsls	r2, r3, #24
    f23a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f23e:	089b      	lsrs	r3, r3, #2
    f240:	b2db      	uxtb	r3, r3
    f242:	009b      	lsls	r3, r3, #2
    f244:	9806      	ldr	r0, [sp, #24]
    f246:	4403      	add	r3, r0
    f248:	430a      	orrs	r2, r1
    f24a:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f24c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f250:	3304      	adds	r3, #4
    f252:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f256:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f25a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f25e:	f023 0303 	bic.w	r3, r3, #3
    f262:	429a      	cmp	r2, r3
    f264:	d3d1      	bcc.n	f20a <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    f266:	e014      	b.n	f292 <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    f268:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f26c:	f083 0303 	eor.w	r3, r3, #3
    f270:	b2db      	uxtb	r3, r3
    f272:	461a      	mov	r2, r3
    f274:	9b08      	ldr	r3, [sp, #32]
    f276:	441a      	add	r2, r3
    f278:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f27c:	7812      	ldrb	r2, [r2, #0]
    f27e:	b2d1      	uxtb	r1, r2
    f280:	9a01      	ldr	r2, [sp, #4]
    f282:	4413      	add	r3, r2
    f284:	460a      	mov	r2, r1
    f286:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    f288:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f28c:	3301      	adds	r3, #1
    f28e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f292:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f296:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f29a:	429a      	cmp	r2, r3
    f29c:	d3e4      	bcc.n	f268 <FlexCAN_GetMsgBuff+0x114>
    }
}
    f29e:	bf00      	nop
    f2a0:	bf00      	nop
    f2a2:	b00d      	add	sp, #52	; 0x34
    f2a4:	f85d fb04 	ldr.w	pc, [sp], #4

0000f2a8 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    f2a8:	b500      	push	{lr}
    f2aa:	b08d      	sub	sp, #52	; 0x34
    f2ac:	9003      	str	r0, [sp, #12]
    f2ae:	9102      	str	r1, [sp, #8]
    f2b0:	9201      	str	r2, [sp, #4]
    f2b2:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    f2b4:	2300      	movs	r3, #0
    f2b6:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    f2b8:	9b03      	ldr	r3, [sp, #12]
    f2ba:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2be:	3304      	adds	r3, #4
    f2c0:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2c4:	3308      	adds	r3, #8
    f2c6:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2ca:	3308      	adds	r3, #8
    f2cc:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    f2ce:	9b00      	ldr	r3, [sp, #0]
    f2d0:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    f2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    f2d8:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    f2da:	9b08      	ldr	r3, [sp, #32]
    f2dc:	2200      	movs	r2, #0
    f2de:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    f2e0:	9b02      	ldr	r3, [sp, #8]
    f2e2:	689b      	ldr	r3, [r3, #8]
    f2e4:	b2db      	uxtb	r3, r3
    f2e6:	4618      	mov	r0, r3
    f2e8:	f7ff f9f4 	bl	e6d4 <FlexCAN_ComputeDLCValue>
    f2ec:	4603      	mov	r3, r0
    f2ee:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    f2f2:	9b00      	ldr	r3, [sp, #0]
    f2f4:	2b00      	cmp	r3, #0
    f2f6:	d065      	beq.n	f3c4 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f2f8:	2300      	movs	r3, #0
    f2fa:	930a      	str	r3, [sp, #40]	; 0x28
    f2fc:	e02c      	b.n	f358 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    f2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f300:	089b      	lsrs	r3, r3, #2
    f302:	009b      	lsls	r3, r3, #2
    f304:	9a05      	ldr	r2, [sp, #20]
    f306:	4413      	add	r3, r2
    f308:	681b      	ldr	r3, [r3, #0]
    f30a:	0e1a      	lsrs	r2, r3, #24
    f30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f30e:	089b      	lsrs	r3, r3, #2
    f310:	009b      	lsls	r3, r3, #2
    f312:	9905      	ldr	r1, [sp, #20]
    f314:	440b      	add	r3, r1
    f316:	681b      	ldr	r3, [r3, #0]
    f318:	0a1b      	lsrs	r3, r3, #8
    f31a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f31e:	431a      	orrs	r2, r3
    f320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f322:	089b      	lsrs	r3, r3, #2
    f324:	009b      	lsls	r3, r3, #2
    f326:	9905      	ldr	r1, [sp, #20]
    f328:	440b      	add	r3, r1
    f32a:	681b      	ldr	r3, [r3, #0]
    f32c:	021b      	lsls	r3, r3, #8
    f32e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f332:	ea42 0103 	orr.w	r1, r2, r3
    f336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f338:	089b      	lsrs	r3, r3, #2
    f33a:	009b      	lsls	r3, r3, #2
    f33c:	9a05      	ldr	r2, [sp, #20]
    f33e:	4413      	add	r3, r2
    f340:	681b      	ldr	r3, [r3, #0]
    f342:	061a      	lsls	r2, r3, #24
    f344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f346:	089b      	lsrs	r3, r3, #2
    f348:	009b      	lsls	r3, r3, #2
    f34a:	9806      	ldr	r0, [sp, #24]
    f34c:	4403      	add	r3, r0
    f34e:	430a      	orrs	r2, r1
    f350:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f354:	3304      	adds	r3, #4
    f356:	930a      	str	r3, [sp, #40]	; 0x28
    f358:	9b02      	ldr	r3, [sp, #8]
    f35a:	689b      	ldr	r3, [r3, #8]
    f35c:	f023 0303 	bic.w	r3, r3, #3
    f360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f362:	429a      	cmp	r2, r3
    f364:	d3cb      	bcc.n	f2fe <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    f366:	e00c      	b.n	f382 <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    f368:	9a00      	ldr	r2, [sp, #0]
    f36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f36c:	441a      	add	r2, r3
    f36e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f370:	f083 0303 	eor.w	r3, r3, #3
    f374:	9907      	ldr	r1, [sp, #28]
    f376:	440b      	add	r3, r1
    f378:	7812      	ldrb	r2, [r2, #0]
    f37a:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    f37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f37e:	3301      	adds	r3, #1
    f380:	930a      	str	r3, [sp, #40]	; 0x28
    f382:	9b02      	ldr	r3, [sp, #8]
    f384:	689b      	ldr	r3, [r3, #8]
    f386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f388:	429a      	cmp	r2, r3
    f38a:	d3ed      	bcc.n	f368 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    f38c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f390:	4618      	mov	r0, r3
    f392:	f7ff f9ee 	bl	e772 <FlexCAN_ComputePayloadSize>
    f396:	4603      	mov	r3, r0
    f398:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f39c:	9b02      	ldr	r3, [sp, #8]
    f39e:	689b      	ldr	r3, [r3, #8]
    f3a0:	930a      	str	r3, [sp, #40]	; 0x28
    f3a2:	e00a      	b.n	f3ba <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    f3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3a6:	f083 0303 	eor.w	r3, r3, #3
    f3aa:	9a07      	ldr	r2, [sp, #28]
    f3ac:	4413      	add	r3, r2
    f3ae:	9a02      	ldr	r2, [sp, #8]
    f3b0:	7b52      	ldrb	r2, [r2, #13]
    f3b2:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3b6:	3301      	adds	r3, #1
    f3b8:	930a      	str	r3, [sp, #40]	; 0x28
    f3ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
    f3be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f3c0:	429a      	cmp	r2, r3
    f3c2:	d3ef      	bcc.n	f3a4 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f3c4:	9b02      	ldr	r3, [sp, #8]
    f3c6:	685b      	ldr	r3, [r3, #4]
    f3c8:	2b01      	cmp	r3, #1
    f3ca:	d111      	bne.n	f3f0 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f3cc:	9b08      	ldr	r3, [sp, #32]
    f3ce:	681b      	ldr	r3, [r3, #0]
    f3d0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f3d4:	9b08      	ldr	r3, [sp, #32]
    f3d6:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f3d8:	9b08      	ldr	r3, [sp, #32]
    f3da:	681a      	ldr	r2, [r3, #0]
    f3dc:	9b01      	ldr	r3, [sp, #4]
    f3de:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f3e2:	431a      	orrs	r2, r3
    f3e4:	9b08      	ldr	r3, [sp, #32]
    f3e6:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f3e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3ea:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    f3ee:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f3f0:	9b02      	ldr	r3, [sp, #8]
    f3f2:	685b      	ldr	r3, [r3, #4]
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	d114      	bne.n	f422 <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    f3f8:	9b08      	ldr	r3, [sp, #32]
    f3fa:	681b      	ldr	r3, [r3, #0]
    f3fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f400:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f404:	9a08      	ldr	r2, [sp, #32]
    f406:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f408:	9b08      	ldr	r3, [sp, #32]
    f40a:	681a      	ldr	r2, [r3, #0]
    f40c:	9b01      	ldr	r3, [sp, #4]
    f40e:	0499      	lsls	r1, r3, #18
    f410:	4b2b      	ldr	r3, [pc, #172]	; (f4c0 <FlexCAN_SetTxMsgBuff+0x218>)
    f412:	400b      	ands	r3, r1
    f414:	431a      	orrs	r2, r3
    f416:	9b08      	ldr	r3, [sp, #32]
    f418:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f41c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    f420:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    f422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f424:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    f428:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    f42a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f42e:	041b      	lsls	r3, r3, #16
    f430:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    f434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f436:	4313      	orrs	r3, r2
    f438:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    f43a:	9b02      	ldr	r3, [sp, #8]
    f43c:	681b      	ldr	r3, [r3, #0]
    f43e:	2b0f      	cmp	r3, #15
    f440:	d03a      	beq.n	f4b8 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    f442:	9b02      	ldr	r3, [sp, #8]
    f444:	681b      	ldr	r3, [r3, #0]
    f446:	2b1c      	cmp	r3, #28
    f448:	d104      	bne.n	f454 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f44c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f450:	930b      	str	r3, [sp, #44]	; 0x2c
    f452:	e007      	b.n	f464 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    f454:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    f458:	2b00      	cmp	r3, #0
    f45a:	d003      	beq.n	f464 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f45c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f45e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f462:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    f464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f466:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    f46a:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    f46c:	9b02      	ldr	r3, [sp, #8]
    f46e:	7b1b      	ldrb	r3, [r3, #12]
    f470:	2b00      	cmp	r3, #0
    f472:	d00e      	beq.n	f492 <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    f474:	9b02      	ldr	r3, [sp, #8]
    f476:	681b      	ldr	r3, [r3, #0]
    f478:	061b      	lsls	r3, r3, #24
    f47a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    f47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f480:	4313      	orrs	r3, r2
    f482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f486:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    f488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f48a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    f48e:	930b      	str	r3, [sp, #44]	; 0x2c
    f490:	e007      	b.n	f4a2 <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f492:	9b02      	ldr	r3, [sp, #8]
    f494:	681b      	ldr	r3, [r3, #0]
    f496:	061b      	lsls	r3, r3, #24
    f498:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f49c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f49e:	4313      	orrs	r3, r2
    f4a0:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    f4a2:	9b02      	ldr	r3, [sp, #8]
    f4a4:	7b9b      	ldrb	r3, [r3, #14]
    f4a6:	2b00      	cmp	r3, #0
    f4a8:	d003      	beq.n	f4b2 <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    f4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f4b0:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    f4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f4b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f4b6:	601a      	str	r2, [r3, #0]
        }
}
    f4b8:	bf00      	nop
    f4ba:	b00d      	add	sp, #52	; 0x34
    f4bc:	f85d fb04 	ldr.w	pc, [sp], #4
    f4c0:	1ffc0000 	.word	0x1ffc0000

0000f4c4 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    f4c4:	b500      	push	{lr}
    f4c6:	b08f      	sub	sp, #60	; 0x3c
    f4c8:	9001      	str	r0, [sp, #4]
    f4ca:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    f4cc:	9b01      	ldr	r3, [sp, #4]
    f4ce:	3380      	adds	r3, #128	; 0x80
    f4d0:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    f4d2:	2300      	movs	r3, #0
    f4d4:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    f4d6:	2300      	movs	r3, #0
    f4d8:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    f4da:	2300      	movs	r3, #0
    f4dc:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    f4de:	2300      	movs	r3, #0
    f4e0:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    f4e2:	2308      	movs	r3, #8
    f4e4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    f4e8:	9b00      	ldr	r3, [sp, #0]
    f4ea:	3b01      	subs	r3, #1
    f4ec:	4619      	mov	r1, r3
    f4ee:	9801      	ldr	r0, [sp, #4]
    f4f0:	f7ff fcb6 	bl	ee60 <FlexCAN_GetMbPayloadSize>
    f4f4:	4603      	mov	r3, r0
    f4f6:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    f4fa:	2300      	movs	r3, #0
    f4fc:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    f4fe:	2300      	movs	r3, #0
    f500:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    f502:	2300      	movs	r3, #0
    f504:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    f506:	9b00      	ldr	r3, [sp, #0]
    f508:	3b01      	subs	r3, #1
    f50a:	4619      	mov	r1, r3
    f50c:	9801      	ldr	r0, [sp, #4]
    f50e:	f7ff f979 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    f512:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    f514:	f89d 2016 	ldrb.w	r2, [sp, #22]
    f518:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f51a:	441a      	add	r2, r3
    f51c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f520:	4413      	add	r3, r2
    f522:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    f524:	9801      	ldr	r0, [sp, #4]
    f526:	f7ff f9e7 	bl	e8f8 <FlexCAN_GetMaxMbNum>
    f52a:	4603      	mov	r3, r0
    f52c:	011b      	lsls	r3, r3, #4
    f52e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f530:	4413      	add	r3, r2
    f532:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    f534:	9a04      	ldr	r2, [sp, #16]
    f536:	9b03      	ldr	r3, [sp, #12]
    f538:	429a      	cmp	r2, r3
    f53a:	d806      	bhi.n	f54a <FlexCAN_SetMaxMsgBuffNum+0x86>
    f53c:	9801      	ldr	r0, [sp, #4]
    f53e:	f7ff f9db 	bl	e8f8 <FlexCAN_GetMaxMbNum>
    f542:	4602      	mov	r2, r0
    f544:	9b00      	ldr	r3, [sp, #0]
    f546:	4293      	cmp	r3, r2
    f548:	d901      	bls.n	f54e <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    f54a:	2304      	movs	r3, #4
    f54c:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    f54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f550:	2b00      	cmp	r3, #0
    f552:	d142      	bne.n	f5da <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    f554:	9b01      	ldr	r3, [sp, #4]
    f556:	681b      	ldr	r3, [r3, #0]
    f558:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    f55c:	9b00      	ldr	r3, [sp, #0]
    f55e:	3b01      	subs	r3, #1
    f560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f564:	431a      	orrs	r2, r3
    f566:	9b01      	ldr	r3, [sp, #4]
    f568:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    f56a:	9b01      	ldr	r3, [sp, #4]
    f56c:	681b      	ldr	r3, [r3, #0]
    f56e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    f572:	2b00      	cmp	r3, #0
    f574:	d131      	bne.n	f5da <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f576:	2300      	movs	r3, #0
    f578:	930d      	str	r3, [sp, #52]	; 0x34
    f57a:	e02a      	b.n	f5d2 <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    f57c:	990d      	ldr	r1, [sp, #52]	; 0x34
    f57e:	9801      	ldr	r0, [sp, #4]
    f580:	f7ff f940 	bl	e804 <FlexCAN_GetMsgBuffRegion>
    f584:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f586:	9b08      	ldr	r3, [sp, #32]
    f588:	3304      	adds	r3, #4
    f58a:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f58c:	9b08      	ldr	r3, [sp, #32]
    f58e:	3308      	adds	r3, #8
    f590:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    f592:	9b08      	ldr	r3, [sp, #32]
    f594:	2200      	movs	r2, #0
    f596:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    f598:	9b07      	ldr	r3, [sp, #28]
    f59a:	2200      	movs	r2, #0
    f59c:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    f59e:	990d      	ldr	r1, [sp, #52]	; 0x34
    f5a0:	9801      	ldr	r0, [sp, #4]
    f5a2:	f7ff fc5d 	bl	ee60 <FlexCAN_GetMbPayloadSize>
    f5a6:	4603      	mov	r3, r0
    f5a8:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f5ac:	2300      	movs	r3, #0
    f5ae:	930c      	str	r3, [sp, #48]	; 0x30
    f5b0:	e007      	b.n	f5c2 <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    f5b2:	9a06      	ldr	r2, [sp, #24]
    f5b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f5b6:	4413      	add	r3, r2
    f5b8:	2200      	movs	r2, #0
    f5ba:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f5bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f5be:	3301      	adds	r3, #1
    f5c0:	930c      	str	r3, [sp, #48]	; 0x30
    f5c2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    f5c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f5c8:	429a      	cmp	r2, r3
    f5ca:	d3f2      	bcc.n	f5b2 <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f5cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f5ce:	3301      	adds	r3, #1
    f5d0:	930d      	str	r3, [sp, #52]	; 0x34
    f5d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f5d4:	9b00      	ldr	r3, [sp, #0]
    f5d6:	429a      	cmp	r2, r3
    f5d8:	d3d0      	bcc.n	f57c <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    f5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    f5dc:	4618      	mov	r0, r3
    f5de:	b00f      	add	sp, #60	; 0x3c
    f5e0:	f85d fb04 	ldr.w	pc, [sp], #4

0000f5e4 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    f5e4:	b500      	push	{lr}
    f5e6:	b083      	sub	sp, #12
    f5e8:	9001      	str	r0, [sp, #4]
    f5ea:	9100      	str	r1, [sp, #0]
    switch (mode)
    f5ec:	9b00      	ldr	r3, [sp, #0]
    f5ee:	2b02      	cmp	r3, #2
    f5f0:	d01d      	beq.n	f62e <FlexCAN_SetOperationMode+0x4a>
    f5f2:	9b00      	ldr	r3, [sp, #0]
    f5f4:	2b02      	cmp	r3, #2
    f5f6:	d82b      	bhi.n	f650 <FlexCAN_SetOperationMode+0x6c>
    f5f8:	9b00      	ldr	r3, [sp, #0]
    f5fa:	2b00      	cmp	r3, #0
    f5fc:	d003      	beq.n	f606 <FlexCAN_SetOperationMode+0x22>
    f5fe:	9b00      	ldr	r3, [sp, #0]
    f600:	2b01      	cmp	r3, #1
    f602:	d00d      	beq.n	f620 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    f604:	e024      	b.n	f650 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f606:	9b01      	ldr	r3, [sp, #4]
    f608:	685b      	ldr	r3, [r3, #4]
    f60a:	f023 0208 	bic.w	r2, r3, #8
    f60e:	9b01      	ldr	r3, [sp, #4]
    f610:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    f612:	9b01      	ldr	r3, [sp, #4]
    f614:	685b      	ldr	r3, [r3, #4]
    f616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    f61a:	9b01      	ldr	r3, [sp, #4]
    f61c:	605a      	str	r2, [r3, #4]
            break;
    f61e:	e018      	b.n	f652 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    f620:	9b01      	ldr	r3, [sp, #4]
    f622:	685b      	ldr	r3, [r3, #4]
    f624:	f043 0208 	orr.w	r2, r3, #8
    f628:	9b01      	ldr	r3, [sp, #4]
    f62a:	605a      	str	r2, [r3, #4]
            break;
    f62c:	e011      	b.n	f652 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    f62e:	9b01      	ldr	r3, [sp, #4]
    f630:	685b      	ldr	r3, [r3, #4]
    f632:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    f636:	9b01      	ldr	r3, [sp, #4]
    f638:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f63a:	9b01      	ldr	r3, [sp, #4]
    f63c:	685b      	ldr	r3, [r3, #4]
    f63e:	f023 0208 	bic.w	r2, r3, #8
    f642:	9b01      	ldr	r3, [sp, #4]
    f644:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    f646:	2101      	movs	r1, #1
    f648:	9801      	ldr	r0, [sp, #4]
    f64a:	f7fe ff7f 	bl	e54c <FlexCAN_SetSelfReception>
            break;
    f64e:	e000      	b.n	f652 <FlexCAN_SetOperationMode+0x6e>
            break;
    f650:	bf00      	nop
    }
}
    f652:	bf00      	nop
    f654:	b003      	add	sp, #12
    f656:	f85d fb04 	ldr.w	pc, [sp], #4

0000f65a <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    f65a:	b500      	push	{lr}
    f65c:	b08d      	sub	sp, #52	; 0x34
    f65e:	9003      	str	r0, [sp, #12]
    f660:	9102      	str	r1, [sp, #8]
    f662:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    f664:	2300      	movs	r3, #0
    f666:	9309      	str	r3, [sp, #36]	; 0x24
    f668:	2300      	movs	r3, #0
    f66a:	9308      	str	r3, [sp, #32]
    f66c:	2300      	movs	r3, #0
    f66e:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    f670:	9b03      	ldr	r3, [sp, #12]
    f672:	33e0      	adds	r3, #224	; 0xe0
    f674:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    f676:	9b03      	ldr	r3, [sp, #12]
    f678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f67a:	0e1b      	lsrs	r3, r3, #24
    f67c:	f003 030f 	and.w	r3, r3, #15
    f680:	9305      	str	r3, [sp, #20]
    f682:	9b02      	ldr	r3, [sp, #8]
    f684:	2b03      	cmp	r3, #3
    f686:	f200 81e7 	bhi.w	fa58 <FlexCAN_SetRxFifoFilter+0x3fe>
    f68a:	a201      	add	r2, pc, #4	; (adr r2, f690 <FlexCAN_SetRxFifoFilter+0x36>)
    f68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f690:	0000f6a1 	.word	0x0000f6a1
    f694:	0000f73b 	.word	0x0000f73b
    f698:	0000f875 	.word	0x0000f875
    f69c:	0000fa43 	.word	0x0000fa43
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f6a0:	f004 ff18 	bl	144d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f6a4:	9b03      	ldr	r3, [sp, #12]
    f6a6:	681b      	ldr	r3, [r3, #0]
    f6a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    f6ac:	9b03      	ldr	r3, [sp, #12]
    f6ae:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f6b0:	f004 ff3c 	bl	1452c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f6b4:	2300      	movs	r3, #0
    f6b6:	930b      	str	r3, [sp, #44]	; 0x2c
    f6b8:	e038      	b.n	f72c <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    f6ba:	2300      	movs	r3, #0
    f6bc:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    f6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6c0:	00db      	lsls	r3, r3, #3
    f6c2:	9a01      	ldr	r2, [sp, #4]
    f6c4:	4413      	add	r3, r2
    f6c6:	781b      	ldrb	r3, [r3, #0]
    f6c8:	2b00      	cmp	r3, #0
    f6ca:	d002      	beq.n	f6d2 <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f6cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f6d0:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    f6d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6d4:	00db      	lsls	r3, r3, #3
    f6d6:	9a01      	ldr	r2, [sp, #4]
    f6d8:	4413      	add	r3, r2
    f6da:	785b      	ldrb	r3, [r3, #1]
    f6dc:	2b00      	cmp	r3, #0
    f6de:	d013      	beq.n	f708 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f6e0:	9b07      	ldr	r3, [sp, #28]
    f6e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f6e6:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    f6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6ea:	00db      	lsls	r3, r3, #3
    f6ec:	9a01      	ldr	r2, [sp, #4]
    f6ee:	4413      	add	r3, r2
    f6f0:	685b      	ldr	r3, [r3, #4]
    f6f2:	005b      	lsls	r3, r3, #1
    f6f4:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    f6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6fa:	009b      	lsls	r3, r3, #2
    f6fc:	9a06      	ldr	r2, [sp, #24]
    f6fe:	4413      	add	r3, r2
    f700:	9a07      	ldr	r2, [sp, #28]
    f702:	440a      	add	r2, r1
    f704:	601a      	str	r2, [r3, #0]
    f706:	e00e      	b.n	f726 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    f708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f70a:	00db      	lsls	r3, r3, #3
    f70c:	9a01      	ldr	r2, [sp, #4]
    f70e:	4413      	add	r3, r2
    f710:	685b      	ldr	r3, [r3, #4]
    f712:	04da      	lsls	r2, r3, #19
    f714:	4b9d      	ldr	r3, [pc, #628]	; (f98c <FlexCAN_SetRxFifoFilter+0x332>)
    f716:	4013      	ands	r3, r2
    f718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f71a:	0092      	lsls	r2, r2, #2
    f71c:	9906      	ldr	r1, [sp, #24]
    f71e:	440a      	add	r2, r1
    f720:	9907      	ldr	r1, [sp, #28]
    f722:	440b      	add	r3, r1
    f724:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f728:	3301      	adds	r3, #1
    f72a:	930b      	str	r3, [sp, #44]	; 0x2c
    f72c:	9b05      	ldr	r3, [sp, #20]
    f72e:	3301      	adds	r3, #1
    f730:	00db      	lsls	r3, r3, #3
    f732:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f734:	429a      	cmp	r2, r3
    f736:	d3c0      	bcc.n	f6ba <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    f738:	e18f      	b.n	fa5a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f73a:	f004 fecb 	bl	144d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    f73e:	9b03      	ldr	r3, [sp, #12]
    f740:	681b      	ldr	r3, [r3, #0]
    f742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f746:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    f74a:	9b03      	ldr	r3, [sp, #12]
    f74c:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f74e:	f004 feed 	bl	1452c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f752:	2300      	movs	r3, #0
    f754:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f756:	2300      	movs	r3, #0
    f758:	930b      	str	r3, [sp, #44]	; 0x2c
    f75a:	e083      	b.n	f864 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    f75c:	2300      	movs	r3, #0
    f75e:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    f760:	2300      	movs	r3, #0
    f762:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    f764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f766:	00db      	lsls	r3, r3, #3
    f768:	9a01      	ldr	r2, [sp, #4]
    f76a:	4413      	add	r3, r2
    f76c:	781b      	ldrb	r3, [r3, #0]
    f76e:	2b00      	cmp	r3, #0
    f770:	d002      	beq.n	f778 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f772:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f776:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    f778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f77a:	3301      	adds	r3, #1
    f77c:	00db      	lsls	r3, r3, #3
    f77e:	9a01      	ldr	r2, [sp, #4]
    f780:	4413      	add	r3, r2
    f782:	781b      	ldrb	r3, [r3, #0]
    f784:	2b00      	cmp	r3, #0
    f786:	d002      	beq.n	f78e <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    f788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f78c:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    f78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f790:	00db      	lsls	r3, r3, #3
    f792:	9a01      	ldr	r2, [sp, #4]
    f794:	4413      	add	r3, r2
    f796:	785b      	ldrb	r3, [r3, #1]
    f798:	2b00      	cmp	r3, #0
    f79a:	d014      	beq.n	f7c6 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f79e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f7a2:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7a6:	00db      	lsls	r3, r3, #3
    f7a8:	9a01      	ldr	r2, [sp, #4]
    f7aa:	4413      	add	r3, r2
    f7ac:	685b      	ldr	r3, [r3, #4]
    f7ae:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    f7b0:	041a      	lsls	r2, r3, #16
    f7b2:	4b77      	ldr	r3, [pc, #476]	; (f990 <FlexCAN_SetRxFifoFilter+0x336>)
    f7b4:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f7b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f7b8:	0092      	lsls	r2, r2, #2
    f7ba:	9906      	ldr	r1, [sp, #24]
    f7bc:	440a      	add	r2, r1
    f7be:	9909      	ldr	r1, [sp, #36]	; 0x24
    f7c0:	440b      	add	r3, r1
    f7c2:	6013      	str	r3, [r2, #0]
    f7c4:	e00e      	b.n	f7e4 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7c8:	00db      	lsls	r3, r3, #3
    f7ca:	9a01      	ldr	r2, [sp, #4]
    f7cc:	4413      	add	r3, r2
    f7ce:	685b      	ldr	r3, [r3, #4]
    f7d0:	04da      	lsls	r2, r3, #19
    f7d2:	4b6e      	ldr	r3, [pc, #440]	; (f98c <FlexCAN_SetRxFifoFilter+0x332>)
    f7d4:	4013      	ands	r3, r2
    f7d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f7d8:	0092      	lsls	r2, r2, #2
    f7da:	9906      	ldr	r1, [sp, #24]
    f7dc:	440a      	add	r2, r1
    f7de:	9909      	ldr	r1, [sp, #36]	; 0x24
    f7e0:	440b      	add	r3, r1
    f7e2:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f7e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7e6:	3301      	adds	r3, #1
    f7e8:	00db      	lsls	r3, r3, #3
    f7ea:	9a01      	ldr	r2, [sp, #4]
    f7ec:	4413      	add	r3, r2
    f7ee:	785b      	ldrb	r3, [r3, #1]
    f7f0:	2b00      	cmp	r3, #0
    f7f2:	d01a      	beq.n	f82a <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    f7f4:	9b08      	ldr	r3, [sp, #32]
    f7f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f7fa:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f7fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7fe:	009b      	lsls	r3, r3, #2
    f800:	9a06      	ldr	r2, [sp, #24]
    f802:	4413      	add	r3, r2
    f804:	6819      	ldr	r1, [r3, #0]
    f806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f808:	3301      	adds	r3, #1
    f80a:	00db      	lsls	r3, r3, #3
    f80c:	9a01      	ldr	r2, [sp, #4]
    f80e:	4413      	add	r3, r2
    f810:	685b      	ldr	r3, [r3, #4]
    f812:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    f814:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f818:	9b08      	ldr	r3, [sp, #32]
    f81a:	441a      	add	r2, r3
    f81c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f81e:	009b      	lsls	r3, r3, #2
    f820:	9806      	ldr	r0, [sp, #24]
    f822:	4403      	add	r3, r0
    f824:	430a      	orrs	r2, r1
    f826:	601a      	str	r2, [r3, #0]
    f828:	e016      	b.n	f858 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f82c:	009b      	lsls	r3, r3, #2
    f82e:	9a06      	ldr	r2, [sp, #24]
    f830:	4413      	add	r3, r2
    f832:	6819      	ldr	r1, [r3, #0]
    f834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f836:	3301      	adds	r3, #1
    f838:	00db      	lsls	r3, r3, #3
    f83a:	9a01      	ldr	r2, [sp, #4]
    f83c:	4413      	add	r3, r2
    f83e:	685b      	ldr	r3, [r3, #4]
    f840:	00da      	lsls	r2, r3, #3
    f842:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    f846:	4013      	ands	r3, r2
    f848:	9a08      	ldr	r2, [sp, #32]
    f84a:	441a      	add	r2, r3
    f84c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f84e:	009b      	lsls	r3, r3, #2
    f850:	9806      	ldr	r0, [sp, #24]
    f852:	4403      	add	r3, r0
    f854:	430a      	orrs	r2, r1
    f856:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    f858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f85a:	3302      	adds	r3, #2
    f85c:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f860:	3301      	adds	r3, #1
    f862:	930b      	str	r3, [sp, #44]	; 0x2c
    f864:	9b05      	ldr	r3, [sp, #20]
    f866:	3301      	adds	r3, #1
    f868:	00db      	lsls	r3, r3, #3
    f86a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f86c:	429a      	cmp	r2, r3
    f86e:	f4ff af75 	bcc.w	f75c <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    f872:	e0f2      	b.n	fa5a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f874:	f004 fe2e 	bl	144d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f878:	9b03      	ldr	r3, [sp, #12]
    f87a:	681b      	ldr	r3, [r3, #0]
    f87c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f880:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    f884:	9b03      	ldr	r3, [sp, #12]
    f886:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f888:	f004 fe50 	bl	1452c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f88c:	2300      	movs	r3, #0
    f88e:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f890:	2300      	movs	r3, #0
    f892:	930b      	str	r3, [sp, #44]	; 0x2c
    f894:	e0cd      	b.n	fa32 <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    f896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f898:	00db      	lsls	r3, r3, #3
    f89a:	9a01      	ldr	r2, [sp, #4]
    f89c:	4413      	add	r3, r2
    f89e:	785b      	ldrb	r3, [r3, #1]
    f8a0:	2b00      	cmp	r3, #0
    f8a2:	d00e      	beq.n	f8c2 <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8a6:	00db      	lsls	r3, r3, #3
    f8a8:	9a01      	ldr	r2, [sp, #4]
    f8aa:	4413      	add	r3, r2
    f8ac:	685b      	ldr	r3, [r3, #4]
    f8ae:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f8b0:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8b4:	009b      	lsls	r3, r3, #2
    f8b6:	9a06      	ldr	r2, [sp, #24]
    f8b8:	4413      	add	r3, r2
    f8ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f8bc:	440a      	add	r2, r1
    f8be:	601a      	str	r2, [r3, #0]
    f8c0:	e00d      	b.n	f8de <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8c4:	00db      	lsls	r3, r3, #3
    f8c6:	9a01      	ldr	r2, [sp, #4]
    f8c8:	4413      	add	r3, r2
    f8ca:	685b      	ldr	r3, [r3, #4]
    f8cc:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f8ce:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8d2:	009b      	lsls	r3, r3, #2
    f8d4:	9a06      	ldr	r2, [sp, #24]
    f8d6:	4413      	add	r3, r2
    f8d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f8da:	440a      	add	r2, r1
    f8dc:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8e0:	3301      	adds	r3, #1
    f8e2:	00db      	lsls	r3, r3, #3
    f8e4:	9a01      	ldr	r2, [sp, #4]
    f8e6:	4413      	add	r3, r2
    f8e8:	785b      	ldrb	r3, [r3, #1]
    f8ea:	2b00      	cmp	r3, #0
    f8ec:	d017      	beq.n	f91e <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8f0:	009b      	lsls	r3, r3, #2
    f8f2:	9a06      	ldr	r2, [sp, #24]
    f8f4:	4413      	add	r3, r2
    f8f6:	6819      	ldr	r1, [r3, #0]
    f8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8fa:	3301      	adds	r3, #1
    f8fc:	00db      	lsls	r3, r3, #3
    f8fe:	9a01      	ldr	r2, [sp, #4]
    f900:	4413      	add	r3, r2
    f902:	685b      	ldr	r3, [r3, #4]
    f904:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    f906:	041b      	lsls	r3, r3, #16
    f908:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f90e:	441a      	add	r2, r3
    f910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f912:	009b      	lsls	r3, r3, #2
    f914:	9806      	ldr	r0, [sp, #24]
    f916:	4403      	add	r3, r0
    f918:	430a      	orrs	r2, r1
    f91a:	601a      	str	r2, [r3, #0]
    f91c:	e016      	b.n	f94c <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f920:	009b      	lsls	r3, r3, #2
    f922:	9a06      	ldr	r2, [sp, #24]
    f924:	4413      	add	r3, r2
    f926:	6819      	ldr	r1, [r3, #0]
    f928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f92a:	3301      	adds	r3, #1
    f92c:	00db      	lsls	r3, r3, #3
    f92e:	9a01      	ldr	r2, [sp, #4]
    f930:	4413      	add	r3, r2
    f932:	685b      	ldr	r3, [r3, #4]
    f934:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    f936:	041b      	lsls	r3, r3, #16
    f938:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f93e:	441a      	add	r2, r3
    f940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f942:	009b      	lsls	r3, r3, #2
    f944:	9806      	ldr	r0, [sp, #24]
    f946:	4403      	add	r3, r0
    f948:	430a      	orrs	r2, r1
    f94a:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    f94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f94e:	3302      	adds	r3, #2
    f950:	00db      	lsls	r3, r3, #3
    f952:	9a01      	ldr	r2, [sp, #4]
    f954:	4413      	add	r3, r2
    f956:	785b      	ldrb	r3, [r3, #1]
    f958:	2b00      	cmp	r3, #0
    f95a:	d01b      	beq.n	f994 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f95c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f95e:	009b      	lsls	r3, r3, #2
    f960:	9a06      	ldr	r2, [sp, #24]
    f962:	4413      	add	r3, r2
    f964:	6819      	ldr	r1, [r3, #0]
    f966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f968:	3302      	adds	r3, #2
    f96a:	00db      	lsls	r3, r3, #3
    f96c:	9a01      	ldr	r2, [sp, #4]
    f96e:	4413      	add	r3, r2
    f970:	685b      	ldr	r3, [r3, #4]
    f972:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    f974:	021b      	lsls	r3, r3, #8
    f976:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f978:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f97a:	441a      	add	r2, r3
    f97c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f97e:	009b      	lsls	r3, r3, #2
    f980:	9806      	ldr	r0, [sp, #24]
    f982:	4403      	add	r3, r0
    f984:	430a      	orrs	r2, r1
    f986:	601a      	str	r2, [r3, #0]
    f988:	e01a      	b.n	f9c0 <FlexCAN_SetRxFifoFilter+0x366>
    f98a:	bf00      	nop
    f98c:	3ff80000 	.word	0x3ff80000
    f990:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f996:	009b      	lsls	r3, r3, #2
    f998:	9a06      	ldr	r2, [sp, #24]
    f99a:	4413      	add	r3, r2
    f99c:	6819      	ldr	r1, [r3, #0]
    f99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9a0:	3302      	adds	r3, #2
    f9a2:	00db      	lsls	r3, r3, #3
    f9a4:	9a01      	ldr	r2, [sp, #4]
    f9a6:	4413      	add	r3, r2
    f9a8:	685b      	ldr	r3, [r3, #4]
    f9aa:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    f9ac:	021b      	lsls	r3, r3, #8
    f9ae:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9b2:	441a      	add	r2, r3
    f9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9b6:	009b      	lsls	r3, r3, #2
    f9b8:	9806      	ldr	r0, [sp, #24]
    f9ba:	4403      	add	r3, r0
    f9bc:	430a      	orrs	r2, r1
    f9be:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    f9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9c2:	3303      	adds	r3, #3
    f9c4:	00db      	lsls	r3, r3, #3
    f9c6:	9a01      	ldr	r2, [sp, #4]
    f9c8:	4413      	add	r3, r2
    f9ca:	785b      	ldrb	r3, [r3, #1]
    f9cc:	2b00      	cmp	r3, #0
    f9ce:	d015      	beq.n	f9fc <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9d2:	009b      	lsls	r3, r3, #2
    f9d4:	9a06      	ldr	r2, [sp, #24]
    f9d6:	4413      	add	r3, r2
    f9d8:	6819      	ldr	r1, [r3, #0]
    f9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9dc:	3303      	adds	r3, #3
    f9de:	00db      	lsls	r3, r3, #3
    f9e0:	9a01      	ldr	r2, [sp, #4]
    f9e2:	4413      	add	r3, r2
    f9e4:	685b      	ldr	r3, [r3, #4]
    f9e6:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    f9e8:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9ec:	441a      	add	r2, r3
    f9ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9f0:	009b      	lsls	r3, r3, #2
    f9f2:	9806      	ldr	r0, [sp, #24]
    f9f4:	4403      	add	r3, r0
    f9f6:	430a      	orrs	r2, r1
    f9f8:	601a      	str	r2, [r3, #0]
    f9fa:	e014      	b.n	fa26 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    f9fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9fe:	009b      	lsls	r3, r3, #2
    fa00:	9a06      	ldr	r2, [sp, #24]
    fa02:	4413      	add	r3, r2
    fa04:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    fa06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa08:	3303      	adds	r3, #3
    fa0a:	00db      	lsls	r3, r3, #3
    fa0c:	9a01      	ldr	r2, [sp, #4]
    fa0e:	4413      	add	r3, r2
    fa10:	685b      	ldr	r3, [r3, #4]
    fa12:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    fa14:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    fa16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa18:	441a      	add	r2, r3
    fa1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa1c:	009b      	lsls	r3, r3, #2
    fa1e:	9806      	ldr	r0, [sp, #24]
    fa20:	4403      	add	r3, r0
    fa22:	430a      	orrs	r2, r1
    fa24:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    fa26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa28:	3304      	adds	r3, #4
    fa2a:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    fa2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa2e:	3301      	adds	r3, #1
    fa30:	930b      	str	r3, [sp, #44]	; 0x2c
    fa32:	9b05      	ldr	r3, [sp, #20]
    fa34:	3301      	adds	r3, #1
    fa36:	00db      	lsls	r3, r3, #3
    fa38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fa3a:	429a      	cmp	r2, r3
    fa3c:	f4ff af2b 	bcc.w	f896 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    fa40:	e00b      	b.n	fa5a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    fa42:	f004 fd47 	bl	144d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    fa46:	9b03      	ldr	r3, [sp, #12]
    fa48:	681b      	ldr	r3, [r3, #0]
    fa4a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    fa4e:	9b03      	ldr	r3, [sp, #12]
    fa50:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    fa52:	f004 fd6b 	bl	1452c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    fa56:	e000      	b.n	fa5a <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    fa58:	bf00      	nop
    }
}
    fa5a:	bf00      	nop
    fa5c:	b00d      	add	sp, #52	; 0x34
    fa5e:	f85d fb04 	ldr.w	pc, [sp], #4

0000fa62 <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    fa62:	b500      	push	{lr}
    fa64:	b08b      	sub	sp, #44	; 0x2c
    fa66:	9001      	str	r0, [sp, #4]
    fa68:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    fa6a:	9b01      	ldr	r3, [sp, #4]
    fa6c:	3380      	adds	r3, #128	; 0x80
    fa6e:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    fa70:	9b07      	ldr	r3, [sp, #28]
    fa72:	3304      	adds	r3, #4
    fa74:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    fa76:	9b07      	ldr	r3, [sp, #28]
    fa78:	3308      	adds	r3, #8
    fa7a:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    fa7c:	2300      	movs	r3, #0
    fa7e:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    fa80:	9b07      	ldr	r3, [sp, #28]
    fa82:	681b      	ldr	r3, [r3, #0]
    fa84:	0c1b      	lsrs	r3, r3, #16
    fa86:	b2db      	uxtb	r3, r3
    fa88:	f003 030f 	and.w	r3, r3, #15
    fa8c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    fa90:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fa94:	4618      	mov	r0, r3
    fa96:	f7fe fe6c 	bl	e772 <FlexCAN_ComputePayloadSize>
    fa9a:	4603      	mov	r3, r0
    fa9c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    faa0:	9b00      	ldr	r3, [sp, #0]
    faa2:	3308      	adds	r3, #8
    faa4:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    faa6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    faaa:	2b08      	cmp	r3, #8
    faac:	d902      	bls.n	fab4 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    faae:	2308      	movs	r3, #8
    fab0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    fab4:	9b00      	ldr	r3, [sp, #0]
    fab6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    faba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    fabe:	9b07      	ldr	r3, [sp, #28]
    fac0:	681a      	ldr	r2, [r3, #0]
    fac2:	9b00      	ldr	r3, [sp, #0]
    fac4:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    fac6:	9b00      	ldr	r3, [sp, #0]
    fac8:	681b      	ldr	r3, [r3, #0]
    faca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    face:	2b00      	cmp	r3, #0
    fad0:	d004      	beq.n	fadc <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    fad2:	9b06      	ldr	r3, [sp, #24]
    fad4:	681a      	ldr	r2, [r3, #0]
    fad6:	9b00      	ldr	r3, [sp, #0]
    fad8:	605a      	str	r2, [r3, #4]
    fada:	e004      	b.n	fae6 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    fadc:	9b06      	ldr	r3, [sp, #24]
    fade:	681b      	ldr	r3, [r3, #0]
    fae0:	0c9a      	lsrs	r2, r3, #18
    fae2:	9b00      	ldr	r3, [sp, #0]
    fae4:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    fae6:	9b01      	ldr	r3, [sp, #4]
    fae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    faea:	b2da      	uxtb	r2, r3
    faec:	9b00      	ldr	r3, [sp, #0]
    faee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    faf2:	9b00      	ldr	r3, [sp, #0]
    faf4:	681b      	ldr	r3, [r3, #0]
    faf6:	b29a      	uxth	r2, r3
    faf8:	9b00      	ldr	r3, [sp, #0]
    fafa:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fafc:	2300      	movs	r3, #0
    fafe:	9309      	str	r3, [sp, #36]	; 0x24
    fb00:	e01f      	b.n	fb42 <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    fb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb04:	089b      	lsrs	r3, r3, #2
    fb06:	009b      	lsls	r3, r3, #2
    fb08:	9a05      	ldr	r2, [sp, #20]
    fb0a:	4413      	add	r3, r2
    fb0c:	681b      	ldr	r3, [r3, #0]
    fb0e:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    fb10:	9b02      	ldr	r3, [sp, #8]
    fb12:	0e1a      	lsrs	r2, r3, #24
    fb14:	9b02      	ldr	r3, [sp, #8]
    fb16:	0a1b      	lsrs	r3, r3, #8
    fb18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    fb1c:	431a      	orrs	r2, r3
    fb1e:	9b02      	ldr	r3, [sp, #8]
    fb20:	021b      	lsls	r3, r3, #8
    fb22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    fb26:	ea42 0103 	orr.w	r1, r2, r3
    fb2a:	9b02      	ldr	r3, [sp, #8]
    fb2c:	061a      	lsls	r2, r3, #24
    fb2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb30:	089b      	lsrs	r3, r3, #2
    fb32:	009b      	lsls	r3, r3, #2
    fb34:	9804      	ldr	r0, [sp, #16]
    fb36:	4403      	add	r3, r0
    fb38:	430a      	orrs	r2, r1
    fb3a:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fb3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb3e:	3304      	adds	r3, #4
    fb40:	9309      	str	r3, [sp, #36]	; 0x24
    fb42:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fb46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fb48:	429a      	cmp	r2, r3
    fb4a:	d3da      	bcc.n	fb02 <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    fb4c:	bf00      	nop
    fb4e:	bf00      	nop
    fb50:	b00b      	add	sp, #44	; 0x2c
    fb52:	f85d fb04 	ldr.w	pc, [sp], #4

0000fb56 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    fb56:	b088      	sub	sp, #32
    fb58:	9003      	str	r0, [sp, #12]
    fb5a:	9301      	str	r3, [sp, #4]
    fb5c:	460b      	mov	r3, r1
    fb5e:	f88d 300b 	strb.w	r3, [sp, #11]
    fb62:	4613      	mov	r3, r2
    fb64:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    fb68:	2300      	movs	r3, #0
    fb6a:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    fb6e:	2300      	movs	r3, #0
    fb70:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    fb72:	2300      	movs	r3, #0
    fb74:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    fb76:	9b01      	ldr	r3, [sp, #4]
    fb78:	b2db      	uxtb	r3, r3
    fb7a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    fb7e:	429a      	cmp	r2, r3
    fb80:	d303      	bcc.n	fb8a <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    fb82:	2301      	movs	r3, #1
    fb84:	f88d 301f 	strb.w	r3, [sp, #31]
    fb88:	e01b      	b.n	fbc2 <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    fb8a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    fb8e:	2b00      	cmp	r3, #0
    fb90:	d014      	beq.n	fbbc <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    fb92:	9b03      	ldr	r3, [sp, #12]
    fb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fb96:	0e1b      	lsrs	r3, r3, #24
    fb98:	f003 030f 	and.w	r3, r3, #15
    fb9c:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    fb9e:	9b06      	ldr	r3, [sp, #24]
    fba0:	3301      	adds	r3, #1
    fba2:	00db      	lsls	r3, r3, #3
    fba4:	089b      	lsrs	r3, r3, #2
    fba6:	3305      	adds	r3, #5
    fba8:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    fbaa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    fbae:	9a05      	ldr	r2, [sp, #20]
    fbb0:	429a      	cmp	r2, r3
    fbb2:	d306      	bcc.n	fbc2 <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    fbb4:	2301      	movs	r3, #1
    fbb6:	f88d 301f 	strb.w	r3, [sp, #31]
    fbba:	e002      	b.n	fbc2 <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    fbbc:	2300      	movs	r3, #0
    fbbe:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    fbc2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    fbc6:	4618      	mov	r0, r3
    fbc8:	b008      	add	sp, #32
    fbca:	4770      	bx	lr

0000fbcc <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    fbcc:	b500      	push	{lr}
    fbce:	b083      	sub	sp, #12
    fbd0:	9001      	str	r0, [sp, #4]
    fbd2:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    fbd4:	9b00      	ldr	r3, [sp, #0]
    fbd6:	f003 0320 	and.w	r3, r3, #32
    fbda:	2b00      	cmp	r3, #0
    fbdc:	d004      	beq.n	fbe8 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    fbde:	2101      	movs	r1, #1
    fbe0:	9801      	ldr	r0, [sp, #4]
    fbe2:	f7fe fcd8 	bl	e596 <FlexCAN_SetIsoCan>
    fbe6:	e003      	b.n	fbf0 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    fbe8:	2100      	movs	r1, #0
    fbea:	9801      	ldr	r0, [sp, #4]
    fbec:	f7fe fcd3 	bl	e596 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    fbf0:	9b00      	ldr	r3, [sp, #0]
    fbf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fbf6:	2b00      	cmp	r3, #0
    fbf8:	d004      	beq.n	fc04 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    fbfa:	2101      	movs	r1, #1
    fbfc:	9801      	ldr	r0, [sp, #4]
    fbfe:	f7fe fce1 	bl	e5c4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    fc02:	e003      	b.n	fc0c <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    fc04:	2100      	movs	r1, #0
    fc06:	9801      	ldr	r0, [sp, #4]
    fc08:	f7fe fcdc 	bl	e5c4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    fc0c:	9b00      	ldr	r3, [sp, #0]
    fc0e:	f003 0308 	and.w	r3, r3, #8
    fc12:	2b00      	cmp	r3, #0
    fc14:	d004      	beq.n	fc20 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    fc16:	2101      	movs	r1, #1
    fc18:	9801      	ldr	r0, [sp, #4]
    fc1a:	f7fe fcea 	bl	e5f2 <FlexCAN_SetProtocolException>
    fc1e:	e003      	b.n	fc28 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    fc20:	2100      	movs	r1, #0
    fc22:	9801      	ldr	r0, [sp, #4]
    fc24:	f7fe fce5 	bl	e5f2 <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    fc28:	9b00      	ldr	r3, [sp, #0]
    fc2a:	f003 0302 	and.w	r3, r3, #2
    fc2e:	2b00      	cmp	r3, #0
    fc30:	d00a      	beq.n	fc48 <FlexCAN_ConfigCtrlOptions+0x7c>
    fc32:	9b01      	ldr	r3, [sp, #4]
    fc34:	681b      	ldr	r3, [r3, #0]
    fc36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    fc3a:	2b00      	cmp	r3, #0
    fc3c:	d104      	bne.n	fc48 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    fc3e:	2101      	movs	r1, #1
    fc40:	9801      	ldr	r0, [sp, #4]
    fc42:	f7fe fd31 	bl	e6a8 <FlexCAN_CanBitSampling>
    fc46:	e003      	b.n	fc50 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    fc48:	2100      	movs	r1, #0
    fc4a:	9801      	ldr	r0, [sp, #4]
    fc4c:	f7fe fd2c 	bl	e6a8 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    fc50:	9b00      	ldr	r3, [sp, #0]
    fc52:	f003 0304 	and.w	r3, r3, #4
    fc56:	2b00      	cmp	r3, #0
    fc58:	d004      	beq.n	fc64 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    fc5a:	2101      	movs	r1, #1
    fc5c:	9801      	ldr	r0, [sp, #4]
    fc5e:	f7fe fcf6 	bl	e64e <FlexCAN_SetBusOffAutorecovery>
    fc62:	e003      	b.n	fc6c <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    fc64:	2100      	movs	r1, #0
    fc66:	9801      	ldr	r0, [sp, #4]
    fc68:	f7fe fcf1 	bl	e64e <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    fc6c:	9b00      	ldr	r3, [sp, #0]
    fc6e:	f003 0301 	and.w	r3, r3, #1
    fc72:	2b00      	cmp	r3, #0
    fc74:	d004      	beq.n	fc80 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    fc76:	2101      	movs	r1, #1
    fc78:	9801      	ldr	r0, [sp, #4]
    fc7a:	f7fe fcd1 	bl	e620 <FlexCAN_SetRemoteReqStore>
    fc7e:	e003      	b.n	fc88 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    fc80:	2100      	movs	r1, #0
    fc82:	9801      	ldr	r0, [sp, #4]
    fc84:	f7fe fccc 	bl	e620 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    fc88:	9b00      	ldr	r3, [sp, #0]
    fc8a:	f003 0310 	and.w	r3, r3, #16
    fc8e:	2b00      	cmp	r3, #0
    fc90:	d004      	beq.n	fc9c <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    fc92:	2101      	movs	r1, #1
    fc94:	9801      	ldr	r0, [sp, #4]
    fc96:	f7fe fcf0 	bl	e67a <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    fc9a:	e003      	b.n	fca4 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    fc9c:	2100      	movs	r1, #0
    fc9e:	9801      	ldr	r0, [sp, #4]
    fca0:	f7fe fceb 	bl	e67a <FlexCAN_SetEdgeFilter>
}
    fca4:	bf00      	nop
    fca6:	b003      	add	sp, #12
    fca8:	f85d fb04 	ldr.w	pc, [sp], #4

0000fcac <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    fcac:	b084      	sub	sp, #16
    fcae:	4603      	mov	r3, r0
    fcb0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    fcb4:	2300      	movs	r3, #0
    fcb6:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fcba:	2300      	movs	r3, #0
    fcbc:	f88d 300f 	strb.w	r3, [sp, #15]
    fcc0:	e00d      	b.n	fcde <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    fcc2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fcc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fcca:	4909      	ldr	r1, [pc, #36]	; (fcf0 <FlexCAN_ResetImaskBuff+0x44>)
    fccc:	4413      	add	r3, r2
    fcce:	2200      	movs	r2, #0
    fcd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fcd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fcd8:	3301      	adds	r3, #1
    fcda:	f88d 300f 	strb.w	r3, [sp, #15]
    fcde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fce2:	2b00      	cmp	r3, #0
    fce4:	d0ed      	beq.n	fcc2 <FlexCAN_ResetImaskBuff+0x16>
    }
}
    fce6:	bf00      	nop
    fce8:	bf00      	nop
    fcea:	b004      	add	sp, #16
    fcec:	4770      	bx	lr
    fcee:	bf00      	nop
    fcf0:	1fff9368 	.word	0x1fff9368

0000fcf4 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    fcf4:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    fcf6:	2000      	movs	r0, #0
    fcf8:	f7fd fb2a 	bl	d350 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fcfc:	f3bf 8f4f 	dsb	sy
}
    fd00:	bf00      	nop
    fd02:	bd08      	pop	{r3, pc}

0000fd04 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    fd04:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    fd06:	2000      	movs	r0, #0
    fd08:	f7fd fac2 	bl	d290 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fd0c:	f3bf 8f4f 	dsb	sy
}
    fd10:	bf00      	nop
    fd12:	bd08      	pop	{r3, pc}

0000fd14 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    fd14:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    fd16:	220f      	movs	r2, #15
    fd18:	2100      	movs	r1, #0
    fd1a:	2000      	movs	r0, #0
    fd1c:	f7fd f9dc 	bl	d0d8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd20:	f3bf 8f4f 	dsb	sy
}
    fd24:	bf00      	nop
    fd26:	bd08      	pop	{r3, pc}

0000fd28 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    fd28:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    fd2a:	221f      	movs	r2, #31
    fd2c:	2110      	movs	r1, #16
    fd2e:	2000      	movs	r0, #0
    fd30:	f7fd f9d2 	bl	d0d8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd34:	f3bf 8f4f 	dsb	sy
}
    fd38:	bf00      	nop
    fd3a:	bd08      	pop	{r3, pc}

0000fd3c <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    fd3c:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    fd3e:	2001      	movs	r0, #1
    fd40:	f7fd fb06 	bl	d350 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fd44:	f3bf 8f4f 	dsb	sy
}
    fd48:	bf00      	nop
    fd4a:	bd08      	pop	{r3, pc}

0000fd4c <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    fd4c:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    fd4e:	2001      	movs	r0, #1
    fd50:	f7fd fa9e 	bl	d290 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fd54:	f3bf 8f4f 	dsb	sy
}
    fd58:	bf00      	nop
    fd5a:	bd08      	pop	{r3, pc}

0000fd5c <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    fd5c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    fd5e:	220f      	movs	r2, #15
    fd60:	2100      	movs	r1, #0
    fd62:	2001      	movs	r0, #1
    fd64:	f7fd f9b8 	bl	d0d8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd68:	f3bf 8f4f 	dsb	sy
}
    fd6c:	bf00      	nop
    fd6e:	bd08      	pop	{r3, pc}

0000fd70 <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    fd70:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    fd72:	221f      	movs	r2, #31
    fd74:	2110      	movs	r1, #16
    fd76:	2001      	movs	r0, #1
    fd78:	f7fd f9ae 	bl	d0d8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd7c:	f3bf 8f4f 	dsb	sy
}
    fd80:	bf00      	nop
    fd82:	bd08      	pop	{r3, pc}

0000fd84 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    fd84:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    fd86:	2002      	movs	r0, #2
    fd88:	f7fd fae2 	bl	d350 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fd8c:	f3bf 8f4f 	dsb	sy
}
    fd90:	bf00      	nop
    fd92:	bd08      	pop	{r3, pc}

0000fd94 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    fd94:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    fd96:	2002      	movs	r0, #2
    fd98:	f7fd fa7a 	bl	d290 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fd9c:	f3bf 8f4f 	dsb	sy
}
    fda0:	bf00      	nop
    fda2:	bd08      	pop	{r3, pc}

0000fda4 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    fda4:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    fda6:	220f      	movs	r2, #15
    fda8:	2100      	movs	r1, #0
    fdaa:	2002      	movs	r0, #2
    fdac:	f7fd f994 	bl	d0d8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fdb0:	f3bf 8f4f 	dsb	sy
}
    fdb4:	bf00      	nop
    fdb6:	bd08      	pop	{r3, pc}

0000fdb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fdb8:	b500      	push	{lr}
    fdba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdbc:	f7f0 ff26 	bl	c0c <Sys_GetCoreID>
    fdc0:	4603      	mov	r3, r0
    fdc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    fdc4:	4a10      	ldr	r2, [pc, #64]	; (fe08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fdc6:	9b01      	ldr	r3, [sp, #4]
    fdc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdcc:	2b00      	cmp	r3, #0
    fdce:	d10d      	bne.n	fdec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fdd0:	f7f0 fdac 	bl	92c <Adc_schm_read_msr>
    fdd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fdd6:	9b00      	ldr	r3, [sp, #0]
    fdd8:	f003 0301 	and.w	r3, r3, #1
    fddc:	2b00      	cmp	r3, #0
    fdde:	d100      	bne.n	fde2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fde0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    fde2:	490a      	ldr	r1, [pc, #40]	; (fe0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    fde4:	9b01      	ldr	r3, [sp, #4]
    fde6:	9a00      	ldr	r2, [sp, #0]
    fde8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    fdec:	4a06      	ldr	r2, [pc, #24]	; (fe08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fdee:	9b01      	ldr	r3, [sp, #4]
    fdf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdf4:	1c5a      	adds	r2, r3, #1
    fdf6:	4904      	ldr	r1, [pc, #16]	; (fe08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fdf8:	9b01      	ldr	r3, [sp, #4]
    fdfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fdfe:	bf00      	nop
    fe00:	b003      	add	sp, #12
    fe02:	f85d fb04 	ldr.w	pc, [sp], #4
    fe06:	bf00      	nop
    fe08:	1fff9378 	.word	0x1fff9378
    fe0c:	1fff9374 	.word	0x1fff9374

0000fe10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fe10:	b500      	push	{lr}
    fe12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe14:	f7f0 fefa 	bl	c0c <Sys_GetCoreID>
    fe18:	4603      	mov	r3, r0
    fe1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    fe1c:	4a0d      	ldr	r2, [pc, #52]	; (fe54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fe1e:	9b01      	ldr	r3, [sp, #4]
    fe20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe24:	1e5a      	subs	r2, r3, #1
    fe26:	490b      	ldr	r1, [pc, #44]	; (fe54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fe28:	9b01      	ldr	r3, [sp, #4]
    fe2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    fe2e:	4a0a      	ldr	r2, [pc, #40]	; (fe58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    fe30:	9b01      	ldr	r3, [sp, #4]
    fe32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe36:	f003 0301 	and.w	r3, r3, #1
    fe3a:	2b00      	cmp	r3, #0
    fe3c:	d106      	bne.n	fe4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    fe3e:	4a05      	ldr	r2, [pc, #20]	; (fe54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fe40:	9b01      	ldr	r3, [sp, #4]
    fe42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe46:	2b00      	cmp	r3, #0
    fe48:	d100      	bne.n	fe4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe4c:	bf00      	nop
    fe4e:	b003      	add	sp, #12
    fe50:	f85d fb04 	ldr.w	pc, [sp], #4
    fe54:	1fff9378 	.word	0x1fff9378
    fe58:	1fff9374 	.word	0x1fff9374

0000fe5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    fe5c:	b500      	push	{lr}
    fe5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe60:	f7f0 fed4 	bl	c0c <Sys_GetCoreID>
    fe64:	4603      	mov	r3, r0
    fe66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    fe68:	4a10      	ldr	r2, [pc, #64]	; (feac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    fe6a:	9b01      	ldr	r3, [sp, #4]
    fe6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe70:	2b00      	cmp	r3, #0
    fe72:	d10d      	bne.n	fe90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe74:	f7f0 fd5a 	bl	92c <Adc_schm_read_msr>
    fe78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe7a:	9b00      	ldr	r3, [sp, #0]
    fe7c:	f003 0301 	and.w	r3, r3, #1
    fe80:	2b00      	cmp	r3, #0
    fe82:	d100      	bne.n	fe86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    fe86:	490a      	ldr	r1, [pc, #40]	; (feb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    fe88:	9b01      	ldr	r3, [sp, #4]
    fe8a:	9a00      	ldr	r2, [sp, #0]
    fe8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    fe90:	4a06      	ldr	r2, [pc, #24]	; (feac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    fe92:	9b01      	ldr	r3, [sp, #4]
    fe94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe98:	1c5a      	adds	r2, r3, #1
    fe9a:	4904      	ldr	r1, [pc, #16]	; (feac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    fe9c:	9b01      	ldr	r3, [sp, #4]
    fe9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fea2:	bf00      	nop
    fea4:	b003      	add	sp, #12
    fea6:	f85d fb04 	ldr.w	pc, [sp], #4
    feaa:	bf00      	nop
    feac:	1fff9380 	.word	0x1fff9380
    feb0:	1fff937c 	.word	0x1fff937c

0000feb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    feb4:	b500      	push	{lr}
    feb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    feb8:	f7f0 fea8 	bl	c0c <Sys_GetCoreID>
    febc:	4603      	mov	r3, r0
    febe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    fec0:	4a0d      	ldr	r2, [pc, #52]	; (fef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    fec2:	9b01      	ldr	r3, [sp, #4]
    fec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fec8:	1e5a      	subs	r2, r3, #1
    feca:	490b      	ldr	r1, [pc, #44]	; (fef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    fecc:	9b01      	ldr	r3, [sp, #4]
    fece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    fed2:	4a0a      	ldr	r2, [pc, #40]	; (fefc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    fed4:	9b01      	ldr	r3, [sp, #4]
    fed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feda:	f003 0301 	and.w	r3, r3, #1
    fede:	2b00      	cmp	r3, #0
    fee0:	d106      	bne.n	fef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    fee2:	4a05      	ldr	r2, [pc, #20]	; (fef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    fee4:	9b01      	ldr	r3, [sp, #4]
    fee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feea:	2b00      	cmp	r3, #0
    feec:	d100      	bne.n	fef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    feee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fef0:	bf00      	nop
    fef2:	b003      	add	sp, #12
    fef4:	f85d fb04 	ldr.w	pc, [sp], #4
    fef8:	1fff9380 	.word	0x1fff9380
    fefc:	1fff937c 	.word	0x1fff937c

0000ff00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ff00:	b500      	push	{lr}
    ff02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff04:	f7f0 fe82 	bl	c0c <Sys_GetCoreID>
    ff08:	4603      	mov	r3, r0
    ff0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    ff0c:	4a10      	ldr	r2, [pc, #64]	; (ff50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ff0e:	9b01      	ldr	r3, [sp, #4]
    ff10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff14:	2b00      	cmp	r3, #0
    ff16:	d10d      	bne.n	ff34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff18:	f7f0 fd08 	bl	92c <Adc_schm_read_msr>
    ff1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff1e:	9b00      	ldr	r3, [sp, #0]
    ff20:	f003 0301 	and.w	r3, r3, #1
    ff24:	2b00      	cmp	r3, #0
    ff26:	d100      	bne.n	ff2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ff2a:	490a      	ldr	r1, [pc, #40]	; (ff54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    ff2c:	9b01      	ldr	r3, [sp, #4]
    ff2e:	9a00      	ldr	r2, [sp, #0]
    ff30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    ff34:	4a06      	ldr	r2, [pc, #24]	; (ff50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ff36:	9b01      	ldr	r3, [sp, #4]
    ff38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff3c:	1c5a      	adds	r2, r3, #1
    ff3e:	4904      	ldr	r1, [pc, #16]	; (ff50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ff40:	9b01      	ldr	r3, [sp, #4]
    ff42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff46:	bf00      	nop
    ff48:	b003      	add	sp, #12
    ff4a:	f85d fb04 	ldr.w	pc, [sp], #4
    ff4e:	bf00      	nop
    ff50:	1fff9388 	.word	0x1fff9388
    ff54:	1fff9384 	.word	0x1fff9384

0000ff58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ff58:	b500      	push	{lr}
    ff5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff5c:	f7f0 fe56 	bl	c0c <Sys_GetCoreID>
    ff60:	4603      	mov	r3, r0
    ff62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    ff64:	4a0d      	ldr	r2, [pc, #52]	; (ff9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ff66:	9b01      	ldr	r3, [sp, #4]
    ff68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff6c:	1e5a      	subs	r2, r3, #1
    ff6e:	490b      	ldr	r1, [pc, #44]	; (ff9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ff70:	9b01      	ldr	r3, [sp, #4]
    ff72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ff76:	4a0a      	ldr	r2, [pc, #40]	; (ffa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    ff78:	9b01      	ldr	r3, [sp, #4]
    ff7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff7e:	f003 0301 	and.w	r3, r3, #1
    ff82:	2b00      	cmp	r3, #0
    ff84:	d106      	bne.n	ff94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    ff86:	4a05      	ldr	r2, [pc, #20]	; (ff9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ff88:	9b01      	ldr	r3, [sp, #4]
    ff8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff8e:	2b00      	cmp	r3, #0
    ff90:	d100      	bne.n	ff94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff94:	bf00      	nop
    ff96:	b003      	add	sp, #12
    ff98:	f85d fb04 	ldr.w	pc, [sp], #4
    ff9c:	1fff9388 	.word	0x1fff9388
    ffa0:	1fff9384 	.word	0x1fff9384

0000ffa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    ffa4:	b500      	push	{lr}
    ffa6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffa8:	f7f0 fe30 	bl	c0c <Sys_GetCoreID>
    ffac:	4603      	mov	r3, r0
    ffae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    ffb0:	4a10      	ldr	r2, [pc, #64]	; (fff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ffb2:	9b01      	ldr	r3, [sp, #4]
    ffb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffb8:	2b00      	cmp	r3, #0
    ffba:	d10d      	bne.n	ffd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ffbc:	f7f0 fcb6 	bl	92c <Adc_schm_read_msr>
    ffc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ffc2:	9b00      	ldr	r3, [sp, #0]
    ffc4:	f003 0301 	and.w	r3, r3, #1
    ffc8:	2b00      	cmp	r3, #0
    ffca:	d100      	bne.n	ffce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ffcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    ffce:	490a      	ldr	r1, [pc, #40]	; (fff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    ffd0:	9b01      	ldr	r3, [sp, #4]
    ffd2:	9a00      	ldr	r2, [sp, #0]
    ffd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    ffd8:	4a06      	ldr	r2, [pc, #24]	; (fff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ffda:	9b01      	ldr	r3, [sp, #4]
    ffdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffe0:	1c5a      	adds	r2, r3, #1
    ffe2:	4904      	ldr	r1, [pc, #16]	; (fff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ffe4:	9b01      	ldr	r3, [sp, #4]
    ffe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ffea:	bf00      	nop
    ffec:	b003      	add	sp, #12
    ffee:	f85d fb04 	ldr.w	pc, [sp], #4
    fff2:	bf00      	nop
    fff4:	1fff9390 	.word	0x1fff9390
    fff8:	1fff938c 	.word	0x1fff938c

0000fffc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    fffc:	b500      	push	{lr}
    fffe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10000:	f7f0 fe04 	bl	c0c <Sys_GetCoreID>
   10004:	4603      	mov	r3, r0
   10006:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
   10008:	4a0d      	ldr	r2, [pc, #52]	; (10040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   1000a:	9b01      	ldr	r3, [sp, #4]
   1000c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10010:	1e5a      	subs	r2, r3, #1
   10012:	490b      	ldr	r1, [pc, #44]	; (10040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   10014:	9b01      	ldr	r3, [sp, #4]
   10016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   1001a:	4a0a      	ldr	r2, [pc, #40]	; (10044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
   1001c:	9b01      	ldr	r3, [sp, #4]
   1001e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10022:	f003 0301 	and.w	r3, r3, #1
   10026:	2b00      	cmp	r3, #0
   10028:	d106      	bne.n	10038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
   1002a:	4a05      	ldr	r2, [pc, #20]	; (10040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   1002c:	9b01      	ldr	r3, [sp, #4]
   1002e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10032:	2b00      	cmp	r3, #0
   10034:	d100      	bne.n	10038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10036:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10038:	bf00      	nop
   1003a:	b003      	add	sp, #12
   1003c:	f85d fb04 	ldr.w	pc, [sp], #4
   10040:	1fff9390 	.word	0x1fff9390
   10044:	1fff938c 	.word	0x1fff938c

00010048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   10048:	b500      	push	{lr}
   1004a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1004c:	f7f0 fdde 	bl	c0c <Sys_GetCoreID>
   10050:	4603      	mov	r3, r0
   10052:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
   10054:	4a10      	ldr	r2, [pc, #64]	; (10098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   10056:	9b01      	ldr	r3, [sp, #4]
   10058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1005c:	2b00      	cmp	r3, #0
   1005e:	d10d      	bne.n	1007c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10060:	f7f0 fc64 	bl	92c <Adc_schm_read_msr>
   10064:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10066:	9b00      	ldr	r3, [sp, #0]
   10068:	f003 0301 	and.w	r3, r3, #1
   1006c:	2b00      	cmp	r3, #0
   1006e:	d100      	bne.n	10072 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10070:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   10072:	490a      	ldr	r1, [pc, #40]	; (1009c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
   10074:	9b01      	ldr	r3, [sp, #4]
   10076:	9a00      	ldr	r2, [sp, #0]
   10078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
   1007c:	4a06      	ldr	r2, [pc, #24]	; (10098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   1007e:	9b01      	ldr	r3, [sp, #4]
   10080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10084:	1c5a      	adds	r2, r3, #1
   10086:	4904      	ldr	r1, [pc, #16]	; (10098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   10088:	9b01      	ldr	r3, [sp, #4]
   1008a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1008e:	bf00      	nop
   10090:	b003      	add	sp, #12
   10092:	f85d fb04 	ldr.w	pc, [sp], #4
   10096:	bf00      	nop
   10098:	1fff9398 	.word	0x1fff9398
   1009c:	1fff9394 	.word	0x1fff9394

000100a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   100a0:	b500      	push	{lr}
   100a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100a4:	f7f0 fdb2 	bl	c0c <Sys_GetCoreID>
   100a8:	4603      	mov	r3, r0
   100aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
   100ac:	4a0d      	ldr	r2, [pc, #52]	; (100e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   100ae:	9b01      	ldr	r3, [sp, #4]
   100b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100b4:	1e5a      	subs	r2, r3, #1
   100b6:	490b      	ldr	r1, [pc, #44]	; (100e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   100b8:	9b01      	ldr	r3, [sp, #4]
   100ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   100be:	4a0a      	ldr	r2, [pc, #40]	; (100e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
   100c0:	9b01      	ldr	r3, [sp, #4]
   100c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100c6:	f003 0301 	and.w	r3, r3, #1
   100ca:	2b00      	cmp	r3, #0
   100cc:	d106      	bne.n	100dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
   100ce:	4a05      	ldr	r2, [pc, #20]	; (100e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   100d0:	9b01      	ldr	r3, [sp, #4]
   100d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100d6:	2b00      	cmp	r3, #0
   100d8:	d100      	bne.n	100dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   100da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   100dc:	bf00      	nop
   100de:	b003      	add	sp, #12
   100e0:	f85d fb04 	ldr.w	pc, [sp], #4
   100e4:	1fff9398 	.word	0x1fff9398
   100e8:	1fff9394 	.word	0x1fff9394

000100ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   100ec:	b500      	push	{lr}
   100ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100f0:	f7f0 fd8c 	bl	c0c <Sys_GetCoreID>
   100f4:	4603      	mov	r3, r0
   100f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
   100f8:	4a10      	ldr	r2, [pc, #64]	; (1013c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   100fa:	9b01      	ldr	r3, [sp, #4]
   100fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10100:	2b00      	cmp	r3, #0
   10102:	d10d      	bne.n	10120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10104:	f7f0 fc12 	bl	92c <Adc_schm_read_msr>
   10108:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1010a:	9b00      	ldr	r3, [sp, #0]
   1010c:	f003 0301 	and.w	r3, r3, #1
   10110:	2b00      	cmp	r3, #0
   10112:	d100      	bne.n	10116 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10114:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   10116:	490a      	ldr	r1, [pc, #40]	; (10140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
   10118:	9b01      	ldr	r3, [sp, #4]
   1011a:	9a00      	ldr	r2, [sp, #0]
   1011c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
   10120:	4a06      	ldr	r2, [pc, #24]	; (1013c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   10122:	9b01      	ldr	r3, [sp, #4]
   10124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10128:	1c5a      	adds	r2, r3, #1
   1012a:	4904      	ldr	r1, [pc, #16]	; (1013c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   1012c:	9b01      	ldr	r3, [sp, #4]
   1012e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10132:	bf00      	nop
   10134:	b003      	add	sp, #12
   10136:	f85d fb04 	ldr.w	pc, [sp], #4
   1013a:	bf00      	nop
   1013c:	1fff93a0 	.word	0x1fff93a0
   10140:	1fff939c 	.word	0x1fff939c

00010144 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   10144:	b500      	push	{lr}
   10146:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10148:	f7f0 fd60 	bl	c0c <Sys_GetCoreID>
   1014c:	4603      	mov	r3, r0
   1014e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
   10150:	4a0d      	ldr	r2, [pc, #52]	; (10188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   10152:	9b01      	ldr	r3, [sp, #4]
   10154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10158:	1e5a      	subs	r2, r3, #1
   1015a:	490b      	ldr	r1, [pc, #44]	; (10188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   1015c:	9b01      	ldr	r3, [sp, #4]
   1015e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   10162:	4a0a      	ldr	r2, [pc, #40]	; (1018c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1016a:	f003 0301 	and.w	r3, r3, #1
   1016e:	2b00      	cmp	r3, #0
   10170:	d106      	bne.n	10180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
   10172:	4a05      	ldr	r2, [pc, #20]	; (10188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   10174:	9b01      	ldr	r3, [sp, #4]
   10176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1017a:	2b00      	cmp	r3, #0
   1017c:	d100      	bne.n	10180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1017e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10180:	bf00      	nop
   10182:	b003      	add	sp, #12
   10184:	f85d fb04 	ldr.w	pc, [sp], #4
   10188:	1fff93a0 	.word	0x1fff93a0
   1018c:	1fff939c 	.word	0x1fff939c

00010190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   10190:	b500      	push	{lr}
   10192:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10194:	f7f0 fd3a 	bl	c0c <Sys_GetCoreID>
   10198:	4603      	mov	r3, r0
   1019a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
   1019c:	4a10      	ldr	r2, [pc, #64]	; (101e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   1019e:	9b01      	ldr	r3, [sp, #4]
   101a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101a4:	2b00      	cmp	r3, #0
   101a6:	d10d      	bne.n	101c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   101a8:	f7f0 fbc0 	bl	92c <Adc_schm_read_msr>
   101ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   101ae:	9b00      	ldr	r3, [sp, #0]
   101b0:	f003 0301 	and.w	r3, r3, #1
   101b4:	2b00      	cmp	r3, #0
   101b6:	d100      	bne.n	101ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   101b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   101ba:	490a      	ldr	r1, [pc, #40]	; (101e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
   101bc:	9b01      	ldr	r3, [sp, #4]
   101be:	9a00      	ldr	r2, [sp, #0]
   101c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
   101c4:	4a06      	ldr	r2, [pc, #24]	; (101e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   101c6:	9b01      	ldr	r3, [sp, #4]
   101c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101cc:	1c5a      	adds	r2, r3, #1
   101ce:	4904      	ldr	r1, [pc, #16]	; (101e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   101d0:	9b01      	ldr	r3, [sp, #4]
   101d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   101d6:	bf00      	nop
   101d8:	b003      	add	sp, #12
   101da:	f85d fb04 	ldr.w	pc, [sp], #4
   101de:	bf00      	nop
   101e0:	1fff93a8 	.word	0x1fff93a8
   101e4:	1fff93a4 	.word	0x1fff93a4

000101e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   101e8:	b500      	push	{lr}
   101ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101ec:	f7f0 fd0e 	bl	c0c <Sys_GetCoreID>
   101f0:	4603      	mov	r3, r0
   101f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
   101f4:	4a0d      	ldr	r2, [pc, #52]	; (1022c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   101f6:	9b01      	ldr	r3, [sp, #4]
   101f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101fc:	1e5a      	subs	r2, r3, #1
   101fe:	490b      	ldr	r1, [pc, #44]	; (1022c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   10200:	9b01      	ldr	r3, [sp, #4]
   10202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   10206:	4a0a      	ldr	r2, [pc, #40]	; (10230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
   10208:	9b01      	ldr	r3, [sp, #4]
   1020a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1020e:	f003 0301 	and.w	r3, r3, #1
   10212:	2b00      	cmp	r3, #0
   10214:	d106      	bne.n	10224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
   10216:	4a05      	ldr	r2, [pc, #20]	; (1022c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   10218:	9b01      	ldr	r3, [sp, #4]
   1021a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1021e:	2b00      	cmp	r3, #0
   10220:	d100      	bne.n	10224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10222:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10224:	bf00      	nop
   10226:	b003      	add	sp, #12
   10228:	f85d fb04 	ldr.w	pc, [sp], #4
   1022c:	1fff93a8 	.word	0x1fff93a8
   10230:	1fff93a4 	.word	0x1fff93a4

00010234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   10234:	b500      	push	{lr}
   10236:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10238:	f7f0 fce8 	bl	c0c <Sys_GetCoreID>
   1023c:	4603      	mov	r3, r0
   1023e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
   10240:	4a10      	ldr	r2, [pc, #64]	; (10284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   10242:	9b01      	ldr	r3, [sp, #4]
   10244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10248:	2b00      	cmp	r3, #0
   1024a:	d10d      	bne.n	10268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1024c:	f7f0 fb6e 	bl	92c <Adc_schm_read_msr>
   10250:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10252:	9b00      	ldr	r3, [sp, #0]
   10254:	f003 0301 	and.w	r3, r3, #1
   10258:	2b00      	cmp	r3, #0
   1025a:	d100      	bne.n	1025e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1025c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
   1025e:	490a      	ldr	r1, [pc, #40]	; (10288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
   10260:	9b01      	ldr	r3, [sp, #4]
   10262:	9a00      	ldr	r2, [sp, #0]
   10264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
   10268:	4a06      	ldr	r2, [pc, #24]	; (10284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   1026a:	9b01      	ldr	r3, [sp, #4]
   1026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10270:	1c5a      	adds	r2, r3, #1
   10272:	4904      	ldr	r1, [pc, #16]	; (10284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   10274:	9b01      	ldr	r3, [sp, #4]
   10276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1027a:	bf00      	nop
   1027c:	b003      	add	sp, #12
   1027e:	f85d fb04 	ldr.w	pc, [sp], #4
   10282:	bf00      	nop
   10284:	1fff93b0 	.word	0x1fff93b0
   10288:	1fff93ac 	.word	0x1fff93ac

0001028c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   1028c:	b500      	push	{lr}
   1028e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10290:	f7f0 fcbc 	bl	c0c <Sys_GetCoreID>
   10294:	4603      	mov	r3, r0
   10296:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
   10298:	4a0d      	ldr	r2, [pc, #52]	; (102d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   1029a:	9b01      	ldr	r3, [sp, #4]
   1029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102a0:	1e5a      	subs	r2, r3, #1
   102a2:	490b      	ldr	r1, [pc, #44]	; (102d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   102a4:	9b01      	ldr	r3, [sp, #4]
   102a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
   102aa:	4a0a      	ldr	r2, [pc, #40]	; (102d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
   102ac:	9b01      	ldr	r3, [sp, #4]
   102ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102b2:	f003 0301 	and.w	r3, r3, #1
   102b6:	2b00      	cmp	r3, #0
   102b8:	d106      	bne.n	102c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
   102ba:	4a05      	ldr	r2, [pc, #20]	; (102d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   102bc:	9b01      	ldr	r3, [sp, #4]
   102be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102c2:	2b00      	cmp	r3, #0
   102c4:	d100      	bne.n	102c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   102c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   102c8:	bf00      	nop
   102ca:	b003      	add	sp, #12
   102cc:	f85d fb04 	ldr.w	pc, [sp], #4
   102d0:	1fff93b0 	.word	0x1fff93b0
   102d4:	1fff93ac 	.word	0x1fff93ac

000102d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   102d8:	b500      	push	{lr}
   102da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102dc:	f7f0 fc96 	bl	c0c <Sys_GetCoreID>
   102e0:	4603      	mov	r3, r0
   102e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
   102e4:	4a10      	ldr	r2, [pc, #64]	; (10328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   102e6:	9b01      	ldr	r3, [sp, #4]
   102e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102ec:	2b00      	cmp	r3, #0
   102ee:	d10d      	bne.n	1030c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   102f0:	f7f0 fb1c 	bl	92c <Adc_schm_read_msr>
   102f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   102f6:	9b00      	ldr	r3, [sp, #0]
   102f8:	f003 0301 	and.w	r3, r3, #1
   102fc:	2b00      	cmp	r3, #0
   102fe:	d100      	bne.n	10302 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10300:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
   10302:	490a      	ldr	r1, [pc, #40]	; (1032c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
   10304:	9b01      	ldr	r3, [sp, #4]
   10306:	9a00      	ldr	r2, [sp, #0]
   10308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
   1030c:	4a06      	ldr	r2, [pc, #24]	; (10328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   1030e:	9b01      	ldr	r3, [sp, #4]
   10310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10314:	1c5a      	adds	r2, r3, #1
   10316:	4904      	ldr	r1, [pc, #16]	; (10328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   10318:	9b01      	ldr	r3, [sp, #4]
   1031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1031e:	bf00      	nop
   10320:	b003      	add	sp, #12
   10322:	f85d fb04 	ldr.w	pc, [sp], #4
   10326:	bf00      	nop
   10328:	1fff93b8 	.word	0x1fff93b8
   1032c:	1fff93b4 	.word	0x1fff93b4

00010330 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   10330:	b500      	push	{lr}
   10332:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10334:	f7f0 fc6a 	bl	c0c <Sys_GetCoreID>
   10338:	4603      	mov	r3, r0
   1033a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
   1033c:	4a0d      	ldr	r2, [pc, #52]	; (10374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   1033e:	9b01      	ldr	r3, [sp, #4]
   10340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10344:	1e5a      	subs	r2, r3, #1
   10346:	490b      	ldr	r1, [pc, #44]	; (10374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   10348:	9b01      	ldr	r3, [sp, #4]
   1034a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
   1034e:	4a0a      	ldr	r2, [pc, #40]	; (10378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
   10350:	9b01      	ldr	r3, [sp, #4]
   10352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10356:	f003 0301 	and.w	r3, r3, #1
   1035a:	2b00      	cmp	r3, #0
   1035c:	d106      	bne.n	1036c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
   1035e:	4a05      	ldr	r2, [pc, #20]	; (10374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   10360:	9b01      	ldr	r3, [sp, #4]
   10362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10366:	2b00      	cmp	r3, #0
   10368:	d100      	bne.n	1036c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1036a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1036c:	bf00      	nop
   1036e:	b003      	add	sp, #12
   10370:	f85d fb04 	ldr.w	pc, [sp], #4
   10374:	1fff93b8 	.word	0x1fff93b8
   10378:	1fff93b4 	.word	0x1fff93b4

0001037c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   1037c:	b500      	push	{lr}
   1037e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10380:	f7f0 fc44 	bl	c0c <Sys_GetCoreID>
   10384:	4603      	mov	r3, r0
   10386:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
   10388:	4a10      	ldr	r2, [pc, #64]	; (103cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   1038a:	9b01      	ldr	r3, [sp, #4]
   1038c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10390:	2b00      	cmp	r3, #0
   10392:	d10d      	bne.n	103b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10394:	f7f0 faca 	bl	92c <Adc_schm_read_msr>
   10398:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1039a:	9b00      	ldr	r3, [sp, #0]
   1039c:	f003 0301 	and.w	r3, r3, #1
   103a0:	2b00      	cmp	r3, #0
   103a2:	d100      	bne.n	103a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   103a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
   103a6:	490a      	ldr	r1, [pc, #40]	; (103d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
   103a8:	9b01      	ldr	r3, [sp, #4]
   103aa:	9a00      	ldr	r2, [sp, #0]
   103ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
   103b0:	4a06      	ldr	r2, [pc, #24]	; (103cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   103b2:	9b01      	ldr	r3, [sp, #4]
   103b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103b8:	1c5a      	adds	r2, r3, #1
   103ba:	4904      	ldr	r1, [pc, #16]	; (103cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   103bc:	9b01      	ldr	r3, [sp, #4]
   103be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   103c2:	bf00      	nop
   103c4:	b003      	add	sp, #12
   103c6:	f85d fb04 	ldr.w	pc, [sp], #4
   103ca:	bf00      	nop
   103cc:	1fff93c0 	.word	0x1fff93c0
   103d0:	1fff93bc 	.word	0x1fff93bc

000103d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   103d4:	b500      	push	{lr}
   103d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103d8:	f7f0 fc18 	bl	c0c <Sys_GetCoreID>
   103dc:	4603      	mov	r3, r0
   103de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
   103e0:	4a0d      	ldr	r2, [pc, #52]	; (10418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   103e2:	9b01      	ldr	r3, [sp, #4]
   103e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103e8:	1e5a      	subs	r2, r3, #1
   103ea:	490b      	ldr	r1, [pc, #44]	; (10418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   103ec:	9b01      	ldr	r3, [sp, #4]
   103ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
   103f2:	4a0a      	ldr	r2, [pc, #40]	; (1041c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
   103f4:	9b01      	ldr	r3, [sp, #4]
   103f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103fa:	f003 0301 	and.w	r3, r3, #1
   103fe:	2b00      	cmp	r3, #0
   10400:	d106      	bne.n	10410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
   10402:	4a05      	ldr	r2, [pc, #20]	; (10418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   10404:	9b01      	ldr	r3, [sp, #4]
   10406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1040a:	2b00      	cmp	r3, #0
   1040c:	d100      	bne.n	10410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1040e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10410:	bf00      	nop
   10412:	b003      	add	sp, #12
   10414:	f85d fb04 	ldr.w	pc, [sp], #4
   10418:	1fff93c0 	.word	0x1fff93c0
   1041c:	1fff93bc 	.word	0x1fff93bc

00010420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   10420:	b500      	push	{lr}
   10422:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10424:	f7f0 fbf2 	bl	c0c <Sys_GetCoreID>
   10428:	4603      	mov	r3, r0
   1042a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
   1042c:	4a10      	ldr	r2, [pc, #64]	; (10470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   1042e:	9b01      	ldr	r3, [sp, #4]
   10430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10434:	2b00      	cmp	r3, #0
   10436:	d10d      	bne.n	10454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10438:	f7f0 fa78 	bl	92c <Adc_schm_read_msr>
   1043c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1043e:	9b00      	ldr	r3, [sp, #0]
   10440:	f003 0301 	and.w	r3, r3, #1
   10444:	2b00      	cmp	r3, #0
   10446:	d100      	bne.n	1044a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10448:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
   1044a:	490a      	ldr	r1, [pc, #40]	; (10474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
   1044c:	9b01      	ldr	r3, [sp, #4]
   1044e:	9a00      	ldr	r2, [sp, #0]
   10450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
   10454:	4a06      	ldr	r2, [pc, #24]	; (10470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   10456:	9b01      	ldr	r3, [sp, #4]
   10458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1045c:	1c5a      	adds	r2, r3, #1
   1045e:	4904      	ldr	r1, [pc, #16]	; (10470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   10460:	9b01      	ldr	r3, [sp, #4]
   10462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10466:	bf00      	nop
   10468:	b003      	add	sp, #12
   1046a:	f85d fb04 	ldr.w	pc, [sp], #4
   1046e:	bf00      	nop
   10470:	1fff93c8 	.word	0x1fff93c8
   10474:	1fff93c4 	.word	0x1fff93c4

00010478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   10478:	b500      	push	{lr}
   1047a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1047c:	f7f0 fbc6 	bl	c0c <Sys_GetCoreID>
   10480:	4603      	mov	r3, r0
   10482:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
   10484:	4a0d      	ldr	r2, [pc, #52]	; (104bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   10486:	9b01      	ldr	r3, [sp, #4]
   10488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1048c:	1e5a      	subs	r2, r3, #1
   1048e:	490b      	ldr	r1, [pc, #44]	; (104bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   10490:	9b01      	ldr	r3, [sp, #4]
   10492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
   10496:	4a0a      	ldr	r2, [pc, #40]	; (104c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
   10498:	9b01      	ldr	r3, [sp, #4]
   1049a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1049e:	f003 0301 	and.w	r3, r3, #1
   104a2:	2b00      	cmp	r3, #0
   104a4:	d106      	bne.n	104b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
   104a6:	4a05      	ldr	r2, [pc, #20]	; (104bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   104a8:	9b01      	ldr	r3, [sp, #4]
   104aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104ae:	2b00      	cmp	r3, #0
   104b0:	d100      	bne.n	104b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   104b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   104b4:	bf00      	nop
   104b6:	b003      	add	sp, #12
   104b8:	f85d fb04 	ldr.w	pc, [sp], #4
   104bc:	1fff93c8 	.word	0x1fff93c8
   104c0:	1fff93c4 	.word	0x1fff93c4

000104c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   104c4:	b500      	push	{lr}
   104c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104c8:	f7f0 fba0 	bl	c0c <Sys_GetCoreID>
   104cc:	4603      	mov	r3, r0
   104ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
   104d0:	4a10      	ldr	r2, [pc, #64]	; (10514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   104d2:	9b01      	ldr	r3, [sp, #4]
   104d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104d8:	2b00      	cmp	r3, #0
   104da:	d10d      	bne.n	104f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   104dc:	f7f0 fa26 	bl	92c <Adc_schm_read_msr>
   104e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   104e2:	9b00      	ldr	r3, [sp, #0]
   104e4:	f003 0301 	and.w	r3, r3, #1
   104e8:	2b00      	cmp	r3, #0
   104ea:	d100      	bne.n	104ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   104ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   104ee:	490a      	ldr	r1, [pc, #40]	; (10518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
   104f0:	9b01      	ldr	r3, [sp, #4]
   104f2:	9a00      	ldr	r2, [sp, #0]
   104f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
   104f8:	4a06      	ldr	r2, [pc, #24]	; (10514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   104fa:	9b01      	ldr	r3, [sp, #4]
   104fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10500:	1c5a      	adds	r2, r3, #1
   10502:	4904      	ldr	r1, [pc, #16]	; (10514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   10504:	9b01      	ldr	r3, [sp, #4]
   10506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1050a:	bf00      	nop
   1050c:	b003      	add	sp, #12
   1050e:	f85d fb04 	ldr.w	pc, [sp], #4
   10512:	bf00      	nop
   10514:	1fff93d0 	.word	0x1fff93d0
   10518:	1fff93cc 	.word	0x1fff93cc

0001051c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   1051c:	b500      	push	{lr}
   1051e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10520:	f7f0 fb74 	bl	c0c <Sys_GetCoreID>
   10524:	4603      	mov	r3, r0
   10526:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
   10528:	4a0d      	ldr	r2, [pc, #52]	; (10560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   1052a:	9b01      	ldr	r3, [sp, #4]
   1052c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10530:	1e5a      	subs	r2, r3, #1
   10532:	490b      	ldr	r1, [pc, #44]	; (10560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   10534:	9b01      	ldr	r3, [sp, #4]
   10536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   1053a:	4a0a      	ldr	r2, [pc, #40]	; (10564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
   1053c:	9b01      	ldr	r3, [sp, #4]
   1053e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10542:	f003 0301 	and.w	r3, r3, #1
   10546:	2b00      	cmp	r3, #0
   10548:	d106      	bne.n	10558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
   1054a:	4a05      	ldr	r2, [pc, #20]	; (10560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   1054c:	9b01      	ldr	r3, [sp, #4]
   1054e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10552:	2b00      	cmp	r3, #0
   10554:	d100      	bne.n	10558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10556:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10558:	bf00      	nop
   1055a:	b003      	add	sp, #12
   1055c:	f85d fb04 	ldr.w	pc, [sp], #4
   10560:	1fff93d0 	.word	0x1fff93d0
   10564:	1fff93cc 	.word	0x1fff93cc

00010568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   10568:	b500      	push	{lr}
   1056a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1056c:	f7f0 fb4e 	bl	c0c <Sys_GetCoreID>
   10570:	4603      	mov	r3, r0
   10572:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
   10574:	4a10      	ldr	r2, [pc, #64]	; (105b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   10576:	9b01      	ldr	r3, [sp, #4]
   10578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1057c:	2b00      	cmp	r3, #0
   1057e:	d10d      	bne.n	1059c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10580:	f7f0 f9d4 	bl	92c <Adc_schm_read_msr>
   10584:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10586:	9b00      	ldr	r3, [sp, #0]
   10588:	f003 0301 	and.w	r3, r3, #1
   1058c:	2b00      	cmp	r3, #0
   1058e:	d100      	bne.n	10592 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10590:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   10592:	490a      	ldr	r1, [pc, #40]	; (105bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
   10594:	9b01      	ldr	r3, [sp, #4]
   10596:	9a00      	ldr	r2, [sp, #0]
   10598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
   1059c:	4a06      	ldr	r2, [pc, #24]	; (105b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   1059e:	9b01      	ldr	r3, [sp, #4]
   105a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105a4:	1c5a      	adds	r2, r3, #1
   105a6:	4904      	ldr	r1, [pc, #16]	; (105b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   105a8:	9b01      	ldr	r3, [sp, #4]
   105aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   105ae:	bf00      	nop
   105b0:	b003      	add	sp, #12
   105b2:	f85d fb04 	ldr.w	pc, [sp], #4
   105b6:	bf00      	nop
   105b8:	1fff93d8 	.word	0x1fff93d8
   105bc:	1fff93d4 	.word	0x1fff93d4

000105c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   105c0:	b500      	push	{lr}
   105c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105c4:	f7f0 fb22 	bl	c0c <Sys_GetCoreID>
   105c8:	4603      	mov	r3, r0
   105ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
   105cc:	4a0d      	ldr	r2, [pc, #52]	; (10604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   105ce:	9b01      	ldr	r3, [sp, #4]
   105d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105d4:	1e5a      	subs	r2, r3, #1
   105d6:	490b      	ldr	r1, [pc, #44]	; (10604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   105d8:	9b01      	ldr	r3, [sp, #4]
   105da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   105de:	4a0a      	ldr	r2, [pc, #40]	; (10608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
   105e0:	9b01      	ldr	r3, [sp, #4]
   105e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105e6:	f003 0301 	and.w	r3, r3, #1
   105ea:	2b00      	cmp	r3, #0
   105ec:	d106      	bne.n	105fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
   105ee:	4a05      	ldr	r2, [pc, #20]	; (10604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   105f0:	9b01      	ldr	r3, [sp, #4]
   105f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105f6:	2b00      	cmp	r3, #0
   105f8:	d100      	bne.n	105fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   105fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   105fc:	bf00      	nop
   105fe:	b003      	add	sp, #12
   10600:	f85d fb04 	ldr.w	pc, [sp], #4
   10604:	1fff93d8 	.word	0x1fff93d8
   10608:	1fff93d4 	.word	0x1fff93d4

0001060c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   1060c:	b500      	push	{lr}
   1060e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10610:	f7f0 fafc 	bl	c0c <Sys_GetCoreID>
   10614:	4603      	mov	r3, r0
   10616:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
   10618:	4a10      	ldr	r2, [pc, #64]	; (1065c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   1061a:	9b01      	ldr	r3, [sp, #4]
   1061c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10620:	2b00      	cmp	r3, #0
   10622:	d10d      	bne.n	10640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10624:	f7f0 f982 	bl	92c <Adc_schm_read_msr>
   10628:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1062a:	9b00      	ldr	r3, [sp, #0]
   1062c:	f003 0301 	and.w	r3, r3, #1
   10630:	2b00      	cmp	r3, #0
   10632:	d100      	bne.n	10636 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10634:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   10636:	490a      	ldr	r1, [pc, #40]	; (10660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
   10638:	9b01      	ldr	r3, [sp, #4]
   1063a:	9a00      	ldr	r2, [sp, #0]
   1063c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
   10640:	4a06      	ldr	r2, [pc, #24]	; (1065c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   10642:	9b01      	ldr	r3, [sp, #4]
   10644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10648:	1c5a      	adds	r2, r3, #1
   1064a:	4904      	ldr	r1, [pc, #16]	; (1065c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   1064c:	9b01      	ldr	r3, [sp, #4]
   1064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10652:	bf00      	nop
   10654:	b003      	add	sp, #12
   10656:	f85d fb04 	ldr.w	pc, [sp], #4
   1065a:	bf00      	nop
   1065c:	1fff93e0 	.word	0x1fff93e0
   10660:	1fff93dc 	.word	0x1fff93dc

00010664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   10664:	b500      	push	{lr}
   10666:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10668:	f7f0 fad0 	bl	c0c <Sys_GetCoreID>
   1066c:	4603      	mov	r3, r0
   1066e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
   10670:	4a0d      	ldr	r2, [pc, #52]	; (106a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   10672:	9b01      	ldr	r3, [sp, #4]
   10674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10678:	1e5a      	subs	r2, r3, #1
   1067a:	490b      	ldr	r1, [pc, #44]	; (106a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   1067c:	9b01      	ldr	r3, [sp, #4]
   1067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   10682:	4a0a      	ldr	r2, [pc, #40]	; (106ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
   10684:	9b01      	ldr	r3, [sp, #4]
   10686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1068a:	f003 0301 	and.w	r3, r3, #1
   1068e:	2b00      	cmp	r3, #0
   10690:	d106      	bne.n	106a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
   10692:	4a05      	ldr	r2, [pc, #20]	; (106a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   10694:	9b01      	ldr	r3, [sp, #4]
   10696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1069a:	2b00      	cmp	r3, #0
   1069c:	d100      	bne.n	106a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1069e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   106a0:	bf00      	nop
   106a2:	b003      	add	sp, #12
   106a4:	f85d fb04 	ldr.w	pc, [sp], #4
   106a8:	1fff93e0 	.word	0x1fff93e0
   106ac:	1fff93dc 	.word	0x1fff93dc

000106b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   106b0:	b500      	push	{lr}
   106b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106b4:	f7f0 faaa 	bl	c0c <Sys_GetCoreID>
   106b8:	4603      	mov	r3, r0
   106ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
   106bc:	4a10      	ldr	r2, [pc, #64]	; (10700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   106be:	9b01      	ldr	r3, [sp, #4]
   106c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106c4:	2b00      	cmp	r3, #0
   106c6:	d10d      	bne.n	106e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   106c8:	f7f0 f930 	bl	92c <Adc_schm_read_msr>
   106cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   106ce:	9b00      	ldr	r3, [sp, #0]
   106d0:	f003 0301 	and.w	r3, r3, #1
   106d4:	2b00      	cmp	r3, #0
   106d6:	d100      	bne.n	106da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   106d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   106da:	490a      	ldr	r1, [pc, #40]	; (10704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
   106dc:	9b01      	ldr	r3, [sp, #4]
   106de:	9a00      	ldr	r2, [sp, #0]
   106e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
   106e4:	4a06      	ldr	r2, [pc, #24]	; (10700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   106e6:	9b01      	ldr	r3, [sp, #4]
   106e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106ec:	1c5a      	adds	r2, r3, #1
   106ee:	4904      	ldr	r1, [pc, #16]	; (10700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   106f0:	9b01      	ldr	r3, [sp, #4]
   106f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   106f6:	bf00      	nop
   106f8:	b003      	add	sp, #12
   106fa:	f85d fb04 	ldr.w	pc, [sp], #4
   106fe:	bf00      	nop
   10700:	1fff93e8 	.word	0x1fff93e8
   10704:	1fff93e4 	.word	0x1fff93e4

00010708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   10708:	b500      	push	{lr}
   1070a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1070c:	f7f0 fa7e 	bl	c0c <Sys_GetCoreID>
   10710:	4603      	mov	r3, r0
   10712:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
   10714:	4a0d      	ldr	r2, [pc, #52]	; (1074c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   10716:	9b01      	ldr	r3, [sp, #4]
   10718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1071c:	1e5a      	subs	r2, r3, #1
   1071e:	490b      	ldr	r1, [pc, #44]	; (1074c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   10720:	9b01      	ldr	r3, [sp, #4]
   10722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   10726:	4a0a      	ldr	r2, [pc, #40]	; (10750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
   10728:	9b01      	ldr	r3, [sp, #4]
   1072a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1072e:	f003 0301 	and.w	r3, r3, #1
   10732:	2b00      	cmp	r3, #0
   10734:	d106      	bne.n	10744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
   10736:	4a05      	ldr	r2, [pc, #20]	; (1074c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   10738:	9b01      	ldr	r3, [sp, #4]
   1073a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1073e:	2b00      	cmp	r3, #0
   10740:	d100      	bne.n	10744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10742:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10744:	bf00      	nop
   10746:	b003      	add	sp, #12
   10748:	f85d fb04 	ldr.w	pc, [sp], #4
   1074c:	1fff93e8 	.word	0x1fff93e8
   10750:	1fff93e4 	.word	0x1fff93e4

00010754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   10754:	b500      	push	{lr}
   10756:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10758:	f7f0 fa58 	bl	c0c <Sys_GetCoreID>
   1075c:	4603      	mov	r3, r0
   1075e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
   10760:	4a10      	ldr	r2, [pc, #64]	; (107a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   10762:	9b01      	ldr	r3, [sp, #4]
   10764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10768:	2b00      	cmp	r3, #0
   1076a:	d10d      	bne.n	10788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1076c:	f7f0 f8de 	bl	92c <Adc_schm_read_msr>
   10770:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10772:	9b00      	ldr	r3, [sp, #0]
   10774:	f003 0301 	and.w	r3, r3, #1
   10778:	2b00      	cmp	r3, #0
   1077a:	d100      	bne.n	1077e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1077c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   1077e:	490a      	ldr	r1, [pc, #40]	; (107a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
   10780:	9b01      	ldr	r3, [sp, #4]
   10782:	9a00      	ldr	r2, [sp, #0]
   10784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
   10788:	4a06      	ldr	r2, [pc, #24]	; (107a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   1078a:	9b01      	ldr	r3, [sp, #4]
   1078c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10790:	1c5a      	adds	r2, r3, #1
   10792:	4904      	ldr	r1, [pc, #16]	; (107a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   10794:	9b01      	ldr	r3, [sp, #4]
   10796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1079a:	bf00      	nop
   1079c:	b003      	add	sp, #12
   1079e:	f85d fb04 	ldr.w	pc, [sp], #4
   107a2:	bf00      	nop
   107a4:	1fff93f0 	.word	0x1fff93f0
   107a8:	1fff93ec 	.word	0x1fff93ec

000107ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   107ac:	b500      	push	{lr}
   107ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107b0:	f7f0 fa2c 	bl	c0c <Sys_GetCoreID>
   107b4:	4603      	mov	r3, r0
   107b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
   107b8:	4a0d      	ldr	r2, [pc, #52]	; (107f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   107ba:	9b01      	ldr	r3, [sp, #4]
   107bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107c0:	1e5a      	subs	r2, r3, #1
   107c2:	490b      	ldr	r1, [pc, #44]	; (107f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   107c4:	9b01      	ldr	r3, [sp, #4]
   107c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   107ca:	4a0a      	ldr	r2, [pc, #40]	; (107f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
   107cc:	9b01      	ldr	r3, [sp, #4]
   107ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107d2:	f003 0301 	and.w	r3, r3, #1
   107d6:	2b00      	cmp	r3, #0
   107d8:	d106      	bne.n	107e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
   107da:	4a05      	ldr	r2, [pc, #20]	; (107f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   107dc:	9b01      	ldr	r3, [sp, #4]
   107de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107e2:	2b00      	cmp	r3, #0
   107e4:	d100      	bne.n	107e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   107e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   107e8:	bf00      	nop
   107ea:	b003      	add	sp, #12
   107ec:	f85d fb04 	ldr.w	pc, [sp], #4
   107f0:	1fff93f0 	.word	0x1fff93f0
   107f4:	1fff93ec 	.word	0x1fff93ec

000107f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   107f8:	b500      	push	{lr}
   107fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107fc:	f7f0 fa06 	bl	c0c <Sys_GetCoreID>
   10800:	4603      	mov	r3, r0
   10802:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
   10804:	4a10      	ldr	r2, [pc, #64]	; (10848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   10806:	9b01      	ldr	r3, [sp, #4]
   10808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1080c:	2b00      	cmp	r3, #0
   1080e:	d10d      	bne.n	1082c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10810:	f7f0 f88c 	bl	92c <Adc_schm_read_msr>
   10814:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10816:	9b00      	ldr	r3, [sp, #0]
   10818:	f003 0301 	and.w	r3, r3, #1
   1081c:	2b00      	cmp	r3, #0
   1081e:	d100      	bne.n	10822 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10820:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   10822:	490a      	ldr	r1, [pc, #40]	; (1084c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
   10824:	9b01      	ldr	r3, [sp, #4]
   10826:	9a00      	ldr	r2, [sp, #0]
   10828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
   1082c:	4a06      	ldr	r2, [pc, #24]	; (10848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   1082e:	9b01      	ldr	r3, [sp, #4]
   10830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10834:	1c5a      	adds	r2, r3, #1
   10836:	4904      	ldr	r1, [pc, #16]	; (10848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   10838:	9b01      	ldr	r3, [sp, #4]
   1083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1083e:	bf00      	nop
   10840:	b003      	add	sp, #12
   10842:	f85d fb04 	ldr.w	pc, [sp], #4
   10846:	bf00      	nop
   10848:	1fff93f8 	.word	0x1fff93f8
   1084c:	1fff93f4 	.word	0x1fff93f4

00010850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   10850:	b500      	push	{lr}
   10852:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10854:	f7f0 f9da 	bl	c0c <Sys_GetCoreID>
   10858:	4603      	mov	r3, r0
   1085a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
   1085c:	4a0d      	ldr	r2, [pc, #52]	; (10894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   1085e:	9b01      	ldr	r3, [sp, #4]
   10860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10864:	1e5a      	subs	r2, r3, #1
   10866:	490b      	ldr	r1, [pc, #44]	; (10894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   10868:	9b01      	ldr	r3, [sp, #4]
   1086a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   1086e:	4a0a      	ldr	r2, [pc, #40]	; (10898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
   10870:	9b01      	ldr	r3, [sp, #4]
   10872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10876:	f003 0301 	and.w	r3, r3, #1
   1087a:	2b00      	cmp	r3, #0
   1087c:	d106      	bne.n	1088c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
   1087e:	4a05      	ldr	r2, [pc, #20]	; (10894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   10880:	9b01      	ldr	r3, [sp, #4]
   10882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10886:	2b00      	cmp	r3, #0
   10888:	d100      	bne.n	1088c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1088a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1088c:	bf00      	nop
   1088e:	b003      	add	sp, #12
   10890:	f85d fb04 	ldr.w	pc, [sp], #4
   10894:	1fff93f8 	.word	0x1fff93f8
   10898:	1fff93f4 	.word	0x1fff93f4

0001089c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   1089c:	b500      	push	{lr}
   1089e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108a0:	f7f0 f9b4 	bl	c0c <Sys_GetCoreID>
   108a4:	4603      	mov	r3, r0
   108a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
   108a8:	4a10      	ldr	r2, [pc, #64]	; (108ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   108aa:	9b01      	ldr	r3, [sp, #4]
   108ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108b0:	2b00      	cmp	r3, #0
   108b2:	d10d      	bne.n	108d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   108b4:	f7f0 f83a 	bl	92c <Adc_schm_read_msr>
   108b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   108ba:	9b00      	ldr	r3, [sp, #0]
   108bc:	f003 0301 	and.w	r3, r3, #1
   108c0:	2b00      	cmp	r3, #0
   108c2:	d100      	bne.n	108c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   108c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   108c6:	490a      	ldr	r1, [pc, #40]	; (108f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
   108c8:	9b01      	ldr	r3, [sp, #4]
   108ca:	9a00      	ldr	r2, [sp, #0]
   108cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
   108d0:	4a06      	ldr	r2, [pc, #24]	; (108ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   108d2:	9b01      	ldr	r3, [sp, #4]
   108d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108d8:	1c5a      	adds	r2, r3, #1
   108da:	4904      	ldr	r1, [pc, #16]	; (108ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   108dc:	9b01      	ldr	r3, [sp, #4]
   108de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   108e2:	bf00      	nop
   108e4:	b003      	add	sp, #12
   108e6:	f85d fb04 	ldr.w	pc, [sp], #4
   108ea:	bf00      	nop
   108ec:	1fff9400 	.word	0x1fff9400
   108f0:	1fff93fc 	.word	0x1fff93fc

000108f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   108f4:	b500      	push	{lr}
   108f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108f8:	f7f0 f988 	bl	c0c <Sys_GetCoreID>
   108fc:	4603      	mov	r3, r0
   108fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
   10900:	4a0d      	ldr	r2, [pc, #52]	; (10938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   10902:	9b01      	ldr	r3, [sp, #4]
   10904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10908:	1e5a      	subs	r2, r3, #1
   1090a:	490b      	ldr	r1, [pc, #44]	; (10938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   1090c:	9b01      	ldr	r3, [sp, #4]
   1090e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   10912:	4a0a      	ldr	r2, [pc, #40]	; (1093c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
   10914:	9b01      	ldr	r3, [sp, #4]
   10916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1091a:	f003 0301 	and.w	r3, r3, #1
   1091e:	2b00      	cmp	r3, #0
   10920:	d106      	bne.n	10930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
   10922:	4a05      	ldr	r2, [pc, #20]	; (10938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   10924:	9b01      	ldr	r3, [sp, #4]
   10926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1092a:	2b00      	cmp	r3, #0
   1092c:	d100      	bne.n	10930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1092e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10930:	bf00      	nop
   10932:	b003      	add	sp, #12
   10934:	f85d fb04 	ldr.w	pc, [sp], #4
   10938:	1fff9400 	.word	0x1fff9400
   1093c:	1fff93fc 	.word	0x1fff93fc

00010940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   10940:	b500      	push	{lr}
   10942:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10944:	f7f0 f962 	bl	c0c <Sys_GetCoreID>
   10948:	4603      	mov	r3, r0
   1094a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
   1094c:	4a10      	ldr	r2, [pc, #64]	; (10990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   1094e:	9b01      	ldr	r3, [sp, #4]
   10950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10954:	2b00      	cmp	r3, #0
   10956:	d10d      	bne.n	10974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10958:	f7ef ffe8 	bl	92c <Adc_schm_read_msr>
   1095c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1095e:	9b00      	ldr	r3, [sp, #0]
   10960:	f003 0301 	and.w	r3, r3, #1
   10964:	2b00      	cmp	r3, #0
   10966:	d100      	bne.n	1096a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10968:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   1096a:	490a      	ldr	r1, [pc, #40]	; (10994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
   1096c:	9b01      	ldr	r3, [sp, #4]
   1096e:	9a00      	ldr	r2, [sp, #0]
   10970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
   10974:	4a06      	ldr	r2, [pc, #24]	; (10990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   10976:	9b01      	ldr	r3, [sp, #4]
   10978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1097c:	1c5a      	adds	r2, r3, #1
   1097e:	4904      	ldr	r1, [pc, #16]	; (10990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   10980:	9b01      	ldr	r3, [sp, #4]
   10982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10986:	bf00      	nop
   10988:	b003      	add	sp, #12
   1098a:	f85d fb04 	ldr.w	pc, [sp], #4
   1098e:	bf00      	nop
   10990:	1fff9408 	.word	0x1fff9408
   10994:	1fff9404 	.word	0x1fff9404

00010998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   10998:	b500      	push	{lr}
   1099a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1099c:	f7f0 f936 	bl	c0c <Sys_GetCoreID>
   109a0:	4603      	mov	r3, r0
   109a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
   109a4:	4a0d      	ldr	r2, [pc, #52]	; (109dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   109a6:	9b01      	ldr	r3, [sp, #4]
   109a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109ac:	1e5a      	subs	r2, r3, #1
   109ae:	490b      	ldr	r1, [pc, #44]	; (109dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   109b0:	9b01      	ldr	r3, [sp, #4]
   109b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   109b6:	4a0a      	ldr	r2, [pc, #40]	; (109e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
   109b8:	9b01      	ldr	r3, [sp, #4]
   109ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109be:	f003 0301 	and.w	r3, r3, #1
   109c2:	2b00      	cmp	r3, #0
   109c4:	d106      	bne.n	109d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
   109c6:	4a05      	ldr	r2, [pc, #20]	; (109dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   109c8:	9b01      	ldr	r3, [sp, #4]
   109ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109ce:	2b00      	cmp	r3, #0
   109d0:	d100      	bne.n	109d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   109d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   109d4:	bf00      	nop
   109d6:	b003      	add	sp, #12
   109d8:	f85d fb04 	ldr.w	pc, [sp], #4
   109dc:	1fff9408 	.word	0x1fff9408
   109e0:	1fff9404 	.word	0x1fff9404

000109e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   109e4:	b500      	push	{lr}
   109e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109e8:	f7f0 f910 	bl	c0c <Sys_GetCoreID>
   109ec:	4603      	mov	r3, r0
   109ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
   109f0:	4a10      	ldr	r2, [pc, #64]	; (10a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   109f2:	9b01      	ldr	r3, [sp, #4]
   109f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109f8:	2b00      	cmp	r3, #0
   109fa:	d10d      	bne.n	10a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   109fc:	f7ef ff96 	bl	92c <Adc_schm_read_msr>
   10a00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a02:	9b00      	ldr	r3, [sp, #0]
   10a04:	f003 0301 	and.w	r3, r3, #1
   10a08:	2b00      	cmp	r3, #0
   10a0a:	d100      	bne.n	10a0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   10a0e:	490a      	ldr	r1, [pc, #40]	; (10a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
   10a10:	9b01      	ldr	r3, [sp, #4]
   10a12:	9a00      	ldr	r2, [sp, #0]
   10a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
   10a18:	4a06      	ldr	r2, [pc, #24]	; (10a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10a1a:	9b01      	ldr	r3, [sp, #4]
   10a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a20:	1c5a      	adds	r2, r3, #1
   10a22:	4904      	ldr	r1, [pc, #16]	; (10a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10a24:	9b01      	ldr	r3, [sp, #4]
   10a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a2a:	bf00      	nop
   10a2c:	b003      	add	sp, #12
   10a2e:	f85d fb04 	ldr.w	pc, [sp], #4
   10a32:	bf00      	nop
   10a34:	1fff9410 	.word	0x1fff9410
   10a38:	1fff940c 	.word	0x1fff940c

00010a3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   10a3c:	b500      	push	{lr}
   10a3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a40:	f7f0 f8e4 	bl	c0c <Sys_GetCoreID>
   10a44:	4603      	mov	r3, r0
   10a46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
   10a48:	4a0d      	ldr	r2, [pc, #52]	; (10a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10a4a:	9b01      	ldr	r3, [sp, #4]
   10a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a50:	1e5a      	subs	r2, r3, #1
   10a52:	490b      	ldr	r1, [pc, #44]	; (10a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10a54:	9b01      	ldr	r3, [sp, #4]
   10a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   10a5a:	4a0a      	ldr	r2, [pc, #40]	; (10a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
   10a5c:	9b01      	ldr	r3, [sp, #4]
   10a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a62:	f003 0301 	and.w	r3, r3, #1
   10a66:	2b00      	cmp	r3, #0
   10a68:	d106      	bne.n	10a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
   10a6a:	4a05      	ldr	r2, [pc, #20]	; (10a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10a6c:	9b01      	ldr	r3, [sp, #4]
   10a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a72:	2b00      	cmp	r3, #0
   10a74:	d100      	bne.n	10a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10a78:	bf00      	nop
   10a7a:	b003      	add	sp, #12
   10a7c:	f85d fb04 	ldr.w	pc, [sp], #4
   10a80:	1fff9410 	.word	0x1fff9410
   10a84:	1fff940c 	.word	0x1fff940c

00010a88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10a88:	b500      	push	{lr}
   10a8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a8c:	f7f0 f8be 	bl	c0c <Sys_GetCoreID>
   10a90:	4603      	mov	r3, r0
   10a92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
   10a94:	4a10      	ldr	r2, [pc, #64]	; (10ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10a96:	9b01      	ldr	r3, [sp, #4]
   10a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a9c:	2b00      	cmp	r3, #0
   10a9e:	d10d      	bne.n	10abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10aa0:	f7ef ff44 	bl	92c <Adc_schm_read_msr>
   10aa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10aa6:	9b00      	ldr	r3, [sp, #0]
   10aa8:	f003 0301 	and.w	r3, r3, #1
   10aac:	2b00      	cmp	r3, #0
   10aae:	d100      	bne.n	10ab2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ab0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   10ab2:	490a      	ldr	r1, [pc, #40]	; (10adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
   10ab4:	9b01      	ldr	r3, [sp, #4]
   10ab6:	9a00      	ldr	r2, [sp, #0]
   10ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
   10abc:	4a06      	ldr	r2, [pc, #24]	; (10ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10abe:	9b01      	ldr	r3, [sp, #4]
   10ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ac4:	1c5a      	adds	r2, r3, #1
   10ac6:	4904      	ldr	r1, [pc, #16]	; (10ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10ac8:	9b01      	ldr	r3, [sp, #4]
   10aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ace:	bf00      	nop
   10ad0:	b003      	add	sp, #12
   10ad2:	f85d fb04 	ldr.w	pc, [sp], #4
   10ad6:	bf00      	nop
   10ad8:	1fff9418 	.word	0x1fff9418
   10adc:	1fff9414 	.word	0x1fff9414

00010ae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10ae0:	b500      	push	{lr}
   10ae2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ae4:	f7f0 f892 	bl	c0c <Sys_GetCoreID>
   10ae8:	4603      	mov	r3, r0
   10aea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
   10aec:	4a0d      	ldr	r2, [pc, #52]	; (10b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10aee:	9b01      	ldr	r3, [sp, #4]
   10af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10af4:	1e5a      	subs	r2, r3, #1
   10af6:	490b      	ldr	r1, [pc, #44]	; (10b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10af8:	9b01      	ldr	r3, [sp, #4]
   10afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   10afe:	4a0a      	ldr	r2, [pc, #40]	; (10b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
   10b00:	9b01      	ldr	r3, [sp, #4]
   10b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b06:	f003 0301 	and.w	r3, r3, #1
   10b0a:	2b00      	cmp	r3, #0
   10b0c:	d106      	bne.n	10b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
   10b0e:	4a05      	ldr	r2, [pc, #20]	; (10b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10b10:	9b01      	ldr	r3, [sp, #4]
   10b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b16:	2b00      	cmp	r3, #0
   10b18:	d100      	bne.n	10b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b1c:	bf00      	nop
   10b1e:	b003      	add	sp, #12
   10b20:	f85d fb04 	ldr.w	pc, [sp], #4
   10b24:	1fff9418 	.word	0x1fff9418
   10b28:	1fff9414 	.word	0x1fff9414

00010b2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10b2c:	b500      	push	{lr}
   10b2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b30:	f7f0 f86c 	bl	c0c <Sys_GetCoreID>
   10b34:	4603      	mov	r3, r0
   10b36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
   10b38:	4a10      	ldr	r2, [pc, #64]	; (10b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10b3a:	9b01      	ldr	r3, [sp, #4]
   10b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b40:	2b00      	cmp	r3, #0
   10b42:	d10d      	bne.n	10b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b44:	f7ef fef2 	bl	92c <Adc_schm_read_msr>
   10b48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b4a:	9b00      	ldr	r3, [sp, #0]
   10b4c:	f003 0301 	and.w	r3, r3, #1
   10b50:	2b00      	cmp	r3, #0
   10b52:	d100      	bne.n	10b56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   10b56:	490a      	ldr	r1, [pc, #40]	; (10b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
   10b58:	9b01      	ldr	r3, [sp, #4]
   10b5a:	9a00      	ldr	r2, [sp, #0]
   10b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
   10b60:	4a06      	ldr	r2, [pc, #24]	; (10b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10b62:	9b01      	ldr	r3, [sp, #4]
   10b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b68:	1c5a      	adds	r2, r3, #1
   10b6a:	4904      	ldr	r1, [pc, #16]	; (10b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10b6c:	9b01      	ldr	r3, [sp, #4]
   10b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b72:	bf00      	nop
   10b74:	b003      	add	sp, #12
   10b76:	f85d fb04 	ldr.w	pc, [sp], #4
   10b7a:	bf00      	nop
   10b7c:	1fff9420 	.word	0x1fff9420
   10b80:	1fff941c 	.word	0x1fff941c

00010b84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10b84:	b500      	push	{lr}
   10b86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b88:	f7f0 f840 	bl	c0c <Sys_GetCoreID>
   10b8c:	4603      	mov	r3, r0
   10b8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
   10b90:	4a0d      	ldr	r2, [pc, #52]	; (10bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10b92:	9b01      	ldr	r3, [sp, #4]
   10b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b98:	1e5a      	subs	r2, r3, #1
   10b9a:	490b      	ldr	r1, [pc, #44]	; (10bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10b9c:	9b01      	ldr	r3, [sp, #4]
   10b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   10ba2:	4a0a      	ldr	r2, [pc, #40]	; (10bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
   10ba4:	9b01      	ldr	r3, [sp, #4]
   10ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10baa:	f003 0301 	and.w	r3, r3, #1
   10bae:	2b00      	cmp	r3, #0
   10bb0:	d106      	bne.n	10bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
   10bb2:	4a05      	ldr	r2, [pc, #20]	; (10bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10bb4:	9b01      	ldr	r3, [sp, #4]
   10bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bba:	2b00      	cmp	r3, #0
   10bbc:	d100      	bne.n	10bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10bbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10bc0:	bf00      	nop
   10bc2:	b003      	add	sp, #12
   10bc4:	f85d fb04 	ldr.w	pc, [sp], #4
   10bc8:	1fff9420 	.word	0x1fff9420
   10bcc:	1fff941c 	.word	0x1fff941c

00010bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10bd0:	b500      	push	{lr}
   10bd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bd4:	f7f0 f81a 	bl	c0c <Sys_GetCoreID>
   10bd8:	4603      	mov	r3, r0
   10bda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
   10bdc:	4a10      	ldr	r2, [pc, #64]	; (10c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10bde:	9b01      	ldr	r3, [sp, #4]
   10be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10be4:	2b00      	cmp	r3, #0
   10be6:	d10d      	bne.n	10c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10be8:	f7ef fea0 	bl	92c <Adc_schm_read_msr>
   10bec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10bee:	9b00      	ldr	r3, [sp, #0]
   10bf0:	f003 0301 	and.w	r3, r3, #1
   10bf4:	2b00      	cmp	r3, #0
   10bf6:	d100      	bne.n	10bfa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10bf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   10bfa:	490a      	ldr	r1, [pc, #40]	; (10c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
   10bfc:	9b01      	ldr	r3, [sp, #4]
   10bfe:	9a00      	ldr	r2, [sp, #0]
   10c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
   10c04:	4a06      	ldr	r2, [pc, #24]	; (10c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10c06:	9b01      	ldr	r3, [sp, #4]
   10c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c0c:	1c5a      	adds	r2, r3, #1
   10c0e:	4904      	ldr	r1, [pc, #16]	; (10c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10c10:	9b01      	ldr	r3, [sp, #4]
   10c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c16:	bf00      	nop
   10c18:	b003      	add	sp, #12
   10c1a:	f85d fb04 	ldr.w	pc, [sp], #4
   10c1e:	bf00      	nop
   10c20:	1fff9428 	.word	0x1fff9428
   10c24:	1fff9424 	.word	0x1fff9424

00010c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10c28:	b500      	push	{lr}
   10c2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c2c:	f7ef ffee 	bl	c0c <Sys_GetCoreID>
   10c30:	4603      	mov	r3, r0
   10c32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
   10c34:	4a0d      	ldr	r2, [pc, #52]	; (10c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10c36:	9b01      	ldr	r3, [sp, #4]
   10c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c3c:	1e5a      	subs	r2, r3, #1
   10c3e:	490b      	ldr	r1, [pc, #44]	; (10c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10c40:	9b01      	ldr	r3, [sp, #4]
   10c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   10c46:	4a0a      	ldr	r2, [pc, #40]	; (10c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
   10c48:	9b01      	ldr	r3, [sp, #4]
   10c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c4e:	f003 0301 	and.w	r3, r3, #1
   10c52:	2b00      	cmp	r3, #0
   10c54:	d106      	bne.n	10c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
   10c56:	4a05      	ldr	r2, [pc, #20]	; (10c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10c58:	9b01      	ldr	r3, [sp, #4]
   10c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c5e:	2b00      	cmp	r3, #0
   10c60:	d100      	bne.n	10c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c64:	bf00      	nop
   10c66:	b003      	add	sp, #12
   10c68:	f85d fb04 	ldr.w	pc, [sp], #4
   10c6c:	1fff9428 	.word	0x1fff9428
   10c70:	1fff9424 	.word	0x1fff9424

00010c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10c74:	b500      	push	{lr}
   10c76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c78:	f7ef ffc8 	bl	c0c <Sys_GetCoreID>
   10c7c:	4603      	mov	r3, r0
   10c7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
   10c80:	4a10      	ldr	r2, [pc, #64]	; (10cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10c82:	9b01      	ldr	r3, [sp, #4]
   10c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c88:	2b00      	cmp	r3, #0
   10c8a:	d10d      	bne.n	10ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c8c:	f7ef fe4e 	bl	92c <Adc_schm_read_msr>
   10c90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c92:	9b00      	ldr	r3, [sp, #0]
   10c94:	f003 0301 	and.w	r3, r3, #1
   10c98:	2b00      	cmp	r3, #0
   10c9a:	d100      	bne.n	10c9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   10c9e:	490a      	ldr	r1, [pc, #40]	; (10cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
   10ca0:	9b01      	ldr	r3, [sp, #4]
   10ca2:	9a00      	ldr	r2, [sp, #0]
   10ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
   10ca8:	4a06      	ldr	r2, [pc, #24]	; (10cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10caa:	9b01      	ldr	r3, [sp, #4]
   10cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cb0:	1c5a      	adds	r2, r3, #1
   10cb2:	4904      	ldr	r1, [pc, #16]	; (10cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10cb4:	9b01      	ldr	r3, [sp, #4]
   10cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10cba:	bf00      	nop
   10cbc:	b003      	add	sp, #12
   10cbe:	f85d fb04 	ldr.w	pc, [sp], #4
   10cc2:	bf00      	nop
   10cc4:	1fff9430 	.word	0x1fff9430
   10cc8:	1fff942c 	.word	0x1fff942c

00010ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10ccc:	b500      	push	{lr}
   10cce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10cd0:	f7ef ff9c 	bl	c0c <Sys_GetCoreID>
   10cd4:	4603      	mov	r3, r0
   10cd6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
   10cd8:	4a0d      	ldr	r2, [pc, #52]	; (10d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10cda:	9b01      	ldr	r3, [sp, #4]
   10cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ce0:	1e5a      	subs	r2, r3, #1
   10ce2:	490b      	ldr	r1, [pc, #44]	; (10d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10ce4:	9b01      	ldr	r3, [sp, #4]
   10ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   10cea:	4a0a      	ldr	r2, [pc, #40]	; (10d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
   10cec:	9b01      	ldr	r3, [sp, #4]
   10cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cf2:	f003 0301 	and.w	r3, r3, #1
   10cf6:	2b00      	cmp	r3, #0
   10cf8:	d106      	bne.n	10d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
   10cfa:	4a05      	ldr	r2, [pc, #20]	; (10d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10cfc:	9b01      	ldr	r3, [sp, #4]
   10cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d02:	2b00      	cmp	r3, #0
   10d04:	d100      	bne.n	10d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d08:	bf00      	nop
   10d0a:	b003      	add	sp, #12
   10d0c:	f85d fb04 	ldr.w	pc, [sp], #4
   10d10:	1fff9430 	.word	0x1fff9430
   10d14:	1fff942c 	.word	0x1fff942c

00010d18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10d18:	b500      	push	{lr}
   10d1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d1c:	f7ef ff76 	bl	c0c <Sys_GetCoreID>
   10d20:	4603      	mov	r3, r0
   10d22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
   10d24:	4a10      	ldr	r2, [pc, #64]	; (10d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10d26:	9b01      	ldr	r3, [sp, #4]
   10d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d2c:	2b00      	cmp	r3, #0
   10d2e:	d10d      	bne.n	10d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d30:	f7ef fdfc 	bl	92c <Adc_schm_read_msr>
   10d34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d36:	9b00      	ldr	r3, [sp, #0]
   10d38:	f003 0301 	and.w	r3, r3, #1
   10d3c:	2b00      	cmp	r3, #0
   10d3e:	d100      	bne.n	10d42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   10d42:	490a      	ldr	r1, [pc, #40]	; (10d6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   10d44:	9b01      	ldr	r3, [sp, #4]
   10d46:	9a00      	ldr	r2, [sp, #0]
   10d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   10d4c:	4a06      	ldr	r2, [pc, #24]	; (10d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10d4e:	9b01      	ldr	r3, [sp, #4]
   10d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d54:	1c5a      	adds	r2, r3, #1
   10d56:	4904      	ldr	r1, [pc, #16]	; (10d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10d58:	9b01      	ldr	r3, [sp, #4]
   10d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d5e:	bf00      	nop
   10d60:	b003      	add	sp, #12
   10d62:	f85d fb04 	ldr.w	pc, [sp], #4
   10d66:	bf00      	nop
   10d68:	1fff9438 	.word	0x1fff9438
   10d6c:	1fff9434 	.word	0x1fff9434

00010d70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10d70:	b500      	push	{lr}
   10d72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d74:	f7ef ff4a 	bl	c0c <Sys_GetCoreID>
   10d78:	4603      	mov	r3, r0
   10d7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   10d7c:	4a0d      	ldr	r2, [pc, #52]	; (10db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10d7e:	9b01      	ldr	r3, [sp, #4]
   10d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d84:	1e5a      	subs	r2, r3, #1
   10d86:	490b      	ldr	r1, [pc, #44]	; (10db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10d88:	9b01      	ldr	r3, [sp, #4]
   10d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   10d8e:	4a0a      	ldr	r2, [pc, #40]	; (10db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   10d90:	9b01      	ldr	r3, [sp, #4]
   10d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d96:	f003 0301 	and.w	r3, r3, #1
   10d9a:	2b00      	cmp	r3, #0
   10d9c:	d106      	bne.n	10dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   10d9e:	4a05      	ldr	r2, [pc, #20]	; (10db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10da0:	9b01      	ldr	r3, [sp, #4]
   10da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10da6:	2b00      	cmp	r3, #0
   10da8:	d100      	bne.n	10dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10daa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10dac:	bf00      	nop
   10dae:	b003      	add	sp, #12
   10db0:	f85d fb04 	ldr.w	pc, [sp], #4
   10db4:	1fff9438 	.word	0x1fff9438
   10db8:	1fff9434 	.word	0x1fff9434

00010dbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10dbc:	b500      	push	{lr}
   10dbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10dc0:	f7ef ff24 	bl	c0c <Sys_GetCoreID>
   10dc4:	4603      	mov	r3, r0
   10dc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   10dc8:	4a10      	ldr	r2, [pc, #64]	; (10e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10dca:	9b01      	ldr	r3, [sp, #4]
   10dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dd0:	2b00      	cmp	r3, #0
   10dd2:	d10d      	bne.n	10df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10dd4:	f7ef fdaa 	bl	92c <Adc_schm_read_msr>
   10dd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10dda:	9b00      	ldr	r3, [sp, #0]
   10ddc:	f003 0301 	and.w	r3, r3, #1
   10de0:	2b00      	cmp	r3, #0
   10de2:	d100      	bne.n	10de6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10de4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   10de6:	490a      	ldr	r1, [pc, #40]	; (10e10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   10de8:	9b01      	ldr	r3, [sp, #4]
   10dea:	9a00      	ldr	r2, [sp, #0]
   10dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   10df0:	4a06      	ldr	r2, [pc, #24]	; (10e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10df2:	9b01      	ldr	r3, [sp, #4]
   10df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10df8:	1c5a      	adds	r2, r3, #1
   10dfa:	4904      	ldr	r1, [pc, #16]	; (10e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10dfc:	9b01      	ldr	r3, [sp, #4]
   10dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e02:	bf00      	nop
   10e04:	b003      	add	sp, #12
   10e06:	f85d fb04 	ldr.w	pc, [sp], #4
   10e0a:	bf00      	nop
   10e0c:	1fff9440 	.word	0x1fff9440
   10e10:	1fff943c 	.word	0x1fff943c

00010e14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10e14:	b500      	push	{lr}
   10e16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e18:	f7ef fef8 	bl	c0c <Sys_GetCoreID>
   10e1c:	4603      	mov	r3, r0
   10e1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   10e20:	4a0d      	ldr	r2, [pc, #52]	; (10e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10e22:	9b01      	ldr	r3, [sp, #4]
   10e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e28:	1e5a      	subs	r2, r3, #1
   10e2a:	490b      	ldr	r1, [pc, #44]	; (10e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10e2c:	9b01      	ldr	r3, [sp, #4]
   10e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   10e32:	4a0a      	ldr	r2, [pc, #40]	; (10e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   10e34:	9b01      	ldr	r3, [sp, #4]
   10e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e3a:	f003 0301 	and.w	r3, r3, #1
   10e3e:	2b00      	cmp	r3, #0
   10e40:	d106      	bne.n	10e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   10e42:	4a05      	ldr	r2, [pc, #20]	; (10e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10e44:	9b01      	ldr	r3, [sp, #4]
   10e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e4a:	2b00      	cmp	r3, #0
   10e4c:	d100      	bne.n	10e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e50:	bf00      	nop
   10e52:	b003      	add	sp, #12
   10e54:	f85d fb04 	ldr.w	pc, [sp], #4
   10e58:	1fff9440 	.word	0x1fff9440
   10e5c:	1fff943c 	.word	0x1fff943c

00010e60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10e60:	b500      	push	{lr}
   10e62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e64:	f7ef fed2 	bl	c0c <Sys_GetCoreID>
   10e68:	4603      	mov	r3, r0
   10e6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   10e6c:	4a10      	ldr	r2, [pc, #64]	; (10eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10e6e:	9b01      	ldr	r3, [sp, #4]
   10e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e74:	2b00      	cmp	r3, #0
   10e76:	d10d      	bne.n	10e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10e78:	f7ef fd58 	bl	92c <Adc_schm_read_msr>
   10e7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e7e:	9b00      	ldr	r3, [sp, #0]
   10e80:	f003 0301 	and.w	r3, r3, #1
   10e84:	2b00      	cmp	r3, #0
   10e86:	d100      	bne.n	10e8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   10e8a:	490a      	ldr	r1, [pc, #40]	; (10eb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   10e8c:	9b01      	ldr	r3, [sp, #4]
   10e8e:	9a00      	ldr	r2, [sp, #0]
   10e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   10e94:	4a06      	ldr	r2, [pc, #24]	; (10eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10e96:	9b01      	ldr	r3, [sp, #4]
   10e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e9c:	1c5a      	adds	r2, r3, #1
   10e9e:	4904      	ldr	r1, [pc, #16]	; (10eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10ea0:	9b01      	ldr	r3, [sp, #4]
   10ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ea6:	bf00      	nop
   10ea8:	b003      	add	sp, #12
   10eaa:	f85d fb04 	ldr.w	pc, [sp], #4
   10eae:	bf00      	nop
   10eb0:	1fff9448 	.word	0x1fff9448
   10eb4:	1fff9444 	.word	0x1fff9444

00010eb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10eb8:	b500      	push	{lr}
   10eba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ebc:	f7ef fea6 	bl	c0c <Sys_GetCoreID>
   10ec0:	4603      	mov	r3, r0
   10ec2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   10ec4:	4a0d      	ldr	r2, [pc, #52]	; (10efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10ec6:	9b01      	ldr	r3, [sp, #4]
   10ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ecc:	1e5a      	subs	r2, r3, #1
   10ece:	490b      	ldr	r1, [pc, #44]	; (10efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10ed0:	9b01      	ldr	r3, [sp, #4]
   10ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   10ed6:	4a0a      	ldr	r2, [pc, #40]	; (10f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   10ed8:	9b01      	ldr	r3, [sp, #4]
   10eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ede:	f003 0301 	and.w	r3, r3, #1
   10ee2:	2b00      	cmp	r3, #0
   10ee4:	d106      	bne.n	10ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   10ee6:	4a05      	ldr	r2, [pc, #20]	; (10efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10ee8:	9b01      	ldr	r3, [sp, #4]
   10eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10eee:	2b00      	cmp	r3, #0
   10ef0:	d100      	bne.n	10ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ef2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ef4:	bf00      	nop
   10ef6:	b003      	add	sp, #12
   10ef8:	f85d fb04 	ldr.w	pc, [sp], #4
   10efc:	1fff9448 	.word	0x1fff9448
   10f00:	1fff9444 	.word	0x1fff9444

00010f04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10f04:	b500      	push	{lr}
   10f06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f08:	f7ef fe80 	bl	c0c <Sys_GetCoreID>
   10f0c:	4603      	mov	r3, r0
   10f0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   10f10:	4a10      	ldr	r2, [pc, #64]	; (10f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10f12:	9b01      	ldr	r3, [sp, #4]
   10f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f18:	2b00      	cmp	r3, #0
   10f1a:	d10d      	bne.n	10f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f1c:	f7ef fd06 	bl	92c <Adc_schm_read_msr>
   10f20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f22:	9b00      	ldr	r3, [sp, #0]
   10f24:	f003 0301 	and.w	r3, r3, #1
   10f28:	2b00      	cmp	r3, #0
   10f2a:	d100      	bne.n	10f2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   10f2e:	490a      	ldr	r1, [pc, #40]	; (10f58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   10f30:	9b01      	ldr	r3, [sp, #4]
   10f32:	9a00      	ldr	r2, [sp, #0]
   10f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   10f38:	4a06      	ldr	r2, [pc, #24]	; (10f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10f3a:	9b01      	ldr	r3, [sp, #4]
   10f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f40:	1c5a      	adds	r2, r3, #1
   10f42:	4904      	ldr	r1, [pc, #16]	; (10f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10f44:	9b01      	ldr	r3, [sp, #4]
   10f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f4a:	bf00      	nop
   10f4c:	b003      	add	sp, #12
   10f4e:	f85d fb04 	ldr.w	pc, [sp], #4
   10f52:	bf00      	nop
   10f54:	1fff9450 	.word	0x1fff9450
   10f58:	1fff944c 	.word	0x1fff944c

00010f5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10f5c:	b500      	push	{lr}
   10f5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f60:	f7ef fe54 	bl	c0c <Sys_GetCoreID>
   10f64:	4603      	mov	r3, r0
   10f66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   10f68:	4a0d      	ldr	r2, [pc, #52]	; (10fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10f6a:	9b01      	ldr	r3, [sp, #4]
   10f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f70:	1e5a      	subs	r2, r3, #1
   10f72:	490b      	ldr	r1, [pc, #44]	; (10fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10f74:	9b01      	ldr	r3, [sp, #4]
   10f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   10f7a:	4a0a      	ldr	r2, [pc, #40]	; (10fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   10f7c:	9b01      	ldr	r3, [sp, #4]
   10f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f82:	f003 0301 	and.w	r3, r3, #1
   10f86:	2b00      	cmp	r3, #0
   10f88:	d106      	bne.n	10f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   10f8a:	4a05      	ldr	r2, [pc, #20]	; (10fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10f8c:	9b01      	ldr	r3, [sp, #4]
   10f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f92:	2b00      	cmp	r3, #0
   10f94:	d100      	bne.n	10f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f98:	bf00      	nop
   10f9a:	b003      	add	sp, #12
   10f9c:	f85d fb04 	ldr.w	pc, [sp], #4
   10fa0:	1fff9450 	.word	0x1fff9450
   10fa4:	1fff944c 	.word	0x1fff944c

00010fa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   10fa8:	b500      	push	{lr}
   10faa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fac:	f7ef fe2e 	bl	c0c <Sys_GetCoreID>
   10fb0:	4603      	mov	r3, r0
   10fb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   10fb4:	4a10      	ldr	r2, [pc, #64]	; (10ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10fb6:	9b01      	ldr	r3, [sp, #4]
   10fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fbc:	2b00      	cmp	r3, #0
   10fbe:	d10d      	bne.n	10fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10fc0:	f7ef fcb4 	bl	92c <Adc_schm_read_msr>
   10fc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10fc6:	9b00      	ldr	r3, [sp, #0]
   10fc8:	f003 0301 	and.w	r3, r3, #1
   10fcc:	2b00      	cmp	r3, #0
   10fce:	d100      	bne.n	10fd2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10fd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   10fd2:	490a      	ldr	r1, [pc, #40]	; (10ffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   10fd4:	9b01      	ldr	r3, [sp, #4]
   10fd6:	9a00      	ldr	r2, [sp, #0]
   10fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   10fdc:	4a06      	ldr	r2, [pc, #24]	; (10ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10fde:	9b01      	ldr	r3, [sp, #4]
   10fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fe4:	1c5a      	adds	r2, r3, #1
   10fe6:	4904      	ldr	r1, [pc, #16]	; (10ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10fe8:	9b01      	ldr	r3, [sp, #4]
   10fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10fee:	bf00      	nop
   10ff0:	b003      	add	sp, #12
   10ff2:	f85d fb04 	ldr.w	pc, [sp], #4
   10ff6:	bf00      	nop
   10ff8:	1fff9458 	.word	0x1fff9458
   10ffc:	1fff9454 	.word	0x1fff9454

00011000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   11000:	b500      	push	{lr}
   11002:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11004:	f7ef fe02 	bl	c0c <Sys_GetCoreID>
   11008:	4603      	mov	r3, r0
   1100a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   1100c:	4a0d      	ldr	r2, [pc, #52]	; (11044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   1100e:	9b01      	ldr	r3, [sp, #4]
   11010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11014:	1e5a      	subs	r2, r3, #1
   11016:	490b      	ldr	r1, [pc, #44]	; (11044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   11018:	9b01      	ldr	r3, [sp, #4]
   1101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   1101e:	4a0a      	ldr	r2, [pc, #40]	; (11048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   11020:	9b01      	ldr	r3, [sp, #4]
   11022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11026:	f003 0301 	and.w	r3, r3, #1
   1102a:	2b00      	cmp	r3, #0
   1102c:	d106      	bne.n	1103c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   1102e:	4a05      	ldr	r2, [pc, #20]	; (11044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   11030:	9b01      	ldr	r3, [sp, #4]
   11032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11036:	2b00      	cmp	r3, #0
   11038:	d100      	bne.n	1103c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1103a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1103c:	bf00      	nop
   1103e:	b003      	add	sp, #12
   11040:	f85d fb04 	ldr.w	pc, [sp], #4
   11044:	1fff9458 	.word	0x1fff9458
   11048:	1fff9454 	.word	0x1fff9454

0001104c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   1104c:	b500      	push	{lr}
   1104e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11050:	f7ef fddc 	bl	c0c <Sys_GetCoreID>
   11054:	4603      	mov	r3, r0
   11056:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   11058:	4a10      	ldr	r2, [pc, #64]	; (1109c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1105a:	9b01      	ldr	r3, [sp, #4]
   1105c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11060:	2b00      	cmp	r3, #0
   11062:	d10d      	bne.n	11080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11064:	f7ef fc62 	bl	92c <Adc_schm_read_msr>
   11068:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1106a:	9b00      	ldr	r3, [sp, #0]
   1106c:	f003 0301 	and.w	r3, r3, #1
   11070:	2b00      	cmp	r3, #0
   11072:	d100      	bne.n	11076 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11074:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   11076:	490a      	ldr	r1, [pc, #40]	; (110a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   11078:	9b01      	ldr	r3, [sp, #4]
   1107a:	9a00      	ldr	r2, [sp, #0]
   1107c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   11080:	4a06      	ldr	r2, [pc, #24]	; (1109c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   11082:	9b01      	ldr	r3, [sp, #4]
   11084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11088:	1c5a      	adds	r2, r3, #1
   1108a:	4904      	ldr	r1, [pc, #16]	; (1109c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1108c:	9b01      	ldr	r3, [sp, #4]
   1108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11092:	bf00      	nop
   11094:	b003      	add	sp, #12
   11096:	f85d fb04 	ldr.w	pc, [sp], #4
   1109a:	bf00      	nop
   1109c:	1fff9460 	.word	0x1fff9460
   110a0:	1fff945c 	.word	0x1fff945c

000110a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   110a4:	b500      	push	{lr}
   110a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110a8:	f7ef fdb0 	bl	c0c <Sys_GetCoreID>
   110ac:	4603      	mov	r3, r0
   110ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   110b0:	4a0d      	ldr	r2, [pc, #52]	; (110e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   110b2:	9b01      	ldr	r3, [sp, #4]
   110b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110b8:	1e5a      	subs	r2, r3, #1
   110ba:	490b      	ldr	r1, [pc, #44]	; (110e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   110bc:	9b01      	ldr	r3, [sp, #4]
   110be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   110c2:	4a0a      	ldr	r2, [pc, #40]	; (110ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   110c4:	9b01      	ldr	r3, [sp, #4]
   110c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110ca:	f003 0301 	and.w	r3, r3, #1
   110ce:	2b00      	cmp	r3, #0
   110d0:	d106      	bne.n	110e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   110d2:	4a05      	ldr	r2, [pc, #20]	; (110e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   110d4:	9b01      	ldr	r3, [sp, #4]
   110d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110da:	2b00      	cmp	r3, #0
   110dc:	d100      	bne.n	110e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   110de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   110e0:	bf00      	nop
   110e2:	b003      	add	sp, #12
   110e4:	f85d fb04 	ldr.w	pc, [sp], #4
   110e8:	1fff9460 	.word	0x1fff9460
   110ec:	1fff945c 	.word	0x1fff945c

000110f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   110f0:	b500      	push	{lr}
   110f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110f4:	f7ef fd8a 	bl	c0c <Sys_GetCoreID>
   110f8:	4603      	mov	r3, r0
   110fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   110fc:	4a10      	ldr	r2, [pc, #64]	; (11140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   110fe:	9b01      	ldr	r3, [sp, #4]
   11100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11104:	2b00      	cmp	r3, #0
   11106:	d10d      	bne.n	11124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11108:	f7ef fc10 	bl	92c <Adc_schm_read_msr>
   1110c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1110e:	9b00      	ldr	r3, [sp, #0]
   11110:	f003 0301 	and.w	r3, r3, #1
   11114:	2b00      	cmp	r3, #0
   11116:	d100      	bne.n	1111a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11118:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   1111a:	490a      	ldr	r1, [pc, #40]	; (11144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   1111c:	9b01      	ldr	r3, [sp, #4]
   1111e:	9a00      	ldr	r2, [sp, #0]
   11120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   11124:	4a06      	ldr	r2, [pc, #24]	; (11140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   11126:	9b01      	ldr	r3, [sp, #4]
   11128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1112c:	1c5a      	adds	r2, r3, #1
   1112e:	4904      	ldr	r1, [pc, #16]	; (11140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   11130:	9b01      	ldr	r3, [sp, #4]
   11132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11136:	bf00      	nop
   11138:	b003      	add	sp, #12
   1113a:	f85d fb04 	ldr.w	pc, [sp], #4
   1113e:	bf00      	nop
   11140:	1fff9468 	.word	0x1fff9468
   11144:	1fff9464 	.word	0x1fff9464

00011148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   11148:	b500      	push	{lr}
   1114a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1114c:	f7ef fd5e 	bl	c0c <Sys_GetCoreID>
   11150:	4603      	mov	r3, r0
   11152:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   11154:	4a0d      	ldr	r2, [pc, #52]	; (1118c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   11156:	9b01      	ldr	r3, [sp, #4]
   11158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1115c:	1e5a      	subs	r2, r3, #1
   1115e:	490b      	ldr	r1, [pc, #44]	; (1118c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   11160:	9b01      	ldr	r3, [sp, #4]
   11162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   11166:	4a0a      	ldr	r2, [pc, #40]	; (11190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   11168:	9b01      	ldr	r3, [sp, #4]
   1116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1116e:	f003 0301 	and.w	r3, r3, #1
   11172:	2b00      	cmp	r3, #0
   11174:	d106      	bne.n	11184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   11176:	4a05      	ldr	r2, [pc, #20]	; (1118c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   11178:	9b01      	ldr	r3, [sp, #4]
   1117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1117e:	2b00      	cmp	r3, #0
   11180:	d100      	bne.n	11184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11182:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11184:	bf00      	nop
   11186:	b003      	add	sp, #12
   11188:	f85d fb04 	ldr.w	pc, [sp], #4
   1118c:	1fff9468 	.word	0x1fff9468
   11190:	1fff9464 	.word	0x1fff9464

00011194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   11194:	b500      	push	{lr}
   11196:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11198:	f7ef fd38 	bl	c0c <Sys_GetCoreID>
   1119c:	4603      	mov	r3, r0
   1119e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   111a0:	4a10      	ldr	r2, [pc, #64]	; (111e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   111a2:	9b01      	ldr	r3, [sp, #4]
   111a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111a8:	2b00      	cmp	r3, #0
   111aa:	d10d      	bne.n	111c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   111ac:	f7ef fbbe 	bl	92c <Adc_schm_read_msr>
   111b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   111b2:	9b00      	ldr	r3, [sp, #0]
   111b4:	f003 0301 	and.w	r3, r3, #1
   111b8:	2b00      	cmp	r3, #0
   111ba:	d100      	bne.n	111be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   111bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   111be:	490a      	ldr	r1, [pc, #40]	; (111e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   111c0:	9b01      	ldr	r3, [sp, #4]
   111c2:	9a00      	ldr	r2, [sp, #0]
   111c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   111c8:	4a06      	ldr	r2, [pc, #24]	; (111e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   111ca:	9b01      	ldr	r3, [sp, #4]
   111cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111d0:	1c5a      	adds	r2, r3, #1
   111d2:	4904      	ldr	r1, [pc, #16]	; (111e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   111d4:	9b01      	ldr	r3, [sp, #4]
   111d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   111da:	bf00      	nop
   111dc:	b003      	add	sp, #12
   111de:	f85d fb04 	ldr.w	pc, [sp], #4
   111e2:	bf00      	nop
   111e4:	1fff9470 	.word	0x1fff9470
   111e8:	1fff946c 	.word	0x1fff946c

000111ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   111ec:	b500      	push	{lr}
   111ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111f0:	f7ef fd0c 	bl	c0c <Sys_GetCoreID>
   111f4:	4603      	mov	r3, r0
   111f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   111f8:	4a0d      	ldr	r2, [pc, #52]	; (11230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   111fa:	9b01      	ldr	r3, [sp, #4]
   111fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11200:	1e5a      	subs	r2, r3, #1
   11202:	490b      	ldr	r1, [pc, #44]	; (11230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   11204:	9b01      	ldr	r3, [sp, #4]
   11206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   1120a:	4a0a      	ldr	r2, [pc, #40]	; (11234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   1120c:	9b01      	ldr	r3, [sp, #4]
   1120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11212:	f003 0301 	and.w	r3, r3, #1
   11216:	2b00      	cmp	r3, #0
   11218:	d106      	bne.n	11228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   1121a:	4a05      	ldr	r2, [pc, #20]	; (11230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   1121c:	9b01      	ldr	r3, [sp, #4]
   1121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11222:	2b00      	cmp	r3, #0
   11224:	d100      	bne.n	11228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11226:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11228:	bf00      	nop
   1122a:	b003      	add	sp, #12
   1122c:	f85d fb04 	ldr.w	pc, [sp], #4
   11230:	1fff9470 	.word	0x1fff9470
   11234:	1fff946c 	.word	0x1fff946c

00011238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   11238:	b500      	push	{lr}
   1123a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1123c:	f7ef fce6 	bl	c0c <Sys_GetCoreID>
   11240:	4603      	mov	r3, r0
   11242:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   11244:	4a10      	ldr	r2, [pc, #64]	; (11288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   11246:	9b01      	ldr	r3, [sp, #4]
   11248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1124c:	2b00      	cmp	r3, #0
   1124e:	d10d      	bne.n	1126c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11250:	f7ef fb6c 	bl	92c <Adc_schm_read_msr>
   11254:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11256:	9b00      	ldr	r3, [sp, #0]
   11258:	f003 0301 	and.w	r3, r3, #1
   1125c:	2b00      	cmp	r3, #0
   1125e:	d100      	bne.n	11262 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11260:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   11262:	490a      	ldr	r1, [pc, #40]	; (1128c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   11264:	9b01      	ldr	r3, [sp, #4]
   11266:	9a00      	ldr	r2, [sp, #0]
   11268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   1126c:	4a06      	ldr	r2, [pc, #24]	; (11288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   1126e:	9b01      	ldr	r3, [sp, #4]
   11270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11274:	1c5a      	adds	r2, r3, #1
   11276:	4904      	ldr	r1, [pc, #16]	; (11288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   11278:	9b01      	ldr	r3, [sp, #4]
   1127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1127e:	bf00      	nop
   11280:	b003      	add	sp, #12
   11282:	f85d fb04 	ldr.w	pc, [sp], #4
   11286:	bf00      	nop
   11288:	1fff9478 	.word	0x1fff9478
   1128c:	1fff9474 	.word	0x1fff9474

00011290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   11290:	b500      	push	{lr}
   11292:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11294:	f7ef fcba 	bl	c0c <Sys_GetCoreID>
   11298:	4603      	mov	r3, r0
   1129a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   1129c:	4a0d      	ldr	r2, [pc, #52]	; (112d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   1129e:	9b01      	ldr	r3, [sp, #4]
   112a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112a4:	1e5a      	subs	r2, r3, #1
   112a6:	490b      	ldr	r1, [pc, #44]	; (112d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   112a8:	9b01      	ldr	r3, [sp, #4]
   112aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   112ae:	4a0a      	ldr	r2, [pc, #40]	; (112d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   112b0:	9b01      	ldr	r3, [sp, #4]
   112b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112b6:	f003 0301 	and.w	r3, r3, #1
   112ba:	2b00      	cmp	r3, #0
   112bc:	d106      	bne.n	112cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   112be:	4a05      	ldr	r2, [pc, #20]	; (112d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   112c0:	9b01      	ldr	r3, [sp, #4]
   112c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112c6:	2b00      	cmp	r3, #0
   112c8:	d100      	bne.n	112cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   112ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   112cc:	bf00      	nop
   112ce:	b003      	add	sp, #12
   112d0:	f85d fb04 	ldr.w	pc, [sp], #4
   112d4:	1fff9478 	.word	0x1fff9478
   112d8:	1fff9474 	.word	0x1fff9474

000112dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   112dc:	b500      	push	{lr}
   112de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112e0:	f7ef fc94 	bl	c0c <Sys_GetCoreID>
   112e4:	4603      	mov	r3, r0
   112e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   112e8:	4a10      	ldr	r2, [pc, #64]	; (1132c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   112ea:	9b01      	ldr	r3, [sp, #4]
   112ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112f0:	2b00      	cmp	r3, #0
   112f2:	d10d      	bne.n	11310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   112f4:	f7ef fb1a 	bl	92c <Adc_schm_read_msr>
   112f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   112fa:	9b00      	ldr	r3, [sp, #0]
   112fc:	f003 0301 	and.w	r3, r3, #1
   11300:	2b00      	cmp	r3, #0
   11302:	d100      	bne.n	11306 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11304:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   11306:	490a      	ldr	r1, [pc, #40]	; (11330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   11308:	9b01      	ldr	r3, [sp, #4]
   1130a:	9a00      	ldr	r2, [sp, #0]
   1130c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   11310:	4a06      	ldr	r2, [pc, #24]	; (1132c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   11312:	9b01      	ldr	r3, [sp, #4]
   11314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11318:	1c5a      	adds	r2, r3, #1
   1131a:	4904      	ldr	r1, [pc, #16]	; (1132c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   1131c:	9b01      	ldr	r3, [sp, #4]
   1131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11322:	bf00      	nop
   11324:	b003      	add	sp, #12
   11326:	f85d fb04 	ldr.w	pc, [sp], #4
   1132a:	bf00      	nop
   1132c:	1fff9480 	.word	0x1fff9480
   11330:	1fff947c 	.word	0x1fff947c

00011334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   11334:	b500      	push	{lr}
   11336:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11338:	f7ef fc68 	bl	c0c <Sys_GetCoreID>
   1133c:	4603      	mov	r3, r0
   1133e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   11340:	4a0d      	ldr	r2, [pc, #52]	; (11378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   11342:	9b01      	ldr	r3, [sp, #4]
   11344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11348:	1e5a      	subs	r2, r3, #1
   1134a:	490b      	ldr	r1, [pc, #44]	; (11378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   1134c:	9b01      	ldr	r3, [sp, #4]
   1134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   11352:	4a0a      	ldr	r2, [pc, #40]	; (1137c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   11354:	9b01      	ldr	r3, [sp, #4]
   11356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1135a:	f003 0301 	and.w	r3, r3, #1
   1135e:	2b00      	cmp	r3, #0
   11360:	d106      	bne.n	11370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   11362:	4a05      	ldr	r2, [pc, #20]	; (11378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   11364:	9b01      	ldr	r3, [sp, #4]
   11366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1136a:	2b00      	cmp	r3, #0
   1136c:	d100      	bne.n	11370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1136e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11370:	bf00      	nop
   11372:	b003      	add	sp, #12
   11374:	f85d fb04 	ldr.w	pc, [sp], #4
   11378:	1fff9480 	.word	0x1fff9480
   1137c:	1fff947c 	.word	0x1fff947c

00011380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   11380:	b500      	push	{lr}
   11382:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11384:	f7ef fc42 	bl	c0c <Sys_GetCoreID>
   11388:	4603      	mov	r3, r0
   1138a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   1138c:	4a10      	ldr	r2, [pc, #64]	; (113d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   1138e:	9b01      	ldr	r3, [sp, #4]
   11390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11394:	2b00      	cmp	r3, #0
   11396:	d10d      	bne.n	113b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11398:	f7ef fac8 	bl	92c <Adc_schm_read_msr>
   1139c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1139e:	9b00      	ldr	r3, [sp, #0]
   113a0:	f003 0301 	and.w	r3, r3, #1
   113a4:	2b00      	cmp	r3, #0
   113a6:	d100      	bne.n	113aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   113a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   113aa:	490a      	ldr	r1, [pc, #40]	; (113d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   113ac:	9b01      	ldr	r3, [sp, #4]
   113ae:	9a00      	ldr	r2, [sp, #0]
   113b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   113b4:	4a06      	ldr	r2, [pc, #24]	; (113d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   113b6:	9b01      	ldr	r3, [sp, #4]
   113b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113bc:	1c5a      	adds	r2, r3, #1
   113be:	4904      	ldr	r1, [pc, #16]	; (113d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   113c0:	9b01      	ldr	r3, [sp, #4]
   113c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   113c6:	bf00      	nop
   113c8:	b003      	add	sp, #12
   113ca:	f85d fb04 	ldr.w	pc, [sp], #4
   113ce:	bf00      	nop
   113d0:	1fff9488 	.word	0x1fff9488
   113d4:	1fff9484 	.word	0x1fff9484

000113d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   113d8:	b500      	push	{lr}
   113da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113dc:	f7ef fc16 	bl	c0c <Sys_GetCoreID>
   113e0:	4603      	mov	r3, r0
   113e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   113e4:	4a0d      	ldr	r2, [pc, #52]	; (1141c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   113e6:	9b01      	ldr	r3, [sp, #4]
   113e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113ec:	1e5a      	subs	r2, r3, #1
   113ee:	490b      	ldr	r1, [pc, #44]	; (1141c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   113f0:	9b01      	ldr	r3, [sp, #4]
   113f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   113f6:	4a0a      	ldr	r2, [pc, #40]	; (11420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   113f8:	9b01      	ldr	r3, [sp, #4]
   113fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113fe:	f003 0301 	and.w	r3, r3, #1
   11402:	2b00      	cmp	r3, #0
   11404:	d106      	bne.n	11414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   11406:	4a05      	ldr	r2, [pc, #20]	; (1141c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   11408:	9b01      	ldr	r3, [sp, #4]
   1140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1140e:	2b00      	cmp	r3, #0
   11410:	d100      	bne.n	11414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11412:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11414:	bf00      	nop
   11416:	b003      	add	sp, #12
   11418:	f85d fb04 	ldr.w	pc, [sp], #4
   1141c:	1fff9488 	.word	0x1fff9488
   11420:	1fff9484 	.word	0x1fff9484

00011424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   11424:	b500      	push	{lr}
   11426:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11428:	f7ef fbf0 	bl	c0c <Sys_GetCoreID>
   1142c:	4603      	mov	r3, r0
   1142e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   11430:	4a10      	ldr	r2, [pc, #64]	; (11474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   11432:	9b01      	ldr	r3, [sp, #4]
   11434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11438:	2b00      	cmp	r3, #0
   1143a:	d10d      	bne.n	11458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1143c:	f7ef fa76 	bl	92c <Adc_schm_read_msr>
   11440:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11442:	9b00      	ldr	r3, [sp, #0]
   11444:	f003 0301 	and.w	r3, r3, #1
   11448:	2b00      	cmp	r3, #0
   1144a:	d100      	bne.n	1144e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1144c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   1144e:	490a      	ldr	r1, [pc, #40]	; (11478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   11450:	9b01      	ldr	r3, [sp, #4]
   11452:	9a00      	ldr	r2, [sp, #0]
   11454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   11458:	4a06      	ldr	r2, [pc, #24]	; (11474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   1145a:	9b01      	ldr	r3, [sp, #4]
   1145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11460:	1c5a      	adds	r2, r3, #1
   11462:	4904      	ldr	r1, [pc, #16]	; (11474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   11464:	9b01      	ldr	r3, [sp, #4]
   11466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1146a:	bf00      	nop
   1146c:	b003      	add	sp, #12
   1146e:	f85d fb04 	ldr.w	pc, [sp], #4
   11472:	bf00      	nop
   11474:	1fff9490 	.word	0x1fff9490
   11478:	1fff948c 	.word	0x1fff948c

0001147c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   1147c:	b500      	push	{lr}
   1147e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11480:	f7ef fbc4 	bl	c0c <Sys_GetCoreID>
   11484:	4603      	mov	r3, r0
   11486:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   11488:	4a0d      	ldr	r2, [pc, #52]	; (114c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   1148a:	9b01      	ldr	r3, [sp, #4]
   1148c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11490:	1e5a      	subs	r2, r3, #1
   11492:	490b      	ldr	r1, [pc, #44]	; (114c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   11494:	9b01      	ldr	r3, [sp, #4]
   11496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   1149a:	4a0a      	ldr	r2, [pc, #40]	; (114c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   1149c:	9b01      	ldr	r3, [sp, #4]
   1149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114a2:	f003 0301 	and.w	r3, r3, #1
   114a6:	2b00      	cmp	r3, #0
   114a8:	d106      	bne.n	114b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   114aa:	4a05      	ldr	r2, [pc, #20]	; (114c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   114ac:	9b01      	ldr	r3, [sp, #4]
   114ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114b2:	2b00      	cmp	r3, #0
   114b4:	d100      	bne.n	114b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   114b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   114b8:	bf00      	nop
   114ba:	b003      	add	sp, #12
   114bc:	f85d fb04 	ldr.w	pc, [sp], #4
   114c0:	1fff9490 	.word	0x1fff9490
   114c4:	1fff948c 	.word	0x1fff948c

000114c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   114c8:	b500      	push	{lr}
   114ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114cc:	f7ef fb9e 	bl	c0c <Sys_GetCoreID>
   114d0:	4603      	mov	r3, r0
   114d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   114d4:	4a10      	ldr	r2, [pc, #64]	; (11518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   114d6:	9b01      	ldr	r3, [sp, #4]
   114d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114dc:	2b00      	cmp	r3, #0
   114de:	d10d      	bne.n	114fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   114e0:	f7ef fa24 	bl	92c <Adc_schm_read_msr>
   114e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   114e6:	9b00      	ldr	r3, [sp, #0]
   114e8:	f003 0301 	and.w	r3, r3, #1
   114ec:	2b00      	cmp	r3, #0
   114ee:	d100      	bne.n	114f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   114f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   114f2:	490a      	ldr	r1, [pc, #40]	; (1151c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   114f4:	9b01      	ldr	r3, [sp, #4]
   114f6:	9a00      	ldr	r2, [sp, #0]
   114f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   114fc:	4a06      	ldr	r2, [pc, #24]	; (11518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   114fe:	9b01      	ldr	r3, [sp, #4]
   11500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11504:	1c5a      	adds	r2, r3, #1
   11506:	4904      	ldr	r1, [pc, #16]	; (11518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   11508:	9b01      	ldr	r3, [sp, #4]
   1150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1150e:	bf00      	nop
   11510:	b003      	add	sp, #12
   11512:	f85d fb04 	ldr.w	pc, [sp], #4
   11516:	bf00      	nop
   11518:	1fff9498 	.word	0x1fff9498
   1151c:	1fff9494 	.word	0x1fff9494

00011520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   11520:	b500      	push	{lr}
   11522:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11524:	f7ef fb72 	bl	c0c <Sys_GetCoreID>
   11528:	4603      	mov	r3, r0
   1152a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   1152c:	4a0d      	ldr	r2, [pc, #52]	; (11564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   1152e:	9b01      	ldr	r3, [sp, #4]
   11530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11534:	1e5a      	subs	r2, r3, #1
   11536:	490b      	ldr	r1, [pc, #44]	; (11564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   11538:	9b01      	ldr	r3, [sp, #4]
   1153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   1153e:	4a0a      	ldr	r2, [pc, #40]	; (11568 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   11540:	9b01      	ldr	r3, [sp, #4]
   11542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11546:	f003 0301 	and.w	r3, r3, #1
   1154a:	2b00      	cmp	r3, #0
   1154c:	d106      	bne.n	1155c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   1154e:	4a05      	ldr	r2, [pc, #20]	; (11564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   11550:	9b01      	ldr	r3, [sp, #4]
   11552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11556:	2b00      	cmp	r3, #0
   11558:	d100      	bne.n	1155c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1155a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1155c:	bf00      	nop
   1155e:	b003      	add	sp, #12
   11560:	f85d fb04 	ldr.w	pc, [sp], #4
   11564:	1fff9498 	.word	0x1fff9498
   11568:	1fff9494 	.word	0x1fff9494

0001156c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   1156c:	b500      	push	{lr}
   1156e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11570:	f7ef fb4c 	bl	c0c <Sys_GetCoreID>
   11574:	4603      	mov	r3, r0
   11576:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   11578:	4a10      	ldr	r2, [pc, #64]	; (115bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   1157a:	9b01      	ldr	r3, [sp, #4]
   1157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11580:	2b00      	cmp	r3, #0
   11582:	d10d      	bne.n	115a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11584:	f7ef f9d2 	bl	92c <Adc_schm_read_msr>
   11588:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1158a:	9b00      	ldr	r3, [sp, #0]
   1158c:	f003 0301 	and.w	r3, r3, #1
   11590:	2b00      	cmp	r3, #0
   11592:	d100      	bne.n	11596 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11594:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   11596:	490a      	ldr	r1, [pc, #40]	; (115c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   11598:	9b01      	ldr	r3, [sp, #4]
   1159a:	9a00      	ldr	r2, [sp, #0]
   1159c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   115a0:	4a06      	ldr	r2, [pc, #24]	; (115bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   115a2:	9b01      	ldr	r3, [sp, #4]
   115a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115a8:	1c5a      	adds	r2, r3, #1
   115aa:	4904      	ldr	r1, [pc, #16]	; (115bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   115ac:	9b01      	ldr	r3, [sp, #4]
   115ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   115b2:	bf00      	nop
   115b4:	b003      	add	sp, #12
   115b6:	f85d fb04 	ldr.w	pc, [sp], #4
   115ba:	bf00      	nop
   115bc:	1fff94a0 	.word	0x1fff94a0
   115c0:	1fff949c 	.word	0x1fff949c

000115c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   115c4:	b500      	push	{lr}
   115c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115c8:	f7ef fb20 	bl	c0c <Sys_GetCoreID>
   115cc:	4603      	mov	r3, r0
   115ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   115d0:	4a0d      	ldr	r2, [pc, #52]	; (11608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   115d2:	9b01      	ldr	r3, [sp, #4]
   115d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115d8:	1e5a      	subs	r2, r3, #1
   115da:	490b      	ldr	r1, [pc, #44]	; (11608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   115dc:	9b01      	ldr	r3, [sp, #4]
   115de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   115e2:	4a0a      	ldr	r2, [pc, #40]	; (1160c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   115e4:	9b01      	ldr	r3, [sp, #4]
   115e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115ea:	f003 0301 	and.w	r3, r3, #1
   115ee:	2b00      	cmp	r3, #0
   115f0:	d106      	bne.n	11600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   115f2:	4a05      	ldr	r2, [pc, #20]	; (11608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   115f4:	9b01      	ldr	r3, [sp, #4]
   115f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115fa:	2b00      	cmp	r3, #0
   115fc:	d100      	bne.n	11600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   115fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11600:	bf00      	nop
   11602:	b003      	add	sp, #12
   11604:	f85d fb04 	ldr.w	pc, [sp], #4
   11608:	1fff94a0 	.word	0x1fff94a0
   1160c:	1fff949c 	.word	0x1fff949c

00011610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   11610:	b500      	push	{lr}
   11612:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11614:	f7ef fafa 	bl	c0c <Sys_GetCoreID>
   11618:	4603      	mov	r3, r0
   1161a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   1161c:	4a10      	ldr	r2, [pc, #64]	; (11660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   1161e:	9b01      	ldr	r3, [sp, #4]
   11620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11624:	2b00      	cmp	r3, #0
   11626:	d10d      	bne.n	11644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11628:	f7ef f980 	bl	92c <Adc_schm_read_msr>
   1162c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1162e:	9b00      	ldr	r3, [sp, #0]
   11630:	f003 0301 	and.w	r3, r3, #1
   11634:	2b00      	cmp	r3, #0
   11636:	d100      	bne.n	1163a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11638:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   1163a:	490a      	ldr	r1, [pc, #40]	; (11664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   1163c:	9b01      	ldr	r3, [sp, #4]
   1163e:	9a00      	ldr	r2, [sp, #0]
   11640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   11644:	4a06      	ldr	r2, [pc, #24]	; (11660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   11646:	9b01      	ldr	r3, [sp, #4]
   11648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1164c:	1c5a      	adds	r2, r3, #1
   1164e:	4904      	ldr	r1, [pc, #16]	; (11660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   11650:	9b01      	ldr	r3, [sp, #4]
   11652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11656:	bf00      	nop
   11658:	b003      	add	sp, #12
   1165a:	f85d fb04 	ldr.w	pc, [sp], #4
   1165e:	bf00      	nop
   11660:	1fff94a8 	.word	0x1fff94a8
   11664:	1fff94a4 	.word	0x1fff94a4

00011668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   11668:	b500      	push	{lr}
   1166a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1166c:	f7ef face 	bl	c0c <Sys_GetCoreID>
   11670:	4603      	mov	r3, r0
   11672:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   11674:	4a0d      	ldr	r2, [pc, #52]	; (116ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   11676:	9b01      	ldr	r3, [sp, #4]
   11678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1167c:	1e5a      	subs	r2, r3, #1
   1167e:	490b      	ldr	r1, [pc, #44]	; (116ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   11680:	9b01      	ldr	r3, [sp, #4]
   11682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   11686:	4a0a      	ldr	r2, [pc, #40]	; (116b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   11688:	9b01      	ldr	r3, [sp, #4]
   1168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1168e:	f003 0301 	and.w	r3, r3, #1
   11692:	2b00      	cmp	r3, #0
   11694:	d106      	bne.n	116a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   11696:	4a05      	ldr	r2, [pc, #20]	; (116ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   11698:	9b01      	ldr	r3, [sp, #4]
   1169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1169e:	2b00      	cmp	r3, #0
   116a0:	d100      	bne.n	116a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   116a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   116a4:	bf00      	nop
   116a6:	b003      	add	sp, #12
   116a8:	f85d fb04 	ldr.w	pc, [sp], #4
   116ac:	1fff94a8 	.word	0x1fff94a8
   116b0:	1fff94a4 	.word	0x1fff94a4

000116b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   116b4:	b500      	push	{lr}
   116b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116b8:	f7ef faa8 	bl	c0c <Sys_GetCoreID>
   116bc:	4603      	mov	r3, r0
   116be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   116c0:	4a10      	ldr	r2, [pc, #64]	; (11704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   116c2:	9b01      	ldr	r3, [sp, #4]
   116c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116c8:	2b00      	cmp	r3, #0
   116ca:	d10d      	bne.n	116e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   116cc:	f7ef f92e 	bl	92c <Adc_schm_read_msr>
   116d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   116d2:	9b00      	ldr	r3, [sp, #0]
   116d4:	f003 0301 	and.w	r3, r3, #1
   116d8:	2b00      	cmp	r3, #0
   116da:	d100      	bne.n	116de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   116dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   116de:	490a      	ldr	r1, [pc, #40]	; (11708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   116e0:	9b01      	ldr	r3, [sp, #4]
   116e2:	9a00      	ldr	r2, [sp, #0]
   116e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   116e8:	4a06      	ldr	r2, [pc, #24]	; (11704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   116ea:	9b01      	ldr	r3, [sp, #4]
   116ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116f0:	1c5a      	adds	r2, r3, #1
   116f2:	4904      	ldr	r1, [pc, #16]	; (11704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   116f4:	9b01      	ldr	r3, [sp, #4]
   116f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   116fa:	bf00      	nop
   116fc:	b003      	add	sp, #12
   116fe:	f85d fb04 	ldr.w	pc, [sp], #4
   11702:	bf00      	nop
   11704:	1fff94b0 	.word	0x1fff94b0
   11708:	1fff94ac 	.word	0x1fff94ac

0001170c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   1170c:	b500      	push	{lr}
   1170e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11710:	f7ef fa7c 	bl	c0c <Sys_GetCoreID>
   11714:	4603      	mov	r3, r0
   11716:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   11718:	4a0d      	ldr	r2, [pc, #52]	; (11750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   1171a:	9b01      	ldr	r3, [sp, #4]
   1171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11720:	1e5a      	subs	r2, r3, #1
   11722:	490b      	ldr	r1, [pc, #44]	; (11750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   11724:	9b01      	ldr	r3, [sp, #4]
   11726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   1172a:	4a0a      	ldr	r2, [pc, #40]	; (11754 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   1172c:	9b01      	ldr	r3, [sp, #4]
   1172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11732:	f003 0301 	and.w	r3, r3, #1
   11736:	2b00      	cmp	r3, #0
   11738:	d106      	bne.n	11748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   1173a:	4a05      	ldr	r2, [pc, #20]	; (11750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   1173c:	9b01      	ldr	r3, [sp, #4]
   1173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11742:	2b00      	cmp	r3, #0
   11744:	d100      	bne.n	11748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11746:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11748:	bf00      	nop
   1174a:	b003      	add	sp, #12
   1174c:	f85d fb04 	ldr.w	pc, [sp], #4
   11750:	1fff94b0 	.word	0x1fff94b0
   11754:	1fff94ac 	.word	0x1fff94ac

00011758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   11758:	b500      	push	{lr}
   1175a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1175c:	f7ef fa56 	bl	c0c <Sys_GetCoreID>
   11760:	4603      	mov	r3, r0
   11762:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   11764:	4a10      	ldr	r2, [pc, #64]	; (117a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   11766:	9b01      	ldr	r3, [sp, #4]
   11768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1176c:	2b00      	cmp	r3, #0
   1176e:	d10d      	bne.n	1178c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11770:	f7ef f8dc 	bl	92c <Adc_schm_read_msr>
   11774:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11776:	9b00      	ldr	r3, [sp, #0]
   11778:	f003 0301 	and.w	r3, r3, #1
   1177c:	2b00      	cmp	r3, #0
   1177e:	d100      	bne.n	11782 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11780:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   11782:	490a      	ldr	r1, [pc, #40]	; (117ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   11784:	9b01      	ldr	r3, [sp, #4]
   11786:	9a00      	ldr	r2, [sp, #0]
   11788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   1178c:	4a06      	ldr	r2, [pc, #24]	; (117a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   1178e:	9b01      	ldr	r3, [sp, #4]
   11790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11794:	1c5a      	adds	r2, r3, #1
   11796:	4904      	ldr	r1, [pc, #16]	; (117a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   11798:	9b01      	ldr	r3, [sp, #4]
   1179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1179e:	bf00      	nop
   117a0:	b003      	add	sp, #12
   117a2:	f85d fb04 	ldr.w	pc, [sp], #4
   117a6:	bf00      	nop
   117a8:	1fff94b8 	.word	0x1fff94b8
   117ac:	1fff94b4 	.word	0x1fff94b4

000117b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   117b0:	b500      	push	{lr}
   117b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117b4:	f7ef fa2a 	bl	c0c <Sys_GetCoreID>
   117b8:	4603      	mov	r3, r0
   117ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   117bc:	4a0d      	ldr	r2, [pc, #52]	; (117f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   117be:	9b01      	ldr	r3, [sp, #4]
   117c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117c4:	1e5a      	subs	r2, r3, #1
   117c6:	490b      	ldr	r1, [pc, #44]	; (117f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   117c8:	9b01      	ldr	r3, [sp, #4]
   117ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   117ce:	4a0a      	ldr	r2, [pc, #40]	; (117f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   117d0:	9b01      	ldr	r3, [sp, #4]
   117d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117d6:	f003 0301 	and.w	r3, r3, #1
   117da:	2b00      	cmp	r3, #0
   117dc:	d106      	bne.n	117ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   117de:	4a05      	ldr	r2, [pc, #20]	; (117f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   117e0:	9b01      	ldr	r3, [sp, #4]
   117e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117e6:	2b00      	cmp	r3, #0
   117e8:	d100      	bne.n	117ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   117ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   117ec:	bf00      	nop
   117ee:	b003      	add	sp, #12
   117f0:	f85d fb04 	ldr.w	pc, [sp], #4
   117f4:	1fff94b8 	.word	0x1fff94b8
   117f8:	1fff94b4 	.word	0x1fff94b4

000117fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   117fc:	b500      	push	{lr}
   117fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11800:	f7ef fa04 	bl	c0c <Sys_GetCoreID>
   11804:	4603      	mov	r3, r0
   11806:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   11808:	4a10      	ldr	r2, [pc, #64]	; (1184c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   1180a:	9b01      	ldr	r3, [sp, #4]
   1180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11810:	2b00      	cmp	r3, #0
   11812:	d10d      	bne.n	11830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11814:	f7ef f88a 	bl	92c <Adc_schm_read_msr>
   11818:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1181a:	9b00      	ldr	r3, [sp, #0]
   1181c:	f003 0301 	and.w	r3, r3, #1
   11820:	2b00      	cmp	r3, #0
   11822:	d100      	bne.n	11826 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11824:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   11826:	490a      	ldr	r1, [pc, #40]	; (11850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   11828:	9b01      	ldr	r3, [sp, #4]
   1182a:	9a00      	ldr	r2, [sp, #0]
   1182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   11830:	4a06      	ldr	r2, [pc, #24]	; (1184c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   11832:	9b01      	ldr	r3, [sp, #4]
   11834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11838:	1c5a      	adds	r2, r3, #1
   1183a:	4904      	ldr	r1, [pc, #16]	; (1184c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   1183c:	9b01      	ldr	r3, [sp, #4]
   1183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11842:	bf00      	nop
   11844:	b003      	add	sp, #12
   11846:	f85d fb04 	ldr.w	pc, [sp], #4
   1184a:	bf00      	nop
   1184c:	1fff94c0 	.word	0x1fff94c0
   11850:	1fff94bc 	.word	0x1fff94bc

00011854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   11854:	b500      	push	{lr}
   11856:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11858:	f7ef f9d8 	bl	c0c <Sys_GetCoreID>
   1185c:	4603      	mov	r3, r0
   1185e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   11860:	4a0d      	ldr	r2, [pc, #52]	; (11898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   11862:	9b01      	ldr	r3, [sp, #4]
   11864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11868:	1e5a      	subs	r2, r3, #1
   1186a:	490b      	ldr	r1, [pc, #44]	; (11898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   1186c:	9b01      	ldr	r3, [sp, #4]
   1186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   11872:	4a0a      	ldr	r2, [pc, #40]	; (1189c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   11874:	9b01      	ldr	r3, [sp, #4]
   11876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1187a:	f003 0301 	and.w	r3, r3, #1
   1187e:	2b00      	cmp	r3, #0
   11880:	d106      	bne.n	11890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   11882:	4a05      	ldr	r2, [pc, #20]	; (11898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   11884:	9b01      	ldr	r3, [sp, #4]
   11886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1188a:	2b00      	cmp	r3, #0
   1188c:	d100      	bne.n	11890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1188e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11890:	bf00      	nop
   11892:	b003      	add	sp, #12
   11894:	f85d fb04 	ldr.w	pc, [sp], #4
   11898:	1fff94c0 	.word	0x1fff94c0
   1189c:	1fff94bc 	.word	0x1fff94bc

000118a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   118a0:	b500      	push	{lr}
   118a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118a4:	f7ef f9b2 	bl	c0c <Sys_GetCoreID>
   118a8:	4603      	mov	r3, r0
   118aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   118ac:	4a10      	ldr	r2, [pc, #64]	; (118f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   118ae:	9b01      	ldr	r3, [sp, #4]
   118b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118b4:	2b00      	cmp	r3, #0
   118b6:	d10d      	bne.n	118d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   118b8:	f7ef f838 	bl	92c <Adc_schm_read_msr>
   118bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   118be:	9b00      	ldr	r3, [sp, #0]
   118c0:	f003 0301 	and.w	r3, r3, #1
   118c4:	2b00      	cmp	r3, #0
   118c6:	d100      	bne.n	118ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   118c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   118ca:	490a      	ldr	r1, [pc, #40]	; (118f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   118cc:	9b01      	ldr	r3, [sp, #4]
   118ce:	9a00      	ldr	r2, [sp, #0]
   118d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   118d4:	4a06      	ldr	r2, [pc, #24]	; (118f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   118d6:	9b01      	ldr	r3, [sp, #4]
   118d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118dc:	1c5a      	adds	r2, r3, #1
   118de:	4904      	ldr	r1, [pc, #16]	; (118f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   118e0:	9b01      	ldr	r3, [sp, #4]
   118e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   118e6:	bf00      	nop
   118e8:	b003      	add	sp, #12
   118ea:	f85d fb04 	ldr.w	pc, [sp], #4
   118ee:	bf00      	nop
   118f0:	1fff94c8 	.word	0x1fff94c8
   118f4:	1fff94c4 	.word	0x1fff94c4

000118f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   118f8:	b500      	push	{lr}
   118fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118fc:	f7ef f986 	bl	c0c <Sys_GetCoreID>
   11900:	4603      	mov	r3, r0
   11902:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   11904:	4a0d      	ldr	r2, [pc, #52]	; (1193c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   11906:	9b01      	ldr	r3, [sp, #4]
   11908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1190c:	1e5a      	subs	r2, r3, #1
   1190e:	490b      	ldr	r1, [pc, #44]	; (1193c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   11910:	9b01      	ldr	r3, [sp, #4]
   11912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   11916:	4a0a      	ldr	r2, [pc, #40]	; (11940 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   11918:	9b01      	ldr	r3, [sp, #4]
   1191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1191e:	f003 0301 	and.w	r3, r3, #1
   11922:	2b00      	cmp	r3, #0
   11924:	d106      	bne.n	11934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   11926:	4a05      	ldr	r2, [pc, #20]	; (1193c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   11928:	9b01      	ldr	r3, [sp, #4]
   1192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1192e:	2b00      	cmp	r3, #0
   11930:	d100      	bne.n	11934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11932:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11934:	bf00      	nop
   11936:	b003      	add	sp, #12
   11938:	f85d fb04 	ldr.w	pc, [sp], #4
   1193c:	1fff94c8 	.word	0x1fff94c8
   11940:	1fff94c4 	.word	0x1fff94c4

00011944 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   11944:	b500      	push	{lr}
   11946:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11948:	f7ef f960 	bl	c0c <Sys_GetCoreID>
   1194c:	4603      	mov	r3, r0
   1194e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   11950:	4a10      	ldr	r2, [pc, #64]	; (11994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   11952:	9b01      	ldr	r3, [sp, #4]
   11954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11958:	2b00      	cmp	r3, #0
   1195a:	d10d      	bne.n	11978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1195c:	f7ee ffe6 	bl	92c <Adc_schm_read_msr>
   11960:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11962:	9b00      	ldr	r3, [sp, #0]
   11964:	f003 0301 	and.w	r3, r3, #1
   11968:	2b00      	cmp	r3, #0
   1196a:	d100      	bne.n	1196e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1196c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   1196e:	490a      	ldr	r1, [pc, #40]	; (11998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   11970:	9b01      	ldr	r3, [sp, #4]
   11972:	9a00      	ldr	r2, [sp, #0]
   11974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   11978:	4a06      	ldr	r2, [pc, #24]	; (11994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   1197a:	9b01      	ldr	r3, [sp, #4]
   1197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11980:	1c5a      	adds	r2, r3, #1
   11982:	4904      	ldr	r1, [pc, #16]	; (11994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   11984:	9b01      	ldr	r3, [sp, #4]
   11986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1198a:	bf00      	nop
   1198c:	b003      	add	sp, #12
   1198e:	f85d fb04 	ldr.w	pc, [sp], #4
   11992:	bf00      	nop
   11994:	1fff94d0 	.word	0x1fff94d0
   11998:	1fff94cc 	.word	0x1fff94cc

0001199c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   1199c:	b500      	push	{lr}
   1199e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119a0:	f7ef f934 	bl	c0c <Sys_GetCoreID>
   119a4:	4603      	mov	r3, r0
   119a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   119a8:	4a0d      	ldr	r2, [pc, #52]	; (119e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   119aa:	9b01      	ldr	r3, [sp, #4]
   119ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119b0:	1e5a      	subs	r2, r3, #1
   119b2:	490b      	ldr	r1, [pc, #44]	; (119e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   119b4:	9b01      	ldr	r3, [sp, #4]
   119b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   119ba:	4a0a      	ldr	r2, [pc, #40]	; (119e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   119bc:	9b01      	ldr	r3, [sp, #4]
   119be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119c2:	f003 0301 	and.w	r3, r3, #1
   119c6:	2b00      	cmp	r3, #0
   119c8:	d106      	bne.n	119d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   119ca:	4a05      	ldr	r2, [pc, #20]	; (119e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   119cc:	9b01      	ldr	r3, [sp, #4]
   119ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119d2:	2b00      	cmp	r3, #0
   119d4:	d100      	bne.n	119d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   119d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   119d8:	bf00      	nop
   119da:	b003      	add	sp, #12
   119dc:	f85d fb04 	ldr.w	pc, [sp], #4
   119e0:	1fff94d0 	.word	0x1fff94d0
   119e4:	1fff94cc 	.word	0x1fff94cc

000119e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   119e8:	b500      	push	{lr}
   119ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119ec:	f7ef f90e 	bl	c0c <Sys_GetCoreID>
   119f0:	4603      	mov	r3, r0
   119f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   119f4:	4a10      	ldr	r2, [pc, #64]	; (11a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   119f6:	9b01      	ldr	r3, [sp, #4]
   119f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119fc:	2b00      	cmp	r3, #0
   119fe:	d10d      	bne.n	11a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a00:	f7ee ff94 	bl	92c <Adc_schm_read_msr>
   11a04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a06:	9b00      	ldr	r3, [sp, #0]
   11a08:	f003 0301 	and.w	r3, r3, #1
   11a0c:	2b00      	cmp	r3, #0
   11a0e:	d100      	bne.n	11a12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   11a12:	490a      	ldr	r1, [pc, #40]	; (11a3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   11a14:	9b01      	ldr	r3, [sp, #4]
   11a16:	9a00      	ldr	r2, [sp, #0]
   11a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   11a1c:	4a06      	ldr	r2, [pc, #24]	; (11a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11a1e:	9b01      	ldr	r3, [sp, #4]
   11a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a24:	1c5a      	adds	r2, r3, #1
   11a26:	4904      	ldr	r1, [pc, #16]	; (11a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11a28:	9b01      	ldr	r3, [sp, #4]
   11a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a2e:	bf00      	nop
   11a30:	b003      	add	sp, #12
   11a32:	f85d fb04 	ldr.w	pc, [sp], #4
   11a36:	bf00      	nop
   11a38:	1fff94d8 	.word	0x1fff94d8
   11a3c:	1fff94d4 	.word	0x1fff94d4

00011a40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   11a40:	b500      	push	{lr}
   11a42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a44:	f7ef f8e2 	bl	c0c <Sys_GetCoreID>
   11a48:	4603      	mov	r3, r0
   11a4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   11a4c:	4a0d      	ldr	r2, [pc, #52]	; (11a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11a4e:	9b01      	ldr	r3, [sp, #4]
   11a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a54:	1e5a      	subs	r2, r3, #1
   11a56:	490b      	ldr	r1, [pc, #44]	; (11a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11a58:	9b01      	ldr	r3, [sp, #4]
   11a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   11a5e:	4a0a      	ldr	r2, [pc, #40]	; (11a88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   11a60:	9b01      	ldr	r3, [sp, #4]
   11a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a66:	f003 0301 	and.w	r3, r3, #1
   11a6a:	2b00      	cmp	r3, #0
   11a6c:	d106      	bne.n	11a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   11a6e:	4a05      	ldr	r2, [pc, #20]	; (11a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11a70:	9b01      	ldr	r3, [sp, #4]
   11a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a76:	2b00      	cmp	r3, #0
   11a78:	d100      	bne.n	11a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a7c:	bf00      	nop
   11a7e:	b003      	add	sp, #12
   11a80:	f85d fb04 	ldr.w	pc, [sp], #4
   11a84:	1fff94d8 	.word	0x1fff94d8
   11a88:	1fff94d4 	.word	0x1fff94d4

00011a8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11a8c:	b500      	push	{lr}
   11a8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a90:	f7ef f8bc 	bl	c0c <Sys_GetCoreID>
   11a94:	4603      	mov	r3, r0
   11a96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   11a98:	4a10      	ldr	r2, [pc, #64]	; (11adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11a9a:	9b01      	ldr	r3, [sp, #4]
   11a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11aa0:	2b00      	cmp	r3, #0
   11aa2:	d10d      	bne.n	11ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11aa4:	f7ee ff42 	bl	92c <Adc_schm_read_msr>
   11aa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11aaa:	9b00      	ldr	r3, [sp, #0]
   11aac:	f003 0301 	and.w	r3, r3, #1
   11ab0:	2b00      	cmp	r3, #0
   11ab2:	d100      	bne.n	11ab6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ab4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   11ab6:	490a      	ldr	r1, [pc, #40]	; (11ae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   11ab8:	9b01      	ldr	r3, [sp, #4]
   11aba:	9a00      	ldr	r2, [sp, #0]
   11abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   11ac0:	4a06      	ldr	r2, [pc, #24]	; (11adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11ac2:	9b01      	ldr	r3, [sp, #4]
   11ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ac8:	1c5a      	adds	r2, r3, #1
   11aca:	4904      	ldr	r1, [pc, #16]	; (11adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11acc:	9b01      	ldr	r3, [sp, #4]
   11ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ad2:	bf00      	nop
   11ad4:	b003      	add	sp, #12
   11ad6:	f85d fb04 	ldr.w	pc, [sp], #4
   11ada:	bf00      	nop
   11adc:	1fff94e0 	.word	0x1fff94e0
   11ae0:	1fff94dc 	.word	0x1fff94dc

00011ae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11ae4:	b500      	push	{lr}
   11ae6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ae8:	f7ef f890 	bl	c0c <Sys_GetCoreID>
   11aec:	4603      	mov	r3, r0
   11aee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   11af0:	4a0d      	ldr	r2, [pc, #52]	; (11b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11af2:	9b01      	ldr	r3, [sp, #4]
   11af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11af8:	1e5a      	subs	r2, r3, #1
   11afa:	490b      	ldr	r1, [pc, #44]	; (11b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11afc:	9b01      	ldr	r3, [sp, #4]
   11afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   11b02:	4a0a      	ldr	r2, [pc, #40]	; (11b2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   11b04:	9b01      	ldr	r3, [sp, #4]
   11b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b0a:	f003 0301 	and.w	r3, r3, #1
   11b0e:	2b00      	cmp	r3, #0
   11b10:	d106      	bne.n	11b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   11b12:	4a05      	ldr	r2, [pc, #20]	; (11b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11b14:	9b01      	ldr	r3, [sp, #4]
   11b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b1a:	2b00      	cmp	r3, #0
   11b1c:	d100      	bne.n	11b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b20:	bf00      	nop
   11b22:	b003      	add	sp, #12
   11b24:	f85d fb04 	ldr.w	pc, [sp], #4
   11b28:	1fff94e0 	.word	0x1fff94e0
   11b2c:	1fff94dc 	.word	0x1fff94dc

00011b30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11b30:	b500      	push	{lr}
   11b32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b34:	f7ef f86a 	bl	c0c <Sys_GetCoreID>
   11b38:	4603      	mov	r3, r0
   11b3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   11b3c:	4a10      	ldr	r2, [pc, #64]	; (11b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11b3e:	9b01      	ldr	r3, [sp, #4]
   11b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b44:	2b00      	cmp	r3, #0
   11b46:	d10d      	bne.n	11b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b48:	f7ee fef0 	bl	92c <Adc_schm_read_msr>
   11b4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b4e:	9b00      	ldr	r3, [sp, #0]
   11b50:	f003 0301 	and.w	r3, r3, #1
   11b54:	2b00      	cmp	r3, #0
   11b56:	d100      	bne.n	11b5a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   11b5a:	490a      	ldr	r1, [pc, #40]	; (11b84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   11b5c:	9b01      	ldr	r3, [sp, #4]
   11b5e:	9a00      	ldr	r2, [sp, #0]
   11b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   11b64:	4a06      	ldr	r2, [pc, #24]	; (11b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11b66:	9b01      	ldr	r3, [sp, #4]
   11b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b6c:	1c5a      	adds	r2, r3, #1
   11b6e:	4904      	ldr	r1, [pc, #16]	; (11b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11b70:	9b01      	ldr	r3, [sp, #4]
   11b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b76:	bf00      	nop
   11b78:	b003      	add	sp, #12
   11b7a:	f85d fb04 	ldr.w	pc, [sp], #4
   11b7e:	bf00      	nop
   11b80:	1fff94e8 	.word	0x1fff94e8
   11b84:	1fff94e4 	.word	0x1fff94e4

00011b88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11b88:	b500      	push	{lr}
   11b8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b8c:	f7ef f83e 	bl	c0c <Sys_GetCoreID>
   11b90:	4603      	mov	r3, r0
   11b92:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   11b94:	4a0d      	ldr	r2, [pc, #52]	; (11bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11b96:	9b01      	ldr	r3, [sp, #4]
   11b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b9c:	1e5a      	subs	r2, r3, #1
   11b9e:	490b      	ldr	r1, [pc, #44]	; (11bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11ba0:	9b01      	ldr	r3, [sp, #4]
   11ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   11ba6:	4a0a      	ldr	r2, [pc, #40]	; (11bd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   11ba8:	9b01      	ldr	r3, [sp, #4]
   11baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bae:	f003 0301 	and.w	r3, r3, #1
   11bb2:	2b00      	cmp	r3, #0
   11bb4:	d106      	bne.n	11bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   11bb6:	4a05      	ldr	r2, [pc, #20]	; (11bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11bb8:	9b01      	ldr	r3, [sp, #4]
   11bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bbe:	2b00      	cmp	r3, #0
   11bc0:	d100      	bne.n	11bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11bc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11bc4:	bf00      	nop
   11bc6:	b003      	add	sp, #12
   11bc8:	f85d fb04 	ldr.w	pc, [sp], #4
   11bcc:	1fff94e8 	.word	0x1fff94e8
   11bd0:	1fff94e4 	.word	0x1fff94e4

00011bd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11bd4:	b500      	push	{lr}
   11bd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bd8:	f7ef f818 	bl	c0c <Sys_GetCoreID>
   11bdc:	4603      	mov	r3, r0
   11bde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   11be0:	4a10      	ldr	r2, [pc, #64]	; (11c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11be2:	9b01      	ldr	r3, [sp, #4]
   11be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11be8:	2b00      	cmp	r3, #0
   11bea:	d10d      	bne.n	11c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11bec:	f7ee fe9e 	bl	92c <Adc_schm_read_msr>
   11bf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11bf2:	9b00      	ldr	r3, [sp, #0]
   11bf4:	f003 0301 	and.w	r3, r3, #1
   11bf8:	2b00      	cmp	r3, #0
   11bfa:	d100      	bne.n	11bfe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11bfc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   11bfe:	490a      	ldr	r1, [pc, #40]	; (11c28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   11c00:	9b01      	ldr	r3, [sp, #4]
   11c02:	9a00      	ldr	r2, [sp, #0]
   11c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   11c08:	4a06      	ldr	r2, [pc, #24]	; (11c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11c0a:	9b01      	ldr	r3, [sp, #4]
   11c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c10:	1c5a      	adds	r2, r3, #1
   11c12:	4904      	ldr	r1, [pc, #16]	; (11c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11c14:	9b01      	ldr	r3, [sp, #4]
   11c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c1a:	bf00      	nop
   11c1c:	b003      	add	sp, #12
   11c1e:	f85d fb04 	ldr.w	pc, [sp], #4
   11c22:	bf00      	nop
   11c24:	1fff94f0 	.word	0x1fff94f0
   11c28:	1fff94ec 	.word	0x1fff94ec

00011c2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11c2c:	b500      	push	{lr}
   11c2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c30:	f7ee ffec 	bl	c0c <Sys_GetCoreID>
   11c34:	4603      	mov	r3, r0
   11c36:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   11c38:	4a0d      	ldr	r2, [pc, #52]	; (11c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11c3a:	9b01      	ldr	r3, [sp, #4]
   11c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c40:	1e5a      	subs	r2, r3, #1
   11c42:	490b      	ldr	r1, [pc, #44]	; (11c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11c44:	9b01      	ldr	r3, [sp, #4]
   11c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   11c4a:	4a0a      	ldr	r2, [pc, #40]	; (11c74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   11c4c:	9b01      	ldr	r3, [sp, #4]
   11c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c52:	f003 0301 	and.w	r3, r3, #1
   11c56:	2b00      	cmp	r3, #0
   11c58:	d106      	bne.n	11c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   11c5a:	4a05      	ldr	r2, [pc, #20]	; (11c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11c5c:	9b01      	ldr	r3, [sp, #4]
   11c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c62:	2b00      	cmp	r3, #0
   11c64:	d100      	bne.n	11c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c68:	bf00      	nop
   11c6a:	b003      	add	sp, #12
   11c6c:	f85d fb04 	ldr.w	pc, [sp], #4
   11c70:	1fff94f0 	.word	0x1fff94f0
   11c74:	1fff94ec 	.word	0x1fff94ec

00011c78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11c78:	b500      	push	{lr}
   11c7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c7c:	f7ee ffc6 	bl	c0c <Sys_GetCoreID>
   11c80:	4603      	mov	r3, r0
   11c82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   11c84:	4a10      	ldr	r2, [pc, #64]	; (11cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11c86:	9b01      	ldr	r3, [sp, #4]
   11c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c8c:	2b00      	cmp	r3, #0
   11c8e:	d10d      	bne.n	11cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c90:	f7ee fe4c 	bl	92c <Adc_schm_read_msr>
   11c94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c96:	9b00      	ldr	r3, [sp, #0]
   11c98:	f003 0301 	and.w	r3, r3, #1
   11c9c:	2b00      	cmp	r3, #0
   11c9e:	d100      	bne.n	11ca2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ca0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   11ca2:	490a      	ldr	r1, [pc, #40]	; (11ccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   11ca4:	9b01      	ldr	r3, [sp, #4]
   11ca6:	9a00      	ldr	r2, [sp, #0]
   11ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   11cac:	4a06      	ldr	r2, [pc, #24]	; (11cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11cae:	9b01      	ldr	r3, [sp, #4]
   11cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cb4:	1c5a      	adds	r2, r3, #1
   11cb6:	4904      	ldr	r1, [pc, #16]	; (11cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11cb8:	9b01      	ldr	r3, [sp, #4]
   11cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11cbe:	bf00      	nop
   11cc0:	b003      	add	sp, #12
   11cc2:	f85d fb04 	ldr.w	pc, [sp], #4
   11cc6:	bf00      	nop
   11cc8:	1fff94f8 	.word	0x1fff94f8
   11ccc:	1fff94f4 	.word	0x1fff94f4

00011cd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11cd0:	b500      	push	{lr}
   11cd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cd4:	f7ee ff9a 	bl	c0c <Sys_GetCoreID>
   11cd8:	4603      	mov	r3, r0
   11cda:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   11cdc:	4a0d      	ldr	r2, [pc, #52]	; (11d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11cde:	9b01      	ldr	r3, [sp, #4]
   11ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ce4:	1e5a      	subs	r2, r3, #1
   11ce6:	490b      	ldr	r1, [pc, #44]	; (11d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11ce8:	9b01      	ldr	r3, [sp, #4]
   11cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   11cee:	4a0a      	ldr	r2, [pc, #40]	; (11d18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   11cf0:	9b01      	ldr	r3, [sp, #4]
   11cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cf6:	f003 0301 	and.w	r3, r3, #1
   11cfa:	2b00      	cmp	r3, #0
   11cfc:	d106      	bne.n	11d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   11cfe:	4a05      	ldr	r2, [pc, #20]	; (11d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11d00:	9b01      	ldr	r3, [sp, #4]
   11d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d06:	2b00      	cmp	r3, #0
   11d08:	d100      	bne.n	11d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d0c:	bf00      	nop
   11d0e:	b003      	add	sp, #12
   11d10:	f85d fb04 	ldr.w	pc, [sp], #4
   11d14:	1fff94f8 	.word	0x1fff94f8
   11d18:	1fff94f4 	.word	0x1fff94f4

00011d1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11d1c:	b500      	push	{lr}
   11d1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d20:	f7ee ff74 	bl	c0c <Sys_GetCoreID>
   11d24:	4603      	mov	r3, r0
   11d26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   11d28:	4a10      	ldr	r2, [pc, #64]	; (11d6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11d2a:	9b01      	ldr	r3, [sp, #4]
   11d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d30:	2b00      	cmp	r3, #0
   11d32:	d10d      	bne.n	11d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d34:	f7ee fdfa 	bl	92c <Adc_schm_read_msr>
   11d38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d3a:	9b00      	ldr	r3, [sp, #0]
   11d3c:	f003 0301 	and.w	r3, r3, #1
   11d40:	2b00      	cmp	r3, #0
   11d42:	d100      	bne.n	11d46 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   11d46:	490a      	ldr	r1, [pc, #40]	; (11d70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   11d48:	9b01      	ldr	r3, [sp, #4]
   11d4a:	9a00      	ldr	r2, [sp, #0]
   11d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   11d50:	4a06      	ldr	r2, [pc, #24]	; (11d6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11d52:	9b01      	ldr	r3, [sp, #4]
   11d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d58:	1c5a      	adds	r2, r3, #1
   11d5a:	4904      	ldr	r1, [pc, #16]	; (11d6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11d5c:	9b01      	ldr	r3, [sp, #4]
   11d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d62:	bf00      	nop
   11d64:	b003      	add	sp, #12
   11d66:	f85d fb04 	ldr.w	pc, [sp], #4
   11d6a:	bf00      	nop
   11d6c:	1fff9500 	.word	0x1fff9500
   11d70:	1fff94fc 	.word	0x1fff94fc

00011d74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11d74:	b500      	push	{lr}
   11d76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d78:	f7ee ff48 	bl	c0c <Sys_GetCoreID>
   11d7c:	4603      	mov	r3, r0
   11d7e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   11d80:	4a0d      	ldr	r2, [pc, #52]	; (11db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11d82:	9b01      	ldr	r3, [sp, #4]
   11d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d88:	1e5a      	subs	r2, r3, #1
   11d8a:	490b      	ldr	r1, [pc, #44]	; (11db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11d8c:	9b01      	ldr	r3, [sp, #4]
   11d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   11d92:	4a0a      	ldr	r2, [pc, #40]	; (11dbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   11d94:	9b01      	ldr	r3, [sp, #4]
   11d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d9a:	f003 0301 	and.w	r3, r3, #1
   11d9e:	2b00      	cmp	r3, #0
   11da0:	d106      	bne.n	11db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   11da2:	4a05      	ldr	r2, [pc, #20]	; (11db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11da4:	9b01      	ldr	r3, [sp, #4]
   11da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11daa:	2b00      	cmp	r3, #0
   11dac:	d100      	bne.n	11db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11dae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11db0:	bf00      	nop
   11db2:	b003      	add	sp, #12
   11db4:	f85d fb04 	ldr.w	pc, [sp], #4
   11db8:	1fff9500 	.word	0x1fff9500
   11dbc:	1fff94fc 	.word	0x1fff94fc

00011dc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11dc0:	b500      	push	{lr}
   11dc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11dc4:	f7ee ff22 	bl	c0c <Sys_GetCoreID>
   11dc8:	4603      	mov	r3, r0
   11dca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   11dcc:	4a10      	ldr	r2, [pc, #64]	; (11e10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11dce:	9b01      	ldr	r3, [sp, #4]
   11dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dd4:	2b00      	cmp	r3, #0
   11dd6:	d10d      	bne.n	11df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11dd8:	f7ee fda8 	bl	92c <Adc_schm_read_msr>
   11ddc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11dde:	9b00      	ldr	r3, [sp, #0]
   11de0:	f003 0301 	and.w	r3, r3, #1
   11de4:	2b00      	cmp	r3, #0
   11de6:	d100      	bne.n	11dea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11de8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   11dea:	490a      	ldr	r1, [pc, #40]	; (11e14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   11dec:	9b01      	ldr	r3, [sp, #4]
   11dee:	9a00      	ldr	r2, [sp, #0]
   11df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   11df4:	4a06      	ldr	r2, [pc, #24]	; (11e10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11df6:	9b01      	ldr	r3, [sp, #4]
   11df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dfc:	1c5a      	adds	r2, r3, #1
   11dfe:	4904      	ldr	r1, [pc, #16]	; (11e10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11e00:	9b01      	ldr	r3, [sp, #4]
   11e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e06:	bf00      	nop
   11e08:	b003      	add	sp, #12
   11e0a:	f85d fb04 	ldr.w	pc, [sp], #4
   11e0e:	bf00      	nop
   11e10:	1fff9508 	.word	0x1fff9508
   11e14:	1fff9504 	.word	0x1fff9504

00011e18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11e18:	b500      	push	{lr}
   11e1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e1c:	f7ee fef6 	bl	c0c <Sys_GetCoreID>
   11e20:	4603      	mov	r3, r0
   11e22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   11e24:	4a0d      	ldr	r2, [pc, #52]	; (11e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11e26:	9b01      	ldr	r3, [sp, #4]
   11e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e2c:	1e5a      	subs	r2, r3, #1
   11e2e:	490b      	ldr	r1, [pc, #44]	; (11e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11e30:	9b01      	ldr	r3, [sp, #4]
   11e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   11e36:	4a0a      	ldr	r2, [pc, #40]	; (11e60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   11e38:	9b01      	ldr	r3, [sp, #4]
   11e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e3e:	f003 0301 	and.w	r3, r3, #1
   11e42:	2b00      	cmp	r3, #0
   11e44:	d106      	bne.n	11e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   11e46:	4a05      	ldr	r2, [pc, #20]	; (11e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11e48:	9b01      	ldr	r3, [sp, #4]
   11e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e4e:	2b00      	cmp	r3, #0
   11e50:	d100      	bne.n	11e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e54:	bf00      	nop
   11e56:	b003      	add	sp, #12
   11e58:	f85d fb04 	ldr.w	pc, [sp], #4
   11e5c:	1fff9508 	.word	0x1fff9508
   11e60:	1fff9504 	.word	0x1fff9504

00011e64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11e64:	b500      	push	{lr}
   11e66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e68:	f7ee fed0 	bl	c0c <Sys_GetCoreID>
   11e6c:	4603      	mov	r3, r0
   11e6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   11e70:	4a10      	ldr	r2, [pc, #64]	; (11eb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11e72:	9b01      	ldr	r3, [sp, #4]
   11e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e78:	2b00      	cmp	r3, #0
   11e7a:	d10d      	bne.n	11e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e7c:	f7ee fd56 	bl	92c <Adc_schm_read_msr>
   11e80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e82:	9b00      	ldr	r3, [sp, #0]
   11e84:	f003 0301 	and.w	r3, r3, #1
   11e88:	2b00      	cmp	r3, #0
   11e8a:	d100      	bne.n	11e8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   11e8e:	490a      	ldr	r1, [pc, #40]	; (11eb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   11e90:	9b01      	ldr	r3, [sp, #4]
   11e92:	9a00      	ldr	r2, [sp, #0]
   11e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   11e98:	4a06      	ldr	r2, [pc, #24]	; (11eb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11e9a:	9b01      	ldr	r3, [sp, #4]
   11e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ea0:	1c5a      	adds	r2, r3, #1
   11ea2:	4904      	ldr	r1, [pc, #16]	; (11eb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11ea4:	9b01      	ldr	r3, [sp, #4]
   11ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11eaa:	bf00      	nop
   11eac:	b003      	add	sp, #12
   11eae:	f85d fb04 	ldr.w	pc, [sp], #4
   11eb2:	bf00      	nop
   11eb4:	1fff9510 	.word	0x1fff9510
   11eb8:	1fff950c 	.word	0x1fff950c

00011ebc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11ebc:	b500      	push	{lr}
   11ebe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ec0:	f7ee fea4 	bl	c0c <Sys_GetCoreID>
   11ec4:	4603      	mov	r3, r0
   11ec6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   11ec8:	4a0d      	ldr	r2, [pc, #52]	; (11f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11eca:	9b01      	ldr	r3, [sp, #4]
   11ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ed0:	1e5a      	subs	r2, r3, #1
   11ed2:	490b      	ldr	r1, [pc, #44]	; (11f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11ed4:	9b01      	ldr	r3, [sp, #4]
   11ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   11eda:	4a0a      	ldr	r2, [pc, #40]	; (11f04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   11edc:	9b01      	ldr	r3, [sp, #4]
   11ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ee2:	f003 0301 	and.w	r3, r3, #1
   11ee6:	2b00      	cmp	r3, #0
   11ee8:	d106      	bne.n	11ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   11eea:	4a05      	ldr	r2, [pc, #20]	; (11f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11eec:	9b01      	ldr	r3, [sp, #4]
   11eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ef2:	2b00      	cmp	r3, #0
   11ef4:	d100      	bne.n	11ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ef6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ef8:	bf00      	nop
   11efa:	b003      	add	sp, #12
   11efc:	f85d fb04 	ldr.w	pc, [sp], #4
   11f00:	1fff9510 	.word	0x1fff9510
   11f04:	1fff950c 	.word	0x1fff950c

00011f08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11f08:	b500      	push	{lr}
   11f0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f0c:	f7ee fe7e 	bl	c0c <Sys_GetCoreID>
   11f10:	4603      	mov	r3, r0
   11f12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   11f14:	4a10      	ldr	r2, [pc, #64]	; (11f58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11f16:	9b01      	ldr	r3, [sp, #4]
   11f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f1c:	2b00      	cmp	r3, #0
   11f1e:	d10d      	bne.n	11f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f20:	f7ee fd04 	bl	92c <Adc_schm_read_msr>
   11f24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f26:	9b00      	ldr	r3, [sp, #0]
   11f28:	f003 0301 	and.w	r3, r3, #1
   11f2c:	2b00      	cmp	r3, #0
   11f2e:	d100      	bne.n	11f32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   11f32:	490a      	ldr	r1, [pc, #40]	; (11f5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   11f34:	9b01      	ldr	r3, [sp, #4]
   11f36:	9a00      	ldr	r2, [sp, #0]
   11f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   11f3c:	4a06      	ldr	r2, [pc, #24]	; (11f58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11f3e:	9b01      	ldr	r3, [sp, #4]
   11f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f44:	1c5a      	adds	r2, r3, #1
   11f46:	4904      	ldr	r1, [pc, #16]	; (11f58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11f48:	9b01      	ldr	r3, [sp, #4]
   11f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f4e:	bf00      	nop
   11f50:	b003      	add	sp, #12
   11f52:	f85d fb04 	ldr.w	pc, [sp], #4
   11f56:	bf00      	nop
   11f58:	1fff9518 	.word	0x1fff9518
   11f5c:	1fff9514 	.word	0x1fff9514

00011f60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11f60:	b500      	push	{lr}
   11f62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f64:	f7ee fe52 	bl	c0c <Sys_GetCoreID>
   11f68:	4603      	mov	r3, r0
   11f6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   11f6c:	4a0d      	ldr	r2, [pc, #52]	; (11fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11f6e:	9b01      	ldr	r3, [sp, #4]
   11f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f74:	1e5a      	subs	r2, r3, #1
   11f76:	490b      	ldr	r1, [pc, #44]	; (11fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11f78:	9b01      	ldr	r3, [sp, #4]
   11f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   11f7e:	4a0a      	ldr	r2, [pc, #40]	; (11fa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   11f80:	9b01      	ldr	r3, [sp, #4]
   11f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f86:	f003 0301 	and.w	r3, r3, #1
   11f8a:	2b00      	cmp	r3, #0
   11f8c:	d106      	bne.n	11f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   11f8e:	4a05      	ldr	r2, [pc, #20]	; (11fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11f90:	9b01      	ldr	r3, [sp, #4]
   11f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f96:	2b00      	cmp	r3, #0
   11f98:	d100      	bne.n	11f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f9c:	bf00      	nop
   11f9e:	b003      	add	sp, #12
   11fa0:	f85d fb04 	ldr.w	pc, [sp], #4
   11fa4:	1fff9518 	.word	0x1fff9518
   11fa8:	1fff9514 	.word	0x1fff9514

00011fac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   11fac:	b500      	push	{lr}
   11fae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fb0:	f7ee fe2c 	bl	c0c <Sys_GetCoreID>
   11fb4:	4603      	mov	r3, r0
   11fb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   11fb8:	4a10      	ldr	r2, [pc, #64]	; (11ffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11fba:	9b01      	ldr	r3, [sp, #4]
   11fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fc0:	2b00      	cmp	r3, #0
   11fc2:	d10d      	bne.n	11fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11fc4:	f7ee fcb2 	bl	92c <Adc_schm_read_msr>
   11fc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11fca:	9b00      	ldr	r3, [sp, #0]
   11fcc:	f003 0301 	and.w	r3, r3, #1
   11fd0:	2b00      	cmp	r3, #0
   11fd2:	d100      	bne.n	11fd6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11fd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   11fd6:	490a      	ldr	r1, [pc, #40]	; (12000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   11fd8:	9b01      	ldr	r3, [sp, #4]
   11fda:	9a00      	ldr	r2, [sp, #0]
   11fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   11fe0:	4a06      	ldr	r2, [pc, #24]	; (11ffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11fe2:	9b01      	ldr	r3, [sp, #4]
   11fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fe8:	1c5a      	adds	r2, r3, #1
   11fea:	4904      	ldr	r1, [pc, #16]	; (11ffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11fec:	9b01      	ldr	r3, [sp, #4]
   11fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ff2:	bf00      	nop
   11ff4:	b003      	add	sp, #12
   11ff6:	f85d fb04 	ldr.w	pc, [sp], #4
   11ffa:	bf00      	nop
   11ffc:	1fff9520 	.word	0x1fff9520
   12000:	1fff951c 	.word	0x1fff951c

00012004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   12004:	b500      	push	{lr}
   12006:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12008:	f7ee fe00 	bl	c0c <Sys_GetCoreID>
   1200c:	4603      	mov	r3, r0
   1200e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   12010:	4a0d      	ldr	r2, [pc, #52]	; (12048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   12012:	9b01      	ldr	r3, [sp, #4]
   12014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12018:	1e5a      	subs	r2, r3, #1
   1201a:	490b      	ldr	r1, [pc, #44]	; (12048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   1201c:	9b01      	ldr	r3, [sp, #4]
   1201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   12022:	4a0a      	ldr	r2, [pc, #40]	; (1204c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   12024:	9b01      	ldr	r3, [sp, #4]
   12026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1202a:	f003 0301 	and.w	r3, r3, #1
   1202e:	2b00      	cmp	r3, #0
   12030:	d106      	bne.n	12040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   12032:	4a05      	ldr	r2, [pc, #20]	; (12048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   12034:	9b01      	ldr	r3, [sp, #4]
   12036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1203a:	2b00      	cmp	r3, #0
   1203c:	d100      	bne.n	12040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1203e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12040:	bf00      	nop
   12042:	b003      	add	sp, #12
   12044:	f85d fb04 	ldr.w	pc, [sp], #4
   12048:	1fff9520 	.word	0x1fff9520
   1204c:	1fff951c 	.word	0x1fff951c

00012050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   12050:	b500      	push	{lr}
   12052:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12054:	f7ee fdda 	bl	c0c <Sys_GetCoreID>
   12058:	4603      	mov	r3, r0
   1205a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   1205c:	4a10      	ldr	r2, [pc, #64]	; (120a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1205e:	9b01      	ldr	r3, [sp, #4]
   12060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12064:	2b00      	cmp	r3, #0
   12066:	d10d      	bne.n	12084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12068:	f7ee fc60 	bl	92c <Adc_schm_read_msr>
   1206c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1206e:	9b00      	ldr	r3, [sp, #0]
   12070:	f003 0301 	and.w	r3, r3, #1
   12074:	2b00      	cmp	r3, #0
   12076:	d100      	bne.n	1207a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12078:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   1207a:	490a      	ldr	r1, [pc, #40]	; (120a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   1207c:	9b01      	ldr	r3, [sp, #4]
   1207e:	9a00      	ldr	r2, [sp, #0]
   12080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   12084:	4a06      	ldr	r2, [pc, #24]	; (120a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   12086:	9b01      	ldr	r3, [sp, #4]
   12088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1208c:	1c5a      	adds	r2, r3, #1
   1208e:	4904      	ldr	r1, [pc, #16]	; (120a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   12090:	9b01      	ldr	r3, [sp, #4]
   12092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12096:	bf00      	nop
   12098:	b003      	add	sp, #12
   1209a:	f85d fb04 	ldr.w	pc, [sp], #4
   1209e:	bf00      	nop
   120a0:	1fff9528 	.word	0x1fff9528
   120a4:	1fff9524 	.word	0x1fff9524

000120a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   120a8:	b500      	push	{lr}
   120aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120ac:	f7ee fdae 	bl	c0c <Sys_GetCoreID>
   120b0:	4603      	mov	r3, r0
   120b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   120b4:	4a0d      	ldr	r2, [pc, #52]	; (120ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   120b6:	9b01      	ldr	r3, [sp, #4]
   120b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120bc:	1e5a      	subs	r2, r3, #1
   120be:	490b      	ldr	r1, [pc, #44]	; (120ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   120c0:	9b01      	ldr	r3, [sp, #4]
   120c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   120c6:	4a0a      	ldr	r2, [pc, #40]	; (120f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   120c8:	9b01      	ldr	r3, [sp, #4]
   120ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120ce:	f003 0301 	and.w	r3, r3, #1
   120d2:	2b00      	cmp	r3, #0
   120d4:	d106      	bne.n	120e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   120d6:	4a05      	ldr	r2, [pc, #20]	; (120ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   120d8:	9b01      	ldr	r3, [sp, #4]
   120da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120de:	2b00      	cmp	r3, #0
   120e0:	d100      	bne.n	120e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   120e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   120e4:	bf00      	nop
   120e6:	b003      	add	sp, #12
   120e8:	f85d fb04 	ldr.w	pc, [sp], #4
   120ec:	1fff9528 	.word	0x1fff9528
   120f0:	1fff9524 	.word	0x1fff9524

000120f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   120f4:	b500      	push	{lr}
   120f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120f8:	f7ee fd88 	bl	c0c <Sys_GetCoreID>
   120fc:	4603      	mov	r3, r0
   120fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   12100:	4a10      	ldr	r2, [pc, #64]	; (12144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   12102:	9b01      	ldr	r3, [sp, #4]
   12104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12108:	2b00      	cmp	r3, #0
   1210a:	d10d      	bne.n	12128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1210c:	f7ee fc0e 	bl	92c <Adc_schm_read_msr>
   12110:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12112:	9b00      	ldr	r3, [sp, #0]
   12114:	f003 0301 	and.w	r3, r3, #1
   12118:	2b00      	cmp	r3, #0
   1211a:	d100      	bne.n	1211e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1211c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   1211e:	490a      	ldr	r1, [pc, #40]	; (12148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   12120:	9b01      	ldr	r3, [sp, #4]
   12122:	9a00      	ldr	r2, [sp, #0]
   12124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   12128:	4a06      	ldr	r2, [pc, #24]	; (12144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   1212a:	9b01      	ldr	r3, [sp, #4]
   1212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12130:	1c5a      	adds	r2, r3, #1
   12132:	4904      	ldr	r1, [pc, #16]	; (12144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   12134:	9b01      	ldr	r3, [sp, #4]
   12136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1213a:	bf00      	nop
   1213c:	b003      	add	sp, #12
   1213e:	f85d fb04 	ldr.w	pc, [sp], #4
   12142:	bf00      	nop
   12144:	1fff9530 	.word	0x1fff9530
   12148:	1fff952c 	.word	0x1fff952c

0001214c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   1214c:	b500      	push	{lr}
   1214e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12150:	f7ee fd5c 	bl	c0c <Sys_GetCoreID>
   12154:	4603      	mov	r3, r0
   12156:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   12158:	4a0d      	ldr	r2, [pc, #52]	; (12190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   1215a:	9b01      	ldr	r3, [sp, #4]
   1215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12160:	1e5a      	subs	r2, r3, #1
   12162:	490b      	ldr	r1, [pc, #44]	; (12190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   12164:	9b01      	ldr	r3, [sp, #4]
   12166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   1216a:	4a0a      	ldr	r2, [pc, #40]	; (12194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   1216c:	9b01      	ldr	r3, [sp, #4]
   1216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12172:	f003 0301 	and.w	r3, r3, #1
   12176:	2b00      	cmp	r3, #0
   12178:	d106      	bne.n	12188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   1217a:	4a05      	ldr	r2, [pc, #20]	; (12190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   1217c:	9b01      	ldr	r3, [sp, #4]
   1217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12182:	2b00      	cmp	r3, #0
   12184:	d100      	bne.n	12188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12186:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12188:	bf00      	nop
   1218a:	b003      	add	sp, #12
   1218c:	f85d fb04 	ldr.w	pc, [sp], #4
   12190:	1fff9530 	.word	0x1fff9530
   12194:	1fff952c 	.word	0x1fff952c

00012198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   12198:	b500      	push	{lr}
   1219a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1219c:	f7ee fd36 	bl	c0c <Sys_GetCoreID>
   121a0:	4603      	mov	r3, r0
   121a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   121a4:	4a10      	ldr	r2, [pc, #64]	; (121e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   121a6:	9b01      	ldr	r3, [sp, #4]
   121a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121ac:	2b00      	cmp	r3, #0
   121ae:	d10d      	bne.n	121cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   121b0:	f7ee fbbc 	bl	92c <Adc_schm_read_msr>
   121b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   121b6:	9b00      	ldr	r3, [sp, #0]
   121b8:	f003 0301 	and.w	r3, r3, #1
   121bc:	2b00      	cmp	r3, #0
   121be:	d100      	bne.n	121c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   121c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   121c2:	490a      	ldr	r1, [pc, #40]	; (121ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   121c4:	9b01      	ldr	r3, [sp, #4]
   121c6:	9a00      	ldr	r2, [sp, #0]
   121c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   121cc:	4a06      	ldr	r2, [pc, #24]	; (121e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   121ce:	9b01      	ldr	r3, [sp, #4]
   121d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121d4:	1c5a      	adds	r2, r3, #1
   121d6:	4904      	ldr	r1, [pc, #16]	; (121e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   121d8:	9b01      	ldr	r3, [sp, #4]
   121da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   121de:	bf00      	nop
   121e0:	b003      	add	sp, #12
   121e2:	f85d fb04 	ldr.w	pc, [sp], #4
   121e6:	bf00      	nop
   121e8:	1fff9538 	.word	0x1fff9538
   121ec:	1fff9534 	.word	0x1fff9534

000121f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   121f0:	b500      	push	{lr}
   121f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121f4:	f7ee fd0a 	bl	c0c <Sys_GetCoreID>
   121f8:	4603      	mov	r3, r0
   121fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   121fc:	4a0d      	ldr	r2, [pc, #52]	; (12234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   121fe:	9b01      	ldr	r3, [sp, #4]
   12200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12204:	1e5a      	subs	r2, r3, #1
   12206:	490b      	ldr	r1, [pc, #44]	; (12234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   12208:	9b01      	ldr	r3, [sp, #4]
   1220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   1220e:	4a0a      	ldr	r2, [pc, #40]	; (12238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   12210:	9b01      	ldr	r3, [sp, #4]
   12212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12216:	f003 0301 	and.w	r3, r3, #1
   1221a:	2b00      	cmp	r3, #0
   1221c:	d106      	bne.n	1222c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   1221e:	4a05      	ldr	r2, [pc, #20]	; (12234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   12220:	9b01      	ldr	r3, [sp, #4]
   12222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12226:	2b00      	cmp	r3, #0
   12228:	d100      	bne.n	1222c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1222a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1222c:	bf00      	nop
   1222e:	b003      	add	sp, #12
   12230:	f85d fb04 	ldr.w	pc, [sp], #4
   12234:	1fff9538 	.word	0x1fff9538
   12238:	1fff9534 	.word	0x1fff9534

0001223c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   1223c:	b500      	push	{lr}
   1223e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12240:	f7ee fce4 	bl	c0c <Sys_GetCoreID>
   12244:	4603      	mov	r3, r0
   12246:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   12248:	4a10      	ldr	r2, [pc, #64]	; (1228c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1224a:	9b01      	ldr	r3, [sp, #4]
   1224c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12250:	2b00      	cmp	r3, #0
   12252:	d10d      	bne.n	12270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12254:	f7ee fb6a 	bl	92c <Adc_schm_read_msr>
   12258:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1225a:	9b00      	ldr	r3, [sp, #0]
   1225c:	f003 0301 	and.w	r3, r3, #1
   12260:	2b00      	cmp	r3, #0
   12262:	d100      	bne.n	12266 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12264:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   12266:	490a      	ldr	r1, [pc, #40]	; (12290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   12268:	9b01      	ldr	r3, [sp, #4]
   1226a:	9a00      	ldr	r2, [sp, #0]
   1226c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   12270:	4a06      	ldr	r2, [pc, #24]	; (1228c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   12272:	9b01      	ldr	r3, [sp, #4]
   12274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12278:	1c5a      	adds	r2, r3, #1
   1227a:	4904      	ldr	r1, [pc, #16]	; (1228c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1227c:	9b01      	ldr	r3, [sp, #4]
   1227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12282:	bf00      	nop
   12284:	b003      	add	sp, #12
   12286:	f85d fb04 	ldr.w	pc, [sp], #4
   1228a:	bf00      	nop
   1228c:	1fff9540 	.word	0x1fff9540
   12290:	1fff953c 	.word	0x1fff953c

00012294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   12294:	b500      	push	{lr}
   12296:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12298:	f7ee fcb8 	bl	c0c <Sys_GetCoreID>
   1229c:	4603      	mov	r3, r0
   1229e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   122a0:	4a0d      	ldr	r2, [pc, #52]	; (122d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   122a2:	9b01      	ldr	r3, [sp, #4]
   122a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122a8:	1e5a      	subs	r2, r3, #1
   122aa:	490b      	ldr	r1, [pc, #44]	; (122d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   122ac:	9b01      	ldr	r3, [sp, #4]
   122ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   122b2:	4a0a      	ldr	r2, [pc, #40]	; (122dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   122b4:	9b01      	ldr	r3, [sp, #4]
   122b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122ba:	f003 0301 	and.w	r3, r3, #1
   122be:	2b00      	cmp	r3, #0
   122c0:	d106      	bne.n	122d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   122c2:	4a05      	ldr	r2, [pc, #20]	; (122d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   122c4:	9b01      	ldr	r3, [sp, #4]
   122c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122ca:	2b00      	cmp	r3, #0
   122cc:	d100      	bne.n	122d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   122ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   122d0:	bf00      	nop
   122d2:	b003      	add	sp, #12
   122d4:	f85d fb04 	ldr.w	pc, [sp], #4
   122d8:	1fff9540 	.word	0x1fff9540
   122dc:	1fff953c 	.word	0x1fff953c

000122e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   122e0:	b500      	push	{lr}
   122e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122e4:	f7ee fc92 	bl	c0c <Sys_GetCoreID>
   122e8:	4603      	mov	r3, r0
   122ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   122ec:	4a10      	ldr	r2, [pc, #64]	; (12330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   122ee:	9b01      	ldr	r3, [sp, #4]
   122f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122f4:	2b00      	cmp	r3, #0
   122f6:	d10d      	bne.n	12314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   122f8:	f7ee fb18 	bl	92c <Adc_schm_read_msr>
   122fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   122fe:	9b00      	ldr	r3, [sp, #0]
   12300:	f003 0301 	and.w	r3, r3, #1
   12304:	2b00      	cmp	r3, #0
   12306:	d100      	bne.n	1230a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12308:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   1230a:	490a      	ldr	r1, [pc, #40]	; (12334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   1230c:	9b01      	ldr	r3, [sp, #4]
   1230e:	9a00      	ldr	r2, [sp, #0]
   12310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   12314:	4a06      	ldr	r2, [pc, #24]	; (12330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   12316:	9b01      	ldr	r3, [sp, #4]
   12318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1231c:	1c5a      	adds	r2, r3, #1
   1231e:	4904      	ldr	r1, [pc, #16]	; (12330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   12320:	9b01      	ldr	r3, [sp, #4]
   12322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12326:	bf00      	nop
   12328:	b003      	add	sp, #12
   1232a:	f85d fb04 	ldr.w	pc, [sp], #4
   1232e:	bf00      	nop
   12330:	1fff9548 	.word	0x1fff9548
   12334:	1fff9544 	.word	0x1fff9544

00012338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   12338:	b500      	push	{lr}
   1233a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1233c:	f7ee fc66 	bl	c0c <Sys_GetCoreID>
   12340:	4603      	mov	r3, r0
   12342:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   12344:	4a0d      	ldr	r2, [pc, #52]	; (1237c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   12346:	9b01      	ldr	r3, [sp, #4]
   12348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1234c:	1e5a      	subs	r2, r3, #1
   1234e:	490b      	ldr	r1, [pc, #44]	; (1237c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   12350:	9b01      	ldr	r3, [sp, #4]
   12352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   12356:	4a0a      	ldr	r2, [pc, #40]	; (12380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   12358:	9b01      	ldr	r3, [sp, #4]
   1235a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1235e:	f003 0301 	and.w	r3, r3, #1
   12362:	2b00      	cmp	r3, #0
   12364:	d106      	bne.n	12374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   12366:	4a05      	ldr	r2, [pc, #20]	; (1237c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   12368:	9b01      	ldr	r3, [sp, #4]
   1236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1236e:	2b00      	cmp	r3, #0
   12370:	d100      	bne.n	12374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12372:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12374:	bf00      	nop
   12376:	b003      	add	sp, #12
   12378:	f85d fb04 	ldr.w	pc, [sp], #4
   1237c:	1fff9548 	.word	0x1fff9548
   12380:	1fff9544 	.word	0x1fff9544

00012384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   12384:	b500      	push	{lr}
   12386:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12388:	f7ee fc40 	bl	c0c <Sys_GetCoreID>
   1238c:	4603      	mov	r3, r0
   1238e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   12390:	4a10      	ldr	r2, [pc, #64]	; (123d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   12392:	9b01      	ldr	r3, [sp, #4]
   12394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12398:	2b00      	cmp	r3, #0
   1239a:	d10d      	bne.n	123b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1239c:	f7ee fac6 	bl	92c <Adc_schm_read_msr>
   123a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   123a2:	9b00      	ldr	r3, [sp, #0]
   123a4:	f003 0301 	and.w	r3, r3, #1
   123a8:	2b00      	cmp	r3, #0
   123aa:	d100      	bne.n	123ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   123ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   123ae:	490a      	ldr	r1, [pc, #40]	; (123d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   123b0:	9b01      	ldr	r3, [sp, #4]
   123b2:	9a00      	ldr	r2, [sp, #0]
   123b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   123b8:	4a06      	ldr	r2, [pc, #24]	; (123d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   123ba:	9b01      	ldr	r3, [sp, #4]
   123bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123c0:	1c5a      	adds	r2, r3, #1
   123c2:	4904      	ldr	r1, [pc, #16]	; (123d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   123c4:	9b01      	ldr	r3, [sp, #4]
   123c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   123ca:	bf00      	nop
   123cc:	b003      	add	sp, #12
   123ce:	f85d fb04 	ldr.w	pc, [sp], #4
   123d2:	bf00      	nop
   123d4:	1fff9550 	.word	0x1fff9550
   123d8:	1fff954c 	.word	0x1fff954c

000123dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   123dc:	b500      	push	{lr}
   123de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123e0:	f7ee fc14 	bl	c0c <Sys_GetCoreID>
   123e4:	4603      	mov	r3, r0
   123e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   123e8:	4a0d      	ldr	r2, [pc, #52]	; (12420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   123ea:	9b01      	ldr	r3, [sp, #4]
   123ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123f0:	1e5a      	subs	r2, r3, #1
   123f2:	490b      	ldr	r1, [pc, #44]	; (12420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   123f4:	9b01      	ldr	r3, [sp, #4]
   123f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   123fa:	4a0a      	ldr	r2, [pc, #40]	; (12424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   123fc:	9b01      	ldr	r3, [sp, #4]
   123fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12402:	f003 0301 	and.w	r3, r3, #1
   12406:	2b00      	cmp	r3, #0
   12408:	d106      	bne.n	12418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   1240a:	4a05      	ldr	r2, [pc, #20]	; (12420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   1240c:	9b01      	ldr	r3, [sp, #4]
   1240e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12412:	2b00      	cmp	r3, #0
   12414:	d100      	bne.n	12418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12416:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12418:	bf00      	nop
   1241a:	b003      	add	sp, #12
   1241c:	f85d fb04 	ldr.w	pc, [sp], #4
   12420:	1fff9550 	.word	0x1fff9550
   12424:	1fff954c 	.word	0x1fff954c

00012428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   12428:	b500      	push	{lr}
   1242a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1242c:	f7ee fbee 	bl	c0c <Sys_GetCoreID>
   12430:	4603      	mov	r3, r0
   12432:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   12434:	4a10      	ldr	r2, [pc, #64]	; (12478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   12436:	9b01      	ldr	r3, [sp, #4]
   12438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1243c:	2b00      	cmp	r3, #0
   1243e:	d10d      	bne.n	1245c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12440:	f7ee fa74 	bl	92c <Adc_schm_read_msr>
   12444:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12446:	9b00      	ldr	r3, [sp, #0]
   12448:	f003 0301 	and.w	r3, r3, #1
   1244c:	2b00      	cmp	r3, #0
   1244e:	d100      	bne.n	12452 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12450:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   12452:	490a      	ldr	r1, [pc, #40]	; (1247c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   12454:	9b01      	ldr	r3, [sp, #4]
   12456:	9a00      	ldr	r2, [sp, #0]
   12458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   1245c:	4a06      	ldr	r2, [pc, #24]	; (12478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   1245e:	9b01      	ldr	r3, [sp, #4]
   12460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12464:	1c5a      	adds	r2, r3, #1
   12466:	4904      	ldr	r1, [pc, #16]	; (12478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   12468:	9b01      	ldr	r3, [sp, #4]
   1246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1246e:	bf00      	nop
   12470:	b003      	add	sp, #12
   12472:	f85d fb04 	ldr.w	pc, [sp], #4
   12476:	bf00      	nop
   12478:	1fff9558 	.word	0x1fff9558
   1247c:	1fff9554 	.word	0x1fff9554

00012480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   12480:	b500      	push	{lr}
   12482:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12484:	f7ee fbc2 	bl	c0c <Sys_GetCoreID>
   12488:	4603      	mov	r3, r0
   1248a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   1248c:	4a0d      	ldr	r2, [pc, #52]	; (124c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   1248e:	9b01      	ldr	r3, [sp, #4]
   12490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12494:	1e5a      	subs	r2, r3, #1
   12496:	490b      	ldr	r1, [pc, #44]	; (124c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   12498:	9b01      	ldr	r3, [sp, #4]
   1249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   1249e:	4a0a      	ldr	r2, [pc, #40]	; (124c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   124a0:	9b01      	ldr	r3, [sp, #4]
   124a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124a6:	f003 0301 	and.w	r3, r3, #1
   124aa:	2b00      	cmp	r3, #0
   124ac:	d106      	bne.n	124bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   124ae:	4a05      	ldr	r2, [pc, #20]	; (124c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   124b0:	9b01      	ldr	r3, [sp, #4]
   124b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124b6:	2b00      	cmp	r3, #0
   124b8:	d100      	bne.n	124bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   124ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   124bc:	bf00      	nop
   124be:	b003      	add	sp, #12
   124c0:	f85d fb04 	ldr.w	pc, [sp], #4
   124c4:	1fff9558 	.word	0x1fff9558
   124c8:	1fff9554 	.word	0x1fff9554

000124cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   124cc:	b500      	push	{lr}
   124ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124d0:	f7ee fb9c 	bl	c0c <Sys_GetCoreID>
   124d4:	4603      	mov	r3, r0
   124d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   124d8:	4a10      	ldr	r2, [pc, #64]	; (1251c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   124da:	9b01      	ldr	r3, [sp, #4]
   124dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124e0:	2b00      	cmp	r3, #0
   124e2:	d10d      	bne.n	12500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   124e4:	f7ee fa22 	bl	92c <Adc_schm_read_msr>
   124e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   124ea:	9b00      	ldr	r3, [sp, #0]
   124ec:	f003 0301 	and.w	r3, r3, #1
   124f0:	2b00      	cmp	r3, #0
   124f2:	d100      	bne.n	124f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   124f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   124f6:	490a      	ldr	r1, [pc, #40]	; (12520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   124f8:	9b01      	ldr	r3, [sp, #4]
   124fa:	9a00      	ldr	r2, [sp, #0]
   124fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   12500:	4a06      	ldr	r2, [pc, #24]	; (1251c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   12502:	9b01      	ldr	r3, [sp, #4]
   12504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12508:	1c5a      	adds	r2, r3, #1
   1250a:	4904      	ldr	r1, [pc, #16]	; (1251c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   1250c:	9b01      	ldr	r3, [sp, #4]
   1250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12512:	bf00      	nop
   12514:	b003      	add	sp, #12
   12516:	f85d fb04 	ldr.w	pc, [sp], #4
   1251a:	bf00      	nop
   1251c:	1fff9560 	.word	0x1fff9560
   12520:	1fff955c 	.word	0x1fff955c

00012524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   12524:	b500      	push	{lr}
   12526:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12528:	f7ee fb70 	bl	c0c <Sys_GetCoreID>
   1252c:	4603      	mov	r3, r0
   1252e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   12530:	4a0d      	ldr	r2, [pc, #52]	; (12568 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   12532:	9b01      	ldr	r3, [sp, #4]
   12534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12538:	1e5a      	subs	r2, r3, #1
   1253a:	490b      	ldr	r1, [pc, #44]	; (12568 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   1253c:	9b01      	ldr	r3, [sp, #4]
   1253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   12542:	4a0a      	ldr	r2, [pc, #40]	; (1256c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   12544:	9b01      	ldr	r3, [sp, #4]
   12546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1254a:	f003 0301 	and.w	r3, r3, #1
   1254e:	2b00      	cmp	r3, #0
   12550:	d106      	bne.n	12560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   12552:	4a05      	ldr	r2, [pc, #20]	; (12568 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   12554:	9b01      	ldr	r3, [sp, #4]
   12556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1255a:	2b00      	cmp	r3, #0
   1255c:	d100      	bne.n	12560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1255e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12560:	bf00      	nop
   12562:	b003      	add	sp, #12
   12564:	f85d fb04 	ldr.w	pc, [sp], #4
   12568:	1fff9560 	.word	0x1fff9560
   1256c:	1fff955c 	.word	0x1fff955c

00012570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   12570:	b500      	push	{lr}
   12572:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12574:	f7ee fb4a 	bl	c0c <Sys_GetCoreID>
   12578:	4603      	mov	r3, r0
   1257a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   1257c:	4a10      	ldr	r2, [pc, #64]	; (125c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1257e:	9b01      	ldr	r3, [sp, #4]
   12580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12584:	2b00      	cmp	r3, #0
   12586:	d10d      	bne.n	125a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12588:	f7ee f9d0 	bl	92c <Adc_schm_read_msr>
   1258c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1258e:	9b00      	ldr	r3, [sp, #0]
   12590:	f003 0301 	and.w	r3, r3, #1
   12594:	2b00      	cmp	r3, #0
   12596:	d100      	bne.n	1259a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12598:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   1259a:	490a      	ldr	r1, [pc, #40]	; (125c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   1259c:	9b01      	ldr	r3, [sp, #4]
   1259e:	9a00      	ldr	r2, [sp, #0]
   125a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   125a4:	4a06      	ldr	r2, [pc, #24]	; (125c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   125a6:	9b01      	ldr	r3, [sp, #4]
   125a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125ac:	1c5a      	adds	r2, r3, #1
   125ae:	4904      	ldr	r1, [pc, #16]	; (125c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   125b0:	9b01      	ldr	r3, [sp, #4]
   125b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   125b6:	bf00      	nop
   125b8:	b003      	add	sp, #12
   125ba:	f85d fb04 	ldr.w	pc, [sp], #4
   125be:	bf00      	nop
   125c0:	1fff9568 	.word	0x1fff9568
   125c4:	1fff9564 	.word	0x1fff9564

000125c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   125c8:	b500      	push	{lr}
   125ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125cc:	f7ee fb1e 	bl	c0c <Sys_GetCoreID>
   125d0:	4603      	mov	r3, r0
   125d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   125d4:	4a0d      	ldr	r2, [pc, #52]	; (1260c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   125d6:	9b01      	ldr	r3, [sp, #4]
   125d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125dc:	1e5a      	subs	r2, r3, #1
   125de:	490b      	ldr	r1, [pc, #44]	; (1260c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   125e0:	9b01      	ldr	r3, [sp, #4]
   125e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   125e6:	4a0a      	ldr	r2, [pc, #40]	; (12610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   125e8:	9b01      	ldr	r3, [sp, #4]
   125ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125ee:	f003 0301 	and.w	r3, r3, #1
   125f2:	2b00      	cmp	r3, #0
   125f4:	d106      	bne.n	12604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   125f6:	4a05      	ldr	r2, [pc, #20]	; (1260c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   125f8:	9b01      	ldr	r3, [sp, #4]
   125fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125fe:	2b00      	cmp	r3, #0
   12600:	d100      	bne.n	12604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12602:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12604:	bf00      	nop
   12606:	b003      	add	sp, #12
   12608:	f85d fb04 	ldr.w	pc, [sp], #4
   1260c:	1fff9568 	.word	0x1fff9568
   12610:	1fff9564 	.word	0x1fff9564

00012614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   12614:	b500      	push	{lr}
   12616:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12618:	f7ee faf8 	bl	c0c <Sys_GetCoreID>
   1261c:	4603      	mov	r3, r0
   1261e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   12620:	4a10      	ldr	r2, [pc, #64]	; (12664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   12622:	9b01      	ldr	r3, [sp, #4]
   12624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12628:	2b00      	cmp	r3, #0
   1262a:	d10d      	bne.n	12648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1262c:	f7ee f97e 	bl	92c <Adc_schm_read_msr>
   12630:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12632:	9b00      	ldr	r3, [sp, #0]
   12634:	f003 0301 	and.w	r3, r3, #1
   12638:	2b00      	cmp	r3, #0
   1263a:	d100      	bne.n	1263e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1263c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   1263e:	490a      	ldr	r1, [pc, #40]	; (12668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   12640:	9b01      	ldr	r3, [sp, #4]
   12642:	9a00      	ldr	r2, [sp, #0]
   12644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   1264a:	9b01      	ldr	r3, [sp, #4]
   1264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12650:	1c5a      	adds	r2, r3, #1
   12652:	4904      	ldr	r1, [pc, #16]	; (12664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   12654:	9b01      	ldr	r3, [sp, #4]
   12656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1265a:	bf00      	nop
   1265c:	b003      	add	sp, #12
   1265e:	f85d fb04 	ldr.w	pc, [sp], #4
   12662:	bf00      	nop
   12664:	1fff9570 	.word	0x1fff9570
   12668:	1fff956c 	.word	0x1fff956c

0001266c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   1266c:	b500      	push	{lr}
   1266e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12670:	f7ee facc 	bl	c0c <Sys_GetCoreID>
   12674:	4603      	mov	r3, r0
   12676:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   12678:	4a0d      	ldr	r2, [pc, #52]	; (126b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   1267a:	9b01      	ldr	r3, [sp, #4]
   1267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12680:	1e5a      	subs	r2, r3, #1
   12682:	490b      	ldr	r1, [pc, #44]	; (126b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   12684:	9b01      	ldr	r3, [sp, #4]
   12686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   1268a:	4a0a      	ldr	r2, [pc, #40]	; (126b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   1268c:	9b01      	ldr	r3, [sp, #4]
   1268e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12692:	f003 0301 	and.w	r3, r3, #1
   12696:	2b00      	cmp	r3, #0
   12698:	d106      	bne.n	126a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   1269a:	4a05      	ldr	r2, [pc, #20]	; (126b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   1269c:	9b01      	ldr	r3, [sp, #4]
   1269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126a2:	2b00      	cmp	r3, #0
   126a4:	d100      	bne.n	126a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   126a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   126a8:	bf00      	nop
   126aa:	b003      	add	sp, #12
   126ac:	f85d fb04 	ldr.w	pc, [sp], #4
   126b0:	1fff9570 	.word	0x1fff9570
   126b4:	1fff956c 	.word	0x1fff956c

000126b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   126b8:	b500      	push	{lr}
   126ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126bc:	f7ee faa6 	bl	c0c <Sys_GetCoreID>
   126c0:	4603      	mov	r3, r0
   126c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   126c4:	4a10      	ldr	r2, [pc, #64]	; (12708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   126c6:	9b01      	ldr	r3, [sp, #4]
   126c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126cc:	2b00      	cmp	r3, #0
   126ce:	d10d      	bne.n	126ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   126d0:	f7ee f92c 	bl	92c <Adc_schm_read_msr>
   126d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   126d6:	9b00      	ldr	r3, [sp, #0]
   126d8:	f003 0301 	and.w	r3, r3, #1
   126dc:	2b00      	cmp	r3, #0
   126de:	d100      	bne.n	126e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   126e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   126e2:	490a      	ldr	r1, [pc, #40]	; (1270c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   126e4:	9b01      	ldr	r3, [sp, #4]
   126e6:	9a00      	ldr	r2, [sp, #0]
   126e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   126ec:	4a06      	ldr	r2, [pc, #24]	; (12708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   126ee:	9b01      	ldr	r3, [sp, #4]
   126f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126f4:	1c5a      	adds	r2, r3, #1
   126f6:	4904      	ldr	r1, [pc, #16]	; (12708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   126f8:	9b01      	ldr	r3, [sp, #4]
   126fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   126fe:	bf00      	nop
   12700:	b003      	add	sp, #12
   12702:	f85d fb04 	ldr.w	pc, [sp], #4
   12706:	bf00      	nop
   12708:	1fff9578 	.word	0x1fff9578
   1270c:	1fff9574 	.word	0x1fff9574

00012710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   12710:	b500      	push	{lr}
   12712:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12714:	f7ee fa7a 	bl	c0c <Sys_GetCoreID>
   12718:	4603      	mov	r3, r0
   1271a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   1271c:	4a0d      	ldr	r2, [pc, #52]	; (12754 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   1271e:	9b01      	ldr	r3, [sp, #4]
   12720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12724:	1e5a      	subs	r2, r3, #1
   12726:	490b      	ldr	r1, [pc, #44]	; (12754 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   12728:	9b01      	ldr	r3, [sp, #4]
   1272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   1272e:	4a0a      	ldr	r2, [pc, #40]	; (12758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   12730:	9b01      	ldr	r3, [sp, #4]
   12732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12736:	f003 0301 	and.w	r3, r3, #1
   1273a:	2b00      	cmp	r3, #0
   1273c:	d106      	bne.n	1274c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   1273e:	4a05      	ldr	r2, [pc, #20]	; (12754 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   12740:	9b01      	ldr	r3, [sp, #4]
   12742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12746:	2b00      	cmp	r3, #0
   12748:	d100      	bne.n	1274c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1274a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1274c:	bf00      	nop
   1274e:	b003      	add	sp, #12
   12750:	f85d fb04 	ldr.w	pc, [sp], #4
   12754:	1fff9578 	.word	0x1fff9578
   12758:	1fff9574 	.word	0x1fff9574

0001275c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   1275c:	b500      	push	{lr}
   1275e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12760:	f7ee fa54 	bl	c0c <Sys_GetCoreID>
   12764:	4603      	mov	r3, r0
   12766:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   12768:	4a10      	ldr	r2, [pc, #64]	; (127ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   1276a:	9b01      	ldr	r3, [sp, #4]
   1276c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12770:	2b00      	cmp	r3, #0
   12772:	d10d      	bne.n	12790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12774:	f7ee f8da 	bl	92c <Adc_schm_read_msr>
   12778:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1277a:	9b00      	ldr	r3, [sp, #0]
   1277c:	f003 0301 	and.w	r3, r3, #1
   12780:	2b00      	cmp	r3, #0
   12782:	d100      	bne.n	12786 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12784:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   12786:	490a      	ldr	r1, [pc, #40]	; (127b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   12788:	9b01      	ldr	r3, [sp, #4]
   1278a:	9a00      	ldr	r2, [sp, #0]
   1278c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   12790:	4a06      	ldr	r2, [pc, #24]	; (127ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   12792:	9b01      	ldr	r3, [sp, #4]
   12794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12798:	1c5a      	adds	r2, r3, #1
   1279a:	4904      	ldr	r1, [pc, #16]	; (127ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   1279c:	9b01      	ldr	r3, [sp, #4]
   1279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   127a2:	bf00      	nop
   127a4:	b003      	add	sp, #12
   127a6:	f85d fb04 	ldr.w	pc, [sp], #4
   127aa:	bf00      	nop
   127ac:	1fff9580 	.word	0x1fff9580
   127b0:	1fff957c 	.word	0x1fff957c

000127b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   127b4:	b500      	push	{lr}
   127b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127b8:	f7ee fa28 	bl	c0c <Sys_GetCoreID>
   127bc:	4603      	mov	r3, r0
   127be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   127c0:	4a0d      	ldr	r2, [pc, #52]	; (127f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   127c2:	9b01      	ldr	r3, [sp, #4]
   127c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127c8:	1e5a      	subs	r2, r3, #1
   127ca:	490b      	ldr	r1, [pc, #44]	; (127f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   127cc:	9b01      	ldr	r3, [sp, #4]
   127ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   127d2:	4a0a      	ldr	r2, [pc, #40]	; (127fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   127d4:	9b01      	ldr	r3, [sp, #4]
   127d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127da:	f003 0301 	and.w	r3, r3, #1
   127de:	2b00      	cmp	r3, #0
   127e0:	d106      	bne.n	127f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   127e2:	4a05      	ldr	r2, [pc, #20]	; (127f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   127e4:	9b01      	ldr	r3, [sp, #4]
   127e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127ea:	2b00      	cmp	r3, #0
   127ec:	d100      	bne.n	127f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   127ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   127f0:	bf00      	nop
   127f2:	b003      	add	sp, #12
   127f4:	f85d fb04 	ldr.w	pc, [sp], #4
   127f8:	1fff9580 	.word	0x1fff9580
   127fc:	1fff957c 	.word	0x1fff957c

00012800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   12800:	b500      	push	{lr}
   12802:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12804:	f7ee fa02 	bl	c0c <Sys_GetCoreID>
   12808:	4603      	mov	r3, r0
   1280a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   1280c:	4a10      	ldr	r2, [pc, #64]	; (12850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   1280e:	9b01      	ldr	r3, [sp, #4]
   12810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12814:	2b00      	cmp	r3, #0
   12816:	d10d      	bne.n	12834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12818:	f7ee f888 	bl	92c <Adc_schm_read_msr>
   1281c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1281e:	9b00      	ldr	r3, [sp, #0]
   12820:	f003 0301 	and.w	r3, r3, #1
   12824:	2b00      	cmp	r3, #0
   12826:	d100      	bne.n	1282a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12828:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   1282a:	490a      	ldr	r1, [pc, #40]	; (12854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   1282c:	9b01      	ldr	r3, [sp, #4]
   1282e:	9a00      	ldr	r2, [sp, #0]
   12830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   12834:	4a06      	ldr	r2, [pc, #24]	; (12850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   12836:	9b01      	ldr	r3, [sp, #4]
   12838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1283c:	1c5a      	adds	r2, r3, #1
   1283e:	4904      	ldr	r1, [pc, #16]	; (12850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   12840:	9b01      	ldr	r3, [sp, #4]
   12842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12846:	bf00      	nop
   12848:	b003      	add	sp, #12
   1284a:	f85d fb04 	ldr.w	pc, [sp], #4
   1284e:	bf00      	nop
   12850:	1fff9588 	.word	0x1fff9588
   12854:	1fff9584 	.word	0x1fff9584

00012858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   12858:	b500      	push	{lr}
   1285a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1285c:	f7ee f9d6 	bl	c0c <Sys_GetCoreID>
   12860:	4603      	mov	r3, r0
   12862:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   12864:	4a0d      	ldr	r2, [pc, #52]	; (1289c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   12866:	9b01      	ldr	r3, [sp, #4]
   12868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1286c:	1e5a      	subs	r2, r3, #1
   1286e:	490b      	ldr	r1, [pc, #44]	; (1289c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   12870:	9b01      	ldr	r3, [sp, #4]
   12872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   12876:	4a0a      	ldr	r2, [pc, #40]	; (128a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   12878:	9b01      	ldr	r3, [sp, #4]
   1287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1287e:	f003 0301 	and.w	r3, r3, #1
   12882:	2b00      	cmp	r3, #0
   12884:	d106      	bne.n	12894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   12886:	4a05      	ldr	r2, [pc, #20]	; (1289c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   12888:	9b01      	ldr	r3, [sp, #4]
   1288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1288e:	2b00      	cmp	r3, #0
   12890:	d100      	bne.n	12894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12892:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12894:	bf00      	nop
   12896:	b003      	add	sp, #12
   12898:	f85d fb04 	ldr.w	pc, [sp], #4
   1289c:	1fff9588 	.word	0x1fff9588
   128a0:	1fff9584 	.word	0x1fff9584

000128a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   128a4:	b500      	push	{lr}
   128a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128a8:	f7ee f9b0 	bl	c0c <Sys_GetCoreID>
   128ac:	4603      	mov	r3, r0
   128ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   128b0:	4a10      	ldr	r2, [pc, #64]	; (128f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   128b2:	9b01      	ldr	r3, [sp, #4]
   128b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128b8:	2b00      	cmp	r3, #0
   128ba:	d10d      	bne.n	128d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   128bc:	f7ee f836 	bl	92c <Adc_schm_read_msr>
   128c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   128c2:	9b00      	ldr	r3, [sp, #0]
   128c4:	f003 0301 	and.w	r3, r3, #1
   128c8:	2b00      	cmp	r3, #0
   128ca:	d100      	bne.n	128ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   128cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   128ce:	490a      	ldr	r1, [pc, #40]	; (128f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   128d0:	9b01      	ldr	r3, [sp, #4]
   128d2:	9a00      	ldr	r2, [sp, #0]
   128d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   128d8:	4a06      	ldr	r2, [pc, #24]	; (128f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   128da:	9b01      	ldr	r3, [sp, #4]
   128dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128e0:	1c5a      	adds	r2, r3, #1
   128e2:	4904      	ldr	r1, [pc, #16]	; (128f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   128e4:	9b01      	ldr	r3, [sp, #4]
   128e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   128ea:	bf00      	nop
   128ec:	b003      	add	sp, #12
   128ee:	f85d fb04 	ldr.w	pc, [sp], #4
   128f2:	bf00      	nop
   128f4:	1fff9590 	.word	0x1fff9590
   128f8:	1fff958c 	.word	0x1fff958c

000128fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   128fc:	b500      	push	{lr}
   128fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12900:	f7ee f984 	bl	c0c <Sys_GetCoreID>
   12904:	4603      	mov	r3, r0
   12906:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   12908:	4a0d      	ldr	r2, [pc, #52]	; (12940 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   1290a:	9b01      	ldr	r3, [sp, #4]
   1290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12910:	1e5a      	subs	r2, r3, #1
   12912:	490b      	ldr	r1, [pc, #44]	; (12940 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   12914:	9b01      	ldr	r3, [sp, #4]
   12916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   1291a:	4a0a      	ldr	r2, [pc, #40]	; (12944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   1291c:	9b01      	ldr	r3, [sp, #4]
   1291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12922:	f003 0301 	and.w	r3, r3, #1
   12926:	2b00      	cmp	r3, #0
   12928:	d106      	bne.n	12938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   1292a:	4a05      	ldr	r2, [pc, #20]	; (12940 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   1292c:	9b01      	ldr	r3, [sp, #4]
   1292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12932:	2b00      	cmp	r3, #0
   12934:	d100      	bne.n	12938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12936:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12938:	bf00      	nop
   1293a:	b003      	add	sp, #12
   1293c:	f85d fb04 	ldr.w	pc, [sp], #4
   12940:	1fff9590 	.word	0x1fff9590
   12944:	1fff958c 	.word	0x1fff958c

00012948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   12948:	b500      	push	{lr}
   1294a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1294c:	f7ee f95e 	bl	c0c <Sys_GetCoreID>
   12950:	4603      	mov	r3, r0
   12952:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   12954:	4a10      	ldr	r2, [pc, #64]	; (12998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   12956:	9b01      	ldr	r3, [sp, #4]
   12958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1295c:	2b00      	cmp	r3, #0
   1295e:	d10d      	bne.n	1297c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12960:	f7ed ffe4 	bl	92c <Adc_schm_read_msr>
   12964:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12966:	9b00      	ldr	r3, [sp, #0]
   12968:	f003 0301 	and.w	r3, r3, #1
   1296c:	2b00      	cmp	r3, #0
   1296e:	d100      	bne.n	12972 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12970:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   12972:	490a      	ldr	r1, [pc, #40]	; (1299c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   12974:	9b01      	ldr	r3, [sp, #4]
   12976:	9a00      	ldr	r2, [sp, #0]
   12978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   1297c:	4a06      	ldr	r2, [pc, #24]	; (12998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   1297e:	9b01      	ldr	r3, [sp, #4]
   12980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12984:	1c5a      	adds	r2, r3, #1
   12986:	4904      	ldr	r1, [pc, #16]	; (12998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   12988:	9b01      	ldr	r3, [sp, #4]
   1298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1298e:	bf00      	nop
   12990:	b003      	add	sp, #12
   12992:	f85d fb04 	ldr.w	pc, [sp], #4
   12996:	bf00      	nop
   12998:	1fff9598 	.word	0x1fff9598
   1299c:	1fff9594 	.word	0x1fff9594

000129a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   129a0:	b500      	push	{lr}
   129a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129a4:	f7ee f932 	bl	c0c <Sys_GetCoreID>
   129a8:	4603      	mov	r3, r0
   129aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   129ac:	4a0d      	ldr	r2, [pc, #52]	; (129e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   129ae:	9b01      	ldr	r3, [sp, #4]
   129b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129b4:	1e5a      	subs	r2, r3, #1
   129b6:	490b      	ldr	r1, [pc, #44]	; (129e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   129b8:	9b01      	ldr	r3, [sp, #4]
   129ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   129be:	4a0a      	ldr	r2, [pc, #40]	; (129e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   129c0:	9b01      	ldr	r3, [sp, #4]
   129c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129c6:	f003 0301 	and.w	r3, r3, #1
   129ca:	2b00      	cmp	r3, #0
   129cc:	d106      	bne.n	129dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   129ce:	4a05      	ldr	r2, [pc, #20]	; (129e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   129d0:	9b01      	ldr	r3, [sp, #4]
   129d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129d6:	2b00      	cmp	r3, #0
   129d8:	d100      	bne.n	129dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   129da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   129dc:	bf00      	nop
   129de:	b003      	add	sp, #12
   129e0:	f85d fb04 	ldr.w	pc, [sp], #4
   129e4:	1fff9598 	.word	0x1fff9598
   129e8:	1fff9594 	.word	0x1fff9594

000129ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   129ec:	b500      	push	{lr}
   129ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129f0:	f7ee f90c 	bl	c0c <Sys_GetCoreID>
   129f4:	4603      	mov	r3, r0
   129f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   129f8:	4a10      	ldr	r2, [pc, #64]	; (12a3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   129fa:	9b01      	ldr	r3, [sp, #4]
   129fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a00:	2b00      	cmp	r3, #0
   12a02:	d10d      	bne.n	12a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a04:	f7ed ff92 	bl	92c <Adc_schm_read_msr>
   12a08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a0a:	9b00      	ldr	r3, [sp, #0]
   12a0c:	f003 0301 	and.w	r3, r3, #1
   12a10:	2b00      	cmp	r3, #0
   12a12:	d100      	bne.n	12a16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   12a16:	490a      	ldr	r1, [pc, #40]	; (12a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   12a18:	9b01      	ldr	r3, [sp, #4]
   12a1a:	9a00      	ldr	r2, [sp, #0]
   12a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   12a20:	4a06      	ldr	r2, [pc, #24]	; (12a3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12a22:	9b01      	ldr	r3, [sp, #4]
   12a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a28:	1c5a      	adds	r2, r3, #1
   12a2a:	4904      	ldr	r1, [pc, #16]	; (12a3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12a2c:	9b01      	ldr	r3, [sp, #4]
   12a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a32:	bf00      	nop
   12a34:	b003      	add	sp, #12
   12a36:	f85d fb04 	ldr.w	pc, [sp], #4
   12a3a:	bf00      	nop
   12a3c:	1fff95a0 	.word	0x1fff95a0
   12a40:	1fff959c 	.word	0x1fff959c

00012a44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   12a44:	b500      	push	{lr}
   12a46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a48:	f7ee f8e0 	bl	c0c <Sys_GetCoreID>
   12a4c:	4603      	mov	r3, r0
   12a4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   12a50:	4a0d      	ldr	r2, [pc, #52]	; (12a88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12a52:	9b01      	ldr	r3, [sp, #4]
   12a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a58:	1e5a      	subs	r2, r3, #1
   12a5a:	490b      	ldr	r1, [pc, #44]	; (12a88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12a5c:	9b01      	ldr	r3, [sp, #4]
   12a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   12a62:	4a0a      	ldr	r2, [pc, #40]	; (12a8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   12a64:	9b01      	ldr	r3, [sp, #4]
   12a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a6a:	f003 0301 	and.w	r3, r3, #1
   12a6e:	2b00      	cmp	r3, #0
   12a70:	d106      	bne.n	12a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   12a72:	4a05      	ldr	r2, [pc, #20]	; (12a88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12a74:	9b01      	ldr	r3, [sp, #4]
   12a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a7a:	2b00      	cmp	r3, #0
   12a7c:	d100      	bne.n	12a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a80:	bf00      	nop
   12a82:	b003      	add	sp, #12
   12a84:	f85d fb04 	ldr.w	pc, [sp], #4
   12a88:	1fff95a0 	.word	0x1fff95a0
   12a8c:	1fff959c 	.word	0x1fff959c

00012a90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12a90:	b500      	push	{lr}
   12a92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a94:	f7ee f8ba 	bl	c0c <Sys_GetCoreID>
   12a98:	4603      	mov	r3, r0
   12a9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   12a9c:	4a10      	ldr	r2, [pc, #64]	; (12ae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12a9e:	9b01      	ldr	r3, [sp, #4]
   12aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aa4:	2b00      	cmp	r3, #0
   12aa6:	d10d      	bne.n	12ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12aa8:	f7ed ff40 	bl	92c <Adc_schm_read_msr>
   12aac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12aae:	9b00      	ldr	r3, [sp, #0]
   12ab0:	f003 0301 	and.w	r3, r3, #1
   12ab4:	2b00      	cmp	r3, #0
   12ab6:	d100      	bne.n	12aba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ab8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   12aba:	490a      	ldr	r1, [pc, #40]	; (12ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   12abc:	9b01      	ldr	r3, [sp, #4]
   12abe:	9a00      	ldr	r2, [sp, #0]
   12ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   12ac4:	4a06      	ldr	r2, [pc, #24]	; (12ae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12ac6:	9b01      	ldr	r3, [sp, #4]
   12ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12acc:	1c5a      	adds	r2, r3, #1
   12ace:	4904      	ldr	r1, [pc, #16]	; (12ae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12ad0:	9b01      	ldr	r3, [sp, #4]
   12ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ad6:	bf00      	nop
   12ad8:	b003      	add	sp, #12
   12ada:	f85d fb04 	ldr.w	pc, [sp], #4
   12ade:	bf00      	nop
   12ae0:	1fff95a8 	.word	0x1fff95a8
   12ae4:	1fff95a4 	.word	0x1fff95a4

00012ae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12ae8:	b500      	push	{lr}
   12aea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12aec:	f7ee f88e 	bl	c0c <Sys_GetCoreID>
   12af0:	4603      	mov	r3, r0
   12af2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   12af4:	4a0d      	ldr	r2, [pc, #52]	; (12b2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12af6:	9b01      	ldr	r3, [sp, #4]
   12af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12afc:	1e5a      	subs	r2, r3, #1
   12afe:	490b      	ldr	r1, [pc, #44]	; (12b2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12b00:	9b01      	ldr	r3, [sp, #4]
   12b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   12b06:	4a0a      	ldr	r2, [pc, #40]	; (12b30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   12b08:	9b01      	ldr	r3, [sp, #4]
   12b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b0e:	f003 0301 	and.w	r3, r3, #1
   12b12:	2b00      	cmp	r3, #0
   12b14:	d106      	bne.n	12b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   12b16:	4a05      	ldr	r2, [pc, #20]	; (12b2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12b18:	9b01      	ldr	r3, [sp, #4]
   12b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b1e:	2b00      	cmp	r3, #0
   12b20:	d100      	bne.n	12b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b24:	bf00      	nop
   12b26:	b003      	add	sp, #12
   12b28:	f85d fb04 	ldr.w	pc, [sp], #4
   12b2c:	1fff95a8 	.word	0x1fff95a8
   12b30:	1fff95a4 	.word	0x1fff95a4

00012b34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12b34:	b500      	push	{lr}
   12b36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b38:	f7ee f868 	bl	c0c <Sys_GetCoreID>
   12b3c:	4603      	mov	r3, r0
   12b3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   12b40:	4a10      	ldr	r2, [pc, #64]	; (12b84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12b42:	9b01      	ldr	r3, [sp, #4]
   12b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b48:	2b00      	cmp	r3, #0
   12b4a:	d10d      	bne.n	12b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b4c:	f7ed feee 	bl	92c <Adc_schm_read_msr>
   12b50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b52:	9b00      	ldr	r3, [sp, #0]
   12b54:	f003 0301 	and.w	r3, r3, #1
   12b58:	2b00      	cmp	r3, #0
   12b5a:	d100      	bne.n	12b5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   12b5e:	490a      	ldr	r1, [pc, #40]	; (12b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   12b60:	9b01      	ldr	r3, [sp, #4]
   12b62:	9a00      	ldr	r2, [sp, #0]
   12b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   12b68:	4a06      	ldr	r2, [pc, #24]	; (12b84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12b6a:	9b01      	ldr	r3, [sp, #4]
   12b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b70:	1c5a      	adds	r2, r3, #1
   12b72:	4904      	ldr	r1, [pc, #16]	; (12b84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12b74:	9b01      	ldr	r3, [sp, #4]
   12b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b7a:	bf00      	nop
   12b7c:	b003      	add	sp, #12
   12b7e:	f85d fb04 	ldr.w	pc, [sp], #4
   12b82:	bf00      	nop
   12b84:	1fff95b0 	.word	0x1fff95b0
   12b88:	1fff95ac 	.word	0x1fff95ac

00012b8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12b8c:	b500      	push	{lr}
   12b8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b90:	f7ee f83c 	bl	c0c <Sys_GetCoreID>
   12b94:	4603      	mov	r3, r0
   12b96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   12b98:	4a0d      	ldr	r2, [pc, #52]	; (12bd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12b9a:	9b01      	ldr	r3, [sp, #4]
   12b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ba0:	1e5a      	subs	r2, r3, #1
   12ba2:	490b      	ldr	r1, [pc, #44]	; (12bd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12ba4:	9b01      	ldr	r3, [sp, #4]
   12ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   12baa:	4a0a      	ldr	r2, [pc, #40]	; (12bd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   12bac:	9b01      	ldr	r3, [sp, #4]
   12bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bb2:	f003 0301 	and.w	r3, r3, #1
   12bb6:	2b00      	cmp	r3, #0
   12bb8:	d106      	bne.n	12bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   12bba:	4a05      	ldr	r2, [pc, #20]	; (12bd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12bbc:	9b01      	ldr	r3, [sp, #4]
   12bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bc2:	2b00      	cmp	r3, #0
   12bc4:	d100      	bne.n	12bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12bc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12bc8:	bf00      	nop
   12bca:	b003      	add	sp, #12
   12bcc:	f85d fb04 	ldr.w	pc, [sp], #4
   12bd0:	1fff95b0 	.word	0x1fff95b0
   12bd4:	1fff95ac 	.word	0x1fff95ac

00012bd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12bd8:	b500      	push	{lr}
   12bda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bdc:	f7ee f816 	bl	c0c <Sys_GetCoreID>
   12be0:	4603      	mov	r3, r0
   12be2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   12be4:	4a10      	ldr	r2, [pc, #64]	; (12c28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12be6:	9b01      	ldr	r3, [sp, #4]
   12be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bec:	2b00      	cmp	r3, #0
   12bee:	d10d      	bne.n	12c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12bf0:	f7ed fe9c 	bl	92c <Adc_schm_read_msr>
   12bf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12bf6:	9b00      	ldr	r3, [sp, #0]
   12bf8:	f003 0301 	and.w	r3, r3, #1
   12bfc:	2b00      	cmp	r3, #0
   12bfe:	d100      	bne.n	12c02 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   12c02:	490a      	ldr	r1, [pc, #40]	; (12c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   12c04:	9b01      	ldr	r3, [sp, #4]
   12c06:	9a00      	ldr	r2, [sp, #0]
   12c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   12c0c:	4a06      	ldr	r2, [pc, #24]	; (12c28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12c0e:	9b01      	ldr	r3, [sp, #4]
   12c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c14:	1c5a      	adds	r2, r3, #1
   12c16:	4904      	ldr	r1, [pc, #16]	; (12c28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12c18:	9b01      	ldr	r3, [sp, #4]
   12c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c1e:	bf00      	nop
   12c20:	b003      	add	sp, #12
   12c22:	f85d fb04 	ldr.w	pc, [sp], #4
   12c26:	bf00      	nop
   12c28:	1fff95b8 	.word	0x1fff95b8
   12c2c:	1fff95b4 	.word	0x1fff95b4

00012c30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12c30:	b500      	push	{lr}
   12c32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c34:	f7ed ffea 	bl	c0c <Sys_GetCoreID>
   12c38:	4603      	mov	r3, r0
   12c3a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   12c3c:	4a0d      	ldr	r2, [pc, #52]	; (12c74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12c3e:	9b01      	ldr	r3, [sp, #4]
   12c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c44:	1e5a      	subs	r2, r3, #1
   12c46:	490b      	ldr	r1, [pc, #44]	; (12c74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12c48:	9b01      	ldr	r3, [sp, #4]
   12c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   12c4e:	4a0a      	ldr	r2, [pc, #40]	; (12c78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   12c50:	9b01      	ldr	r3, [sp, #4]
   12c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c56:	f003 0301 	and.w	r3, r3, #1
   12c5a:	2b00      	cmp	r3, #0
   12c5c:	d106      	bne.n	12c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   12c5e:	4a05      	ldr	r2, [pc, #20]	; (12c74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12c60:	9b01      	ldr	r3, [sp, #4]
   12c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c66:	2b00      	cmp	r3, #0
   12c68:	d100      	bne.n	12c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c6c:	bf00      	nop
   12c6e:	b003      	add	sp, #12
   12c70:	f85d fb04 	ldr.w	pc, [sp], #4
   12c74:	1fff95b8 	.word	0x1fff95b8
   12c78:	1fff95b4 	.word	0x1fff95b4

00012c7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12c7c:	b500      	push	{lr}
   12c7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c80:	f7ed ffc4 	bl	c0c <Sys_GetCoreID>
   12c84:	4603      	mov	r3, r0
   12c86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   12c88:	4a10      	ldr	r2, [pc, #64]	; (12ccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12c8a:	9b01      	ldr	r3, [sp, #4]
   12c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c90:	2b00      	cmp	r3, #0
   12c92:	d10d      	bne.n	12cb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c94:	f7ed fe4a 	bl	92c <Adc_schm_read_msr>
   12c98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c9a:	9b00      	ldr	r3, [sp, #0]
   12c9c:	f003 0301 	and.w	r3, r3, #1
   12ca0:	2b00      	cmp	r3, #0
   12ca2:	d100      	bne.n	12ca6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ca4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   12ca6:	490a      	ldr	r1, [pc, #40]	; (12cd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   12ca8:	9b01      	ldr	r3, [sp, #4]
   12caa:	9a00      	ldr	r2, [sp, #0]
   12cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   12cb0:	4a06      	ldr	r2, [pc, #24]	; (12ccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12cb2:	9b01      	ldr	r3, [sp, #4]
   12cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cb8:	1c5a      	adds	r2, r3, #1
   12cba:	4904      	ldr	r1, [pc, #16]	; (12ccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12cbc:	9b01      	ldr	r3, [sp, #4]
   12cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12cc2:	bf00      	nop
   12cc4:	b003      	add	sp, #12
   12cc6:	f85d fb04 	ldr.w	pc, [sp], #4
   12cca:	bf00      	nop
   12ccc:	1fff95c0 	.word	0x1fff95c0
   12cd0:	1fff95bc 	.word	0x1fff95bc

00012cd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12cd4:	b500      	push	{lr}
   12cd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12cd8:	f7ed ff98 	bl	c0c <Sys_GetCoreID>
   12cdc:	4603      	mov	r3, r0
   12cde:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   12ce0:	4a0d      	ldr	r2, [pc, #52]	; (12d18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12ce2:	9b01      	ldr	r3, [sp, #4]
   12ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ce8:	1e5a      	subs	r2, r3, #1
   12cea:	490b      	ldr	r1, [pc, #44]	; (12d18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12cec:	9b01      	ldr	r3, [sp, #4]
   12cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   12cf2:	4a0a      	ldr	r2, [pc, #40]	; (12d1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   12cf4:	9b01      	ldr	r3, [sp, #4]
   12cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cfa:	f003 0301 	and.w	r3, r3, #1
   12cfe:	2b00      	cmp	r3, #0
   12d00:	d106      	bne.n	12d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   12d02:	4a05      	ldr	r2, [pc, #20]	; (12d18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12d04:	9b01      	ldr	r3, [sp, #4]
   12d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d100      	bne.n	12d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d10:	bf00      	nop
   12d12:	b003      	add	sp, #12
   12d14:	f85d fb04 	ldr.w	pc, [sp], #4
   12d18:	1fff95c0 	.word	0x1fff95c0
   12d1c:	1fff95bc 	.word	0x1fff95bc

00012d20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12d20:	b500      	push	{lr}
   12d22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d24:	f7ed ff72 	bl	c0c <Sys_GetCoreID>
   12d28:	4603      	mov	r3, r0
   12d2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   12d2c:	4a10      	ldr	r2, [pc, #64]	; (12d70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12d2e:	9b01      	ldr	r3, [sp, #4]
   12d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d34:	2b00      	cmp	r3, #0
   12d36:	d10d      	bne.n	12d54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d38:	f7ed fdf8 	bl	92c <Adc_schm_read_msr>
   12d3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d3e:	9b00      	ldr	r3, [sp, #0]
   12d40:	f003 0301 	and.w	r3, r3, #1
   12d44:	2b00      	cmp	r3, #0
   12d46:	d100      	bne.n	12d4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   12d4a:	490a      	ldr	r1, [pc, #40]	; (12d74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   12d4c:	9b01      	ldr	r3, [sp, #4]
   12d4e:	9a00      	ldr	r2, [sp, #0]
   12d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   12d54:	4a06      	ldr	r2, [pc, #24]	; (12d70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12d56:	9b01      	ldr	r3, [sp, #4]
   12d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d5c:	1c5a      	adds	r2, r3, #1
   12d5e:	4904      	ldr	r1, [pc, #16]	; (12d70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12d60:	9b01      	ldr	r3, [sp, #4]
   12d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d66:	bf00      	nop
   12d68:	b003      	add	sp, #12
   12d6a:	f85d fb04 	ldr.w	pc, [sp], #4
   12d6e:	bf00      	nop
   12d70:	1fff95c8 	.word	0x1fff95c8
   12d74:	1fff95c4 	.word	0x1fff95c4

00012d78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12d78:	b500      	push	{lr}
   12d7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d7c:	f7ed ff46 	bl	c0c <Sys_GetCoreID>
   12d80:	4603      	mov	r3, r0
   12d82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   12d84:	4a0d      	ldr	r2, [pc, #52]	; (12dbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12d86:	9b01      	ldr	r3, [sp, #4]
   12d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d8c:	1e5a      	subs	r2, r3, #1
   12d8e:	490b      	ldr	r1, [pc, #44]	; (12dbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12d90:	9b01      	ldr	r3, [sp, #4]
   12d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   12d96:	4a0a      	ldr	r2, [pc, #40]	; (12dc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   12d98:	9b01      	ldr	r3, [sp, #4]
   12d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d9e:	f003 0301 	and.w	r3, r3, #1
   12da2:	2b00      	cmp	r3, #0
   12da4:	d106      	bne.n	12db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   12da6:	4a05      	ldr	r2, [pc, #20]	; (12dbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12da8:	9b01      	ldr	r3, [sp, #4]
   12daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dae:	2b00      	cmp	r3, #0
   12db0:	d100      	bne.n	12db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12db2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12db4:	bf00      	nop
   12db6:	b003      	add	sp, #12
   12db8:	f85d fb04 	ldr.w	pc, [sp], #4
   12dbc:	1fff95c8 	.word	0x1fff95c8
   12dc0:	1fff95c4 	.word	0x1fff95c4

00012dc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12dc4:	b500      	push	{lr}
   12dc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12dc8:	f7ed ff20 	bl	c0c <Sys_GetCoreID>
   12dcc:	4603      	mov	r3, r0
   12dce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   12dd0:	4a10      	ldr	r2, [pc, #64]	; (12e14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12dd2:	9b01      	ldr	r3, [sp, #4]
   12dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dd8:	2b00      	cmp	r3, #0
   12dda:	d10d      	bne.n	12df8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ddc:	f7ed fda6 	bl	92c <Adc_schm_read_msr>
   12de0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12de2:	9b00      	ldr	r3, [sp, #0]
   12de4:	f003 0301 	and.w	r3, r3, #1
   12de8:	2b00      	cmp	r3, #0
   12dea:	d100      	bne.n	12dee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12dec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   12dee:	490a      	ldr	r1, [pc, #40]	; (12e18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   12df0:	9b01      	ldr	r3, [sp, #4]
   12df2:	9a00      	ldr	r2, [sp, #0]
   12df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   12df8:	4a06      	ldr	r2, [pc, #24]	; (12e14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12dfa:	9b01      	ldr	r3, [sp, #4]
   12dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e00:	1c5a      	adds	r2, r3, #1
   12e02:	4904      	ldr	r1, [pc, #16]	; (12e14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12e04:	9b01      	ldr	r3, [sp, #4]
   12e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e0a:	bf00      	nop
   12e0c:	b003      	add	sp, #12
   12e0e:	f85d fb04 	ldr.w	pc, [sp], #4
   12e12:	bf00      	nop
   12e14:	1fff95d0 	.word	0x1fff95d0
   12e18:	1fff95cc 	.word	0x1fff95cc

00012e1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12e1c:	b500      	push	{lr}
   12e1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e20:	f7ed fef4 	bl	c0c <Sys_GetCoreID>
   12e24:	4603      	mov	r3, r0
   12e26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   12e28:	4a0d      	ldr	r2, [pc, #52]	; (12e60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12e2a:	9b01      	ldr	r3, [sp, #4]
   12e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e30:	1e5a      	subs	r2, r3, #1
   12e32:	490b      	ldr	r1, [pc, #44]	; (12e60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12e34:	9b01      	ldr	r3, [sp, #4]
   12e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   12e3a:	4a0a      	ldr	r2, [pc, #40]	; (12e64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   12e3c:	9b01      	ldr	r3, [sp, #4]
   12e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e42:	f003 0301 	and.w	r3, r3, #1
   12e46:	2b00      	cmp	r3, #0
   12e48:	d106      	bne.n	12e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   12e4a:	4a05      	ldr	r2, [pc, #20]	; (12e60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12e4c:	9b01      	ldr	r3, [sp, #4]
   12e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e52:	2b00      	cmp	r3, #0
   12e54:	d100      	bne.n	12e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e58:	bf00      	nop
   12e5a:	b003      	add	sp, #12
   12e5c:	f85d fb04 	ldr.w	pc, [sp], #4
   12e60:	1fff95d0 	.word	0x1fff95d0
   12e64:	1fff95cc 	.word	0x1fff95cc

00012e68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12e68:	b500      	push	{lr}
   12e6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e6c:	f7ed fece 	bl	c0c <Sys_GetCoreID>
   12e70:	4603      	mov	r3, r0
   12e72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   12e74:	4a10      	ldr	r2, [pc, #64]	; (12eb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12e76:	9b01      	ldr	r3, [sp, #4]
   12e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e7c:	2b00      	cmp	r3, #0
   12e7e:	d10d      	bne.n	12e9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e80:	f7ed fd54 	bl	92c <Adc_schm_read_msr>
   12e84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e86:	9b00      	ldr	r3, [sp, #0]
   12e88:	f003 0301 	and.w	r3, r3, #1
   12e8c:	2b00      	cmp	r3, #0
   12e8e:	d100      	bne.n	12e92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   12e92:	490a      	ldr	r1, [pc, #40]	; (12ebc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   12e94:	9b01      	ldr	r3, [sp, #4]
   12e96:	9a00      	ldr	r2, [sp, #0]
   12e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   12e9c:	4a06      	ldr	r2, [pc, #24]	; (12eb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12e9e:	9b01      	ldr	r3, [sp, #4]
   12ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ea4:	1c5a      	adds	r2, r3, #1
   12ea6:	4904      	ldr	r1, [pc, #16]	; (12eb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12ea8:	9b01      	ldr	r3, [sp, #4]
   12eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12eae:	bf00      	nop
   12eb0:	b003      	add	sp, #12
   12eb2:	f85d fb04 	ldr.w	pc, [sp], #4
   12eb6:	bf00      	nop
   12eb8:	1fff95d8 	.word	0x1fff95d8
   12ebc:	1fff95d4 	.word	0x1fff95d4

00012ec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12ec0:	b500      	push	{lr}
   12ec2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ec4:	f7ed fea2 	bl	c0c <Sys_GetCoreID>
   12ec8:	4603      	mov	r3, r0
   12eca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   12ecc:	4a0d      	ldr	r2, [pc, #52]	; (12f04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12ece:	9b01      	ldr	r3, [sp, #4]
   12ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ed4:	1e5a      	subs	r2, r3, #1
   12ed6:	490b      	ldr	r1, [pc, #44]	; (12f04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12ed8:	9b01      	ldr	r3, [sp, #4]
   12eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   12ede:	4a0a      	ldr	r2, [pc, #40]	; (12f08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   12ee0:	9b01      	ldr	r3, [sp, #4]
   12ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ee6:	f003 0301 	and.w	r3, r3, #1
   12eea:	2b00      	cmp	r3, #0
   12eec:	d106      	bne.n	12efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   12eee:	4a05      	ldr	r2, [pc, #20]	; (12f04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12ef0:	9b01      	ldr	r3, [sp, #4]
   12ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ef6:	2b00      	cmp	r3, #0
   12ef8:	d100      	bne.n	12efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12efa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12efc:	bf00      	nop
   12efe:	b003      	add	sp, #12
   12f00:	f85d fb04 	ldr.w	pc, [sp], #4
   12f04:	1fff95d8 	.word	0x1fff95d8
   12f08:	1fff95d4 	.word	0x1fff95d4

00012f0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12f0c:	b500      	push	{lr}
   12f0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f10:	f7ed fe7c 	bl	c0c <Sys_GetCoreID>
   12f14:	4603      	mov	r3, r0
   12f16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   12f18:	4a10      	ldr	r2, [pc, #64]	; (12f5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12f1a:	9b01      	ldr	r3, [sp, #4]
   12f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f20:	2b00      	cmp	r3, #0
   12f22:	d10d      	bne.n	12f40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f24:	f7ed fd02 	bl	92c <Adc_schm_read_msr>
   12f28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f2a:	9b00      	ldr	r3, [sp, #0]
   12f2c:	f003 0301 	and.w	r3, r3, #1
   12f30:	2b00      	cmp	r3, #0
   12f32:	d100      	bne.n	12f36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   12f36:	490a      	ldr	r1, [pc, #40]	; (12f60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   12f38:	9b01      	ldr	r3, [sp, #4]
   12f3a:	9a00      	ldr	r2, [sp, #0]
   12f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   12f40:	4a06      	ldr	r2, [pc, #24]	; (12f5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12f42:	9b01      	ldr	r3, [sp, #4]
   12f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f48:	1c5a      	adds	r2, r3, #1
   12f4a:	4904      	ldr	r1, [pc, #16]	; (12f5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12f4c:	9b01      	ldr	r3, [sp, #4]
   12f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f52:	bf00      	nop
   12f54:	b003      	add	sp, #12
   12f56:	f85d fb04 	ldr.w	pc, [sp], #4
   12f5a:	bf00      	nop
   12f5c:	1fff95e0 	.word	0x1fff95e0
   12f60:	1fff95dc 	.word	0x1fff95dc

00012f64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12f64:	b500      	push	{lr}
   12f66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f68:	f7ed fe50 	bl	c0c <Sys_GetCoreID>
   12f6c:	4603      	mov	r3, r0
   12f6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   12f70:	4a0d      	ldr	r2, [pc, #52]	; (12fa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12f72:	9b01      	ldr	r3, [sp, #4]
   12f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f78:	1e5a      	subs	r2, r3, #1
   12f7a:	490b      	ldr	r1, [pc, #44]	; (12fa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12f7c:	9b01      	ldr	r3, [sp, #4]
   12f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   12f82:	4a0a      	ldr	r2, [pc, #40]	; (12fac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   12f84:	9b01      	ldr	r3, [sp, #4]
   12f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f8a:	f003 0301 	and.w	r3, r3, #1
   12f8e:	2b00      	cmp	r3, #0
   12f90:	d106      	bne.n	12fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   12f92:	4a05      	ldr	r2, [pc, #20]	; (12fa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12f94:	9b01      	ldr	r3, [sp, #4]
   12f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f9a:	2b00      	cmp	r3, #0
   12f9c:	d100      	bne.n	12fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12fa0:	bf00      	nop
   12fa2:	b003      	add	sp, #12
   12fa4:	f85d fb04 	ldr.w	pc, [sp], #4
   12fa8:	1fff95e0 	.word	0x1fff95e0
   12fac:	1fff95dc 	.word	0x1fff95dc

00012fb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   12fb0:	b500      	push	{lr}
   12fb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fb4:	f7ed fe2a 	bl	c0c <Sys_GetCoreID>
   12fb8:	4603      	mov	r3, r0
   12fba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   12fbc:	4a10      	ldr	r2, [pc, #64]	; (13000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   12fbe:	9b01      	ldr	r3, [sp, #4]
   12fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fc4:	2b00      	cmp	r3, #0
   12fc6:	d10d      	bne.n	12fe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12fc8:	f7ed fcb0 	bl	92c <Adc_schm_read_msr>
   12fcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12fce:	9b00      	ldr	r3, [sp, #0]
   12fd0:	f003 0301 	and.w	r3, r3, #1
   12fd4:	2b00      	cmp	r3, #0
   12fd6:	d100      	bne.n	12fda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12fd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   12fda:	490a      	ldr	r1, [pc, #40]	; (13004 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   12fdc:	9b01      	ldr	r3, [sp, #4]
   12fde:	9a00      	ldr	r2, [sp, #0]
   12fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   12fe4:	4a06      	ldr	r2, [pc, #24]	; (13000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   12fe6:	9b01      	ldr	r3, [sp, #4]
   12fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fec:	1c5a      	adds	r2, r3, #1
   12fee:	4904      	ldr	r1, [pc, #16]	; (13000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   12ff0:	9b01      	ldr	r3, [sp, #4]
   12ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ff6:	bf00      	nop
   12ff8:	b003      	add	sp, #12
   12ffa:	f85d fb04 	ldr.w	pc, [sp], #4
   12ffe:	bf00      	nop
   13000:	1fff95e8 	.word	0x1fff95e8
   13004:	1fff95e4 	.word	0x1fff95e4

00013008 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   13008:	b500      	push	{lr}
   1300a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1300c:	f7ed fdfe 	bl	c0c <Sys_GetCoreID>
   13010:	4603      	mov	r3, r0
   13012:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   13014:	4a0d      	ldr	r2, [pc, #52]	; (1304c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   13016:	9b01      	ldr	r3, [sp, #4]
   13018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1301c:	1e5a      	subs	r2, r3, #1
   1301e:	490b      	ldr	r1, [pc, #44]	; (1304c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   13020:	9b01      	ldr	r3, [sp, #4]
   13022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   13026:	4a0a      	ldr	r2, [pc, #40]	; (13050 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   13028:	9b01      	ldr	r3, [sp, #4]
   1302a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1302e:	f003 0301 	and.w	r3, r3, #1
   13032:	2b00      	cmp	r3, #0
   13034:	d106      	bne.n	13044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   13036:	4a05      	ldr	r2, [pc, #20]	; (1304c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   13038:	9b01      	ldr	r3, [sp, #4]
   1303a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1303e:	2b00      	cmp	r3, #0
   13040:	d100      	bne.n	13044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13042:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13044:	bf00      	nop
   13046:	b003      	add	sp, #12
   13048:	f85d fb04 	ldr.w	pc, [sp], #4
   1304c:	1fff95e8 	.word	0x1fff95e8
   13050:	1fff95e4 	.word	0x1fff95e4

00013054 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   13054:	b500      	push	{lr}
   13056:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13058:	f7ed fdd8 	bl	c0c <Sys_GetCoreID>
   1305c:	4603      	mov	r3, r0
   1305e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   13060:	4a10      	ldr	r2, [pc, #64]	; (130a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   13062:	9b01      	ldr	r3, [sp, #4]
   13064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13068:	2b00      	cmp	r3, #0
   1306a:	d10d      	bne.n	13088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1306c:	f7ed fc5e 	bl	92c <Adc_schm_read_msr>
   13070:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13072:	9b00      	ldr	r3, [sp, #0]
   13074:	f003 0301 	and.w	r3, r3, #1
   13078:	2b00      	cmp	r3, #0
   1307a:	d100      	bne.n	1307e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1307c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   1307e:	490a      	ldr	r1, [pc, #40]	; (130a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   13080:	9b01      	ldr	r3, [sp, #4]
   13082:	9a00      	ldr	r2, [sp, #0]
   13084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   13088:	4a06      	ldr	r2, [pc, #24]	; (130a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1308a:	9b01      	ldr	r3, [sp, #4]
   1308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13090:	1c5a      	adds	r2, r3, #1
   13092:	4904      	ldr	r1, [pc, #16]	; (130a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   13094:	9b01      	ldr	r3, [sp, #4]
   13096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1309a:	bf00      	nop
   1309c:	b003      	add	sp, #12
   1309e:	f85d fb04 	ldr.w	pc, [sp], #4
   130a2:	bf00      	nop
   130a4:	1fff95f0 	.word	0x1fff95f0
   130a8:	1fff95ec 	.word	0x1fff95ec

000130ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   130ac:	b500      	push	{lr}
   130ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130b0:	f7ed fdac 	bl	c0c <Sys_GetCoreID>
   130b4:	4603      	mov	r3, r0
   130b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   130b8:	4a0d      	ldr	r2, [pc, #52]	; (130f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   130ba:	9b01      	ldr	r3, [sp, #4]
   130bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130c0:	1e5a      	subs	r2, r3, #1
   130c2:	490b      	ldr	r1, [pc, #44]	; (130f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   130c4:	9b01      	ldr	r3, [sp, #4]
   130c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   130ca:	4a0a      	ldr	r2, [pc, #40]	; (130f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   130cc:	9b01      	ldr	r3, [sp, #4]
   130ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130d2:	f003 0301 	and.w	r3, r3, #1
   130d6:	2b00      	cmp	r3, #0
   130d8:	d106      	bne.n	130e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   130da:	4a05      	ldr	r2, [pc, #20]	; (130f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   130dc:	9b01      	ldr	r3, [sp, #4]
   130de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130e2:	2b00      	cmp	r3, #0
   130e4:	d100      	bne.n	130e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   130e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   130e8:	bf00      	nop
   130ea:	b003      	add	sp, #12
   130ec:	f85d fb04 	ldr.w	pc, [sp], #4
   130f0:	1fff95f0 	.word	0x1fff95f0
   130f4:	1fff95ec 	.word	0x1fff95ec

000130f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   130f8:	b500      	push	{lr}
   130fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130fc:	f7ed fd86 	bl	c0c <Sys_GetCoreID>
   13100:	4603      	mov	r3, r0
   13102:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   13104:	4a10      	ldr	r2, [pc, #64]	; (13148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   13106:	9b01      	ldr	r3, [sp, #4]
   13108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1310c:	2b00      	cmp	r3, #0
   1310e:	d10d      	bne.n	1312c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13110:	f7ed fc0c 	bl	92c <Adc_schm_read_msr>
   13114:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13116:	9b00      	ldr	r3, [sp, #0]
   13118:	f003 0301 	and.w	r3, r3, #1
   1311c:	2b00      	cmp	r3, #0
   1311e:	d100      	bne.n	13122 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13120:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   13122:	490a      	ldr	r1, [pc, #40]	; (1314c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   13124:	9b01      	ldr	r3, [sp, #4]
   13126:	9a00      	ldr	r2, [sp, #0]
   13128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   1312c:	4a06      	ldr	r2, [pc, #24]	; (13148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   1312e:	9b01      	ldr	r3, [sp, #4]
   13130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13134:	1c5a      	adds	r2, r3, #1
   13136:	4904      	ldr	r1, [pc, #16]	; (13148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   13138:	9b01      	ldr	r3, [sp, #4]
   1313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1313e:	bf00      	nop
   13140:	b003      	add	sp, #12
   13142:	f85d fb04 	ldr.w	pc, [sp], #4
   13146:	bf00      	nop
   13148:	1fff95f8 	.word	0x1fff95f8
   1314c:	1fff95f4 	.word	0x1fff95f4

00013150 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   13150:	b500      	push	{lr}
   13152:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13154:	f7ed fd5a 	bl	c0c <Sys_GetCoreID>
   13158:	4603      	mov	r3, r0
   1315a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   1315c:	4a0d      	ldr	r2, [pc, #52]	; (13194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1315e:	9b01      	ldr	r3, [sp, #4]
   13160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13164:	1e5a      	subs	r2, r3, #1
   13166:	490b      	ldr	r1, [pc, #44]	; (13194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   13168:	9b01      	ldr	r3, [sp, #4]
   1316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   1316e:	4a0a      	ldr	r2, [pc, #40]	; (13198 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   13170:	9b01      	ldr	r3, [sp, #4]
   13172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13176:	f003 0301 	and.w	r3, r3, #1
   1317a:	2b00      	cmp	r3, #0
   1317c:	d106      	bne.n	1318c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   1317e:	4a05      	ldr	r2, [pc, #20]	; (13194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   13180:	9b01      	ldr	r3, [sp, #4]
   13182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13186:	2b00      	cmp	r3, #0
   13188:	d100      	bne.n	1318c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1318a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1318c:	bf00      	nop
   1318e:	b003      	add	sp, #12
   13190:	f85d fb04 	ldr.w	pc, [sp], #4
   13194:	1fff95f8 	.word	0x1fff95f8
   13198:	1fff95f4 	.word	0x1fff95f4

0001319c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   1319c:	b500      	push	{lr}
   1319e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131a0:	f7ed fd34 	bl	c0c <Sys_GetCoreID>
   131a4:	4603      	mov	r3, r0
   131a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   131a8:	4a10      	ldr	r2, [pc, #64]	; (131ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   131aa:	9b01      	ldr	r3, [sp, #4]
   131ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131b0:	2b00      	cmp	r3, #0
   131b2:	d10d      	bne.n	131d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   131b4:	f7ed fbba 	bl	92c <Adc_schm_read_msr>
   131b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   131ba:	9b00      	ldr	r3, [sp, #0]
   131bc:	f003 0301 	and.w	r3, r3, #1
   131c0:	2b00      	cmp	r3, #0
   131c2:	d100      	bne.n	131c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   131c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   131c6:	490a      	ldr	r1, [pc, #40]	; (131f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   131c8:	9b01      	ldr	r3, [sp, #4]
   131ca:	9a00      	ldr	r2, [sp, #0]
   131cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   131d0:	4a06      	ldr	r2, [pc, #24]	; (131ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   131d2:	9b01      	ldr	r3, [sp, #4]
   131d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131d8:	1c5a      	adds	r2, r3, #1
   131da:	4904      	ldr	r1, [pc, #16]	; (131ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   131dc:	9b01      	ldr	r3, [sp, #4]
   131de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   131e2:	bf00      	nop
   131e4:	b003      	add	sp, #12
   131e6:	f85d fb04 	ldr.w	pc, [sp], #4
   131ea:	bf00      	nop
   131ec:	1fff9600 	.word	0x1fff9600
   131f0:	1fff95fc 	.word	0x1fff95fc

000131f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   131f4:	b500      	push	{lr}
   131f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131f8:	f7ed fd08 	bl	c0c <Sys_GetCoreID>
   131fc:	4603      	mov	r3, r0
   131fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   13200:	4a0d      	ldr	r2, [pc, #52]	; (13238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   13202:	9b01      	ldr	r3, [sp, #4]
   13204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13208:	1e5a      	subs	r2, r3, #1
   1320a:	490b      	ldr	r1, [pc, #44]	; (13238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   1320c:	9b01      	ldr	r3, [sp, #4]
   1320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   13212:	4a0a      	ldr	r2, [pc, #40]	; (1323c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   13214:	9b01      	ldr	r3, [sp, #4]
   13216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1321a:	f003 0301 	and.w	r3, r3, #1
   1321e:	2b00      	cmp	r3, #0
   13220:	d106      	bne.n	13230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   13222:	4a05      	ldr	r2, [pc, #20]	; (13238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   13224:	9b01      	ldr	r3, [sp, #4]
   13226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1322a:	2b00      	cmp	r3, #0
   1322c:	d100      	bne.n	13230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1322e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13230:	bf00      	nop
   13232:	b003      	add	sp, #12
   13234:	f85d fb04 	ldr.w	pc, [sp], #4
   13238:	1fff9600 	.word	0x1fff9600
   1323c:	1fff95fc 	.word	0x1fff95fc

00013240 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   13240:	b500      	push	{lr}
   13242:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13244:	f7ed fce2 	bl	c0c <Sys_GetCoreID>
   13248:	4603      	mov	r3, r0
   1324a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   1324c:	4a10      	ldr	r2, [pc, #64]	; (13290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1324e:	9b01      	ldr	r3, [sp, #4]
   13250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13254:	2b00      	cmp	r3, #0
   13256:	d10d      	bne.n	13274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13258:	f7ed fb68 	bl	92c <Adc_schm_read_msr>
   1325c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1325e:	9b00      	ldr	r3, [sp, #0]
   13260:	f003 0301 	and.w	r3, r3, #1
   13264:	2b00      	cmp	r3, #0
   13266:	d100      	bne.n	1326a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13268:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   1326a:	490a      	ldr	r1, [pc, #40]	; (13294 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   1326c:	9b01      	ldr	r3, [sp, #4]
   1326e:	9a00      	ldr	r2, [sp, #0]
   13270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   13274:	4a06      	ldr	r2, [pc, #24]	; (13290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   13276:	9b01      	ldr	r3, [sp, #4]
   13278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1327c:	1c5a      	adds	r2, r3, #1
   1327e:	4904      	ldr	r1, [pc, #16]	; (13290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   13280:	9b01      	ldr	r3, [sp, #4]
   13282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13286:	bf00      	nop
   13288:	b003      	add	sp, #12
   1328a:	f85d fb04 	ldr.w	pc, [sp], #4
   1328e:	bf00      	nop
   13290:	1fff9608 	.word	0x1fff9608
   13294:	1fff9604 	.word	0x1fff9604

00013298 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   13298:	b500      	push	{lr}
   1329a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1329c:	f7ed fcb6 	bl	c0c <Sys_GetCoreID>
   132a0:	4603      	mov	r3, r0
   132a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   132a4:	4a0d      	ldr	r2, [pc, #52]	; (132dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   132a6:	9b01      	ldr	r3, [sp, #4]
   132a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ac:	1e5a      	subs	r2, r3, #1
   132ae:	490b      	ldr	r1, [pc, #44]	; (132dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   132b0:	9b01      	ldr	r3, [sp, #4]
   132b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   132b6:	4a0a      	ldr	r2, [pc, #40]	; (132e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   132b8:	9b01      	ldr	r3, [sp, #4]
   132ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132be:	f003 0301 	and.w	r3, r3, #1
   132c2:	2b00      	cmp	r3, #0
   132c4:	d106      	bne.n	132d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   132c6:	4a05      	ldr	r2, [pc, #20]	; (132dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   132c8:	9b01      	ldr	r3, [sp, #4]
   132ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ce:	2b00      	cmp	r3, #0
   132d0:	d100      	bne.n	132d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   132d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   132d4:	bf00      	nop
   132d6:	b003      	add	sp, #12
   132d8:	f85d fb04 	ldr.w	pc, [sp], #4
   132dc:	1fff9608 	.word	0x1fff9608
   132e0:	1fff9604 	.word	0x1fff9604

000132e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   132e4:	b500      	push	{lr}
   132e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132e8:	f7ed fc90 	bl	c0c <Sys_GetCoreID>
   132ec:	4603      	mov	r3, r0
   132ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   132f0:	4a10      	ldr	r2, [pc, #64]	; (13334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   132f2:	9b01      	ldr	r3, [sp, #4]
   132f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132f8:	2b00      	cmp	r3, #0
   132fa:	d10d      	bne.n	13318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   132fc:	f7ed fb16 	bl	92c <Adc_schm_read_msr>
   13300:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13302:	9b00      	ldr	r3, [sp, #0]
   13304:	f003 0301 	and.w	r3, r3, #1
   13308:	2b00      	cmp	r3, #0
   1330a:	d100      	bne.n	1330e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1330c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   1330e:	490a      	ldr	r1, [pc, #40]	; (13338 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   13310:	9b01      	ldr	r3, [sp, #4]
   13312:	9a00      	ldr	r2, [sp, #0]
   13314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   13318:	4a06      	ldr	r2, [pc, #24]	; (13334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   1331a:	9b01      	ldr	r3, [sp, #4]
   1331c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13320:	1c5a      	adds	r2, r3, #1
   13322:	4904      	ldr	r1, [pc, #16]	; (13334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   13324:	9b01      	ldr	r3, [sp, #4]
   13326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1332a:	bf00      	nop
   1332c:	b003      	add	sp, #12
   1332e:	f85d fb04 	ldr.w	pc, [sp], #4
   13332:	bf00      	nop
   13334:	1fff9610 	.word	0x1fff9610
   13338:	1fff960c 	.word	0x1fff960c

0001333c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   1333c:	b500      	push	{lr}
   1333e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13340:	f7ed fc64 	bl	c0c <Sys_GetCoreID>
   13344:	4603      	mov	r3, r0
   13346:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   13348:	4a0d      	ldr	r2, [pc, #52]	; (13380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   1334a:	9b01      	ldr	r3, [sp, #4]
   1334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13350:	1e5a      	subs	r2, r3, #1
   13352:	490b      	ldr	r1, [pc, #44]	; (13380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   13354:	9b01      	ldr	r3, [sp, #4]
   13356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   1335a:	4a0a      	ldr	r2, [pc, #40]	; (13384 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   1335c:	9b01      	ldr	r3, [sp, #4]
   1335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13362:	f003 0301 	and.w	r3, r3, #1
   13366:	2b00      	cmp	r3, #0
   13368:	d106      	bne.n	13378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   1336a:	4a05      	ldr	r2, [pc, #20]	; (13380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   1336c:	9b01      	ldr	r3, [sp, #4]
   1336e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13372:	2b00      	cmp	r3, #0
   13374:	d100      	bne.n	13378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13376:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13378:	bf00      	nop
   1337a:	b003      	add	sp, #12
   1337c:	f85d fb04 	ldr.w	pc, [sp], #4
   13380:	1fff9610 	.word	0x1fff9610
   13384:	1fff960c 	.word	0x1fff960c

00013388 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   13388:	b500      	push	{lr}
   1338a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1338c:	f7ed fc3e 	bl	c0c <Sys_GetCoreID>
   13390:	4603      	mov	r3, r0
   13392:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   13394:	4a10      	ldr	r2, [pc, #64]	; (133d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   13396:	9b01      	ldr	r3, [sp, #4]
   13398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1339c:	2b00      	cmp	r3, #0
   1339e:	d10d      	bne.n	133bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   133a0:	f7ed fac4 	bl	92c <Adc_schm_read_msr>
   133a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   133a6:	9b00      	ldr	r3, [sp, #0]
   133a8:	f003 0301 	and.w	r3, r3, #1
   133ac:	2b00      	cmp	r3, #0
   133ae:	d100      	bne.n	133b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   133b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   133b2:	490a      	ldr	r1, [pc, #40]	; (133dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   133b4:	9b01      	ldr	r3, [sp, #4]
   133b6:	9a00      	ldr	r2, [sp, #0]
   133b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   133bc:	4a06      	ldr	r2, [pc, #24]	; (133d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   133be:	9b01      	ldr	r3, [sp, #4]
   133c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133c4:	1c5a      	adds	r2, r3, #1
   133c6:	4904      	ldr	r1, [pc, #16]	; (133d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   133c8:	9b01      	ldr	r3, [sp, #4]
   133ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   133ce:	bf00      	nop
   133d0:	b003      	add	sp, #12
   133d2:	f85d fb04 	ldr.w	pc, [sp], #4
   133d6:	bf00      	nop
   133d8:	1fff9618 	.word	0x1fff9618
   133dc:	1fff9614 	.word	0x1fff9614

000133e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   133e0:	b500      	push	{lr}
   133e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133e4:	f7ed fc12 	bl	c0c <Sys_GetCoreID>
   133e8:	4603      	mov	r3, r0
   133ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   133ec:	4a0d      	ldr	r2, [pc, #52]	; (13424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   133ee:	9b01      	ldr	r3, [sp, #4]
   133f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133f4:	1e5a      	subs	r2, r3, #1
   133f6:	490b      	ldr	r1, [pc, #44]	; (13424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   133f8:	9b01      	ldr	r3, [sp, #4]
   133fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   133fe:	4a0a      	ldr	r2, [pc, #40]	; (13428 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   13400:	9b01      	ldr	r3, [sp, #4]
   13402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13406:	f003 0301 	and.w	r3, r3, #1
   1340a:	2b00      	cmp	r3, #0
   1340c:	d106      	bne.n	1341c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   1340e:	4a05      	ldr	r2, [pc, #20]	; (13424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   13410:	9b01      	ldr	r3, [sp, #4]
   13412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13416:	2b00      	cmp	r3, #0
   13418:	d100      	bne.n	1341c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1341a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1341c:	bf00      	nop
   1341e:	b003      	add	sp, #12
   13420:	f85d fb04 	ldr.w	pc, [sp], #4
   13424:	1fff9618 	.word	0x1fff9618
   13428:	1fff9614 	.word	0x1fff9614

0001342c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   1342c:	b500      	push	{lr}
   1342e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13430:	f7ed fbec 	bl	c0c <Sys_GetCoreID>
   13434:	4603      	mov	r3, r0
   13436:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   13438:	4a10      	ldr	r2, [pc, #64]	; (1347c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   1343a:	9b01      	ldr	r3, [sp, #4]
   1343c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13440:	2b00      	cmp	r3, #0
   13442:	d10d      	bne.n	13460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13444:	f7ed fa72 	bl	92c <Adc_schm_read_msr>
   13448:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1344a:	9b00      	ldr	r3, [sp, #0]
   1344c:	f003 0301 	and.w	r3, r3, #1
   13450:	2b00      	cmp	r3, #0
   13452:	d100      	bne.n	13456 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13454:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   13456:	490a      	ldr	r1, [pc, #40]	; (13480 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   13458:	9b01      	ldr	r3, [sp, #4]
   1345a:	9a00      	ldr	r2, [sp, #0]
   1345c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   13460:	4a06      	ldr	r2, [pc, #24]	; (1347c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   13462:	9b01      	ldr	r3, [sp, #4]
   13464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13468:	1c5a      	adds	r2, r3, #1
   1346a:	4904      	ldr	r1, [pc, #16]	; (1347c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   1346c:	9b01      	ldr	r3, [sp, #4]
   1346e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13472:	bf00      	nop
   13474:	b003      	add	sp, #12
   13476:	f85d fb04 	ldr.w	pc, [sp], #4
   1347a:	bf00      	nop
   1347c:	1fff9620 	.word	0x1fff9620
   13480:	1fff961c 	.word	0x1fff961c

00013484 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   13484:	b500      	push	{lr}
   13486:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13488:	f7ed fbc0 	bl	c0c <Sys_GetCoreID>
   1348c:	4603      	mov	r3, r0
   1348e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   13490:	4a0d      	ldr	r2, [pc, #52]	; (134c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   13492:	9b01      	ldr	r3, [sp, #4]
   13494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13498:	1e5a      	subs	r2, r3, #1
   1349a:	490b      	ldr	r1, [pc, #44]	; (134c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   1349c:	9b01      	ldr	r3, [sp, #4]
   1349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   134a2:	4a0a      	ldr	r2, [pc, #40]	; (134cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   134a4:	9b01      	ldr	r3, [sp, #4]
   134a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134aa:	f003 0301 	and.w	r3, r3, #1
   134ae:	2b00      	cmp	r3, #0
   134b0:	d106      	bne.n	134c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   134b2:	4a05      	ldr	r2, [pc, #20]	; (134c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   134b4:	9b01      	ldr	r3, [sp, #4]
   134b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134ba:	2b00      	cmp	r3, #0
   134bc:	d100      	bne.n	134c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   134be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   134c0:	bf00      	nop
   134c2:	b003      	add	sp, #12
   134c4:	f85d fb04 	ldr.w	pc, [sp], #4
   134c8:	1fff9620 	.word	0x1fff9620
   134cc:	1fff961c 	.word	0x1fff961c

000134d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   134d0:	b500      	push	{lr}
   134d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134d4:	f7ed fb9a 	bl	c0c <Sys_GetCoreID>
   134d8:	4603      	mov	r3, r0
   134da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   134dc:	4a10      	ldr	r2, [pc, #64]	; (13520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   134de:	9b01      	ldr	r3, [sp, #4]
   134e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134e4:	2b00      	cmp	r3, #0
   134e6:	d10d      	bne.n	13504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   134e8:	f7ed fa20 	bl	92c <Adc_schm_read_msr>
   134ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   134ee:	9b00      	ldr	r3, [sp, #0]
   134f0:	f003 0301 	and.w	r3, r3, #1
   134f4:	2b00      	cmp	r3, #0
   134f6:	d100      	bne.n	134fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   134f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   134fa:	490a      	ldr	r1, [pc, #40]	; (13524 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   134fc:	9b01      	ldr	r3, [sp, #4]
   134fe:	9a00      	ldr	r2, [sp, #0]
   13500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   13504:	4a06      	ldr	r2, [pc, #24]	; (13520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   13506:	9b01      	ldr	r3, [sp, #4]
   13508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1350c:	1c5a      	adds	r2, r3, #1
   1350e:	4904      	ldr	r1, [pc, #16]	; (13520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   13510:	9b01      	ldr	r3, [sp, #4]
   13512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13516:	bf00      	nop
   13518:	b003      	add	sp, #12
   1351a:	f85d fb04 	ldr.w	pc, [sp], #4
   1351e:	bf00      	nop
   13520:	1fff9628 	.word	0x1fff9628
   13524:	1fff9624 	.word	0x1fff9624

00013528 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   13528:	b500      	push	{lr}
   1352a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1352c:	f7ed fb6e 	bl	c0c <Sys_GetCoreID>
   13530:	4603      	mov	r3, r0
   13532:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   13534:	4a0d      	ldr	r2, [pc, #52]	; (1356c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   13536:	9b01      	ldr	r3, [sp, #4]
   13538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1353c:	1e5a      	subs	r2, r3, #1
   1353e:	490b      	ldr	r1, [pc, #44]	; (1356c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   13540:	9b01      	ldr	r3, [sp, #4]
   13542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   13546:	4a0a      	ldr	r2, [pc, #40]	; (13570 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   13548:	9b01      	ldr	r3, [sp, #4]
   1354a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1354e:	f003 0301 	and.w	r3, r3, #1
   13552:	2b00      	cmp	r3, #0
   13554:	d106      	bne.n	13564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   13556:	4a05      	ldr	r2, [pc, #20]	; (1356c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   13558:	9b01      	ldr	r3, [sp, #4]
   1355a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1355e:	2b00      	cmp	r3, #0
   13560:	d100      	bne.n	13564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13562:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13564:	bf00      	nop
   13566:	b003      	add	sp, #12
   13568:	f85d fb04 	ldr.w	pc, [sp], #4
   1356c:	1fff9628 	.word	0x1fff9628
   13570:	1fff9624 	.word	0x1fff9624

00013574 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   13574:	b500      	push	{lr}
   13576:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13578:	f7ed fb48 	bl	c0c <Sys_GetCoreID>
   1357c:	4603      	mov	r3, r0
   1357e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   13580:	4a10      	ldr	r2, [pc, #64]	; (135c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   13582:	9b01      	ldr	r3, [sp, #4]
   13584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13588:	2b00      	cmp	r3, #0
   1358a:	d10d      	bne.n	135a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1358c:	f7ed f9ce 	bl	92c <Adc_schm_read_msr>
   13590:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13592:	9b00      	ldr	r3, [sp, #0]
   13594:	f003 0301 	and.w	r3, r3, #1
   13598:	2b00      	cmp	r3, #0
   1359a:	d100      	bne.n	1359e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1359c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   1359e:	490a      	ldr	r1, [pc, #40]	; (135c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   135a0:	9b01      	ldr	r3, [sp, #4]
   135a2:	9a00      	ldr	r2, [sp, #0]
   135a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   135a8:	4a06      	ldr	r2, [pc, #24]	; (135c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   135aa:	9b01      	ldr	r3, [sp, #4]
   135ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135b0:	1c5a      	adds	r2, r3, #1
   135b2:	4904      	ldr	r1, [pc, #16]	; (135c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   135b4:	9b01      	ldr	r3, [sp, #4]
   135b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   135ba:	bf00      	nop
   135bc:	b003      	add	sp, #12
   135be:	f85d fb04 	ldr.w	pc, [sp], #4
   135c2:	bf00      	nop
   135c4:	1fff9630 	.word	0x1fff9630
   135c8:	1fff962c 	.word	0x1fff962c

000135cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   135cc:	b500      	push	{lr}
   135ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135d0:	f7ed fb1c 	bl	c0c <Sys_GetCoreID>
   135d4:	4603      	mov	r3, r0
   135d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   135d8:	4a0d      	ldr	r2, [pc, #52]	; (13610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   135da:	9b01      	ldr	r3, [sp, #4]
   135dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135e0:	1e5a      	subs	r2, r3, #1
   135e2:	490b      	ldr	r1, [pc, #44]	; (13610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   135e4:	9b01      	ldr	r3, [sp, #4]
   135e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   135ea:	4a0a      	ldr	r2, [pc, #40]	; (13614 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   135ec:	9b01      	ldr	r3, [sp, #4]
   135ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135f2:	f003 0301 	and.w	r3, r3, #1
   135f6:	2b00      	cmp	r3, #0
   135f8:	d106      	bne.n	13608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   135fa:	4a05      	ldr	r2, [pc, #20]	; (13610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   135fc:	9b01      	ldr	r3, [sp, #4]
   135fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13602:	2b00      	cmp	r3, #0
   13604:	d100      	bne.n	13608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13606:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13608:	bf00      	nop
   1360a:	b003      	add	sp, #12
   1360c:	f85d fb04 	ldr.w	pc, [sp], #4
   13610:	1fff9630 	.word	0x1fff9630
   13614:	1fff962c 	.word	0x1fff962c

00013618 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   13618:	b500      	push	{lr}
   1361a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1361c:	f7ed faf6 	bl	c0c <Sys_GetCoreID>
   13620:	4603      	mov	r3, r0
   13622:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   13624:	4a10      	ldr	r2, [pc, #64]	; (13668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   13626:	9b01      	ldr	r3, [sp, #4]
   13628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1362c:	2b00      	cmp	r3, #0
   1362e:	d10d      	bne.n	1364c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13630:	f7ed f97c 	bl	92c <Adc_schm_read_msr>
   13634:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13636:	9b00      	ldr	r3, [sp, #0]
   13638:	f003 0301 	and.w	r3, r3, #1
   1363c:	2b00      	cmp	r3, #0
   1363e:	d100      	bne.n	13642 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13640:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   13642:	490a      	ldr	r1, [pc, #40]	; (1366c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   13644:	9b01      	ldr	r3, [sp, #4]
   13646:	9a00      	ldr	r2, [sp, #0]
   13648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   1364c:	4a06      	ldr	r2, [pc, #24]	; (13668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   1364e:	9b01      	ldr	r3, [sp, #4]
   13650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13654:	1c5a      	adds	r2, r3, #1
   13656:	4904      	ldr	r1, [pc, #16]	; (13668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   13658:	9b01      	ldr	r3, [sp, #4]
   1365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1365e:	bf00      	nop
   13660:	b003      	add	sp, #12
   13662:	f85d fb04 	ldr.w	pc, [sp], #4
   13666:	bf00      	nop
   13668:	1fff9638 	.word	0x1fff9638
   1366c:	1fff9634 	.word	0x1fff9634

00013670 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   13670:	b500      	push	{lr}
   13672:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13674:	f7ed faca 	bl	c0c <Sys_GetCoreID>
   13678:	4603      	mov	r3, r0
   1367a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   1367c:	4a0d      	ldr	r2, [pc, #52]	; (136b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1367e:	9b01      	ldr	r3, [sp, #4]
   13680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13684:	1e5a      	subs	r2, r3, #1
   13686:	490b      	ldr	r1, [pc, #44]	; (136b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   13688:	9b01      	ldr	r3, [sp, #4]
   1368a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   1368e:	4a0a      	ldr	r2, [pc, #40]	; (136b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   13690:	9b01      	ldr	r3, [sp, #4]
   13692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13696:	f003 0301 	and.w	r3, r3, #1
   1369a:	2b00      	cmp	r3, #0
   1369c:	d106      	bne.n	136ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   1369e:	4a05      	ldr	r2, [pc, #20]	; (136b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   136a0:	9b01      	ldr	r3, [sp, #4]
   136a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136a6:	2b00      	cmp	r3, #0
   136a8:	d100      	bne.n	136ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   136aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   136ac:	bf00      	nop
   136ae:	b003      	add	sp, #12
   136b0:	f85d fb04 	ldr.w	pc, [sp], #4
   136b4:	1fff9638 	.word	0x1fff9638
   136b8:	1fff9634 	.word	0x1fff9634

000136bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   136bc:	b500      	push	{lr}
   136be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136c0:	f7ed faa4 	bl	c0c <Sys_GetCoreID>
   136c4:	4603      	mov	r3, r0
   136c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   136c8:	4a10      	ldr	r2, [pc, #64]	; (1370c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   136ca:	9b01      	ldr	r3, [sp, #4]
   136cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136d0:	2b00      	cmp	r3, #0
   136d2:	d10d      	bne.n	136f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   136d4:	f7ed f92a 	bl	92c <Adc_schm_read_msr>
   136d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   136da:	9b00      	ldr	r3, [sp, #0]
   136dc:	f003 0301 	and.w	r3, r3, #1
   136e0:	2b00      	cmp	r3, #0
   136e2:	d100      	bne.n	136e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   136e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   136e6:	490a      	ldr	r1, [pc, #40]	; (13710 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   136e8:	9b01      	ldr	r3, [sp, #4]
   136ea:	9a00      	ldr	r2, [sp, #0]
   136ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   136f0:	4a06      	ldr	r2, [pc, #24]	; (1370c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   136f2:	9b01      	ldr	r3, [sp, #4]
   136f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136f8:	1c5a      	adds	r2, r3, #1
   136fa:	4904      	ldr	r1, [pc, #16]	; (1370c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   136fc:	9b01      	ldr	r3, [sp, #4]
   136fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13702:	bf00      	nop
   13704:	b003      	add	sp, #12
   13706:	f85d fb04 	ldr.w	pc, [sp], #4
   1370a:	bf00      	nop
   1370c:	1fff9640 	.word	0x1fff9640
   13710:	1fff963c 	.word	0x1fff963c

00013714 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   13714:	b500      	push	{lr}
   13716:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13718:	f7ed fa78 	bl	c0c <Sys_GetCoreID>
   1371c:	4603      	mov	r3, r0
   1371e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   13720:	4a0d      	ldr	r2, [pc, #52]	; (13758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   13722:	9b01      	ldr	r3, [sp, #4]
   13724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13728:	1e5a      	subs	r2, r3, #1
   1372a:	490b      	ldr	r1, [pc, #44]	; (13758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   1372c:	9b01      	ldr	r3, [sp, #4]
   1372e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   13732:	4a0a      	ldr	r2, [pc, #40]	; (1375c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   13734:	9b01      	ldr	r3, [sp, #4]
   13736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1373a:	f003 0301 	and.w	r3, r3, #1
   1373e:	2b00      	cmp	r3, #0
   13740:	d106      	bne.n	13750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   13742:	4a05      	ldr	r2, [pc, #20]	; (13758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   13744:	9b01      	ldr	r3, [sp, #4]
   13746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1374a:	2b00      	cmp	r3, #0
   1374c:	d100      	bne.n	13750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1374e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13750:	bf00      	nop
   13752:	b003      	add	sp, #12
   13754:	f85d fb04 	ldr.w	pc, [sp], #4
   13758:	1fff9640 	.word	0x1fff9640
   1375c:	1fff963c 	.word	0x1fff963c

00013760 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   13760:	b500      	push	{lr}
   13762:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13764:	f7ed fa52 	bl	c0c <Sys_GetCoreID>
   13768:	4603      	mov	r3, r0
   1376a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   1376c:	4a10      	ldr	r2, [pc, #64]	; (137b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   1376e:	9b01      	ldr	r3, [sp, #4]
   13770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13774:	2b00      	cmp	r3, #0
   13776:	d10d      	bne.n	13794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13778:	f7ed f8d8 	bl	92c <Adc_schm_read_msr>
   1377c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1377e:	9b00      	ldr	r3, [sp, #0]
   13780:	f003 0301 	and.w	r3, r3, #1
   13784:	2b00      	cmp	r3, #0
   13786:	d100      	bne.n	1378a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13788:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   1378a:	490a      	ldr	r1, [pc, #40]	; (137b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   1378c:	9b01      	ldr	r3, [sp, #4]
   1378e:	9a00      	ldr	r2, [sp, #0]
   13790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   13794:	4a06      	ldr	r2, [pc, #24]	; (137b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   13796:	9b01      	ldr	r3, [sp, #4]
   13798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1379c:	1c5a      	adds	r2, r3, #1
   1379e:	4904      	ldr	r1, [pc, #16]	; (137b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   137a0:	9b01      	ldr	r3, [sp, #4]
   137a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   137a6:	bf00      	nop
   137a8:	b003      	add	sp, #12
   137aa:	f85d fb04 	ldr.w	pc, [sp], #4
   137ae:	bf00      	nop
   137b0:	1fff9648 	.word	0x1fff9648
   137b4:	1fff9644 	.word	0x1fff9644

000137b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   137b8:	b500      	push	{lr}
   137ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137bc:	f7ed fa26 	bl	c0c <Sys_GetCoreID>
   137c0:	4603      	mov	r3, r0
   137c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   137c4:	4a0d      	ldr	r2, [pc, #52]	; (137fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   137c6:	9b01      	ldr	r3, [sp, #4]
   137c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137cc:	1e5a      	subs	r2, r3, #1
   137ce:	490b      	ldr	r1, [pc, #44]	; (137fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   137d0:	9b01      	ldr	r3, [sp, #4]
   137d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   137d6:	4a0a      	ldr	r2, [pc, #40]	; (13800 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   137d8:	9b01      	ldr	r3, [sp, #4]
   137da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137de:	f003 0301 	and.w	r3, r3, #1
   137e2:	2b00      	cmp	r3, #0
   137e4:	d106      	bne.n	137f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   137e6:	4a05      	ldr	r2, [pc, #20]	; (137fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   137e8:	9b01      	ldr	r3, [sp, #4]
   137ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137ee:	2b00      	cmp	r3, #0
   137f0:	d100      	bne.n	137f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   137f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   137f4:	bf00      	nop
   137f6:	b003      	add	sp, #12
   137f8:	f85d fb04 	ldr.w	pc, [sp], #4
   137fc:	1fff9648 	.word	0x1fff9648
   13800:	1fff9644 	.word	0x1fff9644

00013804 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   13804:	b500      	push	{lr}
   13806:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13808:	f7ed fa00 	bl	c0c <Sys_GetCoreID>
   1380c:	4603      	mov	r3, r0
   1380e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   13810:	4a10      	ldr	r2, [pc, #64]	; (13854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   13812:	9b01      	ldr	r3, [sp, #4]
   13814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13818:	2b00      	cmp	r3, #0
   1381a:	d10d      	bne.n	13838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1381c:	f7ed f886 	bl	92c <Adc_schm_read_msr>
   13820:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13822:	9b00      	ldr	r3, [sp, #0]
   13824:	f003 0301 	and.w	r3, r3, #1
   13828:	2b00      	cmp	r3, #0
   1382a:	d100      	bne.n	1382e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1382c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   1382e:	490a      	ldr	r1, [pc, #40]	; (13858 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   13830:	9b01      	ldr	r3, [sp, #4]
   13832:	9a00      	ldr	r2, [sp, #0]
   13834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   13838:	4a06      	ldr	r2, [pc, #24]	; (13854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   1383a:	9b01      	ldr	r3, [sp, #4]
   1383c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13840:	1c5a      	adds	r2, r3, #1
   13842:	4904      	ldr	r1, [pc, #16]	; (13854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   13844:	9b01      	ldr	r3, [sp, #4]
   13846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1384a:	bf00      	nop
   1384c:	b003      	add	sp, #12
   1384e:	f85d fb04 	ldr.w	pc, [sp], #4
   13852:	bf00      	nop
   13854:	1fff9650 	.word	0x1fff9650
   13858:	1fff964c 	.word	0x1fff964c

0001385c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   1385c:	b500      	push	{lr}
   1385e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13860:	f7ed f9d4 	bl	c0c <Sys_GetCoreID>
   13864:	4603      	mov	r3, r0
   13866:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   13868:	4a0d      	ldr	r2, [pc, #52]	; (138a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   1386a:	9b01      	ldr	r3, [sp, #4]
   1386c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13870:	1e5a      	subs	r2, r3, #1
   13872:	490b      	ldr	r1, [pc, #44]	; (138a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   13874:	9b01      	ldr	r3, [sp, #4]
   13876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   1387a:	4a0a      	ldr	r2, [pc, #40]	; (138a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   1387c:	9b01      	ldr	r3, [sp, #4]
   1387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13882:	f003 0301 	and.w	r3, r3, #1
   13886:	2b00      	cmp	r3, #0
   13888:	d106      	bne.n	13898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   1388a:	4a05      	ldr	r2, [pc, #20]	; (138a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   1388c:	9b01      	ldr	r3, [sp, #4]
   1388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13892:	2b00      	cmp	r3, #0
   13894:	d100      	bne.n	13898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13896:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13898:	bf00      	nop
   1389a:	b003      	add	sp, #12
   1389c:	f85d fb04 	ldr.w	pc, [sp], #4
   138a0:	1fff9650 	.word	0x1fff9650
   138a4:	1fff964c 	.word	0x1fff964c

000138a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   138a8:	b500      	push	{lr}
   138aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138ac:	f7ed f9ae 	bl	c0c <Sys_GetCoreID>
   138b0:	4603      	mov	r3, r0
   138b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   138b4:	4a10      	ldr	r2, [pc, #64]	; (138f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   138b6:	9b01      	ldr	r3, [sp, #4]
   138b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138bc:	2b00      	cmp	r3, #0
   138be:	d10d      	bne.n	138dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   138c0:	f7ed f834 	bl	92c <Adc_schm_read_msr>
   138c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   138c6:	9b00      	ldr	r3, [sp, #0]
   138c8:	f003 0301 	and.w	r3, r3, #1
   138cc:	2b00      	cmp	r3, #0
   138ce:	d100      	bne.n	138d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   138d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   138d2:	490a      	ldr	r1, [pc, #40]	; (138fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   138d4:	9b01      	ldr	r3, [sp, #4]
   138d6:	9a00      	ldr	r2, [sp, #0]
   138d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   138dc:	4a06      	ldr	r2, [pc, #24]	; (138f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   138de:	9b01      	ldr	r3, [sp, #4]
   138e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138e4:	1c5a      	adds	r2, r3, #1
   138e6:	4904      	ldr	r1, [pc, #16]	; (138f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   138e8:	9b01      	ldr	r3, [sp, #4]
   138ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   138ee:	bf00      	nop
   138f0:	b003      	add	sp, #12
   138f2:	f85d fb04 	ldr.w	pc, [sp], #4
   138f6:	bf00      	nop
   138f8:	1fff9658 	.word	0x1fff9658
   138fc:	1fff9654 	.word	0x1fff9654

00013900 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   13900:	b500      	push	{lr}
   13902:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13904:	f7ed f982 	bl	c0c <Sys_GetCoreID>
   13908:	4603      	mov	r3, r0
   1390a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   1390c:	4a0d      	ldr	r2, [pc, #52]	; (13944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   1390e:	9b01      	ldr	r3, [sp, #4]
   13910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13914:	1e5a      	subs	r2, r3, #1
   13916:	490b      	ldr	r1, [pc, #44]	; (13944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   13918:	9b01      	ldr	r3, [sp, #4]
   1391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   1391e:	4a0a      	ldr	r2, [pc, #40]	; (13948 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   13920:	9b01      	ldr	r3, [sp, #4]
   13922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13926:	f003 0301 	and.w	r3, r3, #1
   1392a:	2b00      	cmp	r3, #0
   1392c:	d106      	bne.n	1393c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   1392e:	4a05      	ldr	r2, [pc, #20]	; (13944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   13930:	9b01      	ldr	r3, [sp, #4]
   13932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13936:	2b00      	cmp	r3, #0
   13938:	d100      	bne.n	1393c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1393a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1393c:	bf00      	nop
   1393e:	b003      	add	sp, #12
   13940:	f85d fb04 	ldr.w	pc, [sp], #4
   13944:	1fff9658 	.word	0x1fff9658
   13948:	1fff9654 	.word	0x1fff9654

0001394c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   1394c:	b500      	push	{lr}
   1394e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13950:	f7ed f95c 	bl	c0c <Sys_GetCoreID>
   13954:	4603      	mov	r3, r0
   13956:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   13958:	4a10      	ldr	r2, [pc, #64]	; (1399c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   1395a:	9b01      	ldr	r3, [sp, #4]
   1395c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13960:	2b00      	cmp	r3, #0
   13962:	d10d      	bne.n	13980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13964:	f7ec ffe2 	bl	92c <Adc_schm_read_msr>
   13968:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1396a:	9b00      	ldr	r3, [sp, #0]
   1396c:	f003 0301 	and.w	r3, r3, #1
   13970:	2b00      	cmp	r3, #0
   13972:	d100      	bne.n	13976 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13974:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   13976:	490a      	ldr	r1, [pc, #40]	; (139a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   13978:	9b01      	ldr	r3, [sp, #4]
   1397a:	9a00      	ldr	r2, [sp, #0]
   1397c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   13980:	4a06      	ldr	r2, [pc, #24]	; (1399c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   13982:	9b01      	ldr	r3, [sp, #4]
   13984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13988:	1c5a      	adds	r2, r3, #1
   1398a:	4904      	ldr	r1, [pc, #16]	; (1399c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   1398c:	9b01      	ldr	r3, [sp, #4]
   1398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13992:	bf00      	nop
   13994:	b003      	add	sp, #12
   13996:	f85d fb04 	ldr.w	pc, [sp], #4
   1399a:	bf00      	nop
   1399c:	1fff9660 	.word	0x1fff9660
   139a0:	1fff965c 	.word	0x1fff965c

000139a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   139a4:	b500      	push	{lr}
   139a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139a8:	f7ed f930 	bl	c0c <Sys_GetCoreID>
   139ac:	4603      	mov	r3, r0
   139ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   139b0:	4a0d      	ldr	r2, [pc, #52]	; (139e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   139b2:	9b01      	ldr	r3, [sp, #4]
   139b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139b8:	1e5a      	subs	r2, r3, #1
   139ba:	490b      	ldr	r1, [pc, #44]	; (139e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   139bc:	9b01      	ldr	r3, [sp, #4]
   139be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   139c2:	4a0a      	ldr	r2, [pc, #40]	; (139ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   139c4:	9b01      	ldr	r3, [sp, #4]
   139c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139ca:	f003 0301 	and.w	r3, r3, #1
   139ce:	2b00      	cmp	r3, #0
   139d0:	d106      	bne.n	139e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   139d2:	4a05      	ldr	r2, [pc, #20]	; (139e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   139d4:	9b01      	ldr	r3, [sp, #4]
   139d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139da:	2b00      	cmp	r3, #0
   139dc:	d100      	bne.n	139e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   139de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   139e0:	bf00      	nop
   139e2:	b003      	add	sp, #12
   139e4:	f85d fb04 	ldr.w	pc, [sp], #4
   139e8:	1fff9660 	.word	0x1fff9660
   139ec:	1fff965c 	.word	0x1fff965c

000139f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   139f0:	b500      	push	{lr}
   139f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139f4:	f7ed f90a 	bl	c0c <Sys_GetCoreID>
   139f8:	4603      	mov	r3, r0
   139fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   139fc:	4a10      	ldr	r2, [pc, #64]	; (13a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   139fe:	9b01      	ldr	r3, [sp, #4]
   13a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a04:	2b00      	cmp	r3, #0
   13a06:	d10d      	bne.n	13a24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a08:	f7ec ff90 	bl	92c <Adc_schm_read_msr>
   13a0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a0e:	9b00      	ldr	r3, [sp, #0]
   13a10:	f003 0301 	and.w	r3, r3, #1
   13a14:	2b00      	cmp	r3, #0
   13a16:	d100      	bne.n	13a1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   13a1a:	490a      	ldr	r1, [pc, #40]	; (13a44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   13a1c:	9b01      	ldr	r3, [sp, #4]
   13a1e:	9a00      	ldr	r2, [sp, #0]
   13a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   13a24:	4a06      	ldr	r2, [pc, #24]	; (13a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13a26:	9b01      	ldr	r3, [sp, #4]
   13a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a2c:	1c5a      	adds	r2, r3, #1
   13a2e:	4904      	ldr	r1, [pc, #16]	; (13a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13a30:	9b01      	ldr	r3, [sp, #4]
   13a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a36:	bf00      	nop
   13a38:	b003      	add	sp, #12
   13a3a:	f85d fb04 	ldr.w	pc, [sp], #4
   13a3e:	bf00      	nop
   13a40:	1fff9668 	.word	0x1fff9668
   13a44:	1fff9664 	.word	0x1fff9664

00013a48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   13a48:	b500      	push	{lr}
   13a4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a4c:	f7ed f8de 	bl	c0c <Sys_GetCoreID>
   13a50:	4603      	mov	r3, r0
   13a52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   13a54:	4a0d      	ldr	r2, [pc, #52]	; (13a8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13a56:	9b01      	ldr	r3, [sp, #4]
   13a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a5c:	1e5a      	subs	r2, r3, #1
   13a5e:	490b      	ldr	r1, [pc, #44]	; (13a8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13a60:	9b01      	ldr	r3, [sp, #4]
   13a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   13a66:	4a0a      	ldr	r2, [pc, #40]	; (13a90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   13a68:	9b01      	ldr	r3, [sp, #4]
   13a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a6e:	f003 0301 	and.w	r3, r3, #1
   13a72:	2b00      	cmp	r3, #0
   13a74:	d106      	bne.n	13a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   13a76:	4a05      	ldr	r2, [pc, #20]	; (13a8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13a78:	9b01      	ldr	r3, [sp, #4]
   13a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a7e:	2b00      	cmp	r3, #0
   13a80:	d100      	bne.n	13a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a84:	bf00      	nop
   13a86:	b003      	add	sp, #12
   13a88:	f85d fb04 	ldr.w	pc, [sp], #4
   13a8c:	1fff9668 	.word	0x1fff9668
   13a90:	1fff9664 	.word	0x1fff9664

00013a94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13a94:	b500      	push	{lr}
   13a96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a98:	f7ed f8b8 	bl	c0c <Sys_GetCoreID>
   13a9c:	4603      	mov	r3, r0
   13a9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   13aa0:	4a10      	ldr	r2, [pc, #64]	; (13ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13aa2:	9b01      	ldr	r3, [sp, #4]
   13aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aa8:	2b00      	cmp	r3, #0
   13aaa:	d10d      	bne.n	13ac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13aac:	f7ec ff3e 	bl	92c <Adc_schm_read_msr>
   13ab0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ab2:	9b00      	ldr	r3, [sp, #0]
   13ab4:	f003 0301 	and.w	r3, r3, #1
   13ab8:	2b00      	cmp	r3, #0
   13aba:	d100      	bne.n	13abe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13abc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   13abe:	490a      	ldr	r1, [pc, #40]	; (13ae8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   13ac0:	9b01      	ldr	r3, [sp, #4]
   13ac2:	9a00      	ldr	r2, [sp, #0]
   13ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   13ac8:	4a06      	ldr	r2, [pc, #24]	; (13ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13aca:	9b01      	ldr	r3, [sp, #4]
   13acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ad0:	1c5a      	adds	r2, r3, #1
   13ad2:	4904      	ldr	r1, [pc, #16]	; (13ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13ad4:	9b01      	ldr	r3, [sp, #4]
   13ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ada:	bf00      	nop
   13adc:	b003      	add	sp, #12
   13ade:	f85d fb04 	ldr.w	pc, [sp], #4
   13ae2:	bf00      	nop
   13ae4:	1fff9670 	.word	0x1fff9670
   13ae8:	1fff966c 	.word	0x1fff966c

00013aec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13aec:	b500      	push	{lr}
   13aee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13af0:	f7ed f88c 	bl	c0c <Sys_GetCoreID>
   13af4:	4603      	mov	r3, r0
   13af6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   13af8:	4a0d      	ldr	r2, [pc, #52]	; (13b30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13afa:	9b01      	ldr	r3, [sp, #4]
   13afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b00:	1e5a      	subs	r2, r3, #1
   13b02:	490b      	ldr	r1, [pc, #44]	; (13b30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13b04:	9b01      	ldr	r3, [sp, #4]
   13b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   13b0a:	4a0a      	ldr	r2, [pc, #40]	; (13b34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   13b0c:	9b01      	ldr	r3, [sp, #4]
   13b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b12:	f003 0301 	and.w	r3, r3, #1
   13b16:	2b00      	cmp	r3, #0
   13b18:	d106      	bne.n	13b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   13b1a:	4a05      	ldr	r2, [pc, #20]	; (13b30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13b1c:	9b01      	ldr	r3, [sp, #4]
   13b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b22:	2b00      	cmp	r3, #0
   13b24:	d100      	bne.n	13b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b28:	bf00      	nop
   13b2a:	b003      	add	sp, #12
   13b2c:	f85d fb04 	ldr.w	pc, [sp], #4
   13b30:	1fff9670 	.word	0x1fff9670
   13b34:	1fff966c 	.word	0x1fff966c

00013b38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13b38:	b500      	push	{lr}
   13b3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b3c:	f7ed f866 	bl	c0c <Sys_GetCoreID>
   13b40:	4603      	mov	r3, r0
   13b42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   13b44:	4a10      	ldr	r2, [pc, #64]	; (13b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13b46:	9b01      	ldr	r3, [sp, #4]
   13b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b4c:	2b00      	cmp	r3, #0
   13b4e:	d10d      	bne.n	13b6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b50:	f7ec feec 	bl	92c <Adc_schm_read_msr>
   13b54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b56:	9b00      	ldr	r3, [sp, #0]
   13b58:	f003 0301 	and.w	r3, r3, #1
   13b5c:	2b00      	cmp	r3, #0
   13b5e:	d100      	bne.n	13b62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   13b62:	490a      	ldr	r1, [pc, #40]	; (13b8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   13b64:	9b01      	ldr	r3, [sp, #4]
   13b66:	9a00      	ldr	r2, [sp, #0]
   13b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   13b6c:	4a06      	ldr	r2, [pc, #24]	; (13b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13b6e:	9b01      	ldr	r3, [sp, #4]
   13b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b74:	1c5a      	adds	r2, r3, #1
   13b76:	4904      	ldr	r1, [pc, #16]	; (13b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13b78:	9b01      	ldr	r3, [sp, #4]
   13b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b7e:	bf00      	nop
   13b80:	b003      	add	sp, #12
   13b82:	f85d fb04 	ldr.w	pc, [sp], #4
   13b86:	bf00      	nop
   13b88:	1fff9678 	.word	0x1fff9678
   13b8c:	1fff9674 	.word	0x1fff9674

00013b90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13b90:	b500      	push	{lr}
   13b92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b94:	f7ed f83a 	bl	c0c <Sys_GetCoreID>
   13b98:	4603      	mov	r3, r0
   13b9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   13b9c:	4a0d      	ldr	r2, [pc, #52]	; (13bd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13b9e:	9b01      	ldr	r3, [sp, #4]
   13ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ba4:	1e5a      	subs	r2, r3, #1
   13ba6:	490b      	ldr	r1, [pc, #44]	; (13bd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13ba8:	9b01      	ldr	r3, [sp, #4]
   13baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   13bae:	4a0a      	ldr	r2, [pc, #40]	; (13bd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   13bb0:	9b01      	ldr	r3, [sp, #4]
   13bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bb6:	f003 0301 	and.w	r3, r3, #1
   13bba:	2b00      	cmp	r3, #0
   13bbc:	d106      	bne.n	13bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   13bbe:	4a05      	ldr	r2, [pc, #20]	; (13bd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13bc0:	9b01      	ldr	r3, [sp, #4]
   13bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bc6:	2b00      	cmp	r3, #0
   13bc8:	d100      	bne.n	13bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13bca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13bcc:	bf00      	nop
   13bce:	b003      	add	sp, #12
   13bd0:	f85d fb04 	ldr.w	pc, [sp], #4
   13bd4:	1fff9678 	.word	0x1fff9678
   13bd8:	1fff9674 	.word	0x1fff9674

00013bdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13bdc:	b500      	push	{lr}
   13bde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13be0:	f7ed f814 	bl	c0c <Sys_GetCoreID>
   13be4:	4603      	mov	r3, r0
   13be6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   13be8:	4a10      	ldr	r2, [pc, #64]	; (13c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13bea:	9b01      	ldr	r3, [sp, #4]
   13bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bf0:	2b00      	cmp	r3, #0
   13bf2:	d10d      	bne.n	13c10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13bf4:	f7ec fe9a 	bl	92c <Adc_schm_read_msr>
   13bf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13bfa:	9b00      	ldr	r3, [sp, #0]
   13bfc:	f003 0301 	and.w	r3, r3, #1
   13c00:	2b00      	cmp	r3, #0
   13c02:	d100      	bne.n	13c06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   13c06:	490a      	ldr	r1, [pc, #40]	; (13c30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   13c08:	9b01      	ldr	r3, [sp, #4]
   13c0a:	9a00      	ldr	r2, [sp, #0]
   13c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   13c10:	4a06      	ldr	r2, [pc, #24]	; (13c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13c12:	9b01      	ldr	r3, [sp, #4]
   13c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c18:	1c5a      	adds	r2, r3, #1
   13c1a:	4904      	ldr	r1, [pc, #16]	; (13c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13c1c:	9b01      	ldr	r3, [sp, #4]
   13c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c22:	bf00      	nop
   13c24:	b003      	add	sp, #12
   13c26:	f85d fb04 	ldr.w	pc, [sp], #4
   13c2a:	bf00      	nop
   13c2c:	1fff9680 	.word	0x1fff9680
   13c30:	1fff967c 	.word	0x1fff967c

00013c34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13c34:	b500      	push	{lr}
   13c36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c38:	f7ec ffe8 	bl	c0c <Sys_GetCoreID>
   13c3c:	4603      	mov	r3, r0
   13c3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   13c40:	4a0d      	ldr	r2, [pc, #52]	; (13c78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13c42:	9b01      	ldr	r3, [sp, #4]
   13c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c48:	1e5a      	subs	r2, r3, #1
   13c4a:	490b      	ldr	r1, [pc, #44]	; (13c78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13c4c:	9b01      	ldr	r3, [sp, #4]
   13c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   13c52:	4a0a      	ldr	r2, [pc, #40]	; (13c7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   13c54:	9b01      	ldr	r3, [sp, #4]
   13c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c5a:	f003 0301 	and.w	r3, r3, #1
   13c5e:	2b00      	cmp	r3, #0
   13c60:	d106      	bne.n	13c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   13c62:	4a05      	ldr	r2, [pc, #20]	; (13c78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13c64:	9b01      	ldr	r3, [sp, #4]
   13c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c6a:	2b00      	cmp	r3, #0
   13c6c:	d100      	bne.n	13c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c70:	bf00      	nop
   13c72:	b003      	add	sp, #12
   13c74:	f85d fb04 	ldr.w	pc, [sp], #4
   13c78:	1fff9680 	.word	0x1fff9680
   13c7c:	1fff967c 	.word	0x1fff967c

00013c80 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13c80:	b500      	push	{lr}
   13c82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c84:	f7ec ffc2 	bl	c0c <Sys_GetCoreID>
   13c88:	4603      	mov	r3, r0
   13c8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
   13c8c:	4a10      	ldr	r2, [pc, #64]	; (13cd0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13c8e:	9b01      	ldr	r3, [sp, #4]
   13c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c94:	2b00      	cmp	r3, #0
   13c96:	d10d      	bne.n	13cb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c98:	f7ec fe51 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13c9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c9e:	9b00      	ldr	r3, [sp, #0]
   13ca0:	f003 0301 	and.w	r3, r3, #1
   13ca4:	2b00      	cmp	r3, #0
   13ca6:	d100      	bne.n	13caa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ca8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   13caa:	490a      	ldr	r1, [pc, #40]	; (13cd4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
   13cac:	9b01      	ldr	r3, [sp, #4]
   13cae:	9a00      	ldr	r2, [sp, #0]
   13cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
   13cb4:	4a06      	ldr	r2, [pc, #24]	; (13cd0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13cb6:	9b01      	ldr	r3, [sp, #4]
   13cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cbc:	1c5a      	adds	r2, r3, #1
   13cbe:	4904      	ldr	r1, [pc, #16]	; (13cd0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13cc0:	9b01      	ldr	r3, [sp, #4]
   13cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13cc6:	bf00      	nop
   13cc8:	b003      	add	sp, #12
   13cca:	f85d fb04 	ldr.w	pc, [sp], #4
   13cce:	bf00      	nop
   13cd0:	1fff9688 	.word	0x1fff9688
   13cd4:	1fff9684 	.word	0x1fff9684

00013cd8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13cd8:	b500      	push	{lr}
   13cda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cdc:	f7ec ff96 	bl	c0c <Sys_GetCoreID>
   13ce0:	4603      	mov	r3, r0
   13ce2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
   13ce4:	4a0d      	ldr	r2, [pc, #52]	; (13d1c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13ce6:	9b01      	ldr	r3, [sp, #4]
   13ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cec:	1e5a      	subs	r2, r3, #1
   13cee:	490b      	ldr	r1, [pc, #44]	; (13d1c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13cf0:	9b01      	ldr	r3, [sp, #4]
   13cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   13cf6:	4a0a      	ldr	r2, [pc, #40]	; (13d20 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
   13cf8:	9b01      	ldr	r3, [sp, #4]
   13cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cfe:	f003 0301 	and.w	r3, r3, #1
   13d02:	2b00      	cmp	r3, #0
   13d04:	d106      	bne.n	13d14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
   13d06:	4a05      	ldr	r2, [pc, #20]	; (13d1c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13d08:	9b01      	ldr	r3, [sp, #4]
   13d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d0e:	2b00      	cmp	r3, #0
   13d10:	d100      	bne.n	13d14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d14:	bf00      	nop
   13d16:	b003      	add	sp, #12
   13d18:	f85d fb04 	ldr.w	pc, [sp], #4
   13d1c:	1fff9688 	.word	0x1fff9688
   13d20:	1fff9684 	.word	0x1fff9684

00013d24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13d24:	b500      	push	{lr}
   13d26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d28:	f7ec ff70 	bl	c0c <Sys_GetCoreID>
   13d2c:	4603      	mov	r3, r0
   13d2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
   13d30:	4a10      	ldr	r2, [pc, #64]	; (13d74 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13d32:	9b01      	ldr	r3, [sp, #4]
   13d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d38:	2b00      	cmp	r3, #0
   13d3a:	d10d      	bne.n	13d58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d3c:	f7ec fdff 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13d40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d42:	9b00      	ldr	r3, [sp, #0]
   13d44:	f003 0301 	and.w	r3, r3, #1
   13d48:	2b00      	cmp	r3, #0
   13d4a:	d100      	bne.n	13d4e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   13d4e:	490a      	ldr	r1, [pc, #40]	; (13d78 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
   13d50:	9b01      	ldr	r3, [sp, #4]
   13d52:	9a00      	ldr	r2, [sp, #0]
   13d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
   13d58:	4a06      	ldr	r2, [pc, #24]	; (13d74 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13d5a:	9b01      	ldr	r3, [sp, #4]
   13d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d60:	1c5a      	adds	r2, r3, #1
   13d62:	4904      	ldr	r1, [pc, #16]	; (13d74 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13d64:	9b01      	ldr	r3, [sp, #4]
   13d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d6a:	bf00      	nop
   13d6c:	b003      	add	sp, #12
   13d6e:	f85d fb04 	ldr.w	pc, [sp], #4
   13d72:	bf00      	nop
   13d74:	1fff9690 	.word	0x1fff9690
   13d78:	1fff968c 	.word	0x1fff968c

00013d7c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13d7c:	b500      	push	{lr}
   13d7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d80:	f7ec ff44 	bl	c0c <Sys_GetCoreID>
   13d84:	4603      	mov	r3, r0
   13d86:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
   13d88:	4a0d      	ldr	r2, [pc, #52]	; (13dc0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13d8a:	9b01      	ldr	r3, [sp, #4]
   13d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d90:	1e5a      	subs	r2, r3, #1
   13d92:	490b      	ldr	r1, [pc, #44]	; (13dc0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13d94:	9b01      	ldr	r3, [sp, #4]
   13d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   13d9a:	4a0a      	ldr	r2, [pc, #40]	; (13dc4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
   13d9c:	9b01      	ldr	r3, [sp, #4]
   13d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13da2:	f003 0301 	and.w	r3, r3, #1
   13da6:	2b00      	cmp	r3, #0
   13da8:	d106      	bne.n	13db8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
   13daa:	4a05      	ldr	r2, [pc, #20]	; (13dc0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13dac:	9b01      	ldr	r3, [sp, #4]
   13dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13db2:	2b00      	cmp	r3, #0
   13db4:	d100      	bne.n	13db8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13db6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13db8:	bf00      	nop
   13dba:	b003      	add	sp, #12
   13dbc:	f85d fb04 	ldr.w	pc, [sp], #4
   13dc0:	1fff9690 	.word	0x1fff9690
   13dc4:	1fff968c 	.word	0x1fff968c

00013dc8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13dc8:	b500      	push	{lr}
   13dca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13dcc:	f7ec ff1e 	bl	c0c <Sys_GetCoreID>
   13dd0:	4603      	mov	r3, r0
   13dd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
   13dd4:	4a10      	ldr	r2, [pc, #64]	; (13e18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13dd6:	9b01      	ldr	r3, [sp, #4]
   13dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ddc:	2b00      	cmp	r3, #0
   13dde:	d10d      	bne.n	13dfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13de0:	f7ec fdad 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13de4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13de6:	9b00      	ldr	r3, [sp, #0]
   13de8:	f003 0301 	and.w	r3, r3, #1
   13dec:	2b00      	cmp	r3, #0
   13dee:	d100      	bne.n	13df2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13df0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   13df2:	490a      	ldr	r1, [pc, #40]	; (13e1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
   13df4:	9b01      	ldr	r3, [sp, #4]
   13df6:	9a00      	ldr	r2, [sp, #0]
   13df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
   13dfc:	4a06      	ldr	r2, [pc, #24]	; (13e18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13dfe:	9b01      	ldr	r3, [sp, #4]
   13e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e04:	1c5a      	adds	r2, r3, #1
   13e06:	4904      	ldr	r1, [pc, #16]	; (13e18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13e08:	9b01      	ldr	r3, [sp, #4]
   13e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e0e:	bf00      	nop
   13e10:	b003      	add	sp, #12
   13e12:	f85d fb04 	ldr.w	pc, [sp], #4
   13e16:	bf00      	nop
   13e18:	1fff9698 	.word	0x1fff9698
   13e1c:	1fff9694 	.word	0x1fff9694

00013e20 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13e20:	b500      	push	{lr}
   13e22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e24:	f7ec fef2 	bl	c0c <Sys_GetCoreID>
   13e28:	4603      	mov	r3, r0
   13e2a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
   13e2c:	4a0d      	ldr	r2, [pc, #52]	; (13e64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13e2e:	9b01      	ldr	r3, [sp, #4]
   13e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e34:	1e5a      	subs	r2, r3, #1
   13e36:	490b      	ldr	r1, [pc, #44]	; (13e64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13e38:	9b01      	ldr	r3, [sp, #4]
   13e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   13e3e:	4a0a      	ldr	r2, [pc, #40]	; (13e68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
   13e40:	9b01      	ldr	r3, [sp, #4]
   13e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e46:	f003 0301 	and.w	r3, r3, #1
   13e4a:	2b00      	cmp	r3, #0
   13e4c:	d106      	bne.n	13e5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
   13e4e:	4a05      	ldr	r2, [pc, #20]	; (13e64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13e50:	9b01      	ldr	r3, [sp, #4]
   13e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e56:	2b00      	cmp	r3, #0
   13e58:	d100      	bne.n	13e5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e5c:	bf00      	nop
   13e5e:	b003      	add	sp, #12
   13e60:	f85d fb04 	ldr.w	pc, [sp], #4
   13e64:	1fff9698 	.word	0x1fff9698
   13e68:	1fff9694 	.word	0x1fff9694

00013e6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13e6c:	b500      	push	{lr}
   13e6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e70:	f7ec fecc 	bl	c0c <Sys_GetCoreID>
   13e74:	4603      	mov	r3, r0
   13e76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
   13e78:	4a10      	ldr	r2, [pc, #64]	; (13ebc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13e7a:	9b01      	ldr	r3, [sp, #4]
   13e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e80:	2b00      	cmp	r3, #0
   13e82:	d10d      	bne.n	13ea0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e84:	f7ec fd5b 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13e88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e8a:	9b00      	ldr	r3, [sp, #0]
   13e8c:	f003 0301 	and.w	r3, r3, #1
   13e90:	2b00      	cmp	r3, #0
   13e92:	d100      	bne.n	13e96 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   13e96:	490a      	ldr	r1, [pc, #40]	; (13ec0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
   13e98:	9b01      	ldr	r3, [sp, #4]
   13e9a:	9a00      	ldr	r2, [sp, #0]
   13e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
   13ea0:	4a06      	ldr	r2, [pc, #24]	; (13ebc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13ea2:	9b01      	ldr	r3, [sp, #4]
   13ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ea8:	1c5a      	adds	r2, r3, #1
   13eaa:	4904      	ldr	r1, [pc, #16]	; (13ebc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13eac:	9b01      	ldr	r3, [sp, #4]
   13eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13eb2:	bf00      	nop
   13eb4:	b003      	add	sp, #12
   13eb6:	f85d fb04 	ldr.w	pc, [sp], #4
   13eba:	bf00      	nop
   13ebc:	1fff96a0 	.word	0x1fff96a0
   13ec0:	1fff969c 	.word	0x1fff969c

00013ec4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13ec4:	b500      	push	{lr}
   13ec6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ec8:	f7ec fea0 	bl	c0c <Sys_GetCoreID>
   13ecc:	4603      	mov	r3, r0
   13ece:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
   13ed0:	4a0d      	ldr	r2, [pc, #52]	; (13f08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13ed2:	9b01      	ldr	r3, [sp, #4]
   13ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ed8:	1e5a      	subs	r2, r3, #1
   13eda:	490b      	ldr	r1, [pc, #44]	; (13f08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13edc:	9b01      	ldr	r3, [sp, #4]
   13ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   13ee2:	4a0a      	ldr	r2, [pc, #40]	; (13f0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
   13ee4:	9b01      	ldr	r3, [sp, #4]
   13ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eea:	f003 0301 	and.w	r3, r3, #1
   13eee:	2b00      	cmp	r3, #0
   13ef0:	d106      	bne.n	13f00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
   13ef2:	4a05      	ldr	r2, [pc, #20]	; (13f08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13ef4:	9b01      	ldr	r3, [sp, #4]
   13ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13efa:	2b00      	cmp	r3, #0
   13efc:	d100      	bne.n	13f00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13efe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f00:	bf00      	nop
   13f02:	b003      	add	sp, #12
   13f04:	f85d fb04 	ldr.w	pc, [sp], #4
   13f08:	1fff96a0 	.word	0x1fff96a0
   13f0c:	1fff969c 	.word	0x1fff969c

00013f10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   13f10:	b500      	push	{lr}
   13f12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f14:	f7ec fe7a 	bl	c0c <Sys_GetCoreID>
   13f18:	4603      	mov	r3, r0
   13f1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
   13f1c:	4a10      	ldr	r2, [pc, #64]	; (13f60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13f1e:	9b01      	ldr	r3, [sp, #4]
   13f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f24:	2b00      	cmp	r3, #0
   13f26:	d10d      	bne.n	13f44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f28:	f7ec fd09 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13f2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f2e:	9b00      	ldr	r3, [sp, #0]
   13f30:	f003 0301 	and.w	r3, r3, #1
   13f34:	2b00      	cmp	r3, #0
   13f36:	d100      	bne.n	13f3a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   13f3a:	490a      	ldr	r1, [pc, #40]	; (13f64 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
   13f3c:	9b01      	ldr	r3, [sp, #4]
   13f3e:	9a00      	ldr	r2, [sp, #0]
   13f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
   13f44:	4a06      	ldr	r2, [pc, #24]	; (13f60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13f46:	9b01      	ldr	r3, [sp, #4]
   13f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f4c:	1c5a      	adds	r2, r3, #1
   13f4e:	4904      	ldr	r1, [pc, #16]	; (13f60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13f50:	9b01      	ldr	r3, [sp, #4]
   13f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f56:	bf00      	nop
   13f58:	b003      	add	sp, #12
   13f5a:	f85d fb04 	ldr.w	pc, [sp], #4
   13f5e:	bf00      	nop
   13f60:	1fff96a8 	.word	0x1fff96a8
   13f64:	1fff96a4 	.word	0x1fff96a4

00013f68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   13f68:	b500      	push	{lr}
   13f6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f6c:	f7ec fe4e 	bl	c0c <Sys_GetCoreID>
   13f70:	4603      	mov	r3, r0
   13f72:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
   13f74:	4a0d      	ldr	r2, [pc, #52]	; (13fac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13f76:	9b01      	ldr	r3, [sp, #4]
   13f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f7c:	1e5a      	subs	r2, r3, #1
   13f7e:	490b      	ldr	r1, [pc, #44]	; (13fac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13f80:	9b01      	ldr	r3, [sp, #4]
   13f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   13f86:	4a0a      	ldr	r2, [pc, #40]	; (13fb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
   13f88:	9b01      	ldr	r3, [sp, #4]
   13f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f8e:	f003 0301 	and.w	r3, r3, #1
   13f92:	2b00      	cmp	r3, #0
   13f94:	d106      	bne.n	13fa4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
   13f96:	4a05      	ldr	r2, [pc, #20]	; (13fac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13f98:	9b01      	ldr	r3, [sp, #4]
   13f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f9e:	2b00      	cmp	r3, #0
   13fa0:	d100      	bne.n	13fa4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13fa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13fa4:	bf00      	nop
   13fa6:	b003      	add	sp, #12
   13fa8:	f85d fb04 	ldr.w	pc, [sp], #4
   13fac:	1fff96a8 	.word	0x1fff96a8
   13fb0:	1fff96a4 	.word	0x1fff96a4

00013fb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   13fb4:	b500      	push	{lr}
   13fb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fb8:	f7ec fe28 	bl	c0c <Sys_GetCoreID>
   13fbc:	4603      	mov	r3, r0
   13fbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
   13fc0:	4a10      	ldr	r2, [pc, #64]	; (14004 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   13fc2:	9b01      	ldr	r3, [sp, #4]
   13fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fc8:	2b00      	cmp	r3, #0
   13fca:	d10d      	bne.n	13fe8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13fcc:	f7ec fcb7 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13fd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13fd2:	9b00      	ldr	r3, [sp, #0]
   13fd4:	f003 0301 	and.w	r3, r3, #1
   13fd8:	2b00      	cmp	r3, #0
   13fda:	d100      	bne.n	13fde <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13fdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   13fde:	490a      	ldr	r1, [pc, #40]	; (14008 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
   13fe0:	9b01      	ldr	r3, [sp, #4]
   13fe2:	9a00      	ldr	r2, [sp, #0]
   13fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
   13fe8:	4a06      	ldr	r2, [pc, #24]	; (14004 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   13fea:	9b01      	ldr	r3, [sp, #4]
   13fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ff0:	1c5a      	adds	r2, r3, #1
   13ff2:	4904      	ldr	r1, [pc, #16]	; (14004 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   13ff4:	9b01      	ldr	r3, [sp, #4]
   13ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ffa:	bf00      	nop
   13ffc:	b003      	add	sp, #12
   13ffe:	f85d fb04 	ldr.w	pc, [sp], #4
   14002:	bf00      	nop
   14004:	1fff96b0 	.word	0x1fff96b0
   14008:	1fff96ac 	.word	0x1fff96ac

0001400c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   1400c:	b500      	push	{lr}
   1400e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14010:	f7ec fdfc 	bl	c0c <Sys_GetCoreID>
   14014:	4603      	mov	r3, r0
   14016:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
   14018:	4a0d      	ldr	r2, [pc, #52]	; (14050 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   1401a:	9b01      	ldr	r3, [sp, #4]
   1401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14020:	1e5a      	subs	r2, r3, #1
   14022:	490b      	ldr	r1, [pc, #44]	; (14050 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   14024:	9b01      	ldr	r3, [sp, #4]
   14026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1402a:	4a0a      	ldr	r2, [pc, #40]	; (14054 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
   1402c:	9b01      	ldr	r3, [sp, #4]
   1402e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14032:	f003 0301 	and.w	r3, r3, #1
   14036:	2b00      	cmp	r3, #0
   14038:	d106      	bne.n	14048 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
   1403a:	4a05      	ldr	r2, [pc, #20]	; (14050 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   1403c:	9b01      	ldr	r3, [sp, #4]
   1403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14042:	2b00      	cmp	r3, #0
   14044:	d100      	bne.n	14048 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14046:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14048:	bf00      	nop
   1404a:	b003      	add	sp, #12
   1404c:	f85d fb04 	ldr.w	pc, [sp], #4
   14050:	1fff96b0 	.word	0x1fff96b0
   14054:	1fff96ac 	.word	0x1fff96ac

00014058 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   14058:	b500      	push	{lr}
   1405a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1405c:	f7ec fdd6 	bl	c0c <Sys_GetCoreID>
   14060:	4603      	mov	r3, r0
   14062:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
   14064:	4a10      	ldr	r2, [pc, #64]	; (140a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   14066:	9b01      	ldr	r3, [sp, #4]
   14068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1406c:	2b00      	cmp	r3, #0
   1406e:	d10d      	bne.n	1408c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14070:	f7ec fc65 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14074:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14076:	9b00      	ldr	r3, [sp, #0]
   14078:	f003 0301 	and.w	r3, r3, #1
   1407c:	2b00      	cmp	r3, #0
   1407e:	d100      	bne.n	14082 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14080:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   14082:	490a      	ldr	r1, [pc, #40]	; (140ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
   14084:	9b01      	ldr	r3, [sp, #4]
   14086:	9a00      	ldr	r2, [sp, #0]
   14088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
   1408c:	4a06      	ldr	r2, [pc, #24]	; (140a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   1408e:	9b01      	ldr	r3, [sp, #4]
   14090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14094:	1c5a      	adds	r2, r3, #1
   14096:	4904      	ldr	r1, [pc, #16]	; (140a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   14098:	9b01      	ldr	r3, [sp, #4]
   1409a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1409e:	bf00      	nop
   140a0:	b003      	add	sp, #12
   140a2:	f85d fb04 	ldr.w	pc, [sp], #4
   140a6:	bf00      	nop
   140a8:	1fff96b8 	.word	0x1fff96b8
   140ac:	1fff96b4 	.word	0x1fff96b4

000140b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   140b0:	b500      	push	{lr}
   140b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140b4:	f7ec fdaa 	bl	c0c <Sys_GetCoreID>
   140b8:	4603      	mov	r3, r0
   140ba:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
   140bc:	4a0d      	ldr	r2, [pc, #52]	; (140f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   140be:	9b01      	ldr	r3, [sp, #4]
   140c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140c4:	1e5a      	subs	r2, r3, #1
   140c6:	490b      	ldr	r1, [pc, #44]	; (140f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   140c8:	9b01      	ldr	r3, [sp, #4]
   140ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   140ce:	4a0a      	ldr	r2, [pc, #40]	; (140f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
   140d0:	9b01      	ldr	r3, [sp, #4]
   140d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140d6:	f003 0301 	and.w	r3, r3, #1
   140da:	2b00      	cmp	r3, #0
   140dc:	d106      	bne.n	140ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
   140de:	4a05      	ldr	r2, [pc, #20]	; (140f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   140e0:	9b01      	ldr	r3, [sp, #4]
   140e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140e6:	2b00      	cmp	r3, #0
   140e8:	d100      	bne.n	140ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   140ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   140ec:	bf00      	nop
   140ee:	b003      	add	sp, #12
   140f0:	f85d fb04 	ldr.w	pc, [sp], #4
   140f4:	1fff96b8 	.word	0x1fff96b8
   140f8:	1fff96b4 	.word	0x1fff96b4

000140fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   140fc:	b500      	push	{lr}
   140fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14100:	f7ec fd84 	bl	c0c <Sys_GetCoreID>
   14104:	4603      	mov	r3, r0
   14106:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
   14108:	4a10      	ldr	r2, [pc, #64]	; (1414c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   1410a:	9b01      	ldr	r3, [sp, #4]
   1410c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14110:	2b00      	cmp	r3, #0
   14112:	d10d      	bne.n	14130 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14114:	f7ec fc13 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14118:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1411a:	9b00      	ldr	r3, [sp, #0]
   1411c:	f003 0301 	and.w	r3, r3, #1
   14120:	2b00      	cmp	r3, #0
   14122:	d100      	bne.n	14126 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14124:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   14126:	490a      	ldr	r1, [pc, #40]	; (14150 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
   14128:	9b01      	ldr	r3, [sp, #4]
   1412a:	9a00      	ldr	r2, [sp, #0]
   1412c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
   14130:	4a06      	ldr	r2, [pc, #24]	; (1414c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   14132:	9b01      	ldr	r3, [sp, #4]
   14134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14138:	1c5a      	adds	r2, r3, #1
   1413a:	4904      	ldr	r1, [pc, #16]	; (1414c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   1413c:	9b01      	ldr	r3, [sp, #4]
   1413e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14142:	bf00      	nop
   14144:	b003      	add	sp, #12
   14146:	f85d fb04 	ldr.w	pc, [sp], #4
   1414a:	bf00      	nop
   1414c:	1fff96c0 	.word	0x1fff96c0
   14150:	1fff96bc 	.word	0x1fff96bc

00014154 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   14154:	b500      	push	{lr}
   14156:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14158:	f7ec fd58 	bl	c0c <Sys_GetCoreID>
   1415c:	4603      	mov	r3, r0
   1415e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
   14160:	4a0d      	ldr	r2, [pc, #52]	; (14198 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   14162:	9b01      	ldr	r3, [sp, #4]
   14164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14168:	1e5a      	subs	r2, r3, #1
   1416a:	490b      	ldr	r1, [pc, #44]	; (14198 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   1416c:	9b01      	ldr	r3, [sp, #4]
   1416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   14172:	4a0a      	ldr	r2, [pc, #40]	; (1419c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
   14174:	9b01      	ldr	r3, [sp, #4]
   14176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1417a:	f003 0301 	and.w	r3, r3, #1
   1417e:	2b00      	cmp	r3, #0
   14180:	d106      	bne.n	14190 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
   14182:	4a05      	ldr	r2, [pc, #20]	; (14198 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   14184:	9b01      	ldr	r3, [sp, #4]
   14186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1418a:	2b00      	cmp	r3, #0
   1418c:	d100      	bne.n	14190 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1418e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14190:	bf00      	nop
   14192:	b003      	add	sp, #12
   14194:	f85d fb04 	ldr.w	pc, [sp], #4
   14198:	1fff96c0 	.word	0x1fff96c0
   1419c:	1fff96bc 	.word	0x1fff96bc

000141a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   141a0:	b500      	push	{lr}
   141a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141a4:	f7ec fd32 	bl	c0c <Sys_GetCoreID>
   141a8:	4603      	mov	r3, r0
   141aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
   141ac:	4a10      	ldr	r2, [pc, #64]	; (141f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   141ae:	9b01      	ldr	r3, [sp, #4]
   141b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141b4:	2b00      	cmp	r3, #0
   141b6:	d10d      	bne.n	141d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   141b8:	f7ec fbc1 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   141bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   141be:	9b00      	ldr	r3, [sp, #0]
   141c0:	f003 0301 	and.w	r3, r3, #1
   141c4:	2b00      	cmp	r3, #0
   141c6:	d100      	bne.n	141ca <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   141c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   141ca:	490a      	ldr	r1, [pc, #40]	; (141f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
   141cc:	9b01      	ldr	r3, [sp, #4]
   141ce:	9a00      	ldr	r2, [sp, #0]
   141d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
   141d4:	4a06      	ldr	r2, [pc, #24]	; (141f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   141d6:	9b01      	ldr	r3, [sp, #4]
   141d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141dc:	1c5a      	adds	r2, r3, #1
   141de:	4904      	ldr	r1, [pc, #16]	; (141f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   141e0:	9b01      	ldr	r3, [sp, #4]
   141e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   141e6:	bf00      	nop
   141e8:	b003      	add	sp, #12
   141ea:	f85d fb04 	ldr.w	pc, [sp], #4
   141ee:	bf00      	nop
   141f0:	1fff96c8 	.word	0x1fff96c8
   141f4:	1fff96c4 	.word	0x1fff96c4

000141f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   141f8:	b500      	push	{lr}
   141fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141fc:	f7ec fd06 	bl	c0c <Sys_GetCoreID>
   14200:	4603      	mov	r3, r0
   14202:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
   14204:	4a0d      	ldr	r2, [pc, #52]	; (1423c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   14206:	9b01      	ldr	r3, [sp, #4]
   14208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1420c:	1e5a      	subs	r2, r3, #1
   1420e:	490b      	ldr	r1, [pc, #44]	; (1423c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   14210:	9b01      	ldr	r3, [sp, #4]
   14212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   14216:	4a0a      	ldr	r2, [pc, #40]	; (14240 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
   14218:	9b01      	ldr	r3, [sp, #4]
   1421a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1421e:	f003 0301 	and.w	r3, r3, #1
   14222:	2b00      	cmp	r3, #0
   14224:	d106      	bne.n	14234 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
   14226:	4a05      	ldr	r2, [pc, #20]	; (1423c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   14228:	9b01      	ldr	r3, [sp, #4]
   1422a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1422e:	2b00      	cmp	r3, #0
   14230:	d100      	bne.n	14234 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14232:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14234:	bf00      	nop
   14236:	b003      	add	sp, #12
   14238:	f85d fb04 	ldr.w	pc, [sp], #4
   1423c:	1fff96c8 	.word	0x1fff96c8
   14240:	1fff96c4 	.word	0x1fff96c4

00014244 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   14244:	b500      	push	{lr}
   14246:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14248:	f7ec fce0 	bl	c0c <Sys_GetCoreID>
   1424c:	4603      	mov	r3, r0
   1424e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
   14250:	4a10      	ldr	r2, [pc, #64]	; (14294 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   14252:	9b01      	ldr	r3, [sp, #4]
   14254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14258:	2b00      	cmp	r3, #0
   1425a:	d10d      	bne.n	14278 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1425c:	f7ec fb6f 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14260:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14262:	9b00      	ldr	r3, [sp, #0]
   14264:	f003 0301 	and.w	r3, r3, #1
   14268:	2b00      	cmp	r3, #0
   1426a:	d100      	bne.n	1426e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1426c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1426e:	490a      	ldr	r1, [pc, #40]	; (14298 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
   14270:	9b01      	ldr	r3, [sp, #4]
   14272:	9a00      	ldr	r2, [sp, #0]
   14274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
   14278:	4a06      	ldr	r2, [pc, #24]	; (14294 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   1427a:	9b01      	ldr	r3, [sp, #4]
   1427c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14280:	1c5a      	adds	r2, r3, #1
   14282:	4904      	ldr	r1, [pc, #16]	; (14294 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   14284:	9b01      	ldr	r3, [sp, #4]
   14286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1428a:	bf00      	nop
   1428c:	b003      	add	sp, #12
   1428e:	f85d fb04 	ldr.w	pc, [sp], #4
   14292:	bf00      	nop
   14294:	1fff96d0 	.word	0x1fff96d0
   14298:	1fff96cc 	.word	0x1fff96cc

0001429c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   1429c:	b500      	push	{lr}
   1429e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142a0:	f7ec fcb4 	bl	c0c <Sys_GetCoreID>
   142a4:	4603      	mov	r3, r0
   142a6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
   142a8:	4a0d      	ldr	r2, [pc, #52]	; (142e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   142aa:	9b01      	ldr	r3, [sp, #4]
   142ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142b0:	1e5a      	subs	r2, r3, #1
   142b2:	490b      	ldr	r1, [pc, #44]	; (142e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   142b4:	9b01      	ldr	r3, [sp, #4]
   142b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   142ba:	4a0a      	ldr	r2, [pc, #40]	; (142e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
   142bc:	9b01      	ldr	r3, [sp, #4]
   142be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142c2:	f003 0301 	and.w	r3, r3, #1
   142c6:	2b00      	cmp	r3, #0
   142c8:	d106      	bne.n	142d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
   142ca:	4a05      	ldr	r2, [pc, #20]	; (142e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   142cc:	9b01      	ldr	r3, [sp, #4]
   142ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142d2:	2b00      	cmp	r3, #0
   142d4:	d100      	bne.n	142d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   142d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   142d8:	bf00      	nop
   142da:	b003      	add	sp, #12
   142dc:	f85d fb04 	ldr.w	pc, [sp], #4
   142e0:	1fff96d0 	.word	0x1fff96d0
   142e4:	1fff96cc 	.word	0x1fff96cc

000142e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   142e8:	b500      	push	{lr}
   142ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142ec:	f7ec fc8e 	bl	c0c <Sys_GetCoreID>
   142f0:	4603      	mov	r3, r0
   142f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
   142f4:	4a10      	ldr	r2, [pc, #64]	; (14338 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   142f6:	9b01      	ldr	r3, [sp, #4]
   142f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142fc:	2b00      	cmp	r3, #0
   142fe:	d10d      	bne.n	1431c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14300:	f7ec fb1d 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14304:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14306:	9b00      	ldr	r3, [sp, #0]
   14308:	f003 0301 	and.w	r3, r3, #1
   1430c:	2b00      	cmp	r3, #0
   1430e:	d100      	bne.n	14312 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14310:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   14312:	490a      	ldr	r1, [pc, #40]	; (1433c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
   14314:	9b01      	ldr	r3, [sp, #4]
   14316:	9a00      	ldr	r2, [sp, #0]
   14318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
   1431c:	4a06      	ldr	r2, [pc, #24]	; (14338 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   1431e:	9b01      	ldr	r3, [sp, #4]
   14320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14324:	1c5a      	adds	r2, r3, #1
   14326:	4904      	ldr	r1, [pc, #16]	; (14338 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   14328:	9b01      	ldr	r3, [sp, #4]
   1432a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1432e:	bf00      	nop
   14330:	b003      	add	sp, #12
   14332:	f85d fb04 	ldr.w	pc, [sp], #4
   14336:	bf00      	nop
   14338:	1fff96d8 	.word	0x1fff96d8
   1433c:	1fff96d4 	.word	0x1fff96d4

00014340 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   14340:	b500      	push	{lr}
   14342:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14344:	f7ec fc62 	bl	c0c <Sys_GetCoreID>
   14348:	4603      	mov	r3, r0
   1434a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
   1434c:	4a0d      	ldr	r2, [pc, #52]	; (14384 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   1434e:	9b01      	ldr	r3, [sp, #4]
   14350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14354:	1e5a      	subs	r2, r3, #1
   14356:	490b      	ldr	r1, [pc, #44]	; (14384 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   14358:	9b01      	ldr	r3, [sp, #4]
   1435a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1435e:	4a0a      	ldr	r2, [pc, #40]	; (14388 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
   14360:	9b01      	ldr	r3, [sp, #4]
   14362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14366:	f003 0301 	and.w	r3, r3, #1
   1436a:	2b00      	cmp	r3, #0
   1436c:	d106      	bne.n	1437c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
   1436e:	4a05      	ldr	r2, [pc, #20]	; (14384 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   14370:	9b01      	ldr	r3, [sp, #4]
   14372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14376:	2b00      	cmp	r3, #0
   14378:	d100      	bne.n	1437c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1437a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1437c:	bf00      	nop
   1437e:	b003      	add	sp, #12
   14380:	f85d fb04 	ldr.w	pc, [sp], #4
   14384:	1fff96d8 	.word	0x1fff96d8
   14388:	1fff96d4 	.word	0x1fff96d4

0001438c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   1438c:	b500      	push	{lr}
   1438e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14390:	f7ec fc3c 	bl	c0c <Sys_GetCoreID>
   14394:	4603      	mov	r3, r0
   14396:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
   14398:	4a10      	ldr	r2, [pc, #64]	; (143dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   1439a:	9b01      	ldr	r3, [sp, #4]
   1439c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143a0:	2b00      	cmp	r3, #0
   143a2:	d10d      	bne.n	143c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   143a4:	f7ec facb 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   143a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   143aa:	9b00      	ldr	r3, [sp, #0]
   143ac:	f003 0301 	and.w	r3, r3, #1
   143b0:	2b00      	cmp	r3, #0
   143b2:	d100      	bne.n	143b6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   143b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   143b6:	490a      	ldr	r1, [pc, #40]	; (143e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
   143b8:	9b01      	ldr	r3, [sp, #4]
   143ba:	9a00      	ldr	r2, [sp, #0]
   143bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
   143c0:	4a06      	ldr	r2, [pc, #24]	; (143dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   143c2:	9b01      	ldr	r3, [sp, #4]
   143c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143c8:	1c5a      	adds	r2, r3, #1
   143ca:	4904      	ldr	r1, [pc, #16]	; (143dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   143cc:	9b01      	ldr	r3, [sp, #4]
   143ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   143d2:	bf00      	nop
   143d4:	b003      	add	sp, #12
   143d6:	f85d fb04 	ldr.w	pc, [sp], #4
   143da:	bf00      	nop
   143dc:	1fff96e0 	.word	0x1fff96e0
   143e0:	1fff96dc 	.word	0x1fff96dc

000143e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   143e4:	b500      	push	{lr}
   143e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143e8:	f7ec fc10 	bl	c0c <Sys_GetCoreID>
   143ec:	4603      	mov	r3, r0
   143ee:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
   143f0:	4a0d      	ldr	r2, [pc, #52]	; (14428 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   143f2:	9b01      	ldr	r3, [sp, #4]
   143f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143f8:	1e5a      	subs	r2, r3, #1
   143fa:	490b      	ldr	r1, [pc, #44]	; (14428 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   143fc:	9b01      	ldr	r3, [sp, #4]
   143fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   14402:	4a0a      	ldr	r2, [pc, #40]	; (1442c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
   14404:	9b01      	ldr	r3, [sp, #4]
   14406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1440a:	f003 0301 	and.w	r3, r3, #1
   1440e:	2b00      	cmp	r3, #0
   14410:	d106      	bne.n	14420 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
   14412:	4a05      	ldr	r2, [pc, #20]	; (14428 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   14414:	9b01      	ldr	r3, [sp, #4]
   14416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1441a:	2b00      	cmp	r3, #0
   1441c:	d100      	bne.n	14420 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1441e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14420:	bf00      	nop
   14422:	b003      	add	sp, #12
   14424:	f85d fb04 	ldr.w	pc, [sp], #4
   14428:	1fff96e0 	.word	0x1fff96e0
   1442c:	1fff96dc 	.word	0x1fff96dc

00014430 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   14430:	b500      	push	{lr}
   14432:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14434:	f7ec fbea 	bl	c0c <Sys_GetCoreID>
   14438:	4603      	mov	r3, r0
   1443a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
   1443c:	4a10      	ldr	r2, [pc, #64]	; (14480 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   1443e:	9b01      	ldr	r3, [sp, #4]
   14440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14444:	2b00      	cmp	r3, #0
   14446:	d10d      	bne.n	14464 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14448:	f7ec fa79 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   1444c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1444e:	9b00      	ldr	r3, [sp, #0]
   14450:	f003 0301 	and.w	r3, r3, #1
   14454:	2b00      	cmp	r3, #0
   14456:	d100      	bne.n	1445a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14458:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1445a:	490a      	ldr	r1, [pc, #40]	; (14484 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
   1445c:	9b01      	ldr	r3, [sp, #4]
   1445e:	9a00      	ldr	r2, [sp, #0]
   14460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
   14464:	4a06      	ldr	r2, [pc, #24]	; (14480 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   14466:	9b01      	ldr	r3, [sp, #4]
   14468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1446c:	1c5a      	adds	r2, r3, #1
   1446e:	4904      	ldr	r1, [pc, #16]	; (14480 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   14470:	9b01      	ldr	r3, [sp, #4]
   14472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14476:	bf00      	nop
   14478:	b003      	add	sp, #12
   1447a:	f85d fb04 	ldr.w	pc, [sp], #4
   1447e:	bf00      	nop
   14480:	1fff96e8 	.word	0x1fff96e8
   14484:	1fff96e4 	.word	0x1fff96e4

00014488 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   14488:	b500      	push	{lr}
   1448a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1448c:	f7ec fbbe 	bl	c0c <Sys_GetCoreID>
   14490:	4603      	mov	r3, r0
   14492:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
   14494:	4a0d      	ldr	r2, [pc, #52]	; (144cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   14496:	9b01      	ldr	r3, [sp, #4]
   14498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1449c:	1e5a      	subs	r2, r3, #1
   1449e:	490b      	ldr	r1, [pc, #44]	; (144cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   144a0:	9b01      	ldr	r3, [sp, #4]
   144a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   144a6:	4a0a      	ldr	r2, [pc, #40]	; (144d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
   144a8:	9b01      	ldr	r3, [sp, #4]
   144aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144ae:	f003 0301 	and.w	r3, r3, #1
   144b2:	2b00      	cmp	r3, #0
   144b4:	d106      	bne.n	144c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
   144b6:	4a05      	ldr	r2, [pc, #20]	; (144cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   144b8:	9b01      	ldr	r3, [sp, #4]
   144ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144be:	2b00      	cmp	r3, #0
   144c0:	d100      	bne.n	144c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   144c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   144c4:	bf00      	nop
   144c6:	b003      	add	sp, #12
   144c8:	f85d fb04 	ldr.w	pc, [sp], #4
   144cc:	1fff96e8 	.word	0x1fff96e8
   144d0:	1fff96e4 	.word	0x1fff96e4

000144d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   144d4:	b500      	push	{lr}
   144d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144d8:	f7ec fb98 	bl	c0c <Sys_GetCoreID>
   144dc:	4603      	mov	r3, r0
   144de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
   144e0:	4a10      	ldr	r2, [pc, #64]	; (14524 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   144e2:	9b01      	ldr	r3, [sp, #4]
   144e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144e8:	2b00      	cmp	r3, #0
   144ea:	d10d      	bne.n	14508 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   144ec:	f7ec fa27 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   144f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   144f2:	9b00      	ldr	r3, [sp, #0]
   144f4:	f003 0301 	and.w	r3, r3, #1
   144f8:	2b00      	cmp	r3, #0
   144fa:	d100      	bne.n	144fe <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   144fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   144fe:	490a      	ldr	r1, [pc, #40]	; (14528 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
   14500:	9b01      	ldr	r3, [sp, #4]
   14502:	9a00      	ldr	r2, [sp, #0]
   14504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
   14508:	4a06      	ldr	r2, [pc, #24]	; (14524 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   1450a:	9b01      	ldr	r3, [sp, #4]
   1450c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14510:	1c5a      	adds	r2, r3, #1
   14512:	4904      	ldr	r1, [pc, #16]	; (14524 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   14514:	9b01      	ldr	r3, [sp, #4]
   14516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1451a:	bf00      	nop
   1451c:	b003      	add	sp, #12
   1451e:	f85d fb04 	ldr.w	pc, [sp], #4
   14522:	bf00      	nop
   14524:	1fff96f0 	.word	0x1fff96f0
   14528:	1fff96ec 	.word	0x1fff96ec

0001452c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   1452c:	b500      	push	{lr}
   1452e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14530:	f7ec fb6c 	bl	c0c <Sys_GetCoreID>
   14534:	4603      	mov	r3, r0
   14536:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
   14538:	4a0d      	ldr	r2, [pc, #52]	; (14570 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   1453a:	9b01      	ldr	r3, [sp, #4]
   1453c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14540:	1e5a      	subs	r2, r3, #1
   14542:	490b      	ldr	r1, [pc, #44]	; (14570 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   14544:	9b01      	ldr	r3, [sp, #4]
   14546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1454a:	4a0a      	ldr	r2, [pc, #40]	; (14574 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
   1454c:	9b01      	ldr	r3, [sp, #4]
   1454e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14552:	f003 0301 	and.w	r3, r3, #1
   14556:	2b00      	cmp	r3, #0
   14558:	d106      	bne.n	14568 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
   1455a:	4a05      	ldr	r2, [pc, #20]	; (14570 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   1455c:	9b01      	ldr	r3, [sp, #4]
   1455e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14562:	2b00      	cmp	r3, #0
   14564:	d100      	bne.n	14568 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14566:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14568:	bf00      	nop
   1456a:	b003      	add	sp, #12
   1456c:	f85d fb04 	ldr.w	pc, [sp], #4
   14570:	1fff96f0 	.word	0x1fff96f0
   14574:	1fff96ec 	.word	0x1fff96ec

00014578 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   14578:	b500      	push	{lr}
   1457a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1457c:	f7ec fb46 	bl	c0c <Sys_GetCoreID>
   14580:	4603      	mov	r3, r0
   14582:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
   14584:	4a10      	ldr	r2, [pc, #64]	; (145c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   14586:	9b01      	ldr	r3, [sp, #4]
   14588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1458c:	2b00      	cmp	r3, #0
   1458e:	d10d      	bne.n	145ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14590:	f7ec f9d5 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14594:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14596:	9b00      	ldr	r3, [sp, #0]
   14598:	f003 0301 	and.w	r3, r3, #1
   1459c:	2b00      	cmp	r3, #0
   1459e:	d100      	bne.n	145a2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   145a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   145a2:	490a      	ldr	r1, [pc, #40]	; (145cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
   145a4:	9b01      	ldr	r3, [sp, #4]
   145a6:	9a00      	ldr	r2, [sp, #0]
   145a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
   145ac:	4a06      	ldr	r2, [pc, #24]	; (145c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   145ae:	9b01      	ldr	r3, [sp, #4]
   145b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145b4:	1c5a      	adds	r2, r3, #1
   145b6:	4904      	ldr	r1, [pc, #16]	; (145c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   145b8:	9b01      	ldr	r3, [sp, #4]
   145ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   145be:	bf00      	nop
   145c0:	b003      	add	sp, #12
   145c2:	f85d fb04 	ldr.w	pc, [sp], #4
   145c6:	bf00      	nop
   145c8:	1fff96f8 	.word	0x1fff96f8
   145cc:	1fff96f4 	.word	0x1fff96f4

000145d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   145d0:	b500      	push	{lr}
   145d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145d4:	f7ec fb1a 	bl	c0c <Sys_GetCoreID>
   145d8:	4603      	mov	r3, r0
   145da:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
   145dc:	4a0d      	ldr	r2, [pc, #52]	; (14614 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   145de:	9b01      	ldr	r3, [sp, #4]
   145e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145e4:	1e5a      	subs	r2, r3, #1
   145e6:	490b      	ldr	r1, [pc, #44]	; (14614 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   145e8:	9b01      	ldr	r3, [sp, #4]
   145ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   145ee:	4a0a      	ldr	r2, [pc, #40]	; (14618 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
   145f0:	9b01      	ldr	r3, [sp, #4]
   145f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145f6:	f003 0301 	and.w	r3, r3, #1
   145fa:	2b00      	cmp	r3, #0
   145fc:	d106      	bne.n	1460c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
   145fe:	4a05      	ldr	r2, [pc, #20]	; (14614 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   14600:	9b01      	ldr	r3, [sp, #4]
   14602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14606:	2b00      	cmp	r3, #0
   14608:	d100      	bne.n	1460c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1460a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1460c:	bf00      	nop
   1460e:	b003      	add	sp, #12
   14610:	f85d fb04 	ldr.w	pc, [sp], #4
   14614:	1fff96f8 	.word	0x1fff96f8
   14618:	1fff96f4 	.word	0x1fff96f4

0001461c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   1461c:	b500      	push	{lr}
   1461e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14620:	f7ec faf4 	bl	c0c <Sys_GetCoreID>
   14624:	4603      	mov	r3, r0
   14626:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
   14628:	4a10      	ldr	r2, [pc, #64]	; (1466c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   1462a:	9b01      	ldr	r3, [sp, #4]
   1462c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14630:	2b00      	cmp	r3, #0
   14632:	d10d      	bne.n	14650 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14634:	f7ec f983 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14638:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1463a:	9b00      	ldr	r3, [sp, #0]
   1463c:	f003 0301 	and.w	r3, r3, #1
   14640:	2b00      	cmp	r3, #0
   14642:	d100      	bne.n	14646 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14644:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   14646:	490a      	ldr	r1, [pc, #40]	; (14670 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
   14648:	9b01      	ldr	r3, [sp, #4]
   1464a:	9a00      	ldr	r2, [sp, #0]
   1464c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
   14650:	4a06      	ldr	r2, [pc, #24]	; (1466c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   14652:	9b01      	ldr	r3, [sp, #4]
   14654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14658:	1c5a      	adds	r2, r3, #1
   1465a:	4904      	ldr	r1, [pc, #16]	; (1466c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   1465c:	9b01      	ldr	r3, [sp, #4]
   1465e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14662:	bf00      	nop
   14664:	b003      	add	sp, #12
   14666:	f85d fb04 	ldr.w	pc, [sp], #4
   1466a:	bf00      	nop
   1466c:	1fff9700 	.word	0x1fff9700
   14670:	1fff96fc 	.word	0x1fff96fc

00014674 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   14674:	b500      	push	{lr}
   14676:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14678:	f7ec fac8 	bl	c0c <Sys_GetCoreID>
   1467c:	4603      	mov	r3, r0
   1467e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
   14680:	4a0d      	ldr	r2, [pc, #52]	; (146b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   14682:	9b01      	ldr	r3, [sp, #4]
   14684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14688:	1e5a      	subs	r2, r3, #1
   1468a:	490b      	ldr	r1, [pc, #44]	; (146b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   1468c:	9b01      	ldr	r3, [sp, #4]
   1468e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   14692:	4a0a      	ldr	r2, [pc, #40]	; (146bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
   14694:	9b01      	ldr	r3, [sp, #4]
   14696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1469a:	f003 0301 	and.w	r3, r3, #1
   1469e:	2b00      	cmp	r3, #0
   146a0:	d106      	bne.n	146b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
   146a2:	4a05      	ldr	r2, [pc, #20]	; (146b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   146a4:	9b01      	ldr	r3, [sp, #4]
   146a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146aa:	2b00      	cmp	r3, #0
   146ac:	d100      	bne.n	146b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   146ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   146b0:	bf00      	nop
   146b2:	b003      	add	sp, #12
   146b4:	f85d fb04 	ldr.w	pc, [sp], #4
   146b8:	1fff9700 	.word	0x1fff9700
   146bc:	1fff96fc 	.word	0x1fff96fc

000146c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   146c0:	b500      	push	{lr}
   146c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146c4:	f7ec faa2 	bl	c0c <Sys_GetCoreID>
   146c8:	4603      	mov	r3, r0
   146ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
   146cc:	4a10      	ldr	r2, [pc, #64]	; (14710 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   146ce:	9b01      	ldr	r3, [sp, #4]
   146d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146d4:	2b00      	cmp	r3, #0
   146d6:	d10d      	bne.n	146f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   146d8:	f7ec f931 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   146dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   146de:	9b00      	ldr	r3, [sp, #0]
   146e0:	f003 0301 	and.w	r3, r3, #1
   146e4:	2b00      	cmp	r3, #0
   146e6:	d100      	bne.n	146ea <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   146e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   146ea:	490a      	ldr	r1, [pc, #40]	; (14714 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
   146ec:	9b01      	ldr	r3, [sp, #4]
   146ee:	9a00      	ldr	r2, [sp, #0]
   146f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
   146f4:	4a06      	ldr	r2, [pc, #24]	; (14710 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   146f6:	9b01      	ldr	r3, [sp, #4]
   146f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146fc:	1c5a      	adds	r2, r3, #1
   146fe:	4904      	ldr	r1, [pc, #16]	; (14710 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   14700:	9b01      	ldr	r3, [sp, #4]
   14702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14706:	bf00      	nop
   14708:	b003      	add	sp, #12
   1470a:	f85d fb04 	ldr.w	pc, [sp], #4
   1470e:	bf00      	nop
   14710:	1fff9708 	.word	0x1fff9708
   14714:	1fff9704 	.word	0x1fff9704

00014718 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   14718:	b500      	push	{lr}
   1471a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1471c:	f7ec fa76 	bl	c0c <Sys_GetCoreID>
   14720:	4603      	mov	r3, r0
   14722:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
   14724:	4a0d      	ldr	r2, [pc, #52]	; (1475c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   14726:	9b01      	ldr	r3, [sp, #4]
   14728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1472c:	1e5a      	subs	r2, r3, #1
   1472e:	490b      	ldr	r1, [pc, #44]	; (1475c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   14730:	9b01      	ldr	r3, [sp, #4]
   14732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   14736:	4a0a      	ldr	r2, [pc, #40]	; (14760 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
   14738:	9b01      	ldr	r3, [sp, #4]
   1473a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1473e:	f003 0301 	and.w	r3, r3, #1
   14742:	2b00      	cmp	r3, #0
   14744:	d106      	bne.n	14754 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
   14746:	4a05      	ldr	r2, [pc, #20]	; (1475c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   14748:	9b01      	ldr	r3, [sp, #4]
   1474a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1474e:	2b00      	cmp	r3, #0
   14750:	d100      	bne.n	14754 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14752:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14754:	bf00      	nop
   14756:	b003      	add	sp, #12
   14758:	f85d fb04 	ldr.w	pc, [sp], #4
   1475c:	1fff9708 	.word	0x1fff9708
   14760:	1fff9704 	.word	0x1fff9704

00014764 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   14764:	b500      	push	{lr}
   14766:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14768:	f7ec fa50 	bl	c0c <Sys_GetCoreID>
   1476c:	4603      	mov	r3, r0
   1476e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
   14770:	4a10      	ldr	r2, [pc, #64]	; (147b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   14772:	9b01      	ldr	r3, [sp, #4]
   14774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14778:	2b00      	cmp	r3, #0
   1477a:	d10d      	bne.n	14798 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1477c:	f7ec f8df 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14780:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14782:	9b00      	ldr	r3, [sp, #0]
   14784:	f003 0301 	and.w	r3, r3, #1
   14788:	2b00      	cmp	r3, #0
   1478a:	d100      	bne.n	1478e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1478c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   1478e:	490a      	ldr	r1, [pc, #40]	; (147b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
   14790:	9b01      	ldr	r3, [sp, #4]
   14792:	9a00      	ldr	r2, [sp, #0]
   14794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
   14798:	4a06      	ldr	r2, [pc, #24]	; (147b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   1479a:	9b01      	ldr	r3, [sp, #4]
   1479c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147a0:	1c5a      	adds	r2, r3, #1
   147a2:	4904      	ldr	r1, [pc, #16]	; (147b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   147a4:	9b01      	ldr	r3, [sp, #4]
   147a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   147aa:	bf00      	nop
   147ac:	b003      	add	sp, #12
   147ae:	f85d fb04 	ldr.w	pc, [sp], #4
   147b2:	bf00      	nop
   147b4:	1fff9710 	.word	0x1fff9710
   147b8:	1fff970c 	.word	0x1fff970c

000147bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   147bc:	b500      	push	{lr}
   147be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147c0:	f7ec fa24 	bl	c0c <Sys_GetCoreID>
   147c4:	4603      	mov	r3, r0
   147c6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
   147c8:	4a0d      	ldr	r2, [pc, #52]	; (14800 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   147ca:	9b01      	ldr	r3, [sp, #4]
   147cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147d0:	1e5a      	subs	r2, r3, #1
   147d2:	490b      	ldr	r1, [pc, #44]	; (14800 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   147d4:	9b01      	ldr	r3, [sp, #4]
   147d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   147da:	4a0a      	ldr	r2, [pc, #40]	; (14804 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
   147dc:	9b01      	ldr	r3, [sp, #4]
   147de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147e2:	f003 0301 	and.w	r3, r3, #1
   147e6:	2b00      	cmp	r3, #0
   147e8:	d106      	bne.n	147f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
   147ea:	4a05      	ldr	r2, [pc, #20]	; (14800 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   147ec:	9b01      	ldr	r3, [sp, #4]
   147ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147f2:	2b00      	cmp	r3, #0
   147f4:	d100      	bne.n	147f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   147f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   147f8:	bf00      	nop
   147fa:	b003      	add	sp, #12
   147fc:	f85d fb04 	ldr.w	pc, [sp], #4
   14800:	1fff9710 	.word	0x1fff9710
   14804:	1fff970c 	.word	0x1fff970c

00014808 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   14808:	b500      	push	{lr}
   1480a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1480c:	f7ec f9fe 	bl	c0c <Sys_GetCoreID>
   14810:	4603      	mov	r3, r0
   14812:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
   14814:	4a10      	ldr	r2, [pc, #64]	; (14858 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   14816:	9b01      	ldr	r3, [sp, #4]
   14818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1481c:	2b00      	cmp	r3, #0
   1481e:	d10d      	bne.n	1483c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14820:	f7ec f88d 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14824:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14826:	9b00      	ldr	r3, [sp, #0]
   14828:	f003 0301 	and.w	r3, r3, #1
   1482c:	2b00      	cmp	r3, #0
   1482e:	d100      	bne.n	14832 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14830:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   14832:	490a      	ldr	r1, [pc, #40]	; (1485c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
   14834:	9b01      	ldr	r3, [sp, #4]
   14836:	9a00      	ldr	r2, [sp, #0]
   14838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
   1483c:	4a06      	ldr	r2, [pc, #24]	; (14858 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   1483e:	9b01      	ldr	r3, [sp, #4]
   14840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14844:	1c5a      	adds	r2, r3, #1
   14846:	4904      	ldr	r1, [pc, #16]	; (14858 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   14848:	9b01      	ldr	r3, [sp, #4]
   1484a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1484e:	bf00      	nop
   14850:	b003      	add	sp, #12
   14852:	f85d fb04 	ldr.w	pc, [sp], #4
   14856:	bf00      	nop
   14858:	1fff9718 	.word	0x1fff9718
   1485c:	1fff9714 	.word	0x1fff9714

00014860 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   14860:	b500      	push	{lr}
   14862:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14864:	f7ec f9d2 	bl	c0c <Sys_GetCoreID>
   14868:	4603      	mov	r3, r0
   1486a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
   1486c:	4a0d      	ldr	r2, [pc, #52]	; (148a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   1486e:	9b01      	ldr	r3, [sp, #4]
   14870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14874:	1e5a      	subs	r2, r3, #1
   14876:	490b      	ldr	r1, [pc, #44]	; (148a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   14878:	9b01      	ldr	r3, [sp, #4]
   1487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   1487e:	4a0a      	ldr	r2, [pc, #40]	; (148a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
   14880:	9b01      	ldr	r3, [sp, #4]
   14882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14886:	f003 0301 	and.w	r3, r3, #1
   1488a:	2b00      	cmp	r3, #0
   1488c:	d106      	bne.n	1489c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
   1488e:	4a05      	ldr	r2, [pc, #20]	; (148a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   14890:	9b01      	ldr	r3, [sp, #4]
   14892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14896:	2b00      	cmp	r3, #0
   14898:	d100      	bne.n	1489c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1489a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1489c:	bf00      	nop
   1489e:	b003      	add	sp, #12
   148a0:	f85d fb04 	ldr.w	pc, [sp], #4
   148a4:	1fff9718 	.word	0x1fff9718
   148a8:	1fff9714 	.word	0x1fff9714

000148ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   148ac:	b500      	push	{lr}
   148ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148b0:	f7ec f9ac 	bl	c0c <Sys_GetCoreID>
   148b4:	4603      	mov	r3, r0
   148b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
   148b8:	4a10      	ldr	r2, [pc, #64]	; (148fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   148ba:	9b01      	ldr	r3, [sp, #4]
   148bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148c0:	2b00      	cmp	r3, #0
   148c2:	d10d      	bne.n	148e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   148c4:	f7ec f83b 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   148c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   148ca:	9b00      	ldr	r3, [sp, #0]
   148cc:	f003 0301 	and.w	r3, r3, #1
   148d0:	2b00      	cmp	r3, #0
   148d2:	d100      	bne.n	148d6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   148d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   148d6:	490a      	ldr	r1, [pc, #40]	; (14900 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
   148d8:	9b01      	ldr	r3, [sp, #4]
   148da:	9a00      	ldr	r2, [sp, #0]
   148dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
   148e0:	4a06      	ldr	r2, [pc, #24]	; (148fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   148e2:	9b01      	ldr	r3, [sp, #4]
   148e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148e8:	1c5a      	adds	r2, r3, #1
   148ea:	4904      	ldr	r1, [pc, #16]	; (148fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   148ec:	9b01      	ldr	r3, [sp, #4]
   148ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   148f2:	bf00      	nop
   148f4:	b003      	add	sp, #12
   148f6:	f85d fb04 	ldr.w	pc, [sp], #4
   148fa:	bf00      	nop
   148fc:	1fff9720 	.word	0x1fff9720
   14900:	1fff971c 	.word	0x1fff971c

00014904 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   14904:	b500      	push	{lr}
   14906:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14908:	f7ec f980 	bl	c0c <Sys_GetCoreID>
   1490c:	4603      	mov	r3, r0
   1490e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
   14910:	4a0d      	ldr	r2, [pc, #52]	; (14948 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   14912:	9b01      	ldr	r3, [sp, #4]
   14914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14918:	1e5a      	subs	r2, r3, #1
   1491a:	490b      	ldr	r1, [pc, #44]	; (14948 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   1491c:	9b01      	ldr	r3, [sp, #4]
   1491e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   14922:	4a0a      	ldr	r2, [pc, #40]	; (1494c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
   14924:	9b01      	ldr	r3, [sp, #4]
   14926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1492a:	f003 0301 	and.w	r3, r3, #1
   1492e:	2b00      	cmp	r3, #0
   14930:	d106      	bne.n	14940 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
   14932:	4a05      	ldr	r2, [pc, #20]	; (14948 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   14934:	9b01      	ldr	r3, [sp, #4]
   14936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1493a:	2b00      	cmp	r3, #0
   1493c:	d100      	bne.n	14940 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1493e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14940:	bf00      	nop
   14942:	b003      	add	sp, #12
   14944:	f85d fb04 	ldr.w	pc, [sp], #4
   14948:	1fff9720 	.word	0x1fff9720
   1494c:	1fff971c 	.word	0x1fff971c

00014950 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   14950:	b500      	push	{lr}
   14952:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14954:	f7ec f95a 	bl	c0c <Sys_GetCoreID>
   14958:	4603      	mov	r3, r0
   1495a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
   1495c:	4a10      	ldr	r2, [pc, #64]	; (149a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   1495e:	9b01      	ldr	r3, [sp, #4]
   14960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14964:	2b00      	cmp	r3, #0
   14966:	d10d      	bne.n	14984 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14968:	f7eb ffe9 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   1496c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1496e:	9b00      	ldr	r3, [sp, #0]
   14970:	f003 0301 	and.w	r3, r3, #1
   14974:	2b00      	cmp	r3, #0
   14976:	d100      	bne.n	1497a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14978:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1497a:	490a      	ldr	r1, [pc, #40]	; (149a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
   1497c:	9b01      	ldr	r3, [sp, #4]
   1497e:	9a00      	ldr	r2, [sp, #0]
   14980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
   14984:	4a06      	ldr	r2, [pc, #24]	; (149a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   14986:	9b01      	ldr	r3, [sp, #4]
   14988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1498c:	1c5a      	adds	r2, r3, #1
   1498e:	4904      	ldr	r1, [pc, #16]	; (149a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   14990:	9b01      	ldr	r3, [sp, #4]
   14992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14996:	bf00      	nop
   14998:	b003      	add	sp, #12
   1499a:	f85d fb04 	ldr.w	pc, [sp], #4
   1499e:	bf00      	nop
   149a0:	1fff9728 	.word	0x1fff9728
   149a4:	1fff9724 	.word	0x1fff9724

000149a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   149a8:	b500      	push	{lr}
   149aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149ac:	f7ec f92e 	bl	c0c <Sys_GetCoreID>
   149b0:	4603      	mov	r3, r0
   149b2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
   149b4:	4a0d      	ldr	r2, [pc, #52]	; (149ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   149b6:	9b01      	ldr	r3, [sp, #4]
   149b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149bc:	1e5a      	subs	r2, r3, #1
   149be:	490b      	ldr	r1, [pc, #44]	; (149ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   149c0:	9b01      	ldr	r3, [sp, #4]
   149c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   149c6:	4a0a      	ldr	r2, [pc, #40]	; (149f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
   149c8:	9b01      	ldr	r3, [sp, #4]
   149ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149ce:	f003 0301 	and.w	r3, r3, #1
   149d2:	2b00      	cmp	r3, #0
   149d4:	d106      	bne.n	149e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
   149d6:	4a05      	ldr	r2, [pc, #20]	; (149ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   149d8:	9b01      	ldr	r3, [sp, #4]
   149da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149de:	2b00      	cmp	r3, #0
   149e0:	d100      	bne.n	149e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   149e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   149e4:	bf00      	nop
   149e6:	b003      	add	sp, #12
   149e8:	f85d fb04 	ldr.w	pc, [sp], #4
   149ec:	1fff9728 	.word	0x1fff9728
   149f0:	1fff9724 	.word	0x1fff9724

000149f4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   149f4:	b500      	push	{lr}
   149f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149f8:	f7ec f908 	bl	c0c <Sys_GetCoreID>
   149fc:	4603      	mov	r3, r0
   149fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   14a00:	4a10      	ldr	r2, [pc, #64]	; (14a44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14a02:	9b01      	ldr	r3, [sp, #4]
   14a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a08:	2b00      	cmp	r3, #0
   14a0a:	d10d      	bne.n	14a28 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a0c:	f7eb ffa0 	bl	950 <Mcu_schm_read_msr>
   14a10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a12:	9b00      	ldr	r3, [sp, #0]
   14a14:	f003 0301 	and.w	r3, r3, #1
   14a18:	2b00      	cmp	r3, #0
   14a1a:	d100      	bne.n	14a1e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   14a1e:	490a      	ldr	r1, [pc, #40]	; (14a48 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   14a20:	9b01      	ldr	r3, [sp, #4]
   14a22:	9a00      	ldr	r2, [sp, #0]
   14a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   14a28:	4a06      	ldr	r2, [pc, #24]	; (14a44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14a2a:	9b01      	ldr	r3, [sp, #4]
   14a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a30:	1c5a      	adds	r2, r3, #1
   14a32:	4904      	ldr	r1, [pc, #16]	; (14a44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14a34:	9b01      	ldr	r3, [sp, #4]
   14a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a3a:	bf00      	nop
   14a3c:	b003      	add	sp, #12
   14a3e:	f85d fb04 	ldr.w	pc, [sp], #4
   14a42:	bf00      	nop
   14a44:	1fff9730 	.word	0x1fff9730
   14a48:	1fff972c 	.word	0x1fff972c

00014a4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   14a4c:	b500      	push	{lr}
   14a4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a50:	f7ec f8dc 	bl	c0c <Sys_GetCoreID>
   14a54:	4603      	mov	r3, r0
   14a56:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   14a58:	4a0d      	ldr	r2, [pc, #52]	; (14a90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14a5a:	9b01      	ldr	r3, [sp, #4]
   14a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a60:	1e5a      	subs	r2, r3, #1
   14a62:	490b      	ldr	r1, [pc, #44]	; (14a90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14a64:	9b01      	ldr	r3, [sp, #4]
   14a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   14a6a:	4a0a      	ldr	r2, [pc, #40]	; (14a94 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   14a6c:	9b01      	ldr	r3, [sp, #4]
   14a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a72:	f003 0301 	and.w	r3, r3, #1
   14a76:	2b00      	cmp	r3, #0
   14a78:	d106      	bne.n	14a88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   14a7a:	4a05      	ldr	r2, [pc, #20]	; (14a90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14a7c:	9b01      	ldr	r3, [sp, #4]
   14a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a82:	2b00      	cmp	r3, #0
   14a84:	d100      	bne.n	14a88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a88:	bf00      	nop
   14a8a:	b003      	add	sp, #12
   14a8c:	f85d fb04 	ldr.w	pc, [sp], #4
   14a90:	1fff9730 	.word	0x1fff9730
   14a94:	1fff972c 	.word	0x1fff972c

00014a98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14a98:	b500      	push	{lr}
   14a9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a9c:	f7ec f8b6 	bl	c0c <Sys_GetCoreID>
   14aa0:	4603      	mov	r3, r0
   14aa2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   14aa4:	4a10      	ldr	r2, [pc, #64]	; (14ae8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14aa6:	9b01      	ldr	r3, [sp, #4]
   14aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aac:	2b00      	cmp	r3, #0
   14aae:	d10d      	bne.n	14acc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ab0:	f7eb ff4e 	bl	950 <Mcu_schm_read_msr>
   14ab4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ab6:	9b00      	ldr	r3, [sp, #0]
   14ab8:	f003 0301 	and.w	r3, r3, #1
   14abc:	2b00      	cmp	r3, #0
   14abe:	d100      	bne.n	14ac2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ac0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14ac2:	490a      	ldr	r1, [pc, #40]	; (14aec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   14ac4:	9b01      	ldr	r3, [sp, #4]
   14ac6:	9a00      	ldr	r2, [sp, #0]
   14ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   14acc:	4a06      	ldr	r2, [pc, #24]	; (14ae8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14ace:	9b01      	ldr	r3, [sp, #4]
   14ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ad4:	1c5a      	adds	r2, r3, #1
   14ad6:	4904      	ldr	r1, [pc, #16]	; (14ae8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14ad8:	9b01      	ldr	r3, [sp, #4]
   14ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ade:	bf00      	nop
   14ae0:	b003      	add	sp, #12
   14ae2:	f85d fb04 	ldr.w	pc, [sp], #4
   14ae6:	bf00      	nop
   14ae8:	1fff9738 	.word	0x1fff9738
   14aec:	1fff9734 	.word	0x1fff9734

00014af0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14af0:	b500      	push	{lr}
   14af2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14af4:	f7ec f88a 	bl	c0c <Sys_GetCoreID>
   14af8:	4603      	mov	r3, r0
   14afa:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   14afc:	4a0d      	ldr	r2, [pc, #52]	; (14b34 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14afe:	9b01      	ldr	r3, [sp, #4]
   14b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b04:	1e5a      	subs	r2, r3, #1
   14b06:	490b      	ldr	r1, [pc, #44]	; (14b34 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14b08:	9b01      	ldr	r3, [sp, #4]
   14b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14b0e:	4a0a      	ldr	r2, [pc, #40]	; (14b38 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   14b10:	9b01      	ldr	r3, [sp, #4]
   14b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b16:	f003 0301 	and.w	r3, r3, #1
   14b1a:	2b00      	cmp	r3, #0
   14b1c:	d106      	bne.n	14b2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   14b1e:	4a05      	ldr	r2, [pc, #20]	; (14b34 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14b20:	9b01      	ldr	r3, [sp, #4]
   14b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b26:	2b00      	cmp	r3, #0
   14b28:	d100      	bne.n	14b2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b2c:	bf00      	nop
   14b2e:	b003      	add	sp, #12
   14b30:	f85d fb04 	ldr.w	pc, [sp], #4
   14b34:	1fff9738 	.word	0x1fff9738
   14b38:	1fff9734 	.word	0x1fff9734

00014b3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14b3c:	b500      	push	{lr}
   14b3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b40:	f7ec f864 	bl	c0c <Sys_GetCoreID>
   14b44:	4603      	mov	r3, r0
   14b46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   14b48:	4a10      	ldr	r2, [pc, #64]	; (14b8c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14b4a:	9b01      	ldr	r3, [sp, #4]
   14b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b50:	2b00      	cmp	r3, #0
   14b52:	d10d      	bne.n	14b70 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b54:	f7eb fefc 	bl	950 <Mcu_schm_read_msr>
   14b58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b5a:	9b00      	ldr	r3, [sp, #0]
   14b5c:	f003 0301 	and.w	r3, r3, #1
   14b60:	2b00      	cmp	r3, #0
   14b62:	d100      	bne.n	14b66 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14b66:	490a      	ldr	r1, [pc, #40]	; (14b90 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   14b68:	9b01      	ldr	r3, [sp, #4]
   14b6a:	9a00      	ldr	r2, [sp, #0]
   14b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   14b70:	4a06      	ldr	r2, [pc, #24]	; (14b8c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14b72:	9b01      	ldr	r3, [sp, #4]
   14b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b78:	1c5a      	adds	r2, r3, #1
   14b7a:	4904      	ldr	r1, [pc, #16]	; (14b8c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14b7c:	9b01      	ldr	r3, [sp, #4]
   14b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b82:	bf00      	nop
   14b84:	b003      	add	sp, #12
   14b86:	f85d fb04 	ldr.w	pc, [sp], #4
   14b8a:	bf00      	nop
   14b8c:	1fff9740 	.word	0x1fff9740
   14b90:	1fff973c 	.word	0x1fff973c

00014b94 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14b94:	b500      	push	{lr}
   14b96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b98:	f7ec f838 	bl	c0c <Sys_GetCoreID>
   14b9c:	4603      	mov	r3, r0
   14b9e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   14ba0:	4a0d      	ldr	r2, [pc, #52]	; (14bd8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14ba2:	9b01      	ldr	r3, [sp, #4]
   14ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ba8:	1e5a      	subs	r2, r3, #1
   14baa:	490b      	ldr	r1, [pc, #44]	; (14bd8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14bac:	9b01      	ldr	r3, [sp, #4]
   14bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14bb2:	4a0a      	ldr	r2, [pc, #40]	; (14bdc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   14bb4:	9b01      	ldr	r3, [sp, #4]
   14bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bba:	f003 0301 	and.w	r3, r3, #1
   14bbe:	2b00      	cmp	r3, #0
   14bc0:	d106      	bne.n	14bd0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   14bc2:	4a05      	ldr	r2, [pc, #20]	; (14bd8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14bc4:	9b01      	ldr	r3, [sp, #4]
   14bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bca:	2b00      	cmp	r3, #0
   14bcc:	d100      	bne.n	14bd0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14bce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14bd0:	bf00      	nop
   14bd2:	b003      	add	sp, #12
   14bd4:	f85d fb04 	ldr.w	pc, [sp], #4
   14bd8:	1fff9740 	.word	0x1fff9740
   14bdc:	1fff973c 	.word	0x1fff973c

00014be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14be0:	b500      	push	{lr}
   14be2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14be4:	f7ec f812 	bl	c0c <Sys_GetCoreID>
   14be8:	4603      	mov	r3, r0
   14bea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   14bec:	4a10      	ldr	r2, [pc, #64]	; (14c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14bee:	9b01      	ldr	r3, [sp, #4]
   14bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bf4:	2b00      	cmp	r3, #0
   14bf6:	d10d      	bne.n	14c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14bf8:	f7eb feb3 	bl	962 <Port_schm_read_msr>
   14bfc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14bfe:	9b00      	ldr	r3, [sp, #0]
   14c00:	f003 0301 	and.w	r3, r3, #1
   14c04:	2b00      	cmp	r3, #0
   14c06:	d100      	bne.n	14c0a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   14c0a:	490a      	ldr	r1, [pc, #40]	; (14c34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   14c0c:	9b01      	ldr	r3, [sp, #4]
   14c0e:	9a00      	ldr	r2, [sp, #0]
   14c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   14c14:	4a06      	ldr	r2, [pc, #24]	; (14c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14c16:	9b01      	ldr	r3, [sp, #4]
   14c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c1c:	1c5a      	adds	r2, r3, #1
   14c1e:	4904      	ldr	r1, [pc, #16]	; (14c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14c20:	9b01      	ldr	r3, [sp, #4]
   14c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c26:	bf00      	nop
   14c28:	b003      	add	sp, #12
   14c2a:	f85d fb04 	ldr.w	pc, [sp], #4
   14c2e:	bf00      	nop
   14c30:	1fff9748 	.word	0x1fff9748
   14c34:	1fff9744 	.word	0x1fff9744

00014c38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14c38:	b500      	push	{lr}
   14c3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c3c:	f7eb ffe6 	bl	c0c <Sys_GetCoreID>
   14c40:	4603      	mov	r3, r0
   14c42:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   14c44:	4a0d      	ldr	r2, [pc, #52]	; (14c7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14c46:	9b01      	ldr	r3, [sp, #4]
   14c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c4c:	1e5a      	subs	r2, r3, #1
   14c4e:	490b      	ldr	r1, [pc, #44]	; (14c7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14c50:	9b01      	ldr	r3, [sp, #4]
   14c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   14c56:	4a0a      	ldr	r2, [pc, #40]	; (14c80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   14c58:	9b01      	ldr	r3, [sp, #4]
   14c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c5e:	f003 0301 	and.w	r3, r3, #1
   14c62:	2b00      	cmp	r3, #0
   14c64:	d106      	bne.n	14c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   14c66:	4a05      	ldr	r2, [pc, #20]	; (14c7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14c68:	9b01      	ldr	r3, [sp, #4]
   14c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c6e:	2b00      	cmp	r3, #0
   14c70:	d100      	bne.n	14c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c74:	bf00      	nop
   14c76:	b003      	add	sp, #12
   14c78:	f85d fb04 	ldr.w	pc, [sp], #4
   14c7c:	1fff9748 	.word	0x1fff9748
   14c80:	1fff9744 	.word	0x1fff9744

00014c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14c84:	b500      	push	{lr}
   14c86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c88:	f7eb ffc0 	bl	c0c <Sys_GetCoreID>
   14c8c:	4603      	mov	r3, r0
   14c8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   14c90:	4a10      	ldr	r2, [pc, #64]	; (14cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14c92:	9b01      	ldr	r3, [sp, #4]
   14c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c98:	2b00      	cmp	r3, #0
   14c9a:	d10d      	bne.n	14cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c9c:	f7eb fe61 	bl	962 <Port_schm_read_msr>
   14ca0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ca2:	9b00      	ldr	r3, [sp, #0]
   14ca4:	f003 0301 	and.w	r3, r3, #1
   14ca8:	2b00      	cmp	r3, #0
   14caa:	d100      	bne.n	14cae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14cac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14cae:	490a      	ldr	r1, [pc, #40]	; (14cd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   14cb0:	9b01      	ldr	r3, [sp, #4]
   14cb2:	9a00      	ldr	r2, [sp, #0]
   14cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   14cb8:	4a06      	ldr	r2, [pc, #24]	; (14cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14cba:	9b01      	ldr	r3, [sp, #4]
   14cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cc0:	1c5a      	adds	r2, r3, #1
   14cc2:	4904      	ldr	r1, [pc, #16]	; (14cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14cc4:	9b01      	ldr	r3, [sp, #4]
   14cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14cca:	bf00      	nop
   14ccc:	b003      	add	sp, #12
   14cce:	f85d fb04 	ldr.w	pc, [sp], #4
   14cd2:	bf00      	nop
   14cd4:	1fff9750 	.word	0x1fff9750
   14cd8:	1fff974c 	.word	0x1fff974c

00014cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14cdc:	b500      	push	{lr}
   14cde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ce0:	f7eb ff94 	bl	c0c <Sys_GetCoreID>
   14ce4:	4603      	mov	r3, r0
   14ce6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   14ce8:	4a0d      	ldr	r2, [pc, #52]	; (14d20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14cea:	9b01      	ldr	r3, [sp, #4]
   14cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cf0:	1e5a      	subs	r2, r3, #1
   14cf2:	490b      	ldr	r1, [pc, #44]	; (14d20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14cf4:	9b01      	ldr	r3, [sp, #4]
   14cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14cfa:	4a0a      	ldr	r2, [pc, #40]	; (14d24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   14cfc:	9b01      	ldr	r3, [sp, #4]
   14cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d02:	f003 0301 	and.w	r3, r3, #1
   14d06:	2b00      	cmp	r3, #0
   14d08:	d106      	bne.n	14d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   14d0a:	4a05      	ldr	r2, [pc, #20]	; (14d20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14d0c:	9b01      	ldr	r3, [sp, #4]
   14d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d12:	2b00      	cmp	r3, #0
   14d14:	d100      	bne.n	14d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d18:	bf00      	nop
   14d1a:	b003      	add	sp, #12
   14d1c:	f85d fb04 	ldr.w	pc, [sp], #4
   14d20:	1fff9750 	.word	0x1fff9750
   14d24:	1fff974c 	.word	0x1fff974c

00014d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14d28:	b500      	push	{lr}
   14d2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d2c:	f7eb ff6e 	bl	c0c <Sys_GetCoreID>
   14d30:	4603      	mov	r3, r0
   14d32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   14d34:	4a10      	ldr	r2, [pc, #64]	; (14d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14d36:	9b01      	ldr	r3, [sp, #4]
   14d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d3c:	2b00      	cmp	r3, #0
   14d3e:	d10d      	bne.n	14d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d40:	f7eb fe0f 	bl	962 <Port_schm_read_msr>
   14d44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d46:	9b00      	ldr	r3, [sp, #0]
   14d48:	f003 0301 	and.w	r3, r3, #1
   14d4c:	2b00      	cmp	r3, #0
   14d4e:	d100      	bne.n	14d52 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14d52:	490a      	ldr	r1, [pc, #40]	; (14d7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   14d54:	9b01      	ldr	r3, [sp, #4]
   14d56:	9a00      	ldr	r2, [sp, #0]
   14d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   14d5c:	4a06      	ldr	r2, [pc, #24]	; (14d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14d5e:	9b01      	ldr	r3, [sp, #4]
   14d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d64:	1c5a      	adds	r2, r3, #1
   14d66:	4904      	ldr	r1, [pc, #16]	; (14d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14d68:	9b01      	ldr	r3, [sp, #4]
   14d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d6e:	bf00      	nop
   14d70:	b003      	add	sp, #12
   14d72:	f85d fb04 	ldr.w	pc, [sp], #4
   14d76:	bf00      	nop
   14d78:	1fff9758 	.word	0x1fff9758
   14d7c:	1fff9754 	.word	0x1fff9754

00014d80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14d80:	b500      	push	{lr}
   14d82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d84:	f7eb ff42 	bl	c0c <Sys_GetCoreID>
   14d88:	4603      	mov	r3, r0
   14d8a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   14d8c:	4a0d      	ldr	r2, [pc, #52]	; (14dc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14d8e:	9b01      	ldr	r3, [sp, #4]
   14d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d94:	1e5a      	subs	r2, r3, #1
   14d96:	490b      	ldr	r1, [pc, #44]	; (14dc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14d98:	9b01      	ldr	r3, [sp, #4]
   14d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14d9e:	4a0a      	ldr	r2, [pc, #40]	; (14dc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   14da0:	9b01      	ldr	r3, [sp, #4]
   14da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14da6:	f003 0301 	and.w	r3, r3, #1
   14daa:	2b00      	cmp	r3, #0
   14dac:	d106      	bne.n	14dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   14dae:	4a05      	ldr	r2, [pc, #20]	; (14dc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14db0:	9b01      	ldr	r3, [sp, #4]
   14db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14db6:	2b00      	cmp	r3, #0
   14db8:	d100      	bne.n	14dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14dba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14dbc:	bf00      	nop
   14dbe:	b003      	add	sp, #12
   14dc0:	f85d fb04 	ldr.w	pc, [sp], #4
   14dc4:	1fff9758 	.word	0x1fff9758
   14dc8:	1fff9754 	.word	0x1fff9754

00014dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14dcc:	b500      	push	{lr}
   14dce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dd0:	f7eb ff1c 	bl	c0c <Sys_GetCoreID>
   14dd4:	4603      	mov	r3, r0
   14dd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   14dd8:	4a10      	ldr	r2, [pc, #64]	; (14e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14dda:	9b01      	ldr	r3, [sp, #4]
   14ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14de0:	2b00      	cmp	r3, #0
   14de2:	d10d      	bne.n	14e00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14de4:	f7eb fdbd 	bl	962 <Port_schm_read_msr>
   14de8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14dea:	9b00      	ldr	r3, [sp, #0]
   14dec:	f003 0301 	and.w	r3, r3, #1
   14df0:	2b00      	cmp	r3, #0
   14df2:	d100      	bne.n	14df6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14df4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   14df6:	490a      	ldr	r1, [pc, #40]	; (14e20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   14df8:	9b01      	ldr	r3, [sp, #4]
   14dfa:	9a00      	ldr	r2, [sp, #0]
   14dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   14e00:	4a06      	ldr	r2, [pc, #24]	; (14e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14e02:	9b01      	ldr	r3, [sp, #4]
   14e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e08:	1c5a      	adds	r2, r3, #1
   14e0a:	4904      	ldr	r1, [pc, #16]	; (14e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14e0c:	9b01      	ldr	r3, [sp, #4]
   14e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e12:	bf00      	nop
   14e14:	b003      	add	sp, #12
   14e16:	f85d fb04 	ldr.w	pc, [sp], #4
   14e1a:	bf00      	nop
   14e1c:	1fff9760 	.word	0x1fff9760
   14e20:	1fff975c 	.word	0x1fff975c

00014e24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14e24:	b500      	push	{lr}
   14e26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e28:	f7eb fef0 	bl	c0c <Sys_GetCoreID>
   14e2c:	4603      	mov	r3, r0
   14e2e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   14e30:	4a0d      	ldr	r2, [pc, #52]	; (14e68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14e32:	9b01      	ldr	r3, [sp, #4]
   14e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e38:	1e5a      	subs	r2, r3, #1
   14e3a:	490b      	ldr	r1, [pc, #44]	; (14e68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14e3c:	9b01      	ldr	r3, [sp, #4]
   14e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   14e42:	4a0a      	ldr	r2, [pc, #40]	; (14e6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   14e44:	9b01      	ldr	r3, [sp, #4]
   14e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e4a:	f003 0301 	and.w	r3, r3, #1
   14e4e:	2b00      	cmp	r3, #0
   14e50:	d106      	bne.n	14e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   14e52:	4a05      	ldr	r2, [pc, #20]	; (14e68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14e54:	9b01      	ldr	r3, [sp, #4]
   14e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e5a:	2b00      	cmp	r3, #0
   14e5c:	d100      	bne.n	14e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e60:	bf00      	nop
   14e62:	b003      	add	sp, #12
   14e64:	f85d fb04 	ldr.w	pc, [sp], #4
   14e68:	1fff9760 	.word	0x1fff9760
   14e6c:	1fff975c 	.word	0x1fff975c

00014e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14e70:	b500      	push	{lr}
   14e72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e74:	f7eb feca 	bl	c0c <Sys_GetCoreID>
   14e78:	4603      	mov	r3, r0
   14e7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   14e7c:	4a10      	ldr	r2, [pc, #64]	; (14ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14e7e:	9b01      	ldr	r3, [sp, #4]
   14e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e84:	2b00      	cmp	r3, #0
   14e86:	d10d      	bne.n	14ea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e88:	f7eb fd6b 	bl	962 <Port_schm_read_msr>
   14e8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e8e:	9b00      	ldr	r3, [sp, #0]
   14e90:	f003 0301 	and.w	r3, r3, #1
   14e94:	2b00      	cmp	r3, #0
   14e96:	d100      	bne.n	14e9a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   14e9a:	490a      	ldr	r1, [pc, #40]	; (14ec4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   14e9c:	9b01      	ldr	r3, [sp, #4]
   14e9e:	9a00      	ldr	r2, [sp, #0]
   14ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   14ea4:	4a06      	ldr	r2, [pc, #24]	; (14ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14ea6:	9b01      	ldr	r3, [sp, #4]
   14ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eac:	1c5a      	adds	r2, r3, #1
   14eae:	4904      	ldr	r1, [pc, #16]	; (14ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14eb0:	9b01      	ldr	r3, [sp, #4]
   14eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14eb6:	bf00      	nop
   14eb8:	b003      	add	sp, #12
   14eba:	f85d fb04 	ldr.w	pc, [sp], #4
   14ebe:	bf00      	nop
   14ec0:	1fff9768 	.word	0x1fff9768
   14ec4:	1fff9764 	.word	0x1fff9764

00014ec8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14ec8:	b500      	push	{lr}
   14eca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ecc:	f7eb fe9e 	bl	c0c <Sys_GetCoreID>
   14ed0:	4603      	mov	r3, r0
   14ed2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   14ed4:	4a0d      	ldr	r2, [pc, #52]	; (14f0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14ed6:	9b01      	ldr	r3, [sp, #4]
   14ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14edc:	1e5a      	subs	r2, r3, #1
   14ede:	490b      	ldr	r1, [pc, #44]	; (14f0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14ee0:	9b01      	ldr	r3, [sp, #4]
   14ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   14ee6:	4a0a      	ldr	r2, [pc, #40]	; (14f10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   14ee8:	9b01      	ldr	r3, [sp, #4]
   14eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eee:	f003 0301 	and.w	r3, r3, #1
   14ef2:	2b00      	cmp	r3, #0
   14ef4:	d106      	bne.n	14f04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   14ef6:	4a05      	ldr	r2, [pc, #20]	; (14f0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14ef8:	9b01      	ldr	r3, [sp, #4]
   14efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14efe:	2b00      	cmp	r3, #0
   14f00:	d100      	bne.n	14f04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f04:	bf00      	nop
   14f06:	b003      	add	sp, #12
   14f08:	f85d fb04 	ldr.w	pc, [sp], #4
   14f0c:	1fff9768 	.word	0x1fff9768
   14f10:	1fff9764 	.word	0x1fff9764

00014f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   14f14:	b500      	push	{lr}
   14f16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f18:	f7eb fe78 	bl	c0c <Sys_GetCoreID>
   14f1c:	4603      	mov	r3, r0
   14f1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   14f20:	4a10      	ldr	r2, [pc, #64]	; (14f64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14f22:	9b01      	ldr	r3, [sp, #4]
   14f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f28:	2b00      	cmp	r3, #0
   14f2a:	d10d      	bne.n	14f48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f2c:	f7eb fd19 	bl	962 <Port_schm_read_msr>
   14f30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f32:	9b00      	ldr	r3, [sp, #0]
   14f34:	f003 0301 	and.w	r3, r3, #1
   14f38:	2b00      	cmp	r3, #0
   14f3a:	d100      	bne.n	14f3e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   14f3e:	490a      	ldr	r1, [pc, #40]	; (14f68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   14f40:	9b01      	ldr	r3, [sp, #4]
   14f42:	9a00      	ldr	r2, [sp, #0]
   14f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   14f48:	4a06      	ldr	r2, [pc, #24]	; (14f64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14f4a:	9b01      	ldr	r3, [sp, #4]
   14f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f50:	1c5a      	adds	r2, r3, #1
   14f52:	4904      	ldr	r1, [pc, #16]	; (14f64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14f54:	9b01      	ldr	r3, [sp, #4]
   14f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f5a:	bf00      	nop
   14f5c:	b003      	add	sp, #12
   14f5e:	f85d fb04 	ldr.w	pc, [sp], #4
   14f62:	bf00      	nop
   14f64:	1fff9770 	.word	0x1fff9770
   14f68:	1fff976c 	.word	0x1fff976c

00014f6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   14f6c:	b500      	push	{lr}
   14f6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f70:	f7eb fe4c 	bl	c0c <Sys_GetCoreID>
   14f74:	4603      	mov	r3, r0
   14f76:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   14f78:	4a0d      	ldr	r2, [pc, #52]	; (14fb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14f7a:	9b01      	ldr	r3, [sp, #4]
   14f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f80:	1e5a      	subs	r2, r3, #1
   14f82:	490b      	ldr	r1, [pc, #44]	; (14fb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14f84:	9b01      	ldr	r3, [sp, #4]
   14f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   14f8a:	4a0a      	ldr	r2, [pc, #40]	; (14fb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   14f8c:	9b01      	ldr	r3, [sp, #4]
   14f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f92:	f003 0301 	and.w	r3, r3, #1
   14f96:	2b00      	cmp	r3, #0
   14f98:	d106      	bne.n	14fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   14f9a:	4a05      	ldr	r2, [pc, #20]	; (14fb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14f9c:	9b01      	ldr	r3, [sp, #4]
   14f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fa2:	2b00      	cmp	r3, #0
   14fa4:	d100      	bne.n	14fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14fa6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14fa8:	bf00      	nop
   14faa:	b003      	add	sp, #12
   14fac:	f85d fb04 	ldr.w	pc, [sp], #4
   14fb0:	1fff9770 	.word	0x1fff9770
   14fb4:	1fff976c 	.word	0x1fff976c

00014fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   14fb8:	b500      	push	{lr}
   14fba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fbc:	f7eb fe26 	bl	c0c <Sys_GetCoreID>
   14fc0:	4603      	mov	r3, r0
   14fc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   14fc4:	4a10      	ldr	r2, [pc, #64]	; (15008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   14fc6:	9b01      	ldr	r3, [sp, #4]
   14fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fcc:	2b00      	cmp	r3, #0
   14fce:	d10d      	bne.n	14fec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14fd0:	f7eb fcc7 	bl	962 <Port_schm_read_msr>
   14fd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14fd6:	9b00      	ldr	r3, [sp, #0]
   14fd8:	f003 0301 	and.w	r3, r3, #1
   14fdc:	2b00      	cmp	r3, #0
   14fde:	d100      	bne.n	14fe2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14fe0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   14fe2:	490a      	ldr	r1, [pc, #40]	; (1500c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   14fe4:	9b01      	ldr	r3, [sp, #4]
   14fe6:	9a00      	ldr	r2, [sp, #0]
   14fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   14fec:	4a06      	ldr	r2, [pc, #24]	; (15008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   14fee:	9b01      	ldr	r3, [sp, #4]
   14ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ff4:	1c5a      	adds	r2, r3, #1
   14ff6:	4904      	ldr	r1, [pc, #16]	; (15008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   14ff8:	9b01      	ldr	r3, [sp, #4]
   14ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ffe:	bf00      	nop
   15000:	b003      	add	sp, #12
   15002:	f85d fb04 	ldr.w	pc, [sp], #4
   15006:	bf00      	nop
   15008:	1fff9778 	.word	0x1fff9778
   1500c:	1fff9774 	.word	0x1fff9774

00015010 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15010:	b500      	push	{lr}
   15012:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15014:	f7eb fdfa 	bl	c0c <Sys_GetCoreID>
   15018:	4603      	mov	r3, r0
   1501a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   1501c:	4a0d      	ldr	r2, [pc, #52]	; (15054 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   1501e:	9b01      	ldr	r3, [sp, #4]
   15020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15024:	1e5a      	subs	r2, r3, #1
   15026:	490b      	ldr	r1, [pc, #44]	; (15054 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15028:	9b01      	ldr	r3, [sp, #4]
   1502a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   1502e:	4a0a      	ldr	r2, [pc, #40]	; (15058 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   15030:	9b01      	ldr	r3, [sp, #4]
   15032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15036:	f003 0301 	and.w	r3, r3, #1
   1503a:	2b00      	cmp	r3, #0
   1503c:	d106      	bne.n	1504c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   1503e:	4a05      	ldr	r2, [pc, #20]	; (15054 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15040:	9b01      	ldr	r3, [sp, #4]
   15042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15046:	2b00      	cmp	r3, #0
   15048:	d100      	bne.n	1504c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1504a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1504c:	bf00      	nop
   1504e:	b003      	add	sp, #12
   15050:	f85d fb04 	ldr.w	pc, [sp], #4
   15054:	1fff9778 	.word	0x1fff9778
   15058:	1fff9774 	.word	0x1fff9774

0001505c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   1505c:	b500      	push	{lr}
   1505e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15060:	f7eb fdd4 	bl	c0c <Sys_GetCoreID>
   15064:	4603      	mov	r3, r0
   15066:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   15068:	4a10      	ldr	r2, [pc, #64]	; (150ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1506a:	9b01      	ldr	r3, [sp, #4]
   1506c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15070:	2b00      	cmp	r3, #0
   15072:	d10d      	bne.n	15090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15074:	f7eb fc75 	bl	962 <Port_schm_read_msr>
   15078:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1507a:	9b00      	ldr	r3, [sp, #0]
   1507c:	f003 0301 	and.w	r3, r3, #1
   15080:	2b00      	cmp	r3, #0
   15082:	d100      	bne.n	15086 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15084:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   15086:	490a      	ldr	r1, [pc, #40]	; (150b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   15088:	9b01      	ldr	r3, [sp, #4]
   1508a:	9a00      	ldr	r2, [sp, #0]
   1508c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   15090:	4a06      	ldr	r2, [pc, #24]	; (150ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15092:	9b01      	ldr	r3, [sp, #4]
   15094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15098:	1c5a      	adds	r2, r3, #1
   1509a:	4904      	ldr	r1, [pc, #16]	; (150ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1509c:	9b01      	ldr	r3, [sp, #4]
   1509e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   150a2:	bf00      	nop
   150a4:	b003      	add	sp, #12
   150a6:	f85d fb04 	ldr.w	pc, [sp], #4
   150aa:	bf00      	nop
   150ac:	1fff9780 	.word	0x1fff9780
   150b0:	1fff977c 	.word	0x1fff977c

000150b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   150b4:	b500      	push	{lr}
   150b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150b8:	f7eb fda8 	bl	c0c <Sys_GetCoreID>
   150bc:	4603      	mov	r3, r0
   150be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   150c0:	4a0d      	ldr	r2, [pc, #52]	; (150f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   150c2:	9b01      	ldr	r3, [sp, #4]
   150c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150c8:	1e5a      	subs	r2, r3, #1
   150ca:	490b      	ldr	r1, [pc, #44]	; (150f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   150cc:	9b01      	ldr	r3, [sp, #4]
   150ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   150d2:	4a0a      	ldr	r2, [pc, #40]	; (150fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   150d4:	9b01      	ldr	r3, [sp, #4]
   150d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150da:	f003 0301 	and.w	r3, r3, #1
   150de:	2b00      	cmp	r3, #0
   150e0:	d106      	bne.n	150f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   150e2:	4a05      	ldr	r2, [pc, #20]	; (150f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   150e4:	9b01      	ldr	r3, [sp, #4]
   150e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150ea:	2b00      	cmp	r3, #0
   150ec:	d100      	bne.n	150f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   150ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   150f0:	bf00      	nop
   150f2:	b003      	add	sp, #12
   150f4:	f85d fb04 	ldr.w	pc, [sp], #4
   150f8:	1fff9780 	.word	0x1fff9780
   150fc:	1fff977c 	.word	0x1fff977c

00015100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15100:	b500      	push	{lr}
   15102:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15104:	f7eb fd82 	bl	c0c <Sys_GetCoreID>
   15108:	4603      	mov	r3, r0
   1510a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   1510c:	4a10      	ldr	r2, [pc, #64]	; (15150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   1510e:	9b01      	ldr	r3, [sp, #4]
   15110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15114:	2b00      	cmp	r3, #0
   15116:	d10d      	bne.n	15134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15118:	f7eb fc23 	bl	962 <Port_schm_read_msr>
   1511c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1511e:	9b00      	ldr	r3, [sp, #0]
   15120:	f003 0301 	and.w	r3, r3, #1
   15124:	2b00      	cmp	r3, #0
   15126:	d100      	bne.n	1512a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15128:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1512a:	490a      	ldr	r1, [pc, #40]	; (15154 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   1512c:	9b01      	ldr	r3, [sp, #4]
   1512e:	9a00      	ldr	r2, [sp, #0]
   15130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   15134:	4a06      	ldr	r2, [pc, #24]	; (15150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15136:	9b01      	ldr	r3, [sp, #4]
   15138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1513c:	1c5a      	adds	r2, r3, #1
   1513e:	4904      	ldr	r1, [pc, #16]	; (15150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15140:	9b01      	ldr	r3, [sp, #4]
   15142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15146:	bf00      	nop
   15148:	b003      	add	sp, #12
   1514a:	f85d fb04 	ldr.w	pc, [sp], #4
   1514e:	bf00      	nop
   15150:	1fff9788 	.word	0x1fff9788
   15154:	1fff9784 	.word	0x1fff9784

00015158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15158:	b500      	push	{lr}
   1515a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1515c:	f7eb fd56 	bl	c0c <Sys_GetCoreID>
   15160:	4603      	mov	r3, r0
   15162:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   15164:	4a0d      	ldr	r2, [pc, #52]	; (1519c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15166:	9b01      	ldr	r3, [sp, #4]
   15168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1516c:	1e5a      	subs	r2, r3, #1
   1516e:	490b      	ldr	r1, [pc, #44]	; (1519c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15170:	9b01      	ldr	r3, [sp, #4]
   15172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   15176:	4a0a      	ldr	r2, [pc, #40]	; (151a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   15178:	9b01      	ldr	r3, [sp, #4]
   1517a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1517e:	f003 0301 	and.w	r3, r3, #1
   15182:	2b00      	cmp	r3, #0
   15184:	d106      	bne.n	15194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   15186:	4a05      	ldr	r2, [pc, #20]	; (1519c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15188:	9b01      	ldr	r3, [sp, #4]
   1518a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1518e:	2b00      	cmp	r3, #0
   15190:	d100      	bne.n	15194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15192:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15194:	bf00      	nop
   15196:	b003      	add	sp, #12
   15198:	f85d fb04 	ldr.w	pc, [sp], #4
   1519c:	1fff9788 	.word	0x1fff9788
   151a0:	1fff9784 	.word	0x1fff9784

000151a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   151a4:	b500      	push	{lr}
   151a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151a8:	f7eb fd30 	bl	c0c <Sys_GetCoreID>
   151ac:	4603      	mov	r3, r0
   151ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   151b0:	4a10      	ldr	r2, [pc, #64]	; (151f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   151b2:	9b01      	ldr	r3, [sp, #4]
   151b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151b8:	2b00      	cmp	r3, #0
   151ba:	d10d      	bne.n	151d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   151bc:	f7eb fbd1 	bl	962 <Port_schm_read_msr>
   151c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   151c2:	9b00      	ldr	r3, [sp, #0]
   151c4:	f003 0301 	and.w	r3, r3, #1
   151c8:	2b00      	cmp	r3, #0
   151ca:	d100      	bne.n	151ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   151cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   151ce:	490a      	ldr	r1, [pc, #40]	; (151f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   151d0:	9b01      	ldr	r3, [sp, #4]
   151d2:	9a00      	ldr	r2, [sp, #0]
   151d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   151d8:	4a06      	ldr	r2, [pc, #24]	; (151f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   151da:	9b01      	ldr	r3, [sp, #4]
   151dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151e0:	1c5a      	adds	r2, r3, #1
   151e2:	4904      	ldr	r1, [pc, #16]	; (151f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   151e4:	9b01      	ldr	r3, [sp, #4]
   151e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   151ea:	bf00      	nop
   151ec:	b003      	add	sp, #12
   151ee:	f85d fb04 	ldr.w	pc, [sp], #4
   151f2:	bf00      	nop
   151f4:	1fff9790 	.word	0x1fff9790
   151f8:	1fff978c 	.word	0x1fff978c

000151fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   151fc:	b500      	push	{lr}
   151fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15200:	f7eb fd04 	bl	c0c <Sys_GetCoreID>
   15204:	4603      	mov	r3, r0
   15206:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   15208:	4a0d      	ldr	r2, [pc, #52]	; (15240 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   1520a:	9b01      	ldr	r3, [sp, #4]
   1520c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15210:	1e5a      	subs	r2, r3, #1
   15212:	490b      	ldr	r1, [pc, #44]	; (15240 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15214:	9b01      	ldr	r3, [sp, #4]
   15216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1521a:	4a0a      	ldr	r2, [pc, #40]	; (15244 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   1521c:	9b01      	ldr	r3, [sp, #4]
   1521e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15222:	f003 0301 	and.w	r3, r3, #1
   15226:	2b00      	cmp	r3, #0
   15228:	d106      	bne.n	15238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   1522a:	4a05      	ldr	r2, [pc, #20]	; (15240 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   1522c:	9b01      	ldr	r3, [sp, #4]
   1522e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15232:	2b00      	cmp	r3, #0
   15234:	d100      	bne.n	15238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15236:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15238:	bf00      	nop
   1523a:	b003      	add	sp, #12
   1523c:	f85d fb04 	ldr.w	pc, [sp], #4
   15240:	1fff9790 	.word	0x1fff9790
   15244:	1fff978c 	.word	0x1fff978c

00015248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15248:	b500      	push	{lr}
   1524a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1524c:	f7eb fcde 	bl	c0c <Sys_GetCoreID>
   15250:	4603      	mov	r3, r0
   15252:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   15254:	4a10      	ldr	r2, [pc, #64]	; (15298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15256:	9b01      	ldr	r3, [sp, #4]
   15258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1525c:	2b00      	cmp	r3, #0
   1525e:	d10d      	bne.n	1527c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15260:	f7eb fb7f 	bl	962 <Port_schm_read_msr>
   15264:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15266:	9b00      	ldr	r3, [sp, #0]
   15268:	f003 0301 	and.w	r3, r3, #1
   1526c:	2b00      	cmp	r3, #0
   1526e:	d100      	bne.n	15272 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15270:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   15272:	490a      	ldr	r1, [pc, #40]	; (1529c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   15274:	9b01      	ldr	r3, [sp, #4]
   15276:	9a00      	ldr	r2, [sp, #0]
   15278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   1527c:	4a06      	ldr	r2, [pc, #24]	; (15298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   1527e:	9b01      	ldr	r3, [sp, #4]
   15280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15284:	1c5a      	adds	r2, r3, #1
   15286:	4904      	ldr	r1, [pc, #16]	; (15298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15288:	9b01      	ldr	r3, [sp, #4]
   1528a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1528e:	bf00      	nop
   15290:	b003      	add	sp, #12
   15292:	f85d fb04 	ldr.w	pc, [sp], #4
   15296:	bf00      	nop
   15298:	1fff9798 	.word	0x1fff9798
   1529c:	1fff9794 	.word	0x1fff9794

000152a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   152a0:	b500      	push	{lr}
   152a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152a4:	f7eb fcb2 	bl	c0c <Sys_GetCoreID>
   152a8:	4603      	mov	r3, r0
   152aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   152ac:	4a0d      	ldr	r2, [pc, #52]	; (152e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   152ae:	9b01      	ldr	r3, [sp, #4]
   152b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152b4:	1e5a      	subs	r2, r3, #1
   152b6:	490b      	ldr	r1, [pc, #44]	; (152e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   152b8:	9b01      	ldr	r3, [sp, #4]
   152ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   152be:	4a0a      	ldr	r2, [pc, #40]	; (152e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   152c0:	9b01      	ldr	r3, [sp, #4]
   152c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152c6:	f003 0301 	and.w	r3, r3, #1
   152ca:	2b00      	cmp	r3, #0
   152cc:	d106      	bne.n	152dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   152ce:	4a05      	ldr	r2, [pc, #20]	; (152e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   152d0:	9b01      	ldr	r3, [sp, #4]
   152d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152d6:	2b00      	cmp	r3, #0
   152d8:	d100      	bne.n	152dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   152da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   152dc:	bf00      	nop
   152de:	b003      	add	sp, #12
   152e0:	f85d fb04 	ldr.w	pc, [sp], #4
   152e4:	1fff9798 	.word	0x1fff9798
   152e8:	1fff9794 	.word	0x1fff9794

000152ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   152ec:	b500      	push	{lr}
   152ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152f0:	f7eb fc8c 	bl	c0c <Sys_GetCoreID>
   152f4:	4603      	mov	r3, r0
   152f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   152f8:	4a10      	ldr	r2, [pc, #64]	; (1533c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   152fa:	9b01      	ldr	r3, [sp, #4]
   152fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15300:	2b00      	cmp	r3, #0
   15302:	d10d      	bne.n	15320 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15304:	f7eb fb2d 	bl	962 <Port_schm_read_msr>
   15308:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1530a:	9b00      	ldr	r3, [sp, #0]
   1530c:	f003 0301 	and.w	r3, r3, #1
   15310:	2b00      	cmp	r3, #0
   15312:	d100      	bne.n	15316 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15314:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   15316:	490a      	ldr	r1, [pc, #40]	; (15340 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   15318:	9b01      	ldr	r3, [sp, #4]
   1531a:	9a00      	ldr	r2, [sp, #0]
   1531c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   15320:	4a06      	ldr	r2, [pc, #24]	; (1533c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15322:	9b01      	ldr	r3, [sp, #4]
   15324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15328:	1c5a      	adds	r2, r3, #1
   1532a:	4904      	ldr	r1, [pc, #16]	; (1533c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   1532c:	9b01      	ldr	r3, [sp, #4]
   1532e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15332:	bf00      	nop
   15334:	b003      	add	sp, #12
   15336:	f85d fb04 	ldr.w	pc, [sp], #4
   1533a:	bf00      	nop
   1533c:	1fff97a0 	.word	0x1fff97a0
   15340:	1fff979c 	.word	0x1fff979c

00015344 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15344:	b500      	push	{lr}
   15346:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15348:	f7eb fc60 	bl	c0c <Sys_GetCoreID>
   1534c:	4603      	mov	r3, r0
   1534e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   15350:	4a0d      	ldr	r2, [pc, #52]	; (15388 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15352:	9b01      	ldr	r3, [sp, #4]
   15354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15358:	1e5a      	subs	r2, r3, #1
   1535a:	490b      	ldr	r1, [pc, #44]	; (15388 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   1535c:	9b01      	ldr	r3, [sp, #4]
   1535e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   15362:	4a0a      	ldr	r2, [pc, #40]	; (1538c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   15364:	9b01      	ldr	r3, [sp, #4]
   15366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1536a:	f003 0301 	and.w	r3, r3, #1
   1536e:	2b00      	cmp	r3, #0
   15370:	d106      	bne.n	15380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   15372:	4a05      	ldr	r2, [pc, #20]	; (15388 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15374:	9b01      	ldr	r3, [sp, #4]
   15376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1537a:	2b00      	cmp	r3, #0
   1537c:	d100      	bne.n	15380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1537e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15380:	bf00      	nop
   15382:	b003      	add	sp, #12
   15384:	f85d fb04 	ldr.w	pc, [sp], #4
   15388:	1fff97a0 	.word	0x1fff97a0
   1538c:	1fff979c 	.word	0x1fff979c

00015390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15390:	b500      	push	{lr}
   15392:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15394:	f7eb fc3a 	bl	c0c <Sys_GetCoreID>
   15398:	4603      	mov	r3, r0
   1539a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   1539c:	4a10      	ldr	r2, [pc, #64]	; (153e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   1539e:	9b01      	ldr	r3, [sp, #4]
   153a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153a4:	2b00      	cmp	r3, #0
   153a6:	d10d      	bne.n	153c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   153a8:	f7eb fadb 	bl	962 <Port_schm_read_msr>
   153ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   153ae:	9b00      	ldr	r3, [sp, #0]
   153b0:	f003 0301 	and.w	r3, r3, #1
   153b4:	2b00      	cmp	r3, #0
   153b6:	d100      	bne.n	153ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   153b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   153ba:	490a      	ldr	r1, [pc, #40]	; (153e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   153bc:	9b01      	ldr	r3, [sp, #4]
   153be:	9a00      	ldr	r2, [sp, #0]
   153c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   153c4:	4a06      	ldr	r2, [pc, #24]	; (153e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   153c6:	9b01      	ldr	r3, [sp, #4]
   153c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153cc:	1c5a      	adds	r2, r3, #1
   153ce:	4904      	ldr	r1, [pc, #16]	; (153e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   153d0:	9b01      	ldr	r3, [sp, #4]
   153d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   153d6:	bf00      	nop
   153d8:	b003      	add	sp, #12
   153da:	f85d fb04 	ldr.w	pc, [sp], #4
   153de:	bf00      	nop
   153e0:	1fff97a8 	.word	0x1fff97a8
   153e4:	1fff97a4 	.word	0x1fff97a4

000153e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   153e8:	b500      	push	{lr}
   153ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153ec:	f7eb fc0e 	bl	c0c <Sys_GetCoreID>
   153f0:	4603      	mov	r3, r0
   153f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   153f4:	4a0d      	ldr	r2, [pc, #52]	; (1542c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   153f6:	9b01      	ldr	r3, [sp, #4]
   153f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153fc:	1e5a      	subs	r2, r3, #1
   153fe:	490b      	ldr	r1, [pc, #44]	; (1542c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15400:	9b01      	ldr	r3, [sp, #4]
   15402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   15406:	4a0a      	ldr	r2, [pc, #40]	; (15430 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   15408:	9b01      	ldr	r3, [sp, #4]
   1540a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1540e:	f003 0301 	and.w	r3, r3, #1
   15412:	2b00      	cmp	r3, #0
   15414:	d106      	bne.n	15424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   15416:	4a05      	ldr	r2, [pc, #20]	; (1542c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15418:	9b01      	ldr	r3, [sp, #4]
   1541a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1541e:	2b00      	cmp	r3, #0
   15420:	d100      	bne.n	15424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15422:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15424:	bf00      	nop
   15426:	b003      	add	sp, #12
   15428:	f85d fb04 	ldr.w	pc, [sp], #4
   1542c:	1fff97a8 	.word	0x1fff97a8
   15430:	1fff97a4 	.word	0x1fff97a4

00015434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15434:	b500      	push	{lr}
   15436:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15438:	f7eb fbe8 	bl	c0c <Sys_GetCoreID>
   1543c:	4603      	mov	r3, r0
   1543e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   15440:	4a10      	ldr	r2, [pc, #64]	; (15484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15442:	9b01      	ldr	r3, [sp, #4]
   15444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15448:	2b00      	cmp	r3, #0
   1544a:	d10d      	bne.n	15468 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1544c:	f7eb fa89 	bl	962 <Port_schm_read_msr>
   15450:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15452:	9b00      	ldr	r3, [sp, #0]
   15454:	f003 0301 	and.w	r3, r3, #1
   15458:	2b00      	cmp	r3, #0
   1545a:	d100      	bne.n	1545e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1545c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1545e:	490a      	ldr	r1, [pc, #40]	; (15488 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   15460:	9b01      	ldr	r3, [sp, #4]
   15462:	9a00      	ldr	r2, [sp, #0]
   15464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   15468:	4a06      	ldr	r2, [pc, #24]	; (15484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   1546a:	9b01      	ldr	r3, [sp, #4]
   1546c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15470:	1c5a      	adds	r2, r3, #1
   15472:	4904      	ldr	r1, [pc, #16]	; (15484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15474:	9b01      	ldr	r3, [sp, #4]
   15476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1547a:	bf00      	nop
   1547c:	b003      	add	sp, #12
   1547e:	f85d fb04 	ldr.w	pc, [sp], #4
   15482:	bf00      	nop
   15484:	1fff97b0 	.word	0x1fff97b0
   15488:	1fff97ac 	.word	0x1fff97ac

0001548c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   1548c:	b500      	push	{lr}
   1548e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15490:	f7eb fbbc 	bl	c0c <Sys_GetCoreID>
   15494:	4603      	mov	r3, r0
   15496:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   15498:	4a0d      	ldr	r2, [pc, #52]	; (154d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1549a:	9b01      	ldr	r3, [sp, #4]
   1549c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154a0:	1e5a      	subs	r2, r3, #1
   154a2:	490b      	ldr	r1, [pc, #44]	; (154d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   154a4:	9b01      	ldr	r3, [sp, #4]
   154a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   154aa:	4a0a      	ldr	r2, [pc, #40]	; (154d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   154ac:	9b01      	ldr	r3, [sp, #4]
   154ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154b2:	f003 0301 	and.w	r3, r3, #1
   154b6:	2b00      	cmp	r3, #0
   154b8:	d106      	bne.n	154c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   154ba:	4a05      	ldr	r2, [pc, #20]	; (154d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   154bc:	9b01      	ldr	r3, [sp, #4]
   154be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154c2:	2b00      	cmp	r3, #0
   154c4:	d100      	bne.n	154c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   154c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   154c8:	bf00      	nop
   154ca:	b003      	add	sp, #12
   154cc:	f85d fb04 	ldr.w	pc, [sp], #4
   154d0:	1fff97b0 	.word	0x1fff97b0
   154d4:	1fff97ac 	.word	0x1fff97ac

000154d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   154d8:	b500      	push	{lr}
   154da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154dc:	f7eb fb96 	bl	c0c <Sys_GetCoreID>
   154e0:	4603      	mov	r3, r0
   154e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   154e4:	4a10      	ldr	r2, [pc, #64]	; (15528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   154e6:	9b01      	ldr	r3, [sp, #4]
   154e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154ec:	2b00      	cmp	r3, #0
   154ee:	d10d      	bne.n	1550c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   154f0:	f7eb fa37 	bl	962 <Port_schm_read_msr>
   154f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   154f6:	9b00      	ldr	r3, [sp, #0]
   154f8:	f003 0301 	and.w	r3, r3, #1
   154fc:	2b00      	cmp	r3, #0
   154fe:	d100      	bne.n	15502 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15500:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   15502:	490a      	ldr	r1, [pc, #40]	; (1552c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   15504:	9b01      	ldr	r3, [sp, #4]
   15506:	9a00      	ldr	r2, [sp, #0]
   15508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   1550c:	4a06      	ldr	r2, [pc, #24]	; (15528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   1550e:	9b01      	ldr	r3, [sp, #4]
   15510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15514:	1c5a      	adds	r2, r3, #1
   15516:	4904      	ldr	r1, [pc, #16]	; (15528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   15518:	9b01      	ldr	r3, [sp, #4]
   1551a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1551e:	bf00      	nop
   15520:	b003      	add	sp, #12
   15522:	f85d fb04 	ldr.w	pc, [sp], #4
   15526:	bf00      	nop
   15528:	1fff97b8 	.word	0x1fff97b8
   1552c:	1fff97b4 	.word	0x1fff97b4

00015530 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   15530:	b500      	push	{lr}
   15532:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15534:	f7eb fb6a 	bl	c0c <Sys_GetCoreID>
   15538:	4603      	mov	r3, r0
   1553a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   1553c:	4a0d      	ldr	r2, [pc, #52]	; (15574 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   1553e:	9b01      	ldr	r3, [sp, #4]
   15540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15544:	1e5a      	subs	r2, r3, #1
   15546:	490b      	ldr	r1, [pc, #44]	; (15574 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   15548:	9b01      	ldr	r3, [sp, #4]
   1554a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1554e:	4a0a      	ldr	r2, [pc, #40]	; (15578 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   15550:	9b01      	ldr	r3, [sp, #4]
   15552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15556:	f003 0301 	and.w	r3, r3, #1
   1555a:	2b00      	cmp	r3, #0
   1555c:	d106      	bne.n	1556c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   1555e:	4a05      	ldr	r2, [pc, #20]	; (15574 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   15560:	9b01      	ldr	r3, [sp, #4]
   15562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15566:	2b00      	cmp	r3, #0
   15568:	d100      	bne.n	1556c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1556a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1556c:	bf00      	nop
   1556e:	b003      	add	sp, #12
   15570:	f85d fb04 	ldr.w	pc, [sp], #4
   15574:	1fff97b8 	.word	0x1fff97b8
   15578:	1fff97b4 	.word	0x1fff97b4

0001557c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   1557c:	b500      	push	{lr}
   1557e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15580:	f7eb fb44 	bl	c0c <Sys_GetCoreID>
   15584:	4603      	mov	r3, r0
   15586:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   15588:	4a10      	ldr	r2, [pc, #64]	; (155cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1558a:	9b01      	ldr	r3, [sp, #4]
   1558c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15590:	2b00      	cmp	r3, #0
   15592:	d10d      	bne.n	155b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15594:	f7eb f9e5 	bl	962 <Port_schm_read_msr>
   15598:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1559a:	9b00      	ldr	r3, [sp, #0]
   1559c:	f003 0301 	and.w	r3, r3, #1
   155a0:	2b00      	cmp	r3, #0
   155a2:	d100      	bne.n	155a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   155a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   155a6:	490a      	ldr	r1, [pc, #40]	; (155d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   155a8:	9b01      	ldr	r3, [sp, #4]
   155aa:	9a00      	ldr	r2, [sp, #0]
   155ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   155b0:	4a06      	ldr	r2, [pc, #24]	; (155cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   155b2:	9b01      	ldr	r3, [sp, #4]
   155b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155b8:	1c5a      	adds	r2, r3, #1
   155ba:	4904      	ldr	r1, [pc, #16]	; (155cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   155bc:	9b01      	ldr	r3, [sp, #4]
   155be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   155c2:	bf00      	nop
   155c4:	b003      	add	sp, #12
   155c6:	f85d fb04 	ldr.w	pc, [sp], #4
   155ca:	bf00      	nop
   155cc:	1fff97c0 	.word	0x1fff97c0
   155d0:	1fff97bc 	.word	0x1fff97bc

000155d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   155d4:	b500      	push	{lr}
   155d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155d8:	f7eb fb18 	bl	c0c <Sys_GetCoreID>
   155dc:	4603      	mov	r3, r0
   155de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   155e0:	4a0d      	ldr	r2, [pc, #52]	; (15618 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   155e2:	9b01      	ldr	r3, [sp, #4]
   155e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155e8:	1e5a      	subs	r2, r3, #1
   155ea:	490b      	ldr	r1, [pc, #44]	; (15618 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   155ec:	9b01      	ldr	r3, [sp, #4]
   155ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   155f2:	4a0a      	ldr	r2, [pc, #40]	; (1561c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   155f4:	9b01      	ldr	r3, [sp, #4]
   155f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155fa:	f003 0301 	and.w	r3, r3, #1
   155fe:	2b00      	cmp	r3, #0
   15600:	d106      	bne.n	15610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   15602:	4a05      	ldr	r2, [pc, #20]	; (15618 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   15604:	9b01      	ldr	r3, [sp, #4]
   15606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1560a:	2b00      	cmp	r3, #0
   1560c:	d100      	bne.n	15610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1560e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15610:	bf00      	nop
   15612:	b003      	add	sp, #12
   15614:	f85d fb04 	ldr.w	pc, [sp], #4
   15618:	1fff97c0 	.word	0x1fff97c0
   1561c:	1fff97bc 	.word	0x1fff97bc

00015620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   15620:	b500      	push	{lr}
   15622:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15624:	f7eb faf2 	bl	c0c <Sys_GetCoreID>
   15628:	4603      	mov	r3, r0
   1562a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   1562c:	4a10      	ldr	r2, [pc, #64]	; (15670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   1562e:	9b01      	ldr	r3, [sp, #4]
   15630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15634:	2b00      	cmp	r3, #0
   15636:	d10d      	bne.n	15654 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15638:	f7eb f993 	bl	962 <Port_schm_read_msr>
   1563c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1563e:	9b00      	ldr	r3, [sp, #0]
   15640:	f003 0301 	and.w	r3, r3, #1
   15644:	2b00      	cmp	r3, #0
   15646:	d100      	bne.n	1564a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15648:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1564a:	490a      	ldr	r1, [pc, #40]	; (15674 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   1564c:	9b01      	ldr	r3, [sp, #4]
   1564e:	9a00      	ldr	r2, [sp, #0]
   15650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   15654:	4a06      	ldr	r2, [pc, #24]	; (15670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   15656:	9b01      	ldr	r3, [sp, #4]
   15658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1565c:	1c5a      	adds	r2, r3, #1
   1565e:	4904      	ldr	r1, [pc, #16]	; (15670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   15660:	9b01      	ldr	r3, [sp, #4]
   15662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15666:	bf00      	nop
   15668:	b003      	add	sp, #12
   1566a:	f85d fb04 	ldr.w	pc, [sp], #4
   1566e:	bf00      	nop
   15670:	1fff97c8 	.word	0x1fff97c8
   15674:	1fff97c4 	.word	0x1fff97c4

00015678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   15678:	b500      	push	{lr}
   1567a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1567c:	f7eb fac6 	bl	c0c <Sys_GetCoreID>
   15680:	4603      	mov	r3, r0
   15682:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   15684:	4a0d      	ldr	r2, [pc, #52]	; (156bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   15686:	9b01      	ldr	r3, [sp, #4]
   15688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1568c:	1e5a      	subs	r2, r3, #1
   1568e:	490b      	ldr	r1, [pc, #44]	; (156bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   15690:	9b01      	ldr	r3, [sp, #4]
   15692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   15696:	4a0a      	ldr	r2, [pc, #40]	; (156c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   15698:	9b01      	ldr	r3, [sp, #4]
   1569a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1569e:	f003 0301 	and.w	r3, r3, #1
   156a2:	2b00      	cmp	r3, #0
   156a4:	d106      	bne.n	156b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   156a6:	4a05      	ldr	r2, [pc, #20]	; (156bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   156a8:	9b01      	ldr	r3, [sp, #4]
   156aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156ae:	2b00      	cmp	r3, #0
   156b0:	d100      	bne.n	156b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   156b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   156b4:	bf00      	nop
   156b6:	b003      	add	sp, #12
   156b8:	f85d fb04 	ldr.w	pc, [sp], #4
   156bc:	1fff97c8 	.word	0x1fff97c8
   156c0:	1fff97c4 	.word	0x1fff97c4

000156c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   156c4:	b500      	push	{lr}
   156c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156c8:	f7eb faa0 	bl	c0c <Sys_GetCoreID>
   156cc:	4603      	mov	r3, r0
   156ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   156d0:	4a10      	ldr	r2, [pc, #64]	; (15714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   156d2:	9b01      	ldr	r3, [sp, #4]
   156d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156d8:	2b00      	cmp	r3, #0
   156da:	d10d      	bne.n	156f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   156dc:	f7eb f941 	bl	962 <Port_schm_read_msr>
   156e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   156e2:	9b00      	ldr	r3, [sp, #0]
   156e4:	f003 0301 	and.w	r3, r3, #1
   156e8:	2b00      	cmp	r3, #0
   156ea:	d100      	bne.n	156ee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   156ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   156ee:	490a      	ldr	r1, [pc, #40]	; (15718 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   156f0:	9b01      	ldr	r3, [sp, #4]
   156f2:	9a00      	ldr	r2, [sp, #0]
   156f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   156f8:	4a06      	ldr	r2, [pc, #24]	; (15714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   156fa:	9b01      	ldr	r3, [sp, #4]
   156fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15700:	1c5a      	adds	r2, r3, #1
   15702:	4904      	ldr	r1, [pc, #16]	; (15714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   15704:	9b01      	ldr	r3, [sp, #4]
   15706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1570a:	bf00      	nop
   1570c:	b003      	add	sp, #12
   1570e:	f85d fb04 	ldr.w	pc, [sp], #4
   15712:	bf00      	nop
   15714:	1fff97d0 	.word	0x1fff97d0
   15718:	1fff97cc 	.word	0x1fff97cc

0001571c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   1571c:	b500      	push	{lr}
   1571e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15720:	f7eb fa74 	bl	c0c <Sys_GetCoreID>
   15724:	4603      	mov	r3, r0
   15726:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   15728:	4a0d      	ldr	r2, [pc, #52]	; (15760 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1572a:	9b01      	ldr	r3, [sp, #4]
   1572c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15730:	1e5a      	subs	r2, r3, #1
   15732:	490b      	ldr	r1, [pc, #44]	; (15760 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   15734:	9b01      	ldr	r3, [sp, #4]
   15736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1573a:	4a0a      	ldr	r2, [pc, #40]	; (15764 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   1573c:	9b01      	ldr	r3, [sp, #4]
   1573e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15742:	f003 0301 	and.w	r3, r3, #1
   15746:	2b00      	cmp	r3, #0
   15748:	d106      	bne.n	15758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   1574a:	4a05      	ldr	r2, [pc, #20]	; (15760 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1574c:	9b01      	ldr	r3, [sp, #4]
   1574e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15752:	2b00      	cmp	r3, #0
   15754:	d100      	bne.n	15758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15756:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15758:	bf00      	nop
   1575a:	b003      	add	sp, #12
   1575c:	f85d fb04 	ldr.w	pc, [sp], #4
   15760:	1fff97d0 	.word	0x1fff97d0
   15764:	1fff97cc 	.word	0x1fff97cc

00015768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   15768:	b500      	push	{lr}
   1576a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1576c:	f7eb fa4e 	bl	c0c <Sys_GetCoreID>
   15770:	4603      	mov	r3, r0
   15772:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   15774:	4a10      	ldr	r2, [pc, #64]	; (157b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   15776:	9b01      	ldr	r3, [sp, #4]
   15778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1577c:	2b00      	cmp	r3, #0
   1577e:	d10d      	bne.n	1579c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15780:	f7eb f8ef 	bl	962 <Port_schm_read_msr>
   15784:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15786:	9b00      	ldr	r3, [sp, #0]
   15788:	f003 0301 	and.w	r3, r3, #1
   1578c:	2b00      	cmp	r3, #0
   1578e:	d100      	bne.n	15792 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15790:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   15792:	490a      	ldr	r1, [pc, #40]	; (157bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   15794:	9b01      	ldr	r3, [sp, #4]
   15796:	9a00      	ldr	r2, [sp, #0]
   15798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   1579c:	4a06      	ldr	r2, [pc, #24]	; (157b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   1579e:	9b01      	ldr	r3, [sp, #4]
   157a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157a4:	1c5a      	adds	r2, r3, #1
   157a6:	4904      	ldr	r1, [pc, #16]	; (157b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   157a8:	9b01      	ldr	r3, [sp, #4]
   157aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   157ae:	bf00      	nop
   157b0:	b003      	add	sp, #12
   157b2:	f85d fb04 	ldr.w	pc, [sp], #4
   157b6:	bf00      	nop
   157b8:	1fff97d8 	.word	0x1fff97d8
   157bc:	1fff97d4 	.word	0x1fff97d4

000157c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   157c0:	b500      	push	{lr}
   157c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157c4:	f7eb fa22 	bl	c0c <Sys_GetCoreID>
   157c8:	4603      	mov	r3, r0
   157ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   157cc:	4a0d      	ldr	r2, [pc, #52]	; (15804 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   157ce:	9b01      	ldr	r3, [sp, #4]
   157d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157d4:	1e5a      	subs	r2, r3, #1
   157d6:	490b      	ldr	r1, [pc, #44]	; (15804 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   157d8:	9b01      	ldr	r3, [sp, #4]
   157da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   157de:	4a0a      	ldr	r2, [pc, #40]	; (15808 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   157e0:	9b01      	ldr	r3, [sp, #4]
   157e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157e6:	f003 0301 	and.w	r3, r3, #1
   157ea:	2b00      	cmp	r3, #0
   157ec:	d106      	bne.n	157fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   157ee:	4a05      	ldr	r2, [pc, #20]	; (15804 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   157f0:	9b01      	ldr	r3, [sp, #4]
   157f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157f6:	2b00      	cmp	r3, #0
   157f8:	d100      	bne.n	157fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   157fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   157fc:	bf00      	nop
   157fe:	b003      	add	sp, #12
   15800:	f85d fb04 	ldr.w	pc, [sp], #4
   15804:	1fff97d8 	.word	0x1fff97d8
   15808:	1fff97d4 	.word	0x1fff97d4

0001580c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   1580c:	b500      	push	{lr}
   1580e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15810:	f7eb f9fc 	bl	c0c <Sys_GetCoreID>
   15814:	4603      	mov	r3, r0
   15816:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   15818:	4a10      	ldr	r2, [pc, #64]	; (1585c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1581a:	9b01      	ldr	r3, [sp, #4]
   1581c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15820:	2b00      	cmp	r3, #0
   15822:	d10d      	bne.n	15840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15824:	f7eb f89d 	bl	962 <Port_schm_read_msr>
   15828:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1582a:	9b00      	ldr	r3, [sp, #0]
   1582c:	f003 0301 	and.w	r3, r3, #1
   15830:	2b00      	cmp	r3, #0
   15832:	d100      	bne.n	15836 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15834:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   15836:	490a      	ldr	r1, [pc, #40]	; (15860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   15838:	9b01      	ldr	r3, [sp, #4]
   1583a:	9a00      	ldr	r2, [sp, #0]
   1583c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   15840:	4a06      	ldr	r2, [pc, #24]	; (1585c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   15842:	9b01      	ldr	r3, [sp, #4]
   15844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15848:	1c5a      	adds	r2, r3, #1
   1584a:	4904      	ldr	r1, [pc, #16]	; (1585c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1584c:	9b01      	ldr	r3, [sp, #4]
   1584e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15852:	bf00      	nop
   15854:	b003      	add	sp, #12
   15856:	f85d fb04 	ldr.w	pc, [sp], #4
   1585a:	bf00      	nop
   1585c:	1fff97e0 	.word	0x1fff97e0
   15860:	1fff97dc 	.word	0x1fff97dc

00015864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   15864:	b500      	push	{lr}
   15866:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15868:	f7eb f9d0 	bl	c0c <Sys_GetCoreID>
   1586c:	4603      	mov	r3, r0
   1586e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   15870:	4a0d      	ldr	r2, [pc, #52]	; (158a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   15872:	9b01      	ldr	r3, [sp, #4]
   15874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15878:	1e5a      	subs	r2, r3, #1
   1587a:	490b      	ldr	r1, [pc, #44]	; (158a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   1587c:	9b01      	ldr	r3, [sp, #4]
   1587e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   15882:	4a0a      	ldr	r2, [pc, #40]	; (158ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   15884:	9b01      	ldr	r3, [sp, #4]
   15886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1588a:	f003 0301 	and.w	r3, r3, #1
   1588e:	2b00      	cmp	r3, #0
   15890:	d106      	bne.n	158a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   15892:	4a05      	ldr	r2, [pc, #20]	; (158a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   15894:	9b01      	ldr	r3, [sp, #4]
   15896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1589a:	2b00      	cmp	r3, #0
   1589c:	d100      	bne.n	158a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1589e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   158a0:	bf00      	nop
   158a2:	b003      	add	sp, #12
   158a4:	f85d fb04 	ldr.w	pc, [sp], #4
   158a8:	1fff97e0 	.word	0x1fff97e0
   158ac:	1fff97dc 	.word	0x1fff97dc

000158b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   158b0:	b500      	push	{lr}
   158b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158b4:	f7eb f9aa 	bl	c0c <Sys_GetCoreID>
   158b8:	4603      	mov	r3, r0
   158ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   158bc:	4a10      	ldr	r2, [pc, #64]	; (15900 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   158be:	9b01      	ldr	r3, [sp, #4]
   158c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158c4:	2b00      	cmp	r3, #0
   158c6:	d10d      	bne.n	158e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   158c8:	f7eb f84b 	bl	962 <Port_schm_read_msr>
   158cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   158ce:	9b00      	ldr	r3, [sp, #0]
   158d0:	f003 0301 	and.w	r3, r3, #1
   158d4:	2b00      	cmp	r3, #0
   158d6:	d100      	bne.n	158da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   158d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   158da:	490a      	ldr	r1, [pc, #40]	; (15904 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   158dc:	9b01      	ldr	r3, [sp, #4]
   158de:	9a00      	ldr	r2, [sp, #0]
   158e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   158e4:	4a06      	ldr	r2, [pc, #24]	; (15900 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   158e6:	9b01      	ldr	r3, [sp, #4]
   158e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158ec:	1c5a      	adds	r2, r3, #1
   158ee:	4904      	ldr	r1, [pc, #16]	; (15900 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   158f0:	9b01      	ldr	r3, [sp, #4]
   158f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   158f6:	bf00      	nop
   158f8:	b003      	add	sp, #12
   158fa:	f85d fb04 	ldr.w	pc, [sp], #4
   158fe:	bf00      	nop
   15900:	1fff97e8 	.word	0x1fff97e8
   15904:	1fff97e4 	.word	0x1fff97e4

00015908 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   15908:	b500      	push	{lr}
   1590a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1590c:	f7eb f97e 	bl	c0c <Sys_GetCoreID>
   15910:	4603      	mov	r3, r0
   15912:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   15914:	4a0d      	ldr	r2, [pc, #52]	; (1594c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   15916:	9b01      	ldr	r3, [sp, #4]
   15918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1591c:	1e5a      	subs	r2, r3, #1
   1591e:	490b      	ldr	r1, [pc, #44]	; (1594c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   15920:	9b01      	ldr	r3, [sp, #4]
   15922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   15926:	4a0a      	ldr	r2, [pc, #40]	; (15950 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   15928:	9b01      	ldr	r3, [sp, #4]
   1592a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1592e:	f003 0301 	and.w	r3, r3, #1
   15932:	2b00      	cmp	r3, #0
   15934:	d106      	bne.n	15944 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   15936:	4a05      	ldr	r2, [pc, #20]	; (1594c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   15938:	9b01      	ldr	r3, [sp, #4]
   1593a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1593e:	2b00      	cmp	r3, #0
   15940:	d100      	bne.n	15944 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15942:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15944:	bf00      	nop
   15946:	b003      	add	sp, #12
   15948:	f85d fb04 	ldr.w	pc, [sp], #4
   1594c:	1fff97e8 	.word	0x1fff97e8
   15950:	1fff97e4 	.word	0x1fff97e4

00015954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   15954:	b500      	push	{lr}
   15956:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15958:	f7eb f958 	bl	c0c <Sys_GetCoreID>
   1595c:	4603      	mov	r3, r0
   1595e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   15960:	4a10      	ldr	r2, [pc, #64]	; (159a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   15962:	9b01      	ldr	r3, [sp, #4]
   15964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15968:	2b00      	cmp	r3, #0
   1596a:	d10d      	bne.n	15988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1596c:	f7ea fff9 	bl	962 <Port_schm_read_msr>
   15970:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15972:	9b00      	ldr	r3, [sp, #0]
   15974:	f003 0301 	and.w	r3, r3, #1
   15978:	2b00      	cmp	r3, #0
   1597a:	d100      	bne.n	1597e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1597c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   1597e:	490a      	ldr	r1, [pc, #40]	; (159a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   15980:	9b01      	ldr	r3, [sp, #4]
   15982:	9a00      	ldr	r2, [sp, #0]
   15984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   15988:	4a06      	ldr	r2, [pc, #24]	; (159a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   1598a:	9b01      	ldr	r3, [sp, #4]
   1598c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15990:	1c5a      	adds	r2, r3, #1
   15992:	4904      	ldr	r1, [pc, #16]	; (159a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   15994:	9b01      	ldr	r3, [sp, #4]
   15996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1599a:	bf00      	nop
   1599c:	b003      	add	sp, #12
   1599e:	f85d fb04 	ldr.w	pc, [sp], #4
   159a2:	bf00      	nop
   159a4:	1fff97f0 	.word	0x1fff97f0
   159a8:	1fff97ec 	.word	0x1fff97ec

000159ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   159ac:	b500      	push	{lr}
   159ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159b0:	f7eb f92c 	bl	c0c <Sys_GetCoreID>
   159b4:	4603      	mov	r3, r0
   159b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   159b8:	4a0d      	ldr	r2, [pc, #52]	; (159f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   159ba:	9b01      	ldr	r3, [sp, #4]
   159bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159c0:	1e5a      	subs	r2, r3, #1
   159c2:	490b      	ldr	r1, [pc, #44]	; (159f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   159c4:	9b01      	ldr	r3, [sp, #4]
   159c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   159ca:	4a0a      	ldr	r2, [pc, #40]	; (159f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   159cc:	9b01      	ldr	r3, [sp, #4]
   159ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159d2:	f003 0301 	and.w	r3, r3, #1
   159d6:	2b00      	cmp	r3, #0
   159d8:	d106      	bne.n	159e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   159da:	4a05      	ldr	r2, [pc, #20]	; (159f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   159dc:	9b01      	ldr	r3, [sp, #4]
   159de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159e2:	2b00      	cmp	r3, #0
   159e4:	d100      	bne.n	159e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   159e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   159e8:	bf00      	nop
   159ea:	b003      	add	sp, #12
   159ec:	f85d fb04 	ldr.w	pc, [sp], #4
   159f0:	1fff97f0 	.word	0x1fff97f0
   159f4:	1fff97ec 	.word	0x1fff97ec

000159f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   159f8:	b500      	push	{lr}
   159fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159fc:	f7eb f906 	bl	c0c <Sys_GetCoreID>
   15a00:	4603      	mov	r3, r0
   15a02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   15a04:	4a10      	ldr	r2, [pc, #64]	; (15a48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15a06:	9b01      	ldr	r3, [sp, #4]
   15a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a0c:	2b00      	cmp	r3, #0
   15a0e:	d10d      	bne.n	15a2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a10:	f7ea ffa7 	bl	962 <Port_schm_read_msr>
   15a14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a16:	9b00      	ldr	r3, [sp, #0]
   15a18:	f003 0301 	and.w	r3, r3, #1
   15a1c:	2b00      	cmp	r3, #0
   15a1e:	d100      	bne.n	15a22 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   15a22:	490a      	ldr	r1, [pc, #40]	; (15a4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   15a24:	9b01      	ldr	r3, [sp, #4]
   15a26:	9a00      	ldr	r2, [sp, #0]
   15a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   15a2c:	4a06      	ldr	r2, [pc, #24]	; (15a48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15a2e:	9b01      	ldr	r3, [sp, #4]
   15a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a34:	1c5a      	adds	r2, r3, #1
   15a36:	4904      	ldr	r1, [pc, #16]	; (15a48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15a38:	9b01      	ldr	r3, [sp, #4]
   15a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a3e:	bf00      	nop
   15a40:	b003      	add	sp, #12
   15a42:	f85d fb04 	ldr.w	pc, [sp], #4
   15a46:	bf00      	nop
   15a48:	1fff97f8 	.word	0x1fff97f8
   15a4c:	1fff97f4 	.word	0x1fff97f4

00015a50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   15a50:	b500      	push	{lr}
   15a52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a54:	f7eb f8da 	bl	c0c <Sys_GetCoreID>
   15a58:	4603      	mov	r3, r0
   15a5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   15a5c:	4a0d      	ldr	r2, [pc, #52]	; (15a94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15a5e:	9b01      	ldr	r3, [sp, #4]
   15a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a64:	1e5a      	subs	r2, r3, #1
   15a66:	490b      	ldr	r1, [pc, #44]	; (15a94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15a68:	9b01      	ldr	r3, [sp, #4]
   15a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   15a6e:	4a0a      	ldr	r2, [pc, #40]	; (15a98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   15a70:	9b01      	ldr	r3, [sp, #4]
   15a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a76:	f003 0301 	and.w	r3, r3, #1
   15a7a:	2b00      	cmp	r3, #0
   15a7c:	d106      	bne.n	15a8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   15a7e:	4a05      	ldr	r2, [pc, #20]	; (15a94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15a80:	9b01      	ldr	r3, [sp, #4]
   15a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a86:	2b00      	cmp	r3, #0
   15a88:	d100      	bne.n	15a8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a8c:	bf00      	nop
   15a8e:	b003      	add	sp, #12
   15a90:	f85d fb04 	ldr.w	pc, [sp], #4
   15a94:	1fff97f8 	.word	0x1fff97f8
   15a98:	1fff97f4 	.word	0x1fff97f4

00015a9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15a9c:	b500      	push	{lr}
   15a9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15aa0:	f7eb f8b4 	bl	c0c <Sys_GetCoreID>
   15aa4:	4603      	mov	r3, r0
   15aa6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   15aa8:	4a10      	ldr	r2, [pc, #64]	; (15aec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15aaa:	9b01      	ldr	r3, [sp, #4]
   15aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ab0:	2b00      	cmp	r3, #0
   15ab2:	d10d      	bne.n	15ad0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15ab4:	f7ea ff55 	bl	962 <Port_schm_read_msr>
   15ab8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15aba:	9b00      	ldr	r3, [sp, #0]
   15abc:	f003 0301 	and.w	r3, r3, #1
   15ac0:	2b00      	cmp	r3, #0
   15ac2:	d100      	bne.n	15ac6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ac4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   15ac6:	490a      	ldr	r1, [pc, #40]	; (15af0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   15ac8:	9b01      	ldr	r3, [sp, #4]
   15aca:	9a00      	ldr	r2, [sp, #0]
   15acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   15ad0:	4a06      	ldr	r2, [pc, #24]	; (15aec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15ad2:	9b01      	ldr	r3, [sp, #4]
   15ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ad8:	1c5a      	adds	r2, r3, #1
   15ada:	4904      	ldr	r1, [pc, #16]	; (15aec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15adc:	9b01      	ldr	r3, [sp, #4]
   15ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15ae2:	bf00      	nop
   15ae4:	b003      	add	sp, #12
   15ae6:	f85d fb04 	ldr.w	pc, [sp], #4
   15aea:	bf00      	nop
   15aec:	1fff9800 	.word	0x1fff9800
   15af0:	1fff97fc 	.word	0x1fff97fc

00015af4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15af4:	b500      	push	{lr}
   15af6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15af8:	f7eb f888 	bl	c0c <Sys_GetCoreID>
   15afc:	4603      	mov	r3, r0
   15afe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   15b00:	4a0d      	ldr	r2, [pc, #52]	; (15b38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15b02:	9b01      	ldr	r3, [sp, #4]
   15b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b08:	1e5a      	subs	r2, r3, #1
   15b0a:	490b      	ldr	r1, [pc, #44]	; (15b38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15b0c:	9b01      	ldr	r3, [sp, #4]
   15b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   15b12:	4a0a      	ldr	r2, [pc, #40]	; (15b3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   15b14:	9b01      	ldr	r3, [sp, #4]
   15b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b1a:	f003 0301 	and.w	r3, r3, #1
   15b1e:	2b00      	cmp	r3, #0
   15b20:	d106      	bne.n	15b30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   15b22:	4a05      	ldr	r2, [pc, #20]	; (15b38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15b24:	9b01      	ldr	r3, [sp, #4]
   15b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b2a:	2b00      	cmp	r3, #0
   15b2c:	d100      	bne.n	15b30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15b2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15b30:	bf00      	nop
   15b32:	b003      	add	sp, #12
   15b34:	f85d fb04 	ldr.w	pc, [sp], #4
   15b38:	1fff9800 	.word	0x1fff9800
   15b3c:	1fff97fc 	.word	0x1fff97fc

00015b40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15b40:	b500      	push	{lr}
   15b42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b44:	f7eb f862 	bl	c0c <Sys_GetCoreID>
   15b48:	4603      	mov	r3, r0
   15b4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   15b4c:	4a10      	ldr	r2, [pc, #64]	; (15b90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15b4e:	9b01      	ldr	r3, [sp, #4]
   15b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b54:	2b00      	cmp	r3, #0
   15b56:	d10d      	bne.n	15b74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15b58:	f7ea ff03 	bl	962 <Port_schm_read_msr>
   15b5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15b5e:	9b00      	ldr	r3, [sp, #0]
   15b60:	f003 0301 	and.w	r3, r3, #1
   15b64:	2b00      	cmp	r3, #0
   15b66:	d100      	bne.n	15b6a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15b68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   15b6a:	490a      	ldr	r1, [pc, #40]	; (15b94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   15b6c:	9b01      	ldr	r3, [sp, #4]
   15b6e:	9a00      	ldr	r2, [sp, #0]
   15b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   15b74:	4a06      	ldr	r2, [pc, #24]	; (15b90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15b76:	9b01      	ldr	r3, [sp, #4]
   15b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b7c:	1c5a      	adds	r2, r3, #1
   15b7e:	4904      	ldr	r1, [pc, #16]	; (15b90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15b80:	9b01      	ldr	r3, [sp, #4]
   15b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15b86:	bf00      	nop
   15b88:	b003      	add	sp, #12
   15b8a:	f85d fb04 	ldr.w	pc, [sp], #4
   15b8e:	bf00      	nop
   15b90:	1fff9808 	.word	0x1fff9808
   15b94:	1fff9804 	.word	0x1fff9804

00015b98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15b98:	b500      	push	{lr}
   15b9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b9c:	f7eb f836 	bl	c0c <Sys_GetCoreID>
   15ba0:	4603      	mov	r3, r0
   15ba2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   15ba4:	4a0d      	ldr	r2, [pc, #52]	; (15bdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15ba6:	9b01      	ldr	r3, [sp, #4]
   15ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bac:	1e5a      	subs	r2, r3, #1
   15bae:	490b      	ldr	r1, [pc, #44]	; (15bdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15bb0:	9b01      	ldr	r3, [sp, #4]
   15bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   15bb6:	4a0a      	ldr	r2, [pc, #40]	; (15be0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   15bb8:	9b01      	ldr	r3, [sp, #4]
   15bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bbe:	f003 0301 	and.w	r3, r3, #1
   15bc2:	2b00      	cmp	r3, #0
   15bc4:	d106      	bne.n	15bd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   15bc6:	4a05      	ldr	r2, [pc, #20]	; (15bdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15bc8:	9b01      	ldr	r3, [sp, #4]
   15bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bce:	2b00      	cmp	r3, #0
   15bd0:	d100      	bne.n	15bd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15bd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15bd4:	bf00      	nop
   15bd6:	b003      	add	sp, #12
   15bd8:	f85d fb04 	ldr.w	pc, [sp], #4
   15bdc:	1fff9808 	.word	0x1fff9808
   15be0:	1fff9804 	.word	0x1fff9804

00015be4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15be4:	b500      	push	{lr}
   15be6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15be8:	f7eb f810 	bl	c0c <Sys_GetCoreID>
   15bec:	4603      	mov	r3, r0
   15bee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   15bf0:	4a10      	ldr	r2, [pc, #64]	; (15c34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15bf2:	9b01      	ldr	r3, [sp, #4]
   15bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bf8:	2b00      	cmp	r3, #0
   15bfa:	d10d      	bne.n	15c18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15bfc:	f7ea feb1 	bl	962 <Port_schm_read_msr>
   15c00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15c02:	9b00      	ldr	r3, [sp, #0]
   15c04:	f003 0301 	and.w	r3, r3, #1
   15c08:	2b00      	cmp	r3, #0
   15c0a:	d100      	bne.n	15c0e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15c0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   15c0e:	490a      	ldr	r1, [pc, #40]	; (15c38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   15c10:	9b01      	ldr	r3, [sp, #4]
   15c12:	9a00      	ldr	r2, [sp, #0]
   15c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   15c18:	4a06      	ldr	r2, [pc, #24]	; (15c34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15c1a:	9b01      	ldr	r3, [sp, #4]
   15c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c20:	1c5a      	adds	r2, r3, #1
   15c22:	4904      	ldr	r1, [pc, #16]	; (15c34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15c24:	9b01      	ldr	r3, [sp, #4]
   15c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15c2a:	bf00      	nop
   15c2c:	b003      	add	sp, #12
   15c2e:	f85d fb04 	ldr.w	pc, [sp], #4
   15c32:	bf00      	nop
   15c34:	1fff9810 	.word	0x1fff9810
   15c38:	1fff980c 	.word	0x1fff980c

00015c3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15c3c:	b500      	push	{lr}
   15c3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c40:	f7ea ffe4 	bl	c0c <Sys_GetCoreID>
   15c44:	4603      	mov	r3, r0
   15c46:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   15c48:	4a0d      	ldr	r2, [pc, #52]	; (15c80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15c4a:	9b01      	ldr	r3, [sp, #4]
   15c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c50:	1e5a      	subs	r2, r3, #1
   15c52:	490b      	ldr	r1, [pc, #44]	; (15c80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15c54:	9b01      	ldr	r3, [sp, #4]
   15c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   15c5a:	4a0a      	ldr	r2, [pc, #40]	; (15c84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   15c5c:	9b01      	ldr	r3, [sp, #4]
   15c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c62:	f003 0301 	and.w	r3, r3, #1
   15c66:	2b00      	cmp	r3, #0
   15c68:	d106      	bne.n	15c78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   15c6a:	4a05      	ldr	r2, [pc, #20]	; (15c80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15c6c:	9b01      	ldr	r3, [sp, #4]
   15c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c72:	2b00      	cmp	r3, #0
   15c74:	d100      	bne.n	15c78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15c76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15c78:	bf00      	nop
   15c7a:	b003      	add	sp, #12
   15c7c:	f85d fb04 	ldr.w	pc, [sp], #4
   15c80:	1fff9810 	.word	0x1fff9810
   15c84:	1fff980c 	.word	0x1fff980c

00015c88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15c88:	b500      	push	{lr}
   15c8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c8c:	f7ea ffbe 	bl	c0c <Sys_GetCoreID>
   15c90:	4603      	mov	r3, r0
   15c92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   15c94:	4a10      	ldr	r2, [pc, #64]	; (15cd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15c96:	9b01      	ldr	r3, [sp, #4]
   15c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c9c:	2b00      	cmp	r3, #0
   15c9e:	d10d      	bne.n	15cbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15ca0:	f7ea fe5f 	bl	962 <Port_schm_read_msr>
   15ca4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15ca6:	9b00      	ldr	r3, [sp, #0]
   15ca8:	f003 0301 	and.w	r3, r3, #1
   15cac:	2b00      	cmp	r3, #0
   15cae:	d100      	bne.n	15cb2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15cb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   15cb2:	490a      	ldr	r1, [pc, #40]	; (15cdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   15cb4:	9b01      	ldr	r3, [sp, #4]
   15cb6:	9a00      	ldr	r2, [sp, #0]
   15cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   15cbc:	4a06      	ldr	r2, [pc, #24]	; (15cd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15cbe:	9b01      	ldr	r3, [sp, #4]
   15cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cc4:	1c5a      	adds	r2, r3, #1
   15cc6:	4904      	ldr	r1, [pc, #16]	; (15cd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15cc8:	9b01      	ldr	r3, [sp, #4]
   15cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15cce:	bf00      	nop
   15cd0:	b003      	add	sp, #12
   15cd2:	f85d fb04 	ldr.w	pc, [sp], #4
   15cd6:	bf00      	nop
   15cd8:	1fff9818 	.word	0x1fff9818
   15cdc:	1fff9814 	.word	0x1fff9814

00015ce0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15ce0:	b500      	push	{lr}
   15ce2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ce4:	f7ea ff92 	bl	c0c <Sys_GetCoreID>
   15ce8:	4603      	mov	r3, r0
   15cea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   15cec:	4a0d      	ldr	r2, [pc, #52]	; (15d24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15cee:	9b01      	ldr	r3, [sp, #4]
   15cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cf4:	1e5a      	subs	r2, r3, #1
   15cf6:	490b      	ldr	r1, [pc, #44]	; (15d24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15cf8:	9b01      	ldr	r3, [sp, #4]
   15cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   15cfe:	4a0a      	ldr	r2, [pc, #40]	; (15d28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   15d00:	9b01      	ldr	r3, [sp, #4]
   15d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d06:	f003 0301 	and.w	r3, r3, #1
   15d0a:	2b00      	cmp	r3, #0
   15d0c:	d106      	bne.n	15d1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   15d0e:	4a05      	ldr	r2, [pc, #20]	; (15d24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15d10:	9b01      	ldr	r3, [sp, #4]
   15d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d16:	2b00      	cmp	r3, #0
   15d18:	d100      	bne.n	15d1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15d1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15d1c:	bf00      	nop
   15d1e:	b003      	add	sp, #12
   15d20:	f85d fb04 	ldr.w	pc, [sp], #4
   15d24:	1fff9818 	.word	0x1fff9818
   15d28:	1fff9814 	.word	0x1fff9814

00015d2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15d2c:	b500      	push	{lr}
   15d2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d30:	f7ea ff6c 	bl	c0c <Sys_GetCoreID>
   15d34:	4603      	mov	r3, r0
   15d36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   15d38:	4a10      	ldr	r2, [pc, #64]	; (15d7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15d3a:	9b01      	ldr	r3, [sp, #4]
   15d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d40:	2b00      	cmp	r3, #0
   15d42:	d10d      	bne.n	15d60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15d44:	f7ea fe0d 	bl	962 <Port_schm_read_msr>
   15d48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15d4a:	9b00      	ldr	r3, [sp, #0]
   15d4c:	f003 0301 	and.w	r3, r3, #1
   15d50:	2b00      	cmp	r3, #0
   15d52:	d100      	bne.n	15d56 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15d54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   15d56:	490a      	ldr	r1, [pc, #40]	; (15d80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   15d58:	9b01      	ldr	r3, [sp, #4]
   15d5a:	9a00      	ldr	r2, [sp, #0]
   15d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   15d60:	4a06      	ldr	r2, [pc, #24]	; (15d7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15d62:	9b01      	ldr	r3, [sp, #4]
   15d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d68:	1c5a      	adds	r2, r3, #1
   15d6a:	4904      	ldr	r1, [pc, #16]	; (15d7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15d6c:	9b01      	ldr	r3, [sp, #4]
   15d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15d72:	bf00      	nop
   15d74:	b003      	add	sp, #12
   15d76:	f85d fb04 	ldr.w	pc, [sp], #4
   15d7a:	bf00      	nop
   15d7c:	1fff9820 	.word	0x1fff9820
   15d80:	1fff981c 	.word	0x1fff981c

00015d84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15d84:	b500      	push	{lr}
   15d86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d88:	f7ea ff40 	bl	c0c <Sys_GetCoreID>
   15d8c:	4603      	mov	r3, r0
   15d8e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   15d90:	4a0d      	ldr	r2, [pc, #52]	; (15dc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15d92:	9b01      	ldr	r3, [sp, #4]
   15d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d98:	1e5a      	subs	r2, r3, #1
   15d9a:	490b      	ldr	r1, [pc, #44]	; (15dc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15d9c:	9b01      	ldr	r3, [sp, #4]
   15d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   15da2:	4a0a      	ldr	r2, [pc, #40]	; (15dcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   15da4:	9b01      	ldr	r3, [sp, #4]
   15da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15daa:	f003 0301 	and.w	r3, r3, #1
   15dae:	2b00      	cmp	r3, #0
   15db0:	d106      	bne.n	15dc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   15db2:	4a05      	ldr	r2, [pc, #20]	; (15dc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15db4:	9b01      	ldr	r3, [sp, #4]
   15db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dba:	2b00      	cmp	r3, #0
   15dbc:	d100      	bne.n	15dc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15dbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15dc0:	bf00      	nop
   15dc2:	b003      	add	sp, #12
   15dc4:	f85d fb04 	ldr.w	pc, [sp], #4
   15dc8:	1fff9820 	.word	0x1fff9820
   15dcc:	1fff981c 	.word	0x1fff981c

00015dd0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15dd0:	b500      	push	{lr}
   15dd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15dd4:	f7ea ff1a 	bl	c0c <Sys_GetCoreID>
   15dd8:	4603      	mov	r3, r0
   15dda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId])
   15ddc:	4a10      	ldr	r2, [pc, #64]	; (15e20 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15dde:	9b01      	ldr	r3, [sp, #4]
   15de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15de4:	2b00      	cmp	r3, #0
   15de6:	d10d      	bne.n	15e04 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15de8:	f7ea fdc4 	bl	974 <Spi_schm_read_msr>
   15dec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15dee:	9b00      	ldr	r3, [sp, #0]
   15df0:	f003 0301 	and.w	r3, r3, #1
   15df4:	2b00      	cmp	r3, #0
   15df6:	d100      	bne.n	15dfa <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15df8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   15dfa:	490a      	ldr	r1, [pc, #40]	; (15e24 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x54>)
   15dfc:	9b01      	ldr	r3, [sp, #4]
   15dfe:	9a00      	ldr	r2, [sp, #0]
   15e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]++;
   15e04:	4a06      	ldr	r2, [pc, #24]	; (15e20 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15e06:	9b01      	ldr	r3, [sp, #4]
   15e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e0c:	1c5a      	adds	r2, r3, #1
   15e0e:	4904      	ldr	r1, [pc, #16]	; (15e20 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15e10:	9b01      	ldr	r3, [sp, #4]
   15e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15e16:	bf00      	nop
   15e18:	b003      	add	sp, #12
   15e1a:	f85d fb04 	ldr.w	pc, [sp], #4
   15e1e:	bf00      	nop
   15e20:	1fff9828 	.word	0x1fff9828
   15e24:	1fff9824 	.word	0x1fff9824

00015e28 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15e28:	b500      	push	{lr}
   15e2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e2c:	f7ea feee 	bl	c0c <Sys_GetCoreID>
   15e30:	4603      	mov	r3, r0
   15e32:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]--;
   15e34:	4a0d      	ldr	r2, [pc, #52]	; (15e6c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15e36:	9b01      	ldr	r3, [sp, #4]
   15e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e3c:	1e5a      	subs	r2, r3, #1
   15e3e:	490b      	ldr	r1, [pc, #44]	; (15e6c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15e40:	9b01      	ldr	r3, [sp, #4]
   15e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   15e46:	4a0a      	ldr	r2, [pc, #40]	; (15e70 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x48>)
   15e48:	9b01      	ldr	r3, [sp, #4]
   15e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e4e:	f003 0301 	and.w	r3, r3, #1
   15e52:	2b00      	cmp	r3, #0
   15e54:	d106      	bne.n	15e64 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
   15e56:	4a05      	ldr	r2, [pc, #20]	; (15e6c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15e58:	9b01      	ldr	r3, [sp, #4]
   15e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e5e:	2b00      	cmp	r3, #0
   15e60:	d100      	bne.n	15e64 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15e62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15e64:	bf00      	nop
   15e66:	b003      	add	sp, #12
   15e68:	f85d fb04 	ldr.w	pc, [sp], #4
   15e6c:	1fff9828 	.word	0x1fff9828
   15e70:	1fff9824 	.word	0x1fff9824

00015e74 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15e74:	b500      	push	{lr}
   15e76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e78:	f7ea fec8 	bl	c0c <Sys_GetCoreID>
   15e7c:	4603      	mov	r3, r0
   15e7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId])
   15e80:	4a10      	ldr	r2, [pc, #64]	; (15ec4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15e82:	9b01      	ldr	r3, [sp, #4]
   15e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e88:	2b00      	cmp	r3, #0
   15e8a:	d10d      	bne.n	15ea8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15e8c:	f7ea fd72 	bl	974 <Spi_schm_read_msr>
   15e90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15e92:	9b00      	ldr	r3, [sp, #0]
   15e94:	f003 0301 	and.w	r3, r3, #1
   15e98:	2b00      	cmp	r3, #0
   15e9a:	d100      	bne.n	15e9e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15e9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   15e9e:	490a      	ldr	r1, [pc, #40]	; (15ec8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x54>)
   15ea0:	9b01      	ldr	r3, [sp, #4]
   15ea2:	9a00      	ldr	r2, [sp, #0]
   15ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]++;
   15ea8:	4a06      	ldr	r2, [pc, #24]	; (15ec4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15eaa:	9b01      	ldr	r3, [sp, #4]
   15eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15eb0:	1c5a      	adds	r2, r3, #1
   15eb2:	4904      	ldr	r1, [pc, #16]	; (15ec4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15eb4:	9b01      	ldr	r3, [sp, #4]
   15eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15eba:	bf00      	nop
   15ebc:	b003      	add	sp, #12
   15ebe:	f85d fb04 	ldr.w	pc, [sp], #4
   15ec2:	bf00      	nop
   15ec4:	1fff9830 	.word	0x1fff9830
   15ec8:	1fff982c 	.word	0x1fff982c

00015ecc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15ecc:	b500      	push	{lr}
   15ece:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ed0:	f7ea fe9c 	bl	c0c <Sys_GetCoreID>
   15ed4:	4603      	mov	r3, r0
   15ed6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]--;
   15ed8:	4a0d      	ldr	r2, [pc, #52]	; (15f10 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15eda:	9b01      	ldr	r3, [sp, #4]
   15edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ee0:	1e5a      	subs	r2, r3, #1
   15ee2:	490b      	ldr	r1, [pc, #44]	; (15f10 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15ee4:	9b01      	ldr	r3, [sp, #4]
   15ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   15eea:	4a0a      	ldr	r2, [pc, #40]	; (15f14 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x48>)
   15eec:	9b01      	ldr	r3, [sp, #4]
   15eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ef2:	f003 0301 	and.w	r3, r3, #1
   15ef6:	2b00      	cmp	r3, #0
   15ef8:	d106      	bne.n	15f08 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
   15efa:	4a05      	ldr	r2, [pc, #20]	; (15f10 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15efc:	9b01      	ldr	r3, [sp, #4]
   15efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f02:	2b00      	cmp	r3, #0
   15f04:	d100      	bne.n	15f08 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15f06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15f08:	bf00      	nop
   15f0a:	b003      	add	sp, #12
   15f0c:	f85d fb04 	ldr.w	pc, [sp], #4
   15f10:	1fff9830 	.word	0x1fff9830
   15f14:	1fff982c 	.word	0x1fff982c

00015f18 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   15f18:	b500      	push	{lr}
   15f1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f1c:	f7ea fe76 	bl	c0c <Sys_GetCoreID>
   15f20:	4603      	mov	r3, r0
   15f22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId])
   15f24:	4a10      	ldr	r2, [pc, #64]	; (15f68 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15f26:	9b01      	ldr	r3, [sp, #4]
   15f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f2c:	2b00      	cmp	r3, #0
   15f2e:	d10d      	bne.n	15f4c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15f30:	f7ea fd20 	bl	974 <Spi_schm_read_msr>
   15f34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15f36:	9b00      	ldr	r3, [sp, #0]
   15f38:	f003 0301 	and.w	r3, r3, #1
   15f3c:	2b00      	cmp	r3, #0
   15f3e:	d100      	bne.n	15f42 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15f40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   15f42:	490a      	ldr	r1, [pc, #40]	; (15f6c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x54>)
   15f44:	9b01      	ldr	r3, [sp, #4]
   15f46:	9a00      	ldr	r2, [sp, #0]
   15f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]++;
   15f4c:	4a06      	ldr	r2, [pc, #24]	; (15f68 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15f4e:	9b01      	ldr	r3, [sp, #4]
   15f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f54:	1c5a      	adds	r2, r3, #1
   15f56:	4904      	ldr	r1, [pc, #16]	; (15f68 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15f58:	9b01      	ldr	r3, [sp, #4]
   15f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15f5e:	bf00      	nop
   15f60:	b003      	add	sp, #12
   15f62:	f85d fb04 	ldr.w	pc, [sp], #4
   15f66:	bf00      	nop
   15f68:	1fff9838 	.word	0x1fff9838
   15f6c:	1fff9834 	.word	0x1fff9834

00015f70 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   15f70:	b500      	push	{lr}
   15f72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f74:	f7ea fe4a 	bl	c0c <Sys_GetCoreID>
   15f78:	4603      	mov	r3, r0
   15f7a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]--;
   15f7c:	4a0d      	ldr	r2, [pc, #52]	; (15fb4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15f7e:	9b01      	ldr	r3, [sp, #4]
   15f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f84:	1e5a      	subs	r2, r3, #1
   15f86:	490b      	ldr	r1, [pc, #44]	; (15fb4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15f88:	9b01      	ldr	r3, [sp, #4]
   15f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   15f8e:	4a0a      	ldr	r2, [pc, #40]	; (15fb8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x48>)
   15f90:	9b01      	ldr	r3, [sp, #4]
   15f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f96:	f003 0301 	and.w	r3, r3, #1
   15f9a:	2b00      	cmp	r3, #0
   15f9c:	d106      	bne.n	15fac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
   15f9e:	4a05      	ldr	r2, [pc, #20]	; (15fb4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15fa0:	9b01      	ldr	r3, [sp, #4]
   15fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fa6:	2b00      	cmp	r3, #0
   15fa8:	d100      	bne.n	15fac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15faa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15fac:	bf00      	nop
   15fae:	b003      	add	sp, #12
   15fb0:	f85d fb04 	ldr.w	pc, [sp], #4
   15fb4:	1fff9838 	.word	0x1fff9838
   15fb8:	1fff9834 	.word	0x1fff9834

00015fbc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   15fbc:	b500      	push	{lr}
   15fbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15fc0:	f7ea fe24 	bl	c0c <Sys_GetCoreID>
   15fc4:	4603      	mov	r3, r0
   15fc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId])
   15fc8:	4a10      	ldr	r2, [pc, #64]	; (1600c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   15fca:	9b01      	ldr	r3, [sp, #4]
   15fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fd0:	2b00      	cmp	r3, #0
   15fd2:	d10d      	bne.n	15ff0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15fd4:	f7ea fcce 	bl	974 <Spi_schm_read_msr>
   15fd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15fda:	9b00      	ldr	r3, [sp, #0]
   15fdc:	f003 0301 	and.w	r3, r3, #1
   15fe0:	2b00      	cmp	r3, #0
   15fe2:	d100      	bne.n	15fe6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15fe4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   15fe6:	490a      	ldr	r1, [pc, #40]	; (16010 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x54>)
   15fe8:	9b01      	ldr	r3, [sp, #4]
   15fea:	9a00      	ldr	r2, [sp, #0]
   15fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]++;
   15ff0:	4a06      	ldr	r2, [pc, #24]	; (1600c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   15ff2:	9b01      	ldr	r3, [sp, #4]
   15ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ff8:	1c5a      	adds	r2, r3, #1
   15ffa:	4904      	ldr	r1, [pc, #16]	; (1600c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   15ffc:	9b01      	ldr	r3, [sp, #4]
   15ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16002:	bf00      	nop
   16004:	b003      	add	sp, #12
   16006:	f85d fb04 	ldr.w	pc, [sp], #4
   1600a:	bf00      	nop
   1600c:	1fff9840 	.word	0x1fff9840
   16010:	1fff983c 	.word	0x1fff983c

00016014 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   16014:	b500      	push	{lr}
   16016:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16018:	f7ea fdf8 	bl	c0c <Sys_GetCoreID>
   1601c:	4603      	mov	r3, r0
   1601e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]--;
   16020:	4a0d      	ldr	r2, [pc, #52]	; (16058 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   16022:	9b01      	ldr	r3, [sp, #4]
   16024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16028:	1e5a      	subs	r2, r3, #1
   1602a:	490b      	ldr	r1, [pc, #44]	; (16058 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   1602c:	9b01      	ldr	r3, [sp, #4]
   1602e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   16032:	4a0a      	ldr	r2, [pc, #40]	; (1605c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x48>)
   16034:	9b01      	ldr	r3, [sp, #4]
   16036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1603a:	f003 0301 	and.w	r3, r3, #1
   1603e:	2b00      	cmp	r3, #0
   16040:	d106      	bne.n	16050 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
   16042:	4a05      	ldr	r2, [pc, #20]	; (16058 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   16044:	9b01      	ldr	r3, [sp, #4]
   16046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1604a:	2b00      	cmp	r3, #0
   1604c:	d100      	bne.n	16050 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1604e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16050:	bf00      	nop
   16052:	b003      	add	sp, #12
   16054:	f85d fb04 	ldr.w	pc, [sp], #4
   16058:	1fff9840 	.word	0x1fff9840
   1605c:	1fff983c 	.word	0x1fff983c

00016060 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   16060:	b500      	push	{lr}
   16062:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16064:	f7ea fdd2 	bl	c0c <Sys_GetCoreID>
   16068:	4603      	mov	r3, r0
   1606a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId])
   1606c:	4a10      	ldr	r2, [pc, #64]	; (160b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   1606e:	9b01      	ldr	r3, [sp, #4]
   16070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16074:	2b00      	cmp	r3, #0
   16076:	d10d      	bne.n	16094 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16078:	f7ea fc7c 	bl	974 <Spi_schm_read_msr>
   1607c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1607e:	9b00      	ldr	r3, [sp, #0]
   16080:	f003 0301 	and.w	r3, r3, #1
   16084:	2b00      	cmp	r3, #0
   16086:	d100      	bne.n	1608a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16088:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1608a:	490a      	ldr	r1, [pc, #40]	; (160b4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x54>)
   1608c:	9b01      	ldr	r3, [sp, #4]
   1608e:	9a00      	ldr	r2, [sp, #0]
   16090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]++;
   16094:	4a06      	ldr	r2, [pc, #24]	; (160b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   16096:	9b01      	ldr	r3, [sp, #4]
   16098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1609c:	1c5a      	adds	r2, r3, #1
   1609e:	4904      	ldr	r1, [pc, #16]	; (160b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   160a0:	9b01      	ldr	r3, [sp, #4]
   160a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   160a6:	bf00      	nop
   160a8:	b003      	add	sp, #12
   160aa:	f85d fb04 	ldr.w	pc, [sp], #4
   160ae:	bf00      	nop
   160b0:	1fff9848 	.word	0x1fff9848
   160b4:	1fff9844 	.word	0x1fff9844

000160b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   160b8:	b500      	push	{lr}
   160ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160bc:	f7ea fda6 	bl	c0c <Sys_GetCoreID>
   160c0:	4603      	mov	r3, r0
   160c2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]--;
   160c4:	4a0d      	ldr	r2, [pc, #52]	; (160fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   160c6:	9b01      	ldr	r3, [sp, #4]
   160c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160cc:	1e5a      	subs	r2, r3, #1
   160ce:	490b      	ldr	r1, [pc, #44]	; (160fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   160d0:	9b01      	ldr	r3, [sp, #4]
   160d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   160d6:	4a0a      	ldr	r2, [pc, #40]	; (16100 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x48>)
   160d8:	9b01      	ldr	r3, [sp, #4]
   160da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160de:	f003 0301 	and.w	r3, r3, #1
   160e2:	2b00      	cmp	r3, #0
   160e4:	d106      	bne.n	160f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
   160e6:	4a05      	ldr	r2, [pc, #20]	; (160fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   160e8:	9b01      	ldr	r3, [sp, #4]
   160ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160ee:	2b00      	cmp	r3, #0
   160f0:	d100      	bne.n	160f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   160f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   160f4:	bf00      	nop
   160f6:	b003      	add	sp, #12
   160f8:	f85d fb04 	ldr.w	pc, [sp], #4
   160fc:	1fff9848 	.word	0x1fff9848
   16100:	1fff9844 	.word	0x1fff9844

00016104 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   16104:	b500      	push	{lr}
   16106:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16108:	f7ea fd80 	bl	c0c <Sys_GetCoreID>
   1610c:	4603      	mov	r3, r0
   1610e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId])
   16110:	4a10      	ldr	r2, [pc, #64]	; (16154 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   16112:	9b01      	ldr	r3, [sp, #4]
   16114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16118:	2b00      	cmp	r3, #0
   1611a:	d10d      	bne.n	16138 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1611c:	f7ea fc2a 	bl	974 <Spi_schm_read_msr>
   16120:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16122:	9b00      	ldr	r3, [sp, #0]
   16124:	f003 0301 	and.w	r3, r3, #1
   16128:	2b00      	cmp	r3, #0
   1612a:	d100      	bne.n	1612e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1612c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   1612e:	490a      	ldr	r1, [pc, #40]	; (16158 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x54>)
   16130:	9b01      	ldr	r3, [sp, #4]
   16132:	9a00      	ldr	r2, [sp, #0]
   16134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]++;
   16138:	4a06      	ldr	r2, [pc, #24]	; (16154 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   1613a:	9b01      	ldr	r3, [sp, #4]
   1613c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16140:	1c5a      	adds	r2, r3, #1
   16142:	4904      	ldr	r1, [pc, #16]	; (16154 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   16144:	9b01      	ldr	r3, [sp, #4]
   16146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1614a:	bf00      	nop
   1614c:	b003      	add	sp, #12
   1614e:	f85d fb04 	ldr.w	pc, [sp], #4
   16152:	bf00      	nop
   16154:	1fff9850 	.word	0x1fff9850
   16158:	1fff984c 	.word	0x1fff984c

0001615c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   1615c:	b500      	push	{lr}
   1615e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16160:	f7ea fd54 	bl	c0c <Sys_GetCoreID>
   16164:	4603      	mov	r3, r0
   16166:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]--;
   16168:	4a0d      	ldr	r2, [pc, #52]	; (161a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   1616a:	9b01      	ldr	r3, [sp, #4]
   1616c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16170:	1e5a      	subs	r2, r3, #1
   16172:	490b      	ldr	r1, [pc, #44]	; (161a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   16174:	9b01      	ldr	r3, [sp, #4]
   16176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1617a:	4a0a      	ldr	r2, [pc, #40]	; (161a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x48>)
   1617c:	9b01      	ldr	r3, [sp, #4]
   1617e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16182:	f003 0301 	and.w	r3, r3, #1
   16186:	2b00      	cmp	r3, #0
   16188:	d106      	bne.n	16198 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
   1618a:	4a05      	ldr	r2, [pc, #20]	; (161a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   1618c:	9b01      	ldr	r3, [sp, #4]
   1618e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16192:	2b00      	cmp	r3, #0
   16194:	d100      	bne.n	16198 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16196:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16198:	bf00      	nop
   1619a:	b003      	add	sp, #12
   1619c:	f85d fb04 	ldr.w	pc, [sp], #4
   161a0:	1fff9850 	.word	0x1fff9850
   161a4:	1fff984c 	.word	0x1fff984c

000161a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   161a8:	b500      	push	{lr}
   161aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161ac:	f7ea fd2e 	bl	c0c <Sys_GetCoreID>
   161b0:	4603      	mov	r3, r0
   161b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId])
   161b4:	4a10      	ldr	r2, [pc, #64]	; (161f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   161b6:	9b01      	ldr	r3, [sp, #4]
   161b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161bc:	2b00      	cmp	r3, #0
   161be:	d10d      	bne.n	161dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   161c0:	f7ea fbd8 	bl	974 <Spi_schm_read_msr>
   161c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   161c6:	9b00      	ldr	r3, [sp, #0]
   161c8:	f003 0301 	and.w	r3, r3, #1
   161cc:	2b00      	cmp	r3, #0
   161ce:	d100      	bne.n	161d2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   161d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   161d2:	490a      	ldr	r1, [pc, #40]	; (161fc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x54>)
   161d4:	9b01      	ldr	r3, [sp, #4]
   161d6:	9a00      	ldr	r2, [sp, #0]
   161d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]++;
   161dc:	4a06      	ldr	r2, [pc, #24]	; (161f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   161de:	9b01      	ldr	r3, [sp, #4]
   161e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161e4:	1c5a      	adds	r2, r3, #1
   161e6:	4904      	ldr	r1, [pc, #16]	; (161f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   161e8:	9b01      	ldr	r3, [sp, #4]
   161ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   161ee:	bf00      	nop
   161f0:	b003      	add	sp, #12
   161f2:	f85d fb04 	ldr.w	pc, [sp], #4
   161f6:	bf00      	nop
   161f8:	1fff9858 	.word	0x1fff9858
   161fc:	1fff9854 	.word	0x1fff9854

00016200 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   16200:	b500      	push	{lr}
   16202:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16204:	f7ea fd02 	bl	c0c <Sys_GetCoreID>
   16208:	4603      	mov	r3, r0
   1620a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]--;
   1620c:	4a0d      	ldr	r2, [pc, #52]	; (16244 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   1620e:	9b01      	ldr	r3, [sp, #4]
   16210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16214:	1e5a      	subs	r2, r3, #1
   16216:	490b      	ldr	r1, [pc, #44]	; (16244 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   16218:	9b01      	ldr	r3, [sp, #4]
   1621a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   1621e:	4a0a      	ldr	r2, [pc, #40]	; (16248 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x48>)
   16220:	9b01      	ldr	r3, [sp, #4]
   16222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16226:	f003 0301 	and.w	r3, r3, #1
   1622a:	2b00      	cmp	r3, #0
   1622c:	d106      	bne.n	1623c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
   1622e:	4a05      	ldr	r2, [pc, #20]	; (16244 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   16230:	9b01      	ldr	r3, [sp, #4]
   16232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16236:	2b00      	cmp	r3, #0
   16238:	d100      	bne.n	1623c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1623a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1623c:	bf00      	nop
   1623e:	b003      	add	sp, #12
   16240:	f85d fb04 	ldr.w	pc, [sp], #4
   16244:	1fff9858 	.word	0x1fff9858
   16248:	1fff9854 	.word	0x1fff9854

0001624c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   1624c:	b500      	push	{lr}
   1624e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16250:	f7ea fcdc 	bl	c0c <Sys_GetCoreID>
   16254:	4603      	mov	r3, r0
   16256:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId])
   16258:	4a10      	ldr	r2, [pc, #64]	; (1629c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   1625a:	9b01      	ldr	r3, [sp, #4]
   1625c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16260:	2b00      	cmp	r3, #0
   16262:	d10d      	bne.n	16280 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16264:	f7ea fb86 	bl	974 <Spi_schm_read_msr>
   16268:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1626a:	9b00      	ldr	r3, [sp, #0]
   1626c:	f003 0301 	and.w	r3, r3, #1
   16270:	2b00      	cmp	r3, #0
   16272:	d100      	bne.n	16276 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16274:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   16276:	490a      	ldr	r1, [pc, #40]	; (162a0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x54>)
   16278:	9b01      	ldr	r3, [sp, #4]
   1627a:	9a00      	ldr	r2, [sp, #0]
   1627c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]++;
   16280:	4a06      	ldr	r2, [pc, #24]	; (1629c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   16282:	9b01      	ldr	r3, [sp, #4]
   16284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16288:	1c5a      	adds	r2, r3, #1
   1628a:	4904      	ldr	r1, [pc, #16]	; (1629c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   1628c:	9b01      	ldr	r3, [sp, #4]
   1628e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16292:	bf00      	nop
   16294:	b003      	add	sp, #12
   16296:	f85d fb04 	ldr.w	pc, [sp], #4
   1629a:	bf00      	nop
   1629c:	1fff9860 	.word	0x1fff9860
   162a0:	1fff985c 	.word	0x1fff985c

000162a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   162a4:	b500      	push	{lr}
   162a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162a8:	f7ea fcb0 	bl	c0c <Sys_GetCoreID>
   162ac:	4603      	mov	r3, r0
   162ae:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]--;
   162b0:	4a0d      	ldr	r2, [pc, #52]	; (162e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   162b2:	9b01      	ldr	r3, [sp, #4]
   162b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162b8:	1e5a      	subs	r2, r3, #1
   162ba:	490b      	ldr	r1, [pc, #44]	; (162e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   162bc:	9b01      	ldr	r3, [sp, #4]
   162be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   162c2:	4a0a      	ldr	r2, [pc, #40]	; (162ec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x48>)
   162c4:	9b01      	ldr	r3, [sp, #4]
   162c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162ca:	f003 0301 	and.w	r3, r3, #1
   162ce:	2b00      	cmp	r3, #0
   162d0:	d106      	bne.n	162e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
   162d2:	4a05      	ldr	r2, [pc, #20]	; (162e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   162d4:	9b01      	ldr	r3, [sp, #4]
   162d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162da:	2b00      	cmp	r3, #0
   162dc:	d100      	bne.n	162e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   162de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   162e0:	bf00      	nop
   162e2:	b003      	add	sp, #12
   162e4:	f85d fb04 	ldr.w	pc, [sp], #4
   162e8:	1fff9860 	.word	0x1fff9860
   162ec:	1fff985c 	.word	0x1fff985c

000162f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   162f0:	b500      	push	{lr}
   162f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162f4:	f7ea fc8a 	bl	c0c <Sys_GetCoreID>
   162f8:	4603      	mov	r3, r0
   162fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId])
   162fc:	4a10      	ldr	r2, [pc, #64]	; (16340 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   162fe:	9b01      	ldr	r3, [sp, #4]
   16300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16304:	2b00      	cmp	r3, #0
   16306:	d10d      	bne.n	16324 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16308:	f7ea fb34 	bl	974 <Spi_schm_read_msr>
   1630c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1630e:	9b00      	ldr	r3, [sp, #0]
   16310:	f003 0301 	and.w	r3, r3, #1
   16314:	2b00      	cmp	r3, #0
   16316:	d100      	bne.n	1631a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16318:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1631a:	490a      	ldr	r1, [pc, #40]	; (16344 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x54>)
   1631c:	9b01      	ldr	r3, [sp, #4]
   1631e:	9a00      	ldr	r2, [sp, #0]
   16320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]++;
   16324:	4a06      	ldr	r2, [pc, #24]	; (16340 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   16326:	9b01      	ldr	r3, [sp, #4]
   16328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1632c:	1c5a      	adds	r2, r3, #1
   1632e:	4904      	ldr	r1, [pc, #16]	; (16340 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   16330:	9b01      	ldr	r3, [sp, #4]
   16332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16336:	bf00      	nop
   16338:	b003      	add	sp, #12
   1633a:	f85d fb04 	ldr.w	pc, [sp], #4
   1633e:	bf00      	nop
   16340:	1fff9868 	.word	0x1fff9868
   16344:	1fff9864 	.word	0x1fff9864

00016348 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   16348:	b500      	push	{lr}
   1634a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1634c:	f7ea fc5e 	bl	c0c <Sys_GetCoreID>
   16350:	4603      	mov	r3, r0
   16352:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]--;
   16354:	4a0d      	ldr	r2, [pc, #52]	; (1638c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   16356:	9b01      	ldr	r3, [sp, #4]
   16358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1635c:	1e5a      	subs	r2, r3, #1
   1635e:	490b      	ldr	r1, [pc, #44]	; (1638c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   16360:	9b01      	ldr	r3, [sp, #4]
   16362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   16366:	4a0a      	ldr	r2, [pc, #40]	; (16390 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x48>)
   16368:	9b01      	ldr	r3, [sp, #4]
   1636a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1636e:	f003 0301 	and.w	r3, r3, #1
   16372:	2b00      	cmp	r3, #0
   16374:	d106      	bne.n	16384 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
   16376:	4a05      	ldr	r2, [pc, #20]	; (1638c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   16378:	9b01      	ldr	r3, [sp, #4]
   1637a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1637e:	2b00      	cmp	r3, #0
   16380:	d100      	bne.n	16384 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16382:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16384:	bf00      	nop
   16386:	b003      	add	sp, #12
   16388:	f85d fb04 	ldr.w	pc, [sp], #4
   1638c:	1fff9868 	.word	0x1fff9868
   16390:	1fff9864 	.word	0x1fff9864

00016394 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   16394:	b500      	push	{lr}
   16396:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16398:	f7ea fc38 	bl	c0c <Sys_GetCoreID>
   1639c:	4603      	mov	r3, r0
   1639e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId])
   163a0:	4a10      	ldr	r2, [pc, #64]	; (163e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   163a2:	9b01      	ldr	r3, [sp, #4]
   163a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163a8:	2b00      	cmp	r3, #0
   163aa:	d10d      	bne.n	163c8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   163ac:	f7ea fae2 	bl	974 <Spi_schm_read_msr>
   163b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   163b2:	9b00      	ldr	r3, [sp, #0]
   163b4:	f003 0301 	and.w	r3, r3, #1
   163b8:	2b00      	cmp	r3, #0
   163ba:	d100      	bne.n	163be <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   163bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   163be:	490a      	ldr	r1, [pc, #40]	; (163e8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x54>)
   163c0:	9b01      	ldr	r3, [sp, #4]
   163c2:	9a00      	ldr	r2, [sp, #0]
   163c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]++;
   163c8:	4a06      	ldr	r2, [pc, #24]	; (163e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   163ca:	9b01      	ldr	r3, [sp, #4]
   163cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163d0:	1c5a      	adds	r2, r3, #1
   163d2:	4904      	ldr	r1, [pc, #16]	; (163e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   163d4:	9b01      	ldr	r3, [sp, #4]
   163d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   163da:	bf00      	nop
   163dc:	b003      	add	sp, #12
   163de:	f85d fb04 	ldr.w	pc, [sp], #4
   163e2:	bf00      	nop
   163e4:	1fff9870 	.word	0x1fff9870
   163e8:	1fff986c 	.word	0x1fff986c

000163ec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   163ec:	b500      	push	{lr}
   163ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   163f0:	f7ea fc0c 	bl	c0c <Sys_GetCoreID>
   163f4:	4603      	mov	r3, r0
   163f6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]--;
   163f8:	4a0d      	ldr	r2, [pc, #52]	; (16430 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   163fa:	9b01      	ldr	r3, [sp, #4]
   163fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16400:	1e5a      	subs	r2, r3, #1
   16402:	490b      	ldr	r1, [pc, #44]	; (16430 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   16404:	9b01      	ldr	r3, [sp, #4]
   16406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1640a:	4a0a      	ldr	r2, [pc, #40]	; (16434 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x48>)
   1640c:	9b01      	ldr	r3, [sp, #4]
   1640e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16412:	f003 0301 	and.w	r3, r3, #1
   16416:	2b00      	cmp	r3, #0
   16418:	d106      	bne.n	16428 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
   1641a:	4a05      	ldr	r2, [pc, #20]	; (16430 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   1641c:	9b01      	ldr	r3, [sp, #4]
   1641e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16422:	2b00      	cmp	r3, #0
   16424:	d100      	bne.n	16428 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16426:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16428:	bf00      	nop
   1642a:	b003      	add	sp, #12
   1642c:	f85d fb04 	ldr.w	pc, [sp], #4
   16430:	1fff9870 	.word	0x1fff9870
   16434:	1fff986c 	.word	0x1fff986c

00016438 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   16438:	b500      	push	{lr}
   1643a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1643c:	f7ea fbe6 	bl	c0c <Sys_GetCoreID>
   16440:	4603      	mov	r3, r0
   16442:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId])
   16444:	4a10      	ldr	r2, [pc, #64]	; (16488 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   16446:	9b01      	ldr	r3, [sp, #4]
   16448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1644c:	2b00      	cmp	r3, #0
   1644e:	d10d      	bne.n	1646c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16450:	f7ea fa90 	bl	974 <Spi_schm_read_msr>
   16454:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16456:	9b00      	ldr	r3, [sp, #0]
   16458:	f003 0301 	and.w	r3, r3, #1
   1645c:	2b00      	cmp	r3, #0
   1645e:	d100      	bne.n	16462 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16460:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   16462:	490a      	ldr	r1, [pc, #40]	; (1648c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x54>)
   16464:	9b01      	ldr	r3, [sp, #4]
   16466:	9a00      	ldr	r2, [sp, #0]
   16468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]++;
   1646c:	4a06      	ldr	r2, [pc, #24]	; (16488 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   1646e:	9b01      	ldr	r3, [sp, #4]
   16470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16474:	1c5a      	adds	r2, r3, #1
   16476:	4904      	ldr	r1, [pc, #16]	; (16488 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   16478:	9b01      	ldr	r3, [sp, #4]
   1647a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1647e:	bf00      	nop
   16480:	b003      	add	sp, #12
   16482:	f85d fb04 	ldr.w	pc, [sp], #4
   16486:	bf00      	nop
   16488:	1fff9878 	.word	0x1fff9878
   1648c:	1fff9874 	.word	0x1fff9874

00016490 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   16490:	b500      	push	{lr}
   16492:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16494:	f7ea fbba 	bl	c0c <Sys_GetCoreID>
   16498:	4603      	mov	r3, r0
   1649a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]--;
   1649c:	4a0d      	ldr	r2, [pc, #52]	; (164d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   1649e:	9b01      	ldr	r3, [sp, #4]
   164a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164a4:	1e5a      	subs	r2, r3, #1
   164a6:	490b      	ldr	r1, [pc, #44]	; (164d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   164a8:	9b01      	ldr	r3, [sp, #4]
   164aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   164ae:	4a0a      	ldr	r2, [pc, #40]	; (164d8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x48>)
   164b0:	9b01      	ldr	r3, [sp, #4]
   164b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164b6:	f003 0301 	and.w	r3, r3, #1
   164ba:	2b00      	cmp	r3, #0
   164bc:	d106      	bne.n	164cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
   164be:	4a05      	ldr	r2, [pc, #20]	; (164d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   164c0:	9b01      	ldr	r3, [sp, #4]
   164c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164c6:	2b00      	cmp	r3, #0
   164c8:	d100      	bne.n	164cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   164ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   164cc:	bf00      	nop
   164ce:	b003      	add	sp, #12
   164d0:	f85d fb04 	ldr.w	pc, [sp], #4
   164d4:	1fff9878 	.word	0x1fff9878
   164d8:	1fff9874 	.word	0x1fff9874

000164dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   164dc:	b500      	push	{lr}
   164de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   164e0:	f7ea fb94 	bl	c0c <Sys_GetCoreID>
   164e4:	4603      	mov	r3, r0
   164e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId])
   164e8:	4a10      	ldr	r2, [pc, #64]	; (1652c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   164ea:	9b01      	ldr	r3, [sp, #4]
   164ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164f0:	2b00      	cmp	r3, #0
   164f2:	d10d      	bne.n	16510 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   164f4:	f7ea fa3e 	bl	974 <Spi_schm_read_msr>
   164f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   164fa:	9b00      	ldr	r3, [sp, #0]
   164fc:	f003 0301 	and.w	r3, r3, #1
   16500:	2b00      	cmp	r3, #0
   16502:	d100      	bne.n	16506 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16504:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   16506:	490a      	ldr	r1, [pc, #40]	; (16530 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x54>)
   16508:	9b01      	ldr	r3, [sp, #4]
   1650a:	9a00      	ldr	r2, [sp, #0]
   1650c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]++;
   16510:	4a06      	ldr	r2, [pc, #24]	; (1652c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   16512:	9b01      	ldr	r3, [sp, #4]
   16514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16518:	1c5a      	adds	r2, r3, #1
   1651a:	4904      	ldr	r1, [pc, #16]	; (1652c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   1651c:	9b01      	ldr	r3, [sp, #4]
   1651e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16522:	bf00      	nop
   16524:	b003      	add	sp, #12
   16526:	f85d fb04 	ldr.w	pc, [sp], #4
   1652a:	bf00      	nop
   1652c:	1fff9880 	.word	0x1fff9880
   16530:	1fff987c 	.word	0x1fff987c

00016534 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   16534:	b500      	push	{lr}
   16536:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16538:	f7ea fb68 	bl	c0c <Sys_GetCoreID>
   1653c:	4603      	mov	r3, r0
   1653e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]--;
   16540:	4a0d      	ldr	r2, [pc, #52]	; (16578 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   16542:	9b01      	ldr	r3, [sp, #4]
   16544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16548:	1e5a      	subs	r2, r3, #1
   1654a:	490b      	ldr	r1, [pc, #44]	; (16578 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   1654c:	9b01      	ldr	r3, [sp, #4]
   1654e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   16552:	4a0a      	ldr	r2, [pc, #40]	; (1657c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x48>)
   16554:	9b01      	ldr	r3, [sp, #4]
   16556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1655a:	f003 0301 	and.w	r3, r3, #1
   1655e:	2b00      	cmp	r3, #0
   16560:	d106      	bne.n	16570 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
   16562:	4a05      	ldr	r2, [pc, #20]	; (16578 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   16564:	9b01      	ldr	r3, [sp, #4]
   16566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1656a:	2b00      	cmp	r3, #0
   1656c:	d100      	bne.n	16570 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1656e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16570:	bf00      	nop
   16572:	b003      	add	sp, #12
   16574:	f85d fb04 	ldr.w	pc, [sp], #4
   16578:	1fff9880 	.word	0x1fff9880
   1657c:	1fff987c 	.word	0x1fff987c

00016580 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   16580:	b500      	push	{lr}
   16582:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16584:	f7ea fb42 	bl	c0c <Sys_GetCoreID>
   16588:	4603      	mov	r3, r0
   1658a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId])
   1658c:	4a10      	ldr	r2, [pc, #64]	; (165d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   1658e:	9b01      	ldr	r3, [sp, #4]
   16590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16594:	2b00      	cmp	r3, #0
   16596:	d10d      	bne.n	165b4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16598:	f7ea f9ec 	bl	974 <Spi_schm_read_msr>
   1659c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1659e:	9b00      	ldr	r3, [sp, #0]
   165a0:	f003 0301 	and.w	r3, r3, #1
   165a4:	2b00      	cmp	r3, #0
   165a6:	d100      	bne.n	165aa <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   165a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   165aa:	490a      	ldr	r1, [pc, #40]	; (165d4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x54>)
   165ac:	9b01      	ldr	r3, [sp, #4]
   165ae:	9a00      	ldr	r2, [sp, #0]
   165b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]++;
   165b4:	4a06      	ldr	r2, [pc, #24]	; (165d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   165b6:	9b01      	ldr	r3, [sp, #4]
   165b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165bc:	1c5a      	adds	r2, r3, #1
   165be:	4904      	ldr	r1, [pc, #16]	; (165d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   165c0:	9b01      	ldr	r3, [sp, #4]
   165c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   165c6:	bf00      	nop
   165c8:	b003      	add	sp, #12
   165ca:	f85d fb04 	ldr.w	pc, [sp], #4
   165ce:	bf00      	nop
   165d0:	1fff9888 	.word	0x1fff9888
   165d4:	1fff9884 	.word	0x1fff9884

000165d8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   165d8:	b500      	push	{lr}
   165da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   165dc:	f7ea fb16 	bl	c0c <Sys_GetCoreID>
   165e0:	4603      	mov	r3, r0
   165e2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]--;
   165e4:	4a0d      	ldr	r2, [pc, #52]	; (1661c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   165e6:	9b01      	ldr	r3, [sp, #4]
   165e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165ec:	1e5a      	subs	r2, r3, #1
   165ee:	490b      	ldr	r1, [pc, #44]	; (1661c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   165f0:	9b01      	ldr	r3, [sp, #4]
   165f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   165f6:	4a0a      	ldr	r2, [pc, #40]	; (16620 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x48>)
   165f8:	9b01      	ldr	r3, [sp, #4]
   165fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165fe:	f003 0301 	and.w	r3, r3, #1
   16602:	2b00      	cmp	r3, #0
   16604:	d106      	bne.n	16614 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
   16606:	4a05      	ldr	r2, [pc, #20]	; (1661c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   16608:	9b01      	ldr	r3, [sp, #4]
   1660a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1660e:	2b00      	cmp	r3, #0
   16610:	d100      	bne.n	16614 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16612:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16614:	bf00      	nop
   16616:	b003      	add	sp, #12
   16618:	f85d fb04 	ldr.w	pc, [sp], #4
   1661c:	1fff9888 	.word	0x1fff9888
   16620:	1fff9884 	.word	0x1fff9884

00016624 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   16624:	b500      	push	{lr}
   16626:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16628:	f7ea faf0 	bl	c0c <Sys_GetCoreID>
   1662c:	4603      	mov	r3, r0
   1662e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId])
   16630:	4a10      	ldr	r2, [pc, #64]	; (16674 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   16632:	9b01      	ldr	r3, [sp, #4]
   16634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16638:	2b00      	cmp	r3, #0
   1663a:	d10d      	bne.n	16658 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1663c:	f7ea f99a 	bl	974 <Spi_schm_read_msr>
   16640:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16642:	9b00      	ldr	r3, [sp, #0]
   16644:	f003 0301 	and.w	r3, r3, #1
   16648:	2b00      	cmp	r3, #0
   1664a:	d100      	bne.n	1664e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1664c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1664e:	490a      	ldr	r1, [pc, #40]	; (16678 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x54>)
   16650:	9b01      	ldr	r3, [sp, #4]
   16652:	9a00      	ldr	r2, [sp, #0]
   16654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]++;
   16658:	4a06      	ldr	r2, [pc, #24]	; (16674 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   1665a:	9b01      	ldr	r3, [sp, #4]
   1665c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16660:	1c5a      	adds	r2, r3, #1
   16662:	4904      	ldr	r1, [pc, #16]	; (16674 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   16664:	9b01      	ldr	r3, [sp, #4]
   16666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1666a:	bf00      	nop
   1666c:	b003      	add	sp, #12
   1666e:	f85d fb04 	ldr.w	pc, [sp], #4
   16672:	bf00      	nop
   16674:	1fff9890 	.word	0x1fff9890
   16678:	1fff988c 	.word	0x1fff988c

0001667c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   1667c:	b500      	push	{lr}
   1667e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16680:	f7ea fac4 	bl	c0c <Sys_GetCoreID>
   16684:	4603      	mov	r3, r0
   16686:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]--;
   16688:	4a0d      	ldr	r2, [pc, #52]	; (166c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   1668a:	9b01      	ldr	r3, [sp, #4]
   1668c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16690:	1e5a      	subs	r2, r3, #1
   16692:	490b      	ldr	r1, [pc, #44]	; (166c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   16694:	9b01      	ldr	r3, [sp, #4]
   16696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1669a:	4a0a      	ldr	r2, [pc, #40]	; (166c4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x48>)
   1669c:	9b01      	ldr	r3, [sp, #4]
   1669e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166a2:	f003 0301 	and.w	r3, r3, #1
   166a6:	2b00      	cmp	r3, #0
   166a8:	d106      	bne.n	166b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
   166aa:	4a05      	ldr	r2, [pc, #20]	; (166c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   166ac:	9b01      	ldr	r3, [sp, #4]
   166ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166b2:	2b00      	cmp	r3, #0
   166b4:	d100      	bne.n	166b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   166b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   166b8:	bf00      	nop
   166ba:	b003      	add	sp, #12
   166bc:	f85d fb04 	ldr.w	pc, [sp], #4
   166c0:	1fff9890 	.word	0x1fff9890
   166c4:	1fff988c 	.word	0x1fff988c

000166c8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   166c8:	b500      	push	{lr}
   166ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   166cc:	f7ea fa9e 	bl	c0c <Sys_GetCoreID>
   166d0:	4603      	mov	r3, r0
   166d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId])
   166d4:	4a10      	ldr	r2, [pc, #64]	; (16718 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   166d6:	9b01      	ldr	r3, [sp, #4]
   166d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166dc:	2b00      	cmp	r3, #0
   166de:	d10d      	bne.n	166fc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   166e0:	f7ea f948 	bl	974 <Spi_schm_read_msr>
   166e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   166e6:	9b00      	ldr	r3, [sp, #0]
   166e8:	f003 0301 	and.w	r3, r3, #1
   166ec:	2b00      	cmp	r3, #0
   166ee:	d100      	bne.n	166f2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   166f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   166f2:	490a      	ldr	r1, [pc, #40]	; (1671c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x54>)
   166f4:	9b01      	ldr	r3, [sp, #4]
   166f6:	9a00      	ldr	r2, [sp, #0]
   166f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]++;
   166fc:	4a06      	ldr	r2, [pc, #24]	; (16718 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   166fe:	9b01      	ldr	r3, [sp, #4]
   16700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16704:	1c5a      	adds	r2, r3, #1
   16706:	4904      	ldr	r1, [pc, #16]	; (16718 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   16708:	9b01      	ldr	r3, [sp, #4]
   1670a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1670e:	bf00      	nop
   16710:	b003      	add	sp, #12
   16712:	f85d fb04 	ldr.w	pc, [sp], #4
   16716:	bf00      	nop
   16718:	1fff9898 	.word	0x1fff9898
   1671c:	1fff9894 	.word	0x1fff9894

00016720 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   16720:	b500      	push	{lr}
   16722:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16724:	f7ea fa72 	bl	c0c <Sys_GetCoreID>
   16728:	4603      	mov	r3, r0
   1672a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]--;
   1672c:	4a0d      	ldr	r2, [pc, #52]	; (16764 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   1672e:	9b01      	ldr	r3, [sp, #4]
   16730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16734:	1e5a      	subs	r2, r3, #1
   16736:	490b      	ldr	r1, [pc, #44]	; (16764 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   16738:	9b01      	ldr	r3, [sp, #4]
   1673a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1673e:	4a0a      	ldr	r2, [pc, #40]	; (16768 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x48>)
   16740:	9b01      	ldr	r3, [sp, #4]
   16742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16746:	f003 0301 	and.w	r3, r3, #1
   1674a:	2b00      	cmp	r3, #0
   1674c:	d106      	bne.n	1675c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
   1674e:	4a05      	ldr	r2, [pc, #20]	; (16764 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   16750:	9b01      	ldr	r3, [sp, #4]
   16752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16756:	2b00      	cmp	r3, #0
   16758:	d100      	bne.n	1675c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1675a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1675c:	bf00      	nop
   1675e:	b003      	add	sp, #12
   16760:	f85d fb04 	ldr.w	pc, [sp], #4
   16764:	1fff9898 	.word	0x1fff9898
   16768:	1fff9894 	.word	0x1fff9894

0001676c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   1676c:	b500      	push	{lr}
   1676e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16770:	f7ea fa4c 	bl	c0c <Sys_GetCoreID>
   16774:	4603      	mov	r3, r0
   16776:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId])
   16778:	4a10      	ldr	r2, [pc, #64]	; (167bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   1677a:	9b01      	ldr	r3, [sp, #4]
   1677c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16780:	2b00      	cmp	r3, #0
   16782:	d10d      	bne.n	167a0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16784:	f7ea f8f6 	bl	974 <Spi_schm_read_msr>
   16788:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1678a:	9b00      	ldr	r3, [sp, #0]
   1678c:	f003 0301 	and.w	r3, r3, #1
   16790:	2b00      	cmp	r3, #0
   16792:	d100      	bne.n	16796 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16794:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   16796:	490a      	ldr	r1, [pc, #40]	; (167c0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x54>)
   16798:	9b01      	ldr	r3, [sp, #4]
   1679a:	9a00      	ldr	r2, [sp, #0]
   1679c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]++;
   167a0:	4a06      	ldr	r2, [pc, #24]	; (167bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   167a2:	9b01      	ldr	r3, [sp, #4]
   167a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167a8:	1c5a      	adds	r2, r3, #1
   167aa:	4904      	ldr	r1, [pc, #16]	; (167bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   167ac:	9b01      	ldr	r3, [sp, #4]
   167ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   167b2:	bf00      	nop
   167b4:	b003      	add	sp, #12
   167b6:	f85d fb04 	ldr.w	pc, [sp], #4
   167ba:	bf00      	nop
   167bc:	1fff98a0 	.word	0x1fff98a0
   167c0:	1fff989c 	.word	0x1fff989c

000167c4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   167c4:	b500      	push	{lr}
   167c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167c8:	f7ea fa20 	bl	c0c <Sys_GetCoreID>
   167cc:	4603      	mov	r3, r0
   167ce:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]--;
   167d0:	4a0d      	ldr	r2, [pc, #52]	; (16808 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   167d2:	9b01      	ldr	r3, [sp, #4]
   167d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167d8:	1e5a      	subs	r2, r3, #1
   167da:	490b      	ldr	r1, [pc, #44]	; (16808 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   167dc:	9b01      	ldr	r3, [sp, #4]
   167de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   167e2:	4a0a      	ldr	r2, [pc, #40]	; (1680c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x48>)
   167e4:	9b01      	ldr	r3, [sp, #4]
   167e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167ea:	f003 0301 	and.w	r3, r3, #1
   167ee:	2b00      	cmp	r3, #0
   167f0:	d106      	bne.n	16800 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
   167f2:	4a05      	ldr	r2, [pc, #20]	; (16808 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   167f4:	9b01      	ldr	r3, [sp, #4]
   167f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167fa:	2b00      	cmp	r3, #0
   167fc:	d100      	bne.n	16800 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   167fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16800:	bf00      	nop
   16802:	b003      	add	sp, #12
   16804:	f85d fb04 	ldr.w	pc, [sp], #4
   16808:	1fff98a0 	.word	0x1fff98a0
   1680c:	1fff989c 	.word	0x1fff989c

00016810 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   16810:	b500      	push	{lr}
   16812:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16814:	f7ea f9fa 	bl	c0c <Sys_GetCoreID>
   16818:	4603      	mov	r3, r0
   1681a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId])
   1681c:	4a10      	ldr	r2, [pc, #64]	; (16860 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   1681e:	9b01      	ldr	r3, [sp, #4]
   16820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16824:	2b00      	cmp	r3, #0
   16826:	d10d      	bne.n	16844 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16828:	f7ea f8a4 	bl	974 <Spi_schm_read_msr>
   1682c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1682e:	9b00      	ldr	r3, [sp, #0]
   16830:	f003 0301 	and.w	r3, r3, #1
   16834:	2b00      	cmp	r3, #0
   16836:	d100      	bne.n	1683a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16838:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1683a:	490a      	ldr	r1, [pc, #40]	; (16864 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x54>)
   1683c:	9b01      	ldr	r3, [sp, #4]
   1683e:	9a00      	ldr	r2, [sp, #0]
   16840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]++;
   16844:	4a06      	ldr	r2, [pc, #24]	; (16860 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   16846:	9b01      	ldr	r3, [sp, #4]
   16848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1684c:	1c5a      	adds	r2, r3, #1
   1684e:	4904      	ldr	r1, [pc, #16]	; (16860 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   16850:	9b01      	ldr	r3, [sp, #4]
   16852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16856:	bf00      	nop
   16858:	b003      	add	sp, #12
   1685a:	f85d fb04 	ldr.w	pc, [sp], #4
   1685e:	bf00      	nop
   16860:	1fff98a8 	.word	0x1fff98a8
   16864:	1fff98a4 	.word	0x1fff98a4

00016868 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   16868:	b500      	push	{lr}
   1686a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1686c:	f7ea f9ce 	bl	c0c <Sys_GetCoreID>
   16870:	4603      	mov	r3, r0
   16872:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]--;
   16874:	4a0d      	ldr	r2, [pc, #52]	; (168ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   16876:	9b01      	ldr	r3, [sp, #4]
   16878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1687c:	1e5a      	subs	r2, r3, #1
   1687e:	490b      	ldr	r1, [pc, #44]	; (168ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   16880:	9b01      	ldr	r3, [sp, #4]
   16882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   16886:	4a0a      	ldr	r2, [pc, #40]	; (168b0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x48>)
   16888:	9b01      	ldr	r3, [sp, #4]
   1688a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1688e:	f003 0301 	and.w	r3, r3, #1
   16892:	2b00      	cmp	r3, #0
   16894:	d106      	bne.n	168a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
   16896:	4a05      	ldr	r2, [pc, #20]	; (168ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   16898:	9b01      	ldr	r3, [sp, #4]
   1689a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1689e:	2b00      	cmp	r3, #0
   168a0:	d100      	bne.n	168a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   168a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   168a4:	bf00      	nop
   168a6:	b003      	add	sp, #12
   168a8:	f85d fb04 	ldr.w	pc, [sp], #4
   168ac:	1fff98a8 	.word	0x1fff98a8
   168b0:	1fff98a4 	.word	0x1fff98a4

000168b4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   168b4:	b500      	push	{lr}
   168b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168b8:	f7ea f9a8 	bl	c0c <Sys_GetCoreID>
   168bc:	4603      	mov	r3, r0
   168be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId])
   168c0:	4a10      	ldr	r2, [pc, #64]	; (16904 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   168c2:	9b01      	ldr	r3, [sp, #4]
   168c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168c8:	2b00      	cmp	r3, #0
   168ca:	d10d      	bne.n	168e8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   168cc:	f7ea f852 	bl	974 <Spi_schm_read_msr>
   168d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   168d2:	9b00      	ldr	r3, [sp, #0]
   168d4:	f003 0301 	and.w	r3, r3, #1
   168d8:	2b00      	cmp	r3, #0
   168da:	d100      	bne.n	168de <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   168dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   168de:	490a      	ldr	r1, [pc, #40]	; (16908 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x54>)
   168e0:	9b01      	ldr	r3, [sp, #4]
   168e2:	9a00      	ldr	r2, [sp, #0]
   168e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]++;
   168e8:	4a06      	ldr	r2, [pc, #24]	; (16904 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   168ea:	9b01      	ldr	r3, [sp, #4]
   168ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168f0:	1c5a      	adds	r2, r3, #1
   168f2:	4904      	ldr	r1, [pc, #16]	; (16904 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   168f4:	9b01      	ldr	r3, [sp, #4]
   168f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   168fa:	bf00      	nop
   168fc:	b003      	add	sp, #12
   168fe:	f85d fb04 	ldr.w	pc, [sp], #4
   16902:	bf00      	nop
   16904:	1fff98b0 	.word	0x1fff98b0
   16908:	1fff98ac 	.word	0x1fff98ac

0001690c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   1690c:	b500      	push	{lr}
   1690e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16910:	f7ea f97c 	bl	c0c <Sys_GetCoreID>
   16914:	4603      	mov	r3, r0
   16916:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]--;
   16918:	4a0d      	ldr	r2, [pc, #52]	; (16950 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   1691a:	9b01      	ldr	r3, [sp, #4]
   1691c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16920:	1e5a      	subs	r2, r3, #1
   16922:	490b      	ldr	r1, [pc, #44]	; (16950 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   16924:	9b01      	ldr	r3, [sp, #4]
   16926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1692a:	4a0a      	ldr	r2, [pc, #40]	; (16954 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x48>)
   1692c:	9b01      	ldr	r3, [sp, #4]
   1692e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16932:	f003 0301 	and.w	r3, r3, #1
   16936:	2b00      	cmp	r3, #0
   16938:	d106      	bne.n	16948 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
   1693a:	4a05      	ldr	r2, [pc, #20]	; (16950 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   1693c:	9b01      	ldr	r3, [sp, #4]
   1693e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16942:	2b00      	cmp	r3, #0
   16944:	d100      	bne.n	16948 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16946:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16948:	bf00      	nop
   1694a:	b003      	add	sp, #12
   1694c:	f85d fb04 	ldr.w	pc, [sp], #4
   16950:	1fff98b0 	.word	0x1fff98b0
   16954:	1fff98ac 	.word	0x1fff98ac

00016958 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   16958:	b500      	push	{lr}
   1695a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1695c:	f7ea f956 	bl	c0c <Sys_GetCoreID>
   16960:	4603      	mov	r3, r0
   16962:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId])
   16964:	4a10      	ldr	r2, [pc, #64]	; (169a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   16966:	9b01      	ldr	r3, [sp, #4]
   16968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1696c:	2b00      	cmp	r3, #0
   1696e:	d10d      	bne.n	1698c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16970:	f7ea f800 	bl	974 <Spi_schm_read_msr>
   16974:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16976:	9b00      	ldr	r3, [sp, #0]
   16978:	f003 0301 	and.w	r3, r3, #1
   1697c:	2b00      	cmp	r3, #0
   1697e:	d100      	bne.n	16982 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16980:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   16982:	490a      	ldr	r1, [pc, #40]	; (169ac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x54>)
   16984:	9b01      	ldr	r3, [sp, #4]
   16986:	9a00      	ldr	r2, [sp, #0]
   16988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]++;
   1698c:	4a06      	ldr	r2, [pc, #24]	; (169a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   1698e:	9b01      	ldr	r3, [sp, #4]
   16990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16994:	1c5a      	adds	r2, r3, #1
   16996:	4904      	ldr	r1, [pc, #16]	; (169a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   16998:	9b01      	ldr	r3, [sp, #4]
   1699a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1699e:	bf00      	nop
   169a0:	b003      	add	sp, #12
   169a2:	f85d fb04 	ldr.w	pc, [sp], #4
   169a6:	bf00      	nop
   169a8:	1fff98b8 	.word	0x1fff98b8
   169ac:	1fff98b4 	.word	0x1fff98b4

000169b0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   169b0:	b500      	push	{lr}
   169b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   169b4:	f7ea f92a 	bl	c0c <Sys_GetCoreID>
   169b8:	4603      	mov	r3, r0
   169ba:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]--;
   169bc:	4a0d      	ldr	r2, [pc, #52]	; (169f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   169be:	9b01      	ldr	r3, [sp, #4]
   169c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169c4:	1e5a      	subs	r2, r3, #1
   169c6:	490b      	ldr	r1, [pc, #44]	; (169f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   169c8:	9b01      	ldr	r3, [sp, #4]
   169ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   169ce:	4a0a      	ldr	r2, [pc, #40]	; (169f8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x48>)
   169d0:	9b01      	ldr	r3, [sp, #4]
   169d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169d6:	f003 0301 	and.w	r3, r3, #1
   169da:	2b00      	cmp	r3, #0
   169dc:	d106      	bne.n	169ec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
   169de:	4a05      	ldr	r2, [pc, #20]	; (169f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   169e0:	9b01      	ldr	r3, [sp, #4]
   169e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169e6:	2b00      	cmp	r3, #0
   169e8:	d100      	bne.n	169ec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   169ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   169ec:	bf00      	nop
   169ee:	b003      	add	sp, #12
   169f0:	f85d fb04 	ldr.w	pc, [sp], #4
   169f4:	1fff98b8 	.word	0x1fff98b8
   169f8:	1fff98b4 	.word	0x1fff98b4

000169fc <Det_Init>:
*
* @requirements   DET008
*
*/
void Det_Init(void)
{
   169fc:	b508      	push	{r3, lr}
    SEGGER_RTT_Init();  //Initializing RTT library.
   169fe:	f7ea faa3 	bl	f48 <SEGGER_RTT_Init>
}
   16a02:	bf00      	nop
   16a04:	bd08      	pop	{r3, pc}

00016a06 <Det_SearchApi>:
 * @param[in] ApiId Api id where error was detected.
 * @return StringPtr Ptr to string of api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchApi( uint8 ModuleIndex, uint8 ApiId ) {
   16a06:	b084      	sub	sp, #16
   16a08:	4603      	mov	r3, r0
   16a0a:	460a      	mov	r2, r1
   16a0c:	f88d 3007 	strb.w	r3, [sp, #7]
   16a10:	4613      	mov	r3, r2
   16a12:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   16a16:	2300      	movs	r3, #0
   16a18:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16a1c:	2300      	movs	r3, #0
   16a1e:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   16a20:	2300      	movs	r3, #0
   16a22:	f88d 300f 	strb.w	r3, [sp, #15]
   16a26:	e026      	b.n	16a76 <Det_SearchApi+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiId == ApiId ) {
   16a28:	491b      	ldr	r1, [pc, #108]	; (16a98 <Det_SearchApi+0x92>)
   16a2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16a2e:	4613      	mov	r3, r2
   16a30:	005b      	lsls	r3, r3, #1
   16a32:	4413      	add	r3, r2
   16a34:	00db      	lsls	r3, r3, #3
   16a36:	440b      	add	r3, r1
   16a38:	68da      	ldr	r2, [r3, #12]
   16a3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16a3e:	00db      	lsls	r3, r3, #3
   16a40:	4413      	add	r3, r2
   16a42:	781b      	ldrb	r3, [r3, #0]
   16a44:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16a48:	429a      	cmp	r2, r3
   16a4a:	d10f      	bne.n	16a6c <Det_SearchApi+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiName;
   16a4c:	4912      	ldr	r1, [pc, #72]	; (16a98 <Det_SearchApi+0x92>)
   16a4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16a52:	4613      	mov	r3, r2
   16a54:	005b      	lsls	r3, r3, #1
   16a56:	4413      	add	r3, r2
   16a58:	00db      	lsls	r3, r3, #3
   16a5a:	440b      	add	r3, r1
   16a5c:	68da      	ldr	r2, [r3, #12]
   16a5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16a62:	00db      	lsls	r3, r3, #3
   16a64:	4413      	add	r3, r2
   16a66:	685b      	ldr	r3, [r3, #4]
   16a68:	9302      	str	r3, [sp, #8]
            break;
   16a6a:	e011      	b.n	16a90 <Det_SearchApi+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   16a6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16a70:	3301      	adds	r3, #1
   16a72:	f88d 300f 	strb.w	r3, [sp, #15]
   16a76:	4908      	ldr	r1, [pc, #32]	; (16a98 <Det_SearchApi+0x92>)
   16a78:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16a7c:	4613      	mov	r3, r2
   16a7e:	005b      	lsls	r3, r3, #1
   16a80:	4413      	add	r3, r2
   16a82:	00db      	lsls	r3, r3, #3
   16a84:	440b      	add	r3, r1
   16a86:	7a1b      	ldrb	r3, [r3, #8]
   16a88:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16a8c:	429a      	cmp	r2, r3
   16a8e:	d3cb      	bcc.n	16a28 <Det_SearchApi+0x22>
        }
    }

    return StringPtr;
   16a90:	9b02      	ldr	r3, [sp, #8]
}
   16a92:	4618      	mov	r0, r3
   16a94:	b004      	add	sp, #16
   16a96:	4770      	bx	lr
   16a98:	00018950 	.word	0x00018950

00016a9c <Det_SearchError>:
 * @param[in] ErrorId Error id reported.
 * @return StringPtr Ptr to string of error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchError( uint8 ModuleIndex, uint8 ErrorId ) {
   16a9c:	b084      	sub	sp, #16
   16a9e:	4603      	mov	r3, r0
   16aa0:	460a      	mov	r2, r1
   16aa2:	f88d 3007 	strb.w	r3, [sp, #7]
   16aa6:	4613      	mov	r3, r2
   16aa8:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   16aac:	2300      	movs	r3, #0
   16aae:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16ab2:	2300      	movs	r3, #0
   16ab4:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16ab6:	2300      	movs	r3, #0
   16ab8:	f88d 300f 	strb.w	r3, [sp, #15]
   16abc:	e026      	b.n	16b0c <Det_SearchError+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorId == ErrorId ) {
   16abe:	491c      	ldr	r1, [pc, #112]	; (16b30 <Det_SearchError+0x94>)
   16ac0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16ac4:	4613      	mov	r3, r2
   16ac6:	005b      	lsls	r3, r3, #1
   16ac8:	4413      	add	r3, r2
   16aca:	00db      	lsls	r3, r3, #3
   16acc:	440b      	add	r3, r1
   16ace:	695a      	ldr	r2, [r3, #20]
   16ad0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16ad4:	00db      	lsls	r3, r3, #3
   16ad6:	4413      	add	r3, r2
   16ad8:	781b      	ldrb	r3, [r3, #0]
   16ada:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16ade:	429a      	cmp	r2, r3
   16ae0:	d10f      	bne.n	16b02 <Det_SearchError+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorMeaning;
   16ae2:	4913      	ldr	r1, [pc, #76]	; (16b30 <Det_SearchError+0x94>)
   16ae4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16ae8:	4613      	mov	r3, r2
   16aea:	005b      	lsls	r3, r3, #1
   16aec:	4413      	add	r3, r2
   16aee:	00db      	lsls	r3, r3, #3
   16af0:	440b      	add	r3, r1
   16af2:	695a      	ldr	r2, [r3, #20]
   16af4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16af8:	00db      	lsls	r3, r3, #3
   16afa:	4413      	add	r3, r2
   16afc:	685b      	ldr	r3, [r3, #4]
   16afe:	9302      	str	r3, [sp, #8]
            break;
   16b00:	e011      	b.n	16b26 <Det_SearchError+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16b02:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b06:	3301      	adds	r3, #1
   16b08:	f88d 300f 	strb.w	r3, [sp, #15]
   16b0c:	4908      	ldr	r1, [pc, #32]	; (16b30 <Det_SearchError+0x94>)
   16b0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16b12:	4613      	mov	r3, r2
   16b14:	005b      	lsls	r3, r3, #1
   16b16:	4413      	add	r3, r2
   16b18:	00db      	lsls	r3, r3, #3
   16b1a:	440b      	add	r3, r1
   16b1c:	7c1b      	ldrb	r3, [r3, #16]
   16b1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16b22:	429a      	cmp	r2, r3
   16b24:	d3cb      	bcc.n	16abe <Det_SearchError+0x22>
        }
    }

    return StringPtr;
   16b26:	9b02      	ldr	r3, [sp, #8]
}
   16b28:	4618      	mov	r0, r3
   16b2a:	b004      	add	sp, #16
   16b2c:	4770      	bx	lr
   16b2e:	bf00      	nop
   16b30:	00018950 	.word	0x00018950

00016b34 <Det_GetModuleName>:
 * @param[in] ModuleId Module Id where error was detected.
 * @return StringPtr Pointer to string module name.
 * 
 * @note If the module Id isn´t registered it will return NULL;
 */
const char* Det_GetModuleName( uint16 ModuleId ) {
   16b34:	b084      	sub	sp, #16
   16b36:	4603      	mov	r3, r0
   16b38:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data 
    uint8 i = 0;
   16b3c:	2300      	movs	r3, #0
   16b3e:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16b42:	2300      	movs	r3, #0
   16b44:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16b46:	2300      	movs	r3, #0
   16b48:	f88d 300f 	strb.w	r3, [sp, #15]
   16b4c:	e01c      	b.n	16b88 <Det_GetModuleName+0x54>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16b4e:	4912      	ldr	r1, [pc, #72]	; (16b98 <Det_GetModuleName+0x64>)
   16b50:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16b54:	4613      	mov	r3, r2
   16b56:	005b      	lsls	r3, r3, #1
   16b58:	4413      	add	r3, r2
   16b5a:	00db      	lsls	r3, r3, #3
   16b5c:	440b      	add	r3, r1
   16b5e:	881b      	ldrh	r3, [r3, #0]
   16b60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16b64:	429a      	cmp	r2, r3
   16b66:	d10a      	bne.n	16b7e <Det_GetModuleName+0x4a>
            StringPtr = ModuleStrings_Ptr[i].ModuleName;
   16b68:	490b      	ldr	r1, [pc, #44]	; (16b98 <Det_GetModuleName+0x64>)
   16b6a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16b6e:	4613      	mov	r3, r2
   16b70:	005b      	lsls	r3, r3, #1
   16b72:	4413      	add	r3, r2
   16b74:	00db      	lsls	r3, r3, #3
   16b76:	440b      	add	r3, r1
   16b78:	685b      	ldr	r3, [r3, #4]
   16b7a:	9302      	str	r3, [sp, #8]
            break;
   16b7c:	e008      	b.n	16b90 <Det_GetModuleName+0x5c>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16b7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b82:	3301      	adds	r3, #1
   16b84:	f88d 300f 	strb.w	r3, [sp, #15]
   16b88:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b8c:	2b0a      	cmp	r3, #10
   16b8e:	d9de      	bls.n	16b4e <Det_GetModuleName+0x1a>
        }
    }

    return StringPtr;
   16b90:	9b02      	ldr	r3, [sp, #8]
}
   16b92:	4618      	mov	r0, r3
   16b94:	b004      	add	sp, #16
   16b96:	4770      	bx	lr
   16b98:	00018950 	.word	0x00018950

00016b9c <Det_GetApiName>:
 * @param[in] ApiId Api Id where error was detected 
 * @return StringPtr Pointer to string Api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetApiName( uint16 ModuleId, uint8 ApiId ) {
   16b9c:	b500      	push	{lr}
   16b9e:	b085      	sub	sp, #20
   16ba0:	4603      	mov	r3, r0
   16ba2:	460a      	mov	r2, r1
   16ba4:	f8ad 3006 	strh.w	r3, [sp, #6]
   16ba8:	4613      	mov	r3, r2
   16baa:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16bae:	2300      	movs	r3, #0
   16bb0:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16bb4:	2300      	movs	r3, #0
   16bb6:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16bb8:	2300      	movs	r3, #0
   16bba:	f88d 300f 	strb.w	r3, [sp, #15]
   16bbe:	e01b      	b.n	16bf8 <Det_GetApiName+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16bc0:	4912      	ldr	r1, [pc, #72]	; (16c0c <Det_GetApiName+0x70>)
   16bc2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16bc6:	4613      	mov	r3, r2
   16bc8:	005b      	lsls	r3, r3, #1
   16bca:	4413      	add	r3, r2
   16bcc:	00db      	lsls	r3, r3, #3
   16bce:	440b      	add	r3, r1
   16bd0:	881b      	ldrh	r3, [r3, #0]
   16bd2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16bd6:	429a      	cmp	r2, r3
   16bd8:	d109      	bne.n	16bee <Det_GetApiName+0x52>
            StringPtr = Det_SearchApi( i , ApiId ); //Searching Api.
   16bda:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16bde:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16be2:	4611      	mov	r1, r2
   16be4:	4618      	mov	r0, r3
   16be6:	f7ff ff0e 	bl	16a06 <Det_SearchApi>
   16bea:	9002      	str	r0, [sp, #8]
            break;
   16bec:	e008      	b.n	16c00 <Det_GetApiName+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16bee:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bf2:	3301      	adds	r3, #1
   16bf4:	f88d 300f 	strb.w	r3, [sp, #15]
   16bf8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bfc:	2b0a      	cmp	r3, #10
   16bfe:	d9df      	bls.n	16bc0 <Det_GetApiName+0x24>
        }
    }

    return StringPtr;
   16c00:	9b02      	ldr	r3, [sp, #8]
}
   16c02:	4618      	mov	r0, r3
   16c04:	b005      	add	sp, #20
   16c06:	f85d fb04 	ldr.w	pc, [sp], #4
   16c0a:	bf00      	nop
   16c0c:	00018950 	.word	0x00018950

00016c10 <Det_GetErrorMeaning>:
 * @param[in] ErrorId Error Id reported. 
 * @return StringPtr Pointer to string Error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetErrorMeaning( uint16 ModuleId, uint8 ErrorId ) {
   16c10:	b500      	push	{lr}
   16c12:	b085      	sub	sp, #20
   16c14:	4603      	mov	r3, r0
   16c16:	460a      	mov	r2, r1
   16c18:	f8ad 3006 	strh.w	r3, [sp, #6]
   16c1c:	4613      	mov	r3, r2
   16c1e:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16c22:	2300      	movs	r3, #0
   16c24:	f88d 300f 	strb.w	r3, [sp, #15]
    const char * StringPtr = NULL_PTR;
   16c28:	2300      	movs	r3, #0
   16c2a:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16c2c:	2300      	movs	r3, #0
   16c2e:	f88d 300f 	strb.w	r3, [sp, #15]
   16c32:	e01b      	b.n	16c6c <Det_GetErrorMeaning+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16c34:	4912      	ldr	r1, [pc, #72]	; (16c80 <Det_GetErrorMeaning+0x70>)
   16c36:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16c3a:	4613      	mov	r3, r2
   16c3c:	005b      	lsls	r3, r3, #1
   16c3e:	4413      	add	r3, r2
   16c40:	00db      	lsls	r3, r3, #3
   16c42:	440b      	add	r3, r1
   16c44:	881b      	ldrh	r3, [r3, #0]
   16c46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16c4a:	429a      	cmp	r2, r3
   16c4c:	d109      	bne.n	16c62 <Det_GetErrorMeaning+0x52>
            StringPtr = Det_SearchError( i, ErrorId );
   16c4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16c52:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c56:	4611      	mov	r1, r2
   16c58:	4618      	mov	r0, r3
   16c5a:	f7ff ff1f 	bl	16a9c <Det_SearchError>
   16c5e:	9002      	str	r0, [sp, #8]
            break;
   16c60:	e008      	b.n	16c74 <Det_GetErrorMeaning+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16c62:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c66:	3301      	adds	r3, #1
   16c68:	f88d 300f 	strb.w	r3, [sp, #15]
   16c6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c70:	2b0a      	cmp	r3, #10
   16c72:	d9df      	bls.n	16c34 <Det_GetErrorMeaning+0x24>
        }
    }

    return StringPtr;
   16c74:	9b02      	ldr	r3, [sp, #8]
}
   16c76:	4618      	mov	r0, r3
   16c78:	b005      	add	sp, #20
   16c7a:	f85d fb04 	ldr.w	pc, [sp], #4
   16c7e:	bf00      	nop
   16c80:	00018950 	.word	0x00018950

00016c84 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   16c84:	b510      	push	{r4, lr}
   16c86:	b088      	sub	sp, #32
   16c88:	4604      	mov	r4, r0
   16c8a:	4608      	mov	r0, r1
   16c8c:	4611      	mov	r1, r2
   16c8e:	461a      	mov	r2, r3
   16c90:	4623      	mov	r3, r4
   16c92:	f8ad 300e 	strh.w	r3, [sp, #14]
   16c96:	4603      	mov	r3, r0
   16c98:	f88d 300d 	strb.w	r3, [sp, #13]
   16c9c:	460b      	mov	r3, r1
   16c9e:	f88d 300c 	strb.w	r3, [sp, #12]
   16ca2:	4613      	mov	r3, r2
   16ca4:	f88d 300b 	strb.w	r3, [sp, #11]
    //local data.
    const char* Strings_error[3]; //Pointer to strings for the error message.

    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16ca8:	f7e9 ffb0 	bl	c0c <Sys_GetCoreID>
   16cac:	4603      	mov	r3, r0
   16cae:	9307      	str	r3, [sp, #28]

    Det_ModuleId[u32CoreId] = ModuleId;
   16cb0:	4921      	ldr	r1, [pc, #132]	; (16d38 <Det_ReportError+0xb4>)
   16cb2:	9b07      	ldr	r3, [sp, #28]
   16cb4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   16cb8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   16cbc:	4a1f      	ldr	r2, [pc, #124]	; (16d3c <Det_ReportError+0xb8>)
   16cbe:	9b07      	ldr	r3, [sp, #28]
   16cc0:	4413      	add	r3, r2
   16cc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
   16cc6:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   16cc8:	4a1d      	ldr	r2, [pc, #116]	; (16d40 <Det_ReportError+0xbc>)
   16cca:	9b07      	ldr	r3, [sp, #28]
   16ccc:	4413      	add	r3, r2
   16cce:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16cd2:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   16cd4:	4a1b      	ldr	r2, [pc, #108]	; (16d44 <Det_ReportError+0xc0>)
   16cd6:	9b07      	ldr	r3, [sp, #28]
   16cd8:	4413      	add	r3, r2
   16cda:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16cde:	701a      	strb	r2, [r3, #0]

    //Obtaining strings for error message.
    Strings_error[0] = Det_GetModuleName( ModuleId );
   16ce0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16ce4:	4618      	mov	r0, r3
   16ce6:	f7ff ff25 	bl	16b34 <Det_GetModuleName>
   16cea:	4603      	mov	r3, r0
   16cec:	9304      	str	r3, [sp, #16]
    Strings_error[1] = Det_GetApiName( ModuleId, ApiId );
   16cee:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16cf2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16cf6:	4611      	mov	r1, r2
   16cf8:	4618      	mov	r0, r3
   16cfa:	f7ff ff4f 	bl	16b9c <Det_GetApiName>
   16cfe:	4603      	mov	r3, r0
   16d00:	9305      	str	r3, [sp, #20]
    Strings_error[2] = Det_GetErrorMeaning( ModuleId, ErrorId );
   16d02:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16d06:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16d0a:	4611      	mov	r1, r2
   16d0c:	4618      	mov	r0, r3
   16d0e:	f7ff ff7f 	bl	16c10 <Det_GetErrorMeaning>
   16d12:	4603      	mov	r3, r0
   16d14:	9306      	str	r3, [sp, #24]

    SEGGER_RTT_printf( 0, "Error: Error in %s in function %s with the instance %d, %s\n", 
   16d16:	9904      	ldr	r1, [sp, #16]
   16d18:	9805      	ldr	r0, [sp, #20]
   16d1a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   16d1e:	9a06      	ldr	r2, [sp, #24]
   16d20:	9201      	str	r2, [sp, #4]
   16d22:	9300      	str	r3, [sp, #0]
   16d24:	4603      	mov	r3, r0
   16d26:	460a      	mov	r2, r1
   16d28:	4907      	ldr	r1, [pc, #28]	; (16d48 <Det_ReportError+0xc4>)
   16d2a:	2000      	movs	r0, #0
   16d2c:	f7ea fc74 	bl	1618 <SEGGER_RTT_printf>
    Strings_error[0], Strings_error[1], InstanceId, Strings_error[2] );

    return E_OK;
   16d30:	2300      	movs	r3, #0
}
   16d32:	4618      	mov	r0, r3
   16d34:	b008      	add	sp, #32
   16d36:	bd10      	pop	{r4, pc}
   16d38:	1fff98e4 	.word	0x1fff98e4
   16d3c:	1fff98bc 	.word	0x1fff98bc
   16d40:	1fff98c0 	.word	0x1fff98c0
   16d44:	1fff98c4 	.word	0x1fff98c4
   16d48:	00017d38 	.word	0x00017d38

00016d4c <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   16d4c:	b510      	push	{r4, lr}
   16d4e:	b084      	sub	sp, #16
   16d50:	4604      	mov	r4, r0
   16d52:	4608      	mov	r0, r1
   16d54:	4611      	mov	r1, r2
   16d56:	461a      	mov	r2, r3
   16d58:	4623      	mov	r3, r4
   16d5a:	f8ad 3006 	strh.w	r3, [sp, #6]
   16d5e:	4603      	mov	r3, r0
   16d60:	f88d 3005 	strb.w	r3, [sp, #5]
   16d64:	460b      	mov	r3, r1
   16d66:	f88d 3004 	strb.w	r3, [sp, #4]
   16d6a:	4613      	mov	r3, r2
   16d6c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d70:	f7e9 ff4c 	bl	c0c <Sys_GetCoreID>
   16d74:	4603      	mov	r3, r0
   16d76:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   16d78:	490d      	ldr	r1, [pc, #52]	; (16db0 <Det_ReportRuntimeError+0x64>)
   16d7a:	9b03      	ldr	r3, [sp, #12]
   16d7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16d80:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   16d84:	4a0b      	ldr	r2, [pc, #44]	; (16db4 <Det_ReportRuntimeError+0x68>)
   16d86:	9b03      	ldr	r3, [sp, #12]
   16d88:	4413      	add	r3, r2
   16d8a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16d8e:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   16d90:	4a09      	ldr	r2, [pc, #36]	; (16db8 <Det_ReportRuntimeError+0x6c>)
   16d92:	9b03      	ldr	r3, [sp, #12]
   16d94:	4413      	add	r3, r2
   16d96:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16d9a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   16d9c:	4a07      	ldr	r2, [pc, #28]	; (16dbc <Det_ReportRuntimeError+0x70>)
   16d9e:	9b03      	ldr	r3, [sp, #12]
   16da0:	4413      	add	r3, r2
   16da2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16da6:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16da8:	2300      	movs	r3, #0
}
   16daa:	4618      	mov	r0, r3
   16dac:	b004      	add	sp, #16
   16dae:	bd10      	pop	{r4, pc}
   16db0:	1fff98e8 	.word	0x1fff98e8
   16db4:	1fff98c8 	.word	0x1fff98c8
   16db8:	1fff98cc 	.word	0x1fff98cc
   16dbc:	1fff98d0 	.word	0x1fff98d0

00016dc0 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   16dc0:	b510      	push	{r4, lr}
   16dc2:	b084      	sub	sp, #16
   16dc4:	4604      	mov	r4, r0
   16dc6:	4608      	mov	r0, r1
   16dc8:	4611      	mov	r1, r2
   16dca:	461a      	mov	r2, r3
   16dcc:	4623      	mov	r3, r4
   16dce:	f8ad 3006 	strh.w	r3, [sp, #6]
   16dd2:	4603      	mov	r3, r0
   16dd4:	f88d 3005 	strb.w	r3, [sp, #5]
   16dd8:	460b      	mov	r3, r1
   16dda:	f88d 3004 	strb.w	r3, [sp, #4]
   16dde:	4613      	mov	r3, r2
   16de0:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16de4:	f7e9 ff12 	bl	c0c <Sys_GetCoreID>
   16de8:	4603      	mov	r3, r0
   16dea:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   16dec:	490d      	ldr	r1, [pc, #52]	; (16e24 <Det_ReportTransientFault+0x64>)
   16dee:	9b03      	ldr	r3, [sp, #12]
   16df0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16df4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   16df8:	4a0b      	ldr	r2, [pc, #44]	; (16e28 <Det_ReportTransientFault+0x68>)
   16dfa:	9b03      	ldr	r3, [sp, #12]
   16dfc:	4413      	add	r3, r2
   16dfe:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16e02:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   16e04:	4a09      	ldr	r2, [pc, #36]	; (16e2c <Det_ReportTransientFault+0x6c>)
   16e06:	9b03      	ldr	r3, [sp, #12]
   16e08:	4413      	add	r3, r2
   16e0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16e0e:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   16e10:	4a07      	ldr	r2, [pc, #28]	; (16e30 <Det_ReportTransientFault+0x70>)
   16e12:	9b03      	ldr	r3, [sp, #12]
   16e14:	4413      	add	r3, r2
   16e16:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16e1a:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16e1c:	2300      	movs	r3, #0
}
   16e1e:	4618      	mov	r0, r3
   16e20:	b004      	add	sp, #16
   16e22:	bd10      	pop	{r4, pc}
   16e24:	1fff98e0 	.word	0x1fff98e0
   16e28:	1fff98d4 	.word	0x1fff98d4
   16e2c:	1fff98d8 	.word	0x1fff98d8
   16e30:	1fff98dc 	.word	0x1fff98dc

00016e34 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   16e34:	bf00      	nop
   16e36:	4770      	bx	lr

00016e38 <CanIf_Init>:
 * @brief This function initialices the CanIf Driver.
 * 
 * @param ConfigPtr Pointer to driver control structure. 
 */
void CanIf_Init(const CanIf_ConfigType * ConfigPtr)
{
   16e38:	b082      	sub	sp, #8
   16e3a:	9001      	str	r0, [sp, #4]
    #if (STD_ON == CANIF_PRECOMPILE_SUPPORT)
    CanIf_ConfigPtr = &CanIf_Config;
    (void)ConfigPtr;
    #else
    CanIf_ConfigPtr = ConfigPtr;
   16e3c:	4a02      	ldr	r2, [pc, #8]	; (16e48 <CanIf_Init+0x10>)
   16e3e:	9b01      	ldr	r3, [sp, #4]
   16e40:	6013      	str	r3, [r2, #0]
    #endif
}
   16e42:	bf00      	nop
   16e44:	b002      	add	sp, #8
   16e46:	4770      	bx	lr
   16e48:	1fff98ec 	.word	0x1fff98ec

00016e4c <CanIf_Transmit>:
Std_ReturnType CanIf_Transmit
(
    PduIdType CanTxPduId,
    const PduInfoType * PduInfoPtr
)
{
   16e4c:	b500      	push	{lr}
   16e4e:	b08b      	sub	sp, #44	; 0x2c
   16e50:	4603      	mov	r3, r0
   16e52:	9100      	str	r1, [sp, #0]
   16e54:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType RetVal = E_NOT_OK;
   16e58:	2301      	movs	r3, #1
   16e5a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Can_HwHandleType CanHth = 0U;
   16e5e:	2300      	movs	r3, #0
   16e60:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Can_PduType PduInfo;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   16e64:	2300      	movs	r3, #0
   16e66:	9308      	str	r3, [sp, #32]
    uint8 CanIfControllerId = 0U;
   16e68:	2300      	movs	r3, #0
   16e6a:	f88d 301f 	strb.w	r3, [sp, #31]
    const CanIf_CtrlPCConfigType * CanIfController = NULL_PTR;
   16e6e:	2300      	movs	r3, #0
   16e70:	9306      	str	r3, [sp, #24]

    if (NULL_PTR != CanIf_ConfigPtr)
   16e72:	4b31      	ldr	r3, [pc, #196]	; (16f38 <CanIf_Transmit+0xec>)
   16e74:	681b      	ldr	r3, [r3, #0]
   16e76:	2b00      	cmp	r3, #0
   16e78:	d057      	beq.n	16f2a <CanIf_Transmit+0xde>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   16e7a:	4b2f      	ldr	r3, [pc, #188]	; (16f38 <CanIf_Transmit+0xec>)
   16e7c:	681b      	ldr	r3, [r3, #0]
   16e7e:	785b      	ldrb	r3, [r3, #1]
   16e80:	b29b      	uxth	r3, r3
   16e82:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16e86:	429a      	cmp	r2, r3
   16e88:	d24f      	bcs.n	16f2a <CanIf_Transmit+0xde>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   16e8a:	4b2b      	ldr	r3, [pc, #172]	; (16f38 <CanIf_Transmit+0xec>)
   16e8c:	681b      	ldr	r3, [r3, #0]
   16e8e:	68d9      	ldr	r1, [r3, #12]
   16e90:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16e94:	4613      	mov	r3, r2
   16e96:	009b      	lsls	r3, r3, #2
   16e98:	4413      	add	r3, r2
   16e9a:	009b      	lsls	r3, r3, #2
   16e9c:	440b      	add	r3, r1
   16e9e:	9308      	str	r3, [sp, #32]
            CanIfControllerId = TxPduInfo->CanIfCtrlId;
   16ea0:	9b08      	ldr	r3, [sp, #32]
   16ea2:	7b9b      	ldrb	r3, [r3, #14]
   16ea4:	f88d 301f 	strb.w	r3, [sp, #31]
            CanIfController = &CanIf_PCConfig.CanIfCtrlConfigPtr[CanIfControllerId];
   16ea8:	4b24      	ldr	r3, [pc, #144]	; (16f3c <CanIf_Transmit+0xf0>)
   16eaa:	685a      	ldr	r2, [r3, #4]
   16eac:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16eb0:	00db      	lsls	r3, r3, #3
   16eb2:	4413      	add	r3, r2
   16eb4:	9306      	str	r3, [sp, #24]

            CanHth = TxPduInfo->CanHth;
   16eb6:	9b08      	ldr	r3, [sp, #32]
   16eb8:	899b      	ldrh	r3, [r3, #12]
   16eba:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

            PduInfo.id = TxPduInfo->CanId;
   16ebe:	9b08      	ldr	r3, [sp, #32]
   16ec0:	685b      	ldr	r3, [r3, #4]
   16ec2:	9303      	str	r3, [sp, #12]
            /* Convert Id by adding two most significant bits specify the frame type */
            switch (TxPduInfo->CanFrameType)
   16ec4:	9b08      	ldr	r3, [sp, #32]
   16ec6:	689b      	ldr	r3, [r3, #8]
   16ec8:	2b03      	cmp	r3, #3
   16eca:	d010      	beq.n	16eee <CanIf_Transmit+0xa2>
   16ecc:	2b03      	cmp	r3, #3
   16ece:	d813      	bhi.n	16ef8 <CanIf_Transmit+0xac>
   16ed0:	2b00      	cmp	r3, #0
   16ed2:	d002      	beq.n	16eda <CanIf_Transmit+0x8e>
   16ed4:	2b01      	cmp	r3, #1
   16ed6:	d005      	beq.n	16ee4 <CanIf_Transmit+0x98>
                    PduInfo.id |= 0x40000000U;
                    break;
                }
                default:
                {
                    break;
   16ed8:	e00e      	b.n	16ef8 <CanIf_Transmit+0xac>
                    PduInfo.id |= 0x80000000U;
   16eda:	9b03      	ldr	r3, [sp, #12]
   16edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16ee0:	9303      	str	r3, [sp, #12]
                    break;
   16ee2:	e00a      	b.n	16efa <CanIf_Transmit+0xae>
                    PduInfo.id |= 0xC0000000U;
   16ee4:	9b03      	ldr	r3, [sp, #12]
   16ee6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   16eea:	9303      	str	r3, [sp, #12]
                    break;
   16eec:	e005      	b.n	16efa <CanIf_Transmit+0xae>
                    PduInfo.id |= 0x40000000U;
   16eee:	9b03      	ldr	r3, [sp, #12]
   16ef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16ef4:	9303      	str	r3, [sp, #12]
                    break;
   16ef6:	e000      	b.n	16efa <CanIf_Transmit+0xae>
                    break;
   16ef8:	bf00      	nop
                }
            }
            
            PduInfo.length = (uint8)(PduInfoPtr->SduLength);
   16efa:	9b00      	ldr	r3, [sp, #0]
   16efc:	689b      	ldr	r3, [r3, #8]
   16efe:	b2db      	uxtb	r3, r3
   16f00:	f88d 3012 	strb.w	r3, [sp, #18]
            PduInfo.sdu = PduInfoPtr->SduDataPtr;
   16f04:	9b00      	ldr	r3, [sp, #0]
   16f06:	681b      	ldr	r3, [r3, #0]
   16f08:	9305      	str	r3, [sp, #20]
            PduInfo.swPduHandle = CanTxPduId;
   16f0a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16f0e:	f8ad 3010 	strh.w	r3, [sp, #16]

            RetVal = CanIfController->CanDrvConfigPtr->CanApi->CanWrite(CanHth, &PduInfo); 
   16f12:	9b06      	ldr	r3, [sp, #24]
   16f14:	685b      	ldr	r3, [r3, #4]
   16f16:	685b      	ldr	r3, [r3, #4]
   16f18:	681b      	ldr	r3, [r3, #0]
   16f1a:	a903      	add	r1, sp, #12
   16f1c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   16f20:	4610      	mov	r0, r2
   16f22:	4798      	blx	r3
   16f24:	4603      	mov	r3, r0
   16f26:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
    }
    return RetVal;
   16f2a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
   16f2e:	4618      	mov	r0, r3
   16f30:	b00b      	add	sp, #44	; 0x2c
   16f32:	f85d fb04 	ldr.w	pc, [sp], #4
   16f36:	bf00      	nop
   16f38:	1fff98ec 	.word	0x1fff98ec
   16f3c:	00018a90 	.word	0x00018a90

00016f40 <CanIf_TxConfirmation>:

void CanIf_TxConfirmation
(
    PduIdType CanTxPduId
)
{
   16f40:	b500      	push	{lr}
   16f42:	b085      	sub	sp, #20
   16f44:	4603      	mov	r3, r0
   16f46:	f8ad 3006 	strh.w	r3, [sp, #6]
    PduIdType UserPduId;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   16f4a:	2300      	movs	r3, #0
   16f4c:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != CanIf_ConfigPtr)
   16f4e:	4b15      	ldr	r3, [pc, #84]	; (16fa4 <CanIf_TxConfirmation+0x64>)
   16f50:	681b      	ldr	r3, [r3, #0]
   16f52:	2b00      	cmp	r3, #0
   16f54:	d021      	beq.n	16f9a <CanIf_TxConfirmation+0x5a>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   16f56:	4b13      	ldr	r3, [pc, #76]	; (16fa4 <CanIf_TxConfirmation+0x64>)
   16f58:	681b      	ldr	r3, [r3, #0]
   16f5a:	785b      	ldrb	r3, [r3, #1]
   16f5c:	b29b      	uxth	r3, r3
   16f5e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16f62:	429a      	cmp	r2, r3
   16f64:	d219      	bcs.n	16f9a <CanIf_TxConfirmation+0x5a>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   16f66:	4b0f      	ldr	r3, [pc, #60]	; (16fa4 <CanIf_TxConfirmation+0x64>)
   16f68:	681b      	ldr	r3, [r3, #0]
   16f6a:	68d9      	ldr	r1, [r3, #12]
   16f6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16f70:	4613      	mov	r3, r2
   16f72:	009b      	lsls	r3, r3, #2
   16f74:	4413      	add	r3, r2
   16f76:	009b      	lsls	r3, r3, #2
   16f78:	440b      	add	r3, r1
   16f7a:	9303      	str	r3, [sp, #12]

            if (NULL_PTR != TxPduInfo->UserTxConfirmation)
   16f7c:	9b03      	ldr	r3, [sp, #12]
   16f7e:	691b      	ldr	r3, [r3, #16]
   16f80:	2b00      	cmp	r3, #0
   16f82:	d00a      	beq.n	16f9a <CanIf_TxConfirmation+0x5a>
            {
                UserPduId = TxPduInfo->PduId;
   16f84:	9b03      	ldr	r3, [sp, #12]
   16f86:	881b      	ldrh	r3, [r3, #0]
   16f88:	f8ad 300a 	strh.w	r3, [sp, #10]
                TxPduInfo->UserTxConfirmation(UserPduId, E_OK);
   16f8c:	9b03      	ldr	r3, [sp, #12]
   16f8e:	691b      	ldr	r3, [r3, #16]
   16f90:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   16f94:	2100      	movs	r1, #0
   16f96:	4610      	mov	r0, r2
   16f98:	4798      	blx	r3
            }
        }
    }
}
   16f9a:	bf00      	nop
   16f9c:	b005      	add	sp, #20
   16f9e:	f85d fb04 	ldr.w	pc, [sp], #4
   16fa2:	bf00      	nop
   16fa4:	1fff98ec 	.word	0x1fff98ec

00016fa8 <CanIf_RxIndication>:
void CanIf_RxIndication
(
    const Can_HwType * Mailbox,
    const PduInfoType * PduInfoPtr
)
{
   16fa8:	b500      	push	{lr}
   16faa:	b089      	sub	sp, #36	; 0x24
   16fac:	9001      	str	r0, [sp, #4]
   16fae:	9100      	str	r1, [sp, #0]
    PduIdType UserPduId = 0U;
   16fb0:	2300      	movs	r3, #0
   16fb2:	f8ad 301e 	strh.w	r3, [sp, #30]
    PduInfoType PduInfo;
    const CanIf_RxPduType * RxPduInfo = NULL_PTR;
   16fb6:	2300      	movs	r3, #0
   16fb8:	9306      	str	r3, [sp, #24]
    uint8 CanDrvId = 0U;
   16fba:	2300      	movs	r3, #0
   16fbc:	f88d 3017 	strb.w	r3, [sp, #23]

    if (NULL_PTR != CanIf_ConfigPtr)
   16fc0:	4b2c      	ldr	r3, [pc, #176]	; (17074 <CanIf_RxIndication+0xcc>)
   16fc2:	681b      	ldr	r3, [r3, #0]
   16fc4:	2b00      	cmp	r3, #0
   16fc6:	d050      	beq.n	1706a <CanIf_RxIndication+0xc2>
    {
        if ((Mailbox->ControllerId) < (CanIf_PCConfig.NumOfCtrl))
   16fc8:	9b01      	ldr	r3, [sp, #4]
   16fca:	799a      	ldrb	r2, [r3, #6]
   16fcc:	4b2a      	ldr	r3, [pc, #168]	; (17078 <CanIf_RxIndication+0xd0>)
   16fce:	781b      	ldrb	r3, [r3, #0]
   16fd0:	429a      	cmp	r2, r3
   16fd2:	d24a      	bcs.n	1706a <CanIf_RxIndication+0xc2>
        {
            if ((Mailbox->Hoh) < (CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->NumCanHoh))
   16fd4:	9b01      	ldr	r3, [sp, #4]
   16fd6:	889a      	ldrh	r2, [r3, #4]
   16fd8:	4b27      	ldr	r3, [pc, #156]	; (17078 <CanIf_RxIndication+0xd0>)
   16fda:	6859      	ldr	r1, [r3, #4]
   16fdc:	9b01      	ldr	r3, [sp, #4]
   16fde:	799b      	ldrb	r3, [r3, #6]
   16fe0:	00db      	lsls	r3, r3, #3
   16fe2:	440b      	add	r3, r1
   16fe4:	685b      	ldr	r3, [r3, #4]
   16fe6:	885b      	ldrh	r3, [r3, #2]
   16fe8:	429a      	cmp	r2, r3
   16fea:	d23e      	bcs.n	1706a <CanIf_RxIndication+0xc2>
            {
                CanDrvId = CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->CanDrvId;
   16fec:	4b22      	ldr	r3, [pc, #136]	; (17078 <CanIf_RxIndication+0xd0>)
   16fee:	685a      	ldr	r2, [r3, #4]
   16ff0:	9b01      	ldr	r3, [sp, #4]
   16ff2:	799b      	ldrb	r3, [r3, #6]
   16ff4:	00db      	lsls	r3, r3, #3
   16ff6:	4413      	add	r3, r2
   16ff8:	685b      	ldr	r3, [r3, #4]
   16ffa:	781b      	ldrb	r3, [r3, #0]
   16ffc:	f88d 3017 	strb.w	r3, [sp, #23]
                RxPduInfo = CanIf_ConfigPtr->CanDrvConfigPtr[CanDrvId]->HohToRxPduMappingPtr[Mailbox->Hoh];
   17000:	4b1c      	ldr	r3, [pc, #112]	; (17074 <CanIf_RxIndication+0xcc>)
   17002:	681b      	ldr	r3, [r3, #0]
   17004:	685a      	ldr	r2, [r3, #4]
   17006:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1700a:	009b      	lsls	r3, r3, #2
   1700c:	4413      	add	r3, r2
   1700e:	681b      	ldr	r3, [r3, #0]
   17010:	681a      	ldr	r2, [r3, #0]
   17012:	9b01      	ldr	r3, [sp, #4]
   17014:	889b      	ldrh	r3, [r3, #4]
   17016:	009b      	lsls	r3, r3, #2
   17018:	4413      	add	r3, r2
   1701a:	681b      	ldr	r3, [r3, #0]
   1701c:	9306      	str	r3, [sp, #24]
                
                /* Will discard the Can HOH if it was not referred by any CanIf RxPDU */
                if (NULL_PTR != RxPduInfo)
   1701e:	9b06      	ldr	r3, [sp, #24]
   17020:	2b00      	cmp	r3, #0
   17022:	d022      	beq.n	1706a <CanIf_RxIndication+0xc2>
                {
                    if (NULL_PTR != RxPduInfo->UserRxIndication)
   17024:	9b06      	ldr	r3, [sp, #24]
   17026:	689b      	ldr	r3, [r3, #8]
   17028:	2b00      	cmp	r3, #0
   1702a:	d01e      	beq.n	1706a <CanIf_RxIndication+0xc2>
                    {
                        UserPduId = RxPduInfo->PduId;
   1702c:	9b06      	ldr	r3, [sp, #24]
   1702e:	881b      	ldrh	r3, [r3, #0]
   17030:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if ((TRUE == RxPduInfo->PduLengthCheck) && (PduInfoPtr->SduLength > (RxPduInfo->PduLength)))
   17034:	9b06      	ldr	r3, [sp, #24]
   17036:	789b      	ldrb	r3, [r3, #2]
   17038:	2b00      	cmp	r3, #0
   1703a:	d009      	beq.n	17050 <CanIf_RxIndication+0xa8>
   1703c:	9b00      	ldr	r3, [sp, #0]
   1703e:	689b      	ldr	r3, [r3, #8]
   17040:	9a06      	ldr	r2, [sp, #24]
   17042:	8892      	ldrh	r2, [r2, #4]
   17044:	4293      	cmp	r3, r2
   17046:	d903      	bls.n	17050 <CanIf_RxIndication+0xa8>
                        {
                            PduInfo.SduLength = RxPduInfo->PduLength; /* Truncates exceeded data as configured on GUI */
   17048:	9b06      	ldr	r3, [sp, #24]
   1704a:	889b      	ldrh	r3, [r3, #4]
   1704c:	9304      	str	r3, [sp, #16]
   1704e:	e002      	b.n	17056 <CanIf_RxIndication+0xae>
                        }
                        else
                        {
                            PduInfo.SduLength = PduInfoPtr->SduLength;
   17050:	9b00      	ldr	r3, [sp, #0]
   17052:	689b      	ldr	r3, [r3, #8]
   17054:	9304      	str	r3, [sp, #16]
                        }
                        PduInfo.SduDataPtr = PduInfoPtr->SduDataPtr;
   17056:	9b00      	ldr	r3, [sp, #0]
   17058:	681b      	ldr	r3, [r3, #0]
   1705a:	9302      	str	r3, [sp, #8]
                        RxPduInfo->UserRxIndication(UserPduId, &PduInfo);
   1705c:	9b06      	ldr	r3, [sp, #24]
   1705e:	689b      	ldr	r3, [r3, #8]
   17060:	a902      	add	r1, sp, #8
   17062:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   17066:	4610      	mov	r0, r2
   17068:	4798      	blx	r3
                    }
                }
            }
        }
    }
}
   1706a:	bf00      	nop
   1706c:	b009      	add	sp, #36	; 0x24
   1706e:	f85d fb04 	ldr.w	pc, [sp], #4
   17072:	bf00      	nop
   17074:	1fff98ec 	.word	0x1fff98ec
   17078:	00018a90 	.word	0x00018a90

0001707c <CanIf_ControllerModeIndication>:
void CanIf_ControllerModeIndication
( 
    uint8 ControllerId, 
    Can_ControllerStateType ControllerMode 
)
{
   1707c:	b082      	sub	sp, #8
   1707e:	4603      	mov	r3, r0
   17080:	9100      	str	r1, [sp, #0]
   17082:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId; 
    (void)ControllerMode;
}
   17086:	bf00      	nop
   17088:	b002      	add	sp, #8
   1708a:	4770      	bx	lr

0001708c <CanIf_ControllerBusOff>:

void CanIf_ControllerBusOff
(
    uint8 ControllerId
)
{
   1708c:	b082      	sub	sp, #8
   1708e:	4603      	mov	r3, r0
   17090:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
   17094:	bf00      	nop
   17096:	b002      	add	sp, #8
   17098:	4770      	bx	lr

0001709a <CanIf_SetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param Transition Desired state.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_SetControllerMode( uint8 Controller, Can_ControllerStateType Transition ) {
   1709a:	b500      	push	{lr}
   1709c:	b087      	sub	sp, #28
   1709e:	4603      	mov	r3, r0
   170a0:	9100      	str	r1, [sp, #0]
   170a2:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   170a6:	2301      	movs	r3, #1
   170a8:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   170ac:	2300      	movs	r3, #0
   170ae:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   170b0:	2300      	movs	r3, #0
   170b2:	f88d 300f 	strb.w	r3, [sp, #15]


    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   170b6:	4b13      	ldr	r3, [pc, #76]	; (17104 <CanIf_SetControllerMode+0x6a>)
   170b8:	681b      	ldr	r3, [r3, #0]
   170ba:	2b00      	cmp	r3, #0
   170bc:	d01c      	beq.n	170f8 <CanIf_SetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   170be:	4b12      	ldr	r3, [pc, #72]	; (17108 <CanIf_SetControllerMode+0x6e>)
   170c0:	781b      	ldrb	r3, [r3, #0]
   170c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   170c6:	429a      	cmp	r2, r3
   170c8:	d216      	bcs.n	170f8 <CanIf_SetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   170ca:	4b0f      	ldr	r3, [pc, #60]	; (17108 <CanIf_SetControllerMode+0x6e>)
   170cc:	685a      	ldr	r2, [r3, #4]
   170ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   170d2:	00db      	lsls	r3, r3, #3
   170d4:	4413      	add	r3, r2
   170d6:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   170d8:	9b04      	ldr	r3, [sp, #16]
   170da:	785b      	ldrb	r3, [r3, #1]
   170dc:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanSetMode( CanController_ID, Transition );   //Calling Can Driver Api.
   170e0:	9b04      	ldr	r3, [sp, #16]
   170e2:	685b      	ldr	r3, [r3, #4]
   170e4:	685b      	ldr	r3, [r3, #4]
   170e6:	685b      	ldr	r3, [r3, #4]
   170e8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   170ec:	9900      	ldr	r1, [sp, #0]
   170ee:	4610      	mov	r0, r2
   170f0:	4798      	blx	r3
   170f2:	4603      	mov	r3, r0
   170f4:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   170f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   170fc:	4618      	mov	r0, r3
   170fe:	b007      	add	sp, #28
   17100:	f85d fb04 	ldr.w	pc, [sp], #4
   17104:	1fff98ec 	.word	0x1fff98ec
   17108:	00018a90 	.word	0x00018a90

0001710c <CanIf_EnableControllerInterrupts>:
/**
 * @brief This function enables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_EnableControllerInterrupts( uint8 Controller ) {
   1710c:	b500      	push	{lr}
   1710e:	b085      	sub	sp, #20
   17110:	4603      	mov	r3, r0
   17112:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17116:	2300      	movs	r3, #0
   17118:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   1711a:	2300      	movs	r3, #0
   1711c:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17120:	4b10      	ldr	r3, [pc, #64]	; (17164 <CanIf_EnableControllerInterrupts+0x58>)
   17122:	681b      	ldr	r3, [r3, #0]
   17124:	2b00      	cmp	r3, #0
   17126:	d018      	beq.n	1715a <CanIf_EnableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17128:	4b0f      	ldr	r3, [pc, #60]	; (17168 <CanIf_EnableControllerInterrupts+0x5c>)
   1712a:	781b      	ldrb	r3, [r3, #0]
   1712c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17130:	429a      	cmp	r2, r3
   17132:	d212      	bcs.n	1715a <CanIf_EnableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17134:	4b0c      	ldr	r3, [pc, #48]	; (17168 <CanIf_EnableControllerInterrupts+0x5c>)
   17136:	685a      	ldr	r2, [r3, #4]
   17138:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1713c:	00db      	lsls	r3, r3, #3
   1713e:	4413      	add	r3, r2
   17140:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17142:	9b03      	ldr	r3, [sp, #12]
   17144:	785b      	ldrb	r3, [r3, #1]
   17146:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanEnableInterrupts( CanController_ID );   //Calling Can Driver Api.
   1714a:	9b03      	ldr	r3, [sp, #12]
   1714c:	685b      	ldr	r3, [r3, #4]
   1714e:	685b      	ldr	r3, [r3, #4]
   17150:	689b      	ldr	r3, [r3, #8]
   17152:	f89d 200b 	ldrb.w	r2, [sp, #11]
   17156:	4610      	mov	r0, r2
   17158:	4798      	blx	r3
        }
    }
}
   1715a:	bf00      	nop
   1715c:	b005      	add	sp, #20
   1715e:	f85d fb04 	ldr.w	pc, [sp], #4
   17162:	bf00      	nop
   17164:	1fff98ec 	.word	0x1fff98ec
   17168:	00018a90 	.word	0x00018a90

0001716c <CanIf_DisableControllerInterrupts>:
/**
 * @brief This function disables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_DisableControllerInterrupts( uint8 Controller ) {
   1716c:	b500      	push	{lr}
   1716e:	b085      	sub	sp, #20
   17170:	4603      	mov	r3, r0
   17172:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17176:	2300      	movs	r3, #0
   17178:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   1717a:	2300      	movs	r3, #0
   1717c:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17180:	4b10      	ldr	r3, [pc, #64]	; (171c4 <CanIf_DisableControllerInterrupts+0x58>)
   17182:	681b      	ldr	r3, [r3, #0]
   17184:	2b00      	cmp	r3, #0
   17186:	d018      	beq.n	171ba <CanIf_DisableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17188:	4b0f      	ldr	r3, [pc, #60]	; (171c8 <CanIf_DisableControllerInterrupts+0x5c>)
   1718a:	781b      	ldrb	r3, [r3, #0]
   1718c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17190:	429a      	cmp	r2, r3
   17192:	d212      	bcs.n	171ba <CanIf_DisableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17194:	4b0c      	ldr	r3, [pc, #48]	; (171c8 <CanIf_DisableControllerInterrupts+0x5c>)
   17196:	685a      	ldr	r2, [r3, #4]
   17198:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1719c:	00db      	lsls	r3, r3, #3
   1719e:	4413      	add	r3, r2
   171a0:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   171a2:	9b03      	ldr	r3, [sp, #12]
   171a4:	785b      	ldrb	r3, [r3, #1]
   171a6:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanDisableInterrupts( CanController_ID );   //Calling Can Driver Api.
   171aa:	9b03      	ldr	r3, [sp, #12]
   171ac:	685b      	ldr	r3, [r3, #4]
   171ae:	685b      	ldr	r3, [r3, #4]
   171b0:	68db      	ldr	r3, [r3, #12]
   171b2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   171b6:	4610      	mov	r0, r2
   171b8:	4798      	blx	r3
        }
    }
}
   171ba:	bf00      	nop
   171bc:	b005      	add	sp, #20
   171be:	f85d fb04 	ldr.w	pc, [sp], #4
   171c2:	bf00      	nop
   171c4:	1fff98ec 	.word	0x1fff98ec
   171c8:	00018a90 	.word	0x00018a90

000171cc <CanIf_GetControllerErrorState>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param ErrorStatePtr Pointer to variable to store the actual error state of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerErrorState( uint8 ControllerId, Can_ErrorStateType *ErrorStatePtr) {
   171cc:	b500      	push	{lr}
   171ce:	b087      	sub	sp, #28
   171d0:	4603      	mov	r3, r0
   171d2:	9100      	str	r1, [sp, #0]
   171d4:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   171d8:	2301      	movs	r3, #1
   171da:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   171de:	2300      	movs	r3, #0
   171e0:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   171e2:	2300      	movs	r3, #0
   171e4:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   171e8:	4b13      	ldr	r3, [pc, #76]	; (17238 <CanIf_GetControllerErrorState+0x6c>)
   171ea:	681b      	ldr	r3, [r3, #0]
   171ec:	2b00      	cmp	r3, #0
   171ee:	d01c      	beq.n	1722a <CanIf_GetControllerErrorState+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   171f0:	4b12      	ldr	r3, [pc, #72]	; (1723c <CanIf_GetControllerErrorState+0x70>)
   171f2:	781b      	ldrb	r3, [r3, #0]
   171f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   171f8:	429a      	cmp	r2, r3
   171fa:	d216      	bcs.n	1722a <CanIf_GetControllerErrorState+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   171fc:	4b0f      	ldr	r3, [pc, #60]	; (1723c <CanIf_GetControllerErrorState+0x70>)
   171fe:	685a      	ldr	r2, [r3, #4]
   17200:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17204:	00db      	lsls	r3, r3, #3
   17206:	4413      	add	r3, r2
   17208:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   1720a:	9b04      	ldr	r3, [sp, #16]
   1720c:	785b      	ldrb	r3, [r3, #1]
   1720e:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetErrorState( CanController_ID, ErrorStatePtr );   //Calling Can Driver Api.
   17212:	9b04      	ldr	r3, [sp, #16]
   17214:	685b      	ldr	r3, [r3, #4]
   17216:	685b      	ldr	r3, [r3, #4]
   17218:	691b      	ldr	r3, [r3, #16]
   1721a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1721e:	9900      	ldr	r1, [sp, #0]
   17220:	4610      	mov	r0, r2
   17222:	4798      	blx	r3
   17224:	4603      	mov	r3, r0
   17226:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   1722a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   1722e:	4618      	mov	r0, r3
   17230:	b007      	add	sp, #28
   17232:	f85d fb04 	ldr.w	pc, [sp], #4
   17236:	bf00      	nop
   17238:	1fff98ec 	.word	0x1fff98ec
   1723c:	00018a90 	.word	0x00018a90

00017240 <CanIf_GetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param ControllerModePtr Pointer to variable to store the actual state of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerMode( uint8 Controller, Can_ControllerStateType *ControllerModePtr ) {
   17240:	b500      	push	{lr}
   17242:	b087      	sub	sp, #28
   17244:	4603      	mov	r3, r0
   17246:	9100      	str	r1, [sp, #0]
   17248:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   1724c:	2301      	movs	r3, #1
   1724e:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17252:	2300      	movs	r3, #0
   17254:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   17256:	2300      	movs	r3, #0
   17258:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   1725c:	4b13      	ldr	r3, [pc, #76]	; (172ac <CanIf_GetControllerMode+0x6c>)
   1725e:	681b      	ldr	r3, [r3, #0]
   17260:	2b00      	cmp	r3, #0
   17262:	d01c      	beq.n	1729e <CanIf_GetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17264:	4b12      	ldr	r3, [pc, #72]	; (172b0 <CanIf_GetControllerMode+0x70>)
   17266:	781b      	ldrb	r3, [r3, #0]
   17268:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1726c:	429a      	cmp	r2, r3
   1726e:	d216      	bcs.n	1729e <CanIf_GetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17270:	4b0f      	ldr	r3, [pc, #60]	; (172b0 <CanIf_GetControllerMode+0x70>)
   17272:	685a      	ldr	r2, [r3, #4]
   17274:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17278:	00db      	lsls	r3, r3, #3
   1727a:	4413      	add	r3, r2
   1727c:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   1727e:	9b04      	ldr	r3, [sp, #16]
   17280:	785b      	ldrb	r3, [r3, #1]
   17282:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetMode( CanController_ID, ControllerModePtr );   //Calling Can Driver Api.
   17286:	9b04      	ldr	r3, [sp, #16]
   17288:	685b      	ldr	r3, [r3, #4]
   1728a:	685b      	ldr	r3, [r3, #4]
   1728c:	695b      	ldr	r3, [r3, #20]
   1728e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   17292:	9900      	ldr	r1, [sp, #0]
   17294:	4610      	mov	r0, r2
   17296:	4798      	blx	r3
   17298:	4603      	mov	r3, r0
   1729a:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   1729e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   172a2:	4618      	mov	r0, r3
   172a4:	b007      	add	sp, #28
   172a6:	f85d fb04 	ldr.w	pc, [sp], #4
   172aa:	bf00      	nop
   172ac:	1fff98ec 	.word	0x1fff98ec
   172b0:	00018a90 	.word	0x00018a90

000172b4 <CanIf_GetControllerRxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param RxErrorCounterPtr Pointer to variable to store the actual value of the rx error counter of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerRxErrorCounter( uint8 ControllerId, uint8 *RxErrorCounterPtr ) {
   172b4:	b500      	push	{lr}
   172b6:	b087      	sub	sp, #28
   172b8:	4603      	mov	r3, r0
   172ba:	9100      	str	r1, [sp, #0]
   172bc:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   172c0:	2301      	movs	r3, #1
   172c2:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   172c6:	2300      	movs	r3, #0
   172c8:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   172ca:	2300      	movs	r3, #0
   172cc:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   172d0:	4b13      	ldr	r3, [pc, #76]	; (17320 <CanIf_GetControllerRxErrorCounter+0x6c>)
   172d2:	681b      	ldr	r3, [r3, #0]
   172d4:	2b00      	cmp	r3, #0
   172d6:	d01c      	beq.n	17312 <CanIf_GetControllerRxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   172d8:	4b12      	ldr	r3, [pc, #72]	; (17324 <CanIf_GetControllerRxErrorCounter+0x70>)
   172da:	781b      	ldrb	r3, [r3, #0]
   172dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   172e0:	429a      	cmp	r2, r3
   172e2:	d216      	bcs.n	17312 <CanIf_GetControllerRxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   172e4:	4b0f      	ldr	r3, [pc, #60]	; (17324 <CanIf_GetControllerRxErrorCounter+0x70>)
   172e6:	685a      	ldr	r2, [r3, #4]
   172e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   172ec:	00db      	lsls	r3, r3, #3
   172ee:	4413      	add	r3, r2
   172f0:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   172f2:	9b04      	ldr	r3, [sp, #16]
   172f4:	785b      	ldrb	r3, [r3, #1]
   172f6:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetRxErrorCounter( CanController_ID, RxErrorCounterPtr );   //Calling Can Driver Api.
   172fa:	9b04      	ldr	r3, [sp, #16]
   172fc:	685b      	ldr	r3, [r3, #4]
   172fe:	685b      	ldr	r3, [r3, #4]
   17300:	699b      	ldr	r3, [r3, #24]
   17302:	f89d 200f 	ldrb.w	r2, [sp, #15]
   17306:	9900      	ldr	r1, [sp, #0]
   17308:	4610      	mov	r0, r2
   1730a:	4798      	blx	r3
   1730c:	4603      	mov	r3, r0
   1730e:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   17312:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   17316:	4618      	mov	r0, r3
   17318:	b007      	add	sp, #28
   1731a:	f85d fb04 	ldr.w	pc, [sp], #4
   1731e:	bf00      	nop
   17320:	1fff98ec 	.word	0x1fff98ec
   17324:	00018a90 	.word	0x00018a90

00017328 <CanIf_GetControllerTxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param TxErrorCounterPtr Pointer to variable to store the actual value of the tx error counter of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerTxErrorCounter( uint8 ControllerId, uint8 *TxErrorCounterPtr ) {
   17328:	b500      	push	{lr}
   1732a:	b087      	sub	sp, #28
   1732c:	4603      	mov	r3, r0
   1732e:	9100      	str	r1, [sp, #0]
   17330:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17334:	2301      	movs	r3, #1
   17336:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   1733a:	2300      	movs	r3, #0
   1733c:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   1733e:	2300      	movs	r3, #0
   17340:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17344:	4b13      	ldr	r3, [pc, #76]	; (17394 <CanIf_GetControllerTxErrorCounter+0x6c>)
   17346:	681b      	ldr	r3, [r3, #0]
   17348:	2b00      	cmp	r3, #0
   1734a:	d01c      	beq.n	17386 <CanIf_GetControllerTxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   1734c:	4b12      	ldr	r3, [pc, #72]	; (17398 <CanIf_GetControllerTxErrorCounter+0x70>)
   1734e:	781b      	ldrb	r3, [r3, #0]
   17350:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17354:	429a      	cmp	r2, r3
   17356:	d216      	bcs.n	17386 <CanIf_GetControllerTxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   17358:	4b0f      	ldr	r3, [pc, #60]	; (17398 <CanIf_GetControllerTxErrorCounter+0x70>)
   1735a:	685a      	ldr	r2, [r3, #4]
   1735c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17360:	00db      	lsls	r3, r3, #3
   17362:	4413      	add	r3, r2
   17364:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17366:	9b04      	ldr	r3, [sp, #16]
   17368:	785b      	ldrb	r3, [r3, #1]
   1736a:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetTxErrorCounter( CanController_ID, TxErrorCounterPtr );   //Calling Can Driver Api.
   1736e:	9b04      	ldr	r3, [sp, #16]
   17370:	685b      	ldr	r3, [r3, #4]
   17372:	685b      	ldr	r3, [r3, #4]
   17374:	69db      	ldr	r3, [r3, #28]
   17376:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1737a:	9900      	ldr	r1, [sp, #0]
   1737c:	4610      	mov	r0, r2
   1737e:	4798      	blx	r3
   17380:	4603      	mov	r3, r0
   17382:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   17386:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   1738a:	4618      	mov	r0, r3
   1738c:	b007      	add	sp, #28
   1738e:	f85d fb04 	ldr.w	pc, [sp], #4
   17392:	bf00      	nop
   17394:	1fff98ec 	.word	0x1fff98ec
   17398:	00018a90 	.word	0x00018a90

0001739c <Fls_ACEraseRomEnd>:
   1739c:	00d552aa 	.word	0x00d552aa
   173a0:	5f75634d 	.word	0x5f75634d
   173a4:	74696e49 	.word	0x74696e49
   173a8:	00002928 	.word	0x00002928
   173ac:	5f75634d 	.word	0x5f75634d
   173b0:	74696e49 	.word	0x74696e49
   173b4:	636f6c43 	.word	0x636f6c43
   173b8:	0029286b 	.word	0x0029286b
   173bc:	5f75634d 	.word	0x5f75634d
   173c0:	4d746553 	.word	0x4d746553
   173c4:	2865646f 	.word	0x2865646f
   173c8:	00000029 	.word	0x00000029
   173cc:	5f75634d 	.word	0x5f75634d
   173d0:	56746547 	.word	0x56746547
   173d4:	69737265 	.word	0x69737265
   173d8:	6e496e6f 	.word	0x6e496e6f
   173dc:	29286f66 	.word	0x29286f66
   173e0:	00000000 	.word	0x00000000
   173e4:	61766e49 	.word	0x61766e49
   173e8:	2064696c 	.word	0x2064696c
   173ec:	666e6f63 	.word	0x666e6f63
   173f0:	696f7020 	.word	0x696f7020
   173f4:	7265746e 	.word	0x7265746e
   173f8:	00000000 	.word	0x00000000
   173fc:	76697244 	.word	0x76697244
   17400:	75207265 	.word	0x75207265
   17404:	696e696e 	.word	0x696e696e
   17408:	6c616974 	.word	0x6c616974
   1740c:	64657a69 	.word	0x64657a69
   17410:	00000000 	.word	0x00000000
   17414:	76697244 	.word	0x76697244
   17418:	61207265 	.word	0x61207265
   1741c:	6165726c 	.word	0x6165726c
   17420:	69207964 	.word	0x69207964
   17424:	6974696e 	.word	0x6974696e
   17428:	7a696c61 	.word	0x7a696c61
   1742c:	00006465 	.word	0x00006465
   17430:	61766e49 	.word	0x61766e49
   17434:	2064696c 	.word	0x2064696c
   17438:	75706e69 	.word	0x75706e69
   1743c:	61702074 	.word	0x61702074
   17440:	656d6172 	.word	0x656d6172
   17444:	00726574 	.word	0x00726574
   17448:	74616c50 	.word	0x74616c50
   1744c:	6d726f66 	.word	0x6d726f66
   17450:	696e495f 	.word	0x696e495f
   17454:	00292874 	.word	0x00292874
   17458:	74616c50 	.word	0x74616c50
   1745c:	6d726f66 	.word	0x6d726f66
   17460:	7465535f 	.word	0x7465535f
   17464:	28717249 	.word	0x28717249
   17468:	00000029 	.word	0x00000029
   1746c:	74616c50 	.word	0x74616c50
   17470:	6d726f66 	.word	0x6d726f66
   17474:	7465535f 	.word	0x7465535f
   17478:	50717249 	.word	0x50717249
   1747c:	726f6972 	.word	0x726f6972
   17480:	28797469 	.word	0x28797469
   17484:	00000029 	.word	0x00000029
   17488:	74616c50 	.word	0x74616c50
   1748c:	6d726f66 	.word	0x6d726f66
   17490:	7465475f 	.word	0x7465475f
   17494:	50717249 	.word	0x50717249
   17498:	726f6972 	.word	0x726f6972
   1749c:	28797469 	.word	0x28797469
   174a0:	00000029 	.word	0x00000029
   174a4:	74616c50 	.word	0x74616c50
   174a8:	6d726f66 	.word	0x6d726f66
   174ac:	736e495f 	.word	0x736e495f
   174b0:	6c6c6174 	.word	0x6c6c6174
   174b4:	48717249 	.word	0x48717249
   174b8:	6c646e61 	.word	0x6c646e61
   174bc:	29287265 	.word	0x29287265
   174c0:	00000000 	.word	0x00000000
   174c4:	61766e49 	.word	0x61766e49
   174c8:	2064696c 	.word	0x2064696c
   174cc:	6e696f70 	.word	0x6e696f70
   174d0:	00726574 	.word	0x00726574
   174d4:	6c6c6143 	.word	0x6c6c6143
   174d8:	6f726620 	.word	0x6f726620
   174dc:	7277206d 	.word	0x7277206d
   174e0:	20676e6f 	.word	0x20676e6f
   174e4:	7070616d 	.word	0x7070616d
   174e8:	70206465 	.word	0x70206465
   174ec:	69747261 	.word	0x69747261
   174f0:	6e6f6974 	.word	0x6e6f6974
   174f4:	00000000 	.word	0x00000000
   174f8:	61726150 	.word	0x61726150
   174fc:	6574656d 	.word	0x6574656d
   17500:	756f2072 	.word	0x756f2072
   17504:	666f2074 	.word	0x666f2074
   17508:	6e617220 	.word	0x6e617220
   1750c:	00006567 	.word	0x00006567
   17510:	74726f50 	.word	0x74726f50
   17514:	696e495f 	.word	0x696e495f
   17518:	00292874 	.word	0x00292874
   1751c:	74726f50 	.word	0x74726f50
   17520:	7465535f 	.word	0x7465535f
   17524:	446e6950 	.word	0x446e6950
   17528:	63657269 	.word	0x63657269
   1752c:	6e6f6974 	.word	0x6e6f6974
   17530:	00002928 	.word	0x00002928
   17534:	74726f50 	.word	0x74726f50
   17538:	7465535f 	.word	0x7465535f
   1753c:	4d6e6950 	.word	0x4d6e6950
   17540:	2865646f 	.word	0x2865646f
   17544:	00000029 	.word	0x00000029
   17548:	74726f50 	.word	0x74726f50
   1754c:	6665525f 	.word	0x6665525f
   17550:	68736572 	.word	0x68736572
   17554:	74726f50 	.word	0x74726f50
   17558:	65726944 	.word	0x65726944
   1755c:	6f697463 	.word	0x6f697463
   17560:	0029286e 	.word	0x0029286e
   17564:	74726f50 	.word	0x74726f50
   17568:	7465475f 	.word	0x7465475f
   1756c:	73726556 	.word	0x73726556
   17570:	496e6f69 	.word	0x496e6f69
   17574:	286f666e 	.word	0x286f666e
   17578:	00000029 	.word	0x00000029
   1757c:	61766e49 	.word	0x61766e49
   17580:	2064696c 	.word	0x2064696c
   17584:	74726f50 	.word	0x74726f50
   17588:	6e695020 	.word	0x6e695020
   1758c:	00444920 	.word	0x00444920
   17590:	74726f50 	.word	0x74726f50
   17594:	6e697020 	.word	0x6e697020
   17598:	646f6d20 	.word	0x646f6d20
   1759c:	73692065 	.word	0x73692065
   175a0:	636e7520 	.word	0x636e7520
   175a4:	676e6168 	.word	0x676e6168
   175a8:	6c626165 	.word	0x6c626165
   175ac:	00000065 	.word	0x00000065
   175b0:	61766e49 	.word	0x61766e49
   175b4:	2064696c 	.word	0x2064696c
   175b8:	74726f70 	.word	0x74726f70
   175bc:	6e697020 	.word	0x6e697020
   175c0:	646f6d20 	.word	0x646f6d20
   175c4:	00000065 	.word	0x00000065
   175c8:	5f6f6944 	.word	0x5f6f6944
   175cc:	74697257 	.word	0x74697257
   175d0:	61684365 	.word	0x61684365
   175d4:	6c656e6e 	.word	0x6c656e6e
   175d8:	00002928 	.word	0x00002928
   175dc:	5f6f6944 	.word	0x5f6f6944
   175e0:	64616552 	.word	0x64616552
   175e4:	6e616843 	.word	0x6e616843
   175e8:	286c656e 	.word	0x286c656e
   175ec:	00000029 	.word	0x00000029
   175f0:	5f6f6944 	.word	0x5f6f6944
   175f4:	70696c46 	.word	0x70696c46
   175f8:	6e616843 	.word	0x6e616843
   175fc:	286c656e 	.word	0x286c656e
   17600:	00000029 	.word	0x00000029
   17604:	5f6f6944 	.word	0x5f6f6944
   17608:	74697257 	.word	0x74697257
   1760c:	61684365 	.word	0x61684365
   17610:	6c656e6e 	.word	0x6c656e6e
   17614:	756f7247 	.word	0x756f7247
   17618:	00292870 	.word	0x00292870
   1761c:	5f6f6944 	.word	0x5f6f6944
   17620:	64616552 	.word	0x64616552
   17624:	6e616843 	.word	0x6e616843
   17628:	476c656e 	.word	0x476c656e
   1762c:	70756f72 	.word	0x70756f72
   17630:	00002928 	.word	0x00002928
   17634:	5f6f6944 	.word	0x5f6f6944
   17638:	74697257 	.word	0x74697257
   1763c:	726f5065 	.word	0x726f5065
   17640:	00292874 	.word	0x00292874
   17644:	5f6f6944 	.word	0x5f6f6944
   17648:	64616552 	.word	0x64616552
   1764c:	74726f50 	.word	0x74726f50
   17650:	00002928 	.word	0x00002928
   17654:	5f6f6944 	.word	0x5f6f6944
   17658:	56746547 	.word	0x56746547
   1765c:	69737265 	.word	0x69737265
   17660:	6e496e6f 	.word	0x6e496e6f
   17664:	29286f66 	.word	0x29286f66
   17668:	00000000 	.word	0x00000000
   1766c:	61766e49 	.word	0x61766e49
   17670:	2064696c 	.word	0x2064696c
   17674:	206f6964 	.word	0x206f6964
   17678:	6e616863 	.word	0x6e616863
   1767c:	206c656e 	.word	0x206c656e
   17680:	6576656c 	.word	0x6576656c
   17684:	0000006c 	.word	0x0000006c
   17688:	61766e49 	.word	0x61766e49
   1768c:	2064696c 	.word	0x2064696c
   17690:	206f6964 	.word	0x206f6964
   17694:	6e616863 	.word	0x6e616863
   17698:	206c656e 	.word	0x206c656e
   1769c:	00006469 	.word	0x00006469
   176a0:	61766e49 	.word	0x61766e49
   176a4:	2064696c 	.word	0x2064696c
   176a8:	74726f70 	.word	0x74726f70
   176ac:	00646920 	.word	0x00646920
   176b0:	61766e49 	.word	0x61766e49
   176b4:	2064696c 	.word	0x2064696c
   176b8:	6e616863 	.word	0x6e616863
   176bc:	206c656e 	.word	0x206c656e
   176c0:	756f7267 	.word	0x756f7267
   176c4:	64692070 	.word	0x64692070
   176c8:	00000000 	.word	0x00000000
   176cc:	61766e49 	.word	0x61766e49
   176d0:	2064696c 	.word	0x2064696c
   176d4:	666e6f63 	.word	0x666e6f63
   176d8:	70206769 	.word	0x70206769
   176dc:	6d617261 	.word	0x6d617261
   176e0:	72657465 	.word	0x72657465
   176e4:	00000000 	.word	0x00000000
   176e8:	5f6d7750 	.word	0x5f6d7750
   176ec:	74696e49 	.word	0x74696e49
   176f0:	00002928 	.word	0x00002928
   176f4:	5f6d7750 	.word	0x5f6d7750
   176f8:	6e496544 	.word	0x6e496544
   176fc:	29287469 	.word	0x29287469
   17700:	00000000 	.word	0x00000000
   17704:	5f6d7750 	.word	0x5f6d7750
   17708:	44746553 	.word	0x44746553
   1770c:	43797475 	.word	0x43797475
   17710:	656c6379 	.word	0x656c6379
   17714:	00002928 	.word	0x00002928
   17718:	5f6d7750 	.word	0x5f6d7750
   1771c:	50746553 	.word	0x50746553
   17720:	6f697265 	.word	0x6f697265
   17724:	646e4164 	.word	0x646e4164
   17728:	79747544 	.word	0x79747544
   1772c:	00002928 	.word	0x00002928
   17730:	5f6d7750 	.word	0x5f6d7750
   17734:	4f746553 	.word	0x4f746553
   17738:	75707475 	.word	0x75707475
   1773c:	496f5474 	.word	0x496f5474
   17740:	28656c64 	.word	0x28656c64
   17744:	00000029 	.word	0x00000029
   17748:	5f6d7750 	.word	0x5f6d7750
   1774c:	56746547 	.word	0x56746547
   17750:	69737265 	.word	0x69737265
   17754:	6e496e6f 	.word	0x6e496e6f
   17758:	29286f66 	.word	0x29286f66
   1775c:	00000000 	.word	0x00000000
   17760:	61766e49 	.word	0x61766e49
   17764:	2064696c 	.word	0x2064696c
   17768:	666e6f63 	.word	0x666e6f63
   1776c:	70206769 	.word	0x70206769
   17770:	746e696f 	.word	0x746e696f
   17774:	00007265 	.word	0x00007265
   17778:	61766e49 	.word	0x61766e49
   1777c:	2064696c 	.word	0x2064696c
   17780:	206d7770 	.word	0x206d7770
   17784:	6e616863 	.word	0x6e616863
   17788:	006c656e 	.word	0x006c656e
   1778c:	206d7750 	.word	0x206d7750
   17790:	6e616863 	.word	0x6e616863
   17794:	206c656e 	.word	0x206c656e
   17798:	69726570 	.word	0x69726570
   1779c:	6920646f 	.word	0x6920646f
   177a0:	6e752073 	.word	0x6e752073
   177a4:	6e616863 	.word	0x6e616863
   177a8:	62616567 	.word	0x62616567
   177ac:	0000656c 	.word	0x0000656c
   177b0:	5f636441 	.word	0x5f636441
   177b4:	74696e49 	.word	0x74696e49
   177b8:	00002928 	.word	0x00002928
   177bc:	5f636441 	.word	0x5f636441
   177c0:	6e496544 	.word	0x6e496544
   177c4:	29287469 	.word	0x29287469
   177c8:	00000000 	.word	0x00000000
   177cc:	5f636441 	.word	0x5f636441
   177d0:	72617453 	.word	0x72617453
   177d4:	6f724774 	.word	0x6f724774
   177d8:	6f437075 	.word	0x6f437075
   177dc:	7265766e 	.word	0x7265766e
   177e0:	6e6f6973 	.word	0x6e6f6973
   177e4:	00002928 	.word	0x00002928
   177e8:	5f636441 	.word	0x5f636441
   177ec:	706f7453 	.word	0x706f7453
   177f0:	756f7247 	.word	0x756f7247
   177f4:	6e6f4370 	.word	0x6e6f4370
   177f8:	73726576 	.word	0x73726576
   177fc:	286e6f69 	.word	0x286e6f69
   17800:	00000029 	.word	0x00000029
   17804:	5f636441 	.word	0x5f636441
   17808:	64616552 	.word	0x64616552
   1780c:	756f7247 	.word	0x756f7247
   17810:	00292870 	.word	0x00292870
   17814:	5f636441 	.word	0x5f636441
   17818:	47746547 	.word	0x47746547
   1781c:	70756f72 	.word	0x70756f72
   17820:	74617453 	.word	0x74617453
   17824:	29287375 	.word	0x29287375
   17828:	00000000 	.word	0x00000000
   1782c:	5f636441 	.word	0x5f636441
   17830:	696c6143 	.word	0x696c6143
   17834:	74617262 	.word	0x74617262
   17838:	00292865 	.word	0x00292865
   1783c:	5f636441 	.word	0x5f636441
   17840:	75746553 	.word	0x75746553
   17844:	73655270 	.word	0x73655270
   17848:	42746c75 	.word	0x42746c75
   1784c:	65666675 	.word	0x65666675
   17850:	00292872 	.word	0x00292872
   17854:	5f636441 	.word	0x5f636441
   17858:	56746547 	.word	0x56746547
   1785c:	69737265 	.word	0x69737265
   17860:	6e496e6f 	.word	0x6e496e6f
   17864:	29286f66 	.word	0x29286f66
   17868:	00000000 	.word	0x00000000
   1786c:	61766e49 	.word	0x61766e49
   17870:	2064696c 	.word	0x2064696c
   17874:	20636461 	.word	0x20636461
   17878:	756f7267 	.word	0x756f7267
   1787c:	00000070 	.word	0x00000070
   17880:	66667542 	.word	0x66667542
   17884:	70207265 	.word	0x70207265
   17888:	746e696f 	.word	0x746e696f
   1788c:	6e207265 	.word	0x6e207265
   17890:	6920746f 	.word	0x6920746f
   17894:	6974696e 	.word	0x6974696e
   17898:	7a696c61 	.word	0x7a696c61
   1789c:	00006465 	.word	0x00006465
   178a0:	696c6143 	.word	0x696c6143
   178a4:	74617262 	.word	0x74617262
   178a8:	206e6f69 	.word	0x206e6f69
   178ac:	7265706f 	.word	0x7265706f
   178b0:	6f697461 	.word	0x6f697461
   178b4:	6974206e 	.word	0x6974206e
   178b8:	2064656d 	.word	0x2064656d
   178bc:	0074756f 	.word	0x0074756f
   178c0:	65686353 	.word	0x65686353
   178c4:	656c7564 	.word	0x656c7564
   178c8:	6e495f72 	.word	0x6e495f72
   178cc:	29287469 	.word	0x29287469
   178d0:	00000000 	.word	0x00000000
   178d4:	65686353 	.word	0x65686353
   178d8:	656c7564 	.word	0x656c7564
   178dc:	65475f72 	.word	0x65475f72
   178e0:	61745374 	.word	0x61745374
   178e4:	51737574 	.word	0x51737574
   178e8:	65756575 	.word	0x65756575
   178ec:	00002928 	.word	0x00002928
   178f0:	65686353 	.word	0x65686353
   178f4:	656c7564 	.word	0x656c7564
   178f8:	6c465f72 	.word	0x6c465f72
   178fc:	51687375 	.word	0x51687375
   17900:	65756575 	.word	0x65756575
   17904:	00002928 	.word	0x00002928
   17908:	65686353 	.word	0x65686353
   1790c:	656c7564 	.word	0x656c7564
   17910:	72575f72 	.word	0x72575f72
   17914:	51657469 	.word	0x51657469
   17918:	65756575 	.word	0x65756575
   1791c:	00002928 	.word	0x00002928
   17920:	65686353 	.word	0x65686353
   17924:	656c7564 	.word	0x656c7564
   17928:	65525f72 	.word	0x65525f72
   1792c:	75516461 	.word	0x75516461
   17930:	28657565 	.word	0x28657565
   17934:	00000029 	.word	0x00000029
   17938:	65686353 	.word	0x65686353
   1793c:	656c7564 	.word	0x656c7564
   17940:	74535f72 	.word	0x74535f72
   17944:	54747261 	.word	0x54747261
   17948:	286b7361 	.word	0x286b7361
   1794c:	00000029 	.word	0x00000029
   17950:	65686353 	.word	0x65686353
   17954:	656c7564 	.word	0x656c7564
   17958:	74535f72 	.word	0x74535f72
   1795c:	6154706f 	.word	0x6154706f
   17960:	29286b73 	.word	0x29286b73
   17964:	00000000 	.word	0x00000000
   17968:	65686353 	.word	0x65686353
   1796c:	656c7564 	.word	0x656c7564
   17970:	65505f72 	.word	0x65505f72
   17974:	646f6972 	.word	0x646f6972
   17978:	6b736154 	.word	0x6b736154
   1797c:	00002928 	.word	0x00002928
   17980:	65686353 	.word	0x65686353
   17984:	656c7564 	.word	0x656c7564
   17988:	74535f72 	.word	0x74535f72
   1798c:	54747261 	.word	0x54747261
   17990:	72656d69 	.word	0x72656d69
   17994:	00002928 	.word	0x00002928
   17998:	65686353 	.word	0x65686353
   1799c:	656c7564 	.word	0x656c7564
   179a0:	74535f72 	.word	0x74535f72
   179a4:	6954706f 	.word	0x6954706f
   179a8:	2872656d 	.word	0x2872656d
   179ac:	00000029 	.word	0x00000029
   179b0:	65686353 	.word	0x65686353
   179b4:	656c7564 	.word	0x656c7564
   179b8:	65475f72 	.word	0x65475f72
   179bc:	6d695474 	.word	0x6d695474
   179c0:	29287265 	.word	0x29287265
   179c4:	00000000 	.word	0x00000000
   179c8:	65686353 	.word	0x65686353
   179cc:	656c7564 	.word	0x656c7564
   179d0:	65525f72 	.word	0x65525f72
   179d4:	64616f6c 	.word	0x64616f6c
   179d8:	656d6954 	.word	0x656d6954
   179dc:	00292872 	.word	0x00292872
   179e0:	65686353 	.word	0x65686353
   179e4:	656c7564 	.word	0x656c7564
   179e8:	614d5f72 	.word	0x614d5f72
   179ec:	75466e69 	.word	0x75466e69
   179f0:	6974636e 	.word	0x6974636e
   179f4:	29286e6f 	.word	0x29286e6f
   179f8:	00000000 	.word	0x00000000
   179fc:	75657551 	.word	0x75657551
   17a00:	64692065 	.word	0x64692065
   17a04:	74756f20 	.word	0x74756f20
   17a08:	20666f20 	.word	0x20666f20
   17a0c:	676e6172 	.word	0x676e6172
   17a10:	00000065 	.word	0x00000065
   17a14:	61766e49 	.word	0x61766e49
   17a18:	2064696c 	.word	0x2064696c
   17a1c:	75657571 	.word	0x75657571
   17a20:	74732065 	.word	0x74732065
   17a24:	73757461 	.word	0x73757461
   17a28:	616c6620 	.word	0x616c6620
   17a2c:	00000067 	.word	0x00000067
   17a30:	6b736154 	.word	0x6b736154
   17a34:	20646920 	.word	0x20646920
   17a38:	2074756f 	.word	0x2074756f
   17a3c:	7220666f 	.word	0x7220666f
   17a40:	65676e61 	.word	0x65676e61
   17a44:	00000000 	.word	0x00000000
   17a48:	61766e49 	.word	0x61766e49
   17a4c:	2064696c 	.word	0x2064696c
   17a50:	6b736174 	.word	0x6b736174
   17a54:	20726f20 	.word	0x20726f20
   17a58:	656d6974 	.word	0x656d6974
   17a5c:	65702072 	.word	0x65702072
   17a60:	646f6972 	.word	0x646f6972
   17a64:	74696369 	.word	0x74696369
   17a68:	00000079 	.word	0x00000079
   17a6c:	656d6954 	.word	0x656d6954
   17a70:	64692072 	.word	0x64692072
   17a74:	74756f20 	.word	0x74756f20
   17a78:	20666f20 	.word	0x20666f20
   17a7c:	676e6172 	.word	0x676e6172
   17a80:	00000065 	.word	0x00000065
   17a84:	65686353 	.word	0x65686353
   17a88:	656c7564 	.word	0x656c7564
   17a8c:	6e752072 	.word	0x6e752072
   17a90:	74696e69 	.word	0x74696e69
   17a94:	696c6169 	.word	0x696c6169
   17a98:	0064657a 	.word	0x0064657a
   17a9c:	6f497748 	.word	0x6f497748
   17aa0:	425f6241 	.word	0x425f6241
   17aa4:	6f747475 	.word	0x6f747475
   17aa8:	495f736e 	.word	0x495f736e
   17aac:	2874696e 	.word	0x2874696e
   17ab0:	00000029 	.word	0x00000029
   17ab4:	6f497748 	.word	0x6f497748
   17ab8:	425f6241 	.word	0x425f6241
   17abc:	6f747475 	.word	0x6f747475
   17ac0:	475f736e 	.word	0x475f736e
   17ac4:	76457465 	.word	0x76457465
   17ac8:	28746e65 	.word	0x28746e65
   17acc:	00000029 	.word	0x00000029
   17ad0:	6f497748 	.word	0x6f497748
   17ad4:	425f6241 	.word	0x425f6241
   17ad8:	6f747475 	.word	0x6f747475
   17adc:	4d5f736e 	.word	0x4d5f736e
   17ae0:	466e6961 	.word	0x466e6961
   17ae4:	74636e75 	.word	0x74636e75
   17ae8:	286e6f69 	.word	0x286e6f69
   17aec:	00000029 	.word	0x00000029
   17af0:	61766e49 	.word	0x61766e49
   17af4:	2064696c 	.word	0x2064696c
   17af8:	74747562 	.word	0x74747562
   17afc:	69206e6f 	.word	0x69206e6f
   17b00:	00000064 	.word	0x00000064
   17b04:	61766e49 	.word	0x61766e49
   17b08:	2064696c 	.word	0x2064696c
   17b0c:	74747562 	.word	0x74747562
   17b10:	73206e6f 	.word	0x73206e6f
   17b14:	65746174 	.word	0x65746174
   17b18:	00000000 	.word	0x00000000
   17b1c:	75646f4d 	.word	0x75646f4d
   17b20:	7520656c 	.word	0x7520656c
   17b24:	696e696e 	.word	0x696e696e
   17b28:	6c616974 	.word	0x6c616974
   17b2c:	64657a69 	.word	0x64657a69
   17b30:	00000000 	.word	0x00000000
   17b34:	6f497748 	.word	0x6f497748
   17b38:	4c5f6241 	.word	0x4c5f6241
   17b3c:	5f736465 	.word	0x5f736465
   17b40:	74696e49 	.word	0x74696e49
   17b44:	00002928 	.word	0x00002928
   17b48:	6f497748 	.word	0x6f497748
   17b4c:	4c5f6241 	.word	0x4c5f6241
   17b50:	5f736465 	.word	0x5f736465
   17b54:	6e727554 	.word	0x6e727554
   17b58:	29286e4f 	.word	0x29286e4f
   17b5c:	00000000 	.word	0x00000000
   17b60:	6f497748 	.word	0x6f497748
   17b64:	4c5f6241 	.word	0x4c5f6241
   17b68:	5f736465 	.word	0x5f736465
   17b6c:	6e727554 	.word	0x6e727554
   17b70:	2866664f 	.word	0x2866664f
   17b74:	00000029 	.word	0x00000029
   17b78:	6f497748 	.word	0x6f497748
   17b7c:	4c5f6241 	.word	0x4c5f6241
   17b80:	5f736465 	.word	0x5f736465
   17b84:	6e727554 	.word	0x6e727554
   17b88:	67676f54 	.word	0x67676f54
   17b8c:	2928656c 	.word	0x2928656c
   17b90:	00000000 	.word	0x00000000
   17b94:	61766e49 	.word	0x61766e49
   17b98:	2064696c 	.word	0x2064696c
   17b9c:	2064656c 	.word	0x2064656c
   17ba0:	00006469 	.word	0x00006469
   17ba4:	6f497748 	.word	0x6f497748
   17ba8:	505f6241 	.word	0x505f6241
   17bac:	5f73746f 	.word	0x5f73746f
   17bb0:	74696e49 	.word	0x74696e49
   17bb4:	00002928 	.word	0x00002928
   17bb8:	6f497748 	.word	0x6f497748
   17bbc:	505f6241 	.word	0x505f6241
   17bc0:	5f73746f 	.word	0x5f73746f
   17bc4:	56746547 	.word	0x56746547
   17bc8:	65756c61 	.word	0x65756c61
   17bcc:	00002928 	.word	0x00002928
   17bd0:	6f497748 	.word	0x6f497748
   17bd4:	505f6241 	.word	0x505f6241
   17bd8:	5f73746f 	.word	0x5f73746f
   17bdc:	41746547 	.word	0x41746547
   17be0:	6156746c 	.word	0x6156746c
   17be4:	2865756c 	.word	0x2865756c
   17be8:	00000029 	.word	0x00000029
   17bec:	61766e49 	.word	0x61766e49
   17bf0:	2064696c 	.word	0x2064696c
   17bf4:	75706e69 	.word	0x75706e69
   17bf8:	6f702074 	.word	0x6f702074
   17bfc:	65746e69 	.word	0x65746e69
   17c00:	00000072 	.word	0x00000072
   17c04:	6f497748 	.word	0x6f497748
   17c08:	425f6241 	.word	0x425f6241
   17c0c:	657a7a75 	.word	0x657a7a75
   17c10:	6e495f72 	.word	0x6e495f72
   17c14:	29287469 	.word	0x29287469
   17c18:	00000000 	.word	0x00000000
   17c1c:	6f497748 	.word	0x6f497748
   17c20:	425f6241 	.word	0x425f6241
   17c24:	657a7a75 	.word	0x657a7a75
   17c28:	65425f72 	.word	0x65425f72
   17c2c:	29287065 	.word	0x29287065
   17c30:	00000000 	.word	0x00000000
   17c34:	6f497748 	.word	0x6f497748
   17c38:	425f6241 	.word	0x425f6241
   17c3c:	657a7a75 	.word	0x657a7a75
   17c40:	74535f72 	.word	0x74535f72
   17c44:	2928706f 	.word	0x2928706f
   17c48:	00000000 	.word	0x00000000
   17c4c:	61766e49 	.word	0x61766e49
   17c50:	2064696c 	.word	0x2064696c
   17c54:	7a7a7562 	.word	0x7a7a7562
   17c58:	74207265 	.word	0x74207265
   17c5c:	00656e6f 	.word	0x00656e6f
   17c60:	2075634d 	.word	0x2075634d
   17c64:	75646f6d 	.word	0x75646f6d
   17c68:	0000656c 	.word	0x0000656c
   17c6c:	74616c50 	.word	0x74616c50
   17c70:	6d726f66 	.word	0x6d726f66
   17c74:	646f6d20 	.word	0x646f6d20
   17c78:	00656c75 	.word	0x00656c75
   17c7c:	74726f50 	.word	0x74726f50
   17c80:	646f6d20 	.word	0x646f6d20
   17c84:	00656c75 	.word	0x00656c75
   17c88:	206f6944 	.word	0x206f6944
   17c8c:	75646f6d 	.word	0x75646f6d
   17c90:	0000656c 	.word	0x0000656c
   17c94:	206d7750 	.word	0x206d7750
   17c98:	75646f6d 	.word	0x75646f6d
   17c9c:	0000656c 	.word	0x0000656c
   17ca0:	20636441 	.word	0x20636441
   17ca4:	75646f6d 	.word	0x75646f6d
   17ca8:	0000656c 	.word	0x0000656c
   17cac:	65686353 	.word	0x65686353
   17cb0:	656c7564 	.word	0x656c7564
   17cb4:	6f6d2072 	.word	0x6f6d2072
   17cb8:	656c7564 	.word	0x656c7564
   17cbc:	00000000 	.word	0x00000000
   17cc0:	74747542 	.word	0x74747542
   17cc4:	20736e6f 	.word	0x20736e6f
   17cc8:	61204f49 	.word	0x61204f49
   17ccc:	72747362 	.word	0x72747362
   17cd0:	69746361 	.word	0x69746361
   17cd4:	6d206e6f 	.word	0x6d206e6f
   17cd8:	6c75646f 	.word	0x6c75646f
   17cdc:	00000065 	.word	0x00000065
   17ce0:	7364654c 	.word	0x7364654c
   17ce4:	204f4920 	.word	0x204f4920
   17ce8:	74736261 	.word	0x74736261
   17cec:	74636172 	.word	0x74636172
   17cf0:	206e6f69 	.word	0x206e6f69
   17cf4:	75646f6d 	.word	0x75646f6d
   17cf8:	0000656c 	.word	0x0000656c
   17cfc:	73746f50 	.word	0x73746f50
   17d00:	204f4920 	.word	0x204f4920
   17d04:	74736261 	.word	0x74736261
   17d08:	74636172 	.word	0x74636172
   17d0c:	206e6f69 	.word	0x206e6f69
   17d10:	75646f6d 	.word	0x75646f6d
   17d14:	0000656c 	.word	0x0000656c
   17d18:	7a7a7542 	.word	0x7a7a7542
   17d1c:	49207265 	.word	0x49207265
   17d20:	6261204f 	.word	0x6261204f
   17d24:	61727473 	.word	0x61727473
   17d28:	6f697463 	.word	0x6f697463
   17d2c:	6f6d206e 	.word	0x6f6d206e
   17d30:	656c7564 	.word	0x656c7564
   17d34:	00000000 	.word	0x00000000
   17d38:	6f727245 	.word	0x6f727245
   17d3c:	45203a72 	.word	0x45203a72
   17d40:	726f7272 	.word	0x726f7272
   17d44:	206e6920 	.word	0x206e6920
   17d48:	69207325 	.word	0x69207325
   17d4c:	7566206e 	.word	0x7566206e
   17d50:	6974636e 	.word	0x6974636e
   17d54:	25206e6f 	.word	0x25206e6f
   17d58:	69772073 	.word	0x69772073
   17d5c:	74206874 	.word	0x74206874
   17d60:	69206568 	.word	0x69206568
   17d64:	6174736e 	.word	0x6174736e
   17d68:	2065636e 	.word	0x2065636e
   17d6c:	202c6425 	.word	0x202c6425
   17d70:	000a7325 	.word	0x000a7325
   17d74:	6d726554 	.word	0x6d726554
   17d78:	6c616e69 	.word	0x6c616e69
   17d7c:	00000000 	.word	0x00000000
   17d80:	4c554e28 	.word	0x4c554e28
   17d84:	0000294c 	.word	0x0000294c

00017d88 <Clock_Ip_au8DividerCallbackIndex>:
   17d88:	0e0d0c00 06030201 0a070409 000b0805     ................

00017d98 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00017da8 <Clock_Ip_au8XoscCallbackIndex>:
   17da8:	00000100 00000000 00000000 00000000     ................

00017db8 <Clock_Ip_au8IrcoscCallbackIndex>:
   17db8:	03020100 00000004 00000000 00000000     ................

00017dc8 <Clock_Ip_au8GateCallbackIndex>:
   17dc8:	06010200 01040301 00000500 00000000     ................

00017dd8 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00017de8 <Clock_Ip_au8PllCallbackIndex>:
   17de8:	00000100 00000000 00000000 00000000     ................

00017df8 <Clock_Ip_au8SelectorCallbackIndex>:
   17df8:	0a090800 03020109 07060504 00000000     ................

00017e08 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00017e18 <Clock_Ip_au8CmuCallbackIndex>:
	...

00017e28 <Clock_Ip_au8ClockFeatures>:
	...
   17e38:	01000000 00000000 00000000 00000002     ................
   17e48:	00000000 00000300 00000000 00040000     ................
   17e58:	00000000 05000000 00000000 00000000     ................
   17e68:	00000006 00000000 00000100 00000000     ................
   17e78:	00010000 00000000 04000000 00000000     ................
   17e88:	00000000 00000005 00000001 00000401     ................
   17e98:	00000200 00050100 00030000 04020000     ................
   17ea8:	04000000 02000000 00000005 00000005     ................
   17eb8:	00000403 00000600 00050300 00070000     ................
   17ec8:	05000000 00000000 00000000 00000006     ................
	...
   17f08:	00050000 00000000 06000000 00000100     ................
   17f18:	00000000 00030007 00000000 00000000     ................
   17f28:	00000000 00060000 00000000 07000000     ................
   17f38:	00000100 00000000 00030008 00000000     ................
	...
   17f50:	00090000 00000000 0a000000 00000100     ................
   17f60:	00000000 0003000b 00000000 00000000     ................
   17f70:	00000000 000c0000 00000000 0d000000     ................
   17f80:	00000100 00000000 0003000e 00000000     ................
   17f90:	00000800 00000000 00090000 00000000     ................
   17fa0:	0a000000 00000000 00000000 0000000b     ................
   17fb0:	00000000 00000b01 00000000 000b0200     ................
   17fc0:	00000000 0b030000 00000000 00000000     ................
	...
   17fd8:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   17fe8:	01000000 00000000 00000000 00000007     ................
   17ff8:	00007300 00000700 00320000 00090000     .s........2.....
   18008:	02000000 07000000 00000000 00000021     ............!...
   18018:	00000009 00000400 00000900 00030000     ................
   18028:	00070000 61000000 07000000 00000000     .......a........
   18038:	00000024 00000007 00002500 00000700     $........%......
   18048:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   18058:	00000000 00000020 38000004 00003800     .... ......8.8..
   18068:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   18078:	04000000 00260000 00000026 66000004     ......&.&......f
   18088:	00006600 00000400 00370037 00040000     .f......7.7.....
   18098:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   180a8:	2e000004 00002e00 00000200 00404040     ............@@@.
   180b8:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   180c8:	0000006b 6c000004 00006c00 00000900     k......l.l......
   180d8:	00010000 00090000 00000000 07000000     ................
   180e8:	00000000 00000036 00000007 00003100     ....6........1..
   180f8:	00000700 00490000 00070000 4a000000     ......I........J
   18108:	07000000 00000000 0000004b 00000007     ........K.......
   18118:	00004c00 00000700 004d0000 00070000     .L........M.....
   18128:	3d000000 03000000 00000000 00000000     ...=............

00018138 <Clock_Ip_au16SelectorEntryHardwareValue>:
   18138:	01010a03 01010001 04040002 02000603     ................
   18148:	00010810 02020100 00000000 00000007     ................
   18158:	00000009 00000000 00000c0e 00000000     ................
	...

00018190 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   18190:	00020000 00000300 00000601 00000000     ................
	...

000181c0 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   181c0:	00000700 00000000 02020000 01010303     ................
   181d0:	03020606 00000000 00000000 00000000     ................
	...

000181f0 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   181f0:	00000001 00000000 02020000 01010303     ................
   18200:	03020606 00000000 00000000 00000000     ................
	...

00018220 <Clock_Ip_au8DividerValueHardwareValue>:
   18220:	00020100 00000003 00000004 00000000     ................
   18230:	00000005 00000000 00000000 00000000     ................
   18240:	00000006 00000000 00000000 00000000     ................
	...
   18260:	00000007                                ....

00018264 <Clock_Ip_apxScgPeriphAsyncDivs>:
   18264:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00018274 <Clock_Ip_aeSourceTypeClockName>:
   18274:	00000000 00000001 00000001 00000001     ................
   18284:	00000001 00000001 00000001 00000001     ................
   18294:	00000002 00000003 00000001 00000001     ................
   182a4:	00000001 00000001 00000002 00000002     ................
   182b4:	00000003 00000003 00000001 00000001     ................
   182c4:	00000004 00000004 00000004 00000004     ................
	...

00018330 <Clock_Ip_aeHwPllName>:
   18330:	00000009                                ....

00018334 <Clock_Ip_aeHwDfsName>:
   18334:	00000057                                W...

00018338 <Clock_Ip_axDividerCallbacks>:
   18338:	00002edd 00002ee7 00002f01 00002f1b     ........./.../..
   18348:	00002f35 00002f4f 00002f69 00002f83     5/..O/..i/.../..
   18358:	00002f9d 00002fb7 00002fd1 00002feb     ./.../.../.../..
   18368:	00003005 0000301f 00003039              .0...0..90..

00018374 <Clock_Ip_axDividerTriggerCallbacks>:
   18374:	000033ad 000033ad                       .3...3..

0001837c <Clock_Ip_axExtOscCallbacks>:
   1837c:	000033b9 000033b9 000033b9 000033c3     .3...3...3...3..
   1838c:	000033b9 000033cd 000033e7 00003401     .3...3...3...4..
   1839c:	00003485 00003499                       .4...4..

000183a4 <Clock_Ip_axFracDivCallbacks>:
   183a4:	00003659 00003659 00003663              Y6..Y6..c6..

000183b0 <Clock_Ip_axGateCallbacks>:
   183b0:	0000367d 00003687 00003787 000037a1     }6...6...7...7..
   183c0:	00003737 00003751 000036e7 00003701     77..Q7...6...7..
   183d0:	00003697 000036b1 000037d7 000037f1     .6...6...7...7..
   183e0:	00003827 00003841                       '8..A8..

000183e8 <Clock_Ip_axIntOscCallbacks>:
   183e8:	000039ed 000039ed 000039f7 00003a01     .9...9...9...:..
   183f8:	00003a1b 00003a35 00003a49 00003a63     .:..5:..I:..c:..
   18408:	00003a7d 00003a91 00003aab 00003ac5     }:...:...:...:..
   18418:	00003b6d 00003b87 00003ba1              m;...;...;..

00018424 <Clock_Ip_axCmuCallbacks>:
   18424:	0000413d 00004147 00004153 0000413d     =A..GA..SA..=A..

00018434 <Clock_Ip_axPllCallbacks>:
   18434:	0000415d 0000415d 00004167 0000415d     ]A..]A..gA..]A..
   18444:	00004173 0000417d 00004197 000041b1     sA..}A...A...A..
   18454:	00004255 00004241                       UB..AB..

0001845c <Clock_Ip_axPcfsCallbacks>:
   1845c:	000043b1                                .C..

00018460 <Clock_Ip_axSelectorCallbacks>:
   18460:	000043bd 000043bd 000043c7 000043e1     .C...C...C...C..
   18470:	000043bd 000043fb 00004415 0000442f     .C...C...D../D..
   18480:	00004449 00004463 0000447d 00004497     ID..cD..}D...D..
   18490:	000044b1 000044cb 000044e5 000044ff     .D...D...D...D..
   184a0:	00004519 00004533 0000454d 00004567     .E..3E..ME..gE..
   184b0:	00004581 0000459b                       .E...E..

000184b8 <ClockSource>:
   184b8:	00000000 00000008 00000002 00000005     ................
	...
   184d0:	00000009                                ....

000184d4 <ResetReasonArray>:
   184d4:	00000000 00000001 00000002 00000003     ................
   184e4:	00000004 00000005 00000006 00000007     ................
   184f4:	00000008 00000009 0000000a 0000000b     ................
   18504:	0000000c 0000000d 0000000e              ............

00018510 <Port_au32PortCiPortBaseAddr>:
   18510:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   18520:	4004d000                                ...@

00018524 <Port_au32PortCiGpioBaseAddr>:
   18524:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   18534:	400ff100                                ...@

00018538 <Adc_Ip_apxBase>:
   18538:	4003b000 40027000                       ...@.p.@

00018540 <Lpspi_Ip_apxBases>:
   18540:	4002c000 4002d000 4002e000              ...@...@...@

0001854c <Can_Ipw_apxStatus>:
   1854c:	1fff8e18 1fff9038                       ....8...

00018554 <Flexcan_Ip_apxBase>:
   18554:	40024000 40025000 4002b000              .@.@.P.@...@

00018560 <payload_code.3>:
   18560:	03020100 07060504 09090908 0a0a0a09     ................
   18570:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
   18580:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
   18590:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
   185a0:	0000000f                                ....

000185a4 <flexcanBase.2>:
   185a4:	40024000 40025000 4002b000              .@.@.P.@...@

000185b0 <maxMbNum.1>:
   185b0:	00000020 00000010 00000010               ...........

000185bc <flexcanBase.0>:
   185bc:	40024000                                .@.@

000185c0 <McuApis>:
   185c0:	00000000 000173a0 00000002 000173ac     .....s.......s..
   185d0:	00000008 000173bc 00000009 000173cc     .....s.......s..

000185e0 <McuErrors>:
   185e0:	00000011 000173e4 0000000f 000173fc     .....s.......s..
   185f0:	00000013 00017414 0000000b 00017430     .....t......0t..
   18600:	0000000c 00017430 00000010 00017430     ....0t......0t..

00018610 <PlatformApis>:
   18610:	00000020 00017448 00000021 00017458      ...Ht..!...Xt..
   18620:	00000022 0001746c 00000023 00017488     "...lt..#....t..
   18630:	00000024 000174a4                       $....t..

00018638 <PlatformErrors>:
   18638:	00000001 000174c4 00000004 000174d4     .....t.......t..
   18648:	00000002 000174f8                       .....t..

00018650 <PortApis>:
   18650:	00000000 00017510 00000001 0001751c     .....u.......u..
   18660:	00000004 00017534 00000002 00017548     ....4u......Hu..
   18670:	00000003 00017564                       ....du..

00018678 <PortErrors>:
   18678:	0000000a 0001757c 0000000e 00017590     ....|u.......u..
   18688:	0000000c 000173e4 000000f0 000173e4     .....s.......s..
   18698:	0000000d 000175b0 0000000f 000173fc     .....u.......s..
   186a8:	00000010 00017430                       ....0t..

000186b0 <DioApis>:
   186b0:	00000001 000175c8 00000000 000175dc     .....u.......u..
   186c0:	00000011 000175f0 00000005 00017604     .....u.......v..
   186d0:	00000004 0001761c 00000003 00017634     .....v......4v..
   186e0:	00000002 00017644 00000012 00017654     ....Dv......Tv..

000186f0 <DioErrors>:
   186f0:	00000021 0001766c 00000020 00017430     !...lv.. ...0t..
   18700:	0000000a 00017688 00000014 000176a0     .....v.......v..
   18710:	0000001f 000176b0 000000f0 000176cc     .....v.......v..

00018720 <PwmApis>:
   18720:	00000000 000176e8 00000001 000176f4     .....v.......v..
   18730:	00000002 00017704 00000003 00017718     .....w.......w..
   18740:	00000004 00017730 00000008 00017748     ....0w......Hw..

00018750 <PwmErrors>:
   18750:	00000010 00017760 00000011 000173fc     ....`w.......s..
   18760:	00000014 00017414 00000012 00017778     .....t......xw..
   18770:	00000013 0001778c 00000015 00017430     .....w......0t..

00018780 <AdcApis>:
   18780:	00000000 000177b0 00000001 000177bc     .....w.......w..
   18790:	00000002 000177cc 00000003 000177e8     .....w.......w..
   187a0:	00000004 00017804 00000009 00017814     .....x.......x..
   187b0:	00000029 0001782c 0000000c 0001783c     )...,x......<x..
   187c0:	0000000a 00017854                       ....Tx..

000187c8 <AdcErrors>:
   187c8:	0000000a 000173fc 0000000d 00017414     .....s.......t..
   187d8:	00000014 000174c4 00000015 0001786c     .....t......lx..
   187e8:	00000019 00017880 0000002b 000178a0     .....x..+....x..

000187f8 <SchedulerApis>:
   187f8:	00000000 000178c0 00000002 000178d4     .....x.......x..
   18808:	00000003 000178f0 00000004 00017908     .....x.......y..
   18818:	00000005 00017920 00000006 00017938     .... y......8y..
   18828:	00000007 00017950 00000008 00017968     ....Py......hy..
   18838:	00000009 00017980 0000000a 00017998     .....y.......y..
   18848:	0000000b 000179b0 0000000c 000179c8     .....y.......y..
   18858:	0000000d 000179e0                       .....y..

00018860 <SchedulerErrors>:
   18860:	00000000 00017760 00000001 000179fc     ....`w.......y..
   18870:	00000002 00017a14 00000003 00017a30     .....z......0z..
   18880:	00000004 00017a48 00000005 00017a6c     ....Hz......lz..
   18890:	00000006 00017a84                       .....z..

00018898 <HwIoAb_ButtonsApis>:
   18898:	00000000 00017a9c 00000001 00017ab4     .....z.......z..
   188a8:	00000002 00017ad0                       .....z..

000188b0 <HwIoAb_ButtonsErrors>:
   188b0:	00000000 00017760 00000001 00017af0     ....`w.......z..
   188c0:	00000002 00017b04 00000003 00017b1c     .....{.......{..

000188d0 <HwIoAb_LedsApis>:
   188d0:	00000000 00017b34 00000001 00017b48     ....4{......H{..
   188e0:	00000002 00017b60 00000003 00017b78     ....`{......x{..

000188f0 <HwIoAb_LedsErrors>:
   188f0:	00000000 00017760 00000001 00017b94     ....`w.......{..
   18900:	00000002 00017b1c                       .....{..

00018908 <HwIoAb_PotsApis>:
   18908:	00000000 00017ba4 00000001 00017bb8     .....{.......{..
   18918:	00000002 00017bd0                       .....{..

00018920 <HwIoAb_PotsErrors>:
   18920:	00000000 00017bec 00000001 00017b1c     .....{.......{..

00018930 <HwIoAb_BuzzerApis>:
   18930:	00000000 00017c04 00000001 00017c1c     .....|.......|..
   18940:	00000002 00017c34                       ....4|..

00018948 <HwIoAb_BuzzerErrors>:
   18948:	00000000 00017c4c                       ....L|..

00018950 <ModuleStrings>:
   18950:	00000065 00017c60 00000004 000185c0     e...`|..........
   18960:	00000006 000185e0 000000ff 00017c6c     ............l|..
   18970:	00000005 00018610 00000003 00018638     ............8...
   18980:	0000007c 00017c7c 00000005 00018650     |...||......P...
   18990:	00000007 00018678 00000078 00017c88     ....x...x....|..
   189a0:	00000008 000186b0 00000006 000186f0     ................
   189b0:	00000079 00017c94 00000006 00018720     y....|...... ...
   189c0:	00000006 00018750 0000007b 00017ca0     ....P...{....|..
   189d0:	00000009 00018780 00000006 000187c8     ................
   189e0:	0000012c 00017cac 0000000d 000187f8     ,....|..........
   189f0:	00000007 00018860 0000012d 00017cc0     ....`...-....|..
   18a00:	00000003 00018898 00000004 000188b0     ................
   18a10:	0000012e 00017ce0 00000004 000188d0     .....|..........
   18a20:	00000003 000188f0 0000012f 00017cfc     ......../....|..
   18a30:	00000003 00018908 00000002 00018920     ............ ...
   18a40:	00000130 00017d18 00000003 00018930     0....}......0...
   18a50:	00000001 00018948                       ....H...

00018a58 <Can_43_FLEXCAN_Driver_P2Func>:
   18a58:	0000a659 0000a2d5 0000a479 0000a419     Y.......y.......
   18a68:	0000a4f1 0000a57d 0000a5b1 0000a605     ....}...........

00018a78 <Can_43_FLEXCAN_Driver_Config>:
   18a78:	00040000 00018a58                       ....X...

00018a80 <CanIf_CtrlPCConfig>:
   18a80:	00000000 00018a78 00000101 00018a78     ....x.......x...

00018a90 <CanIf_PCConfig>:
   18a90:	00000002 00018a80                       ........

00018a98 <CanIf_TxPdu>:
   18a98:	00000000 00000100 00000002 00010002     ................
   18aa8:	00000989 00000001 00000300 00000002     ................
   18ab8:	00000003 000009dd                       ........

00018ac0 <CanIf_RxPdu>:
   18ac0:	00010000 00010003 000009c1 00010001     ................
   18ad0:	00000003 00000a15                       ........

00018ad8 <CanIf_Can_43_FLEXCAN_HohToRxPduMapping>:
   18ad8:	00018ac0 00018acc 00000000 00000000     ................

00018ae8 <CanIf_Can_43_FLEXCAN_DrvConfig>:
   18ae8:	00018ad8                                ....

00018aec <CanIf_CanDrvConfig>:
   18aec:	00018ae8                                ....

00018af0 <CanIf_Config>:
   18af0:	00000202 00018aec 00018ac0 00018a98     ................

00018b00 <Can_43_FLEXCANIpwHwChannelConfig0>:
   18b00:	00019078                                x...

00018b04 <Can_43_FLEXCANIpwHwChannelConfig1>:
   18b04:	000190c8                                ....

00018b08 <Can_au32HwBufferAddr_Ctrl0>:
   18b08:	4002b080 4002b090                       ...@...@

00018b10 <Can_au32HwBufferAddr_Ctrl1>:
   18b10:	40024080 40024090                       .@.@.@.@

00018b18 <Can_aHwFilter_Object0>:
   18b18:	00000200 dffc0000                       ........

00018b20 <Can_aHwFilter_Object1>:
   18b20:	00000400 dffc0000                       ........

00018b28 <Can_aCtrlOffsetToCtrlIDMap>:
   18b28:	0000ff01                                ....

00018b2c <Can_aHwObjIDToCtrlIDMap>:
   18b2c:	00010001                                ....

00018b30 <Can_aHwObjectConfig>:
	...
   18b3c:	ff010000 00010008 00018b18 00000000     ................
   18b4c:	00000000 00018b10 00000001 00000000     ................
   18b5c:	00000000 ff010000 00010008 00018b20     ............ ...
	...
   18b74:	00018b08 00000002 00000001 00000000     ................
   18b84:	ff010000 00000008 00000000 00000003     ................
   18b94:	00000001 00018b14 00000003 00000001     ................
   18ba4:	00000000 ff010000 00000008 00000000     ................
   18bb4:	00000003 00000001 00018b0c              ............

00018bc0 <Can_aBaudrateConfig_Ctrl0>:
   18bc0:	06030000 001d0003 00000000 00000000     ................
	...

00018bd8 <Can_apHwObject_Ctrl0>:
   18bd8:	00018b54 00018b9c                       T.......

00018be0 <Can_aBaudrateConfig_Ctrl1>:
   18be0:	06030000 001d0003 00000000 00000000     ................
	...

00018bf8 <Can_apHwObject_Ctrl1>:
   18bf8:	00018b30 00018b78                       0...x...

00018c00 <Can_aControllerConfig>:
   18c00:	00020000 4002b000 00000001 ffffffff     .......@........
	...
   18c1c:	00010000 00018bc0 00018b00 00000002     ................
   18c2c:	00018bd8 00000101 40024000 00000001     .........@.@....
   18c3c:	ffffffff 00000000 00000000 00000000     ................
   18c4c:	00010000 00018be0 00018b04 00000002     ................
   18c5c:	00018bf8                                ....

00018c60 <Can_apController>:
   18c60:	00018c00 00018c30                       ....0...

00018c68 <Can_43_FLEXCAN_Config>:
   18c68:	00000000 00000002 00018b28 00018b2c     ........(...,...
   18c78:	00018b30 00018c60                       0...`...

00018c80 <Mcu_aClockConfigPB>:
	...
   18c88:	14000002 0400000e 01000020 00000002     ........ .......
   18c98:	01000001 00000001 00000005 00000001     ................
   18ca8:	00000000 00000057 00000000 00000000     ....W...........
	...
   18cc0:	00000057 00000000 00000057 00000000     W.......W.......
	...
   18ce8:	00000019 00000005 0000001a 00000002     ................
   18cf8:	0000001b 00000005 0000002a 00000002     ........*.......
   18d08:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   18d18:	00000041 00000000 00000042 00000000     A.......B.......
   18d28:	00000031 0000000b 00000045 00000000     1.......E.......
   18d38:	00000046 0000000b 00000047 00000000     F.......G.......
   18d48:	00000044 00000000 00000030 0000000b     D.......0.......
   18d58:	0000003d 00000000 00000043 00000000     =.......C.......
   18d68:	00000049 00000000 0000004a 00000000     I.......J.......
   18d78:	0000004b 00000000 00000048 00000000     K.......H.......
   18d88:	00000057 00000057 00000057 00000057     W...W...W...W...
   18d98:	00000057 00000057 00000057 00000057     W...W...W...W...
   18da8:	00000057 00000057 00000057 00000057     W...W...W...W...
   18db8:	00000057 00000057 00000057 00000057     W...W...W...W...
   18dc8:	0000000a 00000001 00000000 0000000b     ................
   18dd8:	00000001 00000000 0000000c 00000001     ................
   18de8:	00000000 0000000d 00000002 00000000     ................
   18df8:	0000001d 00000001 00000000 0000001e     ................
   18e08:	00000002 00000000 0000001f 00000001     ................
   18e18:	00000000 00000021 00000001 00000000     ....!...........
   18e28:	00000022 00000002 00000000 00000023     "...........#...
   18e38:	00000001 00000000 00000025 00000002     ........%.......
   18e48:	00000000 00000026 00000004 00000000     ....&...........
   18e58:	00000027 00000002 00000000 00000048     '...........H...
   18e68:	00000001 00000001 00000057 00000000     ........W.......
   18e78:	00000000 00000057 00000000 00000000     ....W...........
   18e88:	00000057 00000000 00000000 00000057     W...........W...
	...
   18ea0:	00000057 00000000 00000000 00000057     W...........W...
	...
   18eb8:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   18ed4:	00000014 00007d00 00000015 00007d00     .....}.......}..
   18ee4:	00000016 00007d00 00000017 00008000     .....}..........
   18ef4:	00000030 00000001 00000031 00000001     0.......1.......
   18f04:	00000033 00000000 00000034 00000000     3.......4.......
   18f14:	00000036 00000000 00000039 00000000     6.......9.......
   18f24:	0000003a 00000001 0000003b 00000000     :.......;.......
   18f34:	0000003c 00000001 0000003d 00000000     <.......=.......
   18f44:	0000003e 00000000 0000003f 00000000     >.......?.......
   18f54:	00000040 00000001 00000041 00000000     @.......A.......
   18f64:	00000042 00000000 00000043 00000000     B.......C.......
   18f74:	00000044 00000000 00000045 00000000     D.......E.......
   18f84:	00000046 00000001 00000047 00000000     F.......G.......
   18f94:	00000048 00000000 00000049 00000000     H.......I.......
   18fa4:	0000004a 00000000 0000004b 00000000     J.......K.......
   18fb4:	0000004e 00000001 0000004f 00000001     N.......O.......
   18fc4:	00000050 00000001 00000051 00000001     P.......Q.......
   18fd4:	00000052 00000001 00000053 00000001     R.......S.......
   18fe4:	00000054 00000001 00000055 00000000     T.......U.......
   18ff4:	00000057 00000000 00000057 00000000     W.......W.......
   19004:	00000057 00000000 00000057 00000000     W.......W.......
   19014:	00000057 00000000 00000057 00000000     W.......W.......
   19024:	00000057 00000000 00000057 00000000     W.......W.......
   19034:	00000057 00000000 00000057 00000000     W.......W.......
   19044:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00019078 <Flexcan_aCtrlConfigPB>:
   19078:	00000002 00000000 00000000 00000000     ................
   19088:	00000040 00000000 00000100 00000003     @...............
   19098:	00000006 00000003 0000001d 00000000     ................
   190a8:	00000004 00000006 00000003 0000001d     ................
	...
   190c0:	0000b859 0000b905 00000002 00000000     Y...............
	...
   190d8:	00000040 00000000 00000100 00000003     @...............
   190e8:	00000006 00000003 0000001d 00000000     ................
   190f8:	00000004 00000006 00000003 0000001d     ................
	...
   19110:	0000b859 0000b905                       Y.......

00019118 <aIrqConfiguration>:
   19118:	00000027 00000000 0000836d 00000028     '.......m...(...
   19128:	00000000 0000837d 0000005c 00000f01     ....}...\.......
   19138:	0000fd85 0000005d 00000f01 0000fd95     ....]...........
   19148:	0000005f 00000f01 0000fda5 0000004e     _...........N...
   19158:	00000f01 0000fcf5 0000004f 00000f01     ........O.......
   19168:	0000fd05 00000051 00000f01 0000fd15     ....Q...........

00019178 <intCtrlConfig>:
   19178:	00000008 00019118                       ........

00019180 <Lpspi_Ip_DeviceAttributes_Conf0Spi1Cs3>:
   19180:	00000001 07070606 43200000 1fff8b28     .......... C(...

00019190 <Lpspi_Ip_PhyUnitConfig_SPI1>:
   19190:	00000001 00000000 00000001 00000000     ................
   191a0:	00000000                                ....

000191a4 <Mcu_Config>:
   191a4:	0000005a 00000000 00000001 00000001     Z...............
   191b4:	00019840 00018c80 0001984c              @.......L...

000191c0 <OsIf_xPredefinedConfig>:
   191c0:	00000000 02dc6c00                       .....l..

000191c8 <OsIf_apxPredefinedConfig>:
   191c8:	000191c0                                ....

000191cc <Platform_uConfiguration>:
   191cc:	000191d4                                ....

000191d0 <Platform_Config>:
   191d0:	000191cc                                ....

000191d4 <ipwConfig>:
   191d4:	00019178 00000000                       x.......

000191dc <Port_au16PinDescription>:
   191dc:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   191ec:	0001ffff 0003ffff 0003ffff 0003ffff     ................
   191fc:	0003ffff 0001ffff 0003ffcf 0003ffff     ................
   1920c:	0003ffff 0003fcff 0001dfef 0003f36f     ............o...
   1921c:	0003fe3f 0003f3ff 00026e3f 0001bebf     ?.......?n......
   1922c:	0002cf9f 0000302f 000030cc 000183ef     ..../0...0......
   1923c:	0001ec7c 00000b1f 00000023 00000010     |.......#.......
   1924c:	0001010c 00000033 000072cf 0000003c     ....3....r..<...
   1925c:	0000cff3 00001b2f 00018c7f 00000433     ..../.......3...
   1926c:	00000000 00000030 0000600b 00018c38     ....0....`..8...

0001927c <g_pin_mux_InitConfigArr>:
   1927c:	4004b000 400ff080 00000008 00000002     ...@...@........
   1928c:	00000001 00000002 00000000 00000000     ................
	...
   192a4:	4004b000 400ff080 00000009 00000002     ...@...@........
   192b4:	00000001 00000002 00000000 00000000     ................
	...
   192cc:	4004b000 400ff080 0000000a 00000002     ...@...@........
   192dc:	00000001 00000002 00000000 00000000     ................
	...
   192f4:	4004b000 400ff080 0000000b 00000002     ...@...@........
   19304:	00000001 00000002 00000000 00000000     ................
	...
   1931c:	4004b000 400ff080 0000000d 00000002     ...@...@........
   1932c:	00000001 00000002 00000000 00000000     ................
	...
   19344:	4004b000 400ff080 0000000e 00000002     ...@...@........
   19354:	00000001 00000002 00000000 00000000     ................
	...
   1936c:	4004b000 00000000 00000010 00000002     ...@............
   1937c:	00000003 00000001 00000000 00000000     ................
	...
   19394:	4004b000 00000000 00000011 00000002     ...@............
   193a4:	00000003 00000002 00000000 00000000     ................
	...
   193bc:	4004d000 400ff100 0000000c 00000002     ...@...@........
   193cc:	00000001 00000001 00000000 00000000     ................
	...
   193e4:	4004d000 00000000 00000004 00000002     ...@............
   193f4:	00000005 00000001 00000000 00000000     ................
	...
   1940c:	4004d000 00000000 00000005 00000002     ...@............
   1941c:	00000005 00000002 00000000 00000000     ................
	...
   19434:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   19444:	00000001 00000001 00000000 00000000     ................
	...
   1945c:	40049000 400ff000 0000000c 00000002     ...@...@........
   1946c:	00000001 00000001 00000000 00000000     ................
	...
   19484:	40049000 00000000 0000000d 00000002     ...@............
   19494:	00000002 00000002 00000000 00000000     ................
	...
   194ac:	4004a000 00000000 00000001 00000002     ...@............
   194bc:	00000000 00000001 00000000 00000000     ................
	...
   194d4:	4004a000 00000000 0000000d 00000002     ...@............
   194e4:	00000000 00000001 00000000 00000000     ................
	...
   194fc:	4004a000 00000000 0000000e 00000002     ...@............
   1950c:	00000003 00000002 00000000 00000000     ................
	...
   19524:	4004a000 00000000 0000000f 00000002     ...@............
   19534:	00000003 00000001 00000000 00000000     ................
	...
   1954c:	4004a000 00000000 00000010 00000002     ...@............
   1955c:	00000003 00000002 00000000 00000000     ................
	...
   19574:	4004a000 00000000 00000011 00000002     ...@............
   19584:	00000003 00000002 00000000 00000000     ................
	...

0001959c <au8Port_PartitionList>:
   1959c:	00000001                                ....

000195a0 <au32Port_PinToPartitionMap>:
   195a0:	00000001 00000001 00000001 00000001     ................
   195b0:	00000001 00000001 00000001 00000001     ................
   195c0:	00000001 00000001 00000001 00000001     ................
   195d0:	00000001 00000001 00000001 00000001     ................
   195e0:	00000001 00000001 00000001 00000001     ................

000195f0 <Port_au16NoUnUsedPadsArrayDefault>:
   195f0:	00010000 00030002 00070006 00090008     ................
   19600:	000e000b 0010000f 00200011 00230022     .......... .".#.
   19610:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   19620:	0040002c 00420041 00460043 004c0047     ,.@.A.B.C.F.G.L.
   19630:	0060004f 00620061 00640063 00660065     O.`.a.b.c.d.e.f.
   19640:	00680067 006a0069 006c006b 006e006d     g.h.i.j.k.l.m.n.
   19650:	0070006f 00810080 00830082 00870086     o.p.............
   19660:	00890088 008b008a 008e008d 0090008f     ................

00019670 <Port_UnUsedPin>:
   19670:	00000000 00000001 00000000              ............

0001967c <Port_aPinConfigDefault>:
   1967c:	00000048 00000100 00000000 00000002     H...............
   1968c:	00010001 00000049 00000100 00000000     ....I...........
   1969c:	00000002 00010101 0000004a 00000100     ........J.......
   196ac:	00000000 00000002 00010101 0000008c     ................
   196bc:	00000100 00000000 00000001 00010101     ................
   196cc:	0000004b 00000100 00000000 00000002     K...............
   196dc:	00010101 0000004d 00000100 00000000     ....M...........
   196ec:	00000002 00010101 0000004e 00000100     ........N.......
   196fc:	00000000 00000002 00010101 00000071     ............q...
   1970c:	00000100 00000000 00000001 00010101     ................
   1971c:	0000000c 00000100 00000000 00000001     ................
   1972c:	00010101 00000021 00000000 00000002     ....!...........
   1973c:	00000000 00010000 0000002d 00000000     ........-.......
   1974c:	00000002 00000000 00010000 0000000d     ................
   1975c:	00000200 00000000 00000002 00010000     ................
   1976c:	00000050 00000300 00000000 00000001     P...............
   1977c:	00010000 00000051 00000300 00000000     ....Q...........
   1978c:	00000002 00010000 0000002e 00000300     ................
   1979c:	00000000 00000002 00010000 0000002f     ............/...
   197ac:	00000300 00000000 00000001 00010000     ................
   197bc:	00000030 00000300 00000000 00000002     0...............
   197cc:	00010000 00000031 00000300 00000000     ....1...........
   197dc:	00000002 00010000 00000084 00000500     ................
   197ec:	00000000 00000001 00010000 00000085     ................
   197fc:	00000500 00000000 00000002 00010000     ................

0001980c <Port_Config>:
   1980c:	00400014 000195f0 00019670 0001967c     ..@.....p...|...
	...
   19824:	000195a0 0001959c 0001927c              ........|...

00019830 <Power_Ip_RCM_ConfigPB>:
	...

00019838 <Power_Ip_PMC_ConfigPB>:
   19838:	00000000                                ....

0001983c <Power_Ip_SMC_ConfigPB>:
   1983c:	00000000                                ....

00019840 <Power_Ip_aModeConfigPB>:
	...

0001984c <Power_Ip_HwIPsConfigPB>:
   1984c:	00019830 00019838 0001983c              0...8...<...

00019858 <Spi_ExternalDeviceConfig_Conf0Spi1Cs3>:
   19858:	00000000 00000001 00019180 00000000     ................

00019868 <Spi_aExternalDeviceConfigList>:
   19868:	00019858                                X...

0001986c <Spi_HwUnitConfig_SPI1>:
   1986c:	00000000 00000001 00000000 00019190     ................
   1987c:	00000001                                ....

00019880 <Spi_aHwUnitConfigList>:
   19880:	0001986c                                l...

00019884 <Spi_ChannelConfig_Spi1Cs3_Control>:
   19884:	00000001 00000008 00000001 00000004     ................
   19894:	1fff98f8 00000000 1fff8df8              ............

000198a0 <Spi_ChannelConfig_Spi1Cs3_Data>:
   198a0:	00000001 00000008 00000001 00000004     ................
   198b0:	1fff9904 00000000 1fff8dfc              ............

000198bc <Spi_aChannelConfigList>:
   198bc:	00019884 000198a0                       ........

000198c4 <Spi_Spi1Cs3_W_R_Job_ChannelAssignment>:
   198c4:	00000100                                ....

000198c8 <Spi_JobConfig_Spi1Cs3_W_R_Job>:
   198c8:	00000002 000198c4 00000000 00000000     ................
	...
   198e0:	1fff8df4 00000000 00019868              ........h...

000198ec <Spi_aJobConfigList>:
   198ec:	000198c8                                ....

000198f0 <Spi_Spi1Cs3_Sequence_W_R_JobAssignment>:
   198f0:	00000000                                ....

000198f4 <Spi_SequenceConfig_Spi1Cs3_Sequence_W_R>:
   198f4:	00000001 00000000 000198f0 00000000     ................
   19904:	00000000                                ....

00019908 <Spi_aSequenceConfigList>:
   19908:	000198f4                                ....

0001990c <Spi_Config>:
   1990c:	00010001 00000000 00000000 000198bc     ................
   1991c:	000198ec 00019908 00019868 00019880     ........h.......

0001992c <_aInitStr.0>:
   1992c:	00000000 54540000 45522052 53454747     ......TTR REGGES
   1993c:	00000000                                ....

00019940 <_aV2C.0>:
   19940:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00019950 <__INIT_TABLE>:
   19950:	00000002 	.word	0x00000002
   19954:	1fff8b10 	.word	0x1fff8b10
   19958:	00019978 	.word	0x00019978
   1995c:	00019998 	.word	0x00019998
   19960:	1fff8800 	.word	0x1fff8800
   19964:	00000000 	.word	0x00000000
   19968:	00000310 	.word	0x00000310

0001996c <__ZERO_TABLE>:
   1996c:	00000001 	.word	0x00000001
   19970:	1fff8b30 	.word	0x1fff8b30
   19974:	1fff9dd0 	.word	0x1fff9dd0
